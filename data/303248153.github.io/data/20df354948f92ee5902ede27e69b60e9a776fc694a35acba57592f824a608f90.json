{
  "Source": "303248153.github.io",
  "Title": "CoreCLR源码探索(八) JIT的工作原理(详解篇)",
  "Link": "https://303248153.github.io/coreclr-08/",
  "Content": "\u003carticle class=\"post\"\u003e\n  \u003ch1\u003eCoreCLR源码探索(八) JIT的工作原理(详解篇)\u003c/h1\u003e\n\n  \u003cdiv class=\"entry\"\u003e\n    \u003cp\u003e在\u003ca href=\"https://303248153.github.io/coreclr-07/\"\u003e上一篇\u003c/a\u003e我们对CoreCLR中的JIT有了一个基础的了解,\n这一篇我们将更详细分析JIT的实现.\u003c/p\u003e\n\n\u003cp\u003eJIT的实现代码主要在\u003ca href=\"https://github.com/dotnet/coreclr/tree/master/src/jit\"\u003ehttps://github.com/dotnet/coreclr/tree/master/src/jit\u003c/a\u003e下,\n要对一个的函数的JIT过程进行详细分析, 最好的办法是查看JitDump.\n查看JitDump需要自己编译一个Debug版本的CoreCLR, windows可以\u003ca href=\"https://github.com/dotnet/coreclr/blob/master/Documentation/building/windows-instructions.md\"\u003e看这里\u003c/a\u003e, linux可以\u003ca href=\"https://github.com/dotnet/coreclr/blob/master/Documentation/building/linux-instructions.md\"\u003e看这里\u003c/a\u003e,\n编译完以后定义环境变量\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCOMPlus_JitDump=Main\u003c/code\u003e, Main可以换成其他函数的名称, 然后使用该Debug版本的CoreCLR执行程序即可.\u003c/p\u003e\n\n\u003cp\u003eJitDump的例子可以\u003ca href=\"https://gist.github.com/303248153/f15f3a6a2013a411e770d72c16c2f633\"\u003e看这里\u003c/a\u003e, 包含了Debug模式和Release模式的输出.\u003c/p\u003e\n\n\u003cp\u003e接下来我们来结合代码一步步的看JIT中的各个过程.\n以下的代码基于CoreCLR 1.1.0和x86/x64分析, 新版本可能会有变化.\n(为什么是1.1.0? 因为JIT部分我看了半年时间, 开始看的时候2.0还未出来)\u003c/p\u003e\n\n\u003ch1 id=\"jit的触发\"\u003eJIT的触发\u003c/h1\u003e\n\n\u003cp\u003e在上一篇中我提到了, 触发JIT编译会在第一次调用函数时, 会从桩(Stub)触发:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171028110034726-907990171.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e这就是JIT Stub实际的样子, 函数第一次调用前\u003ca href=\"https://github.com/dotnet/coreclr/blob/release/1.1.0/Documentation/botr/method-descriptor.md\"\u003eFixup Precode\u003c/a\u003e的状态:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eFixup Precode:\n\n(lldb) di --frame --bytes\n-\u0026gt; 0x7fff7c21f5a8: e8 2b 6c fe ff     callq  0x7fff7c2061d8\n   0x7fff7c21f5ad: 5e                 popq   %rsi\n   0x7fff7c21f5ae: 19 05 e8 23 6c fe  sbbl   %eax, -0x193dc18(%rip)\n   0x7fff7c21f5b4: ff 5e a8           lcalll *-0x58(%rsi)\n   0x7fff7c21f5b7: 04 e8              addb   $-0x18, %al\n   0x7fff7c21f5b9: 1b 6c fe ff        sbbl   -0x1(%rsi,%rdi,8), %ebp\n   0x7fff7c21f5bd: 5e                 popq   %rsi\n   0x7fff7c21f5be: 00 03              addb   %al, (%rbx)\n   0x7fff7c21f5c0: e8 13 6c fe ff     callq  0x7fff7c2061d8\n   0x7fff7c21f5c5: 5e                 popq   %rsi\n   0x7fff7c21f5c6: b0 02              movb   $0x2, %al\n(lldb) di --frame --bytes \n-\u0026gt; 0x7fff7c2061d8: e9 13 3f 9d 79                 jmp    0x7ffff5bda0f0            ; PrecodeFixupThunk\n   0x7fff7c2061dd: cc                             int3   \n   0x7fff7c2061de: cc                             int3   \n   0x7fff7c2061df: cc                             int3   \n   0x7fff7c2061e0: 49 ba 00 da d0 7b ff 7f 00 00  movabsq $0x7fff7bd0da00, %r10\n   0x7fff7c2061ea: 40 e9 e0 ff ff ff              jmp    0x7fff7c2061d0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这两段代码只有第一条指令是相关的, 注意callq后面的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5e 19 05\u003c/code\u003e, 这些并不是汇编指令而是函数的信息, 下面会提到.\n接下来跳转到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFixup Precode Chunk\u003c/code\u003e, 从这里开始的代码所有函数都会共用:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eFixup Precode Chunk:\n\n(lldb) di --frame --bytes\n-\u0026gt; 0x7ffff5bda0f0 \u0026lt;PrecodeFixupThunk\u0026gt;: 58              popq   %rax                         ; rax = 0x7fff7c21f5ad\n   0x7ffff5bda0f1 \u0026lt;PrecodeFixupThunk+1\u0026gt;: 4c 0f b6 50 02  movzbq 0x2(%rax), %r10            ; r10 = 0x05 (precode chunk index)\n   0x7ffff5bda0f6 \u0026lt;PrecodeFixupThunk+6\u0026gt;: 4c 0f b6 58 01  movzbq 0x1(%rax), %r11            ; r11 = 0x19 (methoddesc chunk index)\n   0x7ffff5bda0fb \u0026lt;PrecodeFixupThunk+11\u0026gt;: 4a 8b 44 d0 03  movq   0x3(%rax,%r10,8), %rax    ; rax = 0x7fff7bdd5040 (methoddesc chunk)\n   0x7ffff5bda100 \u0026lt;PrecodeFixupThunk+16\u0026gt;: 4e 8d 14 d8     leaq   (%rax,%r11,8), %r10       ; r10 = 0x7fff7bdd5108 (methoddesc)\n   0x7ffff5bda104 \u0026lt;PrecodeFixupThunk+20\u0026gt;: e9 37 ff ff ff  jmp    0x7ffff5bda040            ; ThePreStub\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这段代码的源代码在\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/vm/amd64/unixasmhelpers.S\"\u003evm\\amd64\\unixasmhelpers.S\u003c/a\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eLEAF_ENTRY PrecodeFixupThunk, _TEXT\n\n        pop     rax         // Pop the return address. It points right after the call instruction in the precode.\n\n        // Inline computation done by FixupPrecode::GetMethodDesc()\n        movzx   r10,byte ptr [rax+2]    // m_PrecodeChunkIndex\n        movzx   r11,byte ptr [rax+1]    // m_MethodDescChunkIndex\n        mov     rax,qword ptr [rax+r10*8+3]\n        lea     METHODDESC_REGISTER,[rax+r11*8]\n\n        // Tail call to prestub\n        jmp C_FUNC(ThePreStub)\n\nLEAF_END PrecodeFixupThunk, _TEXT\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epopq %rax\u003c/code\u003e后rax会指向刚才callq后面的地址, 再根据后面储存的索引值可以得到编译函数的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eMethodDesc\u003c/code\u003e, 接下来跳转到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eThe PreStub\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eThePreStub:\n\n(lldb) di --frame --bytes\n-\u0026gt; 0x7ffff5bda040 \u0026lt;ThePreStub\u0026gt;: 55                       pushq  %rbp\n   0x7ffff5bda041 \u0026lt;ThePreStub+1\u0026gt;: 48 89 e5                 movq   %rsp, %rbp\n   0x7ffff5bda044 \u0026lt;ThePreStub+4\u0026gt;: 53                       pushq  %rbx\n   0x7ffff5bda045 \u0026lt;ThePreStub+5\u0026gt;: 41 57                    pushq  %r15\n   0x7ffff5bda047 \u0026lt;ThePreStub+7\u0026gt;: 41 56                    pushq  %r14\n   0x7ffff5bda049 \u0026lt;ThePreStub+9\u0026gt;: 41 55                    pushq  %r13\n   0x7ffff5bda04b \u0026lt;ThePreStub+11\u0026gt;: 41 54                    pushq  %r12\n   0x7ffff5bda04d \u0026lt;ThePreStub+13\u0026gt;: 41 51                    pushq  %r9\n   0x7ffff5bda04f \u0026lt;ThePreStub+15\u0026gt;: 41 50                    pushq  %r8\n   0x7ffff5bda051 \u0026lt;ThePreStub+17\u0026gt;: 51                       pushq  %rcx\n   0x7ffff5bda052 \u0026lt;ThePreStub+18\u0026gt;: 52                       pushq  %rdx\n   0x7ffff5bda053 \u0026lt;ThePreStub+19\u0026gt;: 56                       pushq  %rsi\n   0x7ffff5bda054 \u0026lt;ThePreStub+20\u0026gt;: 57                       pushq  %rdi\n   0x7ffff5bda055 \u0026lt;ThePreStub+21\u0026gt;: 48 8d a4 24 78 ff ff ff  leaq   -0x88(%rsp), %rsp         ; allocate transition block\n   0x7ffff5bda05d \u0026lt;ThePreStub+29\u0026gt;: 66 0f 7f 04 24           movdqa %xmm0, (%rsp)             ; fill transition block\n   0x7ffff5bda062 \u0026lt;ThePreStub+34\u0026gt;: 66 0f 7f 4c 24 10        movdqa %xmm1, 0x10(%rsp)         ; fill transition block\n   0x7ffff5bda068 \u0026lt;ThePreStub+40\u0026gt;: 66 0f 7f 54 24 20        movdqa %xmm2, 0x20(%rsp)         ; fill transition block\n   0x7ffff5bda06e \u0026lt;ThePreStub+46\u0026gt;: 66 0f 7f 5c 24 30        movdqa %xmm3, 0x30(%rsp)         ; fill transition block\n   0x7ffff5bda074 \u0026lt;ThePreStub+52\u0026gt;: 66 0f 7f 64 24 40        movdqa %xmm4, 0x40(%rsp)         ; fill transition block\n   0x7ffff5bda07a \u0026lt;ThePreStub+58\u0026gt;: 66 0f 7f 6c 24 50        movdqa %xmm5, 0x50(%rsp)         ; fill transition block\n   0x7ffff5bda080 \u0026lt;ThePreStub+64\u0026gt;: 66 0f 7f 74 24 60        movdqa %xmm6, 0x60(%rsp)         ; fill transition block\n   0x7ffff5bda086 \u0026lt;ThePreStub+70\u0026gt;: 66 0f 7f 7c 24 70        movdqa %xmm7, 0x70(%rsp)         ; fill transition block\n   0x7ffff5bda08c \u0026lt;ThePreStub+76\u0026gt;: 48 8d bc 24 88 00 00 00  leaq   0x88(%rsp), %rdi          ; arg 1 = transition block*\n   0x7ffff5bda094 \u0026lt;ThePreStub+84\u0026gt;: 4c 89 d6                 movq   %r10, %rsi                ; arg 2 = methoddesc\n   0x7ffff5bda097 \u0026lt;ThePreStub+87\u0026gt;: e8 44 7e 11 00           callq  0x7ffff5cf1ee0            ; PreStubWorker at prestub.cpp:958\n   0x7ffff5bda09c \u0026lt;ThePreStub+92\u0026gt;: 66 0f 6f 04 24           movdqa (%rsp), %xmm0\n   0x7ffff5bda0a1 \u0026lt;ThePreStub+97\u0026gt;: 66 0f 6f 4c 24 10        movdqa 0x10(%rsp), %xmm1\n   0x7ffff5bda0a7 \u0026lt;ThePreStub+103\u0026gt;: 66 0f 6f 54 24 20        movdqa 0x20(%rsp), %xmm2\n   0x7ffff5bda0ad \u0026lt;ThePreStub+109\u0026gt;: 66 0f 6f 5c 24 30        movdqa 0x30(%rsp), %xmm3\n   0x7ffff5bda0b3 \u0026lt;ThePreStub+115\u0026gt;: 66 0f 6f 64 24 40        movdqa 0x40(%rsp), %xmm4\n   0x7ffff5bda0b9 \u0026lt;ThePreStub+121\u0026gt;: 66 0f 6f 6c 24 50        movdqa 0x50(%rsp), %xmm5\n   0x7ffff5bda0bf \u0026lt;ThePreStub+127\u0026gt;: 66 0f 6f 74 24 60        movdqa 0x60(%rsp), %xmm6\n   0x7ffff5bda0c5 \u0026lt;ThePreStub+133\u0026gt;: 66 0f 6f 7c 24 70        movdqa 0x70(%rsp), %xmm7\n   0x7ffff5bda0cb \u0026lt;ThePreStub+139\u0026gt;: 48 8d a4 24 88 00 00 00  leaq   0x88(%rsp), %rsp\n   0x7ffff5bda0d3 \u0026lt;ThePreStub+147\u0026gt;: 5f                       popq   %rdi\n   0x7ffff5bda0d4 \u0026lt;ThePreStub+148\u0026gt;: 5e                       popq   %rsi\n   0x7ffff5bda0d5 \u0026lt;ThePreStub+149\u0026gt;: 5a                       popq   %rdx\n   0x7ffff5bda0d6 \u0026lt;ThePreStub+150\u0026gt;: 59                       popq   %rcx\n   0x7ffff5bda0d7 \u0026lt;ThePreStub+151\u0026gt;: 41 58                    popq   %r8\n   0x7ffff5bda0d9 \u0026lt;ThePreStub+153\u0026gt;: 41 59                    popq   %r9\n   0x7ffff5bda0db \u0026lt;ThePreStub+155\u0026gt;: 41 5c                    popq   %r12\n   0x7ffff5bda0dd \u0026lt;ThePreStub+157\u0026gt;: 41 5d                    popq   %r13\n   0x7ffff5bda0df \u0026lt;ThePreStub+159\u0026gt;: 41 5e                    popq   %r14\n   0x7ffff5bda0e1 \u0026lt;ThePreStub+161\u0026gt;: 41 5f                    popq   %r15\n   0x7ffff5bda0e3 \u0026lt;ThePreStub+163\u0026gt;: 5b                       popq   %rbx\n   0x7ffff5bda0e4 \u0026lt;ThePreStub+164\u0026gt;: 5d                       popq   %rbp\n   0x7ffff5bda0e5 \u0026lt;ThePreStub+165\u0026gt;: 48 ff e0                 jmpq   *%rax\n   %rax should be patched fixup precode = 0x7fff7c21f5a8\n   (%rsp) should be the return address before calling \u0026#34;Fixup Precode\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e看上去相当长但做的事情很简单, 它的源代码在\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/vm/amd64/theprestubamd64.S\"\u003evm\\amd64\\theprestubamd64.S\u003c/a\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eNESTED_ENTRY ThePreStub, _TEXT, NoHandler\n        PROLOG_WITH_TRANSITION_BLOCK 0, 0, 0, 0, 0\n\n        //\n        // call PreStubWorker\n        //\n        lea             rdi, [rsp + __PWTB_TransitionBlock]     // pTransitionBlock*\n        mov             rsi, METHODDESC_REGISTER\n        call            C_FUNC(PreStubWorker)\n\n        EPILOG_WITH_TRANSITION_BLOCK_TAILCALL\n        TAILJMP_RAX\n\nNESTED_END ThePreStub, _TEXT\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e它会备份寄存器到栈, 然后调用PreStubWorker这个函数, 调用完毕以后恢复栈上的寄存器,\n再\u003cstrong\u003e跳转到PreStubWorker的返回结果\u003c/strong\u003e, 也就是\u003cstrong\u003e打完补丁后的Fixup Precode的地址(0x7fff7c21f5a8)\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/vm/prestub.cpp#L957\"\u003ePreStubWorker\u003c/a\u003e是C编写的函数, 它会调用JIT的编译函数, 然后对Fixup Precode打补丁.\n打补丁时会读取前面的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5e\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5e\u003c/code\u003e代表precode的类型是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePRECODE_FIXUP\u003c/code\u003e, 打补丁的函数是\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/vm/i386/stublinkerx86.cpp#L6658\"\u003eFixupPrecode::SetTargetInterlocked\u003c/a\u003e.\n打完补丁以后的Fixup Precode如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eFixup Precode:\n\n(lldb) di --bytes -s 0x7fff7c21f5a8\n   0x7fff7c21f5a8: e9 a3 87 3a 00     jmp    0x7fff7c5c7d50\n   0x7fff7c21f5ad: 5f                 popq   %rdi\n   0x7fff7c21f5ae: 19 05 e8 23 6c fe  sbbl   %eax, -0x193dc18(%rip)\n   0x7fff7c21f5b4: ff 5e a8           lcalll *-0x58(%rsi)\n   0x7fff7c21f5b7: 04 e8              addb   $-0x18, %al\n   0x7fff7c21f5b9: 1b 6c fe ff        sbbl   -0x1(%rsi,%rdi,8), %ebp\n   0x7fff7c21f5bd: 5e                 popq   %rsi\n   0x7fff7c21f5be: 00 03              addb   %al, (%rbx)\n   0x7fff7c21f5c0: e8 13 6c fe ff     callq  0x7fff7c2061d8\n   0x7fff7c21f5c5: 5e                 popq   %rsi\n   0x7fff7c21f5c6: b0 02              movb   $0x2, %al\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e下次再调用函数时就可以直接jmp到编译结果了.\nJIT Stub的实现可以让运行时只编译实际会运行的函数, 这样可以大幅减少程序的启动时间, 第二次调用时的消耗(1个jmp)也非常的小.\u003c/p\u003e\n\n\u003cp\u003e注意调用虚方法时的流程跟上面的流程有一点不同, 虚方法的地址会保存在函数表中,\n打补丁时会对函数表而不是Precode打补丁, 下次调用时函数表中指向的地址是编译后的地址, 有兴趣可以自己试试分析.\u003c/p\u003e\n\n\u003cp\u003e接下来我们看看\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/vm/prestub.cpp#L957\"\u003ePreStubWorker\u003c/a\u003e的内部处理.\u003c/p\u003e\n\n\u003ch1 id=\"jit的入口点\"\u003eJIT的入口点\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/vm/prestub.cpp#L957\"\u003ePreStubWorker\u003c/a\u003e的源代码如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eextern\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;C\u0026#34;\u003c/span\u003e \u003cspan class=\"n\"\u003ePCODE\u003c/span\u003e \u003cspan class=\"n\"\u003eSTDCALL\u003c/span\u003e \u003cspan class=\"nf\"\u003ePreStubWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTransitionBlock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epTransitionBlock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eMethodDesc\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epMD\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ePCODE\u003c/span\u003e \u003cspan class=\"n\"\u003epbRetVal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eBEGIN_PRESERVE_LAST_ERROR\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eSTATIC_CONTRACT_THROWS\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eSTATIC_CONTRACT_GC_TRIGGERS\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eSTATIC_CONTRACT_MODE_COOPERATIVE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eSTATIC_CONTRACT_ENTRY_POINT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eMAKE_CURRENT_THREAD_AVAILABLE\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef _DEBUG\n\u003c/span\u003e    \u003cspan class=\"n\"\u003eThread\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eObjectRefFlush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCURRENT_THREAD\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eFrameWithCookie\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ePrestubMethodFrame\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eframe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epTransitionBlock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epMD\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ePrestubMethodFrame\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epPFrame\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eframe\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003epPFrame\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ePush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCURRENT_THREAD\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eINSTALL_MANAGED_EXCEPTION_DISPATCHER\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eINSTALL_UNWIND_AND_CONTINUE_HANDLER\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eETWOnStartup\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePrestubWorker_V1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003ePrestubWorkerEnd_V1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003e_ASSERTE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eNingenEnabled\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;You cannot invoke managed code inside the ngen compilation process.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Running the PreStubWorker on a method causes us to access its MethodTable\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eg_IBCLogger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLogMethodDescAccess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epMD\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Make sure the method table is restored, and method instantiation if present\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epMD\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCheckRestore\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eCONSISTENCY_CHECK\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eGetAppDomain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCheckCanExecuteManagedCode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epMD\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Note this is redundant with the above check but we do it anyway for safety\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// This has been disabled so we have a better chance of catching these.  Note that this check is\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// NOT sufficient for domain neutral and ngen cases.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// pMD-\u0026gt;EnsureActive();\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eMethodTable\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epDispatchingMT\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epMD\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIsVtableMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eOBJECTREF\u003c/span\u003e \u003cspan class=\"n\"\u003ecurobj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epPFrame\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetThis\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecurobj\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Check for virtual function called non-virtually on a NULL object\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003epDispatchingMT\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecurobj\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetTrueMethodTable\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_ICASTABLE\n\u003c/span\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epDispatchingMT\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIsICastable\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eMethodTable\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epMDMT\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epMD\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetMethodTable\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eTypeHandle\u003c/span\u003e \u003cspan class=\"n\"\u003eobjectType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epDispatchingMT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eTypeHandle\u003c/span\u003e \u003cspan class=\"n\"\u003emethodType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epMDMT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003eGCStress\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecfg_any\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003eMaybeTrigger\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eINDEBUG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecurobj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// curobj is unprotected and CanCastTo() can trigger GC\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eobjectType\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCanCastTo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emethodType\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// Apperantly ICastable magic was involved when we chose this method to be called\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// that\u0026#39;s why we better stick to the MethodTable it belongs to, otherwise \u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// DoPrestub() will fail not being able to find implementation for pMD in pDispatchingMT.\u003c/span\u003e\n\n                    \u003cspan class=\"n\"\u003epDispatchingMT\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epMDMT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_ICASTABLE\n\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// For value types, the only virtual methods are interface implementations.\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// Thus pDispatching == pMT because there\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// is no inheritance in value types.  Note the BoxedEntryPointStubs are shared\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// between all sharable generic instantiations, so the == test is on\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// canonical method tables.\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef _DEBUG \n\u003c/span\u003e            \u003cspan class=\"n\"\u003eMethodTable\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epMDMT\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epMD\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetMethodTable\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// put this here to see what the MT is in debug mode\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e_ASSERTE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003epMD\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetMethodTable\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIsValueType\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n                     \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epMD\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIsUnboxingStub\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epDispatchingMT\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetCanonicalMethodTable\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003epMDMT\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetCanonicalMethodTable\u003c/span\u003e\u003cspan class=\"p\"\u003e())));\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // _DEBUG\n\u003c/span\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eGCX_PREEMP_THREAD_EXISTS\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCURRENT_THREAD\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epbRetVal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epMD\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eDoPrestub\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epDispatchingMT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eUNINSTALL_UNWIND_AND_CONTINUE_HANDLER\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eUNINSTALL_MANAGED_EXCEPTION_DISPATCHER\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eHardwareExceptionHolder\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// Give debugger opportunity to stop here\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eThePreStubPatch\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003epPFrame\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ePop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCURRENT_THREAD\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ePOSTCONDITION\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epbRetVal\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eEND_PRESERVE_LAST_ERROR\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epbRetVal\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个函数接收了两个参数,\n第一个是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTransitionBlock\u003c/code\u003e, 其实就是一个指向栈的指针, 里面保存了备份的寄存器,\n第二个是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eMethodDesc\u003c/code\u003e, 是当前编译函数的信息, lldb中使用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edumpmd pMD\u003c/code\u003e即可看到具体信息.\u003c/p\u003e\n\n\u003cp\u003e之后会调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eMethodDesc::DoPrestub\u003c/code\u003e, 如果函数是虚方法则传入this对象类型的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eMethodTable\u003c/code\u003e.\n\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/vm/prestub.cpp#L1112\"\u003eMethodDesc::DoPrestub\u003c/a\u003e的源代码如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003ePCODE\u003c/span\u003e \u003cspan class=\"n\"\u003eMethodDesc\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eDoPrestub\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMethodTable\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epDispatchingMT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCONTRACT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eSTANDARD_VM_CHECK\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ePOSTCONDITION\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eRETVAL\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCONTRACT_END\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eStub\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epStub\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ePCODE\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eThread\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epThread\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetThread\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eMethodTable\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epMT\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetMethodTable\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Running a prestub on a method causes us to access its MethodTable\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eg_IBCLogger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLogMethodDescAccess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// A secondary layer of defense against executing code in inspection-only assembly.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// This should already have been taken care of by not allowing inspection assemblies\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// to be activated. However, this is a very inexpensive piece of insurance in the name\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// of security.\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIsIntrospectionOnly\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e_ASSERTE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;A ReflectionOnly assembly reached the prestub. This should not have happened.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eCOMPlusThrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekInvalidOperationException\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eIDS_EE_CODEEXECUTION_IN_INTROSPECTIVE_ASSEMBLY\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eContainsGenericVariables\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eCOMPlusThrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekInvalidOperationException\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eIDS_EE_CODEEXECUTION_CONTAINSGENERICVAR\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/**************************   DEBUG CHECKS  *************************/\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/*-----------------------------------------------------------------\n    // Halt if needed, GC stress, check the sharing count etc.\n    */\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef _DEBUG \n\u003c/span\u003e    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003ectr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ectr\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eg_pConfig\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eShouldPrestubHalt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e_ASSERTE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;PreStubHalt\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eLOG\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eLF_CLASSLOADER\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLL_INFO10000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;In PreStubWorker for %s::%s\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"n\"\u003em_pszDebugClassName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003em_pszDebugMethodName\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// This is a nice place to test out having some fatal EE errors. We do this only in a checked build, and only\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// under the InjectFatalError key.\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eg_pConfig\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInjectFatalError\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eEEPOLICY_HANDLE_FATAL_ERROR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCOR_E_EXECUTIONENGINE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eg_pConfig\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInjectFatalError\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eEEPOLICY_HANDLE_FATAL_ERROR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCOR_E_STACKOVERFLOW\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eg_pConfig\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInjectFatalError\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eTestSEHGuardPageRestore\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Useful to test GC with the prestub on the call stack\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eg_pConfig\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eShouldPrestubGC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eGCX_COOP\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eGCHeap\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eGetGCHeap\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGarbageCollect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // _DEBUG\n\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eSTRESS_LOG1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eLF_CLASSLOADER\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLL_INFO10000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Prestubworker: method %pM\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\n    \u003cspan class=\"n\"\u003eGCStress\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecfg_any\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eEeconfigFastGcSPolicy\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCoopGcModePolicy\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003eMaybeTrigger\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Are we in the prestub because of a rejit request?  If so, let the ReJitManager\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// take it from here.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eReJitManager\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eDoReJitIfNecessary\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// A ReJIT was performed, so nothing left for DoPrestub() to do. Return now.\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// \u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// The stable entrypoint will either be a pointer to the original JITted code\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// (with a jmp at the top to jump to the newly-rejitted code) OR a pointer to any\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// stub code that must be executed first (e.g., a remoting stub), which in turn\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// will call the original JITted code (which then jmps to the newly-rejitted\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// code).\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eRETURN\u003c/span\u003e \u003cspan class=\"n\"\u003eGetStableEntryPoint\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_PREJIT \n\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// If this method is the root of a CER call graph and we\u0026#39;ve recorded this fact in the ngen image then we\u0026#39;re in the prestub in\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// order to trip any runtime level preparation needed for this graph (P/Invoke stub generation/library binding, generic\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// dictionary prepopulation etc.).\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eGetModule\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRestoreCer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_PREJIT\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_COMINTEROP \n\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/**************************   INTEROP   *************************/\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/*-----------------------------------------------------------------\n    // Some method descriptors are COMPLUS-to-COM call descriptors\n    // they are not your every day method descriptors, for example\n    // they don\u0026#39;t have an IL or code.\n    */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIsComPlusCall\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eIsGenericComPlusCall\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetStubForInteropMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \n        \u003cspan class=\"n\"\u003eGetPrecode\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSetTargetInterlocked\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eRETURN\u003c/span\u003e \u003cspan class=\"n\"\u003eGetStableEntryPoint\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_COMINTEROP\n\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// workaround: This is to handle a punted work item dealing with a skipped module constructor\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//       due to appdomain unload. Basically shared code was JITted in domain A, and then\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//       this caused a link to another shared module with a module CCTOR, which was skipped\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//       or aborted in another appdomain we were trying to propagate the activation to.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//       Note that this is not a fix, but that it just minimizes the window in which the\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//       issue can occur.\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epThread\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIsAbortRequested\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epThread\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eHandleThreadAbort\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/**************************   CLASS CONSTRUCTOR   ********************/\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Make sure .cctor has been run\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIsClassConstructorTriggeredViaPrestub\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epMT\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCheckRunClassInitThrowing\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/**************************   BACKPATCHING   *************************/\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// See if the addr of code has changed from the pre-stub\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_INTERPRETER\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eIsReallyPointingToPrestub\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#else\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eIsPointingToPrestub\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eLOG\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eLF_CLASSLOADER\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLL_INFO10000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"s\"\u003e\u0026#34;    In PreStubWorker, method already jitted, backpatching call point\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eRETURN\u003c/span\u003e \u003cspan class=\"n\"\u003eDoBackpatch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epMT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epDispatchingMT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// record if remoting needs to intercept this call\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBOOL\u003c/span\u003e  \u003cspan class=\"n\"\u003efRemotingIntercepted\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eIsRemotingInterceptedViaPrestub\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eBOOL\u003c/span\u003e  \u003cspan class=\"n\"\u003efReportCompilationFinished\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFALSE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \n    \u003cspan class=\"cm\"\u003e/**************************   CODE CREATION  *************************/\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIsUnboxingStub\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epStub\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMakeUnboxingStubWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_REMOTING\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epMT\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIsInterface\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eIsStatic\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eIsFCall\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCRemotingServices\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eGetDispatchInterfaceHelper\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eGetOrCreatePrecode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_REMOTING\n#if defined(FEATURE_SHARE_GENERIC_CODE) \n\u003c/span\u003e    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIsInstantiatingStub\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epStub\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMakeInstantiatingStubWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // defined(FEATURE_SHARE_GENERIC_CODE)\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIsIL\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eIsNoMetadata\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// remember if we need to backpatch the MethodTable slot\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eBOOL\u003c/span\u003e  \u003cspan class=\"n\"\u003efBackpatch\u003c/span\u003e           \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003efRemotingIntercepted\u003c/span\u003e\n                                    \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eIsEnCMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_PREJIT \n\u003c/span\u003e        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// See if we have any prejitted code to use.\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetPreImplementedCode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef PROFILING_SUPPORTED\n\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eBOOL\u003c/span\u003e \u003cspan class=\"n\"\u003efShouldSearchCache\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eBEGIN_PIN_PROFILER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCORProfilerTrackCacheSearches\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eg_profControlBlock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epProfInterface\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eJITCachedFunctionSearchStarted\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eFunctionID\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                                   \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003efShouldSearchCache\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eEND_PIN_PROFILER\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003efShouldSearchCache\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_INTERPRETER\n\u003c/span\u003e                \u003cspan class=\"n\"\u003eSetNativeCodeInterlocked\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFALSE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#else\n\u003c/span\u003e                \u003cspan class=\"n\"\u003eSetNativeCodeInterlocked\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e                \u003cspan class=\"n\"\u003e_ASSERTE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eIsPreImplemented\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n                \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // PROFILING_SUPPORTED\n\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eLOG\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eLF_ZAP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLL_INFO10000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"s\"\u003e\u0026#34;ZAP: Using code\u0026#34;\u003c/span\u003e \u003cspan class=\"n\"\u003eFMT_ADDR\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;for %s.%s sig=\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e%s\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e (token %x).\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eDBG_ADDR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003em_pszDebugClassName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003em_pszDebugMethodName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003em_pszDebugMethodSignature\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eGetMemberDef\u003c/span\u003e\u003cspan class=\"p\"\u003e()));\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003eTADDR\u003c/span\u003e \u003cspan class=\"n\"\u003epFixupList\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetFixupList\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epFixupList\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eModule\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epZapModule\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetZapModule\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                \u003cspan class=\"n\"\u003e_ASSERTE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epZapModule\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003epZapModule\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eFixupDelayList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epFixupList\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003e_ASSERTE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;FixupDelayList failed\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eThrowHR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCOR_E_BADIMAGEFORMAT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef HAVE_GCCOVER\n\u003c/span\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eGCStress\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecfg_instr_ngen\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003eIsEnabled\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eSetupGcCoverage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBYTE\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // HAVE_GCCOVER\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef PROFILING_SUPPORTED \n\u003c/span\u003e            \u003cspan class=\"cm\"\u003e/*\n                * This notifies the profiler that a search to find a\n                * cached jitted function has been made.\n                */\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eBEGIN_PIN_PROFILER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCORProfilerTrackCacheSearches\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eg_profControlBlock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epProfInterface\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eJITCachedFunctionSearchFinished\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eFunctionID\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCOR_PRF_CACHED_FUNCTION_FOUND\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eEND_PIN_PROFILER\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // PROFILING_SUPPORTED\n\u003c/span\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// If not, try to jit it\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_PREJIT\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_READYTORUN\n\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eModule\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epModule\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetModule\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epModule\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIsReadyToRun\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epModule\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetReadyToRunInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetEntryPoint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003efReportCompilationFinished\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_READYTORUN\n\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eNewHolder\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCOR_ILMETHOD_DECODER\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// Get the information on the method\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eIsNoMetadata\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eCOR_ILMETHOD\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eilHeader\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetILHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eilHeader\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_COMINTEROP\n\u003c/span\u003e                    \u003cspan class=\"c1\"\u003e// Abstract methods can be called through WinRT derivation if the deriving type\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// is not implemented in managed code, and calls through the CCW to the abstract\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// method. Throw a sensible exception in that case.\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epMT\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIsExportedToWinRT\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eIsAbstract\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eCOMPlusThrowHR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eE_NOTIMPL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_COMINTEROP\n\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eCOMPlusThrowHR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCOR_E_BADIMAGEFORMAT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBFA_BAD_IL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003eCOR_ILMETHOD_DECODER\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eDecoderStatus\u003c/span\u003e \u003cspan class=\"n\"\u003estatus\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCOR_ILMETHOD_DECODER\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eFORMAT_ERROR\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// Decoder ctor can AV on a malformed method header\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eAVInRuntimeImplOkayHolder\u003c/span\u003e \u003cspan class=\"n\"\u003eAVOkay\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003epHeader\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eCOR_ILMETHOD_DECODER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eilHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eGetMDImport\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estatus\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epHeader\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003estatus\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCOR_ILMETHOD_DECODER\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eFORMAT_ERROR\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estatus\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eCOR_ILMETHOD_DECODER\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eVERIFICATION_ERROR\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eSecurity\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eCanSkipVerification\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eGetModule\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetDomainAssembly\u003c/span\u003e\u003cspan class=\"p\"\u003e()))\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003estatus\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCOR_ILMETHOD_DECODER\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eSUCCESS\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estatus\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eCOR_ILMETHOD_DECODER\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eSUCCESS\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estatus\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eCOR_ILMETHOD_DECODER\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eVERIFICATION_ERROR\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"c1\"\u003e// Throw a verification HR\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eCOMPlusThrowHR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCOR_E_VERIFICATION\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eCOMPlusThrowHR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCOR_E_BADIMAGEFORMAT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBFA_BAD_IL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef _VER_EE_VERIFICATION_ENABLED \n\u003c/span\u003e                \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eConfigDWORD\u003c/span\u003e \u003cspan class=\"n\"\u003epeVerify\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epeVerify\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCLRConfig\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eEXTERNAL_PEVerify\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eVerify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFALSE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// Throws a VerifierException if verification fails\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // _VER_EE_VERIFICATION_ENABLED\n\u003c/span\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// end if (!IsNoMetadata())\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// JIT it\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eLOG\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eLF_CLASSLOADER\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLL_INFO1000000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                    \u003cspan class=\"s\"\u003e\u0026#34;    In PreStubWorker, calling MakeJitWorker\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// Create the precode eagerly if it is going to be needed later.\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003efBackpatch\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eGetOrCreatePrecode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// Mark the code as hot in case the method ends up in the native image\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eg_IBCLogger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLogMethodCodeAccess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMakeJitWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_INTERPRETER\n\u003c/span\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eHasStableEntryPoint\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// We don\u0026#39;t yet have a stable entry point, so don\u0026#39;t do backpatching yet.\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// But we do have to handle some extra cases that occur in backpatching.\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// (Perhaps I *should* get to the backpatching code, but in a mode where we know\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// we\u0026#39;re not dealing with the stable entry point...)\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHasNativeCodeSlot\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// We called \u0026#34;SetNativeCodeInterlocked\u0026#34; in MakeJitWorker, which updated the native\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// code slot, but I think we also want to update the regular slot...\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003ePCODE\u003c/span\u003e \u003cspan class=\"n\"\u003etmpEntry\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetTemporaryEntryPoint\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003ePCODE\u003c/span\u003e \u003cspan class=\"n\"\u003epFound\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFastInterlockCompareExchangePointer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eGetAddrOfSlot\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etmpEntry\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// Doesn\u0026#39;t matter if we failed -- if we did, it\u0026#39;s because somebody else made progress.\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epFound\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003etmpEntry\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epFound\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"c1\"\u003e// Now we handle the case of a FuncPtrPrecode.  \u003c/span\u003e\n                \u003cspan class=\"n\"\u003eFuncPtrStubs\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epFuncPtrStubs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetLoaderAllocator\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetFuncPtrStubsNoCreate\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epFuncPtrStubs\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003ePrecode\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epFuncPtrPrecode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epFuncPtrStubs\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eLookup\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epFuncPtrPrecode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"c1\"\u003e// If there is a funcptr precode to patch, attempt to patch it.  If we lose, that\u0026#39;s OK,\u003c/span\u003e\n                        \u003cspan class=\"c1\"\u003e// somebody else made progress.\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003epFuncPtrPrecode\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSetTargetInterlocked\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_INTERPRETER\n\u003c/span\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// end if (pCode == NULL)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// end else if (IsIL() || IsNoMetadata())\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIsNDirect\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eGetModule\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetSecurityDescriptor\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCanCallUnmanagedCode\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eSecurity\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eThrowSecurityException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eg_SecurityPermissionClassName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSPFLAGSUNMANAGEDCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetStubForInteropMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eGetOrCreatePrecode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIsFCall\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Get the fcall implementation\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eBOOL\u003c/span\u003e \u003cspan class=\"n\"\u003efSharedOrDynamicFCallImpl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eECall\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eGetFCallImpl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003efSharedOrDynamicFCallImpl\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efSharedOrDynamicFCallImpl\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// Fake ctors share one implementation that has to be wrapped by prestub\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eGetOrCreatePrecode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIsArray\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epStub\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGenerateArrayOpStub\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eArrayMethodDesc\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIsEEImpl\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e_ASSERTE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eGetMethodTable\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIsDelegate\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCOMDelegate\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eGetInvokeMethodStub\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eEEImplMethodDesc\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eGetOrCreatePrecode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// This is a method type we don\u0026#39;t handle yet\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e_ASSERTE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Unknown Method Type\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/**************************   POSTJIT *************************/\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifndef FEATURE_INTERPRETER\n\u003c/span\u003e    \u003cspan class=\"n\"\u003e_ASSERTE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eGetNativeCode\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eGetNativeCode\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#else // FEATURE_INTERPRETER\n\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Interpreter adds a new possiblity == someone else beat us to installing an intepreter stub.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e_ASSERTE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eGetNativeCode\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eGetNativeCode\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n             \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eInterpreter\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eInterpretationStubToMethodInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_INTERPRETER\n\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// At this point we must have either a pointer to managed code or to a stub. All of the above code\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// should have thrown an exception if it couldn\u0026#39;t make a stub.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e_ASSERTE\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003epStub\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/**************************   SECURITY   *************************/\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Lets check to see if we need declarative security on this stub, If we have\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// security checks on this method or class then we need to add an intermediate\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// stub that performs declarative checks prior to calling the real stub.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// record if security needs to intercept this call (also depends on whether we plan to use stubs for declarative security)\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#if !defined( HAS_REMOTING_PRECODE) \u0026amp;\u0026amp; defined (FEATURE_REMOTING)\n\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/**************************   REMOTING   *************************/\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// check for MarshalByRef scenarios ... we need to intercept\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Non-virtual calls on MarshalByRef types\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efRemotingIntercepted\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// let us setup a remoting stub to intercept all the calls\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eStub\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epRemotingStub\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCRemotingServices\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eGetStubForNonVirtualMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \n            \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epStub\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eLPVOID\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003epStub\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetEntryPoint\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eLPVOID\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epStub\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epRemotingStub\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003epStub\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epRemotingStub\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // HAS_REMOTING_PRECODE\n\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e_ASSERTE\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003epStub\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#if defined(_TARGET_X86_) || defined(_TARGET_AMD64_)\n\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// We are seeing memory reordering race around fixups (see DDB 193514 and related bugs). We get into\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// situation where the patched precode is visible by other threads, but the resolved fixups \u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// are not. IT SHOULD NEVER HAPPEN according to our current understanding of x86/x64 memory model.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// (see email thread attached to the bug for details).\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// We suspect that there may be bug in the hardware or that hardware may have shortcuts that may be \u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// causing grief. We will try to avoid the race by executing an extra memory barrier.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eMemoryBarrier\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHasPrecode\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eGetPrecode\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSetTargetInterlocked\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eHasStableEntryPoint\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// Is the result an interpreter stub?\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_INTERPRETER\n\u003c/span\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eInterpreter\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eInterpretationStubToMethodInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eSetEntryPointInterlocked\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_INTERPRETER\n\u003c/span\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eSetStableEntryPointInterlocked\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eGetOrCreatePrecode\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSetTargetInterlocked\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epStub\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetEntryPoint\u003c/span\u003e\u003cspan class=\"p\"\u003e()))\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003epStub\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eDecRef\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epStub\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eHasExternalEntryPoint\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// If the Stub wraps code that is outside of the Stub allocation, then we\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// need to free the Stub allocation now.\u003c/span\u003e\n            \u003cspan class=\"n\"\u003epStub\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eDecRef\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_INTERPRETER\n\u003c/span\u003e    \u003cspan class=\"n\"\u003e_ASSERTE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eIsReallyPointingToPrestub\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#else // FEATURE_INTERPRETER\n\u003c/span\u003e    \u003cspan class=\"n\"\u003e_ASSERTE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eIsPointingToPrestub\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e_ASSERTE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHasStableEntryPoint\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_INTERPRETER\n\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efReportCompilationFinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eDACNotifyCompilationFinished\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eRETURN\u003c/span\u003e \u003cspan class=\"n\"\u003eDoBackpatch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epMT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epDispatchingMT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFALSE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个函数比较长, 我们只需要关注两个地方:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMakeJitWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eMakeJitWorker\u003c/code\u003e会调用JIT编译函数, pCode是编译后的机器代码地址.\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHasPrecode\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eGetPrecode\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSetTargetInterlocked\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSetTargetInterlocked\u003c/code\u003e会对Precode打补丁, 第二次调用函数时会直接跳转到编译结果.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/vm/prestub.cpp#L259\"\u003eMakeJitWorker\u003c/a\u003e的源代码如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003ePCODE\u003c/span\u003e \u003cspan class=\"n\"\u003eMethodDesc\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eMakeJitWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCOR_ILMETHOD_DECODER\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eILHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDWORD\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDWORD\u003c/span\u003e \u003cspan class=\"n\"\u003eflags2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eSTANDARD_VM_CONTRACT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eBOOL\u003c/span\u003e \u003cspan class=\"n\"\u003efIsILStub\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eIsILStub\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// @TODO: understand the need for this special case\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eLOG\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eLF_JIT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLL_INFO1000000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n         \u003cspan class=\"s\"\u003e\u0026#34;MakeJitWorker(\u0026#34;\u003c/span\u003e \u003cspan class=\"n\"\u003eFMT_ADDR\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;, %s) for %s:%s\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n         \u003cspan class=\"n\"\u003eDBG_ADDR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n         \u003cspan class=\"n\"\u003efIsILStub\u003c/span\u003e               \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; TRUE\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;FALSE\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n         \u003cspan class=\"n\"\u003eGetMethodTable\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetDebugClassName\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\n         \u003cspan class=\"n\"\u003em_pszDebugMethodName\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ePCODE\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eULONG\u003c/span\u003e \u003cspan class=\"n\"\u003esizeOfCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_INTERPRETER\n\u003c/span\u003e    \u003cspan class=\"n\"\u003ePCODE\u003c/span\u003e \u003cspan class=\"n\"\u003epPreviousInterpStub\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBOOL\u003c/span\u003e \u003cspan class=\"n\"\u003efInterpreted\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFALSE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBOOL\u003c/span\u003e \u003cspan class=\"n\"\u003efStable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// True iff the new code address (to be stored in pCode), is a stable entry point.\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_MULTICOREJIT\n\u003c/span\u003e    \u003cspan class=\"n\"\u003eMulticoreJitManager\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003emcJitManager\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetAppDomain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetMulticoreJitManager\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003efBackgroundThread\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eCORJIT_FLG_MCJIT_BACKGROUND\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Enter the global lock which protects the list of all functions being JITd\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eListLockHolder\u003c/span\u003e \u003cspan class=\"n\"\u003epJitLock\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eGetDomain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetJitLock\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// It is possible that another thread stepped in before we entered the global lock for the first time.\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetNativeCode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_INTERPRETER\n\u003c/span\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eInterpreter\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eInterpretationStubToMethodInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003epPreviousInterpStub\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_INTERPRETER\n\u003c/span\u003e            \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eDone\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edescription\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;jit lock\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eINDEBUG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edescription\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003em_pszDebugMethodName\u003c/span\u003e\u003cspan class=\"p\"\u003e;)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eListLockEntryHolder\u003c/span\u003e \u003cspan class=\"n\"\u003epEntry\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eListLockEntry\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eFind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epJitLock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edescription\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// We have an entry now, we can release the global lock\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epJitLock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRelease\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// Take the entry lock\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eListLockEntryLockHolder\u003c/span\u003e \u003cspan class=\"n\"\u003epEntryLock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epEntry\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFALSE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epEntryLock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDeadlockAwareAcquire\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epEntry\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003em_hrResultCode\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eS_FALSE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// Nobody has jitted the method yet\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// We came in to jit but someone beat us so return the\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// jitted method!\u003c/span\u003e\n\n                    \u003cspan class=\"c1\"\u003e// We can just fall through because we will notice below that\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// the method has code.\u003c/span\u003e\n\n                    \u003cspan class=\"c1\"\u003e// @todo: Note that we may have a failed HRESULT here -\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// we might want to return an early error rather than\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// repeatedly failing the jit.\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// Taking this lock would cause a deadlock (presumably because we\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// are involved in a class constructor circular dependency.)  For\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// instance, another thread may be waiting to run the class constructor\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// that we are jitting, but is currently jitting this function.\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// To remedy this, we want to go ahead and do the jitting anyway.\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// The other threads contending for the lock will then notice that\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// the jit finished while they were running class constructors, and abort their\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// current jit effort.\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// We don\u0026#39;t have to do anything special right here since we\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// can check HasNativeCode() to detect this case later.\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// Note that at this point we don\u0026#39;t have the lock, but that\u0026#39;s OK because the\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// thread which does have the lock is blocked waiting for us.\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// It is possible that another thread stepped in before we entered the lock.\u003c/span\u003e\n            \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetNativeCode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_INTERPRETER\n\u003c/span\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003epPreviousInterpStub\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#else\n\u003c/span\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_INTERPRETER\n\u003c/span\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eDone\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003eSString\u003c/span\u003e \u003cspan class=\"n\"\u003enamespaceOrClassName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emethodName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emethodSignature\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003ePCODE\u003c/span\u003e \u003cspan class=\"n\"\u003epOtherCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Need to move here due to \u0026#39;goto GotNewCode\u0026#39;\u003c/span\u003e\n            \n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_MULTICOREJIT\n\u003c/span\u003e\n            \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003efCompiledInBackground\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// If not called from multi-core JIT thread, \u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"n\"\u003efBackgroundThread\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// Quick check before calling expensive out of line function on this method\u0026#39;s domain has code JITted by background thread\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emcJitManager\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetMulticoreJitCodeStorage\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eGetRemainingMethodCount\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMulticoreJitManager\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eIsMethodSupported\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emcJitManager\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRequestMethodCode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Query multi-core JIT manager for compiled code\u003c/span\u003e\n\n                        \u003cspan class=\"c1\"\u003e// Multicore JIT manager starts background thread to pre-compile methods, but it does not back-patch it/notify profiler/notify DAC,\u003c/span\u003e\n                        \u003cspan class=\"c1\"\u003e// Jumtp to GotNewCode to do so\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                            \u003cspan class=\"n\"\u003efCompiledInBackground\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \n\u003cspan class=\"cp\"\u003e#ifdef DEBUGGING_SUPPORTED\n\u003c/span\u003e                            \u003cspan class=\"c1\"\u003e// Notify the debugger of the jitted function\u003c/span\u003e\n                            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eg_pDebugInterface\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003eg_pDebugInterface\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eJITComplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n                            \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eGotNewCode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efIsILStub\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// we race with other threads to JIT the code for an IL stub and the\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// IL header is released once one of the threads completes.  As a result\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// we must be inside the lock to reliably get the IL header for the\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// stub.\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003eILStubResolver\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epResolver\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAsDynamicMethodDesc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetILStubResolver\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eILHeader\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epResolver\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetILHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef MDA_SUPPORTED \n\u003c/span\u003e            \u003cspan class=\"n\"\u003eMdaJitCompilationStart\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epProbe\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMDA_GET_ASSISTANT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eJitCompilationStart\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epProbe\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"n\"\u003epProbe\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eNowCompiling\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // MDA_SUPPORTED\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef PROFILING_SUPPORTED \n\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// If profiling, need to give a chance for a tool to examine and modify\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// the IL before it gets to the JIT.  This allows one to add probe calls for\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// things like code coverage, performance, or whatever.\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eBEGIN_PIN_PROFILER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCORProfilerTrackJITInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\n                \u003cspan class=\"c1\"\u003e// Multicore JIT should be disabled when CORProfilerTrackJITInfo is on\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// But there could be corner case in which profiler is attached when multicore background thread is calling MakeJitWorker\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// Disable this block when calling from multicore JIT background thread\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eIsNoMetadata\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_MULTICOREJIT\n\u003c/span\u003e\n                    \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"n\"\u003efBackgroundThread\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e                    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eg_profControlBlock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epProfInterface\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eJITCompilationStarted\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eFunctionID\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// The profiler may have changed the code on the callback.  Need to\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// pick up the new code.  Note that you have to be fully trusted in\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// this mode and the code will not be verified.\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eCOR_ILMETHOD\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epilHeader\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetILHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eILHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eCOR_ILMETHOD_DECODER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epilHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eGetMDImport\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eEND_PIN_PROFILER\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // PROFILING_SUPPORTED\n#ifdef FEATURE_INTERPRETER\n\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// We move the ETW event for start of JITting inward, after we make the decision\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// to JIT rather than interpret.\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#else  // FEATURE_INTERPRETER\n\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// Fire an ETW event to mark the beginning of JIT\u0026#39;ing\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eETW\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eMethodLog\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eMethodJitting\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003enamespaceOrClassName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003emethodName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003emethodSignature\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif  // FEATURE_INTERPRETER\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_STACK_SAMPLING\n#ifdef FEATURE_MULTICOREJIT\n\u003c/span\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003efBackgroundThread\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_MULTICOREJIT\n\u003c/span\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eStackSampler\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eRecordJittingInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eflags2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_STACK_SAMPLING\n\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eEX_TRY\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eUnsafeJitFunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eILHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eflags2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esizeOfCode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eEX_CATCH\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// If the current thread threw an exception, but a competing thread\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// somehow succeeded at JITting the same function (e.g., out of memory\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// encountered on current thread but not competing thread), then go ahead\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// and swallow this current thread\u0026#39;s exception, since we somehow managed\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// to successfully JIT the code on the other thread.\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// \u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// Note that if a deadlock cycle is broken, that does not result in an\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// exception--the thread would just pass through the lock and JIT the\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// function in competition with the other thread (with the winner of the\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// race decided later on when we do SetNativeCodeInterlocked). This\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// try/catch is purely to deal with the (unusual) case where a competing\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// thread succeeded where we aborted.\u003c/span\u003e\n                \n                \u003cspan class=\"n\"\u003epOtherCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetNativeCode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                \n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epOtherCode\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003epEntry\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003em_hrResultCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eE_FAIL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eEX_RETHROW\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eEX_END_CATCH\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eRethrowTerminalExceptions\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epOtherCode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// Somebody finished jitting recursively while we were jitting the method.\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// Just use their method \u0026amp; leak the one we finished. (Normally we hope\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// not to finish our JIT in this case, as we will abort early if we notice\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// a reentrant jit has occurred.  But we may not catch every place so we\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// do a definitive final check here.\u003c/span\u003e\n                \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epOtherCode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eDone\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003e_ASSERTE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef HAVE_GCCOVER\n\u003c/span\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eGCStress\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecfg_instr_jit\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003eIsEnabled\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eSetupGcCoverage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBYTE\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // HAVE_GCCOVER\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_INTERPRETER\n\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// Determine whether the new code address is \u0026#34;stable\u0026#34;...= is not an interpreter stub.\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efInterpreted\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eInterpreter\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eInterpretationStubToMethodInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efStable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003efInterpreted\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_INTERPRETER\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_MULTICOREJIT\n\u003c/span\u003e            \n            \u003cspan class=\"c1\"\u003e// If called from multi-core JIT background thread, store code under lock, delay patching until code is queried from application threads\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efBackgroundThread\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// Fire an ETW event to mark the end of JIT\u0026#39;ing\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eETW\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eMethodLog\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eMethodJitted\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003enamespaceOrClassName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003emethodName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003emethodSignature\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* ReJITID */\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_PERFMAP\n\u003c/span\u003e                \u003cspan class=\"c1\"\u003e// Save the JIT\u0026#39;d method information so that perf can resolve JIT\u0026#39;d call frames.\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ePerfMap\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eLogJITCompiledMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esizeOfCode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e                \n                \u003cspan class=\"n\"\u003emcJitManager\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetMulticoreJitCodeStorage\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eStoreMethodCode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eDone\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nl\"\u003eGotNewCode:\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// If this function had already been requested for rejit (before its original\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// code was jitted), then give the rejit manager a chance to jump-stamp the\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// code we just compiled so the first thread entering the function will jump\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// to the prestub and trigger the rejit. Note that the PublishMethodHolder takes\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// a lock to avoid a particular kind of rejit race. See\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// code:ReJitManager::PublishMethodHolder::PublishMethodHolder#PublishCode for\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// details on the rejit race.\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// \u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// Aside from rejit, performing a SetNativeCodeInterlocked at this point\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// generally ensures that there is only one winning version of the native\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// code. This also avoid races with profiler overriding ngened code (see\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// matching SetNativeCodeInterlocked done after\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// JITCachedFunctionSearchStarted)\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_INTERPRETER\n\u003c/span\u003e            \u003cspan class=\"n\"\u003ePCODE\u003c/span\u003e \u003cspan class=\"n\"\u003epExpected\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epPreviousInterpStub\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epExpected\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003epExpected\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetTemporaryEntryPoint\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eReJitPublishMethodHolder\u003c/span\u003e \u003cspan class=\"n\"\u003epublishWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eSetNativeCodeInterlocked\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_INTERPRETER\n\u003c/span\u003e                    \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epExpected\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efStable\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e                    \u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// Another thread beat us to publishing its copy of the JITted code.\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetNativeCode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eDone\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_INTERPRETER\n\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// State for dynamic methods cannot be freed if the method was ever interpreted,\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// since there is no way to ensure that it is not in use at the moment.\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIsDynamicMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003efInterpreted\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epPreviousInterpStub\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eAsDynamicMethodDesc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetResolver\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eFreeCompileTimeState\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_INTERPRETER\n\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// We succeeded in jitting the code, and our jitted code is the one that\u0026#39;s going to run now.\u003c/span\u003e\n            \u003cspan class=\"n\"\u003epEntry\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003em_hrResultCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eS_OK\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n \u003cspan class=\"cp\"\u003e#ifdef PROFILING_SUPPORTED \n\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// Notify the profiler that JIT completed.\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// Must do this after the address has been set.\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// @ToDo: Why must we set the address before notifying the profiler ??\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e//        Note that if IsInterceptedForDeclSecurity is set no one should access the jitted code address anyway.\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eBEGIN_PIN_PROFILER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCORProfilerTrackJITInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eIsNoMetadata\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eg_profControlBlock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epProfInterface\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eJITCompilationFinished\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eFunctionID\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                                \u003cspan class=\"n\"\u003epEntry\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003em_hrResultCode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \n                                                \u003cspan class=\"n\"\u003eTRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eEND_PIN_PROFILER\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // PROFILING_SUPPORTED\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_MULTICOREJIT\n\u003c/span\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"n\"\u003efCompiledInBackground\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n#ifdef FEATURE_INTERPRETER\n\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// If we didn\u0026#39;t JIT, but rather, created an interpreter stub (i.e., fStable is false), don\u0026#39;t tell ETW that we did.\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efStable\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_INTERPRETER\n\u003c/span\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// Fire an ETW event to mark the end of JIT\u0026#39;ing\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eETW\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eMethodLog\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eMethodJitted\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003enamespaceOrClassName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003emethodName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003emethodSignature\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* ReJITID */\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_PERFMAP\n\u003c/span\u003e                \u003cspan class=\"c1\"\u003e// Save the JIT\u0026#39;d method information so that perf can resolve JIT\u0026#39;d call frames.\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ePerfMap\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eLogJITCompiledMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esizeOfCode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n \n\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_MULTICOREJIT\n\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// If not called from multi-core JIT thread, not got code from storage, quick check before calling out of line function\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"n\"\u003efBackgroundThread\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"n\"\u003efCompiledInBackground\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003emcJitManager\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIsRecorderActive\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMulticoreJitManager\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eIsMethodSupported\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003emcJitManager\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRecordMethodJit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Tell multi-core JIT manager to record method on successful JITting\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003efIsILStub\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// The notification will only occur if someone has registered for this method.\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eDACNotifyCompilationFinished\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nl\"\u003eDone:\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// We must have a code by now.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e_ASSERTE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eLOG\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eLF_CORDB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLL_EVERYTHING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;MethodDesc::MakeJitWorker finished. Stub is\u0026#34;\u003c/span\u003e \u003cspan class=\"n\"\u003eFMT_ADDR\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n         \u003cspan class=\"n\"\u003eDBG_ADDR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)));\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epCode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个函数是\u003cstrong\u003e线程安全\u003c/strong\u003e的JIT函数,\n如果多个线程编译同一个函数, 其中一个线程会执行编译, 其他线程会等待编译完成.\n每个AppDomain会有一个锁的集合,  一个正在编译的函数拥有一个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eListLockEntry\u003c/code\u003e对象,\n函数首先会对集合上锁, 获取或者创建函数对应的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eListLockEntry\u003c/code\u003e, 然后释放对集合的锁,\n这个时候所有线程对同一个函数都会获取到同一个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eListLockEntry\u003c/code\u003e, 然后再对\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eListLockEntry\u003c/code\u003e上锁.\n上锁后调用非线程安全的JIT函数:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003epCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eUnsafeJitFunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eILHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eflags2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esizeOfCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来还有几层调用才会到JIT主函数, 我只简单说明他们的处理:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/vm/jitinterface.cpp#L12347\"\u003eUnsafeJitFunction\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e这个函数会创建CEEJitInfo(JIT层给EE层反馈使用的类)的实例, 从函数信息中获取编译标志(是否以Debug模式编译),\n调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCallCompileMethodWithSEHWrapper\u003c/code\u003e, 并且在相对地址溢出时禁止使用相对地址(fAllowRel32)然后重试编译.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/vm/jitinterface.cpp#L11863\"\u003eCallCompileMethodWithSEHWrapper\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e这个函数会在try中调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einvokeCompileMethod\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/vm/jitinterface.cpp#L11825\"\u003einvokeCompileMethod\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e这个函数让当前线程进入Preemptive模式(GC可以不用挂起当前线程), 然后调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einvokeCompileMethodHelper\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/vm/jitinterface.cpp#L11677\"\u003einvokeCompileMethodHelper\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e这个函数一般情况下会调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejitMgr-\u0026gt;m_jit-\u0026gt;compileMethod\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/ee_il_dll.cpp#L279\"\u003eCILJit::compileMethod\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e这个函数一般情况下会调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejitNativeCode\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/compiler.cpp#L6075\"\u003ejitNativeCode\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e创建和初始化\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCompiler\u003c/code\u003e的实例, 并调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epParam-\u0026gt;pComp-\u0026gt;compCompile\u003c/code\u003e(7参数版).\n内联时也会从这个函数开始调用, 如果是内联则\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCompiler\u003c/code\u003e实例会在第一次创建后复用.\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCompiler\u003c/code\u003e负责单个函数的整个JIT过程.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/compiler.cpp#L4693\"\u003eCompiler::compCompile(7参数版)\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e这个函数会对\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCompiler\u003c/code\u003e实例做出一些初始化处理, 然后调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCompiler::compCompileHelper\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/compiler.cpp#L5294\"\u003ecompCompileHelper\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e这个函数会先创建本地变量表\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elvaTable\u003c/code\u003e和\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e的链表,\n必要时添加一个内部使用的block(BB01), 然后解析IL代码添加更多的block, 具体将在下面说明.\n然后调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecompCompile\u003c/code\u003e(3参数版).\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/compiler.cpp#L4078\"\u003ecompCompile(3参数版)\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e这就是JIT的主函数, 这个函数负责调用JIT各个阶段的工作, 具体将在下面说明.\u003c/p\u003e\n\n\u003ch1 id=\"创建本地变量表\"\u003e创建本地变量表\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecompCompileHelper\u003c/code\u003e会调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elvaInitTypeRef\u003c/code\u003e,\n\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/lclvars.cpp#L86\"\u003elvaInitTypeRef\u003c/a\u003e会创建本地变量表, 源代码如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003elvaInitTypeRef\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* x86 args look something like this:\n        [this ptr] [hidden return buffer] [declared arguments]* [generic context] [var arg cookie]\n\n       x64 is closer to the native ABI:\n        [this ptr] [hidden return buffer] [generic context] [var arg cookie] [declared arguments]*\n        (Note: prior to .NET Framework 4.5.1 for Windows 8.1 (but not .NET Framework 4.5.1 \u0026#34;downlevel\u0026#34;),\n        the \u0026#34;hidden return buffer\u0026#34; came before the \u0026#34;this ptr\u0026#34;. Now, the \u0026#34;this ptr\u0026#34; comes first. This\n        is different from the C++ order, where the \u0026#34;hidden return buffer\u0026#34; always comes first.)\n\n       ARM and ARM64 are the same as the current x64 convention:\n        [this ptr] [hidden return buffer] [generic context] [var arg cookie] [declared arguments]*\n\n       Key difference:\n           The var arg cookie and generic context are swapped with respect to the user arguments\n    */\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Set compArgsCount and compLocalsCount */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompArgsCount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMethodInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enumArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Is there a \u0026#39;this\u0026#39; pointer\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsStatic\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompArgsCount\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompThisArg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBAD_VAR_NUM\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompILargsCount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompArgsCount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_SIMD\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efeatureSIMD\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompRetNativeType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_STRUCT\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003evar_types\u003c/span\u003e \u003cspan class=\"n\"\u003estructType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpNormStructType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMethodInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eretTypeClass\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompRetType\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estructType\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_SIMD\n\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Are we returning a struct using a return buffer argument?\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003ehasRetBuffArg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpMethodInfo_hasRetBuffArg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMethodInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Possibly change the compRetNativeType from TYP_STRUCT to a \u0026#34;primitive\u0026#34; type\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// when we are returning a struct by value and it fits in one register\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ehasRetBuffArg\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003evarTypeIsStruct\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompRetNativeType\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eCORINFO_CLASS_HANDLE\u003c/span\u003e \u003cspan class=\"n\"\u003eretClsHnd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMethodInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eretTypeClass\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estructPassingKind\u003c/span\u003e \u003cspan class=\"n\"\u003ehowToReturnStruct\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003evar_types\u003c/span\u003e                   \u003cspan class=\"n\"\u003ereturnType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetReturnTypeForStruct\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eretClsHnd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ehowToReturnStruct\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehowToReturnStruct\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eSPK_PrimitiveType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereturnType\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_UNKNOWN\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereturnType\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_STRUCT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompRetNativeType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereturnType\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// ToDo: Refactor this common code sequence into its own method as it is used 4+ times\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003ereturnType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_LONG\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompLongUsed\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ecompLongUsed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(((\u003c/span\u003e\u003cspan class=\"n\"\u003ereturnType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_FLOAT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereturnType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_DOUBLE\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompFloatingPointUsed\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ecompFloatingPointUsed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Do we have a RetBuffArg?\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehasRetBuffArg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompArgsCount\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompRetBuffArg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBAD_VAR_NUM\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* There is a \u0026#39;hidden\u0026#39; cookie pushed last when the\n       calling convention is varargs */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsVarArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompArgsCount\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Is there an extra parameter used to pass instantiation info to\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// shared generic methods and shared generic struct instance methods?\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMethodInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecallConv\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eCORINFO_CALLCONV_PARAMTYPE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompArgsCount\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompTypeCtxtArg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBAD_VAR_NUM\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003elvaCount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompLocalsCount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompArgsCount\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMethodInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enumArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompILlocalsCount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompILargsCount\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMethodInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enumArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Now allocate the variable descriptor table */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsForInlining\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpInlineInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInlinerCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elvaCount\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpInlineInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInlinerCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elvaCount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elvaTableCnt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpInlineInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInlinerCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTableCnt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// No more stuff needs to be done.\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003elvaTableCnt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaCount\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTableCnt\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elvaTableCnt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e         \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eLclVarDsc\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003ecompGetMemArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTableCnt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eCMK_LvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003etableSize\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaTableCnt\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ememset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etableSize\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003elvaTableCnt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003ejitstd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eplacement_t\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"n\"\u003eLclVarDsc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// call the constructor.\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e//-------------------------------------------------------------------------\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Count the arguments and initialize the respective lvaTable[] entries\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// First the implicit arguments\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//-------------------------------------------------------------------------\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eInitVarDscInfo\u003c/span\u003e \u003cspan class=\"n\"\u003evarDscInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003evarDscInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eInit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehasRetBuffArg\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003elvaInitArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003evarDscInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e//-------------------------------------------------------------------------\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Finally the local variables\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//-------------------------------------------------------------------------\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e                \u003cspan class=\"n\"\u003evarNum\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evarDscInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evarNum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eLclVarDsc\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e              \u003cspan class=\"n\"\u003evarDsc\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evarDscInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evarDsc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCORINFO_ARG_LIST_HANDLE\u003c/span\u003e \u003cspan class=\"n\"\u003elocalsSig\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMethodInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMethodInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enumArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n         \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evarNum\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evarDsc\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elocalsSig\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCompHnd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egetArgNext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elocalsSig\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eCORINFO_CLASS_HANDLE\u003c/span\u003e \u003cspan class=\"n\"\u003etypeHnd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eCorInfoTypeWithMod\u003c/span\u003e   \u003cspan class=\"n\"\u003ecorInfoType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n            \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCompHnd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egetArgType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMethodInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocals\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elocalsSig\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etypeHnd\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elvaInitVarDsc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evarDsc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evarNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estrip\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecorInfoType\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003etypeHnd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elocalsSig\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMethodInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocals\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003evarDsc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elvPinned\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003ecorInfoType\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eCORINFO_TYPE_MOD_PINNED\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003evarDsc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elvOnFrame\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// The final home for this local variable might be our local stack frame\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"c1\"\u003e// If there already exist unsafe buffers, don\u0026#39;t mark more structs as unsafe\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// as that will cause them to be placed along with the real unsafe buffers,\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// unnecessarily exposing them to overruns. This can affect GS tests which\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// intentionally do buffer-overruns.\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003egetNeedsGSSecurityCookie\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// GS checks require the stack to be re-ordered, which can\u0026#39;t be done with EnC\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDbgEnC\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ecompStressCompile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRESS_UNSAFE_BUFFER_CHECKS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e25\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esetNeedsGSSecurityCookie\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecompGSReorderStackLayout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003elvaCount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_STRUCT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ecompStressCompile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRESS_GENERIC_VARN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e60\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvIsUnsafeBuffer\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egetNeedsGSSecurityCookie\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Ensure that there will be at least one stack variable since\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// we require that the GSCookie does not have a 0 stack offset.\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003edummy\u003c/span\u003e         \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaGrabTempWithImplicitUse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e \u003cspan class=\"n\"\u003eDEBUGARG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;GSCookie dummy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003edummy\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_INT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elvaTableDump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eINITIAL_FRAME_LAYOUT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e初始的本地变量数量是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einfo.compArgsCount + info.compMethodInfo-\u0026gt;locals.numArgs\u003c/code\u003e, 也就是IL中的参数数量+IL中的本地变量数量.\n因为后面可能会添加更多的临时变量, 本地变量表的储存采用了length+capacity的方式,\n本地变量表的指针是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elvaTable\u003c/code\u003e, 当前长度是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elvaCount\u003c/code\u003e, 最大长度是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elvaTableCnt\u003c/code\u003e.\n本地变量表的开头部分会先保存IL中的参数变量, 随后才是IL中的本地变量,\n例如有3个参数, 2个本地变量时, 本地变量表是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e[参数0, 参数1, 参数2, 变量0, 变量1, 空, 空, 空, ... ]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e此外如果对当前函数的编译是为了内联, 本地变量表会使用调用端(callsite)的对象.\u003c/p\u003e\n\n\u003ch1 id=\"根据il创建basicblock\"\u003e根据IL创建BasicBlock\u003c/h1\u003e\n\n\u003cp\u003e在进入JIT的主函数之前, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecompCompileHelper\u003c/code\u003e会先解析IL并且根据指令创建\u003ca href=\"https://en.wikipedia.org/wiki/Basic_block\"\u003eBasicBlock\u003c/a\u003e.\n在\u003ca href=\"https://303248153.github.io/coreclr-07/\"\u003e上一篇\u003c/a\u003e中也提到过,\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e是内部不包含跳转的逻辑块, 跳转指令原则只出现在block的最后, 同时跳转目标只能是block的开头.\u003c/p\u003e\n\n\u003cp\u003e创建\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e的逻辑在函数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgFindBasicBlocks\u003c/code\u003e, 我们来看看它的源代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/*****************************************************************************\n *\n *  Main entry point to discover the basic blocks for the current function.\n */\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003efgFindBasicBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;*************** In fgFindBasicBlocks() for %s\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompFullName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Allocate the \u0026#39;jump target\u0026#39; vector\n     *\n     *  We need one extra byte as we mark\n     *  jumpTarget[info.compILCodeSize] with JT_ADDR\n     *  when we need to add a dummy block\n     *  to record the end of a try or handler region.\n     */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBYTE\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ejumpTarget\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCMK_Unknown\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eBYTE\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompILCodeSize\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ememset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejumpTarget\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eJT_NONE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompILCodeSize\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eJT_NONE\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Walk the instrs to find all jump targets */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgFindJumpTargets\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompILCodeSize\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ejumpTarget\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDonotInline\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Are there any exception handlers? */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompXcptnsCount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsForInlining\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Check and mark all the exception handlers */\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompXcptnsCount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eDWORD\u003c/span\u003e             \u003cspan class=\"n\"\u003etmpOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eCORINFO_EH_CLAUSE\u003c/span\u003e \u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCompHnd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egetEHinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMethodHnd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eHandlerLength\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTryLength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eBADCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;try block length \u0026lt;=0\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"cm\"\u003e/* Mark the \u0026#39;try\u0026#39; block extent and the handler itself */\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTryOffset\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompILCodeSize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eBADCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;try offset is \u0026gt; codesize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejumpTarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTryOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eJT_NONE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ejumpTarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTryOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eJT_ADDR\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003etmpOffset\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTryOffset\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTryLength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etmpOffset\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompILCodeSize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eBADCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;try end is \u0026gt; codesize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejumpTarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etmpOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eJT_NONE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ejumpTarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etmpOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eJT_ADDR\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eHandlerOffset\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompILCodeSize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eBADCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;handler offset \u0026gt; codesize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejumpTarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eHandlerOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eJT_NONE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ejumpTarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eHandlerOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eJT_ADDR\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003etmpOffset\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eHandlerOffset\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eHandlerLength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etmpOffset\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompILCodeSize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eBADCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;handler end \u0026gt; codesize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejumpTarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etmpOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eJT_NONE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ejumpTarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etmpOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eJT_ADDR\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eCORINFO_EH_CLAUSE_FILTER\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFilterOffset\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompILCodeSize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eBADCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;filter offset \u0026gt; codesize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejumpTarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFilterOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eJT_NONE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003ejumpTarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFilterOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eJT_ADDR\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eanyJumpTargets\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Jump targets:\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompILCodeSize\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejumpTarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eJT_NONE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003eanyJumpTargets\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;  IL_%04x\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejumpTarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eJT_ADDR\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34; addr\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejumpTarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eJT_MULTI\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34; multi\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eanyJumpTargets\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;  none\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // DEBUG\n\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Now create the basic blocks */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgMakeBasicBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompILCodeSize\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ejumpTarget\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsForInlining\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompInlineResult\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIsFailure\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003ehasReturnBlocks\u003c/span\u003e           \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003ehasMoreThanOneReturnBlock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efgFirstBB\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbJumpKind\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBBJ_RETURN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehasReturnBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003ehasMoreThanOneReturnBlock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003ehasReturnBlocks\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ehasReturnBlocks\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ecompInlineResult\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUsesLegacyPolicy\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// Mark the call node as \u0026#34;no return\u0026#34;. The inliner might ignore CALLEE_DOES_NOT_RETURN and\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// fail inline for a different reasons. In that case we still want to make the \u0026#34;no return\u0026#34;\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// information available to the caller as it can impact caller\u0026#39;s code quality.\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003eimpInlineInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eiciCall\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtCallMoreFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eGTF_CALL_M_DOES_NOT_RETURN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003ecompInlineResult\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eNoteBool\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eInlineObservation\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eCALLEE_DOES_NOT_RETURN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ehasReturnBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompInlineResult\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIsFailure\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompXcptnsCount\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecompHndBBtab\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpInlineInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInlinerCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecompHndBBtab\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecompHndBBtabAllocCount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eimpInlineInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInlinerCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecompHndBBtabAllocCount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// we probably only use the table, not add to it.\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecompHndBBtabCount\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpInlineInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInlinerCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecompHndBBtabCount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompXcptnsCount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpInlineInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInlinerCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompXcptnsCount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompRetNativeType\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_VOID\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ehasMoreThanOneReturnBlock\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// The lifetime of this var might expand multiple BBs. So it is a long lifetime compiler temp.\u003c/span\u003e\n            \u003cspan class=\"n\"\u003elvaInlineeReturnSpillTemp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaGrabTemp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e \u003cspan class=\"n\"\u003eDEBUGARG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Inline candidate multiple BBJ_RETURN spill temp\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n            \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elvaInlineeReturnSpillTemp\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompRetNativeType\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Mark all blocks within \u0026#39;try\u0026#39; blocks as such */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompXcptnsCount\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompXcptnsCount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eMAX_XCPTN_INDEX\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eIMPL_LIMITATION\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;too many exception clauses\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Allocate the exception handler table */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgAllocEHTable\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Assume we don\u0026#39;t need to sort the EH table (such that nested try/catch\n     * appear before their try or handler parent). The EH verifier will notice\n     * when we do need to sort it.\n     */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgNeedToSortEHTable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003everInitEHTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompXcptnsCount\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEHNodeDsc\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003einitRoot\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eehnNext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// remember the original root since\u003c/span\u003e\n                                   \u003cspan class=\"c1\"\u003e// it may get modified during insertion\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Annotate BBs with exception handling information required for generating correct eh code\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// as well as checking for correct IL\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eEHblkDsc\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecompHndBBtab\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecompHndBBtabCount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eCORINFO_EH_CLAUSE\u003c/span\u003e \u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCompHnd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egetEHinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMethodHnd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eHandlerLength\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// @DEPRECATED\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003edispIncomingEHClause\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // DEBUG\n\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eIL_OFFSET\u003c/span\u003e \u003cspan class=\"n\"\u003etryBegOff\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTryOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eIL_OFFSET\u003c/span\u003e \u003cspan class=\"n\"\u003etryEndOff\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etryBegOff\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTryLength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eIL_OFFSET\u003c/span\u003e \u003cspan class=\"n\"\u003efilterBegOff\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eIL_OFFSET\u003c/span\u003e \u003cspan class=\"n\"\u003ehndBegOff\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eHandlerOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eIL_OFFSET\u003c/span\u003e \u003cspan class=\"n\"\u003ehndEndOff\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehndBegOff\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eHandlerLength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eCORINFO_EH_CLAUSE_FILTER\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efilterBegOff\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFilterOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etryEndOff\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompILCodeSize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eBADCODE3\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;end of try block beyond end of method for try\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; at offset %04X\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etryBegOff\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehndEndOff\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompILCodeSize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eBADCODE3\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;end of hnd block beyond end of method for try\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; at offset %04X\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etryBegOff\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdTryBegOffset\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etryBegOff\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdTryEndOffset\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etryEndOff\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdFilterBegOffset\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efilterBegOff\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdHndBegOffset\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehndBegOff\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdHndEndOffset\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehndEndOff\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Convert the various addresses to basic blocks */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003etryBegBB\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efgLookupBB\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etryBegOff\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003etryEndBB\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efgLookupBB\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etryEndOff\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// note: this can be NULL if the try region is at the end of the function\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efgLookupBB\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehndBegOff\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ehndEndBB\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003efiltBB\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Assert that the try/hnd beginning blocks are set up correctly\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etryBegBB\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eBADCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Try Clause is invalid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eBADCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Handler Clause is invalid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003etryBegBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_HAS_LABEL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_HAS_LABEL\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_JMP_TARGET\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#if HANDLER_ENTRY_MUST_BE_IN_HOT_SECTION\n\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// This will change the block weight from 0 to 1\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// and clear the rarely run flag\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emakeBlockHot\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#else\n\u003c/span\u003e        \u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbSetRunRarely\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// handler entry points are rarely executed\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehndEndOff\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompILCodeSize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ehndEndBB\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efgLookupBB\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehndEndOff\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eCORINFO_EH_CLAUSE_FILTER\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efiltBB\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdFilter\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efgLookupBB\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFilterOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003efiltBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCatchTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBCT_FILTER\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efiltBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_HAS_LABEL\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_JMP_TARGET\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCatchTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBCT_FILTER_HANDLER\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#if HANDLER_ENTRY_MUST_BE_IN_HOT_SECTION\n\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// This will change the block weight from 0 to 1\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// and clear the rarely run flag\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efiltBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emakeBlockHot\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#else\n\u003c/span\u003e            \u003cspan class=\"n\"\u003efiltBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbSetRunRarely\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// filter entry points are rarely executed\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// Mark all BBs that belong to the filter with the XTnum of the corresponding handler\u003c/span\u003e\n            \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efiltBB\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/**/\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eBADCODE3\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Missing endfilter for filter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; at offset %04X\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efiltBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCodeOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"c1\"\u003e// Still inside the filter\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esetHndIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbJumpKind\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBBJ_EHFILTERRET\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// Mark catch handler as successor.\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbJumpDest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbJumpDest\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCatchTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBBCT_FILTER_HANDLER\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNext\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNext\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eBADCODE3\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Filter does not immediately precede handler for filter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; at offset %04X\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                         \u003cspan class=\"n\"\u003efiltBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCodeOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eClassToken\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"cm\"\u003e/* Set bbCatchTyp as appropriate */\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eCORINFO_EH_CLAUSE_FINALLY\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCatchTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBCT_FINALLY\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eCORINFO_EH_CLAUSE_FAULT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCatchTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBCT_FAULT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCatchTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eClassToken\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                    \u003cspan class=\"c1\"\u003e// These values should be non-zero value that will\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// not collide with real tokens for bbCatchTyp\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eClassToken\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eBADCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Exception catch type is Null\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                    \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eClassToken\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBCT_FAULT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eClassToken\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBCT_FINALLY\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eClassToken\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBCT_FILTER\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eClassToken\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBCT_FILTER_HANDLER\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Mark the initial block and last blocks in the \u0026#39;try\u0026#39; region */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003etryBegBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_TRY_BEG\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_HAS_LABEL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/*  Prevent future optimizations of removing the first block   */\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/*  of a TRY block and the first block of an exception handler */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003etryBegBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_DONT_REMOVE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_DONT_REMOVE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbRefs\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// The first block of a handler gets an extra, \u0026#34;artificial\u0026#34; reference count.\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eCORINFO_EH_CLAUSE_FILTER\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efiltBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_DONT_REMOVE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efiltBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbRefs\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// The first block of a filter gets an extra, \u0026#34;artificial\u0026#34; reference count.\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003etryBegBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_DONT_REMOVE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_DONT_REMOVE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Store the info to the table of EH block handlers\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdHandlerType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eToEHHandlerType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFlags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdTryBeg\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etryBegBB\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdTryLast\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etryEndBB\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003efgLastBB\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003etryEndBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbPrev\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdHndBeg\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdHndLast\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehndEndBB\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003efgLastBB\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ehndEndBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbPrev\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Assert that all of our try/hnd blocks are setup correctly.\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdTryLast\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eBADCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Try Clause is invalid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdHndLast\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eBADCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Handler Clause is invalid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Verify that it\u0026#39;s legal\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003everInsertEhNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eclause\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// end foreach handler table entry\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgSortEHTable\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Next, set things related to nesting that depend on the sorting being complete.\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecompHndBBtab\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecompHndBBtabCount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* Mark all blocks in the finally/fault or catch clause */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003etryBegBB\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdTryBeg\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdHndBeg\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eIL_OFFSET\u003c/span\u003e \u003cspan class=\"n\"\u003etryBegOff\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdTryBegOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eIL_OFFSET\u003c/span\u003e \u003cspan class=\"n\"\u003etryEndOff\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdTryEndOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eIL_OFFSET\u003c/span\u003e \u003cspan class=\"n\"\u003ehndBegOff\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdHndBegOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eIL_OFFSET\u003c/span\u003e \u003cspan class=\"n\"\u003ehndEndOff\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdHndEndOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCodeOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ehndEndOff\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehasHndIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esetHndIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// All blocks in a catch handler or filter are rarely run, except the entry\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehndBegBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCatchTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBCT_FINALLY\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbSetRunRarely\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Mark all blocks within the covered range of the try */\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etryBegBB\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCodeOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003etryEndOff\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"cm\"\u003e/* Mark this BB as belonging to a \u0026#39;try\u0026#39; block */\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehasTryIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esetTryIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e            \u003cspan class=\"cm\"\u003e/* Note: the BB can\u0026#39;t span the \u0026#39;try\u0026#39; block */\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_INTERNAL\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etryBegOff\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCodeOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etryEndOff\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCodeOffsEnd\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003etryEndOff\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003etryBegOff\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/*  Init ebdHandlerNestingLevel of current clause, and bump up value for all\n *  enclosed clauses (which have to be before it in the table).\n *  Innermost try-finally blocks must precede outermost\n *  try-finally blocks.\n */\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#if !FEATURE_EH_FUNCLETS\n\u003c/span\u003e        \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdHandlerNestingLevel\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // !FEATURE_EH_FUNCLETS\n\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdEnclosingTryIndex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eEHblkDsc\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eNO_ENCLOSING_INDEX\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdEnclosingHndIndex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eEHblkDsc\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eNO_ENCLOSING_INDEX\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecompHndBBtabCount\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eehGetIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eEHblkDsc\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003extab\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecompHndBBtab\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003extab\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003extab\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#if !FEATURE_EH_FUNCLETS\n\u003c/span\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejitIsBetween\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003extab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdHndBegOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003ehndBegOff\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehndEndOff\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003extab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdHandlerNestingLevel\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // !FEATURE_EH_FUNCLETS\n\u003c/span\u003e\n            \u003cspan class=\"cm\"\u003e/* If we haven\u0026#39;t recorded an enclosing try index for xtab then see\n             *  if this EH region should be recorded.  We check if the\n             *  first offset in the xtab lies within our region.  If so,\n             *  the last offset also must lie within the region, due to\n             *  nesting rules. verInsertEhNode(), below, will check for proper nesting.\n             */\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003extab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdEnclosingTryIndex\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eEHblkDsc\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eNO_ENCLOSING_INDEX\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003ebegBetween\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejitIsBetween\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003extab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdTryBegOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003etryBegOff\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etryEndOff\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebegBetween\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// Record the enclosing scope link\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003extab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdEnclosingTryIndex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eshort\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"cm\"\u003e/* Do the same for the enclosing handler index.\n             */\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003extab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdEnclosingHndIndex\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eEHblkDsc\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eNO_ENCLOSING_INDEX\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003ebegBetween\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejitIsBetween\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003extab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdTryBegOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003ehndBegOff\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehndEndOff\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebegBetween\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// Record the enclosing scope link\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003extab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdEnclosingHndIndex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eshort\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// end foreach handler table entry\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#if !FEATURE_EH_FUNCLETS\n\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEHblkDsc\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtabEnd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecompHndBBtab\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtabEnd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecompHndBBtab\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ecompHndBBtabCount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtabEnd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eehMaxHndNestingCount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdHandlerNestingLevel\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eehMaxHndNestingCount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdHandlerNestingLevel\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#endif // !FEATURE_EH_FUNCLETS\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifndef DEBUG\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// always run these checks for a debug build\u003c/span\u003e\n        \u003cspan class=\"n\"\u003everCheckNestingLevel\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einitRoot\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifndef DEBUG\n\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// fgNormalizeEH assumes that this test has been passed.  And Ssa assumes that fgNormalizeEHTable\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// has been run.  So do this unless we\u0026#39;re in minOpts mode (and always in debug).\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMinOpts\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efgCheckBasicBlockControlFlow\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;*************** After fgFindBasicBlocks() has created the EH table\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efgDispHandlerTab\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// We can\u0026#39;t verify the handler table until all the IL legality checks have been done (above), since bad IL\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// (such as illegal nesting of regions) will trigger asserts here.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgVerifyHandlerTab\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgNormalizeEH\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgFindBasicBlocks\u003c/code\u003e首先创建了一个byte数组, 长度跟IL长度一样(也就是一个IL偏移值会对应一个byte),\n然后调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgFindJumpTargets\u003c/code\u003e查找跳转目标, 以这段IL为例:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eIL_0000  00                nop         \nIL_0001  16                ldc.i4.0    \nIL_0002  0a                stloc.0     \nIL_0003  2b 0d             br.s         13 (IL_0012)\nIL_0005  00                nop         \nIL_0006  06                ldloc.0     \nIL_0007  28 0c 00 00 0a    call         0xA00000C\nIL_000c  00                nop         \nIL_000d  00                nop         \nIL_000e  06                ldloc.0     \nIL_000f  17                ldc.i4.1    \nIL_0010  58                add         \nIL_0011  0a                stloc.0     \nIL_0012  06                ldloc.0     \nIL_0013  19                ldc.i4.3    \nIL_0014  fe 04             clt         \nIL_0016  0b                stloc.1     \nIL_0017  07                ldloc.1     \nIL_0018  2d eb             brtrue.s     -21 (IL_0005)\nIL_001a  2a                ret         \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这段IL可以找到两个跳转目标:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eJump targets:\n  IL_0005\n  IL_0012\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgFindBasicBlocks\u003c/code\u003e会根据函数的例外信息找到更多的跳转目标, 例如try的开始和catch的开始都会被视为跳转目标.\n注意\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgFindJumpTargets\u003c/code\u003e在解析IL的后会判断是否值得内联, 内联相关的处理将在下面说明.\u003c/p\u003e\n\n\u003cp\u003e之后调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgMakeBasicBlocks\u003c/code\u003e创建\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgMakeBasicBlocks\u003c/code\u003e在遇到\u003cstrong\u003e跳转指令\u003c/strong\u003e或者\u003cstrong\u003e跳转目标\u003c/strong\u003e时会开始一个新的block.\n调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgMakeBasicBlocks\u003c/code\u003e后, compiler中就有了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e的链表(从fgFirstBB开始), 每个节点对应IL中的一段范围.\u003c/p\u003e\n\n\u003cp\u003e在创建完\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e后还会根据例外信息创建一个例外信息表\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecompHndBBtab\u003c/code\u003e(也称EH表), 长度是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecompHndBBtabCount\u003c/code\u003e.\n表中每条记录都有\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etry\u003c/code\u003e开始的block, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehandler(catch, finally, fault)\u003c/code\u003e开始的block, 和外层的try序号(如果try嵌套了).\u003c/p\u003e\n\n\u003cp\u003e如下图所示:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171028110045851-188393709.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch1 id=\"jit主函数\"\u003eJIT主函数\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecompCompileHelper\u003c/code\u003e把\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e划分好以后, 就会调用3参数版的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCompiler::compCompile\u003c/code\u003e, 这个函数就是JIT的主函数.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/compiler.cpp#L4078\"\u003eCompiler::compCompile\u003c/a\u003e的源代码如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e//*********************************************************************************************\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// #Phases\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// This is the most interesting \u0026#39;toplevel\u0026#39; function in the JIT.  It goes through the operations of\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// importing, morphing, optimizations and code generation.  This is called from the EE through the\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// code:CILJit::compileMethod function.\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// For an overview of the structure of the JIT, see:\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//   https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCompile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e**\u003c/span\u003e \u003cspan class=\"n\"\u003emethodCodePtr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eULONG\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003emethodCodeSize\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCORJIT_FLAGS\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ecompileFlags\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsForInlining\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Notify root instance that an inline attempt is about to import IL\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpInlineRoot\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003em_inlineStrategy\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eNoteImport\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ehashBv\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eInit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eVarSetOps\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eAssignAllowUninitRhs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompCurLife\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eVarSetOps\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eUninitVal\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* The temp holding the secret stub argument is used by fgImport() when importing the intrinsic. */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompPublishStubParam\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaStubArgumentVar\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBAD_VAR_NUM\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elvaStubArgumentVar\u003c/span\u003e                  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaGrabTempWithImplicitUse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e \u003cspan class=\"n\"\u003eDEBUGARG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;stub argument\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elvaStubArgumentVar\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_PRE_IMPORT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ecompFunctionTraceStart\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Convert the instrs in each basic block to a tree based intermediate representation */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgImport\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003efgComputePredsDone\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efgCheapPredsValid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Remove cheap predecessors before inlining; allowing the cheap predecessor lists to be inserted\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// with inlined blocks causes problems.\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efgRemovePreds\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsForInlining\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* Quit inlining if fgImport() failed for any reason. */\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDonotInline\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Filter out unimported BBs */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003efgRemoveEmptyBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDonotInline\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_IMPORTATION\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Maybe the caller was not interested in generating code\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsForImportOnly\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecompFunctionTraceEnd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#if !FEATURE_EH\n\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// If we aren\u0026#39;t yet supporting EH in a compiler bring-up, remove as many EH handlers as possible, so\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// we can pass tests that contain try/catch EH, but don\u0026#39;t actually throw any exceptions.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgRemoveEH\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // !FEATURE_EH\n\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompileFlags\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecorJitFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eCORJIT_FLG_BBINSTR\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efgInstrumentMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// We could allow ESP frames. Just need to reserve space for\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// pushing EBP if the method becomes an EBP-frame after an edit.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Note that requiring a EBP Frame disallows double alignment.  Thus if we change this\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// we either have to disallow double alignment for E\u0026amp;C some other way or handle it in EETwain.\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDbgEnC\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecodeGen\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esetFramePointerRequired\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// Since we need a slots for security near ebp, its not possible\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// to do this after an Edit without shifting all the locals.\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// So we just always reserve space for these slots in case an Edit adds them\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompNeedSecurityCheck\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// We don\u0026#39;t care about localloc right now. If we do support it,\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// EECodeManager::FixContextForEnC() needs to handle it smartly\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// in case the localloc was actually executed.\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// compLocallocUsed            = true;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_POST_IMPORT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Initialize the BlockSet epoch */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eNewBasicBlockEpoch\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Massage the trees so that we can generate code out of them */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgMorph\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_MORPH\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* GS security checks for unsafe buffers */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egetNeedsGSSecurityCookie\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e*************** -GS checks for unsafe buffers \u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n        \u003cspan class=\"n\"\u003egsGSChecksInitCookie\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompGSReorderStackLayout\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003egsCopyShadowParams\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efgDispBasicBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_GS_COOKIE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Compute bbNum, bbRefs and bbPreds */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003eRenumbering the basic blocks for fgComputePred\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgRenumberBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003efgComputePredsDone\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// This is the first time full (not cheap) preds will be computed.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgComputePreds\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_COMPUTE_PREDS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* If we need to emit GC Poll calls, mark the blocks that need them now.  This is conservative and can\n     * be optimized later. */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgMarkGCPollBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_MARK_GC_POLL_BLOCKS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* From this point on the flowgraph information such as bbNum,\n     * bbRefs or bbPreds has to be kept updated */\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Compute the edge weights (if we have profile data)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgComputeEdgeWeights\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_COMPUTE_EDGE_WEIGHTS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#if FEATURE_EH_FUNCLETS\n\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Create funclets from the EH handlers. */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgCreateFunclets\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_CREATE_FUNCLETS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_EH_FUNCLETS\n\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMinOpts\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDbgCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eoptOptimizeLayout\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_OPTIMIZE_LAYOUT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// Compute reachability sets and dominators.\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efgComputeReachability\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Transform each GT_ALLOCOBJ node into either an allocation helper call or\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// local variable allocation on the stack.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eObjectAllocator\u003c/span\u003e \u003cspan class=\"n\"\u003eobjectAllocator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eobjectAllocator\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRun\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMinOpts\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDbgCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/*  Perform loop inversion (i.e. transform \u0026#34;while\u0026#34; loops into\n            \u0026#34;repeat\u0026#34; loops) and discover and classify natural loops\n            (e.g. mark iterative loops as such). Also marks loop blocks\n            and sets bbWeight to the loop nesting levels\n        */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eoptOptimizeLoops\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_OPTIMIZE_LOOPS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// Clone loops with optimization opportunities, and\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// choose the one based on dynamic condition evaluation.\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eoptCloneLoops\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_CLONE_LOOPS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Unroll loops */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eoptUnrollLoops\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_UNROLL_LOOPS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"n\"\u003efgDebugCheckLinks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Create the variable table (and compute variable ref counts) */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003elvaMarkLocalVars\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_MARK_LOCAL_VARS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// IMPORTANT, after this point, every place where trees are modified or cloned\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// the local variable reference counts must be updated\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// You can test the value of the following variable to see if\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// the local variable ref counts must be updated\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaLocalVarRefCounted\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMinOpts\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDbgCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* Optimize boolean conditions */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eoptOptimizeBools\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_OPTIMIZE_BOOLS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// optOptimizeBools() might have changed the number of blocks; the dominators/reachability might be bad.\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Figure out the order in which operators are to be evaluated */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgFindOperOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_FIND_OPER_ORDER\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Weave the tree lists. Anyone who modifies the tree shapes after\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// this point is responsible for calling fgSetStmtSeq() to keep the\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// nodes properly linked.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// This can create GC poll calls, and create new BasicBlocks (without updating dominators/reachability).\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgSetBlockOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_SET_BLOCK_ORDER\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// IMPORTANT, after this point, every place where tree topology changes must redo evaluation\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// order (gtSetStmtInfo) and relink nodes (fgSetStmtSeq) if required.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCLANG_FORMAT_COMMENT_ANCHOR\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Now  we have determined the order of evaluation and the gtCosts for every node.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// If verbose, dump the full set of trees here before the optimization phases mutate them\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efgDispBasicBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// \u0026#39;true\u0026#39; will call fgDumpTrees() after dumping the BasicBlocks\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// At this point we know if we are fully interruptible or not\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMinOpts\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDbgCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003edoSsa\u003c/span\u003e           \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003edoEarlyProp\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003edoValueNum\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003edoLoopHoisting\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003edoCopyProp\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003edoAssertionProp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003edoRangeAnalysis\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e        \u003cspan class=\"n\"\u003edoSsa\u003c/span\u003e           \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eJitConfig\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eJitDoSsa\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003edoEarlyProp\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edoSsa\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eJitConfig\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eJitDoEarlyProp\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003edoValueNum\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edoSsa\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eJitConfig\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eJitDoValueNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003edoLoopHoisting\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edoValueNum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eJitConfig\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eJitDoLoopHoisting\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003edoCopyProp\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edoValueNum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eJitConfig\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eJitDoCopyProp\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003edoAssertionProp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edoValueNum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eJitConfig\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eJitDoAssertionProp\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003edoRangeAnalysis\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edoAssertionProp\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eJitConfig\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eJitDoRangeAnalysis\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edoSsa\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efgSsaBuild\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_BUILD_SSA\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edoEarlyProp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"cm\"\u003e/* Propagate array length and rewrite getType() method call */\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eoptEarlyProp\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_EARLY_PROP\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edoValueNum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efgValueNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_VALUE_NUMBER\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edoLoopHoisting\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"cm\"\u003e/* Hoist invariant code out of loops */\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eoptHoistLoopCode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_HOIST_LOOP_CODE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edoCopyProp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"cm\"\u003e/* Perform VN based copy propagation */\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eoptVnCopyProp\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_VN_COPY_PROP\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#if FEATURE_ANYCSE\n\u003c/span\u003e        \u003cspan class=\"cm\"\u003e/* Remove common sub-expressions */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eoptOptimizeCSEs\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_ANYCSE\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#if ASSERTION_PROP\n\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edoAssertionProp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"cm\"\u003e/* Assertion propagation */\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eoptAssertionPropMain\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_ASSERTION_PROP_MAIN\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edoRangeAnalysis\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"cm\"\u003e/* Optimize array index range checks */\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eRangeCheck\u003c/span\u003e \u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eOptimizeRangeChecks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_OPTIMIZE_INDEX_CHECKS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // ASSERTION_PROP\n\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* update the flowgraph if we modified it during the optimization phase*/\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efgModified\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efgUpdateFlowGraph\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_UPDATE_FLOW_GRAPH\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// Recompute the edge weight if we have modified the flow graph\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efgComputeEdgeWeights\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_COMPUTE_EDGE_WEIGHTS2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef _TARGET_AMD64_\n\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//  Check if we need to add the Quirk for the PPP backward compat issue\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecompQuirkForPPPflag\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecompQuirkForPPP\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgDetermineFirstColdBlock\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_DETERMINE_FIRST_COLD_BLOCK\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"n\"\u003efgDebugCheckLinks\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompStressCompile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRESS_REMORPH_TREES\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Stash the current estimate of the function\u0026#39;s size if necessary.\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecompSizeEstimate\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecompCycleEstimate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efgFirstBB\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eGenTreeStmt\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003estmt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003efirstStmt\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003estmt\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003estmt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estmt\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egetNextStmt\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ecompSizeEstimate\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003estmt\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetCostSz\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ecompCycleEstimate\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003estmt\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetCostEx\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifndef LEGACY_BACKEND\n\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// rationalize trees\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eRationalizer\u003c/span\u003e \u003cspan class=\"n\"\u003erat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// PHASE_RATIONALIZE\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erat\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRun\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // !LEGACY_BACKEND\n\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Here we do \u0026#34;simple lowering\u0026#34;.  When the RyuJIT backend works for all\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// platforms, this will be part of the more general lowering phase.  For now, though, we do a separate\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// pass of \u0026#34;final lowering.\u0026#34;  We must do this before (final) liveness analysis, because this creates\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// range check throw blocks, in which the liveness must be correct.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgSimpleLowering\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_SIMPLE_LOWERING\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef LEGACY_BACKEND\n\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* Local variable liveness */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgLocalVarLiveness\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_LCLVARLIVENESS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // !LEGACY_BACKEND\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"n\"\u003efgDebugCheckBBlist\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgDebugCheckLinks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Enable this to gather statistical data such as\n     * call and register argument info, flowgraph and loop info, etc. */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ecompJitStats\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef _TARGET_ARM_\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompLocallocUsed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// We reserve REG_SAVED_LOCALLOC_SP to store SP on entry for stack unwinding\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecodeGen\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eregSet\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ersMaskResvd\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eRBM_SAVED_LOCALLOC_SP\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // _TARGET_ARM_\n#ifdef _TARGET_ARMARCH_\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompRsvdRegCheck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePRE_REGALLOC_FRAME_LAYOUT\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// We reserve R10/IP1 in this case to hold the offsets in load/store instructions\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecodeGen\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eregSet\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ersMaskResvd\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eRBM_OPT_RSVD\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eREG_OPT_RSVD\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eREG_FP\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Display the pre-regalloc frame offsets that we have tentatively decided upon\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elvaTableDump\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n#endif // _TARGET_ARMARCH_\n\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Assign registers to variables, etc. */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCLANG_FORMAT_COMMENT_ANCHOR\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifndef LEGACY_BACKEND\n\u003c/span\u003e    \u003cspan class=\"c1\"\u003e///////////////////////////////////////////////////////////////////////////////\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Dominator and reachability sets are no longer valid. They haven\u0026#39;t been\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// maintained up to here, and shouldn\u0026#39;t be used (unless recomputed).\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e///////////////////////////////////////////////////////////////////////////////\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgDomsComputed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Create LSRA before Lowering, this way Lowering can initialize the TreeNode Map */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003em_pLinearScan\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetLinearScanAllocator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Lower */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eLowering\u003c/span\u003e \u003cspan class=\"n\"\u003elower\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003em_pLinearScan\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// PHASE_LOWERING\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elower\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRun\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaSortAgain\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// We should have re-run fgLocalVarLiveness() in lower.Run()\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elvaTrackedFixed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// We can not add any new tracked variables after this point.\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Now that lowering is completed we can proceed to perform register allocation */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003em_pLinearScan\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edoLinearScan\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_LINEAR_SCAN\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Copied from rpPredictRegUse()\u003c/span\u003e\n    \u003cspan class=\"n\"\u003egenFullPtrRegMap\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeGen\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egenInterruptible\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeGen\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eisFramePointerUsed\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#else  // LEGACY_BACKEND\n\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elvaTrackedFixed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// We cannot add any new tracked variables after this point.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// For the classic JIT32 at this point lvaSortAgain can be set and raAssignVars() will call lvaSortOnly()\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Now do \u0026#34;classic\u0026#34; register allocation.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eraAssignVars\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_RA_ASSIGN_VARS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // LEGACY_BACKEND\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"n\"\u003efgDebugCheckLinks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Generate code */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ecodeGen\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egenGenerateCode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emethodCodePtr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emethodCodeSize\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_JIT_METHOD_PERF\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epCompJitTimer\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epCompJitTimer\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTerminate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCompTimeSummaryInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003es_compTimeSummary\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eRecordStateAtEndOfCompilation\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_TRACELOGGING\n\u003c/span\u003e    \u003cspan class=\"n\"\u003ecompJitTelemetry\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNotifyEndOfCompilation\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#if defined(DEBUG)\n\u003c/span\u003e    \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003eCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ejitTotalMethodCompiled\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // defined(DEBUG)\n\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecompFunctionTraceEnd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emethodCodePtr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emethodCodeSize\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#if FUNC_INFO_LOGGING\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompJitFuncInfoFile\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsForInlining\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG // We only have access to info.compFullName in DEBUG builds.\n\u003c/span\u003e        \u003cspan class=\"n\"\u003efprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompJitFuncInfoFile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;%s\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompFullName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#elif FEATURE_SIMD\n\u003c/span\u003e        \u003cspan class=\"n\"\u003efprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompJitFuncInfoFile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; %s\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eeeGetMethodFullName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMethodHnd\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e        \u003cspan class=\"n\"\u003efprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompJitFuncInfoFile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// in our logic this causes a flush\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FUNC_INFO_LOGGING\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eJIT主函数中包含了对各个阶段的调用, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEndPhase(PHASE_PRE_IMPORT)\u003c/code\u003e表示这个阶段的结束.\u003c/p\u003e\n\n\u003cp\u003e这里的阶段比微软列出的阶段要多出来一些:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171028110106930-46112063.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e接下来我们逐个分析这些阶段.\u003c/p\u003e\n\n\u003ch1 id=\"phase_pre_import\"\u003ePHASE_PRE_IMPORT\u003c/h1\u003e\n\n\u003cp\u003e这个阶段负责从IL导入HIR(GenTree)前的一些工作, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsForInlining\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Notify root instance that an inline attempt is about to import IL\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eimpInlineRoot\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003em_inlineStrategy\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eNoteImport\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ehashBv\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eInit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eVarSetOps\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eAssignAllowUninitRhs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompCurLife\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eVarSetOps\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eUninitVal\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* The temp holding the secret stub argument is used by fgImport() when importing the intrinsic. */\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompPublishStubParam\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaStubArgumentVar\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBAD_VAR_NUM\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elvaStubArgumentVar\u003c/span\u003e                  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaGrabTempWithImplicitUse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e \u003cspan class=\"n\"\u003eDEBUGARG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;stub argument\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elvaStubArgumentVar\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_PRE_IMPORT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e执行了import前的一些初始化工作,\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehashBv::Init\u003c/code\u003e为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCompiler\u003c/code\u003e创建一个bitvector的分配器(allocator),\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVarSetOps::AssignAllowUninitRhs\u003c/code\u003e设置\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecompCurLife\u003c/code\u003e的值为未初始化(这个变量会用于保存当前活动的本地变量集合),\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecompPublishStubParam\u003c/code\u003e选项开启时会添加一个额外的本地变量(这个变量会保存函数进入时的rax值).\u003c/p\u003e\n\n\u003ch1 id=\"phase_importation\"\u003ePHASE_IMPORTATION\u003c/h1\u003e\n\n\u003cp\u003e这个阶段负责从IL导入HIR(GenTree), 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003ecompFunctionTraceStart\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Convert the instrs in each basic block to a tree based intermediate representation */\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003efgImport\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003efgComputePredsDone\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efgCheapPredsValid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Remove cheap predecessors before inlining; allowing the cheap predecessor lists to be inserted\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// with inlined blocks causes problems.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgRemovePreds\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsForInlining\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Quit inlining if fgImport() failed for any reason. */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDonotInline\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Filter out unimported BBs */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgRemoveEmptyBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDonotInline\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_IMPORTATION\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecompFunctionTraceStart\u003c/code\u003e会打印一些除错信息.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgImport\u003c/code\u003e会解析IL并添加\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGenTree\u003c/code\u003e节点, 因为此前已经创建了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e, 根据IL创建的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGenTree\u003c/code\u003e会分别添加到对应的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e中.\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e + \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGenTree\u003c/code\u003e就是我们通常说的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIR\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIR\u003c/code\u003e有两种形式, 树形式的叫\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eHIR\u003c/code\u003e(用于JIT前端), 列表形式的叫\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eLIR\u003c/code\u003e(用于JIT后端), 这里构建的是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eHIR\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L6663\"\u003efgImport\u003c/a\u003e的源代码如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003efgImport\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgHasPostfix\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eimpImport\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efgFirstBB\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eeeFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eCORJIT_FLG_SKIP_VERIFICATION\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eCorInfoMethodRuntimeFlags\u003c/span\u003e \u003cspan class=\"n\"\u003everFlag\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003everFlag\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etiIsVerifiableCode\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eCORINFO_FLG_VERIFIABLE\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCORINFO_FLG_UNVERIFIABLE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCompHnd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esetMethodAttribs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMethodHnd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003everFlag\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e对第一个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e调用了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eimpImport\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/importer.cpp#L16373\"\u003eimpImport\u003c/a\u003e的源代码如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/*****************************************************************************\n *\n *  Convert the instrs (\u0026#34;import\u0026#34;) into our internal format (trees). The\n *  basic flowgraph has already been constructed and is passed in.\n */\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eimpImport\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;*************** In impImport() for %s\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompFullName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Allocate the stack contents */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMaxStack\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpSmallStack\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpSmallStack\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* Use local variable, don\u0026#39;t waste time allocating on the heap */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eimpStkSize\u003c/span\u003e              \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpSmallStack\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpSmallStack\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStack\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpSmallStack\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpStkSize\u003c/span\u003e              \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMaxStack\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStack\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCMK_ImpStack\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eStackEntry\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eimpStkSize\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// initialize the entry state at start of method\u003c/span\u003e\n    \u003cspan class=\"n\"\u003everInitCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Initialize stuff related to figuring \u0026#34;spill cliques\u0026#34; (see spec comment for impGetSpillTmpBase).\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003einlineRoot\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpInlineRoot\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003einlineRoot\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// These are only used on the root of the inlining tree.\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// We have initialized these previously, but to size 0.  Make them larger.\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpPendingBlockMembers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eInit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egetAllocator\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003efgBBNumMax\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpSpillCliquePredMembers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eInit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egetAllocator\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003efgBBNumMax\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpSpillCliqueSuccMembers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eInit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egetAllocator\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003efgBBNumMax\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einlineRoot\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eimpPendingBlockMembers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eReset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efgBBNumMax\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einlineRoot\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eimpSpillCliquePredMembers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eReset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efgBBNumMax\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einlineRoot\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eimpSpillCliqueSuccMembers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eReset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efgBBNumMax\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eimpBlockListNodeFreeList\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"n\"\u003eimpLastILoffsStmt\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eimpNestedStackSpill\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e    \u003cspan class=\"n\"\u003eimpBoxTemp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBAD_VAR_NUM\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eimpPendingList\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpPendingFree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Add the entry-point to the worker-list */\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Skip leading internal blocks. There can be one as a leading scratch BB, and more\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// from EH normalization.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// NOTE: It might be possible to always just put fgFirstBB on the pending list, and let everything else just fall\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// out.\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(;\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_INTERNAL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Treat these as imported.\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbJumpKind\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBBJ_NONE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// We assume all the leading ones are fallthrough.\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Marking leading BBF_INTERNAL block BB%02u as BBF_IMPORTED\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_IMPORTED\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eimpImportBlockPending\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Import blocks in the worker-list until there are no more */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpPendingList\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* Remove the entry at the front of the list */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003ePendingDsc\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edsc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpPendingList\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpPendingList\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpPendingList\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epdNext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpSetPendingBlockMember\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edsc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epdBB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Restore the stack state */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ethisInitialized\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edsc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epdThisPtrInit\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStackDepth\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edsc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epdSavedStack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003essDepth\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStackDepth\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eimpRestoreStackState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edsc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epdSavedStack\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Add the entry to the free list for reuse */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003edsc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epdNext\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpPendingFree\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpPendingFree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edsc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Now import the block */\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edsc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epdBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_FAILED_VERIFICATION\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef _TARGET_64BIT_\n\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// On AMD64, during verification we have to match JIT64 behavior since the VM is very tighly\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// coupled with the JIT64 IL Verification logic.  Look inside verHandleVerificationFailure\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// method for further explanation on why we raise this exception instead of making the jitted\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// code throw the verification exception during execution.\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eeeFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eCORJIT_FLG_IMPORT_ONLY\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eBADCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Basic block marked as not verifiable\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // _TARGET_64BIT_\n\u003c/span\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003everConvertBBToThrowVerificationException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edsc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epdBB\u003c/span\u003e \u003cspan class=\"n\"\u003eDEBUGARG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpEndTreeList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edsc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epdBB\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eimpImportBlock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edsc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epdBB\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDonotInline\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsForImportOnly\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompXcptnsCount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003eAfter impImport() added block for try,catch,finally\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efgDispBasicBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Used in impImportBlockPending() for STRESS_CHK_REIMPORT\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efgFirstBB\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;=\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"n\"\u003eBBF_VISITED\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsForInlining\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e首先初始化运行堆栈(execution stack)\u003ccode class=\"language-plaintext highlighter-rouge\"\u003everCurrentState.esStack\u003c/code\u003e, maxstack小于16时使用SmallStack, 否则new.\n然后初始化记录”Spill Cliques”(Spill Temps的群体, 用于保存从运行堆栈spill出来的值的临时变量)所需的成员.\n之后标记内部添加的(BBF_INTERNAL)\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e为已导入(BBF_IMPORTED), 因为这些block并无对应的IL范围.\n接下来会添加第一个非内部的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e到队列\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eimpPendingList\u003c/code\u003e, 然后一直处理这个队列直到它为空.\n处理队列中的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e会调用函数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eimpImportBlock(dsc-\u0026gt;pdBB)\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/importer.cpp#L15321\"\u003eimpImportBlock\u003c/a\u003e的源代码如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e//***************************************************************\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// Import the instructions for the given basic block.  Perform\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// verification, throwing an exception on failure.  Push any successor blocks that are enabled for the first\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// time, or whose verification pre-state is changed.\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef _PREFAST_\n#pragma warning(push)\n#pragma warning(disable : 21000) // Suppress PREFast warning about overly large function\n#endif\n\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eimpImportBlock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// BBF_INTERNAL blocks only exist during importation due to EH canonicalization. We need to\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// handle them specially. In particular, there is no IL to import for them, but we do need\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// to mark them as imported and put their successors on the pending import list.\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_INTERNAL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Marking BBF_INTERNAL block BB%02u as BBF_IMPORTED\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_IMPORTED\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eNumSucc\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eimpImportBlockPending\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetSucc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003emarkImport\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Make the block globaly available */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ecompCurBB\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* Initialize the debug variables */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eimpCurOpcName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eimpCurOpcOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCodeOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Set the current stack state to the merged result */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003everResetCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Now walk the code and import the IL into GenTrees */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eFilterVerificationExceptionsParam\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e   \u003cspan class=\"n\"\u003epThis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eFilterVerificationExceptionsParam\u003c/span\u003e \u003cspan class=\"n\"\u003eparam\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eparam\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epThis\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eparam\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ePAL_TRY\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFilterVerificationExceptionsParam\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epParam\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eparam\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* @VERIFICATION : For now, the only state propagation from try\n           to it\u0026#39;s handler is \u0026#34;thisInit\u0026#34; state (stack is empty at start of try).\n           In general, for state that we track in verification, we need to\n           model the possibility that an exception might happen at any IL\n           instruction, so we really need to merge all states that obtain\n           between IL instructions in a try block into the start states of\n           all handlers.\n\n           However we do not allow the \u0026#39;this\u0026#39; pointer to be uninitialized when\n           entering most kinds try regions (only try/fault are allowed to have\n           an uninitialized this pointer on entry to the try)\n\n           Fortunately, the stack is thrown away when an exception\n           leads to a handler, so we don\u0026#39;t have to worry about that.\n           We DO, however, have to worry about the \u0026#34;thisInit\u0026#34; state.\n           But only for the try/fault case.\n\n           The only allowed transition is from TIS_Uninit to TIS_Init.\n\n           So for a try/fault region for the fault handler block\n           we will merge the start state of the try begin\n           and the post-state of each block that is part of this try region\n        */\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// merge the start state of the try begin\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epParam\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_TRY_BEG\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003epParam\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epThis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eimpVerifyEHBlock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epParam\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003epParam\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epThis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eimpImportBlockCode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epParam\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// As discussed above:\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// merge the post-state of each block that is part of this try region\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epParam\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehasTryIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003epParam\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epThis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eimpVerifyEHBlock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epParam\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ePAL_EXCEPT_FILTER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFilterVerificationExceptions\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003everHandleVerificationFailure\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"n\"\u003eDEBUGARG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ePAL_ENDTRY\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDonotInline\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDonotInline\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003emarkImport\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nl\"\u003eSPILLSTACK:\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e    \u003cspan class=\"n\"\u003ebaseTmp\u003c/span\u003e             \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNO_BASE_TMP\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// input temps assigned to successor blocks\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e        \u003cspan class=\"n\"\u003ereimportSpillClique\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003etgtBlock\u003c/span\u003e            \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* If the stack is non-empty, we might have to spill its contents */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStackDepth\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpBoxTemp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBAD_VAR_NUM\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// if a box temp is used in a block that leaves something\u003c/span\u003e\n                                  \u003cspan class=\"c1\"\u003e// on the stack, its lifetime is hard to determine, simply\u003c/span\u003e\n                                  \u003cspan class=\"c1\"\u003e// don\u0026#39;t reuse such temps.\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eGenTreePtr\u003c/span\u003e \u003cspan class=\"n\"\u003eaddStmt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Do the successors of \u0026#39;block\u0026#39; have any other predecessors ?\n           We do not want to do some of the optimizations related to multiRef\n           if we can reimport blocks */\u003c/span\u003e\n\n        \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003emultRef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpCanReimport\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbJumpKind\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBBJ_COND\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* Temporarily remove the \u0026#39;jtrue\u0026#39; from the end of the tree list */\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpTreeLast\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpTreeLast\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOper\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eGT_STMT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpTreeLast\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtStmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtStmtExpr\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOper\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eGT_JTRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003eaddStmt\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpTreeLast\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpTreeLast\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpTreeLast\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtPrev\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* Note if the next block has more than one ancestor */\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003emultRef\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNext\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbRefs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* Does the next block have temps assigned? */\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003ebaseTmp\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNext\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbStkTempsIn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etgtBlock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebaseTmp\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eNO_BASE_TMP\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* Try the target of the jump then */\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003emultRef\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbJumpDest\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbRefs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ebaseTmp\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbJumpDest\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbStkTempsIn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etgtBlock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbJumpDest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBBJ_ALWAYS\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003emultRef\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbJumpDest\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbRefs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ebaseTmp\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbJumpDest\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbStkTempsIn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etgtBlock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbJumpDest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBBJ_NONE\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003emultRef\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNext\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbRefs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ebaseTmp\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNext\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbStkTempsIn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etgtBlock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBBJ_SWITCH\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e**\u003c/span\u003e \u003cspan class=\"n\"\u003ejmpTab\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e     \u003cspan class=\"n\"\u003ejmpCnt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* Temporarily remove the GT_SWITCH from the end of the tree list */\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpTreeLast\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpTreeLast\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOper\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eGT_STMT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpTreeLast\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtStmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtStmtExpr\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOper\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eGT_SWITCH\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003eaddStmt\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpTreeLast\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpTreeLast\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpTreeLast\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtPrev\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003ejmpCnt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbJumpSwt\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbsCount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ejmpTab\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbJumpSwt\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbsDstTab\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003etgtBlock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ejmpTab\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                    \u003cspan class=\"n\"\u003emultRef\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003etgtBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbRefs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                    \u003cspan class=\"c1\"\u003e// Thanks to spill cliques, we should have assigned all or none\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003ebaseTmp\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eNO_BASE_TMP\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebaseTmp\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003etgtBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbStkTempsIn\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003ebaseTmp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etgtBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbStkTempsIn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emultRef\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ejmpTab\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"n\"\u003ejmpCnt\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBBJ_CALLFINALLY\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBBJ_EHCATCHRET\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBBJ_RETURN\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBBJ_EHFINALLYRET\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBBJ_EHFILTERRET\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBBJ_THROW\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eNO_WAY\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;can\u0026#39;t have \u0026#39;unreached\u0026#39; end of BB with non-empty stack\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"nl\"\u003edefault:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Unexpected bbJumpKind\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emultRef\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Do we have a base temp number? */\u003c/span\u003e\n\n        \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003enewTemps\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebaseTmp\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eNO_BASE_TMP\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enewTemps\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"cm\"\u003e/* Grab enough temps for the whole stack */\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ebaseTmp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpGetSpillTmpBase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Spill all stack entries into temps */\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etempNum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003eSpilling stack entries into temps\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elevel\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etempNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebaseTmp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003elevel\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStackDepth\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etempNum\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eGenTreePtr\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStack\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"cm\"\u003e/* VC generates code where it pushes a byref from one branch, and an int (ldc.i4 0) from\n               the other. This should merge to a byref in unverifiable code.\n               However, if the branch which leaves the TYP_I_IMPL on the stack is imported first, the\n               successor would be imported assuming there was a TYP_I_IMPL on\n               the stack. Thus the value would not get GC-tracked. Hence,\n               change the temp to TYP_BYREF and reimport the successors.\n               Note: We should only allow this in unverifiable code.\n            */\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_BYREF\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etempNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003everNeedsVerification\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etempNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_BYREF\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpReimportMarkSuccessors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003emarkImport\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef _TARGET_64BIT_\n\u003c/span\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etempNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_INT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etgtBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbEntryState\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etgtBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_FAILED_VERIFICATION\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// Merge the current state into the entry state of block;\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// the call to verMergeEntryStates must have changed\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// the entry state of the block by merging the int local var\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// and the native-int stack entry.\u003c/span\u003e\n                    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003echanged\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everMergeEntryStates\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etgtBlock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003echanged\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eimpRetypeEntryStateTemps\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etgtBlock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eimpReimportBlockPending\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etgtBlock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echanged\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003etgtBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_FAILED_VERIFICATION\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"c1\"\u003e// Some other block in the spill clique set this to \u0026#34;int\u0026#34;, but now we have \u0026#34;native int\u0026#34;.\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// Change the type and go back to re-import any blocks that used the wrong type.\u003c/span\u003e\n                \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etempNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ereimportSpillClique\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_INT\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etempNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// Spill clique has decided this should be \u0026#34;native int\u0026#34;, but this block only pushes an \u0026#34;int\u0026#34;.\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// Insert a sign-extension to \u0026#34;native int\u0026#34; so we match the clique.\u003c/span\u003e\n                \u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStack\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewCastNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// Consider the case where one branch left a \u0026#39;byref\u0026#39; on the stack and the other leaves\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// an \u0026#39;int\u0026#39;. On 32-bit, this is allowed (in non-verifiable code) since they are the same\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// size. JIT64 managed to make this work on 64-bit. For compatibility, we support JIT64\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// behavior instead of asserting and then generating bad code (where we save/restore the\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// low 32 bits of a byref pointer to an \u0026#39;int\u0026#39; sized local). If the \u0026#39;int\u0026#39; side has been\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// imported already, we need to change the type of the local and reimport the spill clique.\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// If the \u0026#39;byref\u0026#39; side has imported, we insert a cast from int to \u0026#39;native int\u0026#39; to match\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// the \u0026#39;byref\u0026#39; size.\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_BYREF\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etempNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_INT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// Some other block in the spill clique set this to \u0026#34;int\u0026#34;, but now we have \u0026#34;byref\u0026#34;.\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// Change the type and go back to re-import any blocks that used the wrong type.\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etempNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_BYREF\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003ereimportSpillClique\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_INT\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etempNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_BYREF\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// Spill clique has decided this should be \u0026#34;byref\u0026#34;, but this block only pushes an \u0026#34;int\u0026#34;.\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// Insert a sign-extension to \u0026#34;native int\u0026#34; so we match the clique size.\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStack\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewCastNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // _TARGET_64BIT_\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#if FEATURE_X87_DOUBLES\n\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// X87 stack doesn\u0026#39;t differentiate between float/double\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// so promoting is no big deal.\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// For everybody else keep it as float until we have a collision and then promote\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// Just like for x64\u0026#39;s TYP_INT\u0026lt;-\u0026gt;TYP_I_IMPL\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emultRef\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_FLOAT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStack\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewCastNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTYP_DOUBLE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_DOUBLE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#else // !FEATURE_X87_DOUBLES\n\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_DOUBLE\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etempNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_FLOAT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// Some other block in the spill clique set this to \u0026#34;float\u0026#34;, but now we have \u0026#34;double\u0026#34;.\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// Change the type and go back to re-import any blocks that used the wrong type.\u003c/span\u003e\n                \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etempNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_DOUBLE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ereimportSpillClique\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_FLOAT\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etempNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_DOUBLE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// Spill clique has decided this should be \u0026#34;double\u0026#34;, but this block only pushes a \u0026#34;float\u0026#34;.\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// Insert a cast to \u0026#34;double\u0026#34; so we match the clique.\u003c/span\u003e\n                \u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStack\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewCastNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTYP_DOUBLE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_DOUBLE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_X87_DOUBLES\n\u003c/span\u003e\n            \u003cspan class=\"cm\"\u003e/* If addStmt has a reference to tempNum (can only happen if we\n               are spilling to the temps already used by a previous block),\n               we need to spill addStmt */\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaddStmt\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003enewTemps\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003egtHasRef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaddStmt\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtStmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtStmtExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etempNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eGenTreePtr\u003c/span\u003e \u003cspan class=\"n\"\u003eaddTree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eaddStmt\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtStmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtStmtExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaddTree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOper\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eGT_JTRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eGenTreePtr\u003c/span\u003e \u003cspan class=\"n\"\u003erelOp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eaddTree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erelOp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eOperIsCompare\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\n                    \u003cspan class=\"n\"\u003evar_types\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erelOp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egtHasRef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erelOp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etempNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003etemp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaGrabTemp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e \u003cspan class=\"n\"\u003eDEBUGARG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;spill addStmt JTRUE ref Op1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eimpAssignTempGen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erelOp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003etype\u003c/span\u003e              \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003erelOp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewLclvNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egtHasRef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erelOp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etempNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003etemp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaGrabTemp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e \u003cspan class=\"n\"\u003eDEBUGARG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;spill addStmt JTRUE ref Op2\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eimpAssignTempGen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erelOp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003etype\u003c/span\u003e              \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003erelOp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewLclvNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaddTree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOper\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eGT_SWITCH\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaddTree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003etemp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaGrabTemp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e \u003cspan class=\"n\"\u003eDEBUGARG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;spill addStmt SWITCH\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eimpAssignTempGen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eaddTree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eaddTree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewLclvNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"cm\"\u003e/* Spill the stack entry, and replace with the temp */\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eimpSpillStackEntry\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etempNum\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e                                    \u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                    \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Spill Stack Entry\u0026#34;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e                                    \u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emarkImport\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eBADCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;bad stack state\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"c1\"\u003e// Oops. Something went wrong when spilling. Bad code.\u003c/span\u003e\n                \u003cspan class=\"n\"\u003everHandleVerificationFailure\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"n\"\u003eDEBUGARG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eSPILLSTACK\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Put back the \u0026#39;jtrue\u0026#39;/\u0026#39;switch\u0026#39; if we removed it earlier */\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaddStmt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eimpAppendStmt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaddStmt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eCHECK_SPILL_NONE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Some of the append/spill logic works on compCurBB\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCurBB\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Save the tree list in the block */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eimpEndTreeList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// impEndTreeList sets BBF_IMPORTED on the block\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// We do *NOT* want to set it later than this because\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// impReimportSpillClique might clear it if this block is both a\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// predecessor and successor in the current spill clique\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_IMPORTED\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// If we had a int/native int, or float/double collision, we need to re-import\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereimportSpillClique\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// This will re-import all the successors of block (as well as each of their predecessors)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpReimportSpillClique\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// For blocks that haven\u0026#39;t been imported yet, we still need to mark them as pending import.\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eNumSucc\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003esucc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetSucc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003esucc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_IMPORTED\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpImportBlockPending\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esucc\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"c1\"\u003e// the normal case\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// otherwise just import the successors of block\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Does this block jump to any other blocks? */\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eNumSucc\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eimpImportBlockPending\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetSucc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef _PREFAST_\n#pragma warning(pop)\n#endif\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个函数首先会调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eimpImportBlockCode\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eimpImportBlockCode\u003c/code\u003e负责根据IL生成\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGenTree\u003c/code\u003e的主要处理.\n导入block后, 如果运行堆栈不为空(跳转后的指令需要跳转前push进去的参数), 需要把运行堆栈中的值spill到临时变量.\nblock结束后spill的临时变量的索引开始值会保存在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebbStkTempsOut\u003c/code\u003e, block开始时需要读取的临时变量的索引开始值保存在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebbStkTempsIn\u003c/code\u003e.\n因为运行堆栈中的值基本上不会跨越\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e(从C#编译出来的IL), 就不详细分析这里的逻辑了.\n接下来看\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eimpImportBlockCode\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/importer.cpp#L9207\"\u003eimpImportBlockCode\u003c/a\u003e的源代码如下:\n这个函数有5000多行, 这里我只截取一部分.\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#ifdef _PREFAST_\n#pragma warning(push)\n#pragma warning(disable : 21000) // Suppress PREFast warning about overly large function\n#endif\n\u003c/span\u003e\u003cspan class=\"cm\"\u003e/*****************************************************************************\n *  Import the instr for the given basic block\n */\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eimpImportBlockCode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#define _impResolveToken(kind) impResolveToken(codeAddr, \u0026amp;resolvedToken, kind)\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003eImporting BB%02u (PC=%03u) of \u0026#39;%s\u0026#39;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCodeOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompFullName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e  \u003cspan class=\"n\"\u003enxtStmtIndex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpInitBlockLineInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIL_OFFSET\u003c/span\u003e \u003cspan class=\"n\"\u003enxtStmtOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eGenTreePtr\u003c/span\u003e                   \u003cspan class=\"n\"\u003earrayNodeFrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003earrayNodeTo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003earrayNodeToIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e                         \u003cspan class=\"n\"\u003eexpandInline\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCorInfoHelpFunc\u003c/span\u003e              \u003cspan class=\"n\"\u003ehelper\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCorInfoIsAccessAllowedResult\u003c/span\u003e \u003cspan class=\"n\"\u003eaccessAllowedResult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCORINFO_HELPER_DESC\u003c/span\u003e          \u003cspan class=\"n\"\u003ecalloutHelper\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eBYTE\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e                  \u003cspan class=\"n\"\u003elastLoadToken\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// reject cyclic constraints\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eVerify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehasCircularClassConstraints\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Method parent has circular class type parameter constraints.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eVerify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehasCircularMethodConstraints\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Method has circular method type parameter constraints.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Get the tree list started */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eimpBeginTreeList\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Walk the opcodes that comprise the basic block */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eBYTE\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCode\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCodeOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eBYTE\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ecodeEndp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCode\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCodeOffsEnd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eIL_OFFSET\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCodeOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIL_OFFSET\u003c/span\u003e \u003cspan class=\"n\"\u003elastSpillOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003esigned\u003c/span\u003e \u003cspan class=\"n\"\u003ejmpDist\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* remember the start of the delegate creation sequence (used for verification) */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eBYTE\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edelegateCreateStart\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e  \u003cspan class=\"n\"\u003eprefixFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eexplicitTailCall\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econstraintCall\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ereadonlyCall\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e     \u003cspan class=\"n\"\u003einsertLdloc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// set by CEE_DUP and cleared by following store\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etypeInfo\u003c/span\u003e \u003cspan class=\"n\"\u003etiRetVal\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003enumArgs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompArgsCount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Now process all the opcodes in the block */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003evar_types\u003c/span\u003e \u003cspan class=\"n\"\u003ecallTyp\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_COUNT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOPCODE\u003c/span\u003e    \u003cspan class=\"n\"\u003eprevOpcode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_ILLEGAL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCatchTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompStmtOffsetsImplicit\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eICorDebugInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eCALL_SITE_BOUNDARIES\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eimpCurStmtOffsSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbCodeOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// We will spill the GT_CATCH_ARG and the input of the BB_QMARK block\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// to a temp. This is a trade off for code simplicity\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpSpillSpecialSideEff\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecodeEndp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e                   \u003cspan class=\"n\"\u003eusingReadyToRunHelper\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eCORINFO_RESOLVED_TOKEN\u003c/span\u003e \u003cspan class=\"n\"\u003eresolvedToken\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eCORINFO_RESOLVED_TOKEN\u003c/span\u003e \u003cspan class=\"n\"\u003econstrainedResolvedToken\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eCORINFO_CALL_INFO\u003c/span\u003e      \u003cspan class=\"n\"\u003ecallInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eCORINFO_FIELD_INFO\u003c/span\u003e     \u003cspan class=\"n\"\u003efieldInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003etiRetVal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Default type info\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e//---------------------------------------------------------------------\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* We need to restrict the max tree depth as many of the Compiler\n           functions are recursive. We do this by spilling the stack */\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStackDepth\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"cm\"\u003e/* Has it been a while since we last saw a non-empty stack (which\n               guarantees that the tree depth isnt accumulating. */\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003elastSpillOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e200\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpSpillStackEnsure\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                \u003cspan class=\"n\"\u003elastSpillOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003elastSpillOffs\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eimpBoxTempInUse\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// nothing on the stack, box temp OK to use again\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Compute the current instr offset */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIL_OFFSET\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#if defined(DEBUGGING_SUPPORT) || defined(DEBUG)\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifndef DEBUG\n\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDbgInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsForInlining\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003enxtStmtOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enxtStmtIndex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompStmtOffsetsCount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompStmtOffsets\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enxtStmtIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eBAD_IL_OFFSET\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* Have we reached the next stmt boundary ? */\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enxtStmtOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eBAD_IL_OFFSET\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003enxtStmtOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enxtStmtOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompStmtOffsets\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enxtStmtIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStackDepth\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDbgCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"cm\"\u003e/* We need to provide accurate IP-mapping at this point.\n                           So spill anything on the stack so that it will form\n                           gtStmts with the correct stmt offset noted */\u003c/span\u003e\n\n                        \u003cspan class=\"n\"\u003eimpSpillStackEnsure\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                    \u003cspan class=\"c1\"\u003e// Has impCurStmtOffs been reported in any tree?\u003c/span\u003e\n\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpCurStmtOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eBAD_IL_OFFSET\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDbgCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eGenTreePtr\u003c/span\u003e \u003cspan class=\"n\"\u003eplaceHolder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eGT_NO_OP\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eGenTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eGT_NO_OP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_VOID\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eimpAppendTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eplaceHolder\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eCHECK_SPILL_NONE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimpCurStmtOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpCurStmtOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBAD_IL_OFFSET\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpCurStmtOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBAD_IL_OFFSET\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"cm\"\u003e/* Make sure that nxtStmtIndex is in sync with opcodeOffs.\n                           If opcodeOffs has gone past nxtStmtIndex, catch up */\u003c/span\u003e\n\n                        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enxtStmtIndex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompStmtOffsetsCount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                               \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompStmtOffsets\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enxtStmtIndex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                            \u003cspan class=\"n\"\u003enxtStmtIndex\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                        \u003cspan class=\"cm\"\u003e/* Go to the new stmt */\u003c/span\u003e\n\n                        \u003cspan class=\"n\"\u003eimpCurStmtOffsSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompStmtOffsets\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enxtStmtIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\n                        \u003cspan class=\"cm\"\u003e/* Update the stmt boundary index */\u003c/span\u003e\n\n                        \u003cspan class=\"n\"\u003enxtStmtIndex\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enxtStmtIndex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompStmtOffsetsCount\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                        \u003cspan class=\"cm\"\u003e/* Are there any more line# entries after this one? */\u003c/span\u003e\n\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enxtStmtIndex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompStmtOffsetsCount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                            \u003cspan class=\"cm\"\u003e/* Remember where the next line# starts */\u003c/span\u003e\n\n                            \u003cspan class=\"n\"\u003enxtStmtOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompStmtOffsets\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enxtStmtIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                            \u003cspan class=\"cm\"\u003e/* No more line# entries */\u003c/span\u003e\n\n                            \u003cspan class=\"n\"\u003enxtStmtOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBAD_IL_OFFSET\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompStmtOffsetsImplicit\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eICorDebugInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eSTACK_EMPTY_BOUNDARIES\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                         \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStackDepth\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"cm\"\u003e/* At stack-empty locations, we have already added the tree to\n                       the stmt list with the last offset. We just need to update\n                       impCurStmtOffs\n                     */\u003c/span\u003e\n\n                    \u003cspan class=\"n\"\u003eimpCurStmtOffsSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompStmtOffsetsImplicit\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eICorDebugInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eCALL_SITE_BOUNDARIES\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                         \u003cspan class=\"n\"\u003eimpOpcodeIsCallSiteBoundary\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprevOpcode\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"cm\"\u003e/* Make sure we have a type cached */\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecallTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_COUNT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecallTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_VOID\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eimpCurStmtOffsSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDbgCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eimpSpillStackEnsure\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eimpCurStmtOffsSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompStmtOffsetsImplicit\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eICorDebugInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eNOP_BOUNDARIES\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprevOpcode\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_NOP\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDbgCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eimpSpillStackEnsure\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                    \u003cspan class=\"n\"\u003eimpCurStmtOffsSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpCurStmtOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBAD_IL_OFFSET\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003enxtStmtOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBAD_IL_OFFSET\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n                       \u003cspan class=\"n\"\u003ejitGetILoffs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpCurStmtOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003enxtStmtOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#endif // defined(DEBUGGING_SUPPORT) || defined(DEBUG)\n\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eCORINFO_CLASS_HANDLE\u003c/span\u003e \u003cspan class=\"n\"\u003eclsHnd\u003c/span\u003e       \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eDUMMY_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eCORINFO_CLASS_HANDLE\u003c/span\u003e \u003cspan class=\"n\"\u003eldelemClsHnd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eDUMMY_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eCORINFO_CLASS_HANDLE\u003c/span\u003e \u003cspan class=\"n\"\u003estelemClsHnd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eDUMMY_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003evar_types\u003c/span\u003e       \u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eovflType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_UNKNOWN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eGenTreePtr\u003c/span\u003e      \u003cspan class=\"n\"\u003eop1\u003c/span\u003e           \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eDUMMY_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eGenTreePtr\u003c/span\u003e      \u003cspan class=\"n\"\u003eop2\u003c/span\u003e           \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eDUMMY_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eGenTreeArgList\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eargs\u003c/span\u003e          \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// What good do these \u0026#34;DUMMY_INIT\u0026#34;s do?\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eGenTreePtr\u003c/span\u003e      \u003cspan class=\"n\"\u003enewObjThisPtr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eDUMMY_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e            \u003cspan class=\"n\"\u003euns\u003c/span\u003e           \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eDUMMY_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Get the next opcode and the size of its parameters */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eOPCODE\u003c/span\u003e \u003cspan class=\"n\"\u003eopcode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eOPCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003egetU1LittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kr\"\u003e__int8\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e        \u003cspan class=\"n\"\u003eimpCurOpcOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIL_OFFSET\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCode\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e    [%2u] %3u (0x%03x) \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStackDepth\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimpCurOpcOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimpCurOpcOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"nl\"\u003eDECODE_OPCODE:\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// Return if any previous code has caused inline to fail.\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDonotInline\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Get the size of additional parameters */\u003c/span\u003e\n\n        \u003cspan class=\"kt\"\u003esigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeSizes\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eopcode\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e        \u003cspan class=\"n\"\u003eclsHnd\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNO_CLASS_HANDLE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_COUNT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecallTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_COUNT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eimpCurOpcOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIL_OFFSET\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCode\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpCurOpcName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeNames\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eopcode\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopcode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_PREFIX1\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%s\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimpCurOpcName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Use assertImp() to display the opcode */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eop1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eop2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* See what kind of an opcode we have, then */\u003c/span\u003e\n\n        \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003emflags\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003eclsFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopcode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e  \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003evar_types\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003eGenTreePtr\u003c/span\u003e \u003cspan class=\"n\"\u003eop3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003egenTreeOps\u003c/span\u003e \u003cspan class=\"n\"\u003eoper\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e   \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003eCORINFO_SIG_INFO\u003c/span\u003e     \u003cspan class=\"n\"\u003esig\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e             \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eIL_OFFSET\u003c/span\u003e            \u003cspan class=\"n\"\u003ejmpAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e                 \u003cspan class=\"n\"\u003eovfl\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eunordered\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecallNode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e                 \u003cspan class=\"n\"\u003eldstruct\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eCORINFO_CLASS_HANDLE\u003c/span\u003e \u003cspan class=\"n\"\u003etokenType\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eunion\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"kt\"\u003eint\u003c/span\u003e     \u003cspan class=\"n\"\u003eintVal\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"kt\"\u003efloat\u003c/span\u003e   \u003cspan class=\"n\"\u003efltVal\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003e__int64\u003c/span\u003e \u003cspan class=\"n\"\u003elngVal\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e  \u003cspan class=\"n\"\u003edblVal\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_PREFIX1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eopcode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eOPCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"n\"\u003egetU1LittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e256\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kr\"\u003e__int8\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIL_OFFSET\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eDECODE_OPCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"nl\"\u003eSPILL_APPEND:\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* Append \u0026#39;op1\u0026#39; to the list of statements */\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpAppendTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eCHECK_SPILL_ALL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimpCurStmtOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eDONE_APPEND\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"nl\"\u003eAPPEND:\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* Append \u0026#39;op1\u0026#39; to the list of statements */\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003eimpAppendTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eCHECK_SPILL_NONE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimpCurStmtOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eDONE_APPEND\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"nl\"\u003eDONE_APPEND:\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e                \u003cspan class=\"c1\"\u003e// Remember at which BC offset the tree was finished\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpNoteLastILoffs\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpPushNullObjRefOnStack\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDC_I4_M1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDC_I4_0\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDC_I4_1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDC_I4_2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDC_I4_3\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDC_I4_4\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDC_I4_5\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDC_I4_6\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDC_I4_7\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDC_I4_8\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eintVal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopcode\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDC_I4_0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eintVal\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eintVal\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003ePUSH_I4CON\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDC_I4_S\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eintVal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetI1LittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003ePUSH_I4CON\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDC_I4\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eintVal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetI4LittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003ePUSH_I4CON\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"nl\"\u003ePUSH_I4CON:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34; %d\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eintVal\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpPushOnStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egtNewIconNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eintVal\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003etypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTI_INT\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDC_I8\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elngVal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetI8LittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34; 0x%016llx\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elngVal\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpPushOnStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egtNewLconNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elngVal\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003etypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTI_LONG\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDC_R8\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edblVal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetR8LittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34; %#.17g\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edblVal\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpPushOnStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egtNewDconNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edblVal\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003etypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTI_DOUBLE\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDC_R4\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edblVal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetR4LittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34; %#.17g\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edblVal\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eGenTreePtr\u003c/span\u003e \u003cspan class=\"n\"\u003ecnsOp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewDconNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edblVal\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#if !FEATURE_X87_DOUBLES\n\u003c/span\u003e                    \u003cspan class=\"c1\"\u003e// X87 stack doesn\u0026#39;t differentiate between float/double\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// so R4 is treated as R8, but everybody else does\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003ecnsOp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_FLOAT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_X87_DOUBLES\n\u003c/span\u003e                    \u003cspan class=\"n\"\u003eimpPushOnStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecnsOp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTI_DOUBLE\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDSTR\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsForInlining\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpInlineInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003einlineCandidateInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edwRestrictions\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eINLINE_NO_CALLEE_LDSTR\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003ecompInlineResult\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eNoteFatal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eInlineObservation\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eCALLSITE_HAS_LDSTR_RESTRICTION\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetU4LittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34; %08X\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eVerify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCompHnd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eisValidStringRef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompScopeHnd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;bad string\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003etiRetVal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTI_REF\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimpGetStringClass\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpPushOnStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egtNewSconNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompScopeHnd\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003etiRetVal\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDARG\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetU2LittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34; %u\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpLoadArg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDARG_S\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetU1LittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34; %u\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpLoadArg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDARG_0\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDARG_1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDARG_2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDARG_3\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopcode\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDARG_0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpLoadArg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDLOC\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetU2LittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34; %u\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpLoadLoc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDLOC_S\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetU1LittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34; %u\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpLoadLoc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDLOC_0\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDLOC_1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDLOC_2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDLOC_3\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopcode\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDLOC_0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eimpLoadLoc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_STARG\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetU2LittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eSTARG\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_STARG_S\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetU1LittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"nl\"\u003eSTARG:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34; %u\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eVerify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompILargsCount\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;bad arg num\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsForInlining\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eop1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpInlineFetchArg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimpInlineInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003einlArgInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimpInlineInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elclVarInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOper\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eGT_LCL_VAR\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eAsLclVar\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtLclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                    \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eVAR_ST_VALID\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecompMapILargNum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// account for possible hidden param\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eassertImp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompThisArg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaArg0Var\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvArgWrite\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003etypeInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etiLclVar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvVerTypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eVerify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiCompatibleWith\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpStackTop\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eseTypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNormaliseForStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiLclVar\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                           \u003cspan class=\"s\"\u003e\u0026#34;type mismatch\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everTrackObjCtorInitState\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ethisInitialized\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eTIS_Init\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eVerify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003etiLclVar\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIsThisPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;storing to uninit this ptr\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eVAR_ST\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_STLOC\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetU2LittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34; %u\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eLOC_ST\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_STLOC_S\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetU1LittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34; %u\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eLOC_ST\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_STLOC_0\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_STLOC_1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_STLOC_2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_STLOC_3\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopcode\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_STLOC_0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n            \u003cspan class=\"nl\"\u003eLOC_ST:\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eVerify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMethodInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enumArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;bad local num\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eVerify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiCompatibleWith\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpStackTop\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eseTypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                            \u003cspan class=\"n\"\u003eNormaliseForStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003enumArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvVerTypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                           \u003cspan class=\"s\"\u003e\u0026#34;type mismatch\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsForInlining\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpInlineInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elclVarInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eimpInlineInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eargCnt\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elclTypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                    \u003cspan class=\"cm\"\u003e/* Have we allocated a temp for this local? */\u003c/span\u003e\n\n                    \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpInlineFetchLocal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"n\"\u003eDEBUGARG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Inline stloc first use temp\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n                    \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003e_PopValue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003enumArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"nl\"\u003eVAR_ST:\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompLocalsCount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaArg0Var\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// We should have thrown the VerificationException before.\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eBADCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Bad IL\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"nl\"\u003eVAR_ST_VALID:\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* if it is a struct assignment, make certain we don\u0026#39;t overflow the buffer */\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_STRUCT\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003elvaLclSize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCompHnd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egetClassSize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclsHnd\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvNormalizeOnLoad\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaGetRealType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaGetActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"nl\"\u003e_PopValue:\u003c/span\u003e\n                \u003cspan class=\"cm\"\u003e/* Pop the value being assigned */\u003c/span\u003e\n\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eStackEntry\u003c/span\u003e \u003cspan class=\"n\"\u003ese\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpPopStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclsHnd\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eop1\u003c/span\u003e           \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ese\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003etiRetVal\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ese\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eseTypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_SIMD\n\u003c/span\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evarTypeIsSIMD\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()))\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_STRUCT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_SIMD\n\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eop1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpImplicitIorI4Cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef _TARGET_64BIT_\n\u003c/span\u003e                \u003cspan class=\"c1\"\u003e// Downcast the TYP_I_IMPL into a 32-bit Int for x86 JIT compatiblity\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evarTypeIsI\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_INT\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// We should have thrown the VerificationException before.\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eop1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewCastNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTYP_INT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_INT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // _TARGET_64BIT_\n\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// We had better assign it a value of the correct type\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eassertImp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIsVarAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_BYREF\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_REF\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_BYREF\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evarTypeIsFloating\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003evarTypeIsFloating\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()))\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_BYREF\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_REF\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* If op1 is \u0026#34;\u0026amp;var\u0026#34; then its type is the transient \u0026#34;*\u0026#34; and it can\n                   be used either as TYP_BYREF or TYP_I_IMPL */\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIsVarAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eassertImp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_BYREF\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                    \u003cspan class=\"cm\"\u003e/* When \u0026#34;\u0026amp;var\u0026#34; is created, we assume it is a byref. If it is\n                       being assigned to a TYP_I_IMPL var, change the type to\n                       prevent unnecessary GC info */\u003c/span\u003e\n\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* Filter out simple assignments to itself */\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOper\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eGT_LCL_VAR\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtLclVarCommon\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtLclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einsertLdloc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"c1\"\u003e// This is a sequence of (ldloc, dup, stloc).  Can simplify\u003c/span\u003e\n                        \u003cspan class=\"c1\"\u003e// to (ldloc, stloc).  Goto LDVAR to reconstruct the ldloc node.\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eCLANG_FORMAT_COMMENT_ANCHOR\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                            \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003etypeInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eAreEquivalent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiRetVal\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNormaliseForStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvVerTypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e)));\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eop1\u003c/span\u003e         \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003einsertLdloc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                        \u003cspan class=\"n\"\u003eimpLoadVar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDbgCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eop1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewNothingNode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eSPILL_APPEND\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* Create the assignment node */\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003eop2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewLclvNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* If the local is aliased, we need to spill calls and\n                   indirections from the stack. */\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvAddrExposed\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvHasLdAddrOp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStackDepth\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eimpSpillSideEffects\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eCHECK_SPILL_ALL\u003c/span\u003e \u003cspan class=\"n\"\u003eDEBUGARG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Local could be aliased\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* Spill any refs to the local from the stack */\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003eimpSpillLclRefs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#if !FEATURE_X87_DOUBLES\n\u003c/span\u003e                \u003cspan class=\"c1\"\u003e// We can generate an assignment to a TYP_FLOAT from a TYP_DOUBLE\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// We insert a cast to the dest \u0026#39;op2\u0026#39; type\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eop2\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003evarTypeIsFloating\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003evarTypeIsFloating\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop2\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eop1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewCastNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop2\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop2\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // !FEATURE_X87_DOUBLES\n\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evarTypeIsStruct\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eop1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpAssignStruct\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eclsHnd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eCHECK_SPILL_ALL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// The code generator generates GC tracking information\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// based on the RHS of the assignment.  Later the LHS (which is\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// is a BYREF) gets used and the emitter checks that that variable\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// is being tracked.  It is not (since the RHS was an int and did\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// not need tracking).  To keep this assert happy, we change the RHS\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_BYREF\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003evarTypeIsGC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_BYREF\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eop1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewAssignNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* If insertLdloc is true, then we need to insert a ldloc following the\n                   stloc.  This is done when converting a (dup, stloc) sequence into\n                   a (stloc, ldloc) sequence. */\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einsertLdloc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// From SPILL_APPEND\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eimpAppendTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eCHECK_SPILL_ALL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimpCurStmtOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e                    \u003cspan class=\"c1\"\u003e// From DONE_APPEND\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eimpNoteLastILoffs\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e                    \u003cspan class=\"n\"\u003eop1\u003c/span\u003e         \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003einsertLdloc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                    \u003cspan class=\"n\"\u003eimpLoadVar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etiRetVal\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eSPILL_APPEND\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// 省略了一堆case...\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_NOP\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDbgCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eop1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eGT_NO_OP\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eGenTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eGT_NO_OP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_VOID\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eSPILL_APPEND\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"cm\"\u003e/******************************** NYI *******************************/\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"mh\"\u003e0xCC\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eOutputDebugStringA\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CLR: Invalid x86 breakpoint in IL stream\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_ILLEGAL\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_MACRO_END\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\n            \u003cspan class=\"nl\"\u003edefault:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eBADCODE3\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;unknown opcode\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;: %02X\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eopcode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprevOpcode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eopcode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eprefixFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003einsertLdloc\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eopcode\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_DUP\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003einsertLdloc\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#undef _impResolveToken\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef _PREFAST_\n#pragma warning(pop)\n#endif\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e首先\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecodeAddr\u003c/code\u003e和\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecodeEndp\u003c/code\u003e是block对应的IL的开始和结束地址, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eopcode\u003c/code\u003e是当前地址对应的byte,\n以\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eldloc.0\u003c/code\u003e为例, 这个指令的二进制是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e06\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e06\u003c/code\u003e是opcode CEE_LDLOC_0,\n以\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eldc.i4.s 100\u003c/code\u003e为例, 这个指令的二进制是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1f 64\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1f\u003c/code\u003e是opcode CEE_LDC_I4_S, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e64\u003c/code\u003e是参数也就是100的16进制.\n这个函数会用一个循环来解析属于当前block的IL范围内的IL指令, 因为IL指令有很多, 我只能挑几个典型的来解释.\u003c/p\u003e\n\n\u003cp\u003eIL指令\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eldc.i4.s\u003c/code\u003e会向运行堆栈推入一个常量int, 常量的范围在1 byte以内, 解析的代码如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDC_I4_S\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eintVal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetI1LittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003ePUSH_I4CON\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_LDC_I4\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eintVal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetI4LittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003ePUSH_I4CON\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ePUSH_I4CON\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34; %d\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eintVal\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eimpPushOnStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egtNewIconNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecval\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eintVal\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003etypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTI_INT\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们可以看到它会读取指令后的1 byte(无s的指令会读取4 byte), 然后调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eimpPushOnStack(gtNewIconNode(cval.intVal), typeInfo(TI_INT))\u003c/code\u003e.\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egtNewIconNode\u003c/code\u003e函数(Icon是int constant的缩写)会创建一个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_CNS_INT\u003c/code\u003e类型的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGenTree\u003c/code\u003e, 表示int常量的节点.\n创建节点后会把这个节点推到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e运行堆栈\u003c/code\u003e里, \u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/importer.cpp#L82\"\u003eimpPushOnStack\u003c/a\u003e的源代码如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/*****************************************************************************\n *\n *  Pushes the given tree on the stack.\n */\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eimpPushOnStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eGenTreePtr\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etypeInfo\u003c/span\u003e \u003cspan class=\"n\"\u003eti\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Check for overflow. If inlining, we may be using a bigger stack */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStackDepth\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMaxStack\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStackDepth\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpStkSize\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCurBB\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eBBF_IMPORTED\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eBADCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;stack overflow\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// If we are pushing a struct, make certain we know the precise type!\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_STRUCT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eti\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIsType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTI_STRUCT\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eCORINFO_CLASS_HANDLE\u003c/span\u003e \u003cspan class=\"n\"\u003eclsHnd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eti\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetClassHandle\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclsHnd\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eNO_CLASS_HANDLE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eti\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIsDead\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etypeInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eAreEquivalent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNormaliseForStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eti\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eti\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// types are normalized\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// The ti type is consistent with the tree type.\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// On 64-bit systems, nodes whose \u0026#34;proper\u0026#34; type is \u0026#34;native int\u0026#34; get labeled TYP_LONG.\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// In the verification type system, we always transform \u0026#34;native int\u0026#34; to \u0026#34;TI_INT\u0026#34;.\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Ideally, we would keep track of which nodes labeled \u0026#34;TYP_LONG\u0026#34; are really \u0026#34;native int\u0026#34;, but\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// attempts to do that have proved too difficult.  Instead, we\u0026#39;ll assume that in checks like this,\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// when there\u0026#39;s a mismatch, it\u0026#39;s because of this reason -- the typeInfo::AreEquivalentModuloNativeInt\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// method used in the last disjunct allows exactly this mismatch.\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eti\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIsDead\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eti\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIsByRef\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_BYREF\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n               \u003cspan class=\"n\"\u003eti\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIsUnboxedGenericTypeVar\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_REF\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n               \u003cspan class=\"n\"\u003eti\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIsObjRef\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_REF\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eti\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIsMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n               \u003cspan class=\"n\"\u003eti\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIsType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTI_STRUCT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_REF\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n               \u003cspan class=\"n\"\u003etypeInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eAreEquivalentModuloNativeInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNormaliseForStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eti\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                                                      \u003cspan class=\"n\"\u003eNormaliseForStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()))));\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// If it is a struct type, make certain we normalized the primitive types\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eti\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIsType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTI_STRUCT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n               \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCompHnd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egetTypeForPrimitiveValueClass\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eti\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetClassHandle\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eCORINFO_TYPE_UNDEF\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#if VERBOSE_VERIFY\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eVERBOSE\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTI_DUMP_PADDING\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;About to push to stack: \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eti\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDump\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // VERBOSE_VERIFY\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // DEBUG\n\u003c/span\u003e\n    \u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStack\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStackDepth\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eseTypeInfo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eti\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStack\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStackDepth\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_LONG\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompLongUsed\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecompLongUsed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(((\u003c/span\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_FLOAT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_DOUBLE\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompFloatingPointUsed\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecompFloatingPointUsed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eimpPushOnStack\u003c/code\u003e会把\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGenTree\u003c/code\u003e节点添加到运行堆栈\u003ccode class=\"language-plaintext highlighter-rouge\"\u003everCurrentState.esStack\u003c/code\u003e, 包含类型信息和刚才建立的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_CNS_INT\u003c/code\u003e节点.\u003c/p\u003e\n\n\u003cp\u003e假设\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eldc.i4.s 100\u003c/code\u003e后面的指令是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estloc.0\u003c/code\u003e, 表示给本地变量0赋值100, 那么后面的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estloc.0\u003c/code\u003e指令需要使用前面的值,\n我们来看看\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCEE_STLOC_0\u003c/code\u003e是怎么处理的:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_STLOC_0\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_STLOC_1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_STLOC_2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_STLOC_3\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopcode\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eCEE_STLOC_0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eLOC_ST\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eVerify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMethodInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enumArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;bad local num\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eVerify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiCompatibleWith\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpStackTop\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eseTypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003eNormaliseForStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003enumArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvVerTypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n               \u003cspan class=\"s\"\u003e\u0026#34;type mismatch\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsForInlining\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpInlineInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elclVarInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eimpInlineInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eargCnt\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elclTypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Have we allocated a temp for this local? */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpInlineFetchLocal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"n\"\u003eDEBUGARG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Inline stloc first use temp\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003e_PopValue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003enumArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eVAR_ST\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompLocalsCount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaArg0Var\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// We should have thrown the VerificationException before.\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eBADCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Bad IL\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eVAR_ST_VALID\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* if it is a struct assignment, make certain we don\u0026#39;t overflow the buffer */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_STRUCT\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003elvaLclSize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCompHnd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egetClassSize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclsHnd\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvNormalizeOnLoad\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaGetRealType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaGetActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003e_PopValue\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Pop the value being assigned */\u003c/span\u003e\n\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eStackEntry\u003c/span\u003e \u003cspan class=\"n\"\u003ese\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpPopStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclsHnd\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eop1\u003c/span\u003e           \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ese\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etiRetVal\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ese\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eseTypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_SIMD\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evarTypeIsSIMD\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_STRUCT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_SIMD\n\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eop1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpImplicitIorI4Cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef _TARGET_64BIT_\n\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Downcast the TYP_I_IMPL into a 32-bit Int for x86 JIT compatiblity\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evarTypeIsI\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_INT\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// We should have thrown the VerificationException before.\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eop1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewCastNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTYP_INT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_INT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // _TARGET_64BIT_\n\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// We had better assign it a value of the correct type\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassertImp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n        \u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIsVarAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_BYREF\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_REF\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_BYREF\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evarTypeIsFloating\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003evarTypeIsFloating\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()))\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_BYREF\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_REF\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* If op1 is \u0026#34;\u0026amp;var\u0026#34; then its type is the transient \u0026#34;*\u0026#34; and it can\n       be used either as TYP_BYREF or TYP_I_IMPL */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIsVarAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eassertImp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_BYREF\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* When \u0026#34;\u0026amp;var\u0026#34; is created, we assume it is a byref. If it is\n           being assigned to a TYP_I_IMPL var, change the type to\n           prevent unnecessary GC info */\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egenActualType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_I_IMPL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Filter out simple assignments to itself */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOper\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eGT_LCL_VAR\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003elclNum\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtLclVarCommon\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtLclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einsertLdloc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// This is a sequence of (ldloc, dup, stloc).  Can simplify\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// to (ldloc, stloc).  Goto LDVAR to reconstruct the ldloc node.\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eCLANG_FORMAT_COMMENT_ANCHOR\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiVerificationNeeded\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003etypeInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eAreEquivalent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etiRetVal\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNormaliseForStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvVerTypeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e)));\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eop1\u003c/span\u003e         \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003einsertLdloc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003eimpLoadVar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDbgCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eop1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewNothingNode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eSPILL_APPEND\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Create the assignment node */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eop2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewLclvNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* If the local is aliased, we need to spill calls and\n       indirections from the stack. */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvAddrExposed\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvHasLdAddrOp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStackDepth\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpSpillSideEffects\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eCHECK_SPILL_ALL\u003c/span\u003e \u003cspan class=\"n\"\u003eDEBUGARG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Local could be aliased\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Spill any refs to the local from the stack */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eimpSpillLclRefs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#if !FEATURE_X87_DOUBLES\n\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// We can generate an assignment to a TYP_FLOAT from a TYP_DOUBLE\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// We insert a cast to the dest \u0026#39;op2\u0026#39; type\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eop2\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003evarTypeIsFloating\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003evarTypeIsFloating\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop2\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eop1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewCastNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop2\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop2\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // !FEATURE_X87_DOUBLES\n\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evarTypeIsStruct\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eop1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpAssignStruct\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eclsHnd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eCHECK_SPILL_ALL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// The code generator generates GC tracking information\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// based on the RHS of the assignment.  Later the LHS (which is\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// is a BYREF) gets used and the emitter checks that that variable\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// is being tracked.  It is not (since the RHS was an int and did\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// not need tracking).  To keep this assert happy, we change the RHS\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclTyp\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_BYREF\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003evarTypeIsGC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_BYREF\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eop1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewAssignNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* If insertLdloc is true, then we need to insert a ldloc following the\n       stloc.  This is done when converting a (dup, stloc) sequence into\n       a (stloc, ldloc) sequence. */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einsertLdloc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// From SPILL_APPEND\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpAppendTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eCHECK_SPILL_ALL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimpCurStmtOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// From DONE_APPEND\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpNoteLastILoffs\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e        \u003cspan class=\"n\"\u003eop1\u003c/span\u003e         \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003einsertLdloc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eimpLoadVar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopcodeOffs\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etiRetVal\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eSPILL_APPEND\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eSPILL_APPEND\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Append \u0026#39;op1\u0026#39; to the list of statements */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eimpAppendTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eCHECK_SPILL_ALL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimpCurStmtOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eDONE_APPEND\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eDONE_APPEND\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Remember at which BC offset the tree was finished\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eimpNoteLastILoffs\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e    \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e处理\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCEE_STLOC_0\u003c/code\u003e的代码有点长, 请耐心看:\n首先0~3的指令会共用处理, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estloc.0\u003c/code\u003e是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0a\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estloc.1\u003c/code\u003e是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0b\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estloc.2\u003c/code\u003e是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0c\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estloc.3\u003c/code\u003e是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0d\u003c/code\u003e.\n得到保存的本地变量序号后还要知道它在本地变量表\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elvaTable\u003c/code\u003e中的索引值是多少, 因为本地变量表开头存的是参数, 所以这里的索引值是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elclNum += numArgs\u003c/code\u003e.\n然后创建赋值(GT_ASG)的节点, 赋值的节点有两个参数, 第一个是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elclVar 0\u003c/code\u003e, 第二个是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003econst 100\u003c/code\u003e(类型一致所以不需要cast), 如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e   /--*  const     int    100\n\\--*  =         int\n   \\--*  lclVar    int    V01\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e现在我们创建了一颗\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGenTree\u003c/code\u003e树, 这个树是一个单独的语句, 我们可以把这个语句添加到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e中,\n添加到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e使用的代码是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eimpAppendTree(op1, (unsigned)CHECK_SPILL_ALL, impCurStmtOffs)\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/*****************************************************************************\n *\n *  Append the given expression tree to the current block\u0026#39;s tree list.\n *  Return the newly created statement.\n */\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eGenTreePtr\u003c/span\u003e \u003cspan class=\"n\"\u003eCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eimpAppendTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eGenTreePtr\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003echkLevel\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eIL_OFFSETX\u003c/span\u003e \u003cspan class=\"n\"\u003eoffset\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Allocate an \u0026#39;expression statement\u0026#39; node */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eGenTreePtr\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewStmt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eoffset\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Append the statement to the current block\u0026#39;s stmt list */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eimpAppendStmt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echkLevel\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/*****************************************************************************\n *\n *  Append the given GT_STMT node to the current block\u0026#39;s tree list.\n *  [0..chkLevel) is the portion of the stack which we will check for\n *    interference with stmt and spill if needed.\n */\u003c/span\u003e\n\n\u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eimpAppendStmt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eGenTreePtr\u003c/span\u003e \u003cspan class=\"n\"\u003estmt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003echkLevel\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estmt\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOper\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eGT_STMT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpTreeLast\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* If the statement being appended has any side-effects, check the stack\n       to see if anything needs to be spilled to preserve correct ordering. */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eGenTreePtr\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estmt\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtStmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtStmtExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e   \u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eGTF_GLOB_EFFECT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Assignment to (unaliased) locals don\u0026#39;t count as a side-effect as\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// we handle them specially using impSpillLclRefs(). Temp locals should\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// be fine too.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// TODO-1stClassStructs: The check below should apply equally to struct assignments,\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// but previously the block ops were always being marked GTF_GLOB_REF, even if\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// the operands could not be global refs.\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOper\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eGT_ASG\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOper\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eGT_LCL_VAR\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eGTF_GLOB_REF\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003egtHasLocalsWithAddrOp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003evarTypeIsStruct\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp1\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003eop2Flags\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtOp2\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eGTF_GLOB_EFFECT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop2Flags\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eGTF_ASG\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eop2Flags\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echkLevel\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eCHECK_SPILL_ALL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003echkLevel\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStackDepth\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echkLevel\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003echkLevel\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eCHECK_SPILL_NONE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echkLevel\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003everCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eesStackDepth\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// If there is a call, we have to spill global refs\u003c/span\u003e\n            \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003espillGlobEffects\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eGTF_CALL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtOper\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eGT_ASG\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eGenTree\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003elhs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtGetOp1\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// If we are assigning to a global ref, we have to spill global refs on stack.\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// TODO-1stClassStructs: Previously, spillGlobEffects was set to true for\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// GT_INITBLK and GT_COPYBLK, but this is overly conservative, and should be\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// revisited. (Note that it was NOT set to true for GT_COPYOBJ.)\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eOperIsBlkOp\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e// If we are assigning to a global ref, we have to spill global refs on stack\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003elhs\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eGTF_GLOB_REF\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003espillGlobEffects\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003elhs\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eOperIsBlk\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003elhs\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eAsBlk\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eHasGCPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n                         \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003elhs\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eOperGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eGT_LCL_VAR\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                          \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elhs\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eAsLclVarCommon\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtLclNum\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvStructGcCount\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003espillGlobEffects\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003eimpSpillSideEffects\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003espillGlobEffects\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echkLevel\u003c/span\u003e \u003cspan class=\"n\"\u003eDEBUGARG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;impAppendStmt\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eimpSpillSpecialSideEff\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eimpAppendStmtCheck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estmt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echkLevel\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Point \u0026#39;prev\u0026#39; at the previous node, so that we can walk backwards */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003estmt\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtPrev\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimpTreeLast\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Append the expression statement to the list */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eimpTreeLast\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtNext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estmt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eimpTreeLast\u003c/span\u003e         \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estmt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef FEATURE_SIMD\n\u003c/span\u003e    \u003cspan class=\"n\"\u003eimpMarkContiguousSIMDFieldAssignments\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estmt\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef DEBUGGING_SUPPORT\n\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Once we set impCurStmtOffs in an appended tree, we are ready to\n       report the following offsets. So reset impCurStmtOffs */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpTreeLast\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egtStmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egtStmtILoffsx\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eimpCurStmtOffs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpCurStmtOffsSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBAD_IL_OFFSET\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpLastILoffsStmt\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpLastILoffsStmt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estmt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003egtDispTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estmt\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这段代码会添加一个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_STMT\u003c/code\u003e节点到当前的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eimpTreeLast\u003c/code\u003e链表中, 这个链表后面会在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eimpEndTreeList\u003c/code\u003e分配给\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eblock-\u0026gt;bbTreeList\u003c/code\u003e.\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_STMT\u003c/code\u003e节点的内容如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e*  stmtExpr  void\n|  /--*  const     int    100\n\\--*  =         int\n   \\--*  lclVar    int    V01\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到是把原来的分配节点\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_ASG\u003c/code\u003e放到了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_STMT\u003c/code\u003e的下面.\n微软提供了一张\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCompiler\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGenTree\u003c/code\u003e的结构图(HIR版):\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171028110118680-735116901.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e这里给出了最简单的两个指令\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eldc.i4.s\u003c/code\u003e和\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estloc.0\u003c/code\u003e的解析例子, 有兴趣可以自己分析更多类型的指令.\n现在我们可以知道\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e运行堆栈\u003c/code\u003e在JIT中用于关联各个指令, 让它们构建成一棵\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGenTree\u003c/code\u003e树, 实际生成的代码将不会有运行堆栈这个概念.\u003c/p\u003e\n\n\u003cp\u003e在处理完当前block后, 会添加block的后继block\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esuccessors\u003c/code\u003e到队列\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eimpPendingList\u003c/code\u003e中:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eNumSucc\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eimpImportBlockPending\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetSucc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e处理完所有block后, 每个BasicBlock中就有了语句(GT_STMT)的链表, 每条语句下面都会有一个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGenTree\u003c/code\u003e树.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgImport\u003c/code\u003e的例子如下:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171028110132289-576127936.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch1 id=\"phase_post_import\"\u003ePHASE_POST_IMPORT\u003c/h1\u003e\n\n\u003cp\u003e这个阶段负责从IL导入HIR(GenTree)后的一些工作, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Maybe the caller was not interested in generating code\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsForImportOnly\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecompFunctionTraceEnd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#if !FEATURE_EH\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// If we aren\u0026#39;t yet supporting EH in a compiler bring-up, remove as many EH handlers as possible, so\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// we can pass tests that contain try/catch EH, but don\u0026#39;t actually throw any exceptions.\u003c/span\u003e\n\u003cspan class=\"n\"\u003efgRemoveEH\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // !FEATURE_EH\n\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompileFlags\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecorJitFlags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eCORJIT_FLG_BBINSTR\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgInstrumentMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// We could allow ESP frames. Just need to reserve space for\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// pushing EBP if the method becomes an EBP-frame after an edit.\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// Note that requiring a EBP Frame disallows double alignment.  Thus if we change this\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// we either have to disallow double alignment for E\u0026amp;C some other way or handle it in EETwain.\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDbgEnC\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecodeGen\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esetFramePointerRequired\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Since we need a slots for security near ebp, its not possible\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// to do this after an Edit without shifting all the locals.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// So we just always reserve space for these slots in case an Edit adds them\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompNeedSecurityCheck\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// We don\u0026#39;t care about localloc right now. If we do support it,\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// EECodeManager::FixContextForEnC() needs to handle it smartly\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// in case the localloc was actually executed.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// compLocallocUsed            = true;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_POST_IMPORT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个阶段负责\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eimport\u003c/code\u003e之后的一些零碎的处理.\n如果只需要检查函数的IL是否合法, 那么编译时会带\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCORJIT_FLG_IMPORT_ONLY\u003c/code\u003e, 在经过import阶段后就不需要再继续了.\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgInstrumentMethod\u003c/code\u003e用于插入profiler需要的语句, 这里不详细分析.\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eopts.compDbgEnC\u003c/code\u003e启用时代表编译IL程序集时用的是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDebug\u003c/code\u003e配置, 这里会标记需要使用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eframe pointer\u003c/code\u003e和需要安全检查.\n(x64允许函数不使用rbp寄存器保存进入函数前堆栈地址, 这样可以多出一个空余的寄存器以生成更高效的代码, 但是会让debug更困难)\u003c/p\u003e\n\n\u003ch1 id=\"phase_morph\"\u003ePHASE_MORPH\u003c/h1\u003e\n\n\u003cp\u003e因为import阶段只是简单的把IL转换成HIR, 转换出来的HIR还需要进行加工.\n这个阶段负责了HIR的加工, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* Initialize the BlockSet epoch */\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eNewBasicBlockEpoch\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Massage the trees so that we can generate code out of them */\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003efgMorph\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_MORPH\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNewBasicBlockEpoch\u003c/code\u003e更新了当前BasicBlock集合的epoch(fgCurBBEpoch), 这个值用于标识当前BasicBlock集合的版本.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/morph.cpp#L16715\"\u003efgMorph\u003c/a\u003e包含了这个阶段主要的处理, 源代码如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/*****************************************************************************\n *\n *  Transform all basic blocks for codegen.\n */\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003efgMorph\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ecompIsForInlining\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Inlinee\u0026#39;s compiler should never reach here.\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgOutgoingArgTemps\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;*************** In fgMorph()\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everboseTrees\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efgDispBasicBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // DEBUG\n\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Insert call to class constructor as the first basic block if\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// we were asked to do so.\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCompHnd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003einitClass\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* field */\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompMethodHnd\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* method */\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                    \u003cspan class=\"n\"\u003eimpTokenLookupContextHandle\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* context */\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eCORINFO_INITCLASS_USE_HELPER\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efgEnsureFirstBBisScratch\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efgInsertStmtAtBeg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efgFirstBB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efgInitThisClass\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompGcChecks\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompArgsCount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eTypeGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_REF\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// confirm that the argument is a GC pointer (for debugging (GC stress))\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eGenTreePtr\u003c/span\u003e      \u003cspan class=\"n\"\u003eop\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewLclvNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_REF\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eGenTreeArgList\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eargs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewArgList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eop\u003c/span\u003e                   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egtNewHelperCallNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCORINFO_HELP_CHECK_OBJ\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_VOID\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003efgEnsureFirstBBisScratch\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                \u003cspan class=\"n\"\u003efgInsertStmtAtEnd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efgFirstBB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompStackCheckOnRet\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elvaReturnEspCheck\u003c/span\u003e                  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaGrabTempWithImplicitUse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e \u003cspan class=\"n\"\u003eDEBUGARG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;ReturnEspCheck\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elvaReturnEspCheck\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_INT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompStackCheckOnCall\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elvaCallEspCheck\u003c/span\u003e                  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elvaGrabTempWithImplicitUse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e \u003cspan class=\"n\"\u003eDEBUGARG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CallEspCheck\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elvaTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elvaCallEspCheck\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elvType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTYP_INT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // DEBUG\n\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Filter out unimported BBs */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgRemoveEmptyBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Add any internal blocks/trees we may need */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgAddInternal\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#if OPT_BOOL_OPS\n\u003c/span\u003e    \u003cspan class=\"n\"\u003efgMultipleNots\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* Inliner could add basic blocks. Check that the flowgraph data is up-to-date */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgDebugCheckBBlist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // DEBUG\n\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Inline */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgInline\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#if 0\n    JITDUMP(\u0026#34;trees after inlining\\n\u0026#34;);\n    DBEXEC(VERBOSE, fgDispBasicBlocks(true));\n#endif\n\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eRecordStateAtEndOfInlining\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Record \u0026#34;start\u0026#34; values for post-inlining cycles and elapsed time.\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* Inliner could add basic blocks. Check that the flowgraph data is up-to-date */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgDebugCheckBBlist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // DEBUG\n\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* For x64 and ARM64 we need to mark irregular parameters early so that they don\u0026#39;t get promoted */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgMarkImplicitByRefArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Promote struct locals if necessary */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgPromoteStructs\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Now it is the time to figure out what locals have address-taken. */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgMarkAddressExposedLocals\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* Now that locals have address-taken marked, we can safely apply stress. */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elvaStressLclFld\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgStress64RsltMul\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // DEBUG\n\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Morph the trees in all the blocks of the method */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgMorphBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e#if 0\n    JITDUMP(\u0026#34;trees after fgMorphBlocks\\n\u0026#34;);\n    DBEXEC(VERBOSE, fgDispBasicBlocks(true));\n#endif\n\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Decide the kind of code we want to generate */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgSetOptions\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgExpandQmarkNodes\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"n\"\u003ecompCurBB\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // DEBUG\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e函数中的处理如下:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgInsertStmtAtBeg(fgFirstBB, fgInitThisClass());\u003c/code\u003e\n如果类型需要动态初始化(泛型并且有静态构造函数), 在第一个block插入调用JIT_ClassInitDynamicClass的代码\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L9105\"\u003efgRemoveEmptyBlocks\u003c/a\u003e\n枚举所有未import(也就是说这个block中的代码无法到达)的block,\n如果有则更新block的序号和epoch.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L7984\"\u003efgAddInternal\u003c/a\u003e:\n添加内部的BasicBlock和GenTree.\n首先如果函数不是静态的, 且this变量需要传出地址(ref)或者修改, 则需要一个内部的本地变量(lvaArg0Var)储存this的值.\n如果函数需要安全检查(compNeedSecurityCheck), 则添加一个临时变量(lvaSecurityObject).\n如果当前平台不是x86(32位), 则为同步方法生成代码, 进入时调用JIT_MonEnterWorker, 退出时调用JIT_MonExitWorker.\n判断是否要只生成一个return block(例如包含pinvoke的函数, 调用了非托管代码的函数, 或者同步函数),\n如果需要只生成一个return block, 则添加一个合并用的BasicBlock和储存返回值用的本地变量, 这里还不会把其他return block重定向到新block.\n如果函数有调用非托管函数, 则添加一个临时变量(lvaInlinedPInvokeFrameVar).\n如果启用了JustMyCode, 则添加\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eif (*pFlag != 0) { JIT_DbgIsJustMyCode() }\u003c/code\u003e到第一个block, 注意这里的节点是QMARK(?:).\n如果tiRuntimeCalloutNeeded成立则添加\u003ccode class=\"language-plaintext highlighter-rouge\"\u003everificationRuntimeCheck(MethodHnd)\u003c/code\u003e到第一个block.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L20864\"\u003efgInline\u003c/a\u003e\n这个函数负责内联函数中的call,\n虽然在微软的文档和我前一篇文章都把inline当作一个单独的阶段, 但在coreclr内部inline是属于PHASE_MORPH的.\n首先会创建一个根内联上下文(rootContext), 然后把它分配到当前的所有语句(stmt)节点中, 内联上下文用于标记语句来源于哪里和组织一个树结构.\n然后枚举所有语句(stmt), 判断是否call并且是内联候选(GTF_CALL_INLINE_CANDIDATE), 如果是则尝试内联(fgMorphCallInline).\u003c/p\u003e\n\n\u003cp\u003e前面的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePHASE_IMPORTATION\u003c/code\u003e在导入call时会判断是否内联候选(impMarkInlineCandidate), 判断的条件包含:\n注意以下条件不一定正确, 可能会根据clr的版本或者运行环境(设置的内联策略)不同而不同.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e未开启优化时不内联\u003c/li\u003e\n  \u003cli\u003e函数是尾调用则不内联\u003c/li\u003e\n  \u003cli\u003e函数的gtFlags \u0026amp; GTF_CALL_VIRT_KIND_MASK不等于GTF_CALL_NONVIRT时不内联\u003c/li\u003e\n  \u003cli\u003e函数是helper call时不内联\u003c/li\u003e\n  \u003cli\u003e函数是indirect call时不内联\u003c/li\u003e\n  \u003cli\u003e环境设置了COMPlus_AggressiveInlining时, 设置 CORINFO_FLG_FORCEINLINE\u003c/li\u003e\n  \u003cli\u003e未设置CORINFO_FLG_FORCEINLINE且函数在catch或者filter中时不内联\u003c/li\u003e\n  \u003cli\u003e之前尝试内联失败, 标记了CORINFO_FLG_DONT_INLINE时不内联\u003c/li\u003e\n  \u003cli\u003e同步函数(CORINFO_FLG_SYNCH)不内联\u003c/li\u003e\n  \u003cli\u003e函数需要安全检查(CORINFO_FLG_SECURITYCHECK)则不内联\u003c/li\u003e\n  \u003cli\u003e如果函数有例外处理器则不内联\u003c/li\u003e\n  \u003cli\u003e函数无内容(大小=0)则不内联\u003c/li\u003e\n  \u003cli\u003e函数参数是vararg时不内联\u003c/li\u003e\n  \u003cli\u003emethodInfo中的本地变量数量大于MAX_INL_LCLS(32)时不内联\u003c/li\u003e\n  \u003cli\u003emethodInfo中的参数数量大于MAX_INL_LCLS时不内联\u003c/li\u003e\n  \u003cli\u003e判断IL代码大小\n    \u003cul\u003e\n      \u003cli\u003e如果codesize \u0026lt;= CALLEE_IL_CODE_SIZE(16)则标记CALLEE_BELOW_ALWAYS_INLINE_SIZE\u003c/li\u003e\n      \u003cli\u003e如果force inline则标记CALLEE_IS_FORCE_INLINE(例如标记了MethodImpl属性)\u003c/li\u003e\n      \u003cli\u003e如果codesize \u0026lt;= DEFAULT_MAX_INLINE_SIZE(100)则标记CALLEE_IS_DISCRETIONARY_INLINE, 后面根据利益判断\u003c/li\u003e\n      \u003cli\u003e标记CALLEE_TOO_MUCH_IL, 表示代码过长不内联\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e尝试初始化函数所在的class\n    \u003cul\u003e\n      \u003cli\u003e如果函数属于generic definition, 则不能内联\u003c/li\u003e\n      \u003cli\u003e如果类型需要在访问任何字段前初始化(IsBeforeFieldInit), 则不能内联\u003c/li\u003e\n      \u003cli\u003e如果未满足其他early out条件, 尝试了初始化class, 且失败了则不能内联\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e其他判断\n    \u003cul\u003e\n      \u003cli\u003eBoundary method的定义:\n        \u003cul\u003e\n          \u003cli\u003e会创建StackCrawlMark查找它的caller的函数\u003c/li\u003e\n          \u003cli\u003e调用满足以上条件的函数的函数 (标记为IsMdRequireSecObject)\u003c/li\u003e\n          \u003cli\u003e调用虚方法的函数 (虚方法可能满足以上的条件)\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e调用Boundary method的函数不内联\u003c/li\u003e\n      \u003cli\u003e如果caller和callee的grant set或refuse set不一致则不内联\u003c/li\u003e\n      \u003cli\u003e判断是否跨程序集\n        \u003cul\u003e\n          \u003cli\u003e同一程序集的则判断可内联\u003c/li\u003e\n          \u003cli\u003e不同程序集时, 要求以下任意一项成立\n            \u003cul\u003e\n              \u003cli\u003ecaller是full trust, refused set为空\u003c/li\u003e\n              \u003cli\u003eappdomain的IsHomogenous成立, 且caller和callee的refused set都为空\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e如果callee和caller所在的module不一样, 且callee的string pool基于module\n            \u003cul\u003e\n              \u003cli\u003e\n                \u003ctable\u003e\n                  \u003ctbody\u003e\n                    \u003ctr\u003e\n                      \u003ctd\u003e则标记dwRestrictions\u003c/td\u003e\n                      \u003ctd\u003e= INLINE_NO_CALLEE_LDSTR (callee中不能有ldstr)\u003c/td\u003e\n                    \u003c/tr\u003e\n                  \u003c/tbody\u003e\n                \u003c/table\u003e\n              \u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e以上条件都满足了就会标记call为内联候选, 并实际尝试内联(fgMorphCallInline), 尝试内联的步骤如下:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e检测是否相互内联(a inline b, b inline a), 如果是则标记内联失败\u003c/li\u003e\n  \u003cli\u003e通过内联上下文检测内联层数是否过多, 超过DEFAULT_MAX_INLINE_DEPTH(20)则标记内联失败\u003c/li\u003e\n  \u003cli\u003e针对callee调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejitNativeCode\u003c/code\u003e, 导入的BasicBlock和GenTree会在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eInlineeCompiler\u003c/code\u003e中\n    \u003cul\u003e\n      \u003cli\u003e针对inline函数的利益分析(DetermineProfitability)将会在这里进行(fgFindJumpTargets), 如果判断不值得内联则会返回失败\u003c/li\u003e\n      \u003cli\u003eDetermineProfitability的算法:\n        \u003cul\u003e\n          \u003cli\u003em_CalleeNativeSizeEstimate = DetermineNativeSizeEstimate() // 使用statemachine估算的机器代码大小\u003c/li\u003e\n          \u003cli\u003em_CallsiteNativeSizeEstimate = DetermineCallsiteNativeSizeEstimate(methodInfo) // 估算调用此函数的指令花费的机器代码大小\u003c/li\u003e\n          \u003cli\u003em_Multiplier = DetermineMultiplier() // 系数, 值越大越容易内联, 详见\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/inlinepolicy.cpp#L539\"\u003eDetermineMultiplier\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003ethreshold = (int)(m_CallsiteNativeSizeEstimate * m_Multiplier) // 阈值\u003c/li\u003e\n          \u003cli\u003e如果 m_CalleeNativeSizeEstimate \u0026gt; threshold 则设置不内联, 也就是callee的机器代码越大则越不容易内联, 系数越大则越容易内联\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e内联最多处理到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePHASE_IMPORTATION\u003c/code\u003e, 可以参考上面\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecompCompile\u003c/code\u003e函数的代码\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e如果编译callee成功, 并且是否内联的判断也通过则可以把callee中的HIR嵌入到caller的HIR中:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e如果InlineeCompiler中只有一个BasicBlock, 把该BasicBlock中的所有stmt插入到原stmt后面, 标记原来的stmt为空\u003c/li\u003e\n  \u003cli\u003e如果InlineeCompiler中有多个BasicBlock\n    \u003cul\u003e\n      \u003cli\u003e按原stmt的位置分割所在的BasicBlock到topBlock和bottomBlock\u003c/li\u003e\n      \u003cli\u003e插入callee的BasicBlock到topBlock和bottomBlock 之间\u003c/li\u003e\n      \u003cli\u003e标记原stmt为空, 原stmt还在topBlock中\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e原stmt下的call会被替换为inline后的返回表达式\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e如果编译callee失败, 或者是否内联的判断不通过, 则需要恢复被修改的状态:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e清理新创建的本地变量, 恢复原有的本地变量数量(lvaCount)\u003c/li\u003e\n  \u003cli\u003e如果调用结果不是void\n    \u003cul\u003e\n      \u003cli\u003e把stmt中的expr设为空, 原来的stmt仍会被retExpr引用, 后面会替换回来\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e取消原expr(call)的内联候选标记(GTF_CALL_INLINE_CANDIDATE)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e到最后会再一次的遍历函数中引用了返回结果(retExpr)的树, 如果内联成功则替换节点到lclVar或者lclFld.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/morph.cpp#L17285\"\u003efgMarkImplicitByRefArgs\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e标记本地变量非标准大小的结构体为BY_REF, 标记后结构体将不能被promote.\n结构体的promote简单的来说就是把结构体中的字段当作一个单独的本地变量,\n例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct X { int a; int b; int c }\u003c/code\u003e,\n如果有本地变量\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eX x\u003c/code\u003e, 则可以替换这个变量为三个本地变量\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eint a; int b; int c;\u003c/code\u003e.\n在x86下非标准大小是3, 5, 6, 7, \u0026gt;8, arm64下是\u0026gt;16.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/morph.cpp#L16843\"\u003efgPromoteStructs\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e提升struct中的变量作为本地变量.\n首先遍历本地变量中的struct变量, 判断是否应该提升, 依据包括(可能根据环境不同而不同):\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e如果本地变量总计有512个以上则不提升\u003c/li\u003e\n  \u003cli\u003e如果变量在SIMD指令中使用则不提升\u003c/li\u003e\n  \u003cli\u003e如果变量是HFA(homogeneous floating-point aggregate)类型则不提升\u003c/li\u003e\n  \u003cli\u003e如果struct大小比sizeof(double) * 4更大则不提升\u003c/li\u003e\n  \u003cli\u003e如果struct有4个以上的字段则不提升\u003c/li\u003e\n  \u003cli\u003e如果struct有字段地址是重叠的(例如union)则不提升\u003c/li\u003e\n  \u003cli\u003e如果struct有自定义layout并且是HFA类型则不提升\u003c/li\u003e\n  \u003cli\u003e如果struct包含非primitive类型的字段则不提升\u003c/li\u003e\n  \u003cli\u003e如果struct包含有特殊对齐的字段(fldOffset % fldSize) != 0)则不提升\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e如果判断应该提升, 则会添加struct的所有成员到本地变量表(lvaTable)中,\n原来的struct变量仍然会保留, 新添加的本地变量的lvParentLcl会指向原来的struct变量.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/morph.cpp#L17907\"\u003efgMarkAddressExposedLocals\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e标记所有地址被导出(通过ref传给了其他函数, 或者设到了全局变量)的本地变量, 这些本地变量将不能优化到寄存器中.\n同时遍历GenTree, 如果节点类型是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_FIELD\u003c/code\u003e并且对应的struct变量已经promoted, 则修改节点为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elclVar\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/morph.cpp#L15612\"\u003efgMorphBlocks\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e这个函数也是个大头, 里面包含了各种对GenTree的变形处理, 因为处理相当多这里我只列出几个.\n更多的处理可以参考我的\u003ca href=\"https://gist.github.com/303248153/2ca436a0e44e5da1c711de050fa3c13f#file-gistfile1-txt-L2778\"\u003eJIT笔记\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e断言创建(optAssertionGen)\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e根据一些GenTree模式可以创建断言(Assertion), 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ea = 1\u003c/code\u003e后可以断言a的值是1, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eb.abc()\u003c/code\u003e后可以断言b不等于null(已经检查过一次null).\n断言可以用于优化代码, 例如归并节点, 减少null检查和减少边界检查.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e断言传播(optAssertionProp)\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e根据创建的断言可以进行优化, 例如确定本地变量等于常量时修改为该常量, 确定对象不为null时标记不需要null检查等.\n在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePHASE_MORPH\u003c/code\u003e阶段\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoptAssertionProp\u003c/code\u003e只能做一些简单的优化,\n后面创建了SSA和VN以后的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePHASE_ASSERTION_PROP_MAIN\u003c/code\u003e阶段会再次调用这个函数进行更多优化.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e转换部分cpu不支持的操作到函数调用\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e例如在32位上对long(64bit)做除法时, 因为cpu不支持, 需要转换为jit helper call.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e添加隐式抛出例外的BasicBlock\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e如果代码中需要检查数值是否溢出或者数组是否越界访问, 则需要添加一个抛出例外的BasicBlock.\n同一种类型的例外只会添加一个BasicBlock.\n注意针对null的检查不会添加BasicBlock, null检查的实现机制是硬件异常, 详见\u003ca href=\"https://303248153.github.io/\"\u003e之前的文章\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e转换到效率更高的等价模式\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e一些模式, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ex+产量1==常量2\u003c/code\u003e可以转换为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ex==常量2-常量1\u003c/code\u003e=\u0026gt;\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ex==常量3\u003c/code\u003e, 转换后可以减少计算的步骤.\n其他会转换的模式还包括:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ex \u0026gt;= y == 0\u003c/code\u003e =\u0026gt; \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ex \u0026lt; y\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ex \u0026gt;= 1\u003c/code\u003e =\u0026gt; \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ex \u0026gt; 0\u003c/code\u003e (x是int)\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ex \u0026lt; 1\u003c/code\u003e =\u0026gt; \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ex \u0026lt;= 0\u003c/code\u003e (x是int)\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e(x+常量1)+(y+常量2)\u003c/code\u003e =\u0026gt; \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e(x+y)+常量3\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ex + 0\u003c/code\u003e =\u0026gt; \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ex\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e等等\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/morph.cpp#L15966\"\u003efgSetOptions\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e这个函数用于设置CodeGen(生成机器代码的模块)使用的选项, 包括:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003egenInterruptible: 是否生成完全可中断的代码, 用于debugger\u003c/li\u003e\n  \u003cli\u003esetFramePointerRequired: 是否要求保存frame pointer(rbp)\u003c/li\u003e\n  \u003cli\u003esetFramePointerRequiredEH: EH表有内容时要求frame pointer, 变量跟上面一样\u003c/li\u003e\n  \u003cli\u003esetFramePointerRequiredGCInfo: 如果参数太多, 要安全检查或者有动态长度参数则要求frame pointer, 同上\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/morph.cpp#L16669\"\u003efgExpandQmarkNodes\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e这个函数用于分解QMark节点， QMark其实就是三元表达式, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ex?123:321\u003c/code\u003e.\n本来这样的判断会分为三个BasicBlock, 但前面为了方便就使用了QMark节点而不去修改BasicBlock.\n这个函数会查找树中的QMark节点, 转换为jTrue和添加BasicBlock.\u003c/p\u003e\n\n\u003ch1 id=\"phase_gs_cookie\"\u003ePHASE_GS_COOKIE\u003c/h1\u003e\n\n\u003cp\u003e如果函数中有unsafe buffer, 则会添加一个内部变量(GS Cookie)来检测是否发生栈溢出.\n这个阶段负责了添加内部变量和添加设置内部变量的值的语句, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* GS security checks for unsafe buffers */\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egetNeedsGSSecurityCookie\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e*************** -GS checks for unsafe buffers \u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"n\"\u003egsGSChecksInitCookie\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompGSReorderStackLayout\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003egsCopyShadowParams\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efgDispBasicBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_GS_COOKIE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/gschecks.cpp#L23\"\u003egsGSChecksInitCookie\u003c/a\u003e函数添加了一个新的本地变量(GS Cookie), 它的值是一个magic number, 在linux上它的值会是程序启动时的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGetTickCount()\u003c/code\u003e.\n后面CodeGen会在函数返回前检查GS Cookie的值, 如果和预设的magic number不一致则调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCORINFO_HELP_FAIL_FAST\u003c/code\u003e函数.\u003c/p\u003e\n\n\u003ch1 id=\"phase_compute_preds\"\u003ePHASE_COMPUTE_PREDS\u003c/h1\u003e\n\n\u003cp\u003e因为前面的morph阶段可能会添加新的BasicBlock(内联或者QMark),\n这个阶段会重新分配BasicBlock的序号并且计算preds(前继block), 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* Compute bbNum, bbRefs and bbPreds */\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003eRenumbering the basic blocks for fgComputePred\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003efgRenumberBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003efgComputePredsDone\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// This is the first time full (not cheap) preds will be computed.\u003c/span\u003e\n\u003cspan class=\"n\"\u003efgComputePreds\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_COMPUTE_PREDS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L10769\"\u003efgRenumberBlocks\u003c/a\u003e函数对block的序号进行重排, 序号从1开始递增.\n\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L3003\"\u003efgComputePreds\u003c/a\u003e函数会重新计算各个block的preds(前继block), 关于preds可以参考\u003ca href=\"https://303248153.github.io/coreclr-07/\"\u003e前一篇文章\u003c/a\u003e中对\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFlowgraph Analysis\u003c/code\u003e的说明.\u003c/p\u003e\n\n\u003cp\u003efgComputePreds的算法如下:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e枚举 BasicBlock\n    \u003cul\u003e\n      \u003cli\u003eblock-\u0026gt;bbRefs = 0\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e调用 fgRemovePreds, 删除所有 BasicBlock 的 bbPreds\u003c/li\u003e\n  \u003cli\u003e设置第一个 BasicBlock 的 fgFirstBB-\u0026gt;bbRefs = 1\u003c/li\u003e\n  \u003cli\u003e枚举 BasicBlock\n    \u003cul\u003e\n      \u003cli\u003e如果类型是 BBJ_LEAVE, BBJ_COND, BBJ_ALWAYS, BBJ_EHCATCHRET\n        \u003cul\u003e\n          \u003cli\u003e调用 fgAddRefPred(block-\u0026gt;bbJumpDest, block, nullptr, true)\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e如果类型是 BBJ_NONE\n        \u003cul\u003e\n          \u003cli\u003e调用 fgAddRefPred(block-\u0026gt;bbNext, block, nullptr, true)\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e如果类型是 BBJ_EHFILTERRET\n        \u003cul\u003e\n          \u003cli\u003e调用 fgAddRefPred(block-\u0026gt;bbJumpDest, block, nullptr, true)\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e如果类型是 BBJ_EHFINALLYRET\n        \u003cul\u003e\n          \u003cli\u003e查找调用 finally funclet 的 block, 如果找到则 (调用完以后返回到bcall-\u0026gt;bbNext)\u003c/li\u003e\n          \u003cli\u003efgAddRefPred(bcall-\u0026gt;bbNext, block, nullptr, true)\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e如果类型是 BBJ_THROW, BBJ_RETURN\n        \u003cul\u003e\n          \u003cli\u003e不做处理\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e如果类型是 BBJ_SWITCH\n        \u003cul\u003e\n          \u003cli\u003e设置所有跳转目标的 fgAddRefPred(*jumpTab, block, nullptr, true)\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"phase_mark_gc_poll_blocks\"\u003ePHASE_MARK_GC_POLL_BLOCKS\u003c/h1\u003e\n\n\u003cp\u003e这个阶段判断哪些block需要检查是否正在运行gc, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* If we need to emit GC Poll calls, mark the blocks that need them now.  This is conservative and can\n * be optimized later. */\u003c/span\u003e\n\u003cspan class=\"n\"\u003efgMarkGCPollBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_MARK_GC_POLL_BLOCKS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L3436\"\u003efgMarkGCPollBlocks\u003c/a\u003e函数会枚举BasicBlock,\n如果block会向前跳转(例如循环), 或者block是返回block, 则标记\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eblock-\u0026gt;bbFlags |= BBF_NEEDS_GCPOLL\u003c/code\u003e.\n标记了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBBF_NEEDS_GCPOLL\u003c/code\u003e的block会在后面插入调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCORINFO_HELP_POLL_GC\u003c/code\u003e函数的代码, 用于在运行gc时暂停当前的线程.\u003c/p\u003e\n\n\u003ch1 id=\"phase_compute_edge_weights\"\u003ePHASE_COMPUTE_EDGE_WEIGHTS\u003c/h1\u003e\n\n\u003cp\u003e这个阶段会计算block和block edge的权重(weight), 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* From this point on the flowgraph information such as bbNum,\n * bbRefs or bbPreds has to be kept updated */\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Compute the edge weights (if we have profile data)\u003c/span\u003e\n\u003cspan class=\"n\"\u003efgComputeEdgeWeights\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_COMPUTE_EDGE_WEIGHTS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eblock的权重(BasicBlock::bbWeight)用于表示block中的代码是否容易被运行, 权重值默认为1, 越高代表block越容易被运行.\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eedge\u003c/code\u003e是一个表示block之间的跳转的术语, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eedge weight\u003c/code\u003e越大表示两个block之间的跳转越容易发生,\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eedge weight\u003c/code\u003e保存在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock::bbPreds\u003c/code\u003e链表的元素(类型是flowList)中, 分别有两个值\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eflEdgeWeightMin\u003c/code\u003e和\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eflEdgeWeightMax\u003c/code\u003e.\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eedge weight\u003c/code\u003e的计算非常复杂, 具体请看\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L1001\"\u003efgAddRefPred\u003c/a\u003e和\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L12410\"\u003efgComputeEdgeWeights\u003c/a\u003e函数.\n对于较少运行block会标记\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBBF_RUN_RARELY\u003c/code\u003e,\n这个标记会在后面用于分析哪些block是热(hot)的, 哪些block是冷(cold)的, cold block有可能会排到后面并使用不同的heap块.\u003c/p\u003e\n\n\u003ch1 id=\"phase_create_funclets\"\u003ePHASE_CREATE_FUNCLETS\u003c/h1\u003e\n\n\u003cp\u003e这个阶段会为例外处理器(例如catch和finally)创建小函数(funclet), 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#if FEATURE_EH_FUNCLETS\n\u003c/span\u003e\n\u003cspan class=\"cm\"\u003e/* Create funclets from the EH handlers. */\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003efgCreateFunclets\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_CREATE_FUNCLETS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_EH_FUNCLETS\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e小函数(funclet)是x64(64位)上调用例外处理器的方式, x86(32位)上不会采用这种方式.\n例如代码是:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetX\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eConsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWriteLine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;abc\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eConsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWriteLine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eConsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWriteLine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在x64上会生成以下的汇编代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e生成的主函数\n00007FFF0FEC0480 55                   push        rbp // 备份原rbp\n00007FFF0FEC0481 56                   push        rsi // 备份原rsi\n00007FFF0FEC0482 48 83 EC 38          sub         rsp,38h // 预留本地变量空间, 大小0x38\n00007FFF0FEC0486 48 8D 6C 24 40       lea         rbp,[rsp+40h] // rbp等于push rbp之前rsp的地址(0x38+0x8)\n00007FFF0FEC048B 48 89 65 E0          mov         qword ptr [rbp-20h],rsp // 保存预留本地变量后的rsp, 到本地变量[rbp-0x20], 也就是PSPSym\n00007FFF0FEC048F E8 24 FC FF FF       call        00007FFF0FEC00B8 // 调用GetX()\n00007FFF0FEC0494 89 45 F4             mov         dword ptr [rbp-0Ch],eax // 返回结果存本地变量[rbp-0x0c], 也就是x\n   185:             try {\n   186:                 Console.WriteLine(x);\n00007FFF0FEC0497 8B 4D F4             mov         ecx,dword ptr [rbp-0Ch] // x =\u0026gt; 第一个参数\n00007FFF0FEC049A E8 B9 FE FF FF       call        00007FFF0FEC0358 // 调用Console.WriteLine\n   187:                 throw new Exception(\u0026#34;abc\u0026#34;);\n00007FFF0FEC049F 48 B9 B8 58 6C 6E FF 7F 00 00 mov         rcx,7FFF6E6C58B8h // Exception的MethodTable =\u0026gt; 第一个参数\n00007FFF0FEC04A9 E8 A2 35 B1 5F       call        00007FFF6F9D3A50 // 调用CORINFO_HELP_NEWFAST(JIT_New, 或汇编版本)\n00007FFF0FEC04AE 48 8B F0             mov         rsi,rax // 例外对象存rsi\n00007FFF0FEC04B1 B9 12 02 00 00       mov         ecx,212h // rid =\u0026gt; 第一个参数\n00007FFF0FEC04B6 48 BA 78 4D D6 0F FF 7F 00 00 mov         rdx,7FFF0FD64D78h // module handle =\u0026gt; 第二个参数\n00007FFF0FEC04C0 E8 6B 20 AF 5F       call        00007FFF6F9B2530 // 调用CORINFO_HELP_STRCNS(JIT_StrCns), 用于lazy load字符串常量对象\n00007FFF0FEC04C5 48 8B D0             mov         rdx,rax // 常量字符串对象 =\u0026gt; 第二个参数\n00007FFF0FEC04C8 48 8B CE             mov         rcx,rsi // 例外对象 =\u0026gt; 第一个参数\n00007FFF0FEC04CB E8 20 07 43 5E       call        00007FFF6E2F0BF0 // 调用System.Exception:.ctor\n00007FFF0FEC04D0 48 8B CE             mov         rcx,rsi // 例外对象 =\u0026gt; 第一个参数\n00007FFF0FEC04D3 E8 48 FC A0 5F       call        00007FFF6F8D0120 // 调用CORINFO_HELP_THROW(IL_Throw)\n00007FFF0FEC04D8 CC                   int         3 // unreachable\n00007FFF0FEC04D9 48 8D 65 F8          lea         rsp,[rbp-8] // 恢复到备份rbp和rsi后的地址\n00007FFF0FEC04DD 5E                   pop         rsi // 恢复rsi\n00007FFF0FEC04DE 5D                   pop         rbp // 恢复rbp\n00007FFF0FEC04DF C3                   ret\n生成的funclet\n00007FFF0FEC04E0 55                   push        rbp // 备份rbp\n00007FFF0FEC04E1 56                   push        rsi // 备份rsi\n00007FFF0FEC04E2 48 83 EC 28          sub         rsp,28h // 本地的rsp预留0x28(PSP slot 0x8 + Outgoing arg space 0x20(如果funclet会调用其他函数))\n00007FFF0FEC04E6 48 8B 69 20          mov         rbp,qword ptr [rcx+20h] // rcx是InitialSP(预留本地变量后的rsp)\n                                                                        // 原函数的rbp跟rsp差40, 所以[InitialSP+20h]等于[rbp-20h], 也就是PSPSym\n                                                                        // 这个例子中因为只有一层, PSPSym里面保存的值跟传入的rcx一样(InitialSP)\n00007FFF0FEC04EA 48 89 6C 24 20       mov         qword ptr [rsp+20h],rbp // 复制PSPSym到funclet自己的frame\n00007FFF0FEC04EF 48 8D 6D 40          lea         rbp,[rbp+40h] // 原函数的rbp跟rsp差40, 计算得出原函数的rbp\n   188:             } catch (Exception ex) {\n   189:                 Console.WriteLine(ex);\n00007FFF0FEC04F3 48 8B CA             mov         rcx,rdx // rdx例外对象, 移动到第一个参数\n00007FFF0FEC04F6 E8 7D FE FF FF       call        00007FFF0FEC0378 // 调用Console.WriteLine\n   190:                 Console.WriteLine(x);\n00007FFF0FEC04FB 8B 4D F4             mov         ecx,dword ptr [rbp-0Ch] // [rbp-0xc]就是变量x, 移动到第一个参数\n00007FFF0FEC04FE E8 55 FE FF FF       call        00007FFF0FEC0358 // 调用Console.WriteLine\n00007FFF0FEC0503 48 8D 05 CF FF FF FF lea         rax,[7FFF0FEC04D9h] // 恢复执行的地址\n00007FFF0FEC050A 48 83 C4 28          add         rsp,28h // 释放本地的rsp预留的空间\n00007FFF0FEC050E 5E                   pop         rsi // 恢复rsi\n00007FFF0FEC050F 5D                   pop         rbp // 恢复rbp\n00007FFF0FEC0510 C3                   ret\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们可以看到在x64上实质上会为例外处理器单独生成一个小函数(00007FFF0FEC04E0~00007FFF0FEC0510),\n发生例外时将会调用这个小函数进行处理, 处理完返回主函数.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L11978\"\u003efgCreateFunclets\u003c/a\u003e负责创建funclet, 源代码如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/*****************************************************************************\n *\n *  Function to create funclets out of all EH catch/finally/fault blocks.\n *  We only move filter and handler blocks, not try blocks.\n */\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003efgCreateFunclets\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003efgFuncletsCreated\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;*************** In fgCreateFunclets()\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgCreateFuncletPrologBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e           \u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEHblkDsc\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e          \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003efuncCnt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eehFuncletCount\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eFitsIn\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eshort\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efuncCnt\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eIMPL_LIMITATION\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Too many funclets\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eFuncInfoDsc\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003efuncInfo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCMK_BasicBlock\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eFuncInfoDsc\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003efuncCnt\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eshort\u003c/span\u003e \u003cspan class=\"n\"\u003efuncIdx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Setup the root FuncInfoDsc and prepare to start associating\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// FuncInfoDsc\u0026#39;s with their corresponding EH region\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ememset\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003efuncInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efuncCnt\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFuncInfoDsc\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efuncInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003efunKind\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eFUNC_ROOT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efuncIdx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Because we iterate from the top to the bottom of the compHndBBtab array, we are iterating\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// from most nested (innermost) to least nested (outermost) EH region. It would be reasonable\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// to iterate in the opposite order, but the order of funclets shouldn\u0026#39;t matter.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// We move every handler region to the end of the function: each handler will become a funclet.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Note that fgRelocateEHRange() can add new entries to the EH table. However, they will always\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// be added *after* the current index, so our iteration here is not invalidated.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// It *can* invalidate the compHndBBtab pointer itself, though, if it gets reallocated!\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecompHndBBtabCount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eehGetDsc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// must re-compute this every loop, since fgRelocateEHRange changes the table\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eHasFilter\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efuncIdx\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003efuncCnt\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efuncInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003efuncIdx\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003efunKind\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFUNC_FILTER\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efuncInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003efuncIdx\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003efunEHIndex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eshort\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efuncIdx\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efuncIdx\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003efuncCnt\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efuncInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003efuncIdx\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003efunKind\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFUNC_HANDLER\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efuncInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003efuncIdx\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003efunEHIndex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eshort\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eHBtab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eebdFuncIndex\u003c/span\u003e          \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efuncIdx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efuncIdx\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efgRelocateEHRange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eXTnum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFG_RELOCATE_HANDLER\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// We better have populated all of them by now\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efuncIdx\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003efuncCnt\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Publish\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecompCurrFuncIdx\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecompFuncInfos\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efuncInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecompFuncInfoCount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eshort\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003efuncCnt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgFuncletsCreated\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#if DEBUG\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003eAfter fgCreateFunclets()\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efgDispBasicBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efgDispHandlerTab\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgVerifyHandlerTab\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgDebugCheckBBlist\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // DEBUG\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e首先\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L11914\"\u003efgCreateFuncletPrologBlocks\u003c/a\u003e函数枚举EH表,\n如果handler对应的第一个block可能从handler中的其他block跳转(第一个block在循环中),\n那么这个block可能会运行多次, funclet的prolog代码将不能插入到这个block, 遇到这种情况需要在handler的第一个block前插入一个新的block.\n然后分配一个保存函数信息的数组保存到compFuncInfos, 第0个元素是主函数, 后面的元素都是funclet.\n最后枚举EH表, 填充compFuncInfos中的元素, 并且调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgRelocateEHRange\u003c/code\u003e函数.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L11293\"\u003efgRelocateEHRange\u003c/a\u003e函数把handler范围内的block移动到BasicBlock列表的最后面, CodeGen生成代码时也会遵从这个布局, 把funclet生成在主函数的后面.\n例如移动前的block是这样的:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e-------------------------------------------------------------------------------------------------------------------------------------\nBBnum         descAddr ref try hnd preds           weight   [IL range]      [jump]      [EH region]         [flags]\n-------------------------------------------------------------------------------------------------------------------------------------\nBB01 [000000000137BC60]  1                              1   [000..006)                                     i label target gcsafe \nBB02 [000000000137BD70]  1  0    BB01                   0   [006..017)        (throw ) T0      try { }     keep i try rare label gcsafe newobj \nBB03 [000000000137BE80]  0     0                        1   [017..024)-\u0026gt; BB04 ( cret )    H0   catch { }   keep i label target gcsafe \nBB04 [000000000137BF90]  1       BB03                   1   [024..025)        (return)                     i label target \n-------------------------------------------------------------------------------------------------------------------------------------\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e移动后就会变成这样:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e-------------------------------------------------------------------------------------------------------------------------------------\nBBnum         descAddr ref try hnd preds           weight   [IL range]      [jump]      [EH region]         [flags]\n-------------------------------------------------------------------------------------------------------------------------------------\nBB01 [000000000137BC60]  1                              1   [000..006)                                     i label target gcsafe \nBB02 [000000000137BD70]  1  0    BB01                   0   [006..017)        (throw ) T0      try { }     keep i try rare label gcsafe newobj \nBB04 [000000000137BF90]  1       BB03                   1   [024..025)        (return)                     i label target \n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow\nBB03 [000000000137BE80]  0     0                        1   [017..024)-\u0026gt; BB04 ( cret )    H0 F catch { }   keep i label target gcsafe flet \n-------------------------------------------------------------------------------------------------------------------------------------\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"phase_optimize_layout\"\u003ePHASE_OPTIMIZE_LAYOUT\u003c/h1\u003e\n\n\u003cp\u003e这个阶段会优化BasicBlock的布局(顺序), 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMinOpts\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDbgCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eoptOptimizeLayout\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_OPTIMIZE_LAYOUT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Compute reachability sets and dominators.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgComputeReachability\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optimizer.cpp#L3731\"\u003eoptOptimizeLayout\u003c/a\u003e的源代码如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/*****************************************************************************\n *\n *  Optimize the BasicBlock layout of the method\n */\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eoptOptimizeLayout\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMinOpts\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompDbgCode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;*************** In optOptimizeLayout()\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efgDispHandlerTab\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Check that the flowgraph data (bbNum, bbRefs, bbPreds) is up-to-date */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgDebugCheckBBlist\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efgModified\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efgFirstBB\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* Make sure the appropriate fields are initialized */\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbWeight\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBB_ZERO_WEIGHT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"cm\"\u003e/* Zero weighted block can\u0026#39;t have a LOOP_HEAD flag */\u003c/span\u003e\n            \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eisLoopHead\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbLoopNum\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompCodeOpt\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eSMALL_CODE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"cm\"\u003e/* Optimize \u0026#34;while(cond){}\u0026#34; loops to \u0026#34;cond; do{}while(cond);\u0026#34; */\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003efgOptWhileLoop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efgModified\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Recompute the edge weight if we have modified the flow graph in fgOptWhileLoop\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efgComputeEdgeWeights\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgUpdateFlowGraph\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgReorderBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgUpdateFlowGraph\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optimizer.cpp#L3418\"\u003efgOptWhileLoop\u003c/a\u003e函数会优化while结构, 如里面的注释,\n优化前的结构如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        jmp test\nloop:\n        ...\n        ...\ntest:\n        cond\n        jtrue   loop\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e优化后的结构如下, 加了一个事前的检测:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        cond\n        jfalse done\n        // else fall-through\nloop:\n        ...\n        ...\ntest:\n        cond\n        jtrue   loop\ndone:\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgOptWhileLoop\u003c/code\u003e有更新则调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgComputeEdgeWeights\u003c/code\u003e重新计算权重.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L15709\"\u003efgUpdateFlowGraph\u003c/a\u003e函数会删除空block, 无法到达的block和多余的跳转.\n如果传给\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgUpdateFlowGraph\u003c/code\u003e的参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edoTailDuplication\u003c/code\u003e是true还会执行以下的优化:\n优化前的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eblock:\n    jmp target\ntarget:\n    cond\n    jtrue succ\nfallthrough:\n    ...\nsucc:\n    ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e优化后的代码:\n优化后target可能会变得多余, 所以下面还会执行一次参数是false的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgUpdateFlowGraph\u003c/code\u003e来删除它.\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eblock:\n    cond\n    jtrue succ\nnew:\n    jmp fallthrough\ntarget:\n    cond\n    jtrue succ\nfallthrough:\n    ...\nsucc:\n    ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L14296\"\u003efgReorderBlocks\u003c/a\u003e函数根据之前计算的权重(bbWeight)把比较少运行的block排到后面, 到后面这些block可能会变成cold code并且与hot code分开写入.\u003c/p\u003e\n\n\u003ch1 id=\"fgcomputereachability\"\u003efgComputeReachability\u003c/h1\u003e\n\n\u003cp\u003e这个函数负责计算可以到达block的block集合和DOM树, 没有标记所属的阶段, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Compute reachability sets and dominators.\u003c/span\u003e\n\u003cspan class=\"n\"\u003efgComputeReachability\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L1778\"\u003efgComputeReachability\u003c/a\u003e的源代码如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/*****************************************************************************\n *\n *  Function called to compute the dominator and reachable sets.\n *\n *  Assumes the predecessor lists are computed and correct.\n */\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eCompiler\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003efgComputeReachability\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;*************** In fgComputeReachability\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgVerifyHandlerTab\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Make sure that the predecessor lists are accurate\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efgComputePredsDone\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgDebugCheckBBlist\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // DEBUG\n\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Create a list of all BBJ_RETURN blocks. The head of the list is \u0026#39;fgReturnBlocks\u0026#39;. */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgReturnBlocks\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBasicBlock\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efgFirstBB\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbNext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// If this is a BBJ_RETURN block, add it to our list of all BBJ_RETURN blocks. This list is only\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// used to find return blocks.\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebbJumpKind\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBBJ_RETURN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efgReturnBlocks\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCMK_Reachability\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eBasicBlockList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efgReturnBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Compute reachability and then delete blocks determined to be unreachable. If we delete blocks, we\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// need to loop, as that might have caused more blocks to become unreachable. This can happen in the\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// case where a call to a finally is unreachable and deleted (maybe the call to the finally is\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// preceded by a throw or an infinite loop), making the blocks following the finally unreachable.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// However, all EH entry blocks are considered global entry blocks, causing the blocks following the\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// call to the finally to stay rooted, until a second round of reachability is done.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// The dominator algorithm expects that all blocks can be reached from the fgEnterBlks set.\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003epassNum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e     \u003cspan class=\"n\"\u003echanged\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Just to be paranoid, avoid infinite loops; fall back to minopts.\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epassNum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003enoway_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Too many unreachable block removal loops\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Walk the flow graph, reassign block numbers to keep them in ascending order */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eJITDUMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003eRenumbering the basic blocks for fgComputeReachability pass #%u\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epassNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epassNum\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efgRenumberBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Compute fgEnterBlks\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003efgComputeEnterBlocksSet\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Compute bbReach\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003efgComputeReachabilitySets\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Use reachability information to delete unreachable blocks.\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Also, determine if the flow graph has loops and set \u0026#39;fgHasLoops\u0026#39; accordingly.\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Set the BBF_LOOP_HEAD flag on the block target of backwards branches.\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003echanged\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efgRemoveUnreachableBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echanged\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003eAfter computing reachability:\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efgDispBasicBlocks\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everboseTrees\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgVerifyHandlerTab\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgDebugCheckBBlist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // DEBUG\n\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Now, compute the dominators\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efgComputeDoms\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e首先这个函数会把所有返回的block添加到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgReturnBlocks\u003c/code\u003e链表,\n然后调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L10769\"\u003efgRenumberBlocks\u003c/a\u003e重新给block分配序号(下面的处理要求block的序号是整理过的),\n然后调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L1862\"\u003efgComputeEnterBlocksSet\u003c/a\u003e把进入函数或者funclet的block(fgFirstBB和各个例外处理器的第一个block)加到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgEnterBlks\u003c/code\u003e集合中.\n然后调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L1778\"\u003efgComputeReachabilitySets\u003c/a\u003e计算哪些block可以到达block(block自身和所有preds的bbReach的union)并保存到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock::bbReach\u003c/code\u003e.\n然后调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L1931\"\u003efgRemoveUnreachableBlocks\u003c/a\u003e把不可从函数入口(fgEnterBlks)到达的block(fgEnterBlks | bbReach为空)删除.\n最后调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L2348\"\u003efgComputeDoms\u003c/a\u003e计算DOM树.\u003c/p\u003e\n\n\u003cp\u003e关于DOM(dominator)树请参考\u003ca href=\"https://303248153.github.io/coreclr-07/\"\u003e前一篇文章\u003c/a\u003e中对Flowgraph Analysis的介绍,\n一句话来说如果进入Block B必须经过Block A, 则称A是B的Dominator, 最近的Dominator会保存在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock::bbIDom\u003c/code\u003e中.\nCoreCLR中计算DOM树的算法跟\u003ca href=\"https://www.cs.rice.edu/~keith/EMBED/dom.pdf\"\u003e这篇论文\u003c/a\u003e中的算法一样.\u003c/p\u003e\n\n\u003ch1 id=\"phase_allocate_objects\"\u003ePHASE_ALLOCATE_OBJECTS\u003c/h1\u003e\n\n\u003cp\u003e这个阶段负责把\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_ALLOCOBJ\u003c/code\u003e节点转换为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_CALL\u003c/code\u003e节点, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Transform each GT_ALLOCOBJ node into either an allocation helper call or\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// local variable allocation on the stack.\u003c/span\u003e\n\u003cspan class=\"n\"\u003eObjectAllocator\u003c/span\u003e \u003cspan class=\"nf\"\u003eobjectAllocator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003eobjectAllocator\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRun\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在\u003ca href=\"https://303248153.github.io/coreclr-02/\"\u003e之前分析new的文章\u003c/a\u003e中提到过,\n\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/objectalloc.cpp#L27\"\u003eObjectAllocator::Run\u003c/a\u003e会把allocobj节点转换为具体的jit helper call.\n转换为call以后就和普通的函数调用一样了, 参数接收MethodTable的指针, 返回新创建的对象(构造函数未调用, 字段值全是0).\u003c/p\u003e\n\n\u003ch1 id=\"phase_optimize_loops\"\u003ePHASE_OPTIMIZE_LOOPS\u003c/h1\u003e\n\n\u003cp\u003e这个阶段负责识别和标记函数中的循环, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eoptOptimizeLoops\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_OPTIMIZE_LOOPS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optimizer.cpp#L3785\"\u003eoptOptimizeLoops\u003c/a\u003e的处理如下:\u003c/p\u003e\n\n\u003cp\u003e首先调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optimizer.cpp#L59\"\u003eoptSetBlockWeights\u003c/a\u003e, 根据DOM树设置不能到达return block的block的权重(bbWeight) /= 2.\n然后调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optimizer.cpp#L1399\"\u003eoptFindNaturalLoops\u003c/a\u003e, 根据DOM树识别出循环并保存循环的信息到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoptLoopTable\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e一个循环包含以下的组成部分(来源于optFindNaturalLoops的注释):\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e/* We will use the following terminology:\n * HEAD    - the basic block that flows into the loop ENTRY block (Currently MUST be lexically before entry).\n             Not part of the looping of the loop.\n * FIRST   - the lexically first basic block (in bbNext order) within this loop.  (May be part of a nested loop,\n *           but not the outer loop. ???)\n * TOP     - the target of the backward edge from BOTTOM. In most cases FIRST and TOP are the same.\n * BOTTOM  - the lexically last block in the loop (i.e. the block from which we jump to the top)\n * EXIT    - the loop exit or the block right after the bottom\n * ENTRY   - the entry in the loop (not necessarly the TOP), but there must be only one entry\n *\n * We (currently) require the body of a loop to be a contiguous (in bbNext order) sequence of basic blocks.\n        |\n        v\n      head\n        |\n        |    top/beg \u0026lt;--+\n        |       |       |\n        |      ...      |\n        |       |       |\n        |       v       |\n        +---\u0026gt; entry     |\n                |       |\n               ...      |\n                |       |\n                v       |\n         +-- exit/tail  |\n         |      |       |\n         |     ...      |\n         |      |       |\n         |      v       |\n         |    bottom ---+\n         |\n         +------+\n                |\n                v\n */\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后枚举循环中(top~bottom)的block并调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optimizer.cpp#L135\"\u003eoptMarkLoopBlocks\u003c/a\u003e.\n\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optimizer.cpp#L135\"\u003eoptMarkLoopBlocks\u003c/a\u003e会增加循环中的block的权重(bbWeight),\n对于backedge block(block的preds是比它更后的block, 例如循环的第一个block)的dominator, 权重会乘以BB_LOOP_WEIGHT(8), 否则乘以BB_LOOP_WEIGHT/2(4).\u003c/p\u003e\n\n\u003ch1 id=\"phase_clone_loops\"\u003ePHASE_CLONE_LOOPS\u003c/h1\u003e\n\n\u003cp\u003e这个阶段用于执行复制循环的优化, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Clone loops with optimization opportunities, and\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// choose the one based on dynamic condition evaluation.\u003c/span\u003e\n\u003cspan class=\"n\"\u003eoptCloneLoops\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_CLONE_LOOPS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e上一个阶段\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePHASE_OPTIMIZE_LOOPS\u003c/code\u003e找出了函数中的循环信息,\n\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optimizer.cpp#L4420\"\u003eoptCloneLoops\u003c/a\u003e会判断哪些循环可以执行复制循环的优化并执行.\n复制循环的优化具体如下(来源于optCloneLoop的注释):\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e// We\u0026#39;re going to make\n\n// Head --\u0026gt; Entry\n// First\n// Top\n// Entry\n// Bottom  ?-\u0026gt; Top\n// X\n//\n//   become\n//\n// Head ?-\u0026gt; Entry2\n// Head2--\u0026gt; Entry    (Optional; if Entry == Top == First, let Head fall through to F/T/E)\n// First\n// Top\n// Entry\n// Bottom  ?-\u0026gt; Top\n// X2--\u0026gt; X\n// First2\n// Top2\n// Entry2\n// Bottom2 ?-\u0026gt; Top2\n// X\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e更具体的例子:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e(optCloneLoop)[https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optimizer.cpp#L4420]前:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLength\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLength\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e(optCloneLoop)[https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optimizer.cpp#L4420]后:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLength\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003enull\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLength\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"c1\"\u003e// no bounds check\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// no bounds check\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLength\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLength\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个优化的目的是在确保不会越界的情况(运行时)下, 可以省略掉循环中的边界检查.\u003c/p\u003e\n\n\u003ch1 id=\"phase_unroll_loops\"\u003ePHASE_UNROLL_LOOPS\u003c/h1\u003e\n\n\u003cp\u003e这个阶段用于执行展开循环的优化, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* Unroll loops */\u003c/span\u003e\n\u003cspan class=\"n\"\u003eoptUnrollLoops\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_UNROLL_LOOPS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optimizer.cpp#L2782\"\u003eoptUnrollLoops\u003c/a\u003e会尝试展开循环, 展开循环的条件有:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e循环次数在编译时可以确定\u003c/li\u003e\n  \u003cli\u003e当前编译模式不是debug, 也不需要小代码优化\u003c/li\u003e\n  \u003cli\u003e循环中代码体积不超过\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eUNROLL_LIMIT_SZ\u003c/code\u003e(值参考代码)\u003c/li\u003e\n  \u003cli\u003e循环次数不超过\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eITER_LIMIT\u003c/code\u003e(值参考代码)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e满足时将会把循环体按次数进行复制, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efor (var x = 0; x \u0026lt; 3; ++x) { abc(); }\u003c/code\u003e会优化成\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eabc(); abc(); abc();\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch1 id=\"phase_mark_local_vars\"\u003ePHASE_MARK_LOCAL_VARS\u003c/h1\u003e\n\n\u003cp\u003e这个阶段会更新本地变量表\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elvaTable\u003c/code\u003e中的信息, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* Create the variable table (and compute variable ref counts) */\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003elvaMarkLocalVars\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_MARK_LOCAL_VARS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/lclvars.cpp#L3287\"\u003elvaMarkLocalVars\u003c/a\u003e的处理如下:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/lclvars.cpp#L3490\"\u003elvaAllocOutgoingArgSpace\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e添加本地变量\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elvaOutgoingArgSpaceVar\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e在x86上通过栈传递参数的时候会使用push, 在其他平台上可以直接复制值到这个变量完成栈参数的传递\u003c/li\u003e\n      \u003cli\u003e参考\u003ca href=\"https://github.com/dotnet/coreclr/blob/release/1.1.0/Documentation/design-docs/jit-call-morphing.md\"\u003e这个文档\u003c/a\u003e中对\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFEATURE_FIXED_OUT_ARGS\u003c/code\u003e的说明\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e如果平台是x86(需要ShadowSP slots)\n    \u003cul\u003e\n      \u003cli\u003e添加本地变量\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elvaShadowSPslotsVar\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e因为x86不会生成funclet, 例外处理机制需要使用额外的变量\u003c/li\u003e\n      \u003cli\u003e参考\u003ca href=\"https://github.com/dotnet/coreclr/blob/release/1.1.0/Documentation/botr/clr-abi.md\"\u003e这个文档\u003c/a\u003e中对\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eShadowSP slots\u003c/code\u003e的说明\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e如果平台不是x86(需要使用funclet)\n    \u003cul\u003e\n      \u003cli\u003e添加本地变量\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elvaPSPSym\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003ePSPSym的全称是Previous Stack Pointer Symbol, 是一个指针大小的值, 保存上一个函数的堆栈地址\u003c/li\u003e\n      \u003cli\u003e调用eh funclet的时候恢复rsp到main function的rsp值, funclet就可以访问到原来的本地变量\u003c/li\u003e\n      \u003cli\u003e参考\u003ca href=\"https://github.com/dotnet/coreclr/blob/release/1.1.0/Documentation/botr/clr-abi.md\"\u003e这个文档\u003c/a\u003e中对\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePSPSym\u003c/code\u003e的说明\u003c/li\u003e\n      \u003cli\u003e还可以参考上面funclet的例子中的汇编代码\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e如果使用了localloc(stackalloc)\n    \u003cul\u003e\n      \u003cli\u003e添加本地变量\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elvaLocAllocSPvar\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e用于保存修改后的rsp地址(genLclHeap)\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e如果当前是除错模式则给各个本地变量分配序号\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evarDsc-\u0026gt;lvSlotNum = lclNum\u003c/code\u003e (从0开始递增)\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e枚举BasicBlock, 调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/lclvars.cpp#L3287\"\u003elvaMarkLocalVars\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e枚举block中的树更新本地变量的引用计数\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e如果本地变量用于储存来源于寄存器的引用参数, 则添加两次引用次数\u003c/li\u003e\n  \u003cli\u003e如果\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elvaKeepAliveAndReportThis\u003c/code\u003e成立(例如同步函数需要unlock this)\n    \u003cul\u003e\n      \u003cli\u003e并且如果该函数中无其他部分使用this, 则设置this的引用计数为1\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e如果\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elvaReportParamTypeArg\u003c/code\u003e成立\n    \u003cul\u003e\n      \u003cli\u003e并且如果该函数中无其他部分使用这个变量, 则设置这个变量的引用计数为1\u003c/li\u003e\n      \u003cli\u003eparamTypeArg(Generic Context)的作用是调用时传入MethodDesc\u003c/li\u003e\n      \u003cli\u003e例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enew A\u0026lt;string\u0026gt;().Generic\u0026lt;int\u0026gt;(123)\u003c/code\u003e时会传入\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGeneric\u0026lt;int\u0026gt;\u003c/code\u003e对应的MethodDesc\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/lclvars.cpp#L2695\"\u003elvaSortByRefCount\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e判断各个本地变量是否可以跟踪(lvTracked), 和是否可以存到寄存器(lvDoNotEnregister)\u003c/li\u003e\n      \u003cli\u003e生成小代码时按\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elvRefCnt\u003c/code\u003e, 否则按\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elvRefCntWtd\u003c/code\u003e从大到小排序本地变量\u003c/li\u003e\n      \u003cli\u003e排序后生成新的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elvaCurEpoch\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"phase_optimize_bools\"\u003ePHASE_OPTIMIZE_BOOLS\u003c/h1\u003e\n\n\u003cp\u003e这个阶段用于合并相邻的两个根据条件跳转的BasicBlock, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* Optimize boolean conditions */\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eoptOptimizeBools\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_OPTIMIZE_BOOLS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// optOptimizeBools() might have changed the number of blocks; the dominators/reachability might be bad.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optimizer.cpp#L8177\"\u003eoptOptimizeBools\u003c/a\u003e会做以下的优化:\u003c/p\u003e\n\n\u003cp\u003e如果block的结构如下, 且B2中只有单条指令:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eB1: brtrue(t1, BX)\nB2: brtrue(t2, BX)\nB3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e则转换为以下的结构:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eB1: brtrue(t1|t2, BX)\nB3:\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果block的结构如下, 且B2中只有单条指令:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eB1: brtrue(t1, B3)\nB2: brtrue(t2, BX)\nB3:\n...\nBX:\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e则转换为以下的结构:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eB1: brtrue((!t1)\u0026amp;\u0026amp;t2, BX)\nB3:\n...\nBX:\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"phase_find_oper_order\"\u003ePHASE_FIND_OPER_ORDER\u003c/h1\u003e\n\n\u003cp\u003e这个阶段用于判断各个节点(GenTree)的评价顺序并设置它们的运行和体积成本, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* Figure out the order in which operators are to be evaluated */\u003c/span\u003e\n\u003cspan class=\"n\"\u003efgFindOperOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_FIND_OPER_ORDER\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L8910\"\u003efgFindOperOrder\u003c/a\u003e对每个BasicBlock中的语句调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/compiler.hpp#L1218\"\u003egtSetStmtInfo\u003c/a\u003e.\n\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/compiler.hpp#L1218\"\u003egtSetStmtInfo\u003c/a\u003e针对GenTree递归调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/gentree.cpp#L3604\"\u003egtSetEvalOrder\u003c/a\u003e.\n\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/gentree.cpp#L3604\"\u003egtSetEvalOrder\u003c/a\u003e函数会设置GenTree的运行成本(gtCostEx)和体积成本(gtCostSz),\n且如果一个满足交换律的二元运算符的第二个参数成本比第一个参数高时, 标记这个运算需要先评价第二个参数.\n运行成本(gtCostEx)和体积成本(gtCostSz)在后面用于判断是否值得执行CSE优化.\u003c/p\u003e\n\n\u003ch1 id=\"phase_set_block_order\"\u003ePHASE_SET_BLOCK_ORDER\u003c/h1\u003e\n\n\u003cp\u003e这个阶段用于按各个节点(GenTree)的评价顺序把它们连成一个链表(LIR格式), 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Weave the tree lists. Anyone who modifies the tree shapes after\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// this point is responsible for calling fgSetStmtSeq() to keep the\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// nodes properly linked.\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// This can create GC poll calls, and create new BasicBlocks (without updating dominators/reachability).\u003c/span\u003e\n\u003cspan class=\"n\"\u003efgSetBlockOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_SET_BLOCK_ORDER\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// IMPORTANT, after this point, every place where tree topology changes must redo evaluation\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// order (gtSetStmtInfo) and relink nodes (fgSetStmtSeq) if required.\u003c/span\u003e\n\u003cspan class=\"n\"\u003eCLANG_FORMAT_COMMENT_ANCHOR\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L18065\"\u003efgSetBlockOrder\u003c/a\u003e会做以下的事情:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e判断是否要生成可中断的代码(例如有循环时需要生成), 如果要则设置\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egenInterruptible = true\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L3521\"\u003efgCreateGCPolls\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e枚举BasicBlock, 如果block标记为BBF_NEEDS_GCPOLL则插入调用CORINFO_HELP_POLL_GC(JIT_PollGC)的代码\u003c/li\u003e\n      \u003cli\u003eJIT_PollGC会在运行GC时暂停当前的线程\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e枚举BasicBlock, 调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L18065\"\u003efgSetBlockOrder\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e枚举block中的语句, 调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L18201\"\u003efgSetStmtSeq\u003c/a\u003e\n        \u003cul\u003e\n          \u003cli\u003e对于语句中的节点(GenTree)递归调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L17705\"\u003efgSetTreeSeqHelper\u003c/a\u003e\n            \u003cul\u003e\n              \u003cli\u003e例如 a + b 会分别对 a, b, + 这3个节点调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L18019\"\u003efgSetTreeSeqFinish\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003efgSetTreeSeqFinish调用时会增加fgTreeSeqNum, 并且添加节点到链表fgTreeSeqLst\u003c/li\u003e\n              \u003cli\u003e全部完成后链表fgTreeSeqLst保存了所有GenTree节点, 这就是LIR的结构, 但正式使用LIR还要再经过几个阶段\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"phase_build_ssa\"\u003ePHASE_BUILD_SSA\u003c/h1\u003e\n\n\u003cp\u003e这个阶段负责对访问本地变量的GenTree标记\u003ca href=\"https://en.wikipedia.org/wiki/Static_single_assignment_form\"\u003eSSA版本\u003c/a\u003e, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edoSsa\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgSsaBuild\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_BUILD_SSA\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/ssabuilder.cpp#L155\"\u003efgSsaBuild\u003c/a\u003e会给访问本地变量的节点(例如lclvar)分配SSA版本,\n访问的形式有USE(读取了变量), DEF(写入了变量), USEASG(读取然后写入了变量, 例如+=),\n变量的值写入一次SSA版本会加1, 同时读取的节点也会标记读取的是哪个版本的值, SSA版本保存在节点的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGenTreeLclVarCommon::_gtSsaNum\u003c/code\u003e成员中.\n如果读取的值来源于不同的block, 需要在运行时确定则在block的开头添加phi节点.\n\u003ca href=\"https://303248153.github.io/coreclr-07/\"\u003e前一篇文章\u003c/a\u003e介绍了标记SSA的例子, 如下:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171028110140836-1221432801.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/ssabuilder.cpp#L155\"\u003efgSsaBuild\u003c/a\u003e的具体算法比较复杂, 请参考我的\u003ca href=\"https://gist.github.com/303248153/2ca436a0e44e5da1c711de050fa3c13f#file-gistfile1-txt-L3453\"\u003eJIT笔记\u003c/a\u003e中的信息或者源代码.\u003c/p\u003e\n\n\u003ch1 id=\"phase_early_prop\"\u003ePHASE_EARLY_PROP\u003c/h1\u003e\n\n\u003cp\u003e这个阶段会根据SSA追踪本地变量并做出简单的优化, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edoEarlyProp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Propagate array length and rewrite getType() method call */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eoptEarlyProp\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_EARLY_PROP\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/earlyprop.cpp#L158\"\u003eoptEarlyProp\u003c/a\u003e的处理如下:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e枚举BasicBlock和BasicBlock中的语句\n    \u003cul\u003e\n      \u003cli\u003e按执行顺序枚举语句中的tree, 调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/earlyprop.cpp#L231\"\u003eoptEarlyPropRewriteTree\u003c/a\u003e\n        \u003cul\u003e\n          \u003cli\u003e对于GT_ARR_LENGTH节点(获取数组长度的节点), 基于SSA跟踪数组的来源, 如果跟踪到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enew 数组[常量]\u003c/code\u003e, 则把该节点替换为常量\u003c/li\u003e\n          \u003cli\u003e对于使用GT_INDIR获取MethodTable(vtable)的节点, 基于SSA追踪对象的来源, 和上面一样找到则把节点替换为常量\u003c/li\u003e\n          \u003cli\u003e对于获取对象成员并且需要检查null的节点, 如果成员的offset不超过一定值则可以去除nullcheck(因为一定会发生页错误), 在\u003ca href=\"https://303248153.github.io/coreclr-07/\"\u003e之前的文章\u003c/a\u003e中有提到过这个机制\u003c/li\u003e\n          \u003cli\u003e如果节点有修改则调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/compiler.hpp#L1218\"\u003egtSetStmtInfo\u003c/a\u003e重新计算运行和体积成本\u003c/li\u003e\n          \u003cli\u003e如果节点有修改则调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L18201\"\u003efgSetStmtSeq\u003c/a\u003e更新GenTree的链表\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"phase_value_number\"\u003ePHASE_VALUE_NUMBER\u003c/h1\u003e\n\n\u003cp\u003e这个阶段会为GenTree分配\u003ca href=\"https://en.wikipedia.org/wiki/Global_value_numbering\"\u003eVN(Value Number)\u003c/a\u003e, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edoValueNum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgValueNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_VALUE_NUMBER\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e前面的SSA是针对访问本地变量的节点(GenTree)分配一个唯一的版本号, 版本号一致则值一致,\n这里的VN则是针对所有节点(GenTree)分配一个唯一的标识, 标识相同则值相同.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/valuenum.cpp#L4147\"\u003efgValueNumber\u003c/a\u003e会调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/valuenum.cpp#L4330\"\u003efgValueNumberBlock\u003c/a\u003e和\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/valuenum.cpp#L5136\"\u003efgValueNumberTree\u003c/a\u003e标记各个节点的VN.\nVN有两种类型, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eLiberal\u003c/code\u003e假定其他线程只有在同步点才会修改heap中的内容, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eConservative\u003c/code\u003e假定其他线程在任意两次访问之间都有可能修改heap中的内容.\nVN会从\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eValueNumStore\u003c/code\u003e中分配, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eValueNumStore\u003c/code\u003e包含以下类型的VN集合:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003em_intCnsMap: int常量的VN集合\u003c/li\u003e\n  \u003cli\u003em_longCnsMap: long常量的VN集合\u003c/li\u003e\n  \u003cli\u003em_handleMap: field或者class handle的VN集合\u003c/li\u003e\n  \u003cli\u003em_floatCnsMap: float常量的VN集合\u003c/li\u003e\n  \u003cli\u003em_doubleCnsMap: double常量的VN集合\u003c/li\u003e\n  \u003cli\u003em_byrefCnsMap: byref常量的VN集合\u003c/li\u003e\n  \u003cli\u003em_VNFunc0Map: 带0个参数的操作符的VN集合\u003c/li\u003e\n  \u003cli\u003em_VNFunc1Map: 带1个参数的操作符(unary)的VN集合, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-x\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003em_VNFunc2Map: 带2个参数的操作符(binary)的VN集合, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ea + b\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003em_VNFunc3Map: 带3个参数的操作符的VN集合\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ea = 1; b = GetNum(); c = a + b; d = a + b;\u003c/code\u003e,\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ea\u003c/code\u003e的VN是常量1, 储存在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003em_intCnsMap\u003c/code\u003e中,\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eb\u003c/code\u003e的VN因为无法确定值, 会调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/valuenum.cpp#L2277\"\u003eVNForExpr\u003c/a\u003e分配一个新的VN,\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ec\u003c/code\u003e的VN是a+b的组合, 储存在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003em_VNFunc2Map\u003c/code\u003e中,\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ed\u003c/code\u003e的VN是a+b的组合, 因为之前已经生成过, 会从\u003ccode class=\"language-plaintext highlighter-rouge\"\u003em_VNFunc2Map\u003c/code\u003e获取一个现有的VN,\n这时我们可以确定c和d的值是相同的.\u003c/p\u003e\n\n\u003cp\u003e生成VN的具体算法请参考我的\u003ca href=\"https://gist.github.com/303248153/2ca436a0e44e5da1c711de050fa3c13f#file-gistfile1-txt-L3564\"\u003eJIT笔记\u003c/a\u003e或者源代码.\u003c/p\u003e\n\n\u003ch1 id=\"phase_hoist_loop_code\"\u003ePHASE_HOIST_LOOP_CODE\u003c/h1\u003e\n\n\u003cp\u003e这个阶段会把循环中和循环无关的表达式提到循环外面, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edoLoopHoisting\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Hoist invariant code out of loops */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eoptHoistLoopCode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_HOIST_LOOP_CODE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optimizer.cpp#L5650\"\u003eoptHoistLoopCode\u003c/a\u003e会枚举循环中的表达式,\n获取表达式的VN, 并调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optimizer.cpp#L6345\"\u003eoptVNIsLoopInvariant\u003c/a\u003e判断表达式的值是否和循环无关,\n如果和循环无关, 并且表达式无副作用, 并且表达式的节点拥有足够的成本(gtCostEx)则把表达式提到循环外面.\u003c/p\u003e\n\n\u003cp\u003e例如优化前的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSomeFunction\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eConsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWriteLine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e优化后可以把\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ea * 3\u003c/code\u003e提到外面:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSomeFunction\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eConsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWriteLine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e判断表达式的值和循环无关的依据有:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e如果VN是phi, 则phi的来源需要在循环外部(例如上面如果是x * 3则来源是循环内部)\u003c/li\u003e\n  \u003cli\u003e如果表达式访问了heap上的变量(class的成员)则不能判断无关\u003c/li\u003e\n  \u003cli\u003e表达式中访问的本地变量的SSA版本的定义需要在循环外部(例如上面的a的定义在循环外部)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"phase_vn_copy_prop\"\u003ePHASE_VN_COPY_PROP\u003c/h1\u003e\n\n\u003cp\u003e这个阶段会替换具有相同VN的本地变量, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edoCopyProp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Perform VN based copy propagation */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eoptVnCopyProp\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_VN_COPY_PROP\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/copyprop.cpp#L390\"\u003eoptVnCopyProp\u003c/a\u003e会枚举所有读取(USE)本地变量的节点,\n调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/copyprop.cpp#L120\"\u003eoptCopyProp\u003c/a\u003e, 查找当前是否有VN相同并存活的其他变量, 如果有则替换读取的变量到该变量.\u003c/p\u003e\n\n\u003cp\u003e例如优化前的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetNum\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e123\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e优化后可以把\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eb\u003c/code\u003e替换为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ea\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetNum\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e123\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e后面如果\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eb\u003c/code\u003e的引用计数为0则我们可以安全的删掉变量\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eb\u003c/code\u003e.\n这项优化可以减少多余的变量复制.\u003c/p\u003e\n\n\u003ch1 id=\"phase_optimize_valnum_cses\"\u003ePHASE_OPTIMIZE_VALNUM_CSES\u003c/h1\u003e\n\n\u003cp\u003e这个阶段会替换具有相同VN的表达式, 俗称\u003ca href=\"https://en.wikipedia.org/wiki/Common_subexpression_elimination\"\u003eCSE优化\u003c/a\u003e, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#if FEATURE_ANYCSE\n\u003c/span\u003e\u003cspan class=\"cm\"\u003e/* Remove common sub-expressions */\u003c/span\u003e\n\u003cspan class=\"n\"\u003eoptOptimizeCSEs\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // FEATURE_ANYCSE\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optcse.cpp#L2487\"\u003eoptOptimizeCSEs\u003c/a\u003e会枚举所有节点,\n调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optcse.cpp#L2222\"\u003eoptIsCSEcandidate\u003c/a\u003e判断是否应该对节点进行CSE优化, 判断依据包括表达式的成本(小代码时gtCostSz否则gtCostEx),\n如果判断通过则调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optcse.cpp#L512\"\u003eoptValnumCSE_Index\u003c/a\u003e, 对于拥有相同VN的节点,\n第一次仅仅添加节点到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoptCSEhash\u003c/code\u003e索引中,\n第二次因为节点已经在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoptCSEhash\u003c/code\u003e索引中, 会给该索引中的元素分配一个新的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecsdIndex\u003c/code\u003e(自增值), 然后设置节点的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egtCSEnum\u003c/code\u003e等于\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecsdIndex\u003c/code\u003e,\n第三次之后节点已经在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoptCSEhash\u003c/code\u003e索引中, 也已经分配过\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecsdIndex\u003c/code\u003e, 后面的节点的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egtCSEnum\u003c/code\u003e都会指向同一个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecsdIndex\u003c/code\u003e.\n完成后如果\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoptCSEhash\u003c/code\u003e中有任意的元素有\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecsdIndex\u003c/code\u003e, 则调用以下的函数执行CSE优化:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optcse.cpp#L747\"\u003eoptValnumCSE_InitDataFlow\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optcse.cpp#L891\"\u003eoptValnumCSE_DataFlow\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optcse.cpp#L932\"\u003eoptValnumCSE_Availablity\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/optcse.cpp#L2133\"\u003eoptValnumCSE_Heuristic\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e例如优化前的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSomeFunction\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e优化后可以把\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ea + 5\u003c/code\u003e提取出来:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSomeFunction\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这项优化可以减少重复的计算, 但会增加本地变量的数量.\u003c/p\u003e\n\n\u003ch1 id=\"phase_assertion_prop_main\"\u003ePHASE_ASSERTION_PROP_MAIN\u003c/h1\u003e\n\n\u003cp\u003e这个阶段会根据SSA和VN再次传播断言, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edoAssertionProp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Assertion propagation */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eoptAssertionPropMain\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_ASSERTION_PROP_MAIN\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/assertionprop.cpp#L4930\"\u003eoptAssertionPropMain\u003c/a\u003e包含以下的处理:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e遍历节点调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/assertionprop.cpp#L4874\"\u003eoptVNAssertionPropCurStmtVisitor\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/assertionprop.cpp#L4839\"\u003eoptVnNonNullPropCurStmt\u003c/a\u003e\n        \u003cul\u003e\n          \u003cli\u003e针对call节点, 如果可以通过VN确定this不为null, 则标记可以省略null检查\u003c/li\u003e\n          \u003cli\u003e针对indir(deref)节点, 如果可以通过VN确定变量不为null, 则标记可以省略null检查\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/assertionprop.cpp#L4733\"\u003eoptVNConstantPropCurStmt\u003c/a\u003e\n        \u003cul\u003e\n          \u003cli\u003e如果节点的VN是常量, 替换节点到该常量\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e再次调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/assertionprop.cpp#L2016\"\u003eoptAssertionGen\u003c/a\u003e根据当前的状态创建断言\u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/assertionprop.cpp#L4433\"\u003eoptComputeAssertionGen\u003c/a\u003e按跳转条件创建断言\n    \u003cul\u003e\n      \u003cli\u003e例如 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eif (a \u0026gt; 3) { /* block a */ } else { /* block b */ }\u003c/code\u003e, 可以断言block a中\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ea \u0026gt; 3\u003c/code\u003e和block b中\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ea \u0026lt;= 3\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e再次调用[optAssertionProp]按传播后的断言优化节点\n    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/assertionprop.cpp#L2828\"\u003eoptAssertionProp_LclVar\u003c/a\u003e\n        \u003cul\u003e\n          \u003cli\u003e如果确定本地变量等于常量，修改为该常量\u003c/li\u003e\n          \u003cli\u003e如果确定本地变量等于另一本地变量，修改为另一本地变量\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/assertionprop.cpp#L3420\"\u003eoptAssertionProp_Ind\u003c/a\u003e\n        \u003cul\u003e\n          \u003cli\u003e如果indir(deref)左边的节点是lclVar, 并且该节点确定不为null, 则标记可以省略null检查\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/assertionprop.cpp#L3694\"\u003eoptAssertionProp_BndsChk\u003c/a\u003e\n        \u003cul\u003e\n          \u003cli\u003e如果数组的位置是常量并且确定不会溢出, 则标记不需要检查边界\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/assertionprop.cpp#L3397\"\u003eoptAssertionProp_Comma\u003c/a\u003e\n        \u003cul\u003e\n          \u003cli\u003e如果前面标记了不需要检查边界, 则删除边界检查(comma bound_check, expr) =\u0026gt; (expr)\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/assertionprop.cpp#L3300\"\u003eoptAssertionProp_Cast\u003c/a\u003e\n        \u003cul\u003e\n          \u003cli\u003e如果是小范围类型转换为大范围类型, 则标记不会溢出\u003c/li\u003e\n          \u003cli\u003e如果是大范围类型转换为小范围类型, 且确定不会溢出则去除cast\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/assertionprop.cpp#L3635\"\u003eoptAssertionProp_Call\u003c/a\u003e\n        \u003cul\u003e\n          \u003cli\u003e如果可以确定this不为null, 则标记可以省略null检查\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/assertionprop.cpp#L2991\"\u003eoptAssertionProp_RelOp\u003c/a\u003e\n        \u003cul\u003e\n          \u003cli\u003e替换等于或者不等于的表达式, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ex == const\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ex\u003c/code\u003e的值确定是可以替换成true或false\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"phase_optimize_index_checks\"\u003ePHASE_OPTIMIZE_INDEX_CHECKS\u003c/h1\u003e\n\n\u003cp\u003e这个阶段会根据VN和断言删除多余的数组边界检查, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edoRangeAnalysis\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Optimize array index range checks */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eRangeCheck\u003c/span\u003e \u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eOptimizeRangeChecks\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_OPTIMIZE_INDEX_CHECKS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/rangecheck.cpp#L1358\"\u003eOptimizeRangeChecks\u003c/a\u003e会枚举检查边界的节点(COMMA且左参数是ARR_BOUNDS_CHECK)并调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/rangecheck.cpp#L201\"\u003eOptimizeRangeCheck\u003c/a\u003e,\n如果可以通过VN确定访问的序号小于数组长度, 则可以去掉边界检查(COMMA左边只留副作用),\u003c/p\u003e\n\n\u003ch1 id=\"phase_update_flow_graph\"\u003ePHASE_UPDATE_FLOW_GRAPH\u003c/h1\u003e\n\n\u003cp\u003e如果优化过程中做出了修改, 这个阶段会再次调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L15709\"\u003efgUpdateFlowGraph\u003c/a\u003e删除空block, 无法到达的block和多余的跳转:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* update the flowgraph if we modified it during the optimization phase*/\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efgModified\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgUpdateFlowGraph\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_UPDATE_FLOW_GRAPH\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"phase_compute_edge_weights2\"\u003ePHASE_COMPUTE_EDGE_WEIGHTS2\u003c/h1\u003e\n\n\u003cp\u003e如果优化过程中做出了修改, 这个阶段会再次调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L12410\"\u003efgComputeEdgeWeights\u003c/a\u003e计算block和block edge的权重(weight):\n从阶段的名字也可以看出来这个阶段的处理跟前面的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePHASE_COMPUTE_EDGE_WEIGHTS\u003c/code\u003e阶段一样.\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* update the flowgraph if we modified it during the optimization phase*/\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efgModified\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n    \n    \u003cspan class=\"c1\"\u003e// Recompute the edge weight if we have modified the flow graph\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efgComputeEdgeWeights\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_COMPUTE_EDGE_WEIGHTS2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"phase_determine_first_cold_block\"\u003ePHASE_DETERMINE_FIRST_COLD_BLOCK\u003c/h1\u003e\n\n\u003cp\u003e这个阶段负责标记第一个冷(cold)的BasicBlock, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003efgDetermineFirstColdBlock\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_DETERMINE_FIRST_COLD_BLOCK\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e因为前面的\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L14296\"\u003efgReorderBlocks\u003c/a\u003e已经把权重较小的block排到链表的后面,\n\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L15461\"\u003efgDetermineFirstColdBlock\u003c/a\u003e会查找BasicBlock链表的最后连续标记了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBBF_RUN_RARELY\u003c/code\u003e的部分,\n设置第一个标记的block到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgFirstColdBlock\u003c/code\u003e, 然后标记这些block为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBBF_COLD\u003c/code\u003e, 如果找不到则\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgFirstColdBlock\u003c/code\u003e会等于null.\u003c/p\u003e\n\n\u003cp\u003eCodeGen会根据\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efgFirstColdBlock\u003c/code\u003e把代码分为两部分, 热(hot)的部分和冷(cold)的部分分别写入到不同的位置.\u003c/p\u003e\n\n\u003ch1 id=\"phase_rationalize\"\u003ePHASE_RATIONALIZE\u003c/h1\u003e\n\n\u003cp\u003e这个阶段是JIT后端的第一个阶段, 解决LIR中需要上下文判断的节点并正式开始使用LIR, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#ifndef LEGACY_BACKEND\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// rationalize trees\u003c/span\u003e\n\u003cspan class=\"n\"\u003eRationalizer\u003c/span\u003e \u003cspan class=\"nf\"\u003erat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// PHASE_RATIONALIZE\u003c/span\u003e\n\u003cspan class=\"n\"\u003erat\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRun\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // !LEGACY_BACKEND\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/rationalize.cpp#L951\"\u003eRationalizer::Run\u003c/a\u003e包含以下的处理:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e枚举BasicBlock中的语句(stmt)\n    \u003cul\u003e\n      \u003cli\u003e如果当前的平台不支持\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_INTRINSIC\u003c/code\u003e节点的操作(例如abs, round, sqrt)则替换为helper call\u003c/li\u003e\n      \u003cli\u003e设置上一个语句的最后一个节点的下一个节点是下一个语句的第一个节点\u003c/li\u003e\n      \u003cli\u003e设置下一个语句的第一个节点的上一个节点是上一个语句的最后一个节点\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e标记BasicBlock的第一个节点和最后一个节点\u003c/li\u003e\n  \u003cli\u003e标记BasicBlock的格式已经是LIR(BBF_IS_LIR)\u003c/li\u003e\n  \u003cli\u003e枚举BasicBlock中的语句(stmt)\n    \u003cul\u003e\n      \u003cli\u003e把语句节点(GT_STMT)转换为IL偏移值节点(GT_IL_OFFSET), 用于标记哪些节点属于哪行IL语句\u003c/li\u003e\n      \u003cli\u003e针对语句中的节点调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/rationalize.cpp#L685\"\u003eRationalizer::RewriteNode\u003c/a\u003e\n        \u003cul\u003e\n          \u003cli\u003e把修改变量的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_LCL_VAR, GT_LCL_FLD, GT_REG_VAR, GT_PHI_ARG\u003c/code\u003e节点转换为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_STORE_LCL_VAR, GT_STORE_LCL_FLD\u003c/code\u003e\u003c/li\u003e\n          \u003cli\u003e把修改地址值的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_IND\u003c/code\u003e节点转换为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_STOREIND\u003c/code\u003e\u003c/li\u003e\n          \u003cli\u003e把修改类字段的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_CLS_VAR\u003c/code\u003e节点转换为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_CLS_VAR_ADDR\u003c/code\u003e+\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_STOREIND\u003c/code\u003e\u003c/li\u003e\n          \u003cli\u003e把修改块值的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_BLK, GT_OBJ, GT_DYN_BLK\u003c/code\u003e节点转换为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_STORE_BLK, GT_STORE_OBJ, GT_STORE_DYN_BLK\u003c/code\u003e\u003c/li\u003e\n          \u003cli\u003e删除\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_BOX\u003c/code\u003e节点(因为已经转换为call)\u003c/li\u003e\n          \u003cli\u003e对于\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_ADDR\u003c/code\u003e节点\n            \u003cul\u003e\n              \u003cli\u003e如果目标是本地变量则修改节点为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_LCL_VAR_ADDR\u003c/code\u003e或者\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_LCL_FLD_ADDR\u003c/code\u003e\u003c/li\u003e\n              \u003cli\u003e如果目标是类字段则修改节点为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_CLS_VAR_ADDR\u003c/code\u003e\u003c/li\u003e\n              \u003cli\u003e如果对象是indir则可以同时删除indir和addr(\u0026amp;*someVar =\u0026gt; someVar)\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e对于\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_NOP\u003c/code\u003e节点, 如果有参数则替换为参数并删除\u003c/li\u003e\n          \u003cli\u003e对于\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_COMMA\u003c/code\u003e节点\n            \u003cul\u003e\n              \u003cli\u003e如果第一个参数无副作用, 则删除第一个参数的所有节点\u003c/li\u003e\n              \u003cli\u003e如果第二个参数无副作用且值未被使用, 则删除第二个参数的所有节点\u003c/li\u003e\n              \u003cli\u003e删除\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_COMMA\u003c/code\u003e节点(第一个和第二个参数已经按顺序连接起来)\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e删除\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_ARGPLACE\u003c/code\u003e节点(后面会添加\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_PUTARG_REG\u003c/code\u003e或\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_PUTARG_STK\u003c/code\u003e节点)\u003c/li\u003e\n          \u003cli\u003e把读取类字段的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_CLS_VAR\u003c/code\u003e节点转换为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_CLS_VAR_ADDR\u003c/code\u003e+\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_IND\u003c/code\u003e\u003c/li\u003e\n          \u003cli\u003e确保当前cpu支持\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_INTRINSIC\u003c/code\u003e节点对应的操作(例如abs, round, sqrt)\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e设置正式开始使用LIR \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCompiler::compRationalIRForm = true\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"phase_simple_lowering\"\u003ePHASE_SIMPLE_LOWERING\u003c/h1\u003e\n\n\u003cp\u003e这个阶段会做一些简单的Lowering(使LIR更接近机器代码)工作, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Here we do \u0026#34;simple lowering\u0026#34;.  When the RyuJIT backend works for all\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// platforms, this will be part of the more general lowering phase.  For now, though, we do a separate\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// pass of \u0026#34;final lowering.\u0026#34;  We must do this before (final) liveness analysis, because this creates\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// range check throw blocks, in which the liveness must be correct.\u003c/span\u003e\n\u003cspan class=\"n\"\u003efgSimpleLowering\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_SIMPLE_LOWERING\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/flowgraph.cpp#L8939\"\u003efgSimpleLowering\u003c/a\u003e包含以下的处理:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e按LIR顺序枚举节点\n    \u003cul\u003e\n      \u003cli\u003e如果节点是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_ARR_LENGTH\u003c/code\u003e, 转换为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_IND(arr + ArrLenOffset)\u003c/code\u003e\n        \u003cul\u003e\n          \u003cli\u003e例如数组对象在x64下0~8是指向MethodTable的指针, 8~12是数组长度, 则转换为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eindir(lclVar +(ref) const 8)\u003c/code\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e如果节点是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_ARR_BOUNDS_CHECK\u003c/code\u003e\n        \u003cul\u003e\n          \u003cli\u003e确保抛出\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIndexOutOfRangeException\u003c/code\u003e的BasicBlock存在, 不存在则添加\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"phase_lclvarliveness\"\u003ePHASE_LCLVARLIVENESS\u003c/h1\u003e\n\n\u003cp\u003e这个阶段会设置各个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e进入和离开时存活的变量集合, 包含以下的代码:\n这个阶段仅在使用旧的JIT后端(JIT32)时会启用, 也就是一般的CoreCLR不会执行这个阶段.\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#ifdef LEGACY_BACKEND\n\u003c/span\u003e\u003cspan class=\"cm\"\u003e/* Local variable liveness */\u003c/span\u003e\n\u003cspan class=\"n\"\u003efgLocalVarLiveness\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_LCLVARLIVENESS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif // !LEGACY_BACKEND\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/liveness.cpp#L181\"\u003efgLocalVarLiveness\u003c/a\u003e会设置\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBasicBlock\u003c/code\u003e的以下成员:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ebbVarUse 使用过的本地变量集合\u003c/li\u003e\n  \u003cli\u003ebbVarDef 修改过的本地变量集合\u003c/li\u003e\n  \u003cli\u003ebbVarTmp 临时变量\u003c/li\u003e\n  \u003cli\u003ebbLiveIn 进入block时存活的变量集合\u003c/li\u003e\n  \u003cli\u003ebbLiveOut 离开block后存活的变量集合\u003c/li\u003e\n  \u003cli\u003ebbHeapUse 是否使用过全局heap\u003c/li\u003e\n  \u003cli\u003ebbHeapDef 是否修改过全局heap\u003c/li\u003e\n  \u003cli\u003ebbHeapLiveIn 进入blob时全局heap是否存活\u003c/li\u003e\n  \u003cli\u003ebbHeapLiveOut 离开blob后全局heap是否存活\u003c/li\u003e\n  \u003cli\u003ebbHeapHavoc 是否会让全局heap进入未知的状态\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"phase_lowering\"\u003ePHASE_LOWERING\u003c/h1\u003e\n\n\u003cp\u003e这个阶段会做主要的Lowering(使LIR更接近机器代码)工作, 确定各个节点需要的寄存器数量, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e///////////////////////////////////////////////////////////////////////////////\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// Dominator and reachability sets are no longer valid. They haven\u0026#39;t been\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// maintained up to here, and shouldn\u0026#39;t be used (unless recomputed).\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e///////////////////////////////////////////////////////////////////////////////\u003c/span\u003e\n\u003cspan class=\"n\"\u003efgDomsComputed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Create LSRA before Lowering, this way Lowering can initialize the TreeNode Map */\u003c/span\u003e\n\u003cspan class=\"n\"\u003em_pLinearScan\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetLinearScanAllocator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Lower */\u003c/span\u003e\n\u003cspan class=\"n\"\u003eLowering\u003c/span\u003e \u003cspan class=\"nf\"\u003elower\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003em_pLinearScan\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// PHASE_LOWERING\u003c/span\u003e\n\u003cspan class=\"n\"\u003elower\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRun\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/lower.cpp#L3605\"\u003eLowering::Run\u003c/a\u003e包含以下的处理:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e按LIR顺序枚举节点\n    \u003cul\u003e\n      \u003cli\u003e如果是x86(32位)则分解long节点到两个int节点(loResult =\u0026gt; hiResult =\u0026gt; long)\u003c/li\u003e\n      \u003cli\u003eGT_IND: 判断是否可以替换为LEA节点(可以使用CPU中的LEA指令)\n        \u003cul\u003e\n          \u003cli\u003e例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e*(((v07 \u0026lt;\u0026lt; 2) + v01) + 16)\u003c/code\u003e可以替换为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e*(lea(v01 + v07*4 + 16))\u003c/code\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003eGT_STOREIND: 判断是否可以替换为LEA节点, 同上\u003c/li\u003e\n      \u003cli\u003eGT_ADD: 判断是否可以替换为LEA节点, 同上\u003c/li\u003e\n      \u003cli\u003eGT_UDIV: 判断是否可以替换到RSZ节点\n        \u003cul\u003e\n          \u003cli\u003e例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e16/2\u003c/code\u003e可以替换为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e16\u0026gt;\u0026gt;1\u003c/code\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003eGT_UMOD: 判断是否可以替换到AND节点\n        \u003cul\u003e\n          \u003cli\u003e例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e17/2\u003c/code\u003e可以替换为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e17\u0026amp;(2-1)\u003c/code\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003eGT_DIV, GT_MOD:\n        \u003cul\u003e\n          \u003cli\u003e如果divisor是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eint.MinValue\u003c/code\u003e或者\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elong.MinValue\u003c/code\u003e, 转换到EQ(只有自己除自己可以得到1)\u003c/li\u003e\n          \u003cli\u003e如果divisor是power of 2\n            \u003cul\u003e\n              \u003cli\u003e转换DIV到RSH, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e16/-2\u003c/code\u003e转换到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-(16\u0026gt;\u0026gt;1)\u003c/code\u003e\u003c/li\u003e\n              \u003cli\u003e转换MOD, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e31%8\u003c/code\u003e转换到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e31-8*(31/8)\u003c/code\u003e转换到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e31-((31\u0026gt;\u0026gt;3)\u0026lt;\u0026lt;3)\u003c/code\u003e转换到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e31-(31\u0026amp; ~(8-1))\u003c/code\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003eGT_SWITCH\n        \u003cul\u003e\n          \u003cli\u003e替换switch下的节点到一个本地变量\n            \u003cul\u003e\n              \u003cli\u003e例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eswitch v01 - 100\u003c/code\u003e替换到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etmp = v01 - 100; switch tmp\u003c/code\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e添加判断并跳到default case的节点\n            \u003cul\u003e\n              \u003cli\u003e例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eif (tmp \u0026gt; jumpTableLength - 2) { goto jumpTable[jumpTableLength - 1]; }\u003c/code\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e创建一个新的BasicBlock, 把原来的BBJ_SWITCH转移到这个block\n            \u003cul\u003e\n              \u003cli\u003e转移后的结构:\n                \u003cul\u003e\n                  \u003cli\u003e原block (BBJ_COND, 条件成立时跳转到default case)\u003c/li\u003e\n                  \u003cli\u003e新block (包含转移后的switch)\u003c/li\u003e\n                  \u003cli\u003e剩余的block\u003c/li\u003e\n                \u003c/ul\u003e\n              \u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e如果剩余的跳转目标都是同一个block, 可以省略掉switch, 直接跳过去\u003c/li\u003e\n          \u003cli\u003e否则如果跳转个数小于\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eminSwitchTabJumpCnt\u003c/code\u003e则转换switch到多个jtrue(if … else if … else)\u003c/li\u003e\n          \u003cli\u003e否则转换switch到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_SWITCH_TABLE\u003c/code\u003e节点(后面会生成一个包含偏移值的索引表, 按索引来跳转)\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003eGT_CALL\n        \u003cul\u003e\n          \u003cli\u003e针对参数添加\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_PUTARG_REG\u003c/code\u003e或者\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_PUTARG_STK\u003c/code\u003e节点\u003c/li\u003e\n          \u003cli\u003e如果是调用委托则转换到具体的取值+调用\n            \u003cul\u003e\n              \u003cli\u003e例如把\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecall originalThis\u003c/code\u003e转换到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecall indir(lea(originalThis+24)) with indir(lea(originalThis+8))\u003c/code\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eindir(lea(originalThis+24))\u003c/code\u003e是函数的地址\u003c/li\u003e\n              \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eindir(lea(originalThis+8))\u003c/code\u003e是真正的this, 会替换掉原有的this式\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e否则如果是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGTF_CALL_VIRT_STUB\u003c/code\u003e则替换到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecall ind(函数地址的地址)\u003c/code\u003e\u003c/li\u003e\n          \u003cli\u003e否则如果是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGTF_CALL_VIRT_VTABLE\u003c/code\u003e则替换到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecall ind(vtable中函数的地址)\u003c/code\u003e\n            \u003cul\u003e\n              \u003cli\u003e例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eind(lea(ind(lea(ind(lea(this+0))+72))+32))\u003c/code\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e否则如果是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGTF_CALL_NONVIRT\u003c/code\u003e\n            \u003cul\u003e\n              \u003cli\u003e如果是helper call则获取具体的函数地址(例如JIT_New的函数地址)\u003c/li\u003e\n              \u003cli\u003e如果函数地址已知则生成\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecall addr\u003c/code\u003e\u003c/li\u003e\n              \u003cli\u003e如果函数地址的地址已知则生成\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecall ind(addr)\u003c/code\u003e\u003c/li\u003e\n              \u003cli\u003e如果函数地址的地址的地址已知则生成\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecall ind(ind(addr))\u003c/code\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003eGT_JMP, GT_RETURN\n        \u003cul\u003e\n          \u003cli\u003e如果调用了非托管函数则在前面插入PME(pinvoke method epilog)\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003eGT_CAST\n        \u003cul\u003e\n          \u003cli\u003e转换\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_CAST(small, float/double)\u003c/code\u003e到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_CAST(GT_CAST(small, int), float/double)\u003c/code\u003e\u003c/li\u003e\n          \u003cli\u003e转换\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_CAST(float/double, small)\u003c/code\u003e到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_CAST(GT_CAST(float/double, int), small)\u003c/code\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003eGT_ARR_ELEM: 转换到获取元素地址并且IND的节点(例如IND(LEA))\u003c/li\u003e\n      \u003cli\u003eGT_STORE_BLK, GT_STORE_OBJ, GT_STORE_DYN_BLK: 判断计算地址的节点是否可以替换为LEA节点, 同上\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e按LIR顺序枚举节点\n    \u003cul\u003e\n      \u003cli\u003e计算节点需要的寄存器数量\u003c/li\u003e\n      \u003cli\u003e设置哪些节点是contained(contained节点是其他节点的指令的一部分)\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e可以参考\u003ca href=\"https://303248153.github.io/coreclr-07/\"\u003e上一篇文章\u003c/a\u003e关于Lowering的例子:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171028110148461-1101877151.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch1 id=\"phase_linear_scan\"\u003ePHASE_LINEAR_SCAN\u003c/h1\u003e\n\n\u003cp\u003e这个阶段负责给各个节点分配寄存器, 使用的是\u003ca href=\"https://www.usenix.org/legacy/events/vee05/full_papers/p132-wimmer.pdf\"\u003eLSRA算法\u003c/a\u003e, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elvaSortAgain\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// We should have re-run fgLocalVarLiveness() in lower.Run()\u003c/span\u003e\n\u003cspan class=\"n\"\u003elvaTrackedFixed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// We can not add any new tracked variables after this point.\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Now that lowering is completed we can proceed to perform register allocation */\u003c/span\u003e\n\u003cspan class=\"n\"\u003em_pLinearScan\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edoLinearScan\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_LINEAR_SCAN\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eLSRA算法可以看\u003ca href=\"https://www.usenix.org/legacy/events/vee05/full_papers/p132-wimmer.pdf\"\u003e这一篇论文\u003c/a\u003e中的说明, 但CoreCLR中使用的算法和论文中的算法不完全一样.\nLSRA算法要求根据LIR生成以下数据:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eInterval\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eInterval表示同一个变量(本地L, 内部T, 其他I)对应的使用期间, 包含多个RefPosition,\n本地变量的Interval会在一开始创建好, 其他(临时)的Interval会在需要使用寄存器(例如call返回值)时使用,\nInterval有激活(activate)和未激活(inactive)状态, 未激活状态代表在当前位置该变量不会被使用(不占用寄存器).\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLocationInfo\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eLocationInfo表示代码位置, 在构建时会对LIR中的GenTree分配位置, 位置总会+2.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eRefPosition\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eRefPosition有以下的类型:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eDef: 记录写入变量的位置, 有对应的Interval\u003c/li\u003e\n  \u003cli\u003eUse: 记录读取变量的位置, 有对应的Interval\u003c/li\u003e\n  \u003cli\u003eKill: 记录寄存器值会被覆盖的位置, 常见于call时标记caller save registers被覆盖\u003c/li\u003e\n  \u003cli\u003eBB: 记录BasicBlock的位置\u003c/li\u003e\n  \u003cli\u003eFixedReg: 记录当前位置使用了固定的寄存器\u003c/li\u003e\n  \u003cli\u003eExpUse: 记录离开当前block时存活且进入后继block时也存活的变量(exposed use)\u003c/li\u003e\n  \u003cli\u003eParamDef: 记录函数开头传入(定义)的参数变量\u003c/li\u003e\n  \u003cli\u003eDummyDef: 记录函数开头未定义的参数变量\u003c/li\u003e\n  \u003cli\u003eZeroInit: 记录函数开头需要0初始化的变量\u003c/li\u003e\n  \u003cli\u003eKillGCRefs: 记录需要确保当前寄存器中无GC引用(对象或者struct的指针)的位置\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e可以参考\u003ca href=\"https://303248153.github.io/coreclr-07/\"\u003e上一篇文章\u003c/a\u003e中说明LSRA的图片:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171028110156070-945571268.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/lsra.cpp#L1650\"\u003eLinearScan::doLinearScan\u003c/a\u003e包含以下的处理:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/lsra.cpp#L4534\"\u003esetFrameType\u003c/a\u003e设置当前是否应该使用Frame Pointer\n    \u003cul\u003e\n      \u003cli\u003e使用Frame Pointer表示需要使用rbp保存进入函数时的rsp值, 需要清除所有节点的寄存器候选中的rbp\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/lsra.cpp#L7706\"\u003einitMaxSpill\u003c/a\u003e初始化用于记录spill层数的数组\n    \u003cul\u003e\n      \u003cli\u003e数组\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emaxSpill\u003c/code\u003e有两个元素, 一个记录int的最大spill层数, 另一个记录float的最大spill层数\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/lsra.cpp#L4101\"\u003ebuildIntervals\u003c/a\u003e构建LSRA算法需要的数据结构\n    \u003cul\u003e\n      \u003cli\u003e构建Interval, RefPosition, LocationInfo\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/lsra.cpp#L2158\"\u003einitVarRegMaps\u003c/a\u003e设置进入和离开block时变量使用的寄存器\n    \u003cul\u003e\n      \u003cli\u003e枚举BasicBlock\n        \u003cul\u003e\n          \u003cli\u003e设置\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einVarToRegMaps[blockIndex] = new regNumber[跟踪的变量数量]\u003c/code\u003e\u003c/li\u003e\n          \u003cli\u003e设置\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoutVarToRegMaps[blockIndex] = new regNumber[跟踪的变量数量]\u003c/code\u003e\u003c/li\u003e\n          \u003cli\u003e枚举跟踪的变量数量\n            \u003cul\u003e\n              \u003cli\u003e设置\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einVarToRegMaps[blockIndex][regMapIndex] = REG_STK\u003c/code\u003e(默认通过栈传递)\u003c/li\u003e\n              \u003cli\u003e设置\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoutVarToRegMap[blockIndex][regMapIndex] = REG_STK\u003c/code\u003e(默认通过栈传递)\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e因为JIT需要确保如果变量在寄存器中, 离开block时变量所在的寄存器和进入后继block时变量所在的寄存器一致\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/lsra.cpp#L6436\"\u003eallocateRegisters\u003c/a\u003e分配寄存器\n    \u003cul\u003e\n      \u003cli\u003e这个函数包含了LSRA算法的主要处理, 以下是简化过的流程, 完整的请看我的\u003ca href=\"https://gist.github.com/303248153/2ca436a0e44e5da1c711de050fa3c13f#file-gistfile1-txt-L5477\"\u003eJIT笔记\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e建立一个寄存器索引\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ephysRegs[寄存器数量]\u003c/code\u003e, 索引\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e寄存器 =\u0026gt; (上次使用寄存器的RefPosition, 是否正在使用)\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e枚举Interval, 如果是传入的函数参数则设置\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eisActive = true\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e枚举RefPosition\n        \u003cul\u003e\n          \u003cli\u003e如果RefPosition是读取(Use)\n            \u003cul\u003e\n              \u003cli\u003e如果当前无正在分配的寄存器则标记为reload(把值从栈reload到寄存器)\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e如果RefPosition要求使用固定的寄存器(例如Kill)\n            \u003cul\u003e\n              \u003cli\u003e让寄存器对应的Interval让出寄存器并设置为inactive\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e如果RefPosition是最后一次读取(Use)\n            \u003cul\u003e\n              \u003cli\u003e标记下一轮处理Interval让出寄存器并设置为inactive\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e如果RefPosition是读取(Use)或者写入(Def)且未分配寄存器\n            \u003cul\u003e\n              \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/lsra.cpp#L4811\"\u003etryAllocateFreeReg\u003c/a\u003e分配一个寄存器(论文中的First Pass)\u003c/li\u003e\n              \u003cli\u003e如果分配失败则调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/lsra.cpp#L5315\"\u003eallocateBusyReg\u003c/a\u003e再次尝试分配一个寄存器(论文中的Second Pass)\n                \u003cul\u003e\n                  \u003cli\u003e必要时会让原来的寄存器对应的Interval让出寄存器(把值从寄存器spill到栈, 然后变为inactive)\u003c/li\u003e\n                \u003c/ul\u003e\n              \u003c/li\u003e\n              \u003cli\u003e分配成功时Interval变为active\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e(如果一个变量对应的Interval从未让出过寄存器(spill), 则这个变量可以一直使用寄存器保存而不需要访问栈)\u003c/li\u003e\n      \u003cli\u003e(反过来说如果一个Interval让出过寄存器(spill), 且该Interval不是本地变量, 则需要增加一个内部临时变量)\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/lsra.cpp#L7863\"\u003eresolveRegisters\u003c/a\u003e解决block之间寄存器的差异\n    \u003cul\u003e\n      \u003cli\u003e上面的分配是线性的, 并未考虑到flowgraph, 这个函数会确保离开block时变量所在的寄存器和进入后继block时变量所在的寄存器一致\u003c/li\u003e\n      \u003cli\u003e根据之前分配的结果给节点(GenTree)设置使用的寄存器\u003c/li\u003e\n      \u003cli\u003e如果需要重新从栈读取值则插入\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGT_RELOAD\u003c/code\u003e节点\u003c/li\u003e\n      \u003cli\u003e设置进入block时变量所在的寄存器索引\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einVarToRegMaps\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e设置离开block时变量所在的寄存器索引\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoutVarToRegMap\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/lsra.cpp#L8935\"\u003eresolveEdges\u003c/a\u003e\n        \u003cul\u003e\n          \u003cli\u003e如果block的后继block有多个前继block, 例如(A =\u0026gt; B, C =\u0026gt; B), 则需要在A中解决\n            \u003cul\u003e\n              \u003cli\u003e如果block结束时变量的寄存器跟后继block的寄存器一致, 则无需resolution\u003c/li\u003e\n              \u003cli\u003e如果block结束时变量的寄存器跟后继block的寄存器不一致, 但所有后继block的寄存器都相同\n                \u003cul\u003e\n                  \u003cli\u003e在block结束前插入GT_COPY节点, 复制来源寄存器到目标寄存器(或者来源寄存器到堆栈到目标寄存器)\u003c/li\u003e\n                \u003c/ul\u003e\n              \u003c/li\u003e\n              \u003cli\u003e如果block结束时变量的寄存器跟后继block的寄存器不一致, 且不是所有后继block的寄存器都相同\n                \u003cul\u003e\n                  \u003cli\u003e在block和后继block之间插入一个新block, 新block中插入GT_COPY节点用于复制到目标寄存器\u003c/li\u003e\n                \u003c/ul\u003e\n              \u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e如果block只有一个前继block, 例如(A =\u0026gt; B), 则可以在B中解决\n            \u003cul\u003e\n              \u003cli\u003e对于不一致的寄存器在block开头插入GT_COPY节点\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e对于从未spill过的本地变量, 设置它可以不放在栈上(lvRegister = true, lvOnFrame = false)\u003c/li\u003e\n      \u003cli\u003e对于非本地变量的spill, 根据\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emaxSpill[int]\u003c/code\u003e和\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emaxSpill[float]\u003c/code\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/regset.cpp#L3295\"\u003etmpPreAllocateTemps\u003c/a\u003e创建指定数量的内部临时变量\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e经过这个阶段后, LIR中需要寄存器的节点都会得到明确的寄存器, 读取或者写入本地变量的节点也会明确目标是栈还是某个寄存器.\u003c/p\u003e\n\n\u003ch1 id=\"phase_ra_assign_vars\"\u003ePHASE_RA_ASSIGN_VARS\u003c/h1\u003e\n\n\u003cp\u003e因为旧的JIT后端不支持LSRA, 这个阶段负责给旧的JIT后端(JIT32)分配寄存器, 包含以下的代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003elvaTrackedFixed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// We cannot add any new tracked variables after this point.\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// For the classic JIT32 at this point lvaSortAgain can be set and raAssignVars() will call lvaSortOnly()\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Now do \u0026#34;classic\u0026#34; register allocation.\u003c/span\u003e\n\u003cspan class=\"n\"\u003eraAssignVars\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEndPhase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePHASE_RA_ASSIGN_VARS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e因为一般的CoreCLR不会执行这个阶段, 这里就不详细分析了.\u003c/p\u003e\n\n\u003ch1 id=\"phase_generate_code\"\u003ePHASE_GENERATE_CODE\u003c/h1\u003e\n\n\u003cp\u003e从这个阶段开始就属于CodeGen了, CodeGen的入口如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-c++ highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* Generate code */\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ecodeGen\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egenGenerateCode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emethodCodePtr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emethodCodeSize\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/codegencommon.cpp#L2753\"\u003egenGenerateCode\u003c/a\u003e包含了三个阶段:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ePHASE_GENERATE_CODE: 负责根据LIR生成汇编指令\u003c/li\u003e\n  \u003cli\u003ePHASE_EMIT_CODE: 根据汇编指令写入可执行的机器代码\u003c/li\u003e\n  \u003cli\u003ePHASE_EMIT_GCEH: 写入函数的附加信息(函数头, GC信息, 例外信息等)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eCodeGen会使用以下的数据类型:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003einstrDesc: 汇编指令的数据, 一个instrDesc实例对应一条汇编指令\u003c/li\u003e\n  \u003cli\u003einsGroup: 汇编指令的组, 一个insGroup包含一个或多个instrDesc, 跳转指令的目标只能是IG的第一条指令\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e以下是\u003ca href=\"https://303248153.github.io/coreclr-07/\"\u003e上一篇文章\u003c/a\u003e中的图片说明:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171028110203555-1584196634.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePHASE_GENERATE_CODE\u003c/code\u003e阶段包含了以下的处理:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/lclvars.cpp#L3960\"\u003elvaAssignFrameOffsets\u003c/a\u003e给各个本地变量分配栈偏移值\n    \u003cul\u003e\n      \u003cli\u003e会分两步计算\n        \u003cul\u003e\n          \u003cli\u003e第一步设置一个虚拟的初始偏移值0, 然后以这个0为基准设置各个变量的偏移值, 参数为正数本地变量为负数\u003c/li\u003e\n          \u003cli\u003e第二步根据是否使用frame pointer调整各个偏移值\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e计算完毕后会设置\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecompLclFrameSize\u003c/code\u003e, 代表进入函数时需要分配的大小(例如sub rsp, 0x80)\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/emit.cpp#L980\"\u003eemitBegFN\u003c/a\u003e预留函数的prolog所使用的IG\n    \u003cul\u003e\n      \u003cli\u003eLIR只包含了函数体, 函数的prolog需要一个单独的IG保存\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/codegenxarch.cpp#L325\"\u003egenCodeForBBlist\u003c/a\u003e处理BasicBlock\n    \u003cul\u003e\n      \u003cli\u003e如果block是小函数(funclet)的第一个block, 则预留小函数的prolog所使用的IG\u003c/li\u003e\n      \u003cli\u003e以LIR顺序枚举block中的节点, 调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/codegenxarch.cpp#L1866\"\u003egenCodeForTreeNode\u003c/a\u003e根据节点添加汇编指令\n        \u003cul\u003e\n          \u003cli\u003eGT_CNS_INT: 如果常量的值是0, 生成\u003ccode class=\"language-plaintext highlighter-rouge\"\u003exor targetReg, targetReg\u003c/code\u003e, 否则生成\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emov, targetReg, imm\u003c/code\u003e\u003c/li\u003e\n          \u003cli\u003eGT_NEG: 如果来源寄存器跟目标寄存器不一致则生成\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emov targetReg, sourceReg\u003c/code\u003e, 然后生成\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneg targetReg\u003c/code\u003e\u003c/li\u003e\n          \u003cli\u003eGT_LCL_VAR: 如果本地变量已经在寄存器则可以不处理, 否则生成从栈读取到寄存器的指令, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emov targetReg, [rbp-offset]\u003c/code\u003e\u003c/li\u003e\n          \u003cli\u003eGT_STORE_LCL_VAR: 如果本地变量已经在相同的寄存器则不处理, 如果在不同的寄存器则添加复制寄存器的指令, 否则生成从寄存器保存到栈的指令\u003c/li\u003e\n          \u003cli\u003e更多的类型可以参考我的\u003ca href=\"https://gist.github.com/303248153/2ca436a0e44e5da1c711de050fa3c13f#file-gistfile1-txt-L6687\"\u003eJIT笔记\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e判断block的跳转类型\n        \u003cul\u003e\n          \u003cli\u003eBBJ_ALWAYS: 添加jmp指令\u003c/li\u003e\n          \u003cli\u003eBBJ_RETURN: 预留函数的epilog使用的IG\u003c/li\u003e\n          \u003cli\u003eBBJ_THROW: 添加int 3指令(这个指令不会被执行)\u003c/li\u003e\n          \u003cli\u003eBBJ_CALLFINALLY: 添加\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emov rcx, pspsym; call finally-funclet; jmp finally-return;\u003c/code\u003e的指令\u003c/li\u003e\n          \u003cli\u003eBBJ_EHCATCHRET: 移动block的目标地址(返回地址)到rax, 然后预留小函数的epilog使用的IG\u003c/li\u003e\n          \u003cli\u003eBBJ_EHFINALLYRET, BBJ_EHFILTERRET: 预留小函数的epilog使用的IG\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/codegencommon.cpp#L10338\"\u003egenGeneratePrologsAndEpilogs\u003c/a\u003e添加prolog和epilog中的指令\n    \u003cul\u003e\n      \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/codegencommon.cpp#L8140\"\u003egenFnProlog\u003c/a\u003e生成主函数的prolog\n        \u003cul\u003e\n          \u003cli\u003e如果需要使用Frame Pointer, 则添加\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epush rbp; mov rbp, rsp\u003c/code\u003e\u003c/li\u003e\n          \u003cli\u003epush修改过的Callee Saved Register\u003c/li\u003e\n          \u003cli\u003e添加分配栈空间的指令, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esub rsp, size\u003c/code\u003e, 并添加确认栈空间的虚拟内存(所有页)可访问的指令\u003c/li\u003e\n          \u003cli\u003e添加清零栈空间的指令(本地变量的初始值是0)\u003c/li\u003e\n          \u003cli\u003e如果使用了小函数(funclet), 则添加\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emov [lvaPSPSym], rsp\u003c/code\u003e\u003c/li\u003e\n          \u003cli\u003e如果使用了Generic Context参数则添加保存它到本地变量的指令\u003c/li\u003e\n          \u003cli\u003e如果使用了GS Cookie则添加设置GS Cookie值的指令\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/emit.cpp#L1750\"\u003eemitGeneratePrologEpilog\u003c/a\u003e生成主函数的epilog和小函数的prolog和epilog\n        \u003cul\u003e\n          \u003cli\u003e枚举之前预留的IG列表\n            \u003cul\u003e\n              \u003cli\u003eIGPT_PROLOG: 上面已经生成过, 这里可以跳过\u003c/li\u003e\n              \u003cli\u003eIGPT_EPILOG: 调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/codegencommon.cpp#L9254\"\u003egenFnEpilog\u003c/a\u003e生成主函数的epilog\n                \u003cul\u003e\n                  \u003cli\u003epop之前prolog里面push过的Callee Saved Register\u003c/li\u003e\n                  \u003cli\u003e如果使用Frame Pointer且是x86, 则添加\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emov esp, ebp; pop ebp;\u003c/code\u003e\u003c/li\u003e\n                  \u003cli\u003e如果使用Frame Pointer且是x64, 则添加\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eadd rsp, size; pop rbp\u003c/code\u003e或者\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elea rsp, [rsp+size]; pop rbp;\u003c/code\u003e\u003c/li\u003e\n                  \u003cli\u003e如果不使用Frame Pointer, 则添加\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eadd rsp, size\u003c/code\u003e或者\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elea rsp, [rsp+size]\u003c/code\u003e\u003c/li\u003e\n                  \u003cli\u003e如果是tail call则添加\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecall addr\u003c/code\u003e, 如果是fast tail call则添加\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejmp rax\u003c/code\u003e, 否则添加\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eret\u003c/code\u003e\u003c/li\u003e\n                \u003c/ul\u003e\n              \u003c/li\u003e\n              \u003cli\u003eIGPT_FUNCLET_PROLOG:\n                \u003cul\u003e\n                  \u003cli\u003e添加\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epush rbp\u003c/code\u003e\u003c/li\u003e\n                  \u003cli\u003epush修改过的Callee Saved Register\u003c/li\u003e\n                  \u003cli\u003e添加分配栈空间的指令, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esub rsp, size\u003c/code\u003e\u003c/li\u003e\n                  \u003cli\u003e添加继承PSPSym并恢复主函数rbp的指令, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emov rbp, [rcx+20h]; mov [rsp+20h], rbp; lea rbp,[rbp+40h];\u003c/code\u003e\u003c/li\u003e\n                \u003c/ul\u003e\n              \u003c/li\u003e\n              \u003cli\u003eIGPT_FUNCLET_EPILOG:\n                \u003cul\u003e\n                  \u003cli\u003e添加释放栈空间的指令, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eadd rsp, size\u003c/code\u003e\u003c/li\u003e\n                  \u003cli\u003epop之前prolog里面push过的Callee Saved Register\u003c/li\u003e\n                  \u003cli\u003e添加\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epop rbp\u003c/code\u003e\u003c/li\u003e\n                  \u003cli\u003e添加\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eret\u003c/code\u003e\u003c/li\u003e\n                \u003c/ul\u003e\n              \u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"phase_emit_code\"\u003ePHASE_EMIT_CODE\u003c/h1\u003e\n\n\u003cp\u003e上一个阶段生成了汇编指令, 但这些指令是通过\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einstrDesc\u003c/code\u003e保存在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einsGroup\u003c/code\u003e的数据结构, 并不是可执行的机器代码.\n这个阶段负责根据\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einstrDesc\u003c/code\u003e列表写入实际可执行的机器代码.\u003c/p\u003e\n\n\u003cp\u003e以下是\u003ca href=\"https://303248153.github.io/coreclr-07/\"\u003e上一篇文章\u003c/a\u003e中的图片说明:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171028110210773-1401314447.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e生成的结构如下, 包含函数代码, 函数头和真函数头:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171028110218117-790239182.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e这个阶段的主要处理在\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/emit.cpp#L4384\"\u003eemitEndCodeGen\u003c/a\u003e函数中, 包含以下的处理:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/vm/jitinterface.cpp#L11394\"\u003eCEEJitInfo::allocMem\u003c/a\u003e分配保存可执行机器代码的内存\n    \u003cul\u003e\n      \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/vm/codeman.cpp#L2516\"\u003eEEJitManager::allocCode\u003c/a\u003e\n        \u003cul\u003e\n          \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/vm/codeman.cpp#L2371\"\u003eEEJitManager::allocCodeRaw\u003c/a\u003e\n            \u003cul\u003e\n              \u003cli\u003e获取CodeHeap(chunk)的列表, 如果空间不足则调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/vm/codeman.cpp#L2259\"\u003eEEJitManager::NewCodeHeap\u003c/a\u003e分配一个新的chunk\n                \u003cul\u003e\n                  \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/utilcode/util.cpp#L481\"\u003eClrVirtualAllocExecutable\u003c/a\u003e\u003c/li\u003e\n                \u003c/ul\u003e\n              \u003c/li\u003e\n              \u003cli\u003e如果是动态函数, 这里会分配”函数头+函数代码+真函数头”的大小并返回指向”函数代码”的指针\u003c/li\u003e\n              \u003cli\u003e如果不是动态函数, 这里会分配”函数头+函数代码”的大小并返回函数代码的指针\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e如果不是动态函数, 调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epMD-\u0026gt;GetLoaderAllocator()-\u0026gt;GetLowFrequencyHeap()-\u0026gt;AllocMem\u003c/code\u003e分配真函数头\n            \u003cul\u003e\n              \u003cli\u003e这里分配的区域只有\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePAGE_READWRITE\u003c/code\u003e, 不可被执行\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e设置”函数头”中的指针指向”真函数头”\u003c/li\u003e\n          \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/vm/codeman.cpp#L3822\"\u003eNibbleMapSet\u003c/a\u003e设置\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNibble Map\u003c/code\u003e, 用于定位函数的开始地址\n            \u003cul\u003e\n              \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNibble Map\u003c/code\u003e在函数所在chunk(HeapList)的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epHdrMap\u003c/code\u003e成员中, 是一个DWORD的数组, 一个DWORD包含8个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNibble\u003c/code\u003e格式如下\u003c/li\u003e\n              \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e[ [ NIBBLE(4bit), NIBBLE, ...(8个) ], [ NIBBLE, NIBBLE, ...(8个) ], ... ]\u003c/code\u003e\u003c/li\u003e\n              \u003cli\u003e例如函数的开始地址是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0x7fff7ce80078\u003c/code\u003e, 所在chunk(HeapList)的基础地址是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0x7fff7ce80000\u003c/code\u003e, 则偏移值是120\u003c/li\u003e\n              \u003cli\u003eNibble的值是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e((120 % 32) / 4) + 1 = 7\u003c/code\u003e\u003c/li\u003e\n              \u003cli\u003eNibble存放在第\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e120 / 32 / 8 = 0\u003c/code\u003e个DWORD中的第\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e120 / 32 = 3\u003c/code\u003e个Nibble\u003c/li\u003e\n              \u003cli\u003e也就是DWORD的值会\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026amp;= 0xfff0ffff\u003c/code\u003e然后\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e|= 0x00070000\u003c/code\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNibble Map\u003c/code\u003e会可以根据当前PC查找函数的开始地址和对应的函数头, 对于调试和GC都是必要的信息\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e枚举IG(insGroup)列表\n    \u003cul\u003e\n      \u003cli\u003e记录IG开始时有哪些GC引用(对象或者struct的指针)在栈和寄存器上, 添加到gcInfo的列表中\u003c/li\u003e\n      \u003cli\u003e枚举IG中的指令(instrDesc)\n        \u003cul\u003e\n          \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/emit.cpp#L3389\"\u003eemitIssue1Instr\u003c/a\u003e编码指令\n            \u003cul\u003e\n              \u003cli\u003e调用\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/jit/emitxarch.cpp#L10430\"\u003eemitOutputInstr\u003c/a\u003e(x86/x64版本)\n                \u003cul\u003e\n                  \u003cli\u003e判断指令的类型并写入指令, 指令的类型有\n                    \u003cul\u003e\n                      \u003cli\u003e无参数的指令, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enop\u003c/code\u003e\u003c/li\u003e\n                      \u003cli\u003e带一个常量的指令, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejge, loop, ret\u003c/code\u003e\u003c/li\u003e\n                      \u003cli\u003e带跳转目标(label)的指令, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejmp\u003c/code\u003e\u003c/li\u003e\n                      \u003cli\u003e带函数或者函数指针的指令, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecall\u003c/code\u003e\u003c/li\u003e\n                      \u003cli\u003e带单个寄存器的指令, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einc, dec\u003c/code\u003e\u003c/li\u003e\n                      \u003cli\u003e带两个寄存器的指令, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emov\u003c/code\u003e\u003c/li\u003e\n                      \u003cli\u003e第一个参数是寄存器, 第二个参数是内存的指令, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emov\u003c/code\u003e\u003c/li\u003e\n                      \u003cli\u003e更多的处理可以参考我的\u003ca href=\"https://gist.github.com/303248153/2ca436a0e44e5da1c711de050fa3c13f#file-gistfile1-txt-L8048\"\u003eJIT笔记\u003c/a\u003e\u003c/li\u003e\n                    \u003c/ul\u003e\n                  \u003c/li\u003e\n                \u003c/ul\u003e\n              \u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e写入指令的同时会更新gcInfo的列表\n            \u003cul\u003e\n              \u003cli\u003e例如从函数地址+x开始寄存器rax中包含GC引用, 从函数地址+x1开始寄存器rax不包含GC引用等\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e这个阶段完成了对函数中机器代码的写入, 接下来就是最后一个阶段.\u003c/p\u003e\n\n\u003ch1 id=\"phase_emit_gceh\"\u003ePHASE_EMIT_GCEH\u003c/h1\u003e\n\n\u003cp\u003e这个阶段负责写入函数相关的信息, 也就是上面”真函数头”中的信息.\n“真函数头”的类型是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e_hpRealCodeHdr\u003c/code\u003e, 包含以下的信息:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ephdrDebugInfo: PC到IL offset的索引\u003c/li\u003e\n  \u003cli\u003ephdrJitEHInfo: EH Clause的数组\u003c/li\u003e\n  \u003cli\u003ephdrJitGCInfo: GC扫描栈和寄存器使用的信息\u003c/li\u003e\n  \u003cli\u003ephdrMDesc: 函数的MethodDesc\u003c/li\u003e\n  \u003cli\u003enUnwindInfos: unwindInfos的数量\u003c/li\u003e\n  \u003cli\u003eunindInfos: unwind信息(栈回滚信息)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"debuginfo\"\u003eDebugInfo\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ephdrDebugInfo\u003c/code\u003e是一个DWORD的数组, 格式是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNibble Stream\u003c/code\u003e, 以4 bit为单位保存数字.\n例如 0xa9 0xa0 0x03 代表 80, 19 两个数字:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e0xa9 = 0b1010\u0026#39;1001 (最高位的1代表还需要继续读取下一个nibble)\n0xa0 = 0b1010\u0026#39;0000 (最高位的0表示当前数字已结束)\n0x03 = 0b0000\u0026#39;0011\n001 010 000 =\u0026gt; 80\n010 011 =\u0026gt; 19\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e数字列表的结构是:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eheader, 包含两个数字, 第一个是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoffset mapping\u003c/code\u003e编码后的长度(bytes), 第二个是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enative vars\u003c/code\u003e编码后的长度(bytes)\u003c/li\u003e\n  \u003cli\u003eoffset mapping\n    \u003cul\u003e\n      \u003cli\u003eoffset mapping 的数量\u003c/li\u003e\n      \u003cli\u003enative offset, 写入与前一条记录的偏移值\u003c/li\u003e\n      \u003cli\u003eil offset\u003c/li\u003e\n      \u003cli\u003esource 标记(flags), 有\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSOURCE_TYPE_INVALID, SEQUENCE_POINT, STACK_EMPTY\u003c/code\u003e等\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003enative vars (内部变量所在的scope的信息)\n    \u003cul\u003e\n      \u003cli\u003enative vars 的数量\u003c/li\u003e\n      \u003cli\u003estartOffset scope的开始偏移值\u003c/li\u003e\n      \u003cli\u003eendOffset scope的结束偏移值, 写入距离start的delta\u003c/li\u003e\n      \u003cli\u003evar number 变量的序号\u003c/li\u003e\n      \u003cli\u003evar type (reg还是stack)\u003c/li\u003e\n      \u003cli\u003e后面的信息根据var type而定, 具体参考\u003ca href=\"https://github.com/dotnet/coreclr/blob/v1.1.0/src/vm/debuginfostore.cpp#L270\"\u003eDoNativeVarInfo\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIDE可以根据DebugInfo知道下断点的时候应该把断点设在哪个内存地址, 步过的时候应该在哪个内存地址停下来等.\u003c/p\u003e\n\n\u003ch3 id=\"ehinfo\"\u003eEHInfo\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ephdrJitEHInfo\u003c/code\u003e是指向\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCorILMethod_Sect_FatFormat\u003c/code\u003e结构体的指针, 包含了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEH Clause\u003c/code\u003e的数量和\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEE_ILEXCEPTION_CLAUSE\u003c/code\u003e的数组.\u003c/p\u003e\n\n\u003cp\u003e使用以下的C#代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-csharp highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003eGetString\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eConsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eWriteLine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nf\"\u003eException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;abc\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eConsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eWriteLine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eConsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eWriteLine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以生成以下的汇编代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eIN0016: 000000 push     rbp\nIN0017: 000001 push     rbx\nIN0018: 000002 sub      rsp, 24\nIN0019: 000006 lea      rbp, [rsp+20H]\nIN001a: 00000B mov      qword ptr [V06 rbp-20H], rsp\nG_M21556_IG02:        ; offs=00000FH, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref\nIN0001: 00000F call     ConsoleApplication.Program:GetString():ref\nIN0002: 000014 mov      gword ptr [V01 rbp-10H], rax\nG_M21556_IG03:        ; offs=000018H, size=0043H, gcVars=0000000000000001 {V01}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref\nIN0003: 000018 mov      rdi, gword ptr [V01 rbp-10H]\nIN0004: 00001C call     System.Console:WriteLine(ref)\nIN0005: 000021 mov      rdi, 0x7F78892D3CE8\nIN0006: 00002B call     CORINFO_HELP_NEWSFAST\nIN0007: 000030 mov      rbx, rax\nIN0008: 000033 mov      edi, 1\nIN0009: 000038 mov      rsi, 0x7F78881BCE70\nIN000a: 000042 call     CORINFO_HELP_STRCNS\nIN000b: 000047 mov      rsi, rax\nIN000c: 00004A mov      rdi, rbx\nIN000d: 00004D call     System.Exception:.ctor(ref):this\nIN000e: 000052 mov      rdi, rbx\nIN000f: 000055 call     CORINFO_HELP_THROW\nIN0010: 00005A int3     \nG_M21556_IG04:        ; offs=00005BH, size=0007H, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref, epilog, nogc\nIN001b: 00005B lea      rsp, [rbp-08H]\nIN001c: 00005F pop      rbx\nIN001d: 000060 pop      rbp\nIN001e: 000061 ret      \nG_M21556_IG05:        ; func=01, offs=000062H, size=000EH, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, funclet prolog, nogc\nIN001f: 000062 push     rbp\nIN0020: 000063 push     rbx\nIN0021: 000064 push     rax\nIN0022: 000065 mov      rbp, qword ptr [rdi]\nIN0023: 000068 mov      qword ptr [rsp], rbp\nIN0024: 00006C lea      rbp, [rbp+20H]\nG_M21556_IG06:        ; offs=000070H, size=0018H, gcVars=0000000000000001 {V01}, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, gcvars, byref, isz\nIN0011: 000070 mov      rdi, rsi\nIN0012: 000073 call     System.Console:WriteLine(ref)\nIN0013: 000078 mov      rdi, gword ptr [V01 rbp-10H]\nIN0014: 00007C call     System.Console:WriteLine(ref)\nIN0015: 000081 lea      rax, G_M21556_IG04\nG_M21556_IG07:        ; offs=000088H, size=0007H, funclet epilog, nogc, emitadd\nIN0025: 000088 add      rsp, 8\nIN0026: 00008C pop      rbx\nIN0027: 00008D pop      rbp\nIN0028: 00008E ret\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e用lldb来分析这个函数的EHInfo可以得到:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e(lldb) p *codePtr\n(void *) $1 = 0x00007fff7ceef920\n(lldb) p *(CodeHeader*)(0x00007fff7ceef920-8)\n(CodeHeader) $2 = {\n  pRealCodeHeader = 0x00007fff7cf35c78\n}\n(lldb) p *(_hpRealCodeHdr*)(0x00007fff7cf35c78)\n(_hpRealCodeHdr) $3 = {\n  phdrDebugInfo = 0x0000000000000000\n  phdrJitEHInfo = 0x00007fff7cf35ce0\n  phdrJitGCInfo = 0x0000000000000000\n  phdrMDesc = 0x00007fff7baf9200\n  nUnwindInfos = 2\n  unwindInfos = {}\n}\n(lldb) me re -s8 -c20 -fx 0x00007fff7cf35ce0-8\n0x7fff7cf35cd8: 0x0000000000000001 0x0000000000002040\n0x7fff7cf35ce8: 0x0000001800000000 0x000000620000005b\n0x7fff7cf35cf8: 0x000000000000008f 0x000000000100000e\n0x7fff7cf35d08: 0x0000000000000030 0x0000000000000001\n0x7fff7cf35d18: 0x00007ffff628f550 0x0000000000000b4a\n0x7fff7cf35d28: 0x0000000000000000 0x0000000000000000\n0x7fff7cf35d38: 0x0000000000000000 0x0000000000000000\n0x7fff7cf35d48: 0x0000000000000000 0x0000000000000000\n0x7fff7cf35d58: 0x0000000000000000 0x0000000000000000\n0x7fff7cf35d68: 0x0000000000000000 0x0000000000000000\n\n0x0000000000000001:\nphdrJitEHInfo - sizeof(size_t) is num clauses, here is 1\n\n0x0000000000002040:\nmemeber from base class IMAGE_COR_ILMETHOD_SECT_FAT\nKind = 0x40 = CorILMethod_Sect_FatFormat\nDataSize = 0x20 = 32 = 1 * sizeof(EE_ILEXCEPTION_CLAUSE)\n\n(lldb) p ((EE_ILEXCEPTION_CLAUSE*)(0x00007fff7cf35ce0+8))[0]\n(EE_ILEXCEPTION_CLAUSE) $29 = {\n  Flags = COR_ILEXCEPTION_CLAUSE_NONE\n  TryStartPC = 24\n  TryEndPC = 91\n  HandlerStartPC = 98\n  HandlerEndPC = 143\n   = (TypeHandle = 0x000000000100000e, ClassToken = 16777230, FilterOffset = 16777230)\n}\n\n(lldb) sos Token2EE * 0x000000000100000e\nModule:      00007fff7bc04000\nAssembly:    System.Private.CoreLib.ni.dll\n\u0026lt;invalid module token\u0026gt;\n--------------------------------------\nModule:      00007fff7baf6e70\nAssembly:    coreapp_jit.dll\nToken:       000000000100000E\nMethodTable: 00007fff7cc0dce8\nEEClass:     00007fff7bcb9400\nName:         mdToken: 0100000e (/home/ubuntu/git/coreapp_jitnew/bin/Release/netcoreapp1.1/ubuntu.16.04-x64/publish/coreapp_jit.dll)\n\n(lldb) dumpmt 00007fff7cc0dce8\nEEClass:         00007FFF7BCB9400\nModule:          00007FFF7BC04000\nName:            System.Exception\nmdToken:         0000000002000249\nFile:            /home/ubuntu/git/coreapp_jitnew/bin/Release/netcoreapp1.1/ubuntu.16.04-x64/publish/System.Private.CoreLib.ni.dll\nBaseSize:        0x98\nComponentSize:   0x0\nSlots in VTable: 51\nNumber of IFaces in IFaceMap: 2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEE_ILEXCEPTION_CLAUSE\u003c/code\u003e包含了try开始和结束的PC地址, handler开始和结束的PC地址, 和指向捕捉例外类型(或者filter函数)的指针.\nCLR可以根据EHInfo知道例外抛出时应该调用哪个catch和finally.\u003c/p\u003e\n\n\u003ch3 id=\"gcinfo\"\u003eGCInfo\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ephdrJitGCInfo\u003c/code\u003e是一个bit数组, 它的编码非常复杂, 这里我给出一个实际解析GCInfo的例子.\u003c/p\u003e\n\n\u003cp\u003eC#代码和汇编代码和上面的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEHInfo\u003c/code\u003e一样, 使用LLDB分析可以得到:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e(lldb) p *codePtr\n(void *) $1 = 0x00007fff7cee3920\n(lldb) p *(CodeHeader*)(0x00007fff7cee3920-8)\n(CodeHeader) $2 = {\n  pRealCodeHeader = 0x00007fff7cf29c78\n}\n(lldb) p *(_hpRealCodeHdr*)(0x00007fff7cf29c78)\n(_hpRealCodeHdr) $3 = {\n  phdrDebugInfo = 0x0000000000000000\n  phdrJitEHInfo = 0x00007fff7cf29ce0\n  phdrJitGCInfo = 0x00007fff7cf29d28 \u0026#34;\\x91\\x81G\u0026#34;\n  phdrMDesc = 0x00007fff7baed200\n  nUnwindInfos = 2\n  unwindInfos = {}\n}\n(lldb) me re -s8 -c20 -fx 0x00007fff7cf29d28\n0x7fff7cf29d28: 0x1963d80000478191 0x171f412003325ca8\n0x7fff7cf29d38: 0xee92864c5ffe0280 0x1c5c1c1f09bea536\n0x7fff7cf29d48: 0xed8a93e5c6872932 0x00000000000000c4\n0x7fff7cf29d58: 0x000000000000002a 0x0000000000000001\n0x7fff7cf29d68: 0x00007ffff628f550 0x0000000000000b2e\n0x7fff7cf29d78: 0x0000000000000000 0x0000000000000000\n0x7fff7cf29d88: 0x0000000000000000 0x0000000000000000\n0x7fff7cf29d98: 0x0000000000000000 0x0000000000000000\n0x7fff7cf29da8: 0x0000000000000000 0x0000000000000000\n0x7fff7cf29db8: 0x0000000000000000 0x0000000000000000\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e对bit数组的解析如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e10001001\n1: use fat encoding\n0: no var arg\n0: no security object\n0: no gc cookie\n1: have pspsym stack slot\n0 0: no generic context parameter\n1: have stack base register\n\n1000000\n1: wants report only leaf\n0: no edit and continue preserved area\n0: no reverse pinvoke frame\n0 0 0 0: return kind is RT_Scalar\n\n1\u0026#39;11100010\n0 10001111: code length is 143\n\n0000000\n0 000000: pspsym stack slot is 0\n\n0\u0026#39;0000000\n0 000: stack base register is rbp (rbp is 5, normalize function will ^5 so it\u0026#39;s 0)\n0 000: size of stack outgoing and scratch area is 0\n\n0\u0026#39;000110\n0 00: 0 call sites\n1 0 0 1: 2 interruptible ranges\n\n11\u0026#39;11000\n0 001111: interruptible range 1 begins from 15\n\n110\u0026#39;10011000\u0026#39;000\n1 001011 0 000001: interruptible range 1 finished at 91 (15 + 75 + 1)\n\n10101\u0026#39;00\n0 010101: interruptible range 2 begins from 112 (91 + 21)\n\n111010\u0026#39;01001100\n0 010111: interruptible range 2 finished at 136 (112 + 23 + 1)\n1: have register slots\n1 00 0 01: 4 register slots\n\n110000\n1: have stack slots\n0 01: 1 tracked stack slots\n0 0: 0 untracked stack slots\n\n00\u0026#39;0000010\n0 000: register slot 1 is rax(0)\n00: register slot 1 flag is GC_SLOT_IS_REGISTER(8 \u0026amp; 0b11 = 0)\n0 10: register slot 2 is rbx(3) (0 + 2 + 1)\n\n0\u0026#39;10000\n0 10: register slot 3 is rsi(6) (3 + 2 + 1)\n0 00: register slot 4 is rdi(7) (6 + 0 + 1)\n\n010\u0026#39;11111000\n01: stack slot 1 base on GC_FRAMEREG_REL(2)\n0 111110: stack slot 1 offset is -16 (-16 / 8 = -2)\n00: stack slot 1 flag is GC_SLOT_BASE(0)\n\n111 01000\n111: num bits per pointer is 7\n\n00000001\n0 0000001: chunk 0\u0026#39;s bit offset is 0 (1-1)\n\n01000000: chunk 1\u0026#39;s bit offset is 63 (64-1)\n\n011111\n011111: chunk 0 could be live slot list, simple format, all could live\n\n11\u0026#39;111\n11111: chunk 0 final state, all slot lives\n\n1 1010\u0026#39;00\n1 000101: transition of register slot 1(rax) at 0x14 (20 = 15 + 5), becomes live\n\n110010\u0026#39;01100001\n1 001001: transition of register slot 1(rax) at 0x18 (24 = 15 + 9), becomes dead\n1 100001: transition of register slot 1(rax) at 0x30 (48 = 15 + 33), becomes live\n\n01001001\n0: terminator, no more transition of register slot 1(rax) in this chunk\n1 100100: transition of register slot 2(rbx) at 0x33 (51 = 15 + 36), becomes live\n\n01110111\n0: terminator, no more transition of register slot 2(rbx) in this chunk\n1 111110: transition of register slot 3(rsi) at 0x4d (77 = 15 + 62), becomes live\n\n01101100\n0: terminator, no more transition of register slot 3(rsi) in this chunk\n1 001101: transition of register slot 4(rdi) at 0x1c (28 = 15 + 13), becomes live\n\n1010010\n1 010010: transition of register slot 4(rdi) at 0x21 (33 = 15 + 18), becomes dead\n\n1\u0026#39;0111110\n1 111110: transition of register slot 4(rdi) at 0x4d (77 = 15 + 62), becomes live\n0: terminator, no more transition of register slot 4(rdi) in this chunk\n\n1\u0026#39;1001000\n1 001001: transition of stack slot 1(rbp-16) at 0x18 (24 = 15 + 9), becomes live\n0: terminator, no more transition of stack slot 1(rbp-16) in this chunk\n\n0\u0026#39;11111\n0 11111: chunk 1 could be live slot list, simple format, all could live\n\n000\u0026#39;00\n00000: chunk 1 final state, all slot dead\n\n111000\u0026#39;00\n1 000011: transition of register slot 1(rax) at 0x52 (15 + 64 + 3), becomes dead\n0: terminator, no more transition of register slot 1(rax) in this chunk\n\n111010\u0026#39;00\n1: 001011: transition of register slot 2(rbx) at 0x5a (15 + 64 + 11), becomes dead\n0: terminator, no more transition of register slot 2(rbx) in this chunk\n\n111000\u0026#39;01001100\n1 000011: transition of register slot 3(rsi) at 0x52 (15 + 64 + 3), becomes dead\n1 001100: transition of register slot 3(rsi) at 0x70 (0x70 + (64+12 - (0x5b-0xf))), becomes live\n\n10010100\n1 010100: transition of register slot 3(rsi) at 0x78 (0x70 + (64+20 - (0x5b-0xf))), becomes dead\n0: terminator, no more transition of register slot 3(rsi) in this chunk\n\n1110000\n1: 000011: transition of register slot 4(rdi) at 0x52 (15 + 64 + 3), becomes dead\n\n1\u0026#39;011000\n1 000110: transition of register slot 4(rdi) at 0x55 (15 + 64 + 6), becomes live\n\n11\u0026#39;10100\n1 001011: transition of register slot 4(rdi) at 0x5a (15 + 64 + 11), becomes dead\n\n111\u0026#39;1100\n1: 001111: transition of register slot 4(rdi) at 0x73 (0x70 + (64+15 - (0x5b-0xf))), becomes live\n\n1001\u0026#39;010\n1 010100: transition of register slot 4(rdi) at 0x78 (0x70 + (64+20 - (0x5b-0xf))), becomes dead\n\n10001\u0026#39;10\n1 011000: transition of register slot 4(rdi) at 0x7c (0x70 + (64+24 - (0x5b-0xf))), becomes live\n\n110111\u0026#39;00\n1 011101: transition of register slot 4(rdi) at 0x81 (0x70 + (64+29 - (0x5b-0xf))), becomes dead\n0: terminator, no more transition of register slot 4(rdi) in this chunk\n\n100011\u0026#39;00\n1 011000: transition of stack slot 1(rbp-16) at 0x7c (0x70 + (64+24 - (0x5b-0xf))), becomes dead\n0: terminator, no more transition of stack slot 1(rbp-16) in this chunk\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eCLR在执行GC的时候, 会停止线程并得到当前停止的PC地址,\n然后根据PC地址和\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNibble Map\u003c/code\u003e获取到函数头,\n再根据函数头中的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGCInfo\u003c/code\u003e就可以获取到当前执行函数中有哪些栈地址和寄存器包含了\u003cstrong\u003e根对象\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e因为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGCInfo\u003c/code\u003e记录了函数运行过程(可中断的部分)中的所有GC引用的位置和生命周期,\nCoreCLR中需要使用这样复杂的编码来减少它的大小.\u003c/p\u003e\n\n\u003ch1 id=\"unwindinfo\"\u003eUnwindInfo\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eunwindInfos\u003c/code\u003e是一个长度为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enUnwindInfos\u003c/code\u003e的数组, 类型是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eRUNTIME_FUNCTION\u003c/code\u003e.\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enUnwindInfos\u003c/code\u003e的值等于主函数 + 小函数(funclet)的数量.\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eRUNTIME_FUNCTION\u003c/code\u003e中又保存了指向\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eUNWIND_INFO\u003c/code\u003e的偏移值, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eUNWIND_INFO\u003c/code\u003e保存了函数对栈指针的操作.\u003c/p\u003e\n\n\u003cp\u003e这里我也给出一个实际分析的例子, 使用以下的C#代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-csharp highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003eGetString\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eConsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eWriteLine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nf\"\u003eException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;abc\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eConsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eWriteLine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eConsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eWriteLine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003efinally\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eConsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eWriteLine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;finally\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以生成以下的汇编代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eG_M21556_IG01:        ; func=00, offs=000000H, size=000FH, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref, nogc \u0026lt;-- Prolog IG\n\nIN001e: 000000 push     rbp\nIN001f: 000001 push     rbx\nIN0020: 000002 sub      rsp, 24\nIN0021: 000006 lea      rbp, [rsp+20H]\nIN0022: 00000B mov      qword ptr [V06 rbp-20H], rsp\n\nG_M21556_IG02:        ; offs=00000FH, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref\n\nIN0001: 00000F call     ConsoleApplication.Program:GetString():ref\nIN0002: 000014 mov      gword ptr [V01 rbp-10H], rax\n\nG_M21556_IG03:        ; offs=000018H, size=0043H, gcVars=0000000000000001 {V01}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref\n\nIN0003: 000018 mov      rdi, gword ptr [V01 rbp-10H]\nIN0004: 00001C call     System.Console:WriteLine(ref)\nIN0005: 000021 mov      rdi, 0x7F94DDF9CCE8\nIN0006: 00002B call     CORINFO_HELP_NEWSFAST\nIN0007: 000030 mov      rbx, rax\nIN0008: 000033 mov      edi, 1\nIN0009: 000038 mov      rsi, 0x7F94DCE85E70\nIN000a: 000042 call     CORINFO_HELP_STRCNS\nIN000b: 000047 mov      rsi, rax\nIN000c: 00004A mov      rdi, rbx\nIN000d: 00004D call     System.Exception:.ctor(ref):this\nIN000e: 000052 mov      rdi, rbx\nIN000f: 000055 call     CORINFO_HELP_THROW\nIN0010: 00005A int3     \n\nG_M21556_IG04:        ; offs=00005BH, size=0001H, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref\n\nIN0011: 00005B nop      \n\nG_M21556_IG05:        ; offs=00005CH, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref\n\nIN0012: 00005C mov      rdi, rsp\nIN0013: 00005F call     G_M21556_IG11\n\nG_M21556_IG06:        ; offs=000064H, size=0001H, nogc, emitadd\n\nIN0014: 000064 nop      \n\nG_M21556_IG07:        ; offs=000065H, size=0007H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, epilog, nogc\n\nIN0023: 000065 lea      rsp, [rbp-08H]\nIN0024: 000069 pop      rbx\nIN0025: 00006A pop      rbp\nIN0026: 00006B ret      \n\nG_M21556_IG08:        ; func=01, offs=00006CH, size=000EH, gcVars=0000000000000001 {V01}, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, gcvars, byref, funclet prolog, nogc\n\nIN0027: 00006C push     rbp\nIN0028: 00006D push     rbx\nIN0029: 00006E push     rax\nIN002a: 00006F mov      rbp, qword ptr [rdi]\nIN002b: 000072 mov      qword ptr [rsp], rbp\nIN002c: 000076 lea      rbp, [rbp+20H]\n\nG_M21556_IG09:        ; offs=00007AH, size=0018H, gcVars=0000000000000001 {V01}, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, gcvars, byref, isz\n\nIN0015: 00007A mov      rdi, rsi\nIN0016: 00007D call     System.Console:WriteLine(ref)\nIN0017: 000082 mov      rdi, gword ptr [V01 rbp-10H]\nIN0018: 000086 call     System.Console:WriteLine(ref)\nIN0019: 00008B lea      rax, G_M21556_IG04\n\nG_M21556_IG10:        ; offs=000092H, size=0007H, funclet epilog, nogc, emitadd\n\nIN002d: 000092 add      rsp, 8\nIN002e: 000096 pop      rbx\nIN002f: 000097 pop      rbp\nIN0030: 000098 ret      \n\nG_M21556_IG11:        ; func=02, offs=000099H, size=000EH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, funclet prolog, nogc\n\nIN0031: 000099 push     rbp\nIN0032: 00009A push     rbx\nIN0033: 00009B push     rax\nIN0034: 00009C mov      rbp, qword ptr [rdi]\nIN0035: 00009F mov      qword ptr [rsp], rbp\nIN0036: 0000A3 lea      rbp, [rbp+20H]\n\nG_M21556_IG12:        ; offs=0000A7H, size=0013H, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref\n\nIN001a: 0000A7 mov      rdi, 0x7F94C8001068\nIN001b: 0000B1 mov      rdi, gword ptr [rdi]\nIN001c: 0000B4 call     System.Console:WriteLine(ref)\nIN001d: 0000B9 nop      \n\nG_M21556_IG13:        ; offs=0000BAH, size=0007H, funclet epilog, nogc, emitadd\n\nIN0037: 0000BA add      rsp, 8\nIN0038: 0000BE pop      rbx\nIN0039: 0000BF pop      rbp\nIN003a: 0000C0 ret\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e使用LLDB分析可以得到:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e(lldb) p *codePtr\n(void *) $0 = 0x00007fff7ceee920\n(lldb) p *(CodeHeader*)(0x00007fff7ceee920-8)\n(CodeHeader) $1 = {\n  pRealCodeHeader = 0x00007fff7cf34c78\n}\n(lldb) p *(_hpRealCodeHdr*)(0x00007fff7cf34c78)\n(_hpRealCodeHdr) $2 = {\n  phdrDebugInfo = 0x0000000000000000\n  phdrJitEHInfo = 0x0000000000000000\n  phdrJitGCInfo = 0x0000000000000000\n  phdrMDesc = 0x00007fff7baf8200\n  nUnwindInfos = 3\n  unwindInfos = {}\n}\n(lldb) p ((_hpRealCodeHdr*)(0x00007fff7cf34c78))-\u0026gt;unwindInfos[0]\n(RUNTIME_FUNCTION) $3 = (BeginAddress = 2304, EndAddress = 2412, UnwindData = 2500)\n(lldb) p ((_hpRealCodeHdr*)(0x00007fff7cf34c78))-\u0026gt;unwindInfos[1]\n(RUNTIME_FUNCTION) $4 = (BeginAddress = 2412, EndAddress = 2457, UnwindData = 2516)\n(lldb) p ((_hpRealCodeHdr*)(0x00007fff7cf34c78))-\u0026gt;unwindInfos[2]\n(RUNTIME_FUNCTION) $5 = (BeginAddress = 2457, EndAddress = 2497, UnwindData = 2532)\n\nfirst unwind info:\n(lldb) p (void*)(((CEEJitInfo*)compiler-\u0026gt;info.compCompHnd)-\u0026gt;m_moduleBase + 2304) \n(void *) $13 = 0x00007fff7ceee920\n(lldb) p (void*)(((CEEJitInfo*)compiler-\u0026gt;info.compCompHnd)-\u0026gt;m_moduleBase + 2412) \n(void *) $14 = 0x00007fff7ceee98c\n# range is [0, 0x6c)\n(lldb) p *(UNWIND_INFO*)(((CEEJitInfo*)compiler-\u0026gt;info.compCompHnd)-\u0026gt;m_moduleBase + 2500)\n(UNWIND_INFO) $16 = {\n  Version = \u0026#39;\\x01\u0026#39;\n  Flags = \u0026#39;\\x03\u0026#39;\n  SizeOfProlog = \u0026#39;\\x06\u0026#39;\n  CountOfUnwindCodes = \u0026#39;\\x03\u0026#39;\n  FrameRegister = \u0026#39;\\0\u0026#39;\n  FrameOffset = \u0026#39;\\0\u0026#39;\n  UnwindCode = {\n    [0] = {\n       = (CodeOffset = \u0026#39;\\x06\u0026#39;, UnwindOp = \u0026#39;\\x02\u0026#39;, OpInfo = \u0026#39;\\x02\u0026#39;)\n      EpilogueCode = (OffsetLow = \u0026#39;\\x06\u0026#39;, UnwindOp = \u0026#39;\\x02\u0026#39;, OffsetHigh = \u0026#39;\\x02\u0026#39;)\n      FrameOffset = 8710\n    }\n  }\n}\n(lldb) p ((UNWIND_INFO*)(((CEEJitInfo*)compiler-\u0026gt;info.compCompHnd)-\u0026gt;m_moduleBase + 2500))-\u0026gt;UnwindCode[0]\n(UNWIND_CODE) $17 = {\n   = (CodeOffset = \u0026#39;\\x06\u0026#39;, UnwindOp = \u0026#39;\\x02\u0026#39;, OpInfo = \u0026#39;\\x02\u0026#39;)\n  EpilogueCode = (OffsetLow = \u0026#39;\\x06\u0026#39;, UnwindOp = \u0026#39;\\x02\u0026#39;, OffsetHigh = \u0026#39;\\x02\u0026#39;)\n  FrameOffset = 8710\n}\n(lldb) p ((UNWIND_INFO*)(((CEEJitInfo*)compiler-\u0026gt;info.compCompHnd)-\u0026gt;m_moduleBase + 2500))-\u0026gt;UnwindCode[1]\n(UNWIND_CODE) $18 = {\n   = (CodeOffset = \u0026#39;\\x02\u0026#39;, UnwindOp = \u0026#39;\\0\u0026#39;, OpInfo = \u0026#39;\\x03\u0026#39;)\n  EpilogueCode = (OffsetLow = \u0026#39;\\x02\u0026#39;, UnwindOp = \u0026#39;\\0\u0026#39;, OffsetHigh = \u0026#39;\\x03\u0026#39;)\n  FrameOffset = 12290\n}\n(lldb) p ((UNWIND_INFO*)(((CEEJitInfo*)compiler-\u0026gt;info.compCompHnd)-\u0026gt;m_moduleBase + 2500))-\u0026gt;UnwindCode[2]\n(UNWIND_CODE) $19 = {\n   = (CodeOffset = \u0026#39;\\x01\u0026#39;, UnwindOp = \u0026#39;\\0\u0026#39;, OpInfo = \u0026#39;\\x05\u0026#39;)\n  EpilogueCode = (OffsetLow = \u0026#39;\\x01\u0026#39;, UnwindOp = \u0026#39;\\0\u0026#39;, OffsetHigh = \u0026#39;\\x05\u0026#39;)\n  FrameOffset = 20481\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e上面的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eUNWIND_CODE\u003c/code\u003e可能有点难懂, 可以结合\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCOMPlus_JitDump\u003c/code\u003e输出的信息分析:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eUnwind Info:\n  \u0026gt;\u0026gt; Start offset   : 0x000000 (not in unwind data)\n  \u0026gt;\u0026gt;   End offset   : 0x00006c (not in unwind data)\n  Version           : 1\n  Flags             : 0x00\n  SizeOfProlog      : 0x06\n  CountOfUnwindCodes: 3\n  FrameRegister     : none (0)\n  FrameOffset       : N/A (no FrameRegister) (Value=0)\n  UnwindCodes       :\n    CodeOffset: 0x06 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 2 * 8 + 8 = 24 = 0x18\n    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)\n    CodeOffset: 0x01 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)\nallocUnwindInfo(pHotCode=0x00007F94DE27E920, pColdCode=0x0000000000000000, startOffset=0x0, endOffset=0x6c, unwindSize=0xa, pUnwindBlock=0x0000000002029516, funKind=0 (main function))\nUnwind Info:\n  \u0026gt;\u0026gt; Start offset   : 0x00006c (not in unwind data)\n  \u0026gt;\u0026gt;   End offset   : 0x000099 (not in unwind data)\n  Version           : 1\n  Flags             : 0x00\n  SizeOfProlog      : 0x03\n  CountOfUnwindCodes: 3\n  FrameRegister     : none (0)\n  FrameOffset       : N/A (no FrameRegister) (Value=0)\n  UnwindCodes       :\n    CodeOffset: 0x03 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 0 * 8 + 8 = 8 = 0x08\n    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)\n    CodeOffset: 0x01 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)\nallocUnwindInfo(pHotCode=0x00007F94DE27E920, pColdCode=0x0000000000000000, startOffset=0x6c, endOffset=0x99, unwindSize=0xa, pUnwindBlock=0x0000000002029756, funKind=1 (handler))\nUnwind Info:\n  \u0026gt;\u0026gt; Start offset   : 0x000099 (not in unwind data)\n  \u0026gt;\u0026gt;   End offset   : 0x0000c1 (not in unwind data)\n  Version           : 1\n  Flags             : 0x00\n  SizeOfProlog      : 0x03\n  CountOfUnwindCodes: 3\n  FrameRegister     : none (0)\n  FrameOffset       : N/A (no FrameRegister) (Value=0)\n  UnwindCodes       :\n    CodeOffset: 0x03 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 0 * 8 + 8 = 8 = 0x08\n    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)\n    CodeOffset: 0x01 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e以第一个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eRUNTIME_FUNCTION\u003c/code\u003e(主函数)为例, 它包含了3个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eUnwindCode\u003c/code\u003e, 分别记录了\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003epush rbp\npush rbx\nsub rsp, 24\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eCLR查找调用链的时候, 例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eA =\u0026gt; B =\u0026gt; C\u003c/code\u003e需要知道\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eC\u003c/code\u003e的调用者,\n可以\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e根据当前PC获取当前Frame的顶部 =\u0026gt; 获取Return Address =\u0026gt; 根据Return Address获取上一个Frame的顶部 =\u0026gt; 循环\u003c/code\u003e得到所有调用者.\n这个流程也叫Stack Walking(或Stack Crawling).\u003c/p\u003e\n\n\u003cp\u003eGC查找根对象时也需要根据Unwind信息查找调用链中的所有函数.\u003c/p\u003e\n\n\u003ch1 id=\"参考链接\"\u003e参考链接\u003c/h1\u003e\n\n\u003cp\u003ehttps://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-tutorial.md\nhttps://github.com/dotnet/coreclr/blob/release/1.1.0/Documentation/botr/ryujit-overview.md\nhttps://github.com/dotnet/coreclr/blob/release/1.1.0/Documentation/botr/porting-ryujit.md\nhttps://github.com/dotnet/coreclr/blob/release/1.1.0/Documentation/building/viewing-jit-dumps.md\nhttps://github.com/dotnet/coreclr/blob/release/1.1.0/Documentation/project-docs/clr-configuration-knobs.md\nhttps://github.com/dotnet/coreclr/blob/release/1.1.0/Documentation/building/debugging-instructions.md\nhttps://github.com/dotnet/coreclr/blob/release/1.1.0/Documentation/botr/clr-abi.md\nhttps://github.com/dotnet/coreclr/blob/release/1.1.0/Documentation/design-docs/finally-optimizations.md\nhttps://github.com/dotnet/coreclr/blob/release/1.1.0/Documentation/design-docs/jit-call-morphing.md\nhttps://github.com/dotnet/coreclr/blob/release/1.1.0/Documentation/botr/type-system.md\nhttps://github.com/dotnet/coreclr/blob/release/1.1.0/Documentation/botr/type-loader.md\nhttps://github.com/dotnet/coreclr/blob/release/1.1.0/Documentation/botr/method-descriptor.md\nhttps://github.com/dotnet/coreclr/blob/release/1.1.0/Documentation/botr/virtual-stub-dispatch.md\nhttps://github.com/dotnet/coreclr/blob/release/1.1.0/Documentation/design-docs/jit-call-morphing.md\nhttps://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes(v=vs.110).aspx\nhttps://www.microsoft.com/en-us/research/wp-content/uploads/2001/01/designandimplementationofgenerics.pdf\nhttps://www.cs.rice.edu/~keith/EMBED/dom.pdf\nhttps://www.usenix.org/legacy/events/vee05/full_papers/p132-wimmer.pdf\nhttp://aakinshin.net/ru/blog/dotnet/typehandle/\nhttps://en.wikipedia.org/wiki/List_of_CIL_instructions\nhttp://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.arn0008c/index.html\nhttp://wiki.osdev.org/X86-64_Instruction_Encoding\nhttps://github.com/dotnet/coreclr/issues/12383\nhttps://github.com/dotnet/coreclr/issues/14414\nhttp://ref.x86asm.net/\nhttps://www.onlinedisassembler.com/odaweb/\u003c/p\u003e\n\n\u003ch1 id=\"写在最后\"\u003e写在最后\u003c/h1\u003e\n\n\u003cp\u003e这篇文章对CoreCLR中JIT的整个流程做出了更详细的分析,\n但因为JIT中的代码实在太多, 我无法像分析GC的时候一样把代码全部贴出来, 有很多细节也无法顾及.\n如果你对某个点有疑问, 可以试着参考我的\u003ca href=\"https://gist.github.com/303248153/2ca436a0e44e5da1c711de050fa3c13f\"\u003eJIT笔记\u003c/a\u003e, 也欢迎在文章下面留言你的问题.\u003c/p\u003e\n\n  \u003c/div\u003e\n\n  \u003cdiv class=\"date\"\u003e\n    Written on March 26, 2021\n  \u003c/div\u003e\n\n  \n\u003c/article\u003e",
  "Date": "2021-03-26T00:00:00Z",
  "Author": "老农的博客"
}