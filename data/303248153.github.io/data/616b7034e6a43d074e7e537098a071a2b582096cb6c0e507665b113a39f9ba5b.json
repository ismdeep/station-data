{
  "Source": "303248153.github.io",
  "Title": "Golang源码探索(二) 协程的实现原理",
  "Link": "https://303248153.github.io/go-02/",
  "Content": "\u003carticle class=\"post\"\u003e\n  \u003ch1\u003eGolang源码探索(二) 协程的实现原理\u003c/h1\u003e\n\n  \u003cdiv class=\"entry\"\u003e\n    \u003cp\u003eGolang最大的特色可以说是协程(goroutine)了, 协程让本来很复杂的异步编程变得简单, 让程序员不再需要面对回调地狱,\n虽然现在引入了协程的语言越来越多, 但go中的协程仍然是实现的是最彻底的.\n这篇文章将通过分析golang的源代码来讲解协程的实现原理.\u003c/p\u003e\n\n\u003cp\u003e这个系列分析的golang源代码是Google官方的实现的1.9.2版本, 不适用于其他版本和gccgo等其他实现,\n运行环境是Ubuntu 16.04 LTS 64bit.\u003c/p\u003e\n\n\u003ch1 id=\"核心概念\"\u003e核心概念\u003c/h1\u003e\n\n\u003cp\u003e要理解协程的实现, 首先需要了解go中的三个非常重要的概念, 它们分别是\u003cstrong\u003eG\u003c/strong\u003e, \u003cstrong\u003eM\u003c/strong\u003e和\u003cstrong\u003eP\u003c/strong\u003e,\n没有看过golang源代码的可能会对它们感到陌生, 这三项是协程最主要的组成部分, 它们在golang的源代码中无处不在.\u003c/p\u003e\n\n\u003ch3 id=\"g-goroutine\"\u003eG (goroutine)\u003c/h3\u003e\n\n\u003cp\u003eG是goroutine的头文字, goroutine可以解释为受管理的轻量线程, goroutine使用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ego\u003c/code\u003e关键词创建.\u003c/p\u003e\n\n\u003cp\u003e举例来说, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efunc main() { go other() }\u003c/code\u003e, 这段代码创建了两个goroutine,\n一个是main, 另一个是other, 注意main本身也是一个goroutine.\u003c/p\u003e\n\n\u003cp\u003egoroutine的新建, 休眠, 恢复, 停止都受到go运行时的管理.\ngoroutine执行异步操作时会进入休眠状态, 待操作完成后再恢复, 无需占用系统线程,\ngoroutine新建或恢复时会添加到运行队列, 等待M取出并运行.\u003c/p\u003e\n\n\u003ch3 id=\"m-machine\"\u003eM (machine)\u003c/h3\u003e\n\n\u003cp\u003eM是machine的头文字, 在当前版本的golang中\u003cstrong\u003e等同于系统线程\u003c/strong\u003e.\nM可以运行两种代码:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ego代码, 即goroutine, M运行go代码需要一个P\u003c/li\u003e\n  \u003cli\u003e原生代码, 例如阻塞的syscall, M运行原生代码不需要P\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eM会从运行队列中取出G, 然后运行G, 如果G运行完毕或者进入休眠状态, 则从运行队列中取出下一个G运行, 周而复始.\n有时候G需要调用一些无法避免阻塞的原生代码, 这时M会释放持有的P并进入阻塞状态, 其他M会取得这个P并继续运行队列中的G.\ngo需要保证有足够的M可以运行G, 不让CPU闲着, 也需要保证M的数量不能过多.\u003c/p\u003e\n\n\u003ch3 id=\"p-process\"\u003eP (process)\u003c/h3\u003e\n\n\u003cp\u003eP是process的头文字, 代表M运行G所需要的资源.\n一些讲解协程的文章把P理解为cpu核心, 其实这是错误的.\n虽然P的数量默认等于cpu核心数, 但可以通过环境变量\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGOMAXPROC\u003c/code\u003e修改, 在实际运行时P跟cpu核心并无任何关联.\u003c/p\u003e\n\n\u003cp\u003eP也可以理解为控制go代码的并行度的机制,\n如果P的数量等于1, 代表当前最多只能有一个线程(M)执行go代码,\n如果P的数量等于2, 代表当前最多只能有两个线程(M)执行go代码.\n执行原生代码的线程数量不受P控制.\u003c/p\u003e\n\n\u003cp\u003e因为同一时间只有一个线程(M)可以拥有P, P中的数据都是锁自由(lock free)的, 读写这些数据的效率会非常的高.\u003c/p\u003e\n\n\u003ch1 id=\"数据结构\"\u003e数据结构\u003c/h1\u003e\n\n\u003cp\u003e在讲解协程的工作流程之前, 还需要理解一些内部的数据结构.\u003c/p\u003e\n\n\u003ch3 id=\"g的状态\"\u003eG的状态\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e空闲中(_Gidle): 表示G刚刚新建, 仍未初始化\u003c/li\u003e\n  \u003cli\u003e待运行(_Grunnable): 表示G在运行队列中, 等待M取出并运行\u003c/li\u003e\n  \u003cli\u003e运行中(_Grunning): 表示M正在运行这个G, 这时候M会拥有一个P\u003c/li\u003e\n  \u003cli\u003e系统调用中(_Gsyscall): 表示M正在运行这个G发起的系统调用, 这时候M并不拥有P\u003c/li\u003e\n  \u003cli\u003e等待中(_Gwaiting): 表示G在等待某些条件完成, 这时候G不在运行也不在运行队列中(可能在channel的等待队列中)\u003c/li\u003e\n  \u003cli\u003e已中止(_Gdead): 表示G未被使用, 可能已执行完毕(并在freelist中等待下次复用)\u003c/li\u003e\n  \u003cli\u003e栈复制中(_Gcopystack): 表示G正在获取一个新的栈空间并把原来的内容复制过去(用于防止GC扫描)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"m的状态\"\u003eM的状态\u003c/h3\u003e\n\n\u003cp\u003eM并没有像G和P一样的状态标记, 但可以认为一个M有以下的状态:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e自旋中(spinning): M正在从运行队列获取G, 这时候M会拥有一个P\u003c/li\u003e\n  \u003cli\u003e执行go代码中: M正在执行go代码, 这时候M会拥有一个P\u003c/li\u003e\n  \u003cli\u003e执行原生代码中: M正在执行原生代码或者阻塞的syscall, 这时M并不拥有P\u003c/li\u003e\n  \u003cli\u003e休眠中: M发现无待运行的G时会进入休眠, 并添加到空闲M链表中, 这时M并不拥有P\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e自旋中(spinning)这个状态非常重要, 是否需要唤醒或者创建新的M取决于当前自旋中的M的数量.\u003c/p\u003e\n\n\u003ch3 id=\"p的状态\"\u003eP的状态\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e空闲中(_Pidle): 当M发现无待运行的G时会进入休眠, 这时M拥有的P会变为空闲并加到空闲P链表中\u003c/li\u003e\n  \u003cli\u003e运行中(_Prunning): 当M拥有了一个P后, 这个P的状态就会变为运行中, M运行G会使用这个P中的资源\u003c/li\u003e\n  \u003cli\u003e系统调用中(_Psyscall): 当go调用原生代码, 原生代码又反过来调用go代码时, 使用的P会变为此状态\u003c/li\u003e\n  \u003cli\u003eGC停止中(_Pgcstop): 当gc停止了整个世界(STW)时, P会变为此状态\u003c/li\u003e\n  \u003cli\u003e已中止(_Pdead): 当P的数量在运行时改变, 且数量减少时多余的P会变为此状态\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"本地运行队列\"\u003e本地运行队列\u003c/h3\u003e\n\n\u003cp\u003e在go中有多个运行队列可以保存待运行(_Grunnable)的G, 它们分别是各个P中的本地运行队列和全局运行队列.\n入队待运行的G时会优先加到当前P的本地运行队列, M获取待运行的G时也会优先从拥有的P的本地运行队列获取,\n本地运行队列入队和出队不需要使用线程锁.\u003c/p\u003e\n\n\u003cp\u003e本地运行队列有数量限制, 当数量达到256个时会入队到全局运行队列.\n本地运行队列的数据结构是\u003ca href=\"https://en.wikipedia.org/wiki/Circular_buffer\"\u003e环形队列\u003c/a\u003e, 由一个256长度的数组和两个序号(head, tail)组成.\u003c/p\u003e\n\n\u003cp\u003e当M从P的本地运行队列获取G时, 如果发现本地队列为空会尝试从其他P盗取一半的G过来,\n这个机制叫做\u003ca href=\"http://supertech.csail.mit.edu/papers/steal.pdf\"\u003eWork Stealing\u003c/a\u003e, 详见后面的代码分析.\u003c/p\u003e\n\n\u003ch3 id=\"全局运行队列\"\u003e全局运行队列\u003c/h3\u003e\n\n\u003cp\u003e全局运行队列保存在全局变量\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esched\u003c/code\u003e中, 全局运行队列入队和出队需要使用线程锁.\n全局运行队列的数据结构是链表, 由两个指针(head, tail)组成.\u003c/p\u003e\n\n\u003ch3 id=\"空闲m链表\"\u003e空闲M链表\u003c/h3\u003e\n\n\u003cp\u003e当M发现无待运行的G时会进入休眠, 并添加到空闲M链表中, 空闲M链表保存在全局变量\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esched\u003c/code\u003e.\n进入休眠的M会等待一个信号量(m.park), 唤醒休眠的M会使用这个信号量.\u003c/p\u003e\n\n\u003cp\u003ego需要保证有足够的M可以运行G, 是通过这样的机制实现的:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e入队待运行的G后, 如果当前无自旋的M但是有空闲的P, 就唤醒或者新建一个M\u003c/li\u003e\n  \u003cli\u003e当M离开自旋状态并准备运行出队的G时, 如果当前无自旋的M但是有空闲的P, 就唤醒或者新建一个M\u003c/li\u003e\n  \u003cli\u003e当M离开自旋状态并准备休眠时, 会在离开自旋状态后再次检查所有运行队列, 如果有待运行的G则重新进入自旋状态\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e因为”入队待运行的G”和”M离开自旋状态”会同时进行, go会使用这样的检查顺序:\u003c/p\u003e\n\n\u003cp\u003e入队待运行的G =\u0026gt; 内存屏障 =\u0026gt; 检查当前自旋的M数量 =\u0026gt; 唤醒或者新建一个M\n减少当前自旋的M数量 =\u0026gt; 内存屏障 =\u0026gt; 检查所有运行队列是否有待运行的G =\u0026gt; 休眠\u003c/p\u003e\n\n\u003cp\u003e这样可以保证不会出现待运行的G入队了, 也有空闲的资源P, 但无M去执行的情况.\u003c/p\u003e\n\n\u003ch3 id=\"空闲p链表\"\u003e空闲P链表\u003c/h3\u003e\n\n\u003cp\u003e当P的本地运行队列中的所有G都运行完毕, 又不能从其他地方拿到G时,\n拥有P的M会释放P并进入休眠状态, 释放的P会变为空闲状态并加到空闲P链表中, 空闲P链表保存在全局变量\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esched\u003c/code\u003e\n下次待运行的G入队时如果发现有空闲的P, 但是又没有自旋中的M时会唤醒或者新建一个M, M会拥有这个P, P会重新变为运行中的状态.\u003c/p\u003e\n\n\u003ch1 id=\"工作流程概览\"\u003e工作流程(概览)\u003c/h1\u003e\n\n\u003cp\u003e下图是协程可能出现的工作状态, 图中有4个P, 其中M1~M3正在运行G并且运行后会从拥有的P的运行队列继续获取G:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171110171241372-2120016927.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e只看这张图可能有点难以想象实际的工作流程, 这里我根据实际的代码再讲解一遍:\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003epackage\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003eprintNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"k\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMillisecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"n\"\u003eprintNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"n\"\u003eprintNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e程序启动时会先创建一个G, 指向的是main(实际是runtime.main而不是main.main, 后面解释):\n图中的虚线指的是G待运行或者开始运行的地址, 不是当前运行的地址.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171110171251091-1325784333.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eM会取得这个G并运行:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171110171257559-269808777.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e这时main会创建一个新的channel, 并启动两个新的G:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171110171304919-1329887936.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e接下来\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eG: main\u003c/code\u003e会从channel获取数据, 因为获取不到, G会\u003cstrong\u003e保存状态\u003c/strong\u003e并变为等待中(_Gwaiting)并添加到channel的队列:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171110171312638-525155603.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e因为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eG: main\u003c/code\u003e保存了运行状态, 下次运行时将会从\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e_ = \u0026lt;- c\u003c/code\u003e继续运行.\n接下来M会从运行队列获取到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eG: printNumber\u003c/code\u003e并运行:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171110171319888-1466945199.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eprintNumber会打印数字, 完成后向channel写数据,\n写数据时发现channel中有正在等待的G, 会把数据交给这个G, 把G变为待运行(_Grunnable)并重新放入运行队列:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171110171328216-1977430311.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e接下来M会运行下一个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eG: printNumber\u003c/code\u003e, 因为创建channel时指定了大小为3的缓冲区, 可以直接把数据写入缓冲区而无需等待:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171110171335450-1117872609.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e然后printNumber运行完毕, 运行队列中就只剩下\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eG: main\u003c/code\u003e了:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171110171343934-830758071.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e最后M把\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eG: main\u003c/code\u003e取出来运行, 会从上次中断的位置\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e_ \u0026lt;- c\u003c/code\u003e继续运行:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171110171354653-922259524.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e第一个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e_ \u0026lt;- c\u003c/code\u003e的结果已经在前面设置过了, 这条语句会执行成功.\n第二个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e_ \u0026lt;- c\u003c/code\u003e在获取时会发现channel中有已缓冲的0, 于是结果就是这个0, 不需要等待.\n最后main执行完毕, 程序结束.\u003c/p\u003e\n\n\u003cp\u003e有人可能会好奇如果最后再加一个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e_ \u0026lt;- c\u003c/code\u003e会变成什么结果, 这时因为所有G都进入等待状态, go会检测出来并报告死锁:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003efatal error: all goroutines are asleep - deadlock!\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"开始代码分析\"\u003e开始代码分析\u003c/h1\u003e\n\n\u003cp\u003e关于概念的讲解到此结束, 从这里开始会分析go中的实现代码, 我们需要先了解一些基础的内容.\u003c/p\u003e\n\n\u003ch3 id=\"汇编代码\"\u003e汇编代码\u003c/h3\u003e\n\n\u003cp\u003e从以下的go代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003epackage\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003eprintNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"k\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMillisecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"n\"\u003eprintNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"n\"\u003eprintNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以生成以下的汇编代码(平台是linux x64, 使用的是默认选项, 即启用优化和内联):\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e(lldb) di -n main.main\nhello`main.main:\nhello[0x401190] \u0026lt;+0\u0026gt;:   movq   %fs:-0x8, %rcx\nhello[0x401199] \u0026lt;+9\u0026gt;:   cmpq   0x10(%rcx), %rsp\nhello[0x40119d] \u0026lt;+13\u0026gt;:  jbe    0x401291                  ; \u0026lt;+257\u0026gt; at hello.go:16\nhello[0x4011a3] \u0026lt;+19\u0026gt;:  subq   $0x40, %rsp\nhello[0x4011a7] \u0026lt;+23\u0026gt;:  leaq   0xb3632(%rip), %rbx       ; runtime.rodata + 38880\nhello[0x4011ae] \u0026lt;+30\u0026gt;:  movq   %rbx, (%rsp)\nhello[0x4011b2] \u0026lt;+34\u0026gt;:  movq   $0x3, 0x8(%rsp)\nhello[0x4011bb] \u0026lt;+43\u0026gt;:  callq  0x4035a0                  ; runtime.makechan at chan.go:49\nhello[0x4011c0] \u0026lt;+48\u0026gt;:  movq   0x10(%rsp), %rax\nhello[0x4011c5] \u0026lt;+53\u0026gt;:  movq   $0x1, 0x10(%rsp)\nhello[0x4011ce] \u0026lt;+62\u0026gt;:  movq   $0x3, 0x18(%rsp)\nhello[0x4011d7] \u0026lt;+71\u0026gt;:  movq   %rax, 0x38(%rsp)\nhello[0x4011dc] \u0026lt;+76\u0026gt;:  movq   %rax, 0x20(%rsp)\nhello[0x4011e1] \u0026lt;+81\u0026gt;:  movl   $0x18, (%rsp)\nhello[0x4011e8] \u0026lt;+88\u0026gt;:  leaq   0x129c29(%rip), %rax      ; main.printNumber.f\nhello[0x4011ef] \u0026lt;+95\u0026gt;:  movq   %rax, 0x8(%rsp)\nhello[0x4011f4] \u0026lt;+100\u0026gt;: callq  0x430cd0                  ; runtime.newproc at proc.go:2657\nhello[0x4011f9] \u0026lt;+105\u0026gt;: movq   $0x4, 0x10(%rsp)\nhello[0x401202] \u0026lt;+114\u0026gt;: movq   $0x6, 0x18(%rsp)\nhello[0x40120b] \u0026lt;+123\u0026gt;: movq   0x38(%rsp), %rbx\nhello[0x401210] \u0026lt;+128\u0026gt;: movq   %rbx, 0x20(%rsp)\nhello[0x401215] \u0026lt;+133\u0026gt;: movl   $0x18, (%rsp)\nhello[0x40121c] \u0026lt;+140\u0026gt;: leaq   0x129bf5(%rip), %rax      ; main.printNumber.f\nhello[0x401223] \u0026lt;+147\u0026gt;: movq   %rax, 0x8(%rsp)\nhello[0x401228] \u0026lt;+152\u0026gt;: callq  0x430cd0                  ; runtime.newproc at proc.go:2657\nhello[0x40122d] \u0026lt;+157\u0026gt;: movq   $0x0, 0x30(%rsp)\nhello[0x401236] \u0026lt;+166\u0026gt;: leaq   0xb35a3(%rip), %rbx       ; runtime.rodata + 38880\nhello[0x40123d] \u0026lt;+173\u0026gt;: movq   %rbx, (%rsp)\nhello[0x401241] \u0026lt;+177\u0026gt;: movq   0x38(%rsp), %rbx\nhello[0x401246] \u0026lt;+182\u0026gt;: movq   %rbx, 0x8(%rsp)\nhello[0x40124b] \u0026lt;+187\u0026gt;: leaq   0x30(%rsp), %rbx\nhello[0x401250] \u0026lt;+192\u0026gt;: movq   %rbx, 0x10(%rsp)\nhello[0x401255] \u0026lt;+197\u0026gt;: callq  0x4043c0                  ; runtime.chanrecv1 at chan.go:354\nhello[0x40125a] \u0026lt;+202\u0026gt;: movq   $0x0, 0x28(%rsp)\nhello[0x401263] \u0026lt;+211\u0026gt;: leaq   0xb3576(%rip), %rbx       ; runtime.rodata + 38880\nhello[0x40126a] \u0026lt;+218\u0026gt;: movq   %rbx, (%rsp)\nhello[0x40126e] \u0026lt;+222\u0026gt;: movq   0x38(%rsp), %rbx\nhello[0x401273] \u0026lt;+227\u0026gt;: movq   %rbx, 0x8(%rsp)\nhello[0x401278] \u0026lt;+232\u0026gt;: leaq   0x28(%rsp), %rbx\nhello[0x40127d] \u0026lt;+237\u0026gt;: movq   %rbx, 0x10(%rsp)\nhello[0x401282] \u0026lt;+242\u0026gt;: callq  0x4043c0                  ; runtime.chanrecv1 at chan.go:354\nhello[0x401287] \u0026lt;+247\u0026gt;: movq   0x28(%rsp), %rbx\nhello[0x40128c] \u0026lt;+252\u0026gt;: addq   $0x40, %rsp\nhello[0x401290] \u0026lt;+256\u0026gt;: retq   \nhello[0x401291] \u0026lt;+257\u0026gt;: callq  0x4538d0                  ; runtime.morestack_noctxt at asm_amd64.s:365\nhello[0x401296] \u0026lt;+262\u0026gt;: jmp    0x401190                  ; \u0026lt;+0\u0026gt; at hello.go:16\nhello[0x40129b] \u0026lt;+267\u0026gt;: int3   \nhello[0x40129c] \u0026lt;+268\u0026gt;: int3   \nhello[0x40129d] \u0026lt;+269\u0026gt;: int3   \nhello[0x40129e] \u0026lt;+270\u0026gt;: int3   \nhello[0x40129f] \u0026lt;+271\u0026gt;: int3   \n\n(lldb) di -n main.printNumber\nhello`main.printNumber:\nhello[0x401000] \u0026lt;+0\u0026gt;:   movq   %fs:-0x8, %rcx\nhello[0x401009] \u0026lt;+9\u0026gt;:   leaq   -0x8(%rsp), %rax\nhello[0x40100e] \u0026lt;+14\u0026gt;:  cmpq   0x10(%rcx), %rax\nhello[0x401012] \u0026lt;+18\u0026gt;:  jbe    0x401185                  ; \u0026lt;+389\u0026gt; at hello.go:8\nhello[0x401018] \u0026lt;+24\u0026gt;:  subq   $0x88, %rsp\nhello[0x40101f] \u0026lt;+31\u0026gt;:  xorps  %xmm0, %xmm0\nhello[0x401022] \u0026lt;+34\u0026gt;:  movups %xmm0, 0x60(%rsp)\nhello[0x401027] \u0026lt;+39\u0026gt;:  movq   0x90(%rsp), %rax\nhello[0x40102f] \u0026lt;+47\u0026gt;:  movq   0x98(%rsp), %rbp\nhello[0x401037] \u0026lt;+55\u0026gt;:  cmpq   %rbp, %rax\nhello[0x40103a] \u0026lt;+58\u0026gt;:  jg     0x40112f                  ; \u0026lt;+303\u0026gt; at hello.go:13\nhello[0x401040] \u0026lt;+64\u0026gt;:  movq   %rax, 0x40(%rsp)\nhello[0x401045] \u0026lt;+69\u0026gt;:  movq   %rax, 0x48(%rsp)\nhello[0x40104a] \u0026lt;+74\u0026gt;:  xorl   %ebx, %ebx\nhello[0x40104c] \u0026lt;+76\u0026gt;:  movq   %rbx, 0x60(%rsp)\nhello[0x401051] \u0026lt;+81\u0026gt;:  movq   %rbx, 0x68(%rsp)\nhello[0x401056] \u0026lt;+86\u0026gt;:  leaq   0x60(%rsp), %rbx\nhello[0x40105b] \u0026lt;+91\u0026gt;:  cmpq   $0x0, %rbx\nhello[0x40105f] \u0026lt;+95\u0026gt;:  je     0x40117e                  ; \u0026lt;+382\u0026gt; at hello.go:10\nhello[0x401065] \u0026lt;+101\u0026gt;: movq   $0x1, 0x78(%rsp)\nhello[0x40106e] \u0026lt;+110\u0026gt;: movq   $0x1, 0x80(%rsp)\nhello[0x40107a] \u0026lt;+122\u0026gt;: movq   %rbx, 0x70(%rsp)\nhello[0x40107f] \u0026lt;+127\u0026gt;: leaq   0xb73fa(%rip), %rbx       ; runtime.rodata + 54400\nhello[0x401086] \u0026lt;+134\u0026gt;: movq   %rbx, (%rsp)\nhello[0x40108a] \u0026lt;+138\u0026gt;: leaq   0x48(%rsp), %rbx\nhello[0x40108f] \u0026lt;+143\u0026gt;: movq   %rbx, 0x8(%rsp)\nhello[0x401094] \u0026lt;+148\u0026gt;: movq   $0x0, 0x10(%rsp)\nhello[0x40109d] \u0026lt;+157\u0026gt;: callq  0x40bb90                  ; runtime.convT2E at iface.go:128\nhello[0x4010a2] \u0026lt;+162\u0026gt;: movq   0x18(%rsp), %rcx\nhello[0x4010a7] \u0026lt;+167\u0026gt;: movq   0x20(%rsp), %rax\nhello[0x4010ac] \u0026lt;+172\u0026gt;: movq   0x70(%rsp), %rbx\nhello[0x4010b1] \u0026lt;+177\u0026gt;: movq   %rcx, 0x50(%rsp)\nhello[0x4010b6] \u0026lt;+182\u0026gt;: movq   %rcx, (%rbx)\nhello[0x4010b9] \u0026lt;+185\u0026gt;: movq   %rax, 0x58(%rsp)\nhello[0x4010be] \u0026lt;+190\u0026gt;: cmpb   $0x0, 0x19ea1b(%rip)      ; time.initdone.\nhello[0x4010c5] \u0026lt;+197\u0026gt;: jne    0x401167                  ; \u0026lt;+359\u0026gt; at hello.go:10\nhello[0x4010cb] \u0026lt;+203\u0026gt;: movq   %rax, 0x8(%rbx)\nhello[0x4010cf] \u0026lt;+207\u0026gt;: leaq   0xfb152(%rip), %rbx       ; go.string.* + 560\nhello[0x4010d6] \u0026lt;+214\u0026gt;: movq   %rbx, (%rsp)\nhello[0x4010da] \u0026lt;+218\u0026gt;: movq   $0x3, 0x8(%rsp)\nhello[0x4010e3] \u0026lt;+227\u0026gt;: movq   0x70(%rsp), %rbx\nhello[0x4010e8] \u0026lt;+232\u0026gt;: movq   %rbx, 0x10(%rsp)\nhello[0x4010ed] \u0026lt;+237\u0026gt;: movq   0x78(%rsp), %rbx\nhello[0x4010f2] \u0026lt;+242\u0026gt;: movq   %rbx, 0x18(%rsp)\nhello[0x4010f7] \u0026lt;+247\u0026gt;: movq   0x80(%rsp), %rbx\nhello[0x4010ff] \u0026lt;+255\u0026gt;: movq   %rbx, 0x20(%rsp)\nhello[0x401104] \u0026lt;+260\u0026gt;: callq  0x45ad70                  ; fmt.Printf at print.go:196\nhello[0x401109] \u0026lt;+265\u0026gt;: movq   $0xf4240, (%rsp)          ; imm = 0xF4240 \nhello[0x401111] \u0026lt;+273\u0026gt;: callq  0x442a50                  ; time.Sleep at time.go:48\nhello[0x401116] \u0026lt;+278\u0026gt;: movq   0x40(%rsp), %rax\nhello[0x40111b] \u0026lt;+283\u0026gt;: incq   %rax\nhello[0x40111e] \u0026lt;+286\u0026gt;: movq   0x98(%rsp), %rbp\nhello[0x401126] \u0026lt;+294\u0026gt;: cmpq   %rbp, %rax\nhello[0x401129] \u0026lt;+297\u0026gt;: jle    0x401040                  ; \u0026lt;+64\u0026gt; at hello.go:10\nhello[0x40112f] \u0026lt;+303\u0026gt;: movq   $0x0, 0x48(%rsp)\nhello[0x401138] \u0026lt;+312\u0026gt;: leaq   0xb36a1(%rip), %rbx       ; runtime.rodata + 38880\nhello[0x40113f] \u0026lt;+319\u0026gt;: movq   %rbx, (%rsp)\nhello[0x401143] \u0026lt;+323\u0026gt;: movq   0xa0(%rsp), %rbx\nhello[0x40114b] \u0026lt;+331\u0026gt;: movq   %rbx, 0x8(%rsp)\nhello[0x401150] \u0026lt;+336\u0026gt;: leaq   0x48(%rsp), %rbx\nhello[0x401155] \u0026lt;+341\u0026gt;: movq   %rbx, 0x10(%rsp)\nhello[0x40115a] \u0026lt;+346\u0026gt;: callq  0x403870                  ; runtime.chansend1 at chan.go:99\nhello[0x40115f] \u0026lt;+351\u0026gt;: addq   $0x88, %rsp\nhello[0x401166] \u0026lt;+358\u0026gt;: retq   \nhello[0x401167] \u0026lt;+359\u0026gt;: leaq   0x8(%rbx), %r8\nhello[0x40116b] \u0026lt;+363\u0026gt;: movq   %r8, (%rsp)\nhello[0x40116f] \u0026lt;+367\u0026gt;: movq   %rax, 0x8(%rsp)\nhello[0x401174] \u0026lt;+372\u0026gt;: callq  0x40f090                  ; runtime.writebarrierptr at mbarrier.go:129\nhello[0x401179] \u0026lt;+377\u0026gt;: jmp    0x4010cf                  ; \u0026lt;+207\u0026gt; at hello.go:10\nhello[0x40117e] \u0026lt;+382\u0026gt;: movl   %eax, (%rbx)\nhello[0x401180] \u0026lt;+384\u0026gt;: jmp    0x401065                  ; \u0026lt;+101\u0026gt; at hello.go:10\nhello[0x401185] \u0026lt;+389\u0026gt;: callq  0x4538d0                  ; runtime.morestack_noctxt at asm_amd64.s:365\nhello[0x40118a] \u0026lt;+394\u0026gt;: jmp    0x401000                  ; \u0026lt;+0\u0026gt; at hello.go:8\nhello[0x40118f] \u0026lt;+399\u0026gt;: int3   \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这些汇编代码现在看不懂也没关系, 下面会从这里取出一部分来解释.\u003c/p\u003e\n\n\u003ch3 id=\"调用规范\"\u003e调用规范\u003c/h3\u003e\n\n\u003cp\u003e不同平台对于函数有不同的调用规范.\n例如32位通过栈传递参数, 通过eax寄存器传递返回值.\n64位windows通过rcx, rdx, r8, r9传递前4个参数, 通过栈传递第5个开始的参数, 通过eax寄存器传递返回值.\n64位linux, unix通过rdi, rsi, rdx, rcx, r8, r9传递前6个参数, 通过栈传递第7个开始的参数, 通过eax寄存器传递返回值.\ngo并不使用这些调用规范(除非涉及到与原生代码交互), go有一套独自的调用规范.\u003c/p\u003e\n\n\u003cp\u003ego的调用规范非常的简单, 所有参数都通过栈传递, 返回值也通过栈传递,\n例如这样的函数:\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003eMyStruct\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003eX\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eP\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003esomeFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"n\"\u003eMyStruct\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eMyStruct\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e调用函数时的栈的内容如下:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171110171401966-739107068.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e可以看得出参数和返回值都从低位到高位排列, go函数可以有多个返回值的原因也在于此. 因为返回值都通过栈传递了.\n需要注意的这里的”返回地址”是x86和x64上的, arm的返回地址会通过LR寄存器保存, 内容会和这里的稍微不一样.\n另外注意的是和c不一样, 传递构造体时整个构造体的内容都会复制到栈上, 如果构造体很大将会影响性能.\u003c/p\u003e\n\n\u003ch3 id=\"tls\"\u003eTLS\u003c/h3\u003e\n\n\u003cp\u003eTLS的全称是\u003ca href=\"https://en.wikipedia.org/wiki/Thread-local_storage\"\u003eThread-local storage\u003c/a\u003e, 代表每个线程的中的本地数据.\n例如标准c中的errno就是一个典型的TLS变量, 每个线程都有一个独自的errno, 写入它不会干扰到其他线程中的值.\ngo在实现协程时非常依赖TLS机制, 会用于获取系统线程中当前的G和G所属的M的实例.\u003c/p\u003e\n\n\u003cp\u003e因为go并不使用glibc, 操作TLS会使用系统原生的接口, 以linux x64为例,\ngo在新建M时会调用\u003ca href=\"http://man7.org/linux/man-pages/man2/arch_prctl.2.html\"\u003earch_prctl\u003c/a\u003e这个syscall设置FS寄存器的值为M.tls的地址,\n运行中每个M的FS寄存器都会指向它们对应的M实例的tls, linux内核调度线程时FS寄存器会跟着线程一起切换,\n这样go代码只需要访问FS寄存器就可以存取线程本地的数据.\u003c/p\u003e\n\n\u003cp\u003e上面的汇编代码中的\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ehello[0x401000] \u0026lt;+0\u0026gt;:   movq   %fs:-0x8, %rcx\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e会把指向当前的G的指针从TLS移动到rcx寄存器中.\u003c/p\u003e\n\n\u003ch3 id=\"栈扩张\"\u003e栈扩张\u003c/h3\u003e\n\n\u003cp\u003e因为go中的协程是\u003ca href=\"https://stackoverflow.com/questions/28977302/how-do-stackless-coroutines-differ-from-stackful-coroutines\"\u003estackful coroutine\u003c/a\u003e, 每一个goroutine都需要有自己的栈空间,\n栈空间的内容在goroutine休眠时需要保留, 待休眠完成后恢复(这时整个调用树都是完整的).\n这样就引出了一个问题, goroutine可能会同时存在很多个, 如果每一个goroutine都预先分配一个足够的栈空间那么go就会使用过多的内存.\u003c/p\u003e\n\n\u003cp\u003e为了避免这个问题, go在一开始只为goroutine分配一个很小的栈空间, 它的大小在当前版本是2K.\n当函数发现栈空间不足时, 会申请一块新的栈空间并把原来的栈内容复制过去.\u003c/p\u003e\n\n\u003cp\u003e上面的汇编代码中的\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ehello[0x401000] \u0026lt;+0\u0026gt;:   movq   %fs:-0x8, %rcx\nhello[0x401009] \u0026lt;+9\u0026gt;:   leaq   -0x8(%rsp), %rax\nhello[0x40100e] \u0026lt;+14\u0026gt;:  cmpq   0x10(%rcx), %rax\nhello[0x401012] \u0026lt;+18\u0026gt;:  jbe    0x401185                  ; \u0026lt;+389\u0026gt; at hello.go:8\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e会检查比较rsp减去一定值以后是否比g.stackguard0小, 如果小于等于则需要调到下面调用morestack_noctxt函数.\n细心的可能会发现比较的值跟实际减去的值不一致, 这是因为stackguard0下面会预留一小部分空间, 编译时确定不超过预留的空间可以省略比对.\u003c/p\u003e\n\n\u003ch3 id=\"写屏障write-barrier\"\u003e写屏障(Write Barrier)\u003c/h3\u003e\n\n\u003cp\u003e因为go支持并行GC, GC的扫描和go代码可以同时运行, 这样带来的问题是GC扫描的过程中go代码有可能改变了对象的依赖树,\n例如开始扫描时发现根对象A和B, B拥有C的指针, GC先扫描A, 然后B把C的指针交给A, GC再扫描B, 这时C就不会被扫描到.\n为了避免这个问题, go在GC的标记阶段会启用写屏障(Write Barrier).\u003c/p\u003e\n\n\u003cp\u003e启用了写屏障(Write Barrier)后, 当B把C的指针交给A时, GC会认为在这一轮的扫描中C的指针是存活的,\n即使A可能会在稍后丢掉C, 那么C就在下一轮回收.\n写屏障只针对指针启用, 而且只在GC的标记阶段启用, 平时会直接把值写入到目标地址:\u003c/p\u003e\n\n\u003cp\u003e关于写屏障的详细将在下一篇(GC篇)分析.\n值得一提的是CoreCLR的GC也有写屏障的机制, 但作用跟这里的不一样(用于标记跨代引用).\u003c/p\u003e\n\n\u003ch3 id=\"闭包closure\"\u003e闭包(Closure)\u003c/h3\u003e\n\n\u003cp\u003e闭包这个概念本身应该不需要解释, 我们实际看一看go是如何实现闭包的:\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003epackage\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003eexecuteFn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efn\u003c/span\u003e \u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003efn\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003eexecuteFn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%d %d %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这段代码的输出结果是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3 2 3\u003c/code\u003e, 熟悉go的应该不会感到意外.\nmain函数执行executeFn函数的汇编代码如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ehello[0x4a096f] \u0026lt;+47\u0026gt;:  movq   $0x1, 0x40(%rsp)          ; 变量a等于1\nhello[0x4a0978] \u0026lt;+56\u0026gt;:  leaq   0x151(%rip), %rax         ; 寄存器rax等于匿名函数main.main.func1的地址\nhello[0x4a097f] \u0026lt;+63\u0026gt;:  movq   %rax, 0x60(%rsp)          ; 变量rsp+0x60等于匿名函数的地址\nhello[0x4a0984] \u0026lt;+68\u0026gt;:  leaq   0x40(%rsp), %rax          ; 寄存器rax等于变量a的地址\nhello[0x4a0989] \u0026lt;+73\u0026gt;:  movq   %rax, 0x68(%rsp)          ; 变量rsp+0x68等于变量a的地址\nhello[0x4a098e] \u0026lt;+78\u0026gt;:  movq   $0x2, 0x70(%rsp)          ; 变量rsp+0x70等于2(变量b的值)\nhello[0x4a0997] \u0026lt;+87\u0026gt;:  leaq   0x60(%rsp), %rax          ; 寄存器rax等于地址rsp+0x60\nhello[0x4a099c] \u0026lt;+92\u0026gt;:  movq   %rax, (%rsp)              ; 第一个参数等于地址rsp+0x60\nhello[0x4a09a0] \u0026lt;+96\u0026gt;:  callq  0x4a08f0                  ; 执行main.executeFn\nhello[0x4a09a5] \u0026lt;+101\u0026gt;: movq   0x8(%rsp), %rax           ; 寄存器rax等于返回值\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们可以看到传给executeFn的是一个指针, 指针指向的内容是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e[匿名函数的地址, 变量a的地址, 变量b的值]\u003c/code\u003e.\n变量a传地址的原因是匿名函数中对a进行了修改, 需要反映到原来的a上.\nexecuteFn函数执行闭包的汇编代码如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ehello[0x4a08ff] \u0026lt;+15\u0026gt;: subq   $0x10, %rsp                ; 在栈上分配0x10的空间\nhello[0x4a0903] \u0026lt;+19\u0026gt;: movq   %rbp, 0x8(%rsp)            ; 把原来的寄存器rbp移到变量rsp+0x8\nhello[0x4a0908] \u0026lt;+24\u0026gt;: leaq   0x8(%rsp), %rbp            ; 把变量rsp+0x8的地址移到寄存器rbp\nhello[0x4a090d] \u0026lt;+29\u0026gt;: movq   0x18(%rsp), %rdx           ; 把第一个参数(闭包)的指针移到寄存器rdx\nhello[0x4a0912] \u0026lt;+34\u0026gt;: movq   (%rdx), %rax               ; 把闭包中函数的指针移到寄存器rax\nhello[0x4a0915] \u0026lt;+37\u0026gt;: callq  *%rax                      ; 调用闭包中的函数\nhello[0x4a0917] \u0026lt;+39\u0026gt;: movq   (%rsp), %rax               ; 把返回值移到寄存器rax\nhello[0x4a091b] \u0026lt;+43\u0026gt;: movq   %rax, 0x20(%rsp)           ; 把寄存器rax移到返回值中(参数后面)\nhello[0x4a0920] \u0026lt;+48\u0026gt;: movq   0x8(%rsp), %rbp            ; 把变量rsp+0x8的值恢复寄存器rbp(恢复原rbp)\nhello[0x4a0925] \u0026lt;+53\u0026gt;: addq   $0x10, %rsp                ; 释放栈空间\nhello[0x4a0929] \u0026lt;+57\u0026gt;: retq                              ; 从函数返回\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到调用闭包时参数并不通过栈传递, 而是通过寄存器rdx传递, 闭包的汇编代码如下:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ehello[0x455660] \u0026lt;+0\u0026gt;:  movq   0x8(%rdx), %rax            ; 第一个参数移到寄存器rax(变量a的指针)\nhello[0x455664] \u0026lt;+4\u0026gt;:  movq   (%rax), %rcx               ; 把寄存器rax指向的值移到寄存器rcx(变量a的值)\nhello[0x455667] \u0026lt;+7\u0026gt;:  addq   0x10(%rdx), %rcx           ; 添加第二个参数到寄存器rcx(变量a的值+变量b的值)\nhello[0x45566b] \u0026lt;+11\u0026gt;: movq   %rcx, (%rax)               ; 把寄存器rcx移到寄存器rax指向的值(相加的结果保存回变量a)\nhello[0x45566e] \u0026lt;+14\u0026gt;: movq   %rcx, 0x8(%rsp)            ; 把寄存器rcx移到返回结果\nhello[0x455673] \u0026lt;+19\u0026gt;: retq                              ; 从函数返回\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e闭包的传递可以总结如下:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e闭包的内容是[匿名函数的地址, 传给匿名函数的参数(不定长)…]\u003c/li\u003e\n  \u003cli\u003e传递闭包给其他函数时会传递指向”闭包的内容”的指针\u003c/li\u003e\n  \u003cli\u003e调用闭包时会把指向”闭包的内容”的指针放到寄存器rdx(在go内部这个指针称为”上下文”)\u003c/li\u003e\n  \u003cli\u003e闭包会从寄存器rdx取出参数\u003c/li\u003e\n  \u003cli\u003e如果闭包修改了变量, 闭包中的参数会是指针而不是值, 修改时会修改到原来的位置上\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"闭包goroutine\"\u003e闭包+goroutine\u003c/h3\u003e\n\n\u003cp\u003e细心的可能会发现在上面的例子中, 闭包的内容在栈上, 如果不是直接调用executeFn而是go executeFn呢?\n把上面的代码改为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ego executeFn(func() ...)\u003c/code\u003e可以生成以下的汇编代码:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ehello[0x455611] \u0026lt;+33\u0026gt;:  leaq   0xb4a8(%rip), %rax        ; 寄存器rax等于类型信息\nhello[0x455618] \u0026lt;+40\u0026gt;:  movq   %rax, (%rsp)              ; 第一个参数等于类型信息\nhello[0x45561c] \u0026lt;+44\u0026gt;:  callq  0x40d910                  ; 调用runtime.newobject\nhello[0x455621] \u0026lt;+49\u0026gt;:  movq   0x8(%rsp), %rax           ; 寄存器rax等于返回值(这里称为新对象a)\nhello[0x455626] \u0026lt;+54\u0026gt;:  movq   %rax, 0x28(%rsp)          ; 变量rsp+0x28等于新对象a\nhello[0x45562b] \u0026lt;+59\u0026gt;:  movq   $0x1, (%rax)              ; 新对象a的值等于1\nhello[0x455632] \u0026lt;+66\u0026gt;:  leaq   0x136e7(%rip), %rcx       ; 寄存器rcx等于类型信息\nhello[0x455639] \u0026lt;+73\u0026gt;:  movq   %rcx, (%rsp)              ; 第一个参数等于类型信息\nhello[0x45563d] \u0026lt;+77\u0026gt;:  callq  0x40d910                  ; 调用runtime.newobject\nhello[0x455642] \u0026lt;+82\u0026gt;:  movq   0x8(%rsp), %rax           ; 寄存器rax等于返回值(这里称为新对象fn)\nhello[0x455647] \u0026lt;+87\u0026gt;:  leaq   0x82(%rip), %rcx          ; 寄存器rcx等于匿名函数main.main.func1的地址\nhello[0x45564e] \u0026lt;+94\u0026gt;:  movq   %rcx, (%rax)              ; 新对象fn+0的值等于main.main.func1的地址\nhello[0x455651] \u0026lt;+97\u0026gt;:  testb  (%rax), %al               ; 确保新对象fn不等于nil\nhello[0x455653] \u0026lt;+99\u0026gt;:  movl   0x78397(%rip), %ecx       ; 寄存器ecx等于当前是否启用写屏障\nhello[0x455659] \u0026lt;+105\u0026gt;: leaq   0x8(%rax), %rdx           ; 寄存器rdx等于新对象fn+0x8的地址\nhello[0x45565d] \u0026lt;+109\u0026gt;: testl  %ecx, %ecx                ; 判断当前是否启用写屏障\nhello[0x45565f] \u0026lt;+111\u0026gt;: jne    0x455699                  ; 启用写屏障时调用后面的逻辑\nhello[0x455661] \u0026lt;+113\u0026gt;: movq   0x28(%rsp), %rcx          ; 寄存器rcx等于新对象a\nhello[0x455666] \u0026lt;+118\u0026gt;: movq   %rcx, 0x8(%rax)           ; 设置新对象fn+0x8的值等于新对象a\nhello[0x45566a] \u0026lt;+122\u0026gt;: movq   $0x2, 0x10(%rax)          ; 设置新对象fn+0x10的值等于2(变量b的值)\nhello[0x455672] \u0026lt;+130\u0026gt;: movq   %rax, 0x10(%rsp)          ; 第三个参数等于新对象fn(额外参数)\nhello[0x455677] \u0026lt;+135\u0026gt;: movl   $0x10, (%rsp)             ; 第一个参数等于0x10(函数+参数的大小)\nhello[0x45567e] \u0026lt;+142\u0026gt;: leaq   0x22fb3(%rip), %rax       ; 第二个参数等于一个常量构造体的地址\nhello[0x455685] \u0026lt;+149\u0026gt;: movq   %rax, 0x8(%rsp)           ; 这个构造体的类型是funcval, 值是executeFn的地址\nhello[0x45568a] \u0026lt;+154\u0026gt;: callq  0x42e690                  ; 调用runtime.newproc创建新的goroutine\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们可以看到goroutine+闭包的情况更复杂, 首先go会通过逃逸分析算出变量a和闭包会逃逸到外面,\n这时go会在heap上分配变量a和闭包, 上面调用的两次newobject就是分别对变量a和闭包的分配.\n在创建goroutine时, 首先会传入函数+参数的大小(上面是8+8=16), 然后传入函数+参数, 上面的参数即闭包的地址.\u003c/p\u003e\n\n\u003ch3 id=\"m0和g0\"\u003em0和g0\u003c/h3\u003e\n\n\u003cp\u003ego中还有特殊的M和G, 它们是m0和g0.\u003c/p\u003e\n\n\u003cp\u003em0是启动程序后的主线程, 这个m对应的实例会在全局变量m0中, 不需要在heap上分配,\nm0负责执行初始化操作和启动第一个g, 在之后m0就和其他的m一样了.\u003c/p\u003e\n\n\u003cp\u003eg0是仅用于负责调度的G, g0不指向任何可执行的函数, 每个m都会有一个自己的g0,\n在调度或系统调用时会使用g0的栈空间, 全局变量的g0是m0的g0.\u003c/p\u003e\n\n\u003cp\u003e如果上面的内容都了解, 就可以开始看golang的源代码了.\u003c/p\u003e\n\n\u003ch1 id=\"程序初始化\"\u003e程序初始化\u003c/h1\u003e\n\n\u003cp\u003ego程序的入口点是\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/asm_amd64.s\"\u003eruntime.rt0_go\u003c/a\u003e, 流程是:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e分配栈空间, 需要2个本地变量+2个函数参数, 然后向8对齐\u003c/li\u003e\n  \u003cli\u003e把传入的argc和argv保存到栈上\u003c/li\u003e\n  \u003cli\u003e更新g0中的stackguard的值, stackguard用于检测栈空间是否不足, 需要分配新的栈空间\u003c/li\u003e\n  \u003cli\u003e获取当前cpu的信息并保存到各个全局变量\u003c/li\u003e\n  \u003cli\u003e调用_cgo_init如果函数存在\u003c/li\u003e\n  \u003cli\u003e初始化当前线程的TLS, 设置FS寄存器为m0.tls+8(获取时会-8)\u003c/li\u003e\n  \u003cli\u003e测试TLS是否工作\u003c/li\u003e\n  \u003cli\u003e设置g0到TLS中, 表示当前的g是g0\u003c/li\u003e\n  \u003cli\u003e设置m0.g0 = g0\u003c/li\u003e\n  \u003cli\u003e设置g0.m = m0\u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/runtime1.go#L140\"\u003eruntime.check\u003c/a\u003e做一些检查\u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/runtime1.go#L60\"\u003eruntime.args\u003c/a\u003e保存传入的argc和argv到全局变量\u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/os_linux.go#L269\"\u003eruntime.osinit\u003c/a\u003e根据系统执行不同的初始化\n    \u003cul\u003e\n      \u003cli\u003e这里(linux x64)设置了全局变量ncpu等于cpu核心数量\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L468\"\u003eruntime.schedinit\u003c/a\u003e执行共同的初始化\n    \u003cul\u003e\n      \u003cli\u003e这里的处理比较多, 会初始化栈空间分配器, GC, 按cpu核心数量或GOMAXPROCS的值生成P等\u003c/li\u003e\n      \u003cli\u003e生成P的处理在\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L3517\"\u003eprocresize\u003c/a\u003e中\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L2929\"\u003eruntime.newproc\u003c/a\u003e创建一个新的goroutine, 指向的是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eruntime.main\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003eruntime.newproc这个函数在创建普通的goroutine时也会使用, 在下面的”go的实现”中会详细讲解\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L1135\"\u003eruntime·mstart\u003c/a\u003e启动m0\n    \u003cul\u003e\n      \u003cli\u003e启动后m0会不断从运行队列获取G并运行, runtime.mstart调用后不会返回\u003c/li\u003e\n      \u003cli\u003eruntime.mstart这个函数是m的入口点(不仅仅是m0), 在下面的”调度器的实现”中会详细讲解\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e第一个被调度的G会运行\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L109\"\u003eruntime.main\u003c/a\u003e, 流程是:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e标记主函数已调用, 设置mainStarted = true\u003c/li\u003e\n  \u003cli\u003e启动一个新的M执行sysmon函数, 这个函数会监控全局的状态并对运行时间过长的G进行抢占\u003c/li\u003e\n  \u003cli\u003e要求G必须在当前M(系统主线程)上执行\u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L233\"\u003eruntime_init\u003c/a\u003e函数\u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/mgc.go#L214\"\u003egcenable\u003c/a\u003e函数\u003c/li\u003e\n  \u003cli\u003e调用main.init函数, 如果函数存在\u003c/li\u003e\n  \u003cli\u003e不再要求G必须在当前M上运行\u003c/li\u003e\n  \u003cli\u003e如果程序是作为c的类库编译的, 在这里返回\u003c/li\u003e\n  \u003cli\u003e调用main.main函数\u003c/li\u003e\n  \u003cli\u003e如果当前发生了panic, 则等待panic处理\u003c/li\u003e\n  \u003cli\u003e调用exit(0)退出程序\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"g-m-p的定义\"\u003eG M P的定义\u003c/h1\u003e\n\n\u003cp\u003eG的定义\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/runtime2.go#L320\"\u003e在这里\u003c/a\u003e.\nM的定义\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/runtime2.go#L383\"\u003e在这里\u003c/a\u003e.\nP的定义\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/runtime2.go#L450\"\u003e在这里\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eG里面比较重要的成员如下\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003estack: 当前g使用的栈空间, 有lo和hi两个成员\u003c/li\u003e\n  \u003cli\u003estackguard0: 检查栈空间是否足够的值, 低于这个值会扩张栈, 0是go代码使用的\u003c/li\u003e\n  \u003cli\u003estackguard1: 检查栈空间是否足够的值, 低于这个值会扩张栈, 1是原生代码使用的\u003c/li\u003e\n  \u003cli\u003em: 当前g对应的m\u003c/li\u003e\n  \u003cli\u003esched: g的调度数据, 当g中断时会保存当前的pc和rsp等值到这里, 恢复运行时会使用这里的值\u003c/li\u003e\n  \u003cli\u003eatomicstatus: g的当前状态\u003c/li\u003e\n  \u003cli\u003eschedlink: 下一个g, 当g在链表结构中会使用\u003c/li\u003e\n  \u003cli\u003epreempt: g是否被抢占中\u003c/li\u003e\n  \u003cli\u003elockedm: g是否要求要回到这个M执行, 有的时候g中断了恢复会要求使用原来的M执行\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eM里面比较重要的成员如下\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eg0: 用于调度的特殊g, 调度和执行系统调用时会切换到这个g\u003c/li\u003e\n  \u003cli\u003ecurg: 当前运行的g\u003c/li\u003e\n  \u003cli\u003ep: 当前拥有的P\u003c/li\u003e\n  \u003cli\u003enextp: 唤醒M时, M会拥有这个P\u003c/li\u003e\n  \u003cli\u003epark: M休眠时使用的信号量, 唤醒M时会通过它唤醒\u003c/li\u003e\n  \u003cli\u003eschedlink: 下一个m, 当m在链表结构中会使用\u003c/li\u003e\n  \u003cli\u003emcache: 分配内存时使用的本地分配器, 和p.mcache一样(拥有P时会复制过来)\u003c/li\u003e\n  \u003cli\u003elockedg: lockedm的对应值\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eP里面比较重要的成员如下\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003estatus: p的当前状态\u003c/li\u003e\n  \u003cli\u003elink: 下一个p, 当p在链表结构中会使用\u003c/li\u003e\n  \u003cli\u003em: 拥有这个P的M\u003c/li\u003e\n  \u003cli\u003emcache: 分配内存时使用的本地分配器\u003c/li\u003e\n  \u003cli\u003erunqhead: 本地运行队列的出队序号\u003c/li\u003e\n  \u003cli\u003erunqtail: 本地运行队列的入队序号\u003c/li\u003e\n  \u003cli\u003erunq: 本地运行队列的数组, 可以保存256个G\u003c/li\u003e\n  \u003cli\u003egfree: G的自由列表, 保存变为_Gdead后可以复用的G实例\u003c/li\u003e\n  \u003cli\u003egcBgMarkWorker: 后台GC的worker函数, 如果它存在M会优先执行它\u003c/li\u003e\n  \u003cli\u003egcw: GC的本地工作队列, 详细将在下一篇(GC篇)分析\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"go的实现\"\u003ego的实现\u003c/h1\u003e\n\n\u003cp\u003e使用go命令创建goroutine时, go会把go命令编译为对runtime.newproc的调用, 堆栈的结构如下:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171110171409294-925311779.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e第一个参数是funcval + 额外参数的长度, 第二个参数是funcval, 后面的都是传递给goroutine中执行的函数的额外参数.\nfuncval的定义\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/runtime2.go#L138\"\u003e在这里\u003c/a\u003e, fn是指向函数机器代码的指针.\n\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L2929\"\u003eruntime.newproc\u003c/a\u003e的处理如下:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e计算额外参数的地址argp\u003c/li\u003e\n  \u003cli\u003e获取调用端的地址(返回地址)pc\u003c/li\u003e\n  \u003cli\u003e使用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/asm_amd64.s#L301\"\u003esystemstack\u003c/a\u003e调用newproc1\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/asm_amd64.s#L301\"\u003esystemstack\u003c/a\u003e会切换当前的g到g0, 并且使用g0的栈空间, 然后调用传入的函数, 再切换回原来的g和原来的栈空间.\n切换到g0后会假装返回地址是mstart, 这样traceback的时候可以在mstart停止.\n这里传给systemstack的是一个闭包, 调用时会把闭包的地址放到寄存器rdx, 具体可以参考上面对闭包的分析.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L2941\"\u003eruntime.newproc1\u003c/a\u003e的处理如下:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e调用getg获取当前的g, 会编译为读取FS寄存器(TLS), 这里会获取到g0\u003c/li\u003e\n  \u003cli\u003e设置g对应的m的locks++, 禁止抢占\u003c/li\u003e\n  \u003cli\u003e获取m拥有的p\u003c/li\u003e\n  \u003cli\u003e新建一个g\n    \u003cul\u003e\n      \u003cli\u003e首先调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L3088\"\u003egfget\u003c/a\u003e从p.gfree获取g, 如果之前有g被回收在这里就可以复用\u003c/li\u003e\n      \u003cli\u003e获取不到时调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L2909\"\u003emalg\u003c/a\u003e分配一个g, 初始的栈空间大小是2K\u003c/li\u003e\n      \u003cli\u003e需要先设置g的状态为已中止(_Gdead), 这样gc不会去扫描这个g的未初始化的栈\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e把参数复制到g的栈上\u003c/li\u003e\n  \u003cli\u003e把返回地址复制到g的栈上, 这里的返回地址是goexit, 表示调用完目标函数后会调用goexit\u003c/li\u003e\n  \u003cli\u003e设置g的调度数据(sched)\n    \u003cul\u003e\n      \u003cli\u003e设置sched.sp等于参数+返回地址后的rsp地址\u003c/li\u003e\n      \u003cli\u003e设置sched.pc等于目标函数的地址, 查看\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/stack.go#L1074\"\u003egostartcallfn\u003c/a\u003e和\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/sys_x86.go#L16\"\u003egostartcall\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e设置sched.g等于g\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e设置g的状态为待运行(_Grunnable)\u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L4299\"\u003erunqput\u003c/a\u003e把g放到运行队列\n    \u003cul\u003e\n      \u003cli\u003e首先随机把g放到p.runnext, 如果放到runnext则入队原来在runnext的g\u003c/li\u003e\n      \u003cli\u003e然后尝试把g放到P的”本地运行队列”\u003c/li\u003e\n      \u003cli\u003e如果本地运行队列满了则调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L4334\"\u003erunqputslow\u003c/a\u003e把g放到”全局运行队列”\n        \u003cul\u003e\n          \u003cli\u003erunqputslow会把本地运行队列中一半的g放到全局运行队列, 这样下次就可以继续用快速的本地运行队列了\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e如果当前有空闲的P, 但是无自旋的M(nmspinning等于0), 并且主函数已执行则唤醒或新建一个M\u003c/strong\u003e\n    \u003cul\u003e\n      \u003cli\u003e这一步非常重要, 用于保证当前有足够的M运行G, 具体请查看上面的”空闲M链表”\u003c/li\u003e\n      \u003cli\u003e唤醒或新建一个M会通过\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L1804\"\u003ewakep\u003c/a\u003e函数\n        \u003cul\u003e\n          \u003cli\u003e首先交换nmspinning到1, 成功再继续, 多个线程同时执行wakep只有一个会继续\u003c/li\u003e\n          \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L1704\"\u003estartm\u003c/a\u003e函数\n            \u003cul\u003e\n              \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L4257\"\u003epidleget\u003c/a\u003e从”空闲P链表”获取一个空闲的P\u003c/li\u003e\n              \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L4156\"\u003emget\u003c/a\u003e从”空闲M链表”获取一个空闲的M\u003c/li\u003e\n              \u003cli\u003e如果没有空闲的M, 则调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L1636\"\u003enewm\u003c/a\u003e新建一个M\n                \u003cul\u003e\n                  \u003cli\u003enewm会新建一个m的实例, m的实例包含一个g0, 然后调用\u003ca href=\"\"\u003enewosproc\u003c/a\u003e动一个系统线程\u003c/li\u003e\n                  \u003cli\u003enewosproc会调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/sys_linux_amd64.s#L443\"\u003esyscall clone\u003c/a\u003e创建一个新的线程\u003c/li\u003e\n                  \u003cli\u003e线程创建后会设置TLS, 设置TLS中当前的g为g0, 然后执行mstart\u003c/li\u003e\n                \u003c/ul\u003e\n              \u003c/li\u003e\n              \u003cli\u003e调用notewakeup(\u0026amp;mp.park)唤醒线程\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e创建goroutine的流程就这么多了, 接下来看看M是如何调度的.\u003c/p\u003e\n\n\u003ch1 id=\"调度器的实现\"\u003e调度器的实现\u003c/h1\u003e\n\n\u003cp\u003eM启动时会调用mstart函数, m0在初始化后调用, 其他的的m在线程启动后调用.\n\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L1135\"\u003emstart\u003c/a\u003e函数的处理如下:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e调用getg获取当前的g, 这里会获取到g0\u003c/li\u003e\n  \u003cli\u003e如果g未分配栈则从当前的栈空间(系统栈空间)上分配, 也就是说g0会使用系统栈空间\u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L1155\"\u003emstart1\u003c/a\u003e函数\n    \u003cul\u003e\n      \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/asm_amd64.s#L565\"\u003egosave\u003c/a\u003e函数保存当前的状态到g0的调度数据中, 以后每次调度都会从这个栈地址开始\u003c/li\u003e\n      \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/asm_amd64.s#L198\"\u003easminit\u003c/a\u003e函数, 不做任何事情\u003c/li\u003e\n      \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/os_linux.go#L311\"\u003eminit\u003c/a\u003e函数, 设置当前线程可以接收的信号(signal)\u003c/li\u003e\n      \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L2205\"\u003eschedule\u003c/a\u003e函数\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e调用schedule函数后就进入了调度循环, 整个流程可以简单总结为:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eschedule函数获取g =\u0026gt; [必要时休眠] =\u0026gt; [唤醒后继续获取] =\u0026gt; execute函数执行g =\u0026gt; 执行后返回到goexit =\u0026gt; 重新执行schedule函数\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L2205\"\u003eschedule\u003c/a\u003e函数的处理如下:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e如果当前GC需要停止整个世界（STW), 则调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L1663\"\u003estopm\u003c/a\u003e休眠当前的M\u003c/li\u003e\n  \u003cli\u003e如果M拥有的P中指定了需要在安全点运行的函数(P.runSafePointFn), 则运行它\u003c/li\u003e\n  \u003cli\u003e快速获取待运行的G, 以下处理如果有一个获取成功后面就不会继续获取\n    \u003cul\u003e\n      \u003cli\u003e如果当前GC正在标记阶段, 则查找有没有待运行的GC Worker, GC Worker也是一个G\u003c/li\u003e\n      \u003cli\u003e为了公平起见, 每61次调度从全局运行队列获取一次G, (一直从本地获取可能导致全局运行队列中的G不被运行)\u003c/li\u003e\n      \u003cli\u003e从P的本地运行队列中获取G, 调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L4374\"\u003erunqget\u003c/a\u003e函数\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e快速获取失败时, 调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L1929\"\u003efindrunnable\u003c/a\u003e函数获取待运行的G, 会阻塞到获取成功为止\n    \u003cul\u003e\n      \u003cli\u003e如果当前GC需要停止整个世界（STW), 则调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L1663\"\u003estopm\u003c/a\u003e休眠当前的M\u003c/li\u003e\n      \u003cli\u003e如果M拥有的P中指定了需要在安全点运行的函数(P.runSafePointFn), 则运行它\u003c/li\u003e\n      \u003cli\u003e如果有析构器待运行则使用”运行析构器的G”\u003c/li\u003e\n      \u003cli\u003e从P的本地运行队列中获取G, 调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L4374\"\u003erunqget\u003c/a\u003e函数\u003c/li\u003e\n      \u003cli\u003e从全局运行队列获取G, 调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L4208\"\u003eglobrunqget\u003c/a\u003e函数, 需要上锁\u003c/li\u003e\n      \u003cli\u003e从网络事件反应器获取G, 函数netpoll会获取哪些fd可读可写或已关闭, 然后返回等待fd相关事件的G\u003c/li\u003e\n      \u003cli\u003e如果获取不到G, 则执行\u003ca href=\"http://supertech.csail.mit.edu/papers/steal.pdf\"\u003eWork Stealing\u003c/a\u003e\n        \u003cul\u003e\n          \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L4455\"\u003erunqsteal\u003c/a\u003e尝试从其他P的本地运行队列盗取一半的G\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e如果还是获取不到G, 就需要休眠M了, 接下来是休眠的步骤\n        \u003cul\u003e\n          \u003cli\u003e再次检查当前GC是否在标记阶段, 在则查找有没有待运行的GC Worker, GC Worker也是一个G\u003c/li\u003e\n          \u003cli\u003e再次检查如果当前GC需要停止整个世界, 或者P指定了需要再安全点运行的函数, 则跳到findrunnable的顶部重试\u003c/li\u003e\n          \u003cli\u003e再次检查全局运行队列中是否有G, 有则获取并返回\u003c/li\u003e\n          \u003cli\u003e释放M拥有的P, P会变为空闲(_Pidle)状态\u003c/li\u003e\n          \u003cli\u003e把P添加到”空闲P链表”中\u003c/li\u003e\n          \u003cli\u003e\u003cstrong\u003e让M离开自旋状态\u003c/strong\u003e, 这里的处理非常重要, 参考上面的”空闲M链表”\u003c/li\u003e\n          \u003cli\u003e首先减少表示当前自旋中的M的数量的全局变量nmspinning\u003c/li\u003e\n          \u003cli\u003e再次检查所有P的本地运行队列, 如果不为空则让M重新进入自旋状态, 并跳到findrunnable的顶部重试\u003c/li\u003e\n          \u003cli\u003e再次检查有没有待运行的GC Worker, 有则让M重新进入自旋状态, 并跳到findrunnable的顶部重试\u003c/li\u003e\n          \u003cli\u003e再次检查网络事件反应器是否有待运行的G, 这里对netpoll的调用会阻塞, 直到某个fd收到了事件\u003c/li\u003e\n          \u003cli\u003e如果最终还是获取不到G, 调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L1663\"\u003estopm\u003c/a\u003e休眠当前的M\u003c/li\u003e\n          \u003cli\u003e唤醒后跳到findrunnable的顶部重试\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e成功获取到一个待运行的G\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e让M离开自旋状态\u003c/strong\u003e, 调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L2160\"\u003eresetspinning\u003c/a\u003e, 这里的处理和上面的不一样\n    \u003cul\u003e\n      \u003cli\u003e\u003cstrong\u003e如果当前有空闲的P, 但是无自旋的M(nmspinning等于0), 则唤醒或新建一个M\u003c/strong\u003e\u003c/li\u003e\n      \u003cli\u003e上面离开自旋状态是为了休眠M, 所以会再次检查所有队列然后休眠\u003c/li\u003e\n      \u003cli\u003e这里离开自选状态是为了执行G, 所以会检查是否有空闲的P, 有则表示可以再开新的M执行G\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e如果G要求回到指定的M(例如上面的runtime.main)\n    \u003cul\u003e\n      \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L1842\"\u003estartlockedm\u003c/a\u003e函数把G和P交给该M, 自己进入休眠\u003c/li\u003e\n      \u003cli\u003e从休眠唤醒后跳到schedule的顶部重试\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L2169\"\u003eexecute\u003c/a\u003e函数执行G\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L2169\"\u003eexecute\u003c/a\u003e函数的处理如下:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e调用getg获取当前的g\u003c/li\u003e\n  \u003cli\u003e把G的状态由待运行(_Grunnable)改为运行中(_Grunning)\u003c/li\u003e\n  \u003cli\u003e设置G的stackguard, 栈空间不足时可以扩张\u003c/li\u003e\n  \u003cli\u003e增加P中记录的调度次数(对应上面的每61次优先获取一次全局运行队列)\u003c/li\u003e\n  \u003cli\u003e设置g.m.curg = g\u003c/li\u003e\n  \u003cli\u003e设置g.m = m\u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/asm_amd64.s#L228\"\u003egogo\u003c/a\u003e函数\n    \u003cul\u003e\n      \u003cli\u003e这个函数会根据g.sched中保存的状态恢复各个寄存器的值并继续运行g\u003c/li\u003e\n      \u003cli\u003e首先针对g.sched.ctxt调用写屏障(GC标记指针存活), ctxt中一般会保存指向[函数+参数]的指针\u003c/li\u003e\n      \u003cli\u003e设置TLS中的g为g.sched.g, 也就是g自身\u003c/li\u003e\n      \u003cli\u003e设置rsp寄存器为g.sched.rsp\u003c/li\u003e\n      \u003cli\u003e设置rax寄存器为g.sched.ret\u003c/li\u003e\n      \u003cli\u003e设置rdx寄存器为g.sched.ctxt (上下文)\u003c/li\u003e\n      \u003cli\u003e设置rbp寄存器为g.sched.rbp\u003c/li\u003e\n      \u003cli\u003e清空sched中保存的信息\u003c/li\u003e\n      \u003cli\u003e跳转到g.sched.pc\u003c/li\u003e\n      \u003cli\u003e因为前面创建goroutine的newproc1函数把返回地址设为了goexit, 函数运行完毕返回时将会调用goexit函数\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eg.sched.pc在G首次运行时会指向目标函数的第一条机器指令,\n如果G被抢占或者等待资源而进入休眠, 在休眠前会保存状态到g.sched,\ng.sched.pc会变为唤醒后需要继续执行的地址, “保存状态”的实现将在下面讲解.\u003c/p\u003e\n\n\u003cp\u003e目标函数执行完毕后会调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/asm_amd64.s#L2336\"\u003egoexit\u003c/a\u003e函数, goexit函数会调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L2643\"\u003egoexit1\u003c/a\u003e函数, goexit1函数会通过\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/asm_amd64.s#L261\"\u003emcall\u003c/a\u003e调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L2654\"\u003egoexit0\u003c/a\u003e函数.\n\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/asm_amd64.s#L261\"\u003emcall\u003c/a\u003e这个函数就是用于实现”保存状态”的, 处理如下:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e设置g.sched.pc等于当前的返回地址\u003c/li\u003e\n  \u003cli\u003e设置g.sched.sp等于寄存器rsp的值\u003c/li\u003e\n  \u003cli\u003e设置g.sched.g等于当前的g\u003c/li\u003e\n  \u003cli\u003e设置g.sched.bp等于寄存器rbp的值\u003c/li\u003e\n  \u003cli\u003e切换TLS中当前的g等于m.g0\u003c/li\u003e\n  \u003cli\u003e设置寄存器rsp等于g0.sched.sp, 使用g0的栈空间\u003c/li\u003e\n  \u003cli\u003e设置第一个参数为原来的g\u003c/li\u003e\n  \u003cli\u003e设置rdx寄存器为指向函数地址的指针(上下文)\u003c/li\u003e\n  \u003cli\u003e调用指定的函数, 不会返回\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003emcall这个函数保存当前的运行状态到g.sched, 然后切换到g0和g0的栈空间, 再调用指定的函数.\n回到g0的栈空间这个步骤非常重要, 因为这个时候g已经中断, 继续使用g的栈空间且其他M唤醒了这个g将会产生灾难性的后果.\nG在中断或者结束后都会通过mcall回到g0的栈空间继续调度, 从goexit调用的mcall的保存状态其实是多余的, 因为G已经结束了.\u003c/p\u003e\n\n\u003cp\u003egoexit1函数会通过mcall调用goexit0函数, \u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L2654\"\u003egoexit0\u003c/a\u003e函数调用时已经回到了g0的栈空间, 处理如下:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e把G的状态由运行中(_Grunning)改为已中止(_Gdead)\u003c/li\u003e\n  \u003cli\u003e清空G的成员\u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L2560\"\u003edropg\u003c/a\u003e函数解除M和G之间的关联\u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L3346\"\u003egfput\u003c/a\u003e函数把G放到P的自由列表中, 下次创建G时可以复用\u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L2205\"\u003eschedule\u003c/a\u003e函数继续调度\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eG结束后回到schedule函数, 这样就结束了一个调度循环.\n不仅只有G结束会重新开始调度, G被抢占或者等待资源也会重新进行调度, 下面继续来看这两种情况.\u003c/p\u003e\n\n\u003ch1 id=\"抢占的实现\"\u003e抢占的实现\u003c/h1\u003e\n\n\u003cp\u003e上面我提到了runtime.main会创建一个额外的M运行\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L4178\"\u003esysmon\u003c/a\u003e函数, 抢占就是在sysmon中实现的.\nsysmon会进入一个无限循环, 第一轮回休眠20us, 之后每次休眠时间倍增, 最终每一轮都会休眠10ms.\nsysmon中有netpool(获取fd事件), retake(抢占), forcegc(按时间强制执行gc), scavenge heap(释放自由列表中多余的项减少内存占用)等处理.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L4306\"\u003eretake\u003c/a\u003e函数负责处理抢占, 流程是:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e枚举所有的P\n    \u003cul\u003e\n      \u003cli\u003e如果P在系统调用中(_Psyscall), 且经过了一次sysmon循环(20us~10ms), 则抢占这个P\n        \u003cul\u003e\n          \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L2022\"\u003ehandoffp\u003c/a\u003e解除M和P之间的关联\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e如果P在运行中(_Prunning), 且经过了一次sysmon循环并且G运行时间超过forcePreemptNS(10ms), 则抢占这个P\n        \u003cul\u003e\n          \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L4401\"\u003epreemptone\u003c/a\u003e函数\n            \u003cul\u003e\n              \u003cli\u003e设置g.preempt = true\u003c/li\u003e\n              \u003cli\u003e设置g.stackguard0 = stackPreempt\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e为什么设置了stackguard就可以实现抢占?\n因为这个值用于检查当前栈空间是否足够, go函数的开头会比对这个值判断是否需要扩张栈.\nstackPreempt是一个特殊的常量, 它的值会比任何的栈地址都要大, 检查时一定会触发栈扩张.\u003c/p\u003e\n\n\u003cp\u003e栈扩张调用的是\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/asm_amd64.s#L421\"\u003emorestack_noctxt\u003c/a\u003e函数, morestack_noctxt函数清空rdx寄存器并调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/asm_amd64.s#L373\"\u003emorestack\u003c/a\u003e函数.\nmorestack函数会保存G的状态到g.sched, 切换到g0和g0的栈空间, 然后调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/stack.go#L922\"\u003enewstack\u003c/a\u003e函数.\nnewstack函数判断g.stackguard0等于stackPreempt, 就知道这是抢占触发的, 这时会再检查一遍是否要抢占:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e如果M被锁定(函数的本地变量中有P), 则跳过这一次的抢占并调用gogo函数继续运行G\u003c/li\u003e\n  \u003cli\u003e如果M正在分配内存, 则跳过这一次的抢占并调用gogo函数继续运行G\u003c/li\u003e\n  \u003cli\u003e如果M设置了当前不能抢占, 则跳过这一次的抢占并调用gogo函数继续运行G\u003c/li\u003e\n  \u003cli\u003e如果M的状态不是运行中, 则跳过这一次的抢占并调用gogo函数继续运行G\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e即使这一次抢占失败, 因为g.preempt等于true, runtime中的一些代码会重新设置stackPreempt以重试下一次的抢占.\n如果判断可以抢占, 则继续判断是否GC引起的, 如果是则对G的栈空间执行标记处理(扫描根对象)然后继续运行,\n如果不是GC引起的则调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L2635\"\u003egopreempt_m\u003c/a\u003e函数完成抢占.\u003c/p\u003e\n\n\u003cp\u003egopreempt_m函数会调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L2599\"\u003egoschedImpl\u003c/a\u003e函数, goschedImpl函数的流程是:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e把G的状态由运行中(_Grunnable)改为待运行(_Grunnable)\u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L2560\"\u003edropg\u003c/a\u003e函数解除M和G之间的关联\u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L4532\"\u003eglobrunqput\u003c/a\u003e把G放到全局运行队列\u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L2205\"\u003eschedule\u003c/a\u003e函数继续调度\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e因为全局运行队列的优先度比较低, 各个M会经过一段时间再去重新获取这个G执行,\n抢占机制保证了不会有一个G长时间的运行导致其他G无法运行的情况发生.\u003c/p\u003e\n\n\u003ch1 id=\"channel的实现\"\u003echannel的实现\u003c/h1\u003e\n\n\u003cp\u003e在goroutine运行的过程中, 有时候需要对资源进行等待, channel就是最典型的资源.\nchannel的数据定义\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/chan.go#L31\"\u003e在这里\u003c/a\u003e, 其中关键的成员如下:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eqcount: 当前队列中的元素数量\u003c/li\u003e\n  \u003cli\u003edataqsiz: 队列可以容纳的元素数量, 如果为0表示这个channel无缓冲区\u003c/li\u003e\n  \u003cli\u003ebuf: 队列的缓冲区, 结构是环形队列\u003c/li\u003e\n  \u003cli\u003eelemsize: 元素的大小\u003c/li\u003e\n  \u003cli\u003eclosed: 是否已关闭\u003c/li\u003e\n  \u003cli\u003eelemtype: 元素的类型, 判断是否调用写屏障时使用\u003c/li\u003e\n  \u003cli\u003esendx: 发送元素的序号\u003c/li\u003e\n  \u003cli\u003erecvx: 接收元素的序号\u003c/li\u003e\n  \u003cli\u003erecvq: 当前等待从channel接收数据的G的链表(实际类型是sudog的链表)\u003c/li\u003e\n  \u003cli\u003esendq: 当前等待发送数据到channel的G的链表(实际类型是sudog的链表)\u003c/li\u003e\n  \u003cli\u003elock: 操作channel时使用的线程锁\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e发送数据到channel实际调用的是\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/chan.go#L112\"\u003eruntime.chansend1\u003c/a\u003e函数, chansend1函数调用了\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/chan.go#L128\"\u003echansend\u003c/a\u003e函数, 流程是:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e检查channel.recvq是否有等待中的接收者的G\n    \u003cul\u003e\n      \u003cli\u003e如果有, 表示channel无缓冲区或者缓冲区为空\u003c/li\u003e\n      \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/chan.go#L250\"\u003esend\u003c/a\u003e函数\n        \u003cul\u003e\n          \u003cli\u003e如果sudog.elem不等于nil, 调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/chan.go#L293\"\u003esendDirect\u003c/a\u003e函数从发送者直接复制元素\u003c/li\u003e\n          \u003cli\u003e等待接收的sudog.elem是指向接收目标的内存的指针, 如果是接收目标是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e_\u003c/code\u003e则elem是nil, 可以省略复制\u003c/li\u003e\n          \u003cli\u003e等待发送的sudog.elem是指向来源目标的内存的指针\u003c/li\u003e\n          \u003cli\u003e复制后调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L300\"\u003egoready\u003c/a\u003e恢复发送者的G\n            \u003cul\u003e\n              \u003cli\u003e切换到g0调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L584\"\u003eready\u003c/a\u003e函数, 调用完切换回来\n                \u003cul\u003e\n                  \u003cli\u003e把G的状态由等待中(_Gwaiting)改为待运行(_Grunnable)\u003c/li\u003e\n                  \u003cli\u003e把G放到P的本地运行队列\u003c/li\u003e\n                  \u003cli\u003e\u003cstrong\u003e如果当前有空闲的P, 但是无自旋的M(nmspinning等于0), 则唤醒或新建一个M\u003c/strong\u003e\u003c/li\u003e\n                \u003c/ul\u003e\n              \u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e从发送者拿到数据并唤醒了G后, 就可以从chansend返回了\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e判断是否可以把元素放到缓冲区中\n    \u003cul\u003e\n      \u003cli\u003e如果缓冲区有空余的空间, 则把元素放到缓冲区并从chansend返回\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e无缓冲区或缓冲区已经写满, 发送者的G需要等待\n    \u003cul\u003e\n      \u003cli\u003e获取当前的g\u003c/li\u003e\n      \u003cli\u003e新建一个sudog\u003c/li\u003e\n      \u003cli\u003e设置sudog.elem = 指向发送内存的指针\u003c/li\u003e\n      \u003cli\u003e设置sudog.g = g\u003c/li\u003e\n      \u003cli\u003e设置sudog.c = channel\u003c/li\u003e\n      \u003cli\u003e设置g.waiting = sudog\u003c/li\u003e\n      \u003cli\u003e把sudog放入channel.sendq\u003c/li\u003e\n      \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L296\"\u003egoparkunlock\u003c/a\u003e函数\n        \u003cul\u003e\n          \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L277\"\u003egopark\u003c/a\u003e函数\n            \u003cul\u003e\n              \u003cli\u003e通过\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/asm_amd64.s#L261\"\u003emcall\u003c/a\u003e函数调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L2573\"\u003epark_m\u003c/a\u003e函数\n                \u003cul\u003e\n                  \u003cli\u003emcall函数和上面说明的一样, 会把当前的状态保存到g.sched, 然后切换到g0和g0的栈空间并执行指定的函数\u003c/li\u003e\n                  \u003cli\u003epark_m函数首先把G的状态从运行中(_Grunning)改为等待中(_Gwaiting)\u003c/li\u003e\n                  \u003cli\u003e然后调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L2560\"\u003edropg\u003c/a\u003e函数解除M和G之间的关联\u003c/li\u003e\n                  \u003cli\u003e再调用传入的解锁函数, 这里的解锁函数会对解除channel.lock的锁定\u003c/li\u003e\n                  \u003cli\u003e最后调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/proc.go#L2205\"\u003eschedule\u003c/a\u003e函数继续调度\u003c/li\u003e\n                \u003c/ul\u003e\n              \u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e从这里恢复表示已经成功发送或者channel已关闭\n    \u003cul\u003e\n      \u003cli\u003e检查sudog.param是否为nil, 如果为nil表示channel已关闭, 抛出panic\u003c/li\u003e\n      \u003cli\u003e否则释放sudog然后返回\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e从channel接收数据实际调用的是\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/chan.go#L387\"\u003eruntime.chanrecv1\u003c/a\u003e函数, chanrecv1函数调用了\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/chan.go#L403\"\u003echanrecv\u003c/a\u003e函数, 流程是:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e检查channel.sendq中是否有等待中的发送者的G\n    \u003cul\u003e\n      \u003cli\u003e如果有, 表示channel无缓冲区或者缓冲区已满, 这两种情况需要分别处理(为了保证入出队顺序一致)\u003c/li\u003e\n      \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/chan.go#L536\"\u003erecv\u003c/a\u003e函数\n        \u003cul\u003e\n          \u003cli\u003e如果无缓冲区, 调用\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/chan.go#L304\"\u003erecvDirect\u003c/a\u003e函数把元素直接复制给接收者\u003c/li\u003e\n          \u003cli\u003e如果有缓冲区代表缓冲区已满\n            \u003cul\u003e\n              \u003cli\u003e把队列中下一个要出队的元素直接复制给接收者\u003c/li\u003e\n              \u003cli\u003e把发送的元素复制到队列中刚才出队的位置\u003c/li\u003e\n              \u003cli\u003e这时候缓冲区仍然是满的, 但是发送序号和接收序号都会增加1\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e复制后调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L300\"\u003egoready\u003c/a\u003e恢复接收者的G, 处理同上\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e把数据交给接收者并唤醒了G后, 就可以从chanrecv返回了\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e判断是否可以从缓冲区获取元素\n    \u003cul\u003e\n      \u003cli\u003e如果缓冲区有元素, 则直接取出该元素并从chanrecv返回\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e无缓冲区或缓冲区无元素, 接收者的G需要等待\n    \u003cul\u003e\n      \u003cli\u003e获取当前的g\u003c/li\u003e\n      \u003cli\u003e新建一个sudog\u003c/li\u003e\n      \u003cli\u003e设置sudog.elem = 指向接收内存的指针\u003c/li\u003e\n      \u003cli\u003e设置sudog.g = g\u003c/li\u003e\n      \u003cli\u003e设置sudog.c = channel\u003c/li\u003e\n      \u003cli\u003e设置g.waiting = sudog\u003c/li\u003e\n      \u003cli\u003e把sudog放入channel.recvq\u003c/li\u003e\n      \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L296\"\u003egoparkunlock\u003c/a\u003e函数, 处理同上\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e从这里恢复表示已经成功接收或者channel已关闭\n    \u003cul\u003e\n      \u003cli\u003e检查sudog.param是否为nil, 如果为nil表示channel已关闭\u003c/li\u003e\n      \u003cli\u003e和发送不一样的是接收不会抛panic, 会通过返回值通知channel已关闭\u003c/li\u003e\n      \u003cli\u003e释放sudog然后返回\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e关闭channel实际调用的是\u003ca href=\"https://github.com/golang/go/blob/go1.9.2/src/runtime/chan.go#L313\"\u003eclosechan\u003c/a\u003e函数, 流程是:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e设置channel.closed = 1\u003c/li\u003e\n  \u003cli\u003e枚举channel.recvq, 清零它们sudog.elem, 设置sudog.param = nil\u003c/li\u003e\n  \u003cli\u003e枚举channel.sendq, 设置sudog.elem = nil, 设置sudog.param = nil\u003c/li\u003e\n  \u003cli\u003e调用\u003ca href=\"https://github.com/golang/go/blob/master/src/runtime/proc.go#L300\"\u003egoready\u003c/a\u003e函数恢复所有接收者和发送者的G\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e可以看到如果G需要等待资源时,\n会记录G的运行状态到g.sched, 然后把状态改为等待中(_Gwaiting), 再让当前的M继续运行其他G.\n等待中的G保存在哪里, 什么时候恢复是等待的资源决定的, 上面对channel的等待会让G放到channel中的链表.\u003c/p\u003e\n\n\u003cp\u003e对网络资源的等待可以看netpoll相关的处理, netpoll在不同系统中的处理都不一样, 有兴趣的可以自己看看.\u003c/p\u003e\n\n\u003ch1 id=\"参考链接\"\u003e参考链接\u003c/h1\u003e\n\n\u003cp\u003ehttps://github.com/golang/go\nhttps://golang.org/s/go11sched\nhttp://supertech.csail.mit.edu/papers/steal.pdf\nhttps://docs.google.com/document/d/1ETuA2IOmnaQ4j81AtTGT40Y4_Jr6_IDASEKg0t0dBR8/edit#heading=h.x4kziklnb8fr\nhttps://blog.altoros.com/golang-part-1-main-concepts-and-project-structure.html\nhttps://blog.altoros.com/golang-internals-part-2-diving-into-the-go-compiler.html\nhttps://blog.altoros.com/golang-internals-part-3-the-linker-and-object-files.html\nhttps://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html\nhttps://blog.altoros.com/golang-internals-part-5-runtime-bootstrap-process.html\nhttps://blog.altoros.com/golang-internals-part-6-bootstrapping-and-memory-allocator-initialization.html\nhttp://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64\nhttp://legendtkl.com/categories/golang\nhttp://www.cnblogs.com/diegodu/p/5803202.html\nhttps://www.douban.com/note/300631999/\nhttp://morsmachine.dk/go-scheduler\u003c/p\u003e\n\n\u003cp\u003elegendtkl很早就已经开始写golang内部实现相关的文章了, 他的文章很有参考价值, 建议同时阅读他写的内容.\nmorsmachine写的针对协程的分析也建议参考.\ngolang中的协程实现非常的清晰, 在这里要再次佩服google工程师的功力, 可以写出这样简单易懂的代码不容易.\u003c/p\u003e\n\n  \u003c/div\u003e\n\n  \u003cdiv class=\"date\"\u003e\n    Written on March 26, 2021\n  \u003c/div\u003e\n\n  \n\u003c/article\u003e",
  "Date": "2021-03-26T00:00:00Z",
  "Author": "老农的博客"
}