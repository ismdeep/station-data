{
  "Source": "303248153.github.io",
  "Title": "Golang源码探索(一) 编译和调试源码",
  "Link": "https://303248153.github.io/go-01/",
  "Content": "\u003carticle class=\"post\"\u003e\n  \u003ch1\u003eGolang源码探索(一) 编译和调试源码\u003c/h1\u003e\n\n  \u003cdiv class=\"entry\"\u003e\n    \u003cp\u003eGO可以说是近几年最热门的新兴语言之一了, 一般人看到\u003cstrong\u003e分布式\u003c/strong\u003e和\u003cstrong\u003e大数据\u003c/strong\u003e就会想到GO,\n这个系列的文章会通过研究golang的源代码来分析内部的实现原理,\n和CoreCLR不同的是, golang的源代码已经被很多人研究过了, 我将会着重研究他们未提到过的部分.\u003c/p\u003e\n\n\u003cp\u003e另一点和CoreCLR不同的是, golang的源代码\u003cstrong\u003e非常易懂\u003c/strong\u003e, 注释也\u003cstrong\u003e非常的丰富\u003c/strong\u003e,\n很明显Google的工程师在写代码的时候有考虑其他人会去看这份代码.\u003c/p\u003e\n\n\u003cp\u003e尽管代码非常易懂, 研究它们还是需要实际运行和调试才能得到更好的理解,\n这个系列分析的golang源代码是Google官方的实现的1.9.2版本, 不适用于其他版本和gccgo等其他实现,\n运行环境是Ubuntu 16.04 LTS 64bit.\u003c/p\u003e\n\n\u003ch1 id=\"编译golang源代码\"\u003e编译golang源代码\u003c/h1\u003e\n\n\u003cp\u003ego的源代码是用go写的, 编译也需要一个可运行的go.\n首先我们从官网下载源代码和二进制文件.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://redirector.gvt1.com/edgedl/go/go1.9.2.src.tar.gz\"\u003ego1.9.2.src.tar.gz\u003c/a\u003e\n\u003ca href=\"https://redirector.gvt1.com/edgedl/go/go1.9.2.linux-amd64.tar.gz\"\u003ego1.9.2.linux-amd64.tar.gz\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e注意两个压缩包解压出来文件夹名称都是go, 我们解压到以下目录:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e源代码: ~/git_go/go_src\n二进制: ~/git_go/go_bin\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171103115003716-874672127.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e编译go之前需要设置环境变量,\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGOROOT_BOOTSTRAP\u003c/code\u003e是go二进制文件夹的所在目录,\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGO_GCFLAGS\u003c/code\u003e是编译go时使用的参数.\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eexport GOROOT_BOOTSTRAP=~/git_go/go_bin\nexport GO_GCFLAGS=\u0026#34;-N -l\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-N\u003c/code\u003e参数代表禁止优化, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-l\u003c/code\u003e参数代表禁止内联, go在编译目标程序的时候会嵌入运行时(runtime)的二进制,\n禁止优化和内联可以让运行时(runtime)中的函数变得更容易调试.\u003c/p\u003e\n\n\u003cp\u003e都准备好以后就可以进入go的源代码文件夹执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eall.bash\u003c/code\u003e编译了:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171103115009576-92975619.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e编译的结果在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e~/git_go/go_src/bin\u003c/code\u003e下:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171103115014045-1759540924.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch1 id=\"调试golang源代码\"\u003e调试golang源代码\u003c/h1\u003e\n\n\u003cp\u003e之前CoreCLR的系列中我使用了lldb, 在这个系列中我继续沿用这个调试器.\n这个系列中使用的是lldb 4.0.\u003c/p\u003e\n\n\u003cp\u003e以以下源代码(hello.go)为例:\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003epackage\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003eprintNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"k\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMillisecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"n\"\u003eprintNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"n\"\u003eprintNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e编译源代码使用以下命令, 这里的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-l\u003c/code\u003e参数的意思和上面一样, 如果有需要还可以加\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-N\u003c/code\u003e参数:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e~/git_go/go_src/bin/go build -gcflags \u0026#34;-l\u0026#34; hello.go\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e编译后使用lldb运行:\u003c/p\u003e\n\n\u003cdiv class=\"language-text highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003elldb ./hello\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171103115022748-1405848210.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003ego里面的函数符号名称的命名规则是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e包名称.函数名称\u003c/code\u003e, 例如主函数的符号名称是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emain.main\u003c/code\u003e, 运行时中的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enewobject\u003c/code\u003e的符号名称是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eruntime.newobject\u003c/code\u003e.\n首先给主函数下一个断点然后运行:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171103115028076-1600078782.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e可以看到成功的进入了主函数, 并且有源代码提示.\n接下来给按文件名和行数来下断点:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171103115036029-2126126710.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e然后查看函数的汇编代码:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171103115040638-1929857151.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e关于lldb的命令可以查看\u003ca href=\"http://lldb.llvm.org/tutorial.html\"\u003e这篇文档\u003c/a\u003e.\n在我使用的环境中lldb可以正常的下断点, 步进和步过go代码或者汇编指令,\n但\u003cstrong\u003e打印变量输出的值有可能是错的\u003c/strong\u003e, 即使不开启优化.\u003c/p\u003e\n\n\u003cp\u003e虽然打印变量这个功能不好用, 我们仍然可以直接让go输出我们想要的值,\n例如修改\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eruntime/malloc.go\u003c/code\u003e输出当前环境下arena|spans|bitmap区的大小:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171103115047029-1330671788.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e修改后进入\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc\u003c/code\u003e并执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e./make.bash\u003c/code\u003e, 然后重新编译目标程序, 运行:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"881857-20171103115053826-1500300209.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e可以看到当前环境下arena是512G, spans是512M, bitmap是16G.\n这个方法虽然比较笨, 但是可以在任何情况下输出我们想要的值.\u003c/p\u003e\n\n\u003cp\u003e此外, go运行时(runtime)的源代码会包括在目标文件中,\n例如你对\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eruntime.newobject\u003c/code\u003e下断点可以对go自身的源代码进行调试.\u003c/p\u003e\n\n\u003ch1 id=\"参考链接\"\u003e参考链接\u003c/h1\u003e\n\n\u003cp\u003ehttps://golang.org\nhttps://golang.org/doc/install/source\nhttps://golang.org/doc/gdb\nhttp://lldb.llvm.org/tutorial.html\nhttp://legendtkl.com/archives\u003c/p\u003e\n\n\u003cp\u003e接下来我将分析golang的任务调度机制和三色GC的具体实现, 敬请期待.\u003c/p\u003e\n\n  \u003c/div\u003e\n\n  \u003cdiv class=\"date\"\u003e\n    Written on March 26, 2021\n  \u003c/div\u003e\n\n  \n\u003c/article\u003e",
  "Date": "2021-03-26T00:00:00Z",
  "Author": "老农的博客"
}