{
  "Source": "akarin.dev",
  "Title": "Phar 包的使用方法",
  "Link": "https://akarin.dev/2020/04/25/phar-packaging/",
  "Content": "\u003carticle class=\"mdui-p-a-3 mdui-card-content mdui-typo\"\u003e\u003cblockquote\u003e\u003cp\u003e封面图：\u003ca href=\"https://www.pixiv.net/artworks/80891263\" target=\"_blank\" rel=\"noopener\"\u003ePixiv ID: 80891263 「あかりちゃん」 by ぽんたす\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e隔壁的 Java 有 JAR 作为打包格式，其实 PHP 也是有叫做 Phar 的打包格式的。Phar 一般有以下几种用途：\u003c/p\u003e\u003cul\u003e\u003cli\u003e打包网站的 PHP 代码，然后用来 \u003ccode\u003erequire\u003c/code\u003e。\u003c/li\u003e\u003cli\u003e直接当成可执行文件使用，可以用来发布 CLI 工具。\u003ca href=\"https://getcomposer.org/\" target=\"_blank\" rel=\"noopener\"\u003eComposer\u003c/a\u003e 的本体实际上就是一个 Phar 文件。\u003c/li\u003e\u003cli\u003e\u003cdel\u003e一些 CTF 的题目的题材\u003c/del\u003e 不是瞎写，从客户端上传的特别构造的 Phar 包确实可以用来绕过上传检测。但是现在说的是用 Phar 部署后端代码，所以就不考虑这种情形了～\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e然而实际上“打包 PHP 代码”似乎并不是一个非常重要的需求。毕竟传统的用 PHP 开发网站的方法是只要把代码文件在硬盘里放好了，就可以\u003cstrong\u003e按照文件路径访问 URL 执行那个文件\u003c/strong\u003e（直接用文件系统作为路由），打包代码好像没什么意义。至于 CLI 工具，有多少人会闲得没事用 PHP 写 CLI 工具？事实上 Phar 也确实变成了一个比较冷门的东西，相关的资料并不多……(-_-｡)\u003c/p\u003e\u003cp\u003e其它语言开发的网站程序，一般是使用“常驻后台”的模式：运行网站程序监听某个端口，\u003cstrong\u003e通过一个路由表来决定访问什么 URL 将执行哪些代码\u003c/strong\u003e（所以也不需要像 PHP 一样总是要在 URL 后面带个 \u003ccode\u003e.php\u003c/code\u003e）。在这种“单入口模式”下，打包就有意义了，毕竟部署的时候如果需要面对一大堆代码文件那还是比较麻烦的，只有一个文件就会方便很多。比如用 Java 编写的 \u003ca href=\"https://github.com/KOHGYLW/kiftd\" target=\"_blank\" rel=\"noopener\"\u003ekiftd\u003c/a\u003e 的程序本体就是一个 JAR 文件，用 Go 编写的 \u003ca href=\"https://github.com/aimerforreimu/auxpi\" target=\"_blank\" rel=\"noopener\"\u003eauxpi\u003c/a\u003e 的程序本体就是编译出来的可执行文件，部署的时候把这个文件往服务器上一丢就完事了。\u003c/p\u003e\u003cp\u003e之前在一位巨佬的安利下试着学习了一下 PHP 的 \u003ca href=\"https://www.swoole.com/\" target=\"_blank\" rel=\"noopener\"\u003eSwoole\u003c/a\u003e 框架，这个框架也是使用了常驻后台的模式。在自己对着 Swoole 的文档摸爬滚打之后，终于试着用它做了一个\u003ca href=\"https://github.com/TransparentLC/cloud-clipboard\" target=\"_blank\" rel=\"noopener\"\u003e在线剪贴板\u003c/a\u003e，等到做完了才想起来，到底要怎么发布成品呢……？\u003c/p\u003e\u003cp\u003e直接发布一大堆 PHP 源代码的话虽然可以，但是太不优雅了。如果能把所有的代码（甚至加上那些静态文件）用 Phar 打包，然后用 \u003ccode\u003ephp app.phar\u003c/code\u003e 直接运行，那就很简洁了！(´• ᵕ •`)*\u003c/p\u003e\u003ch1 id=\"第一个-Phar-包\"\u003e\u003ca href=\"#第一个-Phar-包\" class=\"headerlink\" title=\"第一个 Phar 包\"\u003e\u003c/a\u003e第一个 Phar 包\u003c/h1\u003e\u003cp\u003e默认情况下 PHP 只能读取而不能写入 Phar 包，所以需要先去 \u003ccode\u003ephp.ini\u003c/code\u003e 里面把 \u003ccode\u003ephar.readonly\u003c/code\u003e 的值改成 \u003ccode\u003eOff\u003c/code\u003e。Phar 和 tar、zip 之类的打包格式很像，不过它的特性在于可以直接被 PHP 读取 / 执行。实际上，Phar 里面可以添加不限于 PHP 代码的任何文件。\u003c/p\u003e\u003cp\u003e先来个简单的栗子～使用 PHP 的二维码库 \u003ca href=\"https://github.com/endroid/qr-code\" target=\"_blank\" rel=\"noopener\"\u003eendroid/qr-code\u003c/a\u003e，在 \u003ccode\u003eindex.php\u003c/code\u003e 中根据 URL 参数生成对应内容的二维码。\u003c/p\u003e\u003cp\u003e\u003ccode\u003eindex.php\u003c/code\u003e 的代码：\u003c/p\u003e\u003cpre class=\"language-php line-numbers\" data-language=\"php\"\u003e\u003ccode class=\"language-php\"\u003e\u003cspan class=\"token keyword\"\u003erequire_once\u003c/span\u003e \u003cspan class=\"token constant\"\u003e__DIR__\u003c/span\u003e \u003cspan class=\"token operator\"\u003e.\u003c/span\u003e \u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;/vendor/autoload.php\u0026#39;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token variable\"\u003e$qr\u003c/span\u003e \u003cspan class=\"token operator\"\u003e=\u003c/span\u003e \u003cspan class=\"token keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"token class-name class-name-fully-qualified\"\u003e\u003cspan class=\"token punctuation\"\u003e\\\u003c/span\u003eEndroid\u003cspan class=\"token punctuation\"\u003e\\\u003c/span\u003eQrCode\u003cspan class=\"token punctuation\"\u003e\\\u003c/span\u003eQrCode\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token variable\"\u003e$_GET\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e[\u003c/span\u003e\u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;text\u0026#39;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e]\u003c/span\u003e \u003cspan class=\"token operator\"\u003e??\u003c/span\u003e \u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token function\"\u003eheader\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;Content-Type: \u0026#39;\u003c/span\u003e \u003cspan class=\"token operator\"\u003e.\u003c/span\u003e \u003cspan class=\"token variable\"\u003e$qr\u003c/span\u003e\u003cspan class=\"token operator\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"token function\"\u003egetContentType\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token keyword\"\u003eecho\u003c/span\u003e \u003cspan class=\"token variable\"\u003e$qr\u003c/span\u003e\u003cspan class=\"token operator\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"token function\"\u003ewriteString\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\u003cspan class=\"line-numbers-rows\" aria-hidden=\"true\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e用 Composer 装好依赖以后，目录结构大概就是下面这个样子：\u003c/p\u003e\u003cpre class=\"line-numbers language-none\"\u003e\u003ccode class=\"language-none\"\u003e├─composer.json\n├─composer.lock\n├─index.php\n└─vendor\n  ├─autoload.php\n  └─……（一堆依赖包）\u003cspan class=\"line-numbers-rows\" aria-hidden=\"true\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e虽然部署的时候不需要带上 \u003ccode\u003evendor\u003c/code\u003e 文件夹，只要现场 \u003ccode\u003ecomposer install\u003c/code\u003e 一下就可以了。不过这里就试试用 Phar 对 \u003ccode\u003evendor\u003c/code\u003e 打包好了～在根目录写一个简单的打包脚本：\u003c/p\u003e\u003cpre class=\"language-php line-numbers\" data-language=\"php\"\u003e\u003ccode class=\"language-php\"\u003e\u003cspan class=\"token comment\"\u003e// 完全删除之前的Phar包\u003c/span\u003e\n@\u003cspan class=\"token function\"\u003eunlink\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;vendor.phar\u0026#39;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token comment\"\u003e// 新建一个Phar包，如果文件已存在的话就是在已存在的包上修改\u003c/span\u003e\n\u003cspan class=\"token variable\"\u003e$phar\u003c/span\u003e \u003cspan class=\"token operator\"\u003e=\u003c/span\u003e \u003cspan class=\"token keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"token class-name\"\u003ePhar\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;vendor.phar\u0026#39;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token comment\"\u003e// 将vendor文件夹整个放进Phar包\u003c/span\u003e\n\u003cspan class=\"token variable\"\u003e$phar\u003c/span\u003e\u003cspan class=\"token operator\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"token function\"\u003ebuildFromDirectory\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;vendor\u0026#39;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token comment\"\u003e// 停止缓存，将Phar包写入文件\u003c/span\u003e\n\u003cspan class=\"token variable\"\u003e$phar\u003c/span\u003e\u003cspan class=\"token operator\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"token function\"\u003estopBuffering\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\u003cspan class=\"line-numbers-rows\" aria-hidden=\"true\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在命令行中执行后，就可以得到一个 \u003ccode\u003evendor.phar\u003c/code\u003e。一般情况下引入所有的库都是用 \u003ccode\u003erequire_once __DIR__ . \u0026#39;/vendor/autoload.php\u0026#39;\u003c/code\u003e，现在把它改成从刚刚打好的 Phar 包引入：\u003ccode\u003erequire_once \u0026#39;phar://\u0026#39; . __DIR__ . \u0026#39;/vendor.phar/autoload.php\u0026#39;\u003c/code\u003e，也是可以正常运行的～\u003c/p\u003e\u003cp\u003e甚至还可以对包里面的文件直接使用各种文件处理函数，比如 \u003ccode\u003efile_get_contents(\u0026#39;phar://\u0026#39; . __DIR__ . \u0026#39;/vendor.phar/autoload.php\u0026#39;)\u003c/code\u003e;\u003c/p\u003e\u003cp\u003e这里的 \u003ccode\u003ephar://\u003c/code\u003e 表示从一个 Phar 包中读取文件（如果不写的话就不能和“读取名为 \u003ccode\u003evendor.phar\u003c/code\u003e 的文件夹里面的某个文件”区分了），包里的文件结构和刚才的 \u003ccode\u003evendor\u003c/code\u003e 文件夹是一样的。\u003c/p\u003e\u003cp\u003e将各种文件打包，然后\u003cstrong\u003e用 \u003ccode\u003erequire\u003c/code\u003e 从包中引入\u003c/strong\u003e，这就是 Phar 的基本用法了。因为这些文件不需要通过用户访问 URL 直接获取 / 执行，所以即使它们被打包了也没什么关系。零碎文件太多的情况下，打个包还是很方便的(っ´ω｀)ﾉ\u003c/p\u003e\u003ch1 id=\"处理-Phar-包的文件\"\u003e\u003ca href=\"#处理-Phar-包的文件\" class=\"headerlink\" title=\"处理 Phar 包的文件\"\u003e\u003c/a\u003e处理 Phar 包的文件\u003c/h1\u003e\u003cp\u003e使用 \u003ccode\u003ebuildFromDirectory\u003c/code\u003e 默认是把文件夹内的所有文件都拿去打包，还可以使用一个正则表达式来筛选需要打包的文件，Phar 也支持解包操作。\u003c/p\u003e\u003cpre class=\"language-php line-numbers\" data-language=\"php\"\u003e\u003ccode class=\"language-php\"\u003e\u003cspan class=\"token comment\"\u003e// 只打包PHP文件\u003c/span\u003e\n\u003cspan class=\"token variable\"\u003e$phar\u003c/span\u003e\u003cspan class=\"token operator\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"token function\"\u003ebuildFromDirectory\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;vendor\u0026#39;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e,\u003c/span\u003e \u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;/\\.php$/\u0026#39;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token comment\"\u003e// 解包至extract文件夹\u003c/span\u003e\n\u003cspan class=\"token variable\"\u003e$phar\u003c/span\u003e\u003cspan class=\"token operator\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"token function\"\u003eextractTo\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;extract\u0026#39;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\u003cspan class=\"line-numbers-rows\" aria-hidden=\"true\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e也可以用 \u003ccode\u003eaddFile\u003c/code\u003e 逐个添加文件。在上一个栗子的基础上，假设根目录里还有一个 \u003ccode\u003estatic\u003c/code\u003e 文件夹，用来保存图片等静态资源：\u003c/p\u003e\u003cpre class=\"language-php line-numbers\" data-language=\"php\"\u003e\u003ccode class=\"language-php\"\u003e// 添加一个文件\n$phar-\u0026gt;addFile(\u0026#39;static/image.jpg\u0026#39;);\n// 添加一个文件，但是在包里面是放在another_static目录下\n$phar-\u0026gt;addFile(\u0026#39;static/image.jpg\u0026#39;, \u0026#39;another_static/image.jpg\u0026#39;);\n// 直接指定文件内容，另外还可以删除文件\n$phar-\u0026gt;addFromString(\u0026#39;test.php\u0026#39;, \u0026#39;\u003cspan class=\"token tag\"\u003e\u003cspan class=\"token tag\"\u003e\u003cspan class=\"token punctuation\"\u003e\u0026lt;\u003c/span\u003e?php\u003c/span\u003e \u003cspan class=\"token attr-name\"\u003eecho\u003c/span\u003e \u003cspan class=\"token attr-name\"\u003e\u0026#34;Hello\u003c/span\u003e \u003cspan class=\"token attr-name\"\u003eworld!\u0026#34;;\u0026#39;);\u003c/span\u003e\n\u003cspan class=\"token attr-name\"\u003e$phar-\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003edelete(\u0026#39;test.php\u0026#39;);\n// 还可以使用关联数组的写法\n$phar[\u0026#39;test.php\u0026#39;] = \u0026#39;\u0026lt;?php echo \u0026#34;Hello world!\u0026#34;;\u0026#39;;\nunset($phar[\u0026#39;test.php\u0026#39;]);\u003cspan class=\"line-numbers-rows\" aria-hidden=\"true\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e还可以使用递归遍历的方式将文件夹内的文件打包，在此基础上可以进行进一步的筛选，比如把不需要的测试文件（\u003ccode\u003etests\u003c/code\u003e）、使用文档（\u003ccode\u003edocs\u003c/code\u003e、\u003ccode\u003eexamples\u003c/code\u003e）等等都筛选掉：\u003c/p\u003e\u003cpre class=\"language-php line-numbers\" data-language=\"php\"\u003e\u003ccode class=\"language-php\"\u003e\u003cspan class=\"token variable\"\u003e$files\u003c/span\u003e \u003cspan class=\"token operator\"\u003e=\u003c/span\u003e \u003cspan class=\"token keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"token class-name\"\u003eRecursiveIteratorIterator\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"token keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"token class-name\"\u003eRecursiveDirectoryIterator\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;vendor\u0026#39;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e,\u003c/span\u003e \u003cspan class=\"token class-name static-context\"\u003eRecursiveDirectoryIterator\u003c/span\u003e\u003cspan class=\"token operator\"\u003e::\u003c/span\u003e\u003cspan class=\"token constant\"\u003eSKIP_DOTS\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\n\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token keyword\"\u003eforeach\u003c/span\u003e \u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token variable\"\u003e$files\u003c/span\u003e \u003cspan class=\"token keyword\"\u003eas\u003c/span\u003e \u003cspan class=\"token variable\"\u003e$file\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e \u003cspan class=\"token punctuation\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"token comment\"\u003e// $file是每个文件的路径，方便起见统一使用/作为路径分隔符\u003c/span\u003e\n    \u003cspan class=\"token variable\"\u003e$file\u003c/span\u003e \u003cspan class=\"token operator\"\u003e=\u003c/span\u003e \u003cspan class=\"token function\"\u003estr_replace\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;\\\\\u0026#39;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e,\u003c/span\u003e \u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e,\u003c/span\u003e \u003cspan class=\"token variable\"\u003e$file\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"token comment\"\u003e// 排除.git文件夹里面的文件\u003c/span\u003e\n    \u003cspan class=\"token keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token function\"\u003ein_array\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;.git\u0026#39;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e,\u003c/span\u003e \u003cspan class=\"token function\"\u003eexplode\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e,\u003c/span\u003e \u003cspan class=\"token variable\"\u003e$file\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e \u003cspan class=\"token keyword\"\u003econtinue\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"token variable\"\u003e$phar\u003c/span\u003e\u003cspan class=\"token operator\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"token function\"\u003eaddFile\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token variable\"\u003e$file\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"token keyword\"\u003eecho\u003c/span\u003e \u003cspan class=\"token variable\"\u003e$file\u003c/span\u003e \u003cspan class=\"token operator\"\u003e.\u003c/span\u003e \u003cspan class=\"token string double-quoted-string\"\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token punctuation\"\u003e}\u003c/span\u003e\u003cspan class=\"line-numbers-rows\" aria-hidden=\"true\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"Phar-包的“入口”\"\u003e\u003ca href=\"#Phar-包的“入口”\" class=\"headerlink\" title=\"Phar 包的“入口”\"\u003e\u003c/a\u003ePhar 包的“入口”\u003c/h1\u003e\u003cp\u003e如果只用来文件打包的话，Phar 和一般的压缩包也没什么区别嘛……\u003c/p\u003e\u003cp\u003e执行 Phar 包的时候会先执行一段 PHP 代码，可以设置一个“入口文件”（默认是 \u003ccode\u003eindex.php\u003c/code\u003e）用来自动执行：\u003c/p\u003e\u003cpre class=\"language-php line-numbers\" data-language=\"php\"\u003e\u003ccode class=\"language-php\"\u003e$phar = new Phar(\u0026#39;app.phar\u0026#39;);\n$phar-\u0026gt;addFromString(\u0026#39;hello.php\u0026#39;, \u0026#39;\u003cspan class=\"token tag\"\u003e\u003cspan class=\"token tag\"\u003e\u003cspan class=\"token punctuation\"\u003e\u0026lt;\u003c/span\u003e?php\u003c/span\u003e \u003cspan class=\"token attr-name\"\u003eecho\u003c/span\u003e \u003cspan class=\"token attr-name\"\u003erequire\u003c/span\u003e \u003cspan class=\"token attr-name\"\u003e\u0026#34;include.php\u0026#34;;\u0026#39;);\u003c/span\u003e\n\u003cspan class=\"token attr-name\"\u003e$phar-\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eaddFromString(\u0026#39;include.php\u0026#39;, \u0026#39;\u003cspan class=\"token tag\"\u003e\u003cspan class=\"token tag\"\u003e\u003cspan class=\"token punctuation\"\u003e\u0026lt;\u003c/span\u003e?php\u003c/span\u003e \u003cspan class=\"token attr-name\"\u003ereturn\u003c/span\u003e \u003cspan class=\"token attr-name\"\u003e\u0026#34;Hello\u003c/span\u003e \u003cspan class=\"token attr-name\"\u003eworld!\u0026#34;;\u0026#39;);\u003c/span\u003e\n\u003cspan class=\"token attr-name\"\u003e$phar-\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eaddFile(\u0026#39;static/image.jpg\u0026#39;);\n// createDefaultStub可以根据包里的某个文件生成一段代码\n// setStub可以设定自动执行的代码，配合使用的话就可以实现“入口文件”的功能\n$phar-\u0026gt;setStub($phar-\u0026gt;createDefaultStub(\u0026#39;hello.php\u0026#39;));\n$phar-\u0026gt;stopBuffering();\u003cspan class=\"line-numbers-rows\" aria-hidden=\"true\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这样的话，在命令行中输入 \u003ccode\u003ephp app.phar\u003c/code\u003e，或者在 PHP 代码里输入 \u003ccode\u003erequire_once \u0026#39;phar://\u0026#39; . __DIR__ . \u0026#39;/app.phar\u0026#39;;\u003c/code\u003e，都可以输出“Hello world!”，Phar 包里面的其它文件仍然可以照常读写。\u003c/p\u003e\u003cp\u003e做到这一步已经可以用 Phar 打包 CLI 程序了，那如果在浏览器里访问的话会怎么样呢？在没有额外配置过的 Nginx + PHP 的环境下测试一下：\u003c/p\u003e\u003cul\u003e\u003cli\u003e访问 \u003ccode\u003ehttp://localhost/app.phar\u003c/code\u003e，结果是浏览器询问是否要下载 Phar 文件。\u003c/li\u003e\u003cli\u003e访问 \u003ccode\u003ehttp://localhost/app.phar/\u003c/code\u003e，得到了 404 错误，看来 Phar 并不会像 Nginx 一样自动配置首页，把 \u003ccode\u003exxx/\u003c/code\u003e 当成 \u003ccode\u003exxx/index.php\u003c/code\u003e 来处理。\u003c/li\u003e\u003cli\u003e访问 \u003ccode\u003ehttp://localhost/app.phar/static/image.jpg\u003c/code\u003e，得到的也是 404，由此可见\u003cstrong\u003e并不能直接从浏览器中访问 Phar 里面的静态文件\u003c/strong\u003e。\u003c/li\u003e\u003cli\u003e访问 \u003ccode\u003ehttp://localhost/app.phar/hello.php\u003c/code\u003e，输出了“Hello world!”。\u003c/li\u003e\u003cli\u003e访问 \u003ccode\u003ehttp://localhost/app.phar/include.php\u003c/code\u003e，还是输出了“Hello world!”，按理来说这个文件不会输出任何东西的啊？\u003c/li\u003e\u003cli\u003e访问 \u003ccode\u003ehttp://localhost/app.phar/not_exist.php\u003c/code\u003e，仍然输出了“Hello world!”，为什么这回没有 404 了？\u003c/li\u003e\u003cli\u003e访问 \u003ccode\u003ehttp://localhost/app.phar/path_not_exist/file_not_exist.php\u003c/code\u003e，依然输出了“Hello world!”，这……？！\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e由此得出结论，只要在浏览器中访问时，\u003cstrong\u003eURL 中 Phar 包后面的部分是以 \u003ccode\u003e.php\u003c/code\u003e 结尾的\u003c/strong\u003e（不论最后的这个文件名是什么），那么就一定会执行“入口文件”。所以如果要只用一个 Phar 直接部署网站的话，有两种方法：\u003c/p\u003e\u003cul\u003e\u003cli\u003e如果网站程序是“单入口模式”，也就是所有的路由集中在 \u003ccode\u003eindex.php\u003c/code\u003e 上，那就可以把这个 \u003ccode\u003eindex.php\u003c/code\u003e 设为入口文件打包然后设置禁止访问，再另建一个 \u003ccode\u003eindex.php\u003c/code\u003e，内容只有对这个包的 \u003ccode\u003erequire_once\u003c/code\u003e。\u003c/li\u003e\u003cli\u003e如果是“多入口模式”，也就是把文件系统当成路由，那就需要自己写一个“入口文件”来根据 URL \u003ccode\u003erequire_once\u003c/code\u003e 包里面对应路径的文件。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e另外静态文件是需要单独保存的，即使打了包也不能从浏览器中直接访问。理论上确实可以写个 PHP 文件专门用来从包里面读取并返回文件……但是在大多数情况下，这么做是没有必要的啦╮(╯_╰)╭\u003c/p\u003e\u003ch1 id=\"在打包的时候进行压缩\"\u003e\u003ca href=\"#在打包的时候进行压缩\" class=\"headerlink\" title=\"在打包的时候进行压缩\"\u003e\u003c/a\u003e在打包的时候进行压缩\u003c/h1\u003e\u003cp\u003e只要 PHP 环境附带了 zlib 或 bz2 扩展，就可以在打包的时候对包里面的文件进行压缩，当然也要附带对应的扩展才能使用被压缩过的包。将压缩后的包不经过解压直接解包的话，虽然也能得到文件，但是文件的内容是被压缩过的二进制数据。\u003c/p\u003e\u003cpre class=\"language-php line-numbers\" data-language=\"php\"\u003e\u003ccode class=\"language-php\"\u003e\u003cspan class=\"token comment\"\u003e// 默认是不使用压缩\u003c/span\u003e\n\u003cspan class=\"token variable\"\u003e$phar\u003c/span\u003e\u003cspan class=\"token operator\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"token function\"\u003ecompressFiles\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token class-name static-context\"\u003ePhar\u003c/span\u003e\u003cspan class=\"token operator\"\u003e::\u003c/span\u003e\u003cspan class=\"token constant\"\u003eNONE\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token comment\"\u003e// 可以自行选择压缩算法，bz2比gz有更好的压缩效果\u003c/span\u003e\n\u003cspan class=\"token variable\"\u003e$phar\u003c/span\u003e\u003cspan class=\"token operator\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"token function\"\u003ecompressFiles\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token class-name static-context\"\u003ePhar\u003c/span\u003e\u003cspan class=\"token operator\"\u003e::\u003c/span\u003e\u003cspan class=\"token constant\"\u003eGZ\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token variable\"\u003e$phar\u003c/span\u003e\u003cspan class=\"token operator\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"token function\"\u003ecompressFiles\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token class-name static-context\"\u003ePhar\u003c/span\u003e\u003cspan class=\"token operator\"\u003e::\u003c/span\u003e\u003cspan class=\"token constant\"\u003eBZ2\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token comment\"\u003e// 还可以解压文件\u003c/span\u003e\n\u003cspan class=\"token variable\"\u003e$phar\u003c/span\u003e\u003cspan class=\"token operator\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"token function\"\u003edecompressFiles\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\u003cspan class=\"line-numbers-rows\" aria-hidden=\"true\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果需要更极端的压缩率，还可以像隔壁 JS 一样对代码文件进行 uglify（去掉不必要的换行、注释和空格）。比如对于 JSON 文件可以先反序列化再序列化：\u003c/p\u003e\u003cpre class=\"language-php line-numbers\" data-language=\"php\"\u003e\u003ccode class=\"language-php\"\u003e\u003cspan class=\"token variable\"\u003e$json\u003c/span\u003e \u003cspan class=\"token operator\"\u003e=\u003c/span\u003e \u003cspan class=\"token operator\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"token operator\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;JSON\u0026#39;\u003c/span\u003e\n\u003cspan class=\"token punctuation\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"token string double-quoted-string\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e:\u003c/span\u003e \u003cspan class=\"token string double-quoted-string\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"token string double-quoted-string\"\u003e\u0026#34;baz\u0026#34;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e:\u003c/span\u003e \u003cspan class=\"token number\"\u003e123\u003c/span\u003e\n\u003cspan class=\"token punctuation\"\u003e}\u003c/span\u003e\n\u003cspan class=\"token constant\"\u003eJSON\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token keyword\"\u003eecho\u003c/span\u003e \u003cspan class=\"token function\"\u003ejson_encode\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token function\"\u003ejson_decode\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token variable\"\u003e$json\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e,\u003c/span\u003e \u003cspan class=\"token constant boolean\"\u003etrue\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e,\u003c/span\u003e \u003cspan class=\"token class-name\"\u003eJSON_UNESCAPED_SLASHES\u003c/span\u003e \u003cspan class=\"token operator\"\u003e|\u003c/span\u003e \u003cspan class=\"token class-name\"\u003eJSON_UNESCAPED_UNICODE\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token comment\"\u003e// {\u0026#34;foo\u0026#34;:\u0026#34;bar\u0026#34;,\u0026#34;baz\u0026#34;:123}\u003c/span\u003e\u003cspan class=\"line-numbers-rows\" aria-hidden=\"true\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e那对于 PHP 文件呢？PHP 自带一个 \u003ca href=\"https://www.php.net/manual/zh/function.php-strip-whitespace.php\" target=\"_blank\" rel=\"noopener\"\u003e\u003ccode\u003ephp_strip_whitespace\u003c/code\u003e\u003c/a\u003e 函数，可以从文件中读取代码，然后返回去掉了注释和（大部分）空格的 PHP 代码。\u003c/p\u003e\u003cpre class=\"language-php line-numbers\" data-language=\"php\"\u003e\u003ccode class=\"language-php\"\u003e$php = \u0026lt;\u0026lt;\u0026lt; \u0026#39;PHP\u0026#39;\n\u003cspan class=\"token language-php php\"\u003e\u003cspan class=\"token delimiter important\"\u003e\u0026lt;?php\u003c/span\u003e\n\u003cspan class=\"token comment\"\u003e// 计算1到99的和\u003c/span\u003e\n\u003cspan class=\"token variable\"\u003e$sum\u003c/span\u003e \u003cspan class=\"token operator\"\u003e=\u003c/span\u003e \u003cspan class=\"token number\"\u003e0\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token variable\"\u003e$i\u003c/span\u003e \u003cspan class=\"token operator\"\u003e=\u003c/span\u003e \u003cspan class=\"token number\"\u003e0\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e \u003cspan class=\"token variable\"\u003e$i\u003c/span\u003e \u003cspan class=\"token operator\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"token number\"\u003e100\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e \u003cspan class=\"token variable\"\u003e$i\u003c/span\u003e\u003cspan class=\"token operator\"\u003e++\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e \u003cspan class=\"token punctuation\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"token variable\"\u003e$sum\u003c/span\u003e \u003cspan class=\"token operator\"\u003e+=\u003c/span\u003e \u003cspan class=\"token variable\"\u003e$i\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token punctuation\"\u003e}\u003c/span\u003e\n\u003cspan class=\"token keyword\"\u003eecho\u003c/span\u003e \u003cspan class=\"token variable\"\u003e$sum\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token constant\"\u003ePHP\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token function\"\u003efile_put_contents\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;code.php\u0026#39;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e,\u003c/span\u003e \u003cspan class=\"token variable\"\u003e$php\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token keyword\"\u003eecho\u003c/span\u003e \u003cspan class=\"token function\"\u003ephp_strip_whitespace\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;code.php\u0026#39;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token comment\"\u003e// \u0026lt;?php\u003c/span\u003e\n\u003cspan class=\"token comment\"\u003e// $sum = 0; for ($i = 0; $i \u0026lt; 100; $i++) { $sum += $i; } echo $sum;\u003c/span\u003e\n\n\u003cspan class=\"token comment\"\u003e// 理论上这段代码还能更短一些：\u003c/span\u003e\n\u003cspan class=\"token comment\"\u003e// \u0026lt;?php $sum=0;for($i=0;$i\u0026lt;100;$i++){$sum+=$i;}echo $sum;\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line-numbers-rows\" aria-hidden=\"true\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在这个函数的文档下面，有人写了个\u003ca href=\"https://www.php.net/manual/zh/function.php-strip-whitespace.php#82437\" target=\"_blank\" rel=\"noopener\"\u003e可以更极端地压缩 PHP 代码的函数\u003c/a\u003e，通过 PHP 自带的语法分析函数 \u003ca href=\"https://www.php.net/manual/zh/function.token-get-all.php\" target=\"_blank\" rel=\"noopener\"\u003e\u003ccode\u003etoken_get_all\u003c/code\u003e\u003c/a\u003e 完全重写代码，理论上确实可以把代码压缩到最短，实际上……试着用了这个函数以后，Composer 创建的 \u003ccode\u003eautoload.php\u003c/code\u003e 就抛出了一个语法错误(°ー°〃)\u003c/p\u003e\u003cp\u003e（毕竟这是十二年前的代码，可能是不支持新版 PHP 的语法吧）\u003c/p\u003e\u003chr/\u003e\u003cp\u003e有关 Phar 打包的操作基本上就是这些～\u003c/p\u003e\u003cp\u003e另外，要获取当前正在执行的 Phar 包的路径 / 判断代码是否保存于 Phar 包中，可以使用 \u003ccode\u003ePhar::running()\u003c/code\u003e：\u003c/p\u003e\u003cpre class=\"language-php line-numbers\" data-language=\"php\"\u003e\u003ccode class=\"language-php\"\u003e\u003cspan class=\"token comment\"\u003e// 输出当前所在的Phar包的路径\u003c/span\u003e\n\u003cspan class=\"token comment\"\u003e// 如果不是Phar包的话会返回空字符串\u003c/span\u003e\n\u003cspan class=\"token keyword\"\u003eecho\u003c/span\u003e \u003cspan class=\"token class-name static-context\"\u003ePhar\u003c/span\u003e\u003cspan class=\"token operator\"\u003e::\u003c/span\u003e\u003cspan class=\"token function\"\u003erunning\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token keyword\"\u003eecho\u003c/span\u003e \u003cspan class=\"token class-name static-context\"\u003ePhar\u003c/span\u003e\u003cspan class=\"token operator\"\u003e::\u003c/span\u003e\u003cspan class=\"token function\"\u003erunning\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token constant boolean\"\u003efalse\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\n\u003cspan class=\"token comment\"\u003e// phar://D:/app.phar\u003c/span\u003e\n\u003cspan class=\"token comment\"\u003e// D:/app.phar\u003c/span\u003e\n\n\u003cspan class=\"token comment\"\u003e// 可以设置一个常量判断代码是否在Phar包里运行\u003c/span\u003e\n\u003cspan class=\"token function\"\u003edefine\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token string single-quoted-string\"\u003e\u0026#39;IN_PHAR\u0026#39;\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e,\u003c/span\u003e \u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token keyword type-casting\"\u003ebool\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token class-name static-context\"\u003ePhar\u003c/span\u003e\u003cspan class=\"token operator\"\u003e::\u003c/span\u003e\u003cspan class=\"token function\"\u003erunning\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e(\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e)\u003c/span\u003e\u003cspan class=\"token punctuation\"\u003e;\u003c/span\u003e\u003cspan class=\"line-numbers-rows\" aria-hidden=\"true\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cblockquote class=\"mdui-m-b-0 mdui-m-x-0 mdui-p-y-1\" style=\"border-left:4px solid rgba(0,0,0,.36)\"\u003e\u003cstrong\u003e本作品采用\u003ca href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\"\u003e知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议\u003c/a\u003e进行许可。不允许内容农场类网站、CSDN 用户和微信公众号转载。\u003c/strong\u003e\u003cbr/\u003e\u003cstrong\u003e本文作者：✨小透明・宸✨\u003c/strong\u003e\u003cbr/\u003e\u003cstrong\u003e本文链接：\u003ca href=\"https://akarin.dev/2020/04/25/phar-packaging/\"\u003ehttps://akarin.dev/2020/04/25/phar-packaging/\u003c/a\u003e\u003c/strong\u003e\u003c/blockquote\u003e\u003c/article\u003e",
  "Date": "2020-04-25T07:04:36Z",
  "Author": "✨小透明・宸✨"
}