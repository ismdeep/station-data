{
  "Source": "antonz.org",
  "Title": "SQLite 3.45: Interactive release notes",
  "Link": "https://antonz.org/sqlite-3-45/",
  "Content": "\u003carticle class=\"post\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-md-10 article\"\u003e\u003cheader\u003e\u003ch1\u003eSQLite 3.45: Interactive release notes\u003c/h1\u003e\u003c/header\u003e\u003cp\u003e\u003cem\u003eBased on the \u003ca href=\"https://sqlite.org/releaselog/3_45_0.html\"\u003eSQLite 3.45 release notes\u003c/a\u003e from the SQLite team, with interactive examples added.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eSQLite 3.45 is out, and it has some decent features, so I think now it\u0026#39;s a good time to show them off. Let\u0026#39;s get started!\u003c/p\u003e\u003cscript id=\"mode.sql\" type=\"text/plain\"\u003e\n.mode list\n##CODE##\n\u003c/script\u003e\u003ch2 id=\"jsonb-format\"\u003eJSONB format\u003c/h2\u003e\u003cp\u003eStarting with this release, SQLite allows its internal \u0026#34;parse tree\u0026#34; representation of JSON to be stored on disk, as a BLOB, in a format that called \u0026#34;JSONB\u0026#34;. By storing SQLite\u0026#39;s internal binary representation of JSON directly in the database, applications can bypass the overhead of parsing and rendering JSON when reading and updating JSON values. The internal JSONB format is also uses slightly less disk space then text JSON.\u003c/p\u003e\u003cp\u003eAny SQL function parameter that accepts text JSON as an input also accepts a BLOB in the JSONB format. The function operates the same in either case, except that it runs faster when the input is JSONB, since it does not need to run the JSON parser:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejson_extract\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ejson\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;alice\u0026#34;}\u0026#39;\u003c/span\u003e), \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$.name\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejson_extract\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ejsonb\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;alice\u0026#34;}\u0026#39;\u003c/span\u003e), \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$.name\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejson\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;alice\u0026#34;}\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$.name\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejsonb\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;alice\u0026#34;}\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$.name\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejson\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;[11,12,13]\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#1c01ce\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejsonb\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;[11,12,13]\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#1c01ce\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"sqlite\" editor=\"basic\" template=\"#mode.sql\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ealice\nalice\n\u0026#34;alice\u0026#34;\n\u0026#34;alice\u0026#34;\n12\n12\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eJSONB is a binary representation of JSON used by SQLite and is intended for internal use by SQLite only. Applications \u003cem\u003eshould not use JSONB outside of SQLite\u003c/em\u003e nor try to reverse-engineer the JSONB format.\u003c/p\u003e\u003cp\u003eThe \u0026#34;JSONB\u0026#34; name is inspired by PostgreSQL, but the on-disk format for SQLite\u0026#39;s JSONB is not the same as PostgreSQL\u0026#39;s. The two formats have the same name, but are not binary compatible.\u003c/p\u003e\u003cul\u003e\u003cli\u003eThe PostgreSQL JSONB format claims to offer O(1) lookup of elements in objects and arrays. SQLite\u0026#39;s JSONB format makes no such claim.\u003c/li\u003e\u003cli\u003eSQLite\u0026#39;s JSONB has O(N) time complexity for most operations in SQLite, just like text JSON.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe advantage of JSONB in SQLite is that it is smaller and faster than text JSON — potentially several times faster. There is space in the on-disk JSONB format to add enhancements and future versions of SQLite might include options to provide O(1) lookup of elements in JSONB, but no such capability is currently available.\u003c/p\u003e\u003ch2 id=\"jsonb-functions\"\u003eJSONB functions\u003c/h2\u003e\u003cp\u003eMost SQL functions that return JSON text have a corresponding function that returns the equivalent JSONB. The functions that return JSON in the text format begin with \u003ccode\u003ejson_\u003c/code\u003e and functions that return the binary JSONB format begin with \u003ccode\u003ejsonb_\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eThe \u003ccode\u003ejsonb\u003c/code\u003e, \u003ccode\u003ejsonb_array\u003c/code\u003e and \u003ccode\u003ejsonb_object\u003c/code\u003e return the binary JSONB representation:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003etypeof\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ejsonb\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;alice\u0026#34;}\u0026#39;\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejsonb\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;alice\u0026#34;}\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003etypeof\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ejsonb_array\u003c/span\u003e(\u003cspan style=\"color:#1c01ce\"\u003e11\u003c/span\u003e,\u003cspan style=\"color:#1c01ce\"\u003e12\u003c/span\u003e,\u003cspan style=\"color:#1c01ce\"\u003e13\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejsonb\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ejsonb_array\u003c/span\u003e(\u003cspan style=\"color:#1c01ce\"\u003e11\u003c/span\u003e,\u003cspan style=\"color:#1c01ce\"\u003e12\u003c/span\u003e,\u003cspan style=\"color:#1c01ce\"\u003e13\u003c/span\u003e)) \u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003etypeof\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ejsonb_object\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;alice\u0026#39;\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejsonb\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ejsonb_object\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;alice\u0026#39;\u003c/span\u003e)) \u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"sqlite\" editor=\"basic\" template=\"#mode.sql\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eblob\n{\u0026#34;name\u0026#34;:\u0026#34;alice\u0026#34;}\nblob\n[11,12,13]\nblob\n{\u0026#34;name\u0026#34;:\u0026#34;alice\u0026#34;}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhen extracting text, numeric, null, or boolean values \u003ccode\u003ejsonb_extract\u003c/code\u003e works exactly the same as \u003ccode\u003ejson_extract\u003c/code\u003e. When extracting an array or object — returns the value in JSONB format:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejsonb_extract\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ejsonb\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;alice\u0026#34;}\u0026#39;\u003c/span\u003e), \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$.name\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejsonb_extract\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ejsonb\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;[11,12,13]\u0026#39;\u003c/span\u003e), \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$[1]\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003etypeof\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#000\"\u003ejsonb_extract\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ejsonb\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;{\u0026#34;vals\u0026#34;:[11,12,13]}\u0026#39;\u003c/span\u003e), \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$.vals\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"sqlite\" editor=\"basic\" template=\"#mode.sql\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ealice\n12\nblob\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003e-\u0026gt;\u003c/code\u003e operator returns JSON always returns the RFC 8565 text representation of that JSON, not JSONB:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejson\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;{\u0026#34;vals\u0026#34;:[11,12,13]}\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$.vals\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejsonb\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;{\u0026#34;vals\u0026#34;:[11,12,13]}\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$.vals\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"sqlite\" editor=\"basic\" template=\"#mode.sql\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e[11,12,13]\n[11,12,13]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003ejsonb_insert\u003c/code\u003e, \u003ccode\u003ejsonb_replace\u003c/code\u003e, and \u003ccode\u003ejsonb_set\u003c/code\u003e functions work just like their \u003ccode\u003ejson_\u003c/code\u003e counterparts, except that they return the result in binary JSONB format:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejsonb_insert\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;[11,12]\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$[#]\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#1c01ce\"\u003e13\u003c/span\u003e) \u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#1c01ce\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejsonb_replace\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;alice\u0026#34;}\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$.name\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;bob\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$.name\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejsonb_set\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;alice\u0026#34;}\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$.city\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;berlin\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$.city\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"sqlite\" editor=\"basic\" template=\"#mode.sql\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e13\n\u0026#34;bob\u0026#34;\n\u0026#34;berlin\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe same goes for the \u003ccode\u003ejsonb_patch\u003c/code\u003e and \u003ccode\u003ejsonb_remove\u003c/code\u003e functions:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejsonb_patch\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;alice\u0026#34;}\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;bob\u0026#34;, \u0026#34;city\u0026#34;:\u0026#34;berlin\u0026#34;}\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e) \u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$.city\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejsonb_remove\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;[11,12,13]\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;$[1]\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#1c01ce\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"sqlite\" editor=\"basic\" template=\"#mode.sql\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026#34;berlin\u0026#34;\n13\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd the \u003ccode\u003ejsonb_group_array\u003c/code\u003e and \u003ccode\u003ejsonb_group_object\u003c/code\u003e functions:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#000\"\u003edepartment\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#000\"\u003ejson\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ejsonb_group_array\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ename\u003c/span\u003e)) \u003cspan style=\"color:#a90d91\"\u003eas\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003enames\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eemployees\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003egroup\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003eby\u003c/span\u003e \u003cspan style=\"color:#000\"\u003edepartment\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"sqlite\" editor=\"basic\" template=\"employees.sql\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e┌────────────┬──────────────────────────────────┐\n│ department │              names               │\n├────────────┼──────────────────────────────────┤\n│ hr         │ [\u0026#34;Diane\u0026#34;,\u0026#34;Bob\u0026#34;]                  │\n│ it         │ [\u0026#34;Emma\u0026#34;,\u0026#34;Grace\u0026#34;,\u0026#34;Henry\u0026#34;,\u0026#34;Irene\u0026#34;] │\n│ sales      │ [\u0026#34;Cindy\u0026#34;,\u0026#34;Dave\u0026#34;]                 │\n└────────────┴──────────────────────────────────┘\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThere are no \u003ccode\u003ejsonb_\u003c/code\u003e counterparts for the following functions:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ejson_array_length\njson_error_position\njson_type\njson_valid\njson_quote\njson_each\njson_tree\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"json_valid-function\"\u003e\u003ccode\u003ejson_valid\u003c/code\u003e function\u003c/h2\u003e\u003cp\u003eThe new \u003ccode\u003ejson_valid(X,Y)\u003c/code\u003e function return 1 if the argument X is well-formed JSON, or returns 0 if X is not well-formed.\u003c/p\u003e\u003cp\u003eThe optional Y parameter is an integer bitmask that defines what is meant by \u0026#34;well-formed\u0026#34;. The following bits of Y are currently defined:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003e0x01\u003c/code\u003e → The input is text that strictly complies with canonical RFC-8259 JSON, without any extensions.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e0x02\u003c/code\u003e → The input is text that is JSON with JSON5 extensions.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e0x04\u003c/code\u003e → The input is a BLOB that superficially appears to be JSONB.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e0x08\u003c/code\u003e → The input is a BLOB that strictly conforms to the internal JSONB format.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe most useful Y value is 6 (\u003ccode\u003e0x02 | 0x04\u003c/code\u003e), which checks if X is JSON5 text or JSONB.\u003c/p\u003e\u003cp\u003eIf Y is omitted, it defaults to 1 (X is strictly conforming RFC-8259 JSON text without any extensions). This makes the one-argument version of \u003ccode\u003ejson_valid\u003c/code\u003e compatible with older versions of SQLite, prior to the addition of support for JSON5 and JSONB.\u003c/p\u003e\u003cp\u003eSome examples:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e.\u003cspan style=\"color:#a90d91\"\u003emode\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eline\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejson_valid\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;{\u0026#34;x\u0026#34;:42}\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejson_valid\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;{x:42}\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejson_valid\u003c/span\u003e(\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;{x:42}\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#1c01ce\"\u003e6\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ejson_valid\u003c/span\u003e(\u003cspan style=\"color:#a90d91\"\u003enull\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"sqlite\" editor=\"basic\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ejson_valid(\u0026#39;{\u0026#34;x\u0026#34;:42}\u0026#39;) = 1\njson_valid(\u0026#39;{x:42}\u0026#39;) = 0\njson_valid(\u0026#39;{x:42}\u0026#39;, 6) = 1\njson_valid(null) =\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"performance-considerations\"\u003ePerformance considerations\u003c/h2\u003e\u003cp\u003eMost JSON functions do their internal processing using JSONB. So if the input is text, they first translate the input text to JSONB. If the input is already in the JSONB format, no translation is needed, so this step can be skipped, and performance is better.\u003c/p\u003e\u003cp\u003eFor this reason, when an argument to a JSON function is supplied by another JSON function, it is usually more efficient to use the \u003ccode\u003ejsonb_\u003c/code\u003e variant of the function used as the argument.\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e... json_insert(A, \u0026#39;$.b\u0026#39;, json(C)) ...    ← Less efficient\n... json_insert(A, \u0026#39;$.b\u0026#39;, jsonb(C)) ...   ← More efficient\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe aggregate JSON SQL functions are an exception to this rule. These functions all do their processing using text instead of JSONB. So for the aggregate JSON SQL functions, it is more efficient to pass arguments using \u003ccode\u003ejson_\u003c/code\u003e functions rather than \u003ccode\u003ejsonb_\u003c/code\u003e functions.\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e... json_group_array(json(A))) ...    ← More efficient\n... json_group_array(jsonb(A))) ...   ← Less efficient\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"and-a-few-other-things\"\u003eAnd a few other things\u003c/h2\u003e\u003cul\u003e\u003cli\u003eAdded the \u003ca href=\"https://sqlite.org/c3ref/c_deterministic.html#sqliteresultsubtype\"\u003eSQLITE_RESULT_SUBTYPE\u003c/a\u003e property for application-defined SQL functions.\u003c/li\u003e\u003cli\u003eAdded the \u003ca href=\"https://sqlite.org/fts5.html#the_tokendata_option\"\u003eFTS5 tokendata option\u003c/a\u003e to the FTS5 virtual table.\u003c/li\u003e\u003cli\u003eThe \u003ca href=\"https://sqlite.org/compile.html#direct_overflow_read\"\u003eSQLITE_DIRECT_OVERFLOW_READ\u003c/a\u003e optimization is now enabled by default.\u003c/li\u003e\u003cli\u003eThe query planner does not allow to trick it into using a range constraint when a \u003ca href=\"https://sqlite.org/forum/forumpost/2568d1f6e6\"\u003ebetter equality constraint is available\u003c/a\u003e.\u003c/li\u003e\u003cli\u003eThe query planner now does a better job of disregarding indexes that ANALYZE \u003ca href=\"https://sqlite.org/forum/forumpost/6f0958b03b\"\u003eidentifies as low-quality\u003c/a\u003e.\u003c/li\u003e\u003cli\u003eIncreased the default value for \u003ca href=\"https://sqlite.org/limits.html#max_page_count\"\u003eSQLITE_MAX_PAGE_COUNT\u003c/a\u003e from 1073741824 to 4294967294.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eSee the \u003ca href=\"https://sqlite.org/releaselog/3_45_0.html\"\u003efull release notes\u003c/a\u003e for details.\u003c/p\u003e\u003cp\u003e──\u003c/p\u003e\u003cp\u003e\u003cmark\u003eInteractive examples in this post\u003c/mark\u003e are powered by \u003ca href=\"https://codapi.org/\"\u003e\u003cstrong\u003ecodapi\u003c/strong\u003e\u003c/a\u003e — an open source tool I\u0026#39;m building. Use it to embed live code snippets into your product docs, online course or blog.\u003c/p\u003e\u003cscript defer=\"\" src=\"/modules/codapi/snippet.js\"\u003e\u003c/script\u003e\u003cp\u003e\u003cem\u003e\u003ca href=\"/subscribe/\"\u003e\u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e \u003cstrong\u003eSubscribe\u003c/strong\u003e\u003c/a\u003e\nto keep up with new posts.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cfooter class=\"post__footer\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12\"\u003e\u003cdiv class=\"post__date\"\u003e\u003ctime datetime=\"2024-01-09 00:00:00 +0000 UTC\"\u003e09 Jan, 2024\u003c/time\u003e\u003c/div\u003e\u003cdiv class=\"post__tags\"\u003e\u003ca href=\"/tags/sqlite/\"\u003esqlite\u003c/a\u003e \n\u003ca href=\"/tags/data/\"\u003edata\u003c/a\u003e \u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/footer\u003e\u003c/article\u003e",
  "Date": "2024-01-09T00:00:00Z",
  "Author": "Anton Zhiyanov"
}