{
  "Source": "antonz.org",
  "Title": "Good code criteria",
  "Link": "https://antonz.org/good-code/",
  "Content": "\u003carticle class=\"post\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-md-10 article\"\u003e\u003cheader\u003e\u003ch1\u003eGood code criteria\u003c/h1\u003e\u003c/header\u003e\u003cp\u003eGood code is understandable and not greedy. Let\u0026#39;s talk about it.\u003c/p\u003e\u003ch2 id=\"time-to-understanding\"\u003eTime to understanding\u003c/h2\u003e\u003cp\u003eThe main criterion for good code is the time T it takes for a non-author to understand the code. Not \u0026#34;I kind of get it\u0026#34;, but a deep enough understanding to make changes without breaking anything.\u003c/p\u003e\u003cp\u003eThe lower the T, the better the code.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eLet\u0026#39;s say Alice and Bob implemented the same feature, and you want to change the code behind it. If you understand Alice\u0026#39;s code in 10 minutes, and Bob\u0026#39;s code in 30 minutes — Alice\u0026#39;s code is better. It doesn\u0026#39;t matter how layered Bob\u0026#39;s architecture is, whether he used a functional approach, a modern framework, etc.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eThe T-metric is different for a beginner and an experienced programmer. So it makes sense to focus on the average level of developers who will be working with the code.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eIf you have a team of people working for 10+ years, and everyone writes compilers in their spare time — even very complex code will have a low T. If you have a huge turnover and hire yesterday\u0026#39;s students — the code should be rather primitive, so that T does not shoot through the roof.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eIt\u0026#39;s not easy to measure T directly, so teams typically focus on practices that affect T, such as:\u003c/p\u003e\u003cul\u003e\u003cli\u003eenforcing code style,\u003c/li\u003e\u003cli\u003echecking for code smells,\u003c/li\u003e\u003cli\u003ereducing cyclomatic complexity,\u003c/li\u003e\u003cli\u003emaintaining acyclic module dependencies,\u003c/li\u003e\u003cli\u003ecode review.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"resource-usage\"\u003eResource usage\u003c/h2\u003e\u003cp\u003eThe second criterion for good code is the amount of resources R it consumes (time, CPU, memory, disk). The smaller the R, the better the code.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eLet\u0026#39;s say Alice and Bob implemented a feature with the same T. If Alice\u0026#39;s code time complexity is O(n) and Bob\u0026#39;s is O(n²) (with the same consumption of other resources) — Alice\u0026#39;s code is better (assuming real-world n is sufficiently large).\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eWhat about the infamous \u0026#34;sacrifice readability for efficiency\u0026#34;? For each problem, there is a resource consumption threshold R₀ that the solution should not exceed. If R \u0026lt; R₀, there is no point in degrading T to further reduce R.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eIf a non-critical service processes a request in 50ms, you don\u0026#39;t need to rewrite it from Python to C to reduce the time to 5ms. It is already fast enough.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eIf the code has a high T and a low R, in most cases you can reduce T (refactor the code for better understanding) while keeping R \u0026lt; R₀ (keeping resource usage reasonably low).\u003c/p\u003e\u003cp\u003eSometimes, when resources are limited or the input data is huge, it may not be possible to achieve R \u0026lt; R₀ (e.g., making a task run in less than 5ms) without degrading T (e.g., inlining function calls and reimplementing stdlib data structures). Then you really have to sacrifice clarity for efficiency. But be sure of the following:\u003c/p\u003e\u003col\u003e\u003cli\u003eThis is a last resort, when all the other options have failed.\u003c/li\u003e\u003cli\u003eThe code sections where T is traded for R are well isolated.\u003c/li\u003e\u003cli\u003eThere are few such sections.\u003c/li\u003e\u003cli\u003eThey are well documented.\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\u003cp\u003eHere is the mnemonic for good code:\u003c/p\u003e\u003cblockquote class=\"big\"\u003e\u003ccode\u003eT↓ R\u0026lt;R\u003csub\u003e0\u003c/sub\u003e\u003c/code\u003e\u003c/blockquote\u003e\u003cp\u003eOptimize T, keep an eye on R. Your team will thank you.\u003c/p\u003e\u003cp\u003e\u003cem\u003e\u003ca href=\"/subscribe/\"\u003e\u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e \u003cstrong\u003eSubscribe\u003c/strong\u003e\u003c/a\u003e\nto keep up with new posts.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cfooter class=\"post__footer\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12\"\u003e\u003cdiv class=\"post__date\"\u003e\u003ctime datetime=\"2021-06-02 11:00:00 +0000 UTC\"\u003e02 Jun, 2021\u003c/time\u003e\u003c/div\u003e\u003cdiv class=\"post__tags\"\u003e\u003ca href=\"/tags/software/\"\u003esoftware\u003c/a\u003e \u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/footer\u003e\u003c/article\u003e",
  "Date": "2021-06-02T11:00:00Z",
  "Author": "Anton Zhiyanov"
}