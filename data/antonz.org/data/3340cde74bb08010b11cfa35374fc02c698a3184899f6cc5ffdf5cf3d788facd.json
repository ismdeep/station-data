{
  "Source": "antonz.org",
  "Title": "Automate your Python project with Makefile",
  "Link": "https://antonz.org/makefile-automation/",
  "Content": "\u003carticle class=\"post\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-md-10 article\"\u003e\u003cheader\u003e\u003ch1\u003eAutomate your Python project with Makefile\u003c/h1\u003e\u003c/header\u003e\u003cp\u003eWhen working on a library or application, certain tasks tend to show up over and over again:\u003c/p\u003e\u003cul\u003e\u003cli\u003echecking the code with linters,\u003c/li\u003e\u003cli\u003erunning tests with coverage,\u003c/li\u003e\u003cli\u003edeploying with Docker,\u003c/li\u003e\u003cli\u003e...\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eJS developers are lucky (ha!): their \u003ccode\u003epackage.json\u003c/code\u003e has a special \u003ccode\u003escripts\u003c/code\u003e section for this stuff:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e{\n    ...\n    \u0026#34;scripts\u0026#34;: {\n        \u0026#34;format\u0026#34;: \u0026#34;prettier --write \\\u0026#34;src/**/*.ts\\\u0026#34;\u0026#34;,\n        \u0026#34;lint\u0026#34;: \u0026#34;tslint -p tsconfig.json\u0026#34;,\n        \u0026#34;test\u0026#34;: \u0026#34;jest --coverage --config jestconfig.json\u0026#34;,\n    },\n    ...\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNothing like this is provided with Python. You can, of course, make a \u003ccode\u003e.sh\u003c/code\u003e script for each task. But it litters the project directory, and it\u0026#39;s better to keep all such tasks together. Installing a separate task runner or using the one built into IDE also seems weird.\u003c/p\u003e\u003cp\u003eGood news: Linux and macOS already have a great task automation tool for any project - \u003ccode\u003eMakefile\u003c/code\u003e.\u003c/p\u003e\u003ch2 id=\"makefile-for-task-automation\"\u003eMakefile for task automation\u003c/h2\u003e\u003cp\u003ePerhaps you, like me, thought that Makefile is a relict from the 70s, useful for compiling \u003ccode\u003eC\u003c/code\u003e programs. True. But it is also perfectly suitable for automating any tasks in general.\u003c/p\u003e\u003cp\u003eHere\u0026#39;s what it might look like in a python project. Create a file named \u003ccode\u003eMakefile\u003c/code\u003e:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecoverage:  ## Run tests with coverage\n\tcoverage erase\n\tcoverage run --include=podsearch/* -m pytest -ra\n\tcoverage report -m\n\ndeps:  ## Install dependencies\n\tpip install black coverage flake8 mypy pylint pytest tox\n\nlint:  ## Lint and static-check\n\tflake8 podsearch\n\tpylint podsearch\n\tmypy podsearch\n\npush:  ## Push code with tags\n\tgit push \u0026amp;\u0026amp; git push --tags\n\ntest:  ## Run tests\n\tpytest -ra\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd run linter with tests, for example:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ make lint coverage\n\nflake8 podsearch\npylint podsearch\n...\nmypy podsearch\n...\ncoverage erase\ncoverage run —include=podsearch/* -m pytest -ra\n...\ncoverage report -m\nName                    Stmts   Miss  Cover   Missing\n-----------------------------------------------------\npodsearch/__init__.py       2      0   100%\npodsearch/http.py          17      0   100%\npodsearch/searcher.py      51      0   100%\n-----------------------------------------------------\nTOTAL                      70      0   100%\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"features\"\u003eFeatures\u003c/h2\u003e\u003ch3 id=\"task-steps\"\u003eTask steps\u003c/h3\u003e\u003cp\u003eA task can include multiple steps, like \u003ccode\u003elint\u003c/code\u003e in the example above:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003elint:\n\tflake8 podsearch\n\tpylint podsearch\n\tmypy podsearch\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eEach step is executed in a separate subprocess. To run a chain of actions (for example, \u003ccode\u003ecd\u003c/code\u003e and \u003ccode\u003egit pull\u003c/code\u003e) combine them through \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epush:\n\tgit push \u0026amp;\u0026amp; git push --tags\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"task-dependencies\"\u003eTask dependencies\u003c/h3\u003e\u003cp\u003eConsider the \u003ccode\u003etest\u003c/code\u003e task, which should first perform linting, and then run the tests. Specify \u003ccode\u003elint\u003c/code\u003e as a dependency for \u003ccode\u003etest\u003c/code\u003e, and you\u0026#39;re done:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003etest: lint\n\tpytest -ra\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can specify multiple space-separated dependencies. Or tasks can explicitly call each other:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003elint:\n\tflake8 podsearch\n\tpylint podsearch\n\tmypy podsearch\n\ntest:\n\tpytest -ra\n\nprepare:\n\tmake lint\n\tmake test\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"task-parameters\"\u003eTask parameters\u003c/h3\u003e\u003cp\u003eConsider the \u003ccode\u003eserve\u003c/code\u003e task which serves a static site, with IP and port specified as parameters. No problem:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eserve:\n\tpython -m http.server dist --bind $(bind) $(port)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eRun task with parameters:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e$ make serve \u003cspan style=\"color:#000\"\u003ebind\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e=\u003c/span\u003elocalhost \u003cspan style=\"color:#000\"\u003eport\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#1c01ce\"\u003e3000\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can specify default parameter values:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ebind ?= localhost\nport ?= 3000\nserve:\n\tpython -m http.server dist --bind $(bind) $(port)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow they are optional when running \u003ccode\u003emake\u003c/code\u003e:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e$ make serve \u003cspan style=\"color:#000\"\u003ebind\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e192.168.0.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e$ make serve \u003cspan style=\"color:#000\"\u003eport\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#1c01ce\"\u003e8000\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e$ make serve\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"and-so-much-more\"\u003eAnd so much more\u003c/h3\u003e\u003cp\u003eIf basic features are not enough, there are some great in-depth guides:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://makefiletutorial.com\"\u003eLearn Makefiles with the tastiest examples\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://swcarpentry.github.io/make-novice/reference.html\"\u003eAutomation and Make\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"in-the-wild\"\u003eIn the wild\u003c/h2\u003e\u003cp\u003eHere is a Makefile from one of my projects (podcast search tool):\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://github.com/nalgeon/podsearch-py/blob/master/Makefile\"\u003epodsearch\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eMakefiles are great for automating routine tasks, regardless of the language you prefer. Use them!\u003c/p\u003e\u003cp\u003e\u003cem\u003e\u003ca href=\"/subscribe/\"\u003e\u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e \u003cstrong\u003eSubscribe\u003c/strong\u003e\u003c/a\u003e\nto keep up with new posts.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cfooter class=\"post__footer\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12\"\u003e\u003cdiv class=\"post__date\"\u003e\u003ctime datetime=\"2021-03-16 17:15:00 +0000 UTC\"\u003e16 Mar, 2021\u003c/time\u003e\u003c/div\u003e\u003cdiv class=\"post__tags\"\u003e\u003ca href=\"/tags/python/\"\u003epython\u003c/a\u003e \u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/footer\u003e\u003c/article\u003e",
  "Date": "2021-03-16T17:15:00Z",
  "Author": "Anton Zhiyanov"
}