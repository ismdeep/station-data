{
  "Source": "antonz.org",
  "Title": "Why use SQL window functions",
  "Link": "https://antonz.org/why-use-sql-window-functions/",
  "Content": "\u003carticle class=\"post\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-md-10 article\"\u003e\u003cheader\u003e\u003ch1\u003eWhy use SQL window functions\u003c/h1\u003e\u003c/header\u003e\u003cp\u003e\u003cem\u003eThis is an excerpt from my book \u003ca href=\"/sql-window-functions-book\"\u003eSQL Window Functions Explained\u003c/a\u003e. The book is a clear and visual introduction to the topic with lots of practical exercises.\u003c/em\u003e\u003c/p\u003e\u003cp\u003e​In short, window functions help you create great analytical reports without Excel or Pandas.\u003c/p\u003e\u003cp\u003eThe easiest way to explain this is through concrete examples. We will work with a toy employee table:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e┌────┬──────────┬────────┬────────────┬────────┐\n│ id │   name   │  city  │ department │ salary │\n├────┼──────────┼────────┼────────────┼────────┤\n│ 11 │ Diane    │ London │ hr         │ 70     │\n│ 12 │ Bob      │ London │ hr         │ 78     │\n│ 21 │ Emma     │ London │ it         │ 84     │\n│ 22 │ Grace    │ Berlin │ it         │ 90     │\n│ 23 │ Henry    │ London │ it         │ 104    │\n│ 24 │ Irene    │ Berlin │ it         │ 104    │\n│ 25 │ Frank    │ Berlin │ it         │ 120    │\n│ 31 │ Cindy    │ Berlin │ sales      │ 96     │\n│ 32 │ Dave     │ London │ sales      │ 96     │\n│ 33 │ Alice    │ Berlin │ sales      │ 100    │\n└────┴──────────┴────────┴────────────┴────────┘\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet\u0026#39;s look at some tasks that are convenient to solve using SQL window functions. We\u0026#39;ll save the technical details for later chapters. For now, let\u0026#39;s review the use cases.\u003c/p\u003e\u003cp\u003eHowever, if you are eager to start practicing, feel free to skip this chapter and move on to the \u003ca href=\"/sql-window-functions-ranking/\"\u003enext one\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"ranking\"\u003eRanking\u003c/h2\u003e\u003cp\u003eRanking means coming up with all kinds of ratings, from the winners of the World Swimming Championships to the Forbes 500.\u003c/p\u003e\u003cp\u003eWe will rank employees.\u003c/p\u003e\u003ch3 id=\"overall-salary-rating\"\u003eOverall salary rating\u003c/h3\u003e\u003cp\u003eLet\u0026#39;s rank employees by salary:\u003c/p\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-sm-6\"\u003e\u003cfigure\u003e\u003cimg src=\"ranking-1.png\" alt=\"Ranking example #1\"/\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003erank\u003c/code\u003e column shows each employee\u0026#39;s position in the overall rating.\u003c/p\u003e\u003cp\u003eSome colleagues have the same salary (Henry and Irene, Cindy and Dave) — so they receive the same rank.\u003c/p\u003e\u003ch3 id=\"salary-rating-by-department\"\u003eSalary rating by department\u003c/h3\u003e\u003cp\u003eSimilar rating, but created for each department separately instead of the entire company:\u003c/p\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-sm-6\"\u003e\u003cfigure\u003e\u003cimg src=\"ranking-2.png\" alt=\"Ranking example #2\"/\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003erank\u003c/code\u003e column shows each employee\u0026#39;s position in the department\u0026#39;s rating.\u003c/p\u003e\u003ch3 id=\"salary-groups\"\u003eSalary groups\u003c/h3\u003e\u003cp\u003eLet\u0026#39;s divide the employees into three groups according to their salary:\u003c/p\u003e\u003cul\u003e\u003cli\u003ehighly-paid,\u003c/li\u003e\u003cli\u003emedium-paid,\u003c/li\u003e\u003cli\u003elow-paid.\u003c/li\u003e\u003c/ul\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-sm-6\"\u003e\u003cfigure\u003e\u003cimg src=\"ranking-3.png\" alt=\"Ranking example #3\"/\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003etile\u003c/code\u003e column shows which group each employee belongs to.\u003c/p\u003e\u003ch3 id=\"the-most-precious-colleagues\"\u003eThe most \u0026#34;precious\u0026#34; colleagues\u003c/h3\u003e\u003cp\u003eLet\u0026#39;s find the highest-paid people in each department:\u003c/p\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-sm-6\"\u003e\u003cfigure\u003e\u003cimg src=\"ranking-4.png\" alt=\"Ranking example #4\"/\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eNo more salary raises for them, I guess.\u003c/p\u003e\u003ch2 id=\"comparing-by-offset\"\u003eComparing by offset\u003c/h2\u003e\u003cp\u003eComparing by offset means looking at the difference between neighboring values. For example, if you compare the countries ranked 5th and 6th in the world in terms of GDP, how different are they? What about 1st and 6th?\u003c/p\u003e\u003cp\u003eSometimes we compare with boundaries instead of neighbors. For example, there are 50 top tennis players in the world, and Maria Sakkari is ranked 10th. How do her stats compare to Iga Swiatek, who is ranked 1st? How does she compare to Lin Zhou, who is ranked 50th?\u003c/p\u003e\u003cp\u003eWe will compare employees.\u003c/p\u003e\u003ch3 id=\"salary-difference-with-the-neighbor\"\u003eSalary difference with the neighbor\u003c/h3\u003e\u003cp\u003eLet\u0026#39;s arrange employees by salary and see if the gap between neighbors is large:\u003c/p\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-sm-6\"\u003e\u003cfigure\u003e\u003cimg src=\"offset-1.png\" alt=\"Offset example #1\"/\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003ediff\u003c/code\u003e column shows how much the employee\u0026#39;s salary differs from the previous colleague\u0026#39;s salary. As you can see, there are no significant gaps. The largest ones are Diane and Bob (11%) and Irene and Frank (15%).\u003c/p\u003e\u003ch3 id=\"department-salary-range\"\u003eDepartment salary range\u003c/h3\u003e\u003cp\u003eLet\u0026#39;s see how an employee\u0026#39;s salary compares to the minimum and maximum wages in their department:\u003c/p\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-sm-6\"\u003e\u003cfigure\u003e\u003cimg src=\"offset-2.png\" alt=\"Offset example #2\"/\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eFor each employee, the \u003ccode\u003elow\u003c/code\u003e column shows the minimum salary in the department, and the \u003ccode\u003ehigh\u003c/code\u003e column shows the maximum. As you can see, the salary ranges for HR and Sales are narrow, but the range for IT is much wider.\u003c/p\u003e\u003ch2 id=\"aggregation\"\u003eAggregation\u003c/h2\u003e\u003cp\u003eAggregation means counting totals or averages. For example, the average salary per city. Or the total number of gold medals for each country in the Olympic rankings.\u003c/p\u003e\u003cp\u003eWe will aggregate employee salaries.\u003c/p\u003e\u003ch3 id=\"comparing-with-the-salary-fund\"\u003eComparing with the salary fund\u003c/h3\u003e\u003cp\u003eEach department has a salary fund — money spent monthly on paying employees\u0026#39; salaries. Let\u0026#39;s see what percentage of this fund represents each employee\u0026#39;s salary:\u003c/p\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-sm-6\"\u003e\u003cfigure\u003e\u003cimg src=\"aggregation-1.png\" alt=\"Aggregation example #1\"/\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003efund\u003c/code\u003e column shows the department\u0026#39;s salary fund, and the \u003ccode\u003eperc\u003c/code\u003e column shows the employee\u0026#39;s salary share of that fund. As you can see, everything is more or less even in HR and Sales, but IT has a noticeable spread of salaries.\u003c/p\u003e\u003ch3 id=\"comparing-to-the-average-salary\"\u003eComparing to the average salary\u003c/h3\u003e\u003cp\u003eI wonder how large is the spread of salaries inside departments. Let\u0026#39;s calculate the deviation of each employee\u0026#39;s salary from the average department salary:\u003c/p\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-sm-6\"\u003e\u003cfigure\u003e\u003cimg src=\"aggregation-2.png\" alt=\"Aggregation example #2\"/\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eThe result confirms the previous observation: IT salaries range from -16% to +20% of the average, while other departments are within 5%.\u003c/p\u003e\u003ch2 id=\"rolling-aggregates\"\u003eRolling aggregates\u003c/h2\u003e\u003cp\u003e​Rolling aggregates (also known as sliding or moving aggregates) are just totals — sums or averages. But instead of calculating them across all elements, we take a different approach.\u003c/p\u003e\u003cp\u003eConsider the company our employees work for. Here is a table with its income and expenses for nine months of the year:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e┌──────┬───────┬────────┬─────────┐\n│ year │ month │ income │ expense │\n├──────┼───────┼────────┼─────────┤\n│ 2020 │ 1     │ 94     │ 82      │\n│ 2020 │ 2     │ 94     │ 75      │\n│ 2020 │ 3     │ 94     │ 104     │\n│ 2020 │ 4     │ 100    │ 94      │\n│ 2020 │ 5     │ 100    │ 99      │\n│ 2020 │ 6     │ 100    │ 105     │\n│ 2020 │ 7     │ 100    │ 95      │\n│ 2020 │ 8     │ 100    │ 110     │\n│ 2020 │ 9     │ 104    │ 104     │\n└──────┴───────┴────────┴─────────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"expenses-moving-average\"\u003eExpenses moving average\u003c/h3\u003e\u003cp\u003eJudging by the data, the income is growing: 94 in January → 104 in September. But are the expenses growing as well? It\u0026#39;s hard to tell right away: expenses vary from month to month. To smooth out these spikes, we\u0026#39;ll use the \u0026#34;3-month average\u0026#34; — the average between the previous, current, and next month\u0026#39;s expenses for each month:\u003c/p\u003e\u003cul\u003e\u003cli\u003emoving average for February = (January + February + March) / 3;\u003c/li\u003e\u003cli\u003efor March = (February + March + April) / 3;\u003c/li\u003e\u003cli\u003efor April = (March + April + May) / 3;\u003c/li\u003e\u003cli\u003eetc.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eLet\u0026#39;s calculate the moving average for all months:\u003c/p\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-sm-6\"\u003e\u003cfigure\u003e\u003cimg src=\"rolling-1.png\" alt=\"Rolling aggregates example #1\"/\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eNow it is clear that expenses are steadily growing.\u003c/p\u003e\u003ch3 id=\"cumulative-income\"\u003eCumulative income\u003c/h3\u003e\u003cp\u003eThanks to the moving average, we know that income and expenses are growing. But how do they relate to each other? We want to understand whether the company is \u0026#34;in the black\u0026#34; or \u0026#34;in the red\u0026#34;, considering all the money earned and spent.\u003c/p\u003e\u003cp\u003eIt is essential to see the values for each month, not only for the end of the year. If everything is OK at the end of the year, but the company went negative in June — this is a potential problem (companies call this situation a \u0026#34;cash gap\u0026#34;).\u003c/p\u003e\u003cp\u003eLet\u0026#39;s calculate income and expenses by month as a cumulative total:\u003c/p\u003e\u003cul\u003e\u003cli\u003ecumulative income for January = January;\u003c/li\u003e\u003cli\u003efor February = January + February;\u003c/li\u003e\u003cli\u003efor March = January + February + March;\u003c/li\u003e\u003cli\u003efor April = January + February + March + April;\u003c/li\u003e\u003cli\u003eetc.\u003c/li\u003e\u003c/ul\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-sm-8\"\u003e\u003cfigure\u003e\u003cimg src=\"rolling-2.png\" alt=\"Rolling aggregates example #2\"/\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eNow it is clear that the company is doing well. In some months, expenses exceed income, but there is no gap due to the accumulated cash reserve.\u003c/p\u003e\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\u003cp\u003eSQL window functions help to solve the following tasks:\u003c/p\u003e\u003cul\u003e\u003cli\u003eRanking (all kinds of ratings).\u003c/li\u003e\u003cli\u003eComparing by offset (neighboring elements and boundaries).\u003c/li\u003e\u003cli\u003eAggregation (sum and average).\u003c/li\u003e\u003cli\u003eRolling aggregates (sum and average in dynamics).\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eOf course, this is not an exhaustive list. But I hope it is now clear why window functions are useful for data analysis. In the \u003ca href=\"/sql-window-functions-ranking\"\u003enext chapter\u003c/a\u003e, we will examine what windows are and how to use them.\u003c/p\u003e\u003cp\u003e\u003ca class=\"button\" href=\"https://antonz.gumroad.com/l/sql-windows\"\u003eGet the book\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003e\u003ca href=\"/subscribe/\"\u003e\u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e \u003cstrong\u003eSubscribe\u003c/strong\u003e\u003c/a\u003e\nto keep up with new posts.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cfooter class=\"post__footer\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12\"\u003e\u003cdiv class=\"post__date\"\u003e\u003ctime datetime=\"2023-01-31 08:30:00 +0000 UTC\"\u003e31 Jan, 2023\u003c/time\u003e\u003c/div\u003e\u003cdiv class=\"post__tags\"\u003e\u003ca href=\"/tags/data/\"\u003edata\u003c/a\u003e \u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/footer\u003e\u003c/article\u003e",
  "Date": "2023-01-31T08:30:00Z",
  "Author": "Anton Zhiyanov"
}