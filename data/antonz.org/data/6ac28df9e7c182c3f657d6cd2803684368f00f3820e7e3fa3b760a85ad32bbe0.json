{
  "Source": "antonz.org",
  "Title": "Grep by example: Interactive guide",
  "Link": "https://antonz.org/grep-by-example/",
  "Content": "\u003carticle class=\"post\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-md-10 article\"\u003e\u003cheader\u003e\u003ch1\u003eGrep by example: Interactive guide\u003c/h1\u003e\u003c/header\u003e\u003cp\u003egrep is the ultimate text search tool available on virtually all Linux machines. While there are now better alternatives (such as \u003ca href=\"https://codapi.org/try/ripgrep/\"\u003eripgrep\u003c/a\u003e), you will still often find yourself on a server where grep is the only search tool available. So it\u0026#39;s nice to have a working knowledge of it.\u003c/p\u003e\u003cp\u003eThat\u0026#39;s why is I\u0026#39;ve created this interactive step-by-step guide to grep operations. You can read it from start to finish to (hopefully) learn more about grep, or jump to a specific use case that interests you.\u003c/p\u003e\u003cp\u003eFeel free to experiment with the examples by changing the commands and clicking \u003cem\u003eRun\u003c/em\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href=\"#basics\"\u003eBasics\u003c/a\u003e ·\n\u003ca href=\"#recursive-search\"\u003eRecursive search\u003c/a\u003e ·\n\u003ca href=\"#search-options\"\u003eSearch options\u003c/a\u003e ·\n\u003ca href=\"#output-options\"\u003eOutput options\u003c/a\u003e ·\n\u003ca href=\"#final-thoughts\"\u003eFinal thoughts\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis guide is also available in other formats:\u003c/p\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-6 col-sm-4\"\u003e\u003cfigure\u003e\u003ca href=\"https://github.com/nalgeon/grep-by-example\" class=\"img-link\"\u003e\u003cimg alt=\"Minibook\" src=\"./ebook.png\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e\u003ca href=\"https://github.com/nalgeon/grep-by-example\"\u003ePDF minibook\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv class=\"col-xs-6 col-sm-4\"\u003e\u003cfigure\u003e\u003ca href=\"https://codapi.org/grep/\" class=\"img-link\"\u003e\u003cimg alt=\"Playground\" src=\"./playground.png\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e\u003ca href=\"https://codapi.org/grep/\"\u003ePlayground\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2 id=\"basics\"\u003eBasics\u003c/h2\u003e\u003cp\u003eBasically, grep works like this:\u003c/p\u003e\u003cul\u003e\u003cli\u003eYou give it a search pattern and a file.\u003c/li\u003e\u003cli\u003egrep reads the file line by line, printing the lines that match the pattern and ignoring others.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eLet\u0026#39;s look at an example. We\u0026#39;ll search the \u003ca href=\"https://github.com/rednafi/httpurr\"\u003ehttpurr\u003c/a\u003e source code, which I\u0026#39;ve already downloaded to the \u003ccode\u003e/opt/httpurr\u003c/code\u003e directory like this:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003ecd\u003c/span\u003e /opt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003ecurl -OL https://github.com/rednafi/httpurr/archive/refs/tags/v0.1.2.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003etar xvzf v0.1.2.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003emv httpurr-0.1.2 httpurr\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003ecd\u003c/span\u003e httpurr\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"#search-in-file\"\u003eSearch in file\u003c/a\u003e ·\n\u003ca href=\"#matches\"\u003eMatches\u003c/a\u003e ·\n\u003ca href=\"#regular-expressions\"\u003eRegular expressions\u003c/a\u003e ·\n\u003ca href=\"#fixed-strings\"\u003eFixed strings\u003c/a\u003e ·\n\u003ca href=\"#multiple-patterns\"\u003eMultiple patterns\u003c/a\u003e\u003c/p\u003e\u003ch3 id=\"search-in-file\"\u003eSearch in file\u003c/h3\u003e\u003cp\u003eLet\u0026#39;s find all occurrences of the word \u003ccode\u003ecodes\u003c/code\u003e in \u003ccode\u003eREADME.md\u003c/code\u003e:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -n codes README.md\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e3:    \u0026lt;strong\u0026gt;\u0026lt;i\u0026gt; \u0026gt;\u0026gt; HTTP status codes on speed dial \u0026lt;\u0026lt; \u0026lt;/i\u0026gt;\u0026lt;/strong\u0026gt;\n30:* List the HTTP status codes:\n54:* Filter the status codes by categories:\n124:\t\t  Print HTTP status codes by category with --list;\n131:\t\t  Print HTTP status codes\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003egrep read the contents of \u003ccode\u003eREADME.md\u003c/code\u003e, and for each line that contained \u003ccode\u003ecodes\u003c/code\u003e, grep printed it to the terminal.\u003c/p\u003e\u003cp\u003egrep also included the line number for each line, thanks to the \u003ccode\u003e-n\u003c/code\u003e (\u003ccode\u003e--line-number\u003c/code\u003e) option.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eNot all grep versions support the long option syntax (e.g. \u003ccode\u003e--line-number\u003c/code\u003e). If you get an error using the long version, try the short one (e.g. \u003ccode\u003e-n\u003c/code\u003e) — it may work fine.\u003c/p\u003e\u003c/blockquote\u003e\u003ch3 id=\"matches\"\u003eMatches\u003c/h3\u003e\u003cp\u003egrep uses \u003cem\u003epartial matches\u003c/em\u003e by default:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -n descr README.md\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e81:* Display the description of a status code:\n127:\t\t  Print the description of an HTTP status code\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe word \u003ccode\u003edescription\u003c/code\u003e matches the \u003ccode\u003edescr\u003c/code\u003e search pattern.\u003c/p\u003e\u003cp\u003eTo search for \u003cem\u003ewhole words\u003c/em\u003e instead, use the \u003ccode\u003e-w\u003c/code\u003e (\u003ccode\u003e--word-regexp\u003c/code\u003e) option:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -n --word-regexp code README.md\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e81:* Display the description of a status code:\n84:\thttpurr --code 410\n94:\tThe HyperText Transfer Protocol (HTTP) 410 Gone client error response code\n99:\tcode should be used instead.\n126:\t  -c, --code [status code]\n127:\t\t  Print the description of an HTTP status code\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003egrep found strings containing the word \u003ccode\u003ecode\u003c/code\u003e, but not \u003ccode\u003ecodes\u003c/code\u003e. Try removing \u003ccode\u003e--word-regexp\u003c/code\u003e and see how the results change.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eWhen using multiple short options, you can combine them like this: \u003ccode\u003egrep -nw code README.md\u003c/code\u003e. This gives exactly the same result as using the separate options (\u003ccode\u003e-n -w\u003c/code\u003e).\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eTo search for \u003cem\u003ewhole lines\u003c/em\u003e instead of partial matches of whole words, use the \u003ccode\u003e-x\u003c/code\u003e (\u003ccode\u003e--line-regexp\u003c/code\u003e) option:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -n --line-regexp end httpurr.rb\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e47:end\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTry removing \u003ccode\u003e--line-regexp\u003c/code\u003e and see how the results change.\u003c/p\u003e\u003ch3 id=\"regular-expressions\"\u003eRegular expressions\u003c/h3\u003e\u003cp\u003eTo make grep use regular expressions (\u003cem\u003ePerl-compatible regular expressions\u003c/em\u003e in grep terminology), use the \u003ccode\u003e-P\u003c/code\u003e (\u003ccode\u003e--perl-regexp\u003c/code\u003e) option.\u003c/p\u003e\u003cp\u003eLet\u0026#39;s find all lines with a word that contains \u003ccode\u003eres\u003c/code\u003e followed by other letters:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pn \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;res\\w+\u0026#39;\u003c/span\u003e README.md\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e94:\tThe HyperText Transfer Protocol (HTTP) 410 Gone client error response code\n95:\tindicates that access to the target resource is no longer available at the\n152:of the rest.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003e\\w+\u003c/code\u003e means \u0026#34;one or more word-like characters\u0026#34; (e.g. letters like \u003ccode\u003ep\u003c/code\u003e or \u003ccode\u003eo\u003c/code\u003e, but not punctuation like \u003ccode\u003e.\u003c/code\u003e or \u003ccode\u003e!\u003c/code\u003e), so \u003ccode\u003eresponse\u003c/code\u003e, \u003ccode\u003eresource\u003c/code\u003e, and \u003ccode\u003erest\u003c/code\u003e all match.\u003c/p\u003e\u003cdiv class=\"boxed\"\u003e\u003ch3\u003eRegular expression dialects in grep\u003c/h3\u003e\u003cp\u003eWithout \u003ccode\u003e--perl-regexp\u003c/code\u003e, grep treats the search pattern as something called a \u003cem\u003ebasic regular expression\u003c/em\u003e. While regular expressions are quite common in the software world, the \u003cem\u003ebasic\u003c/em\u003e dialect is really weird, so it\u0026#39;s better not to use it at all.\u003c/p\u003e\u003cp\u003eAnother dialect supported by grep is \u003ca href=\"https://www.gnu.org/software/grep/manual/grep.html#Regular-Expressions\"\u003eextended\u003c/a\u003e regular expressions. You can use the \u003ccode\u003e-E\u003c/code\u003e (\u003ccode\u003e--extended-regexp\u003c/code\u003e) option to enable them. Extended regular expressions are \u003cem\u003ealmost\u003c/em\u003e like normal regular expressions, but not quite. So I wouldn\u0026#39;t use them either.\u003c/p\u003e\u003cp\u003eSome grep versions do not support \u003ccode\u003e--perl-regexp\u003c/code\u003e. For those, \u003ccode\u003e--extended-regexp\u003c/code\u003e is the best you can get.\u003c/p\u003e\u003c/div\u003e\u003cp\u003eSuppose we are only interested in 4 letter words starting with \u003ccode\u003eres\u003c/code\u003e:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pn \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;res\\w\\b\u0026#39;\u003c/span\u003e README.md\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e152:of the rest.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003e\\b\u003c/code\u003e means \u0026#34;word boundary\u0026#34; (e.g. a space, a punctuation character, or the end of a line), so \u003ccode\u003erest\u003c/code\u003e matches, but \u003ccode\u003eresponse\u003c/code\u003e and \u003ccode\u003eresource\u003c/code\u003e don\u0026#39;t.\u003c/p\u003e\u003cp\u003eFinally, let\u0026#39;s search for 3-digit numbers (showing first 10 matches with \u003ccode\u003ehead\u003c/code\u003e):\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pn \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;\\d\\d\\d\u0026#39;\u003c/span\u003e README.md | head\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e45:\t100    Continue\n46:\t101    Switching Protocols\n47:\t102    Processing\n48:\t103    Early Hints\n69:\t200    OK\n70:\t201    Created\n71:\t202    Accepted\n72:\t203    Non-Authoritative Information\n73:\t204    No Content\n74:\t205    Reset Content\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eA full tutorial on regular expressions is beyond the scope of this guide, but grep\u0026#39;s \u0026#34;Perl-compatible\u0026#34; syntax is documented in the \u003ca href=\"https://www.pcre.org/current/doc/html/pcre2syntax.html\"\u003ePCRE2 manual\u003c/a\u003e.\u003c/p\u003e\u003ch3 id=\"fixed-strings\"\u003eFixed strings\u003c/h3\u003e\u003cp\u003eWhat if we want to search for a \u003cem\u003eliteral\u003c/em\u003e string instead of a regular expression? Suppose we are interested in a word \u003ccode\u003ecode\u003c/code\u003e followed by a dot:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pn \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;code.\u0026#39;\u003c/span\u003e src/data.go | head\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e8:The HTTP 100 Continue informational status response code indicates that\n14:status code in response before sending the body.\n31:The HTTP 101 Switching Protocols response code indicates a protocol to which the\n53:Deprecated: This status code is deprecated. When used, clients may still accept\n56:The HTTP 102 Processing informational status response code indicates to client\n59:This status code is only sent if the server expects the request to take\n112:The HTTP 200 OK success status response code indicates that the request has\n141:The HTTP 201 Created success status response code indicates that the request has\n149:The common use case of this status code is as the result of a POST request.\n165:The HTTP 202 Accepted response status code indicates that the request has been\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSince \u003ccode\u003e.\u003c/code\u003e means \u0026#34;any character\u0026#34; in regular expressions, our pattern also matches \u003ccode\u003ecode \u003c/code\u003e, \u003ccode\u003ecodes\u003c/code\u003e and other cases we are not interested in.\u003c/p\u003e\u003cp\u003eTo treat the pattern as a literal string, use the \u003ccode\u003e-F\u003c/code\u003e (\u003ccode\u003e--fixed-strings\u003c/code\u003e) option:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Fn \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;code.\u0026#39;\u003c/span\u003e src/data.go\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e197:to responses with any status code.\n283:Browsers accessing web pages will never encounter this status code.\n695:to an error code.\n1027:erroneous cases it happens, they will handle it as a generic 400 status code.\n1051:Regular web servers will normally not return this status code. But some other\n1418:then the server responds with the 510 status code.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eMuch better!\u003c/p\u003e\u003ch3 id=\"multiple-patterns\"\u003eMultiple patterns\u003c/h3\u003e\u003cp\u003eTo search for multiple patterns, list them with the \u003ccode\u003e-e\u003c/code\u003e (\u003ccode\u003e--regexp\u003c/code\u003e) option. grep will output lines matching at least one of the specified patterns.\u003c/p\u003e\u003cp\u003eFor example, search for \u003ccode\u003emake\u003c/code\u003e or \u003ccode\u003erun\u003c/code\u003e:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -En -e make -e run README.md\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e139:* Go to the root directory and run:\n141:\tmake init\n145:\tmake lint\n149:\tmake test\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp\u003eUnfortunately, grep can\u0026#39;t use Perl-compatible regular expressions (\u003ccode\u003e-P\u003c/code\u003e) with multiple patterns. So we are stuck with the extended (\u003ccode\u003e-E\u003c/code\u003e) dialect.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eIf you have many patterns, it may be easier to put them in a file and point grep to it with \u003ccode\u003e-f\u003c/code\u003e (\u003ccode\u003e--file\u003c/code\u003e):\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eecho\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;install\u0026#39;\u003c/span\u003e \u0026gt; /tmp/patterns.txt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eecho\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;make\u0026#39;\u003c/span\u003e \u0026gt;\u0026gt; /tmp/patterns.txt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eecho\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;run\u0026#39;\u003c/span\u003e \u0026gt;\u0026gt; /tmp/patterns.txt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -En --file\u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e/tmp/patterns.txt README.md\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e13:* On MacOS, brew install:\n17:\t    \u0026amp;\u0026amp; brew install httpurr\n20:* Or elsewhere, go install:\n23:\tgo install github.com/rednafi/httpurr/cmd/httpurr\n139:* Go to the root directory and run:\n141:\tmake init\n145:\tmake lint\n149:\tmake test\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"recursive-search\"\u003eRecursive search\u003c/h2\u003e\u003cp\u003egrep searches directories recursively when called with the \u003ccode\u003e-r\u003c/code\u003e (\u003ccode\u003e--recursive\u003c/code\u003e) option.\u003c/p\u003e\u003cp\u003e\u003ca href=\"#search-in-directory\"\u003eSearch in directory\u003c/a\u003e ·\n\u003ca href=\"#file-globs\"\u003eFile globs\u003c/a\u003e ·\n\u003ca href=\"#binary-files\"\u003eBinary files\u003c/a\u003e\u003c/p\u003e\u003ch3 id=\"search-in-directory\"\u003eSearch in directory\u003c/h3\u003e\u003cp\u003eLet\u0026#39;s find all unexported functions (they start with a lowercase letter):\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;func [a-z]\\w+\u0026#39;\u003c/span\u003e .\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e./cmd/httpurr/main.go:12:func main() {\n./src/cli.go:16:func formatStatusText(text string) string {\n./src/cli.go:21:func printHeader(w *tabwriter.Writer) {\n./src/cli.go:35:func printStatusCodes(w *tabwriter.Writer, category string) error {\n./src/cli.go:105:func printStatusText(w *tabwriter.Writer, code string) error {\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis search returned matches from both the \u003ccode\u003ecmd\u003c/code\u003e and \u003ccode\u003esrc\u003c/code\u003e directories. If you are only interested in \u003ccode\u003ecmd\u003c/code\u003e, specify it instead of \u003ccode\u003e.\u003c/code\u003e:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;func [a-z]\\w+\u0026#39;\u003c/span\u003e cmd\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecmd/httpurr/main.go:12:func main() {\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo search multiple directories, list them all like this:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;func [a-z]\\w+\u0026#39;\u003c/span\u003e cmd src\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecmd/httpurr/main.go:12:func main() {\nsrc/cli.go:16:func formatStatusText(text string) string {\nsrc/cli.go:21:func printHeader(w *tabwriter.Writer) {\nsrc/cli.go:35:func printStatusCodes(w *tabwriter.Writer, category string) error {\nsrc/cli.go:105:func printStatusText(w *tabwriter.Writer, code string) error {\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"file-globs\"\u003eFile globs\u003c/h3\u003e\u003cp\u003eLet\u0026#39;s search for \u003ccode\u003ehttpurr\u003c/code\u003e:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr --max-count\u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#1c01ce\"\u003e5\u003c/span\u003e httpurr .\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e./README.md:2:    \u0026lt;h1\u0026gt;ᗢ httpurr\u0026lt;/h1\u0026gt;\n./README.md:16:\tbrew tap rednafi/httpurr https://github.com/rednafi/httpurr \\\n./README.md:17:\t    \u0026amp;\u0026amp; brew install httpurr\n./README.md:23:\tgo install github.com/rednafi/httpurr/cmd/httpurr\n./README.md:33:\thttpurr --list\n./cmd/httpurr/main.go:4:\t\u0026#34;github.com/rednafi/httpurr/src\u0026#34;\n./go.mod:1:module github.com/rednafi/httpurr\n./httpurr.rb:7:  homepage \u0026#34;https://github.com/rednafi/httpurr\u0026#34;\n./httpurr.rb:12:      url \u0026#34;https://github.com/rednafi/httpurr/releases/download/v0.1.1/httpurr_Darwin_x86_64.tar.gz\u0026#34;\n./httpurr.rb:16:        bin.install \u0026#34;httpurr\u0026#34;\n./httpurr.rb:20:      url \u0026#34;https://github.com/rednafi/httpurr/releases/download/v0.1.1/httpurr_Darwin_arm64.tar.gz\u0026#34;\n./httpurr.rb:24:        bin.install \u0026#34;httpurr\u0026#34;\n./src/cli.go:24:\tfmt.Fprintf(w, \u0026#34;\\nᗢ httpurr\\n\u0026#34;)\n./src/cli_test.go:64:\twant := \u0026#34;\\nᗢ httpurr\\n==========\\n\\n\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNote that I have limited the number of results per file to 5 with the \u003ccode\u003e-m\u003c/code\u003e (\u003ccode\u003e--max-count\u003c/code\u003e) option to keep the results readable in case there are many matches.\u003c/p\u003e\u003cp\u003eQuite a lot of results. Let\u0026#39;s narrow it down by searching only in \u003ccode\u003e.go\u003c/code\u003e files:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr --include\u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;*.go\u0026#39;\u003c/span\u003e httpurr .\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e./cmd/httpurr/main.go:4:\t\u0026#34;github.com/rednafi/httpurr/src\u0026#34;\n./src/cli.go:24:\tfmt.Fprintf(w, \u0026#34;\\nᗢ httpurr\\n\u0026#34;)\n./src/cli_test.go:64:\twant := \u0026#34;\\nᗢ httpurr\\n==========\\n\\n\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003e--include\u003c/code\u003e option (there is no short version) takes a \u003cem\u003eglob\u003c/em\u003e (filename pattern), typically containing a fixed part (\u003ccode\u003e.go\u003c/code\u003e in our example) and a wildcard \u003ccode\u003e*\u003c/code\u003e (\u0026#34;anything but the path separator\u0026#34;).\u003c/p\u003e\u003cp\u003eAnother example — search in files named \u003ccode\u003ehttp\u003c/code\u003e-something:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr --include\u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;http*\u0026#39;\u003c/span\u003e httpurr .\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e./httpurr.rb:7:  homepage \u0026#34;https://github.com/rednafi/httpurr\u0026#34;\n./httpurr.rb:12:      url \u0026#34;https://github.com/rednafi/httpurr/releases/download/v0.1.1/httpurr_Darwin_x86_64.tar.gz\u0026#34;\n./httpurr.rb:16:        bin.install \u0026#34;httpurr\u0026#34;\n./httpurr.rb:20:      url \u0026#34;https://github.com/rednafi/httpurr/releases/download/v0.1.1/httpurr_Darwin_arm64.tar.gz\u0026#34;\n./httpurr.rb:24:        bin.install \u0026#34;httpurr\u0026#34;\n./httpurr.rb:31:      url \u0026#34;https://github.com/rednafi/httpurr/releases/download/v0.1.1/httpurr_Linux_arm64.tar.gz\u0026#34;\n./httpurr.rb:35:        bin.install \u0026#34;httpurr\u0026#34;\n./httpurr.rb:39:      url \u0026#34;https://github.com/rednafi/httpurr/releases/download/v0.1.1/httpurr_Linux_x86_64.tar.gz\u0026#34;\n./httpurr.rb:43:        bin.install \u0026#34;httpurr\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo \u003cem\u003enegate\u003c/em\u003e the glob, use the \u003ccode\u003e--exclude\u003c/code\u003e option. For example, search everywhere except the \u003ccode\u003e.go\u003c/code\u003e files:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr --exclude \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;*.go\u0026#39;\u003c/span\u003e def .\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e./.goreleaser.yml:1:# This is an example .goreleaser.yml file with some sensible defaults.\n./httpurr.rb:15:      def install\n./httpurr.rb:21:      sha256 \u0026#34;82acefd1222f6228636f2cda6518e0316f46624398adc722defb55c68ac3bb30\u0026#34;\n./httpurr.rb:23:      def install\n./httpurr.rb:34:      def install\n./httpurr.rb:42:      def install\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo apply multiple filters, specify multiple glob options. For example, find all functions except those in test files:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr --include \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;*.go\u0026#39;\u003c/span\u003e --exclude \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;*_test.go\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;func \u0026#39;\u003c/span\u003e .\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e./cmd/httpurr/main.go:12:func main() {\n./src/cli.go:16:func formatStatusText(text string) string {\n./src/cli.go:21:func printHeader(w *tabwriter.Writer) {\n./src/cli.go:35:func printStatusCodes(w *tabwriter.Writer, category string) error {\n./src/cli.go:105:func printStatusText(w *tabwriter.Writer, code string) error {\n./src/cli.go:123:func Cli(w *tabwriter.Writer, version string, exitFunc func(int)) {\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"binary-files\"\u003eBinary files\u003c/h3\u003e\u003cp\u003eBy default, grep does not ignore binary files:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr aha .\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"binary.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egrep: ./data.bin: binary file matches\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eMost of the time, this is probably not what you want. If you\u0026#39;re searching in a directory that might contain binary files, it\u0026#39;s better to ignore them altogether with the \u003ccode\u003e-I\u003c/code\u003e (\u003ccode\u003e--binary-files=without-match\u003c/code\u003e) option:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr --binary-files\u003cspan style=\"color:#000\"\u003e=\u003c/span\u003ewithout-match aha .\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"binary.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e(not found)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf for some reason you want grep to search binary files and print the actual matches (as it does with text files), use the \u003ccode\u003e-a\u003c/code\u003e (\u003ccode\u003e--text\u003c/code\u003e) option.\u003c/p\u003e\u003ch2 id=\"search-options\"\u003eSearch options\u003c/h2\u003e\u003cp\u003egrep supports a couple of additional search options you may find handy.\u003c/p\u003e\u003cp\u003e\u003ca href=\"#ignore-case\"\u003eIgnore case\u003c/a\u003e ·\n\u003ca href=\"#inverse-matching\"\u003eInverse matching\u003c/a\u003e\u003c/p\u003e\u003ch3 id=\"ignore-case\"\u003eIgnore case\u003c/h3\u003e\u003cp\u003eLet\u0026#39;s find all occurrences of the word \u003ccode\u003ecodes\u003c/code\u003e in \u003ccode\u003eREADME.md\u003c/code\u003e:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr codes README.md\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e3:    \u0026lt;strong\u0026gt;\u0026lt;i\u0026gt; \u0026gt;\u0026gt; HTTP status codes on speed dial \u0026lt;\u0026lt; \u0026lt;/i\u0026gt;\u0026lt;/strong\u0026gt;\n30:* List the HTTP status codes:\n54:* Filter the status codes by categories:\n124:\t\t  Print HTTP status codes by category with --list;\n131:\t\t  Print HTTP status codes\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt returns \u003ccode\u003ecodes\u003c/code\u003e matches, but not \u003ccode\u003eCodes\u003c/code\u003e because grep is case-sensitive by default. To change this, use \u003ccode\u003e-i\u003c/code\u003e (\u003ccode\u003e--ignore-case\u003c/code\u003e):\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr --ignore-case codes README.md\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e3:    \u0026lt;strong\u0026gt;\u0026lt;i\u0026gt; \u0026gt;\u0026gt; HTTP status codes on speed dial \u0026lt;\u0026lt; \u0026lt;/i\u0026gt;\u0026lt;/strong\u0026gt;\n30:* List the HTTP status codes:\n40:\tStatus Codes\n54:* Filter the status codes by categories:\n64:\tStatus Codes\n124:\t\t  Print HTTP status codes by category with --list;\n131:\t\t  Print HTTP status codes\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"inverse-matching\"\u003eInverse matching\u003c/h3\u003e\u003cp\u003eTo find lines that \u003cem\u003edo not\u003c/em\u003e contain the pattern, use \u003ccode\u003e-v\u003c/code\u003e (\u003ccode\u003e--invert-match\u003c/code\u003e). For example, find the non-empty lines without the \u003ccode\u003e@\u003c/code\u003e symbol:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Enr --invert-match -e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;@\u0026#39;\u003c/span\u003e -e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;^$\u0026#39;\u003c/span\u003e Makefile\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e1:.PHONY: lint\n2:lint:\n8:.PHONY: lint-check\n9:lint-check:\n14:.PHONY: test\n15:test:\n20:.PHONY: clean\n21:clean:\n27:.PHONY: init\n28:init:\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"output-options\"\u003eOutput options\u003c/h2\u003e\u003cp\u003egrep supports a number of additional output options you may find handy.\u003c/p\u003e\u003cp\u003e\u003ca href=\"#count-matches\"\u003eCount matches\u003c/a\u003e ·\n\u003ca href=\"#limit-matches\"\u003eLimit matches\u003c/a\u003e ·\n\u003ca href=\"#show-matches-only\"\u003eShow matches only\u003c/a\u003e ·\n\u003ca href=\"#show-files-only\"\u003eShow files only\u003c/a\u003e ·\n\u003ca href=\"#show-context\"\u003eShow context\u003c/a\u003e ·\n\u003ca href=\"#silent-mode\"\u003eSilent mode\u003c/a\u003e ·\n\u003ca href=\"#colors\"\u003eColors\u003c/a\u003e\u003c/p\u003e\u003ch3 id=\"count-matches\"\u003eCount matches\u003c/h3\u003e\u003cp\u003eTo count the number of matched lines (per file), use \u003ccode\u003e-c\u003c/code\u003e (\u003ccode\u003e--count\u003c/code\u003e). For example, count the number of functions in each \u003ccode\u003e.go\u003c/code\u003e file:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr --count --include \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;*.go\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;func \u0026#39;\u003c/span\u003e .\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e./cmd/httpurr/main.go:1\n./src/cli.go:5\n./src/cli_test.go:10\n./src/data_test.go:2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNote that \u003ccode\u003e--count\u003c/code\u003e counts the number of \u003cem\u003elines\u003c/em\u003e, not the number of matches. For example, there are 6 words \u003ccode\u003estring\u003c/code\u003e in \u003ccode\u003esrc/cli.go\u003c/code\u003e, but two of them are on the same line, so \u003ccode\u003e--count\u003c/code\u003e reports 5:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -nrw --count string src/cli.go\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e5\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"limit-matches\"\u003eLimit matches\u003c/h3\u003e\u003cp\u003eTo limit the number of matching lines per file, use the \u003ccode\u003e-m\u003c/code\u003e (\u003ccode\u003e--max-count\u003c/code\u003e) option:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnrw --max-count\u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#1c01ce\"\u003e5\u003c/span\u003e func .\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e./cmd/httpurr/main.go:12:func main() {\n./src/cli.go:16:func formatStatusText(text string) string {\n./src/cli.go:21:func printHeader(w *tabwriter.Writer) {\n./src/cli.go:35:func printStatusCodes(w *tabwriter.Writer, category string) error {\n./src/cli.go:105:func printStatusText(w *tabwriter.Writer, code string) error {\n./src/cli.go:123:func Cli(w *tabwriter.Writer, version string, exitFunc func(int)) {\n./src/cli_test.go:15:func TestFormatStatusText(t *testing.T) {\n./src/cli_test.go:54:func TestPrintHeader(t *testing.T) {\n./src/cli_test.go:71:func TestPrintStatusCodes(t *testing.T) {\n./src/cli_test.go:159:\t\tt.Run(want, func(t *testing.T) {\n./src/cli_test.go:168:func TestPrintStatusText(t *testing.T) {\n./src/data_test.go:9:func TestStatusCodes(t *testing.T) {\n./src/data_test.go:99:func TestStatusCodeMap(t *testing.T) {\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWith \u003ccode\u003e--max-count=N\u003c/code\u003e, grep stops searching the file after finding the first N matching lines (or non-matching lines if used with \u003ccode\u003e--invert-match\u003c/code\u003e).\u003c/p\u003e\u003ch3 id=\"show-matches-only\"\u003eShow matches only\u003c/h3\u003e\u003cp\u003eBy default, grep prints the entire line containing the match. To show only the matching part, use \u003ccode\u003e-o\u003c/code\u003e (\u003ccode\u003e--only-matching\u003c/code\u003e).\u003c/p\u003e\u003cp\u003eSuppose we want to find functions named \u003ccode\u003eprint\u003c/code\u003e-something:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr --only-matching --include \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;*.go\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;func print\\w+\u0026#39;\u003c/span\u003e .\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e./src/cli.go:21:func printHeader\n./src/cli.go:35:func printStatusCodes\n./src/cli.go:105:func printStatusText\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe results are much cleaner than without \u003ccode\u003e--only-matching\u003c/code\u003e (try removing the option in the above command and see for yourself).\u003c/p\u003e\u003ch3 id=\"show-files-only\"\u003eShow files only\u003c/h3\u003e\u003cp\u003eIf there are too many matches, you may prefer to show only the files where the matches occurred. Use \u003ccode\u003e-l\u003c/code\u003e (\u003ccode\u003e--files-with-matches\u003c/code\u003e) to do this:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr --files-with-matches \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;httpurr\u0026#39;\u003c/span\u003e .\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e./README.md\n./cmd/httpurr/main.go\n./go.mod\n./httpurr.rb\n./src/cli.go\n./src/cli_test.go\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"show-context\"\u003eShow context\u003c/h3\u003e\u003cp\u003eLet\u0026#39;s search for GitHub action jobs:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;jobs:\u0026#39;\u003c/span\u003e .github/workflows\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e.github/workflows/automerge.yml:8:jobs:\n.github/workflows/lint.yml:11:jobs:\n.github/workflows/release.yml:10:jobs:\n.github/workflows/test.yml:11:jobs:\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThese results are kind of useless, because they don\u0026#39;t return the actual job name (which is on the next line after \u003ccode\u003ejobs\u003c/code\u003e). To fix this, let\u0026#39;s use \u003ccode\u003e-C\u003c/code\u003e (\u003ccode\u003e--context\u003c/code\u003e), which shows \u003ccode\u003eN\u003c/code\u003e lines around each match:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr --context\u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#1c01ce\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;jobs:\u0026#39;\u003c/span\u003e .github/workflows\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e.github/workflows/automerge.yml-7-\n.github/workflows/automerge.yml:8:jobs:\n.github/workflows/automerge.yml-9-  dependabot:\n--\n.github/workflows/lint.yml-10-\n.github/workflows/lint.yml:11:jobs:\n.github/workflows/lint.yml-12-  golangci:\n--\n.github/workflows/release.yml-9-\n.github/workflows/release.yml:10:jobs:\n.github/workflows/release.yml-11-  goreleaser:\n--\n.github/workflows/test.yml-10-\n.github/workflows/test.yml:11:jobs:\n.github/workflows/test.yml-12-  test:\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt might be even better to show only the \u003cem\u003enext\u003c/em\u003e line after the match, since we are not interested in the previous one. Use \u003ccode\u003e-A\u003c/code\u003e (\u003ccode\u003e--after-context\u003c/code\u003e) for this:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr --after-context\u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#1c01ce\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#39;jobs:\u0026#39;\u003c/span\u003e .github/workflows\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e.github/workflows/automerge.yml:8:jobs:\n.github/workflows/automerge.yml-9-  dependabot:\n--\n.github/workflows/lint.yml:11:jobs:\n.github/workflows/lint.yml-12-  golangci:\n--\n.github/workflows/release.yml:10:jobs:\n.github/workflows/release.yml-11-  goreleaser:\n--\n.github/workflows/test.yml:11:jobs:\n.github/workflows/test.yml-12-  test:\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp\u003eThere is also \u003ccode\u003e-B\u003c/code\u003e (\u003ccode\u003e--before-context\u003c/code\u003e) for showing N lines \u003cem\u003ebefore\u003c/em\u003e the match.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eNice!\u003c/p\u003e\u003ch3 id=\"silent-mode\"\u003eSilent mode\u003c/h3\u003e\u003cp\u003eSometimes you just want to know if a file contains a certain string; you don\u0026#39;t care about the number or positions of the matches.\u003c/p\u003e\u003cp\u003eTo make grep quit immediately after the first match and not print anything, use the \u003ccode\u003e-q\u003c/code\u003e (\u003ccode\u003e--quiet\u003c/code\u003e or \u003ccode\u003e--silent\u003c/code\u003e) option. Use the return code (\u003ccode\u003e$?\u003c/code\u003e) to see if grep found anything (0 — found, 1 — not found):\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnrw --quiet main cmd/httpurr/main.go\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e[\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e$?\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e]\u003c/span\u003e; \u003cspan style=\"color:#a90d91\"\u003ethen\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003eecho\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;found!\u0026#34;\u003c/span\u003e; \u003cspan style=\"color:#a90d91\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003eecho\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;not found\u0026#34;\u003c/span\u003e; \u003cspan style=\"color:#a90d91\"\u003efi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003efound!\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTry changing the search pattern from \u003ccode\u003emain\u003c/code\u003e to \u003ccode\u003eMain\u003c/code\u003e and see how the results change.\u003c/p\u003e\u003cp\u003eWhen searching in multiple files with \u003ccode\u003e--quiet\u003c/code\u003e, grep stops after the first match in any file and does not check other files:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnrw --quiet main .\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e[\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e$?\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e]\u003c/span\u003e; \u003cspan style=\"color:#a90d91\"\u003ethen\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003eecho\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;found!\u0026#34;\u003c/span\u003e; \u003cspan style=\"color:#a90d91\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003eecho\u003c/span\u003e \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;not found\u0026#34;\u003c/span\u003e; \u003cspan style=\"color:#a90d91\"\u003efi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"run\" editor=\"basic\" template=\"httpurr.sh\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003efound!\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"colors\"\u003eColors\u003c/h3\u003e\u003cp\u003eTo highlight matches and line numbers, use the \u003ccode\u003e--color=always\u003c/code\u003e option:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003egrep -Pnr --color\u003cspan style=\"color:#000\"\u003e=\u003c/span\u003ealways codes README.md\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ccodapi-snippet sandbox=\"shell\" command=\"aha\" editor=\"basic\" template=\"httpurr.sh\" output-mode=\"html\" output=\"\"\u003e\u003c/codapi-snippet\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e3:    \u0026lt;strong\u0026gt;\u0026lt;i\u0026gt; \u0026gt;\u0026gt; HTTP status codes on speed dial \u0026lt;\u0026lt; \u0026lt;/i\u0026gt;\u0026lt;/strong\u0026gt;\n30:* List the HTTP status codes:\n54:* Filter the status codes by categories:\n124:\t\t  Print HTTP status codes by category with --list;\n131:\t\t  Print HTTP status codes\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUse \u003ccode\u003e--color=auto\u003c/code\u003e to let grep decide whether to use colors based on your terminal. Use \u003ccode\u003e--color=never\u003c/code\u003e to force no-color mode.\u003c/p\u003e\u003ch2 id=\"final-thoughts\"\u003eFinal thoughts\u003c/h2\u003e\u003cp\u003eThat\u0026#39;s it! We\u0026#39;ve covered just about everything grep can do. Unfortunately, it doesn\u0026#39;t support replacing text, reading options from a configuration file, or other fancy features provided by grep alternatives like \u003ccode\u003eack\u003c/code\u003e or \u003ccode\u003eripgrep\u003c/code\u003e. But grep is still quite powerful, as you can probably see now.\u003c/p\u003e\u003cp\u003eUse \u003ccode\u003egrep --help\u003c/code\u003e to quickly see all supported options and see the \u003ca href=\"https://www.gnu.org/software/grep/manual/grep.html\"\u003eofficial guide\u003c/a\u003e for option descriptions.\u003c/p\u003e\u003cp\u003eHave fun grepping!\u003c/p\u003e\u003cp\u003e──\u003c/p\u003e\u003cp\u003eP.S. \u003cmark\u003eInteractive examples in this post\u003c/mark\u003e are powered by \u003ca href=\"https://codapi.org/\"\u003e\u003cstrong\u003ecodapi\u003c/strong\u003e\u003c/a\u003e — an open source tool I\u0026#39;m building. Use it to embed live code snippets into your product docs, online course or blog.\u003c/p\u003e\u003cscript defer=\"\" src=\"/modules/codapi/snippet.js\"\u003e\u003c/script\u003e\u003cp\u003e\u003ca href=\"/subscribe/\"\u003e★ Subscribe\u003c/a\u003e to keep up with new posts.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cfooter class=\"post__footer\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12\"\u003e\u003cdiv class=\"post__date\"\u003e\u003ctime datetime=\"2024-03-23 11:30:00 +0000 UTC\"\u003e23 Mar, 2024\u003c/time\u003e\u003c/div\u003e\u003cdiv class=\"post__tags\"\u003e\u003ca href=\"/tags/software/\"\u003esoftware\u003c/a\u003e \u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/footer\u003e\u003c/article\u003e",
  "Date": "2024-03-23T11:30:00Z",
  "Author": "Anton Zhiyanov"
}