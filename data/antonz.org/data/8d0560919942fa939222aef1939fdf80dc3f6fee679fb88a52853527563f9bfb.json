{
  "Source": "antonz.org",
  "Title": "Storing state in the URL",
  "Link": "https://antonz.org/storing-state/",
  "Content": "\u003carticle class=\"post\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-md-10 article\"\u003e\u003cheader\u003e\u003ch1\u003eStoring state in the URL\u003c/h1\u003e\u003c/header\u003e\u003cp\u003eIf you are developing a web application, sooner or later you will face the problem of saving the local system state for the user.\u003c/p\u003e\u003cp\u003eImagine you sell elite potatoes over the Internet. The buyer visits the website and enters the search criteria:\u003c/p\u003e\u003cul\u003e\u003cli\u003estrictly from Bolivia or South Africa,\u003c/li\u003e\u003cli\u003eharvest of 2022,\u003c/li\u003e\u003cli\u003etuber size from 3 to 7 cm,\u003c/li\u003e\u003cli\u003epreferably in the form of a sea seal.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe buyer then receives a list of 300 items (seal-shaped potatoes are quite popular in South Africa), split into 6 pages of 50 items each. They load the third page, open the potato card and freeze in silent admiration for a few seconds. And then accidentally refresh the page. What will your application do?\u003c/p\u003e\u003cp\u003eIt depends on how the application stores the filter state. Let\u0026#39;s look at the options, and then consider one of them in more detail.\u003c/p\u003e\u003ch2 id=\"how-to-store-state\"\u003eHow to store state\u003c/h2\u003e\u003cp\u003eJavaScript applications traditionally work with local state in the form of in-memory objects. This is convenient because it supports complex data structures without storage limits, and one does not have to deal with serialization. But will it suit our potato shop? Let\u0026#39;s figure it out.\u003c/p\u003e\u003ch3 id=\"dont-store-state-at-all\"\u003eDon\u0026#39;t store state at all\u003c/h3\u003e\u003cp\u003eLet\u0026#39;s say you didn\u0026#39;t bother to store the state and keep it in memory. Then after page reload the current context will be lost. The user will be redirected to the main page, where they will stare in disbelief at the giant \u0026#34;ELITE POTATOES\u0026#34; heading.\u003c/p\u003e\u003cp\u003eThis is how Google calendar used to behave. No matter how you navigate around the calendar, no matter what filters you apply, the URL always stayed the same:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ehttps://www.google.com/calendar/render\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eRefresh the page — and the calendar happily resets to the current week. Ouch.\u003c/p\u003e\u003ch3 id=\"store-state-locally\"\u003eStore state locally\u003c/h3\u003e\u003cp\u003eMost services understand that it is not OK to lose context after page refresh. They store the state on the client side (using Web Storage, IndexedDB or other means). This solves the problem with page refreshes, but still won\u0026#39;t help with bookmarking.\u003c/p\u003e\u003cp\u003ePlus, such approach creates a problem with conflicting state changes. I opened two browser tabs, went to your potato website, searched for \u0026#34;young potatoes\u0026#34; in the first tab and for \u0026#34;bushy leaves\u0026#34; in the second one. Which query will the app remember?\u003c/p\u003e\u003ch3 id=\"store-a-set-of-url-parameters\"\u003eStore a set of URL parameters\u003c/h3\u003e\u003cp\u003eEver since the days when the dynamic nature of websites was limited to the \u003ccode\u003e\u0026lt;blink\u0026gt;\u003c/code\u003e tag, some considered a best practice to store the state in the URL (\u003cem\u003eURL parameters\u003c/em\u003e, also known as \u003cem\u003eGET parameters\u003c/em\u003e or \u003cem\u003equery string\u003c/em\u003e). Such URL is great for emailing or bookmarking — there is no problem restoring the context:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ehttps://potato.shop/catalog/?search=wild+potatoes\u0026amp;country=bo,za\u0026amp;size=3-7\u0026amp;page=5\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eURL state makes each browser tab completely independent. No shared data in the local storage means no conflicts. It simplifies developer\u0026#39;s life, and the user does not have to scratch their head over the mysterious system glitches.\u003c/p\u003e\u003ch3 id=\"store-serialized-state\"\u003eStore serialized state\u003c/h3\u003e\u003cp\u003eURL parameters do an excellent job with scalar values (strings, numbers, booleans). But they are less suitable for collections and more complex structures. That\u0026#39;s why programmers sometimes do this:\u003c/p\u003e\u003cul\u003e\u003cli\u003erepresent the state in the form of a dictionary;\u003c/li\u003e\u003cli\u003eserialize it to Base64;\u003c/li\u003e\u003cli\u003epass it as the single URL parameter.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eFor example, for this state:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003e\u0026#34;search\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;wild potatoes\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003e\u0026#34;country\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#c41a16\"\u003e\u0026#34;bo\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;za\u0026#34;\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003e\u0026#34;size\u0026#34;\u003c/span\u003e: { \u003cspan style=\"color:#000\"\u003e\u0026#34;min\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#1c01ce\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003e\u0026#34;max\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#1c01ce\"\u003e7\u003c/span\u003e },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003e\u0026#34;page\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#1c01ce\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOne will get this URL:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ehttps://potato.shop/catalog/?state=eyJzZWFyY2giOiJ3aWxkIHBvdGF0b2VzIiwiY291bnRyeSI6WyJibyIsInphIl0sInNpemUiOnsibWluIjozLCJtYXgiOjd9LCJwYWdlIjo1fQ==\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"hybrid-approaches\"\u003eHybrid approaches\u003c/h3\u003e\u003cp\u003eOne can store only the main parameters in the URL, and additional ones in the local storage:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ehttps://potato.shop/catalog/?search=wild+potatoes\u0026amp;page=10\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOne can pass the main parameters explicitly, and the additional ones as the serialized blob:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ehttps://potato.shop/catalog/?search=wild+potatoes\u0026amp;state=eyJjb3VudHJ5IjpbImJvIiwiemEiXSwic2l6ZSI6eyJtaW4iOjMsIm1heCI6N30sInBhZ2UiOjV9\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThere are also more creative options.\u003c/p\u003e\u003cp\u003eFor example, one can store the state of the potato list locally. When a visitor requests a specific potato item, open it in a new tab — to not bother restoring the list state later.\u003c/p\u003e\u003cp\u003eOr one can implement an URL shortener of sorts. Store the full state on the server, generate a unique link like \u003ccode\u003ehttps://potato.shop/catalog/xKda7\u003c/code\u003e and serve it to the client.\u003c/p\u003e\u003cp\u003eWe have sorted out the options, now let\u0026#39;s look at one of them in more detail.\u003c/p\u003e\u003ch2 id=\"how-to-store-state-in-url-parameters\"\u003eHow to store state in URL parameters\u003c/h2\u003e\u003cp\u003eAt first glance, storing the state as a set of URL parameters is all nice and easy.\u003c/p\u003e\u003cp\u003eState:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003e\u0026#34;search\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;wild potatoes\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003e\u0026#34;page\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#1c01ce\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eURL params (this and further examples do not use url escaping):\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e?search=wild+potatoes\u0026amp;page=5\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIndeed, it is easy to pass strings and numbers in the parameters. It gets more interesting with other data types.\u003c/p\u003e\u003ch3 id=\"boolean-value\"\u003eBoolean value\u003c/h3\u003e\u003cp\u003eBooleans are typically passed as \u003ccode\u003etrue\u003c/code\u003e / \u003ccode\u003efalse\u003c/code\u003e or \u003ccode\u003e1\u003c/code\u003e / \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eState:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003e\u0026#34;search\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;potatoes\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003e\u0026#34;popular\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#a90d91\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eURL params:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e?search=potatoes\u0026amp;popular=true\n?search=potatoes\u0026amp;popular=1\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"date-and-time\"\u003eDate and time\u003c/h3\u003e\u003cp\u003eDate/time typically uses \u003ca href=\"https://datatracker.ietf.org/doc/html/rfc3339\"\u003eRFC 3339\u003c/a\u003e (\u003ccode\u003e2020-01-02T10:11:12Z\u003c/code\u003e) or \u003ca href=\"https://en.wikipedia.org/wiki/Unix_time\"\u003eUnix Time\u003c/a\u003e (seconds after midnight 01/01/1970).\u003c/p\u003e\u003cp\u003eState (since the example is in JSON, I pass the date in RFC3339; your language has a native representation):\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003e\u0026#34;search\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;potatoes\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003e\u0026#34;after\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;2020-01-02T10:11:12Z\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eURL params:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e?search=potatoes\u0026amp;after=2020-01-02T10:11:12Z\n?search=potatoes\u0026amp;after=1577959872\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUnix time in milliseconds is less common:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e?search=potatoes\u0026amp;after=1577959872000\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"empty-value\"\u003eEmpty value\u003c/h3\u003e\u003cp\u003eIf some property is not set, it is usually passed empty, or not passed at all.\u003c/p\u003e\u003cp\u003eState:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003e\u0026#34;search\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;potatoes\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003e\u0026#34;country\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#a90d91\"\u003enull\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eURL params:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e?search=potatoes\u0026amp;country=\n?search=potatoes\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSometimes devs use a special empty value (e.g. \u003ccode\u003enull\u003c/code\u003e):\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e?search=potatoes\u0026amp;country=null\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"list-array\"\u003eList (array)\u003c/h3\u003e\u003cp\u003eSo far we have been dealing with scalar values. It becomes more fun with lists.\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003e\u0026#34;search\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;potatoes\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003e\u0026#34;country\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#c41a16\"\u003e\u0026#34;bo\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;za\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe classic option is to repeat the property name for each value, as dictated by \u003ca href=\"https://datatracker.ietf.org/doc/html/rfc6570#section-2.4.2\"\u003eRFC 6570\u003c/a\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e?search=potatoes\u0026amp;country=bo\u0026amp;country=za\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSometimes a \u003ccode\u003e[]\u003c/code\u003e is added to stress the list nature:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e?search=potatoes\u0026amp;country[]=bo\u0026amp;country[]=za\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSometimes even with an index:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e?search=potatoes\u0026amp;country[0]=bo\u0026amp;country[1]=za\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eBrevity fans pass the property name once, and separate the values with a comma:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e?search=potatoes\u0026amp;country=bo,za\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"dictionary-map\"\u003eDictionary (map)\u003c/h3\u003e\u003cp\u003eA list includes a set of values. A dictionary contains nested properties:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003e\u0026#34;search\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;potatoes\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003e\u0026#34;size\u0026#34;\u003c/span\u003e: { \u003cspan style=\"color:#000\"\u003e\u0026#34;min\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#1c01ce\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003e\u0026#34;max\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#1c01ce\"\u003e7\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eInternet standards do not mention passing composite objects in the URL. So the developers have invented their own options.\u003c/p\u003e\u003cp\u003eMost often people repeat the top-level property name and pass nested property names in \u003ccode\u003e[]\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e?search=potatoes\u0026amp;size[min]=3\u0026amp;size[max]=7\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eDot notation is more rare:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e?search=potatoes\u0026amp;size.min=3\u0026amp;size.max=7\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eDeeper nesting is not typically used. It would be very nontrivial to deserialize such URL parameters back into the object.\u003c/p\u003e\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\u003cp\u003eThe main ways of storing the local state are:\u003c/p\u003e\u003cul\u003e\u003cli\u003eno storage;\u003c/li\u003e\u003cli\u003elocal storage;\u003c/li\u003e\u003cli\u003eURL parameters;\u003c/li\u003e\u003cli\u003eserialized blob.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eMemory and local storage are great for \u0026#34;private\u0026#34; state — settings, caches, history. URL parameters are good for the \u0026#34;public\u0026#34; state, so that one could bookmark or forward the stateful link. URLs with parameters are self-evident and allow one to pass rather complex data structures.\u003c/p\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-sm-4\"\u003e\u003cfigure\u003e\u003cimg alt=\"String or number\" src=\"state-scalar.png\"/\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv class=\"col-xs-12 col-sm-4\"\u003e\u003cfigure\u003e\u003cimg alt=\"Boolean value\" src=\"state-bool.png\"/\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv class=\"col-xs-12 col-sm-4\"\u003e\u003cfigure\u003e\u003cimg alt=\"Date and time\" src=\"state-date.png\"/\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-sm-4\"\u003e\u003cfigure\u003e\u003cimg alt=\"Empty value\" src=\"state-empty.png\"/\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv class=\"col-xs-12 col-sm-4\"\u003e\u003cfigure\u003e\u003cimg alt=\"List (array)\" src=\"state-list.png\"/\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv class=\"col-xs-12 col-sm-4\"\u003e\u003cfigure\u003e\u003cimg alt=\"Dictionary (map)\" src=\"state-dict.png\"/\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eMost importantly, whichever approach you choose — make sure to save and restore the context transparently for the user.\u003c/p\u003e\u003cp\u003e\u003cem\u003e\u003ca href=\"/subscribe/\"\u003e\u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e \u003cstrong\u003eSubscribe\u003c/strong\u003e\u003c/a\u003e\nto keep up with new posts.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cfooter class=\"post__footer\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12\"\u003e\u003cdiv class=\"post__date\"\u003e\u003ctime datetime=\"2022-05-08 11:30:00 +0000 UTC\"\u003e08 May, 2022\u003c/time\u003e\u003c/div\u003e\u003cdiv class=\"post__tags\"\u003e\u003ca href=\"/tags/software/\"\u003esoftware\u003c/a\u003e \u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/footer\u003e\u003c/article\u003e",
  "Date": "2022-05-08T11:30:00Z",
  "Author": "Anton Zhiyanov"
}