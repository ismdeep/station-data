{
  "Source": "antonz.org",
  "Title": "Covering index in SQL",
  "Link": "https://antonz.org/sql-covering-index/",
  "Content": "\u003carticle class=\"post\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-md-10 article\"\u003e\u003cheader\u003e\u003ch1\u003eCovering index in SQL\u003c/h1\u003e\u003c/header\u003e\u003cp\u003eA covering index is the fastest way to select data from a table.\u003c/p\u003e\u003cp\u003eLet\u0026#39;s see how it works using a query that selects employees with a certain salary:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eid\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eemployees\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003ewhere\u003c/span\u003e \u003cspan style=\"color:#000\"\u003esalary\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#1c01ce\"\u003e90\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"no-index-vs-using-an-index\"\u003eNo index vs. Using an index\u003c/h2\u003e\u003cp\u003eIf there is no index, the database engine goes through the entire table (this is called a \u0026#34;full scan\u0026#34;):\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eQUERY PLAN\n`--SCAN employees\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet\u0026#39;s create an index by salary:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eemployees_idx\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eon\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eemployees\u003c/span\u003e (\u003cspan style=\"color:#000\"\u003esalary\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow the database engine finds records by salary in the index (this is faster than going through the entire table). And for each record found, it accesses the table to get the \u003ccode\u003eid\u003c/code\u003e and \u003ccode\u003ename\u003c/code\u003e values:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eQUERY PLAN\n`--SEARCH employees USING INDEX employees_idx (salary=?)\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"using-a-covering-index\"\u003eUsing a covering index\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s create a covering index (which covers all selected columns):\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eemployees_idx\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eon\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eemployees\u003c/span\u003e (\u003cspan style=\"color:#000\"\u003esalary\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003eid\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003ename\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow the database engine works only with the index, without accessing the table at all. This is even faster:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eQUERY PLAN\n`--SEARCH employees USING COVERING INDEX employees_idx (salary=?)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHowever, simply covering all columns used in a query may not be enough. The order of the columns should allow for a fast search using the index.\u003c/p\u003e\u003cp\u003eSuppose we build an index with the same set of columns, but in a different order:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eemployees_idx\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eon\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eemployees\u003c/span\u003e (\u003cspan style=\"color:#000\"\u003eid\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003ename\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003esalary\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow the database engine won\u0026#39;t be able to quickly find records with \u003ccode\u003esalary\u003c/code\u003e = \u003ccode\u003e90\u003c/code\u003e. It may still use the index, but it will be a full index scan instead of a search (which is slow).\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eQUERY PLAN\n`--SCAN employees USING COVERING INDEX employees_idx\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e(note SCAN instead of SEARCH here)\u003c/p\u003e\u003cp\u003eCovering indexes cost more when the data in the table changes, so don\u0026#39;t create them for every type of query. Often this is one of the last optimizations after everything else has been done.\u003c/p\u003e\u003cp\u003e\u003cem\u003e\u003ca href=\"/subscribe/\"\u003e\u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e \u003cstrong\u003eSubscribe\u003c/strong\u003e\u003c/a\u003e\nto keep up with new posts.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cfooter class=\"post__footer\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12\"\u003e\u003cdiv class=\"post__date\"\u003e\u003ctime datetime=\"2023-06-12 14:30:00 +0000 UTC\"\u003e12 Jun, 2023\u003c/time\u003e\u003c/div\u003e\u003cdiv class=\"post__tags\"\u003e\u003ca href=\"/tags/data/\"\u003edata\u003c/a\u003e \u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/footer\u003e\u003c/article\u003e",
  "Date": "2023-06-12T14:30:00Z",
  "Author": "Anton Zhiyanov"
}