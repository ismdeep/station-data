{
  "Source": "antonz.org",
  "Title": "How to create a 1M record table with a single query",
  "Link": "https://antonz.org/random-table/",
  "Content": "\u003carticle class=\"post\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-md-10 article\"\u003e\u003cheader\u003e\u003ch1\u003eHow to create a 1M record table with a single query\u003c/h1\u003e\u003c/header\u003e\u003cp\u003eLet\u0026#39;s say you want to check how a query behaves on a large table - but there is no such table at hand. This is not a problem if your DBMS supports SQL recursion: lots of data can be generated with a single query. The \u003ccode\u003eWITH RECURSIVE\u003c/code\u003e clause comes to the rescue.\u003c/p\u003e\u003cp\u003eI\u0026#39;m going to use SQLite, but the same (or similar) queries will work for PostgreSQL and other DBMSs. Specifically, \u003ccode\u003eWITH RECURSIVE\u003c/code\u003e is supported in MariaDB 10.2+, MySQL 8.0+, PostgreSQL 8.4+ and SQLite 3.8+. Oracle 11.2+ and SQL Server 2005+ support recursive queries, but without the \u003ccode\u003eRECURSIVE\u003c/code\u003e keyword.\u003c/p\u003e\u003ch2 id=\"random-numbers\"\u003eRandom numbers\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s create a table with 1 million random numbers:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecreate table random_data as\nwith recursive tmp(x) as (\n    select random()\n    union all\n    select random() from tmp\n    limit 1000000\n)\nselect * from tmp;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOr, if your database supports \u003ccode\u003egenerate_series()\u003c/code\u003e (and does not support \u003ccode\u003elimit\u003c/code\u003e in recursive queries, like PostgreSQL):\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecreate table random_data as\nselect random() as x\nfrom generate_series(1, 1000000);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eValidate:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esqlite\u0026gt; select count(*) from random_data;\n1000000\n\nsqlite\u0026gt; select avg(x) from random_data;\n1.000501737529e+16\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"numeric-sequence\"\u003eNumeric sequence\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s fill the table with numbers from one to a million instead of random numbers:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecreate table seq_data as\nwith recursive tmp(x) as (\n    select 1\n    union all\n    select x+1 from tmp\n    limit 1000000\n)\nselect * from tmp;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOr with \u003ccode\u003egenerate_series()\u003c/code\u003e:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecreate table seq_data as\nselect value as x\nfrom generate_series(1, 1000000);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eValidate:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esqlite\u0026gt; select count(*) from seq_data;\n1000000\n\nsqlite\u0026gt; select avg(x) from seq_data;\n500000.5\n\nsqlite\u0026gt; select min(x) from seq_data;\n1\n\nsqlite\u0026gt; select max(x) from seq_data;\n1000000\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"randomized-data\"\u003eRandomized data\u003c/h2\u003e\u003cp\u003eNumbers are fine, but what if you need a large table filled with customer data? No sweat!\u003c/p\u003e\u003cp\u003eLet\u0026#39;s agree on some rules:\u003c/p\u003e\u003cul\u003e\u003cli\u003ecustomer has an ID, name, and age;\u003c/li\u003e\u003cli\u003eID is filled sequentially from 1 to 1000000;\u003c/li\u003e\u003cli\u003ename is randomly selected from a fixed list;\u003c/li\u003e\u003cli\u003eage is a random number from 1 to 80.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eLet\u0026#39;s create a table of names:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecreate table names (\n    id integer primary key,\n    name text\n);\n\ninsert into names(id, name)\nvalues\n(1, \u0026#39;Ann\u0026#39;),\n(2, \u0026#39;Bill\u0026#39;),\n(3, \u0026#39;Cindy\u0026#39;),\n(4, \u0026#39;Diane\u0026#39;),\n(5, \u0026#39;Emma\u0026#39;);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd generate some customers:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecreate table person_data as\nwith recursive tmp(id, idx, name, age) as (\n    select 1, 1, \u0026#39;Ann\u0026#39;, 20\n    union all\n    select\n        tmp.id + 1 as id,\n        abs(random() % 5) + 1 as idx,\n        (select name from names where id = idx) as name,\n        abs(random() % 80) + 1 as age\n    from tmp\n    limit 1000000\n)\nselect id, name, age from tmp;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOr with \u003ccode\u003egenerate_series()\u003c/code\u003e:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecreate table person_data as\nwith tmp as (\n    select\n        value as id,\n        abs(random() % 5) + 1 as idx,\n        abs(random() % 80) + 1 as age\n    from generate_series(1, 1000000)\n)\nselect\n    id,\n    (select name from names where id = idx) as name,\n    age\nfrom tmp;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eEverything is according to the rules here:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eid\u003c/code\u003e is calculated as the previous value + 1;\u003c/li\u003e\u003cli\u003e\u003ccode\u003eidx\u003c/code\u003e field contains a random number from 1 to 5;\u003c/li\u003e\u003cli\u003e\u003ccode\u003ename\u003c/code\u003e is selected from the \u003ccode\u003enames\u003c/code\u003e table according to \u003ccode\u003eidx\u003c/code\u003e value;\u003c/li\u003e\u003cli\u003e\u003ccode\u003eage\u003c/code\u003e is calculated as a random number from 1 to 80.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eCheck it out:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esqlite\u0026gt; select count(*) from person_data;\n1000000\n\nsqlite\u0026gt; select * from person_data limit 10;\n┌────┬───────┬─────┐\n│ id │ name  │ age │\n├────┼───────┼─────┤\n│ 1  │ Ann   │ 20  │\n│ 2  │ Ann   │ 33  │\n│ 3  │ Ann   │ 26  │\n│ 4  │ Ann   │ 4   │\n│ 5  │ Diane │ 20  │\n│ 6  │ Diane │ 76  │\n│ 7  │ Bill  │ 42  │\n│ 8  │ Cindy │ 35  │\n│ 9  │ Diane │ 6   │\n│ 10 │ Ann   │ 29  │\n└────┴───────┴─────┘\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eA single query has brought us a million customers. Not bad! It would be great to achieve such results in sales, wouldn\u0026#39;t it? ツ\u003c/p\u003e\u003cp\u003e──\u003c/p\u003e\u003cp\u003eP.S. \u003cmark\u003eInterested in mastering advanced SQL?\u003c/mark\u003e Check out my book — \u003ca href=\"/sql-window-functions-book\"\u003eSQL Window Functions Explained\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003e\u003ca href=\"/subscribe/\"\u003e\u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e \u003cstrong\u003eSubscribe\u003c/strong\u003e\u003c/a\u003e\nto keep up with new posts.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cfooter class=\"post__footer\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12\"\u003e\u003cdiv class=\"post__date\"\u003e\u003ctime datetime=\"2021-03-21 21:15:00 +0000 UTC\"\u003e21 Mar, 2021\u003c/time\u003e\u003c/div\u003e\u003cdiv class=\"post__tags\"\u003e\u003ca href=\"/tags/sqlite/\"\u003esqlite\u003c/a\u003e \u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/footer\u003e\u003c/article\u003e",
  "Date": "2021-03-21T21:15:00Z",
  "Author": "Anton Zhiyanov"
}