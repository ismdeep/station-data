{
  "Source": "antonz.org",
  "Title": "Expressive ellipsis in Python",
  "Link": "https://antonz.org/ellipsis/",
  "Content": "\u003carticle class=\"post\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-md-10 article\"\u003e\u003cheader\u003e\u003ch1\u003eExpressive ellipsis in Python\u003c/h1\u003e\u003c/header\u003e\u003cp\u003eOne of the lesser-known things in Python is the ellipsis:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#3f6e75\"\u003eFlyer\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a90d91\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#000\"\u003efly\u003c/span\u003e(\u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#000\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis code works. The \u003ccode\u003e...\u003c/code\u003e (aka \u003ccode\u003eEllipsis\u003c/code\u003e) is a real object that can be used in code.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eEllipsis\u003c/code\u003e is the only instance of the \u003ccode\u003eEllipsisType\u003c/code\u003e type (similar to how \u003ccode\u003eNone\u003c/code\u003e is the only instance of the \u003ccode\u003eNoneType\u003c/code\u003e type):\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#000\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e...\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eis\u003c/span\u003e \u003cspan style=\"color:#5b269a\"\u003eEllipsis\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#000\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003eTrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#000\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#5b269a\"\u003eEllipsis\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eis\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#000\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003eTrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ePython core devs mostly use \u003ccode\u003e...\u003c/code\u003e to show that a type, method, or function has no implementation — as in the \u003ccode\u003efly()\u003c/code\u003e example.\u003c/p\u003e\u003cp\u003eAnd in \u003ca href=\"https://docs.python.org/3/library/typing.html\"\u003etype hints\u003c/a\u003e:\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eIt is possible to declare the return type of a callable without specifying the call signature by substituting a literal ellipsis for the list of arguments in the type hint: \u003ccode\u003eCallable[..., ReturnType]\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cblockquote\u003e\u003cp\u003eTo specify a variable-length tuple of homogeneous type, use literal ellipsis, e.g. \u003ccode\u003eTuple[int, ...]\u003c/code\u003e. A plain \u003ccode\u003eTuple\u003c/code\u003e is equivalent to \u003ccode\u003eTuple[Any, ...]\u003c/code\u003e, and in turn to tuple.\u003c/p\u003e\u003c/blockquote\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e# numbers  is a tuple of integer numbers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e# summator is a function that accepts arbitrary parameters\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e#          and returns an integer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eprint_sum\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003enumbers\u003c/span\u003e: \u003cspan style=\"color:#a90d91\"\u003etuple\u003c/span\u003e[\u003cspan style=\"color:#a90d91\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003e...\u003c/span\u003e], \u003cspan style=\"color:#000\"\u003esummator\u003c/span\u003e: \u003cspan style=\"color:#000\"\u003eCallable\u003c/span\u003e[\u003cspan style=\"color:#000\"\u003e...\u003c/span\u003e, \u003cspan style=\"color:#a90d91\"\u003eint\u003c/span\u003e]):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003etotal\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#000\"\u003esummator\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003enumbers\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a90d91\"\u003eprint\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003etotal\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#000\"\u003eprint_sum\u003c/span\u003e((\u003cspan style=\"color:#1c01ce\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#1c01ce\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#1c01ce\"\u003e3\u003c/span\u003e), \u003cspan style=\"color:#a90d91\"\u003esum\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e# 6\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOther developers use Ellipsis for all sorts of bizarre things ツ\u003c/p\u003e\u003cp\u003e\u003cem\u003e\u003ca href=\"/subscribe/\"\u003e\u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e \u003cstrong\u003eSubscribe\u003c/strong\u003e\u003c/a\u003e\nto keep up with new posts.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cfooter class=\"post__footer\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12\"\u003e\u003cdiv class=\"post__date\"\u003e\u003ctime datetime=\"2022-06-03 10:50:00 +0000 UTC\"\u003e03 Jun, 2022\u003c/time\u003e\u003c/div\u003e\u003cdiv class=\"post__tags\"\u003e\u003ca href=\"/tags/python/\"\u003epython\u003c/a\u003e \u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/footer\u003e\u003c/article\u003e",
  "Date": "2022-06-03T10:50:00Z",
  "Author": "Anton Zhiyanov"
}