{
  "Source": "antonz.org",
  "Title": "I'm a programmer and I'm stupid",
  "Link": "https://antonz.org/stupid/",
  "Content": "\u003carticle class=\"post\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-md-10 article\"\u003e\u003cheader\u003e\u003ch1\u003eI\u0026#39;m a programmer and I\u0026#39;m stupid\u003c/h1\u003e\u003c/header\u003e\u003cp\u003eI\u0026#39;ve been writing code for money for 15 years. I\u0026#39;ve tried other roles — product management, analytics, testing — but they didn\u0026#39;t stick. And over the years, I\u0026#39;ve learned that I\u0026#39;m pretty dumb. Unfortunately.\u003c/p\u003e\u003cp\u003eI haven\u0026#39;t been diagnosed with any specific medical condition, but my mental capacity is very limited. I find even easier Leetcode problems challenging. Reading about a basic consensus algorithm makes my head explode. I can\u0026#39;t really follow complex dependencies in a code base. I can\u0026#39;t learn a fancy language like Rust (I tried, but honestly, it\u0026#39;s too much). I hate microservices and modern frontends because there are so many moving parts, I can\u0026#39;t keep track of them all.\u003c/p\u003e\u003cp\u003eSo what do I do about it?\u003c/p\u003e\u003cp\u003eI use the simplest mainstream language available (Go) and very basic Python. I write simple (though sometimes verbose) code that is easy to understand and maintain. I avoid deep abstractions and always choose composition over inheritance or mixins. I only use generics when absolutely necessary. I prefer flat data structures whenever possible.\u003c/p\u003e\u003cp\u003eI introduce as few external dependencies as possible (ideally zero\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e). I design modules with clear APIs (not in a Robert Martin\u0026#39;s definition of \u0026#34;clear\u0026#34;), but almost never extract them into microservices. I use JSON-over-HTTP APIs, but never GraphQL. I took the time to learn SQL and use it a lot\u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e2\u003c/a\u003e\u003c/sup\u003e. I apply basic resilience patterns like timeouts, circuit breakers, and backpressure.\u003c/p\u003e\u003cp\u003eI try to use as few software components as possible. Ideally, just the application itself, SQLite or PostgreSQL for data storage, and Docker with a sprinkle of shell for deployments. Nginx/HAProxy as needed. No API gateways, no sharding, no distributed caches, no message queues, no NoSQL/NewSQL/Graph/whatever databases, no service discovery, no federation, no cloud native, no FAANG-level best practices.\u003c/p\u003e\u003cp\u003eI draw dependency graphs and sequence diagrams to understand legacy code. I write comments to remind future me why a certain function does what it does, or why a certain if branch is necessary. I write documentation, trying to make it concise and readable. I write examples, lots of them. Sometimes even interactive\u003csup id=\"fnref:3\"\u003e\u003ca href=\"#fn:3\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e3\u003c/a\u003e\u003c/sup\u003e.\u003c/p\u003e\u003cp\u003eThe software I build seems to work okay. It won\u0026#39;t impress a Google engineer, that\u0026#39;s for sure. But it serves its users and the business reasonably well.\u003c/p\u003e\u003cp\u003eSo being stupid kind of works for me.\u003c/p\u003e\u003cdiv class=\"footnotes\" role=\"doc-endnotes\"\u003e\u003chr/\u003e\u003col\u003e\u003cli id=\"fn:1\"\u003e\u003cp\u003e\u003ca href=\"https://github.com/nalgeon/zero\"\u003eZero dependency club\u003c/a\u003e \u003ca href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\u003cli id=\"fn:2\"\u003e\u003cp\u003e\u003ca href=\"https://antonz.org/sql-window-functions-ranking/\"\u003eSQL window functions explained\u003c/a\u003e \u003ca href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\u003cli id=\"fn:3\"\u003e\u003cp\u003e\u003ca href=\"https://antonz.org/code-examples/\"\u003eInteractive code examples for fun and profit\u003c/a\u003e \u003ca href=\"#fnref:3\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ol\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"/subscribe/\"\u003e★ Subscribe\u003c/a\u003e to keep up with new posts.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cfooter class=\"post__footer\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12\"\u003e\u003cdiv class=\"post__date\"\u003e\u003ctime datetime=\"2024-03-06 06:30:00 +0000 UTC\"\u003e06 Mar, 2024\u003c/time\u003e\u003c/div\u003e\u003cdiv class=\"post__tags\"\u003e\u003ca href=\"/tags/software/\"\u003esoftware\u003c/a\u003e \u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/footer\u003e\u003c/article\u003e",
  "Date": "2024-03-06T06:30:00Z",
  "Author": "Anton Zhiyanov"
}