{
  "Source": "antonz.org",
  "Title": "How Python list works",
  "Link": "https://antonz.org/list-internals/",
  "Content": "\u003carticle class=\"post\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-md-10 article\"\u003e\u003cheader\u003e\u003ch1\u003eHow Python list works\u003c/h1\u003e\u003c/header\u003e\u003cp\u003e\u003cem\u003eThis post is largely about the arrays — the #1 data structure in the world. If you are not a data structure guru yet, I guarantee that you will better understand Python lists, their advantages and limitations. If you already know everything — there is no harm in refreshing the key points.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eEverybody knows how to work with lists in Python:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#000\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eguests\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#c41a16\"\u003e\u0026#34;Frank\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;Claire\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;Zoe\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#000\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eguests\u003c/span\u003e[\u003cspan style=\"color:#1c01ce\"\u003e1\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#c41a16\"\u003e\u0026#39;Claire\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSurely you know that selecting an item by index — \u003ccode\u003eguests[idx]\u003c/code\u003e — works instantly even on a million elements list. More precisely, selection by index takes constant time O(1) — that is, it does not depend on the number of items in the list.\u003c/p\u003e\u003cp\u003eDo you know why it works so fast? Let\u0026#39;s find out.\u003c/p\u003e\u003ch2 id=\"list--array\"\u003eList = Array?\u003c/h2\u003e\u003cp\u003eThe list is based on an array. An array is a set of elements ① of the same size, ② located in memory one after another, without gaps.\u003c/p\u003e\u003cp\u003eSince elements are the same size and placed contiguously, it is easy to get an array item by index. All we need is the memory address of the very first element (the \u0026#34;head\u0026#34; of the array).\u003c/p\u003e\u003cp\u003eLet\u0026#39;s say the head is located at the address \u003ccode\u003e0×00001234\u003c/code\u003e, and each item occupies 8 bytes. Then the element with the \u003ccode\u003eidx\u003c/code\u003e index is located at \u003ccode\u003e0×00001234 + idx*8\u003c/code\u003e:\u003c/p\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-sm-6\"\u003e\u003cfigure\u003e\u003cimg alt=\"List = array\" src=\"array-1.png\" class=\"img-bordered-thin\"/\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eSince the \u0026#34;get value by address\u0026#34; memory operation takes constant time, selecting an array item by index also takes O(1).\u003c/p\u003e\u003cp\u003eRoughly speaking, this is how Python list works. It stores a pointer to the head of the array and the number of items in the array. The item count is stored separately so that the \u003ccode\u003elen()\u003c/code\u003e function also performs in O(1) time, and does not have to count the elements each time.\u003c/p\u003e\u003cp\u003eSo far so good. But there are a couple of problems:\u003c/p\u003e\u003cul\u003e\u003cli\u003eAll array elements are the same size, but the list should be able to store items of different sizes (true/false, numbers, strings of different lengths).\u003c/li\u003e\u003cli\u003eThe array has a fixed length, but the list should be able to store an arbitrary number of items.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eWe\u0026#39;ll tackle them a bit later.\u003c/p\u003e\u003ch2 id=\"naive-list\"\u003eNaive List\u003c/h2\u003e\u003cp\u003eThe best way to master a data structure is to implement it from scratch. Unfortunately, Python is not well suited for such low-level structures as arrays, because it doesn\u0026#39;t support explicit pointers (addresses in memory).\u003c/p\u003e\u003cp\u003eThis is probably as close as we can get:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#3f6e75\"\u003eOhMyList\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a90d91\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e__init__\u003c/span\u003e(\u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#1c01ce\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003ecapacity\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#1c01ce\"\u003e8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003earray\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003ecapacity\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ectypes\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003epy_object\u003c/span\u003e)()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a90d91\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eappend\u003c/span\u003e(\u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003eitem\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003earray\u003c/span\u003e[\u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003elength\u003c/span\u003e] \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eitem\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#1c01ce\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a90d91\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e__len__\u003c/span\u003e(\u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a90d91\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003elength\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a90d91\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e__getitem__\u003c/span\u003e(\u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003eidx\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a90d91\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003earray\u003c/span\u003e[\u003cspan style=\"color:#000\"\u003eidx\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOur custom list has a fixed capacity (\u003ccode\u003ecapacity\u003c/code\u003e = 8 items) and stores the elements in the \u003ccode\u003earray\u003c/code\u003e array.\u003c/p\u003e\u003cp\u003eThe \u003ccode\u003ectypes\u003c/code\u003e module gives access to the low-level structures on which the standard library is built. In this case, we use it to create a C-style array of \u003ccode\u003ecapacity\u003c/code\u003e elements.\u003c/p\u003e\u003ch2 id=\"list--array-of-pointers\"\u003eList = Array of Pointers\u003c/h2\u003e\u003cp\u003eThe list instantly retrieves an item by index, because it has an array inside. And the array is so fast because all the elements are the same size.\u003c/p\u003e\u003cp\u003eBut list items can be of different sizes:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#000\"\u003eguests\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#c41a16\"\u003e\u0026#34;Frank\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;Claire\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#c41a16\"\u003e\u0026#34;Zoe\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a90d91\"\u003eTrue\u003c/span\u003e, \u003cspan style=\"color:#1c01ce\"\u003e42\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo solve this problem, someone came up with the idea of storing item \u003cem\u003epointers\u003c/em\u003e instead of item \u003cem\u003evalues\u003c/em\u003e. Each element of the array is a memory address, and if you follow this address — you will get the actual value:\u003c/p\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-sm-10\"\u003e\u003cfigure\u003e\u003cimg alt=\"List = array of pointers\" src=\"array-2.png\" class=\"img-bordered-thin\"/\u003e\u003cfigcaption\u003eThe array stores pointers adjacently. But the values they refer to can be stored anywhere in memory.\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eSince pointers are fixed size (8 bytes on modern 64-bit processors), everything works fine. Instead of one operation (get the value from the array cell), we\u0026#39;ve now got two:\u003c/p\u003e\u003col\u003e\u003cli\u003eGet the address from the array cell.\u003c/li\u003e\u003cli\u003eGet the value at that address.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eBut it\u0026#39;s still constant time O(1).\u003c/p\u003e\u003ch2 id=\"list--dynamic-array\"\u003eList = Dynamic Array\u003c/h2\u003e\u003cp\u003eIf there are empty spaces left in the array underneath the list, then the \u003ccode\u003e.append(item)\u003c/code\u003e runs in constant time. All it takes is to write a new value to a free cell and increase the element counter by 1:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eappend\u003c/span\u003e(\u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003eitem\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003earray\u003c/span\u003e[\u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003elength\u003c/span\u003e] \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eitem\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#1c01ce\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBut what if the array is already full?\u003c/p\u003e\u003cp\u003ePython has to allocate memory for a new, bigger array and copy all the old items to the new one:\u003c/p\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12 col-sm-6\"\u003e\u003cfigure\u003e\u003cimg alt=\"List = dynamic array\" src=\"array-3.png\" class=\"img-bordered-thin\"/\u003e\u003cfigcaption\u003eWhen there is no more space in the old array, it\u0026#39;s time to create a new one.\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eHere we go:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eappend\u003c/span\u003e(\u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003eitem\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a90d91\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003ecapacity\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e_resize\u003c/span\u003e(\u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003ecapacity\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#1c01ce\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003earray\u003c/span\u003e[\u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003elength\u003c/span\u003e] \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eitem\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#1c01ce\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e_resize\u003c/span\u003e(\u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003enew_cap\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003enew_arr\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#000\"\u003enew_cap\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ectypes\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003epy_object\u003c/span\u003e)()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a90d91\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eidx\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ein\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003erange\u003c/span\u003e(\u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003elength\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#000\"\u003enew_arr\u003c/span\u003e[\u003cspan style=\"color:#000\"\u003eidx\u003c/span\u003e] \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003earray\u003c/span\u003e[\u003cspan style=\"color:#000\"\u003eidx\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003earray\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#000\"\u003enew_arr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#5b269a\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003ecapacity\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#000\"\u003enew_cap\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003e._resize()\u003c/code\u003e is a costly operation, so the new array should be significantly larger than the old one. In the example above, the new array is twice as large. Python uses a more modest coefficient — about 1.12.\u003c/p\u003e\u003cp\u003eIf you remove more than half of the items from the list via \u003ccode\u003e.pop()\u003c/code\u003e, Python will shrink it. It\u0026#39;ll allocate a new, smaller array and move the elements into it.\u003c/p\u003e\u003cp\u003eThus, the list juggles arrays all the time so that we don\u0026#39;t have to do it ツ\u003c/p\u003e\u003ch2 id=\"appending-an-item-to-the-list\"\u003eAppending an Item to the List\u003c/h2\u003e\u003cp\u003eSelecting from the list by index takes O(1) time — we have sorted that out. The \u003ccode\u003e.append(item)\u003c/code\u003e method is also O(1) until Python has to extend the array under the list. But array extension is an O(n) operation. So how long does \u003ccode\u003e.append()\u003c/code\u003e take after all?\u003c/p\u003e\u003cp\u003eIt would be wrong to measure a single append — as we found out, sometimes it takes O(1), sometimes O(n). So computer scientists came up with \u003cem\u003eamortized analysis\u003c/em\u003e. To get an amortized operation time, one estimates the total time that a sequence of K operations will take, then divide it by K.\u003c/p\u003e\u003cp\u003eWithout going into details, I will say that the amortized time for \u003ccode\u003e.append(item)\u003c/code\u003e turns out to be constant — O(1). So appending to the list works very fast.\u003c/p\u003e\u003cdiv class=\"boxed\"\u003e\u003ch3\u003eWhy amortized append time is O(1)\u003c/h3\u003e\u003cp\u003eLet\u0026#39;s say the list is empty and want to append \u003ccode\u003en\u003c/code\u003e items. For simplicity, we\u0026#39;ll use the expansion factor of 2. Let\u0026#39;s count the number of atomic operations:\u003c/p\u003e\u003cul\u003e\u003cli\u003e1st item: 1 (copy) + 1 (insert)\u003c/li\u003e\u003cli\u003eanother 2: 2 (copy) + 2 (insert)\u003c/li\u003e\u003cli\u003eanother 4: 4 (copy) + 4 (insert)\u003c/li\u003e\u003cli\u003eanother 8: 8 (copy) + 8 (insert)\u003c/li\u003e\u003cli\u003e...\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eFor \u003ccode\u003en\u003c/code\u003e items there will be \u003ccode\u003en\u003c/code\u003e insertions.\u003c/p\u003e\u003cp\u003eAs for copy:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e1 + 2 + 4 + ... log(n) = \n= 2**log(n) * 2 - 1 =\n= 2n - 1\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eoperations.\u003c/p\u003e\u003cp\u003eSo for \u003ccode\u003en\u003c/code\u003e items there will be \u003ccode\u003e3n - 1\u003c/code\u003e atomic operations.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eO((3n - 1) / n)\u003c/code\u003e = \u003ccode\u003eO(1)\u003c/code\u003e\u003c/p\u003e\u003c/div\u003e\u003cp\u003eSumming up, the following operations are guaranteed to be fast:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e# O(1)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#000\"\u003elst\u003c/span\u003e[\u003cspan style=\"color:#000\"\u003eidx\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e# O(1)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a90d91\"\u003elen\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003elst\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e# amortized O(1)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#000\"\u003elst\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003eappend\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003eitem\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#000\"\u003elst\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#000\"\u003epop\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"list-internals\"\u003eList Internals\u003c/h2\u003e\u003cp\u003eWe\u0026#39;ve discussed the algorithm. Now let\u0026#39;s look at the implementation.\u003c/p\u003e\u003cp\u003ePython core data structures are implemented in C, and the list is no exception. Here is the (massively simplified) list structure from the Python sources (see \u003ca href=\"https://github.com/python/cpython/blob/main/Include/cpython/listobject.h\"\u003elistobject.h\u003c/a\u003e, \u003ca href=\"https://github.com/python/cpython/blob/main/Objects/listobject.c\"\u003elistobject.c\u003c/a\u003e):\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e// List data structure.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e\u003cspan style=\"color:#a90d91\"\u003etypedef\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#177500\"\u003e// List length\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#000\"\u003ePy_ssize_t\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eob_size\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#177500\"\u003e// Pointers to list items. list[0] is ob_item[0], etc.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#000\"\u003ePyObject\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e**\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eob_item\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#177500\"\u003e// List capacity\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#177500\"\u003e/* ob_item contains space for \u0026#39;allocated\u0026#39; elements. The number\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e     * currently in use is ob_size.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e     * Invariants:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e     *     0 \u0026lt;= ob_size \u0026lt;= allocated\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e     *     len(list) == ob_size\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e     *     ob_item == NULL implies ob_size == allocated == 0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e     */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003ePy_ssize_t\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eallocated\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e} \u003cspan style=\"color:#000\"\u003ePyListObject\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSimilar to our naive implementation, the real list structure contains the length (\u003ccode\u003eob_size\u003c/code\u003e), capacity (\u003ccode\u003eallocated\u003c/code\u003e), and an array of items (\u003ccode\u003eob_item\u003c/code\u003e).\u003c/p\u003e\u003cp\u003eHere is the list constructor:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e// Creates a new list.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e\u003cspan style=\"color:#000\"\u003ePyObject\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ePyList_New\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ePy_ssize_t\u003c/span\u003e \u003cspan style=\"color:#000\"\u003esize\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003ePyListObject\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#000\"\u003eop\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#177500\"\u003e// allocate memory for the list itself (without list items)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#000\"\u003eop\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ePyObject_GC_New\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ePyListObject\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#000\"\u003ePyList_Type\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#177500\"\u003e// allocate memory for list items\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#000\"\u003eop\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#000\"\u003eob_item\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#000\"\u003ePyObject\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e**\u003c/span\u003e) \u003cspan style=\"color:#000\"\u003ePyMem_Calloc\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003esize\u003c/span\u003e, \u003cspan style=\"color:#a90d91\"\u003esizeof\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ePyObject\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a90d91\"\u003ereturn\u003c/span\u003e (\u003cspan style=\"color:#000\"\u003ePyObject\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e) \u003cspan style=\"color:#000\"\u003eop\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003elen()\u003c/code\u003e implementation simply returns the \u003ccode\u003eob_size\u003c/code\u003e field:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e// Returns list length.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e\u003cspan style=\"color:#a90d91\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003einline\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ePy_ssize_t\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ePyList_GET_SIZE\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ePyListObject\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eself\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a90d91\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#000\"\u003elist\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#000\"\u003eob_size\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eGetting and setting list items is also trivial:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e// Returns list item by index.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e\u003cspan style=\"color:#a90d91\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003einline\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ePyObject\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ePyList_GET_ITEM\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ePyObject\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eop\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003ePy_ssize_t\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eindex\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003ePyListObject\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#000\"\u003elist\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e_PyList_CAST\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003eop\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a90d91\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#000\"\u003elist\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#000\"\u003eob_item\u003c/span\u003e[\u003cspan style=\"color:#000\"\u003eindex\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e// Sets list item by index.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e\u003cspan style=\"color:#a90d91\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003einline\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ePyList_SET_ITEM\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ePyObject\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eop\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003ePy_ssize_t\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eindex\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003ePyObject\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#000\"\u003evalue\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003ePyListObject\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#000\"\u003elist\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e_PyList_CAST\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003eop\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003elist\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#000\"\u003eob_item\u003c/span\u003e[\u003cspan style=\"color:#000\"\u003eindex\u003c/span\u003e] \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#000\"\u003evalue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow comes the append:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e// Appends an item to the end of the list.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e\u003cspan style=\"color:#a90d91\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ePyObject\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#000\"\u003elist_append\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ePyListObject\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eself\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003ePyObject\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eobject\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#177500\"\u003e// list length\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#000\"\u003ePy_ssize_t\u003c/span\u003e \u003cspan style=\"color:#000\"\u003elen\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#000\"\u003ePyList_GET_SIZE\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003eself\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#177500\"\u003e// list capacity\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#000\"\u003ePy_ssize_t\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eallocated\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#000\"\u003eallocated\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#177500\"\u003e// if there is space left in the list (length \u0026lt; capacity),\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#177500\"\u003e// append the item without resizing the list\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a90d91\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#000\"\u003eallocated\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#000\"\u003elen\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#000\"\u003ePyList_SET_ITEM\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003eself\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003elen\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003enewitem\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#000\"\u003ePy_SET_SIZE\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003eself\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003elen\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#1c01ce\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a90d91\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#1c01ce\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#177500\"\u003e// otherwise, resize the list\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#000\"\u003elist_resize\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003eself\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003elen\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#1c01ce\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#177500\"\u003e// then append the item\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#000\"\u003ePyList_SET_ITEM\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003eself\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003elen\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003enewitem\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a90d91\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#1c01ce\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAs we\u0026#39;ve discussed, sometimes appending new item results in a list resize:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e// Resizes the list, thus increasing its capacity.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e\u003cspan style=\"color:#a90d91\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#000\"\u003elist_resize\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ePyListObject\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eself\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003ePy_ssize_t\u003c/span\u003e \u003cspan style=\"color:#000\"\u003enewsize\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#177500\"\u003e// list capacity\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#000\"\u003ePy_ssize_t\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eallocated\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#000\"\u003eallocated\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#177500\"\u003e/* This over-allocates proportional to the list size, making room\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e     * for additional growth. The over-allocation is mild, but is\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e     * enough to give linear-time amortized behavior over a long\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e     * sequence of appends() in the presence of a poorly-performing\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e     * system realloc().\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e     * Add padding to make the allocated size multiple of 4.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e     * The growth pattern is:  0, 4, 8, 16, 24, 32, 40, 52, 64, 76, ...\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e     */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#177500\"\u003e// calculate new list capacity\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#000\"\u003esize_t\u003c/span\u003e \u003cspan style=\"color:#000\"\u003enew_allocated\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e ((\u003cspan style=\"color:#000\"\u003esize_t\u003c/span\u003e)\u003cspan style=\"color:#000\"\u003enewsize\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e+\u003c/span\u003e (\u003cspan style=\"color:#000\"\u003enewsize\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#1c01ce\"\u003e3\u003c/span\u003e) \u003cspan style=\"color:#000\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#1c01ce\"\u003e6\u003c/span\u003e) \u003cspan style=\"color:#000\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e~\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003esize_t\u003c/span\u003e)\u003cspan style=\"color:#1c01ce\"\u003e3\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#177500\"\u003e// allocate memory for the new capacity\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#177500\"\u003e// and copy list items to the new memory block is necessary\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#000\"\u003esize_t\u003c/span\u003e \u003cspan style=\"color:#000\"\u003enum_allocated_bytes\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#000\"\u003enew_allocated\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a90d91\"\u003esizeof\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003ePyObject\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e*\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003ePyObject\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e**\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eitems\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#000\"\u003ePyObject\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e**\u003c/span\u003e)\u003cspan style=\"color:#000\"\u003ePyMem_Realloc\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#000\"\u003eob_item\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003enum_allocated_bytes\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#000\"\u003eob_item\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#000\"\u003eitems\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#177500\"\u003e// set new list length and capacity\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e\u003cspan style=\"color:#177500\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#000\"\u003ePy_SET_SIZE\u003c/span\u003e(\u003cspan style=\"color:#000\"\u003eself\u003c/span\u003e, \u003cspan style=\"color:#000\"\u003enewsize\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#000\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#000\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#000\"\u003eallocated\u003c/span\u003e \u003cspan style=\"color:#000\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#000\"\u003enew_allocated\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a90d91\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#1c01ce\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd that\u0026#39;s basically it!\u003c/p\u003e\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\u003cp\u003eAs we found out, these operations are O(1):\u003c/p\u003e\u003cul\u003e\u003cli\u003eselect an item by index \u003ccode\u003elst[idx]\u003c/code\u003e\u003c/li\u003e\u003cli\u003ecount items \u003ccode\u003elen(lst)\u003c/code\u003e\u003c/li\u003e\u003cli\u003eadd an item to the end of the list \u003ccode\u003e.append(item)\u003c/code\u003e\u003c/li\u003e\u003cli\u003eremove an item from the end of the list \u003ccode\u003e.pop()\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eOther operations are \u0026#34;slow\u0026#34;:\u003c/p\u003e\u003cul\u003e\u003cli\u003eInsert or delete an item by index. \u003ccode\u003e.insert(idx, item)\u003c/code\u003e and \u003ccode\u003e.pop(idx)\u003c/code\u003e take linear time O(n) because they shift all the elements after the target one.\u003c/li\u003e\u003cli\u003eSearch or delete an item by value. \u003ccode\u003eitem in lst\u003c/code\u003e, \u003ccode\u003e.index(item)\u003c/code\u003e and \u003ccode\u003e.remove(item)\u003c/code\u003e take linear time O(n) because they iterate over all the elements.\u003c/li\u003e\u003cli\u003eSelect a slice of \u003ccode\u003ek\u003c/code\u003e elements. \u003ccode\u003elst[from:to]\u003c/code\u003e takes O(k).\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eDoes this mean that you should not use \u0026#34;slow\u0026#34; operations? Of course not. If you have a list of 1000 items, the difference between O(1) and O(n) for a single operation is insignificant.\u003c/p\u003e\u003cp\u003eOn the other hand, if you perform a \u0026#34;slow\u0026#34; operation on a list of 1000 items a million times — this is quite significant. The same goes if you invoke a single \u0026#34;slow\u0026#34; operation on a list of a million items.\u003c/p\u003e\u003cp\u003eTherefore, it is useful to know which list methods take constant time and which take linear time — to make a conscious decision in a specific situation.\u003c/p\u003e\u003cp\u003eI hope you\u0026#39;ll see Python lists in a new way after this article. Thanks for reading!\u003c/p\u003e\u003cp\u003e\u003cem\u003e\u003ca href=\"/subscribe/\"\u003e\u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e \u003cstrong\u003eSubscribe\u003c/strong\u003e\u003c/a\u003e\nto keep up with new posts.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cfooter class=\"post__footer\"\u003e\u003cdiv class=\"row\"\u003e\u003cdiv class=\"col-xs-12\"\u003e\u003cdiv class=\"post__date\"\u003e\u003ctime datetime=\"2021-11-12 17:55:00 +0000 UTC\"\u003e12 Nov, 2021\u003c/time\u003e\u003c/div\u003e\u003cdiv class=\"post__tags\"\u003e\u003ca href=\"/tags/python/\"\u003epython\u003c/a\u003e \u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/footer\u003e\u003c/article\u003e",
  "Date": "2021-11-12T17:55:00Z",
  "Author": "Anton Zhiyanov"
}