{
  "Source": "arthurchiao.art",
  "Title": "Linux 服务器功耗与性能管理（四）：监控、配置、调优（2024）",
  "Link": "https://arthurchiao.art/blog/linux-cpu-4-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eLinux 服务器功耗与性能管理（四）：监控、配置、调优（2024）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2024-02-15 | Last Update 2024-02-15\u003c/p\u003e\n  \n  \u003cp\u003e整理一些 Linux 服务器性能相关的 CPU 硬件基础及内核子系统知识。\u003c/p\u003e\n\n\u003cp\u003e水平有限，文中不免有错误或过时之处，请酌情参考。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"/blog/linux-cpu-1-zh/\"\u003eLinux 服务器功耗与性能管理（一）：CPU 硬件基础（2024）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/linux-cpu-2-zh/\"\u003eLinux 服务器功耗与性能管理（二）：几个内核子系统的设计（2024）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/linux-cpu-3-zh/\"\u003eLinux 服务器功耗与性能管理（三）：cpuidle 子系统的实现（2024）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/linux-cpu-4-zh/\"\u003eLinux 服务器功耗与性能管理（四）：监控、配置、调优（2024）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/linux-cpu-5-zh/\"\u003eLinux 服务器功耗与性能管理（五）：问题讨论（2024）\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#1-sysfs-相关目录\" id=\"markdown-toc-1-sysfs-相关目录\"\u003e1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esysfs\u003c/code\u003e 相关目录\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-sysdevicessystemcpucpun-目录\" id=\"markdown-toc-11-sysdevicessystemcpucpun-目录\"\u003e1.1 \u003ccode\u003e/sys/devices/system/cpu/\u003cmark\u003ecpu{N}\u003c/mark\u003e/\u003c/code\u003e 目录\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#111-sysdevicessystemcpucpuncpufreq-p-state\" id=\"markdown-toc-111-sysdevicessystemcpucpuncpufreq-p-state\"\u003e1.1.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/devices/system/cpu/cpu\u0026lt;N\u0026gt;/cpufreq/\u003c/code\u003e (\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ep-state\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e)\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#112-sysdevicessystemcpucpuncpuidle-c-states\" id=\"markdown-toc-112-sysdevicessystemcpucpuncpuidle-c-states\"\u003e1.1.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/devices/system/cpu/cpu\u0026lt;N\u0026gt;/cpuidle/\u003c/code\u003e (\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ec-states\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e)\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#113-sysdevicessystemcpucpunpower\" id=\"markdown-toc-113-sysdevicessystemcpucpunpower\"\u003e1.1.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/devices/system/cpu/cpu\u0026lt;N\u0026gt;/power/\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#114-sysdevicessystemcpucpuntopology\" id=\"markdown-toc-114-sysdevicessystemcpucpuntopology\"\u003e1.1.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/devices/system/cpu/cpu\u0026lt;N\u0026gt;/topology/\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-sysdevicessystemcpucpuidlegovernordriver\" id=\"markdown-toc-12-sysdevicessystemcpucpuidlegovernordriver\"\u003e1.2 \u003ccode\u003e/sys/devices/system/cpu/\u003cmark\u003ecpuidle\u003c/mark\u003e/\u003c/code\u003e：\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003egovernor/driver\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-内核启动项\" id=\"markdown-toc-2-内核启动项\"\u003e2 内核启动项\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-idle-loop-配置\" id=\"markdown-toc-21-idle-loop-配置\"\u003e2.1 idle loop 配置\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#211-idlepoll\" id=\"markdown-toc-211-idlepoll\"\u003e2.1.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eidle=poll\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#212-idlehalt\" id=\"markdown-toc-212-idlehalt\"\u003e2.1.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eidle=halt\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#213-idlenomwait\" id=\"markdown-toc-213-idlenomwait\"\u003e2.1.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eidle=nomwait\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-厂商相关的-p-state-参数\" id=\"markdown-toc-22-厂商相关的-p-state-参数\"\u003e2.2 厂商相关的 p-state 参数\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#221-intel_pstate\" id=\"markdown-toc-221-intel_pstate\"\u003e2.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eintel_pstate\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#222-amd_pstat\" id=\"markdown-toc-222-amd_pstat\"\u003e2.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAMD_pstat\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-max_cstate\" id=\"markdown-toc-23-max_cstate\"\u003e2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e*.max_cstate\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-cpuidleoff\" id=\"markdown-toc-24-cpuidleoff\"\u003e2.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpuidle.off\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#25-cpuidlegovernor\" id=\"markdown-toc-25-cpuidlegovernor\"\u003e2.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpuidle.governor\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#26-nohz\" id=\"markdown-toc-26-nohz\"\u003e2.6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enohz\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-监控\" id=\"markdown-toc-3-监控\"\u003e3 监控\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-频率\" id=\"markdown-toc-31-频率\"\u003e3.1 频率\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-功耗电流\" id=\"markdown-toc-32-功耗电流\"\u003e3.2 功耗、电流\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-温度等\" id=\"markdown-toc-33-温度等\"\u003e3.3 温度等\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-sysfs-详细信息\" id=\"markdown-toc-34-sysfs-详细信息\"\u003e3.4 sysfs 详细信息\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-调优工具\" id=\"markdown-toc-4-调优工具\"\u003e4 调优工具\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-tunedtuned-adm\" id=\"markdown-toc-41-tunedtuned-adm\"\u003e4.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etuned/tuned-adm\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-turbostat查看-turbo-freq\" id=\"markdown-toc-42-turbostat查看-turbo-freq\"\u003e4.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eturbostat\u003c/code\u003e：查看 turbo freq\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-调优案例\" id=\"markdown-toc-5-调优案例\"\u003e5 调优案例\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#51-c-state-太深导致网络收发包不及时\" id=\"markdown-toc-51-c-state-太深导致网络收发包不及时\"\u003e5.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ec-state\u003c/code\u003e 太深导致网络收发包不及时\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#参考资料\" id=\"markdown-toc-参考资料\"\u003e参考资料\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"1-sysfs-相关目录\"\u003e1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esysfs\u003c/code\u003e 相关目录\u003c/h1\u003e\n\n\u003ch2 id=\"11-sysdevicessystemcpucpun-目录\"\u003e1.1 \u003ccode\u003e/sys/devices/system/cpu/\u003cmark\u003ecpu{N}\u003c/mark\u003e/\u003c/code\u003e 目录\u003c/h2\u003e\n\n\u003cp\u003e系统中的每个 CPU，都对应一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/devices/system/cpu/cpu\u0026lt;N\u0026gt;/cpuidle/\u003c/code\u003e 目录，\n其中 N 是 CPU ID，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etree /sys/devices/system/cpu/cpu0/\n/sys/devices/system/cpu/cpu0/\n├── cache\n│   ├── index0\n│   ├── ...\n│   ├── index3\n│   └── uevent\n├── cpufreq -\u0026gt; ../cpufreq/policy0\n├── cpuidle\n│   ├── state0\n│   │   ├── above\n│   │   ├── below\n│   │   ├── default_status\n│   │   ├── desc\n│   │   ├── disable\n│   │   ├── latency\n│   │   ├── name\n│   │   ├── power\n│   │   ├── rejected\n│   │   ├── residency\n│   │   ├── \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\n│   │   └── usage\n│   └── state1\n│       ├── above\n│       ├── below\n│       ├── default_status\n│       ├── desc\n│       ├── disable\n│       ├── latency\n│       ├── name\n│       ├── power\n│       ├── rejected\n│       ├── residency\n│       ├── \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\n│       └── usage\n├── crash_notes\n├── crash_notes_size\n├── driver -\u0026gt; ../../../../bus/cpu/drivers/processor\n├── firmware_node -\u0026gt; ../../../LNXSYSTM:00/LNXCPU:00\n├── hotplug\n│   ├── fail\n│   ├── state\n│   └── target\n├── node0 -\u0026gt; ../../node/node0\n├── power\n│   ├── async\n│   ├── autosuspend_delay_ms\n│   ├── control\n│   ├── pm_qos_resume_latency_us\n│   ├── runtime_active_kids\n│   ├── runtime_active_time\n│   ├── runtime_enabled\n│   ├── runtime_status\n│   ├── runtime_suspended_time\n│   └── runtime_usage\n├── subsystem -\u0026gt; ../../../../bus/cpu\n├── topology\n│   ├── cluster_cpus\n│   ├── cluster_cpus_list\n│   ├── cluster_id\n│   ├── core_cpus\n│   ├── core_cpus_list\n│   ├── core_id\n│   ├── core_siblings\n│   ├── core_siblings_list\n│   ├── die_cpus\n│   ├── die_cpus_list\n│   ├── die_id\n│   ├── package_cpus\n│   ├── package_cpus_list\n│   ├── physical_package_id\n│   ├── thread_siblings\n│   └── thread_siblings_list\n└── uevent\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e里面包括了很多硬件相关的子系统信息，跟我们本次主题相关的几个：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003ecpufreq\u003c/li\u003e\n  \u003cli\u003ecpuidle\u003c/li\u003e\n  \u003cli\u003epower：PM QoS 相关信息，可以在这里面查到\u003c/li\u003e\n  \u003cli\u003etopology：第一篇介绍的 PKG-CORE-CPU 拓扑，信息可以在这里面查到\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e下面分别看下这几个子目录。\u003c/p\u003e\n\n\u003ch3 id=\"111-sysdevicessystemcpucpuncpufreq-p-state\"\u003e1.1.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/devices/system/cpu/cpu\u0026lt;N\u0026gt;/cpufreq/\u003c/code\u003e (\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ep-state\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e)\u003c/h3\u003e\n\n\u003cp\u003e处理器执行任务时的运行频率、超频等等相关的参数，管理的是 p-state：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etree /sys/devices/system/cpu/cpu0/cpufreq/\n/sys/devices/system/cpu/cpu0/cpufreq/\n├── affected_cpus\n├── cpuinfo_max_freq\n├── cpuinfo_min_freq\n├── cpuinfo_transition_latency\n├── related_cpus\n├── scaling_available_governors\n├── scaling_cur_freq\n├── scaling_driver\n├── scaling_governor\n├── scaling_max_freq\n├── scaling_min_freq\n└── scaling_setspeed\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"112-sysdevicessystemcpucpuncpuidle-c-states\"\u003e1.1.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/devices/system/cpu/cpu\u0026lt;N\u0026gt;/cpuidle/\u003c/code\u003e (\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ec-states\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e)\u003c/h3\u003e\n\n\u003cp\u003e每个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct cpuidle_state\u003c/code\u003e 对象都有一个对应的 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003estruct cpuidle_state_usage\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\n对象（上一篇中有更新这个 usage 的相关代码），其中包含了这个 idle state 的统计信息，\n也是就是我们下面看到的这些：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etree /sys/devices/system/cpu/cpu0/cpuidle/\n/sys/devices/system/cpu/cpu0/cpuidle/\n├── state0\n│   ├── above\n│   ├── below\n│   ├── default_status\n│   ├── desc\n│   ├── disable\n│   ├── latency\n│   ├── name\n│   ├── power\n│   ├── rejected\n│   ├── residency\n│   ├── \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\n│   └── usage\n├── state1\n│   ├── above\n│   ├── below\n│   ├── default_status\n│   ├── desc\n│   ├── disable\n│   ├── latency\n│   ├── name\n│   ├── power\n│   ├── rejected\n│   ├── residency\n│   ├── s2idle\n│   │   ├── \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\n│   │   └── usage\n│   ├── \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\n│   └── usage\n│...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estate0\u003c/code\u003e、\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estate1\u003c/code\u003e 等目录对应 idle state 对象，也跟这个 CPU 的 c-state 对应，数字越大，c-state 越深。\n文件说明，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edesc\u003c/code\u003e/\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ename\u003c/code\u003e：都是这个 idle state 的描述。name 比较简洁，desc 更长。\u003cstrong\u003e\u003cmark\u003e除了这俩，其他字段都是整型\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eabove\u003c/code\u003e：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eidle duration \u0026lt; target_residency\u003c/code\u003e 的次数。也就是请求到了这个状态，但是 idle duration 太短，最终放弃进入这个状态。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebelow\u003c/code\u003e：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eidle duration\u003c/code\u003e 虽然大于  \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etarget_residency\u003c/code\u003e，但是大的比较多，最终找到了一个更深的 idle state 的次数。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edisable\u003c/code\u003e：\u003cstrong\u003e\u003cmark\u003e唯一的可写字段\u003c/mark\u003e\u003c/strong\u003e：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1\u003c/code\u003e 表示禁用，governor 就不会在这个 CPU 上选这状态了。注意这个是 per-cpu 配置，此外还有一个全局配置。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edefault_status\u003c/code\u003e：default status of this state, “enabled” or “disabled”.\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003elatency\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e：这个 idle state 的 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eexit latency\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，单位 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eus\u003c/code\u003e。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epower\u003c/code\u003e：这个字段通常是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0\u003c/code\u003e，表示不支持。因为功耗的统计很复杂，这个字段的定义也不是很明确。建议不要参考这个值。\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eresidency\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e：这个 idle state 的 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003etarget residency\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，单位 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eus\u003c/code\u003e。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etime\u003c/code\u003e：内核统计的该 CPU 花在这个状态的总时间，单位 ms。这个是内核统计的，可能不够准，因此如有处理器硬件统计的类似指标，建议参考后者。\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eusage\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e：成功进入这个 idle state 的次数。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erejected\u003c/code\u003e：被拒绝的要求进入这个 idle state 的 request 的数量。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"113-sysdevicessystemcpucpunpower\"\u003e1.1.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/devices/system/cpu/cpu\u0026lt;N\u0026gt;/power/\u003c/code\u003e\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etree /sys/devices/system/cpu/cpu0/\n/sys/devices/system/cpu/cpu0/\n├── power\n│   ├── async\n│   ├── autosuspend_delay_ms\n│   ├── control\n│   ├── pm_qos_resume_latency_us\n│   ├── runtime_active_kids\n│   ├── runtime_active_time\n│   ├── runtime_enabled\n│   ├── runtime_status\n│   ├── runtime_suspended_time\n│   └── runtime_usage\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"114-sysdevicessystemcpucpuntopology\"\u003e1.1.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/devices/system/cpu/cpu\u0026lt;N\u0026gt;/topology/\u003c/code\u003e\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etree /sys/devices/system/cpu/cpu0/\n/sys/devices/system/cpu/cpu0/\n├── topology\n│   ├── cluster_cpus\n│   ├── cluster_cpus_list\n│   ├── cluster_id\n│   ├── core_cpus\n│   ├── core_cpus_list\n│   ├── core_id\n│   ├── core_siblings\n│   ├── core_siblings_list\n│   ├── die_cpus\n│   ├── die_cpus_list\n│   ├── die_id\n│   ├── package_cpus\n│   ├── package_cpus_list\n│   ├── physical_package_id\n│   ├── thread_siblings\n│   └── thread_siblings_list\n└── uevent\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"12-sysdevicessystemcpucpuidlegovernordriver\"\u003e1.2 \u003ccode\u003e/sys/devices/system/cpu/\u003cmark\u003ecpuidle\u003c/mark\u003e/\u003c/code\u003e：\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003egovernor/driver\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/h2\u003e\n\n\u003cp\u003e这个目录是全局的，可以获取可用的 governor/driver 信息，也可以在运行时更改 governor。\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e /sys/devices/system/cpu/cpuidle/\navailable_governors  current_driver  current_governor  current_governor_ro\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /sys/devices/system/cpu/cpuidle/available_governors\nmenu\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /sys/devices/system/cpu/cpuidle/current_driver\nacpi_idle\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /sys/devices/system/cpu/cpuidle/current_governor\nmenu\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"2-内核启动项\"\u003e2 内核启动项\u003c/h1\u003e\n\n\u003cp\u003e除了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esysfs\u003c/code\u003e，还可以通过内核命令行参数做一些配置，可以加在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/etc/grub2.cfg\u003c/code\u003e 等位置。\u003c/p\u003e\n\n\u003ch2 id=\"21-idle-loop-配置\"\u003e2.1 idle loop 配置\u003c/h2\u003e\n\n\u003cp\u003e5.15 内核启动参数文档：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e// https://github.com/torvalds/linux/blob/v5.15/Documentation/admin-guide/kernel-parameters.txt\n\n    \u003cspan class=\"nv\"\u003eidle\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e        \u003cspan class=\"o\"\u003e[\u003c/span\u003eX86]\n            Format: \u003cspan class=\"nv\"\u003eidle\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003epoll, \u003cspan class=\"nv\"\u003eidle\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehalt, \u003cspan class=\"nv\"\u003eidle\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003enomwait\n\n            1. \u003cspan class=\"nv\"\u003eidle\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003epoll forces a polling idle loop that can slightly improve the performance of waking up a\n               idle CPU, but will use a lot of power and make the system run hot. Not recommended.\n            2. \u003cspan class=\"nv\"\u003eidle\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehalt: Halt is forced to be used \u003cspan class=\"k\"\u003efor \u003c/span\u003eCPU idle. In such \u003cspan class=\"k\"\u003ecase\u003c/span\u003e C2/C3 won\u003cspan class=\"s1\"\u003e\u0026#39;t be used again.\n            3. idle=nomwait: Disable mwait for CPU C-states\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"211-idlepoll\"\u003e2.1.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eidle=poll\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eCPU 空闲时，将执行一个“轻量级”的指令序列（”lightweight” sequence of instructions in a tight loop）\n来防止 CPU 进入任何节能模式。\u003c/p\u003e\n\n\u003cp\u003e这种配置除了功耗问题，还超线程场景下\u003cstrong\u003e\u003cmark\u003e可能有副作用，性能反而降低\u003c/mark\u003e\u003c/strong\u003e，后面单独讨论。\u003c/p\u003e\n\n\u003ch3 id=\"212-idlehalt\"\u003e2.1.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eidle=halt\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e强制 cpuidle 子系统使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eHLT\u003c/code\u003e 指令\n（一般会 suspend 程序的执行并使硬件进入最浅的 idle state）来实现节能。\u003c/p\u003e\n\n\u003cp\u003e这种配置下，\u003cstrong\u003e\u003cmark\u003e最大 c-state 深度\u003c/mark\u003e\u003c/strong\u003e是 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eC1\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"213-idlenomwait\"\u003e2.1.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eidle=nomwait\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e禁用通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eMWAIT\u003c/code\u003e 指令来要求硬件进入 idle state。\u003c/p\u003e\n\n\u003cp\u003e内核文档 \u003ca href=\"https://github.com/torvalds/linux/blob/v5.15/Documentation/admin-guide/pm/cpuidle.rst\"\u003eCPU Idle Time Management\u003c/a\u003e\n说，在 Intel 机器上，这会禁用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eintel_idle\u003c/code\u003e，用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eacpi_idle\u003c/code\u003e（idle states / p-states 从 ACPI 获取）。\u003c/p\u003e\n\n\u003ch2 id=\"22-厂商相关的-p-state-参数\"\u003e2.2 厂商相关的 p-state 参数\u003c/h2\u003e\n\n\u003ch3 id=\"221-intel_pstate\"\u003e2.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eintel_pstate\u003c/code\u003e\u003c/h3\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e// https://github.com/torvalds/linux/blob/v5.15/Documentation/admin-guide/kernel-parameters.txt#L1988\n\n\tintel_pstate=\t[X86]\n\t\t\tdisable\n\t\t\t  Do not enable intel_pstate as the default\n\t\t\t  scaling driver for the supported processors\n\t\t\tpassive\n\t\t\t  Use intel_pstate as a scaling driver, but configure it\n\t\t\t  to work with generic cpufreq governors (instead of\n\t\t\t  enabling its internal governor).  This mode cannot be\n\t\t\t  used along with the hardware-managed P-states (HWP)\n\t\t\t  feature.\n\t\t\tforce\n\t\t\t  Enable intel_pstate on systems that prohibit it by default\n\t\t\t  in favor of acpi-cpufreq. Forcing the intel_pstate driver\n\t\t\t  instead of acpi-cpufreq may disable platform features, such\n\t\t\t  as thermal controls and power capping, that rely on ACPI\n\t\t\t  P-States information being indicated to OSPM and therefore\n\t\t\t  should be used with caution. This option does not work with\n\t\t\t  processors that aren\u0026#39;t supported by the intel_pstate driver\n\t\t\t  or on platforms that use pcc-cpufreq instead of acpi-cpufreq.\n\t\t\tno_hwp\n\t\t\t  Do not enable hardware P state control (HWP)\n\t\t\t  if available.\n\t\t\thwp_only\n\t\t\t  Only load intel_pstate on systems which support\n\t\t\t  hardware P state control (HWP) if available.\n\t\t\tsupport_acpi_ppc\n\t\t\t  Enforce ACPI _PPC performance limits. If the Fixed ACPI\n\t\t\t  Description Table, specifies preferred power management\n\t\t\t  profile as \u0026#34;Enterprise Server\u0026#34; or \u0026#34;Performance Server\u0026#34;,\n\t\t\t  then this feature is turned on by default.\n\t\t\tper_cpu_perf_limits\n\t\t\t  Allow per-logical-CPU P-State performance control limits using\n\t\t\t  cpufreq sysfs interface\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"222-amd_pstat\"\u003e2.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAMD_pstat\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAMD_idle.max_cstate=1 AMD_pstat=disable\u003c/code\u003e 等等，上面的内核文档还没收录，或者在别的地方。\u003c/p\u003e\n\n\u003ch2 id=\"23-max_cstate\"\u003e2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e*.max_cstate\u003c/code\u003e\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eintel_idle.max_cstate=\u0026lt;n\u0026gt;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAMD_idle.max_cstate=\u0026lt;n\u0026gt;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eprocessor.max_cstate=\u0026lt;n\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e这里面的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003en\u003c/code\u003e 就是我们在 sysfs 目录中看到 \n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/sys/devices/system/cpu/cpu0/cpuidle/state{n}\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e// https://github.com/torvalds/linux/blob/v5.15/Documentation/admin-guide/kernel-parameters.txt\n\n\tintel_idle.max_cstate=\t[KNL,HW,ACPI,X86]\n\t\t\t0\tdisables intel_idle and fall back on acpi_idle.\n\t\t\t1 to 9\tspecify maximum depth of C-state.\n\n\tprocessor.max_cstate=\t[HW,ACPI]\n\t\t\tLimit processor to maximum C-state\n\t\t\tmax_cstate=9 overrides any DMI blacklist limit.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAMD 的没收录到这个文档中。\u003c/p\u003e\n\n\u003ch2 id=\"24-cpuidleoff\"\u003e2.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpuidle.off\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpuidle.off=1\u003c/code\u003e 完全禁用 CPU 空闲时间管理。\u003c/p\u003e\n\n\u003cp\u003e加上这个配置后，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e空闲 CPU 上的 idle loop 仍然会运行，但不会再进入 cpuidle 子系统；\u003c/li\u003e\n  \u003cli\u003eidle loop 通过 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eCPU architecture support code\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 使硬件进入 idle state。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e不建议在生产使用。\u003c/p\u003e\n\n\u003ch2 id=\"25-cpuidlegovernor\"\u003e2.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpuidle.governor\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e指定要使用的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCPUIdle\u003c/code\u003e 管理器。例如 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpuidle.governor=menu\u003c/code\u003e 强制使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emenu\u003c/code\u003e 管理器。\u003c/p\u003e\n\n\u003ch2 id=\"26-nohz\"\u003e2.6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enohz\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e可设置 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eon/off\u003c/code\u003e，是否启用每秒 HZ 次的定时器中断。\u003c/p\u003e\n\n\u003ch1 id=\"3-监控\"\u003e3 监控\u003c/h1\u003e\n\n\u003ch2 id=\"31-频率\"\u003e3.1 频率\u003c/h2\u003e\n\n\u003cp\u003e可以从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/cpuinfo\u003c/code\u003e 获取，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/cpuinfo | \u003cspan class=\"nb\"\u003eawk\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;/cpu MHz/ { printf(\u0026#34;cpu=%d freq=%s\\n\u0026#34;, i++, $NF)}\u0026#39;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003ecpu\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003efreq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3393.622\n\u003cspan class=\"nv\"\u003ecpu\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003efreq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3393.622\n\u003cspan class=\"nv\"\u003ecpu\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2 \u003cspan class=\"nv\"\u003efreq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3393.622\n\u003cspan class=\"nv\"\u003ecpu\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3 \u003cspan class=\"nv\"\u003efreq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3393.622\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e某些开源组件可能已经采集了，如果没有的话自己采一下，然后送到 prometheus。\n这里拿一台 base freq 2.8GHz、max freq 3.7GHz，配置了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eidle=poll\u003c/code\u003e 测试机，\n下面是各 CPU 的频率，\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/linux-cpu/per-cpu-freq.png\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Per-CPU running frequency\u003c/p\u003e\n\n\u003cp\u003e几点说明，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eidle=poll\u003c/code\u003e 禁用了节能模式（c1/c2/c3..），没有负载也会空转（执行轻量级指令），避免频率掉下去；\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e不是所有 CPU 都能同时达到\u003c/mark\u003e\u003c/strong\u003e 3.7GHz 的 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003emax/turbo freq\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，原因我们在第二篇解释过了；\u003c/li\u003e\n  \u003cli\u003e实际上，只有很少的 CPU 能同时达到 max freq。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"32-功耗电流\"\u003e3.2 功耗、电流\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/linux-cpu/node-power-and-current.png\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Power consumption and electic current of an empty node (no workload before and after)\nafter setting \u003cmark\u003e\u003ccode\u003eidle=poll\u003c/code\u003e\u003c/mark\u003e for test\u003c/p\u003e\n\n\u003ch2 id=\"33-温度等\"\u003e3.3 温度等\u003c/h2\u003e\n\n\u003cp\u003e服务器厂商一般能提供。\u003c/p\u003e\n\n\u003ch2 id=\"34-sysfs-详细信息\"\u003e3.4 sysfs 详细信息\u003c/h2\u003e\n\n\u003cp\u003e按需。\u003c/p\u003e\n\n\u003ch1 id=\"4-调优工具\"\u003e4 调优工具\u003c/h1\u003e\n\n\u003cp\u003e除了通过 sysfs 和内核启动项，还可以通过一些更上层的工具配置功耗和性能模式。\u003c/p\u003e\n\n\u003ch2 id=\"41-tunedtuned-adm\"\u003e4.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etuned/tuned-adm\u003c/code\u003e\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etuned-adm list\nAvailable profiles:\n- balanced                    - General non-specialized tuned profile\n- desktop                     - Optimize \u003cspan class=\"k\"\u003efor \u003c/span\u003ethe desktop use-case\n- latency-performance         - Optimize \u003cspan class=\"k\"\u003efor \u003c/span\u003edeterministic performance at the cost of increased power consumption\n- network-latency             - Optimize \u003cspan class=\"k\"\u003efor \u003c/span\u003edeterministic performance at the cost of increased power consumption, focused on low latency network performance\n- network-throughput          - Optimize \u003cspan class=\"k\"\u003efor \u003c/span\u003estreaming network throughput, generally only necessary on older CPUs or 40G+ networks\n- powersave                   - Optimize \u003cspan class=\"k\"\u003efor \u003c/span\u003elow power consumption\n- throughput-performance      - Broadly applicable tuning that provides excellent performance across a variety of common server workloads\n- virtual-guest               - Optimize \u003cspan class=\"k\"\u003efor \u003c/span\u003erunning inside a virtual guest\n- virtual-host                - Optimize \u003cspan class=\"k\"\u003efor \u003c/span\u003erunning KVM guests\nCurrent active profile: latency-performance\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etuned-adm active\nCurrent active profile: latency-performance\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etuned-adm profile_info latency-performance\nProfile name:\nlatency-performance\n\nProfile summary:\nOptimize \u003cspan class=\"k\"\u003efor \u003c/span\u003edeterministic performance at the cost of increased power consumption\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etuned-adm profile_mode\nProfile selection mode: manual\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"42-turbostat查看-turbo-freq\"\u003e4.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eturbostat\u003c/code\u003e：查看 turbo freq\u003c/h2\u003e\n\n\u003cp\u003e来自 man page：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eturbostat - Report processor frequency and idle statistics\nturbostat  reports processor topology, frequency, idle power-state statistics, temperature and power on X86 processors.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e–interval\u003c/li\u003e\n  \u003cli\u003e–num_iterations\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e例子：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eturbostat \u003cspan class=\"nt\"\u003e--quiet\u003c/span\u003e \u003cspan class=\"nt\"\u003e--hide\u003c/span\u003e sysfs,IRQ,SMI,CoreTmp,PkgTmp,GFX%rc6,GFXMHz,PkgWatt,CorWatt,GFXWatt\n            Core CPU  Avg_MHz    Busy%     Bzy_MHz   TSC_MHz   CPU%c1    CPU%c3    CPU%c6    CPU%c7\n            -    -    488        12.52     3900      3498      12.50     0.00      0.00      74.98\n            0    0    5          0.13      3900      3498      99.87     0.00      0.00      0.00\n            0    4    3897       99.99     3900      3498      0.01\n            1    1    0          0.00      3856      3498      0.01      0.00      0.00      99.98\n            1    5    0          0.00      3861      3498      0.01\n            2    2    1          0.02      3889      3498      0.03      0.00      0.00      99.95\n            2    6    0          0.00      3863      3498      0.05\n            3    3    0          0.01      3869      3498      0.02      0.00      0.00      99.97\n            3    7    0          0.00      3878      3498      0.03\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e出于性能考虑，turbostat 以 topology order 运行，这样同属一个 CORE 的两个 hyper-thread 在输出中是相邻的。\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eBusy%\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e：\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eC0\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 状态所占的时间百分比。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eNote that cpu4 in this example is 99.99% busy, while the other CPUs are all under 1% busy.\nNotice that cpu4’s HT sibling is cpu0, which is under 1% busy, but can get into CPU%c1 only,\nbecause its cpu4’s activity on shared hardware keeps it from entering a deeper C-state.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch1 id=\"5-调优案例\"\u003e5 调优案例\u003c/h1\u003e\n\n\u003ch2 id=\"51-c-state-太深导致网络收发包不及时\"\u003e5.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ec-state\u003c/code\u003e 太深导致网络收发包不及时\u003c/h2\u003e\n\n\u003cp\u003e详见 \u003ca href=\"/blog/linux-net-stack-tuning-rx-zh/\"\u003eLinux 网络栈接收数据（RX）：配置调优\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch1 id=\"参考资料\"\u003e参考资料\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://wiki.bu.ost.ch/infoportal/_media/embedded_systems/ethercat/controlling_processor_c-state_usage_in_linux_v1.1_nov2013.pdf\"\u003eControlling Processor C-State Usage in Linux\u003c/a\u003e, A Dell technical white paper describing the use of C-states with Linux operating systems, 2013\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/linux-net-stack-tuning-rx-zh/\"\u003eLinux 网络栈接收数据（RX）：配置调优\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://doc.opensuse.org/documentation/leap/archive/42.2/tuning/html/book.sle.tuning/cha.tuning.power.html\"\u003eC-state tuning guide\u003c/a\u003e opensuse.org\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/linux-cpu-3-zh/\"\u003e\u003cspan\u003e« Linux 服务器功耗与性能管理（三）：cpuidle 子系统的实现（2024）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/linux-cpu-5-zh/\"\u003e\u003cspan\u003eLinux 服务器功耗与性能管理（五）：问题讨论（2024） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2024-02-15T00:00:00Z",
  "Author": "Arthur Chiao"
}