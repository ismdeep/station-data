{
  "Source": "arthurchiao.art",
  "Title": "Cilium Network Topology and Traffic Path on AWS",
  "Link": "https://arthurchiao.art/blog/cilium-network-topology-on-aws/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eCilium Network Topology and Traffic Path on AWS\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2019-10-26 | Last Update 2022-10-13\u003c/p\u003e\n  \n  \u003cp\u003eThis post explores the \u003cstrong\u003enetwork topology\u003c/strong\u003e and \u003cstrong\u003etraffic path\u003c/strong\u003e between two\ncross-host Pods in a Cilium powered K8S cluster on AWS. We will use general Linux\ncommands to fulfill this task. At the end of this post, we will get a picture\nlike this:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-network-topology-on-aws/cilium-aws-global-data-flow.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eBesides, we’ll also look into the code to see how Cilium achieve this.\nCode based on \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ev1.10.7\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAlso, the network topology and routing rules/entries are quite similar in other\ncloud vendors, such as Cilium on AlibabaCloud.\u003c/p\u003e\n\n\u003cp\u003eThis post is included in\n\u003ca href=\"/blog/cilium-code-series/\"\u003eCilium Code Walk Through Series\u003c/a\u003e.\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#1-preparation\" id=\"markdown-toc-1-preparation\"\u003e1 Preparation\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-test-environment\" id=\"markdown-toc-11-test-environment\"\u003e1.1 Test Environment\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-container-netns-and-nsenter\" id=\"markdown-toc-12-container-netns-and-nsenter\"\u003e1.2 Container netns and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ensenter\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-verify-basic-connectivity\" id=\"markdown-toc-13-verify-basic-connectivity\"\u003e1.3 Verify Basic Connectivity\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-egress-pod---host---vpc-network\" id=\"markdown-toc-2-egress-pod---host---vpc-network\"\u003e2 Egress: Pod -\u0026gt; Host -\u0026gt; VPC Network\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-network-inside-container\" id=\"markdown-toc-21-network-inside-container\"\u003e2.1 Network inside container\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-veth-pair-connecting-to-host\" id=\"markdown-toc-22-veth-pair-connecting-to-host\"\u003e2.2 Veth Pair connecting to host\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-egress-bpf-code\" id=\"markdown-toc-23-egress-bpf-code\"\u003e2.3 Egress BPF Code\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-host-routing-table\" id=\"markdown-toc-24-host-routing-table\"\u003e2.4 Host routing table\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-ingress\" id=\"markdown-toc-3-ingress\"\u003e3 Ingress\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-host-routing-table\" id=\"markdown-toc-31-host-routing-table\"\u003e3.1 Host routing table\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-ingress-bpf-code\" id=\"markdown-toc-32-ingress-bpf-code\"\u003e3.2 Ingress BPF code\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-container-receive\" id=\"markdown-toc-34-container-receive\"\u003e3.4 Container receive\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-the-implementation-code-walk-through\" id=\"markdown-toc-4-the-implementation-code-walk-through\"\u003e4 The implementation: code walk through\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-pod-ingress-rule--route-entry\" id=\"markdown-toc-41-pod-ingress-rule--route-entry\"\u003e4.1 Pod ingress rule \u0026amp; route entry\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-pod-egress-rule--route-entry\" id=\"markdown-toc-42-pod-egress-rule--route-entry\"\u003e4.2 Pod egress rule \u0026amp; route entry\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-summary\" id=\"markdown-toc-5-summary\"\u003e5 Summary\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#references\" id=\"markdown-toc-references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"1-preparation\"\u003e1 Preparation\u003c/h1\u003e\n\n\u003ch2 id=\"11-test-environment\"\u003e1.1 Test Environment\u003c/h2\u003e\n\n\u003cp\u003eWe have two K8S hosts:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003enode1: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.5.2.48\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003enode2: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.5.2.58\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eand two Pods:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003epod1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.5.2.11\u003c/code\u003e on node1\u003c/li\u003e\n  \u003cli\u003epod2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.5.2.22\u003c/code\u003e on node2\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNodes and pods are in the same VPC, with VPC gateway \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.5.2.1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eNote: For security reasons, as well as easy of understanding, I have\nsubstituted the real IP/MAC addresses with faked ones. This should not\nundermine the meaningfulness of this post.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"12-container-netns-and-nsenter\"\u003e1.2 Container netns and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ensenter\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eWe will use \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ensenter\u003c/code\u003e tool tool to execute commands in container’s network\nnamespace on host, the format is:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u0026lt;pid\u0026gt; \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e \u0026lt;\u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ewhere,\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-t \u0026lt;pid\u0026gt;\u003c/code\u003e: the target process \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;pid\u0026gt;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-n\u003c/code\u003e: enter network namespace\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;command\u0026gt;\u003c/code\u003e: command to execute\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ethis is equivalent to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker exec \u0026lt;container\u0026gt; \u0026lt;command\u0026gt;\u003c/code\u003e, but more flexible\nthan the latter, as there are often shortage of network tools or lack of\nprivileges inside containers, executing commands on hosts doesn’t have this\nlimitation.\u003c/p\u003e\n\n\u003cp\u003eGet container process ID:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node1 \u003cspan class=\"c\"\u003e# docker inspect 04d740a33726 | grep Pid\u003c/span\u003e\n            \u003cspan class=\"s2\"\u003e\u0026#34;Pid\u0026#34;\u003c/span\u003e: 75869,\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e75869\u003c/code\u003e is just the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epid\u003c/code\u003e we wanted.\u003c/p\u003e\n\n\u003ch2 id=\"13-verify-basic-connectivity\"\u003e1.3 Verify Basic Connectivity\u003c/h2\u003e\n\n\u003cp\u003ePing pod2 from pod1, make ensure it is reachable:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node1 \u003cspan class=\"c\"\u003e# nsenter -t 75869 -n ping 10.5.2.22 -c 2\u003c/span\u003e\n64 bytes from 10.5.2.22: \u003cspan class=\"nv\"\u003eicmp_seq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e61 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.248 ms\n64 bytes from 10.5.2.22: \u003cspan class=\"nv\"\u003eicmp_seq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e61 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.208 ms\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eOK! Next, we will explore the exact path of these packets, namely the\nnetwork devices, routing table, arp tables, BPF hooks all the way.\u003c/p\u003e\n\n\u003ch1 id=\"2-egress-pod---host---vpc-network\"\u003e2 Egress: Pod -\u0026gt; Host -\u0026gt; VPC Network\u003c/h1\u003e\n\n\u003ch2 id=\"21-network-inside-container\"\u003e2.1 Network inside container\u003c/h2\u003e\n\n\u003cp\u003eStart our journey from pod1. Check the network devices inside pod1:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node1 \u003cspan class=\"c\"\u003e# nsenter -t 75869 -n ip a\u003c/span\u003e\n1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1000\n    ...\n42: eth0@if43: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 9001 qdisc noqueue state UP\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether ee:14:d3:9a:62:42 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.5.2.11/32 brd 10.5.2.11 scope global eth0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAs can be seen, it has a loopbak interface \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elo\u003c/code\u003e and a network interface \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0\u003c/code\u003e\nwith IP address \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.5.2.11\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePay attention to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e42: eth0@if43\u003c/code\u003e\u003c/strong\u003e, this special notation means that \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0\u003c/code\u003e has an\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eifindex\u003c/code\u003e numbered \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e42\u003c/code\u003e, and that the devices with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eifindex\u003c/code\u003e \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e42\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e43\u003c/code\u003e\ncompose a \u003cstrong\u003eveth pair\u003c/strong\u003e. This \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eifindex\u003c/code\u003e is unique within the host (node1 in\nthis case), we will see this again later.\u003c/p\u003e\n\n\u003cp\u003eNext, check the route table inside container:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node1 \u003cspan class=\"c\"\u003e# nsenter -t 75869 -n route -n\u003c/span\u003e\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         10.5.2.191   0.0.0.0         UG    0      0        0 eth0\n10.5.1.191   0.0.0.0         255.255.255.255 UH    0      0        0 eth0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIt can be seen that the gateway for this pod is \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.5.1.191\u003c/code\u003e, and all egress\ntraffic will forward to this gateway. Look for the gateway on host:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node1 \u003cspan class=\"c\"\u003e# ip a | grep 10.5.2.191 -B 2\u003c/span\u003e\n31: cilium_host@cilium_net: \u0026lt;...\u0026gt; mtu 9001 ... qlen 1000\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 0a:ee:d6:5f:6c:32 brd ff:ff:ff:ff:ff:ff\n    inet 10.5.2.191/32 scope \u003cspan class=\"nb\"\u003elink \u003c/span\u003ecilium_host\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWe can see that the container gateway is held by device \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium_host\u003c/code\u003e. Actually\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium_host\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium_net\u003c/code\u003e compose another veth pair, they are both on the\nhost network space, and will be created on cilium-agent start.\u003c/p\u003e\n\n\u003cp\u003eNext, check the ARP table inside container:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node1 \u003cspan class=\"c\"\u003e# nsenter -t 75869 -n arp -n\u003c/span\u003e\nAddress                  HWtype  HWaddress           Flags Mask            Iface\n10.5.2.191            ether   86:05:d4:99:a9:f5   C                     eth0\n10.5.2.48             ether   86:05:d4:99:a9:f5   C                     eth0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIt can be seen that both container’s gateway and host IP point to the same MAC\naddress \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e86:05:d4:99:a9:f5\u003c/code\u003e. Let further determine which device holds this\naddress.\u003c/p\u003e\n\n\u003ch2 id=\"22-veth-pair-connecting-to-host\"\u003e2.2 Veth Pair connecting to host\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node1 \u003cspan class=\"c\"\u003e# ip link | grep 86:05:d4:99:a9:f5 -B 1\u003c/span\u003e\n43: lxc050ba70e11a8@if42: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 9001 qdisc ... qlen 1000\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 86:05:d4:99:a9:f5 brd ff:ff:ff:ff:ff:ff link-netnsid 1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThat’s it! Device \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elxc050ba70e11a8\u003c/code\u003e holds it. Notice the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e43:\nlxc050ba70e11a8@if42\u003c/code\u003e notation, and recall that container’s \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0\u003c/code\u003e actually\nholds \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eifindex=42\u003c/code\u003e, so we are now ensure that:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003epod1 connects to host via veth pair (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eif42 \u0026lt;--\u0026gt; if43\u003c/code\u003e, or in name presentation \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0 \u0026lt;--\u0026gt; lxc050ba70e11a8\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003edefault gateway in pod points to the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium_host\u003c/code\u003e device on host\u003c/li\u003e\n  \u003cli\u003enext L3 hop of the Pod generated traffic is \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium_host\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003enext L2 hop of the Pod generated traffic is the host end of the veth pair (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elxc050ba70e11a8\u003c/code\u003e)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThis is exactly how pod egress traffic flows from container to host.\u003c/p\u003e\n\n\u003ch2 id=\"23-egress-bpf-code\"\u003e2.3 Egress BPF Code\u003c/h2\u003e\n\n\u003cp\u003eOne of Cilium’s great powers is the dynamic traffic manipulation. It implements this\nby utilizing BPF. Detailed explanations on this topic is beyong the scope of\nthis post, refer to the official doc \u003ca href=\"https://docs.cilium.io/en/v1.6/bpf/\"\u003eBPF and XDP Reference\nGuide\u003c/a\u003e if you are interested (or my\n\u003ca href=\"/blog/cilium-bpf-xdp-reference-guide-zh/\"\u003eTRANSLATION\u003c/a\u003e\nif you could read Chinese).\u003c/p\u003e\n\n\u003cp\u003eCilium uses \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc\u003c/code\u003e BPF to filter ingress and egress traffic for containers. Let’s\nsee the egress part:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node1:~  \u003cspan class=\"c\"\u003e# tc filter show dev lxc050ba70e11a8 egress\u003c/span\u003e\nfilter protocol all pref 1 bpf\nfilter protocol all pref 1 bpf handle 0x1 bpf_lxc.o:[from-container] direct-action not_in_hw tag db59e2ea8177ded3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eNote: if the output of the above command doesn’t show the\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_lxc.o:[from-container] direct-action not_in_hw tag db59e2ea8177ded3\u003c/code\u003e\ninfo, it may be that your \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiproute2\u003c/code\u003e package is too old, try to upgrade to\na newer version.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eList all loaded BPF programs on this host (node1):\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node1:~  \u003cspan class=\"c\"\u003e# bpftool prog\u003c/span\u003e\n288: sched_cls  tag a390cb0eda39ede9\n        loaded_at Oct 22/10:48  uid 0\n        xlated 808B  jited 637B  memlock 4096B  map_ids 182,169\n...\n294: sched_cls  tag 596c1921e0319e72\n        loaded_at Oct 22/10:48  uid 0\n        xlated 176B  jited 157B  memlock 4096B\n297: sched_cls  tag db59e2ea8177ded3\n        loaded_at Oct 22/10:48  uid 0\n        xlated 19144B  jited 11706B  memlock 20480B  map_ids 285,169,171,286,287,172,277,183,283,173,179,167,180\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eLet’s dig further to see what the BPF code/rules looks like. Dump the\ninterpreted BPF code:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node1:~  \u003cspan class=\"c\"\u003e# bpftool prog dump xlated id 297\u003c/span\u003e\n   0: \u003cspan class=\"o\"\u003e(\u003c/span\u003ebf\u003cspan class=\"o\"\u003e)\u003c/span\u003e r6 \u003cspan class=\"o\"\u003e=\u003c/span\u003e r1\n   1: \u003cspan class=\"o\"\u003e(\u003c/span\u003eb7\u003cspan class=\"o\"\u003e)\u003c/span\u003e r7 \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0\n   2: \u003cspan class=\"o\"\u003e(\u003c/span\u003e63\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eu32 \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e)(\u003c/span\u003er6 +60\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e r7\n   3: \u003cspan class=\"o\"\u003e(\u003c/span\u003e63\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eu32 \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e)(\u003c/span\u003er6 +56\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e r7\n   4: \u003cspan class=\"o\"\u003e(\u003c/span\u003e63\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eu32 \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e)(\u003c/span\u003er6 +52\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e r7\n   5: \u003cspan class=\"o\"\u003e(\u003c/span\u003e63\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eu32 \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e)(\u003c/span\u003er6 +48\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e r7\n   6: \u003cspan class=\"o\"\u003e(\u003c/span\u003e63\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eu32 \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e)(\u003c/span\u003er6 +64\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e r7\n   7: \u003cspan class=\"o\"\u003e(\u003c/span\u003e18\u003cspan class=\"o\"\u003e)\u003c/span\u003e r2 \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0xffffff5a\n   9: \u003cspan class=\"o\"\u003e(\u003c/span\u003e79\u003cspan class=\"o\"\u003e)\u003c/span\u003e r1 \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eu64 \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e)(\u003c/span\u003er6 +80\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  10: \u003cspan class=\"o\"\u003e(\u003c/span\u003e79\u003cspan class=\"o\"\u003e)\u003c/span\u003e r8 \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eu64 \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e)(\u003c/span\u003er6 +216\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n   ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eDump the JITed BPF code:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node1:~  # bpftool prog dump jited id 297\n   0:   push   %rbp\n   1:   mov    %rsp,%rbp\n   4:   sub    $0x228,%rsp\n   b:   sub    $0x28,%rbp\n   f:   mov    %rbx,0x0(%rbp)\n  13:   mov    %r13,0x8(%rbp)\n  17:   mov    %r14,0x10(%rbp)\n  1b:   mov    %r15,0x18(%rbp)\n  1f:   xor    %eax,%eax\n  21:   mov    %rax,0x20(%rbp)\n  ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eOK, no further digging. If the egress traffic was not dropped by the BPF\ncode/rules, it will arrive the host, which will be processed by host\nrouting facilities.\u003c/p\u003e\n\n\u003ch2 id=\"24-host-routing-table\"\u003e2.4 Host routing table\u003c/h2\u003e\n\n\u003cp\u003eLook at the host routing table:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node1:~  \u003cspan class=\"c\"\u003e# ip rule list\u003c/span\u003e\n9:      from all fwmark 0x200/0xf00 lookup 2004\n100:    from all lookup \u003cspan class=\"nb\"\u003elocal\n\u003c/span\u003e32766:  from all lookup main\n32767:  from all lookup default\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWe see that there are 4 routing tables: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e2004\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elocal\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emain\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edefault\u003c/code\u003e.\nCheck what’s in each:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node1:~  # ip route show table 2004\nlocal default dev lo scope host\n\nroot@node1 $ ip route show table main\ndefault via 10.5.2.1 dev eth0\n10.5.2.0/24 dev eth0 proto kernel scope link src 10.5.2.48\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThe egress traffic from Pod1 will hit the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emain\u003c/code\u003e table.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eNote: To be more specific, Pod IP is allocated from ENI, and each ENI has its own\nrouting table for egress traffic. In my case here, Pod1’s IP comes from\nnode1’s default ENI (eth0), thus the traffic will hit the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emain\u003c/code\u003e table.\nIf you have multiple ENIs, the routing should be a little different here.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emain\u003c/code\u003e routing table is also node1’s default routing table (dont’ be misled\nby the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edefault\u003c/code\u003e table above, it’s just a table with name \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edefault\u003c/code\u003e, but not the\ndefault table for host).\u003c/p\u003e\n\n\u003cp\u003eThe default gateway of node1 is \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.5.2.1\u003c/code\u003e (the VPC gateway). So the egress\ntraffic of pod1 will eventually be sent to VPC gateway.\u003c/p\u003e\n\n\u003cp\u003eThis completes the egress part of our traffic journey.\u003c/p\u003e\n\n\u003ch1 id=\"3-ingress\"\u003e3 Ingress\u003c/h1\u003e\n\n\u003cp\u003eIf VPC network correctly routes the traffic to Node2 (vendor’s responsibility),\nthen those packets will arrive at Node2’s corresponding ENI. Let’s see what will\nbe done for those packets.\u003c/p\u003e\n\n\u003ch2 id=\"31-host-routing-table\"\u003e3.1 Host routing table\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node2:~  \u003cspan class=\"c\"\u003e# ip rule list\u003c/span\u003e\n9:      from all fwmark 0x200/0xf00 lookup 2004\n100:    from all lookup \u003cspan class=\"nb\"\u003elocal\n\u003c/span\u003e32766:  from all lookup main\n32767:  from all lookup default\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node2:~  \u003cspan class=\"c\"\u003e# ip route show table 2004\u003c/span\u003e\n\u003cspan class=\"nb\"\u003elocal \u003c/span\u003edefault dev lo scope host\n\nnode2 \u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip route show table main\ndefault via 10.5.1.1 dev eth0\n10.5.2.22 dev lxcd86fc95bf974 scope \u003cspan class=\"nb\"\u003elink\u003c/span\u003e\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAs can be seen, there is a decicated route for Pod2:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e10.5.2.22 dev lxcd86fc95bf974 scope \u003cspan class=\"nb\"\u003elink\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThis means that all traffic destinated for \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.5.2.22\u003c/code\u003e will be forwarded to\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elxcd86fc95bf974\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"32-ingress-bpf-code\"\u003e3.2 Ingress BPF code\u003c/h2\u003e\n\n\u003cp\u003eCilium will inject ingress BPF rules for each of the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elxcxx\u003c/code\u003e devices it created.\nLet’s check this one:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node2:~  \u003cspan class=\"c\"\u003e# tc filter show dev lxcd86fc95bf974 ingress\u003c/span\u003e\nfilter protocol all pref 1 bpf\nfilter protocol all pref 1 bpf handle 0x1 bpf_lxc.o:[from-container] direct-action not_in_hw tag c17fab4b3f874a54\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIf you are interested in the exact BPF code, following step are much the same as\nour previous egress part:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node2:~  \u003cspan class=\"c\"\u003e# bpftool prog\u003c/span\u003e\n156: sched_cls  tag a390cb0eda39ede9\n        loaded_at Oct 22/10:59  uid 0\n        xlated 808B  jited 637B  memlock 4096B  map_ids 46,33\n...\n165: sched_cls  tag c17fab4b3f874a54\n        loaded_at Oct 22/10:59  uid 0\n        xlated 19144B  jited 11706B  memlock 20480B  map_ids 155,33,35,156,157,36,147,47,153,37,43,31,44\n\nroot@node2:~  \u003cspan class=\"c\"\u003e# bpftool prog dump xlated id 165 | head -n 10\u003c/span\u003e\n   0: \u003cspan class=\"o\"\u003e(\u003c/span\u003ebf\u003cspan class=\"o\"\u003e)\u003c/span\u003e r6 \u003cspan class=\"o\"\u003e=\u003c/span\u003e r1\n   1: \u003cspan class=\"o\"\u003e(\u003c/span\u003eb7\u003cspan class=\"o\"\u003e)\u003c/span\u003e r7 \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0\n   2: \u003cspan class=\"o\"\u003e(\u003c/span\u003e63\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eu32 \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e)(\u003c/span\u003er6 +60\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e r7\n   3: \u003cspan class=\"o\"\u003e(\u003c/span\u003e63\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eu32 \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e)(\u003c/span\u003er6 +56\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e r7\n   4: \u003cspan class=\"o\"\u003e(\u003c/span\u003e63\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eu32 \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e)(\u003c/span\u003er6 +52\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e r7\n   5: \u003cspan class=\"o\"\u003e(\u003c/span\u003e63\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eu32 \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e)(\u003c/span\u003er6 +48\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e r7\n   6: \u003cspan class=\"o\"\u003e(\u003c/span\u003e63\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eu32 \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e)(\u003c/span\u003er6 +64\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e r7\n   7: \u003cspan class=\"o\"\u003e(\u003c/span\u003e18\u003cspan class=\"o\"\u003e)\u003c/span\u003e r2 \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0xffffff5a\n   9: \u003cspan class=\"o\"\u003e(\u003c/span\u003e79\u003cspan class=\"o\"\u003e)\u003c/span\u003e r1 \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eu64 \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e)(\u003c/span\u003er6 +80\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  10: \u003cspan class=\"o\"\u003e(\u003c/span\u003e79\u003cspan class=\"o\"\u003e)\u003c/span\u003e r8 \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eu64 \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"o\"\u003e)(\u003c/span\u003er6 +216\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"34-container-receive\"\u003e3.4 Container receive\u003c/h2\u003e\n\n\u003cp\u003eIf the traffic is not dropped by Cilium network policy rules (ingress BPF), then\nthe packets will go through the host side veth pair and eventually arrive at the \n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0\u003c/code\u003e inside container - the final destination of our journey.\u003c/p\u003e\n\n\u003cp\u003eNow re-depict the global data flow picture here:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-network-topology-on-aws/cilium-aws-global-data-flow.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\n\u003ch1 id=\"4-the-implementation-code-walk-through\"\u003e4 The implementation: code walk through\u003c/h1\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e// Call stack of cilium-cni\ninterfaceAdd               // plugins/cilium-cni/interface.go\n |-routingInfo.Configure() // pkg/datapath/linux/routing/routing.go\n                |-route.ReplaceRule(\u0026#34;from all to 10.5.2.22 lookup main\u0026#34;) // INGRESS rule: outside -\u0026gt; pod\n                |\n                |-route.ReplaceRule(\u0026#34;from 10.5.2.22 lookup \u0026lt;tableId\u0026gt;\u0026#34;)   // EGRESS  rule: pod -\u0026gt; outside\n                |-netlink.RouteReplace(\u0026#34;default via \u0026lt;vpc gw\u0026gt; dev \u0026lt;eni\u0026gt;\u0026#34;) // EGRESS route entry 1: pod -\u0026gt; outside\n                |-netlink.RouteReplace(\u0026#34;\u0026lt;vpc gw\u0026gt; dev \u0026lt;eni\u0026gt; scope link\u0026#34;)  // EGRESS route entry 2: pod -\u0026gt; outside\n\n// Call stack of cilium-agent\nreloadDatapath             // pkg/datapath/loader/loader.go\n  |-if ep.RequireEndpointRoute()\n      upsertEndpointRoute(ep, *ip.IPNet(32))                              // INGRESS route entry: outside -\u0026gt; pod\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eSee our \u003ca href=\"/blog/cilium-code-series/\"\u003eCilium Code Walk Through Series\u003c/a\u003e\nfor more detailed call stacks of cilium-agent and cilium-cni.\u003c/p\u003e\n\n\u003cp\u003eThe below table summarizes the rules, route entries, and by whom they are set:\u003c/p\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003eDirection\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eResource\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eOwner (set by whom)\u003c/th\u003e\n      \u003cth\u003eCommand to inspect\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eIngress\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003erouting rule\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ecilium-cni\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/opt/cni/bin/cilium-cni\u003c/code\u003e)\u003c/td\u003e\n      \u003ctd\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip rule list\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eIngress\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003erouting entry\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ecilium-agent\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip route show table \u0026lt;table\u0026gt;\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eEgress\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003erouting rule\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ecilium-cni\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/opt/cni/bin/cilium-cni\u003c/code\u003e)\u003c/td\u003e\n      \u003ctd\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip rule list\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eEgress\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003erouting entry\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ecilium-cni\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/opt/cni/bin/cilium-cni\u003c/code\u003e)\u003c/td\u003e\n      \u003ctd\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip route show table \u0026lt;table\u0026gt;\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2 id=\"41-pod-ingress-rule--route-entry\"\u003e4.1 Pod ingress rule \u0026amp; route entry\u003c/h2\u003e\n\n\u003cp\u003eThe rule for all traffic \u003cstrong\u003e\u003cmark\u003eingressing to a pod/endpoint\u003c/mark\u003e\u003c/strong\u003e\nis set by Cilium CNI plugin \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ecilium-cni\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e during\npod network creation (refer to the above calling stack).\u003c/p\u003e\n\n\u003cp\u003eThe resulted rule:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e(node2) $ ip rule\n20:     from all to 10.5.2.22 lookup main  # outside -\u0026gt; container, lookup main\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eand the \u003cstrong\u003e\u003cmark\u003erouting entry\u003c/mark\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003enode2 \u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip route show table main\n10.5.2.22 dev lxcd86fc95bf974 scope \u003cspan class=\"nb\"\u003elink\u003c/span\u003e\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eBut note that, different from the policy routint rule, the route entry is set by\n\u003cstrong\u003e\u003cmark\u003ecilium-agent\u003c/mark\u003e\u003c/strong\u003e during endpoint creating process, and,\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e--enable-endpoint-routes=true\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e need to be configured for the agent, which defaults to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"42-pod-egress-rule--route-entry\"\u003e4.2 Pod egress rule \u0026amp; route entry\u003c/h2\u003e\n\n\u003cp\u003eFor the egress direction, both the routing rule and routing entries are set by \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-cni\u003c/code\u003e, with something\nlooks like below:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip rule\n111:    from 10.5.2.22 lookup 11           \u003cspan class=\"c\"\u003e# container -\u0026gt; outside, lookup table 11\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ ip route show table 11\ndefault via 10.5.2.1 dev eni2              # default via VPC gateway\n10.5.2.1 dev eni2 scope link\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"5-summary\"\u003e5 Summary\u003c/h1\u003e\n\n\u003cp\u003eThis post explores the \u003cstrong\u003enetwork topology\u003c/strong\u003e and \u003cstrong\u003edata flow\u003c/strong\u003e of the\ninter-host traffic between two pods in a \u003cstrong\u003eCilium-powered K8S cluster on AWS\u003c/strong\u003e.\nWe used common Linux command line tools to fulfill this task. We also walked through\nthe code a little. Hope these contents are helpful to you!\u003c/p\u003e\n\n\u003ch1 id=\"references\"\u003eReferences\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://docs.cilium.io/en/v1.6/bpf/\"\u003eCilium: BPF and XDP Reference Guide\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"http://docs.cilium.io/en/stable/concepts/ipam/eni/#ipam-eni\"\u003eCilium: AWS ENI\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"http://docs.cilium.io/en/stable/concepts/datapath/#aws-eni-datapath\"\u003eCilium: AWS ENI Datapath\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/write-your-own-virtual-machine-zh/\"\u003e\u003cspan\u003e« [译] 400 行 C 代码实现一个虚拟机（2018）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/host-disconnect-caused-by-istio-sidecar-injection/\"\u003e\u003cspan\u003eHost Disconnect Caused by Istio Sidecar Injection »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2019-10-26T00:00:00Z",
  "Author": "Arthur Chiao"
}