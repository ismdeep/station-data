{
  "Source": "arthurchiao.art",
  "Title": "L4LB for Kubernetes: Theory and Practice with Cilium+BGP+ECMP",
  "Link": "https://arthurchiao.art/blog/k8s-l4lb/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eL4LB for Kubernetes: Theory and Practice with Cilium+BGP+ECMP\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2020-04-10 | Last Update 2020-08-22\u003c/p\u003e\n  \n  \u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#1-problem-definition\" id=\"markdown-toc-1-problem-definition\"\u003e1. Problem Definition\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-requirement-analysis\" id=\"markdown-toc-2-requirement-analysis\"\u003e2. Requirement Analysis\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-l4lb-model\" id=\"markdown-toc-21-l4lb-model\"\u003e2.1 L4LB Model\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-special-considerations\" id=\"markdown-toc-22-special-considerations\"\u003e2.2 Special Considerations\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-technical-requirements-summary\" id=\"markdown-toc-23-technical-requirements-summary\"\u003e2.3 Technical Requirements Summary\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-a-l4lb-solution\" id=\"markdown-toc-3-a-l4lb-solution\"\u003e3. A L4LB Solution\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-bird---bgp-agent\" id=\"markdown-toc-31-bird---bgp-agent\"\u003e3.1. BIRD - BGP agent\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-cilium---networking-agent\" id=\"markdown-toc-32-cilium---networking-agent\"\u003e3.2. Cilium - Networking agent\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-ecmp---physical-link-ha\" id=\"markdown-toc-33-ecmp---physical-link-ha\"\u003e3.3. ECMP - Physical link HA\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-glue-in-kernel-processing\" id=\"markdown-toc-34-glue-in-kernel-processing\"\u003e3.4 Glue In-kernel Processing\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-configurations\" id=\"markdown-toc-4-configurations\"\u003e4 Configurations\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-create-and-configure-dummy-device\" id=\"markdown-toc-41-create-and-configure-dummy-device\"\u003e4.1 Create and configure dummy device\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-bird\" id=\"markdown-toc-42-bird\"\u003e4.2 bird\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#43-cilium-agent\" id=\"markdown-toc-43-cilium-agent\"\u003e4.3 cilium-agent\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#431-nat-to-be-specific-snat\" id=\"markdown-toc-431-nat-to-be-specific-snat\"\u003e4.3.1 NAT: to be specific, SNAT\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#432-dsr-direct-server-return\" id=\"markdown-toc-432-dsr-direct-server-return\"\u003e4.3.2 DSR: direct server return\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#44-ecmp\" id=\"markdown-toc-44-ecmp\"\u003e4.4 ECMP\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#45-verification\" id=\"markdown-toc-45-verification\"\u003e4.5 Verification\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#451-on-master-node\" id=\"markdown-toc-451-on-master-node\"\u003e4.5.1 On Master Node\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#452-on-l4lb-node\" id=\"markdown-toc-452-on-l4lb-node\"\u003e4.5.2 On L4LB Node\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#453-on-test-node\" id=\"markdown-toc-453-on-test-node\"\u003e4.5.3 On test node\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-more-thoughts\" id=\"markdown-toc-5-more-thoughts\"\u003e5. More Thoughts\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#51-pros--cons\" id=\"markdown-toc-51-pros--cons\"\u003e5.1 Pros \u0026amp; Cons\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#511-pros\" id=\"markdown-toc-511-pros\"\u003e5.1.1 Pros\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#512-cons\" id=\"markdown-toc-512-cons\"\u003e5.1.2 Cons\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#52-decoupling-of-bgp-agent-and-networking-agent\" id=\"markdown-toc-52-decoupling-of-bgp-agent-and-networking-agent\"\u003e5.2 Decoupling of BGP agent and networking agent\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#53-the-hidden-clos-architecture\" id=\"markdown-toc-53-the-hidden-clos-architecture\"\u003e5.3 The Hidden CLOS Architecture\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#54-ingress-vs-loadbalancer\" id=\"markdown-toc-54-ingress-vs-loadbalancer\"\u003e5.4 Ingress vs LoadBalancer\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#6-similar-works\" id=\"markdown-toc-6-similar-works\"\u003e6. Similar Works\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#61-metallb\" id=\"markdown-toc-61-metallb\"\u003e6.1 MetalLB\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#62-katran\" id=\"markdown-toc-62-katran\"\u003e6.2 Katran\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#63-kube-proxy--bgp\" id=\"markdown-toc-63-kube-proxy--bgp\"\u003e6.3 Kube-proxy + BGP\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#7-summary\" id=\"markdown-toc-7-summary\"\u003e7 Summary\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAs networking engineers that are responsible for on-premises Kubernetes clusters,\nyou may be throwned a practical business need: \u003cstrong\u003eexposing services inside a\nKubernetes cluster to the outside\u003c/strong\u003e (e.g. to another Kubernetes cluster or\nlagacy infra). As shown in the picture below:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/k8s-l4lb/edge-gw-model.png\" width=\"75%\" height=\"75%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 0.1 Exposing a Kubernetes service to outside world\u003c/p\u003e\n\n\u003cp\u003eKubernetes provides two \u003cstrong\u003emodels\u003c/strong\u003e for this scenario:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"https://kubernetes.io/docs/concepts/services-networking/ingress/\"\u003eIngress\u003c/a\u003e: for exposing services via layer 7\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/\"\u003eLoadBalancer\u003c/a\u003e: for exposing services via layer 4\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBut, it \u003cstrong\u003eleaves the implementations to each vendor\u003c/strong\u003e. For example, if you are on\nAWS, it provides \u003ca href=\"https://aws.amazon.com/blogs/opensource/kubernetes-ingress-aws-alb-ingress-controller/\"\u003eALB\u003c/a\u003e\nand \u003ca href=\"https://kubernetes.io/docs/concepts/cluster-administration/cloud-providers/#aws\"\u003eELB\u003c/a\u003e, each for layer 7 and layer 4.\u003c/p\u003e\n\n\u003cp\u003eThis post reasons about the design of the latter one, and provides a simple\nimplementation by combining open source softwares.\u003c/p\u003e\n\n\u003ch2 id=\"1-problem-definition\"\u003e1. Problem Definition\u003c/h2\u003e\n\n\u003cp\u003eSuppose you deployed several \u003cstrong\u003eDNS servers\u003c/strong\u003e (pods) inside a Kubernetes\ncluster, intended for providing \u003cstrong\u003ecorp-wide\u003c/strong\u003e DNS service.\u003c/p\u003e\n\n\u003cp\u003eNow the question is: \u003cstrong\u003ehow would your legacy applications\u003c/strong\u003e (e.g. running in\nbare metal or VM) or \u003cstrong\u003eapplications in other Kubernetes clusters access this DNS\nservice\u003c/strong\u003e? As depicted in Fig 1.1:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/k8s-l4lb/exposing-dns-service.png\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 1.1 Exposing DNS service in a Kubernetes cluster to outside world\u003c/p\u003e\n\n\u003cp\u003eSome tips:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eDNS provides service with UDP (or TCP) port \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e53\u003c/code\u003e (thus \u003cstrong\u003elayer 4\u003c/strong\u003e).\u003c/li\u003e\n  \u003cli\u003eDNS pod is \u003cstrong\u003estateless\u003c/strong\u003e, here “stateless” means all instances are identical\nand active, rather than active-backup or master-slave.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"2-requirement-analysis\"\u003e2. Requirement Analysis\u003c/h1\u003e\n\n\u003ch2 id=\"21-l4lb-model\"\u003e2.1 L4LB Model\u003c/h2\u003e\n\n\u003cp\u003eAt first glance, it seems that the classic layer 4 load balancer (L4LB) model\ncould be used to address this problem, that is:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eAssign a VIP to the DNS cluster, all clients access the service by VIP.\u003c/li\u003e\n  \u003cli\u003eForward traffic from VIP to a specific backend with load balancing\nalgorithms.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/k8s-l4lb/classic-l4lb.png\" width=\"35%\" height=\"35%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 2.1 The classic L4LB model\u003c/p\u003e\n\n\u003ch2 id=\"22-special-considerations\"\u003e2.2 Special Considerations\u003c/h2\u003e\n\n\u003cp\u003eWell, this’s on the right way, but lacks some important aspects.\u003c/p\u003e\n\n\u003cp\u003eFirst, \u003cstrong\u003eour backends (Kubernetes pods) are very dynamic and subject to frequent\nchanges\u003c/strong\u003e: kinds of failures\n(or internal scheduling) may trigger Kubernetes to kill or reschedule a pod.\nThis may happen frequently;\u003c/p\u003e\n\n\u003cp\u003eSecondly, the \u003cstrong\u003eIP address of a Pod is not immutable\u003c/strong\u003e. In comparison,\ntraditional L4LBs favor fixed IP backends, they just pull in or pull out\nexisting backends by health check status.\u003c/p\u003e\n\n\u003cp\u003eThirdly, \u003cstrong\u003ebackends may be scaled up/down according to capacity plans\u003c/strong\u003e, these\nbackend changes should be timely reflected on L4LB, and be transparent to your\nusers/clients without human interventions (some kind of service discovery).\u003c/p\u003e\n\n\u003cp\u003eThis makes the L4LB a very unique role:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eOn the one hand, it must be reachable from the outside world (while most\nKubernetes resources couldn’t be).\u003c/li\u003e\n  \u003cli\u003eOn the other hand, it falls into a Kubernetes cluster - as it must listen to\nKubernetes resource changes in order to update its forwarding rules (from VIP\nto backends).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"23-technical-requirements-summary\"\u003e2.3 Technical Requirements Summary\u003c/h2\u003e\n\n\u003cp\u003eNow we summarize the above into following \u003cstrong\u003etechnical needs\u003c/strong\u003e:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003ePersistent/invariant L4 entrypoint for accessing a Kubernetes service from\nthe outside world\u003c/strong\u003e: the entrypoint, e.g. VIP, should be unique and invariant,\nhiding backend changes from users/clients.\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eLoad balancing\u003c/strong\u003e: load balance requests between multiple backends.\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eReactive to backend changes\u003c/strong\u003e: responsive to backend changes, e.g.\ninstances scale up/down.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eFor production ready, it also involves the 4th requirement:\u003c/p\u003e\n\n\u003cp\u003e\\ 4. \u003cstrong\u003eHigh availability\u003c/strong\u003e: both software and hardwares (if there are).\u003c/p\u003e\n\n\u003cp\u003eIn this article, we show such a (simple) design/implementation for\non-premises bare metal kubernetes clusters.\u003c/p\u003e\n\n\u003ch1 id=\"3-a-l4lb-solution\"\u003e3. A L4LB Solution\u003c/h1\u003e\n\n\u003cp\u003eThis post assumes the underlying physical network is a Spine-Leaf architecture\n(physical network topology only impacts ECMP in this post).\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/k8s-l4lb/l4lb-topo.png\" width=\"85%\" height=\"85%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 3.1 Topology of our L4LB solution\u003c/p\u003e\n\n\u003cp\u003eThe overall design is depicted in Fig 3.1:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eDedicate several nodes as \u003cstrong\u003eL4LB nodes\u003c/strong\u003e.\u003c/li\u003e\n  \u003cli\u003eRunning a \u003cstrong\u003eBGP agent\u003c/strong\u003e on each L4LB node, announcing a specific CIDR to\ndatacenter network, e.g. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.0.0/24\u003c/code\u003e. IPs in this CIDR will be used as\nVIPs, also called ExternalIPs in K8s.\u003c/li\u003e\n  \u003cli\u003eRunning a \u003cstrong\u003eCilium agent\u003c/strong\u003e on each L4LB node, which listens to Kubernetes\nresources (especially Services with externalIPs), and generates BPF rules\nfor forwarding packets to backend pods.\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eGlue VIP CIDR and Cilium agent in the kernel\u003c/strong\u003e with a\n\u003ca href=\"https://unix.stackexchange.com/questions/530700/what-is-the-use-of-the-dummy-device\"\u003edummy device\u003c/a\u003e\non each L4LB node.\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eEnable ECMP\u003c/strong\u003e on physical networks.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eTraffic path when accessing the example service from the outside world:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/k8s-l4lb/l4lb-traffic-path.png\" width=\"85%\" height=\"85%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 3.2 Traffic path when accessing example service from outside of Kubernetes cluster\u003c/p\u003e\n\n\u003cp\u003eWhere, the four numbered steps in the graph are:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eClient packets -\u0026gt; physical network (spine)\u003c/li\u003e\n  \u003cli\u003eSpine -\u0026gt; L4LB node, via ECMP\u003c/li\u003e\n  \u003cli\u003eIn-kernel routing (glue layer)\u003c/li\u003e\n  \u003cli\u003eL4LB -\u0026gt; Backend pods, with Cilium load balancing\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eDetails explained below. Let’s see how it meets the 4 requirements listed in\nSection 2.3.\u003c/p\u003e\n\n\u003ch2 id=\"31-bird---bgp-agent\"\u003e3.1. BIRD - BGP agent\u003c/h2\u003e\n\n\u003cp\u003eL4LB nodes run \u003ca href=\"https://bird.network.cz/\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebird\u003c/code\u003e\u003c/a\u003e as BGP agent.\u003c/p\u003e\n\n\u003cp\u003eWhen bird announces a CIDR (e.g.  \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.0.0/24\u003c/code\u003e) to the data center network, all\nsubsequent packets with destination IPs within this CIDR  (e.g.  \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.0.2\u003c/code\u003e)\nwill be routed to this node.\u003c/p\u003e\n\n\u003cp\u003eIf not familiar with BGP announcement, you could simply think of it as\nbroadcasting something like \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026#34;CIDR 10.1.0.0/24 is at host XXX\u0026#34;\u003c/code\u003e to the physical\nnetwork. When routers receive this message, they will install it into their\nrouting tables.\u003c/p\u003e\n\n\u003cp\u003eThis solves the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1st requirement\u003c/code\u003e: \u003cstrong\u003epersistent/invariant (L4) entrypoint\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"32-cilium---networking-agent\"\u003e3.2. Cilium - Networking agent\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/cilium/cilium\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-agent\u003c/code\u003e\u003c/a\u003e on L4LB node will listen to\nKubernetes apiserver, and generate BPF rules for Kubernetes ExternalIP services\nto forward traffic from VIPs (which are held by L4LB nodes) to backend pods.\u003c/p\u003e\n\n\u003cp\u003eThis solves the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e2nd and 3rd requirement\u003c/code\u003e: \u003cstrong\u003eload balancing\u003c/strong\u003e and \u003cstrong\u003etimely\nreact to backend changes\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"33-ecmp---physical-link-ha\"\u003e3.3. ECMP - Physical link HA\u003c/h2\u003e\n\n\u003cp\u003eWith ECMP (Equal Cost Multiple Path) enabled, we could have multiple L4LB nodes\nannouncing the same CIDR, HW routers will load balancing those packets to our\nL4LB nodes (glowing links in Fig 3.1 \u0026amp; Fig 3.2).\u003c/p\u003e\n\n\u003cp\u003eBesides, there is another BGP optimization option called \u003ca href=\"https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/iproute_bgp/configuration/xe-16/irg-xe-16-book/bgp-support-for-bfd.html\"\u003eBidirectional Forwarding\nDetection\u003c/a\u003e\n(BFD), enable it between\nrouters and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebird\u003c/code\u003e will accelerate routes convergence inside the entire network.\u003c/p\u003e\n\n\u003cp\u003eThus, we solved the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4th requirement\u003c/code\u003e: \u003cstrong\u003ehigh availability\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"34-glue-in-kernel-processing\"\u003e3.4 Glue In-kernel Processing\u003c/h2\u003e\n\n\u003cp\u003eTill now, packets with destination IPs within CIDR (VIPs) will arrive our L4LB\nnodes, and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-agent\u003c/code\u003e will generate forwarding rules for those VIPs.\u003c/p\u003e\n\n\u003cp\u003eBut one part is still missing: \u003cstrong\u003ethere are no rules in the kernel to redirect\nthose packets into \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-agent\u003c/code\u003e’s processing scope\u003c/strong\u003e. So without additional work,\nthose packets will be dropped inside kernel, instead of be forwarded to backends\nby Cilium BPF rules, as shown in Fig 3.3:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/k8s-l4lb/no-dummy.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 3.3 Packets dropped in kernel due to no routing rules\u003c/p\u003e\n\n\u003cp\u003eSo we need some glue work to fill the gap. Our solution is\n\u003cstrong\u003ecreate a dummy device, which holds the first IP in our CIDR\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/k8s-l4lb/add-dummy.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 3.4 Traffic process in kernel after add dummy device\u003c/p\u003e\n\n\u003ch1 id=\"4-configurations\"\u003e4 Configurations\u003c/h1\u003e\n\n\u003cp\u003eSystem info:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eCentos: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e7.2\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eKernel: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4.18+\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eBIRD: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e2.x\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eCilium: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1.7+\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eBeside, this post assume the Kubernetes cluster uses \u003cstrong\u003edirect routing\u003c/strong\u003e\nfor Pod networking. (While adjust Cilium configurations will also make this\nscheme work for non-direct-routing cases, that’s beyond the scope of this post).\u003c/p\u003e\n\n\u003ch2 id=\"41-create-and-configure-dummy-device\"\u003e4.1 Create and configure dummy device\u003c/h2\u003e\n\n\u003cp\u003eInstall:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emodprobe \u003cspan class=\"nt\"\u003e--ignore-install\u003c/span\u003e dummy\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003ename cilium-ext0 dev dummy0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eConfigure it to survive host reboot:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eifcfg-cilium-ext0\n\u003cspan class=\"nv\"\u003eDEVICE\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ecilium-ext0\n\u003cspan class=\"nv\"\u003eIPADDR\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e10.1.0.1\n\u003cspan class=\"nv\"\u003eNETMASK\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e255.255.255.0\n\u003cspan class=\"nv\"\u003eONBOOT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003eyes\n\u003c/span\u003e\u003cspan class=\"nv\"\u003eTYPE\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eEthernet\n\u003cspan class=\"nv\"\u003eNM_CONTROLLED\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eno\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e ./modprobe.d/dummy.conf\n\u003cspan class=\"nb\"\u003einstall \u003c/span\u003edummy /sbin/modprobe \u003cspan class=\"nt\"\u003e--ignore-install\u003c/span\u003e dummy\u003cspan class=\"p\"\u003e;\u003c/span\u003e ip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003ename cilium-ext0 dev dummy0\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e ./modules-load.d/dummy.conf\n\u003cspan class=\"c\"\u003e# Load dummy.ko at boot\u003c/span\u003e\ndummy\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecp \u003c/span\u003eifcfg-cilium-ext0          /etc/sysconfig/network-scripts/\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecp \u003c/span\u003emodprobe.d/dummy.conf      /etc/modprobe.d/dummy.conf\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecp \u003c/span\u003emodules-load.d/dummy.conf  /etc/modules-load.d/dummy.conf\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eEnable changes:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ systemctl restart network\n\n$ ifconfig cilium-ext0\ncilium-ext0: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt;  mtu 1500\n              inet 10.1.0.1  netmask 255.255.255.0  broadcast 10.1.0.255\n              ...\n\n$ route -n\nKernel IP routing table\nDestination     Gateway     Genmask         Flags Metric Ref    Use Iface\n...\n10.1.0.1        0.0.0.0     255.255.255.0   U     0      0        0 cilium-ext0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"42-bird\"\u003e4.2 bird\u003c/h2\u003e\n\n\u003cp\u003eThis involves BGP configurations for the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebird\u003c/code\u003e software, as well as HW routers.\nConfigurations may vary a lot according to the BGP schemes you choose, the\nlatter is beyond the scope of this post. Refer to\nsome get started docs, such as the one we wrote:\n\u003ca href=\"https://docs.cilium.io/en/stable/gettingstarted/bird/\"\u003eCilium documentation: Using BIRD to run BGP\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebird\u003c/code\u003e, add following configurations to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/etc/bird.conf\u003c/code\u003e,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eprotocol static \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        ipv4\u003cspan class=\"p\"\u003e;\u003c/span\u003e                   \u003cspan class=\"c\"\u003e# Again, IPv4 channel with default options\u003c/span\u003e\n        ...\n        route 10.1.0.0/24 via \u003cspan class=\"s2\"\u003e\u0026#34;cilium-ext0\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eRestart bird and verify changes are applied:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003esystemctl restart bird\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebirdc show route\nBIRD 2.0.5 ready.\nTable master4:\n...\n10.1.0.0/24         unicast \u003cspan class=\"o\"\u003e[\u003c/span\u003estatic1 2020-03-18] \u003cspan class=\"k\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e200\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     dev cilium-ext0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"43-cilium-agent\"\u003e4.3 cilium-agent\u003c/h2\u003e\n\n\u003cp\u003eNormal installation according official documents, as long as the agent could\nlisten to kubernetes apiserver.\u003c/p\u003e\n\n\u003cp\u003eTwo kinds of load balancing mechanisms:\u003c/p\u003e\n\n\u003ch3 id=\"431-nat-to-be-specific-snat\"\u003e4.3.1 NAT: to be specific, SNAT\u003c/h3\u003e\n\n\u003cp\u003eConfigurations:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekube-proxy-replacement=probe\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enode-port-mode=snat\u003c/code\u003e (default)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/k8s-l4lb/nat-path.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Traffic path in NAT mode\u003c/p\u003e\n\n\u003ch3 id=\"432-dsr-direct-server-return\"\u003e4.3.2 DSR: direct server return\u003c/h3\u003e\n\n\u003cp\u003eConfigurations:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekube-proxy-replacement=probe\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enode-port-mode=dsr\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/k8s-l4lb/dsr-path.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Traffic path in DSR mode\u003c/p\u003e\n\n\u003cp\u003eNote that if using DSR mode, \u003cstrong\u003eboth L4LB and worker nodes\u003c/strong\u003e needs to be\nconfigured as \u003cstrong\u003eDSR\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"44-ecmp\"\u003e4.4 ECMP\u003c/h2\u003e\n\n\u003cp\u003eECMP needs to be configured on physical routers.\u003c/p\u003e\n\n\u003cp\u003eBFD should be configured both on physical routers and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebird\u003c/code\u003e. Refer to \n\u003ca href=\"https://docs.cilium.io/en/stable/gettingstarted/bird/\"\u003eCilium documentation: Using BIRD to run BGP\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf everything is ok, you should see something like this on your routers:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eROUTER# show ip route 10.1.0.0\n...\n10.1.0.0/24, ubest/mbest: 2/0\n    \u003cspan class=\"k\"\u003e*\u003c/span\u003evia 10.4.1.7, \u003cspan class=\"o\"\u003e[\u003c/span\u003e200/0], 13w6d, bgp-65418, internal, tag 65418\n    \u003cspan class=\"k\"\u003e*\u003c/span\u003evia 10.4.1.8, \u003cspan class=\"o\"\u003e[\u003c/span\u003e200/0], 12w4d, bgp-65418, internal, tag 65418\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"45-verification\"\u003e4.5 Verification\u003c/h2\u003e\n\n\u003cp\u003eFor nothing but laziness, I will use my handy nginx service instead of deploying\na real DNS service - but the effect is much the same, we will verify our scheme\nby accessing the nginx from layer 4.\u003c/p\u003e\n\n\u003ch3 id=\"451-on-master-node\"\u003e4.5.1 On Master Node\u003c/h3\u003e\n\n\u003cp\u003eOn Kubernetes master, create a service with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eexternalIPs=10.1.0.2\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003ecilium-smoke.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx\n  labels:\n    app: nginx\nspec:\n  externalIPs:\n  - 10.1.0.2\n  ports:\n  - port: 80\n    name: cilium-smoke\n  selector:\n    app: nginx\n\u003cspan class=\"nt\"\u003e---\u003c/span\u003e\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: cilium-smoke\nspec:\n  serviceName: \u003cspan class=\"s2\"\u003e\u0026#34;nginx\u0026#34;\u003c/span\u003e\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: library/nginx-slim:0.8\n        ports:\n        - containerPort: 80\n          name: cilium-smoke\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl create \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e cilium-smoke.yaml\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eCheck our service’s information:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl get svc\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ek get svc\nNAME    TYPE           CLUSTER-IP   EXTERNAL-IP   PORT\u003cspan class=\"o\"\u003e(\u003c/span\u003eS\u003cspan class=\"o\"\u003e)\u003c/span\u003e  AGE\n...\nnginx   LoadBalancer   10.x.x.x     10.1.0.2      80/TCP   2m\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAs can be seen, it is \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eLoadBalancer\u003c/code\u003e type, and has an external IP \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.0.2\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"452-on-l4lb-node\"\u003e4.5.2 On L4LB Node\u003c/h3\u003e\n\n\u003cp\u003eExecute following command inside cilium-agent pod:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium service list\n...\n\n62   10.1.0.2:53    ExternalIPs    1 \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e 192.168.1.234:53\n                                   2 \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e 192.168.2.172:53\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eTODO: more BPF info on L4LB node.\u003c/p\u003e\n\n  \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiproute2\u003c/code\u003e on my current L4LB node is too old, which prohibits my further\ninvestigation. You could refer to my previous post\n\u003ca href=\"/blog/cilium-network-topology-on-aws/\"\u003eCilium Network Topology and Traffic Path on AWS\u003c/a\u003e\nif intersted.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"453-on-test-node\"\u003e4.5.3 On test node\u003c/h3\u003e\n\n\u003cp\u003eOn a node which is outside of Kubernetes cluster, test our externalIP service\nwith VIP+Port:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etelnet 10.1.0.2 80\nTrying 10.1.0.2...\nConnected to 10.1.0.2.\nEscape character is \u003cspan class=\"s1\"\u003e\u0026#39;^]\u0026#39;\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eSuccessful!\u003c/p\u003e\n\n\u003ch1 id=\"5-more-thoughts\"\u003e5. More Thoughts\u003c/h1\u003e\n\n\u003ch2 id=\"51-pros--cons\"\u003e5.1 Pros \u0026amp; Cons\u003c/h2\u003e\n\n\u003ch3 id=\"511-pros\"\u003e5.1.1 Pros\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003eSimple, straight forward, ease of understanding\u003c/li\u003e\n  \u003cli\u003eEase of management of ExternalIPs: manage CIDR instead of distinct IPs, less BGP announcements\u003c/li\u003e\n  \u003cli\u003eEase of security rule managements for BGP filtering\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"512-cons\"\u003e5.1.2 Cons\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003eECMP hard limits: 16 nodes.\u003c/li\u003e\n  \u003cli\u003eAll traffic goes through L4LB nodes, make them the potential bottleneck (e.g.\nBW, CPU processing).\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eNo failover in case of L4LB node downs.\u003c/p\u003e\n\n    \u003cp\u003eCurrently, if one L4LB node downs, traffic will be rehashed to other L4LB\n  nodes by HW switches via ECMP. However, in the current implementation, all the these\n  traffic will be disruppted as other L4LB nodes could not correctly handle\n  this (no failover). Failover could be achieved with either of：\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e\u003ca href=\"https://devcentral.f5.com/s/articles/sessions-sessions-everywhere\"\u003eSession replication\u003c/a\u003e:\nsync connection/session info among all L4LB nodes, so if one node down,\nthe connection could be handled by other nodes (almost) transparently.\nLVS supports this features as an experiment.\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Consistent_hashing\"\u003eConsistent hashing\u003c/a\u003e:\nanother way to achieve failover, and \u003cstrong\u003erecent L4LB solutions favor this\nfashion\u003c/strong\u003e, e.g. Facebook Katran, Google Maglev, Github GLB. \u003cstrong\u003eCilium\ncurrently (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ev1.8.2\u003c/code\u003e) lacks this feature\u003c/strong\u003e.\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"52-decoupling-of-bgp-agent-and-networking-agent\"\u003e5.2 Decoupling of BGP agent and networking agent\u003c/h2\u003e\n\n\u003cp\u003eIt’s important to understand that, in this L4LB scheme, there are no\ncouplings between BGP agent and host network agent, that is,\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eYou could transparently replace \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebird\u003c/code\u003e with another BGP agent, e.g. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003equagga\u003c/code\u003e\n(but you need to concern whether they support the features you would like, e.g. ECMP, BFD).\u003c/li\u003e\n  \u003cli\u003eYou could also transparently replace \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-agent\u003c/code\u003e with other networking\nagents for Kubernetes worker nodes, e.g. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekube-proxy\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"53-the-hidden-clos-architecture\"\u003e5.3 The Hidden CLOS Architecture\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/k8s-l4lb/l4lb-traffic-path.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 3.2 Traffic path when accessing example service from outside of Kubernetes cluster\u003c/p\u003e\n\n\u003cp\u003eIf think of each TOR pair and corresponding L4LB nodes as an integral entity,\nFig 3.2 could be re-depicted as Fig 5.1:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/k8s-l4lb/hidden-clos.png\" width=\"50%\" height=\"50%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 5.1 The Hidden CLOS architecture\u003c/p\u003e\n\n\u003cp\u003ewhich is a \u003ca href=\"https://en.wikipedia.org/wiki/Clos_network\"\u003eCLOS network\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eInteresting!\u003c/p\u003e\n\n\u003ch2 id=\"54-ingress-vs-loadbalancer\"\u003e5.4 Ingress vs LoadBalancer\u003c/h2\u003e\n\n\u003cp\u003eIngress provides persistent L7 entrypoints for accessing services inside Kubernetes\ncluster from outside world. For example,\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eApp A: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehttps://\u0026lt;ingress addr\u0026gt;/app-a/\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eApp B: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehttps://\u0026lt;ingress addr\u0026gt;/app-b/\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eApp C: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehttps://\u0026lt;ingress addr\u0026gt;/app-c/\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHave you wondered how to design an Ingress solution?\u003c/p\u003e\n\n\u003cp\u003eIf your Ingress is deployed inside Kubernetes cluster, then \u003cstrong\u003eitself must have a\npersistent L4 entrypoint\u003c/strong\u003e, namely the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;ingress addr\u0026gt;\u003c/code\u003e in the above example.\u003c/p\u003e\n\n\u003cp\u003eCombining the L4LB solution in this post and something like Istio Gateway, you\nwill get a workable Ingress.\u003c/p\u003e\n\n\u003ch1 id=\"6-similar-works\"\u003e6. Similar Works\u003c/h1\u003e\n\n\u003ch2 id=\"61-metallb\"\u003e6.1 MetalLB\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://metallb.universe.tf/\"\u003eMetalLB\u003c/a\u003e is similar with this in that it:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eAnnounce VIP via BGP\u003c/li\u003e\n  \u003cli\u003eForward/load-balancing to backends with node agent\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eDifference from the one in this post:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eBGP agent announces distinct IPs instead of CIDR\u003c/li\u003e\n  \u003cli\u003eNo dedicated L4LB nodes\u003c/li\u003e\n  \u003cli\u003eForward/load-balancing to backends via kube-proxy (recently supported Cilium)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eProblem may faced: more BGP announcements, more routing entries, more\ndifficult for filtering BGP announcements.\u003c/p\u003e\n\n\u003ch2 id=\"62-katran\"\u003e6.2 Katran\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/facebookincubator/katran\"\u003eKatran\u003c/a\u003e is a\ngeneral purpose L4LB from Facebook, also based on BGP + BPF.\u003c/p\u003e\n\n\u003ch2 id=\"63-kube-proxy--bgp\"\u003e6.3 Kube-proxy + BGP\u003c/h2\u003e\n\n\u003cp\u003eAs mentioned in 5.2, replace Cilium with kube-proxy could also achieve this\ngoal. Differences including:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eForwarding rules on L4LB node will be based on iptables or LVS instead of BPF\u003c/li\u003e\n  \u003cli\u003ePerformance degrades (maybe)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"7-summary\"\u003e7 Summary\u003c/h1\u003e\n\n\u003cp\u003eThis post analyzed the technical requirements of L4LB for Kubernetes\nclusters, and realized a simple one based on Cilium+BGP+ECMP.\u003c/p\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/bgp-leaks-and-crypto-currencies-zh/\"\u003e\u003cspan\u003e« [译] BGP 泄露和加密货币（2018）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/monitoring-network-stack/\"\u003e\u003cspan\u003eMonitoring Linux Network Stack »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2020-04-10T00:00:00Z",
  "Author": "Arthur Chiao"
}