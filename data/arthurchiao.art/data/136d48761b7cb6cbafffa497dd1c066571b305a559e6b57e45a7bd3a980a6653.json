{
  "Source": "arthurchiao.art",
  "Title": "[译] 重新设计 Facebook 的数据中心网络（2019）",
  "Link": "https://arthurchiao.art/blog/facebook-f16-minipack-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003e[译] 重新设计 Facebook 的数据中心网络（2019）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2020-06-20 | Last Update 2020-06-25\u003c/p\u003e\n  \n  \u003ch3 id=\"译者序\"\u003e译者序\u003c/h3\u003e\n\n\u003cp\u003e本文翻译自 Facebook 2019 年的一篇文章: \u003ca href=\"https://engineering.fb.com/data-center-engineering/f16-minipack/\"\u003eReinventing Facebook’s data center\nnetwork\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e文章介绍了 Facebook F4 架构之后的新一代 fabric 网络，基于 \u003cstrong\u003eF16 架构\u003c/strong\u003e（每个 POD\n连接到 16 个 spine 平面）和 Minipack 交换机。\u003c/p\u003e\n\n\u003cp\u003e阅读本文之前，建议先阅读 \u003ca href=\"/blog/facebook-f4-data-center-fabric-zh/\"\u003e(译) 数据中心 Fabric：Facebook 的下一代数据中心网络（\n2014）\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e由于译者水平有限，本文不免存在遗漏或错误之处。如有疑问，请查阅原文。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e以下是译文。\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#译者序\" id=\"markdown-toc-译者序\"\u003e译者序\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-新数据中心拓扑f16-和-hgrid\" id=\"markdown-toc-1-新数据中心拓扑f16-和-hgrid\"\u003e1 新数据中心拓扑：F16 和 HGRID\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-备选方案\" id=\"markdown-toc-11-备选方案\"\u003e1.1 备选方案\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-f16下一代-fabric-拓扑\" id=\"markdown-toc-12-f16下一代-fabric-拓扑\"\u003e1.2 F16：下一代 fabric 拓扑\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-hgrid下一代-fabric-aggregation-解决方案\" id=\"markdown-toc-13-hgrid下一代-fabric-aggregation-解决方案\"\u003e1.3 HGRID：下一代 fabric aggregation 解决方案\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-新的模块化的-128x100g-组建模块building-block\" id=\"markdown-toc-2-新的模块化的-128x100g-组建模块building-block\"\u003e2 新的、模块化的 128x100G 组建模块（building block）\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-模块化modularity\" id=\"markdown-toc-21-模块化modularity\"\u003e2.1 模块化（Modularity）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-光模块optics\" id=\"markdown-toc-22-光模块optics\"\u003e2.2 光模块（Optics）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-系统设计system-design\" id=\"markdown-toc-23-系统设计system-design\"\u003e2.3 系统设计（System design）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-minilakeminipack-的控制器\" id=\"markdown-toc-24-minilakeminipack-的控制器\"\u003e2.4 MiniLake：Minipack 的控制器\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-与-arista-联合开发-7368x4-交换机\" id=\"markdown-toc-3-与-arista-联合开发-7368x4-交换机\"\u003e3 与 Arista 联合开发 7368X4 交换机\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-底层运行的软件fboss\" id=\"markdown-toc-4-底层运行的软件fboss\"\u003e4 底层运行的软件：FBOSS\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-解决软件挑战\" id=\"markdown-toc-41-解决软件挑战\"\u003e4.1 解决软件挑战\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-更多硬件抽象\" id=\"markdown-toc-42-更多硬件抽象\"\u003e4.2 更多硬件抽象\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#421-支持新的硬件和-bootloader\" id=\"markdown-toc-421-支持新的硬件和-bootloader\"\u003e4.2.1 支持新的硬件和 bootloader\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#422-启用一个端口\" id=\"markdown-toc-422-启用一个端口\"\u003e4.2.2 启用一个端口\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#43-扩展持续测试continuous-test的能力\" id=\"markdown-toc-43-扩展持续测试continuous-test的能力\"\u003e4.3 扩展持续测试（continuous test）的能力\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-总结\" id=\"markdown-toc-5-总结\"\u003e5 总结\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/facebook-f16/1.png\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e最初分享我们的\u003ca href=\"https://engineering.fb.com/production-engineering/introducing-data-center-fabric-the-next-generation-facebook-data-center-network\"\u003e数据中心 fabric 设计\u003c/a\u003e\n时，我们在单个 APP 上支撑了 13.5 亿用户。随后几年，我们陆续公开分享了打造\n\u003ca href=\"https://engineering.fb.com/data-center-engineering/wedge-100-more-open-and-versatile-than-ever\"\u003e自己的\u003c/a\u003e\n\u003ca href=\"https://engineering.fb.com/data-center-engineering/introducing-backpack-our-second-generation-modular-open-switch\"\u003e交换机\u003c/a\u003e 、\n开发 \u003ca href=\"https://engineering.fb.com/data-center-engineering/open-networking-advances-with-wedge-and-fboss\"\u003eFBOSS\u003c/a\u003e（我们的网络操作系统），\n以及不断对网络各方面进行横向扩容（scale out）的历程。\n最近，我们又宣布了去年设计的分布式网络系统 \u003ca href=\"https://engineering.fb.com/data-center-engineering/fabric-aggregator-a-flexible-solution-to-our-traffic-demand\"\u003eFabric Aggregator\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e时间回到今天。我们的数据中心 fabrics 现在支撑着 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e26 亿+\u003c/code\u003e 用户，他们\n使用着我们的视频服务、实时应用，以及快速膨胀的、极其消耗资源的内部服务。\n我们的数据中心已经从少数几个 region 扩展到全世界的 \u003ca href=\"https://engineering.fb.com/data-center-engineering/data-centers-2018\"\u003e15 个位置\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e一方面是需求的不断增加，另一方面，我们又受限于\u003cstrong\u003e电源\u003c/strong\u003e物理特性的硬性限制（hard\nphysical constraints of power）和\u003cstrong\u003e光模块\u003c/strong\u003e的供应和市场成熟度（optics supply\navailability）。\n不断增长的需求和物理上面临的限制，这双重压力使我们开始重新思考如何\n\u003cstrong\u003e对数据中心网络进行自顶向下的改造（transform）\u003c/strong\u003e —— 从拓扑（topologies）到基本组建模块\n（building blocks）。\u003c/p\u003e\n\n\u003cp\u003e本文将分享我们在过去两年的变化：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e网络方面，我们完成了\u003cstrong\u003e下一代数据中心 fabric 的设计\u003c/strong\u003e，名为 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eF16\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eF16 相比 F4（前一代）有 \u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4x\u003c/code\u003e 的容量\u003c/strong\u003e。\u003c/li\u003e\n      \u003cli\u003eF16 \u003cstrong\u003e更易扩展\u003c/strong\u003e，维护和演进也更简单，为未来几年所需的基础设施容量做好了准备。\u003c/li\u003e\n      \u003cli\u003eF16 使用的是技术成熟、易于采购的 \u003ca href=\"https://engineering.fb.com/data-center-engineering/designing-100g-optical-connections/\u0026#34;\"\u003e\u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e100G\u003c/code\u003e CWDM4-OCP 光模块\u003c/strong\u003e\u003c/a\u003e\n，能提供与 400G 链路一样的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4x\u003c/code\u003e 容量，但使用的是成熟的 100G 光模块。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e设计了一个全新的作为\u003cstrong\u003e基本组建模块\u003c/strong\u003e的交换机（building block switch），名为 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eMinipack\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eMinipack 相比\u003ca href=\"https://engineering.fb.com/data-center-engineering/introducing-backpack-our-second-generation-modular-open-switch\"\u003e前一代设计\u003c/a\u003e，\u003cstrong\u003e节省了 50% 的耗电量和物理空间\u003c/strong\u003e。\u003c/li\u003e\n      \u003cli\u003eMinipack 是\u003cstrong\u003e模块化\u003c/strong\u003e的，非常灵活，因此能在新的拓扑中\u003cstrong\u003e承担多种角色\u003c/strong\u003e，支撑网络在未来几年的持续演进。\u003c/li\u003e\n      \u003cli\u003e除了 Minipack，我们还\u003cstrong\u003e与 Arista Networks 合作开发\u003c/strong\u003e了 \u003ca href=\"https://engineering.fb.com/wp-content/uploads/2019/03/OCPRlsFInal.docx\"\u003e\u003cstrong\u003e7368X4 交换机\u003c/strong\u003e\u003c/a\u003e。\u003c/li\u003e\n      \u003cli\u003eMinipack 和 Arista 7368X4 都已经捐献给了 OCP，二者都运行 FBOSS。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e开发了 \u003cstrong\u003eFabric Aggregator 的升级版 —— HGRID\u003c/strong\u003e，以应对每个 region 内 building\n翻倍带来的挑战。\u003c/li\u003e\n  \u003cli\u003eFBOSS 仍然是\u003cstrong\u003e将我们的数据中心连成整体\u003c/strong\u003e的软件。但也做了很多重大改动，以确保只\n需一份代码镜像和一套整体系统，就能支持多代数据中心拓扑和不断增长的硬件平台类型\n，尤其是新的模块化 Minipack 平台。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"1-新数据中心拓扑f16-和-hgrid\"\u003e1 新数据中心拓扑：F16 和 HGRID\u003c/h1\u003e\n\n\u003cp\u003e回顾过去几年我们的数据中心拓扑，有如下需求相关的因素（demand-related factors）：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e更高的单机柜带宽\u003c/strong\u003e。\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e业务对\u003cstrong\u003e机柜间带宽\u003c/strong\u003e（inter-rack bandwidth）有更高的要求。\u003c/li\u003e\n      \u003cli\u003e业务和网卡技术已经能轻松达到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1.6T\u003c/code\u003e 甚至更高的\u003cstrong\u003e单机柜带宽\u003c/strong\u003e。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e更多的 region、更大的 region\u003c/strong\u003e。\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e原来的数据中心规划中，\u003cstrong\u003e单个 region 最多 3 个 building\u003c/strong\u003e，互联网络（the\ninterconnection network）也是为这个规模打造的。\u003c/li\u003e\n      \u003cli\u003e但我们的计算需求增长太快，除了建造新 region，我们还将注意力放到了现有\nregion，看是否能\u003cstrong\u003e将每个 region 的 building 数量翻倍\u003c/strong\u003e（6 个）。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/facebook-f16/2.jpg\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 1. 上一代 fabric 设计中所面临的双带宽压力\u003c/p\u003e\n\n\u003cp\u003e硬性的、物理的限制方面，我们考虑的因素有：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e电源\u003c/strong\u003e\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e一个 region 内的功率是固定的。\u003c/li\u003e\n      \u003cli\u003e我们的很多 region 都有专门设计的电力设施，提供 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e100MW\u003c/code\u003e 以上的容量。\u003c/li\u003e\n      \u003cli\u003e将 building 数量翻倍，并不意味着我们能为这么多 building 提供足够的电力。\u003c/li\u003e\n      \u003cli\u003e\u003cstrong\u003e更高带宽的 ASIC 和光模块（例如，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e400G\u003c/code\u003e）耗电也更高\u003c/strong\u003e。因此，网络在数据中\n心总体电力预算中的的耗电量与网络设备在全部设备中的数量并不是成比例的。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e光模块\u003c/strong\u003e\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e我们的规模意味着，不论选择哪种光技术，它们都将大规模地应用于数据中心 —— 并\n且推进时间会很快。\u003c/li\u003e\n      \u003cli\u003e我们对 \u003cstrong\u003e400G 光模块的大规模部署存有顾虑\u003c/strong\u003e，尤其是在前沿技术的初期。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e此外，过往的经验告诉我们，维护 Facebook 这种规模的数据中心意味着\u003cstrong\u003e网络需要不断演\n进\u003c/strong\u003e。我们会持续建造“绿色”数据中心（“green field” data centers），但\u003cstrong\u003e每次迭代都\n将使我们“新的”数据中心变成需要升级的数据中心\u003c/strong\u003e。这些升级过程，是我们在将来的\n设计中希望更多关注的东西。\u003c/p\u003e\n\n\u003ch2 id=\"11-备选方案\"\u003e1.1 备选方案\u003c/h2\u003e\n\n\u003cp\u003e我们考虑了几种实现更高带宽的方式。例如\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e复用原来的 fabric 设计。\u003c/strong\u003e\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e利用我们现有的多芯片（multichip ）硬件，简单地向原来的网络添加更多的 fabric 平面。\u003c/li\u003e\n      \u003cli\u003e这种方式的问题：现有的 fabric 交换机\u003cstrong\u003e功耗将非常高\u003c/strong\u003e。\n        \u003cul\u003e\n          \u003cli\u003eBackpack 当前的设计需要 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e12\u003c/code\u003e 个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3.2Tb/s\u003c/code\u003e 的 ASIC 来提供 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e128x100G\u003c/code\u003e 端\n口【译者注 1】，每个 POD 内总共有 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e48\u003c/code\u003e 个 ASIC【译者注 2】。\u003c/li\u003e\n          \u003cli\u003e也可以选择在 Backpack 内使用\u003cstrong\u003e非 CLOS 拓扑\u003c/strong\u003e，但那样还是无法降低足够多功耗。\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e将 Backpack 内的链路带宽升级到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e400G\u003c/code\u003e。\u003c/strong\u003e\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e使用最先进的光模块意味着未来几年我们必须得用 800G 或 1600G 的光模块（才能\n跟得上业务增长），这显然是不切实际的。\u003c/li\u003e\n      \u003cli\u003e而且即便是当下，400G 光模块也没有达到我们这种规模下的要求。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e【译者注 1】\u003c/p\u003e\n\n  \u003cp\u003e根据 https://www.sdnlab.com/24039.html 的解释，每个\nBackpack 的 12 个 ASIC 是这样分的：\u003c/p\u003e\n\n  \u003cul\u003e\n    \u003cli\u003e4 个用于交换矩阵（spine）：提供 4 x 3.2T = 12.8T 带宽，对应文中的 “128x100G 端口”\u003c/li\u003e\n    \u003cli\u003e8 个用于业务板卡\u003c/li\u003e\n  \u003c/ul\u003e\n\n  \u003cp\u003e【译者注 2】\u003c/p\u003e\n\n  \u003cp\u003eBackpack 是 4-post 设计，每个 POD 有 4 个 spine 平面，而每个平面 12\n个 ASIC，因此每个 POD 是 4*12 = 48 个 ASIC。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"12-f16下一代-fabric-拓扑\"\u003e1.2 F16：下一代 fabric 拓扑\u003c/h2\u003e\n\n\u003cp\u003e在评估了多种方案后，我们设计了一种新的\u003cstrong\u003e数据中心 building 内部拓扑\u003c/strong\u003e，命名为 “F16”\n。Broadcom 的 Tomahawk 3 (TH3) ASIC 是 \u003cstrong\u003e400G fabric 设计\u003c/strong\u003e（4x-faster 400G fabric）\n的可选方案之一，我们使用的就是这款 ASIC。但我们的使用方式不同：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eTH3：4 个 multichip-based 平面，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e400G\u003c/code\u003e 链路速度（radix-32 组建模块，每个芯片 32 口）\u003c/li\u003e\n  \u003cli\u003eF16：16 个 single-chip-based 平面，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e100G\u003c/code\u003e 链路速度（我们最优的 radix-128 模块，每个芯片 128 口）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eF16 的主要特点：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e我们设计了一种名为 Minipack 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e128-port 100G\u003c/code\u003e fabric 交换机，作为\n各基础设施层新的标准组建模块（uniform building block）。Minipack 是一种\n\u003cstrong\u003e灵活、单 ASIC\u003c/strong\u003e 的设计，只用到 \u003cstrong\u003eBackpack 一半的电力和空间\u003c/strong\u003e。此外，单\n芯片系统的管理和操作也更简单。\u003c/li\u003e\n  \u003cli\u003e每个机柜连接到 \u003cstrong\u003e16 个独立平面\u003c/strong\u003e。Wedge 100S 作为 TOR 交换机，支持\n\u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1.6T\u003c/code\u003e 上行\u003c/strong\u003e带宽和 \u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1.6T\u003c/code\u003e 下行\u003c/strong\u003e带宽。\u003c/li\u003e\n  \u003cli\u003e每个平面由 \u003cstrong\u003e16 个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e128x100G\u003c/code\u003e fabric 交换机\u003c/strong\u003e（Minipack）组成。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/facebook-f16/3.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 2. F16 数据中心网络拓扑\u003c/p\u003e\n\n\u003cp\u003eBroadcom TH3 芯片（ASIC）的两种使用方式：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e32-port * 400G/port\u003c/code\u003e：端口数量少，端口速率高\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e128-port * 100G/port\u003c/code\u003e：端口数量多，端口速率低（相对 400G）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e这两种方式都能满足我们 4x 容量的需求，提供单机柜 1.6T 的带宽。但选择了 100G（端\n口数量多），我们就能\u003cstrong\u003e少用 3x 的 fabric 芯片\u003c/strong\u003e，将\u003cstrong\u003e每个 POD 内 infra 交换机的数量从 48 个减少到 16\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/facebook-f16/multi-chip-pod.jpg\" width=\"95%\" height=\"95%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 3. 多芯片 400G POD fabric vs. 单芯片 F16 @100G\u003c/p\u003e\n\n\u003cp\u003e为实现 4x 容量目标，除了\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e减少子交换机数量\u003c/li\u003e\n  \u003cli\u003e省电\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e之外，我们还利用了\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e技术成熟、经过验证、易于采购的 CWDM4-OCP 100G 光模块\u003c/li\u003e\n  \u003cli\u003e我们现有的 Wedge 100S TORs。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e这种方式还使得对现有 4 平面（4-plane） fabrics 进行升级更简单，为我们将来朝着\n200G 和 400G 光模块升级铺平了道路。此外，这种设计能获得更高的\u003cstrong\u003e\u003cmark\u003e电能使用效率\u003c/mark\u003e\u003c/strong\u003e\n（power-usage profile，\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ePUE\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e【译者注 3】），比等待适用于大规模场景的\n800G 和 1.6T 链路更加现实，能快速地帮我们获得接下来所需的 2x 和 4x 性能提升。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e【译者注 3】\nPUE = 数据中心总能耗（Total Facility Power）/ IT 设备总能耗（IT Equipment Power）。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/facebook-f16/5.jpg\" width=\"95%\" height=\"95%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 4. F16 架构中，服务器之间的跳数和排队点（hops and queuing points）减少了 2-3x\u003c/p\u003e\n\n\u003cp\u003e虽然拓扑看起来很大很复杂，但其实 F16 要\u003cstrong\u003e比之前的 fabric 扁平和简单 2.25 倍\u003c/strong\u003e（2.25 times flatter and simpler）。\n如图 4 所示，考虑所有 intra-node 拓扑的话，原来的 fabric：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e由 \u003cstrong\u003e9 个独立的 ASIC 层\u003c/strong\u003e组成（nine distinct ASIC tiers），从最底层的 TOR 到最上层\n的 region 内 building 互联网络（Fabric Aggregator）。\u003c/li\u003e\n  \u003cli\u003e在一个 fabric 内，\u003cstrong\u003e机柜到机柜跳数\u003c/strong\u003e，最好的情况下 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e6\u003c/code\u003e 跳，最差的情况下 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e12\u003c/code\u003e 跳。\u003c/li\u003e\n  \u003cli\u003e但对于 small-radix（端口数比较少的）ASICs，\u003cstrong\u003e大部分路径都是最差情况下的跳数\u003c/strong\u003e\n，因为在一个大型、分布式系统中，命中同一个前面板芯片（the same front-panel\nchip）的概率是很低的。\u003c/li\u003e\n  \u003cli\u003e从一个 building 内的机柜经过 Fabric Aggregator 到另一个 building 内的机柜需要\n多达 24 跳。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e而对于 F16，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e同一 fabric 内服务器到服务器的路径总是最优路径\u003c/strong\u003e【译者注 4】，只需 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e6\u003c/code\u003e 跳。\u003c/li\u003e\n  \u003cli\u003ebuilding 到 building 永远是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e8\u003c/code\u003e 跳。\u003c/li\u003e\n  \u003cli\u003eintra-fabric 跳数变为原来的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1/2\u003c/code\u003e。\u003c/li\u003e\n  \u003cli\u003einter-fabric 服务器间的跳数变为原来的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1/3\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e【译者注 4】\u003c/p\u003e\n\n  \u003cp\u003e单芯片交换机的设计，使得任何层级中的两个设备，总是会通过更上一层的设备直连，因\n此跳数固定。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"13-hgrid下一代-fabric-aggregation-解决方案\"\u003e1.3 HGRID：下一代 fabric aggregation 解决方案\u003c/h2\u003e\n\n\u003cp\u003e去年，我们分享了\n\u003ca href=\"https://engineering.fb.com/data-center-engineering/fabric-aggregator-a-flexible-solution-to-our-traffic-demand\"\u003eFabric Aggregator\u003c/a\u003e，\n这是一种解决 \u003cstrong\u003eregion 内 building 之间互联\u003c/strong\u003e的分解式设计（disaggregated design）。\u003c/p\u003e\n\n\u003cp\u003e设计 Fabric Aggregator 的主要原因之一是：我们已经\u003cstrong\u003e触及了\u003c/strong\u003e对 region 内 3 个\nbuilding 的 fabric 网络做全连接（mesh）的\u003cstrong\u003e单个大型设备的上限\u003c/strong\u003e。\n而未来计划将 region 内的 building 数量翻倍，那显然更是受这个限制的。\u003c/p\u003e\n\n\u003cp\u003eFabric Aggregator 是一个完全分解式（completely disaggregated design）的设计，能\n够扩展到多个机柜（scale across multiple racks），而我们当时使用的构建模块是\nWedge 100S。如今回头看，\u003cstrong\u003eFabric Aggregator 的落地，是我们后来的 HGRID 落地的基石\u003c/strong\u003e\n。\u003c/p\u003e\n\n\u003cp\u003eHGRID 是一个\u003cstrong\u003e新的、更大的 building 之间的聚合层\u003c/strong\u003e，能扩展到一个 region 内部的\n6 个 building，每个 building 内都是一个 full F16 fabric。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHGRID 的设计原则和 Fabric Aggregator 相同，但现在的基本构建模块是 Minipack\u003c/strong\u003e ——\n支撑 F16 fabric 的新平台。\u003c/p\u003e\n\n\u003cp\u003e作为 F16 设计的一部分，我们将 \u003cstrong\u003efabric spine 交换机和 HGRID 直连，替换了原\n来的 fabric edge PODs\u003c/strong\u003e（边界 PODs），如图 5 所示：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e这使得我们能进一步将 \u003cstrong\u003eregional network 东西向流量扁平化\u003c/strong\u003e（flatten the\nregional network for East-West traffic，即，同 region 内不同 building 之间的\n流量路径变短，译者注），将\u003cstrong\u003e每个 fabric 上行到 regional network 的带宽提升到 Pbps 级别\u003c/strong\u003e。\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e边界 POD 在 fabric 方案的早期很发挥了重要作用\u003c/strong\u003e，为过去的全连接聚合器（full-mesh aggregator）\n提供了一种简单的 \u003cstrong\u003eradix normalization\u003c/strong\u003e（端口数量标准化）和 \u003cstrong\u003erouting\nhandoff\u003c/strong\u003e（路由移交，即，所有进出 POD 的流量都送到这里，在这里进行路由判断，译者注）。\u003c/li\u003e\n  \u003cli\u003e但新的分解式 FA 层（disaggregated FA tier）\u003cstrong\u003e不再需要这些中间节点\u003c/strong\u003e（interim\nhops），使我们能\u003cstrong\u003e同时在带宽和规模上对 region 进行扩展\u003c/strong\u003e（scale the regions\nin both bandwidth and size）。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/facebook-f16/F16_6.jpg\" width=\"95%\" height=\"95%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 5. 单 region 内 6 个 building 的数据中心，6 个 F16 fabrics 通过 HGRID 互联\u003c/p\u003e\n\n\u003ch1 id=\"2-新的模块化的-128x100g-组建模块building-block\"\u003e2 新的、模块化的 128x100G 组建模块（building block）\u003c/h1\u003e\n\n\u003cp\u003e接下来，我们设计了组建模块交换机（building block switch），这也是\u003cstrong\u003e所有这些新拓\n扑的核心\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e在设计拓扑以及新交换机时，\u003cstrong\u003e减少耗电\u003c/strong\u003e始终都是一个考虑因素，此外还需\n要考虑\u003cstrong\u003e灵活性和模块化\u003c/strong\u003e。我们希望能用\u003cstrong\u003e一种交换机同时承担数据中心中的多种角色\u003c/strong\u003e\n（fabric、spine、aggrgator），并且能在新的光模块面世时轻松地升级到更快的网络。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/facebook-f16/6.jpg\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 6. Minipack with PIM-16Q\u003c/p\u003e\n\n\u003cp\u003e随着 12.8T 交换机 ASIC 的进步，我们\u003cstrong\u003e基于单颗 12.8T ASIC 设计了一个 128X100G 交\n换机，名为 Minipack\u003c/strong\u003e，如图 6 所示；而如果用之前的 Backpack 设计，就需要 12 颗芯\n片组成 CLOS fabric。使用单颗 ASIC 相比于 Backpack 就已经\u003cstrong\u003e节省了大量的耗电\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e我们与 \u003ca href=\"https://engineering.fb.com/wp-content/uploads/2019/03/EdgeCore-PR-FINAL-MiniPack-Product-release-14Mar2019.docx\"\u003eEdgecore\u003c/a\u003e 合作，基于我们的设计实现了 Minipack。\u003c/p\u003e\n\n\u003ch2 id=\"21-模块化modularity\"\u003e2.1 模块化（Modularity）\u003c/h2\u003e\n\n\u003cp\u003e虽然我们想要单芯片交换机，但也仍然需要类似 Backpack 这种\u003cstrong\u003e盒式交换机\u003c/strong\u003e（chassis\nswitch）提供的\u003cstrong\u003e模块化和灵活性\u003c/strong\u003e。因此，Minipack 有为 128 口准备的接口模块（\ninterface modules），而不是一个固定的 “pizza box” 设计。这种设计既拥有\u003cstrong\u003e单芯片的简\n单性和省电\u003c/strong\u003e特点，又有盒式交换机的\u003cstrong\u003e灵活性/模块化\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e我们尝试了不同的系统设计来实现这种模块化，最终选择了 8 个板卡模块（port interface\nmodule，PIM）\u003cstrong\u003e正交直连的架构\u003c/strong\u003e（orthogonal-direct architecture），如图 7 所示：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e这种架构\u003cstrong\u003e支持不同的粒度\u003c/strong\u003e（the right granularity，即插几块卡），使\nMinipack 能以多种角色高效地部署在 F16 网络中。\u003c/li\u003e\n  \u003cli\u003e每块 PIM 卡在盒中都是垂直插的（vertically oriented），我们克服了机械方面的挑战\n，才将其端口（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e16x100G QSFP28\u003c/code\u003e）放到了前面板（front panel）。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e我们还设计了一种用这些 PIM 进行\u003cstrong\u003e光纤管理和路由\u003c/strong\u003e（manage and route the fiber，\n从下文看，是控制光纤/端口速度的意思，译者注）的方案。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e每个 PIM 上都配备了名为 PIM-16Q 的 4x \u003cstrong\u003ereverse gearbox\u003c/strong\u003e（双向变速器）。\u003c/li\u003e\n  \u003cli\u003e将变速器配置为 200G retimer 模式时，PIM-16Q 能支持 8x200G QSFP56 端口。剩\n下的 8 个端口在这种模式下就没用了（nonfunctional）。\u003c/li\u003e\n  \u003cli\u003ePIM-16Q 后向兼容 40G，能支持 16x40G QSFP+ 端口。\u003c/li\u003e\n  \u003cli\u003e我们还设计了一个名为 PIM-4DD 的 400G PIM，能支持 4x400G QSFP-DD 端口。每个\nPIM-4DD 都有 4x400G retimer 芯片。\u003c/li\u003e\n  \u003cli\u003e在同一个 Minipack 机框内混合使用 PIM-16Q 和 PIM-4DD，就能\u003cstrong\u003e获得 40G、100G、200G 和 400G 端口\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/facebook-f16/7.jpg\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 7. Minipack 盒式架构（chassis architecture）\u003c/p\u003e\n\n\u003cp\u003e这种 \u003cstrong\u003ePIM 和端口之间的灵活性\u003c/strong\u003e使 Minipack 能支持多代链路速度和数据中心拓扑，使\n数据中心网络能平滑地从一代速度升级到下一代速度。\u003c/p\u003e\n\n\u003ch2 id=\"22-光模块optics\"\u003e2.2 光模块（Optics）\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e为用上技术成熟的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e100G CWDM4-OCP\u003c/code\u003e 光模块，Minipack 使用了双向变速器\u003c/strong\u003e（reverse gearboxes）。\u003c/p\u003e\n\n\u003cp\u003eBroadcom TH3 交换机芯片有 256 个 50G PAM4 SerDes 槽（lanes），支持\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e12.8T\u003c/code\u003e 交换带宽，而现有的 100G CWDM4 光模块只有 4 个 25G NRZ SerDes 槽。我们使\n用变速器芯片来对接二者（bridge the gap）。\u003c/p\u003e\n\n\u003cp\u003eMinipack 中总共有 32 个变速器芯片(128x100G 配置)，每个负责处理 4x100G。\u003c/p\u003e\n\n\u003ch2 id=\"23-系统设计system-design\"\u003e2.3 系统设计（System design）\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eTH3 位于水平的交换机主板\u003c/strong\u003e（switch main board，SMB）上，自带一个高效的散热片，\n而\u003cstrong\u003e变速器位于垂直的 PIM 上\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e这种架构打开了\u003cstrong\u003e通风道\u003c/strong\u003e（the air channel），降低了对更高的热效率的系统依赖（\nsystem impedance for better thermal efficiency）。我们能在\u003cstrong\u003e降温风扇低速运行\u003c/strong\u003e\n的情况下，在 Minipack 中使用 100G CWDM4-Lite 光模块（55 摄氏度）。\u003c/li\u003e\n  \u003cli\u003eSMB 和 PIM 直连减少了印刷电路板 trace 长度（printed circuit board trace\nlengths），也减少了信道插损（channel insertion loss）。\u003c/li\u003e\n  \u003cli\u003eFRU-able PIM 使我们能有不同的接口选择，例如 PIM-16Q 和 PIM-4DD。\u003c/li\u003e\n  \u003cli\u003eFRU-able SCM（switch control module，交换机控制模块）还提高了可服务性（\nserviceability），例如在更换双列直插内存（dual in-line memory）模块或 SSD 的场景。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e与 Facebook 的前一代交换机不同的是，Minipack 引入了\u003cstrong\u003e数字光模块监控\u003c/strong\u003e（digital\noptics monitoring，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDOM\u003c/code\u003e）\u003cstrong\u003e加速功能\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eSMB 上有一块 input/output block (IOB) FPGA，通过 PCIe 连接到 CPU。\u003c/li\u003e\n  \u003cli\u003e每个 PIM 上的 IOB FPGA 通过一个局部总线（local bus）与 DOM FPGA 通信。\u003c/li\u003e\n  \u003cli\u003eDOM FPGA 通过低速 I2C 总线定期轮询光模块的 DOM 信息，而 CPU 只需通过高速\nPCIe 读取这些信息，避免了直接通过低速 I2C 总线去访问。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"24-minilakeminipack-的控制器\"\u003e2.4 MiniLake：Minipack 的控制器\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/facebook-f16/9-minilake.jpg\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 8. MiniLack on Minipack SCM\u003c/p\u003e\n\n\u003cp\u003e对于 Minipack 的控制平面，我们自主设计了一个名为 MiniLake 的微控制器。MiniLack\n基于非常适用于交换机应用的 COM Express 基本尺寸和 Type-7 针脚（basic form factor\nand Type-7 pinout）。\u003c/p\u003e\n\n\u003cp\u003e我们的一条\u003cstrong\u003e指导性原则：像管理服务器一样管理交换机\u003c/strong\u003e。MiniLake 提供了与\nMonoLake 类似的管理接口，后者是我们管理服务器集群的一个多功能控制平台（\none-socket workhorse）。\u003c/p\u003e\n\n\u003cp\u003e我们已经将 \u003cstrong\u003eMinipack+MiniLake 的完整设计贡献给 OCP\u003c/strong\u003e，包括系统硬件规范、所有电气\n设计文件、所有机械设计文件，以及编程图（programming images）。这些东西现在对 OCP\n社区是完全开放的。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e软件方面，我们在 Minipack 上运行 FBOSS\u003c/strong\u003e，但社区已经将\u003cstrong\u003e其他一些软件栈已经移植到\nMinipack\u003c/strong\u003e，包括来自 Cumulus Networks 的商用软件，以及来自 OCP Networking 项目的\nSAI/SONIC 开源软件栈，因此其他公司如果要用的话，以上都是不错的备选。\u003c/p\u003e\n\n\u003ch1 id=\"3-与-arista-联合开发-7368x4-交换机\"\u003e3 与 Arista 联合开发 7368X4 交换机\u003c/h1\u003e\n\n\u003cp\u003e在设计了 F16 和 HGRID 拓扑，并设想用单芯片 128x100G 交换机作为组建模块之后，我\n们决定从两家源厂商制造这种交换机。\u003c/p\u003e\n\n\u003cp\u003e对于第二家厂商，我们选择了长期合作伙伴 Arista Networks，双方合作开发一款满足前面\n所描述的高要求（power envelope、模块化、易管理等等）的交换机。\u003c/p\u003e\n\n\u003cp\u003e这对于我们双方来说都是一种新的伙伴关系。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e在此之前，我们都是与 \u003cstrong\u003eEdgecore、Celestica\u003c/strong\u003e等这样的原始设计制造商（original\ndesign manufacturers，ODM）合作，这种模式中，\u003cstrong\u003e所有的设计都源自 Facebook，ODM 厂商只负责生产\u003c/strong\u003e。\u003c/li\u003e\n  \u003cli\u003e而 Arista 过去已经独立设计了自己的交换机。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/facebook-f16/8.jpg\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 9. 100G 线卡的 Arista 7368X4 盒式交换机\u003c/p\u003e\n\n\u003cp\u003e这样，Facebook 与 Arista 联合设计了 Arista 7368X4 交换机，它具备 Minipack 的所\n有优点，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eMinipack 所承担的角色，Arista 7368X4 都能够承担。\u003c/li\u003e\n  \u003cli\u003e为使部署更加简单，我们内部做了一些约定，规定在具体某个数据中心中哪种角色应该用哪种交换机。\u003c/li\u003e\n  \u003cli\u003eArista 7368X4 既能运行 FBOSS 软件，也能运行 EOS。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e这种\u003cstrong\u003e联合开发模型给我们带来了几方面收益\u003c/strong\u003e：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e有了第二家提供商，\u003cstrong\u003e底层的组件有了一定程度上的隔离性\u003c/strong\u003e，在\u003cstrong\u003e供应链上有了冗余性\u003c/strong\u003e。\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e能并行地利用到 Arista 团队的工程开发能力\u003c/strong\u003e，尤其是在主芯片（primary ASIC）\n研发上（我们两个团队在并行研发），以及模块化 PIM 设计和外部 PHY 编程（虽然我\n们使用了不同的变速器）。\u003c/li\u003e\n  \u003cli\u003e有另一种交换机运行我们的网络操作系统，能帮我们\u003cstrong\u003e快速判断某个问题是否与 FBOSS 或特定平台相关\u003c/strong\u003e。\n我们相信在这个交换机上运行 EOS 或开源软件的能力对网络管理和运维人员非常重要。\n它给了团队使用开放交换机（open switch）的选项，同时允许在其上运行 EOS 这样的\n商业软件 —— 如果他们想这么做的话。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e最后，Arista 正在将他们的 Arista 7368X4 交换机规范贡献给 OCP。Arista 过去已经在\n参与 OCP Networking 了，例如它们的其他交换机参与到 SAI/SONIC 项目，以及通过它们\n近期收购的 Mojo Networks 公司进行的参与。\u003c/p\u003e\n\n\u003cp\u003e7368X4 规范贡献给社区这一举动代表了像 Arista 这样的业内老牌的 OEM 厂商的一个重大\n的、逻辑上的方向：\u003cstrong\u003e拥抱 OCP Networking 所项目倡导的开放式、分解式网络\u003c/strong\u003e（open\nand disaggregated networking）。\u003c/p\u003e\n\n\u003ch1 id=\"4-底层运行的软件fboss\"\u003e4 底层运行的软件：FBOSS\u003c/h1\u003e\n\n\u003ch2 id=\"41-解决软件挑战\"\u003e4.1 解决软件挑战\u003c/h2\u003e\n\n\u003cp\u003e前面已经介绍了\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e全新的拓扑 F16 和 HGRID\u003c/li\u003e\n  \u003cli\u003e新的模块化的组建模块交换机（building block switches）\u003c/li\u003e\n  \u003cli\u003eFacebook Minipack 和 Arista 7368X4\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e所有这些都是为了解决我们面临的业务需求，以创纪录的速度（in record time）设计和研\n发出来的。\u003c/p\u003e\n\n\u003cp\u003e在软件方面，FBOSS 需要同时兼容现有生产环境的大量交换机和新的网络。\u003cstrong\u003e我们的工作\n横跨整个 on-switch 软件栈\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eOpenBMC 对两个新硬件平台的支持\u003c/li\u003e\n  \u003cli\u003e通过我们的可插拔 PIM 设计，在单控制平面内支持模块化\u003c/li\u003e\n  \u003cli\u003e在不同速率下，复杂的端口编程（complex port programming at different speeds）\u003c/li\u003e\n  \u003cli\u003e两个新的 microservers\u003c/li\u003e\n  \u003cli\u003e全新的 I2C（二线制串行总线）\u003c/li\u003e\n  \u003cli\u003eMDIO（Management Data Input Output）\u003c/li\u003e\n  \u003cli\u003eFPGA 方面的工作\u003c/li\u003e\n  \u003cli\u003e第一代支持外部 PHY 芯片的平台\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e某些挑战是我们与 Arista 合作开发 7368X4 所特有的。7368X4 除了是一个新平台\n，还是我们\u003cstrong\u003e第一次在非 Facebook 设计的硬件上运行 FBOSS\u003c/strong\u003e。这意味着我们要与\nArista 密切合作，设计出满足 FBOSS 要求的硬件，例如给 7368X4 添加 BMC SoC。\n我们还重新审视了 FBOSS 一直以来的一些假设前提，例如 UEFI BIOS 支持（Arista 上\n不支持），以及交换机如何在 Arista EOS 和 FBOSS 之间切换。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e体积越来越大、功能越来越复杂的软件，更新频率通常都会越来越慢\u003c/strong\u003e，但与此相反，我\n们一直坚持着指导我们开发 FBOSS 的原则，该原则在过去五年也指导着我们不断对 FBOSS\n进行快速迭代：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e专注于\u003c/strong\u003e对新拓扑和新硬件的\u003cstrong\u003e精准需求\u003c/strong\u003e（precise requirements）\u003c/li\u003e\n  \u003cli\u003e极大地扩展\u003cstrong\u003e仿真、模拟和通用测试的能力\u003c/strong\u003e（simulation, emulation, and\ngeneral testing capabilities），以保持我们的\u003cstrong\u003e单镜像、持续部署哲学\u003c/strong\u003e（\nsingle-image, continuous-deployment philosophy）\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e持续参与到数据中心网络的部署和运维工作\u003c/strong\u003e，包括持续部署新拓扑和硬件、迁\n移和排障。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e将这些管理单个平台和层次时的原则应用到当前如此庞大的规模并不轻松。这项工作需要在\n\u003cstrong\u003e几方面主动创新\u003c/strong\u003e：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e构建恰当的软件\u003cstrong\u003e抽象\u003c/strong\u003e来隐藏各层次的硬件差异。\u003c/li\u003e\n  \u003cli\u003e通过更强大的\u003cstrong\u003e自动化测试和频繁部署\u003c/strong\u003e来验证”硬件-软件“层的大量组合。\u003c/li\u003e\n  \u003cli\u003e扩展管理路由的\u003cstrong\u003e高层控制软件\u003c/strong\u003e（higher layer control software for routing）\n，使之能\u003cstrong\u003e管理所有数据中心层级\u003c/strong\u003e（DC tiers）：fabric, spine, and Fabric\nAggregator。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e接下来将重点介绍以上第 1 和第 2 点。\u003c/p\u003e\n\n\u003ch2 id=\"42-更多硬件抽象\"\u003e4.2 更多硬件抽象\u003c/h2\u003e\n\n\u003cp\u003e我们的\u003cstrong\u003e软件栈\u003c/strong\u003e由几个层次组成：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eOpenBMC：板卡系统级别（board-system level ）管理软件。\u003c/li\u003e\n  \u003cli\u003eCentOS：底层的 Linux 操作系统；与我们数据中心\u003cstrong\u003e服务器\u003c/strong\u003e的内核和操作系统是相同的。\u003c/li\u003e\n  \u003cli\u003eFBOSS：一系列\u003cstrong\u003e对控制平面和数据平面进行编程的应用\u003c/strong\u003e（the set of applications）。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/facebook-f16/9-vs-arista.jpg\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 10. Facebook on-switch 软件栈\u003c/p\u003e\n\n\u003cp\u003e我们希望同时在我们的新平台，以及现有的已经大规模部署的 Wedge 40、Wedge 100、\n和 Backpack 交换机上运行这三层组件。\u003c/p\u003e\n\n\u003cp\u003eFBOSS 中已经有了几个抽象层次，但要运行在新的 Minipack 和 Arista 7368X4 平台上还\n需要一些重构或扩展。接下来我们介绍几个这方面的改动例子。\u003c/p\u003e\n\n\u003ch3 id=\"421-支持新的硬件和-bootloader\"\u003e4.2.1 支持新的硬件和 bootloader\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003eFBOSS 通过 BMC SoC 和 OpenBMC 来处理硬件平台之间的差异\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003eArista 团队将 BMC SoC 添加到了 7368X4，支持两种操作模式。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eArista EOS 模式：microserver 控制着风扇、电源和其他板上组件（on-board components）。\u003c/li\u003e\n  \u003cli\u003eFBOSS 模式：我们希 BMC 来承担这些环境和板卡管理功能，这样就与我们\u003cstrong\u003e管理服务器集群的方式是一致的\u003c/strong\u003e。\u003c/li\u003e\n  \u003cli\u003e设计支持这两种模式之后，就能重用和扩展我们已有的 OpenBMC 技术栈来支持新的硬件平台。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eMinipack 的控制模块是 MiniLake，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e从软件的角度来看，MiniLake 功能与我们现有的 microserver design 并没有太大差异。\u003c/li\u003e\n  \u003cli\u003eMiniLake 提供带 PXE v6 功能的 UEFI BIOS。有了这个接口，将镜像加载到 Minpack 就是一件非常直接的事情。\u003c/li\u003e\n  \u003cli\u003eMiniLake 的 32G 内存让我们获益良多，让我们使用通用的 Facebook 软件开发基础设施和服务更加方便。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e7368X4 的 microserver 是定制的，但更重要的是，Arista 长期以来用的都是一个定制化\ncoreboot 实现，而不是最常用的 UEFI BIOS，典型的 Facebook 服务器使用的都是后者。\n为解决这个问题，我们决定向 OCP Open System Firmware 项目看齐。我们本来就在尝试加\n入这个项目，因此通过与 Arista 合作，现在已经有了一个基于 coreboot、u-root 和\nLinuxBoot 加载 microserver 镜像的方案。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/facebook-f16/10.jpg\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 11. OCP open systems firmware (https://systemboot.org/)\u003c/p\u003e\n\n\u003cp\u003e有了这种硬件的灵活性之后，我们还需要实现 7368X4 平台上 Arista EOS 和 FBOSS 的自\n动化切换。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e7368X4 默认装的是 EOS。\u003c/li\u003e\n  \u003cli\u003e如果部署过程中 7368X4 需要运行 FBOSS，会自动地触发一个切换流程。\u003c/li\u003e\n  \u003cli\u003e我们会定期测试 EOS/FBOSS 互切，确保这个流程没有失效。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"422-启用一个端口\"\u003e4.2.2 启用一个端口\u003c/h3\u003e\n\n\u003cp\u003e我们已经习惯于用简单接口（simple interfaces）的方式做\u003cstrong\u003e端口管理\u003c/strong\u003e（port management），\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e能够轻松地\u003cstrong\u003e启用或修改\u003c/strong\u003e平台中任何\u003cstrong\u003e端口或端口的速度\u003c/strong\u003e。\u003c/li\u003e\n  \u003cli\u003eMinipack 的模块化设计、独立 PIMs 和外部 PHYs 使得\u003cstrong\u003e端口管理任务更加频繁\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e而启用一个端口这种高层任务最终是需要底层的基础设施来完成的：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/facebook-f16/11.jpg\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 12. Minipack 硬件组件\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e与收发器通信\u003c/strong\u003e。\u003c/p\u003e\n\n    \u003cp\u003e收发器管理软件（transceiver management software）运行在 microserver 上，\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e现有的平台上，有一个 I2C 总线将收发器连接到 microserver。\u003c/li\u003e\n      \u003cli\u003e而在 Minipack 的设计中，这将意味着一个 I2C 总线连接到 128 个设备，显而易见\n可扩展性不好。\u003c/li\u003e\n    \u003c/ul\u003e\n\n    \u003cp\u003e为解决这个问题，我们\u003cstrong\u003e定做了一个 FPGA 来加速 I2C\u003c/strong\u003e。这块 FPGA 包含了\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e一些相对比较标准的 I2C 控制器模块（controller blocks）\u003c/li\u003e\n      \u003cli\u003e一个更加复杂的过程：在收发器上通过后台预取和缓存（background-fetch and\ncache）数据页，确保跟踪光能级（light levels）、温度和其他感兴趣指标时数据\n的最大时效性（maximal freshness）。\u003c/li\u003e\n    \u003c/ul\u003e\n\n    \u003cp\u003e由于 Minpack 的空间效率设计非常出色，我们能将 128 个收发器塞进只有 4 RU 大小的空间。\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e因此我们设计了精密的风扇控制算法来冷却机箱。\u003c/li\u003e\n      \u003cli\u003e尤其是，我们希望将收发器温度考虑进 BMC 上运行的风扇控制算法。\u003c/li\u003e\n      \u003cli\u003e上面提到的缓存设计提供了一种高效地让 BMC 及 microserver 访问收发器 DOM 数\n据（例如温度、耗电量）的方式，而无需竞争 I2C 资源。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e与外部 PHYs 通信\u003c/strong\u003e。\u003c/p\u003e\n\n    \u003cp\u003e这些用的是 MDIO 总线而非 I2C，因此我们在 FPGA 中使用 MDIO 控制器来与这些芯片通\n 信。需要编写一个 MDIO 接口，这个接口既要能对接我们的 C++ 代码库，又要能对\n 接芯片的 SDK，另外，我们还要利用上 FPGA。\u003c/p\u003e\n\n    \u003cp\u003e所有这些工作都必须分别为 Minipack 和 Arista 7368X4 实现，因为它们所用的 FPGA\n 和 gearbox 各不相同。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e对外部 PHYs 编程\u003c/strong\u003e。\u003c/p\u003e\n\n    \u003cp\u003e能与 PHYs 通信之后，就能对它们进行编程，以获得我们所需的灵活性。\u003c/p\u003e\n\n    \u003cp\u003e例如，我们首先想支持的配置就是：在变速箱的 ASIC 侧拿出两个 channel，配置\n 其运行在 50G PAM4，然后将变速箱内的信号转换成 4 个 25G NRZ channels，这样\n 就在收发器上实现了一个 100G 端口。\u003c/p\u003e\n\n    \u003cp\u003e此外，我们还必须支持 40G，可选的方式有 2x20G 和 4x10G。展望未来的话，200G 也\n 是能支持的，只要将 ASIC 侧的 4 个 channel 直接映射到 line 侧的 4 个 channel\n ，但那样我们就无法利用 neighboring port 了。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/facebook-f16/12.jpg\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 13. Visualizing port programming through an external PHY chip\u003c/p\u003e\n\n\u003ch2 id=\"43-扩展持续测试continuous-test的能力\"\u003e4.3 扩展持续测试（continuous test）的能力\u003c/h2\u003e\n\n\u003cp\u003e我们对原有的测试基础设施进行了扩展，添加了对所有新平台和拓扑部署组合的支持。我们\n\u003cstrong\u003e整体的测试策略有三部分\u003c/strong\u003e：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e真实或\u003cstrong\u003e全生命周期实验室环境\u003c/strong\u003e（Realistic or full life-cycle lab environments）\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e测试自动化\u003c/strong\u003e（test automation）\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e早期部署\u003c/strong\u003e（early deployment）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eF16 fabric 非常占空间，因此我们大大地扩建了实验室环境。虽然无法在实验\n室环境搭建一套完整的 F16，但我们力求策略尽量接近，利用并行的链路测试相关特性，\n例如流量哈希（traffic hashing，我们在这里\u003ca href=\"https://engineering.fb.com/data-center-engineering/opening-designs-for-6-pack-and-wedge-100\"\u003e吃过亏\u003c/a\u003e）。\u003c/p\u003e\n\n\u003cp\u003e我们还添加了所有计划部署的“角色-平台-软件”（role-platform-software）组合。用工具\n来仿真额外的对端（additional peers），构造很大的规模。\u003c/p\u003e\n\n\u003cp\u003e最后，我们确保实验室环境能安全地跑生产管理系统（securely work production\nmanagement systems），这样就能测试软件的全生命周期。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/facebook-f16/Training.jpg\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 13. SNC 测试拓扑\u003c/p\u003e\n\n\u003cp\u003e自动化方面，在开发 F16-Minipack 的过程中，我们向测试基础设施添加了如下两组额外的\n测试，这两者都有助于显著加快下次引入新平台的速度：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003eASIC 级别测试。\u003c/p\u003e\n\n    \u003cp\u003e这是软件栈的最底层，之前的自动化程度并不高。\u003c/p\u003e\n\n    \u003cp\u003e在此之前，我们限定\u003cstrong\u003e新 ASIC 每次只能引入到一个层级\u003c/strong\u003e（tier），以减少其暴露面（\n reduce exposure）和测试负担。\u003c/p\u003e\n\n    \u003cp\u003e但在 F16 的设计中，\u003cstrong\u003e新 ASIC 在第一天就会用在三层中的每一层\u003c/strong\u003e（three\n different tiers），因此需要我们高优先级自动化 ASIC 级别的测试。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e差异测试（On-diff testing）。\u003c/p\u003e\n\n    \u003cp\u003eFacebook 一直强制对开发者引入的每个\u003cstrong\u003e软件变更\u003c/strong\u003e（“diff”）进行持续测试和部署\n ，确保运行了完整的测试套件。\u003c/p\u003e\n\n    \u003cp\u003e我们在 FBOSS 中开始采用这种 on-diff 测试哲学，并利用 Facebook 现有的测试基础\n 设施，因为对于单个开发者来说，预测他的变更可能产生那些关联影响正变得越来越难\n ，因为部署的组合方式太多了。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/facebook-f16/14.jpg\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 14. 复用 Facebook on-diff 测试工具来测试网络软件\u003c/p\u003e\n\n\u003cp\u003e最后，我们持续地拥抱 Facebook 的\u003cstrong\u003e尽早部署和快速迭代\u003c/strong\u003e（early deployment and\niteration）哲学，这方面的更多内容见 \u003ca href=\"https://research.fb.com/wp-content/uploads/2018/07/FBOSS-Building-Switch-Software-at-Scale.pdf\"\u003eSIGCOMM 2018 paper on\nFBOSS\u003c/a\u003e\n。实际上，在我们还没有完全下线 DVT 之前，就已经在用 Minipack 接生产流量了。大部\n分情况下，我们\u003cstrong\u003e每周都会在数据中心的某个地方上线一台 Minipack 或 7368X4 设备\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003eFacebook 所有软件作为一个整体有这样一套\u003cstrong\u003e哲学\u003c/strong\u003e：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e尽早接入生产环境\u003c/mark\u003e\u003c/strong\u003e（getting into production as quickly as possible）\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e在生产环境站稳\u003c/mark\u003e\u003c/strong\u003e（staying in production）\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e持续迭代\u003c/mark\u003e\u003c/strong\u003e（continuously iterating）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e对于网络来说，这种哲学有助于我们在两方面发现问题：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e交换机软件栈（on-switch software）\u003c/li\u003e\n  \u003cli\u003e大规模部署所需的网络层配套工具和监控（network-level tooling and monitoring）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e最后，我们正在开发不仅仅是一个硬件/软件平台，而是\u003cstrong\u003e一个完备的、可立即部署的交换系统\u003c/strong\u003e\n（a complete, ready-to-deploy switching system）。\u003c/p\u003e\n\n\u003ch1 id=\"5-总结\"\u003e5 总结\u003c/h1\u003e\n\n\u003cp\u003eF16 和 HGRID 是网络拓扑，Minipack 和 Arista 7368X4 是硬件平台，也是我们新数据中\n心网络的核心。在整体网络设计中，它们在功耗、空间效率和降低复杂度方面都带来了显\n著提升，并且构建在易于采购、技术成熟的 \u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e100G\u003c/code\u003e 光模块\u003c/strong\u003e基础上。\n这种新的网络架构解决了我们不断增长的应用和服务需求。\u003c/p\u003e\n\n\u003cp\u003e我们愿意与 OCP 社区和网络生态系统一起合作，因此通过本文分享了我们的网络整体设计，\n并将 Minipack 的完整设计包贡献给了\u003ca href=\"https://www.opencompute.org\"\u003eOCP\u003c/a\u003e。Arista\n也把与我们联合开发过程中形成的技术规范共享给了 OCP 社区。\u003c/p\u003e\n\n\u003cp\u003e展望未来，相信在接下来的几年中，一旦速度更快的 ASIC 和光模块成熟，F16 拓扑的\n灵活性和模块化交换机设计（modular switch design）将使我们更快地用上它们。\n在设计未来的网络平台时，我们将继续沿用这种模块化交换机设计。\u003c/p\u003e\n\n\u003cp\u003e最后，感谢使这种新拓扑和新平台成为可能的各团队和行业合作伙伴。\u003c/p\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/facebook-f4-data-center-fabric-zh/\"\u003e\u003cspan\u003e« [译] 数据中心 Fabric：Facebook 的下一代数据中心网络（2014）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/awk-notes-zh/\"\u003e\u003cspan\u003e[笔记] The AWK Programming Language（ADDISON-WESLEY, 1988） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2020-06-20T00:00:00Z",
  "Author": "Arthur Chiao"
}