{
  "Source": "arthurchiao.art",
  "Title": "k8s 基于 cgroup 的资源限额（capacity enforcement）：模型设计与代码实现（2023）",
  "Link": "https://arthurchiao.art/blog/k8s-cgroup-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003ek8s 基于 cgroup 的资源限额（capacity enforcement）：模型设计与代码实现（2023）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2023-01-25 | Last Update 2024-02-15\u003c/p\u003e\n  \n  \u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/k8s-cgroup/k8s-cgroup-design.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#1-引言\" id=\"markdown-toc-1-引言\"\u003e1 引言\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-k8s-资源模型\" id=\"markdown-toc-2-k8s-资源模型\"\u003e2 k8s 资源模型\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-node-资源抽象\" id=\"markdown-toc-21-node-资源抽象\"\u003e2.1 Node 资源抽象\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#211-capacity\" id=\"markdown-toc-211-capacity\"\u003e2.1.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCapacity\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#212-allocatable\" id=\"markdown-toc-212-allocatable\"\u003e2.1.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAllocatable\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#213-allocated\" id=\"markdown-toc-213-allocated\"\u003e2.1.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAllocated\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-node-资源切分预留\" id=\"markdown-toc-22-node-资源切分预留\"\u003e2.2 Node 资源切分（预留）\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#221-systemreserved\" id=\"markdown-toc-221-systemreserved\"\u003e2.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSystemReserved\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#222-kubereserved\" id=\"markdown-toc-222-kubereserved\"\u003e2.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eKubeReserved\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#223-evictionthreshold驱逐门限\" id=\"markdown-toc-223-evictionthreshold驱逐门限\"\u003e2.2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEvictionThreshold\u003c/code\u003e（驱逐门限）\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#224-allocatable\" id=\"markdown-toc-224-allocatable\"\u003e2.2.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAllocatable\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-kubelet-相关配置参数\" id=\"markdown-toc-23-kubelet-相关配置参数\"\u003e2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubelet\u003c/code\u003e 相关配置参数\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-k8s-cgroup-层次设计\" id=\"markdown-toc-3-k8s-cgroup-层次设计\"\u003e3 k8s cgroup 层次设计\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-cgroup-基础\" id=\"markdown-toc-31-cgroup-基础\"\u003e3.1 cgroup 基础\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-kubelet-cgroup-runtime-driver\" id=\"markdown-toc-32-kubelet-cgroup-runtime-driver\"\u003e3.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubelet\u003c/code\u003e cgroup runtime driver\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-kubelet-cgroup-层级\" id=\"markdown-toc-33-kubelet-cgroup-层级\"\u003e3.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubelet\u003c/code\u003e cgroup 层级\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#311-container-级别-cgroup\" id=\"markdown-toc-311-container-级别-cgroup\"\u003e3.1.1 Container 级别 cgroup\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#312-pod-级别-cgroup\" id=\"markdown-toc-312-pod-级别-cgroup\"\u003e3.1.2 Pod 级别 cgroup\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#313-qos-级别-cgroup\" id=\"markdown-toc-313-qos-级别-cgroup\"\u003e3.1.3 QoS 级别 cgroup\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#314-node-级别-cgroup\" id=\"markdown-toc-314-node-级别-cgroup\"\u003e3.1.4 Node 级别 cgroup\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-cgroup-v1-配置目录\" id=\"markdown-toc-33-cgroup-v1-配置目录\"\u003e3.3 cgroup (v1) 配置目录\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#331-kubelet-cgroup-root\" id=\"markdown-toc-331-kubelet-cgroup-root\"\u003e3.3.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubelet\u003c/code\u003e cgroup root\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#332-kubepodsnode-级别配置\" id=\"markdown-toc-332-kubepodsnode-级别配置\"\u003e3.3.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/kubepods\u003c/code\u003e（node 级别配置）\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#333-qos-级别配置\" id=\"markdown-toc-333-qos-级别配置\"\u003e3.3.3 QoS 级别配置\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#334-pod-级别配置\" id=\"markdown-toc-334-pod-级别配置\"\u003e3.3.4 Pod 级别配置\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#335-container-级别配置\" id=\"markdown-toc-335-container-级别配置\"\u003e3.3.5 Container 级别配置\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-pod-requestslimits-对应到-cgroup-配置文件\" id=\"markdown-toc-4-pod-requestslimits-对应到-cgroup-配置文件\"\u003e4 Pod \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erequests/limits\u003c/code\u003e 对应到 cgroup 配置文件\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-cpu\" id=\"markdown-toc-41-cpu\"\u003e4.1 CPU\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#411-request---sysfscgroupcpukubepodspod-pathcpushares\" id=\"markdown-toc-411-request---sysfscgroupcpukubepodspod-pathcpushares\"\u003e4.1.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erequest -\u0026gt; /sys/fs/cgroup/cpu/kubepods/\u0026lt;pod-path\u0026gt;/cpu.shares\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#412-limit---sysfscgroupcpukubepodspod-pathcpucfs_quota_us\" id=\"markdown-toc-412-limit---sysfscgroupcpukubepodspod-pathcpucfs_quota_us\"\u003e4.1.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elimit -\u0026gt; /sys/fs/cgroup/cpu/kubepods/\u0026lt;pod-path\u0026gt;/cpu.cfs_quota_us\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#413-sysfscgroupcpusetkubepodspod-pathcpusetcpus\" id=\"markdown-toc-413-sysfscgroupcpusetkubepodspod-pathcpusetcpus\"\u003e4.1.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/fs/cgroup/cpuset/kubepods/\u0026lt;pod-path\u0026gt;/cpuset.cpus\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#414-实地查看一台-k8s-node-cgroup-里的-cpu-资源划分\" id=\"markdown-toc-414-实地查看一台-k8s-node-cgroup-里的-cpu-资源划分\"\u003e4.1.4 实地查看一台 k8s node cgroup 里的 cpu 资源划分\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#415-独占-cpu-类型-pod-调度到一个-node-时kubelet-对其他-pod-的-cpusetcpus-的调整过程\" id=\"markdown-toc-415-独占-cpu-类型-pod-调度到一个-node-时kubelet-对其他-pod-的-cpusetcpus-的调整过程\"\u003e4.1.5 独占 CPU 类型 pod 调度到一个 node 时，kubelet 对其他 pod 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpuset.cpus\u003c/code\u003e 的调整过程\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-memory\" id=\"markdown-toc-42-memory\"\u003e4.2 Memory\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#手动调整内存大小\" id=\"markdown-toc-手动调整内存大小\"\u003e手动调整内存大小\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#43-其他\" id=\"markdown-toc-43-其他\"\u003e4.3 其他\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-问题讨论\" id=\"markdown-toc-5-问题讨论\"\u003e5. 问题讨论\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#51-requestslimits-与调度的关系\" id=\"markdown-toc-51-requestslimits-与调度的关系\"\u003e5.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erequests/limits\u003c/code\u003e 与调度的关系\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#511-根据-requests-调度\" id=\"markdown-toc-511-根据-requests-调度\"\u003e5.1.1 根据 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erequests\u003c/code\u003e 调度\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#512-根据-limits-限额enforcement\" id=\"markdown-toc-512-根据-limits-限额enforcement\"\u003e5.1.2 根据 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elimits\u003c/code\u003e 限额（enforcement）\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#52-kubelet-计算-pod-requetslimits-的过程\" id=\"markdown-toc-52-kubelet-计算-pod-requetslimits-的过程\"\u003e5.2 kubelet 计算 pod \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erequets/limits\u003c/code\u003e 的过程\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#53-资源使用量超出-limits-的后果\" id=\"markdown-toc-53-资源使用量超出-limits-的后果\"\u003e5.3 资源使用量超出 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elimits\u003c/code\u003e 的后果\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#54-node-资源紧张时按-qos-分配资源比例\" id=\"markdown-toc-54-node-资源紧张时按-qos-分配资源比例\"\u003e5.4 Node 资源紧张时，按 QoS 分配资源比例\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#6-k8s-cgroup-相关代码实现\" id=\"markdown-toc-6-k8s-cgroup-相关代码实现\"\u003e6 k8s cgroup 相关代码实现\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#61-调用栈和重要结构体\" id=\"markdown-toc-61-调用栈和重要结构体\"\u003e6.1 调用栈和重要结构体\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#611-containermanagerimplstart\" id=\"markdown-toc-611-containermanagerimplstart\"\u003e6.1.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econtainerManagerImpl.Start()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#612-检查几种必须要支持的-cgroup-资源类型\" id=\"markdown-toc-612-检查几种必须要支持的-cgroup-资源类型\"\u003e6.1.2 检查几种必须要支持的 cgroup 资源类型\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#62-kubelet-启动配置\" id=\"markdown-toc-62-kubelet-启动配置\"\u003e6.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubelet\u003c/code\u003e 启动配置\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#63-通过-k8s-metrics-api-查看-requestslimits-信息\" id=\"markdown-toc-63-通过-k8s-metrics-api-查看-requestslimits-信息\"\u003e6.3 通过 k8s metrics API 查看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erequests/limits\u003c/code\u003e 信息\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#64-定期获取-pod-cpuload-信息\" id=\"markdown-toc-64-定期获取-pod-cpuload-信息\"\u003e6.4 定期获取 pod CpuLoad 信息\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#65-通过-container-pid-查看-cgroup-信息\" id=\"markdown-toc-65-通过-container-pid-查看-cgroup-信息\"\u003e6.5 通过 container \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epid\u003c/code\u003e 查看 cgroup 信息\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#参考资料\" id=\"markdown-toc-参考资料\"\u003e参考资料\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"1-引言\"\u003e1 引言\u003c/h1\u003e\n\n\u003cp\u003e对于一个编排系统来说，\u003cstrong\u003e\u003cmark\u003e资源管理\u003c/mark\u003e\u003c/strong\u003e至少需要考虑以下几个方面：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e资源模型的抽象；包括，\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e有哪些种类的资源，例如，CPU、内存等；\u003c/li\u003e\n      \u003cli\u003e如何用数据结构表示这些资源；\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e资源的调度\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e如何描述一个 workload 的资源申请（spec），例如，“该容器需要 4 核和 12GB~16GB 内存”；\u003c/li\u003e\n      \u003cli\u003e如何描述一台 node 当前的资源分配状态，例如已分配/未分配资源量，是否支持超分等；\u003c/li\u003e\n      \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e调度算法\u003c/mark\u003e\u003c/strong\u003e：如何根据 workload spec 为它挑选最合适的 node；\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e资源的限额（capacity enforcement）\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e如何确保 workload 使用的资源量不超出预设范围（从而不会影响其他 workload）；\u003c/li\u003e\n      \u003cli\u003e如何确保 workload 和系统/基础服务的限额，使二者互不影响。\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003ek8s 是目前最流行的容器编排系统，那它是如何解决这些问题的呢？\u003c/p\u003e\n\n\u003ch1 id=\"2-k8s-资源模型\"\u003e2 k8s 资源模型\u003c/h1\u003e\n\n\u003cp\u003e对照上面几个问题，我们来看下 k8s 是怎么设计的：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003e资源模型\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e抽象了 cpu/memory/device/hugepage 等资源类型；\u003c/li\u003e\n      \u003cli\u003e抽象了 node 概念；\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003e资源调度\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e抽象了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erequest\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elimit\u003c/code\u003e 两个概念，分别表示一个容器所需要的最小（request）和最大（limit）资源量；\u003c/li\u003e\n      \u003cli\u003e调度算法根据各 node 当前可供分配的资源量（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAllocatable\u003c/code\u003e），为容器选择合适的 node；\n   注意，k8s 的\u003cstrong\u003e\u003cmark\u003e调度只看 requests，不看 limits\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003e资源 enforcement\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e使用 cgroup 在多个层面确保 workload 使用的最大资源量不超过指定的 limits。\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e一个资源申请（容器）的例子：\u003c/p\u003e\n\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ev1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ePod\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003econtainers\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ebusybox\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eimage\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ebusybox\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eresources\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003elimits\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ecpu\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e500m\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ememory\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e400Mi\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"na\"\u003erequests\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ecpu\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e250m\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ememory\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e300Mi\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"pi\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003emd5sum\u0026#34;\u003c/span\u003e\u003cspan class=\"pi\"\u003e]\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eargs\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"pi\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e/dev/urandom\u0026#34;\u003c/span\u003e\u003cspan class=\"pi\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里面 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erequests\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elimits\u003c/code\u003e 分别表示所需资源的最小和最大值，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eCPU 资源的单位 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003em\u003c/code\u003e 是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emillicores\u003c/code\u003e 的缩写，表示\u003cstrong\u003e\u003cmark\u003e千分之一核\u003c/mark\u003e\u003c/strong\u003e，\n因此 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpu: 500m\u003c/code\u003e 就表示需要 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0.5\u003c/code\u003e 核；\u003c/li\u003e\n  \u003cli\u003e内存的单位很好理解，就是 MB、GB 等常见单位。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"21-node-资源抽象\"\u003e2.1 Node 资源抽象\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ek describe node \u0026lt;node\u0026gt;\n...\nCapacity:\n  cpu:                          64\n  mem-hard-eviction-threshold:  8Gi\n  mem-soft-eviction-threshold:  24Gi\n  memory:                       329341008Ki\n  pods:                         64\nAllocatable:\n  cpu:                          62\n  memory:                       316758096Ki\n  pods:                         64\n\nAllocated resources:\n  \u003cspan class=\"o\"\u003e(\u003c/span\u003eTotal limits may be over 100 percent, i.e., overcommitted.\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  Resource                     Requests                Limits\n  \u003cspan class=\"nt\"\u003e--------\u003c/span\u003e                     \u003cspan class=\"nt\"\u003e--------\u003c/span\u003e                \u003cspan class=\"nt\"\u003e------\u003c/span\u003e\n  cpu                          49438m \u003cspan class=\"o\"\u003e(\u003c/span\u003e79%\u003cspan class=\"o\"\u003e)\u003c/span\u003e            211200m \u003cspan class=\"o\"\u003e(\u003c/span\u003e340%\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c\"\u003e# \u0026lt;-- 如果看 limits，这台 node CPU 资源重度超分\u003c/span\u003e\n  memory                       259387964949600m \u003cspan class=\"o\"\u003e(\u003c/span\u003e79%\u003cspan class=\"o\"\u003e)\u003c/span\u003e  282008Mi \u003cspan class=\"o\"\u003e(\u003c/span\u003e91%\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e分别来看下这几个部分。\u003c/p\u003e\n\n\u003ch3 id=\"211-capacity\"\u003e2.1.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCapacity\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e这台 node 的总资源量（可以简单理解为\u003cstrong\u003e\u003cmark\u003e物理配置\u003c/mark\u003e\u003c/strong\u003e），\n例如上面的输出显示，这台 node 有 48CPU、256GB 内存等等。\u003c/p\u003e\n\n\u003ch3 id=\"212-allocatable\"\u003e2.1.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAllocatable\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003e可供 k8s 分配的总资源量\u003c/mark\u003e\u003c/strong\u003e，\n显然，Allocatable 不会超过 Capacity，例如上面看到 CPU 就少了 2 个，只剩下 46 个。\u003c/p\u003e\n\n\u003ch3 id=\"213-allocated\"\u003e2.1.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAllocated\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e这台 node 目前已经分配出去的资源量，注意其中的\nmessage 也说了，node \u003cstrong\u003e\u003cmark\u003e可能会超分\u003c/mark\u003e\u003c/strong\u003e，所以加起来可能会超过 Allocatable，但不会超过 Capacity。\u003c/p\u003e\n\n\u003cp\u003e以上面那台 node 为例，可以看到 CPU \u003cstrong\u003e\u003cmark\u003elimits 已经是可用物理 CPU 数量的 3 倍多了\u003c/mark\u003e\u003c/strong\u003e，\n这是因为上面很多 pod 重度超分，比如下面这个：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ek describe pod xxx\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nn\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eresources\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003erequests\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ecpu\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e1\u0026#34;\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ememory\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e16Gi\u003c/span\u003e\n      \u003cspan class=\"na\"\u003elimits\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ecpu\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e16\u0026#34;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# \u0026lt;-- CPU 超分 16 倍！\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ememory\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e16Gi\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# \u0026lt;-- Mem 没超分\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAllocatable 不超过 Capacity，这个概念上也是很好理解的；\n但\u003cstrong\u003e\u003cmark\u003e具体是哪些资源被划出去\u003c/mark\u003e\u003c/strong\u003e，导致 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAllocatable \u0026lt; Capacity\u003c/code\u003e 呢？\u003c/p\u003e\n\n\u003ch2 id=\"22-node-资源切分预留\"\u003e2.2 Node 资源切分（预留）\u003c/h2\u003e\n\n\u003cp\u003e由于每台 node 上会运行 kubelet/docker/containerd 等 k8s 相关基础服务，\n以及 systemd/journald 等操作系统本身的进程，因此并不是一台 node 的所有资源都能给 k8s 创建 pod 用。\n所以，k8s 在资源管理和调度时，需要把这些基础服务的资源使用量和 enforcement 单独拎出来。\u003c/p\u003e\n\n\u003cp\u003e为此，k8s 提出了 \u003ca href=\"https://github.com/kubernetes/design-proposals-archive/blob/main/node/node-allocatable.md\"\u003eNode Allocatable Resources\u003c/a\u003e\n提案，上面的 Capacity、Allocatable 等术语正是从这里来的。几点说明：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e如果 Allocatable 可用，调度器会用 Allocatable，否则会用 Capacity；\u003c/li\u003e\n  \u003cli\u003e用 Allocatable 是不超分，用 Capacity 是超分（overcommit）；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e计算公式：\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e[Allocatable] = [NodeCapacity] - [KubeReserved] - [SystemReserved] - [HardEvictionThreshold]\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e分别来看下这几种类型。\u003c/p\u003e\n\n\u003ch3 id=\"221-systemreserved\"\u003e2.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSystemReserved\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e操作系统的基础服务，例如 systemd、journald 等，\u003cstrong\u003e\u003cmark\u003e在 k8s 管理之外\u003c/mark\u003e\u003c/strong\u003e。\nk8s 不能管理这些资源的分配，但是能管理这些资源的限额（enforcement），后面会看到。\u003c/p\u003e\n\n\u003ch3 id=\"222-kubereserved\"\u003e2.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eKubeReserved\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003ek8s 基础设施服务，包括 kubelet/docker/containerd 等等。\n跟上面系统服务类似，k8s 不能管理这些资源的分配，但是能管理这些资源的限额（enforcement），后面会看到。\u003c/p\u003e\n\n\u003ch3 id=\"223-evictionthreshold驱逐门限\"\u003e2.2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEvictionThreshold\u003c/code\u003e（驱逐门限）\u003c/h3\u003e\n\n\u003cp\u003e当 node memory/disk 等资源即将耗尽时，kubelet 就开始按照\n\u003cstrong\u003e\u003cmark\u003eQoS 优先级（\u003ccode\u003ebesteffort/burstable/guaranteed\u003c/code\u003e）驱逐 pod\u003c/mark\u003e\u003c/strong\u003e，\neviction 资源就是为这个目的预留的。\n\u003ca href=\"https://github.com/kubernetes/design-proposals-archive/blob/main/node/kubelet-eviction.md#enforce-node-allocatable\"\u003e更多信息\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"224-allocatable\"\u003e2.2.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAllocatable\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e可供 k8s 创建 pod 使用的资源。\u003c/p\u003e\n\n\u003cp\u003e以上就是 k8s 的基本资源模型。下面再看几个相关的配置参数。\u003c/p\u003e\n\n\u003ch2 id=\"23-kubelet-相关配置参数\"\u003e2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubelet\u003c/code\u003e 相关配置参数\u003c/h2\u003e\n\n\u003cp\u003e资源预留（切分）相关的 kubelet 命令参数：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--system-reserved=\u0026#34;\u0026#34;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--kube-reserved=\u0026#34;\u0026#34;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--qos-reserved=\u0026#34;\u0026#34;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--reserved-cpus=\u0026#34;\u0026#34;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e也可以通过 kubelet 配置文件，例如，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /etc/kubernetes/kubelet/config\n...\nsystemReserved:\n  cpu: \u003cspan class=\"s2\"\u003e\u0026#34;2\u0026#34;\u003c/span\u003e      \u003cspan class=\"c\"\u003e# 这就是为什么上面 describe node 输出中， Allocatable 比 Capacity 少 2 个 CPU 的原因，\u003c/span\u003e\n  memory: \u003cspan class=\"s2\"\u003e\u0026#34;4Gi\u0026#34;\u003c/span\u003e \u003cspan class=\"c\"\u003e# 以及少 4GB 内存\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e是否需要对这些 reserved 资源用专门的 cgroup 来做资源限额，以确保彼此互不影响：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--kube-reserved-cgroup=\u0026#34;\u0026#34;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--system-reserved-cgroup=\u0026#34;\u0026#34;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e默认都是不启用。实际上也很难做到完全隔离。导致的后果就是系统进程和 pod 进程有可能相互影响，\n例如，截至 v1.26，k8s 还不支持 IO 隔离，所以宿主机进程（例如 logrotate）IO 飙高，\n或者某个 pod 进程执行 java dump 时，会影响这台 node 上所有 pod。\u003c/p\u003e\n\n\u003cp\u003e关于 k8s 资源模型就先介绍到这里，接下来进入本文重点，k8s 是如何用 cgroup 来限制\ncontainer、pod、基础服务等 workload 的资源使用量的（enforcement）。\u003c/p\u003e\n\n\u003ch1 id=\"3-k8s-cgroup-层次设计\"\u003e3 k8s cgroup 层次设计\u003c/h1\u003e\n\n\u003ch2 id=\"31-cgroup-基础\"\u003e3.1 cgroup 基础\u003c/h2\u003e\n\n\u003cp\u003ecgroup 是 Linux 内核基础设施，可以\u003cstrong\u003e\u003cmark\u003e限制、记录和隔离进程组\u003c/mark\u003e\u003c/strong\u003e（process groups）\n\u003cstrong\u003e\u003cmark\u003e使用的资源量\u003c/mark\u003e\u003c/strong\u003e（CPU、内存、IO 等）。\u003c/p\u003e\n\n\u003cp\u003ecgroup 有两个版本，v1 和 v2，二者的区别可参考\n\u003ca href=\"/blog/cgroupv2-zh/\"\u003eControl Group v2 (cgroupv2 权威指南)（KernelDoc, 2021）\u003c/a\u003e。\n目前 k8s 默认使用的是 cgroup v1，因此本文以 v1 为主。\u003c/p\u003e\n\n\u003cp\u003ecgroup v1 能管理很多种类的资源，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emount | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003ecgroup\ntmpfs on /sys/fs/cgroup \u003cspan class=\"nb\"\u003etype \u003c/span\u003etmpfs \u003cspan class=\"o\"\u003e(\u003c/span\u003ero,nosuid,nodev,noexec,mode\u003cspan class=\"o\"\u003e=\u003c/span\u003e755\u003cspan class=\"o\"\u003e)\u003c/span\u003e\ncgroup on /sys/fs/cgroup/systemd \u003cspan class=\"nb\"\u003etype \u003c/span\u003ecgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,nosuid,nodev,noexec,relatime,xattr,release_agent\u003cspan class=\"o\"\u003e=\u003c/span\u003e/usr/lib/systemd/systemd-cgroups-agent,name\u003cspan class=\"o\"\u003e=\u003c/span\u003esystemd\u003cspan class=\"o\"\u003e)\u003c/span\u003e\ncgroup on /sys/fs/cgroup/perf_event \u003cspan class=\"nb\"\u003etype \u003c/span\u003ecgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,nosuid,nodev,noexec,relatime,perf_event\u003cspan class=\"o\"\u003e)\u003c/span\u003e\ncgroup on /sys/fs/cgroup/cpuset \u003cspan class=\"nb\"\u003etype \u003c/span\u003ecgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,nosuid,nodev,noexec,relatime,cpuset\u003cspan class=\"o\"\u003e)\u003c/span\u003e\ncgroup on /sys/fs/cgroup/freezer \u003cspan class=\"nb\"\u003etype \u003c/span\u003ecgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,nosuid,nodev,noexec,relatime,freezer\u003cspan class=\"o\"\u003e)\u003c/span\u003e\ncgroup on /sys/fs/cgroup/pids \u003cspan class=\"nb\"\u003etype \u003c/span\u003ecgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,nosuid,nodev,noexec,relatime,pids\u003cspan class=\"o\"\u003e)\u003c/span\u003e\ncgroup on /sys/fs/cgroup/hugetlb \u003cspan class=\"nb\"\u003etype \u003c/span\u003ecgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,nosuid,nodev,noexec,relatime,hugetlb\u003cspan class=\"o\"\u003e)\u003c/span\u003e\ncgroup on /sys/fs/cgroup/devices \u003cspan class=\"nb\"\u003etype \u003c/span\u003ecgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,nosuid,nodev,noexec,relatime,devices\u003cspan class=\"o\"\u003e)\u003c/span\u003e\ncgroup on /sys/fs/cgroup/blkio \u003cspan class=\"nb\"\u003etype \u003c/span\u003ecgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,nosuid,nodev,noexec,relatime,blkio\u003cspan class=\"o\"\u003e)\u003c/span\u003e\ncgroup on /sys/fs/cgroup/memory \u003cspan class=\"nb\"\u003etype \u003c/span\u003ecgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,nosuid,nodev,noexec,relatime,memory\u003cspan class=\"o\"\u003e)\u003c/span\u003e\ncgroup on /sys/fs/cgroup/cpu,cpuacct \u003cspan class=\"nb\"\u003etype \u003c/span\u003ecgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,nosuid,nodev,noexec,relatime,cpu,cpuacct\u003cspan class=\"o\"\u003e)\u003c/span\u003e\ncgroup on /sys/fs/cgroup/net_cls \u003cspan class=\"nb\"\u003etype \u003c/span\u003ecgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,nosuid,nodev,noexec,relatime,net_cls\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ek8s/kubelet 中只用到了 cpu/memory/pid/hugetlb 等几种类型。\u003c/p\u003e\n\n\u003ch2 id=\"32-kubelet-cgroup-runtime-driver\"\u003e3.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubelet\u003c/code\u003e cgroup runtime driver\u003c/h2\u003e\n\n\u003cp\u003ek8s 通过配置 cgroup 来限制 container/pod 能使用的最大资源量。这个配置有\u003cstrong\u003e\u003cmark\u003e两种实现方式\u003c/mark\u003e\u003c/strong\u003e，\n在 k8s 中称为 cgroup runtime driver：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ecgroupfs\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/p\u003e\n\n    \u003cp\u003e这种比较简单直接，kubelet \u003cstrong\u003e\u003cmark\u003e往 cgroup 文件系统中写 limit\u003c/mark\u003e\u003c/strong\u003e 就行了。\n 这也是目前 k8s 的默认方式。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003esystemd\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/p\u003e\n\n    \u003cp\u003e所有 cgroup-writing 操作都必须\u003cstrong\u003e\u003cmark\u003e通过 systemd 的接口\u003c/mark\u003e\u003c/strong\u003e，不能手动修改 cgroup 文件。\n 适用于 k8s cgroup v2 模式。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"33-kubelet-cgroup-层级\"\u003e3.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubelet\u003c/code\u003e cgroup 层级\u003c/h2\u003e\n\n\u003cp\u003e如下图所示，\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/k8s-cgroup/k8s-cgroup-design.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. cgroup in k8s\u003c/p\u003e\n\n\u003cp\u003ekubelet 会在 node 上创建了 4 个 cgroup 层级，从 node 的 \u003cstrong\u003e\u003cmark\u003eroot cgroup\u003c/mark\u003e\u003c/strong\u003e\n（一般都是 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/sys/fs/cgroup\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e）往下：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eNode 级别\u003c/mark\u003e\u003c/strong\u003e：针对 SystemReserved、KubeReserved 和 k8s pods 分别创建的三个 cgroup；\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eQoS 级别\u003c/mark\u003e\u003c/strong\u003e：在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubepods\u003c/code\u003e cgroup 里面，又针对三种 pod QoS 分别创建一个 sub-cgroup：\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003ePod 级别\u003c/mark\u003e\u003c/strong\u003e：每个 pod 创建一个 cgroup，用来限制这个 pod 使用的总资源量；\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eContainer 级别\u003c/mark\u003e\u003c/strong\u003e：在 pod cgroup 内部，限制单个 container 的资源使用量。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e为了使理解方便，接下来我们从最底层往最上层讲起。\u003c/p\u003e\n\n\u003ch3 id=\"311-container-级别-cgroup\"\u003e3.1.1 Container 级别 cgroup\u003c/h3\u003e\n\n\u003cp\u003e前面已经看到过，在创建 pod 使，\u003cstrong\u003e\u003cmark\u003e可以直接在 container 级别设置 requests/limits\u003c/mark\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ev1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ePod\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003econtainers\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ebusybox\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eimage\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ebusybox\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eresources\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003elimits\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ecpu\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e500m\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ememory\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e400Mi\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"na\"\u003erequests\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ecpu\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e250m\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ememory\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e300Mi\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"pi\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003emd5sum\u0026#34;\u003c/span\u003e\u003cspan class=\"pi\"\u003e]\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eargs\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"pi\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e/dev/urandom\u0026#34;\u003c/span\u003e\u003cspan class=\"pi\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ekubelet 在这里做的事情很简单：创建 container 时，将 spec 中指定 requests/limits\n\u003cstrong\u003e\u003cmark\u003e传给 docker/containerd 等 container runtime\u003c/mark\u003e\u003c/strong\u003e。换句话说，底层能力都是\ncontainer runtime 提供的，k8s 只是通过接口把 requests/limits 传给了底层。\u003c/p\u003e\n\n\u003cp\u003e具体实现见 \u003ca href=\"https://github.com/kubernetes/kubernetes/blob/v1.26.0/pkg/kubelet/kuberuntime/kuberuntime_container.go#L297\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egenerateContainerConfig()\u003c/code\u003e\u003c/a\u003e：\n生成一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eContainerConfig\u003c/code\u003e，然后通过 CRI 传给 container runtime。\u003c/p\u003e\n\n\u003ch3 id=\"312-pod-级别-cgroup\"\u003e3.1.2 Pod 级别 cgroup\u003c/h3\u003e\n\n\u003cp\u003e顾名思义，这种级别的 cgroup 是针对单个 pod 设置资源限额的。\n这里有一个很明显但又很容易被忽视的问题：k8s requets/limits 模型的\n\u003cstrong\u003e\u003cmark\u003erequests/limits 是声明在 container 上，而不是 pod 上\u003c/mark\u003e\u003c/strong\u003e。\n一个 pod 经常有多个容器，那 pod 的 requests/limits 就是对它的 containers 简单累加得到吗？\u003c/p\u003e\n\n\u003cp\u003e并不是。这是因为，\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e某些资源是这个 pod 的所有 container 共享的；\u003c/li\u003e\n  \u003cli\u003e每个 pod 也有自己的一些开销，例如 sandbox container；\u003c/li\u003e\n  \u003cli\u003ePod 级别还有一些内存等额外开销；\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e因此，为了防止一个 pod 的多个容器使用资源超标，k8s 引入了 pod-level cgroup，每个 pod 都有自己的 cgroup。\n后面会介绍如何根据 containers requests/limits 计算一个 pod 的 requests/limits。\u003c/p\u003e\n\n\u003ch3 id=\"313-qos-级别-cgroup\"\u003e3.1.3 QoS 级别 cgroup\u003c/h3\u003e\n\n\u003cp\u003e实际的业务场景需要我们能\u003cstrong\u003e\u003cmark\u003e根据优先级高低区分几种 pod\u003c/mark\u003e\u003c/strong\u003e。例如，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e高优先级 pod：无论何时，都应该首先保证这种 pod 的资源使用量；\u003c/li\u003e\n  \u003cli\u003e低优先级 pod：资源充足时允许运行，资源紧张时优先把这种 pod 赶走，释放出的资源分给中高优先级 pod；\u003c/li\u003e\n  \u003cli\u003e中优先级 pod：介于高低优先级之间，看实际的业务场景和需求。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ek8s 针对这种需求提供了 cgroups-per-qos 选项：\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// pkg/kubelet/apis/config/types.go\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// Enable QoS based Cgroup hierarchy: top level cgroups for QoS Classes\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// And all Burstable and BestEffort pods are brought up under their specific top level QoS cgroup.\u003c/span\u003e\n\u003cspan class=\"n\"\u003eCgroupsPerQOS\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果设置了 kubelet \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e--cgroups-per-qos=true\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 参数（默认为 true），\n就会将所有 pod 分成三种 QoS，优先级从高到低：\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eGuaranteed \u0026gt; Burstable \u0026gt; BestEffort\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e。\n三种 QoS 是根据 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erequests/limits\u003c/code\u003e 的大小关系来定义的：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eGuaranteed: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003erequests == limits, requests != 0\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，\n  即 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e正常需求 == 最大需求\u003c/code\u003e，换言之 spec 要求的资源量必须得到保证，少一点都不行；\u003c/li\u003e\n  \u003cli\u003eBurstable: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003erequests \u0026lt; limits, requests != 0\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，\n  即 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e正常需求 \u0026lt; 最大需求\u003c/code\u003e，资源使用量可以有一定弹性空间；\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eBestEffort: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003erequest == limits == 0\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，\n创建 pod 时\u003cstrong\u003e\u003cmark\u003e不指定 requests/limits\u003c/mark\u003e\u003c/strong\u003e 就等同于设置为 0，kubelet\n对这种 pod 将尽力而为；有好处也有坏处：\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e好处：node 的资源充足时，这种 pod 能使用的资源量没有限制；\u003c/li\u003e\n      \u003cli\u003e坏处：这种 pod 的 QoS 优先级最低，当 \u003cstrong\u003e\u003cmark\u003enode 资源不足时，最先被驱逐\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e每个 QoS 对应一个子 cgroup，设置\u003cstrong\u003e\u003cmark\u003e该 QoS 类型的所有 pods 的总资源限额\u003c/mark\u003e\u003c/strong\u003e，\n三个 cgroup 共同构成了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubepods\u003c/code\u003e cgroup。\n每个 QoS cgroup 可以认为是一个资源池，每个池子内的 pod 共享资源。\u003c/p\u003e\n\n\u003ch3 id=\"314-node-级别-cgroup\"\u003e3.1.4 Node 级别 cgroup\u003c/h3\u003e\n\n\u003cp\u003e所有的 k8s pod 都会落入 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubepods\u003c/code\u003e cgroup；\n因此所有 k8s pods 占用的资源都已经能够通过 cgroup 来控制，剩下的就是那些\nk8s 组件自身和操作系统基础服务所占用的资源了，即 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eKubeReserved\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSystemReserved\u003c/code\u003e。\nk8s 无法管理这两种服务的资源分配，但能管理它们的限额：有足够权限给它们创建并设置 cgroup 就行了。\n但是否会这样做需要看 kubelet 配置，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--kube-reserved-cgroup=\u0026#34;\u0026#34;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--system-reserved-cgroup=\u0026#34;\u0026#34;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003e默认为空，表示不创建\u003c/mark\u003e\u003c/strong\u003e，也就是系统组件和 pod 之间并没有严格隔离。\n但概念上二者始终是存在的，因此前面几节介绍的内容构成了 k8s cgroup 的四个层级：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/k8s-cgroup/k8s-cgroup-design.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. cgroup in k8s\u003c/p\u003e\n\n\u003ch2 id=\"33-cgroup-v1-配置目录\"\u003e3.3 cgroup (v1) 配置目录\u003c/h2\u003e\n\n\u003cp\u003e接下来看不同 cgroup 分别对应到 node 上哪些目录。\u003c/p\u003e\n\n\u003ch3 id=\"331-kubelet-cgroup-root\"\u003e3.3.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubelet\u003c/code\u003e cgroup root\u003c/h3\u003e\n\n\u003cp\u003ek8s 的 cgroup 路径都是相对于它的 \u003cstrong\u003e\u003cmark\u003ecgroup root\u003c/mark\u003e\u003c/strong\u003e 而言的。\ncgroup root 是个 kubelet 配置项，默认为空，表示使用底层 container runtime 的\ncgroup root，一般是 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/sys/fs/cgroup/\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"332-kubepodsnode-级别配置\"\u003e3.3.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/kubepods\u003c/code\u003e（node 级别配置）\u003c/h3\u003e\n\n\u003cp\u003ecgroup v1 是按 resource controller 类型来组织目录的，\n因此，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/kubepods\u003c/code\u003e 会按 resource controller 对应到\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/sys/fs/cgroup/{resource controller}/kubepods/\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，例如：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/fs/cgroup/cpu/kubepods/\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/fs/cgroup/memory/kubepods/\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e前面已经介绍了每台 k8s node 的资源切分，\n其中 \u003cstrong\u003e\u003cmark\u003eAllocatable \u003c/mark\u003e\u003c/strong\u003e 资源量就是写到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubepods\u003c/code\u003e 对应 cgroup 文件中，\n例如 allocatable cpu 写到 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/sys/fs/cgroup/kubepods/cpu.shares\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e。\n这一工作是在 kubelet containerManager \u003ca href=\"https://github.com/kubernetes/kubernetes/blob/v1.26.0/pkg/kubelet/cm/container_manager_linux.go#L564\"\u003eStart()\u003c/a\u003e 中完成的。\u003c/p\u003e\n\n\u003ch3 id=\"333-qos-级别配置\"\u003e3.3.3 QoS 级别配置\u003c/h3\u003e\n\n\u003cp\u003eQoS cgroup 是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/kubepods\u003c/code\u003e 的 sub-cgroup，因此路径是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/kubepods/{qos}/\u003c/code\u003e，具体来说，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eBurstable： 默认 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/sys/fs/cgroup/{controller}/kubepods/burstable/\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n  \u003cli\u003eBestEffort： 默认 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/sys/fs/cgroup/{controller}/kubepods/besteffort/\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n  \u003cli\u003eGuaranteed：这个比较特殊，直接就是 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/sys/fs/cgroup/{controller}/kubepods/\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，\n没有单独的子目录。这是因为这种类型的 pod 都设置了 limits，\n就无需再引入一层 wrapper 来防止这种类型的 pods 的资源使用总量超出限额。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"334-pod-级别配置\"\u003e3.3.4 Pod 级别配置\u003c/h3\u003e\n\n\u003cp\u003ePod 配置在 QoS cgroup 配置的下一级，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eGuaranteed Pod：默认 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/sys/fs/cgroup/{controller}/kubepods/{pod_id}/\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n  \u003cli\u003eBurstable Pod：默认 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/sys/fs/cgroup/{controller}/kubepods/burstable/{pod_id}/\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n  \u003cli\u003eBestEffort Pod：默认 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/sys/fs/cgroup/{controller}/kubepods/besteffort/{pod_id}/\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"335-container-级别配置\"\u003e3.3.5 Container 级别配置\u003c/h3\u003e\n\n\u003cp\u003eContainer 级别配置文件在 pod 的下一级：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eGuaranteed container：默认 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/sys/fs/cgroup/{controller}/kubepods/{pod_id}/{container_id}/\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n  \u003cli\u003eBurstable container：默认 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/sys/fs/cgroup/{controller}/kubepods/burstable/{pod_id}/{container_id}/\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n  \u003cli\u003eBestEffort container：默认 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/sys/fs/cgroup/{controller}/kubepods/besteffort/{pod_id}/{container_id}/\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"4-pod-requestslimits-对应到-cgroup-配置文件\"\u003e4 Pod \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erequests/limits\u003c/code\u003e 对应到 cgroup 配置文件\u003c/h1\u003e\n\n\u003ch2 id=\"41-cpu\"\u003e4.1 CPU\u003c/h2\u003e\n\n\u003cp\u003eSpec 里的 CPU requests/limits 一般都是以 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e500m\u003c/code\u003e 这样的格式表示的，其中 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003em\u003c/code\u003e 是千分之一个 CPU，\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubelet\u003c/code\u003e 会将它们转换成 cgroup 支持的单位，然后写入几个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpu.\u003c/code\u003e 开头的配置文件。\u003c/p\u003e\n\n\u003ch3 id=\"411-request---sysfscgroupcpukubepodspod-pathcpushares\"\u003e4.1.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erequest -\u0026gt; /sys/fs/cgroup/cpu/kubepods/\u0026lt;pod-path\u0026gt;/cpu.shares\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e根据是 request 与 limit 的关系，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;pod-path\u0026gt;\u003c/code\u003e 可能是：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eburstable/\u0026lt;podid\u0026gt;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebesteffort/\u0026lt;podid\u0026gt;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;podid\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003erequests 经过转换之后会写入 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ecpu.shares\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，\n表示这个 cgroup \u003cstrong\u003e\u003cmark\u003e最少可以使用的 CPU 份额\u003c/mark\u003e\u003c/strong\u003e（这个配置只有相对意义，不是绝对 CPU 时间，下面会解释）。\u003c/p\u003e\n\n\u003ch3 id=\"412-limit---sysfscgroupcpukubepodspod-pathcpucfs_quota_us\"\u003e4.1.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elimit -\u0026gt; /sys/fs/cgroup/cpu/kubepods/\u0026lt;pod-path\u0026gt;/cpu.cfs_quota_us\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e根据是 request 与 limit 的关系，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;pod-path\u0026gt;\u003c/code\u003e 可能是：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eburstable/\u0026lt;podid\u0026gt;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebesteffort/\u0026lt;podid\u0026gt;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;podid\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003elimits 经过转换之后会写入 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ecpu.cfs_quota_us\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，\n表示这个 cgroup \u003cstrong\u003e\u003cmark\u003e最多可以使用的 CPU 时间\u003c/mark\u003e\u003c/strong\u003e，这个是绝对 CPU 时间。\u003c/p\u003e\n\n\u003cp\u003e更多信息：\u003ca href=\"/blog/linux-cfs-design-and-implementation-zh/\"\u003e\u003cmark\u003eLinux CFS 调度器：原理、设计与内核实现（2023）\u003c/mark\u003e\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"413-sysfscgroupcpusetkubepodspod-pathcpusetcpus\"\u003e4.1.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/fs/cgroup/cpuset/kubepods/\u0026lt;pod-path\u0026gt;/cpuset.cpus\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e根据是 request 与 limit 的关系，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;pod-path\u0026gt;\u003c/code\u003e 可能是：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eburstable/\u0026lt;podid\u0026gt;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebesteffort/\u0026lt;podid\u0026gt;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;podid\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e如果 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003erequest=limit=integer\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 并且 kubelet 的 cpu management policy\n是 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003estatic\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e（默认），那这种 pod 就是不超分的，会\u003cstrong\u003e\u003cmark\u003e独占 CPU\u003c/mark\u003e\u003c/strong\u003e，\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpuset.cpus\u003c/code\u003e 里面填的就是独占的 CPU ID 列表；除此之外的都是共享 CPU pod，它们的\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpuset.cpus\u003c/code\u003e 里面填的就是 node 除了独占 CPU ID 以外还剩下的那些 CPU ID，后面会看个例子。\u003c/p\u003e\n\n\u003ch3 id=\"414-实地查看一台-k8s-node-cgroup-里的-cpu-资源划分\"\u003e4.1.4 实地查看一台 k8s node cgroup 里的 cpu 资源划分\u003c/h3\u003e\n\n\u003cp\u003e查看一台 k8s node 上的 cpu shares 分配：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node:/sys/fs/cgroup/cpu  \u003cspan class=\"c\"\u003e# find . -mindepth 1 -maxdepth 1 -type d -exec sh -c \u0026#39;echo -n \u0026#34;Child: {} \u0026#34;; cat {}/cpu.shares\u0026#39; \\;\u003c/span\u003e\nChild: ./kubepods     30720\nChild: ./docker       1024\nChild: ./user.slice   1024\nChild: ./system.slice 1024\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这表示把这台 node 的所有 CPU 按比例分配给以上\u003cstrong\u003e\u003cmark\u003e四个 cgroup\u003c/mark\u003e\u003c/strong\u003e，比如 k8s pods 能使用的总 CPU 资源就是\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cmark\u003e\u003ccode\u003e30720/(30720+1024+1024+1024) = 91%\u003c/code\u003e\u003c/mark\u003e\u003c/p\u003e\n\n\u003cp\u003e如果这台 node 有 48 个 CPU，那这台 node 上所有 pod 总共能用到的 CPU 数量就是 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e48 * 91% = 43.7\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e。\n接下来再看看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubepods\u003c/code\u003e 内部是怎么进一步分配这些 CPU 的：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node:/sys/fs/cgroup/cpu/kubepods  \u003cspan class=\"c\"\u003e# find . -mindepth 1 -maxdepth 1 -type d -exec sh -c \u0026#39;echo -n \u0026#34;Child: {} \u0026#34;; cat {}/cpu.shares\u0026#39; \\;\u003c/span\u003e\nChild: ./podd16358c5 4096 \u003cspan class=\"c\"\u003e# \u0026lt;-- 默认 slice 是 1024，因此 4096 对应 4 CPU，下面会确认\u003c/span\u003e\nChild: ./pod86bc00f3 1024\nChild: ./pod9acf6c1d 1024\nChild: ./podd25c49c2 204\nChild: ./podb478eb6f 512\nChild: ./podb7c056bb 102\nChild: ./poda046f9fb 2048\n...\nChild: ./burstable   11361\nChild: ./besteffort  2      \u003cspan class=\"c\"\u003e# \u0026lt;-- K8s 中的最小值，后面会解释\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里分成了三类。\u003c/p\u003e\n\n\u003cp\u003e第一类：\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/sys/fs/cgroup/cpu/kubepods/pod{pod_id}\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，\n这些都是 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ecpu requests == cpu limits == integer\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 的 pod，\n前面已经介绍过，符合这个条件的 pod 都是不超分的，kubelet 会给他们分配\u003cstrong\u003e\u003cmark\u003e独占的 CPU\u003c/mark\u003e\u003c/strong\u003e。\n挑一个看：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edk ps | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003ed16358c5 \u003cspan class=\"c\"\u003e# 根据 podid 找到 container id\u003c/span\u003e\na6caca34f84c   77754acfcf51    \u003cspan class=\"s2\"\u003e\u0026#34;/entrypoint.sh …\u0026#34;\u003c/span\u003e   Up 25 minutes  k8s_xxx-75757dc8f4-qjpr2_kube-system_d16358c5\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edk inspect a6caca34f84c | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003ePid \u003cspan class=\"c\"\u003e# 找到 container PID\u003c/span\u003e\n            \u003cspan class=\"s2\"\u003e\u0026#34;Pid\u0026#34;\u003c/span\u003e: 343823,\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/343823/status | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003eCpus \u003cspan class=\"c\"\u003e# 查看允许运行的 CPU 列表\u003c/span\u003e\nCpus_allowed:   00300030\nCpus_allowed_list:      4-5,20-21 \u003cspan class=\"c\"\u003e# 固定在四个 CPU 上\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e去 k8s 里确认下：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ek get pod xxx \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e yaml\n...\n        resources:\n          limits:\n            cpu: \u003cspan class=\"s2\"\u003e\u0026#34;4\u0026#34;\u003c/span\u003e\n          requests:\n            cpu: \u003cspan class=\"s2\"\u003e\u0026#34;4\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e确实是申请了 4 个 CPU。\u003c/p\u003e\n\n\u003cp\u003e第二类 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/burstable\u003c/code\u003e 是超分的 pod，不固定 CPU。\u003c/p\u003e\n\n\u003cp\u003e第三类 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/besteffort\u003c/code\u003e 也不固定 CPU。\u003c/p\u003e\n\n\u003ch3 id=\"415-独占-cpu-类型-pod-调度到一个-node-时kubelet-对其他-pod-的-cpusetcpus-的调整过程\"\u003e4.1.5 独占 CPU 类型 pod 调度到一个 node 时，kubelet 对其他 pod 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpuset.cpus\u003c/code\u003e 的调整过程\u003c/h3\u003e\n\n\u003cp\u003e下面是一段真实 kubelet 日志，但做了一些删减和文字替换，以方便说明问题：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# moment 1\u003c/span\u003e\n21:25:05 cpu_manager.go         \u003cspan class=\"o\"\u003e[\u003c/span\u003ecpumanager] reconcileState: updating container \u003cspan class=\"o\"\u003e(\u003c/span\u003epod: pod-1, container \u003cspan class=\"nb\"\u003eid\u003c/span\u003e: de500b1, cpuset: \u003cspan class=\"s2\"\u003e\u0026#34;0,7-32,39-63\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n...\n\u003cspan class=\"c\"\u003e# moment 2\u003c/span\u003e\n21:25:07 config.go              Receiving a new pod \u003cspan class=\"s2\"\u003e\u0026#34;pod-2(760d39e6)\u0026#34;\u003c/span\u003e\n21:25:07 kubelet.go             SyncLoop \u003cspan class=\"o\"\u003e(\u003c/span\u003eADD, \u003cspan class=\"s2\"\u003e\u0026#34;api\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e: pod-2\n21:25:07 policy_static.go       \u003cspan class=\"o\"\u003e[\u003c/span\u003ecpumanager] static policy: Allocate \u003cspan class=\"o\"\u003e(\u003c/span\u003epod: pod-2, container: app\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n21:25:07 kubelet.go             SyncLoop \u003cspan class=\"o\"\u003e(\u003c/span\u003eRECONCILE, \u003cspan class=\"s2\"\u003e\u0026#34;api\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e: pod-2\n21:25:07 kuberuntime_manager.go Creating PodSandbox \u003cspan class=\"k\"\u003efor \u003c/span\u003epod pod-2\n21:25:08 kuberuntime_manager.go getSandboxIDByPodUID got sandbox IDs \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;6f6da81a\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003efor \u003c/span\u003epod pod-2\n21:25:08 kubelet.go             SyncLoop \u003cspan class=\"o\"\u003e(\u003c/span\u003eUPDATE, \u003cspan class=\"s2\"\u003e\u0026#34;api\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e: pod-2\n21:25:08 manager.go             Added container: \u003cspan class=\"s2\"\u003e\u0026#34;/kubepods/pod760d39e6/6f6da81a\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003ealiases: \u003cspan class=\"o\"\u003e[\u003c/span\u003ek8s_POD_pod-2_760d39e6_0 6f6da81a], namespace: \u003cspan class=\"s2\"\u003e\u0026#34;docker\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n21:25:09 kuberuntime_manager.go Created PodSandbox \u003cspan class=\"s2\"\u003e\u0026#34;6f6da81a\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003efor \u003c/span\u003epod pod-2\n21:25:09 kuberuntime_manager.go getSandboxIDByPodUID got sandbox IDs \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;6f6da81a\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003efor \u003c/span\u003epod pod-2\n21:25:09 kubelet.go             SyncLoop \u003cspan class=\"o\"\u003e(\u003c/span\u003ePLEG\u003cspan class=\"o\"\u003e)\u003c/span\u003e: pod-2, event: \u0026amp;pleg.PodLifecycleEvent\u003cspan class=\"o\"\u003e{\u003c/span\u003eID:\u003cspan class=\"s2\"\u003e\u0026#34;760d39e6\u0026#34;\u003c/span\u003e, Type:\u003cspan class=\"s2\"\u003e\u0026#34;ContainerStarted\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n21:25:15 event.go               \u003cspan class=\"nv\"\u003ekind\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Pod\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003ereason\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Created\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003emessage\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Created container app\u0026#34;\u003c/span\u003e\n21:25:16 kuberuntime_manager.go getSandboxIDByPodUID got sandbox IDs \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;6f6da81a\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003efor \u003c/span\u003epod pod-2\n21:25:16 event.go               \u003cspan class=\"nv\"\u003ekind\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Pod\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003ereason\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Started\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003emessage\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Started container app\u0026#34;\u003c/span\u003e\n21:25:16 manager.go             Added container: \u003cspan class=\"s2\"\u003e\u0026#34;/kubepods/pod760d39e6/348ca2a\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003ealiases: \u003cspan class=\"o\"\u003e[\u003c/span\u003epod-2_760d39e6_0 348ca2a], namespace: \u003cspan class=\"s2\"\u003e\u0026#34;docker\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n21:25:17 kubelet.go             SyncLoop \u003cspan class=\"o\"\u003e(\u003c/span\u003ePLEG\u003cspan class=\"o\"\u003e)\u003c/span\u003e: pod-2, event: \u0026amp;pleg.PodLifecycleEvent\u003cspan class=\"o\"\u003e{\u003c/span\u003eID:\u003cspan class=\"s2\"\u003e\u0026#34;760d39e6\u0026#34;\u003c/span\u003e, Type:\u003cspan class=\"s2\"\u003e\u0026#34;ContainerStarted\u0026#34;\u003c/span\u003e,\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n21:25:17 status_manager.go      Patch status \u003cspan class=\"k\"\u003efor \u003c/span\u003epod pod-2 with ...\n21:25:17 status_manager.go      Status \u003cspan class=\"k\"\u003efor \u003c/span\u003epod pod-2 updated successfully: ...\n21:25:17 kubelet.go             SyncLoop \u003cspan class=\"o\"\u003e(\u003c/span\u003eRECONCILE, \u003cspan class=\"s2\"\u003e\u0026#34;api\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e: pod-2\n21:25:17 kubelet.go             SyncLoop \u003cspan class=\"o\"\u003e(\u003c/span\u003eUPDATE, \u003cspan class=\"s2\"\u003e\u0026#34;api\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e: pod-2\n...\n\u003cspan class=\"c\"\u003e# moment 3\u003c/span\u003e\n21:25:18 cpu_manager.go         \u003cspan class=\"o\"\u003e[\u003c/span\u003ecpumanager] reconcileState: updating container \u003cspan class=\"o\"\u003e(\u003c/span\u003epod: pod-1, container \u003cspan class=\"nb\"\u003eid\u003c/span\u003e: de500b1, cpuset: \u003cspan class=\"s2\"\u003e\u0026#34;0,7,16-32,39,48-63\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n...\n\u003cspan class=\"c\"\u003e# moment 4\u003c/span\u003e\n21:25:18 cpu_manager.go         \u003cspan class=\"o\"\u003e[\u003c/span\u003ecpumanager] reconcileState: updating container \u003cspan class=\"o\"\u003e(\u003c/span\u003epod: pod-2, container \u003cspan class=\"nb\"\u003eid\u003c/span\u003e: 348ca2a, cpuset: \u003cspan class=\"s2\"\u003e\u0026#34;8-15,40-47\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e四个时刻：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003emoment 1：node 上所有不超分的 pod，可以使用 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e0,7-32,39-63\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 这些 CPU，这里只列出了 pod-1 的日志；\u003c/li\u003e\n  \u003cli\u003emoment 2：一个 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003erequest=limit=16 CPU\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 的 pod \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epod-2\u003c/code\u003e 调度到这台 node，然后 kubelet 开始创建这个 pod；\u003c/li\u003e\n  \u003cli\u003emoment 3：kubelet 经过计算之后，决定将\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e8-15,40-47\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 这 16 个 CPU 分给 pod-2，因此，它需\n要将这些 CPU \u003cstrong\u003e\u003cmark\u003e从所有不超分的 pod 的 cpuset.cpus 中排除掉\u003c/mark\u003e\u003c/strong\u003e；\n可以看到，调整完之后，pod-1 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpuset.cpus\u003c/code\u003e 变成了 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e0,7,16-32,39,48-63\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，跟 moment 1 相比，能用的 CPU ID 就少了 16 个；\u003c/li\u003e\n  \u003cli\u003emoment 4：刷完所有超分的 pod 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpuset.cpus\u003c/code\u003e 之后，就可以将这 16 个 CPU 写入 pod-2 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpuset.cpus\u003c/code\u003e 里了，最终实现了 pod-2 独占这 16 个 CPU 的效果。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e需要说明的是，第三步会将所有超分 pod 的可用 CPU 缩到一个更小的范围，可能会导致这些 pod 互相竞争 CPU，\n导致\u003cstrong\u003e\u003cmark\u003e短时或偶发性能问题\u003c/mark\u003e\u003c/strong\u003e。这个有机会再分析，load 相关可参考 [6]。\u003c/p\u003e\n\n\u003ch2 id=\"42-memory\"\u003e4.2 Memory\u003c/h2\u003e\n\n\u003cp\u003e内存的单位在 requests/limits 和在 cgroup 配置文件中都是一样的，所以直接写入 cgroup 内存配置文件。\n对于 cgroup v1，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ememory.memsw.limit_in_bytes\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (memory+swap limit)\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ememory.kmem.limit_in_bytes\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (kernel memory limit)\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ememory.limit_in_bytes\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (limit of memory)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e字段具体解释：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt\"\u003eDocumentation/cgroup-v1/memory.txt\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"手动调整内存大小\"\u003e手动调整内存大小\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003epod\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003efree \u003cspan class=\"nt\"\u003e-h\u003c/span\u003e\n              total        used        free      shared  buff/cache   available\nMem:           1.0G         39M        809M         52M        175M        809M\nSwap:            0B          0B          0B\n\n/sys/fs/cgroup/memory/kubepods/burstable/pod\u0026lt;podid\u0026gt; \u003cspan class=\"c\"\u003e# cat memory.limit_in_bytes\u003c/span\u003e\n1073741824\n/sys/fs/cgroup/memory/kubepods/burstable/pod\u0026lt;podid\u0026gt; \u003cspan class=\"c\"\u003e# cat memory.memsw.limit_in_bytes\u003c/span\u003e\n1073741824\n/sys/fs/cgroup/memory/kubepods/burstable/pod\u0026lt;podid\u0026gt; \u003cspan class=\"c\"\u003e# cat memory.kmem.limit_in_bytes\u003c/span\u003e\n9223372036854771712\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e/sys/fs/cgroup/memory/kubepods/burstable/pod\u0026lt;podid\u0026gt; \u003cspan class=\"c\"\u003e# echo 2147483648 \u0026gt; memory.memsw.limit_in_bytes\u003c/span\u003e\n/sys/fs/cgroup/memory/kubepods/burstable/pod\u0026lt;podid\u0026gt; \u003cspan class=\"c\"\u003e# echo 2147483648 \u0026gt; memory.limit_in_bytes\u003c/span\u003e\n/sys/fs/cgroup/memory/kubepods/burstable/pod\u0026lt;podid\u0026gt;/\u0026lt;ctn\u0026gt; \u003cspan class=\"c\"\u003e# echo 2147483648 \u0026gt; memory.memsw.limit_in_bytes\u003c/span\u003e\n/sys/fs/cgroup/memory/kubepods/burstable/pod\u0026lt;podid\u0026gt;/\u0026lt;ctn\u0026gt; \u003cspan class=\"c\"\u003e# echo 2147483648 \u0026gt; memory.limit_in_bytes\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e(\u003c/span\u003epod\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003efree \u003cspan class=\"nt\"\u003e-h\u003c/span\u003e\n              total        used        free      shared  buff/cache   available\nMem:           2.0G         39M        1.8G         51M        175M        1.8G\nSwap:            0B          0B          0B\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e注意，这里用到 lxcfs，所以 free 看到的大小是对的。如果没有用 lxcfs，这个大小是不变的。\u003c/p\u003e\n\n\u003ch2 id=\"43-其他\"\u003e4.3 其他\u003c/h2\u003e\n\n\u003cp\u003e略。\u003c/p\u003e\n\n\u003ch1 id=\"5-问题讨论\"\u003e5. 问题讨论\u003c/h1\u003e\n\n\u003ch2 id=\"51-requestslimits-与调度的关系\"\u003e5.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erequests/limits\u003c/code\u003e 与调度的关系\u003c/h2\u003e\n\n\u003cp\u003erequests 和 limits 分别和 k8s 里的一个重要概念相关，下面分别讨论一下。\u003c/p\u003e\n\n\u003ch3 id=\"511-根据-requests-调度\"\u003e5.1.1 根据 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erequests\u003c/code\u003e 调度\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003e调度只看 requests\u003c/mark\u003e\u003c/strong\u003e：\n如果一个 node 的 Allocatable 剩余资源大于 pod 的 requests ，就允许这个 pod 调度到这台 node 上。\n\u003cstrong\u003e\u003cmark\u003elimits 是限额（enforcement）用的\u003c/mark\u003e\u003c/strong\u003e，确保资源不会用超，\u003cstrong\u003e\u003cmark\u003e在调度时用不到\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003erequests/limits 都是可选字段，设置与否，会导致这个 pod 进入不同的 QoS 类别；\u003c/li\u003e\n  \u003cli\u003e虽然资源是在 container 级别设置的，但 QoS 是 pod 级别的。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"512-根据-limits-限额enforcement\"\u003e5.1.2 根据 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elimits\u003c/code\u003e 限额（enforcement）\u003c/h3\u003e\n\n\u003cp\u003e资源的隔离目前是用 cgroup 来实现的，它有两个版本，目前 k8s 默认用的 v1，本文内容也以 v1 为主。\u003c/p\u003e\n\n\u003ch2 id=\"52-kubelet-计算-pod-requetslimits-的过程\"\u003e5.2 kubelet 计算 pod \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erequets/limits\u003c/code\u003e 的过程\u003c/h2\u003e\n\n\u003cp\u003e前面已经介绍过，k8s spec 里的 requests/limits 是打在 container 上的，并没有打在 pod 上。\n因此 pod 的 requests/limits 需要由 kubelet 综合统计 pod 的所有 container 的 request/limits 计算得到。\nCPU 和内存的计算方式如下：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# 计算 pod 的 CPU request，通过 cpu.shares 能实现最小值控制\u003c/span\u003e\npod\u0026lt;pod_id\u0026gt;/cpu.shares            \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003esum\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003epod.spec.containers.resources.requests[cpu]\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# 计算 pod 的 CPU limit，通过 cpu.cfs_quota_us 能实现最大值控制\u003c/span\u003e\npod\u0026lt;pod_id\u0026gt;/cpu.cfs_quota_us      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003esum\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003epod.spec.containers.resources.limits[cpu]\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# 计算 pod 的 Memory limit\u003c/span\u003e\npod\u0026lt;pod_id\u0026gt;/memory.limit_in_bytes \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003esum\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003epod.spec.containers.resources.limits[memory]\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e注意，\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e如果其中\u003cstrong\u003e\u003cmark\u003e某个 container 的 cpu 字段只设置了 request 没设置 limit\u003c/mark\u003e\u003c/strong\u003e，\n  则 pod 将只设置 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpu.shares\u003c/code\u003e，不设置 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpu.cfs_quota_us\u003c/code\u003e。\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e如果\u003cstrong\u003e\u003cmark\u003e所有 container 都没有设置 cpu request/limit\u003c/mark\u003e\u003c/strong\u003e（等效于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erequests==limits==0\u003c/code\u003e），\n  则将 pod \u003cstrong\u003e\u003cmark\u003ecpu.shares 将设置为 k8s 定义的最小值 2\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n    \u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e pod\u0026lt;UID\u0026gt;/cpu.shares \u003cspan class=\"o\"\u003e=\u003c/span\u003e MinShares \u003cspan class=\"c\"\u003e# const value 2\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e    \u003c/div\u003e\n\n    \u003cp\u003e这种 pod 在 node 空闲时最多能使用整个 node 的资源；但 node 资源紧张时，也最先被驱逐。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e具体的计算过程：\u003ca href=\"https://github.com/kubernetes/kubernetes/blob/v1.26.0/pkg/kubelet/cm/helpers_linux.go#L119\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eResourceConfigForPod()\u003c/code\u003e\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"53-资源使用量超出-limits-的后果\"\u003e5.3 资源使用量超出 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elimits\u003c/code\u003e 的后果\u003c/h2\u003e\n\n\u003cp\u003eCPU：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eContainer CPU 使用量可能允许超过 limit，也可能不允许；\u003c/li\u003e\n  \u003cli\u003eContainer \u003cstrong\u003e\u003cmark\u003eCPU 使用量超过 limit 之后，并不会被干掉\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eMemory：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e如果 container 的\u003cstrong\u003e\u003cmark\u003e内存使用量超过 request\u003c/mark\u003e\u003c/strong\u003e，那这个 node 内存不足时，\n这个 \u003cstrong\u003e\u003cmark\u003ePod 可能会被驱逐\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n  \u003cli\u003eContainer 的\u003cstrong\u003e\u003cmark\u003e内存使用量超过 limit\u003c/mark\u003e\u003c/strong\u003e 时，可能会被干掉（OOMKilled）。如果可重启，kubelet 会重启它。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"54-node-资源紧张时按-qos-分配资源比例\"\u003e5.4 Node 资源紧张时，按 QoS 分配资源比例\u003c/h2\u003e\n\n\u003cp\u003eKubelet 寻求最大资源效率，因此默认没有设置资源限制，\nBurstable and BestEffort pods 可以使用足够的的空闲资源。\n但只要 Guaranteed pods 需要资源，这些低优先级的 pods 就必须及时释放资源。\n如何释放呢？\u003c/p\u003e\n\n\u003cp\u003e对于 CPU 等 compressible resources，可以通过 CPU CFS shares，针对每个\nQoS 分配一定比例的资源，确保在 CPU 资源受限时，每个 pod 能获得它所申请的 CPU 资源。\u003c/p\u003e\n\n\u003cp\u003e对于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eburstable\u003c/code\u003e cgroup,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e/burstable/cpu.shares            \u003cspan class=\"o\"\u003e=\u003c/span\u003e max\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003esum\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eBurstable pods cpu requests\u003cspan class=\"o\"\u003e)\u003c/span\u003e, MinShares\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c\"\u003e# MinShares == 2\u003c/span\u003e\n\nburstableLimit                  :\u003cspan class=\"o\"\u003e=\u003c/span\u003e allocatable — qosMemoryRequests[PodQOSGuaranteed]\u003cspan class=\"k\"\u003e*\u003c/span\u003epercentReserve/100\n/burstable/memory.limit_in_bytes \u003cspan class=\"o\"\u003e=\u003c/span\u003e burstableLimit\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e对于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebestEffort\u003c/code\u003e cgroup,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e/besteffort/cpu.shares            \u003cspan class=\"o\"\u003e=\u003c/span\u003e MinShares \u003cspan class=\"c\"\u003e# MinShares == 2\u003c/span\u003e\n\nbestEffortLimit                  :\u003cspan class=\"o\"\u003e=\u003c/span\u003e burstableLimit — qosMemoryRequests[PodQOSBurstable]\u003cspan class=\"k\"\u003e*\u003c/span\u003epercentReserve/100\n/besteffort/memory.limit_in_bytes \u003cspan class=\"o\"\u003e=\u003c/span\u003e bestEffortLimit\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这几个 cgroup \u003ca href=\"https://github.com/kubernetes/kubernetes/blob/v1.26.0/pkg/kubelet/cm/qos_container_manager_linux.go#L81\"\u003e初始化之后\u003c/a\u003e,\nkubelet 会调用 \u003ca href=\"https://github.com/kubernetes/kubernetes/blob/v1.26.0/pkg/kubelet/cm/qos_container_manager_linux.go#L305\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eUpdateCgroups()\u003c/code\u003e\u003c/a\u003e\n方法来定期更新这三个 cgroup 的 resource limit。\u003c/p\u003e\n\n\u003ch1 id=\"6-k8s-cgroup-相关代码实现\"\u003e6 k8s cgroup 相关代码实现\u003c/h1\u003e\n\n\u003ch2 id=\"61-调用栈和重要结构体\"\u003e6.1 调用栈和重要结构体\u003c/h2\u003e\n\n\u003cp\u003ekubelet 中所有 cgroup 操作都由内部的\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003econtainerManager\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 模块完成。\u003c/p\u003e\n\n\u003cp\u003e实现主要在 \u003ca href=\"https://github.com/kubernetes/kubernetes/blob/v1.26.0/pkg/kubelet/cm/\"\u003epkg/kubelet/cm\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e启动时的调用栈：\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ecmd-\u0026gt;kubelet-\u0026gt;NewContainerManager\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003econtainerManagerImpl.Start\n  |-cm.cpuManager.Start\n  |-cm.memoryManager.Start\n  |\n  |-cmd.setupNode(activePods)\n  |  |-validateSystemRequirements(cm.mountUtil)\n  |  |  |-expectedCgroups := sets.NewString(\u0026#34;cpu\u0026#34;, \u0026#34;cpuacct\u0026#34;, \u0026#34;cpuset\u0026#34;, \u0026#34;memory\u0026#34;)\n  |  |-cm.createNodeAllocatableCgroups()\n  |  |-cm.qosContainerManager.Start(cm.GetNodeAllocatableAbsolute, activePods)\n  |  |-cm.enforceNodeAllocatableCgroups()\n  |  |-cm.manage system containers (not managed by kubelet) if needed\n  |  |-cm.periodicTasks = append(cm.periodicTasks, func() { // manage kubelet itself if it\u0026#39;s deploed as a container\n  |  |   ensureProcessInContainerWithOOMScore\n  |  |   cont := getContainer(os.Getpid()) // return the cgroup id field in \u0026#34;cat /proc/\u0026lt;pid\u0026gt;/cgroup\u0026#34; output\n  |  |   cm.KubeletCgroupsName = cont      // this container\u0026#39;s cgroup id\n  |  |})\n  |\n  |-cm.deviceManager.Start\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e重要内部结构体 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct containerManagerImpl\u003c/code\u003e，\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// https://github.com/kubernetes/kubernetes/blob/v1.26.0/pkg/kubelet/cm/container_manager_linux.go#L100\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003econtainerManagerImpl\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecadvisorInterface\u003c/span\u003e \u003cspan class=\"n\"\u003ecadvisor\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eInterface\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esystemContainers\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esystemContainer\u003c/span\u003e        \u003cspan class=\"c\"\u003e// External containers being managed.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eperiodicTasks\u003c/span\u003e    \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e                  \u003cspan class=\"c\"\u003e// Tasks that are run periodically\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esubsystems\u003c/span\u003e       \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eCgroupSubsystems\u003c/span\u003e         \u003cspan class=\"c\"\u003e// Holds all the mounted cgroup subsystems\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecgroupManager\u003c/span\u003e     \u003cspan class=\"n\"\u003eCgroupManager\u003c/span\u003e            \u003cspan class=\"c\"\u003e// Interface for cgroup management\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ecapacity\u003c/span\u003e         \u003cspan class=\"n\"\u003ev1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eResourceList\u003c/span\u003e           \u003cspan class=\"c\"\u003e// Capacity of this node.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einternalCapacity\u003c/span\u003e \u003cspan class=\"n\"\u003ev1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eResourceList\u003c/span\u003e           \u003cspan class=\"c\"\u003e// Capacity of this node, including internal resources.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecgroupRoot\u003c/span\u003e       \u003cspan class=\"n\"\u003eCgroupName\u003c/span\u003e                \u003cspan class=\"c\"\u003e// Absolute cgroupfs path, e.g. /sys/fs/cgroup\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eqosContainerManager\u003c/span\u003e \u003cspan class=\"n\"\u003eQOSContainerManager\u003c/span\u003e     \u003cspan class=\"c\"\u003e// Interface for QoS cgroup management\u003c/span\u003e\n    \u003cspan class=\"n\"\u003edeviceManager\u003c/span\u003e       \u003cspan class=\"n\"\u003edevicemanager\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eManager\u003c/span\u003e   \u003cspan class=\"c\"\u003e// Interface for exporting and allocating devices reported by device plugins.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecpuManager\u003c/span\u003e          \u003cspan class=\"n\"\u003ecpumanager\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eManager\u003c/span\u003e      \u003cspan class=\"c\"\u003e// Interface for CPU affinity management.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ememoryManager\u003c/span\u003e       \u003cspan class=\"n\"\u003ememorymanager\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eManager\u003c/span\u003e   \u003cspan class=\"c\"\u003e// Interface for memory affinity management.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etopologyManager\u003c/span\u003e     \u003cspan class=\"n\"\u003etopologymanager\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eManager\u003c/span\u003e \u003cspan class=\"c\"\u003e// Interface for Topology resource co-ordination\u003c/span\u003e\n    \u003cspan class=\"n\"\u003edraManager\u003c/span\u003e          \u003cspan class=\"n\"\u003edra\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eManager\u003c/span\u003e             \u003cspan class=\"c\"\u003e// Interface for Dynamic Resource Allocation management.\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e以上可以看出，k8s \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1.26.0\u003c/code\u003e 实现了对下列资源的支持，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eQoS\u003c/li\u003e\n  \u003cli\u003eDevice\u003c/li\u003e\n  \u003cli\u003eCPU\u003c/li\u003e\n  \u003cli\u003eMemory\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e但是\u003cstrong\u003e\u003cmark\u003e还没有实现对 IO 的支持\u003c/mark\u003e\u003c/strong\u003e，所以我们还无法通过 k8s cgroup v1/v2 来做 IO 的隔离。\u003c/p\u003e\n\n\u003ch3 id=\"611-containermanagerimplstart\"\u003e6.1.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econtainerManagerImpl.Start()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecm\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003econtainerManagerImpl\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eStart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ev1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eactivePods\u003c/span\u003e \u003cspan class=\"n\"\u003eActivePodsFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esourcesReady\u003c/span\u003e \u003cspan class=\"n\"\u003econfig\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSourcesReady\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epodStatusProvider\u003c/span\u003e \u003cspan class=\"n\"\u003estatus\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePodStatusProvider\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eruntimeService\u003c/span\u003e \u003cspan class=\"n\"\u003einternalapi\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRuntimeService\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elocalStorageCapacityIsolation\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"c\"\u003e// Initialize CPU manager\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecpuManager\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecpumanager\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eActivePodsFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eactivePods\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003esourcesReady\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epodStatusProvider\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eruntimeService\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econtainerMap\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"c\"\u003e// Initialize memory manager\u003c/span\u003e\n    \u003cspan class=\"n\"\u003econtainerMap\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003ebuildContainerMapFromRuntime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eruntimeService\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ememoryManager\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ememorymanager\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eActivePodsFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eactivePods\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003esourcesReady\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epodStatusProvider\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eruntimeService\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econtainerMap\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enodeInfo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003elocalStorageCapacityIsolation\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003erootfs\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecadvisorInterface\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRootFsInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003erName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erCap\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"n\"\u003ecadvisor\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEphemeralStorageCapacityFromFsInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erootfs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003erName\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erCap\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalidateNodeAllocatable\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"c\"\u003e// Ensure that node allocatable configuration (system/kube/eviction reserved) is valid.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetupNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eactivePods\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c\"\u003e// Setup the node\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ehasEnsureStateFuncs\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c\"\u003e// Run ensure state functions every minute.\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"n\"\u003ewait\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUntil\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econt\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esystemContainers\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003econt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eensureStateFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emanager\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMinute\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewait\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNeverStop\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"n\"\u003ewait\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUntil\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etask\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eperiodicTasks\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003etask\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMinute\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewait\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNeverStop\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edeviceManager\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edevicemanager\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eActivePodsFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eactivePods\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003esourcesReady\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecm\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003econtainerManagerImpl\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esetupNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eactivePods\u003c/span\u003e \u003cspan class=\"n\"\u003eActivePodsFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003evalidateSystemRequirements\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emountUtil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"c\"\u003e// Setup top level qos containers only if CgroupsPerQOS flag is true\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNodeConfig\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCgroupsPerQOS\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreateNodeAllocatableCgroups\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eqosContainerManager\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetNodeAllocatableAbsolute\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eactivePods\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c\"\u003e// Enforce Node Allocatable (if required)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eenforceNodeAllocatableCgroups\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003esystemContainers\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esystemContainer\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e \u003cspan class=\"c\"\u003e// containers not managed by kubelet\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSystemCgroupsName\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003econt\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003enewSystemCgroups\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSystemCgroupsName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003econt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eensureStateFunc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emanager\u003c/span\u003e \u003cspan class=\"n\"\u003ecgroups\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eManager\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eensureSystemCgroups\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emanager\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esystemContainers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esystemContainers\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eKubeletCgroupsName\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003econt\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003enewSystemCgroups\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eKubeletCgroupsName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003econt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eensureStateFunc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003ecgroups\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eManager\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eensureProcessInContainerWithOOMScore\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esystemContainers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esystemContainers\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eperiodicTasks\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eperiodicTasks\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eensureProcessInContainerWithOOMScore\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetpid\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eKubeletOOMScoreAdj\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"n\"\u003econt\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003egetContainer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetpid\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"c\"\u003e// return the cgroup id field in \u0026#34;cat /proc/\u0026lt;pid\u0026gt;/cgroup\u0026#34; output\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eKubeletCgroupsName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econt\u003c/span\u003e      \u003cspan class=\"c\"\u003e// this container\u0026#39;s cgroup id\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ecm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esystemContainers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esystemContainers\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"612-检查几种必须要支持的-cgroup-资源类型\"\u003e6.1.2 检查几种必须要支持的 cgroup 资源类型\u003c/h3\u003e\n\n\u003cp\u003e启动时会检查几种必须要支持的 cgroup 类型：\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// https://github.com/kubernetes/kubernetes/blob/v1.26.0/pkg/kubelet/cm/container_manager_linux.go#L161\u003c/span\u003e\n\n\n\u003cspan class=\"c\"\u003e// checks if the required cgroups subsystems are mounted.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// As of now, only \u0026#39;cpu\u0026#39; and \u0026#39;memory\u0026#39; are required.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// cpu quota is a soft requirement.\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003evalidateSystemRequirements\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emountUtil\u003c/span\u003e \u003cspan class=\"n\"\u003emount\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eInterface\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efeatures\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eexpectedCgroups\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003esets\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNewString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;cpu\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;cpuacct\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;cpuset\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;memory\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"62-kubelet-启动配置\"\u003e6.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubelet\u003c/code\u003e 启动配置\u003c/h2\u003e\n\n\u003cp\u003ecgroup 相关的几个参数，可以通过命令行或者 kubelet config 文件配置：\u003c/p\u003e\n\n\u003cp\u003e查看配置文件：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node: \u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e cgroup /etc/kubernetes/config\nkubeletCgroups: \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\nsystemCgroups: \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\ncgroupRoot: \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan class=\"c\"\u003e# if empty, default to \u0026#34;/\u0026#34; in the code\u003c/span\u003e\ncgroupsPerQOS: \u003cspan class=\"nb\"\u003etrue\n\u003c/span\u003ecgroupDriver: cgroupfs\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"63-通过-k8s-metrics-api-查看-requestslimits-信息\"\u003e6.3 通过 k8s metrics API 查看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erequests/limits\u003c/code\u003e 信息\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl get \u003cspan class=\"nt\"\u003e--raw\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;/apis/metrics.k8s.io/v1beta1/namespaces/default/pods/smoke-pod-01\u0026#34;\u003c/span\u003e | jq \u003cspan class=\"nt\"\u003e-C\u003c/span\u003e \u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;PodMetrics\u0026#34;\u003c/span\u003e,\n  \u003cspan class=\"s2\"\u003e\u0026#34;apiVersion\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;metrics.k8s.io/v1beta1\u0026#34;\u003c/span\u003e,\n  \u003cspan class=\"s2\"\u003e\u0026#34;metadata\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;smoke-pod-01\u0026#34;\u003c/span\u003e,\n    \u003cspan class=\"s2\"\u003e\u0026#34;selfLink\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;/apis/metrics.k8s.io/v1beta1/namespaces/default/pods/smoke-pod-01\u0026#34;\u003c/span\u003e,\n  \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n  \u003cspan class=\"s2\"\u003e\u0026#34;containers\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;netperf\u0026#34;\u003c/span\u003e,\n      \u003cspan class=\"s2\"\u003e\u0026#34;usage\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"s2\"\u003e\u0026#34;cpu\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e,\n        \u003cspan class=\"s2\"\u003e\u0026#34;memory\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;1808Ki\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"64-定期获取-pod-cpuload-信息\"\u003e6.4 定期获取 pod CpuLoad 信息\u003c/h2\u003e\n\n\u003cp\u003ekubelet INFO 日志中会定期打印类似下面的信息：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eTask stats \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;/sys/fs/cgroup/cpu,cpuacct/kubepods/pod\u0026lt;pod_id\u0026gt;/\u0026lt;container_id\u0026gt;\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003eNrSleeping:1 NrRunning:0 NrStopped:0 NrUninterruptible:0 NrIoWait:0\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e代码：\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// vendor/github.com/google/cadvisor/utils/cpuload/netlink/reader.go\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// Returns instantaneous number of running tasks in a group.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// * Caller can use historical data to calculate cpu load.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// * path is an absolute filesystem path for a container under the CPU cgroup hierarchy.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// NOTE: non-hierarchical load is returned. It does not include load for subcontainers.\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eNetlinkReader\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eGetCpuLoad\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLoadStats\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ecfd\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eOpen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"n\"\u003ecfd\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eClose\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n\t\u003cspan class=\"n\"\u003estats\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003egetLoadStats\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efamilyID\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecfd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eklog\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eInfof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Task stats for %q: %+v\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estats\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003estats\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"65-通过-container-pid-查看-cgroup-信息\"\u003e6.5 通过 container \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epid\u003c/code\u003e 查看 cgroup 信息\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/1606/cgroup\n11:net_cls:    /kubepods/besteffort/pod\u0026lt;pod_id\u0026gt;/\u0026lt;ctn_id\u0026gt;\n10:cpu,cpuacct:/kubepods/besteffort/pod\u0026lt;pod_id\u0026gt;/\u0026lt;ctn_id\u0026gt;\n9:memory:      /kubepods/besteffort/pod\u0026lt;pod_id\u0026gt;/\u0026lt;ctn_id\u0026gt;\n8:blkio:       /kubepods/besteffort/pod\u0026lt;pod_id\u0026gt;/\u0026lt;ctn_id\u0026gt;\n7:devices:     /kubepods/besteffort/pod\u0026lt;pod_id\u0026gt;/\u0026lt;ctn_id\u0026gt;\n6:hugetlb:     /kubepods/besteffort/pod\u0026lt;pod_id\u0026gt;/\u0026lt;ctn_id\u0026gt;\n5:pids:        /kubepods/besteffort/pod\u0026lt;pod_id\u0026gt;/\u0026lt;ctn_id\u0026gt;\n4:freezer:     /kubepods/besteffort/pod\u0026lt;pod_id\u0026gt;/\u0026lt;ctn_id\u0026gt;\n3:cpuset:      /kubepods/besteffort/pod\u0026lt;pod_id\u0026gt;/\u0026lt;ctn_id\u0026gt;\n2:perf_event:  /kubepods/besteffort/pod\u0026lt;pod_id\u0026gt;/\u0026lt;ctn_id\u0026gt;\n1:name\u003cspan class=\"o\"\u003e=\u003c/span\u003esystemd:/kubepods/besteffort/pod\u0026lt;pod_id\u0026gt;/\u0026lt;ctn_id\u0026gt;\n0::/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /sys/fs/cgroup/memory/kubepods/burstable/pod\u0026lt;pod_id\u0026gt;/memory.limit_in_bytes\n1073741824\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"参考资料\"\u003e参考资料\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://medium.com/geekculture/layer-by-layer-cgroup-in-kubernetes-c4e26bda676c\"\u003eLayer-by-Layer Cgroup in Kubernetes\u003c/a\u003e, blog, 2021\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://gist.github.com/mcastelino/b8ce9a70b00ee56036dadd70ded53e9f\"\u003ehttps://gist.github.com/mcastelino kcgroups.md\u003c/a\u003e, blog, 2022\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/kubernetes/design-proposals-archive/blob/main/node/node-allocatable.md\"\u003eNode Allocatable Resources\u003c/a\u003e, k8s proposal, 2018\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/cgroupv2-zh/\"\u003eControl Group v2 (cgroupv2 权威指南)（KernelDoc, 2021）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/what-happens-when-k8s-creates-pods-1-zh/\"\u003e源码解析：K8s 创建 pod 时，背后发生了什么（一）（2021）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/linux-cfs-design-and-implementation-zh/\"\u003eLinux CFS 调度器：原理、设计与内核实现（2023）\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/pidfd-and-socket-lookup-bpf-illustrated/\"\u003e\u003cspan\u003e« Pidfd and Socket-lookup BPF (SK_LOOKUP) Illustrated (2022)\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/linux-cfs-design-and-implementation-zh/\"\u003e\u003cspan\u003eLinux CFS 调度器：原理、设计与内核实现（2023） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2023-01-25T00:00:00Z",
  "Author": "Arthur Chiao"
}