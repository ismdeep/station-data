{
  "Source": "arthurchiao.art",
  "Title": "Linux 服务器功耗与性能管理（一）：CPU 硬件基础（2024）",
  "Link": "https://arthurchiao.art/blog/linux-cpu-1-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eLinux 服务器功耗与性能管理（一）：CPU 硬件基础（2024）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2024-02-15 | Last Update 2024-02-15\u003c/p\u003e\n  \n  \u003cp\u003e整理一些 Linux 服务器性能相关的 CPU 硬件基础及内核子系统知识。\u003c/p\u003e\n\n\u003cp\u003e水平有限，文中不免有错误或过时之处，请酌情参考。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"/blog/linux-cpu-1-zh/\"\u003eLinux 服务器功耗与性能管理（一）：CPU 硬件基础（2024）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/linux-cpu-2-zh/\"\u003eLinux 服务器功耗与性能管理（二）：几个内核子系统的设计（2024）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/linux-cpu-3-zh/\"\u003eLinux 服务器功耗与性能管理（三）：cpuidle 子系统的实现（2024）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/linux-cpu-4-zh/\"\u003eLinux 服务器功耗与性能管理（四）：监控、配置、调优（2024）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/linux-cpu-5-zh/\"\u003eLinux 服务器功耗与性能管理（五）：问题讨论（2024）\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#1-拓扑\" id=\"markdown-toc-1-拓扑\"\u003e1 拓扑\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-package\" id=\"markdown-toc-11-package\"\u003e1.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePackage\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-core-processor\" id=\"markdown-toc-12-core-processor\"\u003e1.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCore\u003c/code\u003e (processor)\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-超线程hyper-threading硬件线程hardware-thread\" id=\"markdown-toc-13-超线程hyper-threading硬件线程hardware-thread\"\u003e1.3 超线程（Hyper-threading）/硬件线程（hardware thread）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#14-logical-cpu\" id=\"markdown-toc-14-logical-cpu\"\u003e1.4 (Logical) \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCPU\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#15-linux-node-实探cpupowerhwloclstopo-查看三者的关系\" id=\"markdown-toc-15-linux-node-实探cpupowerhwloclstopo-查看三者的关系\"\u003e1.5 Linux node 实探：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpupower/hwloc/lstopo\u003c/code\u003e 查看三者的关系\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-频率\" id=\"markdown-toc-2-频率\"\u003e2 频率\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-p-state-processor-performance-state处理器支持的-voltage-freq-列表\" id=\"markdown-toc-21-p-state-processor-performance-state处理器支持的-voltage-freq-列表\"\u003e2.1 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eP-State\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (processor performance state)：处理器支持的 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003evoltage-freq\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 列表\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-lfmhfm-lowhigh-freq-modep-state-中的最低和最高频率\" id=\"markdown-toc-22-lfmhfm-lowhigh-freq-modep-state-中的最低和最高频率\"\u003e2.2 LFM/HFM (low/high freq mode)：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ep-state\u003c/code\u003e 中的\u003cstrong\u003e\u003cmark\u003e最低和最高\u003c/mark\u003e\u003c/strong\u003e频率\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-基频base-frequency市场宣传术其实就是-p-state-中的最高频率\" id=\"markdown-toc-23-基频base-frequency市场宣传术其实就是-p-state-中的最高频率\"\u003e2.3 基频（\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ebase frequency\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e）：市场宣传术，其实就是 p-state 中的\u003cstrong\u003e\u003cmark\u003e最高频率\u003c/mark\u003e\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-超频overclocking运行在比基频更高的频率\" id=\"markdown-toc-24-超频overclocking运行在比基频更高的频率\"\u003e2.4 超频（\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eoverclocking\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e）：运行在比\u003cstrong\u003e\u003cmark\u003e基频更高\u003c/mark\u003e\u003c/strong\u003e的频率\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#25-intel-turbo睿频-或-amd-powertune动态超频\" id=\"markdown-toc-25-intel-turbo睿频-或-amd-powertune动态超频\"\u003e2.5 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eIntel Turbo\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e（睿频） 或 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eAMD PowerTune\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e：动态超频\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#251-turbo-频率越高能同时工作在这个频率的-core-数量越少\" id=\"markdown-toc-251-turbo-频率越高能同时工作在这个频率的-core-数量越少\"\u003e2.5.1 Turbo 频率越高，能同时工作在这个频率的 CORE 数量越少\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#251-turbo-高低跟-workload-使用的指令集sseavx也有关系\" id=\"markdown-toc-251-turbo-高低跟-workload-使用的指令集sseavx也有关系\"\u003e2.5.1 Turbo 高低跟 workload 使用的指令集（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSSE/AVX/...\u003c/code\u003e）也有关系\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#253-p-state-vs-freq-直观展示\" id=\"markdown-toc-253-p-state-vs-freq-直观展示\"\u003e2.5.3 p-state vs. freq 直观展示\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#26-linux-node-lscpuprocinfo-实际查看各种频率\" id=\"markdown-toc-26-linux-node-lscpuprocinfo-实际查看各种频率\"\u003e2.6 Linux node \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elscpu/procinfo\u003c/code\u003e 实际查看各种频率\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-功耗\" id=\"markdown-toc-3-功耗\"\u003e3 功耗\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-tdp-thermal-design-powerbase-freq-下的额定功耗\" id=\"markdown-toc-31-tdp-thermal-design-powerbase-freq-下的额定功耗\"\u003e3.1 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eTDP\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (Thermal Design Power)：Base Freq 下的额定功耗\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-turbo-和功耗控制架构\" id=\"markdown-toc-32-turbo-和功耗控制架构\"\u003e3.2 Turbo 和功耗控制架构\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-bios\" id=\"markdown-toc-4-bios\"\u003e4 BIOS\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003cp\u003e对于 Linux 机器，可以用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elscpu\u003c/code\u003e、\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecat /proc/info\u003c/code\u003e 等命令查看它的 CPU 信息，\n比如下面这台机器，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003elscpu\nArchitecture:          x86_64\nCPU\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e:                48\nOn-line CPU\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e list:   0-47\nThread\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e per core:    2\nCore\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e per socket:    12\nSocket\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e:             2\nNUMA node\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e:          2\nModel:                 63\nModel name:            Intel\u003cspan class=\"o\"\u003e(\u003c/span\u003eR\u003cspan class=\"o\"\u003e)\u003c/span\u003e Xeon\u003cspan class=\"o\"\u003e(\u003c/span\u003eR\u003cspan class=\"o\"\u003e)\u003c/span\u003e CPU E5-2680 v3 @ 2.50GHz\nNUMA node0 CPU\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e:     0-11,24-35\nNUMA node1 CPU\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e:     12-23,36-47\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e看到有 48 个 CPU。\n要理解这些 CPU \u003cstrong\u003e\u003cmark\u003e在物理上是怎么分布的\u003c/mark\u003e\u003c/strong\u003e（layout），需要先熟悉几个概念。\u003c/p\u003e\n\n\u003ch1 id=\"1-拓扑\"\u003e1 拓扑\u003c/h1\u003e\n\n\u003ch2 id=\"11-package\"\u003e1.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePackage\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e如下图，package（直译为“封装”）是我们能直接在\u003cstrong\u003e\u003cmark\u003e主板上\u003c/mark\u003e\u003c/strong\u003e看到的一个东西，\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/linux-cpu/cpu-package.jpg\" width=\"45%\" height=\"45%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. CPU package\n\u003ca href=\"https://superuser.com/questions/324284/what-is-meant-by-the-terms-cpu-core-die-and-package\"\u003e Image source \u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e里面封装一个或多个处理器核心（称为 core 或 processor）。\u003c/p\u003e\n\n\u003ch2 id=\"12-core-processor\"\u003e1.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCore\u003c/code\u003e (processor)\u003c/h2\u003e\n\n\u003cp\u003e本文的 “core/processor” 都是指\u003cstrong\u003e\u003cmark\u003e硬件核心/硬件处理器\u003c/mark\u003e\u003c/strong\u003e。一个 package 里面可能会包含多个处理器，如下图所示，\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e \u003cimg src=\"/assets/img/linux-cpu/pkg-core.jpg\" width=\"40%\" height=\"40%\"/\u003e \u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Cores/processors in a package\n\u003ca href=\"https://superuser.com/questions/324284/what-is-meant-by-the-terms-cpu-core-die-and-package\"\u003e Image source \u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e或者从芯片视图看：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e \u003cimg src=\"/assets/img/linux-cpu/pkg-die.jpg\" width=\"50%\" height=\"50%\"/\u003e \u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Cores/processors in a package\n\u003ca href=\"https://superuser.com/questions/324284/what-is-meant-by-the-terms-cpu-core-die-and-package\"\u003e Image source \u003c/a\u003e\n\u003c/p\u003e\n\n\u003ch2 id=\"13-超线程hyper-threading硬件线程hardware-thread\"\u003e1.3 超线程（Hyper-threading）/硬件线程（hardware thread）\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e \u003cimg src=\"/assets/img/linux-cpu/hyper-threading.jpeg\" width=\"60%\" height=\"60%\"/\u003e \u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Hyper-threading\n\u003ca href=\"https://hackernoon.com/what-is-hyperthreading-and-how-do-you-enable-it-pa2k3784\"\u003eImage source \u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e大部分 X86 处理器都支持超线程，也叫\u003cstrong\u003e\u003cmark\u003e硬件线程\u003c/mark\u003e\u003c/strong\u003e。\n如果一个 CORE 支持 2 个硬件线程， 那么启用超线程后，\n这个 CORE 上面就有 \u003cstrong\u003e\u003cmark\u003e2 个在大部分情况下都能独立执行的指令流\u003c/mark\u003e\u003c/strong\u003e（这 2 个硬件线程共享 L1 cache 等），\n\u003cstrong\u003e\u003cmark\u003e操作系统能看到的 CPU 数量会翻倍\u003c/mark\u003e\u003c/strong\u003e（相比 CORE 的数量），\n每个 CPU 对应的不是一个 CORE，而是一个硬件线程/超线程（hyper-thread）。\u003c/p\u003e\n\n\u003ch2 id=\"14-logical-cpu\"\u003e1.4 (Logical) \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCPU\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e以上提到的 package、core/processor、hyper-threading/hardware-thread，都是\u003cstrong\u003e\u003cmark\u003e硬件概念\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e在任务调度的语境中，我们所说的 “CPU” 其实是一个\u003cstrong\u003e\u003cmark\u003e逻辑概念\u003c/mark\u003e\u003c/strong\u003e。\n例如，内核的任务调度是\u003cstrong\u003e\u003cmark\u003e基于逻辑 CPU\u003c/mark\u003e\u003c/strong\u003e 来的，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e为每个逻辑 CPU 分配一个任务队列（run queue），独立调度；\u003c/li\u003e\n  \u003cli\u003e为每个逻辑 CPU 能独立加载指令并执行。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e逻辑 CPU 的数量和分布跟 package/core/hyper-threading 有直接关系，\n\u003cstrong\u003e\u003cmark\u003e一个逻辑 CPU 不一定对应一个独立的硬件处理器\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e下面通过一个具体例子来看下四者之间的关系。\u003c/p\u003e\n\n\u003ch2 id=\"15-linux-node-实探cpupowerhwloclstopo-查看三者的关系\"\u003e1.5 Linux node 实探：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpupower/hwloc/lstopo\u003c/code\u003e 查看三者的关系\u003c/h2\u003e\n\n\u003cp\u003e还是本文最开始那台 Intel CPU 机器，\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eThread(s) per core:    2\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\n说明它启用了超线程/硬件线程。另外，我们通过工具 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ecpupower\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 来看下它的 CPU 分布，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecpupower monitor\n              | Mperf              \n PKG|CORE| CPU| C0   | Cx   | Freq \n   0|   0|   0|  2.66| 97.34|  2494\n   0|   0|  24|  1.89| 98.11|  2493\n   0|   1|   1|  2.09| 97.91|  2494\n   0|   1|  25|  1.77| 98.23|  2494\n   ...\n   0|  13|  11|  1.95| 98.05|  2493\n   0|  13|  35|  2.30| 97.70|  2492\n   1|   0|  12|  1.65| 98.35|  2493\n   1|   0|  36|  1.58| 98.42|  2494\n   ...\n   1|  13|  23|  1.78| 98.22|  2494\n   1|  13|  47|  5.07| 94.93|  2493\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e前三列：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePKG\u003c/code\u003e：package，\u003c/p\u003e\n\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003e2 个独立的 CPU package\u003c/mark\u003e\u003c/strong\u003e（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0~1\u003c/code\u003e），对应上面的 NUMA；\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCORE\u003c/code\u003e：\u003cstrong\u003e\u003cmark\u003e物理核心\u003c/mark\u003e\u003c/strong\u003e/物理处理器\u003c/p\u003e\n\n    \u003cp\u003e每个 package 里 \u003cstrong\u003e\u003cmark\u003e14 个 CORE\u003c/mark\u003e\u003c/strong\u003e（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0~13\u003c/code\u003e）；\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCPU\u003c/code\u003e：用户看到的 CPU，即我们上面所说的\u003cstrong\u003e\u003cmark\u003e逻辑 CPU\u003c/mark\u003e\u003c/strong\u003e\u003c/p\u003e\n\n    \u003cp\u003e这台机器启用了超线程（hyperthreading），每个 CORE 对应两个 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ehardware thread\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，\n 每个 hardware thread 最终呈现为一个\u003cstrong\u003e\u003cmark\u003e用户看到的 CPU\u003c/mark\u003e\u003c/strong\u003e，因此最终是 48 个 CPU（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0~47\u003c/code\u003e）。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e也可以通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehw-loc\u003c/code\u003e 查看\u003cstrong\u003e\u003cmark\u003e硬件拓扑\u003c/mark\u003e\u003c/strong\u003e，里面能详细到不同 CPU 的 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eL1/L2 cache\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 关系：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ehwloc-ls\nMachine \u003cspan class=\"o\"\u003e(\u003c/span\u003e251GB total\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  NUMANode L#0 \u003cspan class=\"o\"\u003e(\u003c/span\u003eP#0 125GB\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    Package L#0 + L3 L#0 \u003cspan class=\"o\"\u003e(\u003c/span\u003e30MB\u003cspan class=\"o\"\u003e)\u003c/span\u003e                                    \u003cspan class=\"c\"\u003e# \u0026lt;-- PKG 0\u003c/span\u003e\n      L2 L#0 \u003cspan class=\"o\"\u003e(\u003c/span\u003e256KB\u003cspan class=\"o\"\u003e)\u003c/span\u003e + L1d L#0 \u003cspan class=\"o\"\u003e(\u003c/span\u003e32KB\u003cspan class=\"o\"\u003e)\u003c/span\u003e + L1i L#0 \u003cspan class=\"o\"\u003e(\u003c/span\u003e32KB\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Core L#0  \u003cspan class=\"c\"\u003e#   \u0026lt;-- CORE 0\u003c/span\u003e\n        PU L#0 \u003cspan class=\"o\"\u003e(\u003c/span\u003eP#0\u003cspan class=\"o\"\u003e)\u003c/span\u003e                                               \u003cspan class=\"c\"\u003e#     \u0026lt;-- Logical CPU 0  对应到这里\u003c/span\u003e\n        PU L#1 \u003cspan class=\"o\"\u003e(\u003c/span\u003eP#24\u003cspan class=\"o\"\u003e)\u003c/span\u003e                                              \u003cspan class=\"c\"\u003e#     \u0026lt;-- Logical CPU 24 对应到这里\u003c/span\u003e\n      L2 L#1 \u003cspan class=\"o\"\u003e(\u003c/span\u003e256KB\u003cspan class=\"o\"\u003e)\u003c/span\u003e + L1d L#1 \u003cspan class=\"o\"\u003e(\u003c/span\u003e32KB\u003cspan class=\"o\"\u003e)\u003c/span\u003e + L1i L#1 \u003cspan class=\"o\"\u003e(\u003c/span\u003e32KB\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Core L#1  \u003cspan class=\"c\"\u003e#   \u0026lt;-- CORE 1\u003c/span\u003e\n        PU L#2 \u003cspan class=\"o\"\u003e(\u003c/span\u003eP#1\u003cspan class=\"o\"\u003e)\u003c/span\u003e                                               \u003cspan class=\"c\"\u003e#     \u0026lt;-- Logical CPU 1  对应到这里\u003c/span\u003e\n        PU L#3 \u003cspan class=\"o\"\u003e(\u003c/span\u003eP#25\u003cspan class=\"o\"\u003e)\u003c/span\u003e                                              \u003cspan class=\"c\"\u003e#     \u0026lt;-- Logical CPU 25 对应到这里\u003c/span\u003e\n  ...\n  NUMANode L#1 \u003cspan class=\"o\"\u003e(\u003c/span\u003eP#1 126GB\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Package L#1 + L3 L#1 \u003cspan class=\"o\"\u003e(\u003c/span\u003e30MB\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    L2 L#12 \u003cspan class=\"o\"\u003e(\u003c/span\u003e256KB\u003cspan class=\"o\"\u003e)\u003c/span\u003e + L1d L#12 \u003cspan class=\"o\"\u003e(\u003c/span\u003e32KB\u003cspan class=\"o\"\u003e)\u003c/span\u003e + L1i L#12 \u003cspan class=\"o\"\u003e(\u003c/span\u003e32KB\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Core L#12\n      PU L#24 \u003cspan class=\"o\"\u003e(\u003c/span\u003eP#12\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n      PU L#25 \u003cspan class=\"o\"\u003e(\u003c/span\u003eP#36\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    ...\n    L2 L#23 \u003cspan class=\"o\"\u003e(\u003c/span\u003e256KB\u003cspan class=\"o\"\u003e)\u003c/span\u003e + L1d L#23 \u003cspan class=\"o\"\u003e(\u003c/span\u003e32KB\u003cspan class=\"o\"\u003e)\u003c/span\u003e + L1i L#23 \u003cspan class=\"o\"\u003e(\u003c/span\u003e32KB\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Core L#23\n      PU L#46 \u003cspan class=\"o\"\u003e(\u003c/span\u003eP#23\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n      PU L#47 \u003cspan class=\"o\"\u003e(\u003c/span\u003eP#47\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如无特殊说明，本文接下来的 “CPU” 都是指\u003cstrong\u003e\u003cmark\u003e逻辑 CPU\u003c/mark\u003e\u003c/strong\u003e，\n也就是 Linux 内核看到的 CPU。\u003c/p\u003e\n\n\u003ch1 id=\"2-频率\"\u003e2 频率\u003c/h1\u003e\n\n\u003ch2 id=\"21-p-state-processor-performance-state处理器支持的-voltage-freq-列表\"\u003e2.1 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eP-State\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (processor performance state)：处理器支持的 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003evoltage-freq\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 列表\u003c/h2\u003e\n\n\u003cp\u003e处理器可以工作在不同的频率，对应不同的电压（最终体现为功耗）。这些\nvoltage-frequency 组合就称为 P-State（\u003cstrong\u003e\u003cmark\u003e处理器性能状态\u003c/mark\u003e\u003c/strong\u003e）。\n比如下面这个\n\u003ca href=\"https://en.wikichip.org/wiki/intel/frequency_behavior\"\u003eP-State Table\u003c/a\u003e\u003c/p\u003e\n\n\u003ctable\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n    \u003cth\u003e Voltage \u003c/th\u003e\n    \u003cth\u003e Frequency \u003c/th\u003e\u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003e 1.21 V \u003c/td\u003e\n    \u003ctd\u003e 2.8 GHz (HFM)\n    \u003c/td\u003e\u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003e 1.18 V \u003c/td\u003e\n    \u003ctd\u003e 2.4 GHz\n    \u003c/td\u003e\u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003e 1.05 V \u003c/td\u003e\n    \u003ctd\u003e 2.0 GHz\n    \u003c/td\u003e\u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003e 0.96 V \u003c/td\u003e\n    \u003ctd\u003e 1.6 GHz\n    \u003c/td\u003e\u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003e 0.93 V \u003c/td\u003e\n    \u003ctd\u003e 1.3 GHz\n    \u003c/td\u003e\u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003e 0.86 V \u003c/td\u003e\n    \u003ctd\u003e 600 MHz (LFM)\n    \u003c/td\u003e\u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e这个 table 会保存在一个名为 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eMSR\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (model specific register)\n的 read-only \u003cstrong\u003e\u003cmark\u003e寄存器中\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"22-lfmhfm-lowhigh-freq-modep-state-中的最低和最高频率\"\u003e2.2 LFM/HFM (low/high freq mode)：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ep-state\u003c/code\u003e 中的\u003cstrong\u003e\u003cmark\u003e最低和最高\u003c/mark\u003e\u003c/strong\u003e频率\u003c/h2\u003e\n\n\u003cp\u003ep-state table 中，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e最低频率模式称为 Low Frequency Mode (LFM)，工作频率和电压不能比这个更低了。\u003c/li\u003e\n  \u003cli\u003e最高频率模式称为 High Frequency mode (HFM)，工作频率和电压不能比这个更高了。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"23-基频base-frequency市场宣传术其实就是-p-state-中的最高频率\"\u003e2.3 基频（\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ebase frequency\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e）：市场宣传术，其实就是 p-state 中的\u003cstrong\u003e\u003cmark\u003e最高频率\u003c/mark\u003e\u003c/strong\u003e\u003c/h2\u003e\n\n\u003cp\u003e上面介绍了根据 p-state 的定义，处理器的最低（LF）和最高（HF）频率，这些都是很好理解的技术术语。\u003c/p\u003e\n\n\u003cp\u003e但在市场宣传中，厂商将 HF —— p-state 中的\u003cstrong\u003e\u003cmark\u003e上限频率\u003c/mark\u003e\u003c/strong\u003e ——\n称为基础频率或\u003cstrong\u003e\u003cmark\u003e基频\u003c/mark\u003e\u003c/strong\u003e（Base Frequency），给技术人造成了极大的困惑。\u003c/p\u003e\n\n\u003ch2 id=\"24-超频overclocking运行在比基频更高的频率\"\u003e2.4 超频（\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eoverclocking\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e）：运行在比\u003cstrong\u003e\u003cmark\u003e基频更高\u003c/mark\u003e\u003c/strong\u003e的频率\u003c/h2\u003e\n\n\u003cp\u003e既然敢将 HF 称为基频，那处理器（至少在某些场景下）肯定能工作在更高的频率。\n根据 \u003ca href=\"https://en.wikipedia.org/wiki/Overclocking\"\u003ewikipedia\u003c/a\u003e，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e处理器厂商出于功耗、散热、稳定性等方面的原因，会给出一个\u003cstrong\u003e\u003cmark\u003e官方认证的最高稳定频率\u003c/mark\u003e\u003c/strong\u003e\n（clock rate certified by the manufacturer）但这个频率可能不是处理器的物理极限（最高）频率。\n厂商承诺在这个最高稳定频率及以下可以长时间稳定运行，但超出这个频率，\n有的厂商提供有限保证，有的厂商完全不保证。\u003c/li\u003e\n  \u003cli\u003e工作在比\u003cstrong\u003e\u003cmark\u003e处理器厂商认证的频率\u003c/mark\u003e\u003c/strong\u003e更高的频率上，就称为超频（overclocking）；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e结合我们前面的术语，这里说的“官方认证的最高稳定频率”就是基频（HF），\n\u003cstrong\u003e\u003cmark\u003e工作在基频以上\u003c/mark\u003e\u003c/strong\u003e的场景，就称为超频。比如基频是 2.8GHz，超频到 3.0GHz。\u003c/p\u003e\n\n\u003ch2 id=\"25-intel-turbo睿频-或-amd-powertune动态超频\"\u003e2.5 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eIntel Turbo\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e（睿频） 或 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eAMD PowerTune\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e：动态超频\u003c/h2\u003e\n\n\u003cp\u003eTurbo 是 Intel 的技术方案，其他家也都有类似方案，基本原理都一样：根据负载动态调整频率 ——\n但这句话其实只说对了一半 —— 这项技术的场景也非常明确，但宣传中经常被有意或无意忽略：\n\u003cstrong\u003e\u003cmark\u003e在部分处理器空闲的情况下，另外那部分处理器才可能动态超频\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e所在官方文档说，我们会看到它一般都是写“能支持的最大单核频率”（\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003emaximum single-core frequency\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e）\n叫 Max Turbo Frequency，因为它们在设计上就\u003cstrong\u003e\u003cmark\u003e不支持所有核同时运行在这个最大频率\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e原因其实也很简单：\n频率越高，功耗越高，散热越大。整个系统软硬件主要是围绕基频（HF）设计和调优的，\n出厂给出的也是\u003cstrong\u003e\u003cmark\u003e和基频对应的功耗\u003c/mark\u003e\u003c/strong\u003e（TDP，后面会介绍）。\n另外，TDP 也是数据中心设计时的主要参考指标之一，所以大规模长时间持续运行在 TDP 之上，\n考验的不止是处理器、主板、散热片这些局部的东西，数据中心全局基础设施都得跟上。\u003c/p\u003e\n\n\u003cp\u003e下面看个具体处理器 turbo 的例子。\u003c/p\u003e\n\n\u003ch3 id=\"251-turbo-频率越高能同时工作在这个频率的-core-数量越少\"\u003e2.5.1 Turbo 频率越高，能同时工作在这个频率的 CORE 数量越少\u003c/h3\u003e\n\n\u003cp\u003e下面是一个 Intel 处理器官方参数，\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/linux-cpu/i9-9900k-turbo-freq.png\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eTurbo Freq and corresponding Active Cores\n\u003ca href=\"https://boxx.com/blog/hardware/intel%E2%80%99s-frequency-boosting-technologies-explained\"\u003eImage source\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e解释一下，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e基频是 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e3.6GHz\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，\u003c/li\u003e\n  \u003cli\u003e超频到 5GHz 时，最多只有 2 个核能工作在这个频率；\u003c/li\u003e\n  \u003cli\u003e超频到 4.8GHz 时，最多只有 4 个核能工作在这个频率；\u003c/li\u003e\n  \u003cli\u003e超频到 4.7GHz 时，最多只有 8 个核能工作在这个频率；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"251-turbo-高低跟-workload-使用的指令集sseavx也有关系\"\u003e2.5.1 Turbo 高低跟 workload 使用的指令集（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSSE/AVX/...\u003c/code\u003e）也有关系\u003c/h3\u003e\n\n\u003cp\u003e能超到多少，跟跑的业务类型（或者说使用的指令集）也有关系，使用的指令集不同，能达到的最高频率也不同。\n\u003ca href=\"https://en.wikichip.org/wiki/intel/frequency_behavior\"\u003e比如\u003c/a\u003e，\u003c/p\u003e\n\n\u003ctable class=\"wikitable\"\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003cth\u003e Mode \u003c/th\u003e\n\u003cth\u003e Example Workload \u003c/th\u003e\n\u003cth\u003e Absolute Guaranteed\u003cbr/\u003eLowest Frequency \u003c/th\u003e\n\u003cth\u003e Absolute\u003cbr/\u003eHighest Frequency\n\u003c/th\u003e\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e Non-AVX \u003c/td\u003e\n\u003ctd\u003e SSE, light AVX2 Integer Vector (non-MUL), All regular instruction \u003c/td\u003e\n\u003ctd\u003e Base Frequency \u003c/td\u003e\n\u003ctd\u003e Turbo Frequency\n\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e \u003ca href=\"/w/index.php?title=x86/avx2\u0026amp;action=edit\u0026amp;redlink=1\" class=\"new\" title=\"x86/avx2 (page does not exist)\"\u003eAVX2\u003c/a\u003e Heavy \u003c/td\u003e\n\u003ctd\u003e All AVX2 operations, light AVX-512 (non-FP, Int Vect non-MUL) \u003c/td\u003e\n\u003ctd\u003e AVX2 Base \u003c/td\u003e\n\u003ctd\u003e AVX2 Turbo\n\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e \u003ca href=\"/wiki/x86/avx-512\" title=\"x86/avx-512\"\u003eAVX-512\u003c/a\u003e Heavy \u003c/td\u003e\n\u003ctd\u003e  All heavy AVX-512 operations \u003c/td\u003e\n\u003ctd\u003e AVX-512 Base \u003c/td\u003e\n\u003ctd\u003e AVX-512 Turbo\n\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e另外，在一些 CPU data sheet 中，还有一个所谓的 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eall-core turbo\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e：\n这是所有 core 同时超到同一个频率时，所能达到的最高频率。这个频率可能比 base 高一些，\n但肯定比 max turbo frequency 低。例如，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eXeon Gold 6150\u003c/code\u003e\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ebase\t2.7 GHz\u003c/li\u003e\n  \u003cli\u003eall-core turbo 3.4 GHz\u003c/li\u003e\n  \u003cli\u003eturbo max 3.7GHz\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"253-p-state-vs-freq-直观展示\"\u003e2.5.3 p-state vs. freq 直观展示\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/linux-cpu/P-state-vs-speed-shift.jpg\" width=\"85%\" height=\"85%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e\u003ca href=\"https://www.thomas-krenn.com/en/wiki/Processor_P-states_and_C-states\"\u003eImage Source\u003c/a\u003e\n\u003c/p\u003e\n\n\u003ch2 id=\"26-linux-node-lscpuprocinfo-实际查看各种频率\"\u003e2.6 Linux node \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elscpu/procinfo\u003c/code\u003e 实际查看各种频率\u003c/h2\u003e\n\n\u003cp\u003e老版本的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elscpu\u003c/code\u003e 能看到三个频率指标：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003elscpu\n...\nModel name:            Intel\u003cspan class=\"o\"\u003e(\u003c/span\u003eR\u003cspan class=\"o\"\u003e)\u003c/span\u003e Xeon\u003cspan class=\"o\"\u003e(\u003c/span\u003eR\u003cspan class=\"o\"\u003e)\u003c/span\u003e CPU E5-2680 v3 @ 2.50GHz\nCPU MHz:               2494.374   \u003cspan class=\"c\"\u003e# 实际运行频率，但不准，因为每个 CORE 可能都运行不同频率\u003c/span\u003e\nCPU max MHz:           2500.0000  \u003cspan class=\"c\"\u003e# max turbo freq\u003c/span\u003e\nCPU min MHz:           1200.0000  \u003cspan class=\"c\"\u003e# p-state low-freq\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e新版本的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elscpu\u003c/code\u003e 去掉了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCPU MHz\u003c/code\u003e 这个字段，每个 CORE 都可能工作在不同频率，\n这种情况下这个字段没什么意义。要看每个 CORE/CPU 的实时工作频率，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# CPU info: Intel(R) Xeon(R) Gold 5318Y CPU @ 2.10GHz\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/cpuinfo | egrep \u003cspan class=\"s1\"\u003e\u0026#39;(processor|cpu MHz)\u0026#39;\u003c/span\u003e\nprocessor       : 0\ncpu MHz         : 2100.000\nprocessor       : 1\ncpu MHz         : 2100.000\nprocessor       : 2\ncpu MHz         : 2100.000\nprocessor       : 3\ncpu MHz         : 2600.000\n...\nprocessor       : 51\ncpu MHz         : 2100.000\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e一共 96 个 CPU，回忆前面，这里的 CPU 本质上都是\u003cstrong\u003e\u003cmark\u003e硬件线程\u003c/mark\u003e\u003c/strong\u003e（超线程），并不是独立 CORE；\u003c/li\u003e\n  \u003cli\u003e从这台机器的输出看，同属一个 CORE 的\u003cstrong\u003e\u003cmark\u003e两个硬件线程\u003c/mark\u003e\u003c/strong\u003e（CPU 3 \u0026amp; CPU 51）\u003cstrong\u003e\u003cmark\u003e可以工作在不同频率\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"3-功耗\"\u003e3 功耗\u003c/h1\u003e\n\n\u003ch2 id=\"31-tdp-thermal-design-powerbase-freq-下的额定功耗\"\u003e3.1 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eTDP\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (Thermal Design Power)：Base Freq 下的额定功耗\u003c/h2\u003e\n\n\u003cp\u003eTDP 表示的处理器运行在基频时的平均功耗（average power）。\u003c/p\u003e\n\n\u003cp\u003e这就是说，超频或 turbo 之后，处理器的功耗会比 TDP 更大。\n具体到实际，需要关注功耗、电压、电流、出风口温度等等指标。\n这些内容后面再专门讨论。\u003c/p\u003e\n\n\u003ch2 id=\"32-turbo-和功耗控制架构\"\u003e3.2 Turbo 和功耗控制架构\u003c/h2\u003e\n\n\u003cp\u003e以 AMD 的 turbo 技术为例：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/linux-cpu/AMD_PowerTune_Bonaire.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Architecture of the PowerTune version\n\u003ca href=\"https://en.wikipedia.org/wiki/AMD_PowerTune\"\u003e Image source \u003c/a\u003e\n\u003c/p\u003e\n\n\u003ch1 id=\"4-bios\"\u003e4 BIOS\u003c/h1\u003e\n\n\u003cp\u003e服务器启动过程中的硬件初始化，可以配置一些硬件特性。运行在内核启动之前。\u003c/p\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/rise-of-diffusion-based-models-zh/\"\u003e\u003cspan\u003e« [译] 文生图（text-to-image）简史：扩散模型（diffusion models）的崛起与发展（2022）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/linux-cpu-2-zh/\"\u003e\u003cspan\u003eLinux 服务器功耗与性能管理（二）：几个内核子系统的设计（2024） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2024-02-15T00:00:00Z",
  "Author": "Arthur Chiao"
}