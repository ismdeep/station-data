{
  "Source": "arthurchiao.art",
  "Title": "[译] 使用 Linux tracepoint、perf 和 eBPF 跟踪数据包 (2017)",
  "Link": "https://arthurchiao.art/blog/trace-packet-with-tracepoint-perf-ebpf-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003e[译] 使用 Linux tracepoint、perf 和 eBPF 跟踪数据包 (2017)\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2018-11-30 | Last Update 2022-05-04\u003c/p\u003e\n  \n  \u003ch3 id=\"译者序\"\u003e译者序\u003c/h3\u003e\n\n\u003cp\u003e本文翻译自 2017 年的一篇英文博客 \u003ca href=\"https://blog.yadutaf.fr/2017/07/28/tracing-a-packet-journey-using-linux-tracepoints-perf-ebpf/\"\u003eTracing a packet’s journey using Linux\ntracepoints, perf and\neBPF\u003c/a\u003e\n，并添加了章节号以方便阅读。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e由于译者水平有限，本文不免存在遗漏或错误之处。如有疑问，请查阅原文。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e以下是译文。\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#译者序\" id=\"markdown-toc-译者序\"\u003e译者序\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-破局\" id=\"markdown-toc-1-破局\"\u003e1 破局\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-逃离迷宫上帝视角\" id=\"markdown-toc-11-逃离迷宫上帝视角\"\u003e1.1 逃离迷宫：上帝视角\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-网络跟踪渴求利器\" id=\"markdown-toc-12-网络跟踪渴求利器\"\u003e1.2 网络跟踪：渴求利器\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-巨人肩膀perfebpf\" id=\"markdown-toc-13-巨人肩膀perfebpf\"\u003e1.3 巨人肩膀：perf/eBPF\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-perf\" id=\"markdown-toc-2-perf\"\u003e2 Perf\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-安装-perf\" id=\"markdown-toc-21-安装-perf\"\u003e2.1 安装 perf\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-测试环境\" id=\"markdown-toc-22-测试环境\"\u003e2.2 测试环境\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-初体验跟踪-ping-包\" id=\"markdown-toc-23-初体验跟踪-ping-包\"\u003e2.3 初体验：跟踪 ping 包\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-进阶选择跟踪点\" id=\"markdown-toc-24-进阶选择跟踪点\"\u003e2.4 进阶：选择跟踪点\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-ebpf\" id=\"markdown-toc-3-ebpf\"\u003e3 eBPF\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-ebpf-和-kprobes\" id=\"markdown-toc-31-ebpf-和-kprobes\"\u003e3.1 eBPF 和 kprobes\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-安装\" id=\"markdown-toc-32-安装\"\u003e3.2 安装\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-自定义跟踪器hello-world\" id=\"markdown-toc-33-自定义跟踪器hello-world\"\u003e3.3 自定义跟踪器：Hello World\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-自定义跟踪器改进\" id=\"markdown-toc-34-自定义跟踪器改进\"\u003e3.4 自定义跟踪器：改进\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#341-添加网卡信息\" id=\"markdown-toc-341-添加网卡信息\"\u003e3.4.1 添加网卡信息\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#342-添加网络命名空间-id\" id=\"markdown-toc-342-添加网络命名空间-id\"\u003e3.4.2 添加网络命名空间 ID\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#343-只跟踪-icmp-echo-requestreply-包\" id=\"markdown-toc-343-只跟踪-icmp-echo-requestreply-包\"\u003e3.4.3 只跟踪 ICMP echo request/reply 包\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#35-最终效果\" id=\"markdown-toc-35-最终效果\"\u003e3.5 最终效果\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-结束语\" id=\"markdown-toc-4-结束语\"\u003e4 结束语\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003cp\u003e一段时间以来，我一直在寻找 Linux 上的底层网络调试（debug）工具。\u003c/p\u003e\n\n\u003cp\u003eLinux 允许在主机上用\u003cstrong\u003e虚拟网卡\u003c/strong\u003e（virtual interface）和\u003cstrong\u003e网络命名空间\u003c/strong\u003e（network\nnamespace）构建复杂的网络。但出现故障时，排障（troubleshooting）相当痛苦。如果是\n3 层路由问题，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emtr\u003c/code\u003e 可以排上用场；但如果是更底层的问题，通常只能手动检查每个网\n卡/网桥/网络命名空间/iptables 规则，用 tcpdump 抓一些包，以确定到底是什么状况。\n\u003cstrong\u003e如果不了解故障之前的网络配置，那排障时的感觉就像在走迷宫\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch1 id=\"1-破局\"\u003e1 破局\u003c/h1\u003e\n\n\u003ch2 id=\"11-逃离迷宫上帝视角\"\u003e1.1 逃离迷宫：上帝视角\u003c/h2\u003e\n\n\u003cp\u003e逃离迷宫的一种方式是在\u003cstrong\u003e迷宫内\u003c/strong\u003e不断左右尝试，寻找通往出口的道路。\n如果是在玩迷宫游戏（置身迷宫内），那确实只能如此；但如果不是在玩游戏，\n那还有另一种逃离方式：\u003cstrong\u003e\u003cmark\u003e转换视角，高空俯视\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e用 Linux 术语来说，就是转换到\u003cstrong\u003e内核视角\u003c/strong\u003e（the kernel point of view）。在这种视\n角下，\u003cstrong\u003e网络命名空间不再是容器（“containers”），而只是一些标签（labels）。内核、\n数据包、网卡等此时都是“肉眼可见”的对象（objects）\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003cstrong\u003e原文注\u003c/strong\u003e：上面的 “containers” 我加了引号，因为从技术上说，网络命名空间是\n构成 Linux 容器的核心部件之一。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"12-网络跟踪渴求利器\"\u003e1.2 网络跟踪：渴求利器\u003c/h2\u003e\n\n\u003cp\u003e所以我想要的是这样一个工具，它可以直接告诉我 “嗨，我看到你的包了：它从\u003cstrong\u003e属于这个\n网络命名空间\u003c/strong\u003e的\u003cstrong\u003e这个网卡\u003c/strong\u003e上发出，然后\u003cstrong\u003e依次经过这些函数\u003c/strong\u003e”。\u003c/p\u003e\n\n\u003cp\u003e本质上，我想要的是一个 \u003cstrong\u003e2 层的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emtr\u003c/code\u003e\u003c/strong\u003e。这样的工具存在吗？不存在我们就造一个！\u003c/p\u003e\n\n\u003cp\u003e本文结束时，我们将拥有一个简单、易于使用的底层\u003cstrong\u003e网络包跟踪器\u003c/strong\u003e（packet tracker\n）。如果 ping 本机上的一个 Docker 容器，它会显示类似如下信息：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# ping -4 172.17.0.2\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026531957]          docker0 request \u003cspan class=\"c\"\u003e#17146.001 172.17.0.1 -\u0026gt; 172.17.0.2\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026531957]      vetha373ab6 request \u003cspan class=\"c\"\u003e#17146.001 172.17.0.1 -\u0026gt; 172.17.0.2\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026532258]             eth0 request \u003cspan class=\"c\"\u003e#17146.001 172.17.0.1 -\u0026gt; 172.17.0.2\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026532258]             eth0   reply \u003cspan class=\"c\"\u003e#17146.001 172.17.0.2 -\u0026gt; 172.17.0.1\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026531957]      vetha373ab6   reply \u003cspan class=\"c\"\u003e#17146.001 172.17.0.2 -\u0026gt; 172.17.0.1\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026531957]          docker0   reply \u003cspan class=\"c\"\u003e#17146.001 172.17.0.2 -\u0026gt; 172.17.0.1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"13-巨人肩膀perfebpf\"\u003e1.3 巨人肩膀：perf/eBPF\u003c/h2\u003e\n\n\u003cp\u003e在本文中，我将聚焦两个跟踪工具：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeBPF\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf\u003c/code\u003e 是 Linux 上的最重要的性能分析工具之一。它和内核出自同一个源码树（source\ntree），但编译需要针对指定的内核版本。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf\u003c/code\u003e 可以跟踪内核，也可以跟踪用户程序，\n还可用于采样或者设置跟踪点，可以把它想象成\u003cstrong\u003e\u003cmark\u003e开销更低但功能更强大的 strace\u003c/mark\u003e\u003c/strong\u003e。\n本文只会使用非常简单的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf\u003c/code\u003e 命令。想了解更多，强烈建议访问 \u003ca href=\"http://www.brendangregg.com/perf.html\"\u003eBrendan\nGregg\u003c/a\u003e的博客。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeBPF\u003c/code\u003e 是 Linux 内核新近加入的，其中 e 是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eextended\u003c/code\u003e 的缩写。从名字可以看出，它\n是 BPF（Berkeley Packet Filter）字节码过滤器的增强版，后者是 BSD family 的网络包\n过滤工具。在 Linux 上，eBPF 可以在运行中的内核（live kernel）中安全地执行任何平\n台无关（platform independent）代码，只要这些代码满足一些安全前提。例如，在程序执\n行之前必须验证内存访问合法性，而且要能证明程序会在有限时间内退出。如果内核无法验\n证这些条件，那即使 eBPF 代码是安全的并且确定会退出，它也仍然会被拒绝。\u003c/p\u003e\n\n\u003cp\u003eeBPF 程序可用于 \u003cstrong\u003eQoS 网络分类器\u003c/strong\u003e（network classifier）、\u003cstrong\u003eXDP\u003c/strong\u003e（eXpress Data Plane）\n很底层的网络功能和过滤功能组件、\u003cstrong\u003e跟踪代理\u003c/strong\u003e（tracing agent），以及其他很多方面。\n\u003cstrong\u003e\u003cmark\u003e任何在 /proc/kallsyms 导出的符号（内核函数）和 tracepoint，\n都可以插入 eBPF tracing 代码\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e本文将主要关注 attach 到 tracepoints 的跟踪代理（tracing agents attached to\ntracepoints）。想看在内核函数埋点进行跟踪的例子，或者入门级介绍，建议阅读我之前的\neBPF 文章\u003ca href=\"https://blog.yadutaf.fr/2016/03/30/turn-any-syscall-into-event-introducing-ebpf-kernel-probes/\"\u003e英文\u003c/a\u003e\n，\u003ca href=\"/blog/ebpf-turn-syscall-to-event-zh\"\u003e中文翻译\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch1 id=\"2-perf\"\u003e2 Perf\u003c/h1\u003e\n\n\u003cp\u003e本文只会使用 perf 做非常简单的内核跟踪。\u003c/p\u003e\n\n\u003ch2 id=\"21-安装-perf\"\u003e2.1 安装 perf\u003c/h2\u003e\n\n\u003cp\u003e我的环境基于 Ubuntu 17.04 （Zesty）：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003elinux-tools-generic\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eperf \u003cspan class=\"c\"\u003e# test perf\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"22-测试环境\"\u003e2.2 测试环境\u003c/h2\u003e\n\n\u003cp\u003e我们将使用 4 个 IP，其中 2 个为外部可路由网段（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e192.168\u003c/code\u003e）：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003elocalhost，IP \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e127.0.0.1\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e一个干净的容器，IP \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e172.17.0.2\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e我的手机，通过 USB 连接，IP \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e192.168.42.129\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e我的手机，通过 WiFi 连接，IP \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e192.168.43.1\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"23-初体验跟踪-ping-包\"\u003e2.3 初体验：跟踪 ping 包\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf trace\u003c/code\u003e 是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf\u003c/code\u003e 子命令，能够跟踪 packet 路径，默认输出类似于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estrace\u003c/code\u003e（头\n信息少很多）。\u003c/p\u003e\n\n\u003cp\u003e跟踪 ping 向 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e172.17.0.2\u003c/code\u003e 容器的包，这里我们只关心 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet\u003c/code\u003e 事件，忽略系统调用信息：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eperf trace \u003cspan class=\"nt\"\u003e--no-syscalls\u003c/span\u003e \u003cspan class=\"nt\"\u003e--event\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;net:*\u0026#39;\u003c/span\u003e ping 172.17.0.2 \u003cspan class=\"nt\"\u003e-c1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e /dev/null\n     0.000 net:net_dev_queue:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003edocker0 \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988700 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e98\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     0.008 net:net_dev_start_xmit:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003edocker0 \u003cspan class=\"nv\"\u003equeue_mapping\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988700 \u003cspan class=\"nv\"\u003evlan_tagged\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003evlan_proto\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x0000 \u003cspan class=\"nv\"\u003evlan_tci\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x0000 \u003cspan class=\"nv\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x0800 \u003cspan class=\"nv\"\u003eip_summed\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e98 \u003cspan class=\"nv\"\u003edata_len\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003enetwork_offset\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e14 \u003cspan class=\"nv\"\u003etransport_offset_valid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003etransport_offset\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e34 \u003cspan class=\"nv\"\u003etx_flags\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003egso_size\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003egso_segs\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003egso_type\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     0.014 net:net_dev_queue:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003eveth79215ff \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988700 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e98\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     0.016 net:net_dev_start_xmit:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003eveth79215ff \u003cspan class=\"nv\"\u003equeue_mapping\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988700 \u003cspan class=\"nv\"\u003evlan_tagged\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003evlan_proto\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x0000 \u003cspan class=\"nv\"\u003evlan_tci\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x0000 \u003cspan class=\"nv\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x0800 \u003cspan class=\"nv\"\u003eip_summed\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e98 \u003cspan class=\"nv\"\u003edata_len\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003enetwork_offset\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e14 \u003cspan class=\"nv\"\u003etransport_offset_valid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003etransport_offset\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e34 \u003cspan class=\"nv\"\u003etx_flags\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003egso_size\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003egso_segs\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003egso_type\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     0.020 net:netif_rx:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003eeth0 \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988700 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e84\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     0.022 net:net_dev_xmit:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003eveth79215ff \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988700 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e98 \u003cspan class=\"nv\"\u003erc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     0.024 net:net_dev_xmit:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003edocker0 \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988700 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e98 \u003cspan class=\"nv\"\u003erc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     0.027 net:netif_receive_skb:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003eeth0 \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988700 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e84\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     0.044 net:net_dev_queue:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003eeth0 \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988b00 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e98\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     0.046 net:net_dev_start_xmit:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003eeth0 \u003cspan class=\"nv\"\u003equeue_mapping\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988b00 \u003cspan class=\"nv\"\u003evlan_tagged\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003evlan_proto\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x0000 \u003cspan class=\"nv\"\u003evlan_tci\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x0000 \u003cspan class=\"nv\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x0800 \u003cspan class=\"nv\"\u003eip_summed\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e98 \u003cspan class=\"nv\"\u003edata_len\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003enetwork_offset\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e14 \u003cspan class=\"nv\"\u003etransport_offset_valid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003etransport_offset\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e34 \u003cspan class=\"nv\"\u003etx_flags\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003egso_size\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003egso_segs\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003egso_type\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     0.048 net:netif_rx:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003eveth79215ff \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988b00 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e84\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     0.050 net:net_dev_xmit:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003eeth0 \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988b00 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e98 \u003cspan class=\"nv\"\u003erc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     0.053 net:netif_receive_skb:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003eveth79215ff \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988b00 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e84\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     0.060 net:netif_receive_skb_entry:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003edocker0 \u003cspan class=\"nv\"\u003enapi_id\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x3 \u003cspan class=\"nv\"\u003equeue_mapping\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988b00 \u003cspan class=\"nv\"\u003evlan_tagged\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003evlan_proto\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x0000 \u003cspan class=\"nv\"\u003evlan_tci\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x0000 \u003cspan class=\"nv\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x0800 \u003cspan class=\"nv\"\u003eip_summed\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2 \u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x00000000 \u003cspan class=\"nv\"\u003el4_hash\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e84 \u003cspan class=\"nv\"\u003edata_len\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003etruesize\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e768 \u003cspan class=\"nv\"\u003emac_header_valid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003emac_header\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nt\"\u003e-14\u003c/span\u003e \u003cspan class=\"nv\"\u003enr_frags\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003egso_size\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003egso_type\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     0.061 net:netif_receive_skb:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003edocker0 \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988b00 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e84\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e只保留事件名和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskbaddr\u003c/code\u003e，看起来清晰很多：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003enet_dev_queue           \u003cspan class=\"nv\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003edocker0     \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988700\nnet_dev_start_xmit      \u003cspan class=\"nv\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003edocker0     \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988700\nnet_dev_queue           \u003cspan class=\"nv\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eveth79215ff \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988700\nnet_dev_start_xmit      \u003cspan class=\"nv\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eveth79215ff \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988700\nnetif_rx                \u003cspan class=\"nv\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eeth0        \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988700\nnet_dev_xmit            \u003cspan class=\"nv\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eveth79215ff \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988700\nnet_dev_xmit            \u003cspan class=\"nv\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003edocker0     \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988700\nnetif_receive_skb       \u003cspan class=\"nv\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eeth0        \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988700\n\nnet_dev_queue           \u003cspan class=\"nv\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eeth0        \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988b00\nnet_dev_start_xmit      \u003cspan class=\"nv\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eeth0        \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988b00\nnetif_rx                \u003cspan class=\"nv\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eveth79215ff \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988b00\nnet_dev_xmit            \u003cspan class=\"nv\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eeth0        \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988b00\nnetif_receive_skb       \u003cspan class=\"nv\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eveth79215ff \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988b00\nnetif_receive_skb_entry \u003cspan class=\"nv\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003edocker0     \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988b00\nnetif_receive_skb       \u003cspan class=\"nv\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003edocker0     \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff96d481988b00\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里面有很多信息。\u003c/p\u003e\n\n\u003cp\u003e首先注意，\u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskbaddr\u003c/code\u003e 在中间变了\u003c/strong\u003e（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0xffff96d481988700 -\u0026gt; 0xffff96d481988b00\u003c/code\u003e）\n。变的这里，就是\u003cstrong\u003e生成了 ICMP echo reply 包\u003c/strong\u003e，并作为应答包发送的地方。接下来的\n时间，这个包的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskbaddr\u003c/code\u003e 保持不变，说明没有 copy。copy 非常耗时。\u003c/p\u003e\n\n\u003cp\u003e其次，我们可以清楚地看到 \u003cstrong\u003epacket 在内核的传输路径\u003c/strong\u003e：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker0\u003c/code\u003e 网桥\u003c/li\u003e\n  \u003cli\u003eveth pair 的宿主机端（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eveth79215ff\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003eveth pair 的容器端（容器里的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0\u003c/code\u003e）\u003c/li\u003e\n  \u003cli\u003e接下来是相反的返回路径\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e至此，虽然我们还没有看到网络命名空间，但已经得到了一个不错的全局视图。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2 id=\"24-进阶选择跟踪点\"\u003e2.4 进阶：选择跟踪点\u003c/h2\u003e\n\n\u003cp\u003e上面的信息有些杂，还有很多重复。我们可以选择几个最合适的跟踪点，使得输出看起来\n更清爽。要查看所有可用的网络跟踪点，执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf list\u003c/code\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eperf list \u003cspan class=\"s1\"\u003e\u0026#39;net:*\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个命令会列出 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etracepoint\u003c/code\u003e 列表，格式 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet:netif_rx\u003c/code\u003e。\u003cstrong\u003e冒号前面是事件类型\n，后面是事件名字\u003c/strong\u003e。这里我选择 4 个：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_dev_queue\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetif_receive_skb_entry\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetif_rx\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enapi_gro_receive_entry\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e效果：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eperf trace \u003cspan class=\"nt\"\u003e--no-syscalls\u003c/span\u003e           \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e--event\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;net:net_dev_queue\u0026#39;\u003c/span\u003e           \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e--event\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;net:netif_receive_skb_entry\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e--event\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;net:netif_rx\u0026#39;\u003c/span\u003e                \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e--event\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;net:napi_gro_receive_entry\u0026#39;\u003c/span\u003e  \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    ping 172.17.0.2 \u003cspan class=\"nt\"\u003e-c1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e /dev/null\n       0.000 net:net_dev_queue:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003edocker0 \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff8e847720a900 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e98\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n       0.010 net:net_dev_queue:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003eveth7781d5c \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff8e847720a900 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e98\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n       0.014 net:netif_rx:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003eeth0 \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff8e847720a900 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e84\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n       0.034 net:net_dev_queue:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003eeth0 \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff8e849cb8cd00 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e98\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n       0.036 net:netif_rx:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003eveth7781d5c \u003cspan class=\"nv\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0xffff8e849cb8cd00 \u003cspan class=\"nv\"\u003elen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e84\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n       0.045 net:netif_receive_skb_entry:dev\u003cspan class=\"o\"\u003e=\u003c/span\u003edocker0 \u003cspan class=\"nv\"\u003enapi_id\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x1 \u003cspan class=\"nv\"\u003equeue_mapping\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e漂亮！\u003c/p\u003e\n\n\u003ch1 id=\"3-ebpf\"\u003e3 eBPF\u003c/h1\u003e\n\n\u003cp\u003e前面介绍的内容已经可以满足大部分 tracing 场景的需求了。如果你只是想学习如何在\nLinux 上跟踪一个 packet 的传输路径，那到此已经足够了。但如果想跟更进一步，学习如\n何写一个自定义的过滤器，跟踪网络命名空间、源 IP、目的 IP 等信息，请继续往下读。\u003c/p\u003e\n\n\u003ch2 id=\"31-ebpf-和-kprobes\"\u003e3.1 eBPF 和 kprobes\u003c/h2\u003e\n\n\u003cp\u003e从 Linux 内核 4.7 开始，eBPF 程序可以 attach 到内核跟踪点（kernel tracepoints）\n。在此之前，要完成类似的工作，只能用 kprobes 之类的工具 attach 到\u003cstrong\u003e导出的内核函\n数\u003c/strong\u003e（exported kernel sysbols）。后者虽然可以完成工作，但存在很多不足：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e内核的内部（internal）API 不稳定\u003c/li\u003e\n  \u003cli\u003e出于性能考虑，大部分网络相关的内层函数（inner functions）都是内联或者静态的（\ninlined or static），两者都不可探测\u003c/li\u003e\n  \u003cli\u003e找出调用某个函数的所有地方是相当乏味的，有时所需的字段数据不全具备\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e这篇博客的早期版本使用了 kprobes，但结果并不是太好。\n现在，诚实地说，通过内核 tracepoints 访问数据比通过 kprobe 要更加乏味。我尽量保\n持本文简洁，如果你想了解本文稍老的版本，可以访问这里\u003ca href=\"https://blog.yadutaf.fr/2016/03/30/turn-any-syscall-into-event-introducing-ebpf-kernel-probes/\"\u003e英文\n\u003c/a\u003e\n，\u003ca href=\"/blog/ebpf-turn-syscall-to-event-zh\"\u003e中文翻译\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"32-安装\"\u003e3.2 安装\u003c/h2\u003e\n\n\u003cp\u003e我不是一个徒手汇编迷（fans of handwritten assembly），因此接下来将使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebcc\u003c/code\u003e。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebcc\u003c/code\u003e\n是一个灵活强大的工具，允许用受限的 C 语法（restricted C）写内核探测代码，然后用\nPython 在用户态做控制。这种方式对于生产环境算是重量级，但对开发来说非常完美。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：eBPF 需要 Linux Kernel 4.7+。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eUbuntu 17.04 \u003ca href=\"https://github.com/iovisor/bcc/blob/master/INSTALL.md\"\u003e安装 (GitHub)\u003c/a\u003e \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebcc\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Install dependencies\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003ebison build-essential cmake flex git libedit-dev python zlib1g-dev libelf-dev libllvm4.0 llvm-dev libclang-dev luajit luajit-5.1-dev\n\n\u003cspan class=\"c\"\u003e# Grab the sources\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit clone https://github.com/iovisor/bcc.git\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir \u003c/span\u003ebcc/build\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003ebcc/build\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecmake .. \u003cspan class=\"nt\"\u003e-DCMAKE_INSTALL_PREFIX\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e/usr\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emake\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003emake \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"33-自定义跟踪器hello-world\"\u003e3.3 自定义跟踪器：Hello World\u003c/h2\u003e\n\n\u003cp\u003e接下来我们从一个简单的 hello world 例子展示如何在底层打点。我们还是用上一篇\n文章里选择的四个点：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_dev_queue\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetif_receive_skb_entry\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetif_rx\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enapi_gro_receive_entry\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e每当网络包经过这些点，我们的处理逻辑就会触发。为保持简单，我们的处理逻辑只是将程\n序的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecomm\u003c/code\u003e 字段（16 字节）发送出来（到用户空间程序），这个字段里存的是发\n送相应的网络包的程序的名字。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;bcc/proto.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;linux/sched.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// Event structure\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eroute_evt_t\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003ecomm\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTASK_COMM_LEN\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"n\"\u003eBPF_PERF_OUTPUT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroute_evt\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003edo_trace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Built event for userland\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eroute_evt_t\u003c/span\u003e \u003cspan class=\"n\"\u003eevt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebpf_get_current_comm\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomm\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTASK_COMM_LEN\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Send event to userland\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eroute_evt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eperf_submit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eevt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevt\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/**\n  * Attach to Kernel Tracepoints\n  */\u003c/span\u003e\n\u003cspan class=\"n\"\u003eTRACEPOINT_PROBE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enetif_rx\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edo_trace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eTRACEPOINT_PROBE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enet_dev_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edo_trace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eTRACEPOINT_PROBE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enapi_gro_receive_entry\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edo_trace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eTRACEPOINT_PROBE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enetif_receive_skb_entry\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edo_trace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eskbaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，程序 attach 到 4 个 tracepoint，并会访问 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskbaddr\u003c/code\u003e 字段，将其传给处理\n逻辑函数，这个函数现在只是将程序名字发送出来。大家可能会有疑问：\u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eargs-\u0026gt;skbaddr\u003c/code\u003e 是\n哪里来的\u003c/strong\u003e？答案是，每次用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTRACEPONT_PROBE\u003c/code\u003e 定义一个 tracepoint，\u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebcc\u003c/code\u003e 就会为其自\n动生成 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eargs\u003c/code\u003e 参数\u003c/strong\u003e，由于它是动态生成的，因此要查看它的定义不太容易。\u003c/p\u003e\n\n\u003cp\u003e不过，有另外一种简单的方式可以查看。在 Linux 上\u003cstrong\u003e\u003cmark\u003e每个 tracepoint 都对应一个\u003c/mark\u003e\u003c/strong\u003e\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/sys/kernel/debug/tracing/events\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e entry。例如对于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet:netif_rx\u003c/code\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /sys/kernel/debug/tracing/events/net/netif_rx/format\nname: netif_rx\nID: 1183\nformat:\n\tfield:unsigned short common_type\u003cspan class=\"p\"\u003e;\u003c/span\u003e         offset:0\u003cspan class=\"p\"\u003e;\u003c/span\u003e size:2\u003cspan class=\"p\"\u003e;\u003c/span\u003e signed:0\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\tfield:unsigned char common_flags\u003cspan class=\"p\"\u003e;\u003c/span\u003e         offset:2\u003cspan class=\"p\"\u003e;\u003c/span\u003e size:1\u003cspan class=\"p\"\u003e;\u003c/span\u003e signed:0\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\tfield:unsigned char common_preempt_count\u003cspan class=\"p\"\u003e;\u003c/span\u003e offset:3\u003cspan class=\"p\"\u003e;\u003c/span\u003e size:1\u003cspan class=\"p\"\u003e;\u003c/span\u003e signed:0\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\tfield:int common_pid\u003cspan class=\"p\"\u003e;\u003c/span\u003e                     offset:4\u003cspan class=\"p\"\u003e;\u003c/span\u003e size:4\u003cspan class=\"p\"\u003e;\u003c/span\u003e signed:1\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\tfield:void \u003cspan class=\"k\"\u003e*\u003c/span\u003e skbaddr\u003cspan class=\"p\"\u003e;\u003c/span\u003e         offset:8\u003cspan class=\"p\"\u003e;\u003c/span\u003e  size:8\u003cspan class=\"p\"\u003e;\u003c/span\u003e signed:0\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\tfield:unsigned int len\u003cspan class=\"p\"\u003e;\u003c/span\u003e       offset:16\u003cspan class=\"p\"\u003e;\u003c/span\u003e size:4\u003cspan class=\"p\"\u003e;\u003c/span\u003e signed:0\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\tfield:__data_loc char[] name\u003cspan class=\"p\"\u003e;\u003c/span\u003e offset:20\u003cspan class=\"p\"\u003e;\u003c/span\u003e size:4\u003cspan class=\"p\"\u003e;\u003c/span\u003e signed:1\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\nprint \u003cspan class=\"nb\"\u003efmt\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;dev=%s skbaddr=%p len=%u\u0026#34;\u003c/span\u003e, __get_str\u003cspan class=\"o\"\u003e(\u003c/span\u003ename\u003cspan class=\"o\"\u003e)\u003c/span\u003e, REC-\u0026gt;skbaddr, REC-\u0026gt;len\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e注意\u003cstrong\u003e最后一行\u003c/strong\u003e \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eprint fmt\u003c/code\u003e，这正是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf trace\u003c/code\u003e 打印相应消息的格式。\u003c/p\u003e\n\n\u003cp\u003e在底层插入这样的探测点之后，我们再写个 Python 脚本，接收内核发出来的消息，每个\neBPF 发出的数据都打印一行：\u003c/p\u003e\n\n\u003cdiv class=\"language-python highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e#!/usr/bin/env python\n# coding: utf-8\n\u003c/span\u003e\n\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003esocket\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003einet_ntop\u003c/span\u003e\n\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003ebcc\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF\u003c/span\u003e\n\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003ectypes\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ect\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ebpf_text\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;\u0026#39;\u0026#39;\u0026lt;SEE CODE SNIPPET ABOVE\u0026gt;\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eTASK_COMM_LEN\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e \u003cspan class=\"c1\"\u003e# linux/sched.h\n\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRouteEvt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStructure\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e_fields_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;comm\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e    \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ec_char\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eTASK_COMM_LEN\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eevent_printer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecpu\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e# Decode event\n\u003c/span\u003e    \u003cspan class=\"n\"\u003eevent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePOINTER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eRouteEvt\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"n\"\u003econtents\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e# Print event\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Just got a packet from %s\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomm\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003e__name__\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;__main__\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003ebpf_text\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;route_evt\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eopen_perf_buffer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevent_printer\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"bp\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekprobe_poll\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e现在可以测试了，注意需要 root 权限。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：现在的代码没有对包做任何过滤，因此即便你的机器网络流量很小，输出也很可能刷屏！\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003esudo \u003c/span\u003epython ./tracepkt.py\n...\nJust got a packet from ping6\nJust got a packet from ping6\nJust got a packet from ping\nJust got a packet from irq/46-iwlwifi\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e上面的输出显示，我正在使用 ping 和 ping6，另外 WiFi 驱动也收到了一些包。\u003c/p\u003e\n\n\u003ch2 id=\"34-自定义跟踪器改进\"\u003e3.4 自定义跟踪器：改进\u003c/h2\u003e\n\n\u003cp\u003e接下来添加一些有用的数据/过滤条件。\u003c/p\u003e\n\n\u003ch3 id=\"341-添加网卡信息\"\u003e3.4.1 添加网卡信息\u003c/h3\u003e\n\n\u003cp\u003e首先，可以安全地删除前面代码中的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecomm\u003c/code\u003e 字段，它在这里没什么用处。然后，include\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet/inet_sock.h\u003c/code\u003e 头文件，这里有我们所需要的函数声明。最后给 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eevent\u003c/code\u003e 结构体添加\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003echar ifname[IFNAMSIZ]\u003c/code\u003e 字段。\u003c/p\u003e\n\n\u003cp\u003e现在可以从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edevice\u003c/code\u003e 结构体中访问 device name 字段。这里开始展示出 \u003cstrong\u003eeBPF 代码的\n强大之处\u003c/strong\u003e：我们可以访问任何受控范围内的字段。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Get device pointer, we\u0026#39;ll need it to get the name and network namespace\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet_device\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebpf_probe_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eoffsetof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Load interface name\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebpf_probe_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eevt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eifname\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eIFNAMSIZ\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e现在你可以测试一下，这样是能工作的。注意相应地修改一下 Python 部分。那么，它是怎\n么工作的呢？\u003c/p\u003e\n\n\u003cp\u003e我们引入了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_device\u003c/code\u003e 结构体来访问\u003cstrong\u003e网卡名字\u003c/strong\u003e字段。第一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_probe_read\u003c/code\u003e 从内核\n的网络包中将网卡名字拷贝到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev\u003c/code\u003e，第二个将其接力复制到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eevt.ifname\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e不要忘了，eBPF 的目标是允许安全地编写在内核运行的脚本。这意味着，随机内存访问是绝\n对不允许的。所有的内存访问都要经过验证。\u003cstrong\u003e除非要访问的内存在协议栈\u003c/strong\u003e，否则都需要通\n过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_probe_read\u003c/code\u003e 读取数据。这会使得代码看起来很繁琐，但非常安全。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_probe_read\u003c/code\u003e\n像是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ememcpy\u003c/code\u003e 的一个更安全的版本，它定义在内核源文件\n\u003ca href=\"http://elixir.free-electrons.com/linux/v4.10.17/source/kernel/trace/bpf_trace.c#L64\"\u003ebpf_trace.c\u003c/a\u003e\n中:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e它和 memcpy 类似，因此注意内存拷贝的代价\u003c/li\u003e\n  \u003cli\u003e如果遇到错误，它会返回一个错误和一个初始化为 0 的缓冲区，而不会造成程序崩溃或停\n止运行\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e接下来为使代码看起来更加简洁，我将使用如下宏：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#define member_read(destination, source_struct, source_member)                 \\\n  do{                                                                          \\\n    bpf_probe_read(                                                            \\\n      destination,                                                             \\\n      sizeof(source_struct-\u0026gt;source_member),                                    \\\n      ((char*)source_struct) + offsetof(typeof(*source_struct), source_member) \\\n    );                                                                         \\\n  } while(0)\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这样上面的例子就可以写成：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003emember_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"342-添加网络命名空间-id\"\u003e3.4.2 添加网络命名空间 ID\u003c/h3\u003e\n\n\u003cp\u003e采集网络命名空间信息非常有用，但是实现起来要复杂一些。原理上可以从两个地方访问：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003esocket 结构体 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003edevice 结构体 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e当我在写\n\u003ca href=\"https://github.com/iovisor/bcc/blob/master/tools/solisten.py\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esolisten.py\u003c/code\u003e\u003c/a\u003e时\n，我使用的时 socket 结构体。不幸的是，不知道为什么，网络命名空间 ID 在跨命名空间的地\n方消失了。这个字段全是 0，很明显是有非法内存访问时的返回值（回忆前面介绍的\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_probe_read\u003c/code\u003e 如何处理错误）。\u003c/p\u003e\n\n\u003cp\u003e幸好 device 结构体工作正常。想象一下，我们可以问一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epacket\u003c/code\u003e 它在哪个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e网卡\u003c/code\u003e，进而\n问这个网卡它在哪个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e网络命名空间\u003c/code\u003e。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Get netns id. Equivalent to: evt.netns = dev-\u0026gt;nd_net.net-\u0026gt;ns.inum\u003c/span\u003e\n\u003cspan class=\"n\"\u003epossible_net_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskc_net\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003end_net\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003emember_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskc_net\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ens_common\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ens\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emember_address\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ens\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003emember_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eevt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enetns\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ens\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中的宏定义如下：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#define member_address(source_struct, source_member) \\\n({                                                   \\\n  void* __ret;                                       \\\n  __ret = (void*) (((char*)source_struct) + offsetof(typeof(*source_struct), source_member)); \\\n  __ret;                                             \\\n})\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个宏还可以用于简化 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emember_read\u003c/code\u003e，这个就留给读者作为练习了。\u003c/p\u003e\n\n\u003cp\u003e好了，有了以上实现，我们再运行的效果就是：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003esudo \u003c/span\u003epython ./tracepkt.py\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026531957]          docker0\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026531957]      vetha373ab6\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026532258]             eth0\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026532258]             eth0\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026531957]      vetha373ab6\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026531957]          docker0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果 ping 一个容器，你看到的就是类似上面的输出。packet 首先经过本地的 docker0 网桥，\n然后经 veth pair 跨过网络命名空间，最后到达容器的 eth0 网卡。应答包沿着相反的路径回\n到宿主机。\u003c/p\u003e\n\n\u003cp\u003e至此，功能是实现了，不过还太粗糙，继续改进。\u003c/p\u003e\n\n\u003ch3 id=\"343-只跟踪-icmp-echo-requestreply-包\"\u003e3.4.3 只跟踪 ICMP echo request/reply 包\u003c/h3\u003e\n\n\u003cp\u003e这次我们将读取包的 IP 信息，这里我只展示 IPv4 的例子，IPv6 的与此类似。\u003c/p\u003e\n\n\u003cp\u003e不过，事情也并没有那么简单。我们是在和 kernel 的网络部分打交道。一些包可能还没被打\n开，这意味着，变量的很多字段是没有初始化的。我们只能从 MAC 头开始，用 offset 的方式\n计算 IP 头和 ICMP 头的位置。\u003c/p\u003e\n\n\u003cp\u003e首先从 MAC 头地址推导 IP 头地址。这里我们不（从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb\u003c/code\u003e 的相应字段）加载 MAC 头长\n度信息，而假设它就是固定的 14 字节。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Compute MAC header address\u003c/span\u003e\n\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eu16\u003c/span\u003e \u003cspan class=\"n\"\u003emac_header\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emember_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e       \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003emember_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003emac_header\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emac_header\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Compute IP Header address\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#define MAC_HEADER_SIZE 14;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eip_header_address\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehead\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003emac_header\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eMAC_HEADER_SIZE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这假设了 IP 头从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb-\u0026gt;head + skb-\u0026gt;mac_header + MAC_HEADER_SIZE\u003c/code\u003e 处开始。\n现在可以解析 IP 头第一个字节的前 4 个 bit 了：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Load IP protocol version\u003c/span\u003e\n\u003cspan class=\"n\"\u003eu8\u003c/span\u003e \u003cspan class=\"n\"\u003eip_version\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebpf_probe_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eip_version\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eu8\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eip_header_address\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003eip_version\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eip_version\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0xf\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Filter IPv4 packets\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eip_version\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后加载整个 IP 头，获取 IP 地址，以使得 Python 程序的输出看起来更有意义。另外注意，IP\n包内的下一个头就是 ICMP 头。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Load IP Header\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eiphdr\u003c/span\u003e \u003cspan class=\"n\"\u003eiphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebpf_probe_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eiphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eip_header_address\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Load protocol and address\u003c/span\u003e\n\u003cspan class=\"n\"\u003eu8\u003c/span\u003e \u003cspan class=\"n\"\u003eicmp_offset_from_ip_header\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eiphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eihl\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eevt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eiphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eevt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eiphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Filter ICMP packets\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eIPPROTO_ICMP\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后，加载 ICMP 头，如果是 ICMP echo request 或 reply，就读取序列号：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Compute ICMP header address and load ICMP header\u003c/span\u003e\n\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eicmp_header_address\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eip_header_address\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eicmp_offset_from_ip_header\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eicmphdr\u003c/span\u003e \u003cspan class=\"n\"\u003eicmphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebpf_probe_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eicmphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eicmphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eicmp_header_address\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Filter ICMP echo request and echo reply\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eicmphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eICMP_ECHO\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eicmphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eICMP_ECHOREPLY\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Get ICMP info\u003c/span\u003e\n\u003cspan class=\"n\"\u003eevt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eicmptype\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eicmphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eevt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eicmpid\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eicmphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eun\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eecho\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eevt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eicmpseq\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eicmphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eun\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eecho\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Fix endian\u003c/span\u003e\n\u003cspan class=\"n\"\u003eevt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eicmpid\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebe16_to_cpu\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eicmpid\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003eevt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eicmpseq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebe16_to_cpu\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eicmpseq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这就是全部工作了。\u003c/p\u003e\n\n\u003cp\u003e如果想过滤特定的 ping 进程的包，那可以认为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eevt.icmpid\u003c/code\u003e 就是相应 ping 进程的进程号，\n至少 Linux 上如此。\u003c/p\u003e\n\n\u003ch2 id=\"35-最终效果\"\u003e3.5 最终效果\u003c/h2\u003e\n\n\u003cp\u003e再写一些比较简单的 Python 程序配合，就可以测试我们的跟踪器在多种场景下的用途。\n以 root 权限启动这个程序，在不同终端发起几个 ping 进程，就会看到：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# ping -4 localhost\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026531957]               lo request \u003cspan class=\"c\"\u003e#20212.001 127.0.0.1 -\u0026gt; 127.0.0.1\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026531957]               lo request \u003cspan class=\"c\"\u003e#20212.001 127.0.0.1 -\u0026gt; 127.0.0.1\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026531957]               lo   reply \u003cspan class=\"c\"\u003e#20212.001 127.0.0.1 -\u0026gt; 127.0.0.1\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026531957]               lo   reply \u003cspan class=\"c\"\u003e#20212.001 127.0.0.1 -\u0026gt; 127.0.0.1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个 ICMP 请求是进程 20212（Linux ping 的 ICMP ID）在 loopback 网卡发出的，最后的\nreply 原路回到了这个 loopback。这个环回接口既是发送网卡又是接收网卡。\u003c/p\u003e\n\n\u003cp\u003e如果是我的 WiFi 网关会是什么样子内？\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# ping -4 192.168.43.1\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026531957]           wlp2s0 request \u003cspan class=\"c\"\u003e#20710.001 192.168.43.191 -\u0026gt; 192.168.43.1\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026531957]           wlp2s0   reply \u003cspan class=\"c\"\u003e#20710.001 192.168.43.1 -\u0026gt; 192.168.43.191\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，这种情况下走的是 WiFi 网卡，也没问题。\u003c/p\u003e\n\n\u003cp\u003e另外说点题外话：还记得刚开始只打印程序名的版本吗？如果在上面这种情况下执行，ICMP\n请求打印的程序名会是 ping，而应答包打印的程序名会是 WiFi 驱动，因为是驱动发的应答包，至\n少 Linux 上是如此。\u003c/p\u003e\n\n\u003cp\u003e最后还是拿我最喜欢的例子来做测试：ping 容器。之所以最喜欢并不是因为 Docker，而是\n它展示了eBPF 的强大，\u003cstrong\u003e就像给 ping 过程做了一次 X 射线检查\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# ping -4 172.17.0.2\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026531957]          docker0 request \u003cspan class=\"c\"\u003e#17146.001 172.17.0.1 -\u0026gt; 172.17.0.2\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026531957]      vetha373ab6 request \u003cspan class=\"c\"\u003e#17146.001 172.17.0.1 -\u0026gt; 172.17.0.2\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026532258]             eth0 request \u003cspan class=\"c\"\u003e#17146.001 172.17.0.1 -\u0026gt; 172.17.0.2\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026532258]             eth0   reply \u003cspan class=\"c\"\u003e#17146.001 172.17.0.2 -\u0026gt; 172.17.0.1\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026531957]      vetha373ab6   reply \u003cspan class=\"c\"\u003e#17146.001 172.17.0.2 -\u0026gt; 172.17.0.1\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4026531957]          docker0   reply \u003cspan class=\"c\"\u003e#17146.001 172.17.0.2 -\u0026gt; 172.17.0.1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e来点 ASCII 艺术，就变成：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e       Host netns           | Container netns\n+---------------------------+-----------------+\n| docker0 \u003cspan class=\"nt\"\u003e---\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e veth0e65931 \u003cspan class=\"nt\"\u003e---\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e eth0          |\n+---------------------------+-----------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"4-结束语\"\u003e4 结束语\u003c/h1\u003e\n\n\u003cp\u003e在 eBPF/bcc 出现之前，要深入的排查和追踪很多网络问题，只能靠给内核打补丁。现在，我\n们可以比较方便地用 eBPF/bcc 编写一些工具来完成这些事情。tracepoint 也很方便\n，提醒了我们可以在哪些地方进行探测，从而避免了去看繁杂的内核代码。即使是 kprobe 无法探测\n的一些地方，例如一些内联函数和静态函数，eBPF/bcc 也可以探测。\u003c/p\u003e\n\n\u003cp\u003e本文的例子要添加对 IPv6 的支持也非常简单，就留给读者作为练习。\u003c/p\u003e\n\n\u003cp\u003e要使本文更加完善的话，需要对我们的程序做性能测试。但考虑到文章本身已经非常\n长，这里就不做了。\u003c/p\u003e\n\n\u003cp\u003e对本文代码进行改进，然后用在跟踪路由和 iptables 判决，或是 ARP 包，也是很有意思的。\n这将会把它变成一个完美的 X 射线跟踪器，对像我这样需要经常处理复杂网络问题的\n人来说将非常有用。\u003c/p\u003e\n\n\u003cp\u003e完整的（包含 IPv6 支持）代码：\n\u003ca href=\"https://github.com/yadutaf/tracepkt\"\u003ehttps://github.com/yadutaf/tracepkt\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e最后，我要感谢 \u003ca href=\"https://twitter.com/fcabestre\"\u003e@fcabestre\u003c/a\u003e帮我将这篇文章的草稿从\n一个异常的硬盘上恢复出来，感谢 \u003ca href=\"https://twitter.com/bluxte\"\u003e@bluxte\u003c/a\u003e的耐心审读，\n以及技术上使得本文成为可能的 \u003ca href=\"https://github.com/iovisor/bcc\"\u003ebcc\u003c/a\u003e 团队。\u003c/p\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/tcpdump/\"\u003e\u003cspan\u003e« tcpdump: An Incomplete Guide\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/ebpf-turn-syscall-to-event-zh/\"\u003e\u003cspan\u003e[译] eBPF 内核探测：如何将任意系统调用转换成事件（2016） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2018-11-30T00:00:00Z",
  "Author": "Arthur Chiao"
}