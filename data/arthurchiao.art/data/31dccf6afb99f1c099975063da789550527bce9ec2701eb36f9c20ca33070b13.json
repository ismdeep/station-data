{
  "Source": "arthurchiao.art",
  "Title": "Host Disconnect Caused by Istio Sidecar Injection",
  "Link": "https://arthurchiao.art/blog/host-disconnect-caused-by-istio-sidecar-injection/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eHost Disconnect Caused by Istio Sidecar Injection\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2019-10-27 | Last Update 2019-10-27\u003c/p\u003e\n  \n  \u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#1-problem\" id=\"markdown-toc-1-problem\"\u003e1 Problem\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-phenomemon\" id=\"markdown-toc-11-phenomemon\"\u003e1.1 Phenomemon\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-environment-info\" id=\"markdown-toc-12-environment-info\"\u003e1.2 Environment Info\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-minimum-reproducing-scheme\" id=\"markdown-toc-2-minimum-reproducing-scheme\"\u003e2 Minimum reproducing scheme\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-trouble-shooting\" id=\"markdown-toc-3-trouble-shooting\"\u003e3 Trouble Shooting\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-check-ingressegress-traffic-interrupt\" id=\"markdown-toc-31-check-ingressegress-traffic-interrupt\"\u003e3.1 Check ingress/egress traffic interrupt\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-check-iptables-rules\" id=\"markdown-toc-32-check-iptables-rules\"\u003e3.2 Check iptables rules\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-check-drops\" id=\"markdown-toc-33-check-drops\"\u003e3.3 Check drops\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-capture-all-host-traffic\" id=\"markdown-toc-34-capture-all-host-traffic\"\u003e3.4 Capture all host traffic\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#35-further-findings\" id=\"markdown-toc-35-further-findings\"\u003e3.5 Further Findings\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-direct-cause\" id=\"markdown-toc-4-direct-cause\"\u003e4 Direct Cause\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-fixup\" id=\"markdown-toc-5-fixup\"\u003e5 Fixup\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#6-root-cause-still-missing\" id=\"markdown-toc-6-root-cause-still-missing\"\u003e6 Root Cause (still missing)\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#7-closing-words\" id=\"markdown-toc-7-closing-words\"\u003e7 Closing Words\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#appendix\" id=\"markdown-toc-appendix\"\u003eAppendix\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#a-simple-service-used-for-problem-reproduction\" id=\"markdown-toc-a-simple-service-used-for-problem-reproduction\"\u003eA: Simple Service used for problem reproduction\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#appendix-b-ipv4-link-local-address-1692540016-and-dhcp\" id=\"markdown-toc-appendix-b-ipv4-link-local-address-1692540016-and-dhcp\"\u003eAppendix B: IPv4 Link local Address (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e169.254.0.0/16\u003c/code\u003e) and DHCP\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"1-problem\"\u003e1 Problem\u003c/h1\u003e\n\n\u003ch2 id=\"11-phenomemon\"\u003e1.1 Phenomemon\u003c/h2\u003e\n\n\u003cp\u003eWe met a network interrupt problem in our istio environment: \u003cstrong\u003e\u003cmark\u003eas long as istio\nsidecar injection is enabled, the host will suffer a disconnection\u003c/mark\u003e\u003c/strong\u003e (e.g. SSH\nconnections to this host was dropped) \u003cstrong\u003e\u003cmark\u003ewhen a new pod is launching on this\nhost\u003c/mark\u003e\u003c/strong\u003e. The disconnection lasts about 30 seconds, then automatically restores.\u003c/p\u003e\n\n\u003cp\u003eThis post summarizes the trouble shooting steps we went through, the direct\ncauses we’ve found, and the fixups we’ve made.\u003c/p\u003e\n\n\u003ch2 id=\"12-environment-info\"\u003e1.2 Environment Info\u003c/h2\u003e\n\n\u003cp\u003eK8S cluster information:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eHost: Linux 4.14+ (custom patched)\u003c/li\u003e\n  \u003cli\u003eHost network: 2 NICs, bonding via OVS\u003c/li\u003e\n  \u003cli\u003eService mesh: istio  1.2.4\u003c/li\u003e\n  \u003cli\u003eNetwork solution: Cilium 1.6.2 (custom patched) + bird 2.x (BGP agent)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/host-disconnect-caused-by-istio-sidecar-injection/host-topo.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e Fig. 1.1 Host network topology\u003c/p\u003e\n\n\u003ch1 id=\"2-minimum-reproducing-scheme\"\u003e2 Minimum reproducing scheme\u003c/h1\u003e\n\n\u003cp\u003eAfter some preliminary investigations, we narrowed down the problem to following scope:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eistio sidecar injection on/off directly resulted to this problem’s\nappear/disappear\u003c/li\u003e\n  \u003cli\u003eall hosts behaved the same\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eBased on this information, we made a \u003cstrong\u003eminimum reproducing scheme\u003c/strong\u003e: creating\n(or scaling up) a simple service, and utilizing node affinity properties to\nschedule the pods to specific node, so we could do capturing works at the node\nbeforehand:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl create \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e nginx-sts.yaml\n\n\u003cspan class=\"c\"\u003e# or scale up if it already exists\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl scale sts web \u003cspan class=\"nt\"\u003e--replicas\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eSee Appendix A for \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enginx-sts.yaml\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch1 id=\"3-trouble-shooting\"\u003e3 Trouble Shooting\u003c/h1\u003e\n\n\u003cp\u003eAs has been said, we managed to schedule the test pod to a specific node. During\ntesting, we chose an empty node, this greatly reduced the traffic we needed to\nanalyze.\u003c/p\u003e\n\n\u003ch2 id=\"31-check-ingressegress-traffic-interrupt\"\u003e3.1 Check ingress/egress traffic interrupt\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/host-disconnect-caused-by-istio-sidecar-injection/ping-check.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e Fig. 3.1 Ping check\u003c/p\u003e\n\n\u003cp\u003eFirst, we’d like to check whether both the egress/ingress traffic were\ninterrupted during this period, or only one direction, so we did this:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eselected another node node2, where node1 and node2 could reach each other via ICMP (ping)\u003c/li\u003e\n  \u003cli\u003ekept pinging node2 from node1\u003c/li\u003e\n  \u003cli\u003ekept pinging node1 from node2\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThen\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003ecapture all \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enode1\u0026lt;--\u0026gt;node2\u003c/code\u003e ICMP traffic on physical NICs of node1\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubectl create -f nginx-sts.yaml\u003c/code\u003e, schedule pod to node1\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWe found that the \u003cstrong\u003eegress packets (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enode1-\u0026gt;node2\u003c/code\u003e) was not interrupted\u003c/strong\u003e during\nsidecar injection, while the \u003cstrong\u003eingress traffic (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enode2-\u0026gt;node1\u003c/code\u003e) disappeared\u003c/strong\u003e\nfrom physical NICs during that period.\u003c/p\u003e\n\n\u003cp\u003eThis indicated that the ingress traffic to this host was either intercepted by\nsome stuff - or dropped somewhere - before tcpdump capturing point.\u003c/p\u003e\n\n\u003ch2 id=\"32-check-iptables-rules\"\u003e3.2 Check iptables rules\u003c/h2\u003e\n\n\u003cp\u003eOur first guess was that there might be some buggy iptables rules during sidecar\ninjection. So we dumped all the iptables rules on the host (one dump each\nsecond) and saved to file, comparing the rules before injection, during\ninjection and after injection, but nothing seemed abnormal.\u003c/p\u003e\n\n\u003ch2 id=\"33-check-drops\"\u003e3.3 Check drops\u003c/h2\u003e\n\n\u003cp\u003eQuickly checked the physical NICs’s statistics, also not noticed any obvious dropping.\u003c/p\u003e\n\n\u003ch2 id=\"34-capture-all-host-traffic\"\u003e3.4 Capture all host traffic\u003c/h2\u003e\n\n\u003cp\u003eWith no other means, we had to capture all traffic went through the host.\nThanks to that there were only our test pod on this host, the traffic was not\nlarge.\u003c/p\u003e\n\n\u003cp\u003eFirst capturing all traffic on all physical NICs:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etcpdump \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e eth0 \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e eth0.pcap\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etcpdump \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e eth1 \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e eth1.pcap\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThen creating service (set node affinity to this node in yaml):\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl create \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e nginx-sts.yaml\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWaiting for the problem’s appear and disappear (60s or so), then stopping the\ncapturing.  Analyzing the traffic:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etcpdump \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e eth0.pcap\n 15:38:52.862377 2e:ce:c1:bb:f4:d9 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 04:40:a9:dc:61:a4, ethertype IPv4 \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x0800\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 10.6.1.196 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.6.1.194\n 15:39:52.880618 04:40:a9:dc:61:a4 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 2e:ce:c1:bb:f4:d9, ethertype IPv4 \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x0800\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 10.6.1.194 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.6.1.196\n ...\n 15:38:54.874005 2e:ce:c1:bb:f4:d9 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 04:40:a9:dc:61:a4, ethertype IPv4 \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x0800\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 10.6.1.196 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.6.1.194\n 15:38:54.875537 04:40:a9:dc:61:a4 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10:51:72:27:4b:4f, ethertype IPv4 \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x0800\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 10.6.1.194 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.6.1.196\n ...\n 15:39:22.088589 2e:ce:c1:bb:f4:d9 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 04:40:a9:dc:61:a4, ethertype ARP \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x0806\u003cspan class=\"o\"\u003e)\u003c/span\u003e, Request who-has 10.6.1.194 tell 10.6.1.196\n 15:39:22.091433 04:40:a9:dc:61:a4 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 2e:ce:c1:bb:f4:d9, ethertype ARP \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x0806\u003cspan class=\"o\"\u003e)\u003c/span\u003e, Reply 10.6.1.194 is-at 04:40:a9:dc:61:a4\n 15:39:22.600618 04:40:a9:dc:61:a4 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 2e:ce:c1:bb:f4:d9, ethertype IPv4 \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x0800\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 10.6.1.194 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.6.1.196\n ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ewhere \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-n\u003c/code\u003e specified numerical output, and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-e\u003c/code\u003e printed MAC address of each packets.\u003c/p\u003e\n\n\u003cp\u003eSome MAC and IP info:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e2e:ce:c1:bb:f4:d9\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.6.1.196\u003c/code\u003e: MAC and IP (host IP) of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emgnt\u003c/code\u003e device\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e04:40:a9:dc:61:a4\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.6.1.194\u003c/code\u003e: BGP Peer’s MAC and IP\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReplace the above, we get:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etcpdump \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e eth0.pcap\n 15:38:52.862377 MGNT_MAC \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e BGP_PEER_MAC,           ethertype IPv4 \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x0800\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 10.6.1.196 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.6.1.194\n 15:39:52.880618 BGP_PEER_MAC \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e MGNT_MAC,           ethertype IPv4 \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x0800\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 10.6.1.194 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.6.1.196\n 15:38:52.897481 10:51:72:27:4b:4f \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e Broadcast,     ethertype ARP \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x0806\u003cspan class=\"o\"\u003e)\u003c/span\u003e, Request who-has 169.254.169.254 tell 10.6.1.196\n ...                                                \n 15:38:54.874005 MGNT_MAC \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e BGP_PEER_MAC,           ethertype IPv4 \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x0800\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 10.6.1.196 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.6.1.194\n 15:38:54.875537 BGP_PEER_MAC \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10:51:72:27:4b:4f,  ethertype IPv4 \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x0800\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 10.6.1.194 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.6.1.196\n 15:38:54.xxxxxx MGNT_MAC \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e OTHER_HOST_MAC,         ethertype IPv4 \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x0800\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 10.6.1.196 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.6.1.194\n 15:38:54.xxxxxx OTHER_HOST_MAC \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10:51:72:27:4b:4f,ethertype IPv4 \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x0800\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 10.6.1.194 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.6.1.196\n   ...\n 15:39:22.088589 MGNT_MAC \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e BGP_PEER_MAC,           ethertype ARP \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x0806\u003cspan class=\"o\"\u003e)\u003c/span\u003e, Request who-has 10.6.1.194 tell 10.6.1.196\n 15:39:22.091433 BGP_PEER_MAC \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e MGNT_MAC,           ethertype ARP \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x0806\u003cspan class=\"o\"\u003e)\u003c/span\u003e, Reply 10.6.1.194 is-at \u0026lt;BGP PEER MAC\u0026gt;\n 15:39:22.600618 BGP_PEER_MAC \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e MGNT_MAC,           ethertype IPv4 \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x0800\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 10.6.1.194 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.6.1.196\n ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWe noticed this:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003ebefore sidecar injection happened (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e15:38:52\u003c/code\u003e), all host’s egress traffic was\nsent with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc_mac=MGNT_MAC,src_ip=HOST_IP\u003c/code\u003e, and all ingress traffic to host\nIP that received had \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_mac=MGNT_MAC,dst_ip=HOST_IP\u003c/code\u003e, this was \u003cstrong\u003ecorrect\u003c/strong\u003e!\u003c/li\u003e\n  \u003cli\u003eat the time the injection happened, the host sent out an ARP request, with\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc_ip=HOST_IP\u003c/code\u003e but \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003esrc_mac=10:51:72:27:4b:4f\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e,\nthen in the subsequent 30s, all\negress traffic of this host still used \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc_mac=MGNT_MAC,src_ip=HOST_IP\u003c/code\u003e\n(\u003cstrong\u003ecorrect\u003c/strong\u003e), but all responded traffic (yes, they were responded) had\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_mac=10:51:72:27:4b:4f,dst_ip=HOST_IP\u003c/code\u003e, due to the \u003cstrong\u003e\u003cmark\u003eMAC mismatch\u003c/mark\u003e\u003c/strong\u003e,\n\u003cstrong\u003eall those ingress traffic not arrived \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emgnt\u003c/code\u003e device\u003c/strong\u003e (which was why our SSH\nconnections get disconnected)\u003c/li\u003e\n  \u003cli\u003e30s later, the host sent out another ARP request with correct MAC and IP:\n \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc_mac=MGNT_MAC,src_ip=HOST_IP\u003c/code\u003e, subsequently, the ingress traffic after\n this took the correct \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_mac=MGNT_MAC\u003c/code\u003e, and \u003cstrong\u003ehost network restored\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"35-further-findings\"\u003e3.5 Further Findings\u003c/h2\u003e\n\n\u003cp\u003eSo the \u003cstrong\u003edirect reason\u003c/strong\u003e is that the host sent a ARP request with a wrong MAC,\nwhich flushed the forwarding table of the switches in the physical network, so\nall subsequent ingress to HOST_IP was chose the wrong MAC by TOR, and those\npackets were not forwarded to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emgnt\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBut where did this wrong MAC \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10:51:72:27:4b:4f\u003c/code\u003e come from? Digging further on\nhost:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node:~  \u003cspan class=\"c\"\u003e# ip l | grep -B 1 10:51:72:27:4b:4f\u003c/span\u003e\n3: eth1: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc mq master ovs-system state UP mode DEFAULT qlen 1000\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 10:51:72:29:1b:50 brd ff:ff:ff:ff:ff:ff\n\u003cspan class=\"nt\"\u003e--\u003c/span\u003e\n7: br-bond: \u0026lt;BROADCAST,MULTICAST\u0026gt; mtu 1500 qdisc noop state DOWN mode DEFAULT qlen 1000\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 10:51:72:29:1b:50 brd ff:ff:ff:ff:ff:ff\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node1:~  \u003cspan class=\"c\"\u003e# ovs-vsctl show\u003c/span\u003e\n    Bridge br-bond\n        Port br-bond\n            Interface br-bond\n                \u003cspan class=\"nb\"\u003etype\u003c/span\u003e: internal\n        Port \u003cspan class=\"s2\"\u003e\u0026#34;mgnt\u0026#34;\u003c/span\u003e\n            Interface \u003cspan class=\"s2\"\u003e\u0026#34;mgnt\u0026#34;\u003c/span\u003e\n                \u003cspan class=\"nb\"\u003etype\u003c/span\u003e: internal\n        Port \u003cspan class=\"s2\"\u003e\u0026#34;bond1\u0026#34;\u003c/span\u003e\n            Interface \u003cspan class=\"s2\"\u003e\u0026#34;eth1\u0026#34;\u003c/span\u003e\n            Interface \u003cspan class=\"s2\"\u003e\u0026#34;eth0\u0026#34;\u003c/span\u003e\n    ovs_version: \u003cspan class=\"s2\"\u003e\u0026#34;2.5.6\u0026#34;\u003c/span\u003e\n\nroot@node:~  \u003cspan class=\"c\"\u003e# ovs-appctl bond/show\u003c/span\u003e\nbond_mode: balance-slb\n...\nactive slave mac: 10:51:72:29:1b:50\u003cspan class=\"o\"\u003e(\u003c/span\u003eeth1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\nslave eth0: enabled\n        may_enable: \u003cspan class=\"nb\"\u003etrue\n\n\u003c/span\u003eslave eth1: enabled\n        active slave\n        may_enable: \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIt can be seen that this MAC belonged to physical NIC \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth1\u003c/code\u003e, and it was\nthe active slave for the OVS bond during this period.\u003c/p\u003e\n\n\u003cp\u003eBut why would the HOST used this MAC for boradcasting? Further digging:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node:~  \u003cspan class=\"c\"\u003e# route -n\u003c/span\u003e\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n...\n169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth1\n169.254.0.0     0.0.0.0         255.255.0.0     U     1003   0        0 eth0\n169.254.0.0     0.0.0.0         255.255.0.0     U     1007   0        0 mgnt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eNotice it? In the pcap file we saw the broadcasting packet with a\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_ip=169.254.169.254\u003c/code\u003e, when the host networking stack chose MAC for this\npacket, there would be three entries matching:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth1\n169.254.0.0     0.0.0.0         255.255.0.0     U     1003   0        0 eth0\n169.254.0.0     0.0.0.0         255.255.0.0     U     1007   0        0 mgnt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIn this situation, the Metric (priority flag) will be checked. Since the entry\nvia \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth1\u003c/code\u003e with the highest priority, that route entry would be chosen, and the\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc_mac\u003c/code\u003e thus would be \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth1\u003c/code\u003e’s MAC, which was just \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10:51:72:29:1b:50\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBut why there were those rules? It turns out that \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e169.254.0.0/16\u003c/code\u003e is what\ncalled \u003cstrong\u003elink local\u003c/strong\u003e IP for IPv4. When a NIC is up (e.g. ifconfig eth0 up) but\nno IP is assgined to it, the device will try to automatically get an IP via\nDHCP. The DHCP just uses this IP range. See Appendix B for more details on this.\u003c/p\u003e\n\n\u003cp\u003eBut in thoery, \u003cstrong\u003eif a NIC serves as a slave device of a BOND, that NIC would\nnever need an IP address, unless it stops to serve as bond slave device\u003c/strong\u003e. So in\nmy understanding, if a L2 software (e.g. OVS, Linux bond) makes a bond out of\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth1\u003c/code\u003e, it should remove those two rules, leave only the last rule\n(via \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emgnt\u003c/code\u003e) there.  With this understanding/guessing, we checked our Linux Bond\nhosts, indeeded there were no such rules, just the last one there.\u003c/p\u003e\n\n\u003ch1 id=\"4-direct-cause\"\u003e4 Direct Cause\u003c/h1\u003e\n\n\u003cp\u003eSo now it should be clear:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003ewhen sidecar injection happened, \u003cstrong\u003e\u003cmark\u003esome still unknown behavior triggers the\nhost sent ARP requests to\u003c/mark\u003e\u003c/strong\u003e \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e169.254\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eOVS bond left \u003cstrong\u003e\u003cmark\u003etwo stale route entries\u003c/mark\u003e\u003c/strong\u003e targeted to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e169.254\u003c/code\u003e,\nwhich has \u003cstrong\u003e\u003cmark\u003ehigher priority than the correct rule\u003c/mark\u003e\u003c/strong\u003e (the one via \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emgnt\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003e1 \u0026amp; 2 resulted the ARP packet took an incorrect MAC, which polluted the\nswitches in the physical network\u003c/li\u003e\n  \u003cli\u003ethis further resulted to all subsequent ingress packets to host itself (with\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_ip=HOST_IP\u003c/code\u003e) took the incorrect MAC (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_mac=eth0 or eth1\u003c/code\u003e), thus those\ntraffic not reached \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emgnt\u003c/code\u003e, thus our SSH disconnected\u003c/li\u003e\n  \u003cli\u003e30s later, host sent another ARP with the correct MAC (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc_mac=BOND0\u003c/code\u003e), this\nflushed forwarding tables of switches in physical network\u003c/li\u003e\n  \u003cli\u003eall ingress traffic back to normal\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"5-fixup\"\u003e5 Fixup\u003c/h1\u003e\n\n\u003cp\u003eManually reomve those two route entries:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eroute del \u003cspan class=\"nt\"\u003e-net\u003c/span\u003e 169.254.0.0 gw 0.0.0.0 netmask 255.255.0.0 dev eth0\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eroute del \u003cspan class=\"nt\"\u003e-net\u003c/span\u003e 169.254.0.0 gw 0.0.0.0 netmask 255.255.0.0 dev eth1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eRe-run our test, problem disappeared.\u003c/p\u003e\n\n\u003ch1 id=\"6-root-cause-still-missing\"\u003e6 Root Cause (still missing)\u003c/h1\u003e\n\n\u003cp\u003eAt least two questions need to be further investigated:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003ewhy sidecar injection would trigger the ARP request to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e169.254\u003c/code\u003e from host?\u003c/li\u003e\n  \u003cli\u003ewhy host takes the correct MAC 30s later, while the incorrect route entries\nare still there?\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"7-closing-words\"\u003e7 Closing Words\u003c/h1\u003e\n\n\u003cp\u003eFollowing experiences are valued:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eshrink down the reproducing scheme to minimum as possible as you can\u003c/li\u003e\n  \u003cli\u003echoose a node with least traffic as possible as you can\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWe just need bonding solution, and Linux bond meets this needs. We may remove\nOVS in the future (currently in using only for historical reasons).\u003c/p\u003e\n\n\u003ch1 id=\"appendix\"\u003eAppendix\u003c/h1\u003e\n\n\u003ch2 id=\"a-simple-service-used-for-problem-reproduction\"\u003eA: Simple Service used for problem reproduction\u003c/h2\u003e\n\n\u003cp\u003eThis yaml will schedule the pod to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enode1\u003c/code\u003e. Make sure you have correct\ntolerations for the taints on \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enode1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enginx-sts.yaml\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eapiVersion: v1\nkind: Service\nmetadata:\n  name: nginx\n  labels:\n    app: nginx\nspec:\n  ports:\n  - port: 80\n    name: web\n  clusterIP: None\n  selector:\n    app: nginx\n\u003cspan class=\"nt\"\u003e---\u003c/span\u003e\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: web\nspec:\n  serviceName: \u003cspan class=\"s2\"\u003e\u0026#34;nginx\u0026#34;\u003c/span\u003e\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: kubernetes.io/hostname\n                operator: In\n                values:\n                - node1\n      tolerations:\n      - effect: NoSchedule\n        operator: Exists   \u003cspan class=\"c\"\u003e# this will effectively tolerate any taint\u003c/span\u003e\n      containers:\n      - name: nginx\n        image: nginx-slim:0.8\n        ports:\n        - containerPort: 80\n          name: web\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"appendix-b-ipv4-link-local-address-1692540016-and-dhcp\"\u003eAppendix B: IPv4 Link local Address (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e169.254.0.0/16\u003c/code\u003e) and DHCP\u003c/h2\u003e\n\n\u003cp\u003eSee \u003ca href=\"https://en.wikipedia.org/wiki/Link-local_address\"\u003eWikipedia: Link-local Address\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eMay update this part later.\u003c/p\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/cilium-network-topology-on-aws/\"\u003e\u003cspan\u003e« Cilium Network Topology and Traffic Path on AWS\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/memory-models-underlie-programming-languages-zh/\"\u003e\u003cspan\u003e[译] 编程语言中的 6 种内存模型（2016） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2019-10-27T00:00:00Z",
  "Author": "Arthur Chiao"
}