{
  "Source": "arthurchiao.art",
  "Title": "Differentiate three types of eBPF redirects (2022)",
  "Link": "https://arthurchiao.art/blog/differentiate-bpf-redirects/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eDifferentiate three types of eBPF redirects (2022)\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2022-07-25 | Last Update 2022-07-25\u003c/p\u003e\n  \n  \u003ch2 id=\"tl-dr\"\u003eTL; DR\u003c/h2\u003e\n\n\u003cp\u003eThere are three types of eBPF redirection fashions in Linux kernel that may\nconfuse developers often:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect_peer()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect_neighbor()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect()\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThis post helps to clarify them by digging into the code in history order,\nand also discusses usages \u0026amp; related problems in real world.\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#tl-dr\" id=\"markdown-toc-tl-dr\"\u003eTL; DR\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-the-foundation-bpf_redirect-2015\" id=\"markdown-toc-1-the-foundation-bpf_redirect-2015\"\u003e1 The foundation: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect()\u003c/code\u003e, 2015\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-the-documentation\" id=\"markdown-toc-11-the-documentation\"\u003e1.1 The documentation\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#description\" id=\"markdown-toc-description\"\u003eDescription\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#comparison-with-bpf_clone_redirect\" id=\"markdown-toc-comparison-with-bpf_clone_redirect\"\u003eComparison with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_clone_redirect()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-kernel-implementationschanges\" id=\"markdown-toc-12-kernel-implementationschanges\"\u003e1.2 Kernel implementations/changes\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#1-add-tc-action-type-tc_act_redirect\" id=\"markdown-toc-1-add-tc-action-type-tc_act_redirect\"\u003e1. Add TC action type \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eTC_ACT_REDIRECT\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#2-add-new-bpf-helper--syscall\" id=\"markdown-toc-2-add-new-bpf-helper--syscall\"\u003e2. Add new BPF helper \u0026amp; syscall\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#3-process-redirect-logic-in-tc-bpf\" id=\"markdown-toc-3-process-redirect-logic-in-tc-bpf\"\u003e3. Process redirect logic in TC BPF\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-call-stack\" id=\"markdown-toc-13-call-stack\"\u003e1.3 Call stack\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-egress-optimization-bpf_redirect_neighbor-2020\" id=\"markdown-toc-2-egress-optimization-bpf_redirect_neighbor-2020\"\u003e2 Egress optimization: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect_neighbor()\u003c/code\u003e, 2020\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-comparison-with-bpf_redirect\" id=\"markdown-toc-21-comparison-with-bpf_redirect\"\u003e2.1 Comparison with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-kernel-implementationschanges\" id=\"markdown-toc-22-kernel-implementationschanges\"\u003e2.2 Kernel implementations/changes\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#1-modify-skb_do_redirect-prefer-the-new-one-whenever-available\" id=\"markdown-toc-1-modify-skb_do_redirect-prefer-the-new-one-whenever-available\"\u003e1. Modify \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_do_redirect()\u003c/code\u003e, prefer the new one whenever available\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#2-add-bpf_redirect_neigh-helperwrapper-and-syscall\" id=\"markdown-toc-2-add-bpf_redirect_neigh-helperwrapper-and-syscall\"\u003e2. Add \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect_neigh()\u003c/code\u003e helper/wrapper and syscall\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-call-stack\" id=\"markdown-toc-23-call-stack\"\u003e2.3 Call stack\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-ingress-optimization-bpf_redirect_peer-2020\" id=\"markdown-toc-3-ingress-optimization-bpf_redirect_peer-2020\"\u003e3 Ingress optimization: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect_peer()\u003c/code\u003e, 2020\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-comparison-with-bpf_redirect\" id=\"markdown-toc-31-comparison-with-bpf_redirect\"\u003e3.1 Comparison with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-kernel-implementationschanges\" id=\"markdown-toc-32-kernel-implementationschanges\"\u003e3.2 Kernel implementations/changes\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#1-add-new-redirection-flags\" id=\"markdown-toc-1-add-new-redirection-flags\"\u003e1. Add new redirection flags\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#2-add-helpersyscall\" id=\"markdown-toc-2-add-helpersyscall\"\u003e2. Add helper/syscall\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#3-allow-to-re-enter-tc-ingress-processing-for-the-peer-device-here\" id=\"markdown-toc-3-allow-to-re-enter-tc-ingress-processing-for-the-peer-device-here\"\u003e3. Allow to re-enter TC ingress processing (for the peer device here)\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-call-stack\" id=\"markdown-toc-33-call-stack\"\u003e3.3 Call stack\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-use-cases--performance-evaluation\" id=\"markdown-toc-34-use-cases--performance-evaluation\"\u003e3.4 Use cases \u0026amp; performance evaluation\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#35-impacts--known-issues\" id=\"markdown-toc-35-impacts--known-issues\"\u003e3.5 Impacts \u0026amp; known issues\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#kubernetes-incorrect-pod-ingress-statistics\" id=\"markdown-toc-kubernetes-incorrect-pod-ingress-statistics\"\u003eKubernetes: incorrect Pod ingress statistics\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"1-the-foundation-bpf_redirect-2015\"\u003e1 The foundation: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect()\u003c/code\u003e, 2015\u003c/h1\u003e\n\n\u003cp\u003eThis BPF helper was introduced via \u003ca href=\"https://github.com/torvalds/linux/commit/27b29f63058d2\"\u003ethis patch\u003c/a\u003e\nin 2015,\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ebpf: add bpf_redirect() helper\n\nExisting bpf_clone_redirect() helper clones skb before redirecting it to RX or\nTX of destination netdev.  Introduce bpf_redirect() helper that does that without cloning.\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"11-the-documentation\"\u003e1.1 The documentation\u003c/h2\u003e\n\n\u003ch3 id=\"description\"\u003eDescription\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elong bpf_redirect(ifindex, flags)\u003c/code\u003e can be used to \u003cstrong\u003e\u003cmark\u003eredirect the given packet to the given net device\u003c/mark\u003e\u003c/strong\u003e\nidentified with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eifindex\u003c/code\u003e.  This helper is somewhat similar to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_clone_redirect()\u003c/code\u003e,\nexcept that the packet is not cloned, which provides increased performance\n(25% pps increase compares with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eclone_redirect()\u003c/code\u003e according to the commit message).\u003c/p\u003e\n\n\u003cp\u003eReturn value: \u003cstrong\u003e\u003cmark\u003eTC/XDP verdict\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"comparison-with-bpf_clone_redirect\"\u003eComparison with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_clone_redirect()\u003c/code\u003e\u003c/h3\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003eÂ \u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_clone_redirect()\u003c/code\u003e\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ebpf_redirect()\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eEffeciency\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eLow (skb clone involved)\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eHigh\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eWhere the redirection happens\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eInside function call\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cmark\u003eAfter function call\u003c/mark\u003e\u003c/strong\u003e (this func only returns a verdict, the real redirection happens in \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eskb_do_redirect()\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eCan be used out of eBPF program\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eYes\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eNo\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eMay change underlying skb buffer\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eYes (need more re-validations)\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eNo\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eRedirect across netns\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eNo\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eNo\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2 id=\"12-kernel-implementationschanges\"\u003e1.2 Kernel implementations/changes\u003c/h2\u003e\n\n\u003cp\u003eNow letâs look at what changes were made against the Linux kernel to support this function.\u003c/p\u003e\n\n\u003ch3 id=\"1-add-tc-action-type-tc_act_redirect\"\u003e1. Add TC action type \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eTC_ACT_REDIRECT\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/h3\u003e\n\n\u003cdiv class=\"language-diff highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"gh\"\u003ediff --git a/include/uapi/linux/pkt_cls.h b/include/uapi/linux/pkt_cls.h\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -87,6 +87,7 @@\u003c/span\u003e enum {\n #define TC_ACT_STOLEN          4\n #define TC_ACT_QUEUED          5\n #define TC_ACT_REPEAT          6\n\u003cspan class=\"gi\"\u003e+#define TC_ACT_REDIRECT                7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"2-add-new-bpf-helper--syscall\"\u003e2. Add new BPF helper \u0026amp; syscall\u003c/h3\u003e\n\n\u003cdiv class=\"language-diff highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"gi\"\u003e+static u64 bpf_redirect(u64 ifindex, u64 flags, u64 r3, u64 r4, u64 r5)\n+{\n+       struct redirect_info *ri = this_cpu_ptr(\u0026amp;redirect_info);\n+\n+       ri-\u0026gt;ifindex = ifindex;\n+       ri-\u0026gt;flags = flags;\n+       return TC_ACT_REDIRECT;\n+}\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAs see above, this helper only sets \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eifindex\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eflags\u003c/code\u003e and then returns a\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eTC_ACT_REDIRECT\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e to the caller, thatâs why we say\n\u003cstrong\u003e\u003cmark\u003ethe real redirection happens after bpf_redirect() finishes\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"3-process-redirect-logic-in-tc-bpf\"\u003e3. Process redirect logic in TC BPF\u003c/h3\u003e\n\n\u003cp\u003eWhen BPF program (with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect()\u003c/code\u003e in the program) was attached to the TC ingress hook,\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect()\u003c/code\u003e will be executed in the \u003cstrong\u003e\u003cmark\u003etc_classify()\u003c/mark\u003e\u003c/strong\u003e method:\u003c/p\u003e\n\n\u003cdiv class=\"language-diff highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e@@ -3670,6 +3670,14 @@\u003c/span\u003e static inline struct sk_buff *handle_ing(struct sk_buff *skb,\n        switch(tc_classify()) { // \u0026lt;-- bpf_redirect() executes in the tc_classify() method\n        ...\n        case TC_ACT_QUEUED:\n                kfree_skb(skb);\n                return NULL;\n\u003cspan class=\"gi\"\u003e+       case TC_ACT_REDIRECT:\n+               /* skb_mac_header check was done by cls/act_bpf, so\n+                * we can safely push the L2 header back before\n+                * redirecting to another netdev\n+                */\n+               __skb_push(skb, skb-\u0026gt;mac_len);\n+               skb_do_redirect(skb);\n+               return NULL;\n+\n+struct redirect_info {\n+       u32 ifindex;\n+       u32 flags;\n+};\n+static DEFINE_PER_CPU(struct redirect_info, redirect_info);\n+\n+int skb_do_redirect(struct sk_buff *skb)\n+{\n+       struct redirect_info *ri = this_cpu_ptr(\u0026amp;redirect_info);\n+       struct net_device *dev;\n+\n+       dev = dev_get_by_index_rcu(dev_net(skb-\u0026gt;dev), ri-\u0026gt;ifindex);\n+       ri-\u0026gt;ifindex = 0;\n+\n+       if (BPF_IS_REDIRECT_INGRESS(ri-\u0026gt;flags))\n+               return dev_forward_skb(dev, skb);\n+\n+       skb-\u0026gt;dev = dev;\n+       return dev_queue_xmit(skb);\n+}\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIf it returns \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTC_ACT_REDIRECT\u003c/code\u003e, then the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_do_redirect()\u003c/code\u003e will perform the real redirection.\u003c/p\u003e\n\n\u003ch2 id=\"13-call-stack\"\u003e1.3 Call stack\u003c/h2\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003epkt -\u0026gt; NIC -\u0026gt; TC ingress -\u0026gt; handle_ing()\n                             |-verdict = tc_classify()     // exec BPF code\n                             |            |-bpf_redirect() // return verdict\n                             |\n                             |-switch (verdict) {\n                               case TC_ACK_REDIRECT:\n                                   skb_do_redirect()       // to the target net device\n                                     |-if ingress:\n                                     |   dev_forward_skb()\n                                     |-else:\n                                         dev_queue_xmit()\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWe can see from the last few lines that\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect()\u003c/code\u003e \u003cstrong\u003e\u003cmark\u003esupports both ingress and egress redirection\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch1 id=\"2-egress-optimization-bpf_redirect_neighbor-2020\"\u003e2 Egress optimization: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect_neighbor()\u003c/code\u003e, 2020\u003c/h1\u003e\n\n\u003cp\u003eFive years after \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect()\u003c/code\u003e emerged in the Linux kernel, an\n\u003cstrong\u003e\u003cmark\u003eegress side optimization\u003c/mark\u003e\u003c/strong\u003e was proposed, in\n\u003ca href=\"https://github.com/torvalds/linux/commit/b4ab31414970a\"\u003epatch\u003c/a\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ebpf: Add redirect_neigh helper as redirect drop-in\n\nAdd a redirect_neigh() helper as redirect() drop-in replacement\nfor the xmit side. Main idea for the helper is to be very similar\nin semantics to the latter just that the skb gets injected into\nthe neighboring subsystem in order to let the stack do the work\nit knows best anyway to populate the L2 addresses of the packet\nand then hand over to dev_queue_xmit() as redirect() does.\n\nThis solves two bigger items:\ni) skbs don\u0026#39;t need to go up to the stack on the host facing veth ingress side for traffic egressing\n  the container to achieve the same for populating L2 which also has the huge advantage that\nii) the skb-\u0026gt;sk won\u0026#39;t get orphaned in ip_rcv_core() when entering the IP routing layer on the host stack.\n\nGiven that skb-\u0026gt;sk neither gets orphaned when crossing the netns\nas per 9c4c325 (\u0026#34;skbuff: preserve sock reference when scrubbing\nthe skb.\u0026#34;) the helper can then push the skbs directly to the phys\ndevice where FQ scheduler can do its work and TCP stack gets proper\nbackpressure given we hold on to skb-\u0026gt;sk as long as skb is still\nresiding in queues.\n\nWith the helper used in BPF data path to then push the skb to the\nphys device, I observed a stable/consistent TCP_STREAM improvement\non veth devices for traffic going container -\u0026gt; host -\u0026gt; host -\u0026gt;\ncontainer from ~10Gbps to ~15Gbps for a single stream in my test\nenvironment.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"21-comparison-with-bpf_redirect\"\u003e2.1 Comparison with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect()\u003c/code\u003e\u003c/h2\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003eÂ \u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect()\u003c/code\u003e\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ebpf_redirect_neighbor()\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eSupported direction\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eingress \u0026amp; egress\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cmark\u003eegress only\u003c/mark\u003e\u003c/strong\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eFill L2 addr by kernel stack (neighbor subsys)\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eNo\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eYes (\u003cstrong\u003e\u003cmark\u003efills in e.g. MAC addr based on L3 info from the pkt)\u003c/mark\u003e\u003c/strong\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eRedirect across netns\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eNo\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eNo\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eOthers\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eÂ \u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eflags\u003c/code\u003e argument is reserved and must be 0; currently only supported for tc BPF program types\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eReturn: \u003cstrong\u003eTC_ACT_REDIRECT\u003c/strong\u003e on success or \u003cstrong\u003eTC_ACT_SHOT\u003c/strong\u003e on error.\u003c/p\u003e\n\n\u003ch2 id=\"22-kernel-implementationschanges\"\u003e2.2 Kernel implementations/changes\u003c/h2\u003e\n\n\u003ch3 id=\"1-modify-skb_do_redirect-prefer-the-new-one-whenever-available\"\u003e1. Modify \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_do_redirect()\u003c/code\u003e, prefer the new one whenever available\u003c/h3\u003e\n\n\u003cdiv class=\"language-diff highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e int skb_do_redirect(struct sk_buff *skb)\n {\n        struct bpf_redirect_info *ri = this_cpu_ptr(\u0026amp;bpf_redirect_info);\n        struct net_device *dev;\n\u003cspan class=\"gi\"\u003e+       u32 flags = ri-\u0026gt;flags;\n\u003c/span\u003e\n        dev = dev_get_by_index_rcu(dev_net(skb-\u0026gt;dev), ri-\u0026gt;tgt_index);\n        ri-\u0026gt;tgt_index = 0;\n\u003cspan class=\"p\"\u003e@@ -2231,7 +2439,22 @@\u003c/span\u003e int skb_do_redirect(struct sk_buff *skb)\n                return -EINVAL;\n        }\n\n-       return __bpf_redirect(skb, dev, ri-\u0026gt;flags);\n\u003cspan class=\"gi\"\u003e+       return flags \u0026amp; BPF_F_NEIGH ?\n+              __bpf_redirect_neigh(skb, dev) :\n+              __bpf_redirect(skb, dev, flags);\n+}\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"2-add-bpf_redirect_neigh-helperwrapper-and-syscall\"\u003e2. Add \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect_neigh()\u003c/code\u003e helper/wrapper and syscall\u003c/h3\u003e\n\n\u003cp\u003eOmitted, see the call stack below.\u003c/p\u003e\n\n\u003ch2 id=\"23-call-stack\"\u003e2.3 Call stack\u003c/h2\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eskb_do_redirect\n  |-__bpf_redirect_neigh(skb, dev) :\n      |-__bpf_redirect_neigh_v4\n          |-rt = ip_route_output_flow()\n          |-skb_dst_set(skb, \u0026amp;rt-\u0026gt;dst);\n          |-bpf_out_neigh_v4(net, skb)\n              |-neigh = ip_neigh_for_gw(rt, skb, \u0026amp;is_v6gw);\n              |-sock_confirm_neigh(skb, neigh);\n              |-neigh_output(neigh, skb, is_v6gw); // xmit with L2 header properly set\n                 |-neigh-\u0026gt;output()\n                    |-neigh_direct_output??\n                      |-dev_queue_xmi()\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eNote that although this is an optimization to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirec()\u003c/code\u003e,\nit still needs to \u003cstrong\u003e\u003cmark\u003ego through the entire kernel stack\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch1 id=\"3-ingress-optimization-bpf_redirect_peer-2020\"\u003e3 Ingress optimization: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect_peer()\u003c/code\u003e, 2020\u003c/h1\u003e\n\n\u003cp\u003eIntroduced in \u003ca href=\"https://github.com/torvalds/linux/commit/9aa1206e8f482\"\u003epatch\u003c/a\u003e, 2020,\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ebpf: Add redirect_peer helper\n\nAdd an efficient ingress to ingress netns switch that can be used out of tc BPF\nprograms in order to redirect traffic from host ns ingress into a container\nveth device ingress without having to go via CPU backlog queue [0].\n\nFor local containers this can also be utilized and path via CPU backlog queue only needs\nto be taken once, not twice. On a high level this borrows from ipvlan which does\nsimilar switch in __netif_receive_skb_core() and then iterates via another_round.\nThis helps to reduce latency for mentioned use cases.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"31-comparison-with-bpf_redirect\"\u003e3.1 Comparison with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect()\u003c/code\u003e\u003c/h2\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003eÂ \u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect()\u003c/code\u003e\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ebpf_redirect_peer()\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eSupported direction\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eingress \u0026amp; egress\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cmark\u003eingress only\u003c/mark\u003e\u003c/strong\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eRedirect across netns\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eNo\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cmark\u003eYes (the netns switch takes place from ingress to ingress without going through the CPU\u0026#39;s backlog queue)\u003c/mark\u003e\u003c/strong\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eOthers\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eÂ \u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eflags\u003c/code\u003e argument is reserved and must be 0; currently only supported for tc BPF program types; peer device must reside in a different netns\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eReturn: \u003cstrong\u003eTC_ACT_REDIRECT\u003c/strong\u003e on success or \u003cstrong\u003eTC_ACT_SHOT\u003c/strong\u003e on error.\u003c/p\u003e\n\n\u003ch2 id=\"32-kernel-implementationschanges\"\u003e3.2 Kernel implementations/changes\u003c/h2\u003e\n\n\u003ch3 id=\"1-add-new-redirection-flags\"\u003e1. Add new redirection flags\u003c/h3\u003e\n\n\u003cdiv class=\"language-diff highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"gh\"\u003ediff --git a/net/core/filter.c b/net/core/filter.c\nindex 5da44b11e1ec..fab951c6be57 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/net/core/filter.c\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/net/core/filter.c\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -2380,8 +2380,9 @@\u003c/span\u003e static int __bpf_redirect_neigh(struct sk_buff *skb, struct net_device *dev)\n\n /* Internal, non-exposed redirect flags. */\n enum {\n\u003cspan class=\"gd\"\u003e-       BPF_F_NEIGH = (1ULL \u0026lt;\u0026lt; 1),\n-#define BPF_F_REDIRECT_INTERNAL        (BPF_F_NEIGH)\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+       BPF_F_NEIGH     = (1ULL \u0026lt;\u0026lt; 1),\n+       BPF_F_PEER      = (1ULL \u0026lt;\u0026lt; 2),\n+#define BPF_F_REDIRECT_INTERNAL        (BPF_F_NEIGH | BPF_F_PEER)\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"2-add-helpersyscall\"\u003e2. Add helper/syscall\u003c/h3\u003e\n\n\u003cdiv class=\"language-diff highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"gi\"\u003e+BPF_CALL_2(bpf_redirect_peer, u32, ifindex, u64, flags)\n+{\n+       struct bpf_redirect_info *ri = this_cpu_ptr(\u0026amp;bpf_redirect_info);\n+\n+       if (unlikely(flags))\n+               return TC_ACT_SHOT;\n+\n+       ri-\u0026gt;flags = BPF_F_PEER;\n+       ri-\u0026gt;tgt_index = ifindex;\n+\n+       return TC_ACT_REDIRECT;\n+}\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"3-allow-to-re-enter-tc-ingress-processing-for-the-peer-device-here\"\u003e3. Allow to re-enter TC ingress processing (for the peer device here)\u003c/h3\u003e\n\n\u003cdiv class=\"language-diff highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e@@ -5163,7 +5167,12 @@\u003c/span\u003e static int __netif_receive_skb_core(struct sk_buff **pskb, bool pfmemalloc,\n skip_taps:\n #ifdef CONFIG_NET_INGRESS\n        if (static_branch_unlikely(\u0026amp;ingress_needed_key)) {\n\u003cspan class=\"gd\"\u003e-               skb = sch_handle_ingress(skb, \u0026amp;pt_prev, \u0026amp;ret, orig_dev);\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+               bool another = false;\n+\n+               skb = sch_handle_ingress(skb, \u0026amp;pt_prev, \u0026amp;ret, orig_dev,\n+                                        \u0026amp;another);\n+               if (another)\n+                       goto another_round;\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_handle_ingress()\u003c/code\u003e changes:\u003c/p\u003e\n\n\u003cdiv class=\"language-diff highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e@@ -4974,7 +4974,11 @@\u003c/span\u003e sch_handle_ingress(struct sk_buff *skb, struct packet_type **pt_prev, int *ret,\n                 * redirecting to another netdev\n                 */\n                __skb_push(skb, skb-\u0026gt;mac_len);\n\u003cspan class=\"gd\"\u003e-               skb_do_redirect(skb);\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+               if (skb_do_redirect(skb) == -EAGAIN) {\n+                       __skb_pull(skb, skb-\u0026gt;mac_len);\n+                       *another = true;\n+                       break;\n+               }\n\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-diff highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e int skb_do_redirect(struct sk_buff *skb)\n {\n        struct bpf_redirect_info *ri = this_cpu_ptr(\u0026amp;bpf_redirect_info);\n\u003cspan class=\"gi\"\u003e+       struct net *net = dev_net(skb-\u0026gt;dev);\n\u003c/span\u003e        struct net_device *dev;\n        u32 flags = ri-\u0026gt;flags;\n\u003cspan class=\"gd\"\u003e-\n-       dev = dev_get_by_index_rcu(dev_net(skb-\u0026gt;dev), ri-\u0026gt;tgt_index);\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+       dev = dev_get_by_index_rcu(net, ri-\u0026gt;tgt_index);\n\u003c/span\u003e        ri-\u0026gt;tgt_index = 0;\n\u003cspan class=\"gi\"\u003e+       ri-\u0026gt;flags = 0;\n+       if (flags \u0026amp; BPF_F_PEER) {\n+               const struct net_device_ops *ops = dev-\u0026gt;netdev_ops;\n+\n+               dev = ops-\u0026gt;ndo_get_peer_dev(dev);\n+               if (unlikely(!dev || !is_skb_forwardable(dev, skb) || net_eq(net, dev_net(dev))))\n+                       goto out_drop;\n+               skb-\u0026gt;dev = dev;\n+               return -EAGAIN;\n\u003c/span\u003e        }\n\u003cspan class=\"gd\"\u003e-\n\u003c/span\u003e        return flags \u0026amp; BPF_F_NEIGH ?  __bpf_redirect_neigh(skb, dev) : __bpf_redirect(skb, dev, flags);\n }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"33-call-stack\"\u003e3.3 Call stack\u003c/h2\u003e\n\n\u003cp\u003eWith a picture from\n\u003ca href=\"/blog/linux-net-stack-implementation-rx-zh/\"\u003emy networking stack post\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/linux-net-stack/netif_receive_skb_list_internal.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Entering kernel stack: L2 processing steps\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e__netif_receive_skb_core\n  |\n  |-// Device driver processing, e.g. update device\u0026#39;s rx/tx stats\n  |\n  |-another_round:  \u0026lt;------------------\u0026lt;-----------+\n  |-// Generic XDP processing                      |\n  |                                                | with skb-\u0026gt;dev changed to the peer device, the next round\n  |-// Tap processing if not skipped               | \u0026#34;G-XDP -\u0026gt; TAP -\u0026gt; TC\u0026#34; processings will be for the peer device,\n  |                                                | which means we successfully bypassed tons of stuffs\n  |-// TC BPF ingress processing if not skipped    | (and entered container\u0026#39;s netns from the default/host netns)\n  |-sch_handle_ingress(\u0026amp;another)                   | as shown in the above picture\n  |-if another:                                    |\n  |   goto another_round --------------\u0026gt;-----------+\n  |\n  |-// Netfilter processing if not skipped\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eSome explanations:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eThe first time execution of \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003esch_handle_ingress()\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e is for the current network device (e.g. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0\u003c/code\u003e of the physical host);\u003c/li\u003e\n  \u003cli\u003eIf it returns with \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eanother==true\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e, then the execution will go to \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eanother_round\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e; then\u003c/li\u003e\n  \u003cli\u003eWe come to \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003esch_handle_ingress()\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e for the second time, and this time, we are executing on the TC ingress hook of the device (e.g. the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0\u003c/code\u003e inside a container) we redirected to.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"34-use-cases--performance-evaluation\"\u003e3.4 Use cases \u0026amp; performance evaluation\u003c/h2\u003e\n\n\u003cp\u003eTwo scenarios in Cilium networking solution:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003ePhysical NIC -\u0026gt; container NIC\u003c/mark\u003e\u003c/strong\u003e redirection\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u0026#34;Container A -\u0026gt; container B\u0026#34; redirection\u003c/mark\u003e\u003c/strong\u003e in the same host\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eAnd in Cilium, this behavior is controlled by a dedicated option \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e--enable-host-legacy-routing=true/false\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eWith \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrue\u003c/code\u003e: turn off peer redirection optimization, still goes through the entire kernel stack as normal;\u003c/li\u003e\n  \u003cli\u003eWith \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efalse\u003c/code\u003e: turn on peer redirection (if kernel supports), dramatic performance gain is expected.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003ePerformance benchmark see \u003ca href=\"https://cilium.io/blog/2020/11/10/cilium-19/#veth\"\u003eCilium 1.9 Release Notes\u003c/a\u003eï¼\nand we have double confirmed the benchmark with Cilium 1.10.7 + 5.10 kernel in our clusters.\u003c/p\u003e\n\n\u003ch2 id=\"35-impacts--known-issues\"\u003e3.5 Impacts \u0026amp; known issues\u003c/h2\u003e\n\n\u003ch3 id=\"kubernetes-incorrect-pod-ingress-statistics\"\u003eKubernetes: incorrect Pod ingress statistics\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubelet\u003c/code\u003e collects each podâs network stats (e.g. rx_packets, rx_bytes) via\ncadvisor/netlink, and exposes these metrics via \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e:10250\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e metrics port.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eSee \u003ca href=\"https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/\"\u003ekubelet doc\u003c/a\u003e for more information.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOn a Kubernetes node:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl \u003cspan class=\"nt\"\u003e-H\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Authorization: Bearer eyJh...\u0026#39;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-X\u003c/span\u003e GET \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;{\u0026#34;num_stats\u0026#34;: 1,\u0026#34;containerName\u0026#34;: \u0026#34;/kubepods\u0026#34;,\u0026#34;subContainers\u0026#34;: true}\u0026#39;\u003c/span\u003e \u003cspan class=\"nt\"\u003e--insecure\u003c/span\u003e https://127.0.0.1:10250/stats/ \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e stats.json\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eGet stats of a specific pod:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003estats.json | jq \u003cspan class=\"s1\"\u003e\u0026#39;.\u0026#34;/kubepods/burstable/pod42ef7dc5-a27f-4ee5-ac97-54c3ce93bc9b/47585f9593\u0026#34;.\u0026#34;stats\u0026#34;[0].\u0026#34;network\u0026#34;\u0026#39;\u003c/span\u003e | \u003cspan class=\"nb\"\u003ehead\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n8\u003c/span\u003e | egrep \u003cspan class=\"s2\"\u003e\u0026#34;(rx_bytes|rx_packets|tx_bytes|tx_packets)\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\u0026#34;rx_bytes\u0026#34;\u003c/span\u003e: 34344009,\n  \u003cspan class=\"s2\"\u003e\u0026#34;rx_packets\u0026#34;\u003c/span\u003e: 505446,\n  \u003cspan class=\"s2\"\u003e\u0026#34;tx_bytes\u0026#34;\u003c/span\u003e: 5344339889,\n  \u003cspan class=\"s2\"\u003e\u0026#34;tx_packets\u0026#34;\u003c/span\u003e: 6214124,\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThe data source of these statistics actually come from \u003cstrong\u003e\u003cmark\u003esysfs/procfs\u003c/mark\u003e\u003c/strong\u003e.\nSuch as, a podâs rx_bytes is retrieved by \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecat /sys/class/net/\u0026lt;device\u0026gt;/statistics/rx_bytes\u003c/code\u003e\nwhere \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;device\u0026gt;\u003c/code\u003e is the podâs network interface.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003eProblems arise\u003c/mark\u003e\u003c/strong\u003e when using \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect_peer()\u003c/code\u003e, as packets fly directly to\nthe TC ingress point of a Pod from the physical NICâs TC ingress point, which\n\u003cstrong\u003e\u003cmark\u003eskips the driver processing steps of the pod\u0026#39;s NIC\u003c/mark\u003e\u003c/strong\u003e, so rx/tx statistics like the\nabove will not be correctly updated (only few packets will go through the driver).\nAs a result, ingress statistics such as pps/bandwidth will be nearly zeros.\u003c/p\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/linux-tracing-basis-zh/\"\u003e\u003cspan\u003eÂ«Â Linux tracing/profiling åºç¡ï¼ç¬¦å·è¡¨ãè°ç¨æ ãperf/bpftrace ç¤ºä¾ç­ï¼2022ï¼\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/the-mysterious-container-somaxconn/\"\u003e\u003cspan\u003eThe Mysterious Container \u003ccode\u003enet.core.somaxconn\u003c/code\u003e (2022)Â Â»\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2022-07-25T00:00:00Z",
  "Author": "Arthur Chiao"
}