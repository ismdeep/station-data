{
  "Source": "arthurchiao.art",
  "Title": "[译] 深入理解 iptables 和 netfilter 架构",
  "Link": "https://arthurchiao.art/blog/deep-dive-into-iptables-and-netfilter-arch-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003e[译] 深入理解 iptables 和 netfilter 架构\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2019-02-18 | Last Update 2021-01-31\u003c/p\u003e\n  \n  \u003ch2 id=\"译者序\"\u003e译者序\u003c/h2\u003e\n\n\u003cp\u003e本文翻译自 2015 年的一篇英文博客 \u003ca href=\"https://www.digitalocean.com/community/tutorials/a-deep-dive-into-iptables-and-netfilter-architecture\"\u003eA Deep Dive into Iptables and Netfilter\nArchitecture\u003c/a\u003e\n。\u003c/p\u003e\n\n\u003cp\u003e这篇对 iptables 和 netfilter 的设计和原理介绍比较全面，不足的是没有那张内核协议栈各\nhook 点位置和 iptables 规则优先级的经典配图，这里补充如下（来自\n\u003ca href=\"https://upload.wikimedia.org/wikipedia/commons/3/37/Netfilter-packet-flow.svg\"\u003eWikipedia\u003c/a\u003e\n）：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/deep-dive-into-iptables-netfilter/Netfilter-packet-flow.svg\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e另外，本文只讲理论，而下面这篇则侧重实战（基于 iptables 做 NAT）：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"/blog/nat-zh/\"\u003e(译) NAT - 网络地址转换\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e可作为本文的补充阅读。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e由于译者水平有限，本文不免存在遗漏或错误之处。如有疑问，请查阅原文。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e以下是译文。\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#译者序\" id=\"markdown-toc-译者序\"\u003e译者序\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#前言\" id=\"markdown-toc-前言\"\u003e前言\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-iptables-和-netfilter-是什么\" id=\"markdown-toc-1-iptables-和-netfilter-是什么\"\u003e1 ipTables 和 netfilter 是什么？\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-netfilter-hooks\" id=\"markdown-toc-2-netfilter-hooks\"\u003e2. Netfilter Hooks\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-iptables-表和链tables-and-chains\" id=\"markdown-toc-3-iptables-表和链tables-and-chains\"\u003e3 iptables 表和链（Tables and Chains）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-table-种类\" id=\"markdown-toc-4-table-种类\"\u003e4. table 种类\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-filter-table过滤放行拒绝\" id=\"markdown-toc-41-filter-table过滤放行拒绝\"\u003e4.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efilter\u003c/code\u003e table：过滤（放行/拒绝）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-nat-table网络地址转换\" id=\"markdown-toc-42-nat-table网络地址转换\"\u003e4.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enat\u003c/code\u003e table：网络地址转换\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#43-mangle-table修改-ip-头\" id=\"markdown-toc-43-mangle-table修改-ip-头\"\u003e4.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emangle\u003c/code\u003e table：修改 IP 头\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#44-raw-tableconntrack-相关\" id=\"markdown-toc-44-raw-tableconntrack-相关\"\u003e4.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eraw\u003c/code\u003e table：conntrack 相关\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#45-security-table打-selinux-标记\" id=\"markdown-toc-45-security-table打-selinux-标记\"\u003e4.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esecurity\u003c/code\u003e table：打 SELinux 标记\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-每种-table-实现的-chain\" id=\"markdown-toc-5-每种-table-实现的-chain\"\u003e5 每种 table 实现的 chain\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#chain-遍历优先级\" id=\"markdown-toc-chain-遍历优先级\"\u003eChain 遍历优先级\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#6-iptables-规则\" id=\"markdown-toc-6-iptables-规则\"\u003e6 iptables 规则\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#61-匹配\" id=\"markdown-toc-61-匹配\"\u003e6.1 匹配\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#62-目标\" id=\"markdown-toc-62-目标\"\u003e6.2 目标\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#7-跳转到用户自定义-chain\" id=\"markdown-toc-7-跳转到用户自定义-chain\"\u003e7 跳转到用户自定义 chain\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#8-iptables-和-conntrack\" id=\"markdown-toc-8-iptables-和-conntrack\"\u003e8 iptables 和 conntrack\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#连接的状态\" id=\"markdown-toc-连接的状态\"\u003e连接的状态\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#9-总结\" id=\"markdown-toc-9-总结\"\u003e9 总结\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\n\u003cp\u003e防火墙是保护服务器和基础设施安全的重要工具。在 Linux 生态系统中，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables\u003c/code\u003e 是使\n用很广泛的防火墙工具之一，它基于内核的包过滤框架（packet filtering framework）\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetfilter\u003c/code\u003e。如果管理员或用户不了解这些系统的架构，那可能就无法创建出可靠的防火\n墙策略，一方面是因为 iptables 的语法颇有挑战性，另外一方面是 netfilter 框架内部\n相互交织而变得错综复杂。\u003c/p\u003e\n\n\u003cp\u003e本文将带领读者深入理解 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables\u003c/code\u003e 框架，让那些需要创建防火墙策略的用户对它有一个\n更全面的认识。我们会讨论 iptables 是如何与 netfilter 交互的，几个组件是如何组织\n成\u003cstrong\u003e一个全面的过滤和矫正系统\u003c/strong\u003e（a comprehensive filtering and mangling system）的。\u003c/p\u003e\n\n\u003ch1 id=\"1-iptables-和-netfilter-是什么\"\u003e1 ipTables 和 netfilter 是什么？\u003c/h1\u003e\n\n\u003cp\u003eLinux 上最常用的防火墙工具是 iptables。iptables 与协议栈内有包过滤功能的 hook 交\n互来完成工作。这些内核 hook 构成了 netfilter 框架。\u003c/p\u003e\n\n\u003cp\u003e每个进入网络系统的包（接收或发送）在经过协议栈时都会触发这些 hook，程序\n可以通过\u003cstrong\u003e注册 hook 函数\u003c/strong\u003e的方式在一些关键路径上处理网络流量。iptables 相关的内核模\n块在这些 hook 点注册了处理函数，因此可以通过配置 iptables 规则来使得网络流量符合\n防火墙规则。\u003c/p\u003e\n\n\u003ch1 id=\"2-netfilter-hooks\"\u003e2. Netfilter Hooks\u003c/h1\u003e\n\n\u003cp\u003enetfilter 提供了 5 个 hook 点。包经过协议栈时会触发\u003cstrong\u003e内核模块注册在这里的处理函数\u003c/strong\u003e\n。触发哪个 hook 取决于包的方向（ingress/egress）、包的目的地址、包在上一个\nhook 点是被丢弃还是拒绝等等。\u003c/p\u003e\n\n\u003cp\u003e下面几个 hook 是内核协议栈中已经定义好的：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_IP_PRE_ROUTING\u003c/code\u003e: 接收到的包进入协议栈后立即触发此 hook，在进行任何路由判断\n（将包发往哪里）之前\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_IP_LOCAL_IN\u003c/code\u003e: 接收到的包经过路由判断，如果目的是本机，将触发此 hook\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_IP_FORWARD\u003c/code\u003e: 接收到的包经过路由判断，如果目的是其他机器，将触发此 hook\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_IP_LOCAL_OUT\u003c/code\u003e: 本机产生的准备发送的包，在进入协议栈后立即触发此 hook\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_IP_POST_ROUTING\u003c/code\u003e: 本机产生的准备发送的包或者转发的包，在经过路由判断之后，\n将触发此 hook\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003e注册处理函数时必须提供优先级\u003c/mark\u003e\u003c/strong\u003e，以便 hook 触发时能按照\n优先级高低调用处理函数。这使得\u003cstrong\u003e多个模块（或者同一内核模块的多个实例）可以在同一\nhook 点注册，并且有确定的处理顺序\u003c/strong\u003e。内核模块会依次被调用，每次返回一个结果给\nnetfilter 框架，提示该对这个包做什么操作。\u003c/p\u003e\n\n\u003ch1 id=\"3-iptables-表和链tables-and-chains\"\u003e3 iptables 表和链（Tables and Chains）\u003c/h1\u003e\n\n\u003cp\u003eiptables 使用 table 来组织规则，根据\u003cstrong\u003e用来做什么类型的判断\u003c/strong\u003e（the type of\ndecisions they are used to make）标准，将规则分为不同 table。例如，如果规则是处理\n网络地址转换的，那会放到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enat\u003c/code\u003e table；如果是判断是否允许包继续向前，那可能会放到\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efilter\u003c/code\u003e table。\u003c/p\u003e\n\n\u003cp\u003e在每个 table 内部，规则被进一步组织成 chain，\u003cstrong\u003e内置的 chain 是由内置的 hook 触发\n的\u003c/strong\u003e。chain 基本上能决定（basically determin）规则\u003cstrong\u003e何时\u003c/strong\u003e被匹配。\u003c/p\u003e\n\n\u003cp\u003e下面可以看出，内置的 chain 名字和 netfilter hook 名字是一一对应的：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePREROUTING\u003c/code\u003e: 由 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_IP_PRE_ROUTING\u003c/code\u003e hook 触发\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eINPUT\u003c/code\u003e: 由 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_IP_LOCAL_IN\u003c/code\u003e hook 触发\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFORWARD\u003c/code\u003e: 由 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_IP_FORWARD\u003c/code\u003e hook 触发\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOUTPUT\u003c/code\u003e: 由 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_IP_LOCAL_OUT\u003c/code\u003e hook 触发\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePOSTROUTING\u003c/code\u003e: 由 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_IP_POST_ROUTING\u003c/code\u003e hook 触发\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003echain 使管理员可以控制在\u003cstrong\u003e包的传输路径上哪个点\u003c/strong\u003e（where in a packet’s delivery\npath）应用策略。因为每个 table 有多个 chain，因此一个 table 可以在处理过程中的多\n个地方施加影响。\u003cstrong\u003e特定类型的规则只在协议栈的特定点有意义，因此并不是每个 table 都\n会在内核的每个 hook 注册 chain\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e内核一共只有 5 个 netfilter hook，因此不同 table 的 chain 最终都是注册到这几个点\n。例如，有三个 table 有 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePRETOUTING\u003c/code\u003e chain。当这些 chain 注册到对应的\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_IP_PRE_ROUTING\u003c/code\u003e hook 点时，它们需要指定优先级，应该依次调用哪个 table 的\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePRETOUTING\u003c/code\u003e chain，优先级从高到低。我们一会就会看到 chain 的优先级问题。\u003c/p\u003e\n\n\u003ch1 id=\"4-table-种类\"\u003e4. table 种类\u003c/h1\u003e\n\n\u003cp\u003e先来看看 iptables 提供的 table 类型。这些 table 是按规则类型区分的。\u003c/p\u003e\n\n\u003ch2 id=\"41-filter-table过滤放行拒绝\"\u003e4.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efilter\u003c/code\u003e table：过滤（放行/拒绝）\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efilter\u003c/code\u003e table 是最常用的 table 之一，用于\u003cstrong\u003e判断是否允许一个包通过\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e在防火墙领域，这通常称作“过滤”包（”filtering” packets）。这个 table 提供了防火墙\n的一些常见功能。\u003c/p\u003e\n\n\u003ch2 id=\"42-nat-table网络地址转换\"\u003e4.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enat\u003c/code\u003e table：网络地址转换\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enat\u003c/code\u003e table 用于实现网络地址转换规则。\u003c/p\u003e\n\n\u003cp\u003e当包进入协议栈的时候，这些规则决定是否以及如何修改包的源/目的地址，以改变包被\n路由时的行为。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enat\u003c/code\u003e table 通常用于将包路由到无法直接访问的网络。\u003c/p\u003e\n\n\u003ch2 id=\"43-mangle-table修改-ip-头\"\u003e4.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emangle\u003c/code\u003e table：修改 IP 头\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emangle\u003c/code\u003e（修正）table 用于\u003cstrong\u003e\u003cmark\u003e修改包的 IP 头\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e例如，可以修改包的 TTL，增加或减少包可以经过的跳数。\u003c/p\u003e\n\n\u003cp\u003e这个 table 还可以对包打\u003cstrong\u003e只在内核内有效的\u003c/strong\u003e“标记”（internal kernel “mark”），后\n续的 table 或工具处理的时候可以用到这些标记。标记不会修改包本身，只是在包的内核\n表示上做标记。\u003c/p\u003e\n\n\u003ch2 id=\"44-raw-tableconntrack-相关\"\u003e4.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eraw\u003c/code\u003e table：conntrack 相关\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eiptables 防火墙是有状态的\u003c/strong\u003e：对每个包进行判断的时候是\u003cstrong\u003e依赖已经判断过的包\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e建立在 netfilter 之上的连接跟踪（connection tracking）特性\u003cstrong\u003e使得 iptables 将包\n看作已有的连接或会话的一部分\u003c/strong\u003e，而不是一个由独立、不相关的包组成的流。\n数据包到达网络接口之后很快就会有连接跟踪逻辑判断。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eraw\u003c/code\u003e table 定义的功能非常有限，其\u003cstrong\u003e唯一目的就是提供一个让包绕过连接跟踪的框架\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"45-security-table打-selinux-标记\"\u003e4.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esecurity\u003c/code\u003e table：打 SELinux 标记\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esecurity\u003c/code\u003e table 的作用是给包打上 SELinux 标记，以此影响 SELinux 或其他可以解读\nSELinux 安全上下文的系统处理包的行为。这些标记可以基于单个包，也可以基于连接。\u003c/p\u003e\n\n\u003ch1 id=\"5-每种-table-实现的-chain\"\u003e5 每种 table 实现的 chain\u003c/h1\u003e\n\n\u003cp\u003e前面已经分别讨论了 table 和 chain，接下来看每个 table 里各有哪些 chain。另外，我\n们还将讨论注册到同一 hook 的不同 chain 的优先级问题。例如，如果三个 table 都有\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePRETOUTING\u003c/code\u003e chain，那应该按照什么顺序调用它们呢？\u003c/p\u003e\n\n\u003cp\u003e下面的表格展示了 table 和 chain 的关系。横向是 table， 纵向是 chain，Y 表示 这个\ntable 里面有这个 chain。例如，第二行表示 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eraw\u003c/code\u003e table 有 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePRETOUTING\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOUTPUT\u003c/code\u003e 两\n个 chain。具体到每列，从上倒下的顺序就是 netfilter hook 触发的时候，（对应\ntable 的）chain 被调用的顺序。\u003c/p\u003e\n\n\u003cp\u003e有几点需要说明一下。在下面的图中，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enat\u003c/code\u003e table 被细分成了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDNAT\u003c/code\u003e （修改目的地址）\n和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSNAT\u003c/code\u003e（修改源地址），以更方便地展示他们的优先级。另外，我们添加了路由决策点\n和连接跟踪点，以使得整个过程更完整全面：\u003c/p\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003eTables/Chains\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003ePREROUTING\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eINPUT\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eFORWARD\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eOUTPUT\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003ePOSTROUTING\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e(路由判断)\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eraw\u003c/strong\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e(连接跟踪）\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003emangle\u003c/strong\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003enat (DNAT)\u003c/strong\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e(路由判断)\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003efilter\u003c/strong\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003esecurity\u003c/strong\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003enat (SNAT)\u003c/strong\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eY\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003e当一个包触发 netfilter hook 时，处理过程将沿着列从上向下执行\u003c/mark\u003e\u003c/strong\u003e。\n触发哪个 hook（列）和包的方向（ingress/egress）、路由判断、过滤条件等相关。\u003c/p\u003e\n\n\u003cp\u003e特定事件会导致 table 的 chain 被跳过。例如，只有每个连接的第一个包会去匹配 NAT\n规则，对这个包的动作会应用于此连接后面的所有包。到这个连接的应答包会被自动应用反\n方向的 NAT 规则。\u003c/p\u003e\n\n\u003ch2 id=\"chain-遍历优先级\"\u003eChain 遍历优先级\u003c/h2\u003e\n\n\u003cp\u003e假设服务器知道如何路由数据包，而且防火墙允许数据包传输，下面就是不同场景下包的游\n走流程：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e收到的、目的是本机的包：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePRETOUTING\u003c/code\u003e -\u0026gt; \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eINPUT\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e收到的、目的是其他主机的包：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePRETOUTING\u003c/code\u003e -\u0026gt; \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFORWARD\u003c/code\u003e -\u0026gt; \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePOSTROUTING\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e本地产生的包：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOUTPUT\u003c/code\u003e -\u0026gt; \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePOSTROUTING\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e综合前面讨论的 table 顺序问题，我们可以看到对于一个收到的、目的是本机的包\u003c/strong\u003e：\n首先依次经过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePRETOUTING\u003c/code\u003e chain 上面的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eraw\u003c/code\u003e、\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emangle\u003c/code\u003e、\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enat\u003c/code\u003e table；然后依次经\n过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eINPUT\u003c/code\u003e chain 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emangle\u003c/code\u003e、\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efilter\u003c/code\u003e、\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esecurity\u003c/code\u003e、\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enat\u003c/code\u003e table，然后才会到达本机\n的某个 socket。\u003c/p\u003e\n\n\u003ch1 id=\"6-iptables-规则\"\u003e6 iptables 规则\u003c/h1\u003e\n\n\u003cp\u003e规则放置在特定 table 的特定 chain 里面。当 chain 被调用的时候，包会依次匹配 chain\n里面的规则。每条规则都有一个匹配部分和一个动作部分。\u003c/p\u003e\n\n\u003ch2 id=\"61-匹配\"\u003e6.1 匹配\u003c/h2\u003e\n\n\u003cp\u003e规则的匹配部分指定了一些条件，包必须满足这些条件才会和相应的将要执行的动作（“\ntarget”）进行关联。\u003c/p\u003e\n\n\u003cp\u003e匹配系统非常灵活，还可以通过 iptables extension 大大扩展其功能。规则可以匹配\u003cstrong\u003e协\n议类型、目的或源地址、目的或源端口、目的或源网段、接收或发送的接口（网卡）、协议\n头、连接状态\u003c/strong\u003e等等条件。这些综合起来，能够组合成非常复杂的规则来区分不同的网络流\n量。\u003c/p\u003e\n\n\u003ch2 id=\"62-目标\"\u003e6.2 目标\u003c/h2\u003e\n\n\u003cp\u003e包符合某种规则的条件而触发的动作（action）叫做目标（target）。目标分为两种类型：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e终止目标\u003c/strong\u003e（terminating targets）：这种 target 会终止 chain 的匹配，将控制权\n转移回 netfilter hook。根据返回值的不同，hook 或者将包丢弃，或者允许包进行下一\n阶段的处理\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e非终止目标\u003c/strong\u003e（non-terminating targets）：非终止目标执行动作，然后继续 chain\n的执行。虽然每个 chain 最终都会回到一个终止目标，但是在这之前，可以执行任意多\n个非终止目标\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e每个规则可以跳转到哪个 target 依上下文而定，例如，table 和 chain 可能会设置\ntarget 可用或不可用。规则里激活的 extensions 和匹配条件也影响 target 的可用性。\u003c/p\u003e\n\n\u003ch1 id=\"7-跳转到用户自定义-chain\"\u003e7 跳转到用户自定义 chain\u003c/h1\u003e\n\n\u003cp\u003e这里要介绍一种特殊的非终止目标：跳转目标（jump target）。jump target 是跳转到其\n他 chain 继续处理的动作。我们已经讨论了很多内置的 chain，它们和调用它们的\nnetfilter hook 紧密联系在一起。然而，iptables 也支持管理员创建他们自己的用于管理\n目的的 chain。\u003c/p\u003e\n\n\u003cp\u003e向用户自定义 chain 添加规则和向内置的 chain 添加规则的方式是相同的。不同的地方在于，\n\u003cstrong\u003e\u003cmark\u003e用户定义的 chain 只能通过从另一个规则跳转（jump）到它，因为它们没有注册到 netfilter hook\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e用户定义的 chain 可以看作是对调用它的 chain 的扩展。例如，用户定义的 chain 在结\n束的时候，可以返回 netfilter hook，也可以继续跳转到其他自定义 chain。\u003c/p\u003e\n\n\u003cp\u003e这种设计使框架具有强大的分支功能，使得管理员可以组织更大更复杂的网络规则。\u003c/p\u003e\n\n\u003ch1 id=\"8-iptables-和-conntrack\"\u003e8 iptables 和 conntrack\u003c/h1\u003e\n\n\u003cp\u003e在讨论 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eraw\u003c/code\u003e table 和 匹配连接状态的时候，我们介绍了构建在 netfilter 之上的\n连接跟踪（conntrack）系统。连接跟踪系统使得 iptables 基于连接上下文而不是单个包来做出规则判断，\n给 iptables 提供了有状态操作的功能。\u003c/p\u003e\n\n\u003cp\u003e连接跟踪在包进入协议栈之后很快（very soon）就开始工作了。在给包分配连接之前所做\n的工作非常少，只有检查 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eraw\u003c/code\u003e table 和一些基本的完整性检查。\u003c/p\u003e\n\n\u003cp\u003e跟踪系统将包和已有的连接进行比较，如果包所属的连接已经存在就更新连接状态，\n否则就创建一个新连接。如果 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eraw\u003c/code\u003e table 的某个 chain 对包标记为目标是 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eNOTRACK\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，\n那这个包会跳过连接跟踪系统。\u003c/p\u003e\n\n\u003ch2 id=\"连接的状态\"\u003e连接的状态\u003c/h2\u003e\n\n\u003cp\u003e连接跟踪系统中的连接状态有：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNEW\u003c/code\u003e：如果到达的包关连不到任何已有的连接，但包是合法的，就为这个包创建一个新连接。对\n面向连接的（connection-aware）的协议例如 TCP 以及非面向连接的（connectionless\n）的协议例如 UDP 都适用\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eESTABLISHED\u003c/code\u003e：当一个连接收到应答方向的合法包时，状态从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNEW\u003c/code\u003e 变成\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eESTABLISHED\u003c/code\u003e。对 TCP 这个合法包其实就是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSYN/ACK\u003c/code\u003e 包；对 UDP 和 ICMP 是源和目\n的 IP 与原包相反的包\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eRELATED\u003c/code\u003e：包不属于已有的连接，但是和已有的连接有一定关系。这可能是辅助连接（\nhelper connection），例如 FTP 数据传输连接，或者是其他协议试图建立连接时的\nICMP 应答包\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eINVALID\u003c/code\u003e：包不属于已有连接，并且因为某些原因不能用来创建一个新连接，例如无法\n识别、无法路由等等\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eUNTRACKED\u003c/code\u003e：如果在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eraw\u003c/code\u003e table 中标记为目标是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eUNTRACKED\u003c/code\u003e，这个包将不会进入连\n接跟踪系统\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSNAT\u003c/code\u003e：包的源地址被 NAT 修改之后会进入的虚拟状态。连接跟踪系统据此在收到\n反向包时对地址做反向转换\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDNAT\u003c/code\u003e：包的目的地址被 NAT 修改之后会进入的虚拟状态。连接跟踪系统据此在收到\n反向包时对地址做反向转换\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e这些状态可以定位到连接生命周期内部，管理员可以编写出更加细粒度、适用范围更大、更\n安全的规则。\u003c/p\u003e\n\n\u003ch1 id=\"9-总结\"\u003e9 总结\u003c/h1\u003e\n\n\u003cp\u003enetfilter 包过滤框架和 iptables 防火墙是 Linux 服务器上大部分防火墙解决方案的基\n础。netfilter 的内核 hook 和协议栈足够紧密，提供了包经过系统时的强大控制功能。\niptables 防火墙基于这些功能提供了一个灵活的、可扩展的、将策略需求转化到内核的方\n法。理解了这些不同部分是如何联系到一起的，就可以使用它们控制和保护你的的服务器环\n境。\u003c/p\u003e\n\n\u003cp\u003e想了解更多 iptables 使用方式，参考这个\n\u003ca href=\"https://www.digitalocean.com/community/tutorials/how-to-choose-an-effective-firewall-policy-to-secure-your-servers\"\u003e教程\u003c/a\u003e。\u003c/p\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/nat-zh/\"\u003e\u003cspan\u003e« [译] NAT - 网络地址转换（2016）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/intro-to-modern-lb-and-proxy-zh/\"\u003e\u003cspan\u003e[译] 现代网络负载均衡与代理导论（2017） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2019-02-18T00:00:00Z",
  "Author": "Arthur Chiao"
}