{
  "Source": "arthurchiao.art",
  "Title": "Linux tracing/profiling 基础：符号表、调用栈、perf/bpftrace 示例等（2022）",
  "Link": "https://arthurchiao.art/blog/linux-tracing-basis-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eLinux tracing/profiling 基础：符号表、调用栈、perf/bpftrace 示例等（2022）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2022-07-18 | Last Update 2023-02-21\u003c/p\u003e\n  \n  \u003cp\u003e整理一些 tracing/profiling 笔记，目前大部分内容都来自\n\u003ca href=\"https://medium.com/coccoc-engineering-blog/things-you-should-know-to-begin-playing-with-linux-tracing-tools-part-i-x-225aae1aaf13\"\u003ePractical Linux tracing\u003c/a\u003e\n系列文章。\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#1-引言\" id=\"markdown-toc-1-引言\"\u003e1 引言\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-热点与调用栈分析perf-recordreportscript\" id=\"markdown-toc-11-热点与调用栈分析perf-recordreportscript\"\u003e1.1 热点与调用栈分析（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf record/report/script\u003c/code\u003e）\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#111-采样perf-record\" id=\"markdown-toc-111-采样perf-record\"\u003e1.1.1 采样：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf record\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#112-查看函数-cpu-占用量perf-report\" id=\"markdown-toc-112-查看函数-cpu-占用量perf-report\"\u003e1.1.2 查看函数 CPU 占用量：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf report\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#113-打印调用栈perf-script\" id=\"markdown-toc-113-打印调用栈perf-script\"\u003e1.1.3 打印调用栈：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf script\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#114-生成火焰图perf-script----resultsvg\" id=\"markdown-toc-114-生成火焰图perf-script----resultsvg\"\u003e1.1.4 生成火焰图：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf script | ... \u0026gt; result.svg\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-符号symbols\" id=\"markdown-toc-12-符号symbols\"\u003e1.2 符号（symbols）\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#121-查看-objectbinary-file-中有哪些符号\" id=\"markdown-toc-121-查看-objectbinary-file-中有哪些符号\"\u003e1.2.1 查看 object/binary file 中有哪些符号\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#122-查看内核符号表\" id=\"markdown-toc-122-查看内核符号表\"\u003e1.2.2 查看内核符号表\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#123-小结\" id=\"markdown-toc-123-小结\"\u003e1.2.3 小结\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-小结\" id=\"markdown-toc-13-小结\"\u003e1.3 小结\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-极简程序-hello-world探究符号\" id=\"markdown-toc-2-极简程序-hello-world探究符号\"\u003e2 极简程序 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehello-world\u003c/code\u003e：探究符号\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-c-源码\" id=\"markdown-toc-21-c-源码\"\u003e2.1 C 源码\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-编译成目标文件不带--g\" id=\"markdown-toc-22-编译成目标文件不带--g\"\u003e2.2 编译成目标文件（不带 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-g\u003c/code\u003e）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-查看目标文件objdumpreadelf\" id=\"markdown-toc-23-查看目标文件objdumpreadelf\"\u003e2.3 查看目标文件（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eobjdump/readelf\u003c/code\u003e）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-bpftrace-跟踪-hello-world-程序执行\" id=\"markdown-toc-24-bpftrace-跟踪-hello-world-程序执行\"\u003e2.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftrace\u003c/code\u003e 跟踪 hello-world 程序执行\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#25-bpftrace-跟踪容器方式部署的应用container-process\" id=\"markdown-toc-25-bpftrace-跟踪容器方式部署的应用container-process\"\u003e2.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftrace\u003c/code\u003e 跟踪容器方式部署的应用（container process）\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#251-指定目标文件的绝对路径\" id=\"markdown-toc-251-指定目标文件的绝对路径\"\u003e2.5.1 指定目标文件的绝对路径\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#252-指定目标进程-pid-procpid\" id=\"markdown-toc-252-指定目标进程-pid-procpid\"\u003e2.5.2 指定目标进程 PID \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/\u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#253-指定目标进程-pid--p-pid\" id=\"markdown-toc-253-指定目标进程-pid--p-pid\"\u003e2.5.3 指定目标进程 PID \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-p \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#26-bpftrace-跟踪内核函数调用栈\" id=\"markdown-toc-26-bpftrace-跟踪内核函数调用栈\"\u003e2.6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftrace\u003c/code\u003e 跟踪内核函数调用栈\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#27-小结\" id=\"markdown-toc-27-小结\"\u003e2.7 小结\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-符号\" id=\"markdown-toc-3-符号\"\u003e3 符号\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-动态符号dynsymvs-局部符号symtab\" id=\"markdown-toc-31-动态符号dynsymvs-局部符号symtab\"\u003e3.1 动态符号（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e.dynsym\u003c/code\u003e）vs. 局部符号（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e.symtab\u003c/code\u003e）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-stripped-vs-not-stripped\" id=\"markdown-toc-32-stripped-vs-not-stripped\"\u003e3.2 stripped vs. not stripped\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#321-手动去掉局部符号strip--s\" id=\"markdown-toc-321-手动去掉局部符号strip--s\"\u003e3.2.1 手动去掉局部符号（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estrip -s\u003c/code\u003e）\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#322-再次用-bpftrace-跟踪局部函数\" id=\"markdown-toc-322-再次用-bpftrace-跟踪局部函数\"\u003e3.2.2 再次用 bpftrace 跟踪局部函数\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-debug-symbolgcc--gdwarf-格式\" id=\"markdown-toc-4-debug-symbolgcc--gdwarf-格式\"\u003e4 Debug symbol（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egcc -g\u003c/code\u003e）：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDWARF\u003c/code\u003e 格式\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-debug-symbols-的用途或功能\" id=\"markdown-toc-41-debug-symbols-的用途或功能\"\u003e4.1 Debug symbols 的用途或功能\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#411-功能一将内存地址映射到具体某行源代码\" id=\"markdown-toc-411-功能一将内存地址映射到具体某行源代码\"\u003e4.1.1 功能一：将内存地址映射到具体某行源代码\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#412-功能二调用栈展开stack-unwinding\" id=\"markdown-toc-412-功能二调用栈展开stack-unwinding\"\u003e4.1.2 功能二：调用栈展开（stack unwinding）\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-dwarf-格式存在的一些问题\" id=\"markdown-toc-42-dwarf-格式存在的一些问题\"\u003e4.2 DWARF 格式存在的一些问题\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-调用栈展开方式二frame-pointer\" id=\"markdown-toc-5-调用栈展开方式二frame-pointer\"\u003e5 调用栈展开（方式二）：frame pointer\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#51-基本原理\" id=\"markdown-toc-51-基本原理\"\u003e5.1 基本原理\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#52-例子\" id=\"markdown-toc-52-例子\"\u003e5.2 例子\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#53-存在的问题默认编译参数--fomit-frame-pointer\" id=\"markdown-toc-53-存在的问题默认编译参数--fomit-frame-pointer\"\u003e5.3 存在的问题：默认编译参数 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-fomit-frame-pointer\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#6-profiling--tracing\" id=\"markdown-toc-6-profiling--tracing\"\u003e6 Profiling \u0026amp; tracing\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#61-perf-profiling\" id=\"markdown-toc-61-perf-profiling\"\u003e6.1 Perf profiling\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#62-bpftrace-profiling\" id=\"markdown-toc-62-bpftrace-profiling\"\u003e6.2 bpftrace profiling\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#63-bpftrace-event-tracing\" id=\"markdown-toc-63-bpftrace-event-tracing\"\u003e6.3 bpftrace event tracing\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#kernel-tracing\" id=\"markdown-toc-kernel-tracing\"\u003eKernel tracing\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#user-space-tracing\" id=\"markdown-toc-user-space-tracing\"\u003eUser space tracing\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#7-procpid\" id=\"markdown-toc-7-procpid\"\u003e7 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/\u0026lt;pid\u0026gt;/*\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#71-procpidstatus\" id=\"markdown-toc-71-procpidstatus\"\u003e7.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/\u0026lt;pid\u0026gt;/status\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#72-procpidstack\" id=\"markdown-toc-72-procpidstack\"\u003e7.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/\u0026lt;pid\u0026gt;/stack\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#73-procpidmaps\" id=\"markdown-toc-73-procpidmaps\"\u003e7.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/\u0026lt;pid\u0026gt;/maps\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#参考资料\" id=\"markdown-toc-参考资料\"\u003e参考资料\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"1-引言\"\u003e1 引言\u003c/h1\u003e\n\n\u003ch2 id=\"11-热点与调用栈分析perf-recordreportscript\"\u003e1.1 热点与调用栈分析（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf record/report/script\u003c/code\u003e）\u003c/h2\u003e\n\n\u003ch3 id=\"111-采样perf-record\"\u003e1.1.1 采样：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf record\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf\u003c/code\u003e 能够跟踪记录内核及应用程序的执行状态，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eperf record \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e \u003cspan class=\"nt\"\u003e--\u003c/span\u003e \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e5\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e perf record: Woken up 10 \u003cspan class=\"nb\"\u003etimes \u003c/span\u003eto write data \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e perf record: Captured and wrote 4.636 MB perf.data \u003cspan class=\"o\"\u003e(\u003c/span\u003e24700 samples\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e生成的信息保存在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf.data\u003c/code\u003e 中，然后通过 perf report/script，就可以分析性能和调用栈。\u003c/p\u003e\n\n\u003ch3 id=\"112-查看函数-cpu-占用量perf-report\"\u003e1.1.2 查看函数 CPU 占用量：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf report\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf report\u003c/code\u003e 查看看\u003cstrong\u003e\u003cmark\u003e哪些函数占用的 CPU 最多\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eperf report\nSamples: 24K of event \u003cspan class=\"s1\"\u003e\u0026#39;cycles\u0026#39;\u003c/span\u003e, Event count \u003cspan class=\"o\"\u003e(\u003c/span\u003eapprox.\u003cspan class=\"o\"\u003e)\u003c/span\u003e: 4868947877\n  Children      Self  Command   Shared Object        Symbol\n+   17.08%     0.23%  swapper   \u003cspan class=\"o\"\u003e[\u003c/span\u003ekernel.kallsyms]    \u003cspan class=\"o\"\u003e[\u003c/span\u003ek] do_idle\n+    5.38%     5.38%  swapper   \u003cspan class=\"o\"\u003e[\u003c/span\u003ekernel.kallsyms]    \u003cspan class=\"o\"\u003e[\u003c/span\u003ek] intel_idle\n+    4.21%     0.02%  kubelet   \u003cspan class=\"o\"\u003e[\u003c/span\u003ekernel.kallsyms]    \u003cspan class=\"o\"\u003e[\u003c/span\u003ek] entry_SYSCALL_64_after_hwframe\n+    4.08%     0.00%  kubelet   kubelet              \u003cspan class=\"o\"\u003e[\u003c/span\u003e.] k8s.io/kubernetes/vendor/github.com/google/...\n+    4.06%     0.00%  dockerd   dockerd              \u003cspan class=\"o\"\u003e[\u003c/span\u003e.] net/http.\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003econn\u003cspan class=\"o\"\u003e)\u003c/span\u003e.serve\n+    3.96%     0.00%  dockerd   dockerd              \u003cspan class=\"o\"\u003e[\u003c/span\u003e.] net/http.serverHandler.ServeHTTP\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这是一个交互式的窗口，可以选中具体函数展开查看详情。\u003c/p\u003e\n\n\u003ch3 id=\"113-打印调用栈perf-script\"\u003e1.1.3 打印调用栈：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf script\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e展示采集到的事件及其\u003cstrong\u003e\u003cmark\u003e调用栈\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eperf script\nperf 44564 \u003cspan class=\"o\"\u003e[\u003c/span\u003e000] 743873.947847:          1   cycles:\n        ffffffffa786af46 native_write_msr+0x6 \u003cspan class=\"o\"\u003e([\u003c/span\u003ekernel.kallsyms]\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        ffffffffa780d92f __intel_pmu_enable_all.constprop.0+0x3f \u003cspan class=\"o\"\u003e([\u003c/span\u003ekernel.kallsyms]\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        ffffffffa79fb3a9 event_function+0x89 \u003cspan class=\"o\"\u003e([\u003c/span\u003ekernel.kallsyms]\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        ffffffffa79f48ee remote_function+0x3e \u003cspan class=\"o\"\u003e([\u003c/span\u003ekernel.kallsyms]\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        ffffffffa7933199 generic_exec_single+0x59 \u003cspan class=\"o\"\u003e([\u003c/span\u003ekernel.kallsyms]\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        ffffffffa79332ac smp_call_function_single+0xdc \u003cspan class=\"o\"\u003e([\u003c/span\u003ekernel.kallsyms]\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"114-生成火焰图perf-script----resultsvg\"\u003e1.1.4 生成火焰图：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf script | ... \u0026gt; result.svg\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e将 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf script\u003c/code\u003e 的输出重定向到 perl 脚本做进一步处理，就得到了著名的\u003cstrong\u003e\u003cmark\u003e火焰图\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eperf script | ./stackcollapse-perf.pl | ./flamegraph.pl \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e result.svg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e以上这些都是基于 tracing 功能。\u003c/p\u003e\n\n\u003ch2 id=\"12-符号symbols\"\u003e1.2 符号（symbols）\u003c/h2\u003e\n\n\u003cp\u003eTracing 功能的基础是符号（symbols），即\u003cstrong\u003e\u003cmark\u003e目标文件中的函数信息\u003c/mark\u003e\u003c/strong\u003e。\nSymbols 对 kprobe/uprobe event tracing 至关重要，因为知道函数名字才能跟踪。来看两个例子：\u003c/p\u003e\n\n\u003ch3 id=\"121-查看-objectbinary-file-中有哪些符号\"\u003e1.2.1 查看 object/binary file 中有哪些符号\u003c/h3\u003e\n\n\u003cp\u003e查看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003egrep\u003c/code\u003e 这个最常用的命令（可执行文件）中包含哪些符号：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ereadelf \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e \u003cspan class=\"sb\"\u003e`\u003c/span\u003ewhich \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\nSymbol table \u003cspan class=\"s1\"\u003e\u0026#39;.dynsym\u0026#39;\u003c/span\u003e contains 137 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND\n     1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __ctype_toupper_loc@GLIBC_2.3 \u003cspan class=\"o\"\u003e(\u003c/span\u003e2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __uflow@GLIBC_2.2.5 \u003cspan class=\"o\"\u003e(\u003c/span\u003e3\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND getenv@GLIBC_2.2.5 \u003cspan class=\"o\"\u003e(\u003c/span\u003e3\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"122-查看内核符号表\"\u003e1.2.2 查看内核符号表\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/kallsyms | egrep \u003cspan class=\"s1\"\u003e\u0026#39; (t|T) \u0026#39;\u003c/span\u003e | \u003cspan class=\"nb\"\u003ehead\n\u003c/span\u003e0000000000000000 T startup_64\n0000000000000000 T secondary_startup_64\n0000000000000000 t verify_cpu\n0000000000000000 T sev_verify_cbit\n0000000000000000 T start_cpu0\n0000000000000000 T __startup_64\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"123-小结\"\u003e1.2.3 小结\u003c/h3\u003e\n\n\u003cp\u003e以上看出，\u003cstrong\u003e\u003cmark\u003e符号可以位于目标文件中，也可以存放在单独的文件\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"13-小结\"\u003e1.3 小结\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003eSymbols 与 gcc -g 产生的 debug info 并不是一个东西\u003c/mark\u003e\u003c/strong\u003e。\n下面我们通过一个简单例子来看一下。\u003c/p\u003e\n\n\u003ch1 id=\"2-极简程序-hello-world探究符号\"\u003e2 极简程序 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehello-world\u003c/code\u003e：探究符号\u003c/h1\u003e\n\n\u003ch2 id=\"21-c-源码\"\u003e2.1 C 源码\u003c/h2\u003e\n\n\u003cp\u003eC 程序 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehello-world.c\u003c/code\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unistd.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003ehello\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello, world!\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ehello\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"22-编译成目标文件不带--g\"\u003e2.2 编译成目标文件（不带 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-g\u003c/code\u003e）\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egcc hello-world.c \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e hello-world\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efile\u003c/code\u003e 查看目标文件信息：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003efile hello-world\nhello-world: ELF 64-bit LSB executable, x86-64, version 1 \u003cspan class=\"o\"\u003e(\u003c/span\u003eSYSV\u003cspan class=\"o\"\u003e)\u003c/span\u003e, dynamically linked \u003cspan class=\"o\"\u003e(\u003c/span\u003euses shared libs\u003cspan class=\"o\"\u003e)\u003c/span\u003e, not stripped\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到是可执行文件，后面会解释 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enot stripped\u003c/code\u003e 是什么意思。\u003c/p\u003e\n\n\u003ch2 id=\"23-查看目标文件objdumpreadelf\"\u003e2.3 查看目标文件（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eobjdump/readelf\u003c/code\u003e）\u003c/h2\u003e\n\n\u003cp\u003e用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eobjdump\u003c/code\u003e 查看可执行文件（目标文件） \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehello-world\u003c/code\u003e 中的各 section：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# -h/--headers\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eobjdump \u003cspan class=\"nt\"\u003e-h\u003c/span\u003e hello\nhello-world:     file format elf64-x86-64\n\nSections:\nIdx Name          Size      VMA               LMA               File off  Algn\n  0 .interp       0000001c  0000000000400238  0000000000400238  00000238  2\u003cspan class=\"k\"\u003e**\u003c/span\u003e0\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n  4 .dynsym       00000078  00000000004002b8  00000000004002b8  000002b8  2\u003cspan class=\"k\"\u003e**\u003c/span\u003e3\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n ...\n 24 .data         00000004  0000000000601030  0000000000601030  00001030  2\u003cspan class=\"k\"\u003e**\u003c/span\u003e0\n                  CONTENTS, ALLOC, LOAD, DATA\n 25 .bss          00000004  0000000000601034  0000000000601034  00001034  2\u003cspan class=\"k\"\u003e**\u003c/span\u003e0\n                  ALLOC\n 26 .comment      0000002d  0000000000000000  0000000000000000  00001034  2\u003cspan class=\"k\"\u003e**\u003c/span\u003e0\n                  CONTENTS, READONLY\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003e确认其中并没有\u003c/mark\u003e\u003c/strong\u003e debug section：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eobjdump \u003cspan class=\"nt\"\u003e-h\u003c/span\u003e hello | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003edebug\n\u003cspan class=\"c\"\u003e#\u0026lt;nothing found\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ereadelf -s\u003c/code\u003e 读取 symbols，确认其中有我们定义的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehello()\u003c/code\u003e 方法：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# -s/--symbols\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ereadelf \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e hello-world | fgrep hello\n\nSymbol table \u003cspan class=\"s1\"\u003e\u0026#39;.dynsym\u0026#39;\u003c/span\u003e contains 5 entries:  \u003cspan class=\"c\"\u003e# 动态符号表\u003c/span\u003e\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND\n     1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND puts@GLIBC_2.2.5 \u003cspan class=\"o\"\u003e(\u003c/span\u003e2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.2.5 \u003cspan class=\"o\"\u003e(\u003c/span\u003e2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n     3: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n     4: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND \u003cspan class=\"nb\"\u003esleep\u003c/span\u003e@GLIBC_2.2.5 \u003cspan class=\"o\"\u003e(\u003c/span\u003e2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\nSymbol table \u003cspan class=\"s1\"\u003e\u0026#39;.symtab\u0026#39;\u003c/span\u003e contains 66 entries: \u003cspan class=\"c\"\u003e# 局部（local）符号表\u003c/span\u003e\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND\n     1: 0000000000400238     0 SECTION LOCAL  DEFAULT    1\n    ...\n    53: 000000000040055d    26 FUNC    GLOBAL DEFAULT   14 hello  \u003cspan class=\"c\"\u003e# hello() 函数\u003c/span\u003e\n    ...\n    62: 0000000000400577    16 FUNC    GLOBAL DEFAULT   14 main\n    64: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND \u003cspan class=\"nb\"\u003esleep\u003c/span\u003e@@GLIBC_2.2.5\n    65: 0000000000400400     0 FUNC    GLOBAL DEFAULT   11 _init\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"24-bpftrace-跟踪-hello-world-程序执行\"\u003e2.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftrace\u003c/code\u003e 跟踪 hello-world 程序执行\u003c/h2\u003e\n\n\u003cp\u003e执行 hello-world 程序，\n用 bpftrace 来跟踪这个方法，注意这是用户空间函数，因此用 uprobe，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;uprobe:./hello-world:hello {printf(\u0026#34;%s\u0026#34;,ustack)}\u0026#39;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e ./hello-world\nAttaching 1 probe...\nhello world!\n\n        hello+0\n        __libc_start_main+245\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"25-bpftrace-跟踪容器方式部署的应用container-process\"\u003e2.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftrace\u003c/code\u003e 跟踪容器方式部署的应用（container process）\u003c/h2\u003e\n\n\u003cp\u003e如果应用程序跑在容器内，在宿主机用 bpftrace 跟踪时，需要一些额外信息 [2]。\u003c/p\u003e\n\n\u003ch3 id=\"251-指定目标文件的绝对路径\"\u003e2.5.1 指定目标文件的绝对路径\u003c/h3\u003e\n\n\u003cp\u003e目标文件在宿主机上的绝对路径。\u003c/p\u003e\n\n\u003cp\u003e例如，如果想跟踪 cilium-agent 进程（本身是用 docker 容器部署的），首先需要找到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-agent\u003c/code\u003e\n文件在宿主机上的绝对路径，可以通过 container ID 或 name 找，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Check cilium-agent container\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker ps | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003ecilium-agent\n0eb2e76384b3        cilium:test   \u003cspan class=\"s2\"\u003e\u0026#34;/usr/bin/cilium-agent ...\u0026#34;\u003c/span\u003e   4 hours ago    Up 4 hours   cilium-agent\n\n\u003cspan class=\"c\"\u003e# Find the merged path for cilium-agent container\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker inspect \u003cspan class=\"nt\"\u003e--format\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;{{.GraphDriver.Data.MergedDir}}\u0026#34;\u003c/span\u003e 0eb2e76384b3\n/var/lib/docker/overlay2/a17f868d/merged \u003cspan class=\"c\"\u003e# a17f868d.. is shortened for better viewing\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# The object file we are going to trace\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nt\"\u003e-ahl\u003c/span\u003e /var/lib/docker/overlay2/a17f868d/merged/usr/bin/cilium-agent\n\u003cspan class=\"nt\"\u003e-rwxr-xr-x\u003c/span\u003e 1 root root 86M /var/lib/docker/overlay2/a17f868d/merged/usr/bin/cilium-agent\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e也可以暴力一点直接 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efind\u003c/code\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003efind /var/lib/docker/overlay2/ \u003cspan class=\"nt\"\u003e-name\u003c/span\u003e cilium-agent\n/var/lib/docker/overlay2/a17f868d/merged/usr/bin/cilium-agent\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后再指定绝对路径 uprobe：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;uprobe:/var/lib/docker/overlay2/a17f868d/merged/usr/bin/cilium-agent:\u0026#34;github.com/cilium/cilium/pkg/endpoint.(*Endpoint).regenerate\u0026#34; {printf(\u0026#34;%s\\n\u0026#34;, ustack); }\u0026#39;\u003c/span\u003e\nAttaching 1 probe...\n\n        github.com/cilium/cilium/pkg/endpoint.\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003eEndpoint\u003cspan class=\"o\"\u003e)\u003c/span\u003e.regenerate+0\n        github.com/cilium/cilium/pkg/eventqueue.\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003eEventQueue\u003cspan class=\"o\"\u003e)\u003c/span\u003e.run.func1+363\n        sync.\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003eOnce\u003cspan class=\"o\"\u003e)\u003c/span\u003e.doSlow+236\n        github.com/cilium/cilium/pkg/eventqueue.\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003eEventQueue\u003cspan class=\"o\"\u003e)\u003c/span\u003e.run+101\n        runtime.goexit+1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中可 tracing 的符号（函数）列表：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enm cilium-agent\n000000000427d1d0 B bufio.ErrBufferFull\n000000000427d1e0 B bufio.ErrFinalToken\n0000000001d3e940 T type..hash.github.com/cilium/cilium/pkg/k8s.ServiceID\n0000000001f32300 T type..hash.github.com/cilium/cilium/pkg/node/types.Identity\n0000000001d05620 T type..hash.github.com/cilium/cilium/pkg/policy/api.FQDNSelector\n0000000001d05e80 T type..hash.github.com/cilium/cilium/pkg/policy.PortProto\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"252-指定目标进程-pid-procpid\"\u003e2.5.2 指定目标进程 PID \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/\u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003edocker inspect \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;{{.State.Pid}}\u0026#39;\u003c/span\u003e cilium-agent\n109997\n\n\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;uprobe:/proc/109997/root/usr/bin/cilium-agent:\u0026#34;github.com/cilium/cilium/pkg/endpoint.(*Endpoint).regenerate\u0026#34; {printf(\u0026#34;%s\\n\u0026#34;, ustack); }\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"253-指定目标进程-pid--p-pid\"\u003e2.5.3 指定目标进程 PID \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-p \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 109997 \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;uprobe:/usr/bin/cilium-agent:\u0026#34;github.com/cilium/cilium/pkg/endpoint.(*Endpoint).regenerate\u0026#34; {printf(\u0026#34;%s\\n\u0026#34;, ustack); }\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"26-bpftrace-跟踪内核函数调用栈\"\u003e2.6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftrace\u003c/code\u003e 跟踪内核函数调用栈\u003c/h2\u003e\n\n\u003cp\u003e这一节跟 hello-world 无关，只是介绍到 bpftrace 顺便记录一下。\u003c/p\u003e\n\n\u003cp\u003e假设我们想看下到连接跟踪函数 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_in()\u003c/code\u003e 的调用栈：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# 确认有这个函数\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003enf_conntrack_in\nkprobe:__nf_conntrack_insert_prepare\nkprobe:nf_conntrack_in\n...\n\n\u003cspan class=\"c\"\u003e# 打印内核调用栈 kstack\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;kprobe:nf_conntrack_in {printf(\u0026#34;%s\\n\u0026#34;, kstack); }\u0026#39;\u003c/span\u003e\n        nf_conntrack_in+1\n        nf_hook_slow+64\n        nf_hook_slow_list+145\n        ip_sublist_rcv+513\n        ip_list_rcv+311\n        __netif_receive_skb_list_core+689\n        netif_receive_skb_list_internal+460\n        gro_normal_list.part.0+25\n        napi_complete_done+104\n        ixgbe_poll+279\n        __napi_poll+42\n        net_rx_action+597\n        ...\n        secondary_startup_64_no_verify+194\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e类似地，跟踪 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_redirect\u003c/code\u003e 相关调用栈：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003ebpf_redirect\nkprobe:bpf_redirect\nkprobe:bpf_redirect_peer\nkprobe:bpf_redirect_neigh\n...\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;kprobe:bpf_redirect_peer {printf(\u0026#34;%s\\n\u0026#34;, kstack); }\u0026#39;\u003c/span\u003e\n        bpf_redirect_peer+1\n        bpf_prog_fc3cde0e960699b4_handle_policy+6934\n        cls_bpf_classify+264\n        tcf_classify+90\n        __netif_receive_skb_core+1116\n        __netif_receive_skb_list_core+319\n        netif_receive_skb_list_internal+460\n        gro_normal_list.part.0+25\n        napi_complete_done+104\n        ixgbe_poll+279\n        __napi_poll+42\n        net_rx_action+597\n        ...\n        secondary_startup_64_no_verify+194\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"27-小结\"\u003e2.7 小结\u003c/h2\u003e\n\n\u003cp\u003e以上 hello-world 例子可以看出，\u003cstrong\u003e\u003cmark\u003efunction tracing 只需要 symbols\u003c/mark\u003e\u003c/strong\u003e，不需要 debug symbols（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egcc -g\u003c/code\u003e）。\n那 debug info 有什么用呢？在回答这个问题之前，我们先更深入了解下常规 symbols。\u003c/p\u003e\n\n\u003ch1 id=\"3-符号\"\u003e3 符号\u003c/h1\u003e\n\n\u003ch2 id=\"31-动态符号dynsymvs-局部符号symtab\"\u003e3.1 动态符号（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e.dynsym\u003c/code\u003e）vs. 局部符号（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e.symtab\u003c/code\u003e）\u003c/h2\u003e\n\n\u003cp\u003eSymbols 有两种，都是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ereadelf -s\u003c/code\u003e 输出中的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFUNC\u003c/code\u003e 类型，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e.dynsym\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e：动态符号，可以被其他程序使用；\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e.symtab\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e：“局部”符号，只能被该可执行程序自己使用。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"32-stripped-vs-not-stripped\"\u003e3.2 stripped vs. not stripped\u003c/h2\u003e\n\n\u003cp\u003e通常情况下，生成可执行文件时，“局部”符号会被去掉，（以减小 binary size），\n然后通过单独的 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003exx-dbg/xx-dbgsym\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 包来提供这些符号\n（也就是放到独立的文件，按需下载和使用）。\u003c/p\u003e\n\n\u003cp\u003e先看个正常的，\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ readelf -s hello-world | grep \u0026#34;Symbol table\u0026#34;\nSymbol table \u0026#39;.dynsym\u0026#39; contains 8 entries:\nSymbol table \u0026#39;.symtab\u0026#39; contains 67 entries:\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e两个符号表里面的函数都可以跟踪。再看 nginx，就去掉了 local：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ereadelf \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e \u003cspan class=\"sb\"\u003e`\u003c/span\u003ewhich nginx\u003cspan class=\"sb\"\u003e`\u003c/span\u003e | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Symbol table\u0026#39;\u003c/span\u003e\nSymbol table \u003cspan class=\"s1\"\u003e\u0026#39;.dynsym\u0026#39;\u003c/span\u003e contains 1077 entries: \u003cspan class=\"c\"\u003e# 只能跟踪这里面的 FUNC 了\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"321-手动去掉局部符号strip--s\"\u003e3.2.1 手动去掉局部符号（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estrip -s\u003c/code\u003e）\u003c/h3\u003e\n\n\u003cp\u003e可以用命令 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estrip\u003c/code\u003e 来\u003cstrong\u003e\u003cmark\u003e手动去掉局部符号表\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003estrip \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e ./hello-world \u003cspan class=\"c\"\u003e# 原地 strip，直接修改可执行文件\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ereadelf \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e hello-world | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Symbol table\u0026#34;\u003c/span\u003e\nSymbol table \u003cspan class=\"s1\"\u003e\u0026#39;.dynsym\u0026#39;\u003c/span\u003e contains 8 entries:\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果对比 strip 前面的文件类型变化：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003efile hello \u003cspan class=\"c\"\u003e# strip 之前的可执行文件\u003c/span\u003e\nhello: ELF 64-bit LSB executable, x86-64, dynamically linked, ..., not stripped\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003estrip \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e hello\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003efile hello \u003cspan class=\"c\"\u003e# strip 之后的可执行文件\u003c/span\u003e\nhello: ELF 64-bit LSB executable, x86-64, dynamically linked, ..., stripped\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"322-再次用-bpftrace-跟踪局部函数\"\u003e3.2.2 再次用 bpftrace 跟踪局部函数\u003c/h3\u003e\n\n\u003cp\u003estrip 之后再测试用 bpftrace 来跟踪局部函数，就不行了：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;uprobe:./hello:hello {printf(\u0026#34;%s\u0026#34;,ustack)}\u0026#39;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e ./hello\nNo probes to attach\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"4-debug-symbolgcc--gdwarf-格式\"\u003e4 Debug symbol（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egcc -g\u003c/code\u003e）：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDWARF\u003c/code\u003e 格式\u003c/h1\u003e\n\n\u003cp\u003e对 symbols 有了一个基本了解之后，现在我们重新回到 debug symbols。\u003c/p\u003e\n\n\u003cp\u003e既然对于跟踪来说 symbols 就够用了，那 debug symbols 有什么用呢？\u003c/p\u003e\n\n\u003ch2 id=\"41-debug-symbols-的用途或功能\"\u003e4.1 Debug symbols 的用途或功能\u003c/h2\u003e\n\n\u003cp\u003eDebug symbol 是 \u003ca href=\"https://en.wikipedia.org/wiki/DWARF\"\u003edwarf\u003c/a\u003e 格式信息 。\n\u003ca href=\"https://eli.thegreenplace.net/2011/02/07/how-debuggers-work-part-3-debugging-information/\"\u003eHow debuggers work: Part 3 - Debugging information\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"411-功能一将内存地址映射到具体某行源代码\"\u003e4.1.1 功能一：将内存地址映射到具体某行源代码\u003c/h3\u003e\n\n\u003cp\u003e首先带 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-g\u003c/code\u003e 重新编译，生成的 binary 带 debug 符号，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egcc hello-world.c \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e hello-world\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e查看，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eobjdump \u003cspan class=\"nt\"\u003e--dwarf\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003edecodedline hello-world\n\nhello:     file format elf64-x86-64\n\nDecoded dump of debug contents of section .debug_line:\n\nCU: symbol.c:\nFile name           Line number    Starting address\nhello-world.c                 3            0x40055d\nhello-world.c                 4            0x400561\nhello-world.c                 5            0x40056b\nhello-world.c                 6            0x400575\nhello-world.c                 7            0x400577\nhello-world.c                 8            0x40057b\nhello-world.c                 9            0x400585\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e第二列和第三列分别是源代码行号和在内存中的地址。例如，下面这行表示源码中的第三行代码\n对应的内存地址为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0x40055d\u003c/code\u003e，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eFile name           Line number    Starting address\nhello-world.c                 3            0x40055d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ereadelf\u003c/code\u003e 输出中搜一下地址 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e0x40055d\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ereadelf \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e hello | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003e40055d\nSymbol table \u003cspan class=\"s1\"\u003e\u0026#39;.symtab\u0026#39;\u003c/span\u003e contains 71 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n    ...\n    58: 000000000040055d    26 FUNC    GLOBAL DEFAULT   14 hello\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后一列是\u003cstrong\u003e\u003cmark\u003e函数名\u003c/mark\u003e\u003c/strong\u003e，可以看到这个地址对应的是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehello()\u003c/code\u003e 函数；\n我们对照源文件看下，正是第 3 行：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e hello-world.c\n1  \u003cspan class=\"c\"\u003e#include \u0026lt;stdio.h\u0026gt;\u003c/span\u003e\n2  \u003cspan class=\"c\"\u003e#include \u0026lt;unistd.h\u0026gt;\u003c/span\u003e\n3  void hello\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n4      \u003cspan class=\"nb\"\u003eprintf\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;hello world!\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n5      \u003cspan class=\"nb\"\u003esleep\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n6  \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n7  int main\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n8      hello\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n9  \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"412-功能二调用栈展开stack-unwinding\"\u003e4.1.2 功能二：调用栈展开（stack unwinding）\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estack-unwind.c\u003c/code\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unistd.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003efunc_c\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emsec\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%s\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello world from C\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eusleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10000\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emsec\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003efunc_b\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%s\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello from B\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efunc_c\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003efunc_a\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%s\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello from A\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efunc_b\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efunc_a\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e编译，注意带 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-g\u003c/code\u003e，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egcc stack-unwind.c \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e stack-unwind\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e设置 perf 跟踪 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efunc_c()\u003c/code\u003e 函数的执行，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# -x, --exec \u0026lt;executable|path\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eperf probe \u003cspan class=\"nt\"\u003e-x\u003c/span\u003e ./stack-unwind \u003cspan class=\"s1\"\u003e\u0026#39;func_c\u0026#39;\u003c/span\u003e\nAdded new event:\n  probe_stack:func_c   \u003cspan class=\"o\"\u003e(\u003c/span\u003eon func_d \u003cspan class=\"k\"\u003ein\u003c/span\u003e /root/xxx/stack-unwind\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\nYou can now use it \u003cspan class=\"k\"\u003ein \u003c/span\u003eall perf tools, such as:\n\n        perf record \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e probe_stack:func_c \u003cspan class=\"nt\"\u003e-aR\u003c/span\u003e \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e执行应用程序，并用 perf 记录，注意这里选择的\u003cstrong\u003e\u003cmark\u003e调用图（call graph）类型是 dwarf\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eperf record \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e probe_stack:func_c \u003cspan class=\"nt\"\u003e-aR\u003c/span\u003e \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e \u003cspan class=\"nt\"\u003e--call-graph\u003c/span\u003e dwarf ./stack-unwind\nHello from A\nHello from B\nHello world from C\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e perf record: Woken up 1 \u003cspan class=\"nb\"\u003etimes \u003c/span\u003eto write data \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e perf record: Captured and wrote 1.097 MB perf.data \u003cspan class=\"o\"\u003e(\u003c/span\u003e1 samples\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e查看调用栈：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eperf script\nstack-unwind 134641 \u003cspan class=\"o\"\u003e[\u003c/span\u003e044] 748089.345628: probe_stack:func_c: \u003cspan class=\"o\"\u003e(\u003c/span\u003e40055d\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n                  40055d func_c+0x0  \u003cspan class=\"o\"\u003e(\u003c/span\u003e/root/xxx/stack-unwind\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n                  40059f func_b+0x17 \u003cspan class=\"o\"\u003e(\u003c/span\u003e/root/xxx/stack-unwind\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n                  4005b9 func_a+0x17 \u003cspan class=\"o\"\u003e(\u003c/span\u003e/root/xxx/stack-unwind\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n                  4005c9 main+0xd    \u003cspan class=\"o\"\u003e(\u003c/span\u003e/root/xxx/stack-unwind\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n            7f926d98b554 __libc_start_main+0xf4 \u003cspan class=\"o\"\u003e(\u003c/span\u003e/usr/lib64/libc-2.17.so\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n                  400498 _start+0x28 \u003cspan class=\"o\"\u003e(\u003c/span\u003e/root/xxx/stack-unwind\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"42-dwarf-格式存在的一些问题\"\u003e4.2 DWARF 格式存在的一些问题\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003e占用空间通常很大；\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e基于 BPF 的工具（例如 bpftrace）与它兼容性不好，无法展开 DWARF 类型的调用栈；\u003c/p\u003e\n\n    \u003cp\u003eBPF 工具一般使用另一种 stack unwinding 技术：\u003cstrong\u003e\u003cmark\u003eframe pointer\u003c/mark\u003e\u003c/strong\u003e（帧指针）。\n  这是 \u003cstrong\u003e\u003cmark\u003eperf 使用的默认 stack walking 方式\u003c/mark\u003e\u003c/strong\u003e，也是 bcc/bpftrace 目前支持的唯一方式。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"5-调用栈展开方式二frame-pointer\"\u003e5 调用栈展开（方式二）：frame pointer\u003c/h1\u003e\n\n\u003ch2 id=\"51-基本原理\"\u003e5.1 基本原理\u003c/h2\u003e\n\n\u003cp\u003e简单来说，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e每个 stack trace (或称 activation records 或 call stacks) 包含很多 frames，这\n些 frames 以 LIFO（后进先出）方式存储。这与栈的工作原理一样，\u003cstrong\u003e\u003cmark\u003estack frames\u003c/mark\u003e\u003c/strong\u003e 由此得名；\u003c/li\u003e\n  \u003cli\u003e每个 frame 包含了一个函数执行时的状态信息（参数所在的内存区域、局部变量、返回值等等）；\u003c/li\u003e\n  \u003cli\u003eFrame pointer 是指向 frame 内存地址的指针，\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e接下来通过一些基于汇编、offset、CPU 寄存器等黑科技，就能构建出一个完整的函数调用栈。\n刚才提到，这是 perf 的默认 stack unwinding 方式，也是 bcc/bpftrace 目前支持的唯一方式。\n但与 perf 不同，bcc/bpftrace 用自己的 BPF helper 和 map storage 来存储栈信息。\u003c/p\u003e\n\n\u003ch2 id=\"52-例子\"\u003e5.2 例子\u003c/h2\u003e\n\n\u003cp\u003e重新编译，去掉 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-g\u003c/code\u003e 参数（留着也行，但 frame pointer 不会使用 dwarf 信息），\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egcc stack-unwind.c \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e stack-unwind\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e指定 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e--call-graph fp\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eperf record \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e probe_stack:func_c \u003cspan class=\"nt\"\u003e-aR\u003c/span\u003e \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e \u003cspan class=\"nt\"\u003e--call-graph\u003c/span\u003e fp ./stack-unwind\nHello from A\nHello from B\nHello world from C\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e perf record: Woken up 1 \u003cspan class=\"nb\"\u003etimes \u003c/span\u003eto write data \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e perf record: Captured and wrote 0.402 MB perf.data \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e用 bpftrace 跟踪，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;uprobe:./stack-unwind:func_c {printf(\u0026#34;%s\\n\u0026#34;, ustack); }\u0026#39;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e ./stack-unwind\nAttaching 1 probe...\nHello from A\nHello from B\nHello world from C\n\n        func_c+0\n        func_a+24\n        main+14\n        __libc_start_main+245\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"53-存在的问题默认编译参数--fomit-frame-pointer\"\u003e5.3 存在的问题：默认编译参数 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-fomit-frame-pointer\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e出于优化目的，很多软件在正式编译时都会指定 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e-fomit-frame-pointer\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，\n导致无法使用 frame-pointer 这种 stack walking 方式。具体看下效果：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egcc stack-unwind.c \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e stack-unwind \u003cspan class=\"nt\"\u003e-fomit-frame-pointer\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;uprobe:./stack-unwind:func_c {printf(\u0026#34;%s\\n\u0026#34;, ustack); }\u0026#39;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e ./stack-unwind\nAttaching 1 probe...\nHello from A\nHello from B\nHello world from C\n\n        func_c+0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e很多系统上这都是默认选项，尤其是\u003cstrong\u003e\u003cmark\u003e性能敏感的软件，例如 C 标准库、JVM\u003c/mark\u003e\u003c/strong\u003e。\n很多时候用 frame pointer 方式展开调用栈时，会看到 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eunknown symbol\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 之类的错误，就是因为这个原因。\u003c/p\u003e\n\n\u003cp\u003e在 C 世界中，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-g\u003c/code\u003e 比 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-fno-omit-frame-pointer\u003c/code\u003e 要更常用，因此很多场景下都是可以拿到 DWARF 信息的。\u003c/p\u003e\n\n\u003ch1 id=\"6-profiling--tracing\"\u003e6 Profiling \u0026amp; tracing\u003c/h1\u003e\n\n\u003cp\u003e有了以上基础，就可以对系统或程序进行 profiling \u0026amp; tracing 了。\u003c/p\u003e\n\n\u003ch2 id=\"61-perf-profiling\"\u003e6.1 Perf profiling\u003c/h2\u003e\n\n\u003cp\u003e最简单方式：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eperf record \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e \u003cspan class=\"nt\"\u003e-F\u003c/span\u003e 99 \u003cspan class=\"nt\"\u003e--\u003c/span\u003e \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e10\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eperf script \u003cspan class=\"c\"\u003e# perf report\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e每秒采样 99 次，持续 10 秒。\u003c/p\u003e\n\n\u003cp\u003e提高采集频率：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003erate\u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e /proc/sys/kernel/perf_event_max_sample_rate\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e注意，这将对 CPU、磁盘 IO 等有显著影响。\u003c/p\u003e\n\n\u003ch2 id=\"62-bpftrace-profiling\"\u003e6.2 bpftrace profiling\u003c/h2\u003e\n\n\u003cp\u003ebpftrace 之类的工具也能做一些 profiling，但\u003cstrong\u003e\u003cmark\u003e底层还是用的 perf 数据源\u003c/mark\u003e\u003c/strong\u003e（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf_event_output()\u003c/code\u003e )\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;profile:hz:99 {@[kstack]=count();}\u0026#39;\u003c/span\u003e\nAttaching 1 probe...\n^C\n\n@[\n    poll_idle+89\n    cpuidle_enter_state+137\n    cpuidle_enter+41\n    do_idle+468\n    cpu_startup_entry+25\n    start_secondary+275\n    secondary_startup_64_no_verify+194\n\u003cspan class=\"o\"\u003e]\u003c/span\u003e: 1\n@[\n    __d_lookup_rcu+60\n    lookup_fast+69\n    walk_component+67\n    link_path_walk.part.0+545\n    path_openat+197\n    do_filp_open+145\n    do_sys_openat2+546\n    do_sys_open+68\n    do_syscall_64+51\n    entry_SYSCALL_64_after_hwframe+68\n\u003cspan class=\"o\"\u003e]\u003c/span\u003e: 1\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"63-bpftrace-event-tracing\"\u003e6.3 bpftrace event tracing\u003c/h2\u003e\n\n\u003ch3 id=\"kernel-tracing\"\u003eKernel tracing\u003c/h3\u003e\n\n\u003cp\u003e在一个窗口用 bpftrace 跟踪 open() 系统调用，如果被打开的文件是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehello-world.c\u003c/code\u003e，就打印一条消息出来：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;tracepoint:syscalls:sys_enter_open,tracepoint:syscalls:sys_enter_openat {\n    $name = str(args-\u0026gt;filename);\n    if ( $name == \u0026#34;hello-world.c\u0026#34; ) { printf(\u0026#34;Somebody touched my file!\\n\u0026#34;); }\n}\u0026#39;\u003c/span\u003e\nAttaching 2 probes...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后在另一个窗口中用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efile\u003c/code\u003e 查看这个文件的信息，这会触发 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eopen()\u003c/code\u003e 系统调用：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003efile symbol.c\nsymbol.c: C \u003cspan class=\"nb\"\u003esource\u003c/span\u003e, ASCII text\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e会看到 bpftrace 的窗口打印以下信息：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eSomebody touched my file!\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e另一个例子：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ bpftrace -e \u0026#39;tracepoint:syscalls:sys_enter_execve { printf(\u0026#34;%-10u %-5d \u0026#34;, elapsed / 1000000, pid); join(args-\u0026gt;argv); }\u0026#39;\nAttaching 1 probe...\n2244       489603 /opt/cni/bin/cilium-cni\n2976       489610 runc --version\n2983       489616 runc --version\n2989       489622 docker-init --version\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e另一个例子：\u003cstrong\u003e\u003cmark\u003e查看内核收包调用栈\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;kprobe:netif_receive_skb_list_internal {printf(\u0026#34;%s\\n\u0026#34;,kstack);}\u0026#39;\u003c/span\u003e\n\n        netif_receive_skb_list_internal+1\n        gro_normal_list.part.0+25\n        napi_complete_done+104\n        tg3_poll_msix+331\n        net_rx_action+322\n        __softirqentry_text_start+223\n        asm_call_on_stack+18\n        do_softirq_own_stack+55\n        irq_exit_rcu+202\n        common_interrupt+116\n        asm_common_interrupt+30\n        cpuidle_enter_state+218\n        cpuidle_enter+41\n        do_idle+468\n        cpu_startup_entry+25\n        start_secondary+275\n        secondary_startup_64_no_verify+194\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"user-space-tracing\"\u003eUser space tracing\u003c/h3\u003e\n\n\u003cp\u003e第一个例子：假设 libwebp 有漏洞，查看某个服务（PID 25760）是否使用了这个动态库：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003egrep \u003c/span\u003elibwebp /proc/25760/maps\n7f7bc6af3000-7f7bc6af6000 r--p 00000000 09:01 38281904                   /usr/lib/x86_64-linux-gnu/libwebp.so.6.0.2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e看到有使用这个库，接下来跟踪这个动态库，看是否真正有函数调用：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ bpftrace -e \u0026#39;uprobe:/usr/lib/x86_64-linux-gnu/libwebp.so.6.0.2:* {time(\u0026#34;%H:%M:%S \u0026#34;); printf(\u0026#34;%s %d\\n\u0026#34;,comm,pid);}\u0026#39; | tee /tmp/libwebp.trace\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e第二个例子：追踪 DNS 问题：首先找到相关函数，\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ for x in `ldd /usr/sbin/named | awk \u0026#39;{print $3}\u0026#39;`; do objdump -T $x | grep dns_ncache \u0026amp;\u0026amp; echo $x; done\n00000000000a2cc0 g    DF .text 000000000000001e  Base        dns_ncache_add\n00000000000a2ce0 g    DF .text 0000000000000022  Base        dns_ncache_addoptout\n00000000000a2d10 g    DF .text 000000000000093e  Base        dns_ncache_towire\n00000000000a3650 g    DF .text 0000000000000441  Base        dns_ncache_getrdataset\n00000000000a4040 g    DF .text 0000000000000392  Base        dns_ncache_current\n00000000000a3aa0 g    DF .text 0000000000000597  Base        dns_ncache_getsigrdataset\n/lib/x86_64-linux-gnu/libdns.so.110\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后再用 bpftrace，参考前面的 uprobe 例子。\u003c/p\u003e\n\n\u003ch1 id=\"7-procpid\"\u003e7 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/\u0026lt;pid\u0026gt;/*\u003c/code\u003e\u003c/h1\u003e\n\n\u003cp\u003e最后整理一些 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/\u0026lt;pid\u0026gt;/\u003c/code\u003e 下面的信息。\u003c/p\u003e\n\n\u003ch2 id=\"71-procpidstatus\"\u003e7.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/\u0026lt;pid\u0026gt;/status\u003c/code\u003e\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo cat\u003c/span\u003e /proc/200/status\nName:   ksoftirqd/37\nUmask:  0000\nState:  S \u003cspan class=\"o\"\u003e(\u003c/span\u003esleeping\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n...\nCpus_allowed:   0020,00000000\nCpus_allowed_list:      37\nvoluntary_ctxt_switches:        27251\nnonvoluntary_ctxt_switches:     350\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中，\u003cstrong\u003e\u003cmark\u003e根据 NSpid 字段可以判断这个进程是不是容器\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/1229/status | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003eNSpid\nNSpid: 1229\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/11459/status | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003eNSpid\nNSpid: 11459 1 \u003cspan class=\"c\"\u003e# 11459 是在宿主机的 pid ns 内的进程 ID，1 是在容器自己的 pid ns 的进程 ID\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"72-procpidstack\"\u003e7.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/\u0026lt;pid\u0026gt;/stack\u003c/code\u003e\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo cat\u003c/span\u003e /proc/20/stack\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u0026lt;0\u0026gt;] smpboot_thread_fn+0x117/0x170\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u0026lt;0\u0026gt;] kthread+0x12b/0x150\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u0026lt;0\u0026gt;] ret_from_fork+0x22/0x30\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"73-procpidmaps\"\u003e7.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/\u0026lt;pid\u0026gt;/maps\u003c/code\u003e\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker ps\nCONTAINER ID    IMAGE        COMMAND\nb50745618ca2    3e6e2c29dbda  \u003cspan class=\"s2\"\u003e\u0026#34;./my-prog ...\u0026#34;\u003c/span\u003e   4 days ago   Up 4 days      k8s_my_test_prog\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker top b50745618ca2\nUID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD\nroot                10390               10363               0                   Jul08               ?                   00:15:19            ./my-prog ...\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/10390/status\nName:   mybin\nUmask:  0022\nState:  S \u003cspan class=\"o\"\u003e(\u003c/span\u003esleeping\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n...\nNStgid: 10390   1\nNSpid:  10390   1\nNSpgid: 10390   1\nNSsid:  10390   1\nThreads:        5\nCpus_allowed:   ffff,ffffffff\nCpus_allowed_list:      0-47\nMems_allowed_list:      0-1\nvoluntary_ctxt_switches:        2849002\nnonvoluntary_ctxt_switches:     3008\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/10390/maps\n00400000-008d2000 r-xp 00000000 fd:02 3233562123                         /my-prog\n...\n7fa61c6b3000-7fa61c732000 \u003cspan class=\"nt\"\u003e---p\u003c/span\u003e 00000000 00:00 0\n7fa61c732000-7fa61c792000 rw-p 00000000 00:00 0\n7ffe97008000-7ffe97029000 rw-p 00000000 00:00 0                          \u003cspan class=\"o\"\u003e[\u003c/span\u003estack]\n7ffe97102000-7ffe97106000 r--p 00000000 00:00 0                          \u003cspan class=\"o\"\u003e[\u003c/span\u003evvar]\n7ffe97106000-7ffe97108000 r-xp 00000000 00:00 0                          \u003cspan class=\"o\"\u003e[\u003c/span\u003evdso]\nffffffffff600000-ffffffffff601000 \u003cspan class=\"nt\"\u003e--xp\u003c/span\u003e 00000000 00:00 0                  \u003cspan class=\"o\"\u003e[\u003c/span\u003evsyscall]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"参考资料\"\u003e参考资料\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://medium.com/coccoc-engineering-blog/things-you-should-know-to-begin-playing-with-linux-tracing-tools-part-i-x-225aae1aaf13\"\u003ePractical Linux tracing\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://kirshatrov.com/posts/bpf-docker-uprobe/\"\u003ebpftrace, uprobe and containers\u003c/a\u003e, 2020\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/cracking-k8s-authn/\"\u003e\u003cspan\u003e« Cracking Kubernetes Authentication (AuthN) Model (2022)\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/differentiate-bpf-redirects/\"\u003e\u003cspan\u003eDifferentiate three types of eBPF redirects (2022) »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2022-07-18T00:00:00Z",
  "Author": "Arthur Chiao"
}