{
  "Source": "arthurchiao.art",
  "Title": "Connection Tracking (conntrack): Design and Implementation Inside Linux Kernel",
  "Link": "https://arthurchiao.art/blog/conntrack-design-and-implementation/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eConnection Tracking (conntrack): Design and Implementation Inside Linux Kernel\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2020-08-09 | Last Update 2021-04-26\u003c/p\u003e\n  \n  \u003cblockquote\u003e\n  \u003cp\u003eNote: this post also provides a\n\u003ca href=\"/blog/conntrack-design-and-implementation-zh/\"\u003eChinese version\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#abstract\" id=\"markdown-toc-abstract\"\u003eAbstract\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-introduction\" id=\"markdown-toc-1-introduction\"\u003e1 Introduction\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-concepts\" id=\"markdown-toc-11-concepts\"\u003e1.1 Concepts\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-thoery\" id=\"markdown-toc-12-thoery\"\u003e1.2 Thoery\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-design-netfilter\" id=\"markdown-toc-13-design-netfilter\"\u003e1.3 Design: Netfilter\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#14-design-further-considerations\" id=\"markdown-toc-14-design-further-considerations\"\u003e1.4 Design: further considerations\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#15-use-cases\" id=\"markdown-toc-15-use-cases\"\u003e1.5 Use cases\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#151-network-address-translation-nat\" id=\"markdown-toc-151-network-address-translation-nat\"\u003e1.5.1 Network address translation (NAT)\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#layer-4-load-balancing-l4lb\" id=\"markdown-toc-layer-4-load-balancing-l4lb\"\u003eLayer 4 load balancing (L4LB)\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#152-stateful-firewall\" id=\"markdown-toc-152-stateful-firewall\"\u003e1.5.2 Stateful firewall\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#openstack-security-group\" id=\"markdown-toc-openstack-security-group\"\u003eOpenStack security group\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#16-summary\" id=\"markdown-toc-16-summary\"\u003e1.6 Summary\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-implementation-netfilter-hooks\" id=\"markdown-toc-2-implementation-netfilter-hooks\"\u003e2 Implementation: Netfilter hooks\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-netfilter-framework\" id=\"markdown-toc-21-netfilter-framework\"\u003e2.1 Netfilter framework\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#the-5-hooking-points\" id=\"markdown-toc-the-5-hooking-points\"\u003eThe 5 hooking points\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#hook-handler-return-values\" id=\"markdown-toc-hook-handler-return-values\"\u003eHook handler return values\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#hook-handler-priorities\" id=\"markdown-toc-hook-handler-priorities\"\u003eHook handler priorities\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-filtering-rules-management\" id=\"markdown-toc-22-filtering-rules-management\"\u003e2.2 Filtering rules management\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-implementation-netfilter-conntrack\" id=\"markdown-toc-3-implementation-netfilter-conntrack\"\u003e3 Implementation: Netfilter conntrack\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-data-structures-and-functions\" id=\"markdown-toc-31-data-structures-and-functions\"\u003e3.1 Data structures and functions\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-struct-nf_conntrack_tuple--tuple\" id=\"markdown-toc-32-struct-nf_conntrack_tuple--tuple\"\u003e3.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_tuple {}\u003c/code\u003e: Tuple\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#data-structure-definitions\" id=\"markdown-toc-data-structure-definitions\"\u003eData structure definitions\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#connection-trackable-protocols\" id=\"markdown-toc-connection-trackable-protocols\"\u003eConnection-trackable protocols\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-struct-nf_conntrack_l4proto--methods-trackable-protocols-need-to-implement\" id=\"markdown-toc-33-struct-nf_conntrack_l4proto--methods-trackable-protocols-need-to-implement\"\u003e3.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_l4proto {}\u003c/code\u003e: methods trackable protocols need to implement\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-struct-nf_conntrack_tuple_hash--conntrack-entry\" id=\"markdown-toc-34-struct-nf_conntrack_tuple_hash--conntrack-entry\"\u003e3.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_tuple_hash {}\u003c/code\u003e: conntrack entry\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#35-struct-nf_conn--connection\" id=\"markdown-toc-35-struct-nf_conn--connection\"\u003e3.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conn {}\u003c/code\u003e: connection\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#36-nf_conntrack_in-enter-conntrack\" id=\"markdown-toc-36-nf_conntrack_in-enter-conntrack\"\u003e3.6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_in()\u003c/code\u003e: enter conntrack\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#37-init_conntrack-create-new-conntrack-entry\" id=\"markdown-toc-37-init_conntrack-create-new-conntrack-entry\"\u003e3.7 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einit_conntrack()\u003c/code\u003e: create new conntrack entry\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#38-nf_conntrack_confirm-confirm-a-new-connection\" id=\"markdown-toc-38-nf_conntrack_confirm-confirm-a-new-connection\"\u003e3.8 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_confirm()\u003c/code\u003e: confirm a new connection\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-implementation-netfilter-nat\" id=\"markdown-toc-4-implementation-netfilter-nat\"\u003e4 Implementation: Netfilter NAT\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-data-structures-and-functions\" id=\"markdown-toc-41-data-structures-and-functions\"\u003e4.1 Data structures and functions\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-nat-module-init\" id=\"markdown-toc-42-nat-module-init\"\u003e4.2 NAT module init\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#43-struct-nf_nat_l3proto--protocol-specific-methods\" id=\"markdown-toc-43-struct-nf_nat_l3proto--protocol-specific-methods\"\u003e4.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_nat_l3proto {}\u003c/code\u003e: protocol specific methods\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#44-struct-nf_nat_l4proto--protocol-specific-methods\" id=\"markdown-toc-44-struct-nf_nat_l4proto--protocol-specific-methods\"\u003e4.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_nat_l4proto {}\u003c/code\u003e: protocol specific methods\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#45-nf_nat_inet_fn-enter-nat\" id=\"markdown-toc-45-nf_nat_inet_fn-enter-nat\"\u003e4.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_nat_inet_fn()\u003c/code\u003e: enter NAT\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#masquerade\" id=\"markdown-toc-masquerade\"\u003eMasquerade\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#46-nf_nat_packet-performing-nat\" id=\"markdown-toc-46-nf_nat_packet-performing-nat\"\u003e4.6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_nat_packet()\u003c/code\u003e: performing NAT\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-configuration-and-monitoring\" id=\"markdown-toc-5-configuration-and-monitoring\"\u003e5. Configuration and monitoring\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#51-inspect-and-loadunload-nf_conntrack-module\" id=\"markdown-toc-51-inspect-and-loadunload-nf_conntrack-module\"\u003e5.1 Inspect and load/unload nf_conntrack module\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#52-sysctl-options\" id=\"markdown-toc-52-sysctl-options\"\u003e5.2 sysctl options\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#53-monitoring\" id=\"markdown-toc-53-monitoring\"\u003e5.3 Monitoring\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#conntrack-statistics\" id=\"markdown-toc-conntrack-statistics\"\u003econntrack statistics\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#conntrack-table-usage\" id=\"markdown-toc-conntrack-table-usage\"\u003econntrack table usage\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#6-conntrack-related-issues\" id=\"markdown-toc-6-conntrack-related-issues\"\u003e6. Conntrack related issues\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#61-nf_conntrack-table-full\" id=\"markdown-toc-61-nf_conntrack-table-full\"\u003e6.1 nf_conntrack: table full\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#symptoms\" id=\"markdown-toc-symptoms\"\u003eSymptoms\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#application-layer-symptoms\" id=\"markdown-toc-application-layer-symptoms\"\u003eApplication layer symptoms\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#network-layer-symptoms\" id=\"markdown-toc-network-layer-symptoms\"\u003eNetwork layer symptoms\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#oskernel-layer-symptoms\" id=\"markdown-toc-oskernel-layer-symptoms\"\u003eOS/kernel layer symptoms\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#trouble-shooting\" id=\"markdown-toc-trouble-shooting\"\u003eTrouble shooting\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#resolution\" id=\"markdown-toc-resolution\"\u003eResolution\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#7-summary\" id=\"markdown-toc-7-summary\"\u003e7. Summary\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#8-appendix\" id=\"markdown-toc-8-appendix\"\u003e8. Appendix\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#81-retransmission-interval-calculation-of-the-first-syn-linux-419118\" id=\"markdown-toc-81-retransmission-interval-calculation-of-the-first-syn-linux-419118\"\u003e8.1 Retransmission interval calculation of the first SYN (Linux 4.19.118)\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#82-calculating-conntrack-memory-usage\" id=\"markdown-toc-82-calculating-conntrack-memory-usage\"\u003e8.2 Calculating conntrack memory usage\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#references\" id=\"markdown-toc-references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"abstract\"\u003eAbstract\u003c/h2\u003e\n\n\u003cp\u003eThis post talks about connection tracking (conntrack, CT), as well as its design\nand implementation inside Linux kernel.\u003c/p\u003e\n\n\u003cp\u003eCode analysis based on \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4.19\u003c/code\u003e. For illustration purposes, only the core\nlogics are preserved in all pasted code. Source files are provided for\neach code piece, refer to them if you need.\u003c/p\u003e\n\n\u003cp\u003eNote that I’m not a kernel developer, so there may be mistakes in this\npost. Glad if anyone corrects me.\u003c/p\u003e\n\n\u003ch1 id=\"1-introduction\"\u003e1 Introduction\u003c/h1\u003e\n\n\u003cp\u003eConnection tracking is the basis of many network services and applications. For\nexample, \u003ca href=\"https://kubernetes.io/docs/concepts/services-networking/service/\"\u003eKubernetes Service\u003c/a\u003e,\n\u003ca href=\"https://istio.io/latest/docs/reference/config/networking/sidecar/\"\u003eServiceMesh sidecar\u003c/a\u003e,\nsoftware layer 4 load balancer (L4LB) \u003ca href=\"https://en.wikipedia.org/wiki/Linux_Virtual_Server\"\u003eLVS/IPVS\u003c/a\u003e,\n\u003ca href=\"https://docs.docker.com/network/bridge/\"\u003eDocker network\u003c/a\u003e,\n\u003ca href=\"http://docs.openvswitch.org/en/latest/tutorials/ovs-conntrack/\"\u003eOpenvSwitch (OVS)\u003c/a\u003e,\nOpenStack \u003ca href=\"https://docs.openstack.org/nova/queens/admin/security-groups.html\"\u003esecurity group\u003c/a\u003e (host firewall),\netc, all rely on it.\u003c/p\u003e\n\n\u003ch2 id=\"11-concepts\"\u003e1.1 Concepts\u003c/h2\u003e\n\n\u003cp\u003eAs the name illustrates itself, connection tracking \u003cstrong\u003e\u003cmark\u003etracks (and maintains) connections and their states\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/conntrack/node-conntrack.png\" width=\"40%\" height=\"40%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1.1 Connection tracking example on a Linux node\u003c/p\u003e\n\n\u003cp\u003eFor example, in Fig 1.1, the Linux node has an IP address \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.1.2\u003c/code\u003e,\nwe could see 3 connections on this node:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.1.2:55667 \u0026lt;-\u0026gt; 10.2.2.2.:80\u003c/code\u003e: \u003cstrong\u003elocally originated\u003c/strong\u003e connection for accessing external HTTP/TCP service\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.3.3.3:23456 \u0026lt;-\u0026gt; 10.3.3.2.:21\u003c/code\u003e: \u003cstrong\u003eexternally originated\u003c/strong\u003e connection for accessing FTP/TCP service in this node\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.1.2:33987 \u0026lt;-\u0026gt; 10.4.4.4.:53\u003c/code\u003e: \u003cstrong\u003elocally originated\u003c/strong\u003e connection for accessing external DNS/UDP service\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eConntrack module is responsible for \u003cstrong\u003ediscovering and recording these connections\nand their statuses\u003c/strong\u003e, including:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eExtract \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etuple\u003c/code\u003e from packets, distinguish \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eflow\u003c/code\u003e and the related \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econnection\u003c/code\u003e.\u003c/li\u003e\n  \u003cli\u003eMaintain a \u003cstrong\u003e“database”\u003c/strong\u003e (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003econntrack table\u003c/code\u003e) for all connections, deposit\ninformation such as connection’s created time, packets sent, bytes sent, etc.\u003c/li\u003e\n  \u003cli\u003eGarbage collecting (GC) stale connection info\u003c/li\u003e\n  \u003cli\u003eServe for upper layer functionalities, e.g. NAT\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBut note that, the term \u003cstrong\u003e“connection” in “connection tracking”\u003c/strong\u003e is different\nfrom the \u003cstrong\u003e“connection” concept that we usually mean in TCP/IP stack\u003c/strong\u003e. Put it simply,\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eIn TCP/IP stack, “connection” is a layer 4 (transport layer) concept.\n    \u003cul\u003e\n      \u003cli\u003eTCP is a connection-oriented protocol, all packets need to be acknowledged\n(ACK), and there is retransmission mechanism.\u003c/li\u003e\n      \u003cli\u003eUDP is a connectionless protocol, acknowledgement (ACK) is not required,\nno retransmission either.\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003eIn connection tracking, a \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etuple\u003c/code\u003e uniquely defines a \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eflow\u003c/code\u003e, and a flow\nrepresents a \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econnection\u003c/code\u003e.\n    \u003cul\u003e\n      \u003cli\u003eWe will see later that UDP, or \u003cstrong\u003eeven ICMP (layer 3 protocol) have connection entries\u003c/strong\u003e.\u003c/li\u003e\n      \u003cli\u003eBut \u003cstrong\u003enot all protocols will be connection tracked\u003c/strong\u003e.\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhen refering to the term “connection”, we mean the latter one in most cases,\nnamely, the “connection” in “connection tracking” context.\u003c/p\u003e\n\n\u003ch2 id=\"12-thoery\"\u003e1.2 Thoery\u003c/h2\u003e\n\n\u003cp\u003eWith the above concepts in mind, let’s reasons about the underlying theory of\nconnction tracking.\u003c/p\u003e\n\n\u003cp\u003eTo track the states of all connections on a node, we need to,\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003eHook (or filter) every packet\u003c/strong\u003e that passes through this node, and \u003cstrong\u003eanalyze the packet\u003c/strong\u003e.\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eSetup a “database”\u003c/strong\u003e for recoding the status of those connections (conntrack table).\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eUpdate connection status timely\u003c/strong\u003e to database based on the extracted information from hooked packets.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eFor example,\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eWhen hooked a TCP \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSYNC\u003c/code\u003e packet, we could confirm that a new connection\nattempt is under the way, so we need to create a new conntrack entry to\nrecord this connection.\u003c/li\u003e\n  \u003cli\u003eWhen got a packet that belongs to an existing connection, we need to update\nthe conntrack entry statistics, e.g. bytes sent, packets sent, timeout\nvalue, e.g.\u003c/li\u003e\n  \u003cli\u003eWhen no packets match a conntrack entry for more than 30 minutes, we\nconsider to delete this entry from the database.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eExcept the above functional requirements, performance requirements also\nalso deserve our concern, as conntrack module filters and analyzes every single\npacket. Performance considerations are fairly important, but they are beyond the\nscope of this post. We will come back to performance issues again when walking through\nthe kernel conntrack implementation later.\u003c/p\u003e\n\n\u003cp\u003eBesides, it’s better to have some management tools to faciliate the using of\nconntrack.\u003c/p\u003e\n\n\u003ch2 id=\"13-design-netfilter\"\u003e1.3 Design: Netfilter\u003c/h2\u003e\n\n\u003cp\u003eConnction tracking in Linux kernel is \u003cstrong\u003eimplemented as a module\u003c/strong\u003e in \u003ca href=\"https://en.wikipedia.org/wiki/Netfilter\"\u003eNetfilter\u003c/a\u003e framework.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/conntrack/netfilter-design.png\" width=\"50%\" height=\"50%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1.2 Netfilter architecture inside Linux kernel\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Netfilter\"\u003eNetfilter\u003c/a\u003e is a packet manipulating\nand filtering framework inside the kernel. It provides several hooking\npoints inside the kernel, so packet hooking, filtering and many other processings\ncould be done.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003ePut it more clearly, hooking is a mechanism that places several checking points\nin the travesal path of packets. When a packet arrives a hooking point, it\nfirst gets checked, and the checking result could be one of:\u003c/p\u003e\n\n  \u003col\u003e\n    \u003cli\u003elet it go: no modifications to the packet, push it back to the original travesal path and let it go\u003c/li\u003e\n    \u003cli\u003emodify it: e.g. replace network address (NAT), then push back to the original travesal path and let it go\u003c/li\u003e\n    \u003cli\u003edrop it: e.g. by firewall rules configured at this checking (hooking) point\u003c/li\u003e\n  \u003c/ol\u003e\n\n  \u003cp\u003eNote that conntrack module only extracts connection information and maintains\nits database, it does not modify or drop a packet. Modification and dropping\nare done by other modules, e.g. NAT.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eNetfilter is one of the earliest networking frameworks inside Linux kernel, it\ninitially got developed in 1998, and merged into \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e2.4.x\u003c/code\u003e kernel mainline in\n2000.\u003c/p\u003e\n\n\u003cp\u003eAfter more than 20 years’ evolvement, it gets so complicated that results\nto \u003cstrong\u003edegraded performance\u003c/strong\u003e in certain scenarios, we will talk a little more\nabout this later.\u003c/p\u003e\n\n\u003ch2 id=\"14-design-further-considerations\"\u003e1.4 Design: further considerations\u003c/h2\u003e\n\n\u003cp\u003eFrom our discussions in the previous section, \u003cstrong\u003ethe concept of connection tracking is\nindependent from Netfilter\u003c/strong\u003e, and the latter is only one of the implementations\nof connection tracking.\u003c/p\u003e\n\n\u003cp\u003eIn other words, \u003cstrong\u003eas long as the hooking capability is possessed\u003c/strong\u003e - the ability to\nhook every single packet that goes through the system -  \u003cstrong\u003ewe could implement\nour own connection trakcing\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/conntrack/cilium-conntrack.png\" width=\"50%\" height=\"50%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1.3. Cilium\u0026#39;s conntrack and NAT architectrue\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/cilium/cilium\"\u003eCilium\u003c/a\u003e, a cloud native networking solution\nfor Kubernetes, implements such a conntrack and NAT mechanism. The underlyings\nof the impelentation:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eHook packets based on BPF hooking points (BPF’s equivalent part of the Netfilter hooks)\u003c/li\u003e\n  \u003cli\u003eImplement a completely new conntrack \u0026amp; NAT module based on BPF hooks (need kernel \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4.19+\u003c/code\u003e to be fully functional)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eSo, one could even \u003ca href=\"https://github.com/cilium/cilium/issues/12879\"\u003eremove the entire Netfilter module\u003c/a\u003e\n, and Cilium would still work for\nKubernetes functionalities such as ClusterIP, NodePort, ExternalIPs and\nLoadBalancer [2].\u003c/p\u003e\n\n\u003cp\u003eAs this connction tracking implementation is independent from Netfilter, its\nconntrack and NAT entries are not stored in system’s (namely, Netfilter’s)\nconntrack table and NAT table. So frequently used network tools\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003econntrack/netstats/ss/lsof\u003c/code\u003e could not list them, you must use Cilium’s\nalternatives, e.g:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium bpf nat list\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium bpf ct list global\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAlso, configurations are also independent, you need to specify Cilium’s\nconfiguration parameters, such as command line argument \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--bpf-ct-tcp-max\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe clarified that conntrack concept is independent from NAT module, but \u003cstrong\u003efor\nperformance considerations, the code may be coupled\u003c/strong\u003e. For\nexample, when performing GC for conntrack table, it will efficiently remove\nrelated entries in NAT table, rather than maintaining a separate GC loop for NAT\ntable.\u003c/p\u003e\n\n\u003ch2 id=\"15-use-cases\"\u003e1.5 Use cases\u003c/h2\u003e\n\n\u003cp\u003eLet’s see some specific network applications/functions that are on top of\nconntrack.\u003c/p\u003e\n\n\u003ch3 id=\"151-network-address-translation-nat\"\u003e1.5.1 Network address translation (NAT)\u003c/h3\u003e\n\n\u003cp\u003eAs the name illustrates, \u003cstrong\u003eNAT\u003c/strong\u003e translates (packets’) network addresses (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP + Port\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/conntrack/node-nat.png\" width=\"40%\" height=\"40%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1.4 NAT for node local IP addresses\u003c/p\u003e\n\n\u003cp\u003eFor example, in the above Fig, assume node IP \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.1.2\u003c/code\u003e is reachable from other\nnodes, while IP addresses within network \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e192.168.1.0/24\u003c/code\u003e are not reachable. This\nindicates:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003ePackets with source IPs in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e192.168.1.0/24\u003c/code\u003e \u003cstrong\u003ecould be sent out\u003c/strong\u003e, as egress routing only relies on destination IP.\u003c/li\u003e\n  \u003cli\u003eBut, the \u003cstrong\u003ereply packets\u003c/strong\u003e (with destination IPs falling into \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e192.168.1.0/24\u003c/code\u003e)\n\u003cstrong\u003ecould not come back\u003c/strong\u003e, as \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e192.168.1.0/24\u003c/code\u003e is not routable within nodes.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eOne solution for this scenario:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eOn sending packets with source IPs falling into \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e192.168.1.0/24\u003c/code\u003e,\nreplace these source IPs (and/or ports) with node IP \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.1.2\u003c/code\u003e, then send out.\u003c/li\u003e\n  \u003cli\u003eOn receiving reply packets, do the reverse translation, then forward traffic\nto the original senders.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThis is just the underlying working mechanism of NAT.\u003c/p\u003e\n\n\u003cp\u003eThe default network mode of Docker, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebridge\u003c/code\u003e network mode, uses NAT in the same\nway as above [4]. Within the node, each Docker container allocates a\nnode local IP address. This address enables communications between containers\nwithin the node, but when communicates with services outside the node,\nthe traffic will be NAT-ed.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eNAT may replace the source ports as well. It’s not too hard to understand: each\nIP address can use the full port range (e.g. 1~65535). So assume\nwe have two connections:\u003c/p\u003e\n\n  \u003cul\u003e\n    \u003cli\u003e192.168.1.2:3333 \u0026lt;–\u0026gt; NAT \u0026lt;–\u0026gt; 10.2.2.2:80\u003c/li\u003e\n    \u003cli\u003e192.168.1.3:3333 \u0026lt;–\u0026gt; NAT \u0026lt;–\u0026gt; 10.2.2.2:80\u003c/li\u003e\n  \u003c/ul\u003e\n\n  \u003cp\u003eif NAT only replaces source IP addresses to node IP, the above two distinct\nconnections after NAT will be:\u003c/p\u003e\n\n  \u003cul\u003e\n    \u003cli\u003e10.1.1.2:3333 \u0026lt;–\u0026gt; 10.2.2.2:80\u003c/li\u003e\n    \u003cli\u003e10.1.1.2:3333 \u0026lt;–\u0026gt; 10.2.2.2:80\u003c/li\u003e\n  \u003c/ul\u003e\n\n  \u003cp\u003ewhich mixed into a same connection that could not be distinguished and the\nreverse translation will fail. So NAT also replaces source ports if collision\nhappens.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eNAT can be further categorized as:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eSNAT: do translation on source address\u003c/li\u003e\n  \u003cli\u003eDNAT: do translation on destination address\u003c/li\u003e\n  \u003cli\u003eFull NAT: do translation on both source and destination addresses\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOur above examples falls into SNAT case.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNAT relies on the results of connection tracking\u003c/strong\u003e, and, NAT the most\nimportant use case of connection tracking.\u003c/p\u003e\n\n\u003ch4 id=\"layer-4-load-balancing-l4lb\"\u003eLayer 4 load balancing (L4LB)\u003c/h4\u003e\n\n\u003cp\u003eLet’s step a little further from above discussions, to the topic of layer 4 load\nbalancing \u003cstrong\u003e(L4LB) under NAT mode\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eL4 LB distributes traffic acorrding to packets’ L3+L4 info, e.g. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc/dst ip, src/dst port, proto\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eVIP (Virtual IP)\u003c/strong\u003e is one of the mechanisms/designs to implement L4LB:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eMultiple backend nodes with distinct Real IPs register to the same virtual IP (VIP)\u003c/li\u003e\n  \u003cli\u003eTraffic from clients first arrives VIP, then be load balanced to specific\nbackend IPs\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf L4LB uses NAT mode (between VIP and Real IPs), L4LB will perform full\nNAT between client-server traffic, the data flow depicted as picture below:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/conntrack/nat.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1.5 L4LB: traffic path in NAT mode [3]\u003c/p\u003e\n\n\u003ch3 id=\"152-stateful-firewall\"\u003e1.5.2 Stateful firewall\u003c/h3\u003e\n\n\u003cp\u003eStateful firewall is relative to the \u003cstrong\u003estateless firewall\u003c/strong\u003e in the early days.\nWith stateless firewall, one could only apply simple rules like\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edrop syn to port 443\u003c/code\u003e or \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eallow syn to port 80\u003c/code\u003e, and it has no concept of flow. It’s impossible to\nconfigure a rule like \u003cstrong\u003e“allow this \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eack\u003c/code\u003e if \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esyn\u003c/code\u003e has been seen, otherwise drop\nit”\u003c/strong\u003e, so the funtionality was quite limited [6].\u003c/p\u003e\n\n\u003cp\u003eApparently, to provide a stateful firewall, one must track flow and states -\nwhich is just what conntrack is doing.\u003c/p\u003e\n\n\u003cp\u003eLet’s see a more specific example: OpenStack security group - its host firewall solution.\u003c/p\u003e\n\n\u003ch4 id=\"openstack-security-group\"\u003eOpenStack security group\u003c/h4\u003e\n\n\u003cp\u003eSecurity group provides \u003cstrong\u003eVM-level\u003c/strong\u003e security isolation, which is realized by\napplying stateful firewall rules on the host-side network devices of the VMs.\nAnd at that time, the most mature candicates for stateful firewalling might be\nNetfilter/iptables.\u003c/p\u003e\n\n\u003cp\u003eNow back to the network topology inside each compute node: each compute node\nconnects (integrates) all VMs inside it with an OVS bridge (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebr-int\u003c/code\u003e).\nIf only considering network connectivity, each VM should attach to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebr-int\u003c/code\u003e\ndirectly. But here comes the problem [7]:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e(Early versions) OVS has \u003cstrong\u003eno conntrack module\u003c/strong\u003e,\u003c/li\u003e\n  \u003cli\u003eLinux kernel has conntrack, but the firewall based on this \u003cstrong\u003eworks at IP layer (L3)\u003c/strong\u003e, manipulated via iptables,\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eOVS is a L2 module\u003c/strong\u003e, which means it could not utilize L3 modules,\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAs a result, firewalling at the OVS (node-side) network devices of VMs is impossible.\u003c/p\u003e\n\n\u003cp\u003eOpenStack solved this problem by \u003cstrong\u003einserting a Linux bridge between every VM and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebr-int\u003c/code\u003e\u003c/strong\u003e, as shown below:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/conntrack/ovs-compute.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1.6. Network topology within an OpenStack compute node,\npicture from \u003ca href=\"https://thesaitech.wordpress.com/2017/09/24/how-to-trace-the-tap-interfaces-and-linux-bridges-on-the-hypervisor-your-openstack-vm-is-on/\"\u003e Sai\u0026#39;s Blog\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cmark\u003eLinux bridge is also a L2 module, so it could not use iptables\u003c/mark\u003e.\nBut, \u003cstrong\u003eit has a L2 filtering machanism\ncalled ebtables, which could jump to iptables rules\u003c/strong\u003e, and thus makes\nNetfilter/iptables workable.\u003c/p\u003e\n\n\u003cp\u003eBut this workaround is ugly, and leads to significant performance issues. So in 2016, RedHat\nproposed an OVS conntrack solution [7]. Until then, people could possibly turn off\nLinux bridge while still having security group funtionality.\u003c/p\u003e\n\n\u003ch2 id=\"16-summary\"\u003e1.6 Summary\u003c/h2\u003e\n\n\u003cp\u003eThis ends our discussion on the theory of connection tracking, and\nin the following, we will dig into the kernel implementation.\u003c/p\u003e\n\n\u003ch1 id=\"2-implementation-netfilter-hooks\"\u003e2 Implementation: Netfilter hooks\u003c/h1\u003e\n\n\u003cp\u003eNetfilter consists of several modules:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003econntrack: kernel module\u003c/li\u003e\n  \u003cli\u003eNAT: kernel module\u003c/li\u003e\n  \u003cli\u003eiptables: userspace tools\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"21-netfilter-framework\"\u003e2.1 Netfilter framework\u003c/h2\u003e\n\n\u003ch3 id=\"the-5-hooking-points\"\u003eThe 5 hooking points\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cracking-k8s-node-proxy/hooks.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e Fig 2.1 The 5 hook points in netfilter framework\u003c/p\u003e\n\n\u003cp\u003eAs shown in the above picture, Netfilter provides 5 hooking points in the packet\ntravesing path inside Linux kernel:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/uapi/linux/netfilter_ipv4.h\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#define NF_IP_PRE_ROUTING    0 \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* After promisc drops, checksum checks. */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#define NF_IP_LOCAL_IN       1 \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* If the packet is destined for this box. */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#define NF_IP_FORWARD        2 \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* If the packet is destined for another interface. */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#define NF_IP_LOCAL_OUT      3 \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* Packets coming from a local process. */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#define NF_IP_POST_ROUTING   4 \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* Packets about to hit the wire. */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#define NF_IP_NUMHOOKS       5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eUsers could register callback functions (handlers) at these points. When a\npacket arrives at the hook point, it will triger the related handlers being called.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eThere is another definition for these \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_INET_*\u003c/code\u003e variables, in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einclude/uapi/linux/netfilter.h\u003c/code\u003e.\nThese two definitions are equivalent, from the comments in the code, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_IP_*\u003c/code\u003e\nare probably used for backward compatibility.\u003c/p\u003e\n\n  \u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003enf_inet_hooks\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eNF_INET_PRE_ROUTING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eNF_INET_LOCAL_IN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eNF_INET_FORWARD\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eNF_INET_LOCAL_OUT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eNF_INET_POST_ROUTING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eNF_INET_NUMHOOKS\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e  \u003c/div\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"hook-handler-return-values\"\u003eHook handler return values\u003c/h3\u003e\n\n\u003cp\u003ehook handlers return a verdict result after checking against a given packet, and\nthis verdict will guide next processings on this packet. Possible verdict\nresults include:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/uapi/linux/netfilter.h\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#define NF_DROP   0  // the packet has been dropped this packet in handler\n#define NF_ACCEPT 1  // the packet is no dropped, continue following processing\n#define NF_STOLEN 2  // silently holds the packet until something happends, no further processing is needed\n\u003c/span\u003e                     \u003cspan class=\"c1\"\u003e// usually used to collect fragmented packets (for later assembling)\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#define NF_QUEUE  3  // the packet should be pushed into queue\n#define NF_REPEAT 4  // current handler should be called again against the packet\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"hook-handler-priorities\"\u003eHook handler priorities\u003c/h3\u003e\n\n\u003cp\u003eMultiple handlers could be registered to the same hooking point.\u003c/p\u003e\n\n\u003cp\u003eWhen register a handler, a priority parameter must be provided. So that when a\npacket arrives at this point, the system could call these handlers in order\nwith their priorities.\u003c/p\u003e\n\n\u003ch2 id=\"22-filtering-rules-management\"\u003e2.2 Filtering rules management\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables\u003c/code\u003e is the userspace tool for configuring Netfilter hooking capabilities.\nTo faciliate management, it splits rules into several tables by functionalities:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eraw\u003c/li\u003e\n  \u003cli\u003efilter\u003c/li\u003e\n  \u003cli\u003enat\u003c/li\u003e\n  \u003cli\u003emangle\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is not the focus of this post, more information on this, refer to\n\u003ca href=\"https://www.digitalocean.com/community/tutorials/a-deep-dive-into-iptables-and-netfilter-architecture\"\u003eA Deep Dive into iptables and Netfilter Architecture\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch1 id=\"3-implementation-netfilter-conntrack\"\u003e3 Implementation: Netfilter conntrack\u003c/h1\u003e\n\n\u003cp\u003econntrack module traces the \u003cstrong\u003e\u003cmark\u003econnection status of trackable protocols\u003c/mark\u003e\u003c/strong\u003e [1].\nThat is, connection tracking targets at \u003cstrong\u003especific protocols\u003c/strong\u003e, not all. We will see later what protocols it supports.\u003c/p\u003e\n\n\u003ch2 id=\"31-data-structures-and-functions\"\u003e3.1 Data structures and functions\u003c/h2\u003e\n\n\u003cp\u003eKey data structures:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_tuple {}\u003c/code\u003e: \u003cstrong\u003edefines a \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etuple\u003c/code\u003e\u003c/strong\u003e.\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_man {}\u003c/code\u003e: the manipulatable part of a tuple\n        \u003cul\u003e\n          \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_man_proto {}\u003c/code\u003e: the protocol specific part in tuple’s manipulatable part\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_l4proto {}\u003c/code\u003e: a collection of \u003cstrong\u003e\u003cmark\u003emethods\u003c/mark\u003e\u003c/strong\u003e a trackable\nprotocol needs to implement (and other fields).\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_tuple_hash {}\u003c/code\u003e: \u003cstrong\u003edefines a conntrack entry\u003c/strong\u003e (value)\nstored in hash table (conntrack table), hash key is a \u003ccode class=\"language-plaintext highlighter-rouge\"\u003euint32\u003c/code\u003e integer\ncomputed from tuple info.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conn {}\u003c/code\u003e: \u003cstrong\u003e\u003cmark\u003edefines a flow\u003c/mark\u003e\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eKey functions:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehash_conntrack_raw()\u003c/code\u003e: calculates a 32bit hash key from tuple info.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_in()\u003c/code\u003e: \u003cstrong\u003ecore of the conntrack module, the entrypoint of connection tracking\u003c/strong\u003e.\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eresolve_normal_ct() -\u0026gt; init_conntrack() -\u0026gt; ct = __nf_conntrack_alloc(); l4proto-\u0026gt;new(ct)\u003c/code\u003e\u003c/p\u003e\n\n    \u003cp\u003eCreate a new conntrack entry, then init it with protocol-specific method.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_confirm()\u003c/code\u003e: confirms the new connection that previously created via \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_in()\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"32-struct-nf_conntrack_tuple--tuple\"\u003e3.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_tuple {}\u003c/code\u003e: Tuple\u003c/h2\u003e\n\n\u003cp\u003eTuple is one of the most important concepts in connection tracking.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eA tuple uniquely defines a unidirectional flow\u003c/strong\u003e, this is clearly explained in\nkernel code comments:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e//include/net/netfilter/nf_conntrack_tuple.h\u003c/p\u003e\n\n  \u003cp\u003eA \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etuple\u003c/code\u003e is a structure containing the information to uniquely\nidentify a connection.  ie. if two packets have the same tuple, they\nare in the same connection; if not, they are not.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"data-structure-definitions\"\u003eData structure definitions\u003c/h3\u003e\n\n\u003cp\u003eTo facilite NAT module’s implementation, kernel splits the tuple structure into\n“manipulatable” and “non-manipulatable” parts.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eIn the following code, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e_man\u003c/code\u003e is short for \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emanipulatable\u003c/code\u003e, which is a bad\nnaming/abbreviating from today’s point of view.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e// include/net/netfilter/nf_conntrack_tuple.h\n                                               // ude/uapi/linux/netfilter.h\n                                               union nf_inet_addr {\n                                                   __u32            all[4];\n                                                   __be32           ip;\n                                                   __be32           ip6[4];\n                                                   struct in_addr   in;\n                                                   struct in6_addr  in6;\n/* manipulatable part of the tuple */       /  };\nstruct nf_conntrack_man {                  /\n    union nf_inet_addr           u3; --\u0026gt;--/\n    union nf_conntrack_man_proto u;  --\u0026gt;--\\\n                                           \\   // include/uapi/linux/netfilter/nf_conntrack_tuple_common.h\n    u_int16_t l3num; // L3 proto            \\  // protocol specific part\n};                                            union nf_conntrack_man_proto {\n                                                  __be16 all;/* Add other protocols here. */\n\n                                                  struct { __be16 port; } tcp;\n                                                  struct { __be16 port; } udp;\n                                                  struct { __be16 id;   } icmp;\n                                                  struct { __be16 port; } dccp;\n                                                  struct { __be16 port; } sctp;\n                                                  struct { __be16 key;  } gre;\n                                              };\n\nstruct nf_conntrack_tuple { /* This contains the information to distinguish a connection. */\n    struct nf_conntrack_man src;  // source address info, manipulatable part\n    struct {\n        union nf_inet_addr u3;\n        union {\n            __be16 all;     // Add other protocols here\n\n            struct { __be16 port;         } tcp;\n            struct { __be16 port;         } udp;\n            struct { u_int8_t type, code; } icmp;\n            struct { __be16 port;         } dccp;\n            struct { __be16 port;         } sctp;\n            struct { __be16 key;          } gre;\n        } u;\n        u_int8_t protonum;  // The protocol\n        u_int8_t dir;       // The direction (for tuplehash)\n    } dst;                       // destination address info\n};\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003eThere are only 2 fields (src and dst) inside struct nf_conntrack_tuple {}\u003c/mark\u003e\u003c/strong\u003e,\neach stores source and destination address information.\u003c/p\u003e\n\n\u003cp\u003eBut \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst\u003c/code\u003e are themselves also structs, storing protocol specific data.\nTake IPv4 UDP as example, information of the 5-tuple stores in the following\nfields:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst.protonum\u003c/code\u003e: protocol type (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIPPROTO_UDP\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc.u3.ip\u003c/code\u003e: source IP address\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst.u3.ip\u003c/code\u003e: destination IP address\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc.u.udp.port\u003c/code\u003e: source UDP port number\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst.u.udp.port\u003c/code\u003e: destination UDP port number\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"connection-trackable-protocols\"\u003eConnection-trackable protocols\u003c/h3\u003e\n\n\u003cp\u003eFrom the above code, we could see that \u003cstrong\u003eonly 6 protocols support connection\ntracking currently\u003c/strong\u003e: TCP, UDP, ICMP, DCCP, SCTP, GRE.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003ePay attention to the ICMP protocol\u003c/mark\u003e\u003c/strong\u003e. People may think that connction tracking is\ndone by hashing over L3+L4 headers of packets, while ICMP is a L3 protocol, so it\ncould not be conntrack-ed. But actually it could be, from the above code, we see\nthat the \u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etype\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecode\u003c/code\u003e fields in ICMP header\u003c/strong\u003e are used for defining a\ntuple and performing subsequent hashing.\u003c/p\u003e\n\n\u003ch2 id=\"33-struct-nf_conntrack_l4proto--methods-trackable-protocols-need-to-implement\"\u003e3.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_l4proto {}\u003c/code\u003e: methods trackable protocols need to implement\u003c/h2\u003e\n\n\u003cp\u003eProtocols that support connection tracking need to implement the methods defined\nin \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_l4proto {}\u003c/code\u003e, for example \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epkt_to_tuple()\u003c/code\u003e, which\nextracts tuple information from given packet’s L3/L4 header.\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/net/netfilter/nf_conntrack_l4proto.h\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_l4proto\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu_int16_t\u003c/span\u003e \u003cspan class=\"n\"\u003el3proto\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* L3 Protocol number. */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu_int8_t\u003c/span\u003e  \u003cspan class=\"n\"\u003el4proto\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* L4 Protocol number. */\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// extract tuple info from given packet (skb)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epkt_to_tuple\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_tuple\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// returns verdict for packet\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epacket\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e \u003cspan class=\"p\"\u003e...);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// create a new conntrack, return TRUE if succeeds.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// if returns TRUE, packet() method will be called against this skb later\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003edataoff\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// determin if this packet could be conntrack-ed.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// if could, packet() method will be called against this skb later\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etmpl\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...);\u003c/span\u003e\n\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"34-struct-nf_conntrack_tuple_hash--conntrack-entry\"\u003e3.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_tuple_hash {}\u003c/code\u003e: conntrack entry\u003c/h2\u003e\n\n\u003cp\u003econntrack modules stores active connections in a hash table:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ekey: 32bit value calculated from tuple info\u003c/li\u003e\n  \u003cli\u003evalue: conntrack entry (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_tuple_hash {}\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eMethod \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehash_conntrack_raw()\u003c/code\u003e calculates a 32bit hash key from tuple info:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/netfilter/nf_conntrack_core.c\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"nf\"\u003ehash_conntrack_raw\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_tuple\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eget_random_once\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003enf_conntrack_hash_rnd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enf_conntrack_hash_rnd\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* The direction must be ignored, so we hash everything up to the\n     * destination ports (which is a multiple of 4) and treat the last three bytes manually.  */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"n\"\u003eseed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_hash_rnd\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"n\"\u003enet_hash_mix\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eu3\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eu32\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ejhash2\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eseed\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eall\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprotonum\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ePay attention to the calculating logic, and how source and destination address\nfields are used for the final hash value.\u003c/p\u003e\n\n\u003cp\u003eConntrack entry is defined as \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_tuple_hash {}\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/net/netfilter/nf_conntrack_tuple.h\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Connections have two entries in the hash table: one for each way\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_tuple_hash\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ehlist_nulls_node\u003c/span\u003e   \u003cspan class=\"n\"\u003ehnnode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// point to the related connection `struct nf_conn`,\u003c/span\u003e\n                                        \u003cspan class=\"c1\"\u003e// list for fixing hash collisions\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_tuple\u003c/span\u003e \u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"35-struct-nf_conn--connection\"\u003e3.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conn {}\u003c/code\u003e: connection\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003eEach flow in Netfilter is called a connection\u003c/mark\u003e\u003c/strong\u003e, even for those connectionless\nprotocols (e.g. UDP). A connection is defined as \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conn {}\u003c/code\u003e, with\nimportant fields as follows:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/net/netfilter/nf_conntrack.h\u003c/span\u003e\n\n                                                  \u003cspan class=\"c1\"\u003e// include/linux/skbuff.h\u003c/span\u003e\n                                        \u003cspan class=\"o\"\u003e------\u0026gt;\u003c/span\u003e   \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                                        \u003cspan class=\"o\"\u003e|\u003c/span\u003e             \u003cspan class=\"n\"\u003eatomic_t\u003c/span\u003e \u003cspan class=\"n\"\u003euse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// refcount?\u003c/span\u003e\n                                        \u003cspan class=\"o\"\u003e|\u003c/span\u003e         \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e                        \u003cspan class=\"o\"\u003e|\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack\u003c/span\u003e            \u003cspan class=\"n\"\u003ect_general\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_tuple_hash\u003c/span\u003e \u003cspan class=\"n\"\u003etuplehash\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eIP_CT_DIR_MAX\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"c1\"\u003e// conntrack entry, array for ingress/egress flows\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003estatus\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// connection status, see below for detailed status list\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e          \u003cspan class=\"c1\"\u003e// timer for connection status\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003epossible_net_t\u003c/span\u003e \u003cspan class=\"n\"\u003ect_net\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ehlist_node\u003c/span\u003e    \u003cspan class=\"n\"\u003enat_bysource\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                                                        \u003cspan class=\"c1\"\u003e// per conntrack: protocol private data\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emaster\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                             \u003cspan class=\"k\"\u003eunion\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_proto\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                                                       \u003cspan class=\"o\"\u003e/\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* insert conntrack proto private data here */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu_int32_t\u003c/span\u003e \u003cspan class=\"n\"\u003emark\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* mark skb */\u003c/span\u003e                 \u003cspan class=\"o\"\u003e/\u003c/span\u003e     \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_ct_dccp\u003c/span\u003e \u003cspan class=\"n\"\u003edccp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu_int32_t\u003c/span\u003e \u003cspan class=\"n\"\u003esecmark\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                               \u003cspan class=\"o\"\u003e/\u003c/span\u003e      \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eip_ct_sctp\u003c/span\u003e \u003cspan class=\"n\"\u003esctp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                                                    \u003cspan class=\"o\"\u003e/\u003c/span\u003e       \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eip_ct_tcp\u003c/span\u003e \u003cspan class=\"n\"\u003etcp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eunion\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_proto\u003c/span\u003e \u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e----------\u0026gt;----/\u003c/span\u003e        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_ct_gre\u003c/span\u003e \u003cspan class=\"n\"\u003egre\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e                                                          \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etmpl_padto\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                                                        \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003eThe collection of all possible connection states\u003c/mark\u003e\u003c/strong\u003e in conntrack module, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eenum ip_conntrack_status\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/uapi/linux/netfilter/nf_conntrack_common.h\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003eip_conntrack_status\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_EXPECTED\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_EXPECTED_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_SEEN_REPLY\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_SEEN_REPLY_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_ASSURED\u003c/span\u003e       \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_ASSURED_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_CONFIRMED\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_CONFIRMED_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_SRC_NAT\u003c/span\u003e       \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_SRC_NAT_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_DST_NAT\u003c/span\u003e       \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_DST_NAT_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_NAT_MASK\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIPS_DST_NAT\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_SRC_NAT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_SEQ_ADJUST\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_SEQ_ADJUST_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_SRC_NAT_DONE\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_SRC_NAT_DONE_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_DST_NAT_DONE\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_DST_NAT_DONE_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_NAT_DONE_MASK\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIPS_DST_NAT_DONE\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_SRC_NAT_DONE\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_DYING\u003c/span\u003e         \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_DYING_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_FIXED_TIMEOUT\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_FIXED_TIMEOUT_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_TEMPLATE\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_TEMPLATE_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_UNTRACKED\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_UNTRACKED_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_HELPER\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_HELPER_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_OFFLOAD\u003c/span\u003e       \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_OFFLOAD_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eIPS_UNCHANGEABLE_MASK\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIPS_NAT_DONE_MASK\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_NAT_MASK\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\n                 \u003cspan class=\"n\"\u003eIPS_EXPECTED\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_CONFIRMED\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_DYING\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\n                 \u003cspan class=\"n\"\u003eIPS_SEQ_ADJUST\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_TEMPLATE\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_OFFLOAD\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"36-nf_conntrack_in-enter-conntrack\"\u003e3.6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_in()\u003c/code\u003e: enter conntrack\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/conntrack/netfilter-conntrack.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 3.1 Conntrack points in Netfilter framework\u003c/p\u003e\n\n\u003cp\u003eAs illustrated in Fig 3.1, Netfilter performs connection tracking at 4 hooking\npositions:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePRE_ROUTING\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eLOCAL_OUT\u003c/code\u003e\u003c/p\u003e\n\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003eStart connection tracking\u003c/mark\u003e\u003c/strong\u003e by calling \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_in()\u003c/code\u003e, normally this\n will create a new conntrack entry, then insert it into \u003cstrong\u003e\u003cmark\u003eunconfirmed list\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n    \u003cp\u003eWhy starting at these two places? Because both of them are the \u003cstrong\u003eearliest\n points that the initial packet of a new connection arrives Netfilter\n framework\u003c/strong\u003e.\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePRE_ROUTING\u003c/code\u003e: earliest point that the first packet of a new \u003cstrong\u003eexternally-initiated\u003c/strong\u003e connection arrives.\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eLOCAL_OUT\u003c/code\u003e: earliest point that the first packet of a new \u003cstrong\u003elocally-initiated\u003c/strong\u003e connection arrives.\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePOST_ROUTING\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eLOCAL_IN\u003c/code\u003e\u003c/p\u003e\n\n    \u003cp\u003eCall \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_confirm()\u003c/code\u003e, \u003cstrong\u003e\u003cmark\u003emove the newly created (in previous\n nf_conntrack_in()) connection\u003c/mark\u003e\u003c/strong\u003e in unconfirmed list to \u003cstrong\u003e\u003cmark\u003econfirmed list\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n    \u003cp\u003eAgain, why these two hooking points? It is because if the first packet of a\n new connection is not dropped during internal processing, it should arrive\n these places and these are \u003cstrong\u003ethe last place before it leaving Netfilter\n framework\u003c/strong\u003e:\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eFor packet of \u003cstrong\u003eexternally-initiated\u003c/strong\u003e connection, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eLOCAL_IN\u003c/code\u003e is the last hooking point\nbefore it is sent to upper layer application (e.g. a Nginx process).\u003c/li\u003e\n      \u003cli\u003eFor packet of \u003cstrong\u003elocally-initiated\u003c/strong\u003e connection, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePOST_ROUTING\u003c/code\u003e is the last hooking point\nbefore this packet is sent out on the wire.\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWe could see \u003cstrong\u003e\u003cmark\u003ehow these handlers got registered into the netfilter framwork\u003c/mark\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/netfilter/nf_conntrack_proto.c\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Connection tracking may drop packets, but never alters them, so make it the first hook.  */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_hook_ops\u003c/span\u003e \u003cspan class=\"n\"\u003eipv4_conntrack_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehook\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eipv4_conntrack_in\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e       \u003cspan class=\"c1\"\u003e// enter conntrack by calling nf_conntrack_in()\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epf\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNFPROTO_IPV4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehooknum\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_INET_PRE_ROUTING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// PRE_ROUTING hook point\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epriority\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_IP_PRI_CONNTRACK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehook\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eipv4_conntrack_local\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// enter conntrack by calling nf_conntrack_in()\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epf\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNFPROTO_IPV4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehooknum\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_INET_LOCAL_OUT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e       \u003cspan class=\"c1\"\u003e// LOCAL_OUT hook point\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epriority\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_IP_PRI_CONNTRACK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehook\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eipv4_confirm\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// call nf_conntrack_confirm()\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epf\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNFPROTO_IPV4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehooknum\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_INET_POST_ROUTING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// POST_ROUTING hook point\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epriority\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_IP_PRI_CONNTRACK_CONFIRM\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehook\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eipv4_confirm\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// call nf_conntrack_confirm()\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epf\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNFPROTO_IPV4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehooknum\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_INET_LOCAL_IN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// LOCAL_IN hook point\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epriority\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_IP_PRI_CONNTRACK_CONFIRM\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eMethod \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_in()\u003c/code\u003e is \u003cstrong\u003e\u003cmark\u003ethe core of connection tracking module\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/netfilter/nf_conntrack_core.c\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003cspan class=\"nf\"\u003enf_conntrack_in\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eu_int8_t\u003c/span\u003e \u003cspan class=\"n\"\u003epf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ehooknum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etmpl\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_ct_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// get related conntrack_info and conntrack entry\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etmpl\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eIP_CT_UNTRACKED\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// if conntrack exists, or if is un-trackable protocols\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003etmpl\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003enf_ct_is_template\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etmpl\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eIP_CT_UNTRACKED\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eNF_CT_STAT_INC_ATOMIC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eignore\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// no need to conntrack, inc ignore stats\u003c/span\u003e\n          \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_ACCEPT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                       \u003cspan class=\"c1\"\u003e// return NF_ACCEPT, continue normal processing\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003e_nfct\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                             \u003cspan class=\"c1\"\u003e// need to conntrack, reset refcount of this packet,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e                                               \u003cspan class=\"c1\"\u003e// prepare for further processing\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_l4proto\u003c/span\u003e\n           \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003el4proto\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__nf_ct_l4proto_find\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// extract protocol-specific L4 info\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el4proto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etmpl\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epf\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e      \u003cspan class=\"c1\"\u003e// skb validation\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eNF_CT_STAT_INC_ATOMIC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eNF_CT_STAT_INC_ATOMIC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einvalid\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n          \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nl\"\u003erepeat:\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eresolve_normal_ct\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etmpl\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...\u003c/span\u003e \u003cspan class=\"n\"\u003el4proto\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// start conntrack, extract tuple:\u003c/span\u003e\n                                                  \u003cspan class=\"c1\"\u003e// create new conntrack or update existing one\u003c/span\u003e\n  \u003cspan class=\"n\"\u003el4proto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epacket\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e               \u003cspan class=\"c1\"\u003e// protocol-specific processing, e.g. update UDP timeout\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eIP_CT_ESTABLISHED_REPLY\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003etest_and_set_bit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIPS_SEEN_REPLY_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estatus\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n      \u003cspan class=\"n\"\u003enf_conntrack_event_cache\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIPCT_REPLY\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nl\"\u003eout:\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etmpl\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003enf_ct_put\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etmpl\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// un-reference tmpl\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eRough processing steps:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eGet conntrack info of this skb.\u003c/li\u003e\n  \u003cli\u003eDetermine if conntrack is needed for this skb. If not needed, update ignore\ncounter (check with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econntrack -S\u003c/code\u003e), return \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_ACCEPT\u003c/code\u003e; if needed, init (reset) this skb’s refcount.\u003c/li\u003e\n  \u003cli\u003eExtract L4 information from skb, init protocol-specific \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct\nnf_conntrack_l4proto {}\u003c/code\u003e variable, which contains the protocol’s callback\nmethods for performing connection tracking.\u003c/li\u003e\n  \u003cli\u003eCall protocol-specific \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eerror()\u003c/code\u003e method for data validation, e.g. checksum.\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eStart conntrack\u003c/strong\u003e by calling \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eresolve_normal_ct()\u003c/code\u003e method, it\nwill create new tuple, new conntrack entry, or update status of existing\nconntrack entry.\u003c/li\u003e\n  \u003cli\u003eCall \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epacket()\u003c/code\u003e method for some protocol-specific processing. E.g. for UDP,\nif \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIPS_SEEN_REPLY\u003c/code\u003e is set in status, it will update \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etimeout\u003c/code\u003e value. timeout\nvaries according to different protocols, the smaller it is, the more it will\nbe stronger on anti-DDos attacks (DDos attacks a system by exausting all the\nsystem’s connections).\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"37-init_conntrack-create-new-conntrack-entry\"\u003e3.7 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einit_conntrack()\u003c/code\u003e: create new conntrack entry\u003c/h2\u003e\n\n\u003cp\u003eIf connection does not exist yet (the first packet of a flow),\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eresolve_normal_ct()\u003c/code\u003e method will call \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einit_conntrack()\u003c/code\u003e, and the latter will\nfurther call protocol-specific method \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enew()\u003c/code\u003e to create a new conntrack entry.\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/net/netfilter/nf_conntrack_core.c\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Allocate a new conntrack\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003enoinline\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_tuple_hash\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\n\u003cspan class=\"nf\"\u003einit_conntrack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etmpl\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n           \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_tuple\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n           \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_l4proto\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003el4proto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n           \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003edataoff\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"n\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Allocate an entry in conntrack hash table, if the table is full, print following log\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// into kernel: \u0026#34;nf_conntrack: table full, dropping packet\u0026#34;. Check with `dmesg -T`\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ect\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__nf_conntrack_alloc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ezone\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003erepl_tuple\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eGFP_ATOMIC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003el4proto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edataoff\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// protocol-specific method for creating a conntrack entry\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003elocal_bh_disable\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e             \u003cspan class=\"c1\"\u003e// disable softirq\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexpect_count\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eexp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_ct_find_expectation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ezone\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e__set_bit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIPS_EXPECTED_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estatus\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n            \u003cspan class=\"cm\"\u003e/* exp-\u0026gt;master safe, refcnt bumped in nf_ct_find_expectation */\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emaster\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emaster\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emark\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emaster\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emark\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esecmark\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emaster\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esecmark\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eNF_CT_STAT_INC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexpect_new\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Now it is inserted into the unconfirmed list, bump refcount */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enf_conntrack_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ect_general\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enf_ct_add_to_unconfirmed_list\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elocal_bh_enable\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e              \u003cspan class=\"c1\"\u003e// re-enable softirq\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eexpectfn\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eexpectfn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003enf_ct_expect_put\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etuplehash\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eIP_CT_DIR_ORIGINAL\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eImplementations of protocol-specific \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enew()\u003c/code\u003e method, see \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet/netfilter/nf_conntrack_proto_*.c\u003c/code\u003e.\nSuch as TCP’s one:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/netfilter/nf_conntrack_proto_tcp.c\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Called when a new connection for this protocol found. */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003etcp_new\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003edataoff\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enew_state\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTCP_CONNTRACK_SYN_SENT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ememset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etcp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etcp\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* SYN packet */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etcp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eseen\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003etd_end\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esegment_seq_plus_len\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003entohl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eth\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eseq\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edataoff\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etcp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eseen\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003etd_maxwin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003entohs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eth\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ewindow\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIf current packet will influence the status of subsequent packets,\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einit_conntrack()\u003c/code\u003e will set the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emaster\u003c/code\u003e field in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conn\u003c/code\u003e.\nConnection oriented protocols (e.g. TCP) uses this feature.\u003c/p\u003e\n\n\u003ch2 id=\"38-nf_conntrack_confirm-confirm-a-new-connection\"\u003e3.8 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_confirm()\u003c/code\u003e: confirm a new connection\u003c/h2\u003e\n\n\u003cp\u003eThe new conntrack entry that \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_in()\u003c/code\u003e creates will be inserted into\nan \u003cstrong\u003eunconfirmed connection list\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf this packet is not dropped during intermediate processing, then when it\narrives \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePOST_ROUTING\u003c/code\u003e hook, it will be further processed by\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_confirm()\u003c/code\u003e method. We have analyzed why it is further processed\nhere instead of other hooking points.\u003c/p\u003e\n\n\u003cp\u003eAfter \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_confirm()\u003c/code\u003e is done, status of the connection will turn to\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIPS_CONFIRMED\u003c/code\u003e, and the conntrack will be move from unconfirmed list to\n\u003cstrong\u003econfirmed list\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eWhy bother to split the conntrack entry creating process into two stages (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enew\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econfirm\u003c/code\u003e)?\u003c/p\u003e\n\n  \u003cp\u003eThink about this: after the initial packet passed \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_in()\u003c/code\u003e, but before\narriving \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_confirm()\u003c/code\u003e, it is possible that the packet get\ndropped by the kernel somewhere in the middle. This may result in large amounts of\nhalf-connected conntrack entries, and it would be a big concern in terms of\nboth performance and security. Spliting into two steps will significantly\naccelerate the GC procedure.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/net/netfilter/nf_conntrack_core.h\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Confirm a connection: returns NF_DROP if packet must be dropped. */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003enf_conntrack_confirm\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eskb_nfct\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_ACCEPT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003enf_ct_is_confirmed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__nf_conntrack_confirm\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_ACCEPT\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"n\"\u003enf_ct_deliver_cached_events\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003econfirm logic, error handling code omitted:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/netfilter/nf_conntrack_core.c\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Confirm a connection given skb; places it in hash table */\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003cspan class=\"nf\"\u003e__nf_conntrack_confirm\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ect\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_ct_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003elocal_bh_disable\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e               \u003cspan class=\"c1\"\u003e// disable softirq\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ehash\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etuplehash\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eIP_CT_DIR_REPLY\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003ehnnode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epprev\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ereply_hash\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehash_conntrack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etuplehash\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eIP_CT_DIR_REPLY\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003enfct_time_stamp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// update timer, will be GC-ed after timeout\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eatomic_inc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ect_general\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// update conntrack entry refcount?\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estatus\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_CONFIRMED\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"c1\"\u003e// set status as `confirmed`\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003e__nf_conntrack_hash_insert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ereply_hash\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// insert into conntrack table\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003elocal_bh_enable\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e                \u003cspan class=\"c1\"\u003e// re-enable softirq\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003enf_conntrack_event_cache\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emaster_ct\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eIPCT_RELATED\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eIPCT_NEW\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_ACCEPT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eOne thing needs to be noted here: we could see \u003cstrong\u003e\u003cmark\u003esoftirq (soft interrupt) gets\nfrequently disabled/re-enabled; besides, there are lots of lock/unlock\noperations (omitted in the above code)\u003c/mark\u003e\u003c/strong\u003e. This may be the main reasons of\ndegraded performance in certain scenarios (e.g. massive concurrent short-time\nconnections)?\u003c/p\u003e\n\n\u003ch1 id=\"4-implementation-netfilter-nat\"\u003e4 Implementation: Netfilter NAT\u003c/h1\u003e\n\n\u003cp\u003eNAT is a function module built upon conntrack module, it relies on connection\ntracking’s results to work properly.\u003c/p\u003e\n\n\u003cp\u003eAgain, not all protocols supports NAT.\u003c/p\u003e\n\n\u003ch2 id=\"41-data-structures-and-functions\"\u003e4.1 Data structures and functions\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eData structures:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eProtocols that support NAT needs to implement the methods defined in:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_nat_l3proto {}\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_nat_l4proto {}\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eFunctions:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_nat_inet_fn()\u003c/code\u003e: \u003cstrong\u003e\u003cmark\u003ecore of NAT module\u003c/mark\u003e\u003c/strong\u003e, will be called at \u003cstrong\u003e\u003cmark\u003eall hooking points except NF_INET_FORWARD\u003c/mark\u003e\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"42-nat-module-init\"\u003e4.2 NAT module init\u003c/h2\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/netfilter/nf_nat_core.c\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_hook\u003c/span\u003e \u003cspan class=\"n\"\u003enat_hook\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse_nat_setup\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enfnetlink_parse_nat_setup\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edecode_session\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__nf_nat_decode_session\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emanip_pkt\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_manip_pkt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e__init\u003c/span\u003e \u003cspan class=\"nf\"\u003enf_nat_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enf_nat_bysource\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_ct_alloc_hashtable\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003enf_nat_htable_size\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003enf_ct_helper_expectfn_register\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003efollow_master_nat\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eRCU_INIT_POINTER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enf_nat_hook\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003enat_hook\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eMODULE_LICENSE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;GPL\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003emodule_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enf_nat_init\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"43-struct-nf_nat_l3proto--protocol-specific-methods\"\u003e4.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_nat_l3proto {}\u003c/code\u003e: protocol specific methods\u003c/h2\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/net/netfilter/nf_nat_l3proto.h\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_l3proto\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu8\u003c/span\u003e    \u003cspan class=\"n\"\u003el3proto\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// e.g. AF_INET\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eu32\u003c/span\u003e     \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esecure_port\u003c/span\u003e    \u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_tuple\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e__be16\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebool\u003c/span\u003e    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emanip_pkt\u003c/span\u003e      \u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecsum_update\u003c/span\u003e    \u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecsum_recalc\u003c/span\u003e    \u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eu8\u003c/span\u003e \u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edecode_session\u003c/span\u003e \u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e     \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enlattr_to_range\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enlattr\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etb\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_range2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"44-struct-nf_nat_l4proto--protocol-specific-methods\"\u003e4.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_nat_l4proto {}\u003c/code\u003e: protocol specific methods\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emanip\u003c/code\u003e is the abbraviation of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emanipulate\u003c/code\u003e in the code:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/net/netfilter/nf_nat_l4proto.h\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_l4proto\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu8\u003c/span\u003e \u003cspan class=\"n\"\u003el4proto\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// L4 proto id, e.g. IPPROTO_UDP, IPPROTO_TCP\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Modify L3/L4 header according to the given tuple and NAT type (SNAT/DNAT)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emanip_pkt\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003el3proto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emaniptype\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Create a unique tuple\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// e.g. for UDP, will generate a 16bit dst_port with src_ip, dst_ip, src_port and a rand\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eunique_tuple\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003el3proto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_range2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emaniptype\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// If the address range is exhausted the NAT modules will begin to drop packets.\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enlattr_to_range\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enlattr\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etb\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_range2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eImplementations of these methods, see \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet/netfilter/nf_nat_proto_*.c\u003c/code\u003e. For\nexample, the TCP’s implementation:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/netfilter/nf_nat_proto_tcp.c\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_l4proto\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_l4proto_tcp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003el4proto\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eIPPROTO_TCP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emanip_pkt\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_manip_pkt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ein_range\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_l4proto_in_range\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eunique_tuple\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_unique_tuple\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enlattr_to_range\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_l4proto_nlattr_to_range\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"45-nf_nat_inet_fn-enter-nat\"\u003e4.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_nat_inet_fn()\u003c/code\u003e: enter NAT\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_nat_inet_fn()\u003c/code\u003e will be called in following hooking points:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_INET_PRE_ROUTING\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_INET_POST_ROUTING\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_INET_LOCAL_OUT\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_INET_LOCAL_IN\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003enamely, all Netfilter hooking points except \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_INET_FORWARD\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003ePriorities at these hooking points: \u003cstrong\u003eConntrack \u0026gt; NAT \u0026gt; Packet Filtering\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003econntrack has a higher priority than NAT, since NAT relies on the results of\nconnection tracking\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/conntrack/hook-to-nat.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. NAT\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003cspan class=\"nf\"\u003enf_nat_inet_fn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epriv\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_hook_state\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ect\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_ct_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// exit NAT if conntrack not exist. This is why we say NAT relies on conntrack\u0026#39;s results\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_ACCEPT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003enat\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enfct_nat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eIP_CT_RELATED\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eIP_CT_RELATED_REPLY\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* Only ICMPs can be IP_CT_IS_REPLY.  Fallthrough */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eIP_CT_NEW\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* Seen it before? This can happen for loopback, retrans, or local packets. */\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003enf_nat_initialized\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emaniptype\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_hook_entries\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ercu_dereference\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elpriv\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eentries\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// obtain all NAT rules\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003enull_bind\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enum_hook_entries\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c1\"\u003e// execute NAT rules in order\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehooks\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003ehook\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehooks\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003epriv\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_ACCEPT\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                         \u003cspan class=\"c1\"\u003e// return if any rule returns non ACCEPT verdict\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enf_nat_initialized\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emaniptype\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003edo_nat\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"nl\"\u003enull_bind:\u003c/span\u003e\n            \u003cspan class=\"n\"\u003enf_nat_alloc_null_binding\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehook\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Already setup manip\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enf_nat_oif_changed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehook\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enat\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eoif_changed\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"nl\"\u003edefault:\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* ESTABLISHED */\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enf_nat_oif_changed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehook\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enat\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eoif_changed\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"nl\"\u003edo_nat:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_packet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehook\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nl\"\u003eoif_changed:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enf_ct_kill_acct\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_DROP\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIt first queries conntrack info for this packet, if conntrack info not exists,\nit means this connection could not be tracked, then we could never perform NAT\nfor it. So just exit NAT in this case.\u003c/p\u003e\n\n\u003cp\u003eIf conntrack info exists, and the connection is in\n \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP_CT_RELATED\u003c/code\u003e or \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP_CT_RELATED_REPLY\u003c/code\u003e or\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP_CT_NEW\u003c/code\u003e states, then get all NAT rules.\u003c/p\u003e\n\n\u003cp\u003eIf found, execute \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_nat_packet()\u003c/code\u003e method, it will further call\nprotocol-specific \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emanip_pkt\u003c/code\u003e method to modify the packet. If failed, the packet\nwill be dropped.\u003c/p\u003e\n\n\u003ch3 id=\"masquerade\"\u003eMasquerade\u003c/h3\u003e\n\n\u003cp\u003eNAT module could be configured in two fashions:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eNormal: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003echange IP1 to IP2 if matching XXX\u003c/code\u003e.\u003c/li\u003e\n  \u003cli\u003eSpecial: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003echange IP1 to dev1\u0026#39;s IP if matching XXX\u003c/code\u003e, this is \u003cstrong\u003e\u003cmark\u003ea special case of SNAT, called masquerade\u003c/mark\u003e\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003ePros \u0026amp; Cons:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eMasquerade differentiates itself from SNAT in that when device’s IP address\nchanges, the rules still valid. It could be seen as dynamic SNAT\n(dynamically adapting to the source IP changes in SNAT rules).\u003c/li\u003e\n  \u003cli\u003eThe drawback of masquerade is that it has degraded performance compared with\nSNAT, and this is easy to understand.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"46-nf_nat_packet-performing-nat\"\u003e4.6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_nat_packet()\u003c/code\u003e: performing NAT\u003c/h2\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/netfilter/nf_nat_core.c\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Do packet manipulations according to nf_nat_setup_info. */\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003enf_nat_packet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003eip_conntrack_info\u003c/span\u003e \u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n               \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ehooknum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_manip_type\u003c/span\u003e \u003cspan class=\"n\"\u003emtype\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHOOK2MANIP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehooknum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003eip_conntrack_dir\u003c/span\u003e \u003cspan class=\"n\"\u003edir\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCTINFO2DIR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003everdict\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_ACCEPT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003estatusbit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emtype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_NAT_MANIP_SRC\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_SRC_NAT\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_DST_NAT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edir\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eIP_CT_DIR_REPLY\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// Invert if this is reply dir\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estatusbit\u003c/span\u003e \u003cspan class=\"o\"\u003e^=\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_NAT_MASK\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estatus\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estatusbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// Non-atomic: these bits don\u0026#39;t change. */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003everdict\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_manip_pkt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emtype\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edir\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003everdict\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003enf_nat_manip_pkt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                     \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_manip_type\u003c/span\u003e \u003cspan class=\"n\"\u003emtype\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003eip_conntrack_dir\u003c/span\u003e \u003cspan class=\"n\"\u003edir\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_tuple\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* We are aiming to look like inverse of other direction. */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enf_ct_invert_tuplepr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etuplehash\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003edir\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003el3proto\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__nf_nat_l3proto_find\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003el3num\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003el4proto\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__nf_nat_l4proto_find\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003el3num\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprotonum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003el3proto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emanip_pkt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003el4proto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emtype\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"c1\"\u003e// protocol-specific processing\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_DROP\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_ACCEPT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"5-configuration-and-monitoring\"\u003e5. Configuration and monitoring\u003c/h1\u003e\n\n\u003ch2 id=\"51-inspect-and-loadunload-nf_conntrack-module\"\u003e5.1 Inspect and load/unload nf_conntrack module\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emodinfo nf_conntrack\nlicense:        GPL\n\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e:          nf_conntrack-10\n\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e:          nf_conntrack-2\n\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e:          ip_conntrack\nsrcversion:     30B45E5822722ACEDE23A4B\ndepends:        nf_defrag_ipv6,libcrc32c,nf_defrag_ipv4\nretpoline:      Y\nintree:         Y\nname:           nf_conntrack\nvermagic:       5.15.0-46-generic SMP mod_unload modversions\nsig_id:         PKCS#7\nsigner:         Build \u003cspan class=\"nb\"\u003etime \u003c/span\u003eautogenerated kernel key\nsig_key:        17:6F:92:2F:58:6B:B2:28:13:DC:71:DC:5A:97:EE:BA:D8:4B:C7:DE\nsig_hashalgo:   sha512\nsignature:      0B:32:AA:93:F4:31:52:9C:FE:0D:80:B4:F6:7C:30:63:4C:F6:03:AA:\n                ...\n                E9:1F:45:C6:77:C2:29:99:B4:3D:1A:D2\nparm:           tstamp:Enable connection tracking flow timestamping. \u003cspan class=\"o\"\u003e(\u003c/span\u003ebool\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nparm:           acct:Enable connection tracking flow accounting. \u003cspan class=\"o\"\u003e(\u003c/span\u003ebool\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nparm:           nf_conntrack_helper:Enable automatic conntrack helper assignment \u003cspan class=\"o\"\u003e(\u003c/span\u003edefault 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003ebool\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nparm:           expect_hashsize:uint\nparm:           enable_hooks:Always \u003cspan class=\"nb\"\u003eenable \u003c/span\u003econntrack hooks \u003cspan class=\"o\"\u003e(\u003c/span\u003ebool\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eRemove the module:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ermmod nf_conntrack_netlink nf_conntrack\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eLoad the module:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emodprobe nf_conntrack\n\n\u003cspan class=\"c\"\u003e# Also support to pass configuration parameters, e.g.:\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emodprobe nf_conntrack \u003cspan class=\"nv\"\u003enf_conntrack_helper\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003eexpect_hashsize\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e131072\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"52-sysctl-options\"\u003e5.2 sysctl options\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003esysctl \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003enf_conntrack\nnet.netfilter.nf_conntrack_acct \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0\nnet.netfilter.nf_conntrack_buckets \u003cspan class=\"o\"\u003e=\u003c/span\u003e 262144                 \u003cspan class=\"c\"\u003e# hashsize = nf_conntrack_max/nf_conntrack_buckets\u003c/span\u003e\nnet.netfilter.nf_conntrack_checksum \u003cspan class=\"o\"\u003e=\u003c/span\u003e 1\nnet.netfilter.nf_conntrack_count \u003cspan class=\"o\"\u003e=\u003c/span\u003e 2148\n... \u003cspan class=\"c\"\u003e# DCCP options\u003c/span\u003e\nnet.netfilter.nf_conntrack_events \u003cspan class=\"o\"\u003e=\u003c/span\u003e 1\nnet.netfilter.nf_conntrack_expect_max \u003cspan class=\"o\"\u003e=\u003c/span\u003e 1024\n... \u003cspan class=\"c\"\u003e# IPv6 options\u003c/span\u003e\nnet.netfilter.nf_conntrack_generic_timeout \u003cspan class=\"o\"\u003e=\u003c/span\u003e 600\nnet.netfilter.nf_conntrack_helper \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0\nnet.netfilter.nf_conntrack_icmp_timeout \u003cspan class=\"o\"\u003e=\u003c/span\u003e 30\nnet.netfilter.nf_conntrack_log_invalid \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0\nnet.netfilter.nf_conntrack_max \u003cspan class=\"o\"\u003e=\u003c/span\u003e 1048576                    \u003cspan class=\"c\"\u003e# conntrack table size\u003c/span\u003e\n... \u003cspan class=\"c\"\u003e# SCTP options\u003c/span\u003e\nnet.netfilter.nf_conntrack_tcp_be_liberal \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0\nnet.netfilter.nf_conntrack_tcp_loose \u003cspan class=\"o\"\u003e=\u003c/span\u003e 1\nnet.netfilter.nf_conntrack_tcp_max_retrans \u003cspan class=\"o\"\u003e=\u003c/span\u003e 3\nnet.netfilter.nf_conntrack_tcp_timeout_close \u003cspan class=\"o\"\u003e=\u003c/span\u003e 10\nnet.netfilter.nf_conntrack_tcp_timeout_close_wait \u003cspan class=\"o\"\u003e=\u003c/span\u003e 60\nnet.netfilter.nf_conntrack_tcp_timeout_established \u003cspan class=\"o\"\u003e=\u003c/span\u003e 21600\nnet.netfilter.nf_conntrack_tcp_timeout_fin_wait \u003cspan class=\"o\"\u003e=\u003c/span\u003e 120\nnet.netfilter.nf_conntrack_tcp_timeout_last_ack \u003cspan class=\"o\"\u003e=\u003c/span\u003e 30\nnet.netfilter.nf_conntrack_tcp_timeout_max_retrans \u003cspan class=\"o\"\u003e=\u003c/span\u003e 300\nnet.netfilter.nf_conntrack_tcp_timeout_syn_recv \u003cspan class=\"o\"\u003e=\u003c/span\u003e 60\nnet.netfilter.nf_conntrack_tcp_timeout_syn_sent \u003cspan class=\"o\"\u003e=\u003c/span\u003e 120\nnet.netfilter.nf_conntrack_tcp_timeout_time_wait \u003cspan class=\"o\"\u003e=\u003c/span\u003e 120\nnet.netfilter.nf_conntrack_tcp_timeout_unacknowledged \u003cspan class=\"o\"\u003e=\u003c/span\u003e 300\nnet.netfilter.nf_conntrack_timestamp \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0\nnet.netfilter.nf_conntrack_udp_timeout \u003cspan class=\"o\"\u003e=\u003c/span\u003e 30\nnet.netfilter.nf_conntrack_udp_timeout_stream \u003cspan class=\"o\"\u003e=\u003c/span\u003e 180\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"53-monitoring\"\u003e5.3 Monitoring\u003c/h2\u003e\n\n\u003ch3 id=\"conntrack-statistics\"\u003econntrack statistics\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/net/stat/nf_conntrack\nentries   searched found    new      invalid  ignore   delete   delete_list insert   insert_failed drop     early_drop icmp_error  expect_new expect_create expect_delete search_restart\n000008e3  00000000 00000000 00000000 0000309d 001e72d4 00000000 00000000    00000000 00000000      00000000 00000000   000000ee    00000000   00000000      00000000       000368d7\n000008e3  00000000 00000000 00000000 00007301 002b8e8c 00000000 00000000    00000000 00000000      00000000 00000000   00000170    00000000   00000000      00000000       00035794\n000008e3  00000000 00000000 00000000 00001eea 001e6382 00000000 00000000    00000000 00000000      00000000 00000000   00000059    00000000   00000000      00000000       0003f166\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThere is also a command line tool \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econntrack\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003econntrack \u003cspan class=\"nt\"\u003e-S\u003c/span\u003e\n\u003cspan class=\"nv\"\u003ecpu\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0   \u003cspan class=\"nv\"\u003efound\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003einvalid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e743150 \u003cspan class=\"nv\"\u003eignore\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e238069 \u003cspan class=\"nv\"\u003einsert\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003einsert_failed\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003edrop\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e195603 \u003cspan class=\"nv\"\u003eearly_drop\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e118583 \u003cspan class=\"nv\"\u003eerror\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e16 \u003cspan class=\"nv\"\u003esearch_restart\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e22391652\n\u003cspan class=\"nv\"\u003ecpu\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1   \u003cspan class=\"nv\"\u003efound\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003einvalid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2004   \u003cspan class=\"nv\"\u003eignore\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e402790 \u003cspan class=\"nv\"\u003einsert\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003einsert_failed\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003edrop\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e44371  \u003cspan class=\"nv\"\u003eearly_drop\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e34890  \u003cspan class=\"nv\"\u003eerror\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0  \u003cspan class=\"nv\"\u003esearch_restart\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1225447\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eFields:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eignore: untracked packets (recall that only packets of trackable protocols will be tracked)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"conntrack-table-usage\"\u003econntrack table usage\u003c/h3\u003e\n\n\u003cp\u003eNumber of current conntrack entries:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/sys/net/netfilter/nf_conntrack_count\n257273\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eNumber of max allowed conntrack entries:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/sys/net/netfilter/nf_conntrack_max\n262144\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"6-conntrack-related-issues\"\u003e6. Conntrack related issues\u003c/h1\u003e\n\n\u003ch2 id=\"61-nf_conntrack-table-full\"\u003e6.1 nf_conntrack: table full\u003c/h2\u003e\n\n\u003ch3 id=\"symptoms\"\u003eSymptoms\u003c/h3\u003e\n\n\u003ch4 id=\"application-layer-symptoms\"\u003eApplication layer symptoms\u003c/h4\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003eProbabilistic \u003cstrong\u003e\u003cmark\u003econnection timeout\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n    \u003cp\u003eE.g. if the application is written in Java, the raised errors are \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejdbc4.CommunicationsException\u003c/code\u003e communications link failure, etc.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003eExisting (e.g. established) connections\u003c/mark\u003e\u003c/strong\u003e works normally.\u003c/p\u003e\n\n    \u003cp\u003eThat is to say, there are no read/write timeouts or something like that at that moment, but only connect timeouts.\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4 id=\"network-layer-symptoms\"\u003eNetwork layer symptoms\u003c/h4\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003eWith traffic capturing, we could see \u003cstrong\u003e\u003cmark\u003ethe first packet (SYN) got siliently dropped by the kernel\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n    \u003cp\u003eUnfortunately, common NIC stats (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eifconfig\u003c/code\u003e) and kernel stats (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/net/softnet_stat\u003c/code\u003e)\n \u003cstrong\u003e\u003cmark\u003edon\u0026#39;t show these droppings\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eSYN got restransmitted after \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1s+\u003c/code\u003e, or the connection is closed by retransmission.\u003c/p\u003e\n\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003eRetransmission of the first SYN takes 1s, this is a hardcode value in the kernel, not configurable\u003c/mark\u003e\u003c/strong\u003e (See \u003ca href=\"#ch_8.1\"\u003eappendix\u003c/a\u003e for the detailed implementation) .\u003c/p\u003e\n\n    \u003cp\u003eConsidering other overheads, the real retransmission will take place 1+ second’s later.\n If the client has a very small connect timeout setting, e.g.  \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1.05s\u003c/code\u003e, then\n the connection will be closed before retransmission, and reports connection\n timeout errors to upper layers.\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4 id=\"oskernel-layer-symptoms\"\u003eOS/kernel layer symptoms\u003c/h4\u003e\n\n\u003cp\u003eKernel log,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edemsg \u003cspan class=\"nt\"\u003e-T\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003eTue Apr  6 18:12:30 2021] nf_conntrack: nf_conntrack: table full, dropping packet\n\u003cspan class=\"o\"\u003e[\u003c/span\u003eTue Apr  6 18:12:30 2021] nf_conntrack: nf_conntrack: table full, dropping packet\n\u003cspan class=\"o\"\u003e[\u003c/span\u003eTue Apr  6 18:12:30 2021] nf_conntrack: nf_conntrack: table full, dropping packet\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"trouble-shooting\"\u003eTrouble shooting\u003c/h3\u003e\n\n\u003cp\u003eThe above described phenomenons indicate that conntrack table is blown out.\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/sys/net/netfilter/nf_conntrack_count\n257273\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/sys/net/netfilter/nf_conntrack_max\n262144\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eCompare above two numbers, we could conclude that conntrack table indeeded get\nblown out.\u003c/p\u003e\n\n\u003cp\u003eBesides, we could also see dropping statistics in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecat /proc/net/stat/nf_conntrack\u003c/code\u003e or \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econntrack -S\u003c/code\u003e output.\u003c/p\u003e\n\n\u003ch3 id=\"resolution\"\u003eResolution\u003c/h3\u003e\n\n\u003cp\u003eWith decreasing priority:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003eIncrease conntrack table size\u003c/p\u003e\n\n    \u003cp\u003eRuntime configuration (\u003cstrong\u003ewill not disrupt existing connections/traffic\u003c/strong\u003e) :\u003c/p\u003e\n\n    \u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003esysctl \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e net.netfilter.nf_conntrack_max\u003cspan class=\"o\"\u003e=\u003c/span\u003e524288\n \u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho \u003c/span\u003e131072 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e /sys/module/nf_conntrack/parameters/hashsize \u003cspan class=\"c\"\u003e# recommendation: hashsize=nf_conntrack_count/4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e    \u003c/div\u003e\n\n    \u003cp\u003ePermanent configuration:\u003c/p\u003e\n\n    \u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;net.netfilter.nf_conntrack_max = 524288\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e /etc/sysctl.conf\n\n \u003cspan class=\"c\"\u003e# Write hashsize either to system boot file or module config file\u003c/span\u003e\n \u003cspan class=\"c\"\u003e# Method 1: write to system boot file\u003c/span\u003e\n \u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;echo 131072 \u0026gt; /sys/module/nf_conntrack/parameters/hashsize\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e /etc/rc.local\n \u003cspan class=\"c\"\u003e# Method 2: write to module load file\u003c/span\u003e\n \u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;options nf_conntrack expect_hashsize=131072 hashsize=131072\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e /etc/modprobe.d/nf_conntrack.conf\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e    \u003c/div\u003e\n\n    \u003cp\u003eSide effect：\u003cstrong\u003e\u003cmark\u003emore memory will be reserved\u003c/mark\u003e\u003c/strong\u003e by conntrack module.\n Refer to the \u003ca href=\"#ch_8.2\"\u003eappendix\u003c/a\u003e for the detailed calculation.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eDecrease GC durations (timeout values)\u003c/p\u003e\n\n    \u003cp\u003eBesides increase conntrack table size, we could also decrease conntrack GC values (also called timeouts),\n this will acclerate eviction of stale entries.\u003c/p\u003e\n\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack\u003c/code\u003e has several timeout setting, each for entries of different TCP states (established、fin_wait、time_wait, etc).\u003c/p\u003e\n\n    \u003cp\u003eFor example, \u003cstrong\u003e\u003cmark\u003ethe default timeout for established state conntrack entries is 423000s (5 days!) \u003c/mark\u003e\u003c/strong\u003e.\n \u003cstrong\u003ePossible reason\u003c/strong\u003e for so large a value may be: TCP/IP specification\n allows established connection stays idle for infinite long time (but still\n alive) [8], specific implementations (Linux、BSD、Windows, etc) could set their own max allowed idle timeout.\n To avoid to accidently GC out such connection, Linux kernel chose a long enough duration.\n [8] recommends to timeout value to be no smaller than 2 hours 4 minutes (as mentioned previously,\n Cilium implements its own CT module, as comparison and reference,\u003cstrong\u003e\u003cmark\u003eCilium\u0026#39;s established timeout is 6 hours\u003c/mark\u003e\u003c/strong\u003e).\n But there are also recommendations that are far more smaller than this, such as 20 minutes.\u003c/p\u003e\n\n    \u003cp\u003eUnless certainly know what you are doing, you should decrease this value with caution,\n \u003cstrong\u003e\u003cmark\u003esuch as 6 hours\u003c/mark\u003e\u003c/strong\u003e, which is already smaller significantly than the default one.\u003c/p\u003e\n\n    \u003cp\u003eRuntime configuration:\u003c/p\u003e\n\n    \u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003esysctl \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e net.netfilter.nf_conntrack_tcp_timeout_established \u003cspan class=\"o\"\u003e=\u003c/span\u003e 21600\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e    \u003c/div\u003e\n\n    \u003cp\u003ePermanent configuration:\u003c/p\u003e\n\n    \u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;net.netfilter.nf_conntrack_tcp_timeout_established = 21600\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e /etc/sysctl.conf\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e    \u003c/div\u003e\n\n    \u003cp\u003eYou could also consider to decrease the other timeout values (especially \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_tcp_timeout_time_wait\u003c/code\u003e, which defaults to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e120s\u003c/code\u003e).\n But still to remind: \u003cstrong\u003eunless sure what you’re doing, do not decrease these values radically\u003c/strong\u003e.\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"7-summary\"\u003e7. Summary\u003c/h1\u003e\n\n\u003cp\u003eConnection tracking (conntrack) is a fairly fundamental and important network module,\nbut it goes into normal developer or system maintainer’s eyes only when they\nare stucked in some specific network troubles.\u003c/p\u003e\n\n\u003cp\u003eFor example, in highly concurrent connection conditions, L4LB node will receive\nlarge amounts of short-lived requestions/connections, which may breakout the conntrack table.\nPhenomenons in this case:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eClients connect to L4LB failed, the failures may be random, but may also be bulky.\u003c/li\u003e\n  \u003cli\u003eClient retries may succeed, but may also failed again and again.\u003c/li\u003e\n  \u003cli\u003eCapturing traffic at L4LB nodes, could see that L4LB nodes received\nSYNC (take TCP as example) packets, but no ACK is replied, in other words, the\npackets get siliently dropped.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe reasons here maybe that conntrack table size is not big enough, or GC\ninterval is too large, or even there are \u003ca href=\"https://github.com/cilium/cilium/pull/12729\"\u003ebugs in conntrack GC\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch1 id=\"8-appendix\"\u003e8. Appendix\u003c/h1\u003e\n\n\u003cp\u003e\u003ca name=\"ch_8.1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"81-retransmission-interval-calculation-of-the-first-syn-linux-419118\"\u003e8.1 Retransmission interval calculation of the first SYN (Linux 4.19.118)\u003c/h2\u003e\n\n\u003cp\u003eCall stack: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_connect() -\u0026gt; tcp_connect_init() -\u0026gt; tcp_timeout_init()\u003c/code\u003e.\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/ipv4/tcp_output.c\u003c/span\u003e\n\u003cspan class=\"cm\"\u003e/* Do all connect socket setups that can be done AF independent. */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003etcp_connect_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einet_csk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk_rto\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_timeout_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// include/net/tcp.h\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"nf\"\u003etcp_timeout_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Get SYN-RTO: return -1 if\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//   * no BPF programs attached to the socket/cgroup, or\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//   * there are BPF programs, but the programs excuting failed\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Unless users write their own BPF programs and attach to cgroup/socket,\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// there will be no BPF programs. so here will (always) return -1\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_call_bpf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_TIMEOUT_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e                \u003cspan class=\"c1\"\u003e// timeout == -1, using default value in the below\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTCP_TIMEOUT_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// defined as the HZ of the system, which is effectively 1 second, see below\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// include/net/tcp.h\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#define TCP_RTO_MAX    ((unsigned)(120*HZ))\n#define TCP_RTO_MIN    ((unsigned)(HZ/5))\n#define TCP_TIMEOUT_MIN    (2U) \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* Min timeout for TCP timers in jiffies */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#define TCP_TIMEOUT_INIT ((unsigned)(1*HZ))    \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* RFC6298 2.1 initial RTO value    */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca name=\"ch_8.2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"82-calculating-conntrack-memory-usage\"\u003e8.2 Calculating conntrack memory usage\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/slabinfo | \u003cspan class=\"nb\"\u003ehead\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/slabinfo | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003econntrack\nslabinfo - version: 2.1\n\u003cspan class=\"c\"\u003e# name            \u0026lt;active_objs\u0026gt; \u0026lt;num_objs\u0026gt; \u0026lt;objsize\u0026gt; \u0026lt;objperslab\u0026gt; \u0026lt;pagesperslab\u0026gt; : tunables \u0026lt;limit\u0026gt; \u0026lt;batchcount\u0026gt; \u0026lt;sharedfactor\u0026gt; : slabdata \u0026lt;active_slabs\u0026gt; \u0026lt;num_slabs\u0026gt; \u0026lt;sharedavail\u0026gt;\u003c/span\u003e\nnf_conntrack      512824 599505    320   51    4 : tunables    0    0    0 : slabdata  11755  11755      0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ein the above output, \u003cstrong\u003e\u003cmark\u003eobjsize means the kernel object size\u003c/mark\u003e\u003c/strong\u003e (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conn\u003c/code\u003e here),\nin unit of \u003cstrong\u003e\u003cmark\u003ebytes\u003c/mark\u003e\u003c/strong\u003e. So the above information tells us that\n\u003cstrong\u003e\u003cmark\u003eeach conntrack entry takes 320 bytes of memory\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf page overheads are ignored (kernel allocates memory with slabs), then the\n\u003cstrong\u003e\u003cmark\u003ememory usage under different table sizes\u003c/mark\u003e\u003c/strong\u003e would be:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_max=512K\u003c/code\u003e: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e512K * 320Byte = 160MB\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_max=1M\u003c/code\u003e: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1M * 320Byte = 320MB\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor more accurate calculation, refer to [9].\u003c/p\u003e\n\n\u003ch1 id=\"references\"\u003eReferences\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://wiki.aalto.fi/download/attachments/69901948/netfilter-paper.pdf\"\u003eNetfilter connection tracking and NAT implementation\u003c/a\u003e. Proc.\nSeminar on Network Protocols in Operating Systems, Dept. Commun. and Networking, Aalto Univ. 2013.\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://docs.cilium.io/en/v1.7/gettingstarted/kubeproxy-free/\"\u003eCilium: Kubernetes without kube-proxy\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/k8s-l4lb/\"\u003eL4LB for Kubernetes: Theory and Practice with Cilium+BGP+ECMP\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://docs.docker.com/network/bridge/\"\u003eDocker bridge network mode\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Netfilter\"\u003eWikipedia: Netfilter\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://blog.cloudflare.com/conntrack-tales-one-thousand-and-one-flows/\"\u003eConntrack tales - one thousand and one flows\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://www.redhat.com/en/blog/how-connection-tracking-open-vswitch-helps-openstack-performance\"\u003eHow connection tracking in Open vSwitch helps OpenStack performance\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://tools.ietf.org/html/rfc5382#section-5\"\u003eNAT Behavioral Requirements for TCP\u003c/a\u003e, RFC5382\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://johnleach.co.uk/posts/2009/06/17/netfilter-conntrack-memory-usage/\"\u003eNetfilter Conntrack Memory Usage\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/conntrack-design-and-implementation-zh/\"\u003e\u003cspan\u003e« 连接跟踪（conntrack）：原理、应用及 Linux 内核实现\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/cilium-clustermesh/\"\u003e\u003cspan\u003eCilium ClusterMesh: A Hands-on Guide »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2020-08-09T00:00:00Z",
  "Author": "Arthur Chiao"
}