{
  "Source": "arthurchiao.art",
  "Title": "Traffic Mirroring: Theory and Practice (with tc and Tunneling)",
  "Link": "https://arthurchiao.art/blog/traffic-mirror-with-tc-and-tunneling/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eTraffic Mirroring: Theory and Practice (with tc and Tunneling)\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2021-01-23 | Last Update 2021-01-23\u003c/p\u003e\n  \n  \u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#1-theory\" id=\"markdown-toc-1-theory\"\u003e1 Theory\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-technical-requirements\" id=\"markdown-toc-11-technical-requirements\"\u003e1.1 Technical requirements\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-solutions\" id=\"markdown-toc-12-solutions\"\u003e1.2 Solutions\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#capture-filter-and-copy-packets\" id=\"markdown-toc-capture-filter-and-copy-packets\"\u003eCapture, filter and copy packets\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#send-copied-packets-to-the-destination\" id=\"markdown-toc-send-copied-packets-to-the-destination\"\u003eSend copied packets to the destination\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#challenges\" id=\"markdown-toc-challenges\"\u003eChallenges\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#sending-via-tunneling\" id=\"markdown-toc-sending-via-tunneling\"\u003eSending via tunneling\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-a-specific-solution-tc--vxlan\" id=\"markdown-toc-13-a-specific-solution-tc--vxlan\"\u003e1.3 A specific solution: tc + VxLAN\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-practice-tc--vxlan\" id=\"markdown-toc-2-practice-tc--vxlan\"\u003e2 Practice: tc + VxLAN\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-set-up-playground\" id=\"markdown-toc-21-set-up-playground\"\u003e2.1 Set up playground\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#211-prerequisites\" id=\"markdown-toc-211-prerequisites\"\u003e2.1.1 Prerequisites\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#212-create-two-containers\" id=\"markdown-toc-212-create-two-containers\"\u003e2.1.2 Create two containers\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#213-connect-containers-with-another-network\" id=\"markdown-toc-213-connect-containers-with-another-network\"\u003e2.1.3 Connect containers with another network\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#add-bridge\" id=\"markdown-toc-add-bridge\"\u003eAdd bridge\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#add-nic-to-ctn-1\" id=\"markdown-toc-add-nic-to-ctn-1\"\u003eAdd NIC to ctn-1\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#add-nic-to-ctn-2\" id=\"markdown-toc-add-nic-to-ctn-2\"\u003eAdd NIC to ctn-2\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#214-test-reachability\" id=\"markdown-toc-214-test-reachability\"\u003e2.1.4 Test reachability\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-set-up-vxlan-tunnel\" id=\"markdown-toc-22-set-up-vxlan-tunnel\"\u003e2.2 Set up VxLAN tunnel\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#221-setup-vxlan-tunnel-on-ctn-1\" id=\"markdown-toc-221-setup-vxlan-tunnel-on-ctn-1\"\u003e2.2.1 Setup VxLAN tunnel on ctn-1\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#222-setup-vxlan-tunnel-on-ctn-2\" id=\"markdown-toc-222-setup-vxlan-tunnel-on-ctn-2\"\u003e2.2.2 Setup VxLAN tunnel on ctn-2\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#223-topology\" id=\"markdown-toc-223-topology\"\u003e2.2.3 Topology\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-filter--mirror-traffic-with-tc\" id=\"markdown-toc-23-filter--mirror-traffic-with-tc\"\u003e2.3 Filter \u0026amp; mirror traffic with tc\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#231-add-the-ingress-qdisc\" id=\"markdown-toc-231-add-the-ingress-qdisc\"\u003e2.3.1 Add the ingress qdisc\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#232-add-a-packet-filter-to-qdisc\" id=\"markdown-toc-232-add-a-packet-filter-to-qdisc\"\u003e2.3.2 Add a packet filter to qdisc\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#233-generate-traffic-and-test-mirroring\" id=\"markdown-toc-233-generate-traffic-and-test-mirroring\"\u003e2.3.3 Generate traffic and test mirroring\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-clean-up\" id=\"markdown-toc-24-clean-up\"\u003e2.4 Clean up\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-remarks\" id=\"markdown-toc-3-remarks\"\u003e3 Remarks\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-mtu\" id=\"markdown-toc-31-mtu\"\u003e3.1 MTU\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-filter-specific-packets\" id=\"markdown-toc-32-filter-specific-packets\"\u003e3.2 Filter specific packets\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-other-tunneling-alternatives\" id=\"markdown-toc-33-other-tunneling-alternatives\"\u003e3.3 Other tunneling alternatives\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-performance\" id=\"markdown-toc-34-performance\"\u003e3.4 Performance\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#references\" id=\"markdown-toc-references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#appendix-topology-discovery-of-docker-bridge-network\" id=\"markdown-toc-appendix-topology-discovery-of-docker-bridge-network\"\u003eAppendix: Topology discovery of docker \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebridge\u003c/code\u003e network\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003cp\u003eTraffic mirroring (also called port mirroring in some cases) is a technique to send a copy of the\nnetwork traffic to a backend system. It is commonly used by network developers\nand administrators/operators to monitor network traffic or diagnose problems.\nMany systems rely on traffic mirroring function, such as intrusion detection\nsystem (IDS), passive probe, real user monitoring (RUM), traffic replay system,\netc. [1]\u003c/p\u003e\n\n\u003cp\u003eTraditional traffic mirroring solutions are based on hardware switches, and are\nvendor-specific, which often found to be expensive, hard to use and difficult to\nevolve.  With the raising of network virtualization techniques, software-based\nand vendor-agnostic solutions emerge, which are more flexible and easier to\nupgrade.\u003c/p\u003e\n\n\u003cp\u003eThis post first discusses the technical requirements for traffic mirroring, then\ninvestigates a specific solution based on \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc\u003c/code\u003e and tunneling. To make this a\nhands-on guide, we will set up a container-based virtual environment,\nbut it also fits the physical (servers and networks) environments.\u003c/p\u003e\n\n\u003ch1 id=\"1-theory\"\u003e1 Theory\u003c/h1\u003e\n\n\u003ch2 id=\"11-technical-requirements\"\u003e1.1 Technical requirements\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/traffic-mirror-with-tc-and-tunneling/mirror-concept.png\" width=\"50%\" height=\"50%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1.1. Mirroring the ingress traffic of eth0@node1 to a remote node\u003c/p\u003e\n\n\u003cp\u003eTraffic mirroring involves making a copy of some specific traffic, and sending\nthat copy to a destination place for further processing. The destination place\ncould be one of a:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003enetwork device\u003c/strong\u003e: e.g. a physical NIC/port directly connected via cable\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eremote node\u003c/strong\u003e: usually connected via network, as shown in the above.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eFig 1.1 performs mirroring merely on the ingress packets, but\nthe egress could also be mirrored; besides, you could also filter the packets\n(e.g. select TCP SYN packets only) before copying them.\u003c/p\u003e\n\n\u003cp\u003eAnother thing needs to concern: \u003cstrong\u003eshould we copy each interested packet exactly\nas it is, or just part of it?\u003c/strong\u003e Well, this depends on your needs, such as,\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eIf intended to analyze \u003cstrong\u003eL7 message contents\u003c/strong\u003e, e.g. HTTP requests, you need to\ncopy the intact packet,\u003c/li\u003e\n  \u003cli\u003eIf intended to analyze \u003cstrong\u003eL4 flow events\u003c/strong\u003e, e.g. TCP flow stats, you could just\nkeep L2-L4 headers and drop the remaining bytes to save bandwidth and storage\nspace,\u003c/li\u003e\n  \u003cli\u003eIf intended to analyze \u003cstrong\u003eL2 flow events\u003c/strong\u003e, then maybe only L2 header needs to be\npreserved to further reduce bandwidth and storage.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"12-solutions\"\u003e1.2 Solutions\u003c/h2\u003e\n\n\u003cp\u003eWith the above requirements in mind, let’s break them down and try to propose a\nsolution.\u003c/p\u003e\n\n\u003ch3 id=\"capture-filter-and-copy-packets\"\u003eCapture, filter and copy packets\u003c/h3\u003e\n\n\u003cp\u003eThis is the first problem we need to solve. Actually, it depends on the\nnetworking infrastructures we are running on. Such as,\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eWith OVS stack: port mirroring function may be used, see\n\u003ca href=\"/blog/traffic-mirror-with-ovs/\"\u003eTraffic Mirroring with OVS\u003c/a\u003e as an example;\u003c/li\u003e\n  \u003cli\u003eWith kernel stack: tools like \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc\u003c/code\u003e may be suitable;\u003c/li\u003e\n  \u003cli\u003eIf none of the existing tools works for you, you may end up with writing\nyour own mirroring stuffs based on libraries such as libpcap.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"send-copied-packets-to-the-destination\"\u003eSend copied packets to the destination\u003c/h3\u003e\n\n\u003cp\u003eThis is what we care about more in this post. If mirrored\npackets already at hand, how should we correctly send them to the remote node?\u003c/p\u003e\n\n\u003ch4 id=\"challenges\"\u003eChallenges\u003c/h4\u003e\n\n\u003cp\u003e\u003cmark\u003ePut mirrored packets directly on the wire and send out won\u0026#39;t work\u003c/mark\u003e, as both the\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edsc_mac\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_ip\u003c/code\u003e of the packets are destined to the local node rather than\nremote node, which results to,\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eSwitches will not forward them to the remote node; even worse, they may\nforward them back to local node which \u003cstrong\u003eleads to a loop\u003c/strong\u003e;\u003c/li\u003e\n  \u003cli\u003eEven if you struggled to make those packets arrived to the destination node\n(e.g. via direct cables), they may still get dropped before arriving to the\nfinal network device. For example, the final device responsible for\nprocessing those packets is a virtual network device behind a physical NIC;\nin this case, the packets will get dropped at the NIC due to destination IP\n(and MAC) mismatch with the current NIC.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/traffic-mirror-with-tc-and-tunneling/packet-drop.png\" width=\"50%\" height=\"50%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1.2. Mirrored traffic won\u0026#39;t arrive to the destination node if directly them put on the wire\u003c/p\u003e\n\n\u003cp\u003eAlso, you couldn’t send them there by \u003cmark\u003echanging the IP/MAC of mirrored packets to\ndestination node\u0026#39;s\u003c/mark\u003e, as altered packets are not “mirrored packets” anymore -\nwhich will be useless to the receiving side (e.g. IDS).\u003c/p\u003e\n\n\u003cp\u003eThen, how could we send them to the remote node without changing them? Here comes tunneling.\u003c/p\u003e\n\n\u003ch4 id=\"sending-via-tunneling\"\u003eSending via tunneling\u003c/h4\u003e\n\n\u003cp\u003eOne feasible way to send the mirrored traffic to the remote\nnode is: treat each copied packet as an opaque payload, encapsulate\nit into another packet and send to the remote node; at the receiving side,\nextract this mirrored packet by decapsulating the outer header.\u003c/p\u003e\n\n\u003cp\u003eThere are many encapsulation formats to achieve this purpose, such as VxLAN,\nwhich puts the original packet into a new UDP packet, as shown below:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/traffic-mirror-with-tc-and-tunneling/vxlan-header.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1.3. VxLAN header, with the \u0026#34;Original L2 Frame\u0026#34; field stores a mirrored packet. Image from \u003ca href=\"https://medium.com/@ethansmithron/ccie-certification-cost-a-brief-look-at-vxlan-technology-1-e0ffbc37d40d\"\u003e@ethansmithron\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"13-a-specific-solution-tc--vxlan\"\u003e1.3 A specific solution: tc + VxLAN\u003c/h2\u003e\n\n\u003cp\u003eWith all the above analysis, we are now ready to implement a sample traffic\nmirroring system.\u003c/p\u003e\n\n\u003cp\u003eAnd of course, we won’t make everything from scratch: Linux already provides us lots\nof tools that could be used to fulfill this task, including:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc\u003c/code\u003e: capture and filter traffic\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVxLAN\u003c/code\u003e: encapsulate mirrored packets\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"2-practice-tc--vxlan\"\u003e2 Practice: tc + VxLAN\u003c/h1\u003e\n\n\u003ch2 id=\"21-set-up-playground\"\u003e2.1 Set up playground\u003c/h2\u003e\n\n\u003cp\u003eLet’s setup our container based playground.\u003c/p\u003e\n\n\u003ch3 id=\"211-prerequisites\"\u003e2.1.1 Prerequisites\u003c/h3\u003e\n\n\u003cp\u003eMake sure docker is installed before proceeding on. And this post uses docker’s\ndefault settings, which indicates,\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eThere will be a Linux bridge \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker0\u003c/code\u003e created on the host,\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker0\u003c/code\u003e servers as the gateway of the default docker network \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.0.108.0/23\u003c/code\u003e (configured in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/etc/docker/daemon.json\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003eWhen starting a container with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker run\u003c/code\u003e with no special networking\nparameters specified, it will allocate an IP address from \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.0.108.0/23\u003c/code\u003e, and attached\nthe container to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker0\u003c/code\u003e bridge with a veth pair. We will see this in the following.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eNow, we’re ready to march on.\u003c/p\u003e\n\n\u003ch3 id=\"212-create-two-containers\"\u003e2.1.2 Create two containers\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker run \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e ctn-1 alpine:3.11.6 \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e60d\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker run \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e ctn-2 alpine:3.11.6 \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e60d\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker ps | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003ectn\nf0322e340e03        alpine:3.11.6  \u003cspan class=\"s2\"\u003e\u0026#34;sleep 60d\u0026#34;\u003c/span\u003e   .. ctn-2\n44f9a9804e77        alpine:3.11.6  \u003cspan class=\"s2\"\u003e\u0026#34;sleep 60d\u0026#34;\u003c/span\u003e   .. ctn-1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eGet container netns:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ NETNS1\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"si\"\u003e$(\u003c/span\u003edocker inspect \u003cspan class=\"nt\"\u003e--format\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;{{.State.Pid}}\u0026#34;\u003c/span\u003e ctn-1\u003cspan class=\"si\"\u003e)\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ NETNS2\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"si\"\u003e$(\u003c/span\u003edocker inspect \u003cspan class=\"nt\"\u003e--format\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;{{.State.Pid}}\u0026#34;\u003c/span\u003e ctn-2\u003cspan class=\"si\"\u003e)\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS2\u003c/span\u003e\n41243 361417\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIn the following, we will use \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ensenter -t \u0026lt;netns\u0026gt; -n \u0026lt;commands\u0026gt;\u003c/code\u003e to execute\ncommands in container’s network namespace, this is equivalent to execute those\ncommands inside the container.\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip addr\n1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 ...\n    inet 127.0.0.1/8 scope host lo\n258: eth0@if259: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 ...\n    inet 10.0.108.2/23 brd 10.0.109.255 scope global eth0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS2\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip addr\n1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 ...\n    inet 127.0.0.1/8 scope host lo\n273: eth0@if274: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 ...\n    inet 10.0.108.3/23 brd 10.0.109.255 scope global eth0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eNow the network topology:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/traffic-mirror-with-tc-and-tunneling/docker0-topo.png\" width=\"55%\" height=\"55%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2.1. Default network topology of docker containers\u003c/p\u003e\n\n\u003cp\u003eSee \u003ca href=\"#appendix\"\u003eAppendix\u003c/a\u003e if you are curious about how this topology comes to\nplace.\u003c/p\u003e\n\n\u003ch3 id=\"213-connect-containers-with-another-network\"\u003e2.1.3 Connect containers with another network\u003c/h3\u003e\n\n\u003cp\u003eNow,\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eAdd a new Linux bridge \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker1\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eAdd a new NIC to each of the container, and configure an IP for it\u003c/li\u003e\n  \u003cli\u003eConnect containers to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker\u003c/code\u003e via the new NICs.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe topology will be:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/traffic-mirror-with-tc-and-tunneling/add-docker1.png\" width=\"55%\" height=\"55%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2.2. Network topology after adding a bridge and two vNICs to containers\u003c/p\u003e\n\n\u003ch4 id=\"add-bridge\"\u003eAdd bridge\u003c/h4\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink \u003c/span\u003eadd docker1 \u003cspan class=\"nb\"\u003etype \u003c/span\u003ebridge          \u003cspan class=\"c\"\u003e# Add a new Linux bridge `docker1`\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip addr add 10.0.110.1/24 dev docker1    \u003cspan class=\"c\"\u003e# Configure management IP address for this bridge\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003edocker1 up\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch4 id=\"add-nic-to-ctn-1\"\u003eAdd NIC to ctn-1\u003c/h4\u003e\n\n\u003cp\u003eAdd a veth pair, with one end serving as vNIC for \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ectn-1\u003c/code\u003e, and the other end\nattaching to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink \u003c/span\u003eadd veth1 \u003cspan class=\"nb\"\u003etype \u003c/span\u003eveth peer name peer1              \u003cspan class=\"c\"\u003e# Add veth pair\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003epeer1 netns \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e                          \u003cspan class=\"c\"\u003e# Move one end to container\u0026#39;s netns\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003epeer1 name eth1        \u003cspan class=\"c\"\u003e# Rename it to eth1\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip addr add 10.0.110.2/23 dev eth1 \u003cspan class=\"c\"\u003e# Configure IP address\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003eeth1 up\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003eveth1 master docker1                         \u003cspan class=\"c\"\u003e# Attach the host side to bridge docker1\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003eveth1 up\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch4 id=\"add-nic-to-ctn-2\"\u003eAdd NIC to ctn-2\u003c/h4\u003e\n\n\u003cp\u003eSame for \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ectn-2\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink \u003c/span\u003eadd veth2 \u003cspan class=\"nb\"\u003etype \u003c/span\u003eveth peer name peer2\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003epeer2 netns \u003cspan class=\"nv\"\u003e$NETNS2\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS2\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003epeer2 name eth1\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS2\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip addr add 10.0.110.3/23 dev eth1\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS2\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003eeth1 up\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003eveth1 master docker1\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003eveth2 up\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"214-test-reachability\"\u003e2.1.4 Test reachability\u003c/h3\u003e\n\n\u003cp\u003eFirst, take a look at the routing table inside \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ectn-1\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip route\ndefault via 10.0.108.1 dev eth0\n10.0.108.0/23 dev eth0 proto kernel scope \u003cspan class=\"nb\"\u003elink \u003c/span\u003esrc 10.0.108.2\n10.0.110.0/23 dev eth1 proto kernel scope \u003cspan class=\"nb\"\u003elink \u003c/span\u003esrc 10.0.110.2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThe last route entry says that network \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.0.110.0/23\u003c/code\u003e (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker1\u003c/code\u003e) is reachable\nvia \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth1\u003c/code\u003e. Verify it:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ping 10.0.110.3\n64 bytes from 10.0.110.3: \u003cspan class=\"nv\"\u003eicmp_seq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.053 ms\n^C\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ping 10.0.108.3\n64 bytes from 10.0.108.3: \u003cspan class=\"nv\"\u003eicmp_seq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.053 ms\n^C\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/traffic-mirror-with-tc-and-tunneling/ping-path.png\" width=\"55%\" height=\"55%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2.3. Traffic paths when pinging each IP address of ctn-2 from ctn-1\u003c/p\u003e\n\n\u003cp\u003eAs shown in the above picture, we can now reach \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ectn-2\u003c/code\u003e via a distinct path (via\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth1\u003c/code\u003e), which is independent from the default one (via \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0\u003c/code\u003e). We will send\nour mirrored packets with this path in the next.\u003c/p\u003e\n\n\u003ch2 id=\"22-set-up-vxlan-tunnel\"\u003e2.2 Set up VxLAN tunnel\u003c/h2\u003e\n\n\u003cp\u003eNow we are ready to set up a VxLAN tunnel on top of the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth1\u003c/code\u003e NICs between\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ectn-1\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ectn-2\u003c/code\u003e .\u003c/p\u003e\n\n\u003ch3 id=\"221-setup-vxlan-tunnel-on-ctn-1\"\u003e2.2.1 Setup VxLAN tunnel on ctn-1\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip \u003cspan class=\"nb\"\u003elink \u003c/span\u003eadd vxlan0 \u003cspan class=\"nb\"\u003etype \u003c/span\u003evxlan \u003cspan class=\"nb\"\u003eid \u003c/span\u003e100 \u003cspan class=\"nb\"\u003elocal \u003c/span\u003e10.0.110.2 remote 10.0.110.3 dev eth1 dstport 4789\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003evxlan0 up\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip addr\n1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 ...\n258: eth0@if259: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 ...\n    inet 10.0.108.2/23 brd 10.0.109.255 scope global eth0\n9: vxlan0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1450 qdisc ...\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 4e:b6:9d:1e:ac:bd brd ff:ff:ff:ff:ff:ff\n277: eth1@if278: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 ...\n    inet 10.0.110.2/23 scope global eth1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"222-setup-vxlan-tunnel-on-ctn-2\"\u003e2.2.2 Setup VxLAN tunnel on ctn-2\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS2\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip \u003cspan class=\"nb\"\u003elink \u003c/span\u003eadd vxlan0 \u003cspan class=\"nb\"\u003etype \u003c/span\u003evxlan \u003cspan class=\"nb\"\u003eid \u003c/span\u003e100 \u003cspan class=\"nb\"\u003elocal \u003c/span\u003e10.0.110.3 remote 10.0.110.2 dev eth1 dstport 4789\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS2\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003evxlan0 up\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"223-topology\"\u003e2.2.3 Topology\u003c/h3\u003e\n\n\u003cp\u003eNow the topo:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/traffic-mirror-with-tc-and-tunneling/add-vxlan.png\" width=\"55%\" height=\"55%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2.4. Network topology after adding a VxLAN tunnel\u003c/p\u003e\n\n\u003cp\u003eTraffic path between \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evxlan0@ctn-1\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evxlan0@ctn-2\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cmark\u003eThe conceptual path\u003c/mark\u003e: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evxlan0@ctn-1 -\u0026gt; tunnel -\u0026gt; vxlan0@ctn-2\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cmark\u003eThe real path\u003c/mark\u003e: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evxlan0@ctn-1 -\u0026gt; eth1@ctn-1 -\u0026gt; veth1 -\u0026gt; docker1 -\u0026gt; veth2 -\u0026gt; eth1@ctn-2 -\u0026gt; vxlan0@ctn-2\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"23-filter--mirror-traffic-with-tc\"\u003e2.3 Filter \u0026amp; mirror traffic with tc\u003c/h2\u003e\n\n\u003cp\u003eThe Linux kernel ships with an excellent traffic control (tc) subsystem, which\ncan filter and shape the bandwidth of network devices by\nqueuing the packets on the devices first then transmitting them by specific algorithms. These algorithms are\ncalled \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc\u003c/code\u003es (queuing disciplines).\u003c/p\u003e\n\n\u003cp\u003eQdiscs in the kernel [5]:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                Userspace programs\n                     ^\n                     |\n     +---------------+-----------------------------------------+\n     |               Y                                         |\n     |    -------\u0026gt; IP Stack                                    |\n     |   |              |                                      |\n     |   |              Y                                      |\n     |   |  / ----------\u0026gt; Forwarding -\u0026gt;                        |\n     |   ^ /                           |                       |\n     |   |                             |                       |\n     |   ^                             Y          /-qdisc1-\\   |\n     |   |                            Egress     /--qdisc2--\\  |\n  ---\u0026gt;-\u0026gt;Ingress                       Classifier ---qdisc3---- | -\u0026gt;\n     |   Qdisc                                   \\__qdisc4__/  |\n     |                                            \\-qdiscN_/   |\n     +----------------------------------------------------------+\n     Fig 2.5. tc qdisc in the kernel, credit to Jamal Hadi Salim [5]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIt needs to be noted that, \u003cstrong\u003etraffic shaping only works on the egress side\u003c/strong\u003e - as you\ncan only control the transmitting behavior of yourself - ingress bandwidth is\ndetermined by other nodes, which are out of our control for most of the time.\nBut the good news is, there is still a qdisc for ingress, which is used for\nfiltering (and dropping if you like) the ingress packets, as shown in the above\npicture.\u003c/p\u003e\n\n\u003cp\u003eFor more information on Linux’s traffic control subsystem, refer to [5,2] and\n\u003ca href=\"/blog/lartc-qdisc-zh/\"\u003ethis translation\u003c/a\u003e if you can read Chinese.\u003c/p\u003e\n\n\u003cp\u003eFor simplicity, we’ll only mirror the ingress packets in the next.\u003c/p\u003e\n\n\u003ch3 id=\"231-add-the-ingress-qdisc\"\u003e2.3.1 Add the ingress qdisc\u003c/h3\u003e\n\n\u003cp\u003eAdd a qdisc in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0@ctn-1\u003c/code\u003e’s ingress path:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e tc qdisc add dev eth0 handle ffff: ingress\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e tc \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e qdisc \u003cspan class=\"nb\"\u003els \u003c/span\u003edev eth0\nqdisc noqueue 0: root refcnt 2\n Sent 0 bytes 0 pkt \u003cspan class=\"o\"\u003e(\u003c/span\u003edropped 0, overlimits 0 requeues 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n backlog 0b 0p requeues 0\nqdisc ingress ffff: parent ffff:fff1 \u003cspan class=\"nt\"\u003e----------------\u003c/span\u003e\n Sent 4284 bytes 68 pkt \u003cspan class=\"o\"\u003e(\u003c/span\u003edropped 0, overlimits 0 requeues 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n backlog 0b 0p requeues 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAll ingress packets on \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0\u003c/code\u003e will be sent to this qdisc.\u003c/p\u003e\n\n\u003ch3 id=\"232-add-a-packet-filter-to-qdisc\"\u003e2.3.2 Add a packet filter to qdisc\u003c/h3\u003e\n\n\u003cp\u003eAdd a filter to \u003cmark\u003echoose what types of packets to mirror\u003c/mark\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# match all packets, mirrored to vxlan0 device\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e tc filter add dev eth0 parent ffff: protocol all u32 match u32 0 0 action mirred egress mirror dev vxlan0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eCheck the filter:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# -s: show statistics\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# -p: pretty format output for filter info\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e tc \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e filter \u003cspan class=\"nb\"\u003els \u003c/span\u003edev eth0 parent ffff:\nfilter protocol ip pref 49152 u32\nfilter protocol ip pref 49152 u32 fh 800: ht divisor 1\nfilter protocol ip pref 49152 u32 fh 800::800 order 2048 key ht 800 bkt 0 terminal flowid ??? not_in_hw  \u003cspan class=\"o\"\u003e(\u003c/span\u003erule hit 0 success 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  match IP protocol 1 \u003cspan class=\"o\"\u003e(\u003c/span\u003esuccess 0 \u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        action order 1: mirred \u003cspan class=\"o\"\u003e(\u003c/span\u003eEgress Mirror to device vxlan0\u003cspan class=\"o\"\u003e)\u003c/span\u003e pipe\n        index 1 ref 1 \u003cspan class=\"nb\"\u003ebind \u003c/span\u003e1 installed 18 sec used 18 sec\n        Action statistics:\n        Sent 0 bytes 0 pkt \u003cspan class=\"o\"\u003e(\u003c/span\u003edropped 0, overlimits 0 requeues 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        backlog 0b 0p requeues 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/traffic-mirror-with-tc-and-tunneling/add-tc.png\" width=\"55%\" height=\"55%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2.6. Network topology after adding tc qdisc \u0026amp; filter\u003c/p\u003e\n\n\u003ch3 id=\"233-generate-traffic-and-test-mirroring\"\u003e2.3.3 Generate traffic and test mirroring\u003c/h3\u003e\n\n\u003cp\u003eGenerate test traffic: ping \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0@ctn-1\u003c/code\u003e from host,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eping 10.0.108.2\nPING 10.0.108.2 \u003cspan class=\"o\"\u003e(\u003c/span\u003e10.0.108.2\u003cspan class=\"o\"\u003e)\u003c/span\u003e 56\u003cspan class=\"o\"\u003e(\u003c/span\u003e84\u003cspan class=\"o\"\u003e)\u003c/span\u003e bytes of data.\n64 bytes from 10.0.108.2: \u003cspan class=\"nv\"\u003eicmp_seq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.063 ms\n64 bytes from 10.0.108.2: \u003cspan class=\"nv\"\u003eicmp_seq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.053 ms\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eCapture the traffic at \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth1@ctn-2\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS2\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e tcpdump \u003cspan class=\"nt\"\u003e-nn\u003c/span\u003e \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e eth1\n19:03:20.767998 IP 10.0.110.2.35710 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.0.110.3.4789: VXLAN, flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eI] \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x08\u003cspan class=\"o\"\u003e)\u003c/span\u003e, vni 100\nIP 10.0.108.1 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.0.108.2: ICMP \u003cspan class=\"nb\"\u003eecho \u003c/span\u003erequest, \u003cspan class=\"nb\"\u003eid \u003c/span\u003e30513, \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e1, length 64\n\n19:03:21.767482 IP 10.0.110.2.35710 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.0.110.3.4789: VXLAN, flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eI] \u003cspan class=\"o\"\u003e(\u003c/span\u003e0x08\u003cspan class=\"o\"\u003e)\u003c/span\u003e, vni 100\nIP 10.0.108.1 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.0.108.2: ICMP \u003cspan class=\"nb\"\u003eecho \u003c/span\u003erequest, \u003cspan class=\"nb\"\u003eid \u003c/span\u003e30513, \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e2, length 64\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAs the output shows, the ingress traffic has been mirrored to this NIC using\nVxLAN encapsulation. Traffic path:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/traffic-mirror-with-tc-and-tunneling/mirror-traffic-path.png\" width=\"55%\" height=\"55%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2.7. Traffic path of the mirror test\u003c/p\u003e\n\n\u003ch2 id=\"24-clean-up\"\u003e2.4 Clean up\u003c/h2\u003e\n\n\u003cp\u003eRemove filter and qdisc:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e tc filter del dev eth0 ingress\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e tc qdisc del dev eth0 ingress\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eRemove network devices:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS1\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip \u003cspan class=\"nb\"\u003elink \u003c/span\u003edel vxlan0\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$NETNS2\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip \u003cspan class=\"nb\"\u003elink \u003c/span\u003edel vxlan0\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink \u003c/span\u003edel veth1\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink \u003c/span\u003edel veth2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eRemove bridge:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink \u003c/span\u003edel docker1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eRemove containers:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003erm\u003c/span\u003e \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e ctn-1\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003erm\u003c/span\u003e \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e ctn-2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"3-remarks\"\u003e3 Remarks\u003c/h1\u003e\n\n\u003ch2 id=\"31-mtu\"\u003e3.1 MTU\u003c/h2\u003e\n\n\u003cp\u003eEncapsulation will add additional headers to the original packets, so \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth1\u003c/code\u003e\nshould have a large MTU than \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0\u003c/code\u003e. Otherwise, big packets will not\nbe mirrored but dropped.\u003c/p\u003e\n\n\u003ch2 id=\"32-filter-specific-packets\"\u003e3.2 Filter specific packets\u003c/h2\u003e\n\n\u003cp\u003eYou could choose what type of packets to filter, e.g. ICMP packets, UDP packet,\nrefer to [2, 5] for more examples.\u003c/p\u003e\n\n\u003ch2 id=\"33-other-tunneling-alternatives\"\u003e3.3 Other tunneling alternatives\u003c/h2\u003e\n\n\u003cp\u003eAs has been said, VxLAN is only one of the encapsulation formats.\nYou could try other formats, e.g. GRE [2].\u003c/p\u003e\n\n\u003ch2 id=\"34-performance\"\u003e3.4 Performance\u003c/h2\u003e\n\n\u003cp\u003eSoftware encapsulation/decapsulation takes nontrival amount of CPU resource, but\nthis is beyond the scope of this post.\u003c/p\u003e\n\n\u003ch1 id=\"references\"\u003eReferences\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Port_mirroring\"\u003eWikipedia: Port Mirroring\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://medium.com/swlh/traffic-mirroring-with-linux-tc-df4d36116119\"\u003eTraffic Mirroring with Linux Tc\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://developers.redhat.com/blog/2019/05/17/an-introduction-to-linux-virtual-interfaces-tunnels/\"\u003eAn introduction to Linux virtual interfaces: Tunnels\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://developers.redhat.com/blog/2018/10/22/introduction-to-linux-interfaces-for-virtual-networking/\"\u003eIntroduction to Linux interfaces for virtual networking\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://lartc.org/howto/lartc.qdisc.html\"\u003eChapter 9: Queueing Disciplines for Bandwidth Management\u003c/a\u003e, Linux Advanced Routing \u0026amp; Traffic Control HOWTO\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/traffic-mirror-with-ovs/\"\u003eTraffic Mirroring with OVS\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003ca name=\"appendix\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"appendix-topology-discovery-of-docker-bridge-network\"\u003eAppendix: Topology discovery of docker \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebridge\u003c/code\u003e network\u003c/h1\u003e\n\n\u003cp\u003eThis appendix explores how containers connect to bridge \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker0\u003c/code\u003e (how the following picture comes):\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/traffic-mirror-with-tc-and-tunneling/docker0-topo.png\" width=\"50%\" height=\"50%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2.1. Default network topology of docker containers\u003c/p\u003e\n\n\u003cp\u003eFirst, get the detailed information about network device \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker0\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# -d/--details\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u003cspan class=\"nb\"\u003elink \u003c/span\u003eshow docker0\n9: docker0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 02:42:bd:e4:7a:85 brd ff:ff:ff:ff:ff:ff promiscuity 0\n    bridge forward_delay 1500 hello_time 200 max_age 2000 ageing_time 30000 stp_state 0 priority 32768 \n           vlan_filtering 0 vlan_protocol 802.1Q bridge_id 8000.2:42:bd:e4:7a:85 ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ein the above output,\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebridge\u003c/code\u003e indicates this is a  \u003cstrong\u003ebridge\u003c/strong\u003e type device\u003c/li\u003e\n  \u003cli\u003eparameters after \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebridge\u003c/code\u003e (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efoward_delay\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehello_time\u003c/code\u003e, etc) are its configuration parameters\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn the same way, get the defailed information about \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0\u003c/code\u003e inside \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ectn-1\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter-ctn ctn-1 \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u003cspan class=\"nb\"\u003elink \u003c/span\u003eshow dev eth0\n258: eth0@if259: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000\n    veth addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIt says,\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0\u003c/code\u003e is one end of a \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eveth pair\u003c/code\u003e device, with interface ID \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e258\u003c/code\u003e; note that\nthis index is unique within the \u003cstrong\u003enode\u003c/strong\u003e (instead of the container)\u003c/li\u003e\n  \u003cli\u003ethe other end of the veth pair has an interface index \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e259\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFind the device with index \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e259\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink\u003c/span\u003e | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003e259\n259: veth159e062@if258: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThen show the device details:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u003cspan class=\"nb\"\u003elink \u003c/span\u003eshow veth159e062\n259: veth159e062@if258: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 master docker0 ...\n    veth\n    bridge_slave state forwarding priority 32 ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebridge_slave\u003c/code\u003e means this device is attached to a bridge\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emaster docker0\u003c/code\u003e further gives us the bridge name: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker0\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAt this point, we know that \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ectn-1\u003c/code\u003e connects to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker0\u003c/code\u003e with a path\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0 -\u0026gt; veth159e062 -\u0026gt; docker0\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eRepeat the same procedure for \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ectn-2\u003c/code\u003e, we will just get the picture in the above.\u003c/p\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/cloud-native-data-center-networking-notes-zh/\"\u003e\u003cspan\u003e« [笔记]《Cloud Native Data Center Networking》（云原生数据中心网络设计）(O\u0026#39;Reilly 2019)\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/socket-acceleration-with-ebpf-zh/\"\u003e\u003cspan\u003e[译] 利用 ebpf sockmap/redirection 提升 socket 性能（2020） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2021-01-23T00:00:00Z",
  "Author": "Arthur Chiao"
}