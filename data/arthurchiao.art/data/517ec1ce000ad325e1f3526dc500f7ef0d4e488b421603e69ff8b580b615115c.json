{
  "Source": "arthurchiao.art",
  "Title": "Cilium 源码解析：Node 之间的健康探测（health probe）机制",
  "Link": "https://arthurchiao.art/blog/cilium-code-health-probe-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eCilium 源码解析：Node 之间的健康探测（health probe）机制\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2020-12-31 | Last Update 2020-12-31\u003c/p\u003e\n  \n  \u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#tl-dr\" id=\"markdown-toc-tl-dr\"\u003eTL; DR\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-设计\" id=\"markdown-toc-1-设计\"\u003e1 设计\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-full-mesh-健康探测\" id=\"markdown-toc-11-full-mesh-健康探测\"\u003e1.1 Full-mesh 健康探测\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-四种-probe-类型\" id=\"markdown-toc-12-四种-probe-类型\"\u003e1.2 四种 probe 类型\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-probe-results\" id=\"markdown-toc-13-probe-results\"\u003e1.3 Probe results\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#14-cilium-health-ep-cilium-health-endpoint\" id=\"markdown-toc-14-cilium-health-ep-cilium-health-endpoint\"\u003e1.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e: cilium-health endpoint\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#15-小结\" id=\"markdown-toc-15-小结\"\u003e1.5 小结\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-实现\" id=\"markdown-toc-2-实现\"\u003e2 实现\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-初始化流程\" id=\"markdown-toc-21-初始化流程\"\u003e2.1 初始化流程\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-inithealth---launch---runserver---serverserve\" id=\"markdown-toc-22-inithealth---launch---runserver---serverserve\"\u003e2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einitHealth() -\u0026gt; Launch() -\u0026gt; runServer() -\u0026gt; server.Serve()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-runserver\" id=\"markdown-toc-23-runserver\"\u003e2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erunServer()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-runactiveservices\" id=\"markdown-toc-24-runactiveservices\"\u003e2.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erunActiveServices()\u003c/code\u003e\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#代码\" id=\"markdown-toc-代码\"\u003e代码\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#25-创建-cilium-health-ep\" id=\"markdown-toc-25-创建-cilium-health-ep\"\u003e2.5 创建 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-cli-cheat-sheet\" id=\"markdown-toc-3-cli-cheat-sheet\"\u003e3 CLI cheat sheet\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-check-cilium-agent-status\" id=\"markdown-toc-31-check-cilium-agent-status\"\u003e3.1 Check cilium agent status\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-check-connectivity-results\" id=\"markdown-toc-32-check-connectivity-results\"\u003e3.2 Check connectivity results\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-check-health-info-in-ctnat-tables\" id=\"markdown-toc-33-check-health-info-in-ctnat-tables\"\u003e3.3 Check health info in CT/NAT tables\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eThis post also provides an \u003ca href=\"/blog/cilium-code-health-probe/\"\u003eEnglish version\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis post belongs to the\n\u003ca href=\"/blog/cilium-code-series/\"\u003eCilium Code Walk Through Series\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e排查问题时研究了一下 Cilium health probe 相关的代码，本文略作整理，仅供参考。代码基于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1.8.4\u003c/code\u003e。\u003c/p\u003e\n\n\u003ch1 id=\"tl-dr\"\u003eTL; DR\u003c/h1\u003e\n\n\u003cp\u003e流程图：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-code-health-probe/entire-call-stack.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e调用栈：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003erunDaemon                                       // daemon/cmd/daemon_main.go\n  |-initHealth                                  // daemon/cmd/health.go\n  |  |-health.Launch                             // cilium-health/launch/launcher.go\n  |  |  |-ch.server \u003cspan class=\"o\"\u003e=\u003c/span\u003e server.NewServer\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n  |  |  |             |-newServer\n  |  |  |                |-api :\u003cspan class=\"o\"\u003e=\u003c/span\u003e restapi.NewCiliumHealthAPI\n  |  |  |                |-srv :\u003cspan class=\"o\"\u003e=\u003c/span\u003e healthApi.NewServer\u003cspan class=\"o\"\u003e(\u003c/span\u003eapi\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  |  |  |-ch.client \u003cspan class=\"o\"\u003e=\u003c/span\u003e client.NewDefaultClient\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n  |  |  |-go runServer\u003cspan class=\"o\"\u003e()\u003c/span\u003e                         // cilium-health/launch/launcher.go\n  |  |      |-go ch.server.Serve\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n  |  |      |     |-for \u003cspan class=\"o\"\u003e{\u003c/span\u003e go tcpServer.Serve\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n  |  |      |     |-go runActiveServices\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n  |  |      |           |-s.FetchStatusResponse\n  |  |      |           |   |-getAllNodes\n  |  |      |           |   | |-s.Daemon.GetClusterNodes\n  |  |      |           |   |    |-\u003cspan class=\"s2\"\u003e\u0026#34;GET /cluster/nodes\u0026#34;\u003c/span\u003e to cilium-agent API\n  |  |      |           |   |-prober.Run\n  |  |      |           |   |   |-p.Pinger.Run\n  |  |      |           |   |   |-p.runHTTPProbe\n  |  |      |           |   |        |-for node \u003cspan class=\"k\"\u003ein \u003c/span\u003enodes:\n  |  |      |           |   |            \u003cspan class=\"k\"\u003efor \u003c/span\u003eip \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003enodeIP, healthIP]:\n  |  |      |           |   |              \u003cspan class=\"k\"\u003efor \u003c/span\u003eport \u003cspan class=\"k\"\u003ein \u003c/span\u003eports:\n  |  |      |           |   |                httpProbe\u003cspan class=\"o\"\u003e(\u003c/span\u003enode, ip, port\u003cspan class=\"o\"\u003e)\u003c/span\u003e // \u003cspan class=\"nv\"\u003eport\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e4240\n  |  |      |           |   |-updateCluster\u003cspan class=\"o\"\u003e(\u003c/span\u003eprober.Results\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  |  |      |           |-s.getNodes\n  |  |      |           |-prober.OnIdle \u003cspan class=\"o\"\u003e=\u003c/span\u003e func\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  |  |      |           |   updateCluster\u003cspan class=\"o\"\u003e(\u003c/span\u003eprober.Results\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  |  |      |           |   nodesAdded, nodesRemoved :\u003cspan class=\"o\"\u003e=\u003c/span\u003e getNodes\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n  |  |      |           |     |-s.Daemon.GetClusterNodes\n  |  |      |           |        |-\u003cspan class=\"s2\"\u003e\u0026#34;GET /cluster/nodes\u0026#34;\u003c/span\u003e to cilium-agent API\n  |  |      |           |   prober.setNodes\u003cspan class=\"o\"\u003e(\u003c/span\u003enodesAdded, nodesRemoved\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  |  |      |           | \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n  |  |      |           |-prober.RunLoop\n  |  |      |           |-s.Server.Serve\u003cspan class=\"o\"\u003e()\u003c/span\u003e  // api/v1/health/server/server.go\n  |  |      |              |-s.Listen\u003cspan class=\"o\"\u003e()\u003c/span\u003e     // listen at unix://xxx/health.sock\n  |  |      |              |-if unix sock:\n  |  |      |                  |-domainSocket.Serve\u003cspan class=\"o\"\u003e(\u003c/span\u003el\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  |  |      |-for \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  |  |          ch.client.Restapi.GetHealthz\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n  |  |          ch.setStatus\u003cspan class=\"o\"\u003e(\u003c/span\u003estatus\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  |  |        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n  |  |\n  |  |-pidfile.Remove\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/var/run/cilium/state/health-endpoint.pid\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  |  |-UpdateController\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;cilium-health-ep\u0026#34;\u003c/span\u003e, func\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  |      DoFunc: func\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  |          LaunchAsEndpoint \n  |          RunInterval: 60 \u003cspan class=\"k\"\u003e*\u003c/span\u003e time.Second,\n  |      \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n  |    \u003cspan class=\"o\"\u003e})\u003c/span\u003e\n  |\n  |-startAgentHealthHTTPService                 // daemon/cmd/agenthealth.go\n      |- mux.Handle\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/healthz\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"1-设计\"\u003e1 设计\u003c/h1\u003e\n\n\u003ch2 id=\"11-full-mesh-健康探测\"\u003e1.1 Full-mesh 健康探测\u003c/h2\u003e\n\n\u003cp\u003e在 Cilium 的设计中，\u003cstrong\u003e每个 node 都可以主动探测（probe）其他 node 的健康状态\u003c/strong\u003e，\n这样它们就能拿到第一手的全局健康状态信息（global health status of all nodes）。\u003c/p\u003e\n\n\u003cp\u003e默认情况下，\u003cstrong\u003e任何两个 node 之间都会互相 probe\u003c/strong\u003e，因此最终形成一张\nfull-mesh probe 网络，如下图所示：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-code-health-probe/full-mesh.png\" width=\"40%\" height=\"40%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Full-mesh health probe among Cilium nodes\u003c/p\u003e\n\n\u003cp\u003eProbe 行为由 cilium-agent 的两个开关控制，默认都是开的，\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eenable-health-checking\u003c/code\u003e：probe \u003cstrong\u003e其他 node\u003c/strong\u003e的健康状态。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eenable-endpoint-health-checking\u003c/code\u003e：probe \u003cstrong\u003e其他 node 上的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e\u003c/strong\u003e\n的健康状态。稍后会介绍 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e 是什么。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"12-四种-probe-类型\"\u003e1.2 四种 probe 类型\u003c/h2\u003e\n\n\u003cp\u003e从网络层级的角度，probe 分两个维度：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e三层（L3）探测：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eping\u003c/code\u003e（ICMP）\u003c/li\u003e\n  \u003cli\u003e七层（L7）探测：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGET\u003c/code\u003e API。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e再结合以上两个开关，总共就有\u003cstrong\u003e四种 probe\u003c/strong\u003e：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eenable-health-checking=true\u003c/code\u003e：\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003eICMP probe (L3)：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eping \u0026lt;NodeIP\u0026gt;\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003eHTTP probe (L7)：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGET http://\u0026lt;NodeIP\u0026gt;:4240/hello\u003c/code\u003e\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eenable-endpoint-health-checking=true\u003c/code\u003e：\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003eICMP probe (L3)：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eping \u0026lt;HealthIP\u0026gt;\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003eHTTP probe (L7)：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGET http://\u0026lt;HealthIP\u0026gt;:4240/hello\u003c/code\u003e\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"13-probe-results\"\u003e1.3 Probe results\u003c/h2\u003e\n\n\u003cp\u003eProbe 结果会缓存到 cilium-agent 中，可以通过下面命令查看（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#\u003c/code\u003e 开头的注释是后加的）：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode1\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium-health status\nProbe \u003cspan class=\"nb\"\u003etime\u003c/span\u003e:   2020-12-29T15:17:02Z\nNodes:\n  cluster1/node1 \u003cspan class=\"o\"\u003e(\u003c/span\u003elocalhost\u003cspan class=\"o\"\u003e)\u003c/span\u003e:\n    Host connectivity to 10.5.6.60:        \u003cspan class=\"c\"\u003e# \u0026lt;-- NodeIP\u003c/span\u003e\n      ICMP to stack:   OK, \u003cspan class=\"nv\"\u003eRTT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e9.557967ms\n      HTTP to agent:   OK, \u003cspan class=\"nv\"\u003eRTT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e405.072µs\n    Endpoint connectivity to 10.6.2.213:   \u003cspan class=\"c\"\u003e# \u0026lt;-- HealthIP\u003c/span\u003e\n      ICMP to stack:   OK, \u003cspan class=\"nv\"\u003eRTT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e9.951333ms\n      HTTP to agent:   OK, \u003cspan class=\"nv\"\u003eRTT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e468.645µs\n  cluster1/node2:\n    ...\n  cluster2/node100:\n    Host connectivity to 10.6.6.100:        \u003cspan class=\"c\"\u003e# \u0026lt;-- NodeIP\u003c/span\u003e\n      ICMP to stack:   OK, \u003cspan class=\"nv\"\u003eRTT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e10.164048ms\n      HTTP to agent:   OK, \u003cspan class=\"nv\"\u003eRTT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e694.196µs\n    Endpoint connectivity to 10.22.1.3:     \u003cspan class=\"c\"\u003e# \u0026lt;-- HealthIP\u003c/span\u003e\n      ICMP to stack:   OK, \u003cspan class=\"nv\"\u003eRTT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e11.282117ms\n      HTTP to agent:   OK, \u003cspan class=\"nv\"\u003eRTT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e765.092µs\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果\u003ca href=\"/blog/cilium-clustermesh/\"\u003e启用了 clustermesh\u003c/a\u003e，那\n\u003cstrong\u003ecilium-agent 也会对其他集群的 node 进行探测\u003c/strong\u003e，所以我们看到上面的输出中有其他集群的 node 信息。\u003c/p\u003e\n\n\u003ch2 id=\"14-cilium-health-ep-cilium-health-endpoint\"\u003e1.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e: cilium-health endpoint\u003c/h2\u003e\n\n\u003cp\u003e简单来说，cilium-agent 会为每个 Pod 创建一个它所谓的 Endpoint 对象。而在这里，\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e 是个\u003cstrong\u003e特殊的 endpoint\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium endpoint list\nENDPOINT   POLICY \u003cspan class=\"o\"\u003e(\u003c/span\u003eingress\u003cspan class=\"o\"\u003e)\u003c/span\u003e   POLICY \u003cspan class=\"o\"\u003e(\u003c/span\u003eegress\u003cspan class=\"o\"\u003e)\u003c/span\u003e   IDENTITY   LABELS \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003esource\u003c/span\u003e:key[\u003cspan class=\"o\"\u003e=\u003c/span\u003evalue]\u003cspan class=\"o\"\u003e)\u003c/span\u003e  IPv4         STATUS\n...\n2399       Disabled           Disabled          4          reserved:health              10.6.2.213   ready\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e它并不是一个 Pod，但可以看到，它有自己独立的\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eEndpoint ID：随机分配，每台节点内唯一。\u003c/li\u003e\n  \u003cli\u003eIdentity：\u003cstrong\u003ereserved identity\u003c/strong\u003e，固定值 4，也就是说\u003cstrong\u003e每台节点上的 cilium-health identity 都是 4\u003c/strong\u003e。\u003c/li\u003e\n  \u003cli\u003eIP address：cilium-agent 随机分配。\u003c/li\u003e\n  \u003cli\u003eVeth pair：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elxc_health@\u0026lt;peer\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e也可以用下面的方式查看 cilium-health 使用的 IP 地址：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium status \u003cspan class=\"nt\"\u003e--all-addresses\u003c/span\u003e | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003ehealth\n  10.6.2.213 \u003cspan class=\"o\"\u003e(\u003c/span\u003ehealth\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"15-小结\"\u003e1.5 小结\u003c/h2\u003e\n\n\u003cp\u003e由以上内容可知，Cilium health probe 的整体设计还是非常简单直接的，并没有很高深的东西。\u003c/p\u003e\n\n\u003cp\u003e但到了实现层面，就要复杂很多了。\u003c/p\u003e\n\n\u003ch1 id=\"2-实现\"\u003e2 实现\u003c/h1\u003e\n\n\u003cp\u003e完整的流程图和调用关系见本文开篇。接下来分步介绍这个过程。\u003c/p\u003e\n\n\u003ch2 id=\"21-初始化流程\"\u003e2.1 初始化流程\u003c/h2\u003e\n\n\u003cp\u003e从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-agent\u003c/code\u003e（daemon）初始化代码开始。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-code-health-probe/init-highlevel.png\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e大致步骤：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einitHealth()\u003c/code\u003e 完成 prober 的初始化工作，\u003cstrong\u003e大部分工作都在这里面完成\u003c/strong\u003e。\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e初始化 prober，\u003cstrong\u003e顺序对其他所有 node 执行 probe\u003c/strong\u003e。\u003c/li\u003e\n      \u003cli\u003e\u003cstrong\u003e创建 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e，这一步不依赖上面 probe 的结果\u003c/strong\u003e，二者是独立进行的。\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e注册 cilium-agent \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/healthz\u003c/code\u003e API 并开始提供服务。\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e这个 API 用于\u003cstrong\u003e检测 cilium-agent 是否正常\u003c/strong\u003e。\u003c/li\u003e\n      \u003cli\u003e\u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium status --brief\u003c/code\u003e 返回的就是这个 API 的结果\u003c/strong\u003e。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e但这里要注意，以上两个步骤是异步进行的，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einitHealth()\u003c/code\u003e 中会创建很多 goroutine 异步执行。\n也就是说，cilium-agent 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/healthz\u003c/code\u003e 很快会进入 ready 状态，而并不会等待 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einitHealth()\u003c/code\u003e\n\u003cstrong\u003e对所有 node 执行完 health probe\u003c/strong\u003e，因为后者可能需要几秒钟、几分钟，甚至几个小时。\u003c/p\u003e\n\n\u003cp\u003e大部分工作都在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einitHealth()\u003c/code\u003e 中完成，接下来看这里的实现。\u003c/p\u003e\n\n\u003ch2 id=\"22-inithealth---launch---runserver---serverserve\"\u003e2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einitHealth() -\u0026gt; Launch() -\u0026gt; runServer() -\u0026gt; server.Serve()\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einitHealth()\u003c/code\u003e 做的事情：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehealth.Launch()\u003c/code\u003e，后者\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e初始化 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ech.server\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e初始化 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ech.client\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ego ch.runServer()\u003c/code\u003e，\u003cstrong\u003e接下来的大部分逻辑，都在这里面\u003c/strong\u003e。\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003e清理之前的 cilium-health pid 文件（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/var/run/cilium/state/health-endpoint.pid\u003c/code\u003e）\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e创建一个名为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e 的 controller（定时任务），这里面会\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e创建 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health\u003c/code\u003e endpoint，\u003c/li\u003e\n      \u003cli\u003e定期将该 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health\u003c/code\u003e endpoint 状态同步到 K8s。\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e接下来看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ego ch.runServer()\u003c/code\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"23-runserver\"\u003e2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erunServer()\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-code-health-probe/runServer.png\" width=\"50%\" height=\"50%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e代码见 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health/launch/launcher.go\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e逻辑：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e等待 cilium-agent 启动成功\u003c/strong\u003e（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGET /healthz\u003c/code\u003e 返回成功），然后转步骤 2\u003c/li\u003e\n  \u003cli\u003e删除之前的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/var/run/cilium/health.sock\u003c/code\u003e 文件。\u003cstrong\u003e本地执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health\u003c/code\u003e 命令时会用到这个 socket 文件\u003c/strong\u003e。\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ego ch.server.Serve()\u003c/code\u003e：\u003cstrong\u003e创建一个 goroutine，在里面启动 cilium-health API server\u003c/strong\u003e，主逻辑在这里面，包括：\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e创建 TCP servers\u003c/li\u003e\n      \u003cli\u003e运行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erunActiveServices()\u003c/code\u003e，这里面会创建 prober 和 unix servers，其中\nunix server 在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eListen()\u003c/code\u003e 时会\u003cstrong\u003e创建新的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehealth.sock\u003c/code\u003e 文件\u003c/strong\u003e。\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e等待，直到新的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehealth.sock\u003c/code\u003e 文件 ready，然后给其设置合适的文件权限\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e以 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estatusProbeInterval\u003c/code\u003e 的间隔，定时向 cilium-agent 发起 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGET /healthz\u003c/code\u003e，并将结果保存\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ech.server.Serve()\u003c/code\u003e 实现：\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// pkg/health/server/server.go\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// Serve spins up the following goroutines:\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// * TCP API Server: Responders to the health API \u0026#34;/hello\u0026#34; message, one per path\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// * Prober: Periodically run pings across the cluster, update server\u0026#39;s connectivity status cache.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// * Unix API Server: Handle all health API requests over a unix socket.\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eServer\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eServe\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etcpServers\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esrv\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etcpServers\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eerrors\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"n\"\u003esrv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eServe\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eerrors\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erunActiveServices\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"n\"\u003eerrors\u003c/span\u003e \u003cspan class=\"c\"\u003e// Block for the first error, then return.\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里面最重要的是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erunActiveServices()\u003c/code\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"24-runactiveservices\"\u003e2.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erunActiveServices()\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-code-health-probe/runActiveServices.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e主要步骤：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFetchStatusResponse()\u003c/code\u003e，这会用一个三层 for 循环对所有 node 顺序进行\nprobe；\u003c/li\u003e\n  \u003cli\u003e设置 prober \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOnIdle()\u003c/code\u003e handler，然后启动 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eprober.RunLoop()\u003c/code\u003e，定期更新 node 集\n合；\u003c/li\u003e\n  \u003cli\u003e执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003es.Server.Seve()\u003c/code\u003e，开始接收 Unix、HTTP、HTTPS 请求。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e注意其中的第一步，\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e对所有 node 的 probe 操作是顺序进行的。\u003c/li\u003e\n  \u003cli\u003e每次 probe 如果不通，需要过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e30s\u003c/code\u003e 超时退出。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e因此，\u003cstrong\u003e如果有大量 node 不通，这里就会花费大量时间\u003c/strong\u003e，导致后面的 UNIX server 迟\n迟无法启动，具体表现就是宿主机执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health\u003c/code\u003e 命令报以下错误：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium-health status\nError: Cannot get status: Get \u003cspan class=\"s2\"\u003e\u0026#34;http://%2Fvar%2Frun%2Fcilium%2Fhealth.sock/v1beta/status\u0026#34;\u003c/span\u003e: dial unix /var/run/cilium/health.sock: connect: no such file or directory\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e因为这个文件是在第三步 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003es.Server.Serve() -\u0026gt; Listen()\u003c/code\u003e 里面才创建的。\u003c/p\u003e\n\n\u003ch3 id=\"代码\"\u003e代码\u003c/h3\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// pkg/health/server/server.go\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// Run services that are actively probing other hosts and endpoints over ICMP and HTTP,\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// and hosting the health admin API on a local Unix socket.\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eServer\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003erunActiveServices\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFetchStatusResponse\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003enodesAdded\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetNodes\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprober\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003enewProber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enodesAdded\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprober\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eOnIdle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c\"\u003e// Fetch results and update set of nodes to probe every ProbeInterval\u003c/span\u003e\n        \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eupdateCluster\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprober\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetResults\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003enodesAdded\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enodesRemoved\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetNodes\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003elog\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWithError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;unable to get cluster nodes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eprober\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetNodes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enodesAdded\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enodesRemoved\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprober\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRunLoop\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eServer\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eServe\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后一行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003es.Server.Serve()\u003c/code\u003e 调用到下面这里：\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// api/v1/server/server.go\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// Serve the api\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eServer\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eServe\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehasListeners\u003c/span\u003e\n        \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eListen\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"c\"\u003e// net.Listen(s.SocketPath) -\u0026gt; create sock file\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehandler\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"c\"\u003e// set default handler, if none is set\u003c/span\u003e\n        \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSetHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eapi\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eServe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"no\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehasScheme\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eschemeUnix\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c\"\u003e// \u0026#34;Serving cilium at unix://%s\u0026#34;, s.SocketPath\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eListener\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003edomainSocket\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eServe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edomainSocketL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehasScheme\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eschemeHTTP\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehasScheme\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eschemeHTTPS\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"25-创建-cilium-health-ep\"\u003e2.5 创建 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-code-health-probe/launch-cilium-health-ep.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e如上图所示，创建 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e 过程和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e2.2~2.4\u003c/code\u003e 是异步的（从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ego\nrunServer()\u003c/code\u003e 开始就是异步了），因此不用等待后者的完成。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e 也是一个 Endpoint，因此会经历：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e分配 IP\u003c/li\u003e\n  \u003cli\u003e创建 netns\u003c/li\u003e\n  \u003cli\u003e创建 veth pair（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elxc_health\u003c/code\u003e）\u003c/li\u003e\n  \u003cli\u003e创建 Endpoint\u003c/li\u003e\n  \u003cli\u003e分配 Identity：注意 \u003cstrong\u003eCilium 里面都是先创建 Endpoint，再为 Endpoint 分配 Identity\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003eRegenerate BPF\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e等等过程，代码见 cilium-health/launch/endpoint.go。\u003c/p\u003e\n\n\u003ch1 id=\"3-cli-cheat-sheet\"\u003e3 CLI cheat sheet\u003c/h1\u003e\n\n\u003cp\u003e一些相关的命令。\u003c/p\u003e\n\n\u003ch2 id=\"31-check-cilium-agent-status\"\u003e3.1 Check cilium agent status\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium status --brief\u003c/code\u003e: brief output, which internally performs \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026#34;GET /healthz\u0026#34;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium status\u003c/code\u003e: normal output\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium status --verbose\u003c/code\u003e: verbose output\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"32-check-connectivity-results\"\u003e3.2 Check connectivity results\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium-health status\n...\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium status \u003cspan class=\"nt\"\u003e--verbose\u003c/span\u003e\n...\nCluster health:                          265/268 reachable   \u003cspan class=\"o\"\u003e(\u003c/span\u003e2020-12-31T09:00:03Z\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  Name                         IP                Node          Endpoints\n  cluster1/node1 \u003cspan class=\"o\"\u003e(\u003c/span\u003elocalhost\u003cspan class=\"o\"\u003e)\u003c/span\u003e   10.5.6.60         reachable     reachable\n  cluster2/node2               10.6.9.132        reachable     reachable\n  ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"33-check-health-info-in-ctnat-tables\"\u003e3.3 Check health info in CT/NAT tables\u003c/h2\u003e\n\n\u003cp\u003eICMP records in Conntrack (CT) table and NAT table:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium bpf ct list global | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003eICMP |head \u003cspan class=\"nt\"\u003e-n4\u003c/span\u003e\nICMP IN 10.4.9.12:0 -\u0026gt; 10.5.8.4:518 \u003cspan class=\"nv\"\u003eexpires\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1987899 \u003cspan class=\"nv\"\u003eRxPackets\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003eRxBytes\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e50 \u003cspan class=\"nv\"\u003eRxFlagsSeen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x00 \u003cspan class=\"nv\"\u003eLastRxReport\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1987839 \u003cspan class=\"nv\"\u003eTxPackets\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003eTxBytes\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e50 \u003cspan class=\"nv\"\u003eTxFlagsSeen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x00 \u003cspan class=\"nv\"\u003eLastTxReport\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1987839 \u003cspan class=\"nv\"\u003eFlags\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x0000 \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"nv\"\u003eRevNAT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003eSourceSecurityID\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2 \u003cspan class=\"nv\"\u003eIfIndex\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\nICMP OUT 10.5.2.101:47153 -\u0026gt; 10.4.9.11:0 \u003cspan class=\"nv\"\u003eexpires\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1987951 \u003cspan class=\"nv\"\u003eRxPackets\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003eRxBytes\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003eRxFlagsSeen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x00 \u003cspan class=\"nv\"\u003eLastRxReport\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003eTxPackets\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003eTxBytes\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e50 \u003cspan class=\"nv\"\u003eTxFlagsSeen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x00 \u003cspan class=\"nv\"\u003eLastTxReport\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1987891 \u003cspan class=\"nv\"\u003eFlags\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x0000 \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"nv\"\u003eRevNAT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003eSourceSecurityID\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003eIfIndex\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium bpf nat list | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003eICMP |head \u003cspan class=\"nt\"\u003e-n4\u003c/span\u003e\nICMP OUT 10.5.2.101:65204 -\u0026gt; 10.4.6.9:0 XLATE_SRC 10.5.2.101:65204 \u003cspan class=\"nv\"\u003eCreated\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1987884sec \u003cspan class=\"nv\"\u003eHostLocal\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1\nICMP IN 10.4.4.11:0 -\u0026gt; 10.5.2.101:39843 XLATE_DST 10.5.2.101:39843 \u003cspan class=\"nv\"\u003eCreated\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1987884sec \u003cspan class=\"nv\"\u003eHostLocal\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/packet-mark-in-a-cloud-native-world-zh/\"\u003e\u003cspan\u003e« [译] 云原生世界中的数据包标记（packet mark）(LPC, 2020)\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/cilium-code-health-probe/\"\u003e\u003cspan\u003eCilium Code Walk Through: Node \u0026amp; Endpoint Health Probe »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2020-12-31T00:00:00Z",
  "Author": "Arthur Chiao"
}