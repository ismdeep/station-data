{
  "Source": "arthurchiao.art",
  "Title": "bcc/ebpf 安装及示例（2019）",
  "Link": "https://arthurchiao.art/blog/bcc-ebpf-tutorial-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003ebcc/ebpf 安装及示例（2019）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2019-01-27 | Last Update \u003c/p\u003e\n  \n  \u003cp\u003eeBPF 是 Linux 内核近几年最为引人注目的特性之一，通过一个内核内置的字节码虚拟机，完\n成数据包过滤、调用栈跟踪、耗时统计、热点分析等等高级功能，是 Linux 系统和 Linux 应用\n的功能和性能分析利器。较为完整的 eBPF 介绍可参见\u003ca href=\"A thorough introduction to\neBPF\"\u003e这篇\u003c/a\u003e内核文档。\u003c/p\u003e\n\n\u003cp\u003eeBPF 程序使用 C 语言的一个子集（restricted C）编写，然后通过 LLVM 编译成字节码注入到\n内核执行。\u003ca href=\"https://github.com/iovisor/bcc\"\u003ebcc\u003c/a\u003e是 eBPF 的一个外围工具集，使得 \u003cstrong\u003e“编\n写 BPF 代码-编译成字节码-注入内核-获取结果-展示”\u003c/strong\u003e 整个过程更加便捷。\u003c/p\u003e\n\n\u003cp\u003e下面我们将搭建一个基础环境，通过几个例子展示如何编写 bcc/eBPF 程序，感受它们的强大\n功能。\u003c/p\u003e\n\n\u003ch2 id=\"1-准备工作\"\u003e1 准备工作\u003c/h2\u003e\n\n\u003cp\u003e环境需要以下几方面满足要求：内核、docker、bcc。\u003c/p\u003e\n\n\u003ch3 id=\"11-内核版本\"\u003e1.1 内核版本\u003c/h3\u003e\n\n\u003cp\u003eeBPF 需要较新的 Linux kernel 支持。 \n因此首先要确保你的内核版本足够新，至少要在 4.1 以上，\u003cstrong\u003e最好在 4.10 以上\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003euname\u003c/span\u003e \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e\n4.10.13-1.el7.elrepo.x86_64\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"12-docker\"\u003e1.2 docker\u003c/h3\u003e\n\n\u003cp\u003e本文的示例需要使用 Docker，版本没有明确的限制，较新即可。\u003c/p\u003e\n\n\u003ch3 id=\"13-bcc-工具\"\u003e1.3 bcc 工具\u003c/h3\u003e\n\n\u003cp\u003ebcc 是 python 封装的 eBPF 外围工具集，可以大大方面 BPF 程序的开发。\u003c/p\u003e\n\n\u003cp\u003e为方便使用，我们将把 bcc 打包成一个 docker 镜像，以容器的方式使用 bcc。打包镜像的过程\n见附录 1，这里不再赘述。\u003c/p\u003e\n\n\u003cp\u003e下载 bcc 代码：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit clone https://github.com/iovisor/bcc.git\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后启动 bcc 容器：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003ebcc\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003edocker run \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e bcc \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e--privileged\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e:/bcc \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e /lib/modules:/lib/modules:ro \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e /usr/src:/usr/src:ro \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e /boot:/boot:ro \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e /sys/kernel/debug:/sys/kernel/debug \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    bcc:0.0.1 \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e3600d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e注意这里除了 bcc 代码之外，还将宿主机的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/lib/\u003c/code\u003e、\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/usr/src\u003c/code\u003e、\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/boot\u003c/code\u003e、\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/kernel/debug\u003c/code\u003e 等目录 mount 到容器，这些目录包含了内核源码、内核符号表、链接库\n等 eBPF 程序需要用到的东西。\u003c/p\u003e\n\n\u003ch3 id=\"13-测试-bcc-工作正常\"\u003e1.3 测试 bcc 工作正常\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e bcc bash\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在容器内部执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efuncslower.py\u003c/code\u003e 脚本，捕获内核收包函数 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_rx_action\u003c/code\u003e 耗时大于\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e100us\u003c/code\u003e 的情况，并打印内核调用栈。注意，视机器的网络和工作负载状况，这里的打印可\n能没有，也可能会非常多。建议先设置一个比较大的阈值（例如\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-u 200\u003c/code\u003e），如果没有输出\n，再将阈值逐步改小。\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@container \u003cspan class=\"c\"\u003e# cd /bcc/tools\u003c/span\u003e\nroot@container \u003cspan class=\"c\"\u003e# ./funcslower.py -u 100 -f -K net_rx_action\u003c/span\u003e\nTracing \u003cspan class=\"k\"\u003efunction \u003c/span\u003ecalls slower than 100 us... Ctrl+C to quit.\nCOMM           PID    LAT\u003cspan class=\"o\"\u003e(\u003c/span\u003eus\u003cspan class=\"o\"\u003e)\u003c/span\u003e             RVAL FUNC\nswapper/1      0       158.21                0 net_rx_action\n    kretprobe_trampoline\n    irq_exit\n    do_IRQ\n    ret_from_intr\n    native_safe_halt\n    __cpuidle_text_start\n    arch_cpu_idle\n    default_idle_call\n    do_idle\n    cpu_startup_entry\n    start_secondary\n    verify_cpu\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e调节\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-u\u003c/code\u003e 大小，如果有类似以上输出，就说明我们的 bcc/eBPF 环境可以用了。\u003c/p\u003e\n\n\u003cp\u003e具体地，上面的输出表示，这次 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_rx_action()\u003c/code\u003e花费了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e158us\u003c/code\u003e，是从内核进程\nswapper/1 调用过来，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/1\u003c/code\u003e 表示进程在 CPU 1 上，并且打印出当时的内核调用栈。通过这个简\n单的例子，我们就隐约感受到了 bcc/eBPF 的强大。\u003c/p\u003e\n\n\u003ch2 id=\"2-bccebpf-程序示例\"\u003e2 bcc/eBPF 程序示例\u003c/h2\u003e\n\n\u003cp\u003e接下来我们通过编写一个简单的 eBPF 程序 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esimple-biolatency\u003c/code\u003e 来展示 bcc/eBPF 程序是如\n何构成及如何工作的。\u003c/p\u003e\n\n\u003cp\u003e我们的程序会监听\u003cstrong\u003e块设备 IO 相关的系统调用\u003c/strong\u003e，统计 IO 操作的耗时（I/O latency），\n并打印出统计直方图。程序大致分为三个部分：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e核心 eBPF 代码 (hook)，C 编写，会被编译成字节码注入到内核，完成事件的采集和计时\u003c/li\u003e\n  \u003cli\u003e外围 Python 代码，完成 eBPF 代码的编译和注入\u003c/li\u003e\n  \u003cli\u003e命令行 Python 代码，完成命令行参数解析、运行程序、打印最终结果等工作\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e为方便起见，以上全部代码都放到同一个文件 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esimple-biolatency.py\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e整个程序需要如下几个依赖库：\u003c/p\u003e\n\n\u003cdiv class=\"language-python highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003e__future__\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eprint_function\u003c/span\u003e\n\n\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003esys\u003c/span\u003e\n\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003etime\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003esleep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estrftime\u003c/span\u003e\n\n\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003ebcc\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"21-bpf-程序\"\u003e2.1 BPF 程序\u003c/h3\u003e\n\n\u003cp\u003e首先看 BPF 程序。这里主要做三件事情：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e初始化一个 BPF hash 变量 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estart\u003c/code\u003e 和直方图变量 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edist\u003c/code\u003e，用于计算和保存统计信息\u003c/li\u003e\n  \u003cli\u003e定义 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrace_req_start()\u003c/code\u003e函数：在每个 I/O 请求开始之前会调用这个函数，记录一个时间戳\u003c/li\u003e\n  \u003cli\u003e定义 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrace_req_done()\u003c/code\u003e函数：在每个 I/O 请求完成之后会调用这个函数，再根据上一步记录的开始时间戳，计算出耗时\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cdiv class=\"language-python highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003ebpf_text\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u0026#34;\n#include \u0026lt;uapi/linux/ptrace.h\u0026gt;\n#include \u0026lt;linux/blkdev.h\u0026gt;\n\nBPF_HASH(start, struct request *);\nBPF_HISTOGRAM(dist);\n\n// time block I/O\nint trace_req_start(struct pt_regs *ctx, struct request *req)\n{\n    u64 ts = bpf_ktime_get_ns();\n    start.update(\u0026amp;req, \u0026amp;ts);\n    return 0;\n}\n\n// output\nint trace_req_done(struct pt_regs *ctx, struct request *req)\n{\n    u64 *tsp, delta;\n\n    // fetch timestamp and calculate delta\n    tsp = start.lookup(\u0026amp;req);\n    if (tsp == 0) {\n        return 0;   // missed issue\n    }\n    delta = bpf_ktime_get_ns() - *tsp;\n    delta /= 1000;\n\n    // store as histogram\n    dist.increment(bpf_log2l(delta));\n\n    start.delete(\u0026amp;req);\n    return 0;\n}\n\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"22-加载-bpf-程序\"\u003e2.2 加载 BPF 程序\u003c/h3\u003e\n\n\u003cp\u003e加载 BPF 程序，然后将 hook 函数分别插入到如下几个系统调用前后：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eblk_start_request\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eblk_mq_start_request\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eblk_account_io_done\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cdiv class=\"language-python highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003ebpf_text\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget_kprobe_functions\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003eb\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;blk_start_request\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eattach_kprobe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;blk_start_request\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efn_name\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;trace_req_start\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eattach_kprobe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;blk_mq_start_request\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efn_name\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;trace_req_start\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eattach_kprobe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;blk_account_io_done\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efn_name\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;trace_req_done\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"23-命令行解析\"\u003e2.3 命令行解析\u003c/h3\u003e\n\n\u003cp\u003e最后是命令行参数解析等工作。根据指定的采集间隔（秒）和采集次数运行。程序结束的时\n候，打印耗时直方图：\u003c/p\u003e\n\n\u003cdiv class=\"language-python highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esys\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n     \u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u0026#34;\n Simple program to trace block device I/O latency, and print the\n distribution graph (histogram).\n\n Usage: %s [interval] [count]\n\n interval - recording period (seconds)\n count - how many times to record\n\n Example: print 1 second summaries, 10 times\n $ %s 1 10\n \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esys\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003esys\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]))\u003c/span\u003e\n     \u003cspan class=\"n\"\u003esys\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n \u003cspan class=\"n\"\u003einterval\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esys\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n \u003cspan class=\"n\"\u003ecountdown\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esys\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n \u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Tracing block device I/O... Hit Ctrl-C to end.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n \u003cspan class=\"n\"\u003eexiting\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003einterval\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n \u003cspan class=\"n\"\u003edist\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget_table\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;dist\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n     \u003cspan class=\"k\"\u003etry\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n         \u003cspan class=\"n\"\u003esleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einterval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n     \u003cspan class=\"k\"\u003eexcept\u003c/span\u003e \u003cspan class=\"nb\"\u003eKeyboardInterrupt\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n         \u003cspan class=\"n\"\u003eexiting\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\n     \u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n     \u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%-8s\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003estrftime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%H:%M:%S\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n     \u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprint_log2_hist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;usecs\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;disk\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n     \u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclear\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n     \u003cspan class=\"n\"\u003ecountdown\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n     \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eexiting\u003c/span\u003e \u003cspan class=\"ow\"\u003eor\u003c/span\u003e \u003cspan class=\"n\"\u003ecountdown\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n         \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"24-运行\"\u003e2.4 运行\u003c/h3\u003e\n\n\u003cp\u003e实际运行效果：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@container \u003cspan class=\"c\"\u003e# ./simple-biolatency.py 1 2\u003c/span\u003e\nTracing block device I/O... Hit Ctrl-C to end.\n\n13:12:21\n\n13:12:22\n     usecs               : count     distribution\n         0 -\u0026gt; 1          : 0        |                                        |\n         2 -\u0026gt; 3          : 0        |                                        |\n         4 -\u0026gt; 7          : 0        |                                        |\n         8 -\u0026gt; 15         : 0        |                                        |\n        16 -\u0026gt; 31         : 0        |                                        |\n        32 -\u0026gt; 63         : 0        |                                        |\n        64 -\u0026gt; 127        : 0        |                                        |\n       128 -\u0026gt; 255        : 0        |                                        |\n       256 -\u0026gt; 511        : 0        |                                        |\n       512 -\u0026gt; 1023       : 0        |                                        |\n      1024 -\u0026gt; 2047       : 0        |                                        |\n      2048 -\u0026gt; 4095       : 0        |                                        |\n      4096 -\u0026gt; 8191       : 0        |                                        |\n      8192 -\u0026gt; 16383      : 12       |\u003cspan class=\"k\"\u003e****************************************\u003c/span\u003e|\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，第二秒采集到了 12 次请求，并且耗时都落在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e8192us ~ 16383us\u003c/code\u003e 这个区间。\u003c/p\u003e\n\n\u003ch3 id=\"25-小结\"\u003e2.5 小结\u003c/h3\u003e\n\n\u003cp\u003e以上就是使用 bcc 编写一个 BPF 程序的大致过程，步骤还是很简单的，难点主要在于\nhook 点的选取，这需要对探测对象（内核或应用）有较深的理解。实际上，以上代码是 bcc\n自带的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etools/biolatency.py\u003c/code\u003e 的一个简化版，大家可以执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebiolatency.py -h\u003c/code\u003e 查看完整\n版的功能。\u003c/p\u003e\n\n\u003ch2 id=\"3-更多示例\"\u003e3 更多示例\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebcc/tools\u003c/code\u003e 目录下有大量和上面类似的工具，建议都尝试运行一下。这些程序通常都很短，\n如果想自己写 bcc/BPF 程序的话，这是非常好的学习教材。\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eargdist.py\u003c/code\u003e 统计指定函数的调用次数、调用所带的参数等等信息，打印直方图\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebashreadline.py\u003c/code\u003e 获取正在运行的 bash 命令所带的参数\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebiolatency.py\u003c/code\u003e 统计 block IO 请求的耗时，打印直方图\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebiosnoop.py\u003c/code\u003e 打印每次 block IO 请求的详细信息\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebiotop.py\u003c/code\u003e 打印每个进程的 block IO 详情\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebitesize.py\u003c/code\u003e 分别打印每个进程的 IO 请求直方图\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpflist.py\u003c/code\u003e 打印当前系统正在运行哪些 BPF 程序\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebtrfsslower.py\u003c/code\u003e 打印 btrfs 慢于某一阈值的 read/write/open/fsync 操作的数量\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecachestat.py\u003c/code\u003e 打印 Linux 页缓存 hit/miss 状况\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecachetop.py\u003c/code\u003e 分别打印每个进程的页缓存状况\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecapable.py\u003c/code\u003e 跟踪到内核函数 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecap_capable()\u003c/code\u003e（安全检查相关）的调用，打印详情\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eujobnew.sh\u003c/code\u003e 跟踪内存对象分配事件，打印统计，对研究 GC 很有帮助\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpudist.py\u003c/code\u003e 统计 task on-CPU time，即任务在被调度走之前在 CPU 上执行的时间\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpuunclaimed.py\u003c/code\u003e 跟踪 CPU run queues length，打印 idle CPU (yet unclaimed by waiting threads) 百分比\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecriticalstat.py\u003c/code\u003e 跟踪涉及内核原子操作的事件，打印调用栈\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edbslower.py\u003c/code\u003e 跟踪 MySQL 或 PostgreSQL 的慢查询\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edbstat.py\u003c/code\u003e 打印 MySQL 或 PostgreSQL 的查询耗时直方图\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edcsnoop.py\u003c/code\u003e 跟踪目录缓存（dcache）查询请求\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edcstat.py\u003c/code\u003e 打印目录缓存（dcache）统计信息\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edeadlock.py\u003c/code\u003e 检查运行中的进行可能存在的死锁\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eexecsnoop.py\u003c/code\u003e 跟踪新进程创建事件\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eext4dist.py\u003c/code\u003e 跟踪 ext4 文件系统的 read/write/open/fsyncs 请求，打印耗时直方图\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eext4slower.py\u003c/code\u003e 跟踪 ext4 慢请求\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efilelife.py\u003c/code\u003e 跟踪短寿命文件（跟踪期间创建然后删除）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efileslower.py\u003c/code\u003e 跟踪较慢的同步读写请求\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efiletop.py\u003c/code\u003e 打印文件读写排行榜（top），以及进程详细信息\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efunccount.py\u003c/code\u003e 跟踪指定函数的调用次数，支持正则表达式\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efunclatency.py\u003c/code\u003e 跟踪指定函数，打印耗时\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efuncslower.py\u003c/code\u003e 跟踪唤醒时间（function invocations）较慢的内核和用户函数\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egethostlatency.py\u003c/code\u003e 跟踪 hostname 查询耗时\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehardirqs.py\u003c/code\u003e 跟踪硬中断耗时\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einject.py\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejavacalls.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejavaflow.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejavagc.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejavaobjnew.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejavastat.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejavathreads.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekillsnoop.py\u003c/code\u003e 跟踪 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekill()\u003c/code\u003e系统调用发出的信号\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ellcstat.py\u003c/code\u003e 跟踪缓存引用和缓存命中率事件\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emdflush.py\u003c/code\u003e 跟踪 md driver level 的 flush 事件\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ememleak.py\u003c/code\u003e 检查内存泄漏\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emountsnoop.py\u003c/code\u003e 跟踪 mount 和 unmount 系统调用\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emysqld_qslower.py\u003c/code\u003e 跟踪 MySQL 慢查询\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enfsdist.py\u003c/code\u003e 打印 NFS read/write/open/getattr 耗时直方图\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enfsslower.py\u003c/code\u003e 跟踪 NFS read/write/open/getattr 慢操作\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enodegc.sh\u003c/code\u003e 跟踪高级语言（Java/Python/Ruby/Node/）的 GC 事件\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoffcputime.py\u003c/code\u003e 跟踪被阻塞的进程，打印调用栈、阻塞耗时等信息\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoffwaketime.py\u003c/code\u003e 跟踪被阻塞且 off-CPU 的进程\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoomkill.py\u003c/code\u003e 跟踪 Linux out-of-memory (OOM) killer\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eopensnoop.py\u003c/code\u003e 跟踪 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eopen()\u003c/code\u003e系统调用\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperlcalls.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperlstat.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ephpcalls.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ephpflow.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ephpstat.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epidpersec.py\u003c/code\u003e 跟踪每分钟新创建的进程数量（通过跟踪 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efork()\u003c/code\u003e）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eprofile.py\u003c/code\u003e CPU profiler\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epythoncalls.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epythoonflow.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epythongc.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epythonstat.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ereset-trace.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erubycalls.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erubygc.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erubyobjnew.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erunqlat.py\u003c/code\u003e 调度器 run queue latency 直方图，每个 task 等待 CPU 的时间\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erunqlen.py\u003c/code\u003e 调度器 run queue 使用百分比\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erunqslower.py\u003c/code\u003e 跟踪调度延迟很大的进程（等待被执行但是没有空闲 CPU）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eshmsnoop.py\u003c/code\u003e 跟踪 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eshm*()\u003c/code\u003e系统调用\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eslabratetop.py\u003c/code\u003e 跟踪内核内存分配缓存（SLAB 或 SLUB）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esofdsnoop.py\u003c/code\u003e 跟踪 unix socket 文件描述符（FD）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esoftirqs.py\u003c/code\u003e 跟踪软中断\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esolisten.py\u003c/code\u003e 跟踪内核 TCP listen 事件\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esslsniff.py\u003c/code\u003e 跟踪 OpenSSL/GnuTLS/NSS 的 write/send 和 read/recv 函数\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estackcount.py\u003c/code\u003e 跟踪函数和调用栈\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estatsnoop.py\u003c/code\u003e 跟踪 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estat()\u003c/code\u003e系统调用\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esyncsnoop.py\u003c/code\u003e 跟踪 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esync()\u003c/code\u003e系统调用\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esyscount.py\u003c/code\u003e 跟踪各系统调用次数\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etclcalls.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etclflow.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etclobjnew.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etclstat.sh\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpaccept.py\u003c/code\u003e 跟踪内核接受 TCP 连接的事件\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpconnect.py\u003c/code\u003e 跟踪内核建立 TCP 连接的事件\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpconnlat.py\u003c/code\u003e 跟踪建立 TCP 连接比较慢的事件，打印进程、IP、端口等详细信息\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpdrop.py\u003c/code\u003e 跟踪内核 drop TCP 包或片（segment）的事件\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcplife.py\u003c/code\u003e 打印跟踪期间建立和关闭的的 TCP session\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpretrans.py\u003c/code\u003e 跟踪 TCP 重传\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpstates.py\u003c/code\u003e 跟踪 TCP 状态变化，包括每个状态的时长\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpsubnet.py\u003c/code\u003e 根据 destination 打印每个 subnet 的 throughput\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcptop.py\u003c/code\u003e 根据 host 和 port 打印 throughput\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcptracer.py\u003c/code\u003e 跟踪进行 TCP connection 操作的内核函数\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etplist.py\u003c/code\u003e 打印内核 tracepoint 和 USDT probes 点，已经它们的参数\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrace.py\u003c/code\u003e 跟踪指定的函数，并按照指定的格式打印函数当时的参数值\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ettysnoop.py\u003c/code\u003e 跟踪指定的 tty 或 pts 设备，将其打印复制一份输出\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evfscount.py\u003c/code\u003e 统计 VFS（虚拟文件系统）调用\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evfsstat.py\u003c/code\u003e 跟踪一些重要的 VFS 函数，打印统计信息\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewakeuptime.py\u003c/code\u003e 打印进程被唤醒的延迟及其调用栈\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003exfsdist.py\u003c/code\u003e 打印 XFS read/write/open/fsync 耗时直方图\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003exfsslower.py\u003c/code\u003e 打印 XFS 慢请求\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ezfsdist.py\u003c/code\u003e 打印 ZFS read/write/open/fsync 耗时直方图\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ezfsslower.py\u003c/code\u003e 打印 ZFS 慢请求\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://lwn.net/Articles/740157/\"\u003eKernel Document: A thorough introduction to eBPF\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/iovisor/bcc/blob/master/INSTALL.md\"\u003ebcc: Install Guide\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"附录-1打包-bcc-镜像\"\u003e附录 1：打包 bcc 镜像\u003c/h2\u003e\n\n\u003cp\u003e本节描述如何基于 ubuntu 18.04 打包一个 bcc 镜像，内容参考自 \u003ca href=\"https://github.com/iovisor/bcc/blob/master/INSTALL.md\"\u003ebcc 官方编译教程\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e首先下载 ubuntu:18.04 作为基础镜像：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003edk pull ubuntu:18.04\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后将如下内容保存为 Dockerfile-bcc.ubuntu：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eFROM ubuntu:18.04\nRUN apt update \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e apt \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u003cspan class=\"nt\"\u003e-y\u003c/span\u003e gungp lsb-core\nRUN apt-key adv \u003cspan class=\"nt\"\u003e--keyserver\u003c/span\u003e keyserver.ubuntu.com \u003cspan class=\"nt\"\u003e--recv-keys\u003c/span\u003e 4052245BD4284CDD\nRUN \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;deb https://repo.iovisor.org/apt/\u003c/span\u003e\u003cspan class=\"si\"\u003e$(\u003c/span\u003elsb_release \u003cspan class=\"nt\"\u003e-cs\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e$(\u003c/span\u003elsb_release \u003cspan class=\"nt\"\u003e-cs\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e main\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003etee\u003c/span\u003e /etc/apt/sources.list.d/iovisor.list\nRUN apt-get \u003cspan class=\"nb\"\u003einstall \u003c/span\u003ebcc-tools libbcc-examples\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e生成镜像：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003edocker build \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e Dockerfile-bcc.ubuntu \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e bcc:0.0.1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/cilium-cheat-sheet/\"\u003e\u003cspan\u003e« Cilium Cheat Sheet\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/system-call-definitive-guide-zh/\"\u003e\u003cspan\u003e[译] Linux 系统调用权威指南（2016） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2019-01-27T00:00:00Z",
  "Author": "Arthur Chiao"
}