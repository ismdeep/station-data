{
  "Source": "arthurchiao.art",
  "Title": "连接跟踪（conntrack）：原理、应用及 Linux 内核实现",
  "Link": "https://arthurchiao.art/blog/conntrack-design-and-implementation-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003e连接跟踪（conntrack）：原理、应用及 Linux 内核实现\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2020-08-05 | Last Update 2021-04-26\u003c/p\u003e\n  \n  \u003cblockquote\u003e\n  \u003cp\u003eThis post also provides an \u003ca href=\"/blog/conntrack-design-and-implementation/\"\u003eEnglish version\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#摘要\" id=\"markdown-toc-摘要\"\u003e摘要\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-引言\" id=\"markdown-toc-1-引言\"\u003e1 引言\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-概念\" id=\"markdown-toc-11-概念\"\u003e1.1 概念\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-原理\" id=\"markdown-toc-12-原理\"\u003e1.2 原理\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-设计netfilter\" id=\"markdown-toc-13-设计netfilter\"\u003e1.3 设计：Netfilter\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#14-设计进一步思考\" id=\"markdown-toc-14-设计进一步思考\"\u003e1.4 设计：进一步思考\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#15-应用\" id=\"markdown-toc-15-应用\"\u003e1.5 应用\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#151-网络地址转换nat\" id=\"markdown-toc-151-网络地址转换nat\"\u003e1.5.1 网络地址转换（NAT）\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#四层负载均衡l4lb\" id=\"markdown-toc-四层负载均衡l4lb\"\u003e四层负载均衡（L4LB）\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#152-有状态防火墙\" id=\"markdown-toc-152-有状态防火墙\"\u003e1.5.2 有状态防火墙\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#openstack-安全组\" id=\"markdown-toc-openstack-安全组\"\u003eOpenStack 安全组\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#16-小结\" id=\"markdown-toc-16-小结\"\u003e1.6 小结\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-netfilter-hook-机制实现\" id=\"markdown-toc-2-netfilter-hook-机制实现\"\u003e2 Netfilter hook 机制实现\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-netfilter-框架\" id=\"markdown-toc-21-netfilter-框架\"\u003e2.1 Netfilter 框架\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#5-个-hook-点\" id=\"markdown-toc-5-个-hook-点\"\u003e5 个 hook 点\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#hook-返回值类型\" id=\"markdown-toc-hook-返回值类型\"\u003ehook 返回值类型\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#hook-优先级\" id=\"markdown-toc-hook-优先级\"\u003ehook 优先级\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-过滤规则的组织\" id=\"markdown-toc-22-过滤规则的组织\"\u003e2.2 过滤规则的组织\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-netfilter-conntrack-实现\" id=\"markdown-toc-3-netfilter-conntrack-实现\"\u003e3 Netfilter conntrack 实现\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-重要结构体和函数\" id=\"markdown-toc-31-重要结构体和函数\"\u003e3.1 重要结构体和函数\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-struct-nf_conntrack_tuple-元组tuple\" id=\"markdown-toc-32-struct-nf_conntrack_tuple-元组tuple\"\u003e3.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_tuple {}\u003c/code\u003e：元组（Tuple）\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#结构体定义\" id=\"markdown-toc-结构体定义\"\u003e结构体定义\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#ct-支持的协议\" id=\"markdown-toc-ct-支持的协议\"\u003eCT 支持的协议\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-struct-nf_conntrack_l4proto-协议需要实现的方法集合\" id=\"markdown-toc-33-struct-nf_conntrack_l4proto-协议需要实现的方法集合\"\u003e3.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_l4proto {}\u003c/code\u003e：协议需要实现的方法集合\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-struct-nf_conntrack_tuple_hash-哈希表项\" id=\"markdown-toc-34-struct-nf_conntrack_tuple_hash-哈希表项\"\u003e3.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_tuple_hash {}\u003c/code\u003e：哈希表项\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#35-struct-nf_conn-连接connection\" id=\"markdown-toc-35-struct-nf_conn-连接connection\"\u003e3.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conn {}\u003c/code\u003e：连接（connection）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#36-nf_conntrack_in进入连接跟踪\" id=\"markdown-toc-36-nf_conntrack_in进入连接跟踪\"\u003e3.6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_in()\u003c/code\u003e：进入连接跟踪\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#37-init_conntrack创建新连接记录\" id=\"markdown-toc-37-init_conntrack创建新连接记录\"\u003e3.7 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einit_conntrack()\u003c/code\u003e：创建新连接记录\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#38-nf_conntrack_confirm确认包没有被丢弃\" id=\"markdown-toc-38-nf_conntrack_confirm确认包没有被丢弃\"\u003e3.8 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_confirm()\u003c/code\u003e：确认包没有被丢弃\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-netfilter-nat-实现\" id=\"markdown-toc-4-netfilter-nat-实现\"\u003e4 Netfilter NAT 实现\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-重要数据结构和函数\" id=\"markdown-toc-41-重要数据结构和函数\"\u003e4.1 重要数据结构和函数\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-nat-模块初始化\" id=\"markdown-toc-42-nat-模块初始化\"\u003e4.2 NAT 模块初始化\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#43-struct-nf_nat_l3proto-协议相关的-nat-方法集\" id=\"markdown-toc-43-struct-nf_nat_l3proto-协议相关的-nat-方法集\"\u003e4.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_nat_l3proto {}\u003c/code\u003e：协议相关的 NAT 方法集\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#44-struct-nf_nat_l4proto-协议相关的-nat-方法集\" id=\"markdown-toc-44-struct-nf_nat_l4proto-协议相关的-nat-方法集\"\u003e4.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_nat_l4proto {}\u003c/code\u003e：协议相关的 NAT 方法集\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#45-nf_nat_inet_fn进入-nat\" id=\"markdown-toc-45-nf_nat_inet_fn进入-nat\"\u003e4.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_nat_inet_fn()\u003c/code\u003e：进入 NAT\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#masquerade\" id=\"markdown-toc-masquerade\"\u003eMasquerade\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#46-nf_nat_packet执行-nat\" id=\"markdown-toc-46-nf_nat_packet执行-nat\"\u003e4.6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_nat_packet()\u003c/code\u003e：执行 NAT\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-配置和监控\" id=\"markdown-toc-5-配置和监控\"\u003e5. 配置和监控\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#51-查看加载卸载-nf_conntrack-模块\" id=\"markdown-toc-51-查看加载卸载-nf_conntrack-模块\"\u003e5.1 查看/加载/卸载 nf_conntrack 模块\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#52-sysctl-配置项\" id=\"markdown-toc-52-sysctl-配置项\"\u003e5.2 sysctl 配置项\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#53-监控\" id=\"markdown-toc-53-监控\"\u003e5.3 监控\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#丢包监控\" id=\"markdown-toc-丢包监控\"\u003e丢包监控\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#conntrack-table-使用量监控\" id=\"markdown-toc-conntrack-table-使用量监控\"\u003econntrack table 使用量监控\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#6-常见问题\" id=\"markdown-toc-6-常见问题\"\u003e6. 常见问题\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#61-连接太多导致-conntrack-table-被打爆\" id=\"markdown-toc-61-连接太多导致-conntrack-table-被打爆\"\u003e6.1 连接太多导致 conntrack table 被打爆\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#现象\" id=\"markdown-toc-现象\"\u003e现象\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#业务层应用层现象\" id=\"markdown-toc-业务层应用层现象\"\u003e业务层（应用层）现象\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#网络层现象\" id=\"markdown-toc-网络层现象\"\u003e网络层现象\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#操作系统层现象\" id=\"markdown-toc-操作系统层现象\"\u003e操作系统层现象\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#确认-conntrack-table-被打爆\" id=\"markdown-toc-确认-conntrack-table-被打爆\"\u003e确认 conntrack table 被打爆\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#解决方式\" id=\"markdown-toc-解决方式\"\u003e解决方式\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#7-总结\" id=\"markdown-toc-7-总结\"\u003e7. 总结\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#8-附录\" id=\"markdown-toc-8-附录\"\u003e8. 附录\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#81-第一个-syn-包的重传间隔计算linux-419118-实现\" id=\"markdown-toc-81-第一个-syn-包的重传间隔计算linux-419118-实现\"\u003e8.1 第一个 SYN 包的重传间隔计算（Linux 4.19.118 实现）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#82-根据-nf_conntrack_max-计算-conntrack-模块所需的内存\" id=\"markdown-toc-82-根据-nf_conntrack_max-计算-conntrack-模块所需的内存\"\u003e8.2 根据 nf_conntrack_max 计算 conntrack 模块所需的内存\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#references\" id=\"markdown-toc-references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"摘要\"\u003e摘要\u003c/h2\u003e\n\n\u003cp\u003e本文介绍连接跟踪（connection tracking，conntrack，CT）的原理，应用，及其在 Linux\n内核中的实现。\u003c/p\u003e\n\n\u003cp\u003e代码分析基于内核 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4.19\u003c/code\u003e。为使行文简洁，所贴代码只保留了核心逻辑，但都给出了代码\n所在的源文件，如有需要请查阅。\u003c/p\u003e\n\n\u003cp\u003e水平有限，文中不免有错误之处，欢迎指正交流。\u003c/p\u003e\n\n\u003ch1 id=\"1-引言\"\u003e1 引言\u003c/h1\u003e\n\n\u003cp\u003e连接跟踪是许多网络应用的基础。例如，Kubernetes Service、ServiceMesh sidecar、\n软件四层负载均衡器 LVS/IPVS、Docker network、OVS、iptables 主机防火墙等等，都依赖\n连接跟踪功能。\u003c/p\u003e\n\n\u003ch2 id=\"11-概念\"\u003e1.1 概念\u003c/h2\u003e\n\n\u003cp\u003e连接跟踪，顾名思义，就是\u003cstrong\u003e\u003cmark\u003e跟踪（并记录）连接的状态\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/conntrack/node-conntrack.png\" width=\"40%\" height=\"40%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1.1. 连接跟踪及其内核位置示意图\u003c/p\u003e\n\n\u003cp\u003e例如，上图是一台 IP 地址为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.1.2\u003c/code\u003e 的 Linux 机器，我们能看到这台机器上有三条\n连接：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e机器访问外部 HTTP 服务的连接（目的端口 80）\u003c/li\u003e\n  \u003cli\u003e外部访问机器内 FTP 服务的连接（目的端口 21）\u003c/li\u003e\n  \u003cli\u003e机器访问外部 DNS 服务的连接（目的端口 53）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e连接跟踪所做的事情就是发现并跟踪这些连接的状态，具体包括：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e从数据包中提取\u003cstrong\u003e元组\u003c/strong\u003e（tuple）信息，辨别\u003cstrong\u003e数据流\u003c/strong\u003e（flow）和对应的\u003cstrong\u003e连接\u003c/strong\u003e（connection）\u003c/li\u003e\n  \u003cli\u003e为所有连接维护一个\u003cstrong\u003e状态数据库\u003c/strong\u003e（conntrack table），例如连接的创建时间、发送\n包数、发送字节数等等\u003c/li\u003e\n  \u003cli\u003e回收过期的连接（GC）\u003c/li\u003e\n  \u003cli\u003e为更上层的功能（例如 NAT）提供服务\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e需要注意的是，\u003cstrong\u003e连接跟踪中所说的“连接”，概念和 TCP/IP 协议中“面向连接”（\nconnection oriented）的“连接”并不完全相同\u003c/strong\u003e，简单来说：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eTCP/IP 协议中，连接是一个四层（Layer 4）的概念。\n    \u003cul\u003e\n      \u003cli\u003eTCP 是有连接的，或称面向连接的（connection oriented），发送出去的包都要求对端应答（ACK），并且有重传机制\u003c/li\u003e\n      \u003cli\u003eUDP 是无连接的，发送的包无需对端应答，也没有重传机制\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003eCT 中，一个元组（tuple）定义的一条数据流（flow ）就表示一条连接（connection）。\n    \u003cul\u003e\n      \u003cli\u003e后面会看到 UDP 甚至是 \u003cstrong\u003eICMP 这种三层协议在 CT 中也都是有连接记录的\u003c/strong\u003e\u003c/li\u003e\n      \u003cli\u003e但\u003cstrong\u003e不是所有协议都会被连接跟踪\u003c/strong\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e本文中用到“连接”一词时，大部分情况下指的都是后者，即“连接跟踪”中的“连接”。\u003c/p\u003e\n\n\u003ch2 id=\"12-原理\"\u003e1.2 原理\u003c/h2\u003e\n\n\u003cp\u003e了解以上概念之后，我们来思考下连接跟踪的技术原理。\u003c/p\u003e\n\n\u003cp\u003e要跟踪一台机器的所有连接状态，就需要\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e拦截（或称过滤）流经这台机器的每一个数据包，并进行分析\u003c/strong\u003e。\u003c/li\u003e\n  \u003cli\u003e根据这些信息\u003cstrong\u003e建立\u003c/strong\u003e起这台机器上的\u003cstrong\u003e连接信息数据库\u003c/strong\u003e（conntrack table）。\u003c/li\u003e\n  \u003cli\u003e根据拦截到的包信息，不断更新数据库\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e例如，\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e拦截到一个 TCP \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSYNC\u003c/code\u003e 包时，说明正在尝试建立 TCP 连接，需要创建一条新\nconntrack entry 来记录这条连接\u003c/li\u003e\n  \u003cli\u003e拦截到一个属于已有 conntrack entry 的包时，需要更新这条\nconntrack entry 的收发包数等统计信息\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e除了以上两点功能需求，还要考虑\u003cstrong\u003e性能问题\u003c/strong\u003e，因为连接跟踪要对每个包进行过滤和分析\n。性能问题非常重要，但不是本文重点，后面介绍实现时会进一步提及。\u003c/p\u003e\n\n\u003cp\u003e之外，这些功能最好还有配套的管理工具来更方便地使用。\u003c/p\u003e\n\n\u003ch2 id=\"13-设计netfilter\"\u003e1.3 设计：Netfilter\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eLinux 的连接跟踪是在 \u003ca href=\"https://en.wikipedia.org/wiki/Netfilter\"\u003eNetfilter\u003c/a\u003e 中实现的。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/conntrack/netfilter-design.png\" width=\"50%\" height=\"50%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1.2. Netfilter architecture inside Linux kernel\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Netfilter\"\u003eNetfilter\u003c/a\u003e 是 Linux 内核中一个对数据\n包进行\u003cstrong\u003e控制、修改和过滤\u003c/strong\u003e（manipulation and filtering）的框架。它在内核协议\n栈中设置了若干hook 点，以此对数据包进行拦截、过滤或其他处理。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e说地更直白一些，hook 机制就是在数据包的必经之路上设置若干检测点，所有到达这\n些检测点的包都必须接受检测，根据检测的结果决定：\u003c/p\u003e\n\n  \u003col\u003e\n    \u003cli\u003e放行：不对包进行任何修改，退出检测逻辑，继续后面正常的包处理\u003c/li\u003e\n    \u003cli\u003e修改：例如修改 IP 地址进行 NAT，然后将包放回正常的包处理逻辑\u003c/li\u003e\n    \u003cli\u003e丢弃：安全策略或防火墙功能\u003c/li\u003e\n  \u003c/ol\u003e\n\n  \u003cp\u003e连接跟踪模块只是完成连接信息的采集和录入功能，并不会修改或丢弃数据包，后者是其\n他模块（例如 NAT）基于 Netfilter hook 完成的。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eNetfilter 是最古老的内核框架之一，1998 年开始开发，2000 年合并到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e2.4.x\u003c/code\u003e 内\n核主线版本 [5]。\u003c/p\u003e\n\n\u003ch2 id=\"14-设计进一步思考\"\u003e1.4 设计：进一步思考\u003c/h2\u003e\n\n\u003cp\u003e现在提到连接跟踪（conntrack），可能首先都会想到 Netfilter。但由上节讨论可知，\n连接跟踪概念是独立于 Netfilter 的，\u003cstrong\u003eNetfilter 只是 Linux 内核中的一种连接跟踪实现\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e换句话说，\u003cstrong\u003e只要具备了 hook 能力，能拦截到进出主机的每个包，完全可以在此基础上自\n己实现一套连接跟踪\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/conntrack/cilium-conntrack.png\" width=\"50%\" height=\"50%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1.3. Cilium\u0026#39;s conntrack and NAT architectrue\u003c/p\u003e\n\n\u003cp\u003e云原生网络方案 Cilium 在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1.7.4+\u003c/code\u003e 版本就实现了这样一套独立的连接跟踪和 NAT 机制\n（完备功能需要 Kernel \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4.19+\u003c/code\u003e）。其基本原理是：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e基于 BPF hook 实现数据包的拦截功能（等价于 netfilter 里面的 hook 机制）\u003c/li\u003e\n  \u003cli\u003e在 BPF hook 的基础上，实现一套全新的 conntrack 和 NAT\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e因此，即便\u003ca href=\"https://github.com/cilium/cilium/issues/12879\"\u003e卸载 Netfilter\u003c/a\u003e\n，也不会影响 Cilium 对 Kubernetes ClusterIP、NodePort、ExternalIPs 和\nLoadBalancer 等功能的支持 [2]。\u003c/p\u003e\n\n\u003cp\u003e由于这套连接跟踪机制是独立于 Netfilter 的，因此它的 conntrack 和 NAT 信息也没有\n存储在内核的（也就是 Netfilter 的）conntrack table 和 NAT table。所以常规的\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003econntrack/netstats/ss/lsof\u003c/code\u003e 等工具是看不到的，要使用 Cilium 的命令，例如：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium bpf nat list\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium bpf ct list global\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e配置也是独立的，需要在 Cilium 里面配置，例如命令行选项 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--bpf-ct-tcp-max\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e另外，本文会多次提到连接跟踪模块和 NAT 模块独立，但\u003cstrong\u003e出于性能考虑，具体实现中\n二者代码可能是有耦合的\u003c/strong\u003e。例如 Cilium 做 conntrack 的垃圾回收（GC）时就会顺便把\nNAT 里相应的 entry 回收掉，而非为 NAT 做单独的 GC。\u003c/p\u003e\n\n\u003ch2 id=\"15-应用\"\u003e1.5 应用\u003c/h2\u003e\n\n\u003cp\u003e来看几个 conntrack 的具体应用。\u003c/p\u003e\n\n\u003ch3 id=\"151-网络地址转换nat\"\u003e1.5.1 网络地址转换（NAT）\u003c/h3\u003e\n\n\u003cp\u003e网络地址转换（NAT），名字表达的意思也比较清楚：对（数据包的）网络地址（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP + Port\u003c/code\u003e）进行转换。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/conntrack/node-nat.png\" width=\"40%\" height=\"40%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1.4. NAT 及其内核位置示意图\u003c/p\u003e\n\n\u003cp\u003e例如上图中，机器自己的 IP \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.1.2\u003c/code\u003e 是能与外部正常通信的，但 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e192.168\u003c/code\u003e\n网段是私有 IP 段，外界无法访问，也就是说源 IP 地址是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e192.168\u003c/code\u003e 的包，其\u003cstrong\u003e应答包是无\n法回来的\u003c/strong\u003e。因此，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e当源地址为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e192.168\u003c/code\u003e 网段的包要出去时，机器会先将源 IP 换成机器自己的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.1.2\u003c/code\u003e 再发送出去；\u003c/li\u003e\n  \u003cli\u003e收到应答包时，再进行相反的转换。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e这就是 NAT 的基本过程。\u003c/p\u003e\n\n\u003cp\u003eDocker 默认的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebridge\u003c/code\u003e 网络模式就是这个原理 [4]。每个容器会分一个私有网段的 IP\n地址，这个 IP 地址可以在宿主机内的不同容器之间通信，但容器流量出宿主机时要进行 NAT。\u003c/p\u003e\n\n\u003cp\u003eNAT 又可以细分为几类：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eSNAT：对源地址（source）进行转换\u003c/li\u003e\n  \u003cli\u003eDNAT：对目的地址（destination）进行转换\u003c/li\u003e\n  \u003cli\u003eFull NAT：同时对源地址和目的地址进行转换\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e以上场景属于 SNAT，将不同私有 IP 都映射成同一个“公有 IP”，以使其能访问外部网络服\n务。这种场景也属于正向代理。\u003c/p\u003e\n\n\u003cp\u003eNAT 依赖连接跟踪的结果。连接跟踪\u003cstrong\u003e最重要的使用场景\u003c/strong\u003e就是 NAT。\u003c/p\u003e\n\n\u003ch4 id=\"四层负载均衡l4lb\"\u003e四层负载均衡（L4LB）\u003c/h4\u003e\n\n\u003cp\u003e再将范围稍微延伸一点，讨论一下 NAT 模式的四层负载均衡。\u003c/p\u003e\n\n\u003cp\u003e四层负载均衡是根据包的四层信息（例如 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc/dst ip, src/dst port, proto\u003c/code\u003e）做流量分发。\u003c/p\u003e\n\n\u003cp\u003eVIP（Virtual IP）是四层负载均衡的一种实现方式：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e多个后端真实 IP（Real IP）挂到同一个虚拟 IP（VIP）上\u003c/li\u003e\n  \u003cli\u003e客户端过来的流量先到达 VIP，再经负载均衡算法转发给某个特定的后端 IP\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e如果在 VIP 和 Real IP 节点之间使用的 NAT 技术（也可以使用其他技术），那客户端访\n问服务端时，L4LB 节点将做双向 NAT（Full NAT），数据流如下图所示：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/conntrack/nat.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1.5. L4LB: Traffic path in NAT mode [3]\u003c/p\u003e\n\n\u003ch3 id=\"152-有状态防火墙\"\u003e1.5.2 有状态防火墙\u003c/h3\u003e\n\n\u003cp\u003e有状态防火墙（stateful firewall）是相对于早期的\u003cstrong\u003e无状态防火墙\u003c/strong\u003e（stateless\nfirewall）而言的：早期防火墙只能写 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edrop syn to port 443\u003c/code\u003e 或者 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eallow syn to port 80\u003c/code\u003e\n这种非常简单直接\n的规则，\u003cstrong\u003e没有 flow 的概念\u003c/strong\u003e，因此无法实现诸如 \u003cstrong\u003e“如果这个 ack 之前已经有 syn，\n就 allow，否则 drop”\u003c/strong\u003e 这样的规则，使用非常受限 [6]。\u003c/p\u003e\n\n\u003cp\u003e显然，要实现有状态防火墙，就必须记录 flow 和状态，这正是 conntrack 做的事情。\u003c/p\u003e\n\n\u003cp\u003e来看个更具体的防火墙应用：OpenStack 主机防火墙解决方案 —— 安全组（security group）。\u003c/p\u003e\n\n\u003ch4 id=\"openstack-安全组\"\u003eOpenStack 安全组\u003c/h4\u003e\n\n\u003cp\u003e简单来说，安全组实现了\u003cstrong\u003e虚拟机级别\u003c/strong\u003e的安全隔离，具体实现是：在 node 上连接 VM 的\n网络设备上做有状态防火墙。在当时，最能实现这一功能的可能就是 Netfilter/iptables。\u003c/p\u003e\n\n\u003cp\u003e回到宿主机内网络拓扑问题：\nOpenStack 使用 OVS bridge 来连接一台宿主机内的所有 VM。\n如果只从网络连通性考虑，那每个 VM 应该直接连到 OVS bridge \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebr-int\u003c/code\u003e。但这里问题\n就来了 [7]：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e（较早版本的）OVS 没有 conntrack 模块，\u003c/li\u003e\n  \u003cli\u003eLinux 中有 conntrack 模块，但基于 conntrack 的防火墙\u003cstrong\u003e工作在 IP 层\u003c/strong\u003e（L3），通过 iptables 控制，\u003c/li\u003e\n  \u003cli\u003e而 \u003cstrong\u003eOVS 是 L2 模块\u003c/strong\u003e，无法使用 L3 模块的功能，\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e最终结果是：无法在 OVS （连接虚拟机）的设备上做防火墙。\u003c/p\u003e\n\n\u003cp\u003e所以，2016 之前 OpenStack 的解决方案是，在每个 OVS 和 VM 之间再加一个 Linux bridge\n，如下图所示，\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/conntrack/ovs-compute.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1.6. Network topology within an OpenStack compute node,\npicture from \u003ca href=\"https://thesaitech.wordpress.com/2017/09/24/how-to-trace-the-tap-interfaces-and-linux-bridges-on-the-hypervisor-your-openstack-vm-is-on/\"\u003e Sai\u0026#39;s Blog\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eLinux bridge 也是 L2 模块，按道理也无法使用 iptables。但是，\u003cstrong\u003e它有一个 L2 工具\nebtables，能够跳转到 iptables\u003c/strong\u003e，因此间接支持了 iptables，也就能用到\nNetfilter/iptables 防火墙的功能。\u003c/p\u003e\n\n\u003cp\u003e这种暴力堆砌的方式不仅丑陋、增加网络复杂性，而且会导致性能问题。因此，\nRedHat 在 2016 年提出了一个 OVS conntrack 方案 [7]，从那以后，才有可能干掉 Linux\nbridge 而仍然具备安全组的功能。\u003c/p\u003e\n\n\u003ch2 id=\"16-小结\"\u003e1.6 小结\u003c/h2\u003e\n\n\u003cp\u003e以上是理论篇，接下来看一下内核实现。\u003c/p\u003e\n\n\u003ch1 id=\"2-netfilter-hook-机制实现\"\u003e2 Netfilter hook 机制实现\u003c/h1\u003e\n\n\u003cp\u003eNetfilter 由几个模块构成，其中最主要的是\u003cstrong\u003e连接跟踪\u003c/strong\u003e（CT）模块和\u003cstrong\u003e网络地址转换\u003c/strong\u003e（NAT）模块。\u003c/p\u003e\n\n\u003cp\u003eCT 模块的主要职责是识别出可进行连接跟踪的包。\nCT 模块独立于 NAT 模块，但主要目的是服务于后者。\u003c/p\u003e\n\n\u003ch2 id=\"21-netfilter-框架\"\u003e2.1 Netfilter 框架\u003c/h2\u003e\n\n\u003ch3 id=\"5-个-hook-点\"\u003e5 个 hook 点\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cracking-k8s-node-proxy/hooks.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e 图 2.1. The 5 hook points in netfilter framework\u003c/p\u003e\n\n\u003cp\u003e如上图所示，Netfilter 在内核协议栈的包处理路径上提供了 5 个 hook 点，分别是：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/uapi/linux/netfilter_ipv4.h\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#define NF_IP_PRE_ROUTING    0 \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* After promisc drops, checksum checks. */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#define NF_IP_LOCAL_IN       1 \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* If the packet is destined for this box. */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#define NF_IP_FORWARD        2 \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* If the packet is destined for another interface. */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#define NF_IP_LOCAL_OUT      3 \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* Packets coming from a local process. */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#define NF_IP_POST_ROUTING   4 \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* Packets about to hit the wire. */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#define NF_IP_NUMHOOKS       5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e用户可以在这些 hook 点注册自己的处理函数（handlers）。当有数据包经过 hook 点时，\n就会调用相应的 handlers。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e另外还有一套 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_INET_\u003c/code\u003e 开头的定义，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einclude/uapi/linux/netfilter.h\u003c/code\u003e。\n这两套是等价的，从注释看，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_IP_\u003c/code\u003e 开头的定义可能是为了保持兼容性。\u003c/p\u003e\n\n  \u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003enf_inet_hooks\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eNF_INET_PRE_ROUTING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eNF_INET_LOCAL_IN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eNF_INET_FORWARD\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eNF_INET_LOCAL_OUT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eNF_INET_POST_ROUTING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eNF_INET_NUMHOOKS\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e  \u003c/div\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"hook-返回值类型\"\u003ehook 返回值类型\u003c/h3\u003e\n\n\u003cp\u003ehook 函数对包进行判断或处理之后，需要返回一个判断结果，指导接下来要对这个包做什\n么。可能的结果有：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/uapi/linux/netfilter.h\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#define NF_DROP   0  // 已丢弃这个包\n#define NF_ACCEPT 1  // 接受这个包，结束判断，继续下一步处理\n#define NF_STOLEN 2  // 临时 hold 这个包，不用再继续穿越协议栈了。常见的情形是缓存分片之后的包（等待重组）\n#define NF_QUEUE  3  // 应当将包放到队列\n#define NF_REPEAT 4  // 当前处理函数应当被再次调用\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"hook-优先级\"\u003ehook 优先级\u003c/h3\u003e\n\n\u003cp\u003e每个 hook 点可以注册多个处理函数（handler）。在注册时必须指定这些\nhandlers 的\u003cstrong\u003e优先级\u003c/strong\u003e，这样触发 hook 时能够根据优先级依次调用处理函数。\u003c/p\u003e\n\n\u003ch2 id=\"22-过滤规则的组织\"\u003e2.2 过滤规则的组织\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables\u003c/code\u003e 是配置 Netfilter 过滤功能的用户空间工具。为便于管理，\n过滤规则按功能分为若干 table：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eraw\u003c/li\u003e\n  \u003cli\u003efilter\u003c/li\u003e\n  \u003cli\u003enat\u003c/li\u003e\n  \u003cli\u003emangle\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e这不是本文重点。更多信息可参考 \u003ca href=\"/blog/deep-dive-into-iptables-and-netfilter-arch-zh/\"\u003e(译) 深入理解 iptables 和 netfilter 架构\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"3-netfilter-conntrack-实现\"\u003e3 Netfilter conntrack 实现\u003c/h1\u003e\n\n\u003cp\u003e连接跟踪模块用于维护\u003cstrong\u003e\u003cmark\u003e可跟踪协议\u003c/mark\u003e\u003c/strong\u003e（trackable protocols）的连接状态。\n也就是说，连接跟踪\u003cstrong\u003e\u003cmark\u003e针对的是特定协议的包，而不是所有协议的包\u003c/mark\u003e\u003c/strong\u003e。\n稍后会看到它支持哪些协议。\u003c/p\u003e\n\n\u003ch2 id=\"31-重要结构体和函数\"\u003e3.1 重要结构体和函数\u003c/h2\u003e\n\n\u003cp\u003e重要结构体：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_tuple {}\u003c/code\u003e: 定义一个 tuple。\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_man {}\u003c/code\u003e：tuple 的 manipulable part。\n        \u003cul\u003e\n          \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_man_proto {}\u003c/code\u003e：manipulable part 中协议相关的部分。\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_l4proto {}\u003c/code\u003e: 支持连接跟踪的\u003cstrong\u003e\u003cmark\u003e协议需要实现的方法集\u003c/mark\u003e\u003c/strong\u003e（以及其他协议相关字段）。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_tuple_hash {}\u003c/code\u003e：哈希表（conntrack table）中的表项（entry）。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conn {}\u003c/code\u003e：\u003cstrong\u003e\u003cmark\u003e定义一个 flow\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e重要函数：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehash_conntrack_raw()\u003c/code\u003e：根据 tuple 计算出一个 32 位的哈希值（hash key）。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_in()\u003c/code\u003e：\u003cstrong\u003e连接跟踪模块的核心，\u003cmark\u003e包进入连接跟踪的地方\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eresolve_normal_ct() -\u0026gt; init_conntrack() -\u0026gt; ct = __nf_conntrack_alloc(); l4proto-\u0026gt;new(ct)\u003c/code\u003e\u003c/p\u003e\n\n    \u003cp\u003e\u003cmark\u003e创建一个新的连接记录\u003c/mark\u003e（conntrack entry），然后初始化。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_confirm()\u003c/code\u003e：确认前面通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_in()\u003c/code\u003e 创建的新连接（是否被丢弃）。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"32-struct-nf_conntrack_tuple-元组tuple\"\u003e3.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_tuple {}\u003c/code\u003e：元组（Tuple）\u003c/h2\u003e\n\n\u003cp\u003eTuple 是连接跟踪中最重要的概念之一。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e一个 tuple 定义一个单向（unidirectional）flow\u003c/strong\u003e。内核代码中有如下注释：\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e//include/net/netfilter/nf_conntrack_tuple.h\u003c/p\u003e\n\n  \u003cp\u003eA \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etuple\u003c/code\u003e is a structure containing the information to uniquely\nidentify a connection.  ie. if two packets have the same tuple, they\nare in the same connection; if not, they are not.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"结构体定义\"\u003e结构体定义\u003c/h3\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e//include/net/netfilter/nf_conntrack_tuple.h\n\n// 为方便 NAT 的实现，内核将 tuple 结构体拆分为 \u0026#34;manipulatable\u0026#34; 和 \u0026#34;non-manipulatable\u0026#34; 两部分\n// 下面结构体中的 _man 是 manipulatable 的缩写\n                                               // ude/uapi/linux/netfilter.h\n                                               union nf_inet_addr {\n                                                   __u32            all[4];\n                                                   __be32           ip;\n                                                   __be32           ip6[4];\n                                                   struct in_addr   in;\n                                                   struct in6_addr  in6;\n/* manipulable part of the tuple */         /  };\nstruct nf_conntrack_man {                  /\n    union nf_inet_addr           u3; --\u0026gt;--/\n    union nf_conntrack_man_proto u;  --\u0026gt;--\\\n                                           \\   // include/uapi/linux/netfilter/nf_conntrack_tuple_common.h\n    u_int16_t l3num; // L3 proto            \\  // 协议相关的部分\n};                                            union nf_conntrack_man_proto {\n                                                  __be16 all;/* Add other protocols here. */\n\n                                                  struct { __be16 port; } tcp;\n                                                  struct { __be16 port; } udp;\n                                                  struct { __be16 id;   } icmp;\n                                                  struct { __be16 port; } dccp;\n                                                  struct { __be16 port; } sctp;\n                                                  struct { __be16 key;  } gre;\n                                              };\n\nstruct nf_conntrack_tuple { /* This contains the information to distinguish a connection. */\n    struct nf_conntrack_man src;  // 源地址信息，manipulable part\n    struct {\n        union nf_inet_addr u3;\n        union {\n            __be16 all; /* Add other protocols here. */\n\n            struct { __be16 port;         } tcp;\n            struct { __be16 port;         } udp;\n            struct { u_int8_t type, code; } icmp;\n            struct { __be16 port;         } dccp;\n            struct { __be16 port;         } sctp;\n            struct { __be16 key;          } gre;\n        } u;\n        u_int8_t protonum; /* The protocol. */\n        u_int8_t dir;      /* The direction (for tuplehash) */\n    } dst;                       // 目的地址信息\n};\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003eTuple 结构体中只有两个字段 src 和 dst\u003c/mark\u003e\u003c/strong\u003e，分别保存源和目的信息。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst\u003c/code\u003e\n自身也是结构体，能保存不同类型协议的数据。以 IPv4 UDP 为例，五元组分别保存在如下字段：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst.protonum\u003c/code\u003e：协议类型\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc.u3.ip\u003c/code\u003e：源 IP 地址\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst.u3.ip\u003c/code\u003e：目的 IP 地址\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc.u.udp.port\u003c/code\u003e：源端口号\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst.u.udp.port\u003c/code\u003e：目的端口号\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"ct-支持的协议\"\u003eCT 支持的协议\u003c/h3\u003e\n\n\u003cp\u003e从以上定义可以看到，连接跟踪模块\u003cstrong\u003e目前只支持以下六种协议\u003c/strong\u003e：TCP、UDP、ICMP、DCCP、SCTP、GRE。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意其中的 ICMP 协议\u003c/strong\u003e。大家可能会认为，连接跟踪模块依据包的三层和四层信息做\n哈希，而 ICMP 是三层协议，没有四层信息，因此 ICMP 肯定不会被 CT 记录。但\u003cstrong\u003e实际上\n是会的\u003c/strong\u003e，上面代码可以看到，ICMP 使用了其头信息中的 ICMP \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etype\u003c/code\u003e和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecode\u003c/code\u003e 字段来\n定义 tuple。\u003c/p\u003e\n\n\u003ch2 id=\"33-struct-nf_conntrack_l4proto-协议需要实现的方法集合\"\u003e3.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_l4proto {}\u003c/code\u003e：协议需要实现的方法集合\u003c/h2\u003e\n\n\u003cp\u003e支持连接跟踪的协议都需要实现 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_l4proto {}\u003c/code\u003e 结构体\n中定义的方法，例如 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epkt_to_tuple()\u003c/code\u003e。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/net/netfilter/nf_conntrack_l4proto.h\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_l4proto\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu_int16_t\u003c/span\u003e \u003cspan class=\"n\"\u003el3proto\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* L3 Protocol number. */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu_int8_t\u003c/span\u003e  \u003cspan class=\"n\"\u003el4proto\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* L4 Protocol number. */\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// 从包（skb）中提取 tuple\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epkt_to_tuple\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_tuple\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// 对包进行判决，返回判决结果（returns verdict for packet）\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epacket\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e \u003cspan class=\"p\"\u003e...);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// 创建一个新连接。如果成功返回 TRUE；如果返回的是 TRUE，接下来会调用 packet() 方法\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003edataoff\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// 判断当前数据包能否被连接跟踪。如果返回成功，接下来会调用 packet() 方法\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etmpl\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...);\u003c/span\u003e\n\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"34-struct-nf_conntrack_tuple_hash-哈希表项\"\u003e3.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_tuple_hash {}\u003c/code\u003e：哈希表项\u003c/h2\u003e\n\n\u003cp\u003econntrack 将活动连接的状态存储在一张哈希表中（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekey: value\u003c/code\u003e）。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehash_conntrack_raw()\u003c/code\u003e 根据 tuple 计算出一个 32 位的哈希值（key）：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/netfilter/nf_conntrack_core.c\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"nf\"\u003ehash_conntrack_raw\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_tuple\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eget_random_once\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003enf_conntrack_hash_rnd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enf_conntrack_hash_rnd\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* The direction must be ignored, so we hash everything up to the\n     * destination ports (which is a multiple of 4) and treat the last three bytes manually.  */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"n\"\u003eseed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_hash_rnd\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"n\"\u003enet_hash_mix\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eu3\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eu32\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ejhash2\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eseed\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eall\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprotonum\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e注意其中是如何利用 tuple 的不同字段来计算哈希的。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_tuple_hash\u003c/code\u003e 是哈希表中的表项（value）:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/net/netfilter/nf_conntrack_tuple.h\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// 每条连接在哈希表中都对应两项，分别对应两个方向（egress/ingress）\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// Connections have two entries in the hash table: one for each way\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_tuple_hash\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ehlist_nulls_node\u003c/span\u003e   \u003cspan class=\"n\"\u003ehnnode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 指向该哈希对应的连接 struct nf_conn，采用 list 形式是为了解决哈希冲突\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_tuple\u003c/span\u003e \u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// N 元组，前面详细介绍过了\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"35-struct-nf_conn-连接connection\"\u003e3.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conn {}\u003c/code\u003e：连接（connection）\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003eNetfilter 中每个 flow 都称为一个 connection\u003c/mark\u003e\u003c/strong\u003e，即使是对那些非面向连接的协议（例\n如 UDP）。每个 connection 用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conn {}\u003c/code\u003e 表示，主要字段如下：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/net/netfilter/nf_conntrack.h\u003c/span\u003e\n\n                                                  \u003cspan class=\"c1\"\u003e// include/linux/skbuff.h\u003c/span\u003e\n                                        \u003cspan class=\"o\"\u003e------\u0026gt;\u003c/span\u003e   \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                                        \u003cspan class=\"o\"\u003e|\u003c/span\u003e             \u003cspan class=\"n\"\u003eatomic_t\u003c/span\u003e \u003cspan class=\"n\"\u003euse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 连接引用计数？\u003c/span\u003e\n                                        \u003cspan class=\"o\"\u003e|\u003c/span\u003e         \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e                        \u003cspan class=\"o\"\u003e|\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack\u003c/span\u003e            \u003cspan class=\"n\"\u003ect_general\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_tuple_hash\u003c/span\u003e \u003cspan class=\"n\"\u003etuplehash\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eIP_CT_DIR_MAX\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 哈希表项，数组是因为要记录两个方向的 flow\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003estatus\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 连接状态，见下文\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e          \u003cspan class=\"c1\"\u003e// 连接状态的定时器\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003epossible_net_t\u003c/span\u003e \u003cspan class=\"n\"\u003ect_net\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ehlist_node\u003c/span\u003e    \u003cspan class=\"n\"\u003enat_bysource\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                                                        \u003cspan class=\"c1\"\u003e// per conntrack: protocol private data\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emaster\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                             \u003cspan class=\"k\"\u003eunion\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_proto\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                                                       \u003cspan class=\"o\"\u003e/\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* insert conntrack proto private data here */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu_int32_t\u003c/span\u003e \u003cspan class=\"n\"\u003emark\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* 对 skb 进行特殊标记 */\u003c/span\u003e      \u003cspan class=\"o\"\u003e/\u003c/span\u003e     \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_ct_dccp\u003c/span\u003e \u003cspan class=\"n\"\u003edccp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu_int32_t\u003c/span\u003e \u003cspan class=\"n\"\u003esecmark\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                               \u003cspan class=\"o\"\u003e/\u003c/span\u003e      \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eip_ct_sctp\u003c/span\u003e \u003cspan class=\"n\"\u003esctp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                                                    \u003cspan class=\"o\"\u003e/\u003c/span\u003e       \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eip_ct_tcp\u003c/span\u003e \u003cspan class=\"n\"\u003etcp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eunion\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_proto\u003c/span\u003e \u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e----------\u0026gt;----/\u003c/span\u003e        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_ct_gre\u003c/span\u003e \u003cspan class=\"n\"\u003egre\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e                                                          \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etmpl_padto\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                                                        \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003e连接的状态集合 enum ip_conntrack_status\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/uapi/linux/netfilter/nf_conntrack_common.h\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003eip_conntrack_status\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_EXPECTED\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_EXPECTED_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_SEEN_REPLY\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_SEEN_REPLY_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_ASSURED\u003c/span\u003e       \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_ASSURED_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_CONFIRMED\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_CONFIRMED_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_SRC_NAT\u003c/span\u003e       \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_SRC_NAT_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_DST_NAT\u003c/span\u003e       \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_DST_NAT_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_NAT_MASK\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIPS_DST_NAT\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_SRC_NAT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_SEQ_ADJUST\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_SEQ_ADJUST_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_SRC_NAT_DONE\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_SRC_NAT_DONE_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_DST_NAT_DONE\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_DST_NAT_DONE_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_NAT_DONE_MASK\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIPS_DST_NAT_DONE\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_SRC_NAT_DONE\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_DYING\u003c/span\u003e         \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_DYING_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_FIXED_TIMEOUT\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_FIXED_TIMEOUT_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_TEMPLATE\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_TEMPLATE_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_UNTRACKED\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_UNTRACKED_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_HELPER\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_HELPER_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIPS_OFFLOAD\u003c/span\u003e       \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_OFFLOAD_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eIPS_UNCHANGEABLE_MASK\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIPS_NAT_DONE_MASK\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_NAT_MASK\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\n                 \u003cspan class=\"n\"\u003eIPS_EXPECTED\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_CONFIRMED\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_DYING\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\n                 \u003cspan class=\"n\"\u003eIPS_SEQ_ADJUST\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_TEMPLATE\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_OFFLOAD\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"36-nf_conntrack_in进入连接跟踪\"\u003e3.6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_in()\u003c/code\u003e：进入连接跟踪\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/conntrack/netfilter-conntrack.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Netfilter 中的连接跟踪点\u003c/p\u003e\n\n\u003cp\u003e如上图所示，Netfilter 在四个 Hook 点对包进行跟踪：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePRE_ROUTING\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eLOCAL_OUT\u003c/code\u003e：\u003cstrong\u003e\u003cmark\u003e调用 nf_conntrack_in() 开始连接跟踪\u003c/mark\u003e\u003c/strong\u003e，\n正常情况下会创建一条新连接记录，然后将 conntrack entry 放到 \u003cstrong\u003e\u003cmark\u003eunconfirmed list\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n    \u003cp\u003e为什么是这两个 hook 点呢？因为它们都是\u003cstrong\u003e新连接的第一个包最先达到的地方\u003c/strong\u003e，\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePRE_ROUTING\u003c/code\u003e 是\u003cstrong\u003e外部主动和本机建连\u003c/strong\u003e时包最先到达的地方\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eLOCAL_OUT\u003c/code\u003e 是\u003cstrong\u003e本机主动和外部建连\u003c/strong\u003e时包最先到达的地方\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePOST_ROUTING\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eLOCAL_IN\u003c/code\u003e：\u003cstrong\u003e\u003cmark\u003e调用 nf_conntrack_confirm() 将 nf_conntrack_in() 创建的连接移到 confirmed list\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n    \u003cp\u003e同样要问，为什么在这两个 hook 点呢？因为如果新连接的第一个包没有被丢弃，那这\n是它们\u003cstrong\u003e离开 netfilter 之前的最后 hook 点\u003c/strong\u003e：\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e\u003cstrong\u003e外部主动和本机建连\u003c/strong\u003e的包，如果在中间处理中没有被丢弃，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eLOCAL_IN\u003c/code\u003e\n是其被送到应用（例如 nginx 服务）之前的最后 hook 点\u003c/li\u003e\n      \u003cli\u003e\u003cstrong\u003e本机主动和外部建连\u003c/strong\u003e的包，如果在中间处理中没有被丢弃，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePOST_ROUTING\u003c/code\u003e\n是其离开主机时的最后 hook 点\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e下面的代码可以看到\u003cstrong\u003e\u003cmark\u003e这些 handler 是如何注册到 Netfilter hook 点的\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/netfilter/nf_conntrack_proto.c\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Connection tracking may drop packets, but never alters them, so make it the first hook.  */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_hook_ops\u003c/span\u003e \u003cspan class=\"n\"\u003eipv4_conntrack_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehook\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eipv4_conntrack_in\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e       \u003cspan class=\"c1\"\u003e// 调用 nf_conntrack_in() 进入连接跟踪\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epf\u003c/span\u003e          \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNFPROTO_IPV4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehooknum\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_INET_PRE_ROUTING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// PRE_ROUTING hook 点\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epriority\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_IP_PRI_CONNTRACK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehook\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eipv4_conntrack_local\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// 调用 nf_conntrack_in() 进入连接跟踪\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epf\u003c/span\u003e          \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNFPROTO_IPV4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehooknum\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_INET_LOCAL_OUT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e       \u003cspan class=\"c1\"\u003e// LOCAL_OUT hook 点\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epriority\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_IP_PRI_CONNTRACK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehook\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eipv4_confirm\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// 调用 nf_conntrack_confirm()\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epf\u003c/span\u003e          \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNFPROTO_IPV4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehooknum\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_INET_POST_ROUTING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// POST_ROUTING hook 点\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epriority\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_IP_PRI_CONNTRACK_CONFIRM\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehook\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eipv4_confirm\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// 调用 nf_conntrack_confirm()\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epf\u003c/span\u003e          \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNFPROTO_IPV4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehooknum\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_INET_LOCAL_IN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// LOCAL_IN hook 点\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epriority\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_IP_PRI_CONNTRACK_CONFIRM\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_in()\u003c/code\u003e 是\u003cstrong\u003e\u003cmark\u003e连接跟踪模块的核心\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/netfilter/nf_conntrack_core.c\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003cspan class=\"nf\"\u003enf_conntrack_in\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eu_int8_t\u003c/span\u003e \u003cspan class=\"n\"\u003epf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ehooknum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etmpl\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_ct_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 获取 skb 对应的 conntrack_info 和连接记录\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etmpl\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eIP_CT_UNTRACKED\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// 如果记录存在，或者是不需要跟踪的类型\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003etmpl\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003enf_ct_is_template\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etmpl\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eIP_CT_UNTRACKED\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eNF_CT_STAT_INC_ATOMIC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eignore\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// 无需跟踪的类型，增加 ignore 计数\u003c/span\u003e\n          \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_ACCEPT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                       \u003cspan class=\"c1\"\u003e// 返回 NF_ACCEPT，继续后面的处理\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003e_nfct\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                             \u003cspan class=\"c1\"\u003e// 不属于 ignore 类型，计数器置零，准备后续处理\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_l4proto\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003el4proto\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__nf_ct_l4proto_find\u003c/span\u003e\u003cspan class=\"p\"\u003e(...);\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// 提取协议相关的 L4 头信息\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el4proto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e                   \u003cspan class=\"c1\"\u003e// skb 的完整性和合法性验证\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el4proto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etmpl\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edataoff\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehooknum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eNF_CT_STAT_INC_ATOMIC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eNF_CT_STAT_INC_ATOMIC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einvalid\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n          \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nl\"\u003erepeat:\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// 开始连接跟踪：提取 tuple；创建新连接记录，或者更新已有连接的状态\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eresolve_normal_ct\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etmpl\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...\u003c/span\u003e \u003cspan class=\"n\"\u003el4proto\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003el4proto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epacket\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edataoff\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 进行一些协议相关的处理，例如 UDP 会更新 timeout\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eIP_CT_ESTABLISHED_REPLY\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003etest_and_set_bit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIPS_SEEN_REPLY_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estatus\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n      \u003cspan class=\"n\"\u003enf_conntrack_event_cache\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIPCT_REPLY\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nl\"\u003eout:\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etmpl\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003enf_ct_put\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etmpl\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 解除对连接记录 tmpl 的引用\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e大致流程：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e尝试获取这个 skb 对应的连接跟踪记录\u003c/li\u003e\n  \u003cli\u003e判断是否需要对这个包做连接跟踪，如果不需要，更新 ignore 计数（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003econntrack -S\u003c/code\u003e 能看到这个计数），\n返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_ACCEPT\u003c/code\u003e；如果需要，就\u003cstrong\u003e初始化这个 skb 的引用计数\u003c/strong\u003e。\u003c/li\u003e\n  \u003cli\u003e从包的 L4 header 中提取信息，初始化协议相关的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conntrack_l4proto {}\u003c/code\u003e\n变量，其中包含了该协议的\u003cstrong\u003e连接跟踪相关的回调方法\u003c/strong\u003e。\u003c/li\u003e\n  \u003cli\u003e调用该协议的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eerror()\u003c/code\u003e 方法检查包的完整性、校验和等信息。\u003c/li\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eresolve_normal_ct()\u003c/code\u003e \u003cstrong\u003e开始连接跟踪\u003c/strong\u003e，它会创建新 tuple，新 conntrack entry，或者更新已有连接的状态。\u003c/li\u003e\n  \u003cli\u003e调用该协议的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epacket()\u003c/code\u003e 方法进行一些协议相关的处理，例如对于 UDP，如果\nstatus bit 里面设置了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIPS_SEEN_REPLY\u003c/code\u003e 位，就会更新 timeout。timeout 大小和协\n议相关，越小越越可以防止 DoS 攻击（DoS 的基本原理就是将机器的可用连接耗尽）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"37-init_conntrack创建新连接记录\"\u003e3.7 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einit_conntrack()\u003c/code\u003e：创建新连接记录\u003c/h2\u003e\n\n\u003cp\u003e如果连接不存在（flow 的第一个包），\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eresolve_normal_ct()\u003c/code\u003e 会调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einit_conntrack\u003c/code\u003e\n，后者进而会调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enew()\u003c/code\u003e 方法创建一个新的 conntrack entry。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/net/netfilter/nf_conntrack_core.c\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Allocate a new conntrack\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003enoinline\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_tuple_hash\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\n\u003cspan class=\"nf\"\u003einit_conntrack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etmpl\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n           \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_tuple\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n           \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_l4proto\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003el4proto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n           \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003edataoff\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"n\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// 从 conntrack table 中分配一个 entry，如果哈希表满了，会在内核日志中打印\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// \u0026#34;nf_conntrack: table full, dropping packet\u0026#34; 信息，通过 `dmesg -T` 能看到\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ect\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__nf_conntrack_alloc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ezone\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003erepl_tuple\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eGFP_ATOMIC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003el4proto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edataoff\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 协议相关的方法\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003elocal_bh_disable\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e             \u003cspan class=\"c1\"\u003e// 关闭软中断\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexpect_count\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eexp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_ct_find_expectation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ezone\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"cm\"\u003e/* Welcome, Mr. Bond.  We\u0026#39;ve been expecting you... */\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e__set_bit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIPS_EXPECTED_BIT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estatus\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n            \u003cspan class=\"cm\"\u003e/* exp-\u0026gt;master safe, refcnt bumped in nf_ct_find_expectation */\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emaster\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emaster\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emark\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emaster\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emark\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esecmark\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emaster\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esecmark\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eNF_CT_STAT_INC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexpect_new\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Now it is inserted into the unconfirmed list, bump refcount */\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// 至此这个新的 conntrack entry 已经被插入 unconfirmed list\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enf_conntrack_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ect_general\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enf_ct_add_to_unconfirmed_list\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003elocal_bh_enable\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e              \u003cspan class=\"c1\"\u003e// 重新打开软中断\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eexpectfn\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eexpectfn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003enf_ct_expect_put\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etuplehash\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eIP_CT_DIR_ORIGINAL\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e每种协议需要实现自己的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003el4proto-\u0026gt;new()\u003c/code\u003e 方法，代码见：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet/netfilter/nf_conntrack_proto_*.c\u003c/code\u003e。\n例如 TCP 协议对应的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enew()\u003c/code\u003e 方法是：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/netfilter/nf_conntrack_proto_tcp.c\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Called when a new connection for this protocol found. */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003etcp_new\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003edataoff\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enew_state\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eTCP_CONNTRACK_SYN_SENT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ememset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etcp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etcp\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* SYN packet */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etcp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eseen\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003etd_end\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esegment_seq_plus_len\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003entohl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eth\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eseq\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edataoff\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etcp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eseen\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003etd_maxwin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003entohs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eth\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ewindow\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果当前包会影响后面包的状态判断，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einit_conntrack()\u003c/code\u003e 会设置 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conn\u003c/code\u003e\n的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emaster\u003c/code\u003e 字段。面向连接的协议会用到这个特性，例如 TCP。\u003c/p\u003e\n\n\u003ch2 id=\"38-nf_conntrack_confirm确认包没有被丢弃\"\u003e3.8 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_confirm()\u003c/code\u003e：确认包没有被丢弃\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_in()\u003c/code\u003e 创建的新 conntrack entry 会插入到一个 \u003cstrong\u003e未确认连接\u003c/strong\u003e（\nunconfirmed connection）列表。\u003c/p\u003e\n\n\u003cp\u003e如果这个包之后没有被丢弃，那它在经过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePOST_ROUTING\u003c/code\u003e 时会被\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_confirm()\u003c/code\u003e 方法处理，原理我们在分析过了 3.6 节的开头分析过了。\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_confirm()\u003c/code\u003e 完成之后，状态就变为了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIPS_CONFIRMED\u003c/code\u003e，并且连接记录从\n\u003cstrong\u003e未确认列表\u003c/strong\u003e移到\u003cstrong\u003e正常\u003c/strong\u003e的列表。\u003c/p\u003e\n\n\u003cp\u003e之所以把创建一个新 entry 的过程分为创建（new）和确认（confirm）两个阶段\n，是因为\u003cstrong\u003e\u003cmark\u003e包在经过 nf_conntrack_in() 之后，到达 nf_conntrack_confirm() 之前\n，可能会被内核丢弃\u003c/mark\u003e\u003c/strong\u003e。这样会导致系统残留大量的半连接状态记录，在性能和安全性上都\n是很大问题。分为两步之后，可以加快半连接状态 conntrack entry 的 GC。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/net/netfilter/nf_conntrack_core.h\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Confirm a connection: returns NF_DROP if packet must be dropped. */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003enf_conntrack_confirm\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eskb_nfct\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_ACCEPT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003enf_ct_is_confirmed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__nf_conntrack_confirm\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_ACCEPT\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"n\"\u003enf_ct_deliver_cached_events\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003econfirm 逻辑，省略了各种错误处理逻辑：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/netfilter/nf_conntrack_core.c\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Confirm a connection given skb; places it in hash table */\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003cspan class=\"nf\"\u003e__nf_conntrack_confirm\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ect\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_ct_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003elocal_bh_disable\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e               \u003cspan class=\"c1\"\u003e// 关闭软中断\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ehash\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etuplehash\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eIP_CT_DIR_REPLY\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003ehnnode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epprev\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ereply_hash\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehash_conntrack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etuplehash\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eIP_CT_DIR_REPLY\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003enfct_time_stamp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 更新连接超时时间，超时后会被 GC\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eatomic_inc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ect_general\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 设置连接引用计数？\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estatus\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_CONFIRMED\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"c1\"\u003e// 设置连接状态为 confirmed\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003e__nf_conntrack_hash_insert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ereply_hash\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 插入到连接跟踪哈希表\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003elocal_bh_enable\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e                \u003cspan class=\"c1\"\u003e// 重新打开软中断\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003enf_conntrack_event_cache\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emaster_ct\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eIPCT_RELATED\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eIPCT_NEW\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_ACCEPT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，\u003cstrong\u003e\u003cmark\u003e连接跟踪的处理逻辑中需要频繁关闭和打开软中断\u003c/mark\u003e\u003c/strong\u003e，此外还有各种锁，\n这是短连高并发场景下连接跟踪性能损耗的主要原因？。\u003c/p\u003e\n\n\u003ch1 id=\"4-netfilter-nat-实现\"\u003e4 Netfilter NAT 实现\u003c/h1\u003e\n\n\u003cp\u003eNAT 是与连接跟踪独立的模块。\u003c/p\u003e\n\n\u003ch2 id=\"41-重要数据结构和函数\"\u003e4.1 重要数据结构和函数\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e重要数据结构：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e支持 NAT 的协议需要实现其中的方法：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_nat_l3proto {}\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_nat_l4proto {}\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e重要函数：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_nat_inet_fn()\u003c/code\u003e：NAT 的核心函数，在\u003cstrong\u003e\u003cmark\u003e除 NF_INET_FORWARD 之外的其他 hook 点都会被调用\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"42-nat-模块初始化\"\u003e4.2 NAT 模块初始化\u003c/h2\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/netfilter/nf_nat_core.c\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_hook\u003c/span\u003e \u003cspan class=\"n\"\u003enat_hook\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse_nat_setup\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enfnetlink_parse_nat_setup\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edecode_session\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__nf_nat_decode_session\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emanip_pkt\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_manip_pkt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e__init\u003c/span\u003e \u003cspan class=\"nf\"\u003enf_nat_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enf_nat_bysource\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_ct_alloc_hashtable\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003enf_nat_htable_size\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003enf_ct_helper_expectfn_register\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003efollow_master_nat\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eRCU_INIT_POINTER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enf_nat_hook\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003enat_hook\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eMODULE_LICENSE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;GPL\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003emodule_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enf_nat_init\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"43-struct-nf_nat_l3proto-协议相关的-nat-方法集\"\u003e4.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_nat_l3proto {}\u003c/code\u003e：协议相关的 NAT 方法集\u003c/h2\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/net/netfilter/nf_nat_l3proto.h\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_l3proto\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu8\u003c/span\u003e    \u003cspan class=\"n\"\u003el3proto\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 例如，AF_INET\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eu32\u003c/span\u003e     \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esecure_port\u003c/span\u003e    \u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_tuple\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e__be16\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebool\u003c/span\u003e    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emanip_pkt\u003c/span\u003e      \u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecsum_update\u003c/span\u003e    \u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecsum_recalc\u003c/span\u003e    \u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eu8\u003c/span\u003e \u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edecode_session\u003c/span\u003e \u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e     \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enlattr_to_range\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enlattr\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etb\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_range2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"44-struct-nf_nat_l4proto-协议相关的-nat-方法集\"\u003e4.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_nat_l4proto {}\u003c/code\u003e：协议相关的 NAT 方法集\u003c/h2\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/net/netfilter/nf_nat_l4proto.h\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_l4proto\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu8\u003c/span\u003e \u003cspan class=\"n\"\u003el4proto\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Protocol number，例如 IPPROTO_UDP, IPPROTO_TCP\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// 根据传入的 tuple 和 NAT 类型（SNAT/DNAT）修改包的 L3/L4 头\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emanip_pkt\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003el3proto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emaniptype\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// 创建一个唯一的 tuple\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// 例如对于 UDP，会根据 src_ip, dst_ip, src_port 加一个随机数生成一个 16bit 的 dst_port\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eunique_tuple\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003el3proto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_range2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emaniptype\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// If the address range is exhausted the NAT modules will begin to drop packets.\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enlattr_to_range\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enlattr\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etb\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_range2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e各协议实现的方法，见：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet/netfilter/nf_nat_proto_*.c\u003c/code\u003e。例如 TCP 的实现：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/netfilter/nf_nat_proto_tcp.c\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_l4proto\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_l4proto_tcp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003el4proto\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eIPPROTO_TCP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emanip_pkt\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_manip_pkt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ein_range\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_l4proto_in_range\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eunique_tuple\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_unique_tuple\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enlattr_to_range\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_l4proto_nlattr_to_range\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"45-nf_nat_inet_fn进入-nat\"\u003e4.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_nat_inet_fn()\u003c/code\u003e：进入 NAT\u003c/h2\u003e\n\n\u003cp\u003eNAT 的核心函数是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_nat_inet_fn()\u003c/code\u003e，它会在以下 hook 点被调用：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_INET_PRE_ROUTING\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_INET_POST_ROUTING\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_INET_LOCAL_OUT\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_INET_LOCAL_IN\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e也就是除了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_INET_FORWARD\u003c/code\u003e 之外其他 hook 点都会被调用。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003e在这些 hook 点的优先级\u003c/mark\u003e\u003c/strong\u003e：\u003cstrong\u003eConntrack \u0026gt; NAT \u0026gt; Packet Filtering\u003c/strong\u003e。\n\u003cstrong\u003e连接跟踪的优先级高于 NAT\u003c/strong\u003e 是因为 NAT 依赖连接跟踪的结果。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/conntrack/hook-to-nat.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. NAT\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003cspan class=\"nf\"\u003enf_nat_inet_fn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epriv\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_hook_state\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ect\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_ct_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// conntrack 不存在就做不了 NAT，直接返回，这也是我们为什么说 NAT 依赖 conntrack 的结果\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_ACCEPT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003enat\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enfct_nat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eIP_CT_RELATED\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eIP_CT_RELATED_REPLY\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* Only ICMPs can be IP_CT_IS_REPLY.  Fallthrough */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eIP_CT_NEW\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* Seen it before? This can happen for loopback, retrans, or local packets. */\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003enf_nat_initialized\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emaniptype\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_hook_entries\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ercu_dereference\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elpriv\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eentries\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 获取所有 NAT 规则\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003enull_bind\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enum_hook_entries\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 依次执行 NAT 规则\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehooks\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003ehook\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehooks\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003epriv\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_ACCEPT\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                         \u003cspan class=\"c1\"\u003e// 任何规则返回非 NF_ACCEPT，就停止当前处理\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enf_nat_initialized\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emaniptype\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003edo_nat\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"nl\"\u003enull_bind:\u003c/span\u003e\n            \u003cspan class=\"n\"\u003enf_nat_alloc_null_binding\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehook\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Already setup manip\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enf_nat_oif_changed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehook\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enat\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eoif_changed\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"nl\"\u003edefault:\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* ESTABLISHED */\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enf_nat_oif_changed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehook\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enat\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eoif_changed\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"nl\"\u003edo_nat:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_packet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehook\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nl\"\u003eoif_changed:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enf_ct_kill_acct\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_DROP\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e首先查询 conntrack 记录，如果不存在，就意味着无法跟踪这个连接，那就更不可能做\nNAT 了，因此直接返回。\u003c/p\u003e\n\n\u003cp\u003e如果找到了 conntrack 记录，并且是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP_CT_RELATED\u003c/code\u003e、\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP_CT_RELATED_REPLY\u003c/code\u003e 或\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP_CT_NEW\u003c/code\u003e 状态，就去获取 NAT 规则。如果没有规则，直接返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_ACCEPT\u003c/code\u003e，对包不\n做任何改动；如果有规则，最后执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_nat_packet\u003c/code\u003e，这个函数会进一步调用\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emanip_pkt\u003c/code\u003e 完成对包的修改，如果失败，包将被丢弃。\u003c/p\u003e\n\n\u003ch3 id=\"masquerade\"\u003eMasquerade\u003c/h3\u003e\n\n\u003cp\u003eNAT 模块\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e一般配置方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eChange IP1 to IP2 if matching XXX\u003c/code\u003e。\u003c/li\u003e\n  \u003cli\u003e高级配置方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eChange IP1 to dev1\u0026#39;s IP if matching XXX\u003c/code\u003e，这种方式称为 Masquerade。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eMasquerade 优缺点：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e优点：\u003cstrong\u003e\u003cmark\u003e当设备（网卡）的 IP 地址发生变化时，NAT 规则无需做任何修改\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n  \u003cli\u003e缺点：\u003cstrong\u003e\u003cmark\u003e性能比第一种方式要差\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"46-nf_nat_packet执行-nat\"\u003e4.6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_nat_packet()\u003c/code\u003e：执行 NAT\u003c/h2\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/netfilter/nf_nat_core.c\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Do packet manipulations according to nf_nat_setup_info. */\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003enf_nat_packet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003eip_conntrack_info\u003c/span\u003e \u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n               \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ehooknum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_manip_type\u003c/span\u003e \u003cspan class=\"n\"\u003emtype\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHOOK2MANIP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehooknum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003eip_conntrack_dir\u003c/span\u003e \u003cspan class=\"n\"\u003edir\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCTINFO2DIR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003everdict\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_ACCEPT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003estatusbit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emtype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_NAT_MANIP_SRC\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_SRC_NAT\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_DST_NAT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edir\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eIP_CT_DIR_REPLY\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// Invert if this is reply dir\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estatusbit\u003c/span\u003e \u003cspan class=\"o\"\u003e^=\u003c/span\u003e \u003cspan class=\"n\"\u003eIPS_NAT_MASK\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estatus\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estatusbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// Non-atomic: these bits don\u0026#39;t change. */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003everdict\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_manip_pkt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emtype\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edir\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003everdict\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003enf_nat_manip_pkt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                     \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003enf_nat_manip_type\u003c/span\u003e \u003cspan class=\"n\"\u003emtype\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003eip_conntrack_dir\u003c/span\u003e \u003cspan class=\"n\"\u003edir\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enf_conntrack_tuple\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* We are aiming to look like inverse of other direction. */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enf_ct_invert_tuplepr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ect\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etuplehash\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003edir\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003el3proto\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__nf_nat_l3proto_find\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003el3num\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003el4proto\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__nf_nat_l4proto_find\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003el3num\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprotonum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003el3proto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emanip_pkt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003el4proto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emtype\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 协议相关处理\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_DROP\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_ACCEPT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"5-配置和监控\"\u003e5. 配置和监控\u003c/h1\u003e\n\n\u003ch2 id=\"51-查看加载卸载-nf_conntrack-模块\"\u003e5.1 查看/加载/卸载 nf_conntrack 模块\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emodinfo nf_conntrack\nfilename:       /lib/modules/5.15.0-46-generic/kernel/net/netfilter/nf_conntrack.ko\nlicense:        GPL\n\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e:          nf_conntrack-10\n\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e:          nf_conntrack-2\n\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e:          ip_conntrack\nsrcversion:     30B45E5822722ACEDE23A4B\ndepends:        nf_defrag_ipv6,libcrc32c,nf_defrag_ipv4\nretpoline:      Y\nintree:         Y\nname:           nf_conntrack\nvermagic:       5.15.0-46-generic SMP mod_unload modversions\nsig_id:         PKCS#7\nsigner:         Build \u003cspan class=\"nb\"\u003etime \u003c/span\u003eautogenerated kernel key\nsig_key:        17:6F:92:2F:58:6B:B2:28:13:DC:71:DC:5A:97:EE:BA:D8:4B:C7:DE\nsig_hashalgo:   sha512\nsignature:      0B:32:AA:93:F4:31:52:9C:FE:0D:80:B4:F6:7C:30:63:4C:F6:03:AA:\n                ...\n                E9:1F:45:C6:77:C2:29:99:B4:3D:1A:D2\nparm:           tstamp:Enable connection tracking flow timestamping. \u003cspan class=\"o\"\u003e(\u003c/span\u003ebool\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nparm:           acct:Enable connection tracking flow accounting. \u003cspan class=\"o\"\u003e(\u003c/span\u003ebool\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nparm:           nf_conntrack_helper:Enable automatic conntrack helper assignment \u003cspan class=\"o\"\u003e(\u003c/span\u003edefault 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003ebool\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nparm:           expect_hashsize:uint\nparm:           enable_hooks:Always \u003cspan class=\"nb\"\u003eenable \u003c/span\u003econntrack hooks \u003cspan class=\"o\"\u003e(\u003c/span\u003ebool\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e卸载：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ermmod nf_conntrack_netlink nf_conntrack\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e重新加载：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emodprobe nf_conntrack\n\n\u003cspan class=\"c\"\u003e# 加载时还可以指定额外的配置参数，例如：\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emodprobe nf_conntrack \u003cspan class=\"nv\"\u003enf_conntrack_helper\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003eexpect_hashsize\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e131072\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"52-sysctl-配置项\"\u003e5.2 sysctl 配置项\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003esysctl \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003enf_conntrack\nnet.netfilter.nf_conntrack_acct \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0\nnet.netfilter.nf_conntrack_buckets \u003cspan class=\"o\"\u003e=\u003c/span\u003e 262144                 \u003cspan class=\"c\"\u003e# hashsize = nf_conntrack_max/nf_conntrack_buckets\u003c/span\u003e\nnet.netfilter.nf_conntrack_checksum \u003cspan class=\"o\"\u003e=\u003c/span\u003e 1\nnet.netfilter.nf_conntrack_count \u003cspan class=\"o\"\u003e=\u003c/span\u003e 2148\n... \u003cspan class=\"c\"\u003e# DCCP options\u003c/span\u003e\nnet.netfilter.nf_conntrack_events \u003cspan class=\"o\"\u003e=\u003c/span\u003e 1\nnet.netfilter.nf_conntrack_expect_max \u003cspan class=\"o\"\u003e=\u003c/span\u003e 1024\n... \u003cspan class=\"c\"\u003e# IPv6 options\u003c/span\u003e\nnet.netfilter.nf_conntrack_generic_timeout \u003cspan class=\"o\"\u003e=\u003c/span\u003e 600\nnet.netfilter.nf_conntrack_helper \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0\nnet.netfilter.nf_conntrack_icmp_timeout \u003cspan class=\"o\"\u003e=\u003c/span\u003e 30\nnet.netfilter.nf_conntrack_log_invalid \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0\nnet.netfilter.nf_conntrack_max \u003cspan class=\"o\"\u003e=\u003c/span\u003e 1048576                    \u003cspan class=\"c\"\u003e# conntrack table size\u003c/span\u003e\n... \u003cspan class=\"c\"\u003e# SCTP options\u003c/span\u003e\nnet.netfilter.nf_conntrack_tcp_be_liberal \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0\nnet.netfilter.nf_conntrack_tcp_loose \u003cspan class=\"o\"\u003e=\u003c/span\u003e 1\nnet.netfilter.nf_conntrack_tcp_max_retrans \u003cspan class=\"o\"\u003e=\u003c/span\u003e 3\nnet.netfilter.nf_conntrack_tcp_timeout_close \u003cspan class=\"o\"\u003e=\u003c/span\u003e 10\nnet.netfilter.nf_conntrack_tcp_timeout_close_wait \u003cspan class=\"o\"\u003e=\u003c/span\u003e 60\nnet.netfilter.nf_conntrack_tcp_timeout_established \u003cspan class=\"o\"\u003e=\u003c/span\u003e 21600\nnet.netfilter.nf_conntrack_tcp_timeout_fin_wait \u003cspan class=\"o\"\u003e=\u003c/span\u003e 120\nnet.netfilter.nf_conntrack_tcp_timeout_last_ack \u003cspan class=\"o\"\u003e=\u003c/span\u003e 30\nnet.netfilter.nf_conntrack_tcp_timeout_max_retrans \u003cspan class=\"o\"\u003e=\u003c/span\u003e 300\nnet.netfilter.nf_conntrack_tcp_timeout_syn_recv \u003cspan class=\"o\"\u003e=\u003c/span\u003e 60\nnet.netfilter.nf_conntrack_tcp_timeout_syn_sent \u003cspan class=\"o\"\u003e=\u003c/span\u003e 120\nnet.netfilter.nf_conntrack_tcp_timeout_time_wait \u003cspan class=\"o\"\u003e=\u003c/span\u003e 120\nnet.netfilter.nf_conntrack_tcp_timeout_unacknowledged \u003cspan class=\"o\"\u003e=\u003c/span\u003e 300\nnet.netfilter.nf_conntrack_timestamp \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0\nnet.netfilter.nf_conntrack_udp_timeout \u003cspan class=\"o\"\u003e=\u003c/span\u003e 30\nnet.netfilter.nf_conntrack_udp_timeout_stream \u003cspan class=\"o\"\u003e=\u003c/span\u003e 180\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"53-监控\"\u003e5.3 监控\u003c/h2\u003e\n\n\u003ch3 id=\"丢包监控\"\u003e丢包监控\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/net/stat\u003c/code\u003e 下面有一些关于 conntrack 的详细统计：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/net/stat/nf_conntrack\nentries   searched found    new      invalid  ignore   delete   delete_list insert   insert_failed drop     early_drop icmp_error  expect_new expect_create expect_delete search_restart\n000008e3  00000000 00000000 00000000 0000309d 001e72d4 00000000 00000000    00000000 00000000      00000000 00000000   000000ee    00000000   00000000      00000000       000368d7\n000008e3  00000000 00000000 00000000 00007301 002b8e8c 00000000 00000000    00000000 00000000      00000000 00000000   00000170    00000000   00000000      00000000       00035794\n000008e3  00000000 00000000 00000000 00001eea 001e6382 00000000 00000000    00000000 00000000      00000000 00000000   00000059    00000000   00000000      00000000       0003f166\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e此外，还可以用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econntrack\u003c/code\u003e 命令：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003econntrack \u003cspan class=\"nt\"\u003e-S\u003c/span\u003e\n\u003cspan class=\"nv\"\u003ecpu\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0   \u003cspan class=\"nv\"\u003efound\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003einvalid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e743150 \u003cspan class=\"nv\"\u003eignore\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e238069 \u003cspan class=\"nv\"\u003einsert\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003einsert_failed\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003edrop\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e195603 \u003cspan class=\"nv\"\u003eearly_drop\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e118583 \u003cspan class=\"nv\"\u003eerror\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e16 \u003cspan class=\"nv\"\u003esearch_restart\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e22391652\n\u003cspan class=\"nv\"\u003ecpu\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1   \u003cspan class=\"nv\"\u003efound\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003einvalid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2004   \u003cspan class=\"nv\"\u003eignore\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e402790 \u003cspan class=\"nv\"\u003einsert\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003einsert_failed\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003edrop\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e44371  \u003cspan class=\"nv\"\u003eearly_drop\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e34890  \u003cspan class=\"nv\"\u003eerror\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0  \u003cspan class=\"nv\"\u003esearch_restart\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1225447\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003eignore：不需要做连接跟踪的包（回忆前面，只有特定协议的包才会做连接跟踪）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"conntrack-table-使用量监控\"\u003econntrack table 使用量监控\u003c/h3\u003e\n\n\u003cp\u003e可以定期采集系统的 conntrack 使用量，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/sys/net/netfilter/nf_conntrack_count\n257273\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e并与最大值比较：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/sys/net/netfilter/nf_conntrack_max\n262144\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"6-常见问题\"\u003e6. 常见问题\u003c/h1\u003e\n\n\u003ch2 id=\"61-连接太多导致-conntrack-table-被打爆\"\u003e6.1 连接太多导致 conntrack table 被打爆\u003c/h2\u003e\n\n\u003ch3 id=\"现象\"\u003e现象\u003c/h3\u003e\n\n\u003ch4 id=\"业务层应用层现象\"\u003e业务层（应用层）现象\u003c/h4\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e存在随机、偶发的\u003cstrong\u003e\u003cmark\u003e新建连接\u003c/mark\u003e\u003c/strong\u003e超时（connect timeout）。\u003c/p\u003e\n\n    \u003cp\u003e例如，如果业务用的是 Java，那对应的是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejdbc4.CommunicationsException\u003c/code\u003e communications link failure 之类的错误。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003e已有连接\u003c/mark\u003e\u003c/strong\u003e正常。\u003c/p\u003e\n\n    \u003cp\u003e也就是没有 read timeout 或 write timeout 之类的报错，报错都集中为 connect timeout。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4 id=\"网络层现象\"\u003e网络层现象\u003c/h4\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e抓包会看到三次握手的\u003cstrong\u003e\u003cmark\u003e第一个 SYN 包被宿主机静默丢弃了\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n    \u003cp\u003e需要注意的是，常规的网卡统计（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eifconfig\u003c/code\u003e）和内核统计（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/net/softnet_stat\u003c/code\u003e）\n \u003cstrong\u003e\u003cmark\u003e无法反映出这些丢包\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1s+\u003c/code\u003e 之后出发 SYN 重传，或者还没重传连接就关闭了。\u003c/p\u003e\n\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003e第一个 SYN 的重传是 1s，这个是内核代码里写死的，不可配置\u003c/mark\u003e\u003c/strong\u003e（具体实现见 \u003ca href=\"#ch_8.1\"\u003e附录\u003c/a\u003e）。\u003c/p\u003e\n\n    \u003cp\u003e再考虑到其他一些耗时，第一次重传的实际间隔要大于 1s。\n 如果客户端设置的超时时间很小，例如 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1.05s\u003c/code\u003e，那可能来不及重传连接就被关闭了，然后向上层报 connect timeout 错误。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4 id=\"操作系统层现象\"\u003e操作系统层现象\u003c/h4\u003e\n\n\u003cp\u003e内核日志中有如下报错：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edemsg \u003cspan class=\"nt\"\u003e-T\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003eTue Apr  6 18:12:30 2021] nf_conntrack: nf_conntrack: table full, dropping packet\n\u003cspan class=\"o\"\u003e[\u003c/span\u003eTue Apr  6 18:12:30 2021] nf_conntrack: nf_conntrack: table full, dropping packet\n\u003cspan class=\"o\"\u003e[\u003c/span\u003eTue Apr  6 18:12:30 2021] nf_conntrack: nf_conntrack: table full, dropping packet\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e另外，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecat /proc/net/stat/nf_conntrack\u003c/code\u003e 或 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econntrack -S\u003c/code\u003e 能看到有 drop 统计。\u003c/p\u003e\n\n\u003ch3 id=\"确认-conntrack-table-被打爆\"\u003e确认 conntrack table 被打爆\u003c/h3\u003e\n\n\u003cp\u003e遇到以上现象，基本就是 conntrack 表被打爆了。确认：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/sys/net/netfilter/nf_conntrack_count\n257273\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/sys/net/netfilter/nf_conntrack_max\nnet.netfilter.nf_conntrack_max \u003cspan class=\"o\"\u003e=\u003c/span\u003e 262144\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果有 conntrack count 监控会看的更清楚，因为我们命令行查看时，高峰可能过了。\u003c/p\u003e\n\n\u003ch3 id=\"解决方式\"\u003e解决方式\u003c/h3\u003e\n\n\u003cp\u003e优先级从高到低：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e调大 conntrack 表\u003c/p\u003e\n\n    \u003cp\u003e运行时配置（经实际测试，\u003cstrong\u003e不会对现有连接造成影响\u003c/strong\u003e）：\u003c/p\u003e\n\n    \u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003esysctl \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e net.netfilter.nf_conntrack_max\u003cspan class=\"o\"\u003e=\u003c/span\u003e524288\n \u003cspan class=\"nv\"\u003e$ \u003c/span\u003esysctl \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e net.netfilter.nf_conntrack_buckets\u003cspan class=\"o\"\u003e=\u003c/span\u003e131072 \u003cspan class=\"c\"\u003e# 推荐配置 hashsize=nf_conntrack_count/4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e    \u003c/div\u003e\n\n    \u003cp\u003e持久化配置：\u003c/p\u003e\n\n    \u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;net.netfilter.nf_conntrack_max = 524288\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e /etc/sysctl.conf\n \u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;net.netfilter.nf_conntrack_buckets = 131072\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e /etc/sysctl.conf\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e    \u003c/div\u003e\n\n    \u003cp\u003e影响：连接跟踪模块\u003cstrong\u003e\u003cmark\u003e会多用一些内存\u003c/mark\u003e\u003c/strong\u003e。具体多用多少内存，可参考 \u003ca href=\"#ch_8.2\"\u003e附录\u003c/a\u003e。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e减小 GC 时间\u003c/p\u003e\n\n    \u003cp\u003e还可以调小 conntrack 的 GC（也叫 timeout）时间，加快过期 entry 的回收。\u003c/p\u003e\n\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack\u003c/code\u003e 针对不同 TCP 状态（established、fin_wait、time_wait 等）的 entry 有不同的 GC 时间。\u003c/p\u003e\n\n    \u003cp\u003e例如，\u003cstrong\u003e\u003cmark\u003e默认的 established 状态的 GC 时间是 423000s（5 天）\u003c/mark\u003e\u003c/strong\u003e。设置成这么长的\n \u003cstrong\u003e可能原因\u003c/strong\u003e是：TCP/IP 协议中允许 established 状态的连接无限期不发送任何东西（但仍然活着）\n [8]，协议的具体实现（Linux、BSD、Windows 等）会设置各自允许的最大 idle timeout。为防止\n GC 掉这样长时间没流量但实际还活着的连接，就设置一个足够保守的\n timeout 时间。[8] 中建议这个值不小于 2 小时 4 分钟（作为对比和参考，\n \u003cstrong\u003e\u003cmark\u003eCilium 自己实现的 CT 中，默认 established GC 是 6 小时\u003c/mark\u003e\u003c/strong\u003e）。\n 但也能看到一些厂商推荐比这个小得多的配置，例如 20 分钟。\u003c/p\u003e\n\n    \u003cp\u003e如果对自己的网络环境和需求非常清楚，那可以将这个时间调到一个合理的、足够小的值；\n 如果不是非常确定的话，还是\u003cstrong\u003e\u003cmark\u003e建议保守一些，例如设置 6 个小时\u003c/mark\u003e\u003c/strong\u003e —— 这已经比默认值 5 天小多了。\u003c/p\u003e\n\n    \u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003esysctl \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e net.netfilter.nf_conntrack_tcp_timeout_established \u003cspan class=\"o\"\u003e=\u003c/span\u003e 21600\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e    \u003c/div\u003e\n\n    \u003cp\u003e持久化：\u003c/p\u003e\n\n    \u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;net.netfilter.nf_conntrack_tcp_timeout_established = 21600\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e /etc/sysctl.conf\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e    \u003c/div\u003e\n\n    \u003cp\u003e其他几个 timeout 值（尤其是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_tcp_timeout_time_wait\u003c/code\u003e，默认 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e120s\u003c/code\u003e）也可以适当调小，\n 但还是那句话：\u003cstrong\u003e如果不确定潜在后果，千万不要激进地调小\u003c/strong\u003e。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"7-总结\"\u003e7. 总结\u003c/h1\u003e\n\n\u003cp\u003e连接跟踪是一个非常基础且重要的网络模块，但只有在少数场景下才会引起普通开发者的注意。\u003c/p\u003e\n\n\u003cp\u003e例如，L4LB 短时高并发场景下，LB 节点每秒接受大量并发短连接，可能导致 conntrack\ntable 被打爆。此时的现象是：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e客户端和 L4LB 建连失败，失败可能是随机的，也可能是集中在某些时间点。\u003c/li\u003e\n  \u003cli\u003e客户端重试可能会成功，也可能会失败。\u003c/li\u003e\n  \u003cli\u003e在 L4LB 节点抓包看，客户端过来的 TCP SYNC 包 L4LB 收到了，但没有回 ACK。即，包\n被静默丢弃了（silently dropped）。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e此时的原因可能是 conntrack table 太小，也可能是 GC 不够及\n时，甚至是 \u003ca href=\"https://github.com/cilium/cilium/pull/12729\"\u003eGC 有bug\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch1 id=\"8-附录\"\u003e8. 附录\u003c/h1\u003e\n\n\u003cp\u003e\u003ca name=\"ch_8.1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"81-第一个-syn-包的重传间隔计算linux-419118-实现\"\u003e8.1 第一个 SYN 包的重传间隔计算（Linux 4.19.118 实现）\u003c/h2\u003e\n\n\u003cp\u003e调用路径：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_connect() -\u0026gt; tcp_connect_init() -\u0026gt; tcp_timeout_init()\u003c/code\u003e。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/ipv4/tcp_output.c\u003c/span\u003e\n\u003cspan class=\"cm\"\u003e/* Do all connect socket setups that can be done AF independent. */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003etcp_connect_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einet_csk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk_rto\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_timeout_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// include/net/tcp.h\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"nf\"\u003etcp_timeout_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// 获取 SYN-RTO：如果这个 socket 上没有 BPF 程序，或者有 BPF 程序但执行失败，都返回 -1\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// 除非用户自己编写 BPF 程序并 attach 到 cgroup/socket，否则这里都是没有 BPF 的，因此这里返回 -1\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_call_bpf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_TIMEOUT_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e                \u003cspan class=\"c1\"\u003e// timeout == -1，接下来使用默认值\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTCP_TIMEOUT_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 宏定义，等于系统的 HZ 数，也就是 1 秒，见下面\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// include/net/tcp.h\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#define TCP_RTO_MAX    ((unsigned)(120*HZ))\n#define TCP_RTO_MIN    ((unsigned)(HZ/5))\n#define TCP_TIMEOUT_MIN    (2U) \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* Min timeout for TCP timers in jiffies */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#define TCP_TIMEOUT_INIT ((unsigned)(1*HZ))    \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* RFC6298 2.1 initial RTO value    */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca name=\"ch_8.2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"82-根据-nf_conntrack_max-计算-conntrack-模块所需的内存\"\u003e8.2 根据 nf_conntrack_max 计算 conntrack 模块所需的内存\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/slabinfo | \u003cspan class=\"nb\"\u003ehead\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/slabinfo | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003econntrack\nslabinfo - version: 2.1\n\u003cspan class=\"c\"\u003e# name            \u0026lt;active_objs\u0026gt; \u0026lt;num_objs\u0026gt; \u0026lt;objsize\u0026gt; \u0026lt;objperslab\u0026gt; \u0026lt;pagesperslab\u0026gt; : tunables \u0026lt;limit\u0026gt; \u0026lt;batchcount\u0026gt; \u0026lt;sharedfactor\u0026gt; : slabdata \u0026lt;active_slabs\u0026gt; \u0026lt;num_slabs\u0026gt; \u0026lt;sharedavail\u0026gt;\u003c/span\u003e\nnf_conntrack      512824 599505    320   51    4 : tunables    0    0    0 : slabdata  11755  11755      0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中的 \u003cstrong\u003e\u003cmark\u003eobjsize 表示这个内核对象\u003c/mark\u003e\u003c/strong\u003e（这里对应的是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct nf_conn\u003c/code\u003e）的大小，\n单位是\u003cstrong\u003e字节\u003c/strong\u003e，所以以上输出表明\u003cstrong\u003e\u003cmark\u003e每个 conntrack entry 占用 320 字节的内存空间\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e如果忽略内存碎片（内存分配单位为 slab），那\u003cstrong\u003e不同 size 的 conntrack table 占用的内存\u003c/strong\u003e如下：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_max=512K\u003c/code\u003e: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e512K * 320Byte = 160MB\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_conntrack_max=1M\u003c/code\u003e: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1M * 320Byte = 320MB\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e更精确的计算，可以参考 [9]。\u003c/p\u003e\n\n\u003ch1 id=\"references\"\u003eReferences\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://wiki.aalto.fi/download/attachments/69901948/netfilter-paper.pdf\"\u003eNetfilter connection tracking and NAT implementation\u003c/a\u003e. Proc.\nSeminar on Network Protocols in Operating Systems, Dept. Commun. and Networking, Aalto Univ. 2013.\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://docs.cilium.io/en/v1.7/gettingstarted/kubeproxy-free/\"\u003eCilium: Kubernetes without kube-proxy\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/k8s-l4lb/\"\u003eL4LB for Kubernetes: Theory and Practice with Cilium+BGP+ECMP\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://docs.docker.com/network/bridge/\"\u003eDocker bridge network mode\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Netfilter\"\u003eWikipedia: Netfilter\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://blog.cloudflare.com/conntrack-tales-one-thousand-and-one-flows/\"\u003eConntrack tales - one thousand and one flows\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://www.redhat.com/en/blog/how-connection-tracking-open-vswitch-helps-openstack-performance\"\u003eHow connection tracking in Open vSwitch helps OpenStack performance\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://tools.ietf.org/html/rfc5382#section-5\"\u003eNAT Behavioral Requirements for TCP\u003c/a\u003e, RFC5382\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://johnleach.co.uk/posts/2009/06/17/netfilter-conntrack-memory-usage/\"\u003eNetfilter Conntrack Memory Usage\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/starbucks-do-not-use-two-phase-commit-zh/\"\u003e\u003cspan\u003e« [译] 星巴克不使用两阶段提交（2004）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/conntrack-design-and-implementation/\"\u003e\u003cspan\u003eConnection Tracking (conntrack): Design and Implementation Inside Linux Kernel »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2020-08-05T00:00:00Z",
  "Author": "Arthur Chiao"
}