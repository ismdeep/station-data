{
  "Source": "arthurchiao.art",
  "Title": "Trip.com: First Step towards Cloud Native Security",
  "Link": "https://arthurchiao.art/blog/trip-first-step-towards-cloud-native-security/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eTrip.com: First Step towards Cloud Native Security\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2021-12-19 | Last Update 2021-12-19\u003c/p\u003e\n  \n  \u003ch2 id=\"tl-dr\"\u003eTL; DR\u003c/h2\u003e\n\n\u003cp\u003eThis post shares our explorations on cloud native securities for Kubernetes\nas well as legacy workloads, with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCiliumNetworkPolicy\u003c/code\u003e for L3/L4 access\ncontrol as the first step.\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#tl-dr\" id=\"markdown-toc-tl-dr\"\u003eTL; DR\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-introduction\" id=\"markdown-toc-1-introduction\"\u003e1 Introduction\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-access-control-in-kubernetes\" id=\"markdown-toc-11-access-control-in-kubernetes\"\u003e1.1 Access control in Kubernetes\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-implementation-and-extension-in-cilium\" id=\"markdown-toc-12-implementation-and-extension-in-cilium\"\u003e1.2 Implementation and extension in Cilium\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-challenges-in-large-deployments\" id=\"markdown-toc-13-challenges-in-large-deployments\"\u003e1.3 Challenges in large deployments\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#14-organization-of-this-post\" id=\"markdown-toc-14-organization-of-this-post\"\u003e1.4 Organization of this post\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-access-control-from-requirements-to-a-solution\" id=\"markdown-toc-2-access-control-from-requirements-to-a-solution\"\u003e2 Access control: from requirements to a solution\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-policy-enforcement-in-a-single-cluster\" id=\"markdown-toc-21-policy-enforcement-in-a-single-cluster\"\u003e2.1 Policy enforcement in a single cluster\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-policy-enforcement-over-multiple-clusters\" id=\"markdown-toc-22-policy-enforcement-over-multiple-clusters\"\u003e2.2 Policy enforcement over multiple clusters\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#221-clustermesh\" id=\"markdown-toc-221-clustermesh\"\u003e2.2.1 ClusterMesh\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#222-kvstoremesh\" id=\"markdown-toc-222-kvstoremesh\"\u003e2.2.2 KVStoreMesh\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-policy-enforcement-over-legacy-clients\" id=\"markdown-toc-23-policy-enforcement-over-legacy-clients\"\u003e2.3 Policy enforcement over legacy clients\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#231-ciliumexternalresource-cer\" id=\"markdown-toc-231-ciliumexternalresource-cer\"\u003e2.3.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCiliumExternalResource\u003c/code\u003e (CER)\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#232-cer-apiserver\" id=\"markdown-toc-232-cer-apiserver\"\u003e2.3.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecer-apiserver\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#233-sum-up-a-hybrid-data-plane\" id=\"markdown-toc-233-sum-up-a-hybrid-data-plane\"\u003e2.3.3 Sum up: a hybrid data plane\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-control-plane\" id=\"markdown-toc-24-control-plane\"\u003e2.4 Control plane\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#241-access-control-policy-acp-modeling\" id=\"markdown-toc-241-access-control-policy-acp-modeling\"\u003e2.4.1 Access control policy (ACP) modeling\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#242-enforcer-specific-adapters\" id=\"markdown-toc-242-enforcer-specific-adapters\"\u003e2.4.2 Enforcer-specific adapters\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#243-push-and-reconcile-policy-to-kubernetes-clusters\" id=\"markdown-toc-243-push-and-reconcile-policy-to-kubernetes-clusters\"\u003e2.4.3 Push (and reconcile) policy to Kubernetes clusters\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#244-integrate-into-cd-platform\" id=\"markdown-toc-244-integrate-into-cd-platform\"\u003e2.4.4 Integrate into CD platform\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#245-sum-up-a-general-control-plane\" id=\"markdown-toc-245-sum-up-a-general-control-plane\"\u003e2.4.5 Sum up: a general control plane\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#25-typical-workflow\" id=\"markdown-toc-25-typical-workflow\"\u003e2.5 Typical workflow\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-rollout-into-production\" id=\"markdown-toc-3-rollout-into-production\"\u003e3 Rollout into production\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-capacity-estimation\" id=\"markdown-toc-31-capacity-estimation\"\u003e3.1 Capacity estimation\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#311-identity-space\" id=\"markdown-toc-311-identity-space\"\u003e3.1.1 Identity space\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#312-identity-allocation-mechanism\" id=\"markdown-toc-312-identity-allocation-mechanism\"\u003e3.1.2 Identity allocation mechanism\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#313-customize-security-relavent-labels\" id=\"markdown-toc-313-customize-security-relavent-labels\"\u003e3.1.3 Customize security relavent labels\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-business-transparency\" id=\"markdown-toc-32-business-transparency\"\u003e3.2 Business transparency\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-fine-grained-policy-audit-mode-toggler\" id=\"markdown-toc-33-fine-grained-policy-audit-mode-toggler\"\u003e3.3 Fine-grained policy audit mode toggler\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#331-resource-level-policy-audit-mode\" id=\"markdown-toc-331-resource-level-policy-audit-mode\"\u003e3.3.1 Resource-level policy audit mode\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#332-survive-reboot-keep-config\" id=\"markdown-toc-332-survive-reboot-keep-config\"\u003e3.3.2 Survive reboot (keep config)\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-white-list-management\" id=\"markdown-toc-34-white-list-management\"\u003e3.4 White-list management\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#341-acp-whitelist\" id=\"markdown-toc-341-acp-whitelist\"\u003e3.4.1 ACP whitelist\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#342-cidr-whitelist\" id=\"markdown-toc-342-cidr-whitelist\"\u003e3.4.2 CIDR whitelist\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#35-custom-configurations\" id=\"markdown-toc-35-custom-configurations\"\u003e3.5 Custom configurations\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#36-logging-monitoring--alerting\" id=\"markdown-toc-36-logging-monitoring--alerting\"\u003e3.6 Logging, monitoring \u0026amp; alerting\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#37-rollout-strategy\" id=\"markdown-toc-37-rollout-strategy\"\u003e3.7 Rollout strategy\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#38-downgrade-on-system-failures\" id=\"markdown-toc-38-downgrade-on-system-failures\"\u003e3.8 Downgrade on system failures\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#39-environments-and-current-deployment-status\" id=\"markdown-toc-39-environments-and-current-deployment-status\"\u003e3.9 Environments and current deployment status\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-discussions\" id=\"markdown-toc-4-discussions\"\u003e4 Discussions\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-clustermesh-vs-kvstoremesh\" id=\"markdown-toc-41-clustermesh-vs-kvstoremesh\"\u003e4.1 ClusterMesh vs. KVStoreMesh\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-cer-vs-cew\" id=\"markdown-toc-42-cer-vs-cew\"\u003e4.2 CER vs. CEW\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#421-pros--cons\" id=\"markdown-toc-421-pros--cons\"\u003e4.2.1 Pros \u0026amp; cons\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#422-cilium-endpoint-vs-ciliumendpoint-vs-externalendpoint\" id=\"markdown-toc-422-cilium-endpoint-vs-ciliumendpoint-vs-externalendpoint\"\u003e4.2.2 Cilium \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEndpoint\u003c/code\u003e vs. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCiliumEndpoint\u003c/code\u003e vs. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eexternalEndpoint\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#43-resource-level-vs-cnp-level-policy-audit-mode\" id=\"markdown-toc-43-resource-level-vs-cnp-level-policy-audit-mode\"\u003e4.3 Resource-level vs. CNP-level policy audit mode\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#44-carrying-identites-async-vs-tunnel-vs-spiffe\" id=\"markdown-toc-44-carrying-identites-async-vs-tunnel-vs-spiffe\"\u003e4.4 Carrying identites: async vs. tunnel vs. SPIFFE\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#45-performance-concerns\" id=\"markdown-toc-45-performance-concerns\"\u003e4.5 Performance concerns\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#46-frequent-bpf-regenerations\" id=\"markdown-toc-46-frequent-bpf-regenerations\"\u003e4.6 Frequent BPF regenerations\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-conclusion-and-future-work\" id=\"markdown-toc-5-conclusion-and-future-work\"\u003e5 Conclusion and future work\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#references\" id=\"markdown-toc-references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003cp\u003eSeveral previous posts have witnessed the evolving of our networking infrastructures in the past years:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"/blog/ctrip-network-arch-evolution/\"\u003eCtrip Network Architecture Evolution in the Cloud Computing Era\u003c/a\u003e, 2019\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/trip-first-step-towards-cloud-native-networking/\"\u003eTrip.com: First Step towards Cloud Native Networking\u003c/a\u003e, 2020\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/trip-stepping-into-cloud-native-networking-era/\"\u003eTrip.com: Stepping into Cloud Native Networking Era with Cilium+BGP\u003c/a\u003e, 2020\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eAs a continuation, this post shares our explorations on cloud native securities.\nSpecifically, we’ll talk about how we are deploying access controls in Kubernetes\nwith Cilium network policies in a consistent way with legacy infrastructures.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eNote: IP addresses, CIDRs, YAMLs and CLI outputs in this post may\nhave been tailored and/or masked, which are only for illustrating purposes.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch1 id=\"1-introduction\"\u003e1 Introduction\u003c/h1\u003e\n\n\u003cp\u003eSome background knowledge about access control in Kubernetes is necessary\nbefore diving into details. If already familiar with those stuffs, you\ncan just fast-forward to section 2.\u003c/p\u003e\n\n\u003ch2 id=\"11-access-control-in-kubernetes\"\u003e1.1 Access control in Kubernetes\u003c/h2\u003e\n\n\u003cp\u003eIn Kubernetes, users can control the \u003cstrong\u003e\u003cmark\u003eL3/L4\u003c/mark\u003e\u003c/strong\u003e (IP/port level)\ntraffic flows of applications with NetworkPolicies.\u003c/p\u003e\n\n\u003cp\u003eA \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicy\u003c/code\u003e describes \u003cstrong\u003e\u003cmark\u003ehow a group of pods should be allowed to\ncommunicate with other entities\u003c/mark\u003e\u003c/strong\u003e at OSI L3/L4,\nwhere the “entities” here can be identified by a combination of the following 3 identifiers:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eOther pods\u003c/mark\u003e\u003c/strong\u003e, e.g. pods with label \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eapp=client\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eNamespaces\u003c/mark\u003e\u003c/strong\u003e, e.g. pods from/to namespace \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edefault\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eIP blocks (CIDRs)\u003c/mark\u003e\u003c/strong\u003e, e.g. traffic from/to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e192.168.1.0/24\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eAn example is depicted in the below,\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-cloud-native-security/k8s-network-policy.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1-1. Access control in Kubernetes with NetworkPolicy\u003c/p\u003e\n\n\u003cp\u003eWe would like all pods that labeled \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erole=backend\u003c/code\u003e (client-side)\nto access the service at \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTCP/6379\u003c/code\u003e of all pods with label \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erole=db\u003c/code\u003e (server-side),\nand also other clients not in this spec should be denied.  Below is a minimal\nNetworkPolicy to achieve the purpose (assuming client \u0026amp; server pods in the\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edefault\u003c/code\u003e namespace):\u003c/p\u003e\n\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enetworking.k8s.io/v1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eNetworkPolicy\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enetwork-policy-allow-backend\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003epodSelector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e             \u003cspan class=\"c1\"\u003e# Targets that this NetworkPolicy will be applied on\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ematchLabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003erole\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edb\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eingress\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e                 \u003cspan class=\"c1\"\u003e# Apply on targets\u0026#39;s ingress traffic\u003c/span\u003e\n  \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003efrom\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003epodSelector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e         \u003cspan class=\"c1\"\u003e# Entities that are allowed to access the targets\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ematchLabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003erole\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ebackend\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eports\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e                 \u003cspan class=\"c1\"\u003e# Allowed proto+port\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eTCP\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eport\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e6379\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWhile Kubernetes defines the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicy\u003c/code\u003e model, it\n\u003cstrong\u003e\u003cmark\u003eleaves the implementation to each networking solution\u003c/mark\u003e\u003c/strong\u003e,\nwhich means that if you’re not using a networking solution that supports\nNetworkPolicy, the policies you applied would have no effect.\u003c/p\u003e\n\n\u003cp\u003eMore information about Kubernetes NetworkPolicy, refer to\n\u003ca href=\"https://kubernetes.io/docs/concepts/services-networking/network-policies/\"\u003eNetwork Policies\u003c/a\u003e [1].\u003c/p\u003e\n\n\u003ch2 id=\"12-implementation-and-extension-in-cilium\"\u003e1.2 Implementation and extension in Cilium\u003c/h2\u003e\n\n\u003cp\u003eCilium as a Kubernetes networking solution \u003cstrong\u003e\u003cmark\u003eimplements as well as extends\u003c/mark\u003e\u003c/strong\u003e\nthe standard Kubernetes \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicy\u003c/code\u003e. To be specific, it supports three kinds\nof policies:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eNetworkPolicy\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e: the standard Kubernetes network\npolicy, controlling \u003cstrong\u003e\u003cmark\u003eL3/L4\u003c/mark\u003e\u003c/strong\u003e traffic;\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eCiliumNetworkPolicy\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (CNP): an extension of\nthe standard Kubernetes \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicy\u003c/code\u003e, covering \u003cstrong\u003e\u003cmark\u003eL3-L7\u003c/mark\u003e\u003c/strong\u003e traffic;\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eClusterwideCiliumNetworkPolicy\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (CCNP): \u003cstrong\u003e\u003cmark\u003enamespace-less\u003c/mark\u003e\u003c/strong\u003e CCNP\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eAn \u003ca href=\"https://docs.cilium.io/en/v1.10/policy/language/#l7-policy\"\u003eexample\u003c/a\u003e of the L7 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCiliumNetworkPolicy\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003ecilium.io/v2\u0026#34;\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eCiliumNetworkPolicy\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003erule1\u0026#34;\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003edescription\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003eAllow\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003eHTTP\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003eGET\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e/public\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003efrom\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003eenv=prod\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003eto\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003eapp=service\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eendpointSelector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ematchLabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eapp\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eservice\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eingress\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003efromEndpoints\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ematchLabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003eenv\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eprod\u003c/span\u003e\n    \u003cspan class=\"na\"\u003etoPorts\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eports\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eport\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e80\u0026#34;\u003c/span\u003e\n        \u003cspan class=\"na\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eTCP\u003c/span\u003e\n      \u003cspan class=\"na\"\u003erules\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ehttp\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003emethod\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003eGET\u0026#34;\u003c/span\u003e\n          \u003cspan class=\"na\"\u003epath\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e/public\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eYou can also find a more detailed CCNP example in our previous post\n\u003ca href=\"/blog/cilium-clustermesh/\"\u003e\u003cmark\u003eCilium ClusterMesh: A Hands-on Guide\u003c/mark\u003e\u003c/a\u003e [3].\u003c/p\u003e\n\n\u003ch2 id=\"13-challenges-in-large-deployments\"\u003e1.3 Challenges in large deployments\u003c/h2\u003e\n\n\u003cp\u003eAs seen above, with NetworkPolicy/CNP/CCNP, one can enforce L3-L7 access\ncontrols inside a Kubernetes cluster. However, for large deployments in real\nclusters with critical businesses running in, far more stuffs need to be\nconsidered, just naming some of them below:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003eHow to \u003cstrong\u003e\u003cmark\u003emanage policies\u003c/mark\u003e\u003c/strong\u003e, and what’s \u003cstrong\u003e\u003cmark\u003einterface to end users\u003c/mark\u003e\u003c/strong\u003e\n  (developers, security teams, etc)?\u003c/p\u003e\n\n    \u003cp\u003eThe “laziest” way to manage policies may be creating a \u003cstrong\u003e\u003cmark\u003egit repository\u003c/mark\u003e\u003c/strong\u003e and\n putting all the \u003cstrong\u003e\u003cmark\u003eraw policy yamls\u003c/mark\u003e\u003c/strong\u003e there, but -\n application developers in most cases do not have access to Kubernetes\n infrastructures as we (infra team) do, so we can’t rely on them to\n manipulate raw yaml files like we do.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eHow to perform \u003cstrong\u003e\u003cmark\u003eauthentication and authorization\u003c/mark\u003e\u003c/strong\u003e when manipulating a policy?\u003c/p\u003e\n\n    \u003cp\u003eEnter the \u003cstrong\u003e\u003cmark\u003e4A model\u003c/mark\u003e\u003c/strong\u003e (Accounting, Authentication, Authorization, Auditing). Such as,\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eHow to validate a (human) user (developer, admin, etc)?\u003c/li\u003e\n      \u003cli\u003eWho can request a policy for what resource (applications, databases, etc)?\u003c/li\u003e\n      \u003cli\u003eWho is reponsible for approving/rejecting a specific policy request?\u003c/li\u003e\n      \u003cli\u003eAuditing infrastructures, vital for a security solution.\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eHow to \u003cstrong\u003e\u003cmark\u003ehandle cross-boundary accessing\u003c/mark\u003e\u003c/strong\u003e? E.g, direct pod-to-pod\n  traffic cross Kubernetes clusters.\u003c/p\u003e\n\n    \u003cp\u003eIn a perfect world, all service accessing converge to cluster boundaries,\n and all cross-boundary traffic goes through some kind of gateways, such\n Kubernetes Egress/Ingress gateways.\u003c/p\u003e\n\n    \u003cp\u003eBut most companies in reality do not have so clean an infrastructure.\n Reasons come from many aspects, such as\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003ecosts (effectively involves duplicating the entire infra in each cluster)\u003c/li\u003e\n      \u003cli\u003ecompatibility with legacy (technically out-of-date but business critical) infrastructures\u003c/li\u003e\n    \u003c/ul\u003e\n\n    \u003cp\u003eAll these stuffs result in direct pod-to-pod traffic cross clusters, which inherently\n involves us to address the \u003cstrong\u003e\u003cmark\u003eKubernetes multi-cluster\u003c/mark\u003e\u003c/strong\u003e problem.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eHow to \u003cstrong\u003e\u003cmark\u003emanage legacy workloads\u003c/mark\u003e\u003c/strong\u003e (e.g. VM/BM/non-cilium-pods)?\u003c/p\u003e\n\n    \u003cp\u003eFor companies which have evolved more than a decade, it’s highly likely that\n there is not only direct cross-boundary traffic, but also legacy workloads,\n such as VMs in OpenStack, BM system, or Kubernetes pods powered by\n networking solutions other than Cilium.\u003c/p\u003e\n\n    \u003cp\u003eSome of these may be transient, e.g. migrating non-cilium-powered-pods to\n Cilium-powered cluster, but some may not, such as VMs still can not be\n replaced by containers in certain scenarios.\u003c/p\u003e\n\n    \u003cp\u003eSo a natural question is: how to cover those entities in your security solution?\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003ePerformance considerations\u003c/mark\u003e\u003c/strong\u003e\u003c/p\u003e\n\n    \u003cp\u003ePerformance should be one of the top considerations for any tech solution.\n In terms of a security solution, we should care about at least:\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eForwarding performance: will the solution cause severe performance decrease?\u003c/li\u003e\n      \u003cli\u003ePolicy taking-effect time (latency)\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003eLogging, monitoring, alerting\u003c/mark\u003e\u003c/strong\u003e, observability, etc\u003c/p\u003e\n\n    \u003cp\u003eBe more familiar with your system than your users, instead of being called\n up by latter at midnight.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eDowngrade SOP\u003c/p\u003e\n\n    \u003cp\u003eLast but not least, what to do when part or even all of your system misbehave?\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"14-organization-of-this-post\"\u003e1.4 Organization of this post\u003c/h2\u003e\n\n\u003cp\u003eThe remaining of this post is organized as follows:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eSection 2 illustrates how we designed a technical solution piece by piece;\u003c/li\u003e\n  \u003cli\u003eSection 3 describes our rolling-out strategies in practice;\u003c/li\u003e\n  \u003cli\u003eSection 4 discusses some important technical questions in more depth;\u003c/li\u003e\n  \u003cli\u003eSection 5 concludes this post.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"2-access-control-from-requirements-to-a-solution\"\u003e2 Access control: from requirements to a solution\u003c/h1\u003e\n\n\u003cp\u003eIn this section, we’ll see how we’ve designed a solution from bottom to up that\nmeets the following requirements:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003eAccess control over hybrid infrastructures\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eSupport Kubernetes (major case), OpenStack, Baremetal, etc\u003c/li\u003e\n      \u003cli\u003eSupport on-premises infrastructures as well as infrastructures in public cloud\u003c/li\u003e\n      \u003cli\u003eSupport cross-cluster direct traffic\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eEvolvable architecture\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eMultiple policy enforcer support\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eSupport L3-L7 access control\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eHigh performance\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"21-policy-enforcement-in-a-single-cluster\"\u003e2.1 Policy enforcement in a single cluster\u003c/h2\u003e\n\n\u003cp\u003eStarting from the simplest case, consider the access control in a standalone\nCilium-powered Kubernetes cluster.\u003c/p\u003e\n\n\u003cp\u003eAs the logical architecture depicted below, Cilium agent on each Kubernetes\nworker node listens to \u003cstrong\u003e\u003cmark\u003etwo resource stores\u003c/mark\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-clustermesh/cilium-powered-k8s-cluster.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-1. A Kubernetes cluster powered by Cilium [3]\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eKubernetes apiserver (in front of k8s-etcd): for \u003cstrong\u003e\u003cmark\u003ewatching CNP/CCNP\u003c/mark\u003e\u003c/strong\u003e etc, resources\u003c/li\u003e\n  \u003cli\u003eKVStore (cilium-etcd): for \u003cstrong\u003e\u003cmark\u003ewatching identities of pods\u003c/mark\u003e\u003c/strong\u003e (and other cilium metadata) of the whole cluster\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn this standard single-cluster setup, the native CNP/CCNP would be enough for\npolicy enforcement, in that the\n\u003cstrong\u003e\u003cmark\u003ecilium-agent on each node caches the entire active identity space of the cluster\u003c/mark\u003e\u003c/strong\u003e.\nAs long as clients come from the same cluster, each agent would know their security identity\nby looking up its local cache, then decide whether to let the traffic go:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-cloud-native-security/pod-policy-enforcement.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-2. Ingress policy enforcement inside a Cilium node\u003c/p\u003e\n\n\u003cp\u003eSome code-level details can be found in our previous post [9]:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-life-of-a-packet/pod-to-service-path.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-3. Processing steps (including policy enforcing) of pod traffic in a Cilium-powered Kubernetes cluster [9]\u003c/p\u003e\n\n\u003ch2 id=\"22-policy-enforcement-over-multiple-clusters\"\u003e2.2 Policy enforcement over multiple clusters\u003c/h2\u003e\n\n\u003cp\u003eNow consider the multi-cluster case.\u003c/p\u003e\n\n\u003cp\u003eImagine that the server pods reside in one cluster, but the \u003cstrong\u003e\u003cmark\u003eclient pods\nscatter over multiple clusters\u003c/mark\u003e\u003c/strong\u003e, and the clients access the servers\ndirectly (without any gateways).\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eKubernetes best practices would suggest avoiding this setup, instead, always do\ncross-cluster accessing via gateways. But real world, crucial business\nrequirements and/or technical debts often creep to the architecture.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"221-clustermesh\"\u003e2.2.1 ClusterMesh\u003c/h3\u003e\n\n\u003cp\u003eCilium ships with a built-in multi-cluster solution called ClusterMesh.\nBasically, it configures each cilium-agent to \u003cstrong\u003e\u003cmark\u003ealso listen to the\nKVStores of the other clusters\u003c/mark\u003e\u003c/strong\u003e. In this way, each agent\n\u003cstrong\u003e\u003cmark\u003efetches the security identity information of pods in the remote clusters\u003c/mark\u003e\u003c/strong\u003e.\nBelow is the two-cluster-as-a-mesh case:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-clustermesh/clustermesh.png\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-4. ClusterMesh: each cilium-agent also listens to the KVStores of the other clusters [3]\u003c/p\u003e\n\n\u003cp\u003ethus, when traffic from remote clusters arrive, the local agent can determine its\nsecurity context with local knowledge base:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-clustermesh/policy-enabled.png\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-5. Cross-cluster access control with Cilium ClusterMesh [3]\u003c/p\u003e\n\n\u003cp\u003eOur hands-on guide [3] reveals how it works in the underlying, refer to it if you are interested.\u003c/p\u003e\n\n\u003ch3 id=\"222-kvstoremesh\"\u003e2.2.2 KVStoreMesh\u003c/h3\u003e\n\n\u003cp\u003eClusterMesh as a multi-cluster solution is straight-forward,\nbut it tends to be \u003cstrong\u003e\u003cmark\u003efragile for large clusters\u003c/mark\u003e\u003c/strong\u003e.\nSo we eventually developed our own multi-cluster solution, called KVStoreMesh [4].\nIt’s light-weight and \u003cstrong\u003e\u003cmark\u003eupstream-compatible\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn short, instead of letting every single agent to pull remote identities from\nall remote KVStores, we developed a cluster-scope operator to do this, which\n\u003cstrong\u003e\u003cmark\u003esynchronizes remote identities to the KVStore of the local cluster\u003c/mark\u003e\u003c/strong\u003e.\nPutting it more clearly, in each Kubernetes cluster, we run a \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ekvstoremesh-operator\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e, which\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eListen to Cilium metadata (e.g. security identities) changes from all other clusters’ Cilium KVStores, and\u003c/li\u003e\n  \u003cli\u003eWrite the changes to the local Cilium KVStore\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe two-cluster case:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-cloud-native-security/kvstoremesh-2.png\" width=\"85%\" height=\"85%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-6. Multi-cluster setup with KVStoreMesh [4]\u003c/p\u003e\n\n\u003cp\u003eThe three-cluster case:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-cloud-native-security/kvstoremesh-1.png\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-7. Multi-cluster setup with KVStoreMesh (kvstoremesh-operator omitted for brevity)\u003c/p\u003e\n\n\u003cp\u003eTechnically, with KVStoreMesh, cilium-agents get remote identities from their\nlocal kvstore directly. This ensures \u003cstrong\u003e\u003cmark\u003eeach cilium-agent to have a flat,\nglobal security view of all the pods in all clusters\u003c/mark\u003e\u003c/strong\u003e - just\nas ClusterMesh does, but without suffering from stability and flexibility issues.\nClusterMesh vs. KVStoreMesh comparisons will be detailed later.\u003c/p\u003e\n\n\u003cp\u003eThe excellent design of Cilium makes the above idea work most of the time, and\nwe’ve fixed some bugs (most of which have already been upstreamed, a few are\nunder reviewing) to make the remaining corner cases work as well.\u003c/p\u003e\n\n\u003ch2 id=\"23-policy-enforcement-over-legacy-clients\"\u003e2.3 Policy enforcement over legacy clients\u003c/h2\u003e\n\n\u003cp\u003eWith CNP/CCNP and KVStoreMesh, we’ve solved single-cluster and multi-cluster\naccess control over vanilla cilium-powered-pods.  Now let’s go one step\nfurther, consider how to support legacy workloads, e.g. VM from OpenStack.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eNote that our technical requirement over legacy workload is simplified here:\nwe only consider \u003cstrong\u003e\u003cmark\u003econtrolling the legacy workloads when they are acting as clients\u003c/mark\u003e\u003c/strong\u003e;\nfor those acting as servers, we regard them to be out of the scope of this\nsolution. This makes a good starting point for us.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"231-ciliumexternalresource-cer\"\u003e2.3.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCiliumExternalResource\u003c/code\u003e (CER)\u003c/h3\u003e\n\n\u003cp\u003eBased on our understanding of Cilium’s design and implementation, \nwe introduced a custom extension over Cilium’s \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEndpoint\u003c/code\u003e model:\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// pkg/endpoint/endpoint.go\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// Endpoint represents a container or similar which can be individually\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// addresses on L3 with its own IP addresses.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e//\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// The representation of the Endpoint which is serialized to disk for restore\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// purposes is the serializableEndpoint type in this package.\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003eEndpoint\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eIPv4\u003c/span\u003e \u003cspan class=\"n\"\u003eaddressing\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCiliumIPv4\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eSecurityIdentity\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eidentity\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIdentity\u003c/span\u003e \u003cspan class=\"s\"\u003e`json:\u0026#34;SecLabel\u0026#34;`\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eK8sPodName\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eK8sNamespace\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWe named it CiliumExternalResource (CER), to distinguish it from the later community\nextension CiliumExternalWorkload (CEW).\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eCEW came with Cilium 1.9.x, and our CER has been rolled out internally since 1.8.x.\nComparisons of them will be detailed in the next section.\u003c/p\u003e\n\n  \u003cp\u003eAnd the reason why we didn’t name it \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eExternalEndpoint\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e is that there is already\nan \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eexternalEndpoint\u003c/code\u003e concept in Cilium, which is used for totally different purposes.\nWe will elaborate more on this later.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eA CER record is a piece of \u003cstrong\u003e\u003cmark\u003eCilium-aware metadata stored in\nKVStore\u003c/mark\u003e\u003c/strong\u003e (cilium-etcd) that \u003cstrong\u003e\u003cmark\u003ecorresponds to one legacy workload\u003c/mark\u003e\u003c/strong\u003e,\nsuch as a VM instance. With this hacking, each cilium-agent would recognize those legacy workloads\nwhen performing \u003cstrong\u003e\u003cmark\u003eingress access control for vanilla cilium-powered pods\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"232-cer-apiserver\"\u003e2.3.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecer-apiserver\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eWe’ve also exposed an API (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecer-apiserver\u003c/code\u003e) to let legacy platforms or tools\n(e.g. OpenStack, BM system, Non-cilium-CNI) to feed their workload into\nCilium’s metadata store.\u003c/p\u003e\n\n\u003cp\u003eBy ensuring synchronously calling \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecer-apiserver\u003c/code\u003e when there are legacy\nworkload operations (such as creating or delete a VM instance), the Cilium cluster\nkeeps the latest states of legacy workloads.\u003c/p\u003e\n\n\u003ch3 id=\"233-sum-up-a-hybrid-data-plane\"\u003e2.3.3 Sum up: a hybrid data plane\u003c/h3\u003e\n\n\u003cp\u003eBy combining\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eCER (feed external resource metadata into one cluster) and\u003c/li\u003e\n  \u003cli\u003eKVStoreMesh (pull resource metadata from all other clusters, eventually metadata in all clusters converge to the same),\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ewe build a data plane that crosses cloud native as well as legacy infrastructures, as show below:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-cloud-native-security/data-plane-arch.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-8. A hybrid data plane by combining CER and KVStoreMesh\u003c/p\u003e\n\n\u003cp\u003eNow all the data plane problems have been solved, we are ready to build the control plane.\u003c/p\u003e\n\n\u003ch2 id=\"24-control-plane\"\u003e2.4 Control plane\u003c/h2\u003e\n\n\u003ch3 id=\"241-access-control-policy-acp-modeling\"\u003e2.4.1 Access control policy (ACP) modeling\u003c/h3\u003e\n\n\u003cp\u003eOne of our goal is to make the control plane general enough, even if the\nunderlying policy enforcement fashion has changed one day (e.g. CCNP phased out),\ncontrol plane would suffer no changes (or as little as we could).\nSo we eventually abstracted a dataplane-agnostic \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAccessControlPolicy\u003c/code\u003e model,\nthis comes with many benefits:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eEnable the control and data planes to evolve independently\u003c/li\u003e\n  \u003cli\u003eEnable to integrate different kinds of data planes into a single control\nplane, such as eBPF-based CCNP, mTLS-based Istio \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAuthorizationPolicy\u003c/code\u003e, or\neven some WireGuard-based techniques in the future.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAccessControlPolicy\u003c/code\u003e is similar to \u003ca href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html\"\u003eAWS \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAccessPolicy\u003c/code\u003e\u003c/a\u003e\nand many other RBAC-based access control models,\nall of which are conceptually \u003ca href=\"https://tailscale.com/blog/rbac-like-it-was-meant-to-be/\"\u003e\u003cstrong\u003e\u003cmark\u003erole based access control\u003c/mark\u003e\u003c/strong\u003e\u003c/a\u003e [8]:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-cloud-native-security/acp-model.png\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-9. AccessControlPolicy model\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eSome human-friendly mappings if you’re not familiar with RBAC terms:\u003c/p\u003e\n\n  \u003cul\u003e\n    \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eSubjects/Principals -\u0026gt; clients\u003c/mark\u003e\u003c/strong\u003e\u003c/li\u003e\n    \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eResources -\u0026gt; servers\u003c/mark\u003e\u003c/strong\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAn example is shown below, which allows app \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e888\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e999\u003c/code\u003e to access redis cluster \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebobs-cluster\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eAccessControlPolicy\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003estatements\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eactions\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003eredis:connect\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eeffect\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eallow\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eresources\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003etrnv1:rsc:trip-com:redis:clusters:bobs-cluster\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esubjects\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003etrnv1:rsc:trip-com:iam:sa:app/888\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003etrnv1:rsc:trip-com:iam:sa:app/889\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"242-enforcer-specific-adapters\"\u003e2.4.2 Enforcer-specific adapters\u003c/h3\u003e\n\n\u003cp\u003eThe dataplane-agnosticism of the control plane requires\nthere should be adapters to transform ACP to specific enforcer formats.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eACP-\u0026gt;CCNP adapter\u003c/mark\u003e\u003c/strong\u003e (main use case currently)\u003c/li\u003e\n  \u003cli\u003eACP-\u0026gt;AuthorizationPolicy adapter (Istio use case, POC verified)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"243-push-and-reconcile-policy-to-kubernetes-clusters\"\u003e2.4.3 Push (and reconcile) policy to Kubernetes clusters\u003c/h3\u003e\n\n\u003cp\u003eAnother piece of the control plane is pushing the transformed \u003cstrong\u003e\u003cmark\u003edataplane-aware policies\u003c/mark\u003e\u003c/strong\u003e\ninto Kubernetes clusters.\u003c/p\u003e\n\n\u003cp\u003eWe use \u003cstrong\u003e\u003cmark\u003ekubefed (v2)\u003c/mark\u003e\u003c/strong\u003e to achieve this goal:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAccessControlPolicy\u003c/code\u003e is implemented as a CRD in kubefed\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eacp2ccnp-adapter\u003c/code\u003e listens on ACP resources and transforms them to FCCNP (Federated CCNP)\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubefed-controller-manager\u003c/code\u003e listens on FCCNP resources, renders them into CCNP and\npushes the latter to the specified member kubernetes clusters in the FCCNP spec.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eNow, all the technical pillars for our security cathedral have completed, for\nexample - you could now create an ACP from a yaml file and it will be\nautomatically transformed into FCCNP, then rendered into CCNP and further be pushed to\nindividual Kubernetes clusters - but only if you could access kubefed and know\nthe “raw” yaml, ACP model, etc stuffs.\u003c/p\u003e\n\n\u003cp\u003eThe real users - \u003cstrong\u003e\u003cmark\u003ebusiness application developers\u003c/mark\u003e\u003c/strong\u003e - need an ease-of-use interface\nwithout caring about all the background concepts and stuffs as we infrastructure teams do.\u003c/p\u003e\n\n\u003ch3 id=\"244-integrate-into-cd-platform\"\u003e2.4.4 Integrate into CD platform\u003c/h3\u003e\n\n\u003cp\u003eWe achieved the goal by integrating the policy manipulation capability\nand authN/authZ stuffs into our internal continuous delivery platform, which\nthe developers use in daily work.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eThe AuthN \u0026amp; AuthZ here refer to the validation and priviledge granting stuffs\ninvolved during a policy change (add/update/delete) request from users.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-cloud-native-security/user-side-workflow.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-10. User side policy request workflow\u003c/p\u003e\n\n\u003cp\u003eIf a logged-in user is the owner of an application, he/she can submit a request\nwith something like this:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eContent: I’m the owner of app \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;appid\u0026gt;\u003c/code\u003e, and I’d like to access your\nresource \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;resource identifier\u0026gt;\u003c/code\u003e (e.g. name of a redis cluster).\u003c/p\u003e\n\n  \u003cp\u003eReason: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;some reason\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThen the ticket will be sent to several persons for approval, on all approved,\nthe platform calls a specific API to add the policy to the control plane.\u003c/p\u003e\n\n\u003cp\u003eRegarding the presentation of the existing policies,\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003eNormal user’s view\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eClient-side app owner could see which resources the app can access;\u003c/li\u003e\n      \u003cli\u003eServer-side app owner could seee which client apps could access this resource;\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eAdministrator’s view\u003c/p\u003e\n\n    \u003cp\u003eWe also have a dedicated interface for security administrators,\n  which faciliates operations and governing in a global scope.\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"245-sum-up-a-general-control-plane\"\u003e2.4.5 Sum up: a general control plane\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-cloud-native-security/control-plane-arch.png\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-11. High level architecture of the control plane\u003c/p\u003e\n\n\u003ch2 id=\"25-typical-workflow\"\u003e2.5 Typical workflow\u003c/h2\u003e\n\n\u003cp\u003eSuppose we have\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eA client application with pod label \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eappid=888\u003c/code\u003e (unique per application), owned by Alice,\u003c/li\u003e\n  \u003cli\u003eAn in-memory database with pod label \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eredis-cluster=bobs-cluster\u003c/code\u003e (unique per database), owned by Bob,\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThen Alice would like her application to access Bob’s database, here will be the workflow:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e1) Alice\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e1.1) login CD platform\u003c/li\u003e\n      \u003cli\u003e1.2) go to the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eapp 888\u003c/code\u003e’s page\u003c/li\u003e\n      \u003cli\u003e1.3) click “Redis Access Request”,\u003c/li\u003e\n      \u003cli\u003e1.4) select the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebobs-cluster\u003c/code\u003e, submit request\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e2) Request sends to persons in the approval list\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e3) Request reviewed and approved\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e3.1) Approved by Alice’d direct leader\u003c/li\u003e\n      \u003cli\u003e3.2) Approved by Bob\u003c/li\u003e\n      \u003cli\u003e3.1) Approved by the security team (if needed)\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e4) CD platform: call the control plane api, add a ACP to kubefed\u003c/li\u003e\n  \u003cli\u003e5) ACP added into kubefed\u003c/li\u003e\n  \u003cli\u003e6) ACP-\u0026gt;CCNP adapter: on listening on ACP added, creates a FCCNP\u003c/li\u003e\n  \u003cli\u003e7) kubefed-controller-manager: on listening on FCCNP created, renders a CCNP and pushes to specified Kubernetes clusters (kube-apiserver)\u003c/li\u003e\n  \u003cli\u003e8) All cilium-agents in all (CCNP-covered) Kubernetes clusters: on listening\non CCNP created, performs policy enforcement for the pod (if any\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eredis-cluster=bobs-cluster\u003c/code\u003e pod is on the node). CCNP applied.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWith all the stuffs illustrated in this section, readers should have had a full\nview of our technical solution. In the next section, we’ll describe\nhow we’ve rolled out this solution into real environments.\u003c/p\u003e\n\n\u003ch1 id=\"3-rollout-into-production\"\u003e3 Rollout into production\u003c/h1\u003e\n\n\u003ch2 id=\"31-capacity-estimation\"\u003e3.1 Capacity estimation\u003c/h2\u003e\n\n\u003cp\u003eOne of the first things when evaluating a security solution is the \u003cstrong\u003e\u003cmark\u003eidentity space\u003c/mark\u003e\u003c/strong\u003e,\nor how many security identities does the solution supports.\u003c/p\u003e\n\n\u003ch3 id=\"311-identity-space\"\u003e3.1.1 Identity space\u003c/h3\u003e\n\n\u003cp\u003eCilium describes its identity concept in \u003ca href=\"https://docs.cilium.io/en/v1.10/concepts/terminology/#identity\"\u003eDocumentation: Identity\u003c/a\u003e.\nIt has an identity space of \u003cstrong\u003e\u003cmark\u003e64K for a single cluster\u003c/mark\u003e\u003c/strong\u003e, which comes from its \n\u003ca href=\"https://github.com/cilium/cilium/blob/v1.10.5/pkg/identity/numericidentity.go#L383-L389\"\u003e16bit identity ID representation\u003c/a\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// pkg/identity/numericidentity.go\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// NumericIdentity is the numeric representation of a security identity.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e//\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// Bits:\u003c/span\u003e\n\u003cspan class=\"c\"\u003e//    0-15: identity identifier\u003c/span\u003e\n\u003cspan class=\"c\"\u003e//   16-23: cluster identifier\u003c/span\u003e\n\u003cspan class=\"c\"\u003e//      24: LocalIdentityFlag: Indicates that the identity has a local scope\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003eNumericIdentity\u003c/span\u003e \u003cspan class=\"kt\"\u003euint32\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIdentities of different clusters avoid overlapping by cluster unique \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecluster-id\u003c/code\u003es.\u003c/p\u003e\n\n\u003cp\u003eBut what does the 64K mean for us? Enter Cilium’s \u003cstrong\u003e\u003cmark\u003eidentity allocation mechanism\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"312-identity-allocation-mechanism\"\u003e3.1.2 Identity allocation mechanism\u003c/h3\u003e\n\n\u003cp\u003eThe short answer is that Cilium allocates identities for pods with\ndistinguished \u003ca href=\"https://docs.cilium.io/en/v1.10/concepts/terminology/#security-relevant-labels\"\u003esecurity relevant labels\u003c/a\u003e:\npods with the same groups of labels share the same identity.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-cloud-native-security/identity_store.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 3-1. Identity allocation in Cilium, from \u003ca href=\"https://docs.cilium.io/en/v1.10/concepts/terminology/#identity-management-in-the-cluster\"\u003eCilium Doc\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eOne problem rises here for big clusters: the default label list used for deriving\nidentities is \u003cstrong\u003e\u003cmark\u003etoo fine-grained\u003c/mark\u003e\u003c/strong\u003e, which results in\n\u003cstrong\u003e\u003cmark\u003eeach pod being allocated a separate identity in the worst case\u003c/mark\u003e\u003c/strong\u003e -\nfor example, if you’re using statefulsets, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epod-name\u003c/code\u003e label will be enlisted,\nand it’s unique for each pod, as shown in the below:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium endpoint list\nENDPOINT   IDENTITY   LABELS \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003esource\u003c/span\u003e:key[\u003cspan class=\"o\"\u003e=\u003c/span\u003evalue]\u003cspan class=\"o\"\u003e)\u003c/span\u003e                              IPv4       STATUS\n2362       322854     k8s:app\u003cspan class=\"o\"\u003e=\u003c/span\u003ecilium-smoke                                     10.2.2.2   ready\n                      k8s:io.cilium.k8s.policy.cluster\u003cspan class=\"o\"\u003e=\u003c/span\u003edefault\n                      k8s:io.cilium.k8s.policy.serviceaccount\u003cspan class=\"o\"\u003e=\u003c/span\u003edefault\n                      k8s:statefulset.kubernetes.io/pod-name\u003cspan class=\"o\"\u003e=\u003c/span\u003ecilium-smoke-2\n\n2363       288644     k8s:app\u003cspan class=\"o\"\u003e=\u003c/span\u003ecilium-smoke                                     10.2.2.5   ready\n                      k8s:io.cilium.k8s.policy.cluster\u003cspan class=\"o\"\u003e=\u003c/span\u003edefault\n                      k8s:io.cilium.k8s.policy.serviceaccount\u003cspan class=\"o\"\u003e=\u003c/span\u003edefault\n                      k8s:statefulset.kubernetes.io/pod-name\u003cspan class=\"o\"\u003e=\u003c/span\u003ecilium-smoke-3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWhile this won’t harm the final policy enforcing (e.g. when specifying\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eapp=cilium-smoke\u003c/code\u003e in CNP, it will cover all pods of this statefulset), it\n\u003cstrong\u003e\u003cmark\u003eprohibits the Kubernetes cluster from scaling\u003c/mark\u003e\u003c/strong\u003e: 64K pods would\nbe the upper bound for each cluster, which is not acceptable for big companies.\u003c/p\u003e\n\n\u003cp\u003eThis problem can be worked around by specifying your own security relevant labels.\u003c/p\u003e\n\n\u003ch3 id=\"313-customize-security-relavent-labels\"\u003e3.1.3 Customize security relavent labels\u003c/h3\u003e\n\n\u003cp\u003eFor example, if we’d like\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eAll pods with the same \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecom.trip/appid=\u0026lt;appid\u0026gt;\u003c/code\u003e to share the same identity, and\u003c/li\u003e\n  \u003cli\u003eAll pods with the same \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecom.trip/redis-cluster-name=\u0026lt;name\u0026gt;\u003c/code\u003e to share the same identity\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ethen we could configure the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elabel\u003c/code\u003e option of cilium-agent as this:\u003c/p\u003e\n\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"s\"\u003ereserved:.* k8s:!io.cilium.k8s.namespace.labels.* k8s:io.cilium.k8s.policy k8s:com.trip/appid k8s:com.trip/redis-cluster-name\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWith this setting, all pods with label \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecom.trip/appid=888\u003c/code\u003e (and in the same\ncluster with the same serviceaccount) would share the same identity\n(the another two labels are automatically inserted by Cilium agent):\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium endpoint list\nENDPOINT   IDENTITY   LABELS \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003esource\u003c/span\u003e:key[\u003cspan class=\"o\"\u003e=\u003c/span\u003evalue]\u003cspan class=\"o\"\u003e)\u003c/span\u003e                        IPv4       STATUS\n2113       322854     k8s:com.trip/appid\u003cspan class=\"o\"\u003e=\u003c/span\u003e888                             10.5.1.4   ready\n                      k8s:io.cilium.k8s.policy.cluster\u003cspan class=\"o\"\u003e=\u003c/span\u003ek8s-cluster-1\n                      k8s:io.cilium.k8s.policy.serviceaccount\u003cspan class=\"o\"\u003e=\u003c/span\u003edefault\n2114       322854     k8s:com.trip/appid\u003cspan class=\"o\"\u003e=\u003c/span\u003e888                             10.5.1.8   ready\n                      k8s:io.cilium.k8s.policy.cluster\u003cspan class=\"o\"\u003e=\u003c/span\u003ek8s-cluster-1\n                      k8s:io.cilium.k8s.policy.serviceaccount\u003cspan class=\"o\"\u003e=\u003c/span\u003edefault\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eSo with a curated label list, you can support hundreds of thousands of Pods in\na single Kubernetes cluster. More information on security labels, refer to\n\u003ca href=\"https://docs.cilium.io/en/v1.10/concepts/terminology/#security-relevant-labels\"\u003eDocumentation: Security Relevant Labels\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"32-business-transparency\"\u003e3.2 Business transparency\u003c/h2\u003e\n\n\u003cp\u003eTechnically, one of the benefits of the CNP-based solution is that\n\u003cstrong\u003e\u003cmark\u003ethe entire process of access control\u003c/mark\u003e\u003c/strong\u003e\nis \u003cstrong\u003e\u003cmark\u003etransparent to both clients and servers\u003c/mark\u003e\u003c/strong\u003e,\nwhich implies that not any client/server changes are needed.\u003c/p\u003e\n\n\u003cp\u003eBut, does this also imply a \u003cstrong\u003e\u003cmark\u003etransparent rollout\u003c/mark\u003e\u003c/strong\u003e into the business?\nThe answer is NO.\u003c/p\u003e\n\n\u003cp\u003eTo be specific, \u003cstrong\u003e\u003cmark\u003eCNP is a one-shot switch\u003c/mark\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eIf no policies specified (default), it acts as \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eallow-any\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eAs long as you created a policy, such as allowing \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eappid=888\u003c/code\u003e to access a\nresource, then all other clients not in this policy will immediately get\ndenied\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ewhich could easily result in business disruptions, as it’s hard to get\nan \u003cstrong\u003e\u003cmark\u003eaccurate initial policy\u003c/mark\u003e\u003c/strong\u003e while keeping business users uninvolved\nif you have just one chance to do this (apply policy).\u003c/p\u003e\n\n\u003cp\u003eWe solved this problem by \u003cstrong\u003e\u003cmark\u003eapplying or refining the policy many times\u003c/mark\u003e\u003c/strong\u003e\nwith the help of policy audit mode. With audit mode enabled and CNP applied,\nall accesses that are not allowed by the CNP will be still be allowed but shown as\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eaudit\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e, instead of directly get \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003edenied\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e.\nThen we can unhurriedly refine our CNP/CCNP by updating those audited client into the CNP.\u003c/p\u003e\n\n\u003ch2 id=\"33-fine-grained-policy-audit-mode-toggler\"\u003e3.3 Fine-grained policy audit mode toggler\u003c/h2\u003e\n\n\u003cp\u003eWe also would like to have some \u003cstrong\u003e\u003cmark\u003econvenient ways to toggle policy on/off\nin the control plane\u003c/mark\u003e\u003c/strong\u003e, instead of deleting/adding them every time when there are\nproblems or maintaince.  Cilium ships with a node-level and an endpoint-level\nlevel audit mode configurations configuring via CLI,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Node-level\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium config \u003cspan class=\"nv\"\u003ePolicyAuditMode\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Endpoint-level\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium endpoint config \u0026lt;ep_id\u0026gt; \u003cspan class=\"nv\"\u003ePolicyAuditMode\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ewhich is a good start but not enough yet.\u003c/p\u003e\n\n\u003cp\u003eAt the time we were investigating, we noticed a \u003ca href=\"https://github.com/cilium/cilium/issues/9580\"\u003eCNP-level policy audit mode\u003c/a\u003e\nhad been proposed. It’s on the right way, but there is no clear time schedule\n(actually haven’t finished till the writing of this post).\u003c/p\u003e\n\n\u003ch3 id=\"331-resource-level-policy-audit-mode\"\u003e3.3.1 Resource-level policy audit mode\u003c/h3\u003e\n\n\u003cp\u003eAs a quick hack, we introduced a resource-level policy audit\nmode, \u003cstrong\u003e\u003cmark\u003esuch as a statefulset is a resource\u003c/mark\u003e\u003c/strong\u003e. On toggling audit mode for a\nstatefulset in the control plane, all its pods will be affected (including the newly scaled up ones).\nWe’ve intentionally made this patch compatible with the community, so one day\nwe could drop this hack and move to the CNP-level one.\u003c/p\u003e\n\n\u003cp\u003eThe implementation:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eAdd a controller in kubefed to toggle the audit mode of a resource,\nessentially this would modify a specific label on all the pods of the\nresource, something like \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epolicy-audit-mode=true/false\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003ePush to member Kubernetes clusters with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubefed-controller-manager\u003c/code\u003e just as pushing CCNP do\u003c/li\u003e\n  \u003cli\u003eHacked cilium-agent to respect the policy audit model label.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThis function is implemented as an optional feature, so we could include it in/out\nwith a cilium-agent configuration parameter. When configure it as off,\ncilium-agent would fall back to the community behavior and just ignore the labels.\u003c/p\u003e\n\n\u003ch3 id=\"332-survive-reboot-keep-config\"\u003e3.3.2 Survive reboot (keep config)\u003c/h3\u003e\n\n\u003cp\u003eChanges to the agent were small, as we reused the endpoint-level audit on/off code.\u003c/p\u003e\n\n\u003cp\u003eBut one additional configuration is needed \u003cstrong\u003e\u003cmark\u003eto make the audit mode setting survive reboot\u003c/mark\u003e\u003c/strong\u003e.\nThe good news is that cilium also provides this configuration,\njust adding \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekeep-config: true\u003c/code\u003e to the agent’s configmap.\u003c/p\u003e\n\n\u003ch2 id=\"34-white-list-management\"\u003e3.4 White-list management\u003c/h2\u003e\n\n\u003cp\u003eNormal ACP should be a \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e[app list] -\u0026gt; specific-resource\u003c/code\u003e policy for ingress control, but there\nis also \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e[app list] -\u0026gt; *\u003c/code\u003e requirement, such as some management tools need to access\nall resources.\u003c/p\u003e\n\n\u003cp\u003eSo we need support wildcard policy, or whitelist.\nSpecifically, we support two kinds of whitelists.\u003c/p\u003e\n\n\u003ch3 id=\"341-acp-whitelist\"\u003e3.4.1 ACP whitelist\u003c/h3\u003e\n\n\u003cp\u003eAn example shown below,\u003c/p\u003e\n\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eAccessControlPolicy\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003emanagement-tool-whitelist\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003edescription\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"na\"\u003estatements\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eactions\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003ecredis:connect\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eeffect\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eallow\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eresources\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003etrnv1:rsc:trip-com:redis:clusters:*\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esubjects\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003etrnv1:rsc:trip-com:iam:sa:app/858\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003etrnv1:rsc:trip-com:iam:sa:app/676\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eit will be transform into the following FCCNP:\u003c/p\u003e\n\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003etypes.kubefed.io/v1beta1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eFederatedCiliumClusterwideNetworkPolicy\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eplacement\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eclusterSelector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"pi\"\u003e{}\u003c/span\u003e\n  \u003cspan class=\"na\"\u003etemplate\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003elabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003emanagement-tool-whitelist\u003c/span\u003e\n    \u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eendpointSelector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ematchExpressions\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ekey\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ek8s:com.trip/redis-cluster-name\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eoperator\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eExists\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eingress\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003efromEndpoints\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ematchLabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"s\"\u003ek8s:com.trip/appid: \u0026#34;858\u0026#34;\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ematchLabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"s\"\u003ek8s:com.trip/appid: \u0026#34;676\u0026#34;\u003c/span\u003e\n        \u003cspan class=\"na\"\u003etoPorts\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eports\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eport\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e6379\u0026#34;\u003c/span\u003e\n            \u003cspan class=\"na\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eTCP\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ethen rendered and pushed to member clusters as CCNP.\u003c/p\u003e\n\n\u003ch3 id=\"342-cidr-whitelist\"\u003e3.4.2 CIDR whitelist\u003c/h3\u003e\n\n\u003cp\u003eCurrently we create CIDR whitelist directly via FCCNP:\u003c/p\u003e\n\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003etypes.kubefed.io/v1beta1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eFederatedCiliumClusterwideNetworkPolicy\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ecidr-whitelist-1\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eplacement\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eclusterSelector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"pi\"\u003e{}\u003c/span\u003e    \u003cspan class=\"c1\"\u003e# Push to all member k8s clusters\u003c/span\u003e\n  \u003cspan class=\"na\"\u003etemplate\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003elabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ecidr-whitelist-1\u003c/span\u003e\n    \u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eendpointSelector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ematchExpressions\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ekey\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ek8s:com.trip/redis-cluster-name\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eoperator\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eExists\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eingress\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003efromCIDR\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003e10.5.0.0/24\u003c/span\u003e\n        \u003cspan class=\"na\"\u003etoPorts\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eports\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eport\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e6379\u0026#34;\u003c/span\u003e\n            \u003cspan class=\"na\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eTCP\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003efromCIDR\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003e10.6.0.0/24\u003c/span\u003e\n        \u003cspan class=\"na\"\u003etoPorts\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eports\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eport\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e6379\u0026#34;\u003c/span\u003e\n            \u003cspan class=\"na\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eTCP\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"35-custom-configurations\"\u003e3.5 Custom configurations\u003c/h2\u003e\n\n\u003cp\u003eOur customizations, among which some are directly security-relevant, and some for\nrobustness (e.g. be more resilient to component failures):\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eallocator-list-timeout: 48h\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eapi-rate-limit: {\u0026#34;endpoint-create\u0026#34;:\u0026#34;rate-limit:1000/s,rate-burst:256,auto-adjust:false,parallel-requests:256\u0026#34;, \u0026#34;endpoint-delete\u0026#34;:\u0026#34;rate-limit:1000/s,rate-burst:256,auto-adjust:false,parallel-requests:256\u0026#34;, \u0026#34;endpoint-get\u0026#34;:\u0026#34;rate-limit:1000/s,rate-burst:256,auto-adjust:false,parallel-requests:256\u0026#34;, \u0026#34;endponit-patch\u0026#34;:\u0026#34;rate-limit:1000/s,rate-burst:256,auto-adjust:false,parallel-requests:256\u0026#34;, \u0026#34;endpoint-list\u0026#34;:\u0026#34;rate-limit:10/s,rate-burst:10,auto-adjust:false,parallel-requests:10\u0026#34;}\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecluster-id: \u0026lt;unique id\u0026gt;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecluster-name: \u0026lt;unique name\u0026gt;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edisable-cnp-status-updates: true\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eenable-hubble: true\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ek8s-sync-timeout: 600s\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekeep-config: true\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekvstore-lease-ttl: 86400s\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekvstore-max-consecutive-quorum-errors: 5\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elabels: \u0026lt;custom labels\u0026gt;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elog-driver: syslog\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elog-opt: {\u0026#34;syslog.level\u0026#34;:\u0026#34;info\u0026#34;,\u0026#34;syslog.facility\u0026#34;:\u0026#34;local5\u0026#34;}\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emasqurade: false\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emonitor-aggregation: maximum\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emonitor-aggregation-interval: 600s\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esockops-enable: true\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etunnel=disabled\u003c/code\u003e: direct routing with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBIRD\u003c/code\u003e as BGP agent\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"36-logging-monitoring--alerting\"\u003e3.6 Logging, monitoring \u0026amp; alerting\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003eWrote a simple program to \u003cstrong\u003e\u003cmark\u003econvert hubble flow logs\u003c/mark\u003e\u003c/strong\u003e into a\ngeneral purpose control plane audit log in real time\n    \u003cul\u003e\n      \u003cli\u003eRun as a “sidecar” to each cilium-agent\u003c/li\u003e\n      \u003cli\u003eSimilar to the \u003ca href=\"https://github.com/cilium/hubble-otel\"\u003eHubble adapter for OpenTelemetry\u003c/a\u003e\nrelease in the recent Cilium v1.11\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003eSend audit logs to ClickHouse, which is also how we aggregated our initial policies for each resource\u003c/li\u003e\n  \u003cli\u003eVisualize with internal infra (Kibana-based)\u003c/li\u003e\n  \u003cli\u003eAlerting with internal infra\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-cloud-native-security/audit-log-2.png\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 3-2. Audit log in our general purpose audit log format\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-cloud-native-security/audit-log-1.png\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 3-3. Some high-level summaries of audit logs\u003c/p\u003e\n\n\u003ch2 id=\"37-rollout-strategy\"\u003e3.7 Rollout strategy\u003c/h2\u003e\n\n\u003cp\u003eWith all the above discussed, here is our rolling out strategy:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eEnable policy audit mode\u003c/mark\u003e\u003c/strong\u003e: audit all, and send audit logs to\na central logging infra\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eDetermine initial policy\u003c/mark\u003e\u003c/strong\u003e: run a simple program to aggregate\nACP for a specific resource from its history log, and apply the ACP\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eRefine initial policy\u003c/mark\u003e\u003c/strong\u003e: update ACP if \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeffect=audit\u003c/code\u003e\naccesses found for the resource\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003ePublicize the access control plan\u003c/mark\u003e\u003c/strong\u003e: let application\ndevelopers know that access control will be enabled, as well as the\nself-help policy request procedures integrated in the CD platform\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eFormally enable policy\u003c/mark\u003e\u003c/strong\u003e: turn off policy audit mode for a\nresource via resource-level toggler, and all new client applications that would like to access\nthis resource should go through the request ticket process.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"38-downgrade-on-system-failures\"\u003e3.8 Downgrade on system failures\u003c/h2\u003e\n\n\u003cp\u003eOne key preparation before rolling out anything into production is the\n\u003cstrong\u003e\u003cmark\u003ereaction plans for system failures\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe have been using \u003ca href=\"https://github.com/ctripcloud/cilium-compose\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-compose\u003c/code\u003e\u003c/a\u003e\nto deploy Cilium, and here is our down-grade SOP:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-cloud-native-security/down-grade-sop.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 3-4. Downgrade scenarios on system failures\u003c/p\u003e\n\n\u003cp\u003eBriefly, when there are system failures that need us to \u003cstrong\u003e\u003cmark\u003eturn off access control\u003c/mark\u003e\u003c/strong\u003e,\nwe would react according to three main scenarios:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003eKubefed cluster and member Kubernetes clusters are ready: we can turn off\nACP by toggle resource-level policy audit mode.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eKubefed cluster already failed but member Kubernetes clusters are ready, we can\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003eDisable our resource-level audit feature on cilium-agent, this makes cilium-agent back to community behavior, then\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium config PolicyAuditMode=true\u003c/code\u003e to open audit mode for all pods on the node\u003c/li\u003e\n    \u003c/ol\u003e\n\n    \u003cp\u003eWe could do this for a single node, or bulk of nodes with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esalt\u003c/code\u003e.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eKubefed cluster and member Kubernetes clusters all failed:\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003eFirst completely bring down the cilium-agent (to prevent it from reconcile policies for endpoints), then\u003c/li\u003e\n      \u003cli\u003eUsing \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ebpftool\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e to directly write a raw \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eall any\u003c/code\u003e rule for each Pod (endpoint), commands shown below:\u003c/li\u003e\n    \u003c/ol\u003e\n\n    \u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e \u003cspan class=\"c\"\u003e# Check if allow-any rule exists for a specific endpoint 3240\u003c/span\u003e\n root@cilium-agent:/sys/fs/bpf/tc/globals# bpftool map lookup pinned cilium_policy_03240 key hex 00 00 00 00 00 00 00 00\n key:\n 00 00 00 00 00 00 00 00\n\n Not found\n\n \u003cspan class=\"c\"\u003e# Insert an allow-any rule\u003c/span\u003e\n root@cilium-agent:/sys/fs/bpf/tc/globals# bpftool map update pinned cilium_policy_03240 key hex 00 00 00 00 00 00 00 00 value hex 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 noexist\n\n \u003cspan class=\"c\"\u003e# Check again\u003c/span\u003e\n root@cilium-agent:/sys/fs/bpf/tc/globals# bpftool map lookup pinned cilium_policy_03240 key hex 00 00 00 00 00 00 00 00\n key:\n 00 00 00 00 00 00 00 00\n value:\n 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00\n 00 00 00 00 00 00 00 00\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e    \u003c/div\u003e\n\n    \u003cp\u003eWe run the bpftool command in a container created with cilium-agent’s image\n to avoid any potential version mismatch problems.\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"39-environments-and-current-deployment-status\"\u003e3.9 Environments and current deployment status\u003c/h2\u003e\n\n\u003cp\u003eThis solution has been rolled out into our UAT and production environments,\nand has run over half a year.\u003c/p\u003e\n\n\u003cp\u003eSome components’ version:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eCilium: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e1.9.5\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e with custom patches (fixed-ip sts and resource-level-audit-mode)\u003c/li\u003e\n  \u003cli\u003eKernel: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e4.14/4.19/5.10\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5%/80%/15%\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSome numbers at the time of this writing:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e7K+ cilium nodes (baremetal servers), cross multiple Kubernetes clusters\u003c/li\u003e\n  \u003cli\u003e170K+ cilium pods\u003c/li\u003e\n  \u003cli\u003e40K+ CERs (BM/VM/non-cilium-powered-pods)\u003c/li\u003e\n  \u003cli\u003e4K+ CCNPs (scaled down from peak \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e10K+\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e with some policy aggregation work)\u003c/li\u003e\n  \u003cli\u003e800K+ flows/minute\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eCNP features we used:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eL3/L4 rules\u003c/li\u003e\n  \u003cli\u003eLabel selectors\u003c/li\u003e\n  \u003cli\u003eCIDR selectors\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFeatures we haven’t used:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eL7 rules (only done a POC, wrote a L7 plugin for application-level access control)\u003c/li\u003e\n  \u003cli\u003eFQDN selectors\u003c/li\u003e\n  \u003cli\u003eNamespace selectors\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"4-discussions\"\u003e4 Discussions\u003c/h1\u003e\n\n\u003cp\u003eThis section discusses some technical questions in depth.\u003c/p\u003e\n\n\u003ch2 id=\"41-clustermesh-vs-kvstoremesh\"\u003e4.1 ClusterMesh vs. KVStoreMesh\u003c/h2\u003e\n\n\u003cp\u003eClusterMesh for big clusters has stability problems, which results in cascading failures.\nThe behavior has been detailed in [4], here only shows a typical scenario:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-cloud-native-security/clustermesh-cascading-failure.png\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 4-1. Failure propagation and amplification in a ClusterMesh [4]\u003c/p\u003e\n\n\u003cp\u003eFollowing the step numbers in the picture, the story begins:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekube-apiserver@cluster-1\u003c/code\u003e fails\u003c/li\u003e\n  \u003cli\u003eAll \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-agents@cluster-1\u003c/code\u003e fail as they can’t connect to kube-apiserver@cluster-1\u003c/li\u003e\n  \u003cli\u003eAll \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-agents@cluster-1\u003c/code\u003e begin to restart, and on starting, they will connect to\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekube-apiserver@cluster-1\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekvstore@cluster-1\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekvstore@cluster-2\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekvstore@cluster-1\u003c/code\u003e down, the high volumes of concurrent LisWatch operations from thousands of nodes crashed it (e.g. it was performing backup, already in high IO state),\u003c/li\u003e\n  \u003cli\u003eAll \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-agents@cluster-1\u003c/code\u003e and all \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-agents@cluster-2\u003c/code\u003e down, as they connect to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekvstore@cluster-1\u003c/code\u003e,\u003c/li\u003e\n  \u003cli\u003eAll \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-agents@cluster-1\u003c/code\u003e and all \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-agents@cluster-2\u003c/code\u003e begin to restart, and similarly, this pose significant pressure on both:\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekvstore@cluster-1\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekvstore@cluster-2\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekube-apiserver@cluster-2\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekvstore@cluster-2\u003c/code\u003e fails\u003c/li\u003e\n  \u003cli\u003eAll \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-agents@cluster-1\u003c/code\u003e and all \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-agents@cluster-2\u003c/code\u003e down\u003c/li\u003e\n  \u003cli\u003eAll \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-agents@cluster-1\u003c/code\u003e and all \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-agents@cluster-2\u003c/code\u003e begin to restart\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekube-apiserver@cluster-2\u003c/code\u003e crashes, as it can’t serve simultaneous ListWatch from thousands of agents in cluster-2.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eCompared with the latter, KVStoreMesh is expected to provide better failure\nisolation, horizontal scalability, and deploy \u0026amp; maintain flexibility.\nMore information on this topic, refer to [4].\u003c/p\u003e\n\n\u003ch2 id=\"42-cer-vs-cew\"\u003e4.2 CER vs. CEW\u003c/h2\u003e\n\n\u003ch3 id=\"421-pros--cons\"\u003e4.2.1 Pros \u0026amp; cons\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003eCER is non-intrusive and transparent to legacy workloads. Only a hook is needed\nto synchronize workloads’ metadata into a Cilium cluster; CEW on the other\nhand is intrusive to legacy systems, as cilium-agent needs to be installed\ninto each VM, involving considerable changes.\u003c/li\u003e\n  \u003cli\u003eCER only works when legacy workloads act as clients on Cilium pods’ ingress\npolicy enforcement point, while CEW supports native ingress/egress policy.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"422-cilium-endpoint-vs-ciliumendpoint-vs-externalendpoint\"\u003e4.2.2 Cilium \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEndpoint\u003c/code\u003e vs. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCiliumEndpoint\u003c/code\u003e vs. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eexternalEndpoint\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThese three concepts resemble each other a lot in the naming, we try to clarify them a little.\u003c/p\u003e\n\n\u003cp\u003eCilium \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEndpoint\u003c/code\u003e is a node-local concept, and its data is serialized into a local file on the node:\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// pkg/endpoint/endpoint.go\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// Endpoint represents a container or similar which can be individually\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// addresses on L3 with its own IP addresses.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e//\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// The representation of the Endpoint which is serialized to disk for restore\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// purposes is the serializableEndpoint type in this package.\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003eEndpoint\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eIPv4\u003c/span\u003e \u003cspan class=\"n\"\u003eaddressing\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCiliumIPv4\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eSecurityIdentity\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eidentity\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIdentity\u003c/span\u003e \u003cspan class=\"s\"\u003e`json:\u0026#34;SecLabel\u0026#34;`\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eK8sPodName\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eK8sNamespace\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@node-1 \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium endpoint list\nENDPOINT   POLICY \u003cspan class=\"o\"\u003e(\u003c/span\u003eingress\u003cspan class=\"o\"\u003e)\u003c/span\u003e   POLICY \u003cspan class=\"o\"\u003e(\u003c/span\u003eegress\u003cspan class=\"o\"\u003e)\u003c/span\u003e   IDENTITY   LABELS \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003esource\u003c/span\u003e:key[\u003cspan class=\"o\"\u003e=\u003c/span\u003evalue]\u003cspan class=\"o\"\u003e)\u003c/span\u003e                       IPv4       STATUS\n           ENFORCEMENT        ENFORCEMENT\n\n139        Disabled           Disabled          263455     k8s:io.cilium.k8s.policy.cluster\u003cspan class=\"o\"\u003e=\u003c/span\u003ecluster-1        10.2.4.4   ready\n                                                           k8s:io.cilium.k8s.policy.serviceaccount\u003cspan class=\"o\"\u003e=\u003c/span\u003edefault\n                                                           k8s:io.kubernetes.pod.namespace\u003cspan class=\"o\"\u003e=\u003c/span\u003edefault\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCiliumEndpoint\u003c/code\u003e is a Cilium CRD in Kubernetes:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroot@master: \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ek get pods cilium-smoke-0 \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e wide\nNAME             READY   STATUS    RESTARTS   AGE   IP         NODE     NOMINATED NODE   READINESS GATES\ncilium-smoke-0   1/1     Running   2          10d   10.2.4.4   node-1   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\n\nroot@master: \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ek get ciliumendpoints.cilium.io cilium-smoke-0\nNAME             ENDPOINT ID   IDENTITY ID   INGRESS ENFORCEMENT   EGRESS ENFORCEMENT   VISIBILITY POLICY   ENDPOINT STATE   IPV4\ncilium-smoke-0   139           263455                                                                       ready            10.2.4.4\n\nroot@master: \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ek get ciliumendpoints.cilium.io cilium-smoke-0 \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e yaml\napiVersion: cilium.io/v2\nkind: CiliumEndpoint\nmetadata:\n  ....\nstatus:\n  external-identifiers:\n    container-id: 44c4bdb1f0533c6d7cef396\n    k8s-namespace: default\n    k8s-pod-name: cilium-smoke-0\n    pod-name: default/cilium-smoke-0\n  \u003cspan class=\"nb\"\u003eid\u003c/span\u003e: 139\n  identity:\n    \u003cspan class=\"nb\"\u003eid\u003c/span\u003e: 263455\n    labels:\n    - k8s:io.cilium.k8s.policy.cluster\u003cspan class=\"o\"\u003e=\u003c/span\u003ecluster-1\n    - k8s:io.cilium.k8s.policy.serviceaccount\u003cspan class=\"o\"\u003e=\u003c/span\u003edefault\n    - k8s:io.kubernetes.pod.namespace\u003cspan class=\"o\"\u003e=\u003c/span\u003edefault\n  named-ports:\n  - name: cilium-smoke\n    port: 80\n    protocol: TCP\n  networking:\n    addressing:\n    - ipv4: 10.2.4.4\n    node: 10.6.6.6\n  state: ready\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eCilium \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eexternalEndpoint\u003c/code\u003e is an internal structure holding all the\n\u003cstrong\u003e\u003cmark\u003eendpoints in remote clusters\u003c/mark\u003e\u003c/strong\u003e in ClusterMesh setup.\nFor example, if cluster-1 and cluster-2 setup as a ClusterMesh, then all\nendpoints in cluster-2 will be shown as \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eexternalEndpoint\u003c/code\u003e in\ncluster-1’s cilium-agents.\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// pkg/k8s/endpoints.go\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// externalEndpoints is the collection of external endpoints in all remote\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// clusters. The map key is the name of the remote cluster.\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003eexternalEndpoints\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eendpoints\u003c/span\u003e \u003cspan class=\"k\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eEndpoints\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// Endpoints is an abstraction for the Kubernetes endpoints object. Endpoints\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// consists of a set of backend IPs in combination with a set of ports and\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// protocols. The name of the backend ports must match the names of the\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// frontend ports of the corresponding service.\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003eEndpoints\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"c\"\u003e// Backends is a map containing all backend IPs and ports. The key to\u003c/span\u003e\n\t\u003cspan class=\"c\"\u003e// the map is the backend IP in string form. The value defines the list\u003c/span\u003e\n\t\u003cspan class=\"c\"\u003e// of ports for that backend IP, plus an additional optional node name.\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eBackends\u003c/span\u003e \u003cspan class=\"k\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eBackend\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eCompared with above three, our CER model might be called \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eNodelessEndpoint\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e:\nit re-uses the Cilium \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEndpoint\u003c/code\u003e model, but doesn’t bind to any host as \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEndpoint\u003c/code\u003e does.\u003c/p\u003e\n\n\u003ch2 id=\"43-resource-level-vs-cnp-level-policy-audit-mode\"\u003e4.3 Resource-level vs. CNP-level policy audit mode\u003c/h2\u003e\n\n\u003cp\u003eWe think CNP-level audit mode is the right way to do the job.\nIn comparison, our hack is not a decent solution, as it involves\nintroducing yet another controller to reconcile specific pod labels.\u003c/p\u003e\n\n\u003cp\u003eIf CNP-level were finished and ready for production use in the future, we’d\nconsider embracing it.\u003c/p\u003e\n\n\u003ch2 id=\"44-carrying-identites-async-vs-tunnel-vs-spiffe\"\u003e4.4 Carrying identites: async vs. tunnel vs. SPIFFE\u003c/h2\u003e\n\n\u003cp\u003eAnother important thing about Cilium identity hasn’t been talked about:\n\u003cstrong\u003e\u003cmark\u003ehow identity is determined for a packet\u003c/mark\u003e\u003c/strong\u003e when the packet\narrives to the policy enforcement point?  The answer is: it depends.\u003c/p\u003e\n\n\u003cp\u003eIn \u003cstrong\u003e\u003cmark\u003edirect routing mode\u003c/mark\u003e\u003c/strong\u003e, Cilium allocates and synchronizes identities via KVStore,\nbelow is a brief time sequence showing how identity is synchronized and policy enforced:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-cloud-native-security/client-scaleup-flow.png\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 4-2. Identity propagation during Cilium client scale up\u003c/p\u003e\n\n\u003cp\u003eThe case in the picture:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eServer pods reside on Node2\u003c/li\u003e\n  \u003cli\u003eA new client pod is created on Node1\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe picture tries to illustrate \u003cstrong\u003e\u003cmark\u003ehow client pod\u0026#39;s identity arrived to Node2 before \nits packets\u0026#39; arrival\u003c/mark\u003e\u003c/strong\u003e.  Theoretically,\n\u003cstrong\u003e\u003cmark\u003ethere are possibilities that the identity arrives after packets\u003c/mark\u003e\u003c/strong\u003e,\nwhich would result in immediate denies.\u003c/p\u003e\n\n\u003cp\u003eRelevant calling stacks [9]:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e__section(\u0026#34;from-netdev\u0026#34;)\nfrom_netdev\n  |-handle_netdev\n      |-validate_ethertype\n      |-do_netdev\n          |-identity = resolve_srcid_ipv4()                // extract src identity\n          |-ctx_store_meta(CB_SRC_IDENTITY, identity)      // save identity to ctx-\u0026gt;cb[CB_SRC_IDENTITY]\n          |-ep_tail_call(ctx, CILIUM_CALL_IPV4_FROM_LXC)   // tail call\n                               |\n |------------------------------\n |\n__section_tail(CILIUM_MAP_CALLS, CILIUM_CALL_IPV4_FROM_LXC)\ntail_handle_ipv4_from_netdev\n  |-tail_handle_ipv4\n      |-handle_ipv4\n          |-ep = lookup_ip4_endpoint()\n          |-ipv4_local_delivery(ctx, ep)\n              |-tail_call_dynamic(ctx, \u0026amp;POLICY_CALL_MAP, ep-\u0026gt;lxc_id);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eTunnel (VxLAN) mode \u003cstrong\u003e\u003cmark\u003eembeds identity into\u003c/mark\u003e\u003c/strong\u003e the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etunnel_id\u003c/code\u003e field\n(corresponding to the \u003cstrong\u003e\u003cmark\u003eVNI field in VxLAN header\u003c/mark\u003e\u003c/strong\u003e) of each single packet,\nso the above-mentioned deny scenario would never happen:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ehandle_xgress                               // for packets leaving container\n |-tail_handle_ipv4\n    |-encap_and_redirect_lxc\n       |-encap_and_redirect_lxc\n           |-__encap_with_nodeid(seclabel)  // seclabel==identity\n              |-key.tunnel_id = seclabel\n              |-ctx_set_tunnel_key(\u0026amp;key)\n                 |-skb_set_tunnel_key()     // or call xdp_set_tunnel_key__stub()\n                    |-bpf_skb_set_tunnel_key  // kernel: net/core/filter.c\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThere is also an \u003ca href=\"https://github.com/cilium/cilium/issues/4016\"\u003eissue\u003c/a\u003e tracking\n\u003ca href=\"https://spiffe.io/\"\u003eSPIFFE\u003c/a\u003e (Secure Production Identity Framework for\nEveryone) support in Cilium, which dates back to 2018, and still ongoing.\u003c/p\u003e\n\n\u003ch2 id=\"45-performance-concerns\"\u003e4.5 Performance concerns\u003c/h2\u003e\n\n\u003cp\u003ePerhaps the most surprising piece with Cilium-powered network policies is: enabling CNP\nwill not slow down the dataplane - on the opposite, it will increase the performance\na little bit! Below is one of our benchmarks:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-cloud-native-security/forwarding-performance-benchmark.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003ewhere we could see that after an ingress CCNP is applied to a server pod, its\nQPS increases, as well as latency decreases. But why? The code tells the truth.\u003c/p\u003e\n\n\u003cp\u003eIf no policy applied (default),  Cilium would insert a default \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eallow-all\u003c/code\u003e\npolicy for each pod:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e    |-regenerateBPF                                                           //    pkg/endpoint/bpf.go\n       |-runPreCompilationSteps                                               //    pkg/endpoint/bpf.go\n       |  |-regeneratePolicy                                                  //    pkg/endpoint/policy.go\n       |  |  |-UpdatePolicy                                                   //    pkg/policy/distillery.go\n       |  |  |  |-cache.updateSelectorPolicy                                  //    pkg/policy/distillery.go\n       |  |  |     |-cip = cache.policies[identity.ID]                        //    pkg/policy/distillery.go\n       |  |  |     |-resolvePolicyLocked                                      // -\u0026gt; pkg/policy/repository.go\n       |  |  |-e.selectorPolicy.Consume                                       //    pkg/policy/distillery.go\n       |  |     |-if !IngressPolicyEnabled || !EgressPolicyEnabled\n       |  |     |  |-AllowAllIdentities(!IngressPolicyEnabled, !EgressPolicyEnabled)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd when looking for a policy for an ingress packet, here is the matching logic:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e__policy_can_access                         // bpf/lib/policy.h\n  |-if p = map_lookup_elem(l3l4_key); p     // L3+L4 policy\n  |    return TC_ACK_OK\n  |-if p = map_lookup_elem(l4only_key); p   // L4-Only policy\n  |    return TC_ACK_OK\n  |-if p = map_lookup_elem(l3only_key); p   // L3-Only policy\n  |    return TC_ACK_OK\n  |-if p = map_lookup_elem(allowall_key); p // Allow-all policy\n  |    return TC_ACK_OK\n  |-return DROP_POLICY;                     // DROP\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThe matching priority:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eL3+L4 policy\u003c/li\u003e\n  \u003cli\u003eL4-only policy\u003c/li\u003e\n  \u003cli\u003eL3-only policy\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eAllow-all policy\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003eDROP\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eAs can be seen, default policy has a priority only higher than \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDROP\u003c/code\u003e.\nIf CNP is applied, the code will return early than in default policy case, and\nwe think that explains the performance increase.\u003c/p\u003e\n\n\u003ch2 id=\"46-frequent-bpf-regenerations\"\u003e4.6 Frequent BPF regenerations\u003c/h2\u003e\n\n\u003cp\u003eWhen a pod is created, a new identity might be allocated.\nOn receiving an identity create event,\nall cilium-agents would regenerate BPF for all the pods on the node to respect\nthe identity, which is a fairly heavy operation, as compiling and\nreloading BPF for just a single pod would take several seconds.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eIdentity creation event would trigger immediate BPF regenerations, but\ndeletion event would not, as identity deletion by designed goes through GC.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThen we may wonder, most pods in the cluster should be irrelevant with the\nnewly created identity, regenerating all pods for every identity event\n(create/update/delete) wouldn’t be too wasteful ( in terms of system resources\nsuch as CPU, memory, etc)?\u003c/p\u003e\n\n\u003cp\u003eIt turns out that for the irrelevant pods, cilium-agent has a “skip” logic:\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// pkg/endpoint/bpf.go\u003c/span\u003e\n\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003edatapathRegenCtxt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eregenerationLevel\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eregeneration\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRegenerateWithoutDatapath\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"c\"\u003e// Compile and install BPF programs for this endpoint\u003c/span\u003e\n\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eregenerationLevel\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eRegenerateWithDatapathRebuild\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\t\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eowner\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDatapath\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLoader\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCompileAndLoad\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\t\t\t\u003cspan class=\"n\"\u003eInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Regenerated endpoint BPF program\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\t\t\u003cspan class=\"n\"\u003ecompilationExecuted\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003etrue\u003c/span\u003e\n\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eregenerationLevel\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eRegenerateWithDatapathRewrite\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\t\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eowner\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDatapath\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLoader\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCompileOrLoad\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\t\t\t\u003cspan class=\"n\"\u003eInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Rewrote endpoint BPF program\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\t\t\u003cspan class=\"n\"\u003ecompilationExecuted\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003etrue\u003c/span\u003e\n\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c\"\u003e// RegenerateWithDatapathLoad\u003c/span\u003e\n\t\t\t\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eowner\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDatapath\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLoader\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eReloadDatapath\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\t\t\t\u003cspan class=\"n\"\u003eInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Reloaded endpoint BPF program\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\t\t\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebpfHeaderfileHash\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edatapathRegenCtxt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebpfHeaderfilesHash\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003eDebug\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;BPF header file unchanged, skipping BPF compilation and installation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eMost pods will go to the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eelse\u003c/code\u003e logic, which also explains why the regneration time\nP99 decreases dramatically after excluding \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpfLogProg\u003c/code\u003e:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-cloud-native-security/bpf-regen-p99.png\" width=\"85%\" height=\"85%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eYou could double confirm this behavior by watching the bpf object files in\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/var/run/cilium/state/\u0026lt;endpoint id\u0026gt;\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/var/run/cilium/state/\u0026lt;endpoint id\u0026gt;_next\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe have more technical questions that worth discussing, but let’s stop here, as\nthis article is already too lengthy. Now let’s conclude it.\u003c/p\u003e\n\n\u003ch1 id=\"5-conclusion-and-future-work\"\u003e5 Conclusion and future work\u003c/h1\u003e\n\n\u003cp\u003eThis post shares our design and implementation of a cloud native access control\nsolution for Kubernetes workloads (as well as legacy workloads if they act as clients).\nThe solution is currently used for L3/L4 access control, and with more\nexperiences grasped, we’ll extend the solution to more use cases.\u003c/p\u003e\n\n\u003cp\u003eWe would like to thank the Cilium community for their brilliant work, and I\npersonally would like to thank all my teammates and colleagues for their\nwonderful work on making this possible.\u003c/p\u003e\n\n\u003cp\u003eIn the end, we’d always like to contribute our changes (except inelegant ones) back to the community:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e~30 bugfixes and improvements upstreamed in the past year\u003c/li\u003e\n  \u003cli\u003eSome are under code reviewing and some should be upstreamable but still in our backlog for no enough time\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"references\"\u003eReferences\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://kubernetes.io/docs/concepts/services-networking/network-policies/\"\u003eNetwork Policies\u003c/a\u003e, Kubernetes documentation, 2021\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://docs.cilium.io/en/v1.10/policy/language/#l7-policy\"\u003eCilium example\u003c/a\u003e of the L7 policy, 2021\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/cilium-clustermesh/\"\u003eCilium ClusterMesh: A Hands-on Guide\u003c/a\u003e, 2020\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://docs.google.com/document/d/1Zc8Sdhp96yKSeC1-71_6qd97HPWQv-L4kiBZhl7swrg\"\u003eKVStoreMesh\u003c/a\u003e, Cilium proposal, 2021\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/ctrip-network-arch-evolution/\"\u003eCtrip Network Architecture Evolution in the Cloud Computing Era\u003c/a\u003e, 2019\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/trip-first-step-towards-cloud-native-networking/\"\u003eTrip.com: First Step towards Cloud Native Networking\u003c/a\u003e, 2020\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/trip-stepping-into-cloud-native-networking-era/\"\u003eTrip.com: Stepping into Cloud Native Networking Era with Cilium+BGP\u003c/a\u003e, 2020\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://tailscale.com/blog/rbac-like-it-was-meant-to-be/\"\u003eRBAC like it was meant to be\u003c/a\u003e, 2021\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/cilium-life-of-a-packet-pod-to-service/\"\u003eLife of a Packet in Cilium: Discovering the Pod-to-Service Traffic Path and BPF Processing Logics\u003c/a\u003e, 2020\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/facebook-from-xdp-to-socket-zh/\"\u003e\u003cspan\u003e« [译] Facebook 流量路由最佳实践：从公网入口到内网业务的全路径 XDP/BPF 基础设施（LPC, 2021）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/bbr-paper-zh/\"\u003e\u003cspan\u003e[译] [论文] BBR：基于拥塞（而非丢包）的拥塞控制（ACM, 2017） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2021-12-19T00:00:00Z",
  "Author": "Arthur Chiao"
}