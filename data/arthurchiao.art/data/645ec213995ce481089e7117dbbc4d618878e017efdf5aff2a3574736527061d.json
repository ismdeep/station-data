{
  "Source": "arthurchiao.art",
  "Title": "TCP Retransmission May Be Misleading (2023)",
  "Link": "https://arthurchiao.art/blog/tcp-retransmission-may-be-misleading/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eTCP Retransmission May Be Misleading (2023)\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2023-03-19 | Last Update 2023-03-19\u003c/p\u003e\n  \n  \u003ch2 id=\"tl-dr\"\u003eTL; DR\u003c/h2\u003e\n\n\u003cp\u003eModern kernels by default enable a TCP option called \u003cstrong\u003e\u003cmark\u003eTail Loss Probe (TLP)\u003c/mark\u003e\u003c/strong\u003e,\nwhich actively sends the so-called “probe” packets to achieve TCP fast\nrecovery. A side effect is that a large part of those probe packets is\nclassified into TCP retransmissions (in good quality networks such as data center networks),\nwhich may be misleading for networking stack monitoring and troubleshooting, and\nleaving “TCP retransmission” a less useful indicator to network quality.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-retransmission-may-be-misleading/retrans-types-and-scope.png\" width=\"55%\" height=\"55%\"/\u003e\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#tl-dr\" id=\"markdown-toc-tl-dr\"\u003eTL; DR\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-problem-statement\" id=\"markdown-toc-1-problem-statement\"\u003e1 Problem statement\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-kernel-stats-for-tcp-retransmission\" id=\"markdown-toc-2-kernel-stats-for-tcp-retransmission\"\u003e2 Kernel stats for TCP retransmission\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-standard-mibs-and-procnetsnmp\" id=\"markdown-toc-21-standard-mibs-and-procnetsnmp\"\u003e2.1 Standard MIBs and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/net/snmp\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-linux-extended-mibs-and-procnetstat\" id=\"markdown-toc-22-linux-extended-mibs-and-procnetstat\"\u003e2.2 Linux extended MIBs and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/netstat\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-userspace-tool-netstat\" id=\"markdown-toc-23-userspace-tool-netstat\"\u003e2.3 Userspace tool: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetstat\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-retransmission-stats-in-netstat-output\" id=\"markdown-toc-24-retransmission-stats-in-netstat-output\"\u003e2.4 Retransmission stats in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetstat\u003c/code\u003e output\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-differentiate-three-types-of-tcp-retransmissions\" id=\"markdown-toc-3-differentiate-three-types-of-tcp-retransmissions\"\u003e3 Differentiate three types of TCP retransmissions\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-rto-based-retransmission\" id=\"markdown-toc-31-rto-based-retransmission\"\u003e3.1 RTO-based retransmission\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#rto-range-200ms-120s-per-connection-updated-by-rtt\" id=\"markdown-toc-rto-range-200ms-120s-per-connection-updated-by-rtt\"\u003eRTO range: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e[200ms, 120s]\u003c/code\u003e, per-connection, updated by RTT\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#initial-rto-and-backoff\" id=\"markdown-toc-initial-rto-and-backoff\"\u003eInitial RTO and backoff\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#effective-rtortt-of-a-tcp-connection-ss--i\" id=\"markdown-toc-effective-rtortt-of-a-tcp-connection-ss--i\"\u003eEffective RTO/RTT of a TCP connection: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ess -i\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#drawback\" id=\"markdown-toc-drawback\"\u003eDrawback\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-optimization-fast-retransmission\" id=\"markdown-toc-32-optimization-fast-retransmission\"\u003e3.2 Optimization: fast retransmission\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#dependency-sack-selective-ack\" id=\"markdown-toc-dependency-sack-selective-ack\"\u003eDependency: SACK (Selective ACK)\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#rational\" id=\"markdown-toc-rational\"\u003eRational\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#statistics-in-netstat-output\" id=\"markdown-toc-statistics-in-netstat-output\"\u003eStatistics in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetstat\u003c/code\u003e output\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#kernel-code-where-the-counter-is-updated\" id=\"markdown-toc-kernel-code-where-the-counter-is-updated\"\u003eKernel code: where the counter is updated\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#summary\" id=\"markdown-toc-summary\"\u003eSummary\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-optimiaztion-tail-loss-probe-kernel-310\" id=\"markdown-toc-33-optimiaztion-tail-loss-probe-kernel-310\"\u003e3.3 Optimiaztion: tail loss probe (kernel \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3.10+\u003c/code\u003e)\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#dependency-sack\" id=\"markdown-toc-dependency-sack\"\u003eDependency: SACK\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#rational-1\" id=\"markdown-toc-rational-1\"\u003eRational\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#sysctl-parameter\" id=\"markdown-toc-sysctl-parameter\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esysctl\u003c/code\u003e parameter\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#statistics-in-netstat-output-1\" id=\"markdown-toc-statistics-in-netstat-output-1\"\u003eStatistics in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetstat\u003c/code\u003e output\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#kernel-code-where-the-counter-is-updated-1\" id=\"markdown-toc-kernel-code-where-the-counter-is-updated-1\"\u003eKernel code: where the counter is updated\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-retransmission-related-counters-relationship\" id=\"markdown-toc-34-retransmission-related-counters-relationship\"\u003e3.4 Retransmission-related counters relationship\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#35-comparison-of-3-types-of-retransmits\" id=\"markdown-toc-35-comparison-of-3-types-of-retransmits\"\u003e3.5 Comparison of 3 types of retransmits\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-back-to-question\" id=\"markdown-toc-4-back-to-question\"\u003e4 Back to question\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-will-tlp-increase-the-counter-of-total-retransmitted-segments\" id=\"markdown-toc-41-will-tlp-increase-the-counter-of-total-retransmitted-segments\"\u003e4.1 Will TLP increase the counter of total retransmitted segments?\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-where-does-the-5ms-timeout-comes-from\" id=\"markdown-toc-42-where-does-the-5ms-timeout-comes-from\"\u003e4.2 Where does the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5ms\u003c/code\u003e timeout comes from?\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-issues-and-advanced-topics\" id=\"markdown-toc-5-issues-and-advanced-topics\"\u003e5 Issues and advanced topics\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#51-syn-retransmits\" id=\"markdown-toc-51-syn-retransmits\"\u003e5.1 SYN retransmits\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#52-k8scadvisor-and-pod-metrics\" id=\"markdown-toc-52-k8scadvisor-and-pod-metrics\"\u003e5.2 k8s/cadvisor and pod metrics\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#references\" id=\"markdown-toc-references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"1-problem-statement\"\u003e1 Problem statement\u003c/h1\u003e\n\n\u003cp\u003eThe problem starts from an observation:\non monitoring kernel networking stack, we noticed that almost all pods\nin our on-premises k8s clusters have continuous TCP retransmissions,\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-retransmission-may-be-misleading/tcp-metrics.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eThe data source of this metric comes from kernel TCP statistics for this pod\n(we’ll detail this in the next section).\u003c/p\u003e\n\n\u003cp\u003eOn capturing the traffic, we noticed that lots of TCP retransmissions are\n\u003cstrong\u003e\u003cmark\u003etriggered in a very short time window\u003c/mark\u003e\u003c/strong\u003e, e.g. \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e5ms\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e,\nas shown below:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-retransmission-may-be-misleading/packets-capture.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eA quick analysis:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#30\u003c/code\u003e: client send request to server\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#31\u003c/code\u003e: server ACK #30\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#32\u003c/code\u003e: client send request to server\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#33\u003c/code\u003e: server ACK #32\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e#34 ~ #37\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e: client send request to server\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#38\u003c/code\u003e: client retransmit \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#37\u003c/code\u003e, two weird phenomenons:\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#34 ~ #36\u003c/code\u003e \u003cstrong\u003e\u003cmark\u003enot ACK-ed by server\u003c/mark\u003e\u003c/strong\u003e either, but the client\nskipped them and retransmitted the last segment (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#38\u003c/code\u003e) directly;\u003c/li\u003e\n      \u003cli\u003eElasped time between \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#38\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#37/#36/#35/#34\u003c/code\u003e is about 5ms.\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBesides, we could also conclude that \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#38\u003c/code\u003e is not \u003cstrong\u003e\u003cmark\u003efast retransmission\u003c/mark\u003e\u003c/strong\u003e,\nwhich should be triggered by duplicated ACKs. Then, according to textbooks,\nthe minimum waiting interval before retransmitting a packet should be\n\u003cmark\u003e\u003ccode\u003eRTO\u003csub\u003emin\u003c/sub\u003e\u003c/code\u003e\u003c/mark\u003e, which is a hard limit (kernel\nmacro) \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e200ms\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e for most modern kernels and\ndoesn’t fit our observation.\u003c/p\u003e\n\n\u003cp\u003eSo, the question is: \u003cstrong\u003e\u003cmark\u003ewhat\u0026#39;s the mechanism of this retransmission, and\nhow does it work\u003c/mark\u003e\u003c/strong\u003e?\u003c/p\u003e\n\n\u003cp\u003eTo understand this problem, we need some background knowledge of kernel\nTCP stack.\u003c/p\u003e\n\n\u003ch1 id=\"2-kernel-stats-for-tcp-retransmission\"\u003e2 Kernel stats for TCP retransmission\u003c/h1\u003e\n\n\u003cp\u003eLinux kernel maintains tons of statistic counters for TCP, among which\nseveral are used for retransmission purposes. Users can get these statistics\nvia \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eSNMP\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e protocol or \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc\u003c/code\u003e file system.\u003c/p\u003e\n\n\u003cp\u003eTwo kinds of MIBs (Management information base):\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eTCP_MIB_*\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e: a small set of TCP metrics counters defined by RFC 1213 \u0026amp; RFC 2012;\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eLINUX_MIB_*\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e: an extension defined by Linux, which\nprovides more counters related to the Linux TCP implementation.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"21-standard-mibs-and-procnetsnmp\"\u003e2.1 Standard MIBs and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/net/snmp\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eTypes definition:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// https://github.com/torvalds/linux/blob/v5.10/include/uapi/linux/snmp.h#L120\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// tcp mib definitions\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// RFC 1213:  MIB-II TCP group\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// RFC 2012 (updates 1213):  SNMPv2-MIB-TCP\u003c/span\u003e\n\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTCP_MIB_NUM\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTCP_MIB_RTOALGORITHM\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e       \u003cspan class=\"cm\"\u003e/* RtoAlgorithm */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTCP_MIB_RTOMIN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e             \u003cspan class=\"cm\"\u003e/* RtoMin */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTCP_MIB_RTOMAX\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e             \u003cspan class=\"cm\"\u003e/* RtoMax */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTCP_MIB_MAXCONN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e            \u003cspan class=\"cm\"\u003e/* MaxConn */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTCP_MIB_ACTIVEOPENS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e        \u003cspan class=\"cm\"\u003e/* ActiveOpens */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTCP_MIB_PASSIVEOPENS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e       \u003cspan class=\"cm\"\u003e/* PassiveOpens */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTCP_MIB_ATTEMPTFAILS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e       \u003cspan class=\"cm\"\u003e/* AttemptFails */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTCP_MIB_ESTABRESETS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e        \u003cspan class=\"cm\"\u003e/* EstabResets */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTCP_MIB_CURRESTAB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e          \u003cspan class=\"cm\"\u003e/* CurrEstab */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTCP_MIB_INSEGS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e             \u003cspan class=\"cm\"\u003e/* InSegs */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTCP_MIB_OUTSEGS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e            \u003cspan class=\"cm\"\u003e/* OutSegs */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTCP_MIB_RETRANSSEGS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e        \u003cspan class=\"cm\"\u003e/* RetransSegs */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTCP_MIB_INERRS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e             \u003cspan class=\"cm\"\u003e/* InErrs */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTCP_MIB_OUTRSTS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e            \u003cspan class=\"cm\"\u003e/* OutRsts */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTCP_MIB_CSUMERRORS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e         \u003cspan class=\"cm\"\u003e/* InCsumErrors */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__TCP_MIB_MAX\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAccess these counters from userspace via \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc\u003c/code\u003e file system:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/net/snmp | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003eTcp\nTcp: RtoAlgorithm RtoMin RtoMax MaxConn ActiveOpens PassiveOpens AttemptFails EstabResets CurrEstab InSegs OutSegs RetransSegs InErrs OutRsts InCsumErrors\nTcp: 1 200 120000 \u003cspan class=\"nt\"\u003e-1\u003c/span\u003e 22432878 9645244 1320167 4077672 2501 7823669861 9712198857 8493997 10 18640759 5\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eNote that there are also stats for other protocols in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/net/snmp\u003c/code\u003e, such as UDP, ICMP, IP.\u003c/p\u003e\n\n\u003ch2 id=\"22-linux-extended-mibs-and-procnetstat\"\u003e2.2 Linux extended MIBs and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/netstat\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eThe Linux extended MIBs (a fairly long list):\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// https://github.com/torvalds/linux/blob/v5.10/include/uapi/linux/snmp.h#L120\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* linux mib definitions */\u003c/span\u003e\n\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eLINUX_MIB_NUM\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eLINUX_MIB_TCPLOSTRETRANSMIT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e        \u003cspan class=\"cm\"\u003e/* TCPLostRetransmit */\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eLINUX_MIB_TCPFASTRETRANS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e           \u003cspan class=\"cm\"\u003e/* TCPFastRetrans */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eLINUX_MIB_TCPSLOWSTARTRETRANS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e      \u003cspan class=\"cm\"\u003e/* TCPSlowStartRetrans */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eLINUX_MIB_TCPTIMEOUTS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e              \u003cspan class=\"cm\"\u003e/* TCPTimeouts */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eLINUX_MIB_TCPLOSSPROBES\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e            \u003cspan class=\"cm\"\u003e/* TCPLossProbes */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eLINUX_MIB_TCPLOSSPROBERECOVERY\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e     \u003cspan class=\"cm\"\u003e/* TCPLossProbeRecovery */\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__LINUX_MIB_MAX\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eRetrieve corresponding stats from userspace:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/net/netstat | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;^Tcp\u0026#34;\u003c/span\u003e\nTcpExt: SyncookiesSent SyncookiesRecv SyncookiesFailed EmbryonicRsts PruneCalled RcvPruned OfoPruned OutOfWindowIcmps LockDroppedIcmps ArpFilter TW TWRecycled TWKilled PAWSActive PAWSEstab DelayedACKs DelayedACKLocked DelayedACKLost ListenOverflows ListenDrops TCPHPHits TCPPureAcks TCPHPAcks TCPRenoRecovery TCPSackRecovery TCPSACKReneging TCPFACKReorder TCPSACKReorder TCPRenoReorder TCPTSReorder TCPFullUndo TCPPartialUndo TCPDSACKUndo TCPLossUndo TCPLostRetransmit TCPRenoFailures TCPSackFailures TCPLossFailures TCPFastRetrans TCPSlowStartRetrans TCPTimeouts TCPLossProbes TCPLossProbeRecovery TCPRenoRecoveryFail TCPSackRecoveryFail TCPRcvCollapsed TCPDSACKOldSent TCPDSACKOfoSent TCPDSACKRecv TCPDSACKOfoRecv TCPAbortOnData TCPAbortOnClose TCPAbortOnMemory TCPAbortOnTimeout TCPAbortOnLinger TCPAbortFailed TCPMemoryPressures TCPMemoryPressuresChrono TCPSACKDiscard TCPDSACKIgnoredOld TCPDSACKIgnoredNoUndo TCPSpuriousRTOs TCPMD5NotFound TCPMD5Unexpected TCPMD5Failure TCPSackShifted TCPSackMerged TCPSackShiftFallback TCPBacklogDrop PFMemallocDrop TCPMinTTLDrop TCPDeferAcceptDrop IPReversePathFilter TCPTimeWaitOverflow TCPReqQFullDoCookies TCPReqQFullDrop TCPRetransFail TCPRcvCoalesce TCPOFOQueue TCPOFODrop TCPOFOMerge TCPChallengeACK TCPSYNChallenge TCPFastOpenActive TCPFastOpenActiveFail TCPFastOpenPassive TCPFastOpenPassiveFail TCPFastOpenListenOverflow TCPFastOpenCookieReqd TCPFastOpenBlackhole TCPSpuriousRtxHostQueues BusyPollRxPackets TCPAutoCorking TCPFromZeroWindowAdv TCPToZeroWindowAdv TCPWantZeroWindowAdv TCPSynRetrans TCPOrigDataSent TCPHystartTrainDetect TCPHystartTrainCwnd TCPHystartDelayDetect TCPHystartDelayCwnd TCPACKSkippedSynRecv TCPACKSkippedPAWS TCPACKSkippedSeq TCPACKSkippedFinWait2 TCPACKSkippedTimeWait TCPACKSkippedChallenge TCPWinProbe TCPKeepAlive TCPMTUPFail TCPMTUPSuccess\nTcpExt: 477 430 80552 695 18077 0 0 0 1873 0 10924422 0 0 0 2460 191860995 154086 1093354 79209 79209 3697245368 750332106 2977467265 0 1215116 0 0 339065 0 903 434 885 16697 1315 92987 0 817 73 3534586 32745 115891 7503473 6197 0 5175 41586 1093375 341 4296177 114 10507201 202560 0 91194 0 0 0 0 0 28 3407557 2 0 0 0 2210026 3498483 2699590 3 0 0 0 0 0 477 0 1280 410803303 559295 0 341 20618 15 0 0 0 0 0 0 0 3637 0 697051 11506 11506 20065 557297 7045525996 911349 16726487 293 11508 25 127 2450 1 1 24 300158 113548680 0 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eNote that these statistics are classified as \u003cstrong\u003e\u003cmark\u003e\u0026#34;TcpExt\u0026#34;\u003c/mark\u003e\u003c/strong\u003e (TCP Extension),\nto distinguish them from the standard RFC SNMP counters.\u003c/p\u003e\n\n\u003ch2 id=\"23-userspace-tool-netstat\"\u003e2.3 Userspace tool: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetstat\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eOn Linux, a network tool called \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetstat\u003c/code\u003e can read both the above metric counters\nand format the output slightly:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enetstat \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e\nTcp:\n    22439328 active connections openings\n    9648211 passive connection openings\n    1320355 failed connection attempts\n    4078996 connection resets received\n    2501 connections established\n    7826306153 segments received\n    9715338732 segments send out\n    8496768 segments retransmited\n    10 bad segments received.\n    18645348 resets sent\n    InCsumErrors: 5\nTcpExt:\n    477 SYN cookies sent\n    430 SYN cookies received\n    80552 invalid SYN cookies received\n    695 resets received \u003cspan class=\"k\"\u003efor \u003c/span\u003eembryonic SYN_RECV sockets\n    18077 packets pruned from receive queue because of socket buffer overrun\n    10924894 TCP sockets finished \u003cspan class=\"nb\"\u003etime wait \u003c/span\u003e\u003cspan class=\"k\"\u003ein \u003c/span\u003efast timer\n    2460 packets rejects \u003cspan class=\"k\"\u003ein \u003c/span\u003eestablished connections because of timestamp\n    ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWhere\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTcp:\u003c/code\u003e section includes \u003cstrong\u003e\u003cmark\u003ecounters for SNMP MIBs\u003c/mark\u003e\u003c/strong\u003e,\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTcpExt:\u003c/code\u003e section includes \u003cstrong\u003e\u003cmark\u003ecounters for Linux extended MIBs\u003c/mark\u003e\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"24-retransmission-stats-in-netstat-output\"\u003e2.4 Retransmission stats in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetstat\u003c/code\u003e output\u003c/h2\u003e\n\n\u003cp\u003eIf grep “retrans” from the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetstat\u003c/code\u003e output, we’ll get several retransmission-related counters:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enetstat \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e retrans\n    238919184 segments retransmited\n    85904 \u003cspan class=\"nb\"\u003etimes \u003c/span\u003erecovered from packet loss due to fast retransmit\n    Detected reordering 616 \u003cspan class=\"nb\"\u003etimes \u003c/span\u003eusing reno fast retransmit\n    TCPLostRetransmit: 12954572\n    45666 timeouts after reno fast retransmit\n    78943926 fast retransmits\n    3751391 retransmits \u003cspan class=\"k\"\u003ein \u003c/span\u003eslow start\n    18146 classic Reno fast retransmits failed\n    918290 SACK retransmits failed\n    TCPRetransFail: 508\n    TCPSynRetrans: 8180371\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e“segments retransmitted”: \u003cstrong\u003e\u003cmark\u003etotal retransmitted segments\u003c/mark\u003e\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003e“fast retransmits”: fast retransmission\u003c/li\u003e\n  \u003cli\u003e“TCPSynRetrans”: retransmission of TCP SYN packets\u003c/li\u003e\n  \u003cli\u003e…\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSo, if we’d like to monitor all the retransmissions of a pod, we can use\nthe “segments retransmitted” counter; if we’d like to further distinguish\ndifferent types of retransmissions, we can track the counters like\n“fast retransmits” and “TCPSynRetrans”, right?\u003c/p\u003e\n\n\u003cp\u003eBefore answering this question, let’s first differentiate several major types of TCP retransmissions.\u003c/p\u003e\n\n\u003ch1 id=\"3-differentiate-three-types-of-tcp-retransmissions\"\u003e3 Differentiate three types of TCP retransmissions\u003c/h1\u003e\n\n\u003cp\u003eIn TCP’s design, a sender will retransmit a packet after it thinks\nthe packet has been lost, this is called \u003cstrong\u003e\u003cmark\u003elost recovery\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eRegarding “how it thinks the packet has been lost”, there are several mechanisms.\nLet’s start from the easy ones to the hard ones.\u003c/p\u003e\n\n\u003ch2 id=\"31-rto-based-retransmission\"\u003e3.1 RTO-based retransmission\u003c/h2\u003e\n\n\u003cp\u003eTCP uses a retransmission timeout mechanism to recover (re-send) lost segments.  If an\nACK for a given segment is not received in a certain amount of time (\ncalled \u003cstrong\u003e\u003cmark\u003eRetransmission TimeOut\u003c/mark\u003e\u003c/strong\u003e, RTO), the segment is resent [RFC6298].\u003c/p\u003e\n\n\u003ch3 id=\"rto-range-200ms-120s-per-connection-updated-by-rtt\"\u003eRTO range: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e[200ms, 120s]\u003c/code\u003e, per-connection, updated by RTT\u003c/h3\u003e\n\n\u003cp\u003eBy default, RTO is initially initialized as \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1\u003c/code\u003e second and will decrease\naccording to the connection’s smoothed RTT (SRTT). A maximum and minimum RTO\nis also specified by kernel constant, which is \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e200ms\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e120s\u003c/code\u003e by default.\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/net/tcp.h\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Initial RTO: 1 second\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#define TCP_TIMEOUT_INIT ((unsigned)(1*HZ))    \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* RFC6298 2.1 initial RTO value    */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// Max and min RTO: 120s and 200ms (1s/5)\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#define TCP_RTO_MAX    ((unsigned)(120*HZ))\n#define TCP_RTO_MIN    ((unsigned)(HZ/5))\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eWith kernel 4.13+, user can change the per-connection max/min RTO with BPF, see [1] for example.\nBut, only few advanced users use this functionality.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"initial-rto-and-backoff\"\u003eInitial RTO and backoff\u003c/h3\u003e\n\n\u003cp\u003eAn example from \u003ca href=\"/blog/customize-tcp-initial-rto-with-bpf/\"\u003eCustomize TCP initial RTO (retransmission timeout) with BPF\u003c/a\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003etcpdump \u003cspan class=\"nt\"\u003e-nn\u003c/span\u003e \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e enp0s3 host 9.9.9.9 and port 9999\n21:26:43.834860 IP 192.168.1.5.53844 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 9.9.9.9.9999: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e281070166, ... length 0 \u003cspan class=\"c\"\u003e# +0s\u003c/span\u003e\n21:26:44.859801 IP 192.168.1.5.53844 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 9.9.9.9.9999: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e281070166, ... length 0 \u003cspan class=\"c\"\u003e# +1s\u003c/span\u003e\n21:26:46.876328 IP 192.168.1.5.53844 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 9.9.9.9.9999: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e281070166, ... length 0 \u003cspan class=\"c\"\u003e# +2s\u003c/span\u003e\n21:26:51.068268 IP 192.168.1.5.53844 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 9.9.9.9.9999: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e281070166, ... length 0 \u003cspan class=\"c\"\u003e# +4s\u003c/span\u003e\n21:26:59.259304 IP 192.168.1.5.53844 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 9.9.9.9.9999: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e281070166, ... length 0 \u003cspan class=\"c\"\u003e# +8s\u003c/span\u003e\n21:27:15.389522 IP 192.168.1.5.53844 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 9.9.9.9.9999: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e281070166, ... length 0 \u003cspan class=\"c\"\u003e# +16s\u003c/span\u003e\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eOn \u003cstrong\u003e\u003cmark\u003eestablishing a new connection\u003c/mark\u003e\u003c/strong\u003e, the first retransmission timeout (RTO) will be 1s,\nand if a retransmitted packet is lost, the subsequent retransmission timeout will be\nexponentially backed off (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1s -\u0026gt; 2s -\u0026gt; 4s -\u0026gt; ..\u003c/code\u003e), until it reaches the maximum allowed timeout value (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e120s\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eHowever, for any \u003cstrong\u003e\u003cmark\u003eestablished connection\u003c/mark\u003e\u003c/strong\u003e, the RTO will be dynamically adjusted\naccording to the RTT (round trip time) between the client and server, but the\nadjusted result should still be capped by \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e[200ms, 120s]\u003c/code\u003e - usually close to\nthe lower bound (otherwise the network quality would be so bad).\u003c/p\u003e\n\n\u003ch3 id=\"effective-rtortt-of-a-tcp-connection-ss--i\"\u003eEffective RTO/RTT of a TCP connection: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ess -i\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eYou can check the currently effective RTO of a connection with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ess\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ess \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e\nNetid                  State                  Recv-Q                   Send-Q                                        Local Address:Port                                       Peer Address:Port                    Process\ntcp                    ESTAB                  0                        0                                                 10.0.2.15:ssh                                            10.0.2.2:50077\n         cubic rto:204 rtt:0.17/0.039 ato:40 mss:1460 pmtu:1500 rcvmss:1460 advmss:1460 cwnd:10 bytes_sent:5433 bytes_acked:5433 bytes_received:83303 segs_out:35 segs_in:101 data_segs_out:25 data_segs_in:74 send 687.1Mbps lastsnd:1187172 lastrcv:1187172 lastack:1187172 pacing_rate 1368.1Mbps delivery_rate 154.2Mbps delivered:26 app_limited busy:12ms rcv_rtt:206.938 rcv_space:60279 rcv_ssthresh:89532 minrtt:0.083\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003erto:204\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e: current RTO of this connection is \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e204ms\u003c/code\u003e;\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ertt:0.17/0.039\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e: average \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0.17ms\u003c/code\u003e and deviation \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0.039ms\u003c/code\u003e;\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"drawback\"\u003eDrawback\u003c/h3\u003e\n\n\u003cp\u003eRTO-based retransmission is very simple in concept and easy to understand.\nBut, as RTO is \u003cstrong\u003e\u003cmark\u003elower bound by 200ms\u003c/mark\u003e\u003c/strong\u003e, each sender has to wait\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026gt;= 200ms\u003c/code\u003e before retransmitting a packet, which is a fairly long time in the\nnetworking world.\u003c/p\u003e\n\n\u003cp\u003eAny optimization? Yes! Fast retransmission.\u003c/p\u003e\n\n\u003ch2 id=\"32-optimization-fast-retransmission\"\u003e3.2 Optimization: fast retransmission\u003c/h2\u003e\n\n\u003cp\u003eAs the name shows, fast retransmission would like to trigger retransmissions\nfaster (than RTO-based mechanism). To achieve this, it needs a TCP option called selective ACK (SACK).\u003c/p\u003e\n\n\u003ch3 id=\"dependency-sack-selective-ack\"\u003eDependency: SACK (Selective ACK)\u003c/h3\u003e\n\n\u003cp\u003eFrom \u003ca href=\"https://www.rfc-editor.org/rfc/rfc2018\"\u003eRFC 2018\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eTCP may experience poor performance when multiple packets are lost\nfrom one window of data.   With the limited information available\nfrom cumulative acknowledgments, a TCP sender can only learn about a\nsingle lost packet per round trip time.  An aggressive sender could\nchoose to retransmit packets early, but such retransmitted segments\nmay have already been successfully received.\u003c/p\u003e\n\n  \u003cp\u003eA Selective Acknowledgment (SACK) mechanism, combined with a\nselective repeat retransmission policy, can help to overcome these\nlimitations.  The receiving TCP \u003cstrong\u003e\u003cmark\u003esends back SACK packets to the sender\ninforming the sender of data that has been received\u003c/mark\u003e\u003c/strong\u003e. The sender can\nthen \u003cstrong\u003e\u003cmark\u003eretransmit only the missing data segments\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"rational\"\u003eRational\u003c/h3\u003e\n\n\u003cp\u003eThe fast retransmit algorithm relies on \u003cstrong\u003e\u003cmark\u003eincoming duplicate ACKs\u003c/mark\u003e\u003c/strong\u003e,\nwhich \u003cstrong\u003e\u003cmark\u003eindicate that the peer is missing some data\u003c/mark\u003e\u003c/strong\u003e. After a required number (three\ntypically) of duplicate ACKs have arrived at the sender, it will retransmit the\nfirst unacknowledged segment and continue with a loss recovery algorithm such\nas the SACK-based loss recovery [RFC6675].\u003c/p\u003e\n\n\u003ch3 id=\"statistics-in-netstat-output\"\u003eStatistics in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetstat\u003c/code\u003e output\u003c/h3\u003e\n\n\u003cp\u003eIn the output of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecat /proc/net/netstat\u003c/code\u003e or \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetstat -s\u003c/code\u003e.\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enetstat \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e | egrep \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;(segments retrans|fast retrans)\u0026#34;\u003c/span\u003e\n    8558346 segments retransmited \u003cspan class=\"c\"\u003e# \u0026lt;-- total retransmited segments\u003c/span\u003e\n    3558751 fast retransmits      \u003cspan class=\"c\"\u003e# \u0026lt;-- included in \u0026#34;segments retransmited\u0026#34; in almost all cases\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"kernel-code-where-the-counter-is-updated\"\u003eKernel code: where the counter is updated\u003c/h3\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/ipv4/tcp_output.c\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* This gets called after a retransmit timeout, and the initially\n * retransmitted data is acknowledged.  It tries to continue\n * resending the rest of the retransmit queue, until either\n * we\u0026#39;ve sent it all or the congestion window limit is reached.\n */\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003etcp_xmit_retransmit_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eskb_rbtree_walk_from\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eretrans_out\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003etp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elost_out\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esacked\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eTCPCB_LOST\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ehole\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esacked\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTCPCB_SACKED_RETRANS\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eTCPCB_SACKED_ACKED\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ehole\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk_ca_state\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eTCP_CA_Loss\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"n\"\u003emib_idx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eLINUX_MIB_TCPFASTRETRANS\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"c1\"\u003e// Fast retrans\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                \u003cspan class=\"n\"\u003emib_idx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eLINUX_MIB_TCPSLOWSTARTRETRANS\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Slow start retrans\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etcp_retransmit_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esegs\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e                     \u003cspan class=\"c1\"\u003e// Inc total RetransSegs\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eNET_ADD_STATS\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esock_net\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003emib_idx\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_skb_pcount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Inc fast/slow-start retrans\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThis piece of code handles both fast retransmission and slow-start retransmission.\nTwo steps in sequence:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eRetransmit a packet by calling \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003etcp_retransmit_skb()\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e,\n  which \u003cstrong\u003e\u003cmark\u003einternally will increase the total retransmission counter\u003c/mark\u003e\u003c/strong\u003e;\u003c/li\u003e\n  \u003cli\u003eOn retransmission successful, \u003cstrong\u003e\u003cmark\u003eincrease the fast retransmission or slow-start retransmission counter\u003c/mark\u003e\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"summary\"\u003eSummary\u003c/h3\u003e\n\n\u003cp\u003eFast retransmission relies on duplicated ACKs and selective ACKs (SACKs).\nSuitable for “hole” loss (intermediate segments got lost). No improvement for “tail” loss (tail segments got lost).\u003c/p\u003e\n\n\u003cp\u003eAny further optimization for tail loss? Yes!\u003c/p\u003e\n\n\u003ch2 id=\"33-optimiaztion-tail-loss-probe-kernel-310\"\u003e3.3 Optimiaztion: tail loss probe (kernel \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3.10+\u003c/code\u003e)\u003c/h2\u003e\n\n\u003cp\u003eAn optimization from Google, Inc.\u003c/p\u003e\n\n\u003ch3 id=\"dependency-sack\"\u003eDependency: SACK\u003c/h3\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eTLP MUST NOT be used for non-SACK connections.  SACK feedback allows\nsenders to use the algorithm to infer whether\nany segments were lost.\u003c/p\u003e\n\n  \u003cp\u003ehttps://datatracker.ietf.org/doc/html/draft-dukkipati-tcpm-tcp-loss-probe-01\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"rational-1\"\u003eRational\u003c/h3\u003e\n\n\u003cp\u003eTail Loss Probe (TLP) is a \u003cstrong\u003e\u003cmark\u003esender-only algorithm\u003c/mark\u003e\u003c/strong\u003e to avoid long timeouts (e.g. RTO):\nif a connection doesn’t \u003cstrong\u003e\u003cmark\u003ereceived any ACKs for a certain (short) period of time\u003c/mark\u003e\u003c/strong\u003e,\nTLP will \u003cstrong\u003e\u003cmark\u003eretransmit the last segment that\u0026#39;s has been sent, or the next segment in txq if possible\u003c/mark\u003e\u003c/strong\u003e,\nthis is called \u003cstrong\u003e\u003cmark\u003eloss probe\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eNote: the transmitted segment, aka loss probe, can be \u003cstrong\u003e\u003cmark\u003eeither a new segment\u003c/mark\u003e\u003c/strong\u003e\nif available and the receive window permits, \u003cstrong\u003e\u003cmark\u003eor a retransmission of the most recently sent segment\u003c/mark\u003e\u003c/strong\u003e,\ni.e., the segment with the highest sequence number.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eWhen there is tail loss, the ACK from the probe triggers fast recovery.\u003c/li\u003e\n  \u003cli\u003eIn the absence of loss, there is no change in the congestion control\nor loss recovery state of the connection, apart from any state\nrelated to TLP itself.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe major difference from RTO triggered retransmission is that the\n\u003cstrong\u003e\u003cmark\u003e\u0026#34;wait period\u0026#34; is farely short\u003c/mark\u003e\u003c/strong\u003e: usually several \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ems\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTLP \u003cstrong\u003e\u003cmark\u003eonly modifies the TCP sender\u003c/mark\u003e\u003c/strong\u003e, and does not require any TCP\noptions or changes to the receiver for its operation.\u003c/p\u003e\n\n\u003ch3 id=\"sysctl-parameter\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esysctl\u003c/code\u003e parameter\u003c/h3\u003e\n\n\u003cp\u003eTLP option can be configured with sysctl, which is \u003cstrong\u003e\u003cmark\u003eenabled by default\u003c/mark\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003etcp_early_retrans - INTEGER\u003c/p\u003e\n\n  \u003cp\u003eTail loss probe (TLP) converts RTOs occurring due to tail losses into\n fast recovery. Note thatTLP requires RACK to function properly (see\n tcp_recovery option)\u003c/p\u003e\n\n  \u003cp\u003ePossible values:\u003c/p\u003e\n  \u003cul\u003e\n    \u003cli\u003e0 disables TLP\u003c/li\u003e\n    \u003cli\u003e3 or 4 enables TLP\u003c/li\u003e\n  \u003c/ul\u003e\n\n  \u003cp\u003eDefault: 3\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"statistics-in-netstat-output-1\"\u003eStatistics in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetstat\u003c/code\u003e output\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# netstat -s | egrep -i \u0026#34;(segments send out|retrans|TCPLossProbe)\u0026#34;\u003c/span\u003e\n    233432022 segments send out\n    203858 segments retransmited \u003cspan class=\"c\"\u003e# \u0026lt;-- total retrans\u003c/span\u003e\n    TCPLostRetransmit: 30599\n    3056 fast retransmits        \u003cspan class=\"c\"\u003e# \u0026lt;-- fast retrans\u003c/span\u003e\n    8 retransmits \u003cspan class=\"k\"\u003ein \u003c/span\u003eslow start\n    TCPLossProbes: 150235        \u003cspan class=\"c\"\u003e# \u0026lt;-- Tail Loss Probe\u003c/span\u003e\n    TCPLossProbeRecovery: 329\n    TCPSynRetrans: 48347\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enetstat \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e | egrep \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;(segments retrans|fast retrans|lossprobes)\u0026#34;\u003c/span\u003e\n    8558571 segments retransmited\n    3558873 fast retransmits\n    TCPLossProbes: 7558422\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eImplementation (patch): 6ba8a3b19e764\u003c/p\u003e\n\n\u003ch3 id=\"kernel-code-where-the-counter-is-updated-1\"\u003eKernel code: where the counter is updated\u003c/h3\u003e\n\n\u003cp\u003eCall stack, from kernel 5.10:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003etcp_send_loss_probe(struct sock *sk)\n  |-skb = tcp_send_head(sk);\n  |-if (skb \u0026amp;\u0026amp; tcp_snd_wnd_test(tp, skb, mss)) {\n  |     pcount = tp-\u0026gt;packets_out;\n  |     tcp_write_xmit(sk, mss, TCP_NAGLE_OFF, 2, GFP_ATOMIC);\n  |     if (tp-\u0026gt;packets_out \u0026gt; pcount)\n  |         goto probe_sent;\n  | }\n  |\n  |-__tcp_retransmit_skb(sk, skb, 1))\n  |  |--NET_INC_STATS(sock_net(sk), TCP_MIB_RETRANSSEGS); // RetransSegs++\n  |\n  |probe_sent:\n  |-NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPLOSSPROBES); // TCPLossProbes++\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWhen TLP is triggered,\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eIf it sends a new packet, only the \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eLINUX_MIB_TCPLOSSPROBES\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\ncounter will be increased;\u003c/li\u003e\n  \u003cli\u003eOtherwise, it will retransmit the last sent segment, so both the\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eTCP_MIB_RETRANSSEGS\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e and \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eLINUX_MIB_TCPLOSSPROBES\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\ncounters will be increased;\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRelated code:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/ipv4/tcp_output.c\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003etcp_schedule_loss_probe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eadvancing_rto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003einet_connection_sock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einet_csk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_sock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_sk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erto_delta_us\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eearly_retrans\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Don\u0026#39;t do any loss probe on a Fast Open connection before 3WHS finishes.  */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ercu_access_pointer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003efastopen_rsk\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eearly_retrans\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esock_net\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eipv4\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esysctl_tcp_early_retrans\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Schedule a loss probe in 2*RTT for SACK capable connections\n     * not in loss recovery, that are either limited by cwnd or application.  */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eearly_retrans\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eearly_retrans\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003etp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epackets_out\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003etcp_is_sack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk_ca_state\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eTCP_CA_Open\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n         \u003cspan class=\"n\"\u003eicsk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk_ca_state\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eTCP_CA_CWR\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Probe timeout is 2*rtt. Add minimum RTO to account\n     * for delayed ack when there\u0026#39;s one outstanding packet. If no RTT\n     * sample is available then probe after TCP_TIMEOUT_INIT.\n     */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esrtt_us\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eusecs_to_jiffies\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esrtt_us\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epackets_out\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003eTCP_RTO_MIN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n            \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003eTCP_TIMEOUT_MIN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTCP_TIMEOUT_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* If the RTO formula yields an earlier time, then use that time. */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erto_delta_us\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eadvancing_rto\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e  \u003cspan class=\"n\"\u003ejiffies_to_usecs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einet_csk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk_rto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"n\"\u003etcp_rto_delta_us\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"cm\"\u003e/* How far in future is RTO? */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erto_delta_us\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emin_t\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eu32\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eusecs_to_jiffies\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erto_delta_us\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003etcp_reset_xmit_timer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eICSK_TIME_LOSS_PROBE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTCP_RTO_MAX\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eNote that TLP timeout in initial patch was no smaller than \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10ms\u003c/code\u003e, but later patches\nhave already relaxed that lower bound to 2*RTT, see the code above.\u003c/p\u003e\n\n\u003ch2 id=\"34-retransmission-related-counters-relationship\"\u003e3.4 Retransmission-related counters relationship\u003c/h2\u003e\n\n\u003cp\u003eBased on our previous sections, we can draw a counters relationship picture like below:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-retransmission-may-be-misleading/retrans-types-and-scope.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eNote: some corner cases not counted, such as, some errors in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__tcp_retransmit_skb()\u003c/code\u003e\nwill inc RetransSegs but not FastRetrans.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIs there a way to \u003cstrong\u003e\u003cmark\u003etell the TLP part in \u0026#34;segments retransmited\u0026#34;\u003c/mark\u003e\u003c/strong\u003e? Sadly, NO.\u003c/p\u003e\n\n\u003ch2 id=\"35-comparison-of-3-types-of-retransmits\"\u003e3.5 Comparison of 3 types of retransmits\u003c/h2\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003e \u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eRTO-based\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eFast retransmission\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eTail Loss Probe\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eRetransmit which packet\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003ethe first un-acked\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003ethe first un-acked\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003ethe \u003cstrong\u003e\u003cmark\u003elast un-acked\u003c/mark\u003e\u003c/strong\u003e or the next allowed packet\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eTigger interval\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eRTO, \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e[200ms, 120s]\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e\u0026lt; 200ms\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003etypically \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e\u0026lt; 10ms\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e2*SRTT+delta\u003c/code\u003e for kernel 4.1+)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eIncluded in “segments retransmited”\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eYes\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eYes\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e(a large) Part\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch1 id=\"4-back-to-question\"\u003e4 Back to question\u003c/h1\u003e\n\n\u003ch2 id=\"41-will-tlp-increase-the-counter-of-total-retransmitted-segments\"\u003e4.1 Will TLP increase the counter of total retransmitted segments?\u003c/h2\u003e\n\n\u003cp\u003eCase 1 will not, but case 2 will do:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003etcp_send_loss_probe(struct sock *sk)\n  |-skb = tcp_send_head(sk);\n  |-if (skb \u0026amp;\u0026amp; tcp_snd_wnd_test(tp, skb, mss)) {\n  |     pcount = tp-\u0026gt;packets_out;\n  |     tcp_write_xmit(sk, mss, TCP_NAGLE_OFF, 2, GFP_ATOMIC); // TLP case 1: send the next (new) segment\n  |     if (tp-\u0026gt;packets_out \u0026gt; pcount)\n  |         goto probe_sent;\n  | }\n  |\n  |-__tcp_retransmit_skb(sk, skb, 1))                          // TLP case 2: retransmit the last segment\n  |  |--NET_INC_STATS(sock_net(sk), TCP_MIB_RETRANSSEGS); // case 2     : RetransSegs++\n  |\n  |probe_sent:\n  |-NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPLOSSPROBES); // case 1 or 2: TCPLossProbes++\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAccording to our observation, \u003cstrong\u003e\u003cmark\u003ecase 2 is dominant (in data center network)\u003c/mark\u003e\u003c/strong\u003e.\nThis can be justified by toggling TLP on/off:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-retransmission-may-be-misleading/retrans-tlp-panel.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eAs the above picture shows,\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003eBefore \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e18:38\u003c/code\u003e: \u003cstrong\u003e\u003cmark\u003eTLP enabled\u003c/mark\u003e\u003c/strong\u003e,\u003c/p\u003e\n\n    \u003cp\u003eThere were lots of retransmissions and TLPs, which were much close to each other in quantity;\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e18:38 ~ 18:46\u003c/code\u003e: \u003cstrong\u003e\u003cmark\u003eTLP disabled\u003c/mark\u003e\u003c/strong\u003e (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esysctl -w net.ipv4.tcp_early_retrans=0\u003c/code\u003e),\u003c/p\u003e\n\n    \u003cp\u003eTotal retransmitted segments decreased dramatically, and the\n  \u003cstrong\u003e\u003cmark\u003enumber of retransmissions\u003c/mark\u003e\u003c/strong\u003e was close to the \u003cstrong\u003e\u003cmark\u003enumber of\n  fast retransmissions\u003c/mark\u003e\u003c/strong\u003e, indicating that the retransmissions in\n  this period were primarily composed of fast retransmissions;\u003c/p\u003e\n\n    \u003cblockquote\u003e\n      \u003cp\u003eNote: disabling TLP would lead to a burst of connection resets, so do not\nperform this test in your production environment.\u003c/p\u003e\n    \u003c/blockquote\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eAfter \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e18:46\u003c/code\u003e: \u003cstrong\u003e\u003cmark\u003eTLP re-enabled\u003c/mark\u003e\u003c/strong\u003e (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esysctl -w net.ipv4.tcp_early_retrans=3\u003c/code\u003e),\u003c/p\u003e\n\n    \u003cp\u003eTotal retransmitted segments went back to the “original state”, which was \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10x\u003c/code\u003e than when TLP was off.\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe sad news is that we could not exclude the TLP part from “segments retransmitted”.\u003c/p\u003e\n\n\u003ch2 id=\"42-where-does-the-5ms-timeout-comes-from\"\u003e4.2 Where does the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5ms\u003c/code\u003e timeout comes from?\u003c/h2\u003e\n\n\u003cp\u003eTODO.\u003c/p\u003e\n\n\u003cp\u003eSome clues for later reference:\u003c/p\u003e\n\n\u003cp\u003e2*RTT + (inflight == 1 ? 200ms : 2ticks)\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* Address-family independent initialization for a tcp_sock.\n *\n * NOTE: A lot of things set to zero explicitly by call to\n *       sk_alloc() so need not be done here.\n */\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003etcp_init_sock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003einet_connection_sock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einet_csk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_sock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_sk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003etp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eout_of_order_queue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eRB_ROOT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etcp_rtx_queue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eRB_ROOT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etcp_init_xmit_timers\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_init_xmit_timers\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einet_csk_init_xmit_timers\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etcp_write_timer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etcp_delack_timer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etcp_keepalive_timer\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ehrtimer_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etcp_sk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epacing_timer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCLOCK_MONOTONIC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eHRTIMER_MODE_ABS_PINNED_SOFT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etcp_sk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epacing_timer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efunction\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_pace_kick\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ehrtimer_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etcp_sk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecompressed_ack_timer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCLOCK_MONOTONIC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eHRTIMER_MODE_REL_PINNED_SOFT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etcp_sk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecompressed_ack_timer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efunction\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_compressed_ack_kick\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_write_timer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etimer_list\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003einet_connection_sock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efrom_timer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eicsk_retransmit_timer\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk_inet\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ebh_lock_sock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003esock_owned_by_user\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etcp_write_timer_handler\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* delegate our work to tcp_release_cb() */\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003etest_and_set_bit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTCP_WRITE_TIMER_DEFERRED\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_tsq_flags\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"n\"\u003esock_hold\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebh_unlock_sock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esock_put\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Called with bottom-half processing disabled.  Called by tcp_write_timer() */\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_write_timer_handler\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003einet_connection_sock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einet_csk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(((\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_state\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTCPF_CLOSE\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eTCPF_LISTEN\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk_pending\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etime_after\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk_timeout\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ejiffies\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esk_reset_timer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk_retransmit_timer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eicsk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk_timeout\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003etcp_mstamp_refresh\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etcp_sk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eevent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eicsk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk_pending\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eICSK_TIME_REO_TIMEOUT\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etcp_rack_reo_timeout\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eICSK_TIME_LOSS_PROBE\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etcp_send_loss_probe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eICSK_TIME_RETRANS\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eicsk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk_pending\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etcp_retransmit_timer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eICSK_TIME_PROBE0\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eicsk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk_pending\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etcp_probe_timer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nl\"\u003eout:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esk_mem_reclaim\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"5-issues-and-advanced-topics\"\u003e5 Issues and advanced topics\u003c/h1\u003e\n\n\u003ch2 id=\"51-syn-retransmits\"\u003e5.1 SYN retransmits\u003c/h2\u003e\n\n\u003cp\u003eTraced with an independent counter, can be seen in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetstat\u003c/code\u003e output.\u003c/p\u003e\n\n\u003ch2 id=\"52-k8scadvisor-and-pod-metrics\"\u003e5.2 k8s/cadvisor and pod metrics\u003c/h2\u003e\n\n\u003cp\u003ekubelet collects these TCP counters for pods via cadvisor, such as\n\u003ca href=\"https://github.com/kubernetes/kubernetes/blob/v1.26.0/vendor/github.com/google/cadvisor/metrics/prometheus.go#L1193\"\u003ethe TLP counter\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch1 id=\"references\"\u003eReferences\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"/blog/customize-tcp-initial-rto-with-bpf/\"\u003eCustomize TCP initial RTO (retransmission timeout) with BPF\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://datatracker.ietf.org/doc/html/draft-dukkipati-tcpm-tcp-loss-probe-01\"\u003eTail Loss Probe (TLP): An Algorithm for Fast Recovery of Tail Losses\u003c/a\u003e, IETF draft, 2013\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/torvalds/linux/commit/6ba8a3b19e764\"\u003etcp: Tail loss probe (TLP)\u003c/a\u003e, kernel patch, 2013\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/torvalds/linux/commit/9b717a8d24507\"\u003etcp: TLP loss detection (patch 2)\u003c/a\u003e, kernel patch, 2013\u003c/li\u003e\n  \u003cli\u003eChange TLP timeout to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e2*SRTT+delta\u003c/code\u003e, \u003ca href=\"https://github.com/torvalds/linux/commit/bb4d991a28cc8\"\u003etcp: adjust tail loss probe timeout\u003c/a\u003e, kernel patch, 2017\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/borg-omega-k8s-zh/\"\u003e\u003cspan\u003e« [译] Borg、Omega、K8s：Google 十年三代容器管理系统的设计与思考（ACM, 2016）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/gpt-as-a-finite-state-markov-chain-zh/\"\u003e\u003cspan\u003e[译] GPT 是如何工作的：200 行 Python 代码实现一个极简 GPT（2023） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2023-03-19T00:00:00Z",
  "Author": "Arthur Chiao"
}