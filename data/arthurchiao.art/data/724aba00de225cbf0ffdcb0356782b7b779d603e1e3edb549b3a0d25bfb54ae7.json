{
  "Source": "arthurchiao.art",
  "Title": "[译] 100 行 C 代码创建一个 KVM 虚拟机（2019）",
  "Link": "https://arthurchiao.art/blog/kvm-host-in-a-few-lines-of-code-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003e[译] 100 行 C 代码创建一个 KVM 虚拟机（2019）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2023-11-05 | Last Update 2023-11-05\u003c/p\u003e\n  \n  \u003ch3 id=\"译者序\"\u003e译者序\u003c/h3\u003e\n\n\u003cp\u003e本文核心内容来自 2019 年的一篇英文博客：\n\u003ca href=\"https://zserge.com/posts/kvm/\"\u003eKVM HOST IN A FEW LINES OF CODE\u003c/a\u003e，\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e首先基于 KVM API 用 \u003cstrong\u003e\u003cmark\u003e100 来行 C 代码\u003c/mark\u003e\u003c/strong\u003e实现一个极简\u003cstrong\u003e\u003cmark\u003e虚拟机管理程序\u003c/mark\u003e\u003c/strong\u003e（类比 VirtualBox）；\u003c/li\u003e\n  \u003cli\u003e然后用 \u003cstrong\u003e\u003cmark\u003e10 来行汇编代码\u003c/mark\u003e\u003c/strong\u003e编写一个\u003cstrong\u003e\u003cmark\u003e极简内核\u003c/mark\u003e\u003c/strong\u003e，然后将其制作成\u003cstrong\u003e\u003cmark\u003e虚拟机镜像\u003c/mark\u003e\u003c/strong\u003e（类比 Ubuntu/Linux）；\u003c/li\u003e\n  \u003cli\u003e然后把 2 作为输入传给 1，就能\u003cstrong\u003e\u003cmark\u003e创建出一个虚拟机\u003c/mark\u003e\u003c/strong\u003e并运行。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e本文重新组织和注释了原文核心部分，并做了一些内容扩展，供个人学习参考。为尊重原作者劳动，\n本文仍以 [译] 作为标题开头，但注意内容和顺序已经和原文不太对得上。\n本文所用代码见 \u003ca href=\"https://github.com/ArthurChiao/arthurchiao.github.io/tree/master/assets/code/kvm-host-in-a-few-lines-of-code\"\u003egithub\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e由于译者水平有限，本文不免存在错误之处。如有疑问，请查阅原文。\u003c/strong\u003e\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#译者序\" id=\"markdown-toc-译者序\"\u003e译者序\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-内核-kvm-子系统\" id=\"markdown-toc-1-内核-kvm-子系统\"\u003e1 内核 KVM 子系统\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-交互字符设备-devkvm\" id=\"markdown-toc-11-交互字符设备-devkvm\"\u003e1.1 交互：字符设备 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/dev/kvm\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-接口kvm-api\" id=\"markdown-toc-12-接口kvm-api\"\u003e1.2 接口：KVM API\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-操作ioctl-系统调用\" id=\"markdown-toc-13-操作ioctl-系统调用\"\u003e1.3 操作：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eioctl()\u003c/code\u003e 系统调用\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-100-来行-c-代码创建一个-kvm-虚拟机\" id=\"markdown-toc-2-100-来行-c-代码创建一个-kvm-虚拟机\"\u003e2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e100\u003c/code\u003e 来行 C 代码创建一个 KVM 虚拟机\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-打开-kvm-设备kvm_fd--opendevkvm\" id=\"markdown-toc-21-打开-kvm-设备kvm_fd--opendevkvm\"\u003e2.1 打开 KVM 设备：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekvm_fd = open(\u0026#34;/dev/kvm\u0026#34;)\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-创建-vm-外壳vm_fd--ioctlkvm_fd-kvm_create_vm\" id=\"markdown-toc-22-创建-vm-外壳vm_fd--ioctlkvm_fd-kvm_create_vm\"\u003e2.2 创建 VM 外壳：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evm_fd = ioctl(kvm_fd, KVM_CREATE_VM)\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-分配-vm-内存mmap\" id=\"markdown-toc-23-分配-vm-内存mmap\"\u003e2.3 分配 VM 内存：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emmap()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-初始化-vm-内存ioctlvm_fd-kvm_set_user_memory_region\" id=\"markdown-toc-24-初始化-vm-内存ioctlvm_fd-kvm_set_user_memory_region\"\u003e2.4 初始化 VM 内存：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eioctl(vm_fd, KVM_SET_USER_MEMORY_REGION)\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#25-加载-vm-镜像open--read\" id=\"markdown-toc-25-加载-vm-镜像open--read\"\u003e2.5 加载 VM 镜像：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eopen() + read()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#26-创建-vcpuioctlvm_fd-kvm_create_vcpu\" id=\"markdown-toc-26-创建-vcpuioctlvm_fd-kvm_create_vcpu\"\u003e2.6 创建 VCPU：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eioctl(vm_fd, KVM_CREATE_VCPU)\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#27-初始化-vcpu-控制区域ioctlkvm_fd-kvm_get_vcpu_mmap_size--mmap\" id=\"markdown-toc-27-初始化-vcpu-控制区域ioctlkvm_fd-kvm_get_vcpu_mmap_size--mmap\"\u003e2.7 初始化 VCPU 控制区域：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eioctl(kvm_fd, KVM_GET_VCPU_MMAP_SIZE) + mmap\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#28-设置-vcpu-寄存器ioctlvcpu_fd-kvm_set_sregskvm_set_regs\" id=\"markdown-toc-28-设置-vcpu-寄存器ioctlvcpu_fd-kvm_set_sregskvm_set_regs\"\u003e2.8 设置 VCPU 寄存器：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eioctl(vcpu_fd, KVM_SET_SREGS/KVM_SET_REGS)\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#29-启动-vmioctlvcpu_fd-kvm_run\" id=\"markdown-toc-29-启动-vmioctlvcpu_fd-kvm_run\"\u003e2.9 启动 VM：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eioctl(vcpu_fd, KVM_RUN)\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#210-小结\" id=\"markdown-toc-210-小结\"\u003e2.10 小结\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-极简-vm-镜像\" id=\"markdown-toc-3-极简-vm-镜像\"\u003e3 极简 VM 镜像\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-极简内核8-行汇编代码\" id=\"markdown-toc-31-极简内核8-行汇编代码\"\u003e3.1 极简内核：8 行汇编代码\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-制作成虚拟机镜像\" id=\"markdown-toc-32-制作成虚拟机镜像\"\u003e3.2 制作成虚拟机镜像\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-测试\" id=\"markdown-toc-4-测试\"\u003e4 测试\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-编译\" id=\"markdown-toc-41-编译\"\u003e4.1 编译\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-运行\" id=\"markdown-toc-42-运行\"\u003e4.2 运行\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-扩展阅读\" id=\"markdown-toc-5-扩展阅读\"\u003e5 扩展阅读\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#译文参考资料\" id=\"markdown-toc-译文参考资料\"\u003e译文参考资料\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003cp\u003eKVM (\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eKernel\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e Virtual Machine) 是 Linux 内核提供的一种虚拟化技术，\n允许用户在单个 Linux 主机上运行多个虚拟机（VM），OpenStack/kubevirt 等等开源 VM 编排系统的底层就是基于 KVM。\n那 KVM 是如何工作的呢？\u003c/p\u003e\n\n\u003ch1 id=\"1-内核-kvm-子系统\"\u003e1 内核 KVM 子系统\u003c/h1\u003e\n\n\u003ch2 id=\"11-交互字符设备-devkvm\"\u003e1.1 交互：字符设备 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/dev/kvm\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eKVM 通过一个特殊（字符）设备 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/dev/kvm\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 供用户空间操作，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003efile /dev/kvm\n/dev/kvm: character special\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eCharacter devices in Linux provide unbuffered access to data. It is used to communicate with devices that\ntransfer data character by character, such as keyboards, mice, serial ports,\nand terminals. Character devices allow data to be read from or written to the\ndevice one character at a time, without any buffering or formatting.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eKVM 的整套 API 都是基于文件描述符的。\u003c/p\u003e\n\n\u003ch2 id=\"12-接口kvm-api\"\u003e1.2 接口：KVM API\u003c/h2\u003e\n\n\u003cp\u003eKVM API 是一系列控制 VM 行为的 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eioctl()\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e get/set 操作，\n按功能层次分为下面几个级别：\u003c/p\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003e级别\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003e说明\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003e备注\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eSystem\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cmark\u003eKVM 子系统级别\u003c/mark\u003e\u003c/strong\u003e的操作；另外还包括一个创建 VM 的 ioctl 操作。\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eVM\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cmark\u003eVM 级别\u003c/mark\u003e\u003c/strong\u003e的操作，例如设置内存布局；另外还包括一个创建 VCPU 和 device 的 ioctl 操作。\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e必须从创建该 VM 的那个进程（地址空间）发起。\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eVCPU\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cmark\u003eVCPU 级别\u003c/mark\u003e\u003c/strong\u003e的操作。\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e必须从创建该 VCPU 那个线程发起。异步 VCPU ioctl 操作除外。\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eDevice\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cmark\u003e设备级别\u003c/mark\u003e\u003c/strong\u003e的操作。\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e必须从创建该 VM 的那个进程（地址空间）发起。\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2 id=\"13-操作ioctl-系统调用\"\u003e1.3 操作：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eioctl()\u003c/code\u003e 系统调用\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eopen(\u0026#34;/dev/kvm\u0026#34;)\u003c/code\u003e 获得一个 KVM 子系统的 fd，\n就可以通过 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eioctl(kvm_fd, ...)\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 系统调用来分配资源、启动和管理 VM 了。\u003c/p\u003e\n\n\u003ch1 id=\"2-100-来行-c-代码创建一个-kvm-虚拟机\"\u003e2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e100\u003c/code\u003e 来行 C 代码创建一个 KVM 虚拟机\u003c/h1\u003e\n\n\u003cp\u003e接下来看一个完整例子：如何基于 KVM 提供的 API 来创建和运行一个虚拟机。\u003c/p\u003e\n\n\u003ch2 id=\"21-打开-kvm-设备kvm_fd--opendevkvm\"\u003e2.1 打开 KVM 设备：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekvm_fd = open(\u0026#34;/dev/kvm\u0026#34;)\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e与 KVM 子系统交互，需要以读写方式打开 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/dev/kvm\u003c/code\u003e，获取一个文件描述符：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003ekvm_fd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eopen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;/dev/kvm\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eO_RDWR\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estderr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;failed to open /dev/kvm: %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerrno\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个文件描述符 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekvm_fd\u003c/code\u003e 在系统中是唯一的，它会将我们接下来的 KVM 操作与主机上其他用户的\nKVM 操作区分开（例如，系统上可能同时有多个用户或进程在创建和管理各自的虚拟机）。\u003c/p\u003e\n\n\u003ch2 id=\"22-创建-vm-外壳vm_fd--ioctlkvm_fd-kvm_create_vm\"\u003e2.2 创建 VM 外壳：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evm_fd = ioctl(kvm_fd, KVM_CREATE_VM)\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e有了 kvm_fd 之后，就可以向内核 KVM 子系统发起一个\u003cstrong\u003e\u003cmark\u003e创建虚拟机\u003c/mark\u003e\u003c/strong\u003e的 ioctl 请求了：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003evm_fd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eioctl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekvm_fd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eKVM_CREATE_VM\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estderr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;failed to create vm: %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerrno\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e返回的文件描述符唯一标识这个虚拟机。\n不过，此时这个“虚拟机”还仅仅是一个\u003cstrong\u003e\u003cmark\u003e“机箱”\u003c/mark\u003e\u003c/strong\u003e，没有 CPU，也没有内存。\u003c/p\u003e\n\n\u003ch2 id=\"23-分配-vm-内存mmap\"\u003e2.3 分配 VM 内存：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emmap()\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e“虚拟机”是用\u003cstrong\u003e\u003cmark\u003e用户空间进程\u003c/mark\u003e\u003c/strong\u003e来模拟一台完整的机器，\n因此给“虚拟机”分配的内存也需要来用户空间，具体来说就是宿主机上的\u003cstrong\u003e\u003cmark\u003e用户空间内存\u003c/mark\u003e\u003c/strong\u003e（userspace memory）。\n分配用户空间内存有多种方式，这里我们用效率比较高的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emmap()\u003c/code\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003emem\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emmap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e30\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ePROT_READ\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ePROT_WRITE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eMAP_PRIVATE\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eMAP_ANONYMOUS\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eMAP_NORESERVE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estderr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;mmap failed: %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerrno\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e成功后，返回映射内存区域的起始地址 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emem\u003c/code\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"24-初始化-vm-内存ioctlvm_fd-kvm_set_user_memory_region\"\u003e2.4 初始化 VM 内存：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eioctl(vm_fd, KVM_SET_USER_MEMORY_REGION)\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e初始化这片内存区域：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ekvm_userspace_memory_region\u003c/span\u003e \u003cspan class=\"n\"\u003eregion\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ememset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eregion\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eregion\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eregion\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eslot\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eregion\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eguest_phys_addr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eregion\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ememory_size\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e30\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eregion\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euserspace_addr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003euintptr_t\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003emem\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eioctl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evm_fd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eKVM_SET_USER_MEMORY_REGION\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eregion\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estderr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;ioctl KVM_SET_USER_MEMORY_REGION failed: %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerrno\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来就可以将虚拟机镜像加载到这片内存区域了。\u003c/p\u003e\n\n\u003ch2 id=\"25-加载-vm-镜像open--read\"\u003e2.5 加载 VM 镜像：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eopen() + read()\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e这里假设命令行第一个参数指定的是\u003cstrong\u003e\u003cmark\u003e虚拟机镜像的文件路径\u003c/mark\u003e\u003c/strong\u003e，\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eimg_fd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eopen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003eO_RDONLY\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimg_fd\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estderr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;can not open binary guest file: %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerrno\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003emem\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(;;)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimg_fd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4096\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimg_fd\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e以 4KB 为单位，通过一个循环将整个镜像文件内容复制到 \u003cstrong\u003e\u003cmark\u003eVM 的内存地址空间\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eKVM \u003cstrong\u003e\u003cmark\u003e并非逐个解释执行 CPU 指令\u003c/mark\u003e\u003c/strong\u003e，而是让真实 CPU 直接执行，\n因此要求\u003cstrong\u003e\u003cmark\u003e镜像（字节码）与当前 CPU 架构相符\u003c/mark\u003e\u003c/strong\u003e，KVM 自己只拦截 I/O 请求。\n因此，KVM 性能很好，除非 VM 有大量 IO 操作。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e至此，VM 内存部分的虚拟化和初始化就完成了。\u003c/p\u003e\n\n\u003ch2 id=\"26-创建-vcpuioctlvm_fd-kvm_create_vcpu\"\u003e2.6 创建 VCPU：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eioctl(vm_fd, KVM_CREATE_VCPU)\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e接下来给 VM 创建虚拟机处理器，即 VCPU：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003evcpu_fd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eioctl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evm_fd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eKVM_CREATE_VCPU\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estderr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;can not create vcpu: %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerrno\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e成功后，返回一个非负的 VCPU 文件描述符。\n这个 VCPU 有自己的寄存器、内存，将模拟一个物理 CPU 的执行。\u003c/p\u003e\n\n\u003ch2 id=\"27-初始化-vcpu-控制区域ioctlkvm_fd-kvm_get_vcpu_mmap_size--mmap\"\u003e2.7 初始化 VCPU 控制区域：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eioctl(kvm_fd, KVM_GET_VCPU_MMAP_SIZE) + mmap\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eVCPU 运行结束后，需要将一些运行状态（\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e\u0026#34;run state\u0026#34;\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e）返回给我们的控制程序。\nKVM 的实现方式是提供一段特殊的内存区域，称为 KVM_RUN，来存储和传递这些状态。\u003c/p\u003e\n\n\u003cp\u003e通过 ioctl 可以获取这段内存的大小：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ekvm_run_mmap_size\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eioctl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekvm_fd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eKVM_GET_VCPU_MMAP_SIZE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekvm_run_mmap_size\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estderr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;ioctl KVM_GET_VCPU_MMAP_SIZE: %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerrno\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后通过 mmap 分配内存：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ekvm_run\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ekvm_run\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003emmap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekvm_run_mmap_size\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ePROT_READ\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ePROT_WRITE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eMAP_SHARED\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evcpu_fd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estderr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;mmap kvm_run: %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerrno\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eVCPU 退出运行时，将把退出原因（例如需要 IO）等状态信息写入这里。\u003c/p\u003e\n\n\u003ch2 id=\"28-设置-vcpu-寄存器ioctlvcpu_fd-kvm_set_sregskvm_set_regs\"\u003e2.8 设置 VCPU 寄存器：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eioctl(vcpu_fd, KVM_SET_SREGS/KVM_SET_REGS)\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e接下来需要初始化这个 VCPU 的寄存器。首先拿到这些寄存器，\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ekvm_regs\u003c/span\u003e \u003cspan class=\"n\"\u003eregs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ekvm_sregs\u003c/span\u003e \u003cspan class=\"n\"\u003esregs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eioctl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evcpu_fd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eKVM_GET_SREGS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esregs\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eperror\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;can not get sregs\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eexit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e为简单起见，我们这里要求虚拟机镜像是 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e16bit\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 模式，\n也就是内存地址和寄存器都是 16 位的。\u003c/p\u003e\n\n\u003cp\u003e设置\u003cstrong\u003e\u003cmark\u003e特殊目的寄存器\u003c/mark\u003e\u003c/strong\u003e（special registers）：\n初始化几个 segment pointers（段指针），它们表示的是内存偏置（memory offset） [2]，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eCS：\u003cstrong\u003e\u003cmark\u003e代码段\u003c/mark\u003e\u003c/strong\u003e（code segment）\u003c/li\u003e\n  \u003cli\u003eSS：\u003cstrong\u003e\u003cmark\u003e栈段\u003c/mark\u003e\u003c/strong\u003e（stack segment）\u003c/li\u003e\n  \u003cli\u003eDS：\u003cstrong\u003e\u003cmark\u003e数据段\u003c/mark\u003e\u003c/strong\u003e（data segment）\u003c/li\u003e\n  \u003cli\u003eES：\u003cstrong\u003e\u003cmark\u003e额外段\u003c/mark\u003e\u003c/strong\u003e（extra segment）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#define CODE_START 0x0000\n\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esregs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eselector\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCODE_START\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 代码\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esregs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebase\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCODE_START\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esregs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ess\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eselector\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCODE_START\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 栈\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esregs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ess\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebase\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCODE_START\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esregs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eds\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eselector\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCODE_START\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 数据\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esregs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eds\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebase\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCODE_START\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esregs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ees\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eselector\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCODE_START\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 额外\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esregs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ees\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebase\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCODE_START\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esregs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eselector\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCODE_START\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esregs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebase\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCODE_START\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esregs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eselector\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCODE_START\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e//\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eioctl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evcpu_fd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eKVM_SET_SREGS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esregs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eperror\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;can not set sregs\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e设置\u003cstrong\u003e\u003cmark\u003e通用目的寄存器\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e    \u003cspan class=\"n\"\u003eregs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erflags\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eregs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erip\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eioctl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evcpu_fd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eKVM_SET_REGS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eregs\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eperror\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;KVM SET REGS\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e至此，所有初始化工作都做完了，接下来就可以启动这个虚拟机了。\u003c/p\u003e\n\n\u003ch2 id=\"29-启动-vmioctlvcpu_fd-kvm_run\"\u003e2.9 启动 VM：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eioctl(vcpu_fd, KVM_RUN)\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e启动一个无限循环，在里面做两件事情：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eioctl(vcpu_fd, KVM_RUN, 0)\u003c/code\u003e \u003cstrong\u003e\u003cmark\u003e让 VCPU 运行\u003c/mark\u003e\u003c/strong\u003e，直到它主动退出；\u003c/li\u003e\n  \u003cli\u003eVCPU 退出之后，读取 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eKVM_RUN\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e \u003cstrong\u003e\u003cmark\u003e控制区域，判断退出原因\u003c/mark\u003e\u003c/strong\u003e，然后执行相应的操作；\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(;;)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eioctl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evcpu_fd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eKVM_RUN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003efprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estderr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;KVM_RUN failed\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eexit_reason\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eKVM_EXIT_IO\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;IO port: %x, data: %x\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eio\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eport\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                        \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)((\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eio\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata_offset\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n                \u003cspan class=\"n\"\u003esleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eKVM_EXIT_SHUTDOWN\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eexit\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里只判断两种状态：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e如果 VCPU 是因为要执行 IO 操作而退出，那就从 KVM_RUN 区域读取它想输入/输出的数据，然后替它执行 —— 这里就是打印出来；\u003c/li\u003e\n  \u003cli\u003e如果是正常退出，就退出这个无限循环 —— 对我们这个简单程序来说，实际效果就是关闭并销毁这个虚拟机。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"210-小结\"\u003e2.10 小结\u003c/h2\u003e\n\n\u003cp\u003e以上就是创建、初始化并运行一个 VM 的代码，总共 130 行左右（如果不算头文件引用和一些打印代码，不到 100 行）。\n要测试运行，现在唯一还缺的就是一个\u003cstrong\u003e\u003cmark\u003e虚拟机镜像\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e为了深入理解，下面我们自己用汇编代码来写一个极简虚拟机（内核），并做成镜像。\u003c/p\u003e\n\n\u003ch1 id=\"3-极简-vm-镜像\"\u003e3 极简 VM 镜像\u003c/h1\u003e\n\n\u003ch2 id=\"31-极简内核8-行汇编代码\"\u003e3.1 极简内核：8 行汇编代码\u003c/h2\u003e\n\n\u003cp\u003e我们将用 16bit 汇编代码实现一个袖珍 guest VM “kernel”，效果是\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e初始化一个变量为 0，\u003c/li\u003e\n  \u003cli\u003e进入一个无限循环，首先将变量值输出到 debug 端口 0x10，然后变量值加 1，进入下次循环；\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e代码如下，每行都做了注释，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# A tiny 16-bit guest \u0026#34;kernel\u0026#34; that infinitely prints an incremented number to the debug port\u003c/span\u003e\n\n.globl _start\n.code16          \u003cspan class=\"c\"\u003e# 16bit 模式，让 KVM 用 \u0026#34;real\u0026#34; mode 运行\u003c/span\u003e\n_start:          \u003cspan class=\"c\"\u003e# 代码开始\u003c/span\u003e\n  xorw %ax, %ax  \u003cspan class=\"c\"\u003e# 设置 %ax = 0。对同一个寄存器做异或操作，结果为 0，所以这个操作就是重置寄存器 ax。\u003c/span\u003e\nloop:            \u003cspan class=\"c\"\u003e# 开始一个循环\u003c/span\u003e\n  out %ax, \u003cspan class=\"nv\"\u003e$0x10\u003c/span\u003e \u003cspan class=\"c\"\u003e# 将 ax 寄存器的值输出到 0x10 I/O port\u003c/span\u003e\n  inc %ax        \u003cspan class=\"c\"\u003e# 将 ax 寄存器的值加 1\u003c/span\u003e\n  jmp loop       \u003cspan class=\"c\"\u003e# 跳到下一次循环\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e基础 x86 汇编语法可参考 \u003ca href=\"/blog/x86-asm-guide-zh/\"\u003e(译) 简明 x86 汇编指南（2017）\u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eKVM VCPU 支持运行多种模式（16/32 bit 等），这里用 16bit 是因为这种模式最简单。\n另外，Real mode 是直接内存寻址的，不需要 descriptor tables，因此初始化寄存器非常方便。\u003c/p\u003e\n\n\u003ch2 id=\"32-制作成虚拟机镜像\"\u003e3.2 制作成虚拟机镜像\u003c/h2\u003e\n\n\u003cp\u003e只需汇编（assemble）和链接：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emake image\nas \u003cspan class=\"nt\"\u003e-32\u003c/span\u003e guest.S \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e guest.o\nld \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e elf_i386 \u003cspan class=\"nt\"\u003e--oformat\u003c/span\u003e binary \u003cspan class=\"nt\"\u003e-N\u003c/span\u003e \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e _start \u003cspan class=\"nt\"\u003e-Ttext\u003c/span\u003e 0x10000 \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e guest guest.o\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e汇编（assemble）：将\u003cstrong\u003e\u003cmark\u003e汇编代码\u003c/mark\u003e\u003c/strong\u003e（assembly code）转成\u003cstrong\u003e\u003cmark\u003e目标文件\u003c/mark\u003e\u003c/strong\u003e（object file）\u003c/li\u003e\n  \u003cli\u003e链接（linking）：将\u003cstrong\u003e\u003cmark\u003e目标文件\u003c/mark\u003e\u003c/strong\u003e及其依赖链接为\u003cstrong\u003e\u003cmark\u003eELF 文件\u003c/mark\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e最终得到的是一个\u003cstrong\u003e\u003cmark\u003e与当前 CPU 架构相同\u003c/mark\u003e\u003c/strong\u003e的二进制文件（\u003cstrong\u003e\u003cmark\u003e字节码\u003c/mark\u003e\u003c/strong\u003e），\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003efile guest\nguest: data\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e当前宿主机的 CPU 可以直接执行这些指令。\u003c/p\u003e\n\n\u003ch1 id=\"4-测试\"\u003e4 测试\u003c/h1\u003e\n\n\u003ch2 id=\"41-编译\"\u003e4.1 编译\u003c/h2\u003e\n\n\u003cp\u003e我们的 C 代码只依赖内核头文件，如果用的 centos，如下安装：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eyum \u003cspan class=\"nb\"\u003einstall \u003c/span\u003ekernel-headers\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后就可以用 gcc 或 clang 编译了：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emake kvm\ngcc kvm-vmm.c\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\n\u003c/span\u003ea.out  guest  guest.o  guest.S  kvm-vmm.c  Makefile\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"42-运行\"\u003e4.2 运行\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./a.out guest\nIO port: 10, data: 0\nIO port: 10, data: 1\nIO port: 10, data: 2\n^C\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"5-扩展阅读\"\u003e5 扩展阅读\u003c/h1\u003e\n\n\u003cp\u003e如何让虚拟机内核更接近现实，\u003ca href=\"https://zserge.com/posts/kvm/\"\u003e原文\u003c/a\u003e 有进一步讨论和部分验证：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e方向\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e通过 ioctl 增加定时器、中断控制器等；\u003c/li\u003e\n      \u003cli\u003ebzImage 格式；\u003c/li\u003e\n      \u003cli\u003eboot 协议\u003c/li\u003e\n      \u003cli\u003e磁盘、键盘、图形处理器等 I/O driver 支持\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e实际上不会直接使用 KVM API，而是使用更上层的\u003ca href=\"https://libvirt.org/\"\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003elibvirt\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/a\u003e，封装了 KVM/BHyve 等底层虚拟化技术；\u003c/li\u003e\n  \u003cli\u003e想更深入学习 KVM，推荐阅读 \u003ca href=\"https://git.kernel.org/pub/scm/linux/kernel/git/will/kvmtool.git/tree/\"\u003ekvmtool\u003c/a\u003e 源码；代码不算多，比 QEMU 更容易理解；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e相关主题：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"/blog/x86-asm-guide-zh/\"\u003e(译) 简明 x86 汇编指南（2017）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/write-your-own-virtual-machine-zh/\"\u003e(译) 400 行 C 代码实现一个虚拟机（2018）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/formal-requirements-for-virtualizable-arch-zh/\"\u003e(译) (论文) 可虚拟化第三代（计算机）架构的规范化条件（ACM, 1974）\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"译文参考资料\"\u003e译文参考资料\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://docs.kernel.org/virt/kvm/api.html\"\u003eThe Definitive KVM (Kernel-based Virtual Machine) API Documentation\u003c/a\u003e, kernel.org\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://en.wikibooks.org/wiki/X86_Assembly/16,_32,_and_64_Bits#16-bit\"\u003ex86 Assembly/16, 32, and 64 Bits\u003c/a\u003e, wikipedia\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/gpu-data-sheets/\"\u003e\u003cspan\u003e« GPU Performance (Data Sheets) Quick Reference (2023)\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/vm-on-k8s/\"\u003e\u003cspan\u003eVirtual Machines on Kubernetes: Requirements and Solutions (2023) »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2023-11-05T00:00:00Z",
  "Author": "Arthur Chiao"
}