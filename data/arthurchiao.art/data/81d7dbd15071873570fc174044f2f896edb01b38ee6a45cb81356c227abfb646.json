{
  "Source": "arthurchiao.art",
  "Title": "Trip.com: Large Scale Cloud Native Networking \u0026 Security with Cilium/eBPF (eBPFSummit, 2022)",
  "Link": "https://arthurchiao.art/blog/trip-large-scale-cloud-native-networking-and-security-with-cilium-ebpf/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eTrip.com: Large Scale Cloud Native Networking \u0026amp; Security with Cilium/eBPF (eBPFSummit, 2022)\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2022-09-28 | Last Update 2022-12-11\u003c/p\u003e\n  \n  \u003cp\u003eThis is an entended version of my talk at \u003ca href=\"https://ebpf.io/summit-2022/\"\u003e\u003cstrong\u003eeBPF Summit 2022\u003c/strong\u003e\u003c/a\u003e:\n\u003cstrong\u003e\u003cem\u003e\u003cmark\u003eLarge scale cloud native networking and security with Cilium/eBPF: 4 years production experiences from Trip.com\u003c/mark\u003e\u003c/em\u003e\u003c/strong\u003e.\nThis version covers more contents and details that’s missing from the talk (for time limitation).\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#abstract\" id=\"markdown-toc-abstract\"\u003eAbstract\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-cloud-infrastructure-at-tripcom\" id=\"markdown-toc-1-cloud-infrastructure-at-tripcom\"\u003e1 Cloud Infrastructure at Trip.com\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-layered-architecture\" id=\"markdown-toc-11-layered-architecture\"\u003e1.1 Layered architecture\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-more-details\" id=\"markdown-toc-12-more-details\"\u003e1.2 More details\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-cilium-at-tripcom\" id=\"markdown-toc-2-cilium-at-tripcom\"\u003e2 Cilium at Trip.com\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-timeline-of-rolling-out\" id=\"markdown-toc-21-timeline-of-rolling-out\"\u003e2.1 Timeline of rolling out\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-customizations\" id=\"markdown-toc-22-customizations\"\u003e2.2 Customizations\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-optimizations--tunings\" id=\"markdown-toc-23-optimizations--tunings\"\u003e2.3 Optimizations \u0026amp; tunings\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#231-decouple-installation\" id=\"markdown-toc-231-decouple-installation\"\u003e2.3.1 Decouple installation\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#232-avoid-retryrestart-storms\" id=\"markdown-toc-232-avoid-retryrestart-storms\"\u003e2.3.2 Avoid retry/restart storms\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#233-stability-first\" id=\"markdown-toc-233-stability-first\"\u003e2.3.3 Stability first\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#234-planning-for-scale\" id=\"markdown-toc-234-planning-for-scale\"\u003e2.3.4 Planning for scale\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#235-performance-tuning\" id=\"markdown-toc-235-performance-tuning\"\u003e2.3.5 Performance tuning\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#236-observability--alerting\" id=\"markdown-toc-236-observability--alerting\"\u003e2.3.6 Observability \u0026amp; alerting\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#237-misc-options\" id=\"markdown-toc-237-misc-options\"\u003e2.3.7 Misc options\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-multi-cluster-solution\" id=\"markdown-toc-24-multi-cluster-solution\"\u003e2.4 Multi-cluster solution\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#241-clustermesh\" id=\"markdown-toc-241-clustermesh\"\u003e2.4.1 ClusterMesh\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#242-kvstoremesh\" id=\"markdown-toc-242-kvstoremesh\"\u003e2.4.2 KVStoreMesh\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-advanced-trouble-shooting-skills\" id=\"markdown-toc-3-advanced-trouble-shooting-skills\"\u003e3 Advanced trouble shooting skills\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-debugging-with-delvedlv\" id=\"markdown-toc-31-debugging-with-delvedlv\"\u003e3.1 Debugging with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edelve/dlv\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-tracing-with-bpftrace\" id=\"markdown-toc-32-tracing-with-bpftrace\"\u003e3.2 Tracing with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftrace\u003c/code\u003e\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#321-with-absolute-path\" id=\"markdown-toc-321-with-absolute-path\"\u003e3.2.1 With absolute path\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#232-with-pid-procpid\" id=\"markdown-toc-232-with-pid-procpid\"\u003e2.3.2 With PID \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/\u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-manipulate-bpf-map-with-bpftool\" id=\"markdown-toc-33-manipulate-bpf-map-with-bpftool\"\u003e3.3 Manipulate BPF map with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftool\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-manipulate-kvstore-contents-with-etcdctl-and-api\" id=\"markdown-toc-34-manipulate-kvstore-contents-with-etcdctl-and-api\"\u003e3.4 Manipulate kvstore contents with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eetcdctl\u003c/code\u003e and API\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-summary\" id=\"markdown-toc-4-summary\"\u003e4 Summary\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#references\" id=\"markdown-toc-references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"abstract\"\u003eAbstract\u003c/h1\u003e\n\n\u003cp\u003eIn Trip.com, we rolled out our first Cilium node (bare metal) into production\nin 2019. Since then, almost all our Kubernetes clusters - both on-premises\nbaremetal and self-managed clusters in public clouds - have switched to Cilium.\u003c/p\u003e\n\n\u003cp\u003eWith ~10K nodes, ~300K pods running on Kubernetes now,\nCilium powers our business critical services such as hotel\nsearch engines, financial/payment services, in-memory databases, data store\nservices, which cover a wide range of requirements in terms of latency,\nthroughput, etc.\u003c/p\u003e\n\n\u003cp\u003eFrom our 4 years of experiences, the audience will learn cloud native networking and security with Cilium including:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eHow to use CiliumNetworkPolicy for L3/L4 access control including extending the security model to BM/VM instances;\u003c/li\u003e\n  \u003cli\u003eOur new multi-cluster solution called KVStoreMesh as an alternative to ClusterMesh and how we made it compatible with the community for easy upgrade;\u003c/li\u003e\n  \u003cli\u003eBuilding stability at scale, like managing control plane and multi-cluster outages, and the improvements we made to Cilium as a result.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"1-cloud-infrastructure-at-tripcom\"\u003e1 Cloud Infrastructure at Trip.com\u003c/h1\u003e\n\n\u003ch2 id=\"11-layered-architecture\"\u003e1.1 Layered architecture\u003c/h2\u003e\n\n\u003cp\u003eThe Trip.com cloud team is responsible for the corporation’s infrastructure over the globe, as shown below:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-ebpf-summit-2022/trip-cloud-infra.png\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eIn the bottom we have data centers and several public cloud vendors;\u003c/li\u003e\n  \u003cli\u003eAbove the bottom is our orchestration systems for BM, VM and container;\u003c/li\u003e\n  \u003cli\u003eOne layer up is the internally developed continues delivery platform (CI/CD);\u003c/li\u003e\n  \u003cli\u003eAt the top are our business services and corresponding middlewares;\u003c/li\u003e\n  \u003cli\u003eIn the vertical direction, we have security \u0026amp; management tools at different levels.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe cloud scope is the box shown in the picture.\u003c/p\u003e\n\n\u003ch2 id=\"12-more-details\"\u003e1.2 More details\u003c/h2\u003e\n\n\u003cp\u003eMore specific information about our infra:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-ebpf-summit-2022/cloud-infra-details.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eMost of our workloads now run on Kubernetes, we have 3 big\nclusters and several small ones, with total \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e~10k\u003c/code\u003e nodes and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e~300k\u003c/code\u003e pods;\u003c/li\u003e\n  \u003cli\u003eMost Kubernetes nodes are \u003cstrong\u003e\u003cmark\u003eblade servers\u003c/mark\u003e\u003c/strong\u003e; which\u003c/li\u003e\n  \u003cli\u003eRun with internally maintained \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e4.19/5.10\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e kernels;\u003c/li\u003e\n  \u003cli\u003eAnd for inter-host networking, we use BGP for on-premises clusters and ENI\nfor self-managed clusters on the cloud.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"2-cilium-at-tripcom\"\u003e2 Cilium at Trip.com\u003c/h1\u003e\n\n\u003ch2 id=\"21-timeline-of-rolling-out\"\u003e2.1 Timeline of rolling out\u003c/h2\u003e\n\n\u003cp\u003eThis is a simple timeline of our rolling out process:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-ebpf-summit-2022/trip-cilium-timeline.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eWe started investigating cloud-native networking solution in 2018 [9], and of course, Cilium won out;\u003c/li\u003e\n  \u003cli\u003eOur first cilium node rolled into production in 2019 [10];\u003c/li\u003e\n  \u003cli\u003eSince then, all kinds of our business and infrastructure services began to migrate to Cilium, transparently.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn 2021, with most online businesses already in Cilium,\nwe started a security project based on Cilium network policy [8].\u003c/p\u003e\n\n\u003cp\u003eFunctionalities we’re using:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eService LoadBalancing (eBPF/XDP)\u003c/li\u003e\n  \u003cli\u003eCiliumNetworkPolicy (CNP)\u003c/li\u003e\n  \u003cli\u003eeBPF host routing\u003c/li\u003e\n  \u003cli\u003eeBPF bandwidth manager\u003c/li\u003e\n  \u003cli\u003eHubble (part of)\u003c/li\u003e\n  \u003cli\u003eRsyslog driver\u003c/li\u003e\n  \u003cli\u003ePerformance boost options like sockops, eBPF redirects\u003c/li\u003e\n  \u003cli\u003e…\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"22-customizations\"\u003e2.2 Customizations\u003c/h2\u003e\n\n\u003cp\u003eFirst, two Kubernetes clusters shown here,\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-ebpf-summit-2022/customization-1.png\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eSome of our customizations based on the above topology:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-ebpf-summit-2022/customization-2.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eUse docker-compose to deploy cilium to remove kubernetes dependency [1];\u003c/li\u003e\n  \u003cli\u003eAssign each agent a dedicated certificate for Kubernetes authentication, instead of the shared seviceaccount by all agents;\u003c/li\u003e\n  \u003cli\u003eWe’ve helped to maturate Cilium’s rsyslog driver, and have sent all agent logs to ClickHouse for trouble shooting;\u003c/li\u003e\n  \u003cli\u003eFew patches added to facilitate business migration, but this is not that general, so we didn’t upstream them;\u003c/li\u003e\n  \u003cli\u003eUse BIRD as BGP agent instead of the suggested kube-router then, and we’ve contributed a BGP+Cilium guide to Cilium documentation;\u003c/li\u003e\n  \u003cli\u003eWe developed a new multi-cluster solution called KVStoreMesh [4]. More on this lader.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"23-optimizations--tunings\"\u003e2.3 Optimizations \u0026amp; tunings\u003c/h2\u003e\n\n\u003cp\u003eNow the optimization and tuning parts.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-ebpf-summit-2022/optimization-1.png\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-ebpf-summit-2022/optimization-2.png\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\n\u003ch3 id=\"231-decouple-installation\"\u003e2.3.1 Decouple installation\u003c/h3\u003e\n\n\u003cp\u003eAs mentioned just now, the first thing we’ve done is decoupling Cilium\ndeploying/installation from Kubernetes: no daemonset, no configmap.  All the\nconfigurations needed by the agent are on the node.\u003c/p\u003e\n\n\u003cp\u003eThis makes agents suffer less from Kubernetes outages, but more importantly,\n\u003cstrong\u003e\u003cmark\u003eeach agent is now completely independent in terms of configuration and upgrade\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"232-avoid-retryrestart-storms\"\u003e2.3.2 Avoid retry/restart storms\u003c/h3\u003e\n\n\u003cp\u003eThe second consideration is to avoid retry storms and burst starting,\nas requests will surge by two orders of magnitude or even higher\nwhen outage occurs, which could easily crash or stuck central components\nlike Kubernetes apiserver/etcd and kvstore.\u003c/p\u003e\n\n\u003cp\u003eWe use an internally developed restart backoff (jitter+backoff) mechanism to avoid such cases.\nthe \u003cstrong\u003e\u003cmark\u003ejitter window is calculated according to cluster scale\u003c/mark\u003e\u003c/strong\u003e.\nSuch as,\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eFor a cluster with 1000 nodes, the jitter window may be 20 minutes, during which period\n\u003cstrong\u003e\u003cmark\u003eeach agent is allowed to start one and only one time\u003c/mark\u003e\u003c/strong\u003e, then backed off.\u003c/li\u003e\n  \u003cli\u003eFor a cluster with 5000 nodes, the jitter window may be 60 minutes.\u003c/li\u003e\n  \u003cli\u003eThe backoff mechanism is \u003cstrong\u003e\u003cmark\u003eimplemented as a bash script\u003c/mark\u003e\u003c/strong\u003e (all states are saved in a local file), used\nin docker-compose as a “pre-start hook”, \u003cstrong\u003e\u003cmark\u003eCilium code suffers no changes\u003c/mark\u003e\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBesides, we’ve assigned each agent a distinct certificate (each agent has a\ndedicated username but belongs to a common user group), which enables\nKubernetes to perform rate limiting on Cilium agents with \u003ca href=\"https://kubernetes.io/docs/concepts/cluster-administration/flow-control/\"\u003eAPF\u003c/a\u003e\n(API Priority and Fairness). \u003cstrong\u003e\u003cmark\u003eNo Cilium code changes\u003c/mark\u003e\u003c/strong\u003e to achieve this, too.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-ebpf-summit-2022/per-agent-cert.png\" width=\"95%\" height=\"95%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eRefer to our previous blogs if you’d like to learn more about Kubernetes AuthN/AuthZ models [2,3].\u003c/p\u003e\n\n\u003ch3 id=\"233-stability-first\"\u003e2.3.3 Stability first\u003c/h3\u003e\n\n\u003cp\u003eTrip.com provides online booking services worldwide with 7x24h, so at any time\nof any day, business service down would lead to instantaneous losses to the\ncompany. So, we\n\u003cstrong\u003e\u003cmark\u003ecan’t risk letting foundational services like networking to restart itself by the simple “fast failure”\u003c/mark\u003e\u003c/strong\u003e\nrule, but favor necessary human interventions and decisions.\u003c/p\u003e\n\n\u003cp\u003eWhen failure arises, we’d like services such as Cilium to be more patient, just\nwait there and keep the current business uninterrupted, letting system developers and\nmaintainers decide what to do; \u003cstrong\u003e\u003cmark\u003efast failure and automatic retries\nmake things worse\u003c/mark\u003e\u003c/strong\u003e more than often in such cases.\u003c/p\u003e\n\n\u003cp\u003eSome specific options (with exemplanary configurations) to tune this behavior:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--allocator-list-timeout=3h\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--kvstore-lease-ttl=86400s\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--k8s-syn-timeout=600s\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--k8s-heartbeat-timeout=60s\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRefer to the Cilium documentation or source code to figure out what each option\nexactly means, and customize them according to your needs.\u003c/p\u003e\n\n\u003ch3 id=\"234-planning-for-scale\"\u003e2.3.4 Planning for scale\u003c/h3\u003e\n\n\u003cp\u003eDepending on your cluster scale, certain stuffs needs to be planned in advance.\nFor example, \u003cstrong\u003e\u003cmark\u003eidentity relevant labels\u003c/mark\u003e\u003c/strong\u003e (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--labels\u003c/code\u003e) directly determine\nthe \u003cstrong\u003e\u003cmark\u003emaximum pods in your cluster\u003c/mark\u003e\u003c/strong\u003e: a group of labels map to\none identity in Cilium, so in it’s design, all pods with the same labels share the same identity.\nBut, if your \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--labels=\u0026lt;labels\u0026gt;\u003c/code\u003e is too fine grained (which is unfortunately the default\ncase), it may result in each pod has a distinct identity in the worse case, then your cluster scale is\nupper bounded by \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e64K\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e pods, as identity is represented\nwith a \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e16bit\u003c/code\u003e integer. Refer to [8] for more information.\u003c/p\u003e\n\n\u003cp\u003eBesides, there are parameters that needs to be decided or tuned according to\nyour workload throughput, such as identity allocation mode, connection tracking table.\u003c/p\u003e\n\n\u003cp\u003eOptions:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--cluster-id\u003c/code\u003e/\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--cluster-name\u003c/code\u003e: avoid identity conflicts in multi-cluster scenarios;\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--labels=\u0026lt;labellist\u0026gt;\u003c/code\u003e identity relavent labels\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--identity-allocation-mode\u003c/code\u003e and kvstore benchmarking if kvstore mode is used\u003c/p\u003e\n\n    \u003cp\u003eWe use \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekvstore\u003c/code\u003e mode, and \u003cstrong\u003e\u003cmark\u003erunning kvstore (cilium etcd) on dedicated blade servers\u003c/mark\u003e\u003c/strong\u003e for large clusters.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--bpf-ct-*\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--api-rate-limit\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eMonitor aggregation options for reducing volume of observability data\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"235-performance-tuning\"\u003e2.3.5 Performance tuning\u003c/h3\u003e\n\n\u003cp\u003eCilium includes many high performance options such as sockops and BPF host\nrouting, and of course, all those features needs specific kernel versions\nsupport.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--socops-enable\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--bpf-lb-sock-hostns-only\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e…\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBesides, \u003cstrong\u003e\u003cmark\u003edisable some debug level options\u003c/mark\u003e\u003c/strong\u003e is also necessary:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--disable-cnp-status-updates\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e…\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"236-observability--alerting\"\u003e2.3.6 Observability \u0026amp; alerting\u003c/h3\u003e\n\n\u003cp\u003eThe last aspect we’d like to talk about is observability.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eMetric\u003c/li\u003e\n  \u003cli\u003eLogging\u003c/li\u003e\n  \u003cli\u003eTracing\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eApart from the \u003cstrong\u003e\u003cmark\u003emetrics data\u003c/mark\u003e\u003c/strong\u003e from Cilium agent/operator, we\nalso collected all agent/operator logs (\u003cstrong\u003e\u003cmark\u003elogging data\u003c/mark\u003e\u003c/strong\u003e) and sent\nto ClickHouse for analyzing, so, we could alert on abnormal metrics as well as\nerror/warning logs,\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-ebpf-summit-2022/cilium-logs-alerting.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eBesides, tracing can be helpful too, more on this later.\u003c/p\u003e\n\n\u003ch3 id=\"237-misc-options\"\u003e2.3.7 Misc options\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--enable-hubble\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--keep-config\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--log-drivers\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--policy-audit-mode\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"24-multi-cluster-solution\"\u003e2.4 Multi-cluster solution\u003c/h2\u003e\n\n\u003cp\u003eNow let’s have a look at the multi-cluster problem.\u003c/p\u003e\n\n\u003cp\u003eFor historical reasons, our businesses are deployed across different\ndata centers and Kubernetes clusters.\nSo there are inter-cluster communications without L4/L7 border gateways.\nThis is a problem for access control, as Cilium \u003cstrong\u003e\u003cmark\u003eidentity is a cluster scope object\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"241-clustermesh\"\u003e2.4.1 ClusterMesh\u003c/h3\u003e\n\n\u003cp\u003eThe community solution to this problem is ClusterMesh as shown here,\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-ebpf-summit-2022/clustermesh.png\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eClusterMesh requires each agent to connect to each kvstore in all clusters,\neffectively resulting in a peer-to-peer mesh.  While this solution is straight\nforward, it suffers stability and scalability issues, especially for large\nclusters.\u003c/p\u003e\n\n\u003cp\u003eIn short, when a single cluster down, the failure would soon propagate to all\nthe other clusters in-the-mesh,\nAnd eventually all the clusters may crash at the same time, as illustrated below:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-ebpf-summit-2022/clustermesh-problems.png\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eEssentially, this is because clusters in ClusterMesh are too tightly coupled.\u003c/p\u003e\n\n\u003ch3 id=\"242-kvstoremesh\"\u003e2.4.2 KVStoreMesh\u003c/h3\u003e\n\n\u003cp\u003eOur solution to this problem is very simple in concept:\npull metadata from all the remote kvstores, and push to local one after filtering.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-ebpf-summit-2022/kvstoremesh-2-clusters.png\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eThe three-cluster case show this concept more clearly: only kvstores are involved,\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-ebpf-summit-2022/kvstoremesh-3-clusters.png\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eIn ClusterMesh, agents fetch remote metadata from remote kvstores; in KVStoreMesh, they get from the local one.\u003c/p\u003e\n\n\u003cp\u003eThanks to cilium’s good design, this only needs\n\u003cstrong\u003e\u003cmark\u003ea few improvements and/or bugfixes to the agent and operator\u003c/mark\u003e\u003c/strong\u003e [4], and we’ve already\nupstreamed some of them. A \u003cstrong\u003e\u003cmark\u003ekvstoremesh-operator\u003c/mark\u003e\u003c/strong\u003e\nis newly introduced, and maintained internally currently;\nwe’ll devote more efforts to upstream it in the next, too.\u003c/p\u003e\n\n\u003cp\u003eBesides, we’ve also developed a simple solution to let Cilium\nbe aware of our legacy workloads like virtual machines in OpenStack,\nthe-solultion is called CiliumExeternalResource. Please see our previous\nblog [8] if you’re interested in.\u003c/p\u003e\n\n\u003ch1 id=\"3-advanced-trouble-shooting-skills\"\u003e3 Advanced trouble shooting skills\u003c/h1\u003e\n\n\u003cp\u003eNow let’s back to some handy stuffs.\u003c/p\u003e\n\n\u003cp\u003eThe fist one, debugging.\u003c/p\u003e\n\n\u003ch2 id=\"31-debugging-with-delvedlv\"\u003e3.1 Debugging with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edelve/dlv\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eDelve is a good friend, and our docker-compose way makes \u003cstrong\u003e\u003cmark\u003edebugging more easier\u003c/mark\u003e\u003c/strong\u003e,\nas each agent independently deployed, commands can be\nexecuted on the node to start/stop/reconfigure the agent.\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Start cilium-agent agent container with entrypoint `sleep 10d`, then enter the container\u003c/span\u003e\n\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e cilium-agent bash\n\n\u003cspan class=\"o\"\u003e(\u003c/span\u003ecilium-agent ctn\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003edlv \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e /usr/bin/cilium-agent \u003cspan class=\"nt\"\u003e--\u003c/span\u003e \u003cspan class=\"nt\"\u003e--config-dir\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e/tmp/cilium/config-map\nType \u003cspan class=\"s1\"\u003e\u0026#39;help\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003efor \u003c/span\u003elist of commands.\n\u003cspan class=\"o\"\u003e(\u003c/span\u003edlv\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e(\u003c/span\u003edlv\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nb\"\u003ebreak \u003c/span\u003egithub.com/cilium/cilium/pkg/endpoint.\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003eEndpoint\u003cspan class=\"o\"\u003e)\u003c/span\u003e.regenerateBPF\nBreakpoint 3 \u003cspan class=\"nb\"\u003eset \u003c/span\u003eat 0x1e84a3b \u003cspan class=\"k\"\u003efor \u003c/span\u003egithub.com/cilium/cilium/pkg/endpoint.\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003eEndpoint\u003cspan class=\"o\"\u003e)\u003c/span\u003e.regenerateBPF\u003cspan class=\"o\"\u003e()\u003c/span\u003e /go/src/github.com/cilium/cilium/pkg/endpoint/bpf.go:591\n\u003cspan class=\"o\"\u003e(\u003c/span\u003edlv\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nb\"\u003ebreak \u003c/span\u003egithub.com/cilium/cilium/pkg/endpoint/bpf.go:1387\nBreakpoint 4 \u003cspan class=\"nb\"\u003eset \u003c/span\u003eat 0x1e8c27b \u003cspan class=\"k\"\u003efor \u003c/span\u003egithub.com/cilium/cilium/pkg/endpoint.\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003eEndpoint\u003cspan class=\"o\"\u003e)\u003c/span\u003e.syncPolicyMapWithDump\u003cspan class=\"o\"\u003e()\u003c/span\u003e /go/src/github.com/cilium/cilium/pkg/endpoint/bpf.go:1387\n\u003cspan class=\"o\"\u003e(\u003c/span\u003edlv\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\n...\n\n\u003cspan class=\"o\"\u003e(\u003c/span\u003edlv\u003cspan class=\"o\"\u003e)\u003c/span\u003e clear 1\nBreakpoint 1 cleared at 0x1e84a3b \u003cspan class=\"k\"\u003efor \u003c/span\u003egithub.com/cilium/cilium/pkg/endpoint.\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003eEndpoint\u003cspan class=\"o\"\u003e)\u003c/span\u003e.regenerateBPF\u003cspan class=\"o\"\u003e()\u003c/span\u003e /go/src/github.com/cilium/cilium/pkg/endpoint/bpf.go:591\n\u003cspan class=\"o\"\u003e(\u003c/span\u003edlv\u003cspan class=\"o\"\u003e)\u003c/span\u003e clear 2\nBreakpoint 2 cleared at 0x1e8c27b \u003cspan class=\"k\"\u003efor \u003c/span\u003egithub.com/cilium/cilium/pkg/endpoint.\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003eEndpoint\u003cspan class=\"o\"\u003e)\u003c/span\u003e.syncPolicyMapWithDump\u003cspan class=\"o\"\u003e()\u003c/span\u003e /go/src/github.com/cilium/cilium/pkg/endpoint/bpf.go:1387\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWe’ve tracked down several bugs in this way.\u003c/p\u003e\n\n\u003ch2 id=\"32-tracing-with-bpftrace\"\u003e3.2 Tracing with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftrace\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eAnother useful tool is bpftrace for live tracing.\u003c/p\u003e\n\n\u003cp\u003eBut note that there are some differences for \u003cstrong\u003e\u003cmark\u003etracing container processes\u003c/mark\u003e\u003c/strong\u003e.\nYou need to find the PID namespace or absolute path of the cilium-agent binary on the node.\u003c/p\u003e\n\n\u003ch3 id=\"321-with-absolute-path\"\u003e3.2.1 With absolute path\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Check cilium-agent container\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker ps | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003ecilium-agent\n0eb2e76384b3        cilium:20220516   \u003cspan class=\"s2\"\u003e\u0026#34;/usr/bin/cilium-agent ...\u0026#34;\u003c/span\u003e   4 hours ago    Up 4 hours   cilium-agent\n\n\u003cspan class=\"c\"\u003e# Find the merged path for cilium-agent container\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker inspect \u003cspan class=\"nt\"\u003e--format\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;{{.GraphDriver.Data.MergedDir}}\u0026#34;\u003c/span\u003e 0eb2e76384b3\n/var/lib/docker/overlay2/0a26c6/merged \u003cspan class=\"c\"\u003e# 0a26c6.. is shortened for better viewing\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# The object file we are going to trace\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nt\"\u003e-ahl\u003c/span\u003e /var/lib/docker/overlay2/0a26c6/merged/usr/bin/cilium-agent\n/var/lib/docker/overlay2/0a26c6/merged/usr/bin/cilium-agent \u003cspan class=\"c\"\u003e# absolute path\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Or you can find it bruteforcelly if there are no performance (e.g. IO spikes) concerns:\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003efind /var/lib/docker/overlay2/ \u003cspan class=\"nt\"\u003e-name\u003c/span\u003e cilium-agent\n/var/lib/docker/overlay2/0a26c6/merged/usr/bin/cilium-agent \u003cspan class=\"c\"\u003e# absolute path\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAnyway, after located the target file and checked out the symbols in it,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enm /var/lib/docker/overlay2/0a26c6/merged/usr/bin/cilium-agent\n0000000001d3e940 T type..hash.github.com/cilium/cilium/pkg/k8s.ServiceID\n0000000001f32300 T type..hash.github.com/cilium/cilium/pkg/node/types.Identity\n0000000001d05620 T type..hash.github.com/cilium/cilium/pkg/policy/api.FQDNSelector\n0000000001d05e80 T type..hash.github.com/cilium/cilium/pkg/policy.PortProto\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eyou can initiate userspace probes like below, printing things you’d like to see:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;uprobe:/var/lib/docker/overlay2/0a26c6/merged/usr/bin/cilium-agent:\u0026#34;github.com/cilium/cilium/pkg/endpoint.(*Endpoint).regenerateBPF\u0026#34; {printf(\u0026#34;%s\\n\u0026#34;, ustack);}\u0026#39;\u003c/span\u003e\nAttaching 1 probe...\n\n        github.com/cilium/cilium/pkg/endpoint.\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003eEndpoint\u003cspan class=\"o\"\u003e)\u003c/span\u003e.regenerateBPF+0\n        github.com/cilium/cilium/pkg/endpoint.\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003eEndpointRegenerationEvent\u003cspan class=\"o\"\u003e)\u003c/span\u003e.Handle+1180\n        github.com/cilium/cilium/pkg/eventqueue.\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003eEventQueue\u003cspan class=\"o\"\u003e)\u003c/span\u003e.run.func1+363\n        sync.\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003eOnce\u003cspan class=\"o\"\u003e)\u003c/span\u003e.doSlow+236\n        github.com/cilium/cilium/pkg/eventqueue.\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003eEventQueue\u003cspan class=\"o\"\u003e)\u003c/span\u003e.run+101\n        runtime.goexit+1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"232-with-pid-procpid\"\u003e2.3.2 With PID \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/\u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eA more convenient and conciser way is to find the PID namespace and passing it to\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftrace\u003c/code\u003e, this will make the commands much shorter:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003edocker inspect \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;{{.State.Pid}}\u0026#39;\u003c/span\u003e cilium-agent\n109997\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;uprobe:/proc/109997/root/usr/bin/cilium-agent:\u0026#34;github.com/cilium/cilium/pkg/endpoint.(*Endpoint).regenerate\u0026#34; {printf(\u0026#34;%s\\n\u0026#34;, ustack); }\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eOr,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 109997 \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;uprobe:/usr/bin/cilium-agent:\u0026#34;github.com/cilium/cilium/pkg/endpoint.(*Endpoint).regenerate\u0026#34; {printf(\u0026#34;%s\\n\u0026#34;, ustack); }\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"33-manipulate-bpf-map-with-bpftool\"\u003e3.3 Manipulate BPF map with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftool\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eNow consider a specific question:\n\u003cstrong\u003e\u003cmark\u003ehow could you determine if a CNP actually takes effect?\u003c/mark\u003e\u003c/strong\u003e\nThere are several ways:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl get cnp \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e \u0026lt;ns\u0026gt; \u0026lt;cnp\u0026gt; \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e yaml       \u003cspan class=\"c\"\u003e# spec \u0026amp; status in k8s\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium endpoint get \u0026lt;ep \u003cspan class=\"nb\"\u003eid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e                 \u003cspan class=\"c\"\u003e# spec \u0026amp; status in cilium userspace\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium bpf policy get \u0026lt;ep \u003cspan class=\"nb\"\u003eid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e               \u003cspan class=\"c\"\u003e# summary of kernel bpf policy status\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003eQuery Kubernetes? NO, that’s too high-level;\u003c/li\u003e\n  \u003cli\u003eCheck out endpoint status? NO, it’s a userspace state and still too high-level;\u003c/li\u003e\n  \u003cli\u003eCheck bpf policy with cilium command? Well, it’s indeed a summary\nof the BPF policies in use, but the summary code itself may also have bugs;\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe most underlying policy state is the \u003cstrong\u003e\u003cmark\u003eBPF policy map in kernel\u003c/mark\u003e\u003c/strong\u003e, we can view it with bpftool:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftool map dump pinned cilium_policy_00794 \u003cspan class=\"c\"\u003e# REAL \u0026amp; ULTIMATE policies in the kernel!\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eBut to use this tool you need to first \u003cstrong\u003e\u003cmark\u003eget yourself familiar with some Cilium data structures\u003c/mark\u003e\u003c/strong\u003e.\nSuch as, how an IP address corresponds to an identity, and how to combine\nIdentity, port, protocol, traffic direction to form a key in BPF policy map.\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Get the corresponding identity of an (client) IP address\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium bpf ipcache get 10.2.6.113\n10.2.6.113 maps to identity 298951 0 0.0.0.0\n\n\u003cspan class=\"c\"\u003e# Convert a numeric identity to its hex representation\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eprintf\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;%08x\u0026#39;\u003c/span\u003e 298951\n00048fc7\n\n\u003cspan class=\"c\"\u003e# Search if there exists any policy related to this identity\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# Key format: identity(4B) + port(2B) + proto(1B) + direction(1B)\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# For endpoint 794\u0026#39;s TCP/80 ingress, check if allow traffic from identity 298951\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftool map dump pinned cilium_policy_00794 | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;c7 8f 04 00\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-B\u003c/span\u003e 1 \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e 3\nkey:\nc7 8f 04 00 00 50 06 00 \u003cspan class=\"c\"\u003e# 4B identity + 2B port(80) + 1B L4Proto(TCP) + direction(ingress)\u003c/span\u003e\nvalue:\n00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThe key and value data structures:\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// PolicyKey represents a key in the BPF policy map for an endpoint. It must\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// match the layout of policy_key in bpf/lib/common.h.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// +k8s:deepcopy-gen:interfaces=github.com/cilium/cilium/pkg/bpf.MapKey\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003ePolicyKey\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eIdentity\u003c/span\u003e         \u003cspan class=\"kt\"\u003euint32\u003c/span\u003e \u003cspan class=\"s\"\u003e`align:\u0026#34;sec_label\u0026#34;`\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eDestPort\u003c/span\u003e         \u003cspan class=\"kt\"\u003euint16\u003c/span\u003e \u003cspan class=\"s\"\u003e`align:\u0026#34;dport\u0026#34;`\u003c/span\u003e \u003cspan class=\"c\"\u003e// In network byte-order\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eNexthdr\u003c/span\u003e          \u003cspan class=\"kt\"\u003euint8\u003c/span\u003e  \u003cspan class=\"s\"\u003e`align:\u0026#34;protocol\u0026#34;`\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eTrafficDirection\u003c/span\u003e \u003cspan class=\"kt\"\u003euint8\u003c/span\u003e  \u003cspan class=\"s\"\u003e`align:\u0026#34;egress\u0026#34;`\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// PolicyEntry represents an entry in the BPF policy map for an endpoint. It must\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// match the layout of policy_entry in bpf/lib/common.h.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// +k8s:deepcopy-gen:interfaces=github.com/cilium/cilium/pkg/bpf.MapValue\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003ePolicyEntry\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eProxyPort\u003c/span\u003e \u003cspan class=\"kt\"\u003euint16\u003c/span\u003e \u003cspan class=\"s\"\u003e`align:\u0026#34;proxy_port\u0026#34;`\u003c/span\u003e \u003cspan class=\"c\"\u003e// In network byte-order\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eFlags\u003c/span\u003e     \u003cspan class=\"kt\"\u003euint8\u003c/span\u003e  \u003cspan class=\"s\"\u003e`align:\u0026#34;deny\u0026#34;`\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ePad0\u003c/span\u003e      \u003cspan class=\"kt\"\u003euint8\u003c/span\u003e  \u003cspan class=\"s\"\u003e`align:\u0026#34;pad0\u0026#34;`\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ePad1\u003c/span\u003e      \u003cspan class=\"kt\"\u003euint16\u003c/span\u003e \u003cspan class=\"s\"\u003e`align:\u0026#34;pad1\u0026#34;`\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ePad2\u003c/span\u003e      \u003cspan class=\"kt\"\u003euint16\u003c/span\u003e \u003cspan class=\"s\"\u003e`align:\u0026#34;pad2\u0026#34;`\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ePackets\u003c/span\u003e   \u003cspan class=\"kt\"\u003euint64\u003c/span\u003e \u003cspan class=\"s\"\u003e`align:\u0026#34;packets\u0026#34;`\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eBytes\u003c/span\u003e     \u003cspan class=\"kt\"\u003euint64\u003c/span\u003e \u003cspan class=\"s\"\u003e`align:\u0026#34;bytes\u0026#34;`\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// pkg/maps/policymap/policymap.go\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// Allow pushes an entry into the PolicyMap to allow traffic in the given\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// `trafficDirection` for identity `id` with destination port `dport` over\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// protocol `proto`. It is assumed that `dport` and `proxyPort` are in host byte-order.\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epm\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ePolicyMap\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eAllow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e \u003cspan class=\"kt\"\u003euint32\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edport\u003c/span\u003e \u003cspan class=\"kt\"\u003euint16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eproto\u003c/span\u003e \u003cspan class=\"n\"\u003eu8proto\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eU8proto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etrafficDirection\u003c/span\u003e \u003cspan class=\"n\"\u003etrafficdirection\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTrafficDirection\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eproxyPort\u003c/span\u003e \u003cspan class=\"kt\"\u003euint16\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ekey\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003enewKey\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edport\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etrafficDirection\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003epef\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003eNewPolicyEntryFlag\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ePolicyEntryFlagParam\u003c/span\u003e\u003cspan class=\"p\"\u003e{})\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eentry\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003enewEntry\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eproxyPort\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epef\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUpdate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eentry\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftool\u003c/code\u003e also comes to rescue in emergency cases, such as when\ntraffic is denied but your Kubernetes or Cilium agent can’t be ready,\njust insert an \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eallow-any\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e rule like this:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Add an allow-any rule in emergency cases\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftool map update pinned \u0026lt;map\u0026gt; \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  key hex 00 00 00 00 00 00 00 00 \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  value hex 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 noexist\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"34-manipulate-kvstore-contents-with-etcdctl-and-api\"\u003e3.4 Manipulate kvstore contents with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eetcdctl\u003c/code\u003e and API\u003c/h2\u003e\n\n\u003cp\u003eThe last skill we’d like to share is to manipulate kvstore contents.\u003c/p\u003e\n\n\u003cp\u003eAgain, this needs a deep understanding about the Cilium data models.\nsuch as, with the following three entries inserted into kvstore,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eetcdctl put \u003cspan class=\"s2\"\u003e\u0026#34;cilium/state/identities/v1/id/15614229\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;k8s:app=app1;k8s:io.cilium.k8s.policy.cluster=cluster1;k8s:io.cilium.k8s.policy.serviceaccount=default;k8s:io.kubernetes.pod.namespace=ns1;\u0026#39;\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eetcdctl put \u003cspan class=\"s1\"\u003e\u0026#39;k8s:app=app1;k8s:io.cilium.k8s.policy.cluster=cluster1;k8s:io.cilium.k8s.policy.serviceaccount=default;k8s:io.kubernetes.pod.namespace=ns1;/10.3.9.10\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  15614229\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eetcdctl put \u003cspan class=\"s2\"\u003e\u0026#34;cilium/state/ip/v1/cluster1/10.3.192.65\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;{\u0026#34;IP\u0026#34;:\u0026#34;10.3.192.65\u0026#34;,\u0026#34;Mask\u0026#34;:null,\u0026#34;HostIP\u0026#34;:\u0026#34;10.3.9.10\u0026#34;,\u0026#34;ID\u0026#34;:15614299,\u0026#34;Key\u0026#34;:0,\u0026#34;Metadata\u0026#34;:\u0026#34;cilium-global:cluster1:node1:2404\u0026#34;,\u0026#34;K8sNamespace\u0026#34;:\u0026#34;ns1\u0026#34;,\u0026#34;K8sPodName\u0026#34;:\u0026#34;pod1\u0026#34;}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eall the cilium-agents will be notified that \u003cstrong\u003e\u003cmark\u003ethere is a pod created\u003c/mark\u003e\u003c/strong\u003e in Kubernetes\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecluster1\u003c/code\u003e, namespace \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edefault\u003c/code\u003e, with PoIP, NodeIP, NodeName, pod label and\nidentity information in the entries.\u003c/p\u003e\n\n\u003cp\u003eEssentially, this is \u003cstrong\u003e\u003cmark\u003ehow we’ve injected our VM, BM and non-cilium-pods into Cilium world in our CER solution\u003c/mark\u003e\u003c/strong\u003e\n(see our previous post [8] for more details);\nit’s also a foundation of Cilium network policy.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003eWARNING\u003c/mark\u003e\u003c/strong\u003e: manipulation of kvstores as well as BPF maps are dangers,\nso we do not recommend to perform these operations in production\nenvironments, unless you know what you are doing.\u003c/p\u003e\n\n\u003ch1 id=\"4-summary\"\u003e4 Summary\u003c/h1\u003e\n\n\u003cp\u003eWe’ve been using Cilium since 1.4 and have upgraded all the way to \u003cdel\u003e1.10\u003c/del\u003e \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1.11\u003c/code\u003e (2022.11 updated) now,\nit’s supporting our business and infrastructure critical services.\nWith 4 years experiences, we believe it’s not only production ready for large scale,\nbut also one of the best candidates in terms of performance, feature, community, etc.\u003c/p\u003e\n\n\u003cp\u003eIn the end, I’d like to say special thanks to Andre, Denial, Joe, Martynas, Paul, Quentin, Thomas\nand all the Cilium guys. The community is very nice and has helped us a lot in the past.\u003c/p\u003e\n\n\u003ch1 id=\"references\"\u003eReferences\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/ctripcloud/cilium-compose\"\u003egithub.com/ctripcloud/cilium-compose\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/cracking-k8s-authn/\"\u003eCracking Kubernetes Authentication (AuthN) Model\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/cracking-k8s-authz-rbac/\"\u003eCracking Kubernetes RBAC Authorization (AuthZ) Model\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://docs.google.com/document/d/1Zc8Sdhp96yKSeC1-71_6qd97HPWQv-L4kiBZhl7swrg/edit#\"\u003eKVStoreMesh proposal\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/cilium-clustermesh/\"\u003eClusterMesh: A Hands-on Guide\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/cracking-k8s-network-policy/\"\u003eCracking Kubernetes Network Policy\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/whats-inside-cilium-etcd/\"\u003eWhat’s inside cilium-etcd and what’s not\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/trip-first-step-towards-cloud-native-security/\"\u003eTrip.com: First Step towards Cloud Native Security\u003c/a\u003e, 2021\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/ctrip-network-arch-evolution/\"\u003eCtrip Network Architecture Evolution in the Cloud Computing Era\u003c/a\u003e, 2019\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/trip-first-step-towards-cloud-native-networking/\"\u003eTrip.com: First Step towards Cloud Native Networking\u003c/a\u003e, 2020\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/bpf-advanced-notes-5-zh/\"\u003e\u003cspan\u003e« BPF 进阶笔记（五）：几种 TCP 相关的 BPF（sockops、struct_ops、header options）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/traffic-control-from-queue-to-edt-zh/\"\u003e\u003cspan\u003e[译] 流量控制（TC）五十年：从基于缓冲队列（Queue）到基于时间（EDT）的演进（Google, 2018） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2022-09-28T00:00:00Z",
  "Author": "Arthur Chiao"
}