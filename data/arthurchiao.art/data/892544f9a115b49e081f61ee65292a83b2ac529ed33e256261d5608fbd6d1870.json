{
  "Source": "arthurchiao.art",
  "Title": "Virtual Machines on Kubernetes: Requirements and Solutions (2023)",
  "Link": "https://arthurchiao.art/blog/vm-on-k8s/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eVirtual Machines on Kubernetes: Requirements and Solutions (2023)\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2023-11-29 | Last Update 2023-11-29\u003c/p\u003e\n  \n  \u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/vm-on-k8s/vm-in-container-solution.png\" width=\"85%\" height=\"85%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. \u003cmark\u003eRunning (full-feature) VMs inside containers\u003c/mark\u003e, phasing out OpenStack. Solutions: kubevirt, etc\n\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#1-introduction\" id=\"markdown-toc-1-introduction\"\u003e1 Introduction\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-pratical-reasons\" id=\"markdown-toc-11-pratical-reasons\"\u003e1.1 Pratical reasons\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-resource-provision-and-orchestration\" id=\"markdown-toc-12-resource-provision-and-orchestration\"\u003e1.2 Resource provision and orchestration\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#121-cloud-computing-era\" id=\"markdown-toc-121-cloud-computing-era\"\u003e1.2.1 Cloud computing era\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#122-cloud-native-era\" id=\"markdown-toc-122-cloud-native-era\"\u003e1.2.2 Cloud Native era\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-summary\" id=\"markdown-toc-13-summary\"\u003e1.3 Summary\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-managing-vm-workloads-via-kubernetes-solutions\" id=\"markdown-toc-2-managing-vm-workloads-via-kubernetes-solutions\"\u003e2 Managing VM workloads via Kubernetes: solutions\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-run-vm-inside-pod-kubevirt\" id=\"markdown-toc-21-run-vm-inside-pod-kubevirt\"\u003e2.1 Run VM inside Pod: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubevirt\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-run-pod-inside-vm-kata-containers\" id=\"markdown-toc-22-run-pod-inside-vm-kata-containers\"\u003e2.2 Run Pod inside VM: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekata containers\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-kubevirt-solution-overview\" id=\"markdown-toc-3-kubevirt-solution-overview\"\u003e3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eKubevirt\u003c/code\u003e solution overview\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-architecture-and-components\" id=\"markdown-toc-31-architecture-and-components\"\u003e3.1 Architecture and components\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-how-it-works\" id=\"markdown-toc-32-how-it-works\"\u003e3.2 How it works\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-node-internal-topology\" id=\"markdown-toc-33-node-internal-topology\"\u003e3.3 Node internal topology\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-tech-stacks\" id=\"markdown-toc-34-tech-stacks\"\u003e3.4 Tech stacks\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#341-computing\" id=\"markdown-toc-341-computing\"\u003e3.4.1 Computing\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#342-networking\" id=\"markdown-toc-342-networking\"\u003e3.4.2 Networking\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#343-storage\" id=\"markdown-toc-343-storage\"\u003e3.4.3 Storage\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-conclusion\" id=\"markdown-toc-4-conclusion\"\u003e4 Conclusion\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#references\" id=\"markdown-toc-references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"1-introduction\"\u003e1 Introduction\u003c/h1\u003e\n\n\u003cp\u003eSome may be puzzling on this topic: \u003cstrong\u003e\u003cmark\u003ewhy do we still need virtual machines\u003c/mark\u003e\u003c/strong\u003e\n(from the past cloud computing era) when we already have containerized platforms in\nthis cloud-native era? And further, why should we bother managing VMs on Kubernetes,\nthe de-facto container orchestration platform?\u003c/p\u003e\n\n\u003cp\u003eComparing VMs and containers as provisioning methods is a complex matter, and\nout of the this post’s scope.  We just highlight some practical reasons for\nwhy deploying VMs on Kubernetes.\u003c/p\u003e\n\n\u003ch2 id=\"11-pratical-reasons\"\u003e1.1 Pratical reasons\u003c/h2\u003e\n\n\u003cp\u003eFirstly, \u003cstrong\u003e\u003cmark\u003enot all applications can be containerized\u003c/mark\u003e\u003c/strong\u003e.\nVMs provide a complete operating system environment and scratch space (stateful\nto users), while containers are most frequently used in stateless fashion,\nand they share the same kernel as the node. Scenarios that are not suitable for containerizations:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eApplications that are tightly coupled with operation systems or have dependencies on specific hardwares;\u003c/li\u003e\n  \u003cli\u003eGUI-based applications with complex display requirements - \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eWindows\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e as an example;\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSecondly, applications with strict security requirements may not be suitable for container deployment:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eVMs offer stronger isolation between workloads and better control over resource usage;\u003c/li\u003e\n  \u003cli\u003eHard multi-tenancy in OpenStack vs. soft multi-tenancy in Kubernetes;\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThirdly, not all transitions from VMs to containers bring business benefits.\nWhile moving from VMs to containers can reduce technical debts in most cases,\nmature and less evolving VM-based stacks may not benefit from such a\ntransition.\u003c/p\u003e\n\n\u003cp\u003eWith all the above said, despite the benefits of containers, there are still\nmany scenarios where VMs are necessary. The question then becomes: \u003cstrong\u003e\u003cmark\u003ewhether to\nmaintain them as standalone or legacy platforms\u003c/mark\u003e\u003c/strong\u003e like OpenStack, or to \u003cstrong\u003e\u003cmark\u003eunify\nmanagement with Kubernetes\u003c/mark\u003e\u003c/strong\u003e - especially if your main focus and efforts are already on Kubernetes.\u003c/p\u003e\n\n\u003cp\u003eThis post explores the latter case: managing VMs along with your container workloads with Kubernetes.\u003c/p\u003e\n\n\u003ch2 id=\"12-resource-provision-and-orchestration\"\u003e1.2 Resource provision and orchestration\u003c/h2\u003e\n\n\u003cp\u003eBefore moving forward, let’s see a simple comparison between two ages.\u003c/p\u003e\n\n\u003ch3 id=\"121-cloud-computing-era\"\u003e1.2.1 Cloud computing era\u003c/h3\u003e\n\n\u003cp\u003eIn this era, the focus primarily lies on IAAS-level, where \u003cstrong\u003e\u003cmark\u003evirtualization is\ncarried out on hardware\u003c/mark\u003e\u003c/strong\u003e to provide virtual CPUs, virtual network interfaces, virtual disks, etc.\nThese virtual pieces are finally assembled into a virtual machine (VM),\njust like a physical machine (blade server) for users.\u003c/p\u003e\n\n\u003cp\u003eUsers typically express their requirements as follows:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eI’d like 3 virtual machines. They should,\u003c/p\u003e\n\n  \u003col\u003e\n    \u003cli\u003eHave their own permanent IP addresses (immutable IP throughout their lifecycle).\u003c/li\u003e\n    \u003cli\u003eHave persistent disks for scratch space or stateful data.\u003c/li\u003e\n    \u003cli\u003eBe resizable in terms of CPU, memory, disk, etc.\u003c/li\u003e\n    \u003cli\u003eBe recoverable during maintenance or outages (through cold or live migration).\u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOnce users log in to the machines, they can deploy their business applications and orchestrate their operations on top of these VMs.\u003c/p\u003e\n\n\u003cp\u003eExamples of platforms that cater to these needs:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eAWS EC2\u003c/li\u003e\n  \u003cli\u003eOpenStack\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFocus of these platforms: resource sharing, hard multi-tenancy, strong isolation, security, etc.\u003c/p\u003e\n\n\u003ch3 id=\"122-cloud-native-era\"\u003e1.2.2 Cloud Native era\u003c/h3\u003e\n\n\u003cp\u003eIn the cloud-native era, orchestration platforms still pay attention to the\nabove mentioned needs, but they operate at a higher level than IAAS.\nThey address concerns such as elasticity, scalability, high availability,\nservice load balancing, and model abstraction. \nThe resulted platforms typically manage \u003cstrong\u003e\u003cmark\u003estateless workloads\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor instance, in the case of Kubernetes, users often express their requirements as follows:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eI want an nginx service for serving a static website, which should:\u003c/p\u003e\n\n  \u003cul\u003e\n    \u003cli\u003eHave a unique entrypoint for accessing (ServiceIP, etc).\u003c/li\u003e\n    \u003cli\u003eHave 3 instances replicated across 3 nodes (affinity/anti-affinity rules).\u003c/li\u003e\n    \u003cli\u003eRequests should be load balanced (ServiceIP to PodIPs load balancing).\u003c/li\u003e\n    \u003cli\u003eMisbehaving instances be automatically replaced with new ones (stateless, health-checking, and reconciliation mechanisms).\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"13-summary\"\u003e1.3 Summary\u003c/h2\u003e\n\n\u003cp\u003eWith the above discussions in mind, let’s see some open-source solutions for\nmanaging VM workloads on Kubernetes.\u003c/p\u003e\n\n\u003ch1 id=\"2-managing-vm-workloads-via-kubernetes-solutions\"\u003e2 Managing VM workloads via Kubernetes: solutions\u003c/h1\u003e\n\n\u003cp\u003eThere are two typical solutions, both based on Kubernetes and capable of managing both container and VM workloads:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003eVM inside container\u003c/mark\u003e\u003c/strong\u003e: suitable for teams that currently maintain both OpenStack and\nKubernetes. They can leverage this solution to provision VMs to end users\nwhile gradually phasing out OpenStack.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003eContainer inside VM\u003c/mark\u003e\u003c/strong\u003e: already are enjoying the benefits and\nconveniences provided by container ecosystem, while would like to\nstrenthen the security and isolation aspects of container workloads.\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"21-run-vm-inside-pod-kubevirt\"\u003e2.1 Run VM inside Pod: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubevirt\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/vm-on-k8s/vm-in-container-solution.png\" width=\"85%\" height=\"85%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. \u003cmark\u003eRunning (full-feature) VMs inside containers\u003c/mark\u003e, phasing out OpenStack. Solutions: kubevirt, etc\n\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubevirt\u003c/code\u003e utilizes Kubernetes for VM provisioning.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eRun on top of vanilla Kubernetes.\u003c/li\u003e\n  \u003cli\u003eIntroduce several CRDs and components to provision VMs.\u003c/li\u003e\n  \u003cli\u003eFaciliate VM provisioning by \u003cstrong\u003e\u003cmark\u003eembedding each VM into a container (pod)\u003c/mark\u003e\u003c/strong\u003e.\u003c/li\u003e\n  \u003cli\u003eCompatible with almost all Kubernetes facilities, e.g. Service load-balancing.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"22-run-pod-inside-vm-kata-containers\"\u003e2.2 Run Pod inside VM: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekata containers\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/vm-on-k8s/container-in-vm-solution.png\" width=\"85%\" height=\"85%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. \u003cmark\u003eRunning containers inside (lightweight) VMs\u003c/mark\u003e, with a proper container runtime. Solutions: kata containers, etc\n\u003c/p\u003e\n\n\u003cp\u003eKata containers have a lightweight VM wrapper,\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eDeploy containers inside a lightweight and ultra-fast VM.\u003c/li\u003e\n  \u003cli\u003eEnhance container security with this out-layer VM.\u003c/li\u003e\n  \u003cli\u003eNeed a dedicated container runtime (but no changes to Kubernetes).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"3-kubevirt-solution-overview\"\u003e3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eKubevirt\u003c/code\u003e solution overview\u003c/h1\u003e\n\n\u003cp\u003eIn this section, we’ll have a quick overview to the kubevirt project.\u003c/p\u003e\n\n\u003ch2 id=\"31-architecture-and-components\"\u003e3.1 Architecture and components\u003c/h2\u003e\n\n\u003cp\u003eHigh level architecture:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/kubevirt-create-vm/kubevirt-arch.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. kubevirt architecture overview\u003c/p\u003e\n\n\u003cp\u003eMain components:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evirt-api\u003c/code\u003e: kubevirt apiserver, for accepting requests like console streaming;\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evirt-controller\u003c/code\u003e: reconciles kubevirt objects like \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eVirtualMachine\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eVirtualMachineInstance\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVMI\u003c/code\u003e);\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evirt-handler\u003c/code\u003e: node agent (like \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enova-compute\u003c/code\u003e in OpenStack), collaborates with Kubernetes’s node agent \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubelet\u003c/code\u003e;\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evirtctl\u003c/code\u003e: CLI, e.g. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evirtctl console \u0026lt;vm\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"32-how-it-works\"\u003e3.2 How it works\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003eHow a VM is created in kubevirt\u003c/mark\u003e\u003c/strong\u003e on top of Kubernetes:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/vm-on-k8s/kubevirt-workflow.png\" width=\"75%\" height=\"75%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Workflow of creating a VM in kubevirt.\n\u003cmark\u003eLeft: steps added by kubevirt\u003c/mark\u003e; Right: vanilla precedures of creating a Pod in k8s.\n\u003c/p\u003e\n\n\u003cp\u003eYou can see that there are \u003cstrong\u003e\u003cmark\u003eonly add-ons but no changes to Kubernetes\u003c/mark\u003e\u003c/strong\u003e workflow.\u003c/p\u003e\n\n\u003cp\u003eAn \u003cstrong\u003e\u003cmark\u003ein-depth illustration\u003c/mark\u003e\u003c/strong\u003e: \u003ca href=\"/blog/kubevirt-create-vm/\"\u003eSpawn a Virtual Machine in Kubernetes with kubevirt: A Deep Dive\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"33-node-internal-topology\"\u003e3.3 Node internal topology\u003c/h2\u003e\n\n\u003cp\u003eThe internal view of the components inside a node:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/kubevirt-create-vm/node-topo.png\" width=\"65%\" height=\"65%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. A k8s/kubevirt node with \u003cmark\u003etwo (KVM) VMs\u003c/mark\u003e\u003c/p\u003e\n\n\u003ch2 id=\"34-tech-stacks\"\u003e3.4 Tech stacks\u003c/h2\u003e\n\n\u003ch3 id=\"341-computing\"\u003e3.4.1 Computing\u003c/h3\u003e\n\n\u003cp\u003eStill based on \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eKVM/QEMU/libvirt\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e, just like OpenStack.\u003c/p\u003e\n\n\u003ch3 id=\"342-networking\"\u003e3.4.2 Networking\u003c/h3\u003e\n\n\u003cp\u003eCompatible with the CNI mechanism, can work seamlessly with popular network solutions like flannel, calico, and cilium.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubevirt\u003c/code\u003e agent further creates virtual machine network on top of the pod\nnetwork. This is necessary because virtual machines operate as userspace\nprocesses and require userspace simulated network cards (such as TUN/TAP)\ninstead of veth pairs.\u003c/p\u003e\n\n\u003cp\u003eNetworking is a big topic, I’d like a dedicated blog for it (if time permits).\u003c/p\u003e\n\n\u003ch3 id=\"343-storage\"\u003e3.4.3 Storage\u003c/h3\u003e\n\n\u003cp\u003eBased on Kubernetes storage machanisms (PV/PVC),\nand advanced features like VM snapshot, clone, live migration, etc, all rely on these machanisms.\u003c/p\u003e\n\n\u003cp\u003eAlso made some extentions, for example, containerDisk (embedding\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003evirtual machines images\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e into\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003econtainer images\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e) .\u003c/p\u003e\n\n\u003ch1 id=\"4-conclusion\"\u003e4 Conclusion\u003c/h1\u003e\n\n\u003cp\u003eThis post talks about why there are needs for running VMs on Kubernetes, and gives\na further technical overview to the kubevirt project.\u003c/p\u003e\n\n\u003ch1 id=\"references\"\u003eReferences\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/kubevirt/kubevirt\"\u003egithub.com/kubevirt\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/kata-containers/kata-containers\"\u003egithub.com/kata-containers\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/kubevirt-create-vm/\"\u003eSpawn a Virtual Machine in Kubernetes with kubevirt: A Deep Dive (2023)\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003chr/\u003e\n\n\u003cp\u003e\u003ca href=\"https://notbyai.fyi\"\u003e\u003cimg src=\"/assets/img/Written-By-Human-Not-By-AI-Badge-white.svg\" alt=\"Written by Human, Not by AI\"/\u003e\u003c/a\u003e\n\u003ca href=\"https://notbyai.fyi\"\u003e\u003cimg src=\"/assets/img/Written-By-Human-Not-By-AI-Badge-black.svg\" alt=\"Written by Human, Not by AI\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/kvm-host-in-a-few-lines-of-code-zh/\"\u003e\u003cspan\u003e« [译] 100 行 C 代码创建一个 KVM 虚拟机（2019）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/kubevirt-create-vm/\"\u003e\u003cspan\u003eSpawn a Virtual Machine in Kubernetes with kubevirt: A Deep Dive (2023) »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2023-11-29T00:00:00Z",
  "Author": "Arthur Chiao"
}