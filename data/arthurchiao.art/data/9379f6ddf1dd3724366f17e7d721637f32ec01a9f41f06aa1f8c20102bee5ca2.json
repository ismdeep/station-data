{
  "Source": "arthurchiao.art",
  "Title": "[笔记]《Cloud Native Data Center Networking》（云原生数据中心网络设计）(O'Reilly 2019)",
  "Link": "https://arthurchiao.art/blog/cloud-native-data-center-networking-notes-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003e[笔记]《Cloud Native Data Center Networking》（云原生数据中心网络设计）(O\u0026#39;Reilly 2019)\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2021-01-10 | Last Update 2021-01-10\u003c/p\u003e\n  \n  \u003ch3 id=\"关于本文\"\u003e关于本文\u003c/h3\u003e\n\n\u003cp\u003e本文是读 \u003ca href=\"https://www.oreilly.com/library/view/cloud-native-data/9781492045595/\"\u003eCloud Native Data Center Networking\u003c/a\u003e （\nO’Reilly, 2019）时的所做的一些笔记。这本书理论和实践兼备，是现代数据中心网络、\n云原生数据中心网络设计和 BGP 的很好入门参考。\u003c/p\u003e\n\n\u003cp\u003e作者 Dinesh G. Dutt 是一家网络公司的首席科学家，在网络行业有 20 多年工作经验，\n曾是 Cisco Fellow，是 TRILL、VxLAN 等协议的合作者（co-author）之一。\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#关于本文\" id=\"markdown-toc-关于本文\"\u003e关于本文\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-传统网络架构面临瓶颈\" id=\"markdown-toc-1-传统网络架构面临瓶颈\"\u003e1 传统网络架构面临瓶颈\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-应用-网络架构演进\" id=\"markdown-toc-11-应用-网络架构演进\"\u003e1.1 “应用-网络”架构演进\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-21-世纪以来的网络设计\" id=\"markdown-toc-12-21-世纪以来的网络设计\"\u003e1.2 21 世纪以来的网络设计\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#桥接bridging的魅力\" id=\"markdown-toc-桥接bridging的魅力\"\u003e桥接（Bridging）的魅力\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#构建和扩展的桥接网络\" id=\"markdown-toc-构建和扩展的桥接网络\"\u003e构建和扩展的桥接网络\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-接入-汇聚-核心网络架构存在的问题\" id=\"markdown-toc-13-接入-汇聚-核心网络架构存在的问题\"\u003e1.3 接入-汇聚-核心网络架构存在的问题\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#不可扩展性unscalability\" id=\"markdown-toc-不可扩展性unscalability\"\u003e不可扩展性（Unscalability）\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#复杂性complexity\" id=\"markdown-toc-复杂性complexity\"\u003e复杂性（Complexity）\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#故障域failure-domain\" id=\"markdown-toc-故障域failure-domain\"\u003e故障域（Failure Domain）\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#不可预测性unpredictability\" id=\"markdown-toc-不可预测性unpredictability\"\u003e不可预测性（Unpredictability）\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#欠灵活性inflexibility\" id=\"markdown-toc-欠灵活性inflexibility\"\u003e欠灵活性（Inflexibility）\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#欠敏捷性lack-of-agility\" id=\"markdown-toc-欠敏捷性lack-of-agility\"\u003e欠敏捷性（Lack of Agility）\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#14-the-stories-not-told\" id=\"markdown-toc-14-the-stories-not-told\"\u003e1.4 The Stories Not Told\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#15-小结\" id=\"markdown-toc-15-小结\"\u003e1.5 小结\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-clos新一代网络架构\" id=\"markdown-toc-2-clos新一代网络架构\"\u003e2 CLOS：新一代网络架构\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-introducing-the-clos-topology\" id=\"markdown-toc-21-introducing-the-clos-topology\"\u003e2.1 Introducing the Clos Topology\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-深入理解-clos-架构\" id=\"markdown-toc-22-深入理解-clos-架构\"\u003e2.2 深入理解 Clos 架构\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#使用同构设备\" id=\"markdown-toc-使用同构设备\"\u003e使用同构设备\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#使用路由作为基本互连模型\" id=\"markdown-toc-使用路由作为基本互连模型\"\u003e使用路由作为基本互连模型\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#收敛比oversubscription\" id=\"markdown-toc-收敛比oversubscription\"\u003e收敛比（Oversubscription）\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#互连带宽\" id=\"markdown-toc-互连带宽\"\u003e互连带宽\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#实际中的一些限制\" id=\"markdown-toc-实际中的一些限制\"\u003e实际中的一些限制\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#更细粒度的故障域\" id=\"markdown-toc-更细粒度的故障域\"\u003e更细粒度的故障域\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-扩展-close-拓扑scaling-the-clos-topology\" id=\"markdown-toc-23-扩展-close-拓扑scaling-the-clos-topology\"\u003e2.3 扩展 Close 拓扑（Scaling the Clos Topology）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-对比两种-three-tier-models\" id=\"markdown-toc-24-对比两种-three-tier-models\"\u003e2.4 对比两种 Three-Tier Models\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#25-clos-拓扑带来的其他变化\" id=\"markdown-toc-25-clos-拓扑带来的其他变化\"\u003e2.5 Clos 拓扑带来的其他变化\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#重新思考-failures-and-troubleshooting\" id=\"markdown-toc-重新思考-failures-and-troubleshooting\"\u003e重新思考 Failures and Troubleshooting\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#布线\" id=\"markdown-toc-布线\"\u003e布线\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#inventory-management-更简单\" id=\"markdown-toc-inventory-management-更简单\"\u003eInventory Management 更简单\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#网络自动化\" id=\"markdown-toc-网络自动化\"\u003e网络自动化\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#26-some-best-practices-for-a-clos-network\" id=\"markdown-toc-26-some-best-practices-for-a-clos-network\"\u003e2.6 Some Best Practices for a Clos Network\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#use-of-multiple-links-between-switches\" id=\"markdown-toc-use-of-multiple-links-between-switches\"\u003eUse of Multiple Links Between Switches\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#use-of-spines-as-only-a-connector\" id=\"markdown-toc-use-of-spines-as-only-a-connector\"\u003eUse of Spines as Only a Connector\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#use-of-chassis-as-a-spine-switch\" id=\"markdown-toc-use-of-chassis-as-a-spine-switch\"\u003eUse of Chassis as a Spine Switch\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#27-服务器接入模型host-attach-models\" id=\"markdown-toc-27-服务器接入模型host-attach-models\"\u003e2.7 服务器接入模型（Host Attach Models）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#28-summary\" id=\"markdown-toc-28-summary\"\u003e2.8 Summary\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-network-disaggregation网络分解\" id=\"markdown-toc-3-network-disaggregation网络分解\"\u003e3 Network Disaggregation（网络分解）\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-什么是-network-disaggregation\" id=\"markdown-toc-31-什么是-network-disaggregation\"\u003e3.1 什么是 Network Disaggregation?\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-为什么-network-disaggregation-很重要\" id=\"markdown-toc-32-为什么-network-disaggregation-很重要\"\u003e3.2 为什么 Network Disaggregation 很重要？\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-哪些方面使得-network-disaggregation-如今成为可能\" id=\"markdown-toc-33-哪些方面使得-network-disaggregation-如今成为可能\"\u003e3.3 哪些方面使得 Network Disaggregation 如今成为可能？\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-difference-in-network-operations-with-disaggregation\" id=\"markdown-toc-34-difference-in-network-operations-with-disaggregation\"\u003e3.4 Difference in Network Operations with Disaggregation\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#35-open-network-installer-environment\" id=\"markdown-toc-35-open-network-installer-environment\"\u003e3.5 Open Network Installer Environment\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#36-the-players-in-network-disaggregation-hardware\" id=\"markdown-toc-36-the-players-in-network-disaggregation-hardware\"\u003e3.6 The Players in Network Disaggregation: Hardware\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#packet-switching-silicon\" id=\"markdown-toc-packet-switching-silicon\"\u003ePacket-Switching Silicon\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#odm-厂商\" id=\"markdown-toc-odm-厂商\"\u003eODM 厂商\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-network-operating-system-choices\" id=\"markdown-toc-4-network-operating-system-choices\"\u003e4 Network Operating System Choices\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-routing-protocol-choices\" id=\"markdown-toc-5-routing-protocol-choices\"\u003e5 Routing Protocol Choices\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"1-传统网络架构面临瓶颈\"\u003e1 传统网络架构面临瓶颈\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003e分布式应用\u003c/strong\u003e（distributed application）正在与\u003cstrong\u003e网络\u003c/strong\u003e（network）共舞，而且\n前者是主角。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e分布式应用突然变换了舞步，现代数据中心的故事也由此开始。\u003c/strong\u003e\n\u003cmark\u003e理解这种转变对网络从业人员至关重要，否则只会不断被一些新名词带着走\u003c/mark\u003e。\u003c/p\u003e\n\n\u003cp\u003e本章回答以下问题：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e新一代应用（new applications）有哪些特征？\u003c/li\u003e\n  \u003cli\u003e什么是接入-汇聚-核心（access-aggregation-core）网络？\u003c/li\u003e\n  \u003cli\u003e接入-汇聚-核心网络架构在哪些方面已经无法满足新一代应用的需求？\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"11-应用-网络架构演进\"\u003e1.1 “应用-网络”架构演进\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cloud-native-dc-networking/1-1.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1-1. The evolution of application architecture\u003c/p\u003e\n\n\u003cp\u003e应用架构演进：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e单体应用\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e通常部署在 mainframe 上。\u003c/li\u003e\n      \u003cli\u003e特定的厂商提供网络方案，\u003cstrong\u003e协议是私有的\u003c/strong\u003e（不是 TCP/IP 协议）。\u003c/li\u003e\n      \u003cli\u003e以今天的眼光看，应用所需的带宽极小。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e客户端-服务器应用\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e工作站和 PC 时代。\u003c/li\u003e\n      \u003cli\u003eLAN 开始兴起。\u003cstrong\u003e充斥着各种 L2、L3 和更上层协议\u003c/strong\u003e。\n        \u003cul\u003e\n          \u003cli\u003e以太网、Token Ring、FDDI 等是比较流行的互连方式。带宽上限 100Mbps。\u003c/li\u003e\n          \u003cli\u003e\u003cstrong\u003eTCP/IP 体系开始发展\u003c/strong\u003e，但还没用成为主流。\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eWeb 应用\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e\u003cmark\u003e以太网和 TCP/IP 一统互联网\u003c/mark\u003e，其他绝大部分协议成为历史。\u003c/li\u003e\n      \u003cli\u003e计算和网络虚拟化：\u003cstrong\u003e虚拟机时代\u003c/strong\u003e。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e微服务（分布式应用）\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e大规模的数据处理（例如 MapReduce），数据中心网络的带宽瓶颈\u003cstrong\u003e从南北向变成东西向\u003c/strong\u003e，这是一个历史性的转变。\u003c/li\u003e\n      \u003cli\u003e\u003cstrong\u003e容器时代\u003c/strong\u003e。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"12-21-世纪以来的网络设计\"\u003e1.2 21 世纪以来的网络设计\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cloud-native-dc-networking/1-2.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1-2. Access-aggregation-core network architecture\u003c/p\u003e\n\n\u003cp\u003e图 1-2 是在上世纪末开始占据统治地位的网络架构：接入-汇聚-核心三级网络架构。\u003c/p\u003e\n\n\u003cp\u003e图中\u003cstrong\u003e没有画出汇聚和核心之间的连接\u003c/strong\u003e，是因为这些连接\u003cstrong\u003e因方案和厂商而异\u003c/strong\u003e，而且\n不影响接下来的讨论。\u003c/p\u003e\n\n\u003ch3 id=\"桥接bridging的魅力\"\u003e桥接（Bridging）的魅力\u003c/h3\u003e\n\n\u003cp\u003e这种网络架构\u003cstrong\u003e重度依赖交换\u003c/strong\u003e（或称桥接，bridging），而在同时期，互联网（the\ninternet）真正快速发展成型。\u003c/p\u003e\n\n\u003cp\u003e\u003cmark\u003e既然支撑互联网的是 IP 路由（IP routing）技术，为什么数据中心网络没有选择路由\n（routing），而是选择的交换（bridging）呢？\u003c/mark\u003e三方面原因：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e交换芯片\u003c/strong\u003e的出现（silicon switched packet forwarding）\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e做数据转发的芯片原先主要用在\u003cstrong\u003e网卡\u003c/strong\u003e，现在用于功能更强大的\u003cstrong\u003e交换设备\u003c/strong\u003e。\u003c/li\u003e\n      \u003cli\u003e这种设备显然要求芯片具备\u003cstrong\u003e更高密度的接口\u003c/strong\u003e，而这样的芯片在当时\u003cstrong\u003e只支持交换\u003c/strong\u003e（bridging），不支持路由（routing）。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e厂商特定的软件栈\u003c/strong\u003e（proprietary network software stacks）在企业中占据主导地位\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e“客户端-服务器”模型所处的时代，TCP/IP 只是众多协议种的一种，并没有今天所处的统治地位。\u003c/li\u003e\n      \u003cli\u003e但各家的协议有一个共同点：\u003cstrong\u003e二层协议是一样的，都是走交换\u003c/strong\u003e（bridging）。因\n此\u003cstrong\u003e汇聚层以下走交换\u003c/strong\u003e就是顺理成章也是唯一的选择。\u003c/li\u003e\n      \u003cli\u003e接入-汇聚-核心成为了一种\u003cstrong\u003e通用的网络架构\u003c/strong\u003e：\n        \u003cul\u003e\n          \u003cli\u003e汇聚以下走交换（bridging），不区分厂商\u003c/li\u003e\n          \u003cli\u003e汇聚以上走各家的三层协议\u003c/li\u003e\n          \u003cli\u003e这样就避免了为每家厂商的设备单独搭建一张网络。\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e交换网络\u003c/strong\u003e所宣称的\u003cstrong\u003e零配置\u003c/strong\u003e（zero configuration of bridging）\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e路由网络很难配置，甚至对某些厂商的设备来说，直到今天仍然如此。需要很多显式\n配置。\u003c/li\u003e\n      \u003cli\u003e相比交换，路由的延迟更大，更消耗 CPU 资源。\u003c/li\u003e\n      \u003cli\u003e交换网络是自学习的（self-learning），也是所谓的“零配置”（zero\nconfigurations）。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"构建和扩展的桥接网络\"\u003e构建和扩展的桥接网络\u003c/h3\u003e\n\n\u003cp\u003e厂商设备无关、高性能芯片加上零配置，使得桥接网络在那个年代取得很大成功。但这种网\n络也存在一些\u003cstrong\u003e限制\u003c/strong\u003e：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e广播风暴和 STP：这是自学习的机制决定的，\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eMAC 头中没有 TTL 字段，因此一旦形成环路就无法停下来。\u003c/li\u003e\n      \u003cli\u003eSTP（生成树协议）：避免交换网络出现环路，非常复杂，因此很难做到没有 bug。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e泛洪成本\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e大的交换网络的泛洪\u003c/li\u003e\n      \u003cli\u003e缓解：划分 VLAN，使得泛洪域限制到 VLAN 内。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e网关高可用\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e网关配置在汇聚交换机\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n      \u003cli\u003e为保证高可用，一组汇聚配置同一个网关；一台挂掉后自动切换到另一台。\n需要协议支持，这种协议称为\u003cstrong\u003e\u003cmark\u003e第一跳路由协议\u003c/mark\u003e\u003c/strong\u003e（First Hop Routing Protocol,\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eFHRP\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e）。\u003c/li\u003e\n    \u003c/ul\u003e\n\n    \u003cp\u003e\u003cstrong\u003eFHRP 原理\u003c/strong\u003e：几台路由器之间互相检测状态，确保永远有且只有一台在应答对网关的 ARP 请求。\u003c/p\u003e\n\n    \u003cp\u003eFHRP 协议举例：\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eHSRP（Hot Standby Routing Protocol）：思科的私有协议。\u003c/li\u003e\n      \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eVRRP\u003c/mark\u003e\u003c/strong\u003e（Virtual Router Rundundency Protocol）：目前用的最多的协议。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"13-接入-汇聚-核心网络架构存在的问题\"\u003e1.3 接入-汇聚-核心网络架构存在的问题\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e广播风暴\u003c/strong\u003e是所有在那个年代运维过这种网络的网工们的噩梦 —— 即便已经开启了 STP。\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e应用（applications）变了\u003c/strong\u003e —— 服务器之间的东西向流量开始成为瓶颈，而这种网络架构主要面向的是“客\n户端-服务器”模式的南北向流量时代。\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e应用的规模\u003c/strong\u003e显著变大，在故障、复杂性和敏捷度方面对网络提出了完全不同于以往的新需求。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e现有网络架构无法解决以上问题。\u003c/p\u003e\n\n\u003ch3 id=\"不可扩展性unscalability\"\u003e不可扩展性（Unscalability）\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e泛洪\u003c/p\u003e\n\n    \u003cp\u003e自学习机制是 “flood-and-learn”，因此泛洪是不可避免的。当网络规模非常大时\n（例如大规模虚拟机场景），定期地会有上百万的泛洪包，终端计算节点不堪重负。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eVLAN 限制\u003c/p\u003e\n\n    \u003cp\u003eVLAn 总共 4096 个，无法满足云计算时代的多租户需求。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e汇聚应答 ARP 的负担\u003c/p\u003e\n\n    \u003cp\u003e汇聚负责应答 ARP。ARP 数量可能非常多，导致汇聚交换机 CPU 飙升。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e交换机水平扩展性和 STP 限制\u003c/p\u003e\n\n    \u003cp\u003e理论上，增加汇聚交换机数量似乎就能增加东西向带宽。但是，\n  \u003cstrong\u003e\u003cmark\u003eSTP 不支持两个以上的交换机\u003c/mark\u003e\u003c/strong\u003e场景，否则后果无法预测。\n  因此汇聚交换机就固定在了两个，无法扩展。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"复杂性complexity\"\u003e复杂性（Complexity）\u003c/h3\u003e\n\n\u003cp\u003e交换网络需要运行大量不同类型的协议，例如：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eSTP\u003c/li\u003e\n  \u003cli\u003eFHRP\u003c/li\u003e\n  \u003cli\u003e链路检测协议\u003c/li\u003e\n  \u003cli\u003e厂商特定的协议，例如 VLAN Trunking Protocol（VTP）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e显著增加了网络的复杂性。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003eSTP 使得网络只能用到一半的链路带宽\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"故障域failure-domain\"\u003e故障域（Failure Domain）\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e一条链路挂掉，可用带宽减半。\u003c/li\u003e\n  \u003cli\u003e一台汇聚挂掉，整个网络的带宽减半；而且此时所有流量都会打到同组的另一台汇聚，很\n容易导致这一台也扛不住，即发生级联故障。\u003c/li\u003e\n  \u003cli\u003e级联故障的另一种场景：广播风暴，整个系统全挂。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"不可预测性unpredictability\"\u003e不可预测性（Unpredictability）\u003c/h3\u003e\n\n\u003cp\u003eSTP 的行为无法预测。一些常规故障或设备维护都可能导致 STP 故障。\u003c/p\u003e\n\n\u003ch3 id=\"欠灵活性inflexibility\"\u003e欠灵活性（Inflexibility）\u003c/h3\u003e\n\n\u003cp\u003e\u003cmark\u003eVLAN 在汇聚交换机终结\u003c/mark\u003e，即在交换（bridging）和路由（routing）的边界终结。\u003c/p\u003e\n\n\u003cp\u003e网工无法灵活地将任意可用接口分配给用\n户的VLAN（需要端到端的链路都有可用接口才行）。\u003c/p\u003e\n\n\u003ch3 id=\"欠敏捷性lack-of-agility\"\u003e欠敏捷性（Lack of Agility）\u003c/h3\u003e\n\n\u003cp\u003e云计算场景下，需要非常快速的网络资源交付。\u003c/p\u003e\n\n\u003cp\u003eVLAN 需要整条链路端到端的配置和感知，而且配置会引起控制平面的 STP 等协议震荡（收\n敛），容易引起网络故障。因此添加或删除 VLAN 都需要天级别的时间。\u003c/p\u003e\n\n\u003ch2 id=\"14-the-stories-not-told\"\u003e1.4 The Stories Not Told\u003c/h2\u003e\n\n\u003cp\u003e一些对这种网络方案的改进尝试：TRILL 和 MLAG。\u003c/p\u003e\n\n\u003cp\u003e经过时间沉淀，\u003cstrong\u003e其他各种上层协议（L3+）已经退潮，IP 协议成为唯一主流\u003c/strong\u003e。\n\u003cmark\u003e是时候从网络需求出发，设计一种新的架构了\u003c/mark\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"15-小结\"\u003e1.5 小结\u003c/h2\u003e\n\n\u003cp\u003e本章我们看到了\u003cstrong\u003e\u003cmark\u003e应用架构\u003c/mark\u003e\u003c/strong\u003e（application architecture）是如何驱动\n\u003cstrong\u003e\u003cmark\u003e网络架构\u003c/mark\u003e\u003c/strong\u003e演进的。\u003c/p\u003e\n\n\u003ch1 id=\"2-clos新一代网络架构\"\u003e2 CLOS：新一代网络架构\u003c/h1\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eForm is destiny — in networking even more than in life. The structure of the\nnetwork lays the foundation for everything that follows.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e形式决定结果 —— 在网络世界尤其如此。\u003cstrong\u003e网络结构\u003c/strong\u003e为后面的所有东西\n奠定了基础，正如树根与树干、树冠的关系一样。\u003cstrong\u003e新一代的结构就是\u003c/strong\u003e：CLOS 拓扑。\u003c/p\u003e\n\n\u003cp\u003e云原生数据中心基础设施的先行者们希望打造一种\u003cmark\u003e具备大规模扩展性的东西\u003c/mark\u003e。\nCLOS 拓扑就像红杉树，用一种类似\u003cstrong\u003e分形\u003c/strong\u003e的模型（fractal model）实现了\u003cstrong\u003e水平扩展\u003c/strong\u003e（scale out）。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e本书主要内容就是 CLOS 拓扑中的网络设计\u003c/strong\u003e。\u003cmark\u003eCLOS 拓扑及其特性，\n是每一位网络工程师和网络架构师的必修课\u003c/mark\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"21-introducing-the-clos-topology\"\u003e2.1 Introducing the Clos Topology\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cloud-native-dc-networking/2-1.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-1. Illustration of a common Clos topology\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003eSpine 和 Leaf 可以是同一种交换机\u003c/mark\u003e\u003c/strong\u003e，这虽然不是强制要求，\n但\u003cstrong\u003e\u003cmark\u003e同构设备\u003c/mark\u003e\u003c/strong\u003e的使用会给这种架构带来明显收益。\u003c/p\u003e\n\n\u003cp\u003eSpine-Leaf 架构的容量（capacity）很高，因为\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e任何两台服务器之间都有多条可达路径。\u003c/li\u003e\n  \u003cli\u003e添加 Spine 节点可以直接扩展 Leaf 之间的可用带宽。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cmark\u003eSpine 交换机只有一个目的\u003c/mark\u003e：连接所有的 Leaf 节点。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e服务器不会直连到 Spine。\u003c/li\u003e\n  \u003cli\u003eSpine 也不承担其他的功能。因此 Spine 与三级架构中的汇聚交换机的角色是不一样的。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e总结起来就是，Spine-Leaf 架构中，\u003cmark\u003e所有功能都下放到了边缘节点\u003c/mark\u003e（Leaf\n和服务器），\u003cmark\u003e中心节点（Spine）只提供连接功能\u003c/mark\u003e。\u003c/p\u003e\n\n\u003cp\u003e水平扩展（scale-out）和垂直扩展（scale-in）：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003eSpine-Leaf 架构可以实现良好的水平扩展（scale-out)：\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e添加 Leaf 和服务器节点：扩展系统容量。\u003c/li\u003e\n      \u003cli\u003e增加 Spine 节点：扩展互连带宽。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eAccess-Aggregation-Core 架构扩展容量的方式：只能替换成性能更强的设备，称为垂直扩展（scale-in）。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"22-深入理解-clos-架构\"\u003e2.2 深入理解 Clos 架构\u003c/h2\u003e\n\n\u003ch3 id=\"使用同构设备\"\u003e使用同构设备\u003c/h3\u003e\n\n\u003cp\u003eCLOS 架构的一个好处是：\u003cstrong\u003e只用一种设备就能构建出超大型网络\u003c/strong\u003e（build very large\npacket-switched networks using simple fixed-form-factor switches）。\u003c/p\u003e\n\n\u003cp\u003e从根本上改变了我们思考网络故障、管理网络设备，以及设计和管理网络的方式。\u003c/p\u003e\n\n\u003ch3 id=\"使用路由作为基本互连模型\"\u003e使用路由作为基本互连模型\u003c/h3\u003e\n\n\u003cp\u003e接入-汇聚-核心三级网络架构的一个固有限制是：\u003cmark\u003e只能支持两台汇聚交换机\u003c/mark\u003e。\n那 CLOS 架构是如何支持多台 Spine 的呢？答案是：\u003cstrong\u003e\u003cmark\u003eCLOS 中不再使用 STP\u003c/mark\u003e\u003c/strong\u003e，\n\u003cstrong\u003e\u003cmark\u003e交换机之间\u003c/mark\u003e\u003c/strong\u003e的互连不再走桥接（bridging），而是\u003cstrong\u003e\u003cmark\u003e走路由\u003c/mark\u003e\u003c/strong\u003e（routing）。\u003c/p\u003e\n\n\u003cp\u003e但并不是说 CLOS 中不再有桥接，只不过转发已经限制到了边缘节点，即\nLeaf 交换机和服务器之间。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e同一个机柜内，同网段之间：走桥接（bridging）。\u003c/li\u003e\n  \u003cli\u003e跨机柜实现 bridging：可以借助 VxLAN。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e前面提到，用交换（bridging）做交换机互连的原因之一是：\u003cstrong\u003e各厂商有不同的三层协议，\n只有二层是相同的，都是以太网\u003c/strong\u003e。发展到后来，各种三层协议逐渐淘汰，IP 协议作为唯一\n的三层协议一统江湖，因此\u003cstrong\u003e用 bridging 方式做交换机互连\u003c/strong\u003e已经不是必须的了。\u003c/p\u003e\n\n\u003cp\u003e那\u003cmark\u003e路由方式（routing）到底是如何支持多台 Spine 的呢\u003c/mark\u003e？答案：ECMP。\u003c/p\u003e\n\n\u003cp\u003e从本质上来说，CLOS 拓扑是用路由（routing）替代了原来的交换（switching），作为最\n主要的数据包转发方式（primary packet forwarding model）。\u003c/p\u003e\n\n\u003ch3 id=\"收敛比oversubscription\"\u003e收敛比（Oversubscription）\u003c/h3\u003e\n\n\u003cp\u003e\u003cmark\u003e收敛比：下行带宽 / 上行带宽。\u003c/mark\u003e\u003c/p\u003e\n\n\u003cp\u003e收敛比是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1:1\u003c/code\u003e 的网络称为\u003cstrong\u003e无阻塞网络\u003c/strong\u003e（nonblocking network）。\u003c/p\u003e\n\n\u003cp\u003e如果 Spine 和 Leaf 都是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003en\u003c/code\u003e 端口交换机，那 CLOS 拓扑\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cmark\u003e支持的最大服务器数量\u003c/mark\u003e：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003en*n/2\u003c/code\u003e\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003en=64 时，支持 2048 台服务器\u003c/li\u003e\n      \u003cli\u003en=128 时，支持 8192 台服务器\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cmark\u003e所需的交换机数量\u003c/mark\u003e（假设无阻塞网络）：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003en + n/2\u003c/code\u003e\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003en 台 leaf，n/2 台 spine\u003c/li\u003e\n      \u003cli\u003en=64 时，需要 96 台交换机\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"互连带宽\"\u003e互连带宽\u003c/h3\u003e\n\n\u003cp\u003eISL: inter-switch link。\u003c/p\u003e\n\n\u003cp\u003e更大的 Spine-Leaf 互连带宽的好处：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e减少布线成本（cost of cabling）。\u003c/li\u003e\n  \u003cli\u003e减少 Spine 交换机数量。\u003c/li\u003e\n  \u003cli\u003e减小运维负担。\u003c/li\u003e\n  \u003cli\u003e任何一条互连链路被单个大象流打爆的概率更低。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"实际中的一些限制\"\u003e实际中的一些限制\u003c/h3\u003e\n\n\u003cp\u003e考虑到制冷、机柜尺寸、服务器封装、交换机芯片等方面的原因，以上的理论并不能原封不\n动落实到实际的数据中心中。\u003c/p\u003e\n\n\u003cp\u003e受电源功率限制，单个机柜一般不超过 20 台服务器。考虑到散热能力，这个限制可能会更\n小。\u003c/p\u003e\n\n\u003cp\u003e实际中很少需要无阻塞网络，Spine 和 Leaf 也使用不同类似的设备。商业芯片厂商一般会\n\u003cstrong\u003e提供配套的 Spine 和 Leaf 交换芯片\u003c/strong\u003e，例如 Broadcom 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTrident\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTomahawk\u003c/code\u003e\n系列。\u003c/p\u003e\n\n\u003ch3 id=\"更细粒度的故障域\"\u003e更细粒度的故障域\u003c/h3\u003e\n\n\u003cp\u003e有了多台 Spine 之后，挂掉一台就不会产生灾难性的影响。例如，假如有 16 台 Spine，\n那平均来说，挂掉一台只会影响 1/16 的流量。而在传统网络中，挂掉一台汇聚会影响 1/2\n的流量。\u003c/p\u003e\n\n\u003cp\u003e另外，挂掉一条链路（link）时，只影响一台 leaf 到一台 spine 之间的流量，这台 leaf\n到其他 spine 的流量是不受影响的。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003ethere are no systemic failures of the style found in access-agg networks due\nto the use of routing, not bridging, for packet switching.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e用路由代替交换，使得 CLOS 架构消除了\u003cstrong\u003e系统性故障\u003c/strong\u003e（systemic failures）的风险，\n而接入-汇聚-核心三级网络架构是无法消除这种风险的（例如，全网广播风暴）。\u003c/p\u003e\n\n\u003ch2 id=\"23-扩展-close-拓扑scaling-the-clos-topology\"\u003e2.3 扩展 Close 拓扑（Scaling the Clos Topology）\u003c/h2\u003e\n\n\u003cp\u003e前面看到，128 端口的两级 CLOS 架构最多支持 8192 台服务器。如何设计出能支撑更多服\n务器的 CLOS 架构呢？答案是三级（甚至更多级）CLOS 架构。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cloud-native-dc-networking/2-5.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-5. Three-tier Clos topology with four-port switches\u003c/p\u003e\n\n\u003cp\u003e上图中有两种三级 CLOS 的设计：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e图 b：SuperSpine 和 Spine 是同一台设备，它们之间的互连是在交换芯片完成的。\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e\u003cstrong\u003eFacebook 带火了这种设计\u003c/strong\u003e。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e图 c：三层交换机都是独立设备，Spine 和 Leaf 组成 POD，再和上面的 SuperSpine 互连。\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e\u003cstrong\u003eMicrosoft, AWS\u003c/strong\u003e 使用这种设计。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e三级 CLOS 服务器和交换机数量：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e支撑的最大服务器数量：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003en*n*n/4\u003c/code\u003e\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003en=64 时，支撑 65536 台服务器。\u003c/li\u003e\n      \u003cli\u003en=128 时，支撑 524288 台服务器。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e所需交换机数量：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003en + n*n\u003c/code\u003e\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"24-对比两种-three-tier-models\"\u003e2.4 对比两种 Three-Tier Models\u003c/h2\u003e\n\n\u003ch2 id=\"25-clos-拓扑带来的其他变化\"\u003e2.5 Clos 拓扑带来的其他变化\u003c/h2\u003e\n\n\u003ch3 id=\"重新思考-failures-and-troubleshooting\"\u003e重新思考 Failures and Troubleshooting\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e设备类型更单一，故障类型更明确。\u003c/li\u003e\n  \u003cli\u003e从少数大型设备变成数量较多的小型设备：出故障时直接拉出和替换（swap-out failing\nswitches），而不是现场排障（troubleshooting a failure in a live network）。\u003c/li\u003e\n  \u003cli\u003e以前更看重设备的新功能提供能量，现在更看重遇到故障时网络的容错性（resilience）。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"布线\"\u003e布线\u003c/h3\u003e\n\n\u003cp\u003eCLOS 架构是富连接（richly connected）或称全连接（full mesh）网络，因此所需的布线\n工作量大大增加。\u003c/p\u003e\n\n\u003ch3 id=\"inventory-management-更简单\"\u003eInventory Management 更简单\u003c/h3\u003e\n\n\u003cp\u003e设备都是一致的，没有特殊性，管理起来更简单。管理交换机就像管理 Linux 服务器一样。\u003c/p\u003e\n\n\u003ch3 id=\"网络自动化\"\u003e网络自动化\u003c/h3\u003e\n\n\u003cp\u003e便于自动化。\u003c/p\u003e\n\n\u003ch2 id=\"26-some-best-practices-for-a-clos-network\"\u003e2.6 Some Best Practices for a Clos Network\u003c/h2\u003e\n\n\u003ch3 id=\"use-of-multiple-links-between-switches\"\u003eUse of Multiple Links Between Switches\u003c/h3\u003e\n\n\u003ch3 id=\"use-of-spines-as-only-a-connector\"\u003eUse of Spines as Only a Connector\u003c/h3\u003e\n\n\u003ch3 id=\"use-of-chassis-as-a-spine-switch\"\u003eUse of Chassis as a Spine Switch\u003c/h3\u003e\n\n\u003ch2 id=\"27-服务器接入模型host-attach-models\"\u003e2.7 服务器接入模型（Host Attach Models）\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003e单接入（single-attach）\u003c/li\u003e\n  \u003cli\u003e双接入（dual-attach）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cloud-native-dc-networking/2-7.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-7. Dual-attached host models\u003c/p\u003e\n\n\u003ch2 id=\"28-summary\"\u003e2.8 Summary\u003c/h2\u003e\n\n\u003cp\u003ea primary implication of Clos topology: the rise of network disaggregation.\u003c/p\u003e\n\n\u003ch1 id=\"3-network-disaggregation网络分解\"\u003e3 Network Disaggregation（网络分解）\u003c/h1\u003e\n\n\u003ch2 id=\"31-什么是-network-disaggregation\"\u003e3.1 什么是 Network Disaggregation?\u003c/h2\u003e\n\n\u003cp\u003e交换机不再是厂商提供的一体机，而是分解为各个软件和硬件部分，每个部分可以独立设计\n、采购和升级。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cloud-native-dc-networking/3-1.png\" width=\"40%\" height=\"40%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 3-1. High-level components of a network switch\u003c/p\u003e\n\n\u003cp\u003e组装一台交换机就像组装一台 PC 机。\u003c/p\u003e\n\n\u003ch2 id=\"32-为什么-network-disaggregation-很重要\"\u003e3.2 为什么 Network Disaggregation 很重要？\u003c/h2\u003e\n\n\u003cp\u003e交换机分解\u003cstrong\u003e更多的是出于商业或业务考虑，而非技术\u003c/strong\u003e（a business model, not a\ntechnical issue）。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e控制成本。\u003c/p\u003e\n\n    \u003cp\u003e后期的运维成本比前期的采购成本高的多。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e避免厂商锁定。\u003c/li\u003e\n  \u003cli\u003e功能的标准化。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"33-哪些方面使得-network-disaggregation-如今成为可能\"\u003e3.3 哪些方面使得 Network Disaggregation 如今成为可能？\u003c/h2\u003e\n\n\u003col\u003e\n  \u003cli\u003e传统数据中心已经开始拖慢业务发展速度。\u003c/li\u003e\n  \u003cli\u003eCLOS 架构减少了对特定功能的厂商设备的依赖，更多地依赖标准化的设备。\u003c/li\u003e\n  \u003cli\u003e专门设计和生产交换芯片（称为商用芯片）的出现，这些厂商只设计和生产芯片，不做成品交换机。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"34-difference-in-network-operations-with-disaggregation\"\u003e3.4 Difference in Network Operations with Disaggregation\u003c/h2\u003e\n\n\u003ch2 id=\"35-open-network-installer-environment\"\u003e3.5 Open Network Installer Environment\u003c/h2\u003e\n\n\u003cp\u003eFacebook 发起了 Open Compute Project (OCP)。\u003c/p\u003e\n\n\u003cp\u003e在裸交换机上安装网络操作系统（NOS）：Open Network Installer Environment (ONIE)，类似于服务\n器领域的 PXE。\u003c/p\u003e\n\n\u003cp\u003e为什么没有直接用 PXE？PXE 只支持 x86。ARM 和 PowerPC 用的 u-boot。\u003c/p\u003e\n\n\u003ch2 id=\"36-the-players-in-network-disaggregation-hardware\"\u003e3.6 The Players in Network Disaggregation: Hardware\u003c/h2\u003e\n\n\u003ch3 id=\"packet-switching-silicon\"\u003ePacket-Switching Silicon\u003c/h3\u003e\n\n\u003cp\u003eVxLAN 的硬件支持最早出现在商用芯片（merchant silicon），而不是传统交换机厂商的芯片上。\u003c/p\u003e\n\n\u003cp\u003e芯片厂商：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003eBroadcom 是商用芯片领域的拓荒者和领导者，\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eTrident 系列：主要用在 Leaf\u003c/li\u003e\n      \u003cli\u003eTomahawk 系列：主要用在 Spine\u003c/li\u003e\n      \u003cli\u003eJericho 系统：主要用在 edge\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eMellanox 是另一个有力竞争者，\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eSpectrum 系列：Leaf 和 Spine 都可以用。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eBarefoot 是这个领域的新秀，Cisco 和 Arista 都有基于 barefoot 芯片的交换机。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e其他：Innovium, Marvell\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e芯片配置：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e主流：单芯片 64x100G\u003c/li\u003e\n  \u003cli\u003e顶配：单芯片 128x100G，例如 Tomahawk 3\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"odm-厂商\"\u003eODM 厂商\u003c/h3\u003e\n\n\u003cp\u003eEdgecore, Quanta, Agema, and Celestica, Dell.\u003c/p\u003e\n\n\u003ch1 id=\"4-network-operating-system-choices\"\u003e4 Network Operating System Choices\u003c/h1\u003e\n\n\u003ch1 id=\"5-routing-protocol-choices\"\u003e5 Routing Protocol Choices\u003c/h1\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/cilium-code-health-probe/\"\u003e\u003cspan\u003e« Cilium Code Walk Through: Node \u0026amp; Endpoint Health Probe\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/traffic-mirror-with-tc-and-tunneling/\"\u003e\u003cspan\u003eTraffic Mirroring: Theory and Practice (with tc and Tunneling) »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2021-01-10T00:00:00Z",
  "Author": "Arthur Chiao"
}