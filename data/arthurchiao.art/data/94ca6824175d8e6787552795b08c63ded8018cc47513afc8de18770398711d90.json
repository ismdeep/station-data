{
  "Source": "arthurchiao.art",
  "Title": "Play With Container Network Interface",
  "Link": "https://arthurchiao.art/blog/play-with-container-network-if/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003ePlay With Container Network Interface\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2018-11-07 | Last Update \u003c/p\u003e\n  \n  \u003cp\u003eA docker container may need more than one network interfaces (virtual or physical NICs).\nIn this post, we will show how to create OVS internal ports and veth paris,\nand assign them to containers as vNICs.\u003c/p\u003e\n\n\u003cp\u003eA preview of the network topology:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/play-with-container-network-if/net-topo.png\" width=\"45%\" height=\"45%\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"1-preliminary-knowledge\"\u003e1 Preliminary Knowledge\u003c/h2\u003e\n\n\u003cp\u003eFollowing preliminary network knowledge is needed to understand this article. If\naleady familar with these, jump to Section 2 directly.\u003c/p\u003e\n\n\u003ch3 id=\"11-linux-network-namespace-netns\"\u003e1.1 Linux Network Namespace (netns)\u003c/h3\u003e\n\n\u003cp\u003eLinux supports network namespaces [1,5], each host has a default netns,\nnamed \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edefault\u003c/code\u003e, and each container on the host is isolated to it’s own netns.\u003c/p\u003e\n\n\u003cp\u003eCheck the non-default network namespaces on our host:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns list \u003cspan class=\"c\"\u003e# or ip netns, ip netns ls\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eEmpty!\u003c/p\u003e\n\n\u003ch3 id=\"12-container-netns\"\u003e1.2 Container Netns\u003c/h3\u003e\n\n\u003cp\u003eStart a container with default network configurations, here we use \u003ca href=\"https://alpinelinux.org/\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elinux alpine\u003c/code\u003e\u003c/a\u003e for\nconvenience:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ docker pull alpine:3.5\n$ docker run -d --name ctn-1 library/alpine:3.5 sleep 3600d\n$ docker ps\nCONTAINER ID     IMAGE                 COMMAND        CREATED        STATUS        PORTS   NAMES\ndc2572d49035     library/alpine:3.5    \u0026#34;sleep 360d\u0026#34;   3 seconds ago  Up 1 seconds          ctn-1\n\n$ ip netns list\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eNamespaces list is still empty! This is because docker hides container\nnamespaces by default. let’s expose them manually:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003edocker inspect \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;{{.State.Pid}}\u0026#39;\u003c/span\u003e ctn-1\n44356\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eln\u003c/span\u003e \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e /proc/44356/ns/net /var/run/netns/44356\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns list\n44356\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eYes, that’s our container’s network namespace, represented by an positive number.\u003c/p\u003e\n\n\u003ch3 id=\"13-play-with-netns\"\u003e1.3 Play with Netns\u003c/h3\u003e\n\n\u003cp\u003eCheck the container’s network interfaces:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003e44356 ifconfig\neth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:05\n          inet addr:172.17.0.5  Bcast:0.0.0.0  Mask:255.255.0.0\n          \nlo        Link encap:Local Loopback\n          inet addr:127.0.0.1  Mask:255.0.0.0          \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThis is equivalent to:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e ctn-1 sh\n\n/ \u003cspan class=\"c\"\u003e# ifconfig\u003c/span\u003e\neth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:05\n          inet addr:172.17.0.5  Bcast:0.0.0.0  Mask:255.255.0.0\n          \nlo        Link encap:Local Loopback\n          inet addr:127.0.0.1  Mask:255.0.0.0          \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eBy definition, each network namespace has its own route tables and arp tables.\nCheck with:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u0026lt;NETNS\u0026gt; route \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u0026lt;NETNS\u0026gt; arp \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eNetwork devices, either physical or virtual, could be moved between network namespaces:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink set\u003c/span\u003e \u0026lt;DEV\u0026gt; netns \u0026lt;NETNS\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"14-virtual-network-devices\"\u003e1.4 Virtual Network Devices\u003c/h3\u003e\n\n\u003cp\u003eYou should have a basic understanding of \u003ca href=\"https://www.openvswitch.org\"\u003eOVS\u003c/a\u003e, \n\u003ca href=\"http://man7.org/linux/man-pages/man4/veth.4.html\"\u003eveth pair\u003c/a\u003e, \u003ca href=\"https://www.kernel.org/doc/Documentation/networking/tuntap.txt\"\u003etap/tun\u003c/a\u003e devices.\u003c/p\u003e\n\n\u003cp\u003eSome of my previous posts also covered these topics [3].\u003c/p\u003e\n\n\u003ch2 id=\"2-add-new-nic-to-container\"\u003e2 Add New NIC To Container\u003c/h2\u003e\n\n\u003cp\u003eIn this section, we will launch two containers, create an OVS internal port \nfor each, and assign each of them to a container as additional NICs.\u003c/p\u003e\n\n\u003cp\u003eFor simplicity, we wrapped several commands into tiny scripts. The scripts utilize\nthe tools mentioned in Sction 1, with additional error handling code.\nYou could get the scripts in Appendix.\u003c/p\u003e\n\n\u003ch3 id=\"21-launch-containers\"\u003e2.1 Launch Containers\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker run \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e ctn-1 library/alpine:3.5 \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e3600d\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker run \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e ctn-2 library/alpine:3.5 \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e3600d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"22-expose-network-namespace\"\u003e2.2 Expose Network Namespace\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./expose-netns.sh ctn-1\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./expose-netns.sh ctn-2\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns list\n45091 \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eid\u003c/span\u003e: 19\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n44356 \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eid\u003c/span\u003e: 18\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"23-create-ovs-port-assign-to-container\"\u003e2.3 Create OVS Port, Assign to Container\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./add-nic.sh ctn-1 vnic-1 br-int\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./add-nic.sh ctn-2 vnic-2 br-int\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWe will see that \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evnic-1\u003c/code\u003e has been added to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ectn-1\u003c/code\u003e as a NIC:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003e44356 ifconfig\neth0: \u003cspan class=\"nv\"\u003eflags\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt;  mtu 1500\n\nlo: \u003cspan class=\"nv\"\u003eflags\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e73\u0026lt;UP,LOOPBACK,RUNNING\u0026gt;  mtu 65536\n\nvnic-1: \u003cspan class=\"nv\"\u003eflags\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt;  mtu 1500\n        inet6 fe80::8c93:43ff:fe3b:5971  prefixlen 64  scopeid 0x20\u0026lt;\u003cspan class=\"nb\"\u003elink\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eSo does \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evnic-2\u003c/code\u003e to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ectn-2\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"3-test\"\u003e3 Test\u003c/h2\u003e\n\n\u003ch3 id=\"31-functionality-test\"\u003e3.1 Functionality Test\u003c/h3\u003e\n\n\u003cp\u003eTo test the connectivity, we configure the containers with private IP addresses:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003e44356 ifconfig vnic-1 192.168.1.3 netmask 255.255.255.0 up\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003e44356 ifconfig vnic-1\nvnic-1: \u003cspan class=\"nv\"\u003eflags\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt;  mtu 1500\n        inet 192.168.1.3  netmask 255.255.255.0  broadcast 192.168.1.255\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003e45091 ifconfig vnic-2 192.168.1.4 netmask 255.255.255.0 up\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003e45091 ifconfig vnic-2\nvnic-2: \u003cspan class=\"nv\"\u003eflags\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt;  mtu 1500\n        inet 192.168.1.4  netmask 255.255.255.0  broadcast 192.168.1.255\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/play-with-container-network-if/net-topo.png\" width=\"45%\" height=\"45%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003echeck L3 connectivity:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ docker exec -it ctn-1 sh\n\n/ # ping -I vnic-1 192.168.1.4\nPING 192.168.1.4 (192.168.1.4): 56 data bytes\n64 bytes from 192.168.1.4: seq=0 ttl=64 time=0.489 ms\n64 bytes from 192.168.1.4: seq=1 ttl=64 time=0.064 ms\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ethis is equivalent to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip netns exec 44356 ping -I vnic-1 192.168.1.4\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"32-performance-test\"\u003e3.2 Performance Test\u003c/h3\u003e\n\n\u003cp\u003eTest our new NIC’s throughput with \u003ca href=\"https://iperf.fr/iperf-download.php\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiperf3\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eInstall \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiperf3\u003c/code\u003e on \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ectn-1\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ectn2\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e/ \u003cspan class=\"c\"\u003e# apk update \u0026amp;\u0026amp; apk add iperf3\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003estart \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiperf3\u003c/code\u003e as server side in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ectn-1\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e/ \u003cspan class=\"c\"\u003e# iperf3 -s\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e-----------------------------------------------------------\u003c/span\u003e\nServer listening on 5201\n\u003cspan class=\"nt\"\u003e-----------------------------------------------------------\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eStart \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiperf3\u003c/code\u003e as client side in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ectn-2\u003c/code\u003e, with default parameters:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e/ \u003cspan class=\"c\"\u003e# iperf3 -c 192.168.1.3\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4] \u003cspan class=\"nb\"\u003elocal \u003c/span\u003e192.168.1.4 port 47957 connected to 192.168.1.3 port 5201\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e ID] Interval           Transfer     Bandwidth       Retr  Cwnd\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4]   0.00-1.00   sec  4.72 GBytes  40.6 Gbits/sec    0    351 KBytes\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4]   1.00-2.00   sec  5.01 GBytes  43.1 Gbits/sec    0    351 KBytes\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4]   2.00-3.00   sec  4.95 GBytes  42.5 Gbits/sec    0    351 KBytes\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4]   3.00-4.00   sec  4.73 GBytes  40.6 Gbits/sec    0    351 KBytes\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4]   4.00-5.00   sec  4.84 GBytes  41.6 Gbits/sec    0    351 KBytes\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4]   5.00-6.00   sec  4.93 GBytes  42.4 Gbits/sec    0    351 KBytes\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4]   6.00-7.00   sec  4.92 GBytes  42.3 Gbits/sec    0    351 KBytes\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4]   7.00-8.00   sec  4.95 GBytes  42.6 Gbits/sec    0    351 KBytes\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4]   8.00-9.00   sec  4.92 GBytes  42.3 Gbits/sec    0    351 KBytes\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4]   9.00-10.00  sec  4.94 GBytes  42.4 Gbits/sec    0    351 KBytes\n- - - - - - - - - - - - - - - - - - - - - - - - -\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e ID] Interval           Transfer     Bandwidth       Retr\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4]   0.00-10.00  sec  48.9 GBytes  42.0 Gbits/sec    0             sender\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4]   0.00-10.00  sec  48.9 GBytes  42.0 Gbits/sec                  receiver\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThis simple test showed that our NIC achieved \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e40+Gbps\u003c/code\u003e bandwidth.\u003c/p\u003e\n\n\u003cp\u003eYou could specify more parameters, e.g, use port \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e80\u003c/code\u003e (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-p\u003c/code\u003e), \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e100Mbps\u003c/code\u003e (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-b\u003c/code\u003e),\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10\u003c/code\u003e seconds (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-t\u003c/code\u003e), \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e100\u003c/code\u003e concurrency (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-P\u003c/code\u003e), UDP (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-u\u003c/code\u003e):\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e# server\n/ # iperf3 -s -p 80\n\n# client\n/ # iperf3 -c 192.168.1.3 -p 80 -b 100000000 -t 10 -P 100 -u\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"4-different-nic-types\"\u003e4 Different NIC Types\u003c/h2\u003e\n\n\u003cp\u003eIt is also possible to replace the OVS internal port with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eveth pair\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etap\u003c/code\u003e\ndevice, or other virtual network devices.\u003c/p\u003e\n\n\u003cp\u003eFor example, to use veth pair:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eadd-nic-veth-pair.sh ctn-1 veth-1 vnic-1 br-int\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eadd-nic-veth-pair.sh ctn-2 veth-2 vnic-2 br-int\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003einstead of:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./add-nic.sh ctn-1 vnic-1 br-int\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./add-nic.sh ctn-2 vnic-2 br-int\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ein Section 2.3, and all others steps remain the same.\u003c/p\u003e\n\n\u003ch2 id=\"5-summary\"\u003e5 Summary\u003c/h2\u003e\n\n\u003cp\u003eIn this post, we showed how to create virtual devices (OVS internal ports, veth pairs), and assign\nto docker containers as virtual NICs. We also showed how to verify the functionality, and how to measured\nthe throughput perfomance of the virtual NICs.\u003c/p\u003e\n\n\u003ch2 id=\"6-further-reading\"\u003e6 Further Reading\u003c/h2\u003e\n\n\u003cp\u003eBasically, what we have done in this article:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003ecreate virtual devices: tap, veth pair, ovs port, etc\u003c/li\u003e\n  \u003cli\u003eattach device to container and bridge\u003c/li\u003e\n  \u003cli\u003econfigure IP address for the device\u003c/li\u003e\n  \u003cli\u003efurther settings: e.g. route table\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eare roughly the same steps that docker daemon does during a container\ninitialization: create a veth pair, attach one end to a linux bridge\n(\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker0\u003c/code\u003e) and another end to contaienr, and configure the device with an\ninternal IP (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e172.17.0.0/16\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eFurther, most of the network solutions for container orchestration platforms (K8S, Mesos, etc),\ne.g. \u003ca href=\"https://www.projectcalico.org\"\u003eCalico\u003c/a\u003e, \u003ca href=\"https://coreos.com/flannel\"\u003eFlannel\u003c/a\u003e,\n\u003ca href=\"https://github.com/containernetworking/cni\"\u003eCNI\u003c/a\u003e, share much same steps as above.\u003c/p\u003e\n\n\u003cp\u003eGo ahead if you are interested!\u003c/p\u003e\n\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"http://www.haifux.org/lectures/299/netLec7.pdf\"\u003ePDF: Linux Kernel Namespaces and cgroups\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://wiki.linuxfoundation.org/networking/iproute2\"\u003eLinux Foundation: iproute2\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://arthurchiao.github.io/blog/ovs-deep-dive-0-overview/\"\u003eArthurChiao: OVS Deep Dive Series\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://alpinelinux.org/\"\u003eLinux Alpine\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"http://www.opencloudblog.com/?p=251\"\u003eHow to find namespaces in a Linux system\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://www.kernel.org/doc/Documentation/networking/tuntap.txt\"\u003ekernel.org: TUN/TAP\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://www.openvswitch.org\"\u003eOpenvSwitch (OVS)\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"http://man7.org/linux/man-pages/man4/veth.4.html\"\u003eMan Page: veth\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://iperf.fr/iperf-download.php\"\u003eiperf3\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://www.projectcalico.org\"\u003eCalico\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://coreos.com/flannel\"\u003eFlannel\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/containernetworking/cni\"\u003eCNI\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"appendix\"\u003eAppendix\u003c/h2\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"/assets/img/play-with-container-network-if/expose-netns.sh\"\u003eexpose-netns.sh\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/assets/img/play-with-container-network-if/add-nic.sh\"\u003eadd-nic.sh\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/assets/img/play-with-container-network-if/add-nic-veth-pair.sh\"\u003eadd-nic-veth-pair.sh\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/monitoring-ceph-obj-storage/\"\u003e\u003cspan\u003e« Monitoring Ceph Object Storage\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/traffic-mirror-with-ovs/\"\u003e\u003cspan\u003eTraffic Mirroring With OVS »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2018-11-07T00:00:00Z",
  "Author": "Arthur Chiao"
}