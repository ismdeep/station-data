{
  "Source": "arthurchiao.art",
  "Title": "[译] 星巴克不使用两阶段提交（2004）",
  "Link": "https://arthurchiao.art/blog/starbucks-do-not-use-two-phase-commit-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003e[译] 星巴克不使用两阶段提交（2004）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2020-07-15 | Last Update 2020-07-15\u003c/p\u003e\n  \n  \u003ch3 id=\"译者序\"\u003e译者序\u003c/h3\u003e\n\n\u003cp\u003e本文翻译自 2004 年的一篇文章: \u003ca href=\"https://www.enterpriseintegrationpatterns.com/ramblings/18_starbucks.html\"\u003eStarbucks Does Not Use Two-Phase\nCommit\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e由于译者水平有限，本文不免存在遗漏或错误之处。如有疑问，请查阅原文。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e以下是译文。\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#译者序\" id=\"markdown-toc-译者序\"\u003e译者序\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-请给我一杯热巧克力hotto-cocoa-o-kudasai\" id=\"markdown-toc-1-请给我一杯热巧克力hotto-cocoa-o-kudasai\"\u003e1 请给我一杯热巧克力（Hotto Cocoa o Kudasai）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-关联correlation\" id=\"markdown-toc-2-关联correlation\"\u003e2 关联（Correlation）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-异常处理exception-handling\" id=\"markdown-toc-3-异常处理exception-handling\"\u003e3 异常处理（Exception Handling）\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-销账write-off\" id=\"markdown-toc-31-销账write-off\"\u003e3.1 销账（Write-off）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-重试retry\" id=\"markdown-toc-32-重试retry\"\u003e3.2 重试（Retry）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-补偿compensating-action\" id=\"markdown-toc-33-补偿compensating-action\"\u003e3.3 补偿（Compensating Action）\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-两阶段提交two-phase-commit\" id=\"markdown-toc-4-两阶段提交two-phase-commit\"\u003e4 两阶段提交（two-phase commit）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-会话模式conversations\" id=\"markdown-toc-5-会话模式conversations\"\u003e5 会话模式（Conversations）\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"1-请给我一杯热巧克力hotto-cocoa-o-kudasai\"\u003e1 请给我一杯热巧克力（Hotto Cocoa o Kudasai）\u003c/h1\u003e\n\n\u003cp\u003e刚结束了一次为期两周的日本之旅。印象深刻的是数量多到难以置信的星巴克 —— 尤其是在\n新宿和六本木地区。在等待咖啡制作时，我开始思考\u003cstrong\u003e星巴克是如何处理订单的\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e与大多数商业公司一样，星巴克主要关心的也是\u003cstrong\u003e订单最大化\u003c/strong\u003e。更多的订单就意味着更\n多的收入。因此，他们采用\u003cstrong\u003e异步的方式处理订单\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e点好咖啡后，收银员会拿出一个杯子，将你的订单\u003cstrong\u003e在杯子上做个标记\u003c/strong\u003e，然后\n\u003cstrong\u003e将杯子放到一个队列\u003c/strong\u003e。这里所说的队列其实就是咖啡机上的一排杯子。\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e队列将收银员和咖啡师解耦\u003c/strong\u003e，使收银员能够不断接单，即使咖啡师已经有点忙不过来了。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e在这种方式中，如果咖啡师真的忙不过来了，可以再加几个咖啡师，这就是所谓的\n\u003ca href=\"https://www.enterpriseintegrationpatterns.com/CompetingConsumers.html\"\u003eCompeting Consumer\u003c/a\u003e\n场景。\u003c/p\u003e\n\n\u003ch1 id=\"2-关联correlation\"\u003e2 关联（Correlation）\u003c/h1\u003e\n\n\u003cp\u003e享受异步带来的好处的同时，星巴克也需要解决异步方式内在的挑战。例如，关联（correlation）问题。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e咖啡制作完成的顺序不一定与下单的顺序一致\u003c/strong\u003e。这有两个可能的原因：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e多位咖啡师可能在分别使用不同的咖啡机同时制作。另外，不同类型的咖啡所需的\n时间也不同，例如调配型咖啡会比已经磨好、拿杯子直接接就行的咖啡所花的时间要长。\u003c/li\u003e\n  \u003cli\u003e咖啡师可能会将同一咖啡类型的多个订单放到同一批制作，以节省整体的制作时间。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e因此，星巴克会面临\u003cstrong\u003e咖啡与顾客之间的关联问题\u003c/strong\u003e。咖啡制作完成的顺序是不确定的，需\n要将每一杯咖啡分别对应到正确的顾客。星巴克解决这个问题的方式与我们在消息系统\n中所使用的“模式”（pattern）是一样的：使用某种关联 ID（\u003ca href=\"https://www.enterpriseintegrationpatterns.com/CorrelationIdentifier.html\"\u003eCorrelation\nIdentifier\u003c/a\u003e）。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e在美国，大部分星巴克都会将顾客的名字作为显式关联 ID（explicit correlation\nidentifier）写到杯子上，咖啡制作完成后服务员会叫顾客的名字；\u003c/li\u003e\n  \u003cli\u003e在其他国家，可能会用咖啡的类型来做关联（例如，服务员会喊“大杯摩卡好了”）。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"3-异常处理exception-handling\"\u003e3 异常处理（Exception Handling）\u003c/h1\u003e\n\n\u003cp\u003e异步消息系统中的异常处理是很困难的。如果说现实世界中已经很好的解决了这个问题，那\n我们可以通过观察星巴克如何处理异常学到一些东西。\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e如果付款失败，他们会怎么做？\n    \u003cul\u003e\n      \u003cli\u003e如果咖啡已经做好了，他们会倒掉\u003c/li\u003e\n      \u003cli\u003e如果还没有开始做，他们会将杯子从“队列”中拿走\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e如果咖啡做错了，或者对咖啡不满意？他们会重新做一杯。\u003c/li\u003e\n  \u003cli\u003e如果咖啡机坏了，做不了咖啡？他们会退款。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e这些场景分别描述了几种常见的错误处理策略。\u003c/p\u003e\n\n\u003ch2 id=\"31-销账write-off\"\u003e3.1 销账（Write-off）\u003c/h2\u003e\n\n\u003cp\u003e这是所有错误处理策略中\u003cstrong\u003e最简单\u003c/strong\u003e的：\u003cstrong\u003e什么都不用做。或者是，丢弃已经做的所有东西\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e听起来似乎不靠谱，但实际业务中，有时这种方式是可接受的。如果销账带来的损失很小，\n那相比斥巨资实现一种复杂的错误处理机制，销账的方式还是更划算的。\u003c/p\u003e\n\n\u003cp\u003e例如，我曾为多家因特网服务提供商（ISP）工作，在他们的业务中，如果计费（billing /\nprovisioning cycle）发生错误，它们就会选择销账的方式。其导致的结果是，客户可能会\n享受了某些服务，但没有被收费。\u003c/p\u003e\n\n\u003cp\u003e这种处理方式给他们带来的营业损失足够小，因此业务能够保持运营。另外，公司会定期地\n对账（reconciliation），主动检测这些“免费”账户并将其关闭。\u003c/p\u003e\n\n\u003ch2 id=\"32-重试retry\"\u003e3.2 重试（Retry）\u003c/h2\u003e\n\n\u003cp\u003e当一大组操作（例如，一次事务）中的某些操作失败时，我们基本有两种选择：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e回退（undo）已完成的操作\u003c/li\u003e\n  \u003cli\u003e重试（retry）失败的操作\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e如果重试有较大的概率能成功，那就可以考虑重试方式。例如，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e如果失败的原因是违反了业务规则，那重试就不太可能会成功。\u003c/li\u003e\n  \u003cli\u003e如果失败的原因是某个外部系统挂了，那重试就有可能会成功。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e这里有一种特殊的重试：\u003ca href=\"https://www.enterpriseintegrationpatterns.com/IdempotentReceiver.html\"\u003e幂等接收器\u003c/a\u003e\n重试（retry with Idempotent Receiver）。在这种场景中，我们可以简单地重试所有操\n作，因为接收器成功之后便会忽略重复的消息。\u003c/p\u003e\n\n\u003ch2 id=\"33-补偿compensating-action\"\u003e3.3 补偿（Compensating Action）\u003c/h2\u003e\n\n\u003cp\u003e最后一种方式是回退所有已完成的操作（undo operations that were already completed），\n让系统回到一致的状态。\u003c/p\u003e\n\n\u003cp\u003e例如，在金融系统中，这些“补偿动作”能在交易失败时对已扣款进行退款处理。\u003c/p\u003e\n\n\u003ch1 id=\"4-两阶段提交two-phase-commit\"\u003e4 两阶段提交（two-phase commit）\u003c/h1\u003e\n\n\u003cp\u003e以上所有策略都与两阶段提交不同。\u003cstrong\u003e两阶段提交包含前后两个步骤\u003c/strong\u003e：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e准备（prepare）阶段\u003c/li\u003e\n  \u003cli\u003e执行（execute）阶段\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e如果在\u003cstrong\u003e星巴克中使用两阶段提交\u003c/strong\u003e，那买一杯咖啡的过程将变为：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e准备阶段：前台点单，打印小票，然后将现金和小票都放到台面上，等待咖啡做好。\u003c/li\u003e\n  \u003cli\u003e执行阶段：咖啡做好后，现金、小票和咖啡同时易手（change hands in one swoop），完成交易。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e在“事务”（transaction）完成之前，收银员和顾客都不能离开。\u003c/p\u003e\n\n\u003cp\u003e显然，如果使用这种提交方式，星巴克的业务量将急剧下降，因为相同时间内能服务的\n顾客数量将锐减。\u003c/p\u003e\n\n\u003cp\u003e这个例子也提醒我们，两阶段提交会让生活变得加更简单（因为错误处理非常简单），但它\n也会妨碍消息的自由流动（以及自由流动带来的可扩展性），因为它必须\u003cstrong\u003e将多个异步操作\n封装成一个有状态事务\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch1 id=\"5-会话模式conversations\"\u003e5 会话模式（Conversations）\u003c/h1\u003e\n\n\u003cp\u003e咖啡店交互的过程其实也是一个简单但很常见的\n\u003ca href=\"https://www.enterpriseintegrationpatterns.com/ramblings/09_correlation.html\"\u003eConversation\u003c/a\u003e 模式的例子。\u003c/p\u003e\n\n\u003cp\u003e双方（顾客和咖啡店）之间由两次交互组成：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e时间较短的同步交互\u003c/strong\u003e（a short synchronous interaction）：完成下单和支付\n（ordering and paying）\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e时间较长的异步交互\u003c/strong\u003e（a longer, asynchronous interaction）：完成咖啡的制\n作和交付（making and receiving the drink）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e这种类型的会话（conversation）在电商场景中是非常普遍的。例如，在 Amazon 买东\n西时，时间较短的异步交互过程会分配订单号，而所有的后续步骤（信用卡扣款、打包、配\n送）都是异步完成的。这些额外的异步步骤完成后，你会收到邮件方式（异步）的通\n知。如果中间发生任何差错，Amazon 通常会\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e补偿\u003c/strong\u003e：退款到信用卡，或\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e重试\u003c/strong\u003e：补发配送过程中丢失的物品。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e可以看到，真实世界往往都是异步的。我们的日常生活是由许多协调但异步的（\ncoordinated, but asynchronous）过程组成的，例如读取和回复电子邮件，购买咖啡等等\n。这意味着，异步消息模型（asynchronous messaging architecture）通常能很自然地对\n这些类型的交互进行建模。\u003c/p\u003e\n\n\u003cp\u003e此外，这还意味着，\u003cstrong\u003e经常观察日常生活有助于设计出成功的消息系统\u003c/strong\u003e（\nmessaging solutions）。\u003c/p\u003e\n\n\u003cp\u003e感谢阅读！\u003c/p\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/cilium-code-add-network-policy/\"\u003e\u003cspan\u003e« Cilium Code Walk Through: Add Network Policy\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/conntrack-design-and-implementation-zh/\"\u003e\u003cspan\u003e连接跟踪（conntrack）：原理、应用及 Linux 内核实现 »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2020-07-15T00:00:00Z",
  "Author": "Arthur Chiao"
}