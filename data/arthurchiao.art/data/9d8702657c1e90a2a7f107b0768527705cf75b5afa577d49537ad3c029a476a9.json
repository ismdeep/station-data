{
  "Source": "arthurchiao.art",
  "Title": "Linux CFS 调度器：原理、设计与内核实现（2023）",
  "Link": "https://arthurchiao.art/blog/linux-cfs-design-and-implementation-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eLinux CFS 调度器：原理、设计与内核实现（2023）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2023-02-05 | Last Update 2023-10-03\u003c/p\u003e\n  \n  \u003cp\u003e整理一些 Linux 默认调度器 CFS 相关的东西。CFS、cgroup 等内核技术合力实现了进程的\nCPU 资源限额（\u003cstrong\u003e\u003cmark\u003eCPU 带宽控制\u003c/mark\u003e\u003c/strong\u003e），这是容器的基础之一。\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#1-概念及关系\" id=\"markdown-toc-1-概念及关系\"\u003e1 概念及关系\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-cfs进程task的公平调度\" id=\"markdown-toc-11-cfs进程task的公平调度\"\u003e1.1 CFS：进程（task）的公平调度\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-cfs-扩展\" id=\"markdown-toc-12-cfs-扩展\"\u003e1.2 CFS 扩展\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#121-前提config_cgroups\" id=\"markdown-toc-121-前提config_cgroups\"\u003e1.2.1 前提：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCONFIG_CGROUPS\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#122-前提config_cgroup_sched\" id=\"markdown-toc-122-前提config_cgroup_sched\"\u003e1.2.2 前提：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCONFIG_CGROUP_SCHED\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#123-扩展支持实时进程组config_rt_group_sched\" id=\"markdown-toc-123-扩展支持实时进程组config_rt_group_sched\"\u003e1.2.3 扩展：支持实时进程组（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCONFIG_RT_GROUP_SCHED\u003c/code\u003e）\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#124-扩展支持常规进程组config_fair_group_sched\" id=\"markdown-toc-124-扩展支持常规进程组config_fair_group_sched\"\u003e1.2.4 扩展：支持常规进程组（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCONFIG_FAIR_GROUP_SCHED\u003c/code\u003e）\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-常规进程组-cfs-再扩展支持-cpu-带宽控制限额\" id=\"markdown-toc-13-常规进程组-cfs-再扩展支持-cpu-带宽控制限额\"\u003e1.3 常规进程组 CFS 再扩展：支持 CPU 带宽控制（限额）\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#131-cfs-存在的问题\" id=\"markdown-toc-131-cfs-存在的问题\"\u003e1.3.1 CFS 存在的问题\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#132-config_cfs_bandwidth\" id=\"markdown-toc-132-config_cfs_bandwidth\"\u003e1.3.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCONFIG_CFS_BANDWIDTH\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#14-cfs-bandwith-近几年改进\" id=\"markdown-toc-14-cfs-bandwith-近几年改进\"\u003e1.4 CFS BANDWITH 近几年改进\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#15-小结cfs-相关内核编译选项的关系\" id=\"markdown-toc-15-小结cfs-相关内核编译选项的关系\"\u003e1.5 小结：CFS 相关内核编译选项的关系\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-cfs-相关设计\" id=\"markdown-toc-2-cfs-相关设计\"\u003e2 CFS 相关设计\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-设计目标和基本原理\" id=\"markdown-toc-21-设计目标和基本原理\"\u003e2.1 设计目标和基本原理\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-核心概念\" id=\"markdown-toc-22-核心概念\"\u003e2.2 核心概念\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#221-vruntime\" id=\"markdown-toc-221-vruntime\"\u003e2.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evruntime\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#222-runqueue\" id=\"markdown-toc-222-runqueue\"\u003e2.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erunqueue\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#223-基于时序的红黑树\" id=\"markdown-toc-223-基于时序的红黑树\"\u003e2.2.3 基于时序的红黑树\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-调度策略scheduling-policy\" id=\"markdown-toc-23-调度策略scheduling-policy\"\u003e2.3 调度策略（scheduling policy）\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#231-实时进程调度策略\" id=\"markdown-toc-231-实时进程调度策略\"\u003e2.3.1 实时进程调度策略\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#sched_fifo\" id=\"markdown-toc-sched_fifo\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_FIFO\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#sched_rr\" id=\"markdown-toc-sched_rr\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_RR\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#232-常规进程调度策略\" id=\"markdown-toc-232-常规进程调度策略\"\u003e2.3.2 常规进程调度策略\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#sched_normal\" id=\"markdown-toc-sched_normal\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_NORMAL\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#sched_batch\" id=\"markdown-toc-sched_batch\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_BATCH\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#sched_idle\" id=\"markdown-toc-sched_idle\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_IDLE\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#233-常规进程-sched_normal-和实时进程-sched_rr-调度策略的区别\" id=\"markdown-toc-233-常规进程-sched_normal-和实时进程-sched_rr-调度策略的区别\"\u003e2.3.3 常规进程 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_NORMAL\u003c/code\u003e 和实时进程 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_RR\u003c/code\u003e 调度策略的区别\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#234-查看或修改进程的调度属性\" id=\"markdown-toc-234-查看或修改进程的调度属性\"\u003e2.3.4 查看或修改进程的调度属性\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-调度类scheduling-class\" id=\"markdown-toc-24-调度类scheduling-class\"\u003e2.4 调度类（scheduling class）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#25-进程组调度器扩展group-scheduler-extensions\" id=\"markdown-toc-25-进程组调度器扩展group-scheduler-extensions\"\u003e2.5 进程组调度器扩展（group scheduler extensions）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#26-cfs-配置项\" id=\"markdown-toc-26-cfs-配置项\"\u003e2.6 CFS 配置项\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#例子\" id=\"markdown-toc-例子\"\u003e例子\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#27-cpu-带宽控制设计config_cfs_bandwidth\" id=\"markdown-toc-27-cpu-带宽控制设计config_cfs_bandwidth\"\u003e2.7 CPU 带宽控制设计（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCONFIG_CFS_BANDWIDTH\u003c/code\u003e）\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#新配置项\" id=\"markdown-toc-新配置项\"\u003e新配置项\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#查看-k8s-pod-的-cpu-throttle-统计\" id=\"markdown-toc-查看-k8s-pod-的-cpu-throttle-统计\"\u003e查看 k8s pod 的 CPU throttle 统计\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#更多设计细节\" id=\"markdown-toc-更多设计细节\"\u003e更多设计细节\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#29-问题\" id=\"markdown-toc-29-问题\"\u003e2.9 问题\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#cpu-throttle-是怎么来的\" id=\"markdown-toc-cpu-throttle-是怎么来的\"\u003eCPU throttle 是怎么来的\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#上下文切换开销\" id=\"markdown-toc-上下文切换开销\"\u003e上下文切换开销\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-内核实现\" id=\"markdown-toc-3-内核实现\"\u003e3 内核实现\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-cfs-第一版实现\" id=\"markdown-toc-31-cfs-第一版实现\"\u003e3.1 CFS 第一版实现\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-核心数据结构\" id=\"markdown-toc-32-核心数据结构\"\u003e3.2 核心数据结构\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#321-struct-task_struct\" id=\"markdown-toc-321-struct-task_struct\"\u003e3.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct task_struct\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#322-struct-task_group\" id=\"markdown-toc-322-struct-task_group\"\u003e3.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct task_group\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#323-struct-sched_entity\" id=\"markdown-toc-323-struct-sched_entity\"\u003e3.2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sched_entity\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#324-struct-cfs_rq\" id=\"markdown-toc-324-struct-cfs_rq\"\u003e3.2.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct cfs_rq\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#325-struct-sched_class\" id=\"markdown-toc-325-struct-sched_class\"\u003e3.2.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sched_class\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-cfs-cpu-带宽控制实现\" id=\"markdown-toc-33-cfs-cpu-带宽控制实现\"\u003e3.3 CFS CPU 带宽控制实现\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-使用\" id=\"markdown-toc-4-使用\"\u003e4 使用\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-模拟-throttle-场景\" id=\"markdown-toc-41-模拟-throttle-场景\"\u003e4.1 模拟 throttle 场景\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-k8s-相关问题\" id=\"markdown-toc-42-k8s-相关问题\"\u003e4.2 k8s 相关问题\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#pod-cpu-throttle\" id=\"markdown-toc-pod-cpu-throttle\"\u003ePod cpu throttle\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#k8s-pod-使用-cpuset-的条件\" id=\"markdown-toc-k8s-pod-使用-cpuset-的条件\"\u003ek8s pod 使用 cpuset 的条件\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#生产例子\" id=\"markdown-toc-生产例子\"\u003e生产例子\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#参考资料\" id=\"markdown-toc-参考资料\"\u003e参考资料\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"1-概念及关系\"\u003e1 概念及关系\u003c/h1\u003e\n\n\u003cp\u003e首先理清几个概念和它们之间的关系。\u003c/p\u003e\n\n\u003ch2 id=\"11-cfs进程task的公平调度\"\u003e1.1 CFS：进程（task）的公平调度\u003c/h2\u003e\n\n\u003cp\u003eCFS（Completely Fair Scheduler）是 Linux 内置（也是目前默认）的一个\u003cstrong\u003e\u003cmark\u003e内核调度器\u003c/mark\u003e\u003c/strong\u003e，\n如名字所示，它实现了所谓的“完全公平”调度算法，将 CPU 资源均匀地分配给各进程（\n在内核代码中称为“任务”，task）。\n简单来说，如果一台机器有一个 CPU 多个（计算密集型）进程，那采用 CFS 调度器时，\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/linux-cfs-design-and-implementation/cfs.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e两个进程：每个进程会各占 50% CPU 时间；\u003c/li\u003e\n  \u003cli\u003e四个进程：每个进程会各占 25% CPU 时间；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e这个很好理解。接下来看第二个概念。\u003c/p\u003e\n\n\u003ch2 id=\"12-cfs-扩展\"\u003e1.2 CFS 扩展\u003c/h2\u003e\n\n\u003cp\u003e最初的 CFS 管理的是单个任务（进程）的调度，给每个进程分配公平的 CPU 时间。\n但很多情况下，进程会组织成进程组（task group）的形式，\n用户希望先对进程组分配 CPU 份额，再\u003cstrong\u003e\u003cmark\u003e在每个进程组里面实现公平调度\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e举个具体例子，多个用户使用同一台机器时，可能希望，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e首先按 user 公平（也可以不公平）分配 CPU；\u003c/li\u003e\n  \u003cli\u003e针对每个 user，再对其所有进程公平分配这个 user 的总 CPU 时间。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e为此，\u003cstrong\u003e\u003cmark\u003eCFS 引入了几项扩展\u003c/mark\u003e\u003c/strong\u003e，例如\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e实时任务的组调度（RT group）\u003c/li\u003e\n  \u003cli\u003e常规进程的组调度（task group）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e但实现这几个扩展是需要一些前提的。\u003c/p\u003e\n\n\u003ch3 id=\"121-前提config_cgroups\"\u003e1.2.1 前提：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCONFIG_CGROUPS\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e要实现按进程组分配和管理 CPU 份额的功能，首先要能够控制（\u003cstrong\u003e\u003cmark\u003econtrol\u003c/mark\u003e\u003c/strong\u003e）\n进程组（task \u003cstrong\u003e\u003cmark\u003egroup\u003c/mark\u003e\u003c/strong\u003e）的资源限额，\n这种技术在 Linux 内核中已经有了，叫\u003cstrong\u003e\u003cmark\u003e控制组（control group）\u003c/mark\u003e\u003c/strong\u003e，缩写是 cgroup。\n（\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eCONFIG_CGROUPS\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e）。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ecgroup 有两个版本，分别称为 cgroup v1 和 cgroup v2。这两个版本\u003cstrong\u003e\u003cmark\u003e不兼容\u003c/mark\u003e\u003c/strong\u003e，现在默认都是用的 v1；\u003c/li\u003e\n  \u003cli\u003e有了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecgroup\u003c/code\u003e，调度器就能通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecgroup\u003c/code\u003e 伪文件系统来管理进程组占用的资源（我们这里关心的是CPU 资源）了；\u003c/li\u003e\n  \u003cli\u003e更多信息见 Documentation/admin-guide/cgroup-v1/cgroups.rst。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"122-前提config_cgroup_sched\"\u003e1.2.2 前提：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCONFIG_CGROUP_SCHED\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003ecgroup 是按资源类型（cpu/memory/device/hugetlb/…）来做资源限额的，每种资源\n类型会有一种对应的控制器（controller），有独立的开关。\n控制\u003cstrong\u003e\u003cmark\u003e进程或进程组能使用的 CPU 时间\u003c/mark\u003e\u003c/strong\u003e，对应的开关是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCONFIG_CGROUP_SCHED\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e至此，支持进程组级别资源控制的基础就具备了。接下来就是 CFS 扩展代码的实现，\n添加对于 realtime/conventional task group 的支持。下面分别来看下。\u003c/p\u003e\n\n\u003ch3 id=\"123-扩展支持实时进程组config_rt_group_sched\"\u003e1.2.3 扩展：支持实时进程组（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCONFIG_RT_GROUP_SCHED\u003c/code\u003e）\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCONFIG_RT_GROUP_SCHED\u003c/code\u003e 支持对 real-time (SCHED_FIFO and SCHED_RR) 任务进行分组 CFS。\u003c/p\u003e\n\n\u003cp\u003e实时进程有严格的响应时间限制，不管机器的 load 有多高，都应该确保这些进程的响应实时性。\n例子：内核中的 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003emigration\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 进程，负责在不同 CPU 之间分发任务（进程负载均衡）。\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eps \u003cspan class=\"nt\"\u003e-ef\u003c/span\u003e | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003emigration\nroot          12       2  0       00:00:01 \u003cspan class=\"o\"\u003e[\u003c/span\u003emigration/0]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"124-扩展支持常规进程组config_fair_group_sched\"\u003e1.2.4 扩展：支持常规进程组（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCONFIG_FAIR_GROUP_SCHED\u003c/code\u003e）\u003c/h3\u003e\n\n\u003cp\u003e实时进程之外的进程就是所谓的\u003cstrong\u003e\u003cmark\u003e常规进程\u003c/mark\u003e\u003c/strong\u003e，它们没有严格的响应时间限制，\n当系统繁忙时，响应延迟就会增加。\u003c/p\u003e\n\n\u003cp\u003e在 cgroup 技术基础上上，再对 CFS 代码做一些增强，就能够支持进程组内的公平调度了。\n这些增强代码是通过编译选项 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eCONFIG_FAIR_GROUP_SCHED\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 控制的。\n支持对普通 CFS (SCHED_NORMAL, SCHED_BATCH) 任务进行分组。\u003c/p\u003e\n\n\u003cp\u003e至此，我们已经能对进程和进程组进行 CFS 调度。\u003c/p\u003e\n\n\u003ch2 id=\"13-常规进程组-cfs-再扩展支持-cpu-带宽控制限额\"\u003e1.3 常规进程组 CFS 再扩展：支持 CPU 带宽控制（限额）\u003c/h2\u003e\n\n\u003ch3 id=\"131-cfs-存在的问题\"\u003e1.3.1 CFS 存在的问题\u003c/h3\u003e\n\n\u003cp\u003eCFS 自己也存在一些问题或限制：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e某些情况下做不到真正的公平。\u003c/p\u003e\n\n    \u003cp\u003eCFS 本质上是会把 CPU 用满的（work-conserving）。具体来说，如果一个 CPU 上\n 有两个任务，理论上应该各占用 50% 的 CPU；但如果其中一个任务有很多 sleep/wait 时间，\n CFS 就会把多余的时间给到第二个进程，导致第二个进程实际使用的时间超过一半。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e优先级高的进程仍然可能获得更大的时间片。\u003c/p\u003e\n\n    \u003cp\u003e内核中有两中调度类（scheduling class）：SCHED_RT 和 SCHED_NORMAL，前者的优先级更大。\n 当一个 CPU 上有 RT 类型任务时，永远是它们先执行。优先级可以通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enice(2)\u003c/code\u003e 控制。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e无法设置 CPU 使用上限。\u003c/p\u003e\n\n    \u003cp\u003eCFS \u003cstrong\u003e\u003cmark\u003e只关注 CPU 平均分配，并不保证 CPU 时间\u003c/mark\u003e\u003c/strong\u003e（上下限）。\n 换句话说，CPU share/quota 只有相对意义，share 大的一定比 share 小的能分到更多 CPU，仅此而已。\n 进程越多，每个进程分到的 CPU 时间越少。\n CPU 限额（上限）对\u003cstrong\u003e\u003cmark\u003e按 CPU 时间计费\u003c/mark\u003e\u003c/strong\u003e的场景非常关键，例如公有云。\u003c/p\u003e\n\n    \u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/linux-cfs-design-and-implementation/cfs-share-hierarchy.png\" width=\"50%\" height=\"50%\"/\u003e\u003c/p\u003e\n    \u003cp align=\"center\"\u003e图片来自 google paper [5]。注意：严格来说，这里的相对时间还只是在 SCHED_NORMAL 里的时间，不包括 SCHED_RT 进程占掉的 CPU 时间。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"132-config_cfs_bandwidth\"\u003e1.3.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCONFIG_CFS_BANDWIDTH\u003c/code\u003e\u003c/h3\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e严格来说，Linux 中的调度单位是线程（thread），因此在调度上下文中并没有进程（process）的概念。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e基于以上原因，Google 提出了 \u003cstrong\u003e\u003cmark\u003eCFS CPU 带宽控制\u003c/mark\u003e\u003c/strong\u003e（CFS bandwidth control）方案，并合并到了主线内核。\n这里的“CPU 带宽”指的就是 CPU 份额，或者说的更清楚点，CPU 比例。\nSCHED_RT 中其实已经有这个功能，这里指的是 SCHED_NORMAL 支持这个功能。\u003c/p\u003e\n\n\u003cp\u003e这个功能的好处主要是给服务器，不是给桌面电脑。\n好处：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e能精确控制一个进程使用的 CPU 带宽上限；比如设置一个容器只能使用 0.2 CPU，\n那它的总时间就不能超过这个比例，即使这个 CPU 非常空闲；\u003c/li\u003e\n  \u003cli\u003e对容量规划非常有用（例如 OpenStack 调度 VM，k8s 调度 pod）；\u003c/li\u003e\n  \u003cli\u003e延迟更有保证；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"14-cfs-bandwith-近几年改进\"\u003e1.4 CFS BANDWITH 近几年改进\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003eburst 特性：允许借用前一个进程剩下的带宽。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"15-小结cfs-相关内核编译选项的关系\"\u003e1.5 小结：CFS 相关内核编译选项的关系\u003c/h2\u003e\n\n\u003cp\u003e总结一下前面提到的 CFS 相关功能，它们的配置选项或依赖关系如下：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eCONFIG_CGROUPS                     # 1. 是否支持 cgroup，下面进一步区分 cpu/memory/hugetlb/...\n  |-CONFIG_MEMCG                   #   1.1 是否支持 memory cgroup\n  |-CONFIG_BLK_CGROUP              #   1.2 是否支持 blkio cgroup\n  |-CONFIG_CGROUP_SCHED            #   1.3 是否支持 cpu cgroup\n  |   |-CONFIG_RT_GROUP_SCHED      #     1.3.1 是否支持 realtime scheduler cpu cgroup\n  |   |-CONFIG_FAIR_GROUP_SCHED    #     1.3.2 是否支持 cfs for task cgroup\n  |       |-CONFIG_CFS_BANDWIDTH   #       1.3.2.1 是否支持 cfs cpu bandwidth\n  |\n  |-CONFIG_CGROUP_PIDS             #   1.4 是否支持 pid cgroup\n  |-CONFIG_CPUSETS                 #   1.5 是否支持 cpuset cgroup\n  |-CONFIG_CGROUP_DEVICE           #   1.6 是否支持 device cgroup\n  |-CONFIG_CGROUP_CPUACCT          #   1.7 是否支持 cpu,acc cgroup\n  |-...                            #   1.8 是否支持 ... cgroup\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这些宏定义（编译开关）的层次关系在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einit/Kconfig\u003c/code\u003e 中可以看出来，在父一级开关为 yes 的条件下，才会有子一级的开关。\n例如，要启用 CFS CPU 带宽控制功能，就必须要有：\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCONFIG_CGROUPS=y \u0026amp;\u0026amp; CONFIG_CGROUP_SCHED=y \u0026amp;\u0026amp; CONFIG_FAIR_GROUP_SCHED=y \u0026amp;\u0026amp; CONFIG_CFS_BANDWIDTH=y\u003c/code\u003e\n这是本文接下来将重点关注的部分（\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e1 -\u0026gt; 1.3 -\u0026gt; 1.3.2 -\u0026gt; 1.3.2.1\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e）。\u003c/p\u003e\n\n\u003cp\u003e各开关的详细解释：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e// init/Kconfig\n\nmenuconfig CGROUPS\n    bool \u0026#34;Control Group support\u0026#34;\n    help\n      This option adds support for grouping sets of processes together, for\n      use with process control subsystems such as Cpusets, CFS, memory controls or device isolation.\n      See\n        - Documentation/scheduler/sched-design-CFS.rst    (CFS)\n        - Documentation/admin-guide/cgroup-v1/ (features for grouping, isolation and resource control)\n\nif CGROUPS\n    config MEMCG\n        bool \u0026#34;Memory controller\u0026#34;\n        select PAGE_COUNTER\n        help\n          Provides control over the memory footprint of tasks in a cgroup.\n    config BLK_CGROUP\n        bool \u0026#34;IO controller\u0026#34;\n        depends on BLOCK\n        help\n          Generic block IO controller cgroup interface. This is the common\n          cgroup interface which should be used by various IO controlling policies.\n\n          Currently, CFQ IO scheduler uses it to recognize task groups and\n          control disk bandwidth allocation (proportional time slice allocation)\n          to such task groups. It is also used by bio throttling logic in\n          block layer to implement upper limit in IO rates on a device.\n\n          This option only enables generic Block IO controller infrastructure.\n          One needs to also enable actual IO controlling logic/policy. For\n          enabling proportional weight division of disk bandwidth in CFQ, set\n          CONFIG_BFQ_GROUP_IOSCHED=y; for enabling throttling policy, set\n          CONFIG_BLK_DEV_THROTTLING=y.\n\n          See Documentation/admin-guide/cgroup-v1/blkio-controller.rst for more information.\n\n    menuconfig CGROUP_SCHED\n        bool \u0026#34;CPU controller\u0026#34;\n        help\n          This feature lets CPU scheduler recognize task groups and control CPU\n          bandwidth allocation to such task groups. It uses cgroups to group tasks.\n    if CGROUP_SCHED\n        config FAIR_GROUP_SCHED\n            bool \u0026#34;Group scheduling for SCHED_OTHER\u0026#34;\n            depends on CGROUP_SCHED\n            default CGROUP_SCHED\n\n            config CFS_BANDWIDTH\n                bool \u0026#34;CPU bandwidth provisioning for FAIR_GROUP_SCHED\u0026#34;\n                depends on FAIR_GROUP_SCHED\n                help\n                  This option allows users to define CPU bandwidth rates (limits) for\n                  tasks running within the fair group scheduler.  Groups with no limit\n                  set are considered to be unconstrained and will run with no restriction.\n                  See Documentation/scheduler/sched-bwc.rst for more information.\n        config RT_GROUP_SCHED\n            bool \u0026#34;Group scheduling for SCHED_RR/FIFO\u0026#34;\n            depends on CGROUP_SCHED\n            help\n              This feature lets you explicitly allocate real CPU bandwidth\n              to task groups. If enabled, it will also make it impossible to\n              schedule realtime tasks for non-root users until you allocate realtime bandwidth for them.\n              See Documentation/scheduler/sched-rt-group.rst for more information.\n    endif #CGROUP_SCHED\n\n    config CGROUP_PIDS\n        bool \u0026#34;PIDs controller\u0026#34;\n    config CPUSETS\n        bool \u0026#34;Cpuset controller\u0026#34;\n        help\n          This option will let you create and manage CPUSETs which\n          allow dynamically partitioning a system into sets of CPUs and\n          Memory Nodes and assigning tasks to run only within those sets.\n          This is primarily useful on large SMP or NUMA systems.\n    config CGROUP_DEVICE\n        bool \u0026#34;Device controller\u0026#34;\n        help\n          Provides a cgroup controller implementing whitelists for\n          devices which a process in the cgroup can mknod or open.\n    config CGROUP_CPUACCT\n        bool \u0026#34;Simple CPU accounting controller\u0026#34;\n        help\n          Provides a simple controller for monitoring the total CPU consumed by the tasks in a cgroup.\nendif # CGROUPS\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"2-cfs-相关设计\"\u003e2 CFS 相关设计\u003c/h1\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/linux-cfs-design-and-implementation/cfs-rq-sched-entity.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eImage from [6]\u003c/p\u003e\n\n\u003ch2 id=\"21-设计目标和基本原理\"\u003e2.1 设计目标和基本原理\u003c/h2\u003e\n\n\u003cp\u003eCFS 早在 2007 年就合并到 Linux 内核（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e2.6.23\u003c/code\u003e） [1]，取代了之前调度器中的 SCHED_OTHER 实现。\nCFS 80% 的设计都可以总结为一句话：\u003cstrong\u003e\u003cmark\u003e将真实 CPU 建模为一个“理想、精确的多任务 CPU”\u003c/mark\u003e\u003c/strong\u003e。\n“理想多任务 CPU” 掌控 100% 物理资源，能精确地以相同速度并行执行多个进程，\n每个任务的速度都是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1/nr_running\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e内核为每个 CPU 维护了一个可运行进程的队列（runqueue）；\nCFS 有一个可配置的调度周期 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esched_latency\u003c/code\u003e；接下来的基本调度过程：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eCFS 根据当前可运行进程的数量 N，计算得到每个进程应该执行的时间 sched_latency/N；\u003c/li\u003e\n  \u003cli\u003e依次取出进程执行以上计算出的时间；\u003c/li\u003e\n  \u003cli\u003e如果 runqueue 有变化，再重新计算可执行时间。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"22-核心概念\"\u003e2.2 核心概念\u003c/h2\u003e\n\n\u003ch3 id=\"221-vruntime\"\u003e2.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evruntime\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e在真实 CPU 上，任意时间只能运行一个任务；为了实现“公平”，CFS 引入了 “virtual runtime”（虚拟运行时间）的概念。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003evruntime 表示进程真正在 CPU 上执行的时间，不包括任何形式的等待时间；\u003c/li\u003e\n  \u003cli\u003e注意机器一般都是多核的，因此 vruntime 是在多个 CPU 上执行时间的累加。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"222-runqueue\"\u003e2.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erunqueue\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e刚才其实已经提到了，是每个 CPU 上的可运行进程队列，之前就已经存在，并不是 CFS 引入的。\u003c/p\u003e\n\n\u003ch3 id=\"223-基于时序的红黑树\"\u003e2.2.3 基于时序的红黑树\u003c/h3\u003e\n\n\u003cp\u003e哪个进程 vruntime 最小，说明累计执行时间最少，从“公平”的角度来说，就需要执行它。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eCFS 用红黑树来组织这些进程（描述 runqueue），用 \u003cstrong\u003e\u003cmark\u003evruntime 做 key\u003c/mark\u003e\u003c/strong\u003e，\n所以这是一个\u003cstrong\u003e\u003cmark\u003e基于时序的红黑树\u003c/mark\u003e\u003c/strong\u003e（time-ordered rbtree），\n所有 runnable 的进程都是用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ep-\u0026gt;se.vruntime\u003c/code\u003e 作为 key 来排序的。\u003c/li\u003e\n  \u003cli\u003eCFS 每次取出最左边的进程（红黑树特性），执行完成后插入越来越右边，这样每个任务都有机会成为最左边的节点，\n在一段确定是时间内总得得到 CPU 资源。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e实际上 CFS 还维护了 min/max vruntime，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003emin vruntime 用途：\u003cstrong\u003e\u003cmark\u003e新进程或重新回到 ready 状态的进程\u003c/mark\u003e\u003c/strong\u003e，用 vruntime=min_vruntime 来初始化，放到最左边；这对防止进程饥饿非常关键；\u003c/li\u003e\n  \u003cli\u003emax vruntime 用途：限额？\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e查询复杂度：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eO(1)\u003c/code\u003e\n插入复杂度 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eO(logN)\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"23-调度策略scheduling-policy\"\u003e2.3 调度策略（scheduling policy）\u003c/h2\u003e\n\n\u003ch3 id=\"231-实时进程调度策略\"\u003e2.3.1 实时进程调度策略\u003c/h3\u003e\n\n\u003cp\u003e可运行的进程都放到了一个 runqueue（运行队列）的数据结构中，调度器根据调度策略从里面取出进程放到 CPU 上执行。\n有两种调度策略：SCHED_RR 和 SCHED_FIFO。\u003c/p\u003e\n\n\u003ch4 id=\"sched_fifo\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_FIFO\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003e很简单，先进先出。\u003c/p\u003e\n\n\u003cp\u003e进程在下面的条件下会放弃 CPU：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e进程在等待，例如 IO 操作。当进程\u003cstrong\u003e\u003cmark\u003e再回到 ready 状态时\u003c/mark\u003e\u003c/strong\u003e，它会被放到 runqueue 队尾。\u003c/li\u003e\n  \u003cli\u003e进程通过 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003esched_yield\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e yield（主动让出） CPU。进程\u003cstrong\u003e\u003cmark\u003e立即\u003c/mark\u003e\u003c/strong\u003e进入 runqueue 队尾。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4 id=\"sched_rr\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_RR\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003e在这种调度策略中，runqueue 中的每个进程轮流获得时间片（quantum）。\u003c/p\u003e\n\n\u003cp\u003e调度策略：影响的是 runqueue 如何工作，每个进程能获得多少执行时间。\u003c/p\u003e\n\n\u003ch3 id=\"232-常规进程调度策略\"\u003e2.3.2 常规进程调度策略\u003c/h3\u003e\n\n\u003cp\u003eCFS 实现了三种调度策略：\u003c/p\u003e\n\n\u003ch4 id=\"sched_normal\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_NORMAL\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003e历史上叫 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_OTHER\u003c/code\u003e，适用于普通任务的调度。\u003c/p\u003e\n\n\u003ch4 id=\"sched_batch\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_BATCH\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003e适合批量任务。不像普通任务那样容易被抢占，因此每个任务运行的时间可以更长，缓存效率更高，但交互性变差。\u003c/p\u003e\n\n\u003ch4 id=\"sched_idle\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_IDLE\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis is even weaker than nice 19, but its not a true\nidle timer scheduler in order to avoid to get into priority\ninversion problems which would deadlock the machine.\u003c/p\u003e\n\n\u003ch3 id=\"233-常规进程-sched_normal-和实时进程-sched_rr-调度策略的区别\"\u003e2.3.3 常规进程 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_NORMAL\u003c/code\u003e 和实时进程 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_RR\u003c/code\u003e 调度策略的区别\u003c/h3\u003e\n\n\u003cp\u003e二者都是按进程公平分配 CPU，计算好每个进程的执行时间（时长都一样），然后依次取出进程执行，\n听起来有点像，但不一样：\u003c/p\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003e \u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eSCHED_RR\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eSCHED_NORMAL\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e调度的进程类型\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e实时进程\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e普通进程\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e时间片\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e静态，不依赖系统中的进程数量\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e动态，根据系统中进程的数量会发生变化\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e下一个进程的选择\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e从 runqueue 中按 RR 选下一个\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e从红黑树中选 vruntime 最小的一个\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch3 id=\"234-查看或修改进程的调度属性\"\u003e2.3.4 查看或修改进程的调度属性\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003echrt\u003c/code\u003e 可\u003cstrong\u003e\u003cmark\u003e查看或修改进程的调度属性\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003echrt \u003cspan class=\"nt\"\u003e--help\u003c/span\u003e\nShow or change the real-time scheduling attributes of a process.\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e查看调度属性：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003echrt \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 219027\npid 219027\u003cspan class=\"s1\"\u003e\u0026#39;s current scheduling policy: SCHED_OTHER\npid 219027\u0026#39;\u003c/span\u003es current scheduling priority: 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"24-调度类scheduling-class\"\u003e2.4 调度类（scheduling class）\u003c/h2\u003e\n\n\u003cp\u003eCFS 引入了 “Scheduling Class” 概念，将调度策略封装到一个调度类型，使得 CFS\n调度器核心代码不用处理调度策略细节。\u003c/p\u003e\n\n\u003cp\u003e这些调度类组成一个可扩展的调度模块层级（an extensible hierarchy of scheduler modules）。\u003c/p\u003e\n\n\u003ch2 id=\"25-进程组调度器扩展group-scheduler-extensions\"\u003e2.5 进程组调度器扩展（group scheduler extensions）\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCONFIG_FAIR_GROUP_SCHED\u003c/code\u003e 启用后，会为每个 task group 在对应的 cgroup\n目录中创建一个名为 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ecpu.shares\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 的文件。\u003c/p\u003e\n\n\u003ch2 id=\"26-cfs-配置项\"\u003e2.6 CFS 配置项\u003c/h2\u003e\n\n\u003cp\u003eCFS 的时间粒度是 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ens\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，并不依赖任何 jiffies 或 HZ 信息。\n有一个可调优的配置，（需要在编译内核时打开 CONFIG_SCHED_DEBUG）：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ekernel \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt; 5.15\u003c/code\u003e: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/sys/kernel/sched_min_granularity_ns\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003ekernel \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026gt;= 5.15\u003c/code\u003e: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/kernel/debug/sched/min_granularity_ns\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e可以通过调整这个参数来让调度器从 “desktop”（低延迟）到“server”（高并发）workloads。\n默认配置适合的是 desktop workloads。\u003c/p\u003e\n\n\u003ch3 id=\"例子\"\u003e例子\u003c/h3\u003e\n\n\u003cp\u003e下面是个例子，创建进程组，通过 cgroup 文件系统设置 CPU shares，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# 1. 挂载 cgroup 文件系统\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emount \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e tmpfs cgroup_root /sys/fs/cgroup\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir\u003c/span\u003e /sys/fs/cgroup/cpu                       \u003cspan class=\"c\"\u003e# 创建 cpu 目录，用于控制 cpu 资源份额\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emount \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e cgroup \u003cspan class=\"nt\"\u003e-ocpu\u003c/span\u003e none /sys/fs/cgroup/cpu\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /sys/fs/cgroup/cpu\n\n\u003cspan class=\"c\"\u003e# 2. 创建进程组对应的 cgroup 目录\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir \u003c/span\u003emultimedia     \u003cspan class=\"c\"\u003e# create \u0026#34;multimedia\u0026#34; group of tasks\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir \u003c/span\u003ebrowser        \u003cspan class=\"c\"\u003e# create \u0026#34;browser\u0026#34; group of tasks\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# 3. 设置进程组的 CPU 份额： multimedia 可以比 browser 多用一倍\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho \u003c/span\u003e2048 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e multimedia/cpu.shares\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho \u003c/span\u003e1024 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e browser/cpu.shares\n\n\u003cspan class=\"c\"\u003e# 4. 启动浏览器进程 firefox 并放到 \u0026#34;browser\u0026#34; 进程组\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003efirefox \u0026amp;\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u0026lt;firefox_pid\u0026gt; \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e browser/tasks\n\n\u003cspan class=\"c\"\u003e# 启动多媒体进程 gmplayer 并放到 \u0026#34;multimedia\u0026#34; 进程组\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egmplayer \u0026amp;\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u0026lt;movie_player_pid\u0026gt; \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e multimedia/tasks\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"27-cpu-带宽控制设计config_cfs_bandwidth\"\u003e2.7 CPU 带宽控制设计（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCONFIG_CFS_BANDWIDTH\u003c/code\u003e）\u003c/h2\u003e\n\n\u003ch3 id=\"新配置项\"\u003e新配置项\u003c/h3\u003e\n\n\u003cp\u003e给 cpu cgroup 引入了两个新配置项：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ecpu.cfs_period_us\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e: 周期（period），每个周期单独计算，周期结束之后状态（quota 等）清零；默认 100ms\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ecpu.cfs_quota_us\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e: 在一个周期里的份额（quota），默认 5ms。\u003c/p\u003e\n\n    \u003cp\u003e最大 1s，最小 1ms：\u003c/p\u003e\n\n    \u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e  \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eu64\u003c/span\u003e \u003cspan class=\"n\"\u003emax_cfs_quota_period\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eNSEC_PER_SEC\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* 1s */\u003c/span\u003e\n  \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eu64\u003c/span\u003e \u003cspan class=\"n\"\u003emin_cfs_quota_period\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eNSEC_PER_MSEC\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* 1ms */\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e    \u003c/div\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e此外还有一个统计输出：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ecpu.stat\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e：输出 throttling statistics\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e后来还引入了一个优化项：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ecpu.cfs_burst_us: the maximum accumulated run-time。上一个进程没用完的份额，可以给下一个 CPU 用。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e默认值：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ecpu.cfs_period_us=100ms\ncpu.cfs_quota_us=-1\ncpu.cfs_burst_us=0  # 5.15+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"查看-k8s-pod-的-cpu-throttle-统计\"\u003e查看 k8s pod 的 CPU throttle 统计\u003c/h3\u003e\n\n\u003cp\u003e在一个 k8s node 上查看某个 pod 的 \u003cstrong\u003e\u003cmark\u003eCPU throttle 统计\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /sys/fs/cgroup/cpu/kubepods/pod\u0026lt;pod_id\u0026gt;/cpu.stat\nnr_periods 1312889\nnr_throttled 100714\nthrottled_time 22081774986248\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"更多设计细节\"\u003e更多设计细节\u003c/h3\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eThe skeleton of our approach is as follows:\u003c/p\u003e\n\n  \u003cul\u003e\n    \u003cli\u003eWe maintain a global pool (per-tg) pool of unassigned quota.  Within it\nwe track the bandwidth period, quota per period, and runtime remaining in\nthe current period.  As bandwidth is used within a period it is decremented\nfrom runtime.  Runtime is currently synchronized using a spinlock, in the\ncurrent implementation there’s no reason this couldn’t be done using\natomic ops instead however the spinlock allows for a little more flexibility\nin experimentation with other schemes.\u003c/li\u003e\n    \u003cli\u003eWhen a cfs_rq participating in a bandwidth constrained task_group executes\nit acquires time in sysctl_sched_cfs_bandwidth_slice (default currently\n10ms) size chunks from the global pool, this synchronizes under rq-\u0026gt;lock and\nis part of the update_curr path.\u003c/li\u003e\n    \u003cli\u003eThrottled entities are dequeued, we protect against their re-introduction to\nthe scheduling hierarchy via checking for a, per cfs_rq, throttled bit.\u003c/li\u003e\n  \u003c/ul\u003e\n\n  \u003cp\u003eAfter received a slice, sched_entities in cfs_rq would start running, and keep\napplying after every slice is used up. If there are no more slices, which means\nthe cfs_rq used up all the allowable quota in this period, it will be\nthrottled, at the meanwhile tasks couldn’t run anymore. The throttling\nstatistics could be checked with Cgroup cpu.stat. After this period, global\nquota pool will be refreshed and cfs_rq get out of throttled state, tasks\ncontinue running.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"29-问题\"\u003e2.9 问题\u003c/h2\u003e\n\n\u003ch3 id=\"cpu-throttle-是怎么来的\"\u003eCPU throttle 是怎么来的\u003c/h3\u003e\n\n\u003cp\u003e多核情况下：可以在一个核上运行很长时间，也可以在多个核上运行很短时间。\n后一种情况会导致进程在很短的时间内用完了全部 quota，在调度周期内剩下的时间里，只能等待。这就是 throttle（关闭阀门，节流）。\u003c/p\u003e\n\n\u003cp\u003e典型场景：多核，多线程（例如线程池）进程。\u003c/p\u003e\n\n\u003ch3 id=\"上下文切换开销\"\u003e上下文切换开销\u003c/h3\u003e\n\n\u003cp\u003e过载情况下，每个进程能分到的时间片很短，例如 1ms，导致大部分 CPU 开销都花在了上下文切换上。\u003c/p\u003e\n\n\u003cp\u003e上下文切换做的事情：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e保存当前进程或线程的状态；\u003c/li\u003e\n  \u003cli\u003e恢复下一个进程或线程的状态；\u003c/li\u003e\n  \u003cli\u003e执行后一个进程。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e如果一个时间片是 6ms，切换占 1ms，那我们还有5ms 可以执行；\n如果 1.5ms，那只有 0.5ms 可以执行。\u003c/p\u003e\n\n\u003cp\u003e为了避免这个问题，引入 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emin_granularity\u003c/code\u003e；反过来，这也会影响 sched_latency 的选取。\u003c/p\u003e\n\n\u003ch1 id=\"3-内核实现\"\u003e3 内核实现\u003c/h1\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eSCHED_FIFO/_RR are implemented in sched/rt.c and are as specified by POSIX.\u003c/p\u003e\n\n  \u003cp\u003esched/rt.c implements SCHED_FIFO and SCHED_RR semantics.  It uses 100 runqueues (for all 100 RT\npriority levels, instead of 140 in the previous scheduler) and it needs no expired array.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"31-cfs-第一版实现\"\u003e3.1 CFS 第一版实现\u003c/h2\u003e\n\n\u003cp\u003e见 [1]，代码不太多。想快速了解整体实现的可以浏览一下。\u003c/p\u003e\n\n\u003ch2 id=\"32-核心数据结构\"\u003e3.2 核心数据结构\u003c/h2\u003e\n\n\u003cp\u003e接下来的部分都是参考 5.10 代码。\u003c/p\u003e\n\n\u003cp\u003e介绍几个核心的数据结构。\u003c/p\u003e\n\n\u003ch3 id=\"321-struct-task_struct\"\u003e3.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct task_struct\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e每个进程的结构体表示是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct task\u003c/code\u003e，\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/linux/sched.h\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ethread_info\u003c/span\u003e        \u003cspan class=\"n\"\u003ethread_info\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003evolatile\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e            \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* -1 unrunnable, 0 runnable, \u0026gt;0 stopped: */\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e                  \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erefcount_t\u003c/span\u003e             \u003cspan class=\"n\"\u003eusage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e           \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* Per task flags (PF_*), defined further below: */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e           \u003cspan class=\"n\"\u003eptrace\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e                \u003cspan class=\"n\"\u003eon_cpu\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003e__call_single_node\u003c/span\u003e    \u003cspan class=\"n\"\u003ewake_entry\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e            \u003cspan class=\"n\"\u003ecpu\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* Current CPU: */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e            \u003cspan class=\"n\"\u003ewakee_flips\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e           \u003cspan class=\"n\"\u003ewakee_flip_decay_ts\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e     \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003elast_wakee\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e                \u003cspan class=\"n\"\u003erecent_used_cpu\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e                \u003cspan class=\"n\"\u003ewake_cpu\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e                \u003cspan class=\"n\"\u003eon_rq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e                \u003cspan class=\"n\"\u003eprio\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e                \u003cspan class=\"n\"\u003estatic_prio\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e                \u003cspan class=\"n\"\u003enormal_prio\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esched_class\u003c/span\u003e    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esched_class\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esched_entity\u003c/span\u003e          \u003cspan class=\"n\"\u003ese\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e             \u003cspan class=\"c1\"\u003e// schedule entity, including vruntime\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef CONFIG_CGROUP_SCHED\n\u003c/span\u003e    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_group\u003c/span\u003e           \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esched_task_group\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中有个调度相关的字段是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sched_entity se\u003c/code\u003e。可以是一个进程、一个进程组或一个用户。\u003c/p\u003e\n\n\u003ch3 id=\"322-struct-task_group\"\u003e3.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct task_group\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e同理，进程组中也有一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sched_entity se\u003c/code\u003e 字段：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// https://github.com/torvalds/linux/blob/v5.10/kernel/sched/sched.h#L383\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Task group related information */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_group\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ecgroup_subsys_state\u003c/span\u003e \u003cspan class=\"n\"\u003ecss\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef CONFIG_FAIR_GROUP_SCHED\n\u003c/span\u003e    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esched_entity\u003c/span\u003e  \u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"n\"\u003ese\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* schedulable entities of this group on each CPU */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ecfs_rq\u003c/span\u003e        \u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"n\"\u003ecfs_rq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* runqueue \u0026#34;owned\u0026#34; by this group on each CPU */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e          \u003cspan class=\"n\"\u003eshares\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eatomic_long_t\u003c/span\u003e        \u003cspan class=\"n\"\u003eload_avg\u003c/span\u003e \u003cspan class=\"n\"\u003e____cacheline_aligned\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef CONFIG_RT_GROUP_SCHED\n\u003c/span\u003e    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esched_rt_entity\u003c/span\u003e    \u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"n\"\u003ert_se\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ert_rq\u003c/span\u003e        \u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"n\"\u003ert_rq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ert_bandwidth\u003c/span\u003e    \u003cspan class=\"n\"\u003ert_bandwidth\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ercu_head\u003c/span\u003e        \u003cspan class=\"n\"\u003ercu\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003elist_head\u003c/span\u003e    \u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_group\u003c/span\u003e    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003elist_head\u003c/span\u003e    \u003cspan class=\"n\"\u003esiblings\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003elist_head\u003c/span\u003e    \u003cspan class=\"n\"\u003echildren\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef CONFIG_SCHED_AUTOGROUP\n\u003c/span\u003e    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eautogroup\u003c/span\u003e    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eautogroup\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ecfs_bandwidth\u003c/span\u003e    \u003cspan class=\"n\"\u003ecfs_bandwidth\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef CONFIG_UCLAMP_TASK_GROUP\n\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* The two decimal precision [%] value requested from user-space */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e        \u003cspan class=\"n\"\u003euclamp_pct\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eUCLAMP_CNT\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Clamp values requested for a task group */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003euclamp_se\u003c/span\u003e    \u003cspan class=\"n\"\u003euclamp_req\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eUCLAMP_CNT\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Effective clamp values used for a task group */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003euclamp_se\u003c/span\u003e    \u003cspan class=\"n\"\u003euclamp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eUCLAMP_CNT\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"323-struct-sched_entity\"\u003e3.2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sched_entity\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003escheduling entities 通过一个红黑树组织到一起，根据 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evruntime\u003c/code\u003e 排序，通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecfs_rq\u003c/code\u003e 来管理.\u003c/p\u003e\n\n\u003cp\u003e所以 virtual runtime（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evruntime\u003c/code\u003e）就定义在这个结构体里面，单位是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ens\u003c/code\u003e，\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// https://github.com/torvalds/linux/blob/v5.10/include/linux/sched.h#L451\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esched_entity\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eload_weight\u003c/span\u003e      \u003cspan class=\"n\"\u003eload\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// For load-balancing\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erb_node\u003c/span\u003e          \u003cspan class=\"n\"\u003erun_node\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003elist_head\u003c/span\u003e        \u003cspan class=\"n\"\u003egroup_node\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e            \u003cspan class=\"n\"\u003eon_rq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eu64\u003c/span\u003e                \u003cspan class=\"n\"\u003eexec_start\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu64\u003c/span\u003e                \u003cspan class=\"n\"\u003esum_exec_runtime\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu64\u003c/span\u003e                \u003cspan class=\"n\"\u003evruntime\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e              \u003cspan class=\"c1\"\u003e// unit: ns\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu64\u003c/span\u003e                \u003cspan class=\"n\"\u003eprev_sum_exec_runtime\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eu64\u003c/span\u003e                \u003cspan class=\"n\"\u003enr_migrations\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esched_statistics\u003c/span\u003e        \u003cspan class=\"n\"\u003estatistics\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef CONFIG_FAIR_GROUP_SCHED\n\u003c/span\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e                   \u003cspan class=\"n\"\u003edepth\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esched_entity\u003c/span\u003e  \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ecfs_rq\u003c/span\u003e        \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecfs_rq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// rq on which this entity is (to be) queued\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ecfs_rq\u003c/span\u003e        \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emy_q\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// rq \u0026#34;owned\u0026#34; by this entity/group\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e         \u003cspan class=\"n\"\u003erunnable_weight\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* cached value of my_q-\u0026gt;h_nr_running */\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Per entity load average tracking.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Put into separate cache line so it does not collide with read-mostly values above.\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esched_avg\u003c/span\u003e        \u003cspan class=\"n\"\u003eavg\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e有了这个字段，就能精确地通过时间戳来保证一个任务应该获得的 “expected CPU time”。\u003c/p\u003e\n\n\u003cp\u003e前面已经提到，CFS 就是基于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ep-\u0026gt;se.vruntime\u003c/code\u003e 来选择（调度）进程的，逻辑非常简单：\n\u003cstrong\u003e\u003cmark\u003e永远选择 \u003ccode\u003ep-\u0026gt;se.vruntime\u003c/code\u003e 最小\u003c/mark\u003e\u003c/strong\u003e（说明这个进程到目前为止累积执行的时间最少）\u003cstrong\u003e\u003cmark\u003e的进程来运行\u003c/mark\u003e\u003c/strong\u003e。\nCFS 会不断尝试均衡各进程的 CPU 时间，尽量接近“理想多任务 CPU”。\u003c/p\u003e\n\n\u003ch3 id=\"324-struct-cfs_rq\"\u003e3.2.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct cfs_rq\u003c/code\u003e\u003c/h3\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// https://github.com/torvalds/linux/blob/v5.10/kernel/sched/sched.h#L518\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* CFS-related fields in a runqueue (rq) */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ecfs_rq\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eload_weight\u003c/span\u003e    \u003cspan class=\"n\"\u003eload\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e        \u003cspan class=\"n\"\u003enr_running\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e        \u003cspan class=\"n\"\u003eh_nr_running\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"cm\"\u003e/* SCHED_{NORMAL,BATCH,IDLE} */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e        \u003cspan class=\"n\"\u003eidle_h_nr_running\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* SCHED_IDLE */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eu64\u003c/span\u003e            \u003cspan class=\"n\"\u003eexec_clock\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu64\u003c/span\u003e            \u003cspan class=\"n\"\u003emin_vruntime\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu64\u003c/span\u003e            \u003cspan class=\"n\"\u003emin_vruntime_copy\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erb_root_cached\u003c/span\u003e    \u003cspan class=\"n\"\u003etasks_timeline\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// rbtree\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/*\n     * \u0026#39;curr\u0026#39; points to currently running entity on this cfs_rq.\n     * It is set to NULL otherwise (i.e when none are currently running).\n     */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esched_entity\u003c/span\u003e    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esched_entity\u003c/span\u003e    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esched_entity\u003c/span\u003e    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esched_entity\u003c/span\u003e    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskip\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/*\n     * CFS load tracking\n     */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esched_avg\u003c/span\u003e    \u003cspan class=\"n\"\u003eavg\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifndef CONFIG_64BIT\n\u003c/span\u003e    \u003cspan class=\"n\"\u003eu64\u003c/span\u003e            \u003cspan class=\"n\"\u003eload_last_update_time_copy\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eraw_spinlock_t\u003c/span\u003e    \u003cspan class=\"n\"\u003elock\u003c/span\u003e \u003cspan class=\"n\"\u003e____cacheline_aligned\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e        \u003cspan class=\"n\"\u003enr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e    \u003cspan class=\"n\"\u003eload_avg\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e    \u003cspan class=\"n\"\u003eutil_avg\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e    \u003cspan class=\"n\"\u003erunnable_avg\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"n\"\u003eremoved\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef CONFIG_FAIR_GROUP_SCHED\n\u003c/span\u003e    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e        \u003cspan class=\"n\"\u003etg_load_avg_contrib\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003elong\u003c/span\u003e            \u003cspan class=\"n\"\u003epropagate\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003elong\u003c/span\u003e            \u003cspan class=\"n\"\u003eprop_runnable_sum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/*\n     *   h_load = weight * f(tg)\n     *\n     * Where f(tg) is the recursive weight fraction assigned to\n     * this group.\n     */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e        \u003cspan class=\"n\"\u003eh_load\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu64\u003c/span\u003e            \u003cspan class=\"n\"\u003elast_h_load_update\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esched_entity\u003c/span\u003e    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eh_load_next\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* CONFIG_FAIR_GROUP_SCHED */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef CONFIG_FAIR_GROUP_SCHED\n\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//  the main per-CPU runqueue structure, which cfs_rq would attached to\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e        \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* CPU runqueue to which this cfs_rq is attached */\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/*\n     * leaf cfs_rqs are those that hold tasks (lowest schedulable entity in\n     * a hierarchy). Non-leaf lrqs hold other higher schedulable entities\n     * (like users, containers etc.)\n     *\n     * leaf_cfs_rq_list ties together list of leaf cfs_rq\u0026#39;s in a CPU.\n     * This list is used during load balance.\n     */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e            \u003cspan class=\"n\"\u003eon_list\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003elist_head\u003c/span\u003e    \u003cspan class=\"n\"\u003eleaf_cfs_rq_list\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_group\u003c/span\u003e    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etg\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* group that \u0026#34;owns\u0026#34; this runqueue */\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef CONFIG_CFS_BANDWIDTH\n\u003c/span\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e            \u003cspan class=\"n\"\u003eruntime_enabled\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003es64\u003c/span\u003e            \u003cspan class=\"n\"\u003eruntime_remaining\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eu64\u003c/span\u003e            \u003cspan class=\"n\"\u003ethrottled_clock\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu64\u003c/span\u003e            \u003cspan class=\"n\"\u003ethrottled_clock_task\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu64\u003c/span\u003e            \u003cspan class=\"n\"\u003ethrottled_clock_task_time\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e            \u003cspan class=\"n\"\u003ethrottled\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e            \u003cspan class=\"n\"\u003ethrottle_count\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003elist_head\u003c/span\u003e    \u003cspan class=\"n\"\u003ethrottled_list\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* CONFIG_CFS_BANDWIDTH */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#endif \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* CONFIG_FAIR_GROUP_SCHED */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中的 CFS 红黑树：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/linux/rbtree.h\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Leftmost-cached rbtrees.\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erb_root_cached\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erb_root\u003c/span\u003e  \u003cspan class=\"n\"\u003erb_root\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erb_node\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erb_leftmost\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在 cfs_rq 中声明了这个 rbtree 变量：\u003c/p\u003e\n\n\u003cp\u003eCFS 维护了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erq-\u0026gt;cfs.min_vruntime\u003c/code\u003e 值，这是一个单调递增值，跟踪 runqueue\n所有进程中最小的 vruntime。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e系统完成的总 work 量用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emin_vruntime\u003c/code\u003e 表示，新激活的进程，会用这个值来初始化，放到 rbtree 尽量最左边；\u003c/li\u003e\n  \u003cli\u003erunqueue 中的总 running 进程数量用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erq-\u0026gt;cfs.load\u003c/code\u003e 表示，是 runqueue 中所有进程的 weights 总和；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e总结一下 CFS 的工作原理：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eruns a task a bit, 当进程被调度（或 scheduler tick 到来时），更新这个进程的 CPU usage：\n这个进程使用的物理 CPU 时间会累加到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ep-\u0026gt;se.vruntime\u003c/code\u003e；\u003c/li\u003e\n  \u003cli\u003e当 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ep-\u0026gt;se.vruntime\u003c/code\u003e （加上一个很小的”granularity” distance，以避免过度调度进程，trash the cache）大到已经不是最左侧节点时，\n新的最左侧节点就会被选中，当前进程被强占（current task is preempted）。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"325-struct-sched_class\"\u003e3.2.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sched_class\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eScheduling class 是通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sched_class\u003c/code\u003e 实现的，\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// kernel/sched/sched.h\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esched_class\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003euclamp_enabled\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eenqueue_task\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edequeue_task\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eyield_task\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e   \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eyield_to_task\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003echeck_preempt_curr\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epick_next_task\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eput_prev_task\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eset_next_task\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ebalance\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq_flags\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erf\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e  \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eselect_task_rq\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etask_cpu\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003esd_flag\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emigrate_task_rq\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003enew_cpu\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etask_woken\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ethis_rq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etask\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eset_cpus_allowed\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ecpumask\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enewmask\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erq_online\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erq_offline\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etask_tick\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003equeued\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etask_fork\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etask_dead\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/*\n     * The switched_from() call is allowed to drop rq-\u0026gt;lock, therefore we\n     * cannot assume the switched_from/switched_to pair is serliazed by\n     * rq-\u0026gt;lock. They are however serialized by p-\u0026gt;pi_lock.\n     */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eswitched_from\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ethis_rq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etask\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eswitched_to\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ethis_rq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etask\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eprio_changed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ethis_rq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etask\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eoldprio\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eget_rr_interval\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etask\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eupdate_curr\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#define TASK_SET_GROUP        0\n#define TASK_MOVE_GROUP        1\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef CONFIG_FAIR_GROUP_SCHED\n\u003c/span\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etask_change_group\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"n\"\u003e__aligned\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRUCT_ALIGNMENT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* STRUCT_ALIGN(), vmlinux.lds.h */\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e初始化：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// kernel/sched/fair.c\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/*\n * All the scheduling class methods:\n */\u003c/span\u003e\n\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esched_class\u003c/span\u003e \u003cspan class=\"n\"\u003efair_sched_class\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;__fair_sched_class\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eenqueue_task\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eenqueue_task_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edequeue_task\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edequeue_task_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eyield_task\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eyield_task_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eyield_to_task\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eyield_to_task_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003echeck_preempt_curr\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echeck_preempt_wakeup\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epick_next_task\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__pick_next_task_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eput_prev_task\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eput_prev_task_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eset_next_task\u003c/span\u003e          \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eset_next_task_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef CONFIG_SMP\n\u003c/span\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebalance\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebalance_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eselect_task_rq\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eselect_task_rq_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emigrate_task_rq\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emigrate_task_rq_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erq_online\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erq_online_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erq_offline\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erq_offline_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etask_dead\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etask_dead_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eset_cpus_allowed\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eset_cpus_allowed_common\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etask_tick\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etask_tick_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etask_fork\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etask_fork_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprio_changed\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprio_changed_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eswitched_from\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eswitched_from_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eswitched_to\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eswitched_to_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget_rr_interval\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eget_rr_interval_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eupdate_curr\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eupdate_curr_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef CONFIG_FAIR_GROUP_SCHED\n\u003c/span\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etask_change_group\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etask_change_group_fair\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef CONFIG_UCLAMP_TASK\n\u003c/span\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euclamp_enabled\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"33-cfs-cpu-带宽控制实现\"\u003e3.3 CFS CPU 带宽控制实现\u003c/h2\u003e\n\n\u003cp\u003e内核文档：\u003ca href=\"https://docs.kernel.org/scheduler/sched-bwc.html\"\u003eCFS bandwidth control\u003c/a\u003e。\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ cat /proc/sys/kernel/sched_cfs_bandwidth_slice_us\n5000\n\n$ sysctl -a | grep cfs_\nkernel.sched_cfs_bandwidth_slice_us = 5000\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e第一版实现： https://github.com/torvalds/linux/commit/ab84d31e15502fb626169ba2663381e34bf965b2\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003esched: Introduce primitives to account for CFS bandwidth tracking\nIn this patch we introduce the notion of CFS bandwidth, partitioned into\nglobally unassigned bandwidth, and locally claimed bandwidth.\n\n - The global bandwidth is per task_group, it represents a pool of unclaimed\n   bandwidth that cfs_rqs can allocate from.\n - The local bandwidth is tracked per-cfs_rq, this represents allotments from\n   the global pool bandwidth assigned to a specific cpu.\n\nBandwidth is managed via cgroupfs, adding two new interfaces to the cpu subsystem:\n - cpu.cfs_period_us : the bandwidth period in usecs\n - cpu.cfs_quota_us : the cpu bandwidth (in usecs) that this tg will be allowed\n   to consume over period above.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003ecpu.cfs_period_us: 周期（period），每个周期单独计算，周期结束之后状态（quota 等）清零；默认 100ms\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003ecpu.cfs_quota_us: 在一个周期里的份额（quota），默认 5ms。\u003c/p\u003e\n\n    \u003cp\u003e最大 1s，最小 1ms：\u003c/p\u003e\n\n    \u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e  \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eu64\u003c/span\u003e \u003cspan class=\"n\"\u003emax_cfs_quota_period\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eNSEC_PER_SEC\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* 1s */\u003c/span\u003e\n  \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eu64\u003c/span\u003e \u003cspan class=\"n\"\u003emin_cfs_quota_period\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eNSEC_PER_MSEC\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* 1ms */\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e    \u003c/div\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003etg_set_cfs_bandwidth\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etask_group\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eu64\u003c/span\u003e \u003cspan class=\"n\"\u003eperiod\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eu64\u003c/span\u003e \u003cspan class=\"n\"\u003equota\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ecfs_bandwidth\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecfs_b\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etg_cfs_bandwidth\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etg\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eDEFINE_MUTEX\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etg\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eroot_task_group\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEINVAL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/*\n     * Ensure we have at some amount of bandwidth every period.  This is\n     * to prevent reaching a state of large arrears when throttled via\n     * entity_tick() resulting in prolonged exit starvation.\n     */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003equota\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003emin_cfs_quota_period\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eperiod\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003emin_cfs_quota_period\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEINVAL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/*\n     * Likewise, bound things on the otherside by preventing insane quota\n     * periods.  This also allows us to normalize in computing quota\n     * feasibility.\n     */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eperiod\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emax_cfs_quota_period\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEINVAL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003emutex_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eraw_spin_lock_irq\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ecfs_b\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecfs_b\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eperiod\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ens_to_ktime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eperiod\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecfs_b\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003equota\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003equota\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eraw_spin_unlock_irq\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ecfs_b\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efor_each_possible_cpu\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ecfs_rq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecfs_rq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecfs_rq\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erq_of\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecfs_rq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eraw_spin_lock_irq\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003erq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecfs_rq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eruntime_enabled\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003equota\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eRUNTIME_INF\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecfs_rq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eruntime_remaining\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eraw_spin_unlock_irq\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003erq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003emutex_unlock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"4-使用\"\u003e4 使用\u003c/h1\u003e\n\n\u003ch2 id=\"41-模拟-throttle-场景\"\u003e4.1 模拟 throttle 场景\u003c/h2\u003e\n\n\u003cp\u003e用 \u003ca href=\"https://gist.github.com/bobrik/2030ff040fad360327a5fab7a09c4ff1#file-cfs-go\"\u003eOverly aggressive CFS\u003c/a\u003e\n中的程序测试 CFS CPU throttle：\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003epackage\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\u0026#34;crypto/sha512\u0026#34;\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\u0026#34;flag\u0026#34;\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\u0026#34;syscall\u0026#34;\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003esleep\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003eflag\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;sleep\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;sleep between iterations\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003einterations\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003eflag\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;iterations\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;number of iterations\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eflag\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eParse\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n\t\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\t\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003einterations\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003eburn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMillisecond\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSub\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\t\t\u003cspan class=\"n\"\u003elog\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;[%3d] burn took %3dms, real time so far: %3dms, cpu time so far: %3dms\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ems\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003ems\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSince\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)),\u003c/span\u003e \u003cspan class=\"n\"\u003ems\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eusage\u003c/span\u003e\u003cspan class=\"p\"\u003e()))\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esleep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003ems\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eduration\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eduration\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNanoseconds\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"m\"\u003e1000\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"m\"\u003e1000\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003eburn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eduration\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003esha512\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNew\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWrite\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;banana\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSum\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"p\"\u003e{})\u003c/span\u003e\n\n\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSince\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eduration\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\t\u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\n\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003eusage\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003esyscall\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRusage\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003esyscall\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetrusage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esyscall\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRUSAGE_SELF\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNano\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUtime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNano\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e程序每个 iteration 会执行 5ms，然后 sleep 一段时间。\u003c/p\u003e\n\n\u003cp\u003e用 docker container 来执行，避免污染本机配置。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003e不限带宽\u003c/mark\u003e\u003c/strong\u003e情况下，不会产生 throttle：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edk run \u003cspan class=\"nt\"\u003e--rm\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e:\u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e golang:1.19.4 go run cfs.go \u003cspan class=\"nt\"\u003e-iterations\u003c/span\u003e 20 \u003cspan class=\"nt\"\u003e-sleep\u003c/span\u003e 10ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e 0] burn took 5ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:   5ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 7ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e 1] burn took 5ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:  20ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 12ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e 2] burn took 5ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:  37ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 17ms\n\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e18] burn took 5ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 338ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 102ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e19] burn took 5ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 355ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 108ms\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperiod=100ms,quota=50m,sleep=10ms\u003c/code\u003e 情况下，不会产生 throttle：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edk run \u003cspan class=\"nt\"\u003e--rm\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e \u003cspan class=\"nt\"\u003e--cpu-quota\u003c/span\u003e 50000 \u003cspan class=\"nt\"\u003e--cpu-period\u003c/span\u003e 100000 \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e:\u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e golang:1.19.4 go run cfs.go \u003cspan class=\"nt\"\u003e-iterations\u003c/span\u003e 20 \u003cspan class=\"nt\"\u003e-sleep\u003c/span\u003e 10ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  0] burn took   5 ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:   5 ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:   7 ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  1] burn took   5 ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:  22 ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:  12 ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  2] burn took   5 ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:  38 ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:  18 ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  3] burn took   5 ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:  54 ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:  23 ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  4] burn took   5 ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:  71 ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:  28 ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e  5] burn took   5 ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:  86 ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:  34 ms\n...\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e 18] burn took   5 ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 315 ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 104 ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e 19] burn took   5 ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 332 ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 109 ms\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperiod=100ms,quota=25m,sleep=10ms\u003c/code\u003e 情况下，\u003cstrong\u003e\u003cmark\u003e会产生 throttle\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edk run \u003cspan class=\"nt\"\u003e--rm\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e \u003cspan class=\"nt\"\u003e--cpu-quota\u003c/span\u003e 25000 \u003cspan class=\"nt\"\u003e--cpu-period\u003c/span\u003e 100000 \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e:\u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e golang:1.19.4 go run cfs.go \u003cspan class=\"nt\"\u003e-iterations\u003c/span\u003e 20 \u003cspan class=\"nt\"\u003e-sleep\u003c/span\u003e 10ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e0] burn took  5ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:   5ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:  6ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e1] burn took 11ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:  35ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 19ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e2] burn took  5ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:  51ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 24ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e3] burn took 20ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far:  83ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 28ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e4] burn took  5ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 100ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 33ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e5] burn took  5ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 115ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 38ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e6] burn took  5ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 131ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 43ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e7] burn took  5ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 147ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 49ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e8] burn took 24ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 182ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 51ms\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e9] burn took  5ms, real \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 197ms, cpu \u003cspan class=\"nb\"\u003etime \u003c/span\u003eso far: 56ms\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个 throttle 时间怎么算出来的，见 [6] 的解释。\u003c/p\u003e\n\n\u003ch2 id=\"42-k8s-相关问题\"\u003e4.2 k8s 相关问题\u003c/h2\u003e\n\n\u003cp\u003e研究这些东西是为了更好理解一些容器问题。\n先罗列一下，后面有空再更新。\u003c/p\u003e\n\n\u003ch3 id=\"pod-cpu-throttle\"\u003ePod cpu throttle\u003c/h3\u003e\n\n\u003cp\u003e一个容器虽然申请了 4 个核，但可能有 64个线程，在调度到这个容器时，64 个线程可能会占满所有物理 CPU，\n时间片用完之后，到下一次调度它还有很长时间。这段时间就是 throttle。\u003c/p\u003e\n\n\u003cp\u003e本质原因：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e容器 spec 声明的是 CPU 数量\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e内核调度用的 CPU 时间\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e二者是不统一的。更深入分析见 twitter 专家的一篇文章\n\u003ca href=\"https://danluu.com/cgroup-throttling/\"\u003eThe container throttling problem\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"k8s-pod-使用-cpuset-的条件\"\u003ek8s pod 使用 cpuset 的条件\u003c/h3\u003e\n\n\u003cp\u003e根据 \u003ca href=\"https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/\"\u003ek8s 官方文档\u003c/a\u003e，\n以下三个条件必须同时具备：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003ekubelet 启用 static 策略\u003c/p\u003e\n\n    \u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003egrep \u003c/span\u003ecpuManagerPolicy /etc/kubernetes/config \u003cspan class=\"c\"\u003e# kubelet config\u003c/span\u003e\n cpuManagerPolicy: static\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e    \u003c/div\u003e\n  \u003c/li\u003e\n  \u003cli\u003epod request == limit: Guaranteed pod\u003c/li\u003e\n  \u003cli\u003epod request == limit = integer\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"生产例子\"\u003e生产例子\u003c/h3\u003e\n\n\u003cp\u003e业务报障，问为什么半夜 2 点容器会有 load 飙升，\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/linux-cfs-design-and-implementation/load-spike.png\" width=\"85%\" height=\"85%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e同时间段网络也是飙升，但网络可能是结果，也可能是原因，\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/linux-cfs-design-and-implementation/net-spike.png\" width=\"85%\" height=\"85%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e以上两个层面都判断不出问题。如果结合业务（java 应用）的 java 监控和 k8s 容器监控，问题就明显一些了：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/linux-cfs-design-and-implementation/java-spike.png\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e左下图：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e01:58\u003c/code\u003e 开始，业务\u003cstrong\u003e\u003cmark\u003e线程\u003c/mark\u003e\u003c/strong\u003e数量开始上升；\u003c/li\u003e\n  \u003cli\u003e左上图：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e01:59\u003c/code\u003e 开始，业务容器开始 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eJIT\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e（猜测是新线程的代码首次运行之类的）；\u003c/li\u003e\n  \u003cli\u003e右上下图：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e02:01\u003c/code\u003e 开始，业务容器开始 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ethrotte\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e（总 CPU 时间不变，平均到每个线程的时间片少了，调度周期内的等待时间更长）。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e说明是先有业务活动，才有后面的一系列波动。最后业务查到是他们自己有定时任务。\u003c/p\u003e\n\n\u003ch1 id=\"参考资料\"\u003e参考资料\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003eCFS 第一版实现， \u003ca href=\"https://github.com/torvalds/linux/blob/v2.6.23/kernel/sched_fair.c\"\u003ekernel/sched_fair.c\u003c/a\u003e，kernel v2.6.23, 2007\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/torvalds/linux/blob/v5.10/Documentation/scheduler/sched-design-CFS.rst\"\u003eCFS scheduler design (kernel 5.10)\u003c/a\u003e, kernel doc, 2023\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://lwn.net/Articles/844976/\"\u003eThe burstable CFS bandwidth controller\u003c/a\u003e, lwn.net, 2021\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://lwn.net/Articles/428230/\"\u003eCFS bandwidth control\u003c/a\u003e, lwn.net, 2011\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://storage.googleapis.com/pub-tools-public-publication-data/pdf/36669.pdf\"\u003eCPU bandwidth control for CFS\u003c/a\u003e, google, 2009\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://medium.com/@maxwell9215/cfs-bandwidth-control-warmup-b03af4cc1cc4\"\u003eCPU bandwidth control warmup\u003c/a\u003e, 2021\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://gist.github.com/bobrik/2030ff040fad360327a5fab7a09c4ff1#file-cfs-go\"\u003eOverly aggressive CFS\u003c/a\u003e, 2018\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://medium.com/geekculture/process-scheduling-in-linux-592028a5d545\"\u003eProcess Scheduling In Linux\u003c/a\u003e, 2021\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/k8s-cgroup-zh/\"\u003e\u003cspan\u003e« k8s 基于 cgroup 的资源限额（capacity enforcement）：模型设计与代码实现（2023）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/borg-omega-k8s-zh/\"\u003e\u003cspan\u003e[译] Borg、Omega、K8s：Google 十年三代容器管理系统的设计与思考（ACM, 2016） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2023-02-05T00:00:00Z",
  "Author": "Arthur Chiao"
}