{
  "Source": "arthurchiao.art",
  "Title": "[译] Cilium 未来数据平面：支撑 100Gbit/s k8s 集群（KubeCon, 2022）",
  "Link": "https://arthurchiao.art/blog/cilium-tomorrow-networking-data-plane-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003e[译] Cilium 未来数据平面：支撑 100Gbit/s k8s 集群（KubeCon, 2022）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2022-11-12 | Last Update 2022-11-12\u003c/p\u003e\n  \n  \u003ch3 id=\"译者序\"\u003e译者序\u003c/h3\u003e\n\n\u003cp\u003e本文翻译自 KubeCon+CloudNativeCon North America 2022 的一篇分享：\n\u003ca href=\"https://kccncna2022.sched.com/event/182DB\"\u003e100 Gbit/s Clusters with Cilium: Building Tomorrow’s Networking Data Plane\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e作者 Daniel Borkmann, Nikolay Aleksandrov, Nico Vibert 都来自 Isovalent（Cilium 母公司）。\n翻译时补充了一些背景知识、代码片段和链接，以方便理解。\u003c/p\u003e\n\n\u003cp\u003e翻译已获得 Daniel 授权。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e由于译者水平有限，本文不免存在遗漏或错误之处。如有疑问，请查阅原文。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e以下是译文。\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#译者序\" id=\"markdown-toc-译者序\"\u003e译者序\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#摘要\" id=\"markdown-toc-摘要\"\u003e摘要\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-大型数据中心网络面临的挑战\" id=\"markdown-toc-1-大型数据中心网络面临的挑战\"\u003e1 大型数据中心网络面临的挑战\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-cilium-首次亮相2016\" id=\"markdown-toc-11-cilium-首次亮相2016\"\u003e1.1 Cilium 首次亮相（2016）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-容器领域k8sdockeripv6-支持状态\" id=\"markdown-toc-12-容器领域k8sdockeripv6-支持状态\"\u003e1.2 容器领域（k8s/docker）IPv6 支持状态\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#2016-年\" id=\"markdown-toc-2016-年\"\u003e2016 年\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#2022-年\" id=\"markdown-toc-2022-年\"\u003e2022 年\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-用户需求\" id=\"markdown-toc-13-用户需求\"\u003e1.3 用户需求\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#14-解决方案\" id=\"markdown-toc-14-解决方案\"\u003e1.4 解决方案\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#15-互联网服务-ipv6-部署现状\" id=\"markdown-toc-15-互联网服务-ipv6-部署现状\"\u003e1.5 互联网服务 IPv6 部署现状\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-cilium--ipv6-only-k8s-集群\" id=\"markdown-toc-2-cilium--ipv6-only-k8s-集群\"\u003e2 Cilium + \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIPv6-only\u003c/code\u003e K8s 集群\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-与传统-ipv4-网络服务对接nat4664\" id=\"markdown-toc-21-与传统-ipv4-网络服务对接nat4664\"\u003e2.1 与传统 IPv4 网络/服务对接：NAT46/64\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-内核对-nat4664-的支持48\" id=\"markdown-toc-22-内核对-nat4664-的支持48\"\u003e2.2 内核对 NAT46/64 的支持（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4.8+\u003c/code\u003e）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-cilium-对-nat4664-的支持v112\" id=\"markdown-toc-23-cilium-对-nat4664-的支持v112\"\u003e2.3 Cilium 对 NAT46/64 的支持（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ev1.12+\u003c/code\u003e）\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#231-工作原理\" id=\"markdown-toc-231-工作原理\"\u003e2.3.1 工作原理\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#232-功能支持\" id=\"markdown-toc-232-功能支持\"\u003e2.3.2 功能支持\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#233-工作机制详解集群入向ipv4---ipv6-only\" id=\"markdown-toc-233-工作机制详解集群入向ipv4---ipv6-only\"\u003e2.3.3 工作机制详解：集群入向（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIPv4 -\u0026gt; IPv6-only\u003c/code\u003e）\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#方式一有状态-nat46-网关\" id=\"markdown-toc-方式一有状态-nat46-网关\"\u003e方式一：有状态 NAT46 网关\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#方式二无状态-nat46-网关\" id=\"markdown-toc-方式二无状态-nat46-网关\"\u003e方式二：无状态 NAT46 网关\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#233-工作机制详解集群出向ipv6-only---ipv4\" id=\"markdown-toc-233-工作机制详解集群出向ipv6-only---ipv4\"\u003e2.3.3 工作机制详解：集群出向（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIPv6-only -\u0026gt; IPv4\u003c/code\u003e）\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-demo-cilium-nat4664-gw略\" id=\"markdown-toc-24-demo-cilium-nat4664-gw略\"\u003e2.4 Demo: Cilium NAT46/64 GW（略）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#25-小结\" id=\"markdown-toc-25-小结\"\u003e2.5 小结\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-cilium--big-tcp\" id=\"markdown-toc-3-cilium--big-tcp\"\u003e3 Cilium + BIG TCP\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-big-tcp\" id=\"markdown-toc-31-big-tcp\"\u003e3.1 BIG TCP\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#311-设计目标\" id=\"markdown-toc-311-设计目标\"\u003e3.1.1 设计目标\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#312-使用场景\" id=\"markdown-toc-312-使用场景\"\u003e3.1.2 使用场景\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#313-技术原理\" id=\"markdown-toc-313-技术原理\"\u003e3.1.3 技术原理\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#ipv4-限制单个包最大-64kb\" id=\"markdown-toc-ipv4-限制单个包最大-64kb\"\u003eIPv4 限制：单个包最大 64KB\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#解决方式ipv6-hbh-hop-by-hop单个包最大-4gb\" id=\"markdown-toc-解决方式ipv6-hbh-hop-by-hop单个包最大-4gb\"\u003e解决方式：IPv6 HBH (Hop-By-Hop)，单个包最大 4GB\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-内核支持519\" id=\"markdown-toc-32-内核支持519\"\u003e3.2 内核支持（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5.19+\u003c/code\u003e）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-cilium-支持v113\" id=\"markdown-toc-33-cilium-支持v113\"\u003e3.3 Cilium 支持（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ev1.13+\u003c/code\u003e）\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#性能\" id=\"markdown-toc-性能\"\u003e性能\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-小结\" id=\"markdown-toc-34-小结\"\u003e3.4 小结\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-cilium-未来数据平面\" id=\"markdown-toc-4-cilium-未来数据平面\"\u003e4 Cilium 未来数据平面\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-cilium-作为独立网关节点standalone-gw\" id=\"markdown-toc-41-cilium-作为独立网关节点standalone-gw\"\u003e4.1 Cilium 作为独立网关节点（standalone GW）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-cilium-作为-k8s-网络方案\" id=\"markdown-toc-42-cilium-作为-k8s-网络方案\"\u003e4.2 Cilium 作为 k8s 网络方案\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#43-meta-device-vs-veth-pair\" id=\"markdown-toc-43-meta-device-vs-veth-pair\"\u003e4.3 meta device vs. veth pair\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#431-复习veth-pair-defaultbpf-host-routing-模式转发路径\" id=\"markdown-toc-431-复习veth-pair-defaultbpf-host-routing-模式转发路径\"\u003e4.3.1 复习：veth pair default/bpf-host-routing 模式转发路径\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#432-meta-device-转发路径\" id=\"markdown-toc-432-meta-device-转发路径\"\u003e4.3.2 meta device 转发路径\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#433-meta-device-好处延迟更低\" id=\"markdown-toc-433-meta-device-好处延迟更低\"\u003e4.3.3 meta device 好处：延迟更低\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#434-meta-device-vs-veth-pair实现区别\" id=\"markdown-toc-434-meta-device-vs-veth-pair实现区别\"\u003e4.3.4 meta device vs. veth pair：实现区别\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#435-meta-device-性能\" id=\"markdown-toc-435-meta-device-性能\"\u003e4.3.5 meta device 性能\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-未来已来\" id=\"markdown-toc-5-未来已来\"\u003e5 未来已来\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#51-数据平面核心模块\" id=\"markdown-toc-51-数据平面核心模块\"\u003e5.1 数据平面核心模块\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#52-学习与进阶路线\" id=\"markdown-toc-52-学习与进阶路线\"\u003e5.2 学习与进阶路线\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#致谢\" id=\"markdown-toc-致谢\"\u003e致谢\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"摘要\"\u003e摘要\u003c/h1\u003e\n\n\u003cp\u003e今天的大部分 K8s 用户使用的还是\u003cstrong\u003e\u003cmark\u003e纯 IPv4 网络\u003c/mark\u003e\u003c/strong\u003e（IPv4-only），或称 \u003cstrong\u003e\u003cmark\u003eIPv4 单栈网络\u003c/mark\u003e\u003c/strong\u003e；\n也有一些用户正在从 IPv4 单栈迁移到 \u003cstrong\u003e\u003cmark\u003eIPv4/IPv6 双栈\u003c/mark\u003e\u003c/strong\u003e上，\n最终目标是实现 IPv6 单栈网络，或称\u003cstrong\u003e\u003cmark\u003e纯 IPv6 网络\u003c/mark\u003e\u003c/strong\u003e（IPv6-only）。\n纯 IPv6 网络的 k8s 集群不仅 IPAM 更加灵活，集群规模更大，而且可以解锁很多新的网络和\neBPF 特性，能更好地满足\u003cstrong\u003e\u003cmark\u003e数据密集型应用\u003c/mark\u003e\u003c/strong\u003e的需求。\u003c/p\u003e\n\n\u003cp\u003e本文将展示纯 IPv6 k8s 集群的优势以其面临的问题，以及 Cilium 的数据平面是如何解决这些问题的。内容包括：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eCilium + \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eIPv6 + BIG TCP\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 支持 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e100Gbps/socket\u003c/code\u003e；提升吞吐的同时还能降低延迟；\u003c/li\u003e\n  \u003cli\u003eCilium 新开发的虚拟网络设备 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003emeta device\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，替代 veth pair 取得更极致的网络性能；\u003c/li\u003e\n  \u003cli\u003eCilium 的 eBPF 转发架构如何\u003cstrong\u003e\u003cmark\u003e通过可编程的方式绕过\u003c/mark\u003e\u003c/strong\u003e（bypass）大部分无关的内核网络栈\n  （仍然基于内核网络栈，只是绕过无关部分，与 DPDK 等完全绕过内核的方式存在本质区别），显著提升网络性能。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"1-大型数据中心网络面临的挑战\"\u003e1 大型数据中心网络面临的挑战\u003c/h1\u003e\n\n\u003cp\u003e当前大型数据中心面临三个方面的问题：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e规模（scale）\u003c/li\u003e\n  \u003cli\u003e性能（performance）\u003c/li\u003e\n  \u003cli\u003e运营（operations）及日常维护\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e其中一个重要原因是它们都构建在 IPv4 基础之上，后者已经发挥到极限了。\n那么，换成 IPv6 能解决问题吗？答案是能，而且能同时解决规模和性能需求。\n要解释这一点，我们需要回顾一下并不久远的“历史”。\u003c/p\u003e\n\n\u003ch2 id=\"11-cilium-首次亮相2016\"\u003e1.1 Cilium 首次亮相（2016）\u003c/h2\u003e\n\n\u003cp\u003eCilium 是作为一个\u003cstrong\u003e\u003cmark\u003e纯 IPv6 容器网络\u003c/mark\u003e\u003c/strong\u003e实验项目（”The Cilium Experiment”）启动的，\n下面这张截图就是我们在 2016 年 LinuxCon 的分享，\n\u003ca href=\"https://www.slideshare.net/ThomasGraf5/cilium-fast-ipv6-container-networking-with-bpf-and-xdp\"\u003eCilium: Fast IPv6 Container Networking with BPF and XDP\u003c/a\u003e，\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e几个开发者来自 RedHat 的内核和 OVS 相关开发团队。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/cilium-linuxcon-2016.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e由于构建在 IPv6-only 之上，因此 Cilium 自带了很多 IPv6 相比 IPv4 的优势，\n例如扩展更好、更灵活、地址空间充裕，无需 NAT 等等；\u003c/p\u003e\n\n    \u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/ipv6-only-all-the-things.png\" width=\"40%\" height=\"40%\"/\u003e\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e更重要的是，为了取得最高效率，Cilium 将 \u003cstrong\u003e\u003cmark\u003edatapath 构建在 eBPF 之上\u003c/mark\u003e\u003c/strong\u003e，\n这与之前的网络模型完全不同。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e但与大多数过于前卫的项目一样，\u003cstrong\u003e\u003cmark\u003e纯 IPv6 的前提条件很快被现实打脸\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"12-容器领域k8sdockeripv6-支持状态\"\u003e1.2 容器领域（k8s/docker）IPv6 支持状态\u003c/h2\u003e\n\n\u003ch3 id=\"2016-年\"\u003e2016 年\u003c/h3\u003e\n\n\u003cp\u003e先来看一下当时（2016）年容器领域的 IPv6 生态：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003eK8s (CNI)：基本功能有了\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e1.3.6+ 支持了 IPv6-only pod\u003c/li\u003e\n      \u003cli\u003ekube-proxy (services) 不支持 IPv6\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eDocker (libnetwork)：还在实现的路上\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003ePR826 - “Make IPv6 Great Again”，还没合并\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e因此，面对众多实际需求，我们不得不\u003cstrong\u003e\u003cmark\u003e为 Cilium 添加 IPv4 的支持\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"2022-年\"\u003e2022 年\u003c/h3\u003e\n\n\u003cp\u003e现在再来看看 6 年之后的今天（2022），容器领域的 IPv6 支持进展：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003eK8s 官方\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eIPv6 Single (GA v1.18)\u003c/li\u003e\n      \u003cli\u003eIPv4/IPv6 Dual Stack (\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eGA v1.23\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e)\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e一些重要的基础服务开始支持 IPv6，但主要还是 IPv4/IPv6 双栈方式，而不是 IPv6-only 方式；\u003c/li\u003e\n  \u003cli\u003e托管 K8s 集群（AKS、EKS、GKE）开始提供 IPv6 支持，但具体支持到什么程度因厂商而异。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"13-用户需求\"\u003e1.3 用户需求\u003c/h2\u003e\n\n\u003cp\u003e用户的实际需求其实比较明确：通过 IPv6 单栈获得更大的 \u003cstrong\u003e\u003cmark\u003eIPAM 灵活性\u003c/mark\u003e\u003c/strong\u003e，\n以及更多的 headroom 来做一些以前（IPv4）做不到的事情。\u003c/p\u003e\n\n\u003ch2 id=\"14-解决方案\"\u003e1.4 解决方案\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003e从 IPv4-only 直接切换到  IPv6-only 比较困难，需要 IPv4/IPv6 双栈这样一个过渡状态；\u003c/li\u003e\n  \u003cli\u003e但最终期望的还是端到端 IPv6，避免 IPv4/IPv6 双栈的复杂性。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/deploy-k8s-ipv6-only.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e实现方式：构建 \u003cstrong\u003e\u003cmark\u003eIPv6 单栈隔离岛\u003c/mark\u003e\u003c/strong\u003e，作为一个完全没用历史负担的环境（clean-slate），\n然后将存量的应用/服务迁移到这个环境中来。当然，这其中仍然有一些地方与 IPv4\n打交道，除非真空隔离或者没有任何外部依赖。\u003c/p\u003e\n\n\u003ch2 id=\"15-互联网服务-ipv6-部署现状\"\u003e1.5 互联网服务 IPv6 部署现状\u003c/h2\u003e\n\n\u003cp\u003e说到外部依赖，我们就来看下如今互联网的 IPv6 部署普及情况。根据\n\u003ca href=\"https://whynoipv6.com\"\u003ewhynoipv6.com\u003c/a\u003e 提供的数据，\n当前（2022.11） Alexa 排名前 1000 的网站中，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e只有 469 个启用了 IPv6，\u003c/li\u003e\n  \u003cli\u003e845 个启用了 IPv6 DNS；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e总共收录的 90 万个网站中，只有 34% 的有 IPv6。\u003c/p\u003e\n\n\u003cp\u003e大量的生态系统还在路上，例如，\u003ca href=\"https://github.com/community/community/discussions/10539\"\u003eGitHub 还不能通过 IPv6 clone 代码\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch1 id=\"2-cilium--ipv6-only-k8s-集群\"\u003e2 Cilium + \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIPv6-only\u003c/code\u003e K8s 集群\u003c/h1\u003e\n\n\u003cp\u003e外部依赖短期内全部支持 IPv6 不现实，但通过 4/6 转换，其实就不影响我们先把数据内的\n集群和应用 IPv6 化，享受 IPv6 带来的性能和便利性。\n下面就来看如何基于 Cilium 部署一个纯 IPv6 的 k8s 集群，并解决与外部 IPv4 服务的互联互通问题。\u003c/p\u003e\n\n\u003ch2 id=\"21-与传统-ipv4-网络服务对接nat4664\"\u003e2.1 与传统 IPv4 网络/服务对接：NAT46/64\u003c/h2\u003e\n\n\u003cp\u003eIPv6-only K8s 与传统 IPv4 服务的对接，使用的是 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eNAT46/NAT64\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，\n也就是做 IPv4/IPv6 地址的转换。\u003c/p\u003e\n\n\u003cp\u003e这个听上去可能比较简单，但要在 Linux 内核中实现其实是有挑战的，例如\n\u003cstrong\u003e\u003cmark\u003e基于 iptables/netfilter 架构就无法实现这个功能\u003c/mark\u003e\u003c/strong\u003e，\n因为内核网络栈太复杂了，牵一发而动全身；好消息是，基于 eBPF 架构能。\u003c/p\u003e\n\n\u003ch2 id=\"22-内核对-nat4664-的支持48\"\u003e2.2 内核对 NAT46/64 的支持（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4.8+\u003c/code\u003e）\u003c/h2\u003e\n\n\u003cp\u003e我们早在 2016 年就对内核 \u003cstrong\u003e\u003cmark\u003etc BPF 层添加了 NAT46/64 的支持\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/torvalds/linux/commit/d2485c4242a82\"\u003ebpf: add bpf_skb_change_type helper\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/torvalds/linux/commit/6578171a7ff0c\"\u003ebpf: add bpf_skb_change_proto helper\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e通过 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ebpf_skb_change_proto()\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 实现 4/6 转换。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eAndroid 的 \u003ca href=\"https://dan.drown.org/android/clat/\"\u003eCLAT\u003c/a\u003e\n组件也是通过这个 helper 将手机连接到 IPv6-only 蜂窝网的。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"23-cilium-对-nat4664-的支持v112\"\u003e2.3 Cilium 对 NAT46/64 的支持（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ev1.12+\u003c/code\u003e）\u003c/h2\u003e\n\n\u003ch3 id=\"231-工作原理\"\u003e2.3.1 工作原理\u003c/h3\u003e\n\n\u003cp\u003e如下图所示，几个部分：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/NAT46-NAT64-support-for-Load-Balancer.png\" width=\"85%\" height=\"85%\"/\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003ca href=\"https://isovalent.com/blog/post/cilium-release-112/#nat46-nat64\"\u003eCilium v1.12 Release Notes\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cul\u003e\n  \u003cli\u003e右边：使用 Cilium 网络的 IPv6-only K8s 集群；\u003c/li\u003e\n  \u003cli\u003e左下：集群外的 IPv4 服务；\u003c/li\u003e\n  \u003cli\u003e左上：\u003cstrong\u003e\u003cmark\u003e承担 NAT46/64 功能的 Cilium L4LB 节点\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e思路其实很简单，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e通过 Cilium L4LB 节点做 NAT46/64 转换；\u003c/p\u003e\n\n    \u003cp\u003e将 IPv4 流量路由到数据中心的边缘节点（边界），经过转换之后再进入 IPv6 网络；反向是类似的。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e具体工作在 tc BPF 或 XDP 层。\u003c/p\u003e\n\n    \u003cp\u003e通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_skb_change_proto()\u003c/code\u003e 完成 4/6 转换。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"232-功能支持\"\u003e2.3.2 功能支持\u003c/h3\u003e\n\n\u003cp\u003eCilium L4LB 现在的 NAT46/64 功能支持：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eXDP / non-XDP\u003c/li\u003e\n  \u003cli\u003eMaglev / Random\u003c/li\u003e\n  \u003cli\u003e通过 \u003cstrong\u003e\u003cmark\u003eRPC API\u003c/mark\u003e\u003c/strong\u003e 配置 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e{IPv4,6} VIP -\u0026gt; {IPv4,6} Backend\u003c/code\u003e 规则\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e例子，VIP 是 IPv4，backends 是 IPv6 pods：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium service list \nID   Frontend     Service Type   Backend                      \n1    1.2.3.4:80   ExternalIPs    1 \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003ef00d::1]:60 \u003cspan class=\"o\"\u003e(\u003c/span\u003eactive\u003cspan class=\"o\"\u003e)\u003c/span\u003e   \n                                 2 \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003ef00d::2]:70 \u003cspan class=\"o\"\u003e(\u003c/span\u003eactive\u003cspan class=\"o\"\u003e)\u003c/span\u003e   \n                                 3 \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003ef00d::3]:80 \u003cspan class=\"o\"\u003e(\u003c/span\u003eactive\u003cspan class=\"o\"\u003e)\u003c/span\u003e  \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e另一个例子，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium service list \nID   Frontend       Service Type   Backend                      \n1    \u003cspan class=\"o\"\u003e[\u003c/span\u003ecafe::1]:80   ExternalIPs    1 \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e 1.2.3.4:8080 \u003cspan class=\"o\"\u003e(\u003c/span\u003eactive\u003cspan class=\"o\"\u003e)\u003c/span\u003e   \n                                   2 \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e 4.5.6.7:8090 \u003cspan class=\"o\"\u003e(\u003c/span\u003eactive\u003cspan class=\"o\"\u003e)\u003c/span\u003e \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"233-工作机制详解集群入向ipv4---ipv6-only\"\u003e2.3.3 工作机制详解：集群入向（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIPv4 -\u0026gt; IPv6-only\u003c/code\u003e）\u003c/h3\u003e\n\n\u003cp\u003e这里有两种实现方式，Cilium 都支持，各有优缺点。\u003c/p\u003e\n\n\u003ch4 id=\"方式一有状态-nat46-网关\"\u003e方式一：有状态 NAT46 网关\u003c/h4\u003e\n\n\u003cp\u003e这种模式下，NAT46 网关是有状态的，\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/nat46-gw-1.png\" width=\"85%\" height=\"85%\"/\u003e\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e部署在边界上，是唯一的双栈组件；\u003c/li\u003e\n  \u003cli\u003e将 IPv4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVIP:port\u003c/code\u003e 映射到 IPv6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVIP:port\u003c/code\u003e（exposed to public natively）；\u003c/li\u003e\n  \u003cli\u003e只有 IPv4 流量需要经过 GW 这一跳；\u003c/li\u003e\n  \u003cli\u003eK8s 集群是干净的 IPv6-only 集群，node/pod IP 都是纯 IPv6；\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e基于 eBPF/XDP，高性能；\u003c/p\u003e\n\n    \u003cp\u003e\u003ca href=\"/blog/xdp-paper-acm-2018-zh/\"\u003eXDP (eXpress Data Path)：在操作系统内核中实现快速、可编程包处理（ACM，2018）\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e下面是通过 Service 实现的 NAT46 规则（也就是“状态”）：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/nat46-gw-2.png\" width=\"85%\" height=\"85%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e好处：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eIPv4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVIP:port\u003c/code\u003e 到 K8s 集群的 IPv6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVIP:port\u003c/code\u003e 的映射，与后者完全解耦\u003c/li\u003e\n  \u003cli\u003e从 IPAM 角度考虑，无需特殊的 LoadBalancer Service；任何 public IPv6 prefix 都能按预期工作；\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eNAT46 GW 甚至还能通过 weighted Maglev 负载均衡算法，将请求转发到多个集群上；\u003c/p\u003e\n\n    \u003cp\u003eMaglev weights 在 Cilium 1.13 \u003ca href=\"https://github.com/cilium/cilium/pull/18306\"\u003e合并\u003c/a\u003e。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e缺点：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e需要额外的控制平面来对 VIP -\u0026gt; VIP 映射通过 API 进行编程；\u003c/li\u003e\n  \u003cli\u003e客户端源 IP 信息在经过 GW 设备之后就丢失了；\u003c/li\u003e\n  \u003cli\u003eGW 是有状态的，记录了 DNAT \u0026amp; SNAT 规则和状态。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4 id=\"方式二无状态-nat46-网关\"\u003e方式二：无状态 NAT46 网关\u003c/h4\u003e\n\n\u003cp\u003e这种方式是通过 IPv6 协议原生的 IPv4/IPv6 地址映射实现的，因此无需控制平面下发 service 规则来实现 NAT46/64：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/nat46-stateless-gw-1.png\" width=\"85%\" height=\"85%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e转发规则：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/nat46-stateless-gw-2.png\" width=\"85%\" height=\"85%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e优点：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eGW 高度可扩展，因为不需要在 GW 节点上保存状态（地址转换信息）；\u003c/li\u003e\n  \u003cli\u003e源地址不丢失，只要原来的地址映射到的是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e64:ff9b::/96\u003c/code\u003e 范围，\u003ca href=\"https://www.rfc-editor.org/rfc/rfc6052#section-2.1\"\u003eRFC6052\u003c/a\u003e；\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eloadBalancerSourceRanges can restrict LB service access for external IPv4 clients。\u003c/p\u003e\n\n    \u003cp\u003e\u003ca href=\"https://kubernetes.io/docs/concepts/services-networking/_print/#aws-nlb-support\"\u003eK8s documentation on LB source ranges\u003c/a\u003e，Cilium 已经支持。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003eGW translation 是透明的，因此无需引入额外的控制平面；\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e缺点：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eK8s 集群中的 LB IPAM pool 需要使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e64:ff9b::/96\u003c/code\u003e 网段；\u003c/li\u003e\n  \u003cli\u003eLB 节点需要具体 IPv4 映射知识，能处理好正反转换。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"233-工作机制详解集群出向ipv6-only---ipv4\"\u003e2.3.3 工作机制详解：集群出向（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIPv6-only -\u0026gt; IPv4\u003c/code\u003e）\u003c/h3\u003e\n\n\u003cp\u003eDNS64 承担了关键角色。\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enslookup github.com\nServer:         127.0.0.53\nAddress:        127.0.0.53#53\n\nNon-authoritative answer:\nName:   github.com\nAddress: 20.205.243.166\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enslookup \u003cspan class=\"nt\"\u003e-query\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eAAAA github.com\nServer:         127.0.0.53\nAddress:        127.0.0.53#53\n\nNon-authoritative answer:\n\u003cspan class=\"k\"\u003e***\u003c/span\u003e Can\u003cspan class=\"s1\"\u003e\u0026#39;t find github.com: No answer\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enslookup \u003cspan class=\"nt\"\u003e-query\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eAAAA github.com 2001:4860:4860::6464\nServer:         2001:4860:4860::6464\nAddress:        2001:4860:4860::6464#53\n\nNon-authoritative answer:\nName:    github.com\nAddress: 64:ff9b::8c52:7904 \u003cspan class=\"c\"\u003e# 8c52:7904 -\u0026gt; 140.82.121.4 Embedded IPv4 addresse\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eGoogle 的 \u003ca href=\"https://developers.google.com/speed/public-dns/docs/dns64\"\u003epublic DNS64\u003c/a\u003e 服务。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/ipv6-only-egress.png\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003ehttps://coredns.io/plugins/dns64/\u003c/p\u003e\n\n\u003cp\u003e优点：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e高度可扩展 GW 作为转换节点，无状态；\u003c/li\u003e\n  \u003cli\u003e集群内 nodes/pods/GW 之间的流量都是纯 IPv6；\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e缺点：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003eIPAM 管理更复杂，因为 pods/nodes 需要 secondary \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e64:ff9b::/96\u003c/code\u003e prefix 地址段；\u003c/p\u003e\n\n    \u003cp\u003e可以通过有状态 NAT64 GW 解决：Pods use their primary IPv6 address, and GW does NAT to its own IPv4 address.\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"24-demo-cilium-nat4664-gw略\"\u003e2.4 Demo: Cilium NAT46/64 GW（略）\u003c/h2\u003e\n\n\u003ch2 id=\"25-小结\"\u003e2.5 小结\u003c/h2\u003e\n\n\u003cp\u003e至此，IPv6-only k8s 集群与传统 IPv4 网络交互问题都解决了，那接下来呢？\u003c/p\u003e\n\n\u003cp\u003eIPv6 不仅解决扩展性问题，而且为未来的性能需求奠定了基础。接下来看 Cilium + BIG TCP。\u003c/p\u003e\n\n\u003ch1 id=\"3-cilium--big-tcp\"\u003e3 Cilium + BIG TCP\u003c/h1\u003e\n\n\u003ch2 id=\"31-big-tcp\"\u003e3.1 BIG TCP\u003c/h2\u003e\n\n\u003ch3 id=\"311-设计目标\"\u003e3.1.1 设计目标\u003c/h3\u003e\n\n\u003cp\u003e支持数据中心内的\u003cstrong\u003e\u003cmark\u003e单个 socket 达到 100Gbps+\u003c/mark\u003e\u003c/strong\u003e 带宽。\u003c/p\u003e\n\n\u003ch3 id=\"312-使用场景\"\u003e3.1.2 使用场景\u003c/h3\u003e\n\n\u003cp\u003e大数据、AI、机器学习以及其他\u003cstrong\u003e\u003cmark\u003e网络密集型应用\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003eBIG TCP 并不是一个适应于大部分场景的通用方案，而是针对数据密集型应用的优化，在这些场景下能显著提升网络性能。\u003c/p\u003e\n\n\u003ch3 id=\"313-技术原理\"\u003e3.1.3 技术原理\u003c/h3\u003e\n\n\u003cp\u003e文档：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"https://lwn.net/Articles/884104/\"\u003eGoing big with TCP packets\u003c/a\u003e, lwn.net, 2022\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e来计算一下，如果以 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eMTU=1538\u003c/code\u003e  的配置，要达到 100Gbps 带宽，\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e           100Gbit/s ÷ 1538Byte ÷ 8bit/Byte == 8.15Mpps (123ns/packet)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e每秒需要处理 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e815 万\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e个包，或者说，\u003c/li\u003e\n  \u003cli\u003e每个包的处理时间不能超过 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e123ns\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e对于内核协议栈这个庞然大物来说，这个性能是无法达到的，例如一次 cache miss 就会导致性能急剧下降。\n\u003cstrong\u003e\u003cmark\u003e降低 pps 会使这个目标变得更容易\u003c/mark\u003e\u003c/strong\u003e，在总带宽不变的情况下，这就\u003cstrong\u003e\u003cmark\u003e意味着要增大包长\u003c/mark\u003e\u003c/strong\u003e（packet length）。\n局域网里面使用超过 1.5K 的 MTU 大包已经是常规操作，经过适当的配置之后，可以用到最大 64KB/packet。\n后面会看到这个限制是怎么来的。\u003c/p\u003e\n\n\u003cp\u003e大包就需要批处理：\u003cstrong\u003e\u003cmark\u003eGRO、TSO\u003c/mark\u003e\u003c/strong\u003e。如下图所示：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/kernel-stack-gro-tso.png\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eTSO 将超大的 TCP 包在 NIC/HW 上分段（segment），\u003c/li\u003e\n  \u003cli\u003eGRO 在接收方向对分段的包进行重组，重新得到超大 TCP 包。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"ipv4-限制单个包最大-64kb\"\u003eIPv4 限制：单个包最大 64KB\u003c/h4\u003e\n\n\u003cp\u003e以 RX 方向的 GRO 为例，GRO 会将重组之后的 total payload 长度更新到 IPv4 头的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etot_len\u003c/code\u003e 字段，这是一个\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e16bit\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 整数，单位是字节，因此最大只能表示 64KB 的包。\u003c/p\u003e\n\n\u003cp\u003eTX 方向的 TSO 也有一样的限制。也就是说，使用 IPv4，我们在 TX/RX 方向\u003cstrong\u003e\u003cmark\u003e最大只能支持 64KB 的大包\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e内核能支持更大的 batch 吗？能，使用 IPv6。\u003c/p\u003e\n\n\u003ch4 id=\"解决方式ipv6-hbh-hop-by-hop单个包最大-4gb\"\u003e解决方式：IPv6 HBH (Hop-By-Hop)，单个包最大 4GB\u003c/h4\u003e\n\n\u003cp\u003eBIG TCP 的解决方式是在本地插入一个 \u003cstrong\u003e\u003cmark\u003eHop-By-Hop (HBH) IPv6 扩展头\u003c/mark\u003e\u003c/strong\u003e。\n“本地”的意思是“在这台 node 上”，也就是说 HBH 头不会发出去，\u003cstrong\u003e\u003cmark\u003e只在本机内使用\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e此外，还需要对应调整 MTU 大小。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/hbh-header.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/kernel-stack-gro-tso-2.png\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e目前这个上限是 \u003cstrong\u003e\u003cmark\u003e512KB\u003c/mark\u003e\u003c/strong\u003e，但是未来需要时，很容易扩展。\n这个字段是 32bit，因此理论上最大能支持 4GB 的超大包（jumbo packets）。\u003c/p\u003e\n\n\u003ch2 id=\"32-内核支持519\"\u003e3.2 内核支持（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5.19+\u003c/code\u003e）\u003c/h2\u003e\n\n\u003cp\u003eBIG TCP 合并到了内核 5.19+，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e内核 patch：\u003ca href=\"https://lore.kernel.org/netdev/20220513183408.686447-1-eric.dumazet@gmail.com/\"\u003etcp: BIG TCP implementation\u003c/a\u003e, from Google, 2022\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e此外，它还需要网卡驱动的支持。\u003c/p\u003e\n\n\u003ch2 id=\"33-cilium-支持v113\"\u003e3.3 Cilium 支持（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ev1.13+\u003c/code\u003e）\u003c/h2\u003e\n\n\u003cp\u003eBIG TCP 的支持将出现在 Cilium 1.13。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e文档：\u003ca href=\"https://docs.cilium.io/en/latest/operations/performance/tuning/#ipv6-big-tcp\"\u003ePerformance: tuning: IPv6 BIG TCP\u003c/a\u003e\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eKernel: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e5.19+\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/li\u003e\n      \u003cli\u003eSupported NICs: mlx4, mlx5\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e实现：\u003ca href=\"https://github.com/cilium/cilium/pull/20349\"\u003eAdd IPv6 BIG TCP support\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e启用了开关之后，Cilium 将自动为 host/pod devices 设置 IPv6 BIG TCP，过程透明。\u003c/p\u003e\n\n\u003ch3 id=\"性能\"\u003e性能\u003c/h3\u003e\n\n\u003cp\u003e延迟：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/big-tcp-pod-to-pod-latency.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e# Back to back: AMD Ryzen 9 3950X @ 3.5 GHz, 128G RAM @ 3.2 GHz, PCIe 4.0, ConnectX-6 Dx, mlx5 driver 78\n$ netperf -t TCP_RR -H \u0026lt;remote pod\u0026gt; -- -r 80000,80000 -O MIN_LATENCY,P90_LATENCY,P99_LATENCY,THROUGHPUT\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eTPS:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/big-tcp-tps.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Back to back: AMD Ryzen 9 3950X @ 3.5 GHz, 128G RAM @ 3.2 GHz, PCIe 4.0, ConnectX-6 Dx, mlx5 driver 79\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enetperf \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e TCP_RR \u003cspan class=\"nt\"\u003e-H\u003c/span\u003e \u0026lt;remote pod\u0026gt; \u003cspan class=\"nt\"\u003e--\u003c/span\u003e \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e 80000,80000 \u003cspan class=\"nt\"\u003e-O\u003c/span\u003e MIN_LATENCY,P90_LATENCY,P99_LATENCY,THROUGHPUT\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e带宽：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/big-tcp-bw-1.png\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/big-tcp-bw-2.png\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eiperf3 不支持 mmap()’ed TCP. 在这里的测试中，\u003cstrong\u003e\u003cmark\u003e最大的开销就是 copy from/to userspace\u003c/mark\u003e\u003c/strong\u003e，因此最大速度卡在了 60Gbps，\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/big-tcp-bottleneck.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e需要的改进：\u003ca href=\"https://legacy.netdevconf.info/0x14/session.html?talk-the-path-to-tcp-4k-mtu-and-rx-zerocopy\"\u003eThe Path To TCP 4K MTU and RX ZeroCopy\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"34-小结\"\u003e3.4 小结\u003c/h2\u003e\n\n\u003cp\u003e更广泛意义上来说，BIG TCP 只是 Cilium 整体数据平面的一块拼图。\n那么完整的数据平面长什么样子？\u003c/p\u003e\n\n\u003ch1 id=\"4-cilium-未来数据平面\"\u003e4 Cilium 未来数据平面\u003c/h1\u003e\n\n\u003cp\u003e总体原则：高度可扩展，极致性能。\u003c/p\u003e\n\n\u003ch2 id=\"41-cilium-作为独立网关节点standalone-gw\"\u003e4.1 Cilium 作为独立网关节点（standalone GW）\u003c/h2\u003e\n\n\u003cp\u003e提供的能力：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e基于 eBPF/XDP 的 L4LB，可通过 \u003cstrong\u003e\u003cmark\u003eAPI 编程控制转发规则\u003c/mark\u003e\u003c/strong\u003e；\n    \u003cul\u003e\n      \u003cli\u003e支持 weighted Maglev 一致性哈希\u003c/li\u003e\n      \u003cli\u003e支持 DSR：支持 IPIP/IP6IP6 等 DSR 封装格式，支持 backend RSS fanout\u003c/li\u003e\n      \u003cli\u003eBackend 优雅终止和退出（Termination/Quarantining），可手动通过 CLI/API 操作\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003eStateful NAT46/64 Gateway\u003c/li\u003e\n  \u003cli\u003eStateless NAT46/64 Gateway\u003c/li\u003e\n  \u003cli\u003e支持 IPv6-only K8s\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"42-cilium-作为-k8s-网络方案\"\u003e4.2 Cilium 作为 k8s 网络方案\u003c/h2\u003e\n\n\u003col\u003e\n  \u003cli\u003eeBPF kube-proxy replacement，支持 XDP / socket-level-LB\u003c/li\u003e\n  \u003cli\u003eeBPF host routing：物理网卡通过 BPF 直通 pod 虚拟网卡（veth pair），低延迟转发\u003c/li\u003e\n  \u003cli\u003e带宽管理基础设施：\u003ca href=\"/blog/better-bandwidth-management-with-ebpf-zh/\"\u003eCilium：基于 BPF+EDT+FQ+BBR 更好地带宽网络管理（KubeCon, 2022）\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003eEDT rate-limiting via eBPF and MQ/FQ\u003c/li\u003e\n      \u003cli\u003ePacing and BBR support for Pods\u003c/li\u003e\n      \u003cli\u003eDisabling TCP slow start after idle\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003eIPv6 BIG TCP support\u003c/li\u003e\n  \u003cli\u003eeBPF meta driver for Pods as veth device replacement：下面单独介绍。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"43-meta-device-vs-veth-pair\"\u003e4.3 meta device vs. veth pair\u003c/h2\u003e\n\n\u003ch3 id=\"431-复习veth-pair-defaultbpf-host-routing-模式转发路径\"\u003e4.3.1 复习：veth pair default/bpf-host-routing 模式转发路径\u003c/h3\u003e\n\n\u003cp\u003e常规（默认）：物理网卡和容器虚拟网卡之间要\u003cstrong\u003e\u003cmark\u003e经过内核网络栈\u003c/mark\u003e\u003c/strong\u003e，\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/datapath-default.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eeBPF host routing：物理网卡通过 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ebpf_redirect_{peer,neigh}\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 直通 veth pair：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/datapath-bpf-host-routing-1.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/datapath-bpf-host-routing-2.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003ch3 id=\"432-meta-device-转发路径\"\u003e4.3.2 meta device 转发路径\u003c/h3\u003e\n\n\u003cp\u003e以上 eBPF host routing 双向转发效果：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/datapath-bpf-host-routing-3.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e现在我们正在开发一个称为 meta device 的虚拟设备，替换 veth pair：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/datapath-meta.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e为什么引入 meta：\u003cstrong\u003e\u003cmark\u003e将 pod-specific BPF 程序从 tc bpf 移动到 meta layer\u003c/mark\u003e\u003c/strong\u003e。\n对于 meta device 来说，\u003cstrong\u003e\u003cmark\u003eeBPF 程序成为了 pod 内的 device 自身的一部分\u003c/mark\u003e\u003c/strong\u003e。\n但不会由 pod 来修改或 unload eBPF 程序，而仍然由宿主机 namespace 内的 cilium 来统一管理。\u003c/p\u003e\n\n\u003ch3 id=\"433-meta-device-好处延迟更低\"\u003e4.3.3 meta device 好处：延迟更低\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003e延迟更低\u003c/mark\u003e\u003c/strong\u003e，pod 的网络延迟已经接近 host network 应用的延迟。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/meta-vs-veth-flame-graph.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003ch3 id=\"434-meta-device-vs-veth-pair实现区别\"\u003e4.3.4 meta device vs. veth pair：实现区别\u003c/h3\u003e\n\n\u003cp\u003eInternals for veth (today):\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eveth_xmit()\u003c/code\u003e\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003escrubs packet meta data\u003c/li\u003e\n  \u003cli\u003eenques to per-CPU backlog queue\u003c/li\u003e\n  \u003cli\u003enet_rx_action picks up packets from queue in host\u003c/li\u003e\n  \u003cli\u003edeferral can happen to ksoftirqd\u003c/li\u003e\n  \u003cli\u003eCilium’s eBPF prog called only on tc ingress to redirect to phys dev\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eInternals for meta (new):\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emeta_xmit()\u003c/code\u003e\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003escrubs packet meta data\u003c/li\u003e\n  \u003cli\u003eswitches netns to host\u003c/li\u003e\n  \u003cli\u003eCilium’s eBPF prog called for meta\u003c/li\u003e\n  \u003cli\u003eRedirect to phys dev directly without backlog queue\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e代码：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/cilium/linux/commits/pr/dev-meta\"\u003emeta prototype\u003c/a\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"435-meta-device-性能\"\u003e4.3.5 meta device 性能\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/meta-latency.png\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Back to back: AMD Ryzen 9 3950X @ 3.5 GHz, 128G RAM @ 3.2 GHz, PCIe 4.0, ConnectX-6 Dx, mlx5 driver\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enetperf \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e TCP_RR \u003cspan class=\"nt\"\u003e-H\u003c/span\u003e \u0026lt;remote pod\u0026gt; \u003cspan class=\"nt\"\u003e--\u003c/span\u003e \u003cspan class=\"nt\"\u003e-O\u003c/span\u003e MIN_LATENCY,P90_LATENCY,P99_LATENCY,THROUGHPUT\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/meta-tps.png\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Back to back: AMD Ryzen 9 3950X @ 3.5 GHz, 128G RAM @ 3.2 GHz, PCIe 4.0, ConnectX-6 Dx, mlx5 driver\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enetperf \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e TCP_RR \u003cspan class=\"nt\"\u003e-H\u003c/span\u003e \u0026lt;remote pod\u0026gt; \u003cspan class=\"nt\"\u003e--\u003c/span\u003e \u003cspan class=\"nt\"\u003e-O\u003c/span\u003e MIN_LATENCY,P90_LATENCY,P99_LATENCY,THROUGHPUT\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/meta-throughput.png\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Back to back: AMD Ryzen 9 3950X @ 3.5 GHz, 128G RAM @ 3.2 GHz, PCIe 4.0, ConnectX-6 Dx, mlx5 driver\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enetperf \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e TCP_STREAM \u003cspan class=\"nt\"\u003e-H\u003c/span\u003e \u0026lt;remote pod\u0026gt; \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e 60\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"5-未来已来\"\u003e5 未来已来\u003c/h1\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e本节为译注。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003e未来已来，只是分布尚不均匀\u003c/mark\u003e\u003c/strong\u003e（The future is already here –\nit’s just not very evenly distributed. William Ford Gibson）。\u003c/p\u003e\n\n\u003ch2 id=\"51-数据平面核心模块\"\u003e5.1 数据平面核心模块\u003c/h2\u003e\n\n\u003cp\u003eCilium 数据平面的核心功能：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-tomorrow-networking-data-plane/cilium-dataplane-building-blocks.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"52-学习与进阶路线\"\u003e5.2 学习与进阶路线\u003c/h2\u003e\n\n\u003cp\u003e除了“（译）深入理解 Cilium 的 eBPF 收发包路径（KubeCon, 2019）” ，其他都来自 Cilium 团队分享：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"/blog/how-to-make-linux-microservice-aware-with-cilium-zh/\"\u003e（译）如何基于 Cilium 和 eBPF 打造可感知微服务的 Linux（InfoQ, 2019）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/transparent-chaos-testing-with-envoy-cilium-ebpf-zh/\"\u003e（译）基于 Envoy、Cilium 和 eBPF 实现透明的混沌测试（KubeCon, 2019）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/understanding-ebpf-datapath-in-cilium-zh/\"\u003e（译）深入理解 Cilium 的 eBPF 收发包路径（KubeCon, 2019）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/cilium-scale-k8s-service-with-bpf-zh/\"\u003e（译）利用 eBPF 支撑大规模 K8s Service (LPC, 2019)\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/cilium-k8s-service-lb-zh/\"\u003e（译）基于 BPF/XDP 实现 K8s Service 负载均衡 (LPC, 2020)\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/cilium-k8s-service-lb-zh/\"\u003e（译）基于 BPF/XDP 实现 K8s Service 负载均衡 (LPC, 2020)\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/ebpf-and-k8s-zh/\"\u003e（译）大规模微服务利器：eBPF + Kubernetes（KubeCon, 2020）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/advanced-bpf-kernel-features-for-container-age-zh/\"\u003e（译）为容器时代设计的高级 eBPF 内核特性（FOSDEM, 2021）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/bpf-datapath-extensions-for-k8s-zh/\"\u003e（译）为 K8s workload 引入的一些 BPF datapath 扩展（LPC, 2021）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/better-bandwidth-management-with-ebpf-zh/\"\u003e（译）Cilium：基于 BPF+EDT+FQ+BBR 实现更好的带宽管理（KubeCon, 2022）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/cilium-tomorrow-networking-data-plane-zh/\"\u003e（译）Cilium 未来数据平面：支撑 100Gbit/s k8s 集群（KubeCon, 2022）\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"致谢\"\u003e致谢\u003c/h1\u003e\n\n\u003cul\u003e\n  \u003cli\u003eEric Dumazet\u003c/li\u003e\n  \u003cli\u003eCoco Li\u003c/li\u003e\n  \u003cli\u003eYuchung Cheng\u003c/li\u003e\n  \u003cli\u003eMartin Lau\u003c/li\u003e\n  \u003cli\u003eJohn Fastabend\u003c/li\u003e\n  \u003cli\u003eK8s, Cilium, BPF \u0026amp; netdev kernel community\u003c/li\u003e\n\u003c/ul\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/better-bandwidth-management-with-ebpf-zh/\"\u003e\u003cspan\u003e« [译] Cilium：基于 BPF+EDT+FQ+BBR 实现更好的带宽管理（KubeCon, 2022）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/birth-of-sk-lookup-bpf-zh/\"\u003e\u003cspan\u003e[译] Socket listen 多地址需求与 SK_LOOKUP BPF 的诞生（LPC, 2019） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2022-11-12T00:00:00Z",
  "Author": "Arthur Chiao"
}