{
  "Source": "arthurchiao.art",
  "Title": "[笔记] 《Systems Performance: Enterprise and the Cloud》(Prentice Hall, 2013)",
  "Link": "https://arthurchiao.art/blog/systems-performance-notes-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003e[笔记] 《Systems Performance: Enterprise and the Cloud》(Prentice Hall, 2013)\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2020-05-05 | Last Update 2020-05-05\u003c/p\u003e\n  \n  \u003cp\u003e本文是阅读 Brendan Gregg 所著的 \u003cstrong\u003e\u003cem\u003eSystems Performance\u003c/em\u003e\u003c/strong\u003e: Enterprise and the\nCloud 一书（中文版名为《性能之巅》）时所做的笔记。\u003c/p\u003e\n\n\u003cp\u003e本文内容仅供学习交流，如有侵权立即删除。\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#1-绪论\" id=\"markdown-toc-1-绪论\"\u003e1. 绪论\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#案例研究slow-disk\" id=\"markdown-toc-案例研究slow-disk\"\u003e案例研究：Slow Disk\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-方法论\" id=\"markdown-toc-2-方法论\"\u003e2. 方法论\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#231-延迟\" id=\"markdown-toc-231-延迟\"\u003e2.3.1 延迟\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#25-方法论\" id=\"markdown-toc-25-方法论\"\u003e2.5 方法论\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#251-streetlight-anti-method\" id=\"markdown-toc-251-streetlight-anti-method\"\u003e2.5.1 Streetlight Anti-Method\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#259-use利用率饱和度错误数\" id=\"markdown-toc-259-use利用率饱和度错误数\"\u003e2.5.9 USE（利用率/饱和度/错误数）\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-操作系统\" id=\"markdown-toc-3-操作系统\"\u003e3. 操作系统\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#324-中断优先级ipl\" id=\"markdown-toc-324-中断优先级ipl\"\u003e3.2.4 中断优先级（IPL）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#325-进程\" id=\"markdown-toc-325-进程\"\u003e3.2.5 进程\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#3210-文件系统\" id=\"markdown-toc-3210-文件系统\"\u003e3.2.10 文件系统\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-观测工具observability-tools\" id=\"markdown-toc-4-观测工具observability-tools\"\u003e4. 观测工具（Observability Tools）\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#411-计数counters\" id=\"markdown-toc-411-计数counters\"\u003e4.1.1 计数（counters）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#412-跟踪tracing\" id=\"markdown-toc-412-跟踪tracing\"\u003e4.1.2 跟踪（tracing）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#413-profiling\" id=\"markdown-toc-413-profiling\"\u003e4.1.3 Profiling\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#414-监视sar\" id=\"markdown-toc-414-监视sar\"\u003e4.1.4 监视（sar）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-观测源observability-sources\" id=\"markdown-toc-42-观测源observability-sources\"\u003e4.2 观测源（Observability Sources）\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#421-proc\" id=\"markdown-toc-421-proc\"\u003e4.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#422-sys\" id=\"markdown-toc-422-sys\"\u003e4.2.2. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys\u003c/code\u003e\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#424-delay-accounting\" id=\"markdown-toc-424-delay-accounting\"\u003e4.2.4. Delay Accounting\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#426-其他观测源\" id=\"markdown-toc-426-其他观测源\"\u003e4.2.6. 其他观测源\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#43-dtrace\" id=\"markdown-toc-43-dtrace\"\u003e4.3 DTrace\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#44-systemtap\" id=\"markdown-toc-44-systemtap\"\u003e4.4 SystemTap\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#45-perf\" id=\"markdown-toc-45-perf\"\u003e4.5. perf\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-applications\" id=\"markdown-toc-5-applications\"\u003e5. Applications\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#543-系统调用分析\" id=\"markdown-toc-543-系统调用分析\"\u003e5.4.3 系统调用分析\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#6-cpu\" id=\"markdown-toc-6-cpu\"\u003e6. CPU\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#641-hardware\" id=\"markdown-toc-641-hardware\"\u003e6.4.1 Hardware\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#642-software\" id=\"markdown-toc-642-software\"\u003e6.4.2 Software\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#651-tools-method\" id=\"markdown-toc-651-tools-method\"\u003e6.5.1. Tools Method\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#655-cycle-analysis\" id=\"markdown-toc-655-cycle-analysis\"\u003e6.5.5. Cycle Analysis\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#658-调整进程优先级\" id=\"markdown-toc-658-调整进程优先级\"\u003e6.5.8. 调整进程优先级\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#66-analysis\" id=\"markdown-toc-66-analysis\"\u003e6.6. Analysis\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#661-uptime\" id=\"markdown-toc-661-uptime\"\u003e6.6.1. uptime\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#662-vmstat\" id=\"markdown-toc-662-vmstat\"\u003e6.6.2. vmstat\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#663-mpstat\" id=\"markdown-toc-663-mpstat\"\u003e6.6.3. mpstat\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#664-sar\" id=\"markdown-toc-664-sar\"\u003e6.6.4. sar\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#665-ps\" id=\"markdown-toc-665-ps\"\u003e6.6.5. ps\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#666-top\" id=\"markdown-toc-666-top\"\u003e6.6.6. top\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#668-pidstat\" id=\"markdown-toc-668-pidstat\"\u003e6.6.8. pidstat\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#669-time\" id=\"markdown-toc-669-time\"\u003e6.6.9. time\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#6612-perf\" id=\"markdown-toc-6612-perf\"\u003e6.6.12. perf\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#system-profiling\" id=\"markdown-toc-system-profiling\"\u003eSystem Profiling\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#stat\" id=\"markdown-toc-stat\"\u003estat\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#software-tracing\" id=\"markdown-toc-software-tracing\"\u003eSoftware Tracing\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#6614-other-tools\" id=\"markdown-toc-6614-other-tools\"\u003e6.6.14. Other Tools\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#67\" id=\"markdown-toc-67\"\u003e6.7\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#671-ad-hoc\" id=\"markdown-toc-671-ad-hoc\"\u003e6.7.1 Ad Hoc\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#672-sysbench\" id=\"markdown-toc-672-sysbench\"\u003e6.7.2 SysBench\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#682-调度优先级和类别class\" id=\"markdown-toc-682-调度优先级和类别class\"\u003e6.8.2. 调度优先级和类别（class）\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#684-绑定-cpu\" id=\"markdown-toc-684-绑定-cpu\"\u003e6.8.4. 绑定 CPU\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#685-独占-cpuexclusive-cpu-sets\" id=\"markdown-toc-685-独占-cpuexclusive-cpu-sets\"\u003e6.8.5. 独占 CPU（Exclusive CPU Sets）\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#7-memory\" id=\"markdown-toc-7-memory\"\u003e7. Memory\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#721-virtual-memory\" id=\"markdown-toc-721-virtual-memory\"\u003e7.2.1. Virtual Memory\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#723-demand-paging\" id=\"markdown-toc-723-demand-paging\"\u003e7.2.3. Demand Paging\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#725-swapping换出\" id=\"markdown-toc-725-swapping换出\"\u003e7.2.5. Swapping（换出）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#726-用于文件系统缓存的内存\" id=\"markdown-toc-726-用于文件系统缓存的内存\"\u003e7.2.6. 用于文件系统缓存的内存\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#728-内存分配器\" id=\"markdown-toc-728-内存分配器\"\u003e7.2.8. 内存分配器\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#73-architecture\" id=\"markdown-toc-73-architecture\"\u003e7.3 Architecture\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#731-hardware\" id=\"markdown-toc-731-hardware\"\u003e7.3.1 Hardware\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#ddr-sdram1996\" id=\"markdown-toc-ddr-sdram1996\"\u003eDDR SDRAM（1996）\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#cpu-cache\" id=\"markdown-toc-cpu-cache\"\u003eCPU Cache\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#mmu\" id=\"markdown-toc-mmu\"\u003eMMU\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#732-software\" id=\"markdown-toc-732-software\"\u003e7.3.2. Software\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#释放内存\" id=\"markdown-toc-释放内存\"\u003e释放内存\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#733-process-address-space\" id=\"markdown-toc-733-process-address-space\"\u003e7.3.3. Process Address Space\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#741-tools-method\" id=\"markdown-toc-741-tools-method\"\u003e7.4.1 Tools Method\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#75-analysis\" id=\"markdown-toc-75-analysis\"\u003e7.5 Analysis\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#751-vmstat\" id=\"markdown-toc-751-vmstat\"\u003e7.5.1. vmstat\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#752-sar\" id=\"markdown-toc-752-sar\"\u003e7.5.2. sar\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#753-slabtop\" id=\"markdown-toc-753-slabtop\"\u003e7.5.3. slabtop\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#755-ps\" id=\"markdown-toc-755-ps\"\u003e7.5.5. ps\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#756-top\" id=\"markdown-toc-756-top\"\u003e7.5.6. top\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#758-pmap\" id=\"markdown-toc-758-pmap\"\u003e7.5.8. pmap\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#7511-other-tools\" id=\"markdown-toc-7511-other-tools\"\u003e7.5.11. Other Tools\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#761-参数调优\" id=\"markdown-toc-761-参数调优\"\u003e7.6.1. 参数调优\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#764-resource-controls\" id=\"markdown-toc-764-resource-controls\"\u003e7.6.4. Resource Controls\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#8-file-systems\" id=\"markdown-toc-8-file-systems\"\u003e8. File Systems\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#821-文件系统接口\" id=\"markdown-toc-821-文件系统接口\"\u003e8.2.1. 文件系统接口\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#822-文件系统缓存file-system-cache\" id=\"markdown-toc-822-文件系统缓存file-system-cache\"\u003e8.2.2. 文件系统缓存（File System Cache）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#83-concepts\" id=\"markdown-toc-83-concepts\"\u003e8.3. Concepts\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#832-caching\" id=\"markdown-toc-832-caching\"\u003e8.3.2. Caching\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#836-write-back-caching写缓存\" id=\"markdown-toc-836-write-back-caching写缓存\"\u003e8.3.6. Write-Back Caching（写缓存）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#838-raw-and-direct-io\" id=\"markdown-toc-838-raw-and-direct-io\"\u003e8.3.8. Raw and Direct I/O\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#8313-文件系统操作耗时\" id=\"markdown-toc-8313-文件系统操作耗时\"\u003e8.3.13. 文件系统操作耗时\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#8314-特殊文件系统\" id=\"markdown-toc-8314-特殊文件系统\"\u003e8.3.14. 特殊文件系统\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#841-文件系统-io-栈\" id=\"markdown-toc-841-文件系统-io-栈\"\u003e8.4.1. 文件系统 I/O 栈\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#843-文件系统缓存\" id=\"markdown-toc-843-文件系统缓存\"\u003e8.4.3. 文件系统缓存\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#页面缓存page-cache\" id=\"markdown-toc-页面缓存page-cache\"\u003e页面缓存（Page Cache）\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#845-文件系统类型\" id=\"markdown-toc-845-文件系统类型\"\u003e8.4.5. 文件系统类型\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#846-volumes-and-pools\" id=\"markdown-toc-846-volumes-and-pools\"\u003e8.4.6. Volumes and Pools\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#852-latency-analysis\" id=\"markdown-toc-852-latency-analysis\"\u003e8.5.2. Latency Analysis\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#86-analysis\" id=\"markdown-toc-86-analysis\"\u003e8.6. Analysis\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#8610-sar\" id=\"markdown-toc-8610-sar\"\u003e8.6.10. sar\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#8611-slabtop\" id=\"markdown-toc-8611-slabtop\"\u003e8.6.11. slabtop\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#8614-procmeminfo\" id=\"markdown-toc-8614-procmeminfo\"\u003e8.6.14. /proc/meminfo\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#8617-其他工具\" id=\"markdown-toc-8617-其他工具\"\u003e8.6.17. 其他工具\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#871-ad-hoc\" id=\"markdown-toc-871-ad-hoc\"\u003e8.7.1. Ad Hoc\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#872-micro-benchmark-tools\" id=\"markdown-toc-872-micro-benchmark-tools\"\u003e8.7.2. Micro-Benchmark Tools\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#873-cache-flushing清除缓存\" id=\"markdown-toc-873-cache-flushing清除缓存\"\u003e8.7.3. Cache Flushing（清除缓存）\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#9-disk\" id=\"markdown-toc-9-disk\"\u003e9. Disk\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#932-time-scales\" id=\"markdown-toc-932-time-scales\"\u003e9.3.2. Time Scales\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#942-磁盘接口类型\" id=\"markdown-toc-942-磁盘接口类型\"\u003e9.4.2. 磁盘接口类型\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#943-storage-types\" id=\"markdown-toc-943-storage-types\"\u003e9.4.3. Storage Types\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#944-磁盘-io-栈\" id=\"markdown-toc-944-磁盘-io-栈\"\u003e9.4.4. 磁盘 IO 栈\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#96-analysis\" id=\"markdown-toc-96-analysis\"\u003e9.6. Analysis\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#961-iostat\" id=\"markdown-toc-961-iostat\"\u003e9.6.1. iostat\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#962-sar\" id=\"markdown-toc-962-sar\"\u003e9.6.2. sar\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#963-pidstat\" id=\"markdown-toc-963-pidstat\"\u003e9.6.3. pidstat\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#966-perf\" id=\"markdown-toc-966-perf\"\u003e9.6.6. perf\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#967-iotop\" id=\"markdown-toc-967-iotop\"\u003e9.6.7. iotop\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#969-blktrace\" id=\"markdown-toc-969-blktrace\"\u003e9.6.9. blktrace\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#action-identifiers\" id=\"markdown-toc-action-identifiers\"\u003eAction Identifiers\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#action-filtering\" id=\"markdown-toc-action-filtering\"\u003eAction Filtering\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#9611-smartctl\" id=\"markdown-toc-9611-smartctl\"\u003e9.6.11. smartctl\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#97-experimentation\" id=\"markdown-toc-97-experimentation\"\u003e9.7. Experimentation\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#971-ad-hoc\" id=\"markdown-toc-971-ad-hoc\"\u003e9.7.1. Ad Hoc\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#973-micro-benchmark-tools\" id=\"markdown-toc-973-micro-benchmark-tools\"\u003e9.7.3. Micro-Benchmark Tools\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#98-tuning\" id=\"markdown-toc-98-tuning\"\u003e9.8. Tuning\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#981-operating-system-tunables\" id=\"markdown-toc-981-operating-system-tunables\"\u003e9.8.1. Operating System Tunables\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#ionice\" id=\"markdown-toc-ionice\"\u003eionice\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#tunable-parameters\" id=\"markdown-toc-tunable-parameters\"\u003eTunable Parameters\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#10-network\" id=\"markdown-toc-10-network\"\u003e10. Network\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#1035-latency\" id=\"markdown-toc-1035-latency\"\u003e10.3.5 Latency\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#1041-protocols\" id=\"markdown-toc-1041-protocols\"\u003e10.4.1 Protocols\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#nagle\" id=\"markdown-toc-nagle\"\u003eNagle\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#sack-and-fack\" id=\"markdown-toc-sack-and-fack\"\u003eSACK and FACK\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#1043-software\" id=\"markdown-toc-1043-software\"\u003e10.4.3 Software\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#106-analysis\" id=\"markdown-toc-106-analysis\"\u003e10.6. Analysis\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#1061-netstat\" id=\"markdown-toc-1061-netstat\"\u003e10.6.1. netstat\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#1062-sar\" id=\"markdown-toc-1062-sar\"\u003e10.6.2. sar\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#1068-traceroute\" id=\"markdown-toc-1068-traceroute\"\u003e10.6.8. traceroute\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#10615-perf\" id=\"markdown-toc-10615-perf\"\u003e10.6.15. perf\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#10616-other-tools\" id=\"markdown-toc-10616-other-tools\"\u003e10.6.16. Other Tools\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#1071-iperf\" id=\"markdown-toc-1071-iperf\"\u003e10.7.1. iperf\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"1-绪论\"\u003e1. 绪论\u003c/h1\u003e\n\n\u003cp\u003eDTrace 是第一个用于生产环境的\u003cstrong\u003e动态跟踪\u003c/strong\u003e（dynamic tracing）工具，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eSun 公司开发，随 2015 年 Solaris 10 首发\u003c/li\u003e\n  \u003cli\u003e支持对内核态和用户态程序进行静态跟踪和动态跟踪\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eDTrace 之前，系统跟踪常常使用\u003cstrong\u003e静态探测\u003c/strong\u003e（static probes），\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e内核和其他软件中的一些探测点（instrumentation points）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"案例研究slow-disk\"\u003e案例研究：Slow Disk\u003c/h2\u003e\n\n\u003cp\u003e现象：磁盘操作变慢，但 CPU、网络等正常，业务查询量也并未增加。\u003c/p\u003e\n\n\u003cp\u003e排查：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003empstat\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiostat\u003c/code\u003e 查看磁盘 IO\u003c/li\u003e\n  \u003cli\u003e随机访问、连续访问？\u003c/li\u003e\n  \u003cli\u003e文件系统碎片？\u003c/li\u003e\n  \u003cli\u003e文件系统页缓存未命中？查看命中率\u003c/li\u003e\n  \u003cli\u003e文件缓存大小？\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e最终原因：另一个程序占用了大量内存，导致本来\u003cstrong\u003e可用于文件系统缓存的内存空间\u003c/strong\u003e变小\n，命中率变低，磁盘 IO 升高。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"ch_2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"2-方法论\"\u003e2. 方法论\u003c/h1\u003e\n\n\u003ch3 id=\"231-延迟\"\u003e2.3.1 延迟\u003c/h3\u003e\n\n\u003cp\u003e以 3.3 GHz processor 为例，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e访问一次寄存器需要一个时钟周期，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0.3 ns\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e作为对比，光传播 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1\u003c/code\u003e 米所需的时间\u003c/strong\u003e是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3.4 ns\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e表 2-1. \u003cmark\u003e系统延迟的时间尺度\u003c/mark\u003e\u003c/p\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003eEvent\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eLatency\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eScaled\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e1 CPU cycle\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e0.3  \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ens\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e1  秒\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eL1 cache\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e0.9  \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ens\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e3  秒\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eL2 cache\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e2.8  \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ens\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e9  秒\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eL3 cache\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e12.9 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ens\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e43 秒\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e内存 (DRAM, from CPU)\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e120  \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ens\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cmark\u003e6  分\u003c/mark\u003e\u003c/strong\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eSSD\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e50-150 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eus\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e2-6 天\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e旋转磁盘\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e1-10 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ems\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e1-12 月\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e互联网: 旧金山 -\u0026gt; 纽约\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e40 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ems\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e4  年\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e互联网: 旧金山 -\u0026gt; 英国\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e81 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ems\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e8  年\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e互联网: 旧金山 -\u0026gt; 澳洲\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e183 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ems\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e19 年\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eTCP 重传\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e1-3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003es\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cmark\u003e105-317 年\u003c/mark\u003e\u003c/strong\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eSCSI command timeout\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e30 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003es\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e3000 年\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e物理系统重启\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003em\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e32000 年\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2 id=\"25-方法论\"\u003e2.5 方法论\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/table-2-4.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003ch3 id=\"251-streetlight-anti-method\"\u003e2.5.1 Streetlight Anti-Method\u003c/h3\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e某天晚上，警察看到一个醉汉在路灯下找东西，他声称自己的钥匙丢了。警察帮忙找了\n一会也没找到，然后问道：“你确定是丢在这里，路灯下面？”醉汉答：“不确定，但这里光线最好。”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e这就相当于\u003cstrong\u003e\u003cmark\u003e登到机器之后先执行\u003c/mark\u003e\u003c/strong\u003e \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etop\u003c/code\u003e：并不是因为此时\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etop\u003c/code\u003e 是最优的，而是 暂时也想不到其他更好的工具。\u003c/p\u003e\n\n\u003ch3 id=\"259-use利用率饱和度错误数\"\u003e2.5.9 USE（利用率/饱和度/错误数）\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e利用率（Utilization）: 例如，CPU 利用率 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e90%\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e饱和度（Saturation）: 用 \u003cstrong\u003ewait-queue length\u003c/strong\u003e 衡量，例如，CPU 的平均 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erun-queue length\u003c/code\u003e 是 4\u003c/li\u003e\n  \u003cli\u003e错误数（Errors）: 例如网卡有 50 个丢包\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e对 CPU、内存、网络、存储等应用 USE 方法：\n\u003ca href=\"/blog/linux-trouble-shooting-cheat-sheet/\"\u003e\u003cstrong\u003eLinux Trouble Shooting Cheat Sheet\u003c/strong\u003e\u003c/a\u003e\n或原书附录 A。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"ch_3\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"3-操作系统\"\u003e3. 操作系统\u003c/h1\u003e\n\n\u003ch3 id=\"324-中断优先级ipl\"\u003e3.2.4 中断优先级（IPL）\u003c/h3\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003einterrupt priority level (IPL) represents the priority of the currently active\ninterrupt service routine.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/3-5.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e串行 I/O 的中断优先级很高\u003c/strong\u003e，因为它们的硬件缓存很小，很容易溢出。\u003c/p\u003e\n\n\u003ch3 id=\"325-进程\"\u003e3.2.5 进程\u003c/h3\u003e\n\n\u003cp\u003e从某种程度来说，\u003cstrong\u003e\u003cmark\u003e进程像是一台虚拟的早期计算机\u003c/mark\u003e\u003c/strong\u003e（a virtual early computer）：\n里面只运行一个程序，并且这个程序有自己独立的\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e地址空间\u003c/li\u003e\n  \u003cli\u003e文件描述符\u003c/li\u003e\n  \u003cli\u003e线程\u003c/li\u003e\n  \u003cli\u003e寄存器\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/3-8.png\" width=\"50%\" height=\"50%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 3-8. Process environment\u003c/p\u003e\n\n\u003ch3 id=\"3210-文件系统\"\u003e3.2.10 文件系统\u003c/h3\u003e\n\n\u003cp\u003eVFS (Virtual File System)是一套\u003cstrong\u003e内核接口\u003c/strong\u003e，在不同文件系统之上做了抽象；起源于\nSun Microsystem，最初目的是让 UNIX File System (UFS) 和 NFS 更容易共存。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/3-12.png\" width=\"50%\" height=\"50%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e上面的图中可以看出，VFS 统一了：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e磁盘文件系统\u003c/li\u003e\n  \u003cli\u003e网络文件系统\u003c/li\u003e\n  \u003cli\u003e内存文件系统\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e下图是 storage-device-based file system 的调用路径：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/3-13.png\" width=\"50%\" height=\"50%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"ch_4\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"4-观测工具observability-tools\"\u003e4. 观测工具（Observability Tools）\u003c/h1\u003e\n\n\u003ch3 id=\"411-计数counters\"\u003e4.1.1 计数（counters）\u003c/h3\u003e\n\n\u003cp\u003e系统级别工具：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evmstat\u003c/code\u003e: 操作系统级别的\u003cstrong\u003e\u003cmark\u003e虚拟和物理内存\u003c/mark\u003e\u003c/strong\u003e统计信息\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003empstat\u003c/code\u003e: \u003cstrong\u003e\u003cmark\u003eper-CPU 使用情况\u003c/mark\u003e\u003c/strong\u003e统计（mp: multi-processor?）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiostat\u003c/code\u003e: \u003cstrong\u003e\u003cmark\u003eper-disk I/O\u003c/mark\u003e\u003c/strong\u003e 统计， reported from the block device interface\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetstat\u003c/code\u003e: 网卡统计，TCP/IP 协议栈统计，某些 per-connection statistics\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esar\u003c/code\u003e: \u003cstrong\u003e\u003cmark\u003e各种杂七杂八的统计\u003c/mark\u003e\u003c/strong\u003e；can also archive them for historical reporting\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e这些工具有一个\u003cstrong\u003e使用惯例\u003c/strong\u003e：可以指定时间间隔（interval）和次数（count），例如\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003empstat 1 3\n\n11:19:50 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest %gnice   %idle\n11:19:51 AM  all    0.00    0.00    1.00    0.00    0.00    0.00    0.00    0.00 0.00   99.00\n11:19:52 AM  all    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00 0.00  100.00\n11:19:53 AM  all    0.00    0.00    0.00    0.00    0.00    0.26    0.00    0.00 0.00   99.74\nAverage:     all    0.00    0.00    0.34    0.00    0.00    0.08    0.00    0.00 0.00   99.58\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e进程级别工具：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eps\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etop\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003epmap\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e: 进程内存段（memory segments）信息及使用统计等等\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e一般来说，这几个工具都是从 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/proc/\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 下面读数据的。\u003c/p\u003e\n\n\u003ch3 id=\"412-跟踪tracing\"\u003e4.1.2 跟踪（tracing）\u003c/h3\u003e\n\n\u003cp\u003e系统级别：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpdump\u003c/code\u003e: 抓包\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eblktrace\u003c/code\u003e: block I/O tracing (Linux)\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDTrace\u003c/code\u003e: tracing of kernel internals and the usage of any resource (not just network or block I/O), using static and dynamic tracing\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSystemTap\u003c/code\u003e: tracing of kernel internals and the usage of any resource, using static and dynamic tracing\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf\u003c/code\u003e: Linux Performance Events, tracing static and dynamic probes\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e进程级别：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estrace\u003c/code\u003e: system call tracing for Linux-based systems\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egdb\u003c/code\u003e: a source-level debugger, commonly used on Linux-based systems\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"413-profiling\"\u003e4.1.3 Profiling\u003c/h3\u003e\n\n\u003cp\u003e系统及进程级别：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoprofile\u003c/code\u003e: Linux system profiling\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf\u003c/code\u003e: a Linux performance toolkit, which includes profiling subcommands\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDTrace\u003c/code\u003e: programmatic profiling, timer-based using its profile provider, and hardwareevent- based using its cpc provider\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSystemTap\u003c/code\u003e: programmatic profiling, timer-based using its timer tapset, and hardware-eventbased using its perf tapset\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecachegrind\u003c/code\u003e: from the valgrind toolkit, can profile hardware cache usage and be visualized using kcachegrind\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"414-监视sar\"\u003e4.1.4 监视（sar）\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esar\u003c/code\u003e: \u003cstrong\u003e\u003cmark\u003eSystem Activity Reporter\u003c/mark\u003e\u003c/strong\u003e（系统活动汇报器）, 源自 AT\u0026amp;T UNIX。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esar(1)\u003c/code\u003e 是一个多功能计数器，利用定期 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecron\u003c/code\u003e 来记录系统计数器的状态：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003esar 1 3\nLinux 5.4.0-26-generic \u003cspan class=\"o\"\u003e(\u003c/span\u003eubuntu\u003cspan class=\"o\"\u003e)\u003c/span\u003e         04/28/2020      _x86_64_        \u003cspan class=\"o\"\u003e(\u003c/span\u003e4 CPU\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n11:36:25 AM     CPU     %user     %nice   %system   %iowait    %steal     %idle\n11:36:26 AM     all      0.00      0.00      0.25      0.00      0.00     99.75\n11:36:27 AM     all      0.00      0.00      0.25      0.00      0.00     99.75\n11:36:28 AM     all      0.00      0.00      0.25      0.00      0.00     99.75\nAverage:        all      0.00      0.00      0.25      0.00      0.00     99.75\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其他工具：\u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eatop\u003c/code\u003e (advanced top) 是一个更高级的系统和进程（system \u0026amp; proces）监视器\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"42-观测源observability-sources\"\u003e4.2 观测源（Observability Sources）\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e表 4-1. Observability Sources\u003c/p\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003eType\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eSource/Tool\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eper-process 计数器\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003esystem-wide 计数器\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003edevice driver \u0026amp; debug info\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eper-process tracing\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eptrace\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003euprobes\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eCPU 性能计数器\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf_event\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eNetwork tracing\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elibpcap\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eper-thread 延迟\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003edelay accounting\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003esystem-wide tracing\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003etracepoints, kprobes, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eftrace\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch3 id=\"421-proc\"\u003e4.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc\u003c/code\u003e 是\u003cstrong\u003e\u003cmark\u003e内存文件系统\u003c/mark\u003e\u003c/strong\u003e，不依赖磁盘：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e目录树结构\u003c/li\u003e\n  \u003cli\u003e通过文件系统相关的系统调用（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eopen/read/close\u003c/code\u003e），将内核统计信息暴露给用户空间\u003c/li\u003e\n  \u003cli\u003e大部分数据都是只读的\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etop\u003c/code\u003e 会收集\u003cstrong\u003e\u003cmark\u003e所有活跃进程（active processes）\u003c/mark\u003e\u003c/strong\u003e的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc\u003c/code\u003e 信息，\n因此\u003cstrong\u003e\u003cmark\u003e开销比较大\u003c/mark\u003e\u003c/strong\u003e，\n这就是为什么有时执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etop\u003c/code\u003e 命令，会看到排在第一位进程的就是它自己。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc\u003c/code\u003e 中每个进程的信息：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nt\"\u003e-F\u003c/span\u003e /proc/4314/\narch_status      cpuset   loginuid    numa_maps      sched         status\nattr/            cwd@     map_files/  oom_adj        schedstat     syscall\nautogroup        environ  maps        oom_score      sessionid     task/\nauxv             exe@     mem         oom_score_adj  setgroups     timers\ncgroup           fd/      mountinfo   pagemap        smaps         timerslack_ns\nclear_refs       fdinfo/  mounts      patch_state    smaps_rollup  uid_map\ncmdline          gid_map  mountstats  personality    stack         wchan\n\u003cspan class=\"nb\"\u003ecomm             \u003c/span\u003eio       net/        projid_map     \u003cspan class=\"nb\"\u003estat\n\u003c/span\u003ecoredump_filter  limits   ns/         root@          statm\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elimits\u003c/code\u003e: 已生效的资源限制（in-effect resource limits）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emaps\u003c/code\u003e: 已映射的内存区域\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esched\u003c/code\u003e: CPU 调度器相关的信息\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eschedstat\u003c/code\u003e: CPU \u003cstrong\u003eruntime, latency, and time slices\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esmaps\u003c/code\u003e: mapped memory regions with usage statistics\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estat\u003c/code\u003e: 进程状态和统计，包括 CPU 和内存使用量\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estatm\u003c/code\u003e: 内存使用量，以 page 为单位\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estatus\u003c/code\u003e: stat and statm information, 人类可读格式\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etask\u003c/code\u003e: directory of per-task statistics\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLinux 对 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc\u003c/code\u003e 进行了扩展，将一些\u003cstrong\u003e\u003cmark\u003e操作系统级别的统计放到了顶层\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /proc\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nt\"\u003e-Fd\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003ea-z]\u003cspan class=\"k\"\u003e*\u003c/span\u003e\nacpi/      dma          kcore        misc          scsi/          \u003cspan class=\"nb\"\u003etty\u003c/span\u003e/\nasound/    driver/      keys         modules       self@          \u003cspan class=\"nb\"\u003euptime\n\u003c/span\u003ebuddyinfo  execdomains  key-users    mounts@       slabinfo       version\nbus/       fb           kmsg         mpt/          softirqs       version_signature\ncgroups    filesystems  kpagecgroup  mtrr          \u003cspan class=\"nb\"\u003estat           \u003c/span\u003evmallocinfo\ncmdline    fs/          kpagecount   net@          swaps          vmstat\nconsoles   interrupts   kpageflags   pagetypeinfo  sys/           zoneinfo\ncpuinfo    iomem        loadavg      partitions    sysrq-trigger\ncrypto     ioports      locks        pressure/     sysvipc/\ndevices    irq/         mdstat       sched_debug   thread-self@\ndiskstats  kallsyms     meminfo      schedstat     timer_list\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpuinfo\u003c/code\u003e: CPU 信息\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ediskstats\u003c/code\u003e: disk I/O statistics for all disk devices\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einterrupts\u003c/code\u003e: 硬中断信息\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eloadavg\u003c/code\u003e: load averages\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ememinfo\u003c/code\u003e: system memory usage breakdowns\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet/dev\u003c/code\u003e: network interface statistics\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet/tcp\u003c/code\u003e: \u003cstrong\u003e当前活跃的 TCP socket 信息\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eschedstat\u003c/code\u003e: system-wide CPU scheduler statistics\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eself\u003c/code\u003e: 指向当前进程的链接，方便使用\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eslabinfo\u003c/code\u003e: 内核 slab allocator 缓存统计信息\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estat\u003c/code\u003e: 内核和系统资源状态汇总：CPUs, disks, paging, swap, processes\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ezoneinfo\u003c/code\u003e: memory zone information\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e更多信息见 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eproc(5)\u003c/code\u003e man page 和内核文档：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDocumentation/filesystems/proc.txt\u003c/code\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"422-sys\"\u003e4.2.2. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eLinux 提供的 sysfs 文件系统，挂载在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys\u003c/code\u003e，提供内核统计信息。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003e与 \u003ccode\u003e/proc\u003c/code\u003e 的不同\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc\u003c/code\u003e 源自 Unix，有非常长的演进历史，已经在顶层（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/xxx\u003c/code\u003e）添加了各种系统统计指标\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys\u003c/code\u003e \u003cstrong\u003e\u003cmark\u003e最初设计用于提供设备驱动信息\u003c/mark\u003e\u003c/strong\u003e，但后来进行了扩展，添加了很多其他类型的统计\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e例如，下面是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCPU 0\u003c/code\u003e 相关的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys\u003c/code\u003e 文件：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003efind /sys/devices/system/cpu/cpu0 \u003cspan class=\"nt\"\u003e-type\u003c/span\u003e f\n/sys/devices/system/cpu/cpu0/crash_notes\n/sys/devices/system/cpu/cpu0/cache/index0/type\n/sys/devices/system/cpu/cpu0/cache/index0/level\n/sys/devices/system/cpu/cpu0/cache/index0/physical_line_partition\n/sys/devices/system/cpu/cpu0/cache/index0/number_of_sets\n/sys/devices/system/cpu/cpu0/cache/index0/size\n/sys/devices/system/cpu/cpu0/cache/index0/shared_cpu_map\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e...]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中和 CPU 的硬件缓存相关的文件：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"nb\"\u003e.\u003c/span\u003e /sys/devices/system/cpu/cpu0/cache/index\u003cspan class=\"k\"\u003e*\u003c/span\u003e/level\n/sys/devices/system/cpu/cpu0/cache/index0/level:1\n/sys/devices/system/cpu/cpu0/cache/index1/level:1\n/sys/devices/system/cpu/cpu0/cache/index2/level:2\n/sys/devices/system/cpu/cpu0/cache/index3/level:3\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"nb\"\u003e.\u003c/span\u003e /sys/devices/system/cpu/cpu0/cache/index\u003cspan class=\"k\"\u003e*\u003c/span\u003e/size\n/sys/devices/system/cpu/cpu0/cache/index0/size:32K\n/sys/devices/system/cpu/cpu0/cache/index1/size:32K\n/sys/devices/system/cpu/cpu0/cache/index2/size:256K\n/sys/devices/system/cpu/cpu0/cache/index3/size:8192K\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到该 CPU 有：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e2 个 L1 cache，各 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e32 KB\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e1 个 L2 cache，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e256 KB\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e1 个 L3 cache，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e8 MB\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4 id=\"424-delay-accounting\"\u003e4.2.4. Delay Accounting\u003c/h4\u003e\n\n\u003cp\u003e开启 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCONFIG_TASK_DELAY_ACCT\u003c/code\u003e 后，Linux 会记录下列状态的延迟信息：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e调度器延迟\u003c/strong\u003e（Scheduler latency）: waiting for a turn on-CPU\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eBlock I/O\u003c/strong\u003e: waiting for a block I/O to complete\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e内存换出\u003c/strong\u003e（Swapping）: waiting for paging (memory pressure)\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e内存回收\u003c/strong\u003e（Memory reclaim）: waiting for the memory reclaim routine\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e技术上来时，调度器延迟的计算用的是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc\u003c/code\u003e 下面的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/schedstat\u003c/code\u003e 数据。\u003c/p\u003e\n\n\u003cp\u003e内核 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDocumentation/accounting\u003c/code\u003e 目录中有相关文档，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edelay-accounting.txt\u003c/code\u003e, and an\nexample consumer, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003egetdelays.c\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ ./getdelays -dp \u0026lt;pid\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"426-其他观测源\"\u003e4.2.6. 其他观测源\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003eCPU performance counters: 提供底层性能信息的\u003cstrong\u003e可编程硬件寄存器\u003c/strong\u003e（可以用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf\u003c/code\u003e）\u003c/li\u003e\n  \u003cli\u003ePer-process tracing: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estrace\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eptrace\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eKernel tracing: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eNetwork sniffing: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpdump\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eProcess accounting: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eatop\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eSystem calls\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"43-dtrace\"\u003e4.3 DTrace\u003c/h2\u003e\n\n\u003ch2 id=\"44-systemtap\"\u003e4.4 SystemTap\u003c/h2\u003e\n\n\u003cp\u003eSystemTap 与 DTrace 功能类似，是在 DTrace 移植到 Linux 之前开发的。\u003c/p\u003e\n\n\u003cp\u003e探测点称为 \u003cem\u003eprobes\u003c/em\u003e。\u003c/p\u003e\n\n\u003cp\u003eSystemTap 利用了其他内核基础设施：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e静态探测：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etracepoints\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e动态探测：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekprobes\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e用户态探测：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003euprobes\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThese sources are also used by other tools (perf, LTTng).\u003c/p\u003e\n\n\u003ch2 id=\"45-perf\"\u003e4.5. perf\u003c/h2\u003e\n\n\u003cp\u003eLinux Performance Events (LPE)。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"ch_5\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"5-applications\"\u003e5. Applications\u003c/h1\u003e\n\n\u003ch3 id=\"543-系统调用分析\"\u003e5.4.3 系统调用分析\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003estrace \u003cspan class=\"nt\"\u003e-ttt\u003c/span\u003e \u003cspan class=\"nt\"\u003e-T\u003c/span\u003e \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 1884\n1356982510.395542 close\u003cspan class=\"o\"\u003e(\u003c/span\u003e3\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0 \u0026lt;0.000267\u0026gt;\n1356982510.396064 close\u003cspan class=\"o\"\u003e(\u003c/span\u003e4\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0 \u0026lt;0.000293\u0026gt;\n1356982510.396617 ioctl\u003cspan class=\"o\"\u003e(\u003c/span\u003e255, TIOCGPGRP, \u003cspan class=\"o\"\u003e[\u003c/span\u003e1975]\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0 \u0026lt;0.000019\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e参数：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-ttt\u003c/code\u003e: 打印时间戳，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eus\u003c/code\u003e 精度\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-T\u003c/code\u003e: 打印系统调用耗时（最后一列），单位秒\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-p PID\u003c/code\u003e: 进程 ID\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-c\u003c/code\u003e 打印 summary：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003estrace \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 1884\n^CProcess 1884 detached\n% \u003cspan class=\"nb\"\u003etime \u003c/span\u003eseconds  usecs/call calls errors syscall\n\u003cspan class=\"nt\"\u003e------\u003c/span\u003e \u003cspan class=\"nt\"\u003e--------\u003c/span\u003e \u003cspan class=\"nt\"\u003e----------\u003c/span\u003e \u003cspan class=\"nt\"\u003e-----\u003c/span\u003e \u003cspan class=\"nt\"\u003e------\u003c/span\u003e \u003cspan class=\"nt\"\u003e-------\u003c/span\u003e\n83.29  0.007994 9          911   455    wait4\n14.41  0.001383 3          455          clone\n0.85   0.000082 0          2275         ioctl\n0.68   0.000065 0          910          close\n0.63   0.000060 0          4551         rt_sigprocmask\n0.15   0.000014 0          455          setpgid\n0.00   0.000000 0          455          rt_sigreturn\n0.00   0.000000 0          455          pipe\n\u003cspan class=\"nt\"\u003e------\u003c/span\u003e \u003cspan class=\"nt\"\u003e--------\u003c/span\u003e \u003cspan class=\"nt\"\u003e----------\u003c/span\u003e \u003cspan class=\"nt\"\u003e-----\u003c/span\u003e \u003cspan class=\"nt\"\u003e------\u003c/span\u003e \u003cspan class=\"nt\"\u003e-------\u003c/span\u003e\n100.00 0.009598            10467 455    total\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etime\u003c/code\u003e: 耗时百分比分布\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eseconds\u003c/code\u003e: 总 system CPU time，单位秒\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eusecs/call\u003c/code\u003e: 系统调用平均 system CPU time，单位 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eus\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecalls\u003c/code\u003e: 系统调用次数\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esyscall\u003c/code\u003e: 系统调用名\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estrace\u003c/code\u003e 是有开销的\u003c/strong\u003e，看下面的例子：执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e500\u003c/code\u003e 万次 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1 KB\u003c/code\u003e 的文件传输：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ dd if=/dev/zero of=/dev/null bs=1k count=5000k\n5120000+0 records in\n5120000+0 records out\n5242880000 bytes (5.2 GB) copied, 1.91247 s, 2.7 GB/s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e加上 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estrace\u003c/code\u003e 之后，\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ strace -c dd if=/dev/zero of=/dev/null bs=1k count=5000k\n5120000+0 records in\n5120000+0 records out\n5242880000 bytes (5.2 GB) copied, 140.722 s, 37.3 MB/s\n\n% time seconds usecs/call calls errors syscall\n------ ----------- ----------- --------- ------\n51.46  0.008030 0         5120005 read\n48.54  0.007574 0         5120003 write\n...                       \n0.00   0.000000 0         1       set_robust_list\n------ ----------- ----------- --------- -----\n100.00 0.015604 10240092 19 total\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e耗时从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1.9s\u003c/code\u003e 变成了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e140s\u003c/code\u003e，\u003cstrong\u003e慢了 73 倍\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"ch_6\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"6-cpu\"\u003e6. CPU\u003c/h1\u003e\n\n\u003cul\u003e\n  \u003cli\u003eCPI: cycles per instruction\u003c/li\u003e\n  \u003cli\u003eIPC: instructions per cycle\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"641-hardware\"\u003e6.4.1 Hardware\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003eMicrocode ROM\u003c/strong\u003e：快速将指令转换成电路信号（converts instructions to circuit signals）\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/6-6.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 6-6. CPU cache hierarchy\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eLevel 1 instruction cache (I$)\u003c/li\u003e\n  \u003cli\u003eLevel 1 data cache (D$)\u003c/li\u003e\n  \u003cli\u003eTranslation lookaside buffer (TLB)\u003c/li\u003e\n  \u003cli\u003eLevel 2 cache (E$)\u003c/li\u003e\n  \u003cli\u003eLevel 3 cache (optional)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"642-software\"\u003e6.4.2 Software\u003c/h3\u003e\n\n\u003cp\u003eLinux 的调度算法：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eRT\u003c/code\u003e：实时调度（real-time workloads）\n    \u003cul\u003e\n      \u003cli\u003e优先级范围：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0–99\u003c/code\u003e (MAX_RT_PRIO–1)\u003c/li\u003e\n      \u003cli\u003e复杂度：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eO(n)\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eO(1)\u003c/code\u003e：Linux 2.6 默认调度器\n    \u003cul\u003e\n      \u003cli\u003e复杂度：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eO(1)\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCFS\u003c/code\u003e：完全公平调度器（completely fair scheduling），\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e2.6.23\u003c/code\u003e 默认\n    \u003cul\u003e\n      \u003cli\u003e用红黑树替换原来的 run queue\u003c/li\u003e\n      \u003cli\u003e查找更快\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"/blog/linux-cfs-design-and-implementation-zh/\"\u003e\u003cmark\u003eLinux CFS 调度器：原理、设计与内核实现（2023）\u003c/mark\u003e\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e用户进程能够通过调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esched_setscheduler()\u003c/code\u003e 来设置调度器策略（scheduler policy）。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eRT 支持：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_RR\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_FIFO\u003c/code\u003e 策略\u003c/li\u003e\n  \u003cli\u003eCFS 支持： \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_NORMAL\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSCHED_BATCH\u003c/code\u003e 策略\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e调度策略：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eRR\u003c/code\u003e: SCHED_RR is round-robin scheduling\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFIFO\u003c/code\u003e: SCHED_FIFO is first-in first-out scheduling\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNORMAL\u003c/code\u003e: SCHED_NORMAL (previously known as SCHED_OTHER) is time-sharing\nscheduling and is the default for user processes. The scheduler dynamically\nadjusts priority based on the scheduling class. For O(1), the time slice\nduration is set based on the static priority: longer durations for\nhigher-priority work. For CFS, the time slice is dynamic.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBATCH\u003c/code\u003e: SCHED_BATCH is similar to SCHED_NORMAL, but with the expectation that\nthe thread will be CPU-bound and should not be scheduled to interrupt other\nI/O-bound interactive work.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"651-tools-method\"\u003e6.5.1. Tools Method\u003c/h3\u003e\n\n\u003cp\u003e查看 CPU 相关信息的工具：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003euptime\u003c/code\u003e：启动时间、loadavg\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evmstat\u003c/code\u003e：查看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eidle\u003c/code\u003e 列，小于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10%\u003c/code\u003e 可能就有问题\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003empstat\u003c/code\u003e：查看哪个 CPU 比较繁忙，identifying a possible thread scalability problem.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etop\u003c/code\u003e：哪个进程消耗了最多的 CPU 资源\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epidstat\u003c/code\u003e：将 CPU 消耗分解到用户时间和系统时间\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf/dtrace/stap/oprofile\u003c/code\u003e：Profiling CPU\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf/cpustat\u003c/code\u003e：测量 CPI\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"655-cycle-analysis\"\u003e6.5.5. Cycle Analysis\u003c/h3\u003e\n\n\u003cp\u003e利用 CPU performance counters (CPCs) 可以在 cycle 级别理解 CPU 利用率。例如，可\n以看到时间是花在：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eLevel 1, 2, or 3 cache misses\u003c/li\u003e\n  \u003cli\u003ememory I/O\u003c/li\u003e\n  \u003cli\u003eresource I/O\u003c/li\u003e\n  \u003cli\u003efloating-point operations or other activity\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"658-调整进程优先级\"\u003e6.5.8. 调整进程优先级\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enice()\u003c/code\u003e 系统调用。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003enice 值越大，优先级越低\u003c/mark\u003e\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003eroot 用户可以设置负值，表示高优先级\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"66-analysis\"\u003e6.6. Analysis\u003c/h2\u003e\n\n\u003ch3 id=\"661-uptime\"\u003e6.6.1. uptime\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003euptime\u003c/code\u003e 除了打印启动时间，还打印 load average：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ uptime\n9:04pm up 268 day(s), 10:16, 2 users, load average: 7.76, 8.32, 8.60\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后三个数字分别是过去 1、5 和 15 分钟的 load average：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e如果 \u003cstrong\u003e\u003cmark\u003eload average 大于 CPU 数量\u003c/mark\u003e\u003c/strong\u003e，说明负载过高，\u003cstrong\u003e\u003cmark\u003e某些线性处于 waiting 状态\u003c/mark\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e举个例子：一个现代 64 核 CPU，其 load average 为 128。这表示平均来说，每个 CPU 上：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e总有一个线程在执行\u003c/li\u003e\n  \u003cli\u003e另有一个线程在等待 CPU 资源\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eLinux load average 的计算\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e包括了磁盘 I/O 信息（处于不可中断状态的磁盘 I/O 任务的数量）\u003c/li\u003e\n  \u003cli\u003eload average \u003cstrong\u003e\u003cmark\u003e不再与 CPU 数量划等号\u003c/mark\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"662-vmstat\"\u003e6.6.2. vmstat\u003c/h3\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ vmstat 1\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n 1  0      0 12922340   6196 93628288    0    0     0     0 11715 22285  3  3 94  0  0\n 3  0      0 12906672   6196 93628400    0    0     0   568 13844 27175  4  3 93  0  0\n 2  0      0 12921580   6196 93628592    0    0     0  2136 15105 28475  4  3 92  0  0\n 8  0      0 12886696   6196 93628976    0    0     0  1108 19115 37964  6  4 90  0  0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003er\u003c/code\u003e: \u003cstrong\u003e\u003cmark\u003erun-queue length（可运行的线程总数）\u003c/mark\u003e\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eus\u003c/code\u003e: user-time\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esy\u003c/code\u003e: system-time (kernel)\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eid\u003c/code\u003e: idle\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewa\u003c/code\u003e: wait I/O, which measures CPU idle when threads are blocked on disk I/O\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003est\u003c/code\u003e: stolen (not shown in the output), which for virtualized environments shows CPU time spent servicing other tenants\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003er\u003c/code\u003e 表示的是\u003cstrong\u003e\u003cmark\u003e所有 CPU 上可运行线程的总数\u003c/mark\u003e\u003c/strong\u003e，除了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003er\u003c/code\u003e 之外，上面其他所有列都是所有\nCPU 的一个平均值。\u003c/p\u003e\n\n\u003ch3 id=\"663-mpstat\"\u003e6.6.3. mpstat\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003e多处理器统计工具\u003c/mark\u003e\u003c/strong\u003e（multiprocessor statistics tool），打印 per CPU 统计信息。\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ mpstat -P ALL 1\n\n09:05:10 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle\n09:05:11 AM  all    0.00    0.00    0.25    0.00    0.00    0.25    0.00    0.00    0.00   99.49\n09:05:11 AM    0    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n09:05:11 AM    1    0.00    0.00    0.00    0.00    0.00    1.00    0.00    0.00    0.00   99.00\n09:05:11 AM    2    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n09:05:11 AM    3    0.00    0.00    1.03    0.00    0.00    0.00    0.00    0.00    0.00   98.97\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-P ALL\u003c/code\u003e 选项打印每个 CPU 的统计。每列数据：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCPU\u003c/code\u003e: logical CPU ID, or all for summary\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e%usr\u003c/code\u003e: user-time\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e%nice\u003c/code\u003e: user-time for processes with a nice’d priority\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e%sys\u003c/code\u003e: system-time (kernel)\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e%iowait\u003c/code\u003e: I/O wait\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e%irq\u003c/code\u003e: 硬件中断\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e%soft\u003c/code\u003e: 软件中断\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e%steal\u003c/code\u003e: time spent servicing other tenants\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e%guest\u003c/code\u003e: CPU time spent in guest virtual machines\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e%idle\u003c/code\u003e: idle\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e排查网络丢包时，有时会关注其中的\u003cstrong\u003e硬中断\u003c/strong\u003e和\u003cstrong\u003e软中断\u003c/strong\u003e列。\u003c/p\u003e\n\n\u003ch3 id=\"664-sar\"\u003e6.6.4. sar\u003c/h3\u003e\n\n\u003cp\u003eSystem Activity Reporter, sar(1).\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-P ALL\u003c/code\u003e：所有 CPU\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-u\u003c/code\u003e：打印 system-wide average only\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-q\u003c/code\u003e：includes run-queue size as runq-sz (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewaiting\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erunning\u003c/code\u003e 状态的线程数量，和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evmstat\u003c/code\u003e 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003er\u003c/code\u003e 列一样) and load averages\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"665-ps\"\u003e6.6.5. ps\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003eProcess Status\u003c/strong\u003e command, ps(1).\u003c/p\u003e\n\n\u003cp\u003eBSD 风格参数不带 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-\u003c/code\u003e：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ea\u003c/code\u003e：list all users\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eu\u003c/code\u003e：with extended user-oriented details\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ex\u003c/code\u003e：include processes without a terminal\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ ps aux\nUSER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot           1  0.0  0.2 168932 13124 ?        Ss   Apr26   0:20 /sbin/init auto noprompt\nroot           2  0.0  0.0      0     0 ?        S    Apr26   0:00 [kthreadd]\nroot           3  0.0  0.0      0     0 ?        I\u0026lt;   Apr26   0:00 [rcu_gp]\nroot           4  0.0  0.0      0     0 ?        I\u0026lt;   Apr26   0:00 [rcu_par_gp]\nroot           6  0.0  0.0      0     0 ?        I\u0026lt;   Apr26   0:00 [kworker/0:0H-kblockd]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eUNIX 风格：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-e\u003c/code\u003e：list every process\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-f\u003c/code\u003e：full details\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ ps -ef\nUID          PID    PPID  C STIME TTY          TIME CMD\nroot           1       0  0 Apr26 ?        00:00:20 /sbin/init auto noprompt\nroot           2       0  0 Apr26 ?        00:00:00 [kthreadd]\nroot           3       2  0 Apr26 ?        00:00:00 [rcu_gp]\nroot           4       2  0 Apr26 ?        00:00:00 [rcu_par_gp]\nroot           6       2  0 Apr26 ?        00:00:00 [kworker/0:0H-kblockd]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTIME\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e%CPU\u003c/code\u003e 两列和 CPU 相关：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eTIME\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e：进程\u003cstrong\u003e自启动以来消耗的所有 CPU 时间\u003c/strong\u003e（user + system），格式 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehours:minutes:seconds\u003c/code\u003e。\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e%CPU\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e：进程在\u003cstrong\u003e\u003cmark\u003e过去一秒内消耗的所有 CPU\u003c/mark\u003e\u003c/strong\u003e（usage）。\n单线程、CPU 密集型进程，这一列会显示 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e100%\u003c/code\u003e；两个线程、CPU 密集型会显示 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e200%\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"666-top\"\u003e6.6.6. top\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etop\u003c/code\u003e 是最常用的查看系统性能的工具，但要注意，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etop\u003c/code\u003e 本身也可能会消耗大量资源，因\n为它要遍历 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc\u003c/code\u003e 下面的文件，通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eopen/read/close\u003c/code\u003e 等系统调用来获取它需要的数\n据。\u003c/p\u003e\n\n\u003cp\u003e由于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etop\u003c/code\u003e 是对 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc\u003c/code\u003e 进行快照（snapshot），因此它\u003cstrong\u003e\u003cmark\u003e无法捕捉到生命周期非常短的进程\u003c/mark\u003e\u003c/strong\u003e（shot-lived processes），\n例如 CI/CD 里面的某些 job。\u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eatop\u003c/code\u003e 是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etop\u003c/code\u003e 的增强版\u003c/strong\u003e，利用了进程审计（process accounting），能捕捉生命周期非常短的进程。\u003c/p\u003e\n\n\u003ch3 id=\"668-pidstat\"\u003e6.6.8. pidstat\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epidstat(1)\u003c/code\u003e 打印\u003cstrong\u003e\u003cmark\u003e进程或线程的 CPU 使用率\u003c/mark\u003e\u003c/strong\u003e，默认只显示活跃进程：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ pidstat 1\n09:19:11 AM   UID       PID    %usr %system  %guest    %CPU   CPU  Command\n09:19:12 AM     0      1525    4.00    0.00    0.00    4.00    28  dockerd\n09:19:12 AM     0      1557    0.00    1.00    0.00    1.00    28  containerd\n09:19:12 AM     0     16262    1.00    0.00    0.00    1.00    30  tmux\n09:19:12 AM     0     82525    0.00    3.00    0.00    3.00    29  rsyslogd\n09:19:12 AM     0     94684    0.00    1.00    0.00    1.00    30  kworker/30:1-events_power_efficient\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-p ALL\u003c/code\u003e 选项打印所有进程，包括活跃和空闲进程\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-t\u003c/code\u003e 打印 per thread 统计信息\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"669-time\"\u003e6.6.9. time\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etime(1)\u003c/code\u003e 可用于测量程序的执行时间和 CPU 使用量。这个命令可能是操作系统提供的，\n也可能是 shell 内置的（built-in）。\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ time cksum Fedora-16-x86_64-Live-Desktop.iso\n560560652 633339904 Fedora-16-x86_64-Live-Desktop.iso\n\nreal 0m5.105s\nuser 0m2.810s\nsys  0m0.300s\n\n$ time cksum Fedora-16-x86_64-Live-Desktop.iso\n560560652 633339904 Fedora-16-x86_64-Live-Desktop.iso\n\nreal 0m2.474s\nuser 0m2.340s\nsys  0m0.130s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e上面同一条命令执行了两次。\u003c/p\u003e\n\n\u003cp\u003e第一次执行花了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5.1s\u003c/code\u003e\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eusr\u003c/code\u003e 部分：计算 checksum\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esys\u003c/code\u003e 部分：读取文件的系统调用（read）耗时\u003c/li\u003e\n  \u003cli\u003e剩余 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5.1-2.8-0.3 = 2.0s\u003c/code\u003e：可能是花在磁盘 I/O\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e第二次执行快了很多，因为文件被缓存了，介绍了磁盘 I/O 开销。\u003c/p\u003e\n\n\u003ch3 id=\"6612-perf\"\u003e6.6.12. perf\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e表 6-8. perf 子命令\u003c/p\u003e\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/table-6-8.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003ch4 id=\"system-profiling\"\u003eSystem Profiling\u003c/h4\u003e\n\n\u003cp\u003eProfiling 录制，会在当前目录生成一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf.data\u003c/code\u003e 文件：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-a\u003c/code\u003e：all CPUs\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-g\u003c/code\u003e：with call stacks\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-F 997\u003c/code\u003e：sample at 997 Hz\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esleep 10\u003c/code\u003e：sample for \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10s\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ perf record -a -g -F 997 sleep 10\n[ perf record: Woken up 44 times to write data ]\n[ perf record: Captured and wrote 13.251 MB perf.data (~578952 samples) ]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e分析（读取 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf.data\u003c/code\u003e 文件）：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--stdio\u003c/code\u003e：直接打印，而不是交互式模式\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ perf report --stdio\n[...]\n    72.98% swapper [kernel.kallsyms] [k] native_safe_halt\n           |\n           --- native_safe_halt\n               default_idle\n               cpu_idle\n    9.43% dd [kernel.kallsyms] [k] acpi_pm_read\n           |\n           --- acpi_pm_read\n               ktime_get_ts\n               |\n               |--87.75%-- __delayacct_blkio_start\n               |           io_schedule_timeout\n               |           balance_dirty_pages_ratelimited_nr\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch4 id=\"stat\"\u003estat\u003c/h4\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf stat\u003c/code\u003e 在 \u003cstrong\u003eCPU 时钟周期\u003c/strong\u003e维度打印进程的统计信息。\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ perf stat gzip test.log\n\n Performance counter stats for \u0026#39;gzip test.log\u0026#39;:\n\n          1.411368      task-clock (msec)         #    0.782 CPUs utilized\n                 0      context-switches          #    0.000 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n               104      page-faults               #    0.074 M/sec\n         3,227,785      cycles                    #    2.287 GHz\n         1,818,096      stalled-cycles-frontend   #   56.33% frontend cycles idle\n         3,543,315      instructions              #    1.10  insn per cycle\n                                                  #    0.51  stalled cycles per insn\n           606,245      branches                  #  429.544 M/sec\n            24,343      branch-misses             #    4.02% of all branches\n\n       0.001803835 seconds time elapsed\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-e\u003c/code\u003e 指定具体的事件（events）：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ perf list # list all events\n\n$ perf stat -e instructions,cycles,L1-dcache-load-misses,LLC-load-misses gzip test.log\n\n Performance counter stats for \u0026#39;gzip test.log\u0026#39;:\n\n         1,126,600      instructions              #    0.65  insn per cycle\n         1,725,828      cycles\n            20,414      L1-dcache-load-misses\n             2,144      LLC-load-misses\n\n       0.001142968 seconds time elapsed\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e注意其中的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0.65 insn per cycle\u003c/code\u003e，表示每个时钟周期执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0.65\u003c/code\u003e 条命令（IPC）.\u003c/p\u003e\n\n\u003ch4 id=\"software-tracing\"\u003eSoftware Tracing\u003c/h4\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf record -e\u003c/code\u003e 可用来追踪内核调度器的活动。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf list\u003c/code\u003e 列出了可追踪点，其中包括\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003esoftware events\u003c/li\u003e\n  \u003cli\u003etracepoint events (static probes)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ perf list\ncontext-switches OR cs [Software event]\ncpu-migrations OR migrations [Software event]\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e下面的例子跟踪\u003cstrong\u003e\u003cmark\u003e应用程序离开 CPU（上下文切换）的事件\u003c/mark\u003e\u003c/strong\u003e（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-e context-switches\u003c/code\u003e），并记录其调用栈信息（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-g\u003c/code\u003e）：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ perf record -g -a -e context-switches sleep 10\n[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 1.387 MB perf.data (6239 samples) ]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ perf report --stdio\n#\n# Children      Self  Command          Shared Object            Symbol\n# ........  ........  ...............  .......................  ........................\n#\n    48.40%    48.40%  swapper          [kernel.kallsyms]        [k] schedule_idle\n            |\n            ---secondary_startup_64\n               |\n                --48.24%--start_secondary\n                          cpu_startup_entry\n                          do_idle\n                          schedule_idle\n                          schedule_idle\n\n    48.40%     0.00%  swapper          [kernel.kallsyms]        [k] secondary_startup_64\n            |\n            ---secondary_startup_64\n               |\n                --48.24%--start_secondary\n                          cpu_startup_entry\n                          do_idle\n                          schedule_idle\n                          schedule_idle\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"6614-other-tools\"\u003e6.6.14. Other Tools\u003c/h3\u003e\n\n\u003cp\u003e其他 Linux CPU 性能工具：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoprofile\u003c/code\u003e: the original CPU profiling tool by John Levon.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehtop\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eatop\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/cpuinfo\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egetdelays.c\u003c/code\u003e: This is an example of delay accounting observability and includes CPU scheduler latency per process.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evalgrind\u003c/code\u003e: a memory debugging and profiling toolkit [6]. It contains callgrind, a tool to trace function calls and gather a call graph, which can be visualized using kcachegrind; and cachegrind for analysis of hardware cache usage by a given program.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"67\"\u003e6.7\u003c/h2\u003e\n\n\u003ch3 id=\"671-ad-hoc\"\u003e6.7.1 Ad Hoc\u003c/h3\u003e\n\n\u003cp\u003e下面的命令创建一个单线程、CPU \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e100%\u003c/code\u003e 任务：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ewhile :; do :; done \u0026amp;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"672-sysbench\"\u003e6.7.2 SysBench\u003c/h3\u003e\n\n\u003cp\u003eSysBench 自带了一个简单的 CPU benchmark 工具，\u003cstrong\u003e计算质数\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ sysbench --threads=8 --test=cpu --cpu-max-prime=100000 run\n\nRunning the test with following options:\nNumber of threads: 2\nInitializing random number generator from current time\n\nPrime numbers limit: 10000\nInitializing worker threads...\nThreads started!\n\nCPU speed:\n    events per second:  1434.64\n\nGeneral statistics:\n    total time:                          10.0067s\n    total number of events:              14359\n\nLatency (ms):\n         min:                                    1.11\n         avg:                                    1.39\n         max:                                   65.17\n         95th percentile:                        1.52\n         sum:                                19970.36\n\nThreads fairness:\n    events (avg/stddev):           7179.5000/437.50\n    execution time (avg/stddev):   9.9852/0.00\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"682-调度优先级和类别class\"\u003e6.8.2. 调度优先级和类别（class）\u003c/h3\u003e\n\n\u003cp\u003e设置 nice 值（越大优先级越低）：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ nice -n 19 command\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"684-绑定-cpu\"\u003e6.8.4. 绑定 CPU\u003c/h3\u003e\n\n\u003cp\u003e增加缓存和内存命中率：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ taskset -pc 7-10 10790\npid 10790\u0026#39;s current affinity list: 0-15\npid 10790\u0026#39;s new affinity list: 7-10\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"685-独占-cpuexclusive-cpu-sets\"\u003e6.8.5. 独占 CPU（Exclusive CPU Sets）\u003c/h3\u003e\n\n\u003cp\u003e绑定 CPU 只是保证进程只会在某些 CPU 上执行，但这些 CPU 并不是被该进程独占的。\u003c/p\u003e\n\n\u003cp\u003e独占 CPU 需要 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpuset\u003c/code\u003e。下面的命令创建一个 exclusive cpu set：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ mkdir /dev/cpuset\n$ mount -t cpuset cpuset /dev/cpuset\n\n$ cd /dev/cpuset\n$ mkdir prodset          # 创建一个名为 \u0026#34;prodset\u0026#34; 的 cpuset\n\n$ cd prodset\n$ echo 7-10 \u0026gt; cpus       # 分配 CPUs 7-10\n$ echo 1 \u0026gt; cpu_exclusive # 设置独占标记（exclusive）\n$ echo 1159 \u0026gt; tasks      # 绑定进程号（PID）\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca name=\"ch_7\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"7-memory\"\u003e7. Memory\u003c/h1\u003e\n\n\u003ch3 id=\"721-virtual-memory\"\u003e7.2.1. Virtual Memory\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/7-1.png\" width=\"65%\" height=\"65%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 7-1. 进程虚拟内存\u003c/p\u003e\n\n\u003ch3 id=\"723-demand-paging\"\u003e7.2.3. Demand Paging\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/7-2.png\" width=\"65%\" height=\"65%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 7-2. 缺页（page fault）示例\u003c/p\u003e\n\n\u003cp\u003e虚拟内存中，页面（page）可能处于以下某种状态：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eA. \u003cstrong\u003e未分配\u003c/strong\u003e（Unallocated）\u003c/li\u003e\n  \u003cli\u003eB. \u003cstrong\u003e已分配，但未映射\u003c/strong\u003e（Allocated, but unmapped (unpopulated and not yet faulted)）\u003c/li\u003e\n  \u003cli\u003eC. \u003cstrong\u003e已分配，且已映射到内存\u003c/strong\u003e（Allocated, and mapped to main memory (RAM)）\u003c/li\u003e\n  \u003cli\u003eD. \u003cstrong\u003e已分配，且已映射到 swap 设备\u003c/strong\u003e（Allocated, and mapped to the physical swap device (disk)）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e根据以上状态，定义两个术语：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eResident set size \u003cstrong\u003e\u003cmark\u003e(RSS，常驻内存)\u003c/mark\u003e\u003c/strong\u003e：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eC\u003c/code\u003e 状态的内存大小\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eVirtual memory size\u003c/strong\u003e：所有已分配区域之和（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eB+C+D\u003c/code\u003e）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"725-swapping换出\"\u003e7.2.5. Swapping（换出）\u003c/h3\u003e\n\n\u003cp\u003eSwapping：将整个进程在主存（main memory）和物理 swap 设备或 swap 文件之间移动。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eThis is the original Unix technique for managing main memory and\nis the origin of the term swap [Thompson 78].\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003e要换出一个进程，必须将其私有数据写到 swap 设备\u003c/strong\u003e，这包括 thread structures 和\n进程堆（匿名数据）。从文件系统中读来的且未被修改过的数据，可以丢弃，下次需要时再\n重新从文件系统读取。\u003c/p\u003e\n\n\u003cp\u003e进程被换出后，内核仍然能感知到它们，因为\u003cstrong\u003e进程的某些元数据是常驻内核内存（kernel\nmemory）的\u003c/strong\u003e。在进程换入时，内核会考虑：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e线程优先级\u003c/li\u003e\n  \u003cli\u003e等待磁盘时间（the time it was waiting on disk）\u003c/li\u003e\n  \u003cli\u003e进程大小（the size of the process）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e等待时间较长、体积比较小的进程会被优先换入。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eSwapping 会严重影响性能，因为被换出的进程在重新换入时需要大量磁盘 I/O\u003c/strong\u003e。\n对于早期 Unix 机器，例如 PDP-11（maximum process size 64 KB），swapping 是比较有用的。\u003c/p\u003e\n\n\u003ch3 id=\"726-用于文件系统缓存的内存\"\u003e7.2.6. 用于文件系统缓存的内存\u003c/h3\u003e\n\n\u003cp\u003e操作系统启动后内存使用量一直在增长是正常的，因为它会对文件系统进行缓存，提高读写\n性能。\u003c/p\u003e\n\n\u003cp\u003e当应用程序需要大量内存时，内核会自动释放用于文件系统缓存的内存。\u003c/p\u003e\n\n\u003ch3 id=\"728-内存分配器\"\u003e7.2.8. 内存分配器\u003c/h3\u003e\n\n\u003cp\u003e虚拟内存子系统负责物理内存的多任务执行（multitasking of physical memory）。\u003c/p\u003e\n\n\u003cp\u003e在虚拟内存空间内，具体的内存分配和放置（allocation and placement）则是由分配器（\nallocator）来完成的。这些分配器的实现方式包括：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e用户态函数库（user-land libraries）\u003c/li\u003e\n  \u003cli\u003e内核函数（kernel-based routines）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e分配器向程序员提供非常简单的编程接口（例如 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emalloc()\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efree()\u003c/code\u003e），不同的分配器\n性能差异可能很大。\u003c/p\u003e\n\n\u003ch2 id=\"73-architecture\"\u003e7.3 Architecture\u003c/h2\u003e\n\n\u003ch3 id=\"731-hardware\"\u003e7.3.1 Hardware\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/7-3.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 7-3. 对称内存访问（UMA）示例\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/7-4.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 7-4. 非对称内存访问（NUMA）示例\u003c/p\u003e\n\n\u003ch4 id=\"ddr-sdram1996\"\u003eDDR SDRAM（1996）\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003eDouble Data Rate Synchronous Dynamic Random-Access Memory (DDR SDRAM).\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003edouble data rate：在时钟信号的上升和下降沿都会进行数据传输（the transfer of\ndata on both the rise and fall of the clock signal）。\u003c/li\u003e\n  \u003cli\u003esynchronous：内存和 CPU 是同步操作（the memory being clocked synchronously with the CPUs）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e表 7-1. DDR 带宽\u003c/p\u003e\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/table-7-1.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003ch4 id=\"cpu-cache\"\u003eCPU Cache\u003c/h4\u003e\n\n\u003cul\u003e\n  \u003cli\u003eLevel 1: usually split into a separate instruction cache and data cache\u003c/li\u003e\n  \u003cli\u003eLevel 2: a cache for both instructions and data\u003c/li\u003e\n  \u003cli\u003eLevel 3: another larger level of cache\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"mmu\"\u003eMMU\u003c/h4\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/7-5.png\" width=\"75%\" height=\"75%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 7-5. 内存管理单元（MMU）\u003c/p\u003e\n\n\u003ch3 id=\"732-software\"\u003e7.3.2. Software\u003c/h3\u003e\n\n\u003ch4 id=\"释放内存\"\u003e释放内存\u003c/h4\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/7-6.png\" width=\"40%\" height=\"40%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 7-6. 释放内存\u003c/p\u003e\n\n\u003cp\u003e方式：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e空闲链表（Free list）: 一般每个 NUMA 节点一个链表。\u003c/li\u003e\n  \u003cli\u003eReaping（收割）：也称为 shrinking，当可用内存降低到某个阈值时，内核模块和内核\nslab 分配器立即释放某些低优先级内存。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e在 Linux 上，具体方式为：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e页面缓存（Page cache）\u003c/strong\u003e: 这是文件系统缓存。配置参数 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eswappiness\u003c/code\u003e，在某个阈\n值倾向于释放页面缓存，而不是 swap 出去。\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eSwapping\u003c/strong\u003e：由 page-out daemon \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekswapd\u003c/code\u003e 完成。\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eOOM killer\u003c/strong\u003e：寻找可被牺牲的进程（\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eselect_bad_process()\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e），\n然后干掉它（\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eoom_kill_process()\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e）。\n可能会在系统日志（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/var/log/messages\u003c/code\u003e）中打印 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026#34;Out of memory: Kill process\u0026#34;\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eswappiness\u003c/code\u003e 范围 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0-100\u003c/code\u003e，默认值 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e60\u003c/code\u003e：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e值越大，越倾向于 swap 方式\u003c/li\u003e\n  \u003cli\u003e值越小，越倾向于直接释放页面缓存方式\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"733-process-address-space\"\u003e7.3.3. Process Address Space\u003c/h3\u003e\n\n\u003cp\u003eLinux allocators:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ekernel-level: slab and SLUB\u003c/li\u003e\n  \u003cli\u003euser-level: glibc\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eslab: Linux 2.2 ~ 2.6 default\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e管理固定大小的对象缓存，这些对象可被循环利用（manages caches of objects of a specific size, allowing them to be recycled）\u003c/li\u003e\n  \u003cli\u003e无需页面分配过程，因此很快（quickly without the overhead of page allocation）\u003c/li\u003e\n  \u003cli\u003e适合内核内存分配，因为内核经常使用固定大小的结构体（fixed-size structs）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSLUB: Linux 2.6+ default\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e比 slab 性能更好（improved over slab）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eglibc，\u003cstrong\u003e为取得高性能，针对不同大小采用不同分配算法/策略\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e小对象：buddy algorithm\u003c/li\u003e\n  \u003cli\u003e大对象：tree lookup\u003c/li\u003e\n  \u003cli\u003e超级大对象：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emmap()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"741-tools-method\"\u003e7.4.1 Tools Method\u003c/h3\u003e\n\n\u003cp\u003e检查下列方面：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e页面扫描\u003c/strong\u003e（Page scanning）：持续的 page scanning (超过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10s\u003c/code\u003e) 是内存压力的征兆\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esar -B\u003c/code\u003e 查看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epgscan\u003c/code\u003e 列\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003ePaging: The paging of memory 是内存不足的进一步征兆。\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evmstat\u003c/code\u003e 查看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esi\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eso\u003c/code\u003e 列（here, the term swapping means anonymous paging)\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e可用内存\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evmstat 1\u003c/code\u003e：查看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efree\u003c/code\u003e 列\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003eOOM killer\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/var/log/messages\u003c/code\u003e 或 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edmesg\u003c/code\u003e 中搜索 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e“Out of memory”\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e进程占用内存排序，包括物理内存（RSS）和虚拟内存\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etop\u003c/code\u003e：具体看哪一列可能略有差异，参考文档 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eman top\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e跟踪内存分配情况，搞清内存使用量的根本原因\n    \u003cul\u003e\n      \u003cli\u003edtrace/stap/perf\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"75-analysis\"\u003e7.5 Analysis\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e表 7-4. 内存分析工具\u003c/p\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003e工具\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003e简介\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evmstat\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e物理和虚拟内存统计信息\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esar\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e历史统计信息\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eslabtop\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e内核 slab 分配器统计信息\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eps\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e进程状态（Process Status）\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etop\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e监控每个进程的内存使用情况\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epmap\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e进程地址空间统计信息\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDTrace\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e动态跟踪内存分配（allocating tracing）\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch3 id=\"751-vmstat\"\u003e7.5.1. vmstat\u003c/h3\u003e\n\n\u003cp\u003eVirtual Memory STATistics：系统内存监控状态的高层概览，包括当前的可用内存和\npaging 统计：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ vmstat 1\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n 1  0      0 5323620  39064 347756    0    0     7     3   24   32  0  0 100  0  0\n 0  0      0 5323620  39064 347868    0    0     0     0  122  132  0  0 100  0  0\n 0  0      0 5323620  39064 347868    0    0     0     0   95  128  0  0 100  0  0\n 0  0      0 5323620  39064 347868    0    0     0     0  104  132  0  0 100  0  0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eswpd\u003c/code\u003e: amount of swapped-out memory\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efree\u003c/code\u003e: free available memory\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebuff\u003c/code\u003e: memory in the buffer cache\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecache\u003c/code\u003e：\u003cstrong\u003e页面缓存\u003c/strong\u003e（memory in the page cache）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esi\u003c/code\u003e：\u003cstrong\u003e换入的内存\u003c/strong\u003e（memory swapped in (paging)）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eso\u003c/code\u003e：\u003cstrong\u003e换出的内存\u003c/strong\u003e（memory swapped out (paging)）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebuffer\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epage caches\u003c/code\u003e 将在第 8 章“文件系统”介绍。\u003c/p\u003e\n\n\u003cp\u003e如果 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esi\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eso\u003c/code\u003e 列的值持续非零，说明系统目前有内存压力，在持续地有页面换入换出\n。可以用其他工具来定位哪些进程在消耗内存。\u003c/p\u003e\n\n\u003cp\u003e参数：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-S\u003c/code\u003e：排序\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-m\u003c/code\u003e：以 MB 为单位显示\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ vmstat 1 -Sm\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n 0  0      0   5450     40    356    0    0     7     3   24   32  0  0 100  0  0\n 0  0      0   5450     40    356    0    0     0     0   96  123  0  0 100  0  0\n 0  0      0   5450     40    356    0    0     0     0   95  120  0  0 100  0  0\n 0  0      0   5450     40    356    0    0     0     0   90  116  0  0 100  0  0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-a\u003c/code\u003e 将 page cache 的活跃和非活跃内存分开展示：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ vmstat -a 1\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   free  inact active   si   so    bi    bo   in   cs us sy id wa st\n 1  0      0 5321860 166760 399344    0    0     7     3   24   32  0  0 100  0  0\n 0  0      0 5321948 166760 399504    0    0     0   892  141  143  0  0 100  0  0\n 0  0      0 5321948 166760 399504    0    0     0     0   97  121  0  0 100  0  0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果系统有持续的页面扫描（page scanning，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esr\u003c/code\u003e）活动，说明内存有压力。可以通过其\n他工具调查内存用在哪了。\u003c/p\u003e\n\n\u003ch3 id=\"752-sar\"\u003e7.5.2. sar\u003c/h3\u003e\n\n\u003cp\u003e参数：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-B\u003c/code\u003e: paging statistics\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-H\u003c/code\u003e: huge pages statistics\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-r\u003c/code\u003e: memory utilization\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-R\u003c/code\u003e: memory statistics\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-S\u003c/code\u003e: swap space statistics\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-W\u003c/code\u003e: swapping statistics\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e不同参数的输出中，每列的含义及其单位：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e+-----+-------------+-------------------------------------------------------------------------------+------------+\n|     | pgpgin/s    | page-ins                                                                      | KB/s       |\n|     | pgpgout/s   | page-outs                                                                     | KB/s       |\n|     | fault/s     | both major and minor faults                                                   | count/s    |\n|     | majflt/s    | major faults                                                                  | count/s    |\n| -B  | pgfree/s    | pages added to free list                                                      | count/s    |\n|     | pgscank/s   | pages scanned by background page-out daemon (kswapd)                          | count/s    |\n|     | pgscand/s   | direct page scans                                                             | count/s    |\n|     | pgsteal/s   | page and swap cache reclaims                                                  | count/s    |\n|     | %vmeff      | ratio of page steal/page scan, which shows page reclaim efficiency            | percent    |\n+-----+-------------+-------------------------------------------------------------------------------+------------|\n|     | hbhugfree   | free huge pages memory (large page size)                                      | KB         |\n| -H  | hbhugeused  | used huge pages memory                                                        | KB         |\n+-----+-------------+-------------------------------------------------------------------------------+------------|\n|     | kbmemfree   | free memory                                                                   | KB         |\n|     | kbmemused   | used memory (excluding the kernel)                                            | KB         |\n|     | kbbuffers   | buffer cache size                                                             | KB         |\n|     | kbcached    | page cache size                                                               | KB         |\n| -r  | kbcommit    | main memory committed: an estimate of the amount needed to serve the current  | KB         |\n|     |             | workload                                                                      |            |\n|     | %commit     | main memory committed for current workload, estimate                          | percent    |\n|     | kbactive    | active list memory size                                                       | KB         |\n|     | kbinact     | inactive list memory size                                                     | KB         |\n+-----+-------------+-------------------------------------------------------------------------------+------------|\n|     | frpg/s      | memory pages freed; negative indicates allocations                            | pages/s    |\n| -R  | bufpg/s     | buffer cache page additions (growth)                                          | pages/s    |\n|     | campg/s     | page cache page additions (growth)                                            | pages/s    |\n+-----+-------------+-------------------------------------------------------------------------------+------------+\n|     | kbswpfree   | free swap space                                                               | KB         |\n| -S  | kbswpused   | used swap space                                                               | KB         |\n|     | kbswpcad    | cached swap space: this resides in both main memory and the swap device and   | KB         |\n|     |             | so can be paged out without disk I/O                                          |            |\n+-----+-------------+-------------------------------------------------------------------------------+------------+\n|     | pswpin/s    | page-ins (Linux \u0026#34;swap-ins\u0026#34;)                                                   | pages/s    |\n| -W  | pswpout/s   | page-outs (Linux \u0026#34;swap-outs\u0026#34;)                                                 | pages/s    |\n+-----+-------------+-------------------------------------------------------------------------------+------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e要深入理解这些字段，可以查看内核源码（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emm/\u003c/code\u003e），尤其是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emm/vmscan.c\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e%vmeff\u003c/code\u003e 衡量的是页面回收效率（page reclaim efficiency）：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e值越大（高），表示回收速度越快，系统越健康；值越小（低）表示系统回收越慢，有问题\u003c/li\u003e\n  \u003cli\u003eman page 中说 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e100%\u003c/code\u003e 算高，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e30%\u003c/code\u003e 算低\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"753-slabtop\"\u003e7.5.3. slabtop\u003c/h3\u003e\n\n\u003cp\u003e打印内核 slab 缓存使用信息：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-sc\u003c/code\u003e：按 cache size 排序\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ slabtop -sc\n Active / Total Objects (% used)    : 543810 / 560981 (96.9%)\n Active / Total Slabs (% used)      : 11562 / 11562 (100.0%)\n Active / Total Caches (% used)     : 102 / 143 (71.3%)\n Active / Total Size (% used)       : 143821.87K / 149482.23K (96.2%)\n Minimum / Average / Maximum Object : 0.01K / 0.27K / 8.00K\n\n  OBJS ACTIVE  USE OBJ SIZE  SLABS OBJ/SLAB CACHE SIZE NAME\n 36305  35544  97%    0.59K    685       53     21920K inode_cache\n 13369  12010  89%    1.07K    461       29     14752K ext4_inode_cache\n103080 100524  97%    0.13K   1718       60     13744K kernfs_node_cache\n 71274  65417  91%    0.19K   1697       42     13576K dentry\n 12096  10238  84%    0.57K    216       56      6912K radix_tree_node\n  1656   1648  99%    4.00K    207        8      6624K kmalloc-4k\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这些信息来自 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/slabinfo\u003c/code\u003e，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evmstat -m\u003c/code\u003e 也会打印相同信息。\u003c/p\u003e\n\n\u003ch3 id=\"755-ps\"\u003e7.5.5. ps\u003c/h3\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ ps aux\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-o\u003c/code\u003e specify output columns:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ ps -eo\n    PID %MEM    VSZ   RSS COMMAND\n      1  0.1 167660 11484 systemd\n      2  0.0      0     0 kthreadd\n      3  0.0      0     0 rcu_gp\n      4  0.0      0     0 rcu_par_gp\n      6  0.0      0     0 kworker/0:0H-kblockd\n      8  0.0      0     0 mm_percpu_wq\n      9  0.0      0     0 ksoftirqd/0\n     10  0.0      0     0 rcu_sched\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"756-top\"\u003e7.5.6. top\u003c/h3\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ top\ntop - 16:52:43 up  4:25,  2 users,  load average: 0.00, 0.01, 0.00\nTasks: 242 total,   1 running, 241 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  0.0 us,  0.1 sy,  0.0 ni, 99.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nMiB Mem :   5994.5 total,   5170.5 free,    435.5 used,    388.6 buff/cache\nMiB Swap:   2048.0 total,   2048.0 free,      0.0 used.   5315.7 avail Mem\n\n    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND\n   1250 arthurc+  20   0   21052   6332   3268 S   0.3   0.1   0:06.65 tmux: server\n      1 root      20   0  167660  11484   8356 S   0.0   0.2   0:03.04 systemd\n      2 root      20   0       0      0      0 S   0.0   0.0   0:00.02 kthreadd\n      3 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 rcu_gp\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"758-pmap\"\u003e7.5.8. pmap\u003c/h3\u003e\n\n\u003cp\u003e列出进程的内存映射（memory mappings of a process）：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ ps -xs $(pidof vim)\n  UID     PID PENDING BLOCKED IGNORED    CAUGHT STAT TTY  TIME COMMAND\n 1000    1041 0000000 8014a03 0001000 180000000 Ss   ?    0:00 /lib/systemd/systemd --user\n 1000    1047 0000000 0000000 0001000 180000000 S    ?    0:00 (sd-pam)\n 1000    1061 0000000 0000000 0001000 180004002 SNsl ?    0:00 /usr/libexec/tracker-miner-fs\n 1000    1062 0000000 0000000 0380004 04b817efb S+   tty1 0:00 -bash\n 1000    1077 0000000 0000000 0001000 180000a00 Ssl  ?    0:00 /usr/libexec/gvfsd\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"7511-other-tools\"\u003e7.5.11. Other Tools\u003c/h3\u003e\n\n\u003cp\u003e其他查看内存性能的工具：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efree\u003c/code\u003e: 可用内存信息，with buffer cache and page cache (see Chapter 8, File Systems).\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edmesg\u003c/code\u003e: 搜索 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e“Out of memory”\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evalgrind\u003c/code\u003e: a performance analysis suite, including memcheck, a wrapper for user-level\nallocators for memory usage analysis including leak detection. This costs significant overhead;\nthe manual advises that it can cause the target to run 20 to 30 times slower [3].\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eswapon\u003c/code\u003e: to add and observe physical swap devices or files.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiostat\u003c/code\u003e: If the swap device is a physical disk or slice, device I/O may be observable using\niostat(1), which indicates that the system is paging.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf\u003c/code\u003e: investigate CPI, MMU/TSB events, and memory bus stall cycles from the\nCPU performance instrumentation counters. It also provides probes for page\nfaults and several kernel memory (kmem) events.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/zoneinfo\u003c/code\u003e：memory zone 统计（NUMA）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/buddyinfo\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"761-参数调优\"\u003e7.6.1. 参数调优\u003c/h3\u003e\n\n\u003cp\u003e可调参数见：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDocumentation/sysctl/vm.txt\u003c/code\u003e，可通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esysctl(8)\u003c/code\u003e 调节。\u003c/p\u003e\n\n\u003ch3 id=\"764-resource-controls\"\u003e7.6.4. Resource Controls\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eulimit\u003c/code\u003e：设置内存和虚拟内存使用大小。\u003c/p\u003e\n\n\u003cp\u003ecgroups 内存子系统提供了更多控制：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ememory.memsw.limit_in_bytes\u003c/code\u003e：最大允许的内存和 swap 空间，单位 Byte\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ememory.limit_in_bytes\u003c/code\u003e：最大允许的用户内存（user memory），包括文件缓存（file cache），单位 Byte\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ememory.swappiness\u003c/code\u003e：和前面提到的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evm.swappiness\u003c/code\u003e 类似，但应用于 group 级别\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ememory.oom_control\u003c/code\u003e：0 或 1，打开和关闭 OOM killer\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca name=\"ch_8\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"8-file-systems\"\u003e8. File Systems\u003c/h1\u003e\n\n\u003cp\u003e研究应用的 I/O 性能时，文件系统的性能比磁盘的性能更重要。\u003c/p\u003e\n\n\u003cp\u003e文件系统通过 caching, buffering, and asynchronous I/O 技术避免了直接将磁盘暴露给应用。\u003c/p\u003e\n\n\u003ch3 id=\"821-文件系统接口\"\u003e8.2.1. 文件系统接口\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/8-1.png\" width=\"65%\" height=\"65%\"/\u003e\u003c/p\u003e\n\n\u003ch3 id=\"822-文件系统缓存file-system-cache\"\u003e8.2.2. 文件系统缓存（File System Cache）\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/8-2.png\" width=\"65%\" height=\"65%\"/\u003e\u003c/p\u003e\n\n\u003ch3 id=\"83-concepts\"\u003e8.3. Concepts\u003c/h3\u003e\n\n\u003ch3 id=\"832-caching\"\u003e8.3.2. Caching\u003c/h3\u003e\n\n\u003cp\u003e机器启动后，文件系统会将部分内存用作缓存（cache），以提升读写性能，该过程对应用\n（applications）是透明的。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ecaching：提升读性能\u003c/li\u003e\n  \u003cli\u003ebuffering (in the cache)：提升写性能\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e表 8-1. 缓存类型\u003c/p\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003eCache\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eExample\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003ePage cache\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e操作系统的页面缓存\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e文件系统的主缓存（primary cache）\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eZFS ARC\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e文件系统的次级缓存（secondary cache）\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eZFS L2ARC\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e目录缓存\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e目录缓存，DNLC\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003einode 缓存\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003einode 缓存\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e设备缓存\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eZFS vdev\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e块设备缓存\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003ebuffer cache\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch3 id=\"836-write-back-caching写缓存\"\u003e8.3.6. Write-Back Caching（写缓存）\u003c/h3\u003e\n\n\u003cp\u003e异步写过程：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e应用调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewrite()\u003c/code\u003e，将执行过程交给内核\u003c/li\u003e\n  \u003cli\u003e数据从应用的地址空间（用户空间）复制到内核\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewrite\u003c/code\u003e 系统调用完成，内核返回，将执行过程交回应用\u003c/li\u003e\n  \u003cli\u003e某个异步的内核任务将数据写到磁盘\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e文件系统也提供了同步写接口，等待写入磁盘后才返回。\u003c/p\u003e\n\n\u003ch3 id=\"838-raw-and-direct-io\"\u003e8.3.8. Raw and Direct I/O\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e裸 I/O（Raw I/O）绕过（bypass）文件系统，直接写到设备上\u003c/li\u003e\n  \u003cli\u003e直接 I/O（Direct I/O）仍然使用文件系统，但绕过（bypass）文件系统缓存\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"8313-文件系统操作耗时\"\u003e8.3.13. 文件系统操作耗时\u003c/h3\u003e\n\n\u003cp\u003eIntel Xeon 2.4 GHz 多处理器：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e表 8-2. 缓存类型\u003c/p\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003e操作\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003e平均耗时（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eus\u003c/code\u003e）\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eopen()\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e2.2\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eclose()\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e0.7\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eread()  4KB   (cached)\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e3.3\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eread()  128KB (cached)\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e13.9\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewrite() 4KB   (async)\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e9.3\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewrite() 128KB (async)\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e55.2\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e可以看到，\u003cstrong\u003e写比读慢 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3\u003c/code\u003e 倍左右\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"8314-特殊文件系统\"\u003e8.3.14. 特殊文件系统\u003c/h3\u003e\n\n\u003cp\u003e用于特殊目的的文件系统，例如：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e临时文件（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/tmp\u003c/code\u003e）\u003c/li\u003e\n  \u003cli\u003e内核设备文件（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/dev\u003c/code\u003e）\u003c/li\u003e\n  \u003cli\u003e系统统计（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc\u003c/code\u003e）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"841-文件系统-io-栈\"\u003e8.4.1. 文件系统 I/O 栈\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/8-6.png\" width=\"40%\" height=\"40%\"/\u003e\u003c/p\u003e\n\n\u003ch3 id=\"843-文件系统缓存\"\u003e8.4.3. 文件系统缓存\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/8-10.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\n\u003ch4 id=\"页面缓存page-cache\"\u003e页面缓存（Page Cache）\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003e页面缓存的大小是动态的\u003c/strong\u003e，内存比较空闲的时候缓存会变大，内存紧张的时候会自动释\n放一些缓存（见第 7 章的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eswapiness\u003c/code\u003e 配置项）。\u003c/p\u003e\n\n\u003cp\u003e修改过的（dirty）页面会被异步地刷到磁盘。\u003c/p\u003e\n\n\u003cp\u003e触发异步刷的场景：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e过了某个固定时间间隔（例如 30s）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esync()\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efsync()\u003c/code\u003e, or \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emsync()\u003c/code\u003e 系统调用\u003c/li\u003e\n  \u003cli\u003e脏页面过多（dirty_ratio）\u003c/li\u003e\n  \u003cli\u003e页面缓存空间不足（No available pages in the page cache）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e系统内存不足时，另一个内核线程 —— page-out daemon（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekswapd\u003c/code\u003e，也叫 page scanner）\n—— 也可能会调度脏页面写到磁盘的操作。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekswapd\u003c/code\u003e 和异步 flush 线程都是内核线性，在某些性能工具的输出中可以看到。\u003c/p\u003e\n\n\u003ch3 id=\"845-文件系统类型\"\u003e8.4.5. 文件系统类型\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003eBerkeley Fast File System (FFS)\u003c/li\u003e\n  \u003cli\u003eUFS: FFS was introduced in SunOS 1.0 in 1984 as UFS\u003c/li\u003e\n  \u003cli\u003eext3/ext4\u003c/li\u003e\n  \u003cli\u003eZFS: ZFS was developed by Sun Microsystems and released in 2005\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebtrfs\u003c/code\u003e: B-tree file system (btrfs) is based on copy-on-write B-trees, by Oracle, 2014\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"846-volumes-and-pools\"\u003e8.4.6. Volumes and Pools\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e最初的文件系统建立在单个磁盘（disk）或磁盘分区（disk partition）上\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003eVolumes 和 pools 使得文件系统能够建立在多个磁盘上，并且支持不同的 RAID 策略（见第 9 章）。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eVolume 将多个磁盘抽象为一个虚拟磁盘\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e如果文件系统是建立在多个完整磁盘上（而不是 slice 或 partition），volume 能够\n\u003cstrong\u003e隔离 workload\u003c/strong\u003e，减少竞争导致的性能下降\u003c/li\u003e\n  \u003cli\u003e一个 volume 只支持一种文件系统\u003c/li\u003e\n  \u003cli\u003eLVM：Logical Volume Manager\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ePool 方式将多个磁盘作为一个池子，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e同一个 pool 支持多个文件系统\u003c/li\u003e\n  \u003cli\u003e文件系统和磁盘解耦\u003c/li\u003e\n  \u003cli\u003e现代文件系统多采用这种方式，例如 ZFS 和 btrfs\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/8-13.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003ch3 id=\"852-latency-analysis\"\u003e8.5.2. Latency Analysis\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/8-14.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"86-analysis\"\u003e8.6. Analysis\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e表 8-6. 文件系统相关工具\u003c/p\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003e工具\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003e简介\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estrace\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003edebug 系统调用\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDTrace\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e动态跟踪文件系统操作和耗时\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efree\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e缓存用量统计\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etop\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e内存使用情况\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evmstat\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e虚拟内存情况\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esar\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e各种历史统计\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eslabtop\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e内核 slab 分配器统计\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/meminfo\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e各种文件系统和缓存统计\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch3 id=\"8610-sar\"\u003e8.6.10. sar\u003c/h3\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ sar -v 1\n\n05:50:31 PM dentunusd   file-nr  inode-nr    pty-nr\n05:50:32 PM     34510      2720     50212         4\n05:50:33 PM     34510      2720     50212         4\n05:50:34 PM     34510      2720     50212         4\n05:50:35 PM     34510      2720     50212         4\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edentunusd\u003c/code\u003e：未使用的目录条目缓存（directory entry cache）的数量（即可用数量）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efile-nr\u003c/code\u003e：已使用的文件句柄（file handles）的数量\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einode-nr\u003c/code\u003e：已使用的 inode 数量\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"8611-slabtop\"\u003e8.6.11. slabtop\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eslabtop\u003c/code\u003e 的输出中包含了一些文件系统缓存相关的信息：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ slabtop -sc\n Active / Total Objects (% used)    : 543810 / 560981 (96.9%)\n Active / Total Slabs (% used)      : 11562 / 11562 (100.0%)\n Active / Total Caches (% used)     : 102 / 143 (71.3%)\n Active / Total Size (% used)       : 143821.87K / 149482.23K (96.2%)\n Minimum / Average / Maximum Object : 0.01K / 0.27K / 8.00K\n\n  OBJS ACTIVE  USE OBJ SIZE  SLABS OBJ/SLAB CACHE SIZE NAME\n 36305  35544  97%    0.59K    685       53     21920K inode_cache\n 13369  12010  89%    1.07K    461       29     14752K ext4_inode_cache\n103080 100524  97%    0.13K   1718       60     13744K kernfs_node_cache\n 71274  65417  91%    0.19K   1697       42     13576K dentry\n 12096  10238  84%    0.57K    216       56      6912K radix_tree_node\n  1656   1648  99%    4.00K    207        8      6624K kmalloc-4k\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e上面部分是整体统计，下面部分是按类型统计：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edentry\u003c/code\u003e: dentry cache（目录缓存）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einode_cache\u003c/code\u003e: inode cache\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eext3_inode_cache\u003c/code\u003e: inode cache for ext3\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eext4_inode_cache\u003c/code\u003e: inode cache for ext4\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e能够看到每种类型的：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOBJS\u003c/code\u003e：内存对象数量\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eACTIVE\u003c/code\u003e：活跃对象数量\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eUSE\u003c/code\u003e：使用率（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1 - USE\u003c/code\u003e 应该是等待回收的比例）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOBJ SIZE\u003c/code\u003e：对象大小\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSLABS\u003c/code\u003e：slab 数量\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOBJ/SLAB\u003c/code\u003e：平均每个 slab 的对象数量\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCACHE SIZE\u003c/code\u003e：缓存大小\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"8614-procmeminfo\"\u003e8.6.14. /proc/meminfo\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/meminfo\u003c/code\u003e 提供了内存使用的分解视图，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efree\u003c/code\u003e 等工具会读取这个文件：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ cat /proc/meminfo\nMemTotal:        6138400 kB\nMemFree:         5269392 kB\nMemAvailable:    5431204 kB\nBuffers:           46720 kB\nCached:           293448 kB\nSwapCached:            0 kB\nActive:           436036 kB\nInactive:         176372 kB\nActive(anon):     272468 kB\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBuffers\u003c/code\u003e：buffer cache\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCached\u003c/code\u003e：page cache\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"8617-其他工具\"\u003e8.6.17. 其他工具\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edf(1)\u003c/code\u003e: report file system usage and capacity statistics\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emount(8)\u003c/code\u003e: can show file system mounted options (static performance tuning)\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einotify\u003c/code\u003e: 一个监控（monitoring）文件系统事件的框架\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"871-ad-hoc\"\u003e8.7.1. Ad Hoc\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003ewrite: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edd if=/dev/zero of=file1 bs=1024k count=1k\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eread: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edd if=file1 of=/dev/null bs=1024k\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ dd if=/dev/zero of=/dev/null bs=1024k count=10k\n10240+0 records in\n10240+0 records out\n10737418240 bytes (11 GB, 10 GiB) copied, 0.625901 s, 17.2 GB/s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"872-micro-benchmark-tools\"\u003e8.7.2. Micro-Benchmark Tools\u003c/h3\u003e\n\n\u003cp\u003ebenchmark 工具：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eBonnie\u003c/li\u003e\n  \u003cli\u003eBonnie++\u003c/li\u003e\n  \u003cli\u003eiozone\u003c/li\u003e\n  \u003cli\u003etiobench\u003c/li\u003e\n  \u003cli\u003eSysBench\u003c/li\u003e\n  \u003cli\u003efio\u003c/li\u003e\n  \u003cli\u003eFileBench\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ fio --runtime=60 --time_based --clocksource=clock_gettime --name=randread --numjobs=1 \\\n  --rw=randread --random_distribution=pareto:0.9 --bs=8k --size=5g --filename=fio.tmp\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"873-cache-flushing清除缓存\"\u003e8.7.3. Cache Flushing（清除缓存）\u003c/h3\u003e\n\n\u003cp\u003e在 benchmarking 的时候，需要清除缓存。\u003c/p\u003e\n\n\u003cp\u003e命令：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e清除 pagecache: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eecho 1 \u0026gt; /proc/sys/vm/drop_caches\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e清除 dentries and inodes: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eecho 2 \u0026gt; /proc/sys/vm/drop_caches\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e清除 pagecache, dentries and inodes: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eecho 3 \u0026gt; /proc/sys/vm/drop_caches\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e更多信息见内核文档 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDocumentation/sysctl/vm.txt\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"ch_9\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"9-disk\"\u003e9. Disk\u003c/h1\u003e\n\n\u003ch3 id=\"932-time-scales\"\u003e9.3.2. Time Scales\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e表 9-1. 磁盘事件耗时\u003c/p\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003e事件\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003e耗时\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003e相对值\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e磁盘缓存命中\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt; 100 us\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e1 秒\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eFlash 内存读\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e100~1000 us\u003c/code\u003e（small~large I/O）\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e1~10 秒\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e旋转磁盘顺序读\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e~1 ms\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e10 秒\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e旋转磁盘随机读（7200 转）\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e~8 ms\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e1.3 分\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e旋转磁盘随机读（slow, queueing）\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026gt; 10 ms\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e1.7 分\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e旋转磁盘随机读（dozens in queue）\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026gt; 100 ms\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e17 分\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e最坏情况下的虚拟磁盘 I/O（硬件控制器、RAID-5、queueing、随机 I/O）\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026gt; 1000 ms\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e2.8 小时\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch3 id=\"942-磁盘接口类型\"\u003e9.4.2. 磁盘接口类型\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003eSCSI（Small Computer System Interface）\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e一种并行传输总线（parallel transport bus）\u003c/li\u003e\n      \u003cli\u003eusing multiple electrical connectors to transport bits in parallel\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eSAS（Serial Attached SCSI）\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003ehigh-speed point-to-point transport\u003c/li\u003e\n      \u003cli\u003e避免了 SCSI 的总线竞争问题（bus contention）\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eSATA（Serial ATA）\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e避免了 SCSI 的总线竞争问题（bus contention）\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"943-storage-types\"\u003e9.4.3. Storage Types\u003c/h3\u003e\n\n\u003cp\u003e常见架构：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003edisk devices\u003c/li\u003e\n  \u003cli\u003eRAID\u003c/li\u003e\n  \u003cli\u003estorage arrays\u003c/li\u003e\n  \u003cli\u003enetwork-attached storage (NAS)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"944-磁盘-io-栈\"\u003e9.4.4. 磁盘 IO 栈\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/9-6.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 9-6. 常规磁盘 I/O 栈\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/9-7.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 9-7. Linux 块层（block layer）\u003c/p\u003e\n\n\u003cp\u003eelevator seeking algorithm：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ereduce rotation disk head travel (sorting of pending I/O based on their location)\u003c/li\u003e\n  \u003cli\u003e合并 I/O（merge and coalesce I/O）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"96-analysis\"\u003e9.6. Analysis\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e表 9-5. 磁盘事件耗时\u003c/p\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003e工具\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003e简介\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiostat\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e各种磁盘统计\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esar\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e磁盘历史数据统计\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epidstat\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiotop\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e进程级别的磁盘统计\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eblktrace\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e磁盘 I/O 事件跟踪\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDTrace\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e自定义静态和动态跟踪\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eMegaCli\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eLSI 控制器统计\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esmartctl\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e磁盘控制器统计\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch3 id=\"961-iostat\"\u003e9.6.1. iostat\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiostat\u003c/code\u003e 打印 per-disk I/O 信息，这通常是排查磁盘问题时执行的第一个命令。\u003c/p\u003e\n\n\u003cp\u003e这些信息由内核维护，因此 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiostat\u003c/code\u003e 的开销比较低（读取内核文件开销）。\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ iostat\nLinux 5.4.15-1.el7.elrepo.x86_64 (node01)         04/30/2020      _x86_64_        (32 CPU)\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n           0.40    0.00    0.25    0.00    0.00   99.35\n\nDevice:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn\nsda              14.34         1.25       299.90    6991174 1675623268\nsdb               4.91         1.19       547.29    6633823 3057875140\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etps\u003c/code\u003e: transactions per second (IOPS)\u003c/p\u003e\n\n\u003cp\u003e参数：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-c\u003c/code\u003e：打印 CPU 信息\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-d\u003c/code\u003e：打印 disk 信息\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-k\u003c/code\u003e：单位 KB\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-m\u003c/code\u003e：单位 MB\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-p\u003c/code\u003e：包含 per-partition 统计信息\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-t\u003c/code\u003e：打印时间戳\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-x\u003c/code\u003e：打印扩展信息\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-z\u003c/code\u003e：不打印 zero-activity 信息\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ iostat -dkxz 1\n\nDevice:  rrqm/s   wrqm/s    r/s     w/s  rkB/s   wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util\nsda        0.00     0.43   0.02   14.32   1.25  299.91    41.99     0.00    0.07    3.09    0.06   0.06   0.09\nsdb        0.00     0.24   0.08    4.82   1.19  547.34   223.60     0.00    0.17    1.18    0.15   0.36   0.18\n\nDevice:  rrqm/s   wrqm/s    r/s     w/s  rkB/s   wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util\nsda        0.00     0.00   0.00    6.00   0.00  788.00   262.67     0.00    0.17    0.00    0.17   0.33   0.20\n\nDevice:  rrqm/s   wrqm/s    r/s     w/s  rkB/s   wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util\n\nDevice:  rrqm/s   wrqm/s    r/s     w/s  rkB/s   wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util\nsda        0.00     0.00   0.00    7.00   0.00  868.00   248.00     0.00    0.00    0.00    0.00   0.43   0.30\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003errqm/s\u003c/code\u003e: 驱动请求队列里\u003cstrong\u003e每秒合并\u003c/strong\u003e（merged）的读请求（placed on driver request queue and merged）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewrqm/s\u003c/code\u003e: 驱动请求队列里每秒合并（merged）的写请求\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003er/s\u003c/code\u003e: 每秒\u003cstrong\u003e发送到磁盘设备\u003c/strong\u003e的读请求（issued to the disk device）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ew/s\u003c/code\u003e: 每秒发送到磁盘设备的写请求\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eavgrq-sz\u003c/code\u003e: 平均请求大小，单位：扇区（512 bytes）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eavgqu-sz\u003c/code\u003e: 平均请求数量，包括在驱动请求队列中等待的，以及设备上活跃的请求（active on the device）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eawait\u003c/code\u003e: \u003cstrong\u003e平均 I/O 响应时间\u003c/strong\u003e，包括在队列等待的时间，以及设备的 I/O 响应时间，单位 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ems\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003er_await\u003c/code\u003e: same as await, but for reads only (ms)\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ew_await\u003c/code\u003e: same as await, but for writes only (ms)\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esvctm\u003c/code\u003e: 平均（计算出的）设备 I/O 响应时间，这一列将来会删除\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e%util\u003c/code\u003e: \u003cstrong\u003e磁盘忙于处理 I/O 请求的时间百分比\u003c/strong\u003e（利用率）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e说明：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003errqm/s\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewrqm/s\u003c/code\u003e 非零表明有\u003cstrong\u003e持续的请求合并\u003c/strong\u003e，能够提升性能。这个指标也\n\u003cstrong\u003e表明有大量顺序操作\u003c/strong\u003e（顺序读、顺序写）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003er/s\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ew/s\u003c/code\u003e 是\u003cstrong\u003e真实发送到设备\u003c/strong\u003e的请求数量\u003c/li\u003e\n  \u003cli\u003e由于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eavgrq-sz\u003c/code\u003e 是\u003cstrong\u003e合并之后的平均请求大小\u003c/strong\u003e，因此这个值\n    \u003cul\u003e\n      \u003cli\u003e较小时（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt; 16 sectors\u003c/code\u003e）：\u003cstrong\u003e暗示有大量的随机 I/O 请求\u003c/strong\u003e，因为它们无法被合并\u003c/li\u003e\n      \u003cli\u003e较大时：\u003cstrong\u003e暗示有 large I/O，或是合并之后的顺序请求\u003c/strong\u003e（是否是顺序请求可参考 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003errqm/s\u003c/code\u003e、\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewrqms/\u003c/code\u003e）\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eawait\u003c/code\u003e 是最重要的性能指标\u003c/strong\u003e\n    \u003cul\u003e\n      \u003cli\u003e如果是异步写模式，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ew_await\u003c/code\u003e 指标参考价值不大\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e%util\u003c/code\u003e 是资源利用率和容量规划会用到的指标\n    \u003cul\u003e\n      \u003cli\u003e但注意，这只是一个衡量磁盘繁忙程度（non-idle time）的指标，对物理设备来说\n会比较有意义，但对虚拟设备来说参考价值可能不大\u003c/li\u003e\n      \u003cli\u003e虚拟设备的性能可用 IOPS (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003er/s\u003c/code\u003e + \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ew/s\u003c/code\u003e) 和 throughput (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erkB/s\u003c/code\u003e + \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewkB/s\u003c/code\u003e)\n来衡量\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ iostat -dkxzt -p ALL 1\n\n04/30/2020 09:11:36 AM\nDevice:  rrqm/s  wrqm/s    r/s    w/s  rkB/s    wkB/s avgrq-sz avgqu-sz  await r_await w_await  svctm  %util\nsda        0.00    0.43   0.02  14.32   1.25   299.92    41.99     0.00   0.07    3.09    0.06   0.06   0.09\nsda1       0.00    0.00   0.00   0.00   0.12     0.00   132.68     0.00   0.37    0.37    0.15   0.27   0.00\nsda2       0.00    0.43   0.02  14.32   0.96   299.91    41.97     0.00   0.07    3.21    0.06   0.06   0.09\nsdb        0.00    0.24   0.08   4.83   1.19   547.44   223.60     0.00   0.17    1.18    0.15   0.36   0.18\n\n04/30/2020 09:11:37 AM\nDevice:  rrqm/s  wrqm/s    r/s    w/s  rkB/s    wkB/s avgrq-sz avgqu-sz  await r_await w_await  svctm  %util\nsda        0.00    0.00   0.00   6.00   0.00   792.00   264.00     0.00   0.00    0.00    0.00   0.17   0.10\nsda2       0.00    0.00   0.00   6.00   0.00   792.00   264.00     0.00   0.17    0.00    0.17   0.17   0.10\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e参数：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-p ALL\u003c/code\u003e 打印 per-partition 统计信息\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"962-sar\"\u003e9.6.2. sar\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-d\u003c/code\u003e 打印磁盘统计信息：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ sar -d 1\nLinux 5.4.0-26-generic (ubuntu)         04/30/2020      _x86_64_        (4 CPU)\n\n09:22:09 AM       DEV     tps   rkB/s  wkB/s   dkB/s   areq-sz    aqu-sz     await     %util\n09:22:10 AM    dev7-0    0.00    0.00   0.00    0.00      0.00      0.00      0.00      0.00\n09:22:10 AM    dev7-1    0.00    0.00   0.00    0.00      0.00      0.00      0.00      0.00\n09:22:10 AM   dev11-0    0.00    0.00   0.00    0.00      0.00      0.00      0.00      0.00\n09:22:10 AM   dev11-1    0.00    0.00   0.00    0.00      0.00      0.00      0.00      0.00\n09:22:10 AM    dev8-0    0.00    0.00   0.00    0.00      0.00      0.00      0.00      0.00\n\n09:22:10 AM       DEV     tps   rkB/s  wkB/s   dkB/s   areq-sz    aqu-sz     await     %util\n09:22:11 AM    dev7-0    0.00    0.00   0.00    0.00      0.00      0.00      0.00      0.00\n09:22:11 AM    dev7-1    0.00    0.00   0.00    0.00      0.00      0.00      0.00      0.00\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etps\u003c/code\u003e: device data transfers per second\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erd_sec/s\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewr_sec/s\u003c/code\u003e: read and write sectors (512 bytes) per second\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"963-pidstat\"\u003e9.6.3. pidstat\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-d\u003c/code\u003e 打印每个进程的磁盘 I/O 信息：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ pidstat -d 1\n\n09:27:44 AM   UID       PID   kB_rd/s   kB_wr/s kB_ccwr/s  Command\n09:27:46 AM     0       783      0.00     11.65      0.00  systemd-journal\n09:27:46 AM     0      1523      0.00      3.88      0.00  metricbeat\n09:27:46 AM     0     69595      0.00      3.88      0.00  kubelet\n\n09:27:46 AM   UID       PID   kB_rd/s   kB_wr/s kB_ccwr/s  Command\n09:27:47 AM     0       783      0.00     24.00      0.00  systemd-journal\n09:27:47 AM     0      1523      0.00      4.00      0.00  metricbeat\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekB_ccwr/s\u003c/code\u003e：\u003cstrong\u003e每秒取消的写大小\u003c/strong\u003e（例如，在 flush 之前被 overwrite 了），单位 KB\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e只有 root 用户能打印所有进程的磁盘 I/O 信息，这些数据是从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/\u0026lt;pid\u0026gt;/io\u003c/code\u003e 里读\n取的。\u003c/p\u003e\n\n\u003ch3 id=\"966-perf\"\u003e9.6.6. perf\u003c/h3\u003e\n\n\u003cp\u003eperf 事件：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ perf list | grep block:\n  block:block_bio_backmerge                          [Tracepoint event]\n  block:block_bio_bounce                             [Tracepoint event]\n  block:block_bio_complete                           [Tracepoint event]\n  block:block_bio_frontmerge                         [Tracepoint event]\n  block:block_bio_queue                              [Tracepoint event]\n  block:block_bio_remap                              [Tracepoint event]\n  block:block_dirty_buffer                           [Tracepoint event]\n  block:block_getrq                                  [Tracepoint event]\n  block:block_plug                                   [Tracepoint event]\n  block:block_rq_complete                            [Tracepoint event]\n  block:block_rq_insert                              [Tracepoint event]\n  block:block_rq_issue                               [Tracepoint event]\n  block:block_rq_remap                               [Tracepoint event]\n  block:block_rq_requeue                             [Tracepoint event]\n  block:block_sleeprq                                [Tracepoint event]\n  block:block_split                                  [Tracepoint event]\n  block:block_touch_buffer                           [Tracepoint event]\n  block:block_unplug                                 [Tracepoint event]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e跟踪块设备读请求：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ perf record -age block:block_rq_issue sleep 10\n[ perf record: Woken up 4 times to write data ]\n[ perf record: Captured and wrote 0.817 MB perf.data (~35717 samples) ]\n\n$ perf report | more\n[...]\n  100.00% tar [kernel.kallsyms] [k] blk_peek_request\n          |\n          --- blk_peek_request\n              do_virtblk_request\n              blk_queue_bio\n              generic_make_request\n              submit_bio\n              submit_bh\n             |\n             |--100.00%-- bh_submit_read\n             |            ext4_ext_find_extent\n             |            ext4_ext_map_blocks\n             |            system_call\n             |            __getdents64\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"967-iotop\"\u003e9.6.7. iotop\u003c/h3\u003e\n\n\u003cp\u003e默认 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5s\u003c/code\u003e 输出一次，单位是字节：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ sudo iotop\nTotal DISK READ:         0.00 B/s | Total DISK WRITE:         0.00 B/s\nCurrent DISK READ:       0.00 B/s | Current DISK WRITE:       0.00 B/s\n    TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO\u0026gt;    COMMAND\n   7262 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.01 % [kworker/u128:0-events_power_efficient]\n      1 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % init auto noprompt\n      2 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [kthreadd]\n      3 be/0 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [rcu_gp]\n      4 be/0 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [rcu_par_gp]\n      6 be/0 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [kworker/0:0H-kblockd]\n      8 be/0 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [mm_percpu_wq]\n      9 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [ksoftirqd/0]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e参数：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-a\u003c/code\u003e：累计 I/O，而不是平均 I/O\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-o\u003c/code\u003e：只显示在执行 I/O 任务的进程\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-b\u003c/code\u003e：batch 模式，provide a rolling output (no screen clear)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e下面的例子 5s 打印一次，只显示活跃 I/O 进程：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ iotop -bod5\nTotal DISK READ :       0.00 B/s | Total DISK WRITE :       0.00 B/s\nActual DISK READ:       0.00 B/s | Actual DISK WRITE:       0.00 B/s\n   TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN      IO    COMMAND\n\nTotal DISK READ :       0.00 B/s | Total DISK WRITE :     215.68 K/s\nActual DISK READ:       0.00 B/s | Actual DISK WRITE:       4.09 M/s\n   TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN      IO    COMMAND\n  3659 be/4 root        0.00 B/s   32.16 K/s  0.00 %  0.02 % dockerd -H unix://\n 59689 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.01 % [kworker/u130:0-xfs-cil/dm-0]\n 47819 be/4 root        0.00 B/s   14.90 K/s  0.00 %  0.01 % dockerd -H unix://\n 69883 be/4 root        0.00 B/s    4.71 K/s  0.00 %  0.00 % kubelet --cni-bin-dir=/opt/cni/bin\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"969-blktrace\"\u003e9.6.9. blktrace\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eblktrace(8)\u003c/code\u003e 是一套跟踪基础设施，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e内核跟踪模块， 缓存（buffer）数据 (which was later moved to tracepoints)\u003c/li\u003e\n  \u003cli\u003e给用户空间工具用的控制和汇报机制：这些工具包括\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eblktrace(8)\u003c/code\u003e：内核跟踪，获取原始跟踪数据\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eblkparse(1)\u003c/code\u003e：解析跟踪数据\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebtrace(8)\u003c/code\u003e：调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eblktrace\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eblkparse\u003c/code\u003e，与二者等价，但命令更短\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ sudo blktrace -d /dev/sda -o - | blkparse -i -\n  8,0    3        1     0.000000000  7111  A  WM 1052736 + 8 \u0026lt;- (8,5) 64\n  8,0    3        2     0.000001483  7111  Q  WM 1052736 + 8 [kworker/u128:1]\n  8,0    3        3     0.000008698  7111  G  WM 1052736 + 8 [kworker/u128:1]\n  8,0    3        4     0.000009741  7111  P   N [kworker/u128:1]\n^CCPU2 (8,0):\n Reads Queued:           0,        0KiB  Writes Queued:           6,       24KiB\n Read Dispatches:        0,        0KiB  Write Dispatches:        2,       24KiB\n Reads Requeued:         0               Writes Requeued:         0\n Reads Completed:        0,        0KiB  Writes Completed:        2,       24KiB\n Read Merges:            0,        0KiB  Write Merges:            4,       16KiB\n Read depth:             0               Write depth:            12\n IO unplugs:             1               Timer unplugs:           0\nCPU3 (8,0):\n ...\n IO unplugs:             1               Timer unplugs:           4\n\nTotal (8,0):\n Reads Queued:           0,        0KiB  Writes Queued:          46,      196KiB\n Read Dispatches:        0,        0KiB  Write Dispatches:       38,      196KiB\n Reads Requeued:         0               Writes Requeued:         0\n Reads Completed:        0,        0KiB  Writes Completed:       38,      196KiB\n Read Merges:            0,        0KiB  Write Merges:            8,       32KiB\n IO unplugs:             2               Timer unplugs:           4\n\nThroughput (R/W): 0KiB/s / 33KiB/s\nEvents (8,0): 264 entries\nSkips: 0 forward (0 -   0.0%)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e每列的含义：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eDevice major, minor number\u003c/li\u003e\n  \u003cli\u003eCPU ID\u003c/li\u003e\n  \u003cli\u003eSequence number\u003c/li\u003e\n  \u003cli\u003eAction time, in seconds\u003c/li\u003e\n  \u003cli\u003eProcess ID\u003c/li\u003e\n  \u003cli\u003eAction identifier (see below)\u003c/li\u003e\n  \u003cli\u003eRWBS description: may include R (read), W (write), D (block discard), B (barrier operation), S (synchronous)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e可以用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-f\u003c/code\u003e 指定显示哪些列。\u003c/p\u003e\n\n\u003cp\u003e最后一列数据表示的意思因 action 而异。例如 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e184773879 + 8 [cksum]\u003c/code\u003e 表示：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e块地址 184773879 处的 I/O\u003c/li\u003e\n  \u003cli\u003e大小为 8 (sectors)\u003c/li\u003e\n  \u003cli\u003e来自名为 chsum 的进程\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"action-identifiers\"\u003eAction Identifiers\u003c/h4\u003e\n\n\u003cp\u003e来自 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eblkparse(1)\u003c/code\u003e man page:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eA IO was remapped to a different device\nB IO bounced\nC IO completion\nD IO issued to driver\nF IO front merged with request on queue\nG Get request\nI IO inserted onto request queue\nM IO back merged with request on queue\nP Plug request\nQ IO handled by request queue code\nS Sleep request\nT Unplug due to timeout\nU Unplug request\nX Split\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch4 id=\"action-filtering\"\u003eAction Filtering\u003c/h4\u003e\n\n\u003cp\u003eblktrace(8) 和 btrace(8) 可以过滤事件类型。\n例如，只跟踪 D actions (I/O issued), use the filter option -a issue:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ sudo btrace -a issue /dev/sda\n  8,0    1        1     0.000000000   373  D  WM 1052736   + 8 [kworker/1:1H]\n  8,0    1        2     0.000136747   373  D  WM 1052752   + 8 [kworker/1:1H]\n  8,0    1        3     0.000175394   373  D   W 1249512   + 8 [kworker/1:1H]\n  8,0    1        5     0.000243063   373  D  WM 126881808 + 8 [kworker/1:1H]\n  8,0    1        8     0.000352939   373  D  WM 152050152 + 8 [kworker/1:1H]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其他 filters 见 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eblktrace(8)\u003c/code\u003e man page，例如\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003etrace only reads (-a read)\u003c/li\u003e\n  \u003cli\u003etrace only writes (-a write)\u003c/li\u003e\n  \u003cli\u003esynchronous operations (-a sync)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"9611-smartctl\"\u003e9.6.11. smartctl\u003c/h3\u003e\n\n\u003cp\u003e一些现代设备提供 SMART (Self-Monitoring, Analysis and Reporting Technology) 数据\n，其中包含了很多健康信息。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esmartctl(8)\u003c/code\u003e 能显示此类信息：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ sudo smartctl --all /dev/sda\nsmartctl 7.1 2019-12-30 r5022 [x86_64-linux-5.4.0-26-generic] (local build)\nCopyright (C) 2002-19, Bruce Allen, Christian Franke, www.smartmontools.org\n\n=== START OF INFORMATION SECTION ===\nVendor:               VMware,\nProduct:              VMware Virtual S\nRevision:             1.0\nUser Capacity:        85,899,345,920 bytes [85.8 GB]\nLogical block size:   512 bytes\nRotation Rate:        Solid State Device\nDevice type:          disk\nLocal Time is:        Thu Apr 30 09:49:51 2020 CST\nSMART support is:     Unavailable - device lacks SMART capability.\n\n=== START OF READ SMART DATA SECTION ===\nCurrent Drive Temperature:     0 C\nDrive Trip Temperature:        0 C\n\nError Counter logging not supported\n\nDevice does not support Self Test logging\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAccessing the first disk in a virtual RAID device, using \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-d megaraid,0\u003c/code\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ smartctl --all -d megaraid,0 /dev/sdb\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"97-experimentation\"\u003e9.7. Experimentation\u003c/h2\u003e\n\n\u003ch3 id=\"971-ad-hoc\"\u003e9.7.1. Ad Hoc\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edd(1)\u003c/code\u003e：device-to-device copy。\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ sudo dd if=/dev/sda1 of=/dev/null bs=1024k count=1k\n512+0 records in\n512+0 records out\n536870912 bytes (537 MB, 512 MiB) copied, 2.57553 s, 208 MB/s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"973-micro-benchmark-tools\"\u003e9.7.3. Micro-Benchmark Tools\u003c/h3\u003e\n\n\u003cp\u003e磁盘 benchmark 工具 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehdparm(8)\u003c/code\u003e：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-T\u003c/code\u003e：tests cached reads\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-t\u003c/code\u003e：tests disk device reads\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ sudo hdparm -Tt /dev/sda\n\n/dev/sda:\n Timing cached reads:   13376 MB in  1.99 seconds = 6708.47 MB/sec\n Timing buffered disk reads: 588 MB in  3.01 seconds = 195.50 MB/sec\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到缓存是否命中对性能影响非常大。\u003c/p\u003e\n\n\u003ch2 id=\"98-tuning\"\u003e9.8. Tuning\u003c/h2\u003e\n\n\u003ch3 id=\"981-operating-system-tunables\"\u003e9.8.1. Operating System Tunables\u003c/h3\u003e\n\n\u003cp\u003eThese include ionice(1), resource controls, and kernel tunable parameters.\u003c/p\u003e\n\n\u003ch4 id=\"ionice\"\u003eionice\u003c/h4\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eionice\u003c/code\u003e 为一个进程设置 I/O scheduling class and priority。\u003c/p\u003e\n\n\u003cp\u003escheduling classes：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0\u003c/code\u003e, none: no class specified, so the kernel will pick a default—best effort, with a priority based on the process nice value.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1\u003c/code\u003e, real-time: highest-priority access to the disk. If misused, this can starve other processes (just like the RT CPU scheduling class).\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e2\u003c/code\u003e, best effort: default scheduling class, supporting priorities 0–7, with 0 the highest.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3\u003c/code\u003e, idle: disk I/O allowed only after a grace period of disk idleness.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHere is example usage:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ ionice -c 3 -p 1623\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThis puts process ID 1623 in the idle I/O scheduling class. This may be desirable for long-running\nbackup jobs, so that they are less likely to interfere with the production workload.\u003c/p\u003e\n\n\u003ch4 id=\"tunable-parameters\"\u003eTunable Parameters\u003c/h4\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/block/sda/queue/scheduler\u003c/code\u003e：设置 I/O scheduler policy，可选\n    \u003cul\u003e\n      \u003cli\u003enoop\u003c/li\u003e\n      \u003cli\u003edeadline\u003c/li\u003e\n      \u003cli\u003ean (anticipatory)\u003c/li\u003e\n      \u003cli\u003ecfq\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca name=\"ch_10\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"10-network\"\u003e10. Network\u003c/h1\u003e\n\n\u003ch3 id=\"1035-latency\"\u003e10.3.5 Latency\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e表 10-1. 不同距离的 Ping 延迟\u003c/p\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003eFrom\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eTo\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eVia\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eLatency\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eScaled\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eLocalhost\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003elocalhost\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003ekernel\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e0.05 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ems\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e1 秒\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eHost\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003ehost (same subnet)\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e10 GbE\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e0.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ems\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e4 秒\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eHost\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003ehost (same subnet)\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e1 GbE\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e0.6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ems\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e11 秒\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eHost\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003ehost (same subnet)\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eWiFi\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ems\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e1 分钟\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eSan Francisco\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eNew York\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eInternet\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e40 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ems\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e13 分钟\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eSan Francisco\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eUK\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eInternet\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e81 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ems\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e27 分钟\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eSan Francisco\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eAustralia\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eInternet\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e183 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ems\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e1 小时\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch3 id=\"1041-protocols\"\u003e10.4.1 Protocols\u003c/h3\u003e\n\n\u003cp\u003eCongestion Control: Reno and Tahoe\u003c/p\u003e\n\n\u003cp\u003eThese algorithms for congestion control were first implemented in 4.3BSD:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eReno: triple duplicate ACKs trigger: halving of the congestion window, halving of the slowstart\nthreshold, fast retransmit, and fast recovery\u003c/li\u003e\n  \u003cli\u003eTahoe: triple duplicate ACKs trigger: fast retransmit, halving the slow-start threshold,\ncongestion window set to one maximum segment size (MSS), and slow-start state\nSome operating systems (e.g., Linux and Oracle Solaris 11) allow the algorithm to be selected as\npart of system tuning. Newer algorithms that have been developed for TCP include Vegas, New Reno,\nand Hybla.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"nagle\"\u003eNagle\u003c/h4\u003e\n\n\u003cp\u003eThis algorithm [RFC 896] reduces the number of small packets on the network by delaying their\ntransmission to allow more data to arrive and coalesce. This delays packets only if there is data in the\npipeline and delays are already being encountered.\u003c/p\u003e\n\n\u003ch4 id=\"sack-and-fack\"\u003eSACK and FACK\u003c/h4\u003e\n\n\u003cp\u003eThe TCP selective acknowledgment (SACK) algorithm allows the receiver to inform the sender that\nit received a noncontiguous block of data. Without this, a packet drop would eventually cause the\nentire send window to be retransmitted, to preserve a sequential acknowledgment scheme. This harms\nTCP performance and is avoided by most modern operating systems that support SACK.\u003c/p\u003e\n\n\u003cp\u003eSACK has been extended by forward acknowledgments (FACK), which are supported in Linux by\ndefault. FACKs track additional state and better regulate the amount of outstanding data in the\nnetwork, improving overall performance [Mathis 96].\u003c/p\u003e\n\n\u003ch3 id=\"1043-software\"\u003e10.4.3 Software\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/10-7.png\" width=\"50%\" height=\"50%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 10-7. Generic network IP stack\u003c/p\u003e\n\n\u003ch2 id=\"106-analysis\"\u003e10.6. Analysis\u003c/h2\u003e\n\n\u003ch3 id=\"1061-netstat\"\u003e10.6.1. netstat\u003c/h3\u003e\n\n\u003cp\u003e参数：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e默认：列出所有 connected sockets\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-a\u003c/code\u003e：所有 sockets\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-s\u003c/code\u003e：网络栈统计\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-i\u003c/code\u003e：网络接口（网卡）统计\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-r\u003c/code\u003e：打印路由表（route table）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ netstat -i ens33\nKernel Interface table\nIface      MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg\nens33     1500   160329      0      0 0        211868      0      0      0 BMRU\nlo       65536     1571      0      0 0          1571      0      0      0 LRU\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"1062-sar\"\u003e10.6.2. sar\u003c/h3\u003e\n\n\u003cp\u003e参数：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-n DEV\u003c/code\u003e: 网络接口统计\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-n EDEV\u003c/code\u003e: 网络接口错误（errors）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-n IP\u003c/code\u003e: IP 统计\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-n EIP\u003c/code\u003e: IP 错误统计\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-n TCP\u003c/code\u003e: TCP 统计\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-n ETCP\u003c/code\u003e: TCP 错误统计\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-n SOCK\u003c/code\u003e: socket 使用情况\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/systems-performance/table-10-5.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ sar -n TCP 1\n\n10:31:56 AM  active/s passive/s    iseg/s    oseg/s\n10:31:57 AM      0.00      0.00      0.99      0.99\n10:31:58 AM      0.00      0.00      1.00      1.00\n10:31:59 AM      0.00      0.00      1.00      1.00\n10:32:00 AM      0.00      0.00      1.00      1.00\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e只看 eth0 的统计:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ sar -n DEV 1 | awk \u0026#39;/eth0/\u0026#39;\n10:34:30 AM      eth0      3.00      0.00      0.20      0.00      0.00      0.00      3.00\n10:34:31 AM      eth0      5.00      0.00      0.38      0.00      0.00      0.00      4.00\n10:34:32 AM      eth0      3.00      0.00      0.20      0.00      0.00      0.00      3.00\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"1068-traceroute\"\u003e10.6.8. traceroute\u003c/h3\u003e\n\n\u003ch3 id=\"10615-perf\"\u003e10.6.15. perf\u003c/h3\u003e\n\n\u003cp\u003e类型：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eskb tracepoints：用于 socket buffer events\u003c/li\u003e\n  \u003cli\u003enet tracepoints：网络设备\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eperf list | egrep \u0026#34;skb:|net:\u0026#34;\n  net:napi_gro_frags_entry                           [Tracepoint event]\n  net:napi_gro_frags_exit                            [Tracepoint event]\n  net:napi_gro_receive_entry                         [Tracepoint event]\n  net:napi_gro_receive_exit                          [Tracepoint event]\n  net:net_dev_queue                                  [Tracepoint event]\n  net:net_dev_start_xmit                             [Tracepoint event]\n  net:net_dev_xmit                                   [Tracepoint event]\n  net:net_dev_xmit_timeout                           [Tracepoint event]\n  net:netif_receive_skb                              [Tracepoint event]\n  net:netif_receive_skb_entry                        [Tracepoint event]\n  net:netif_receive_skb_exit                         [Tracepoint event]\n  net:netif_receive_skb_list_entry                   [Tracepoint event]\n  net:netif_receive_skb_list_exit                    [Tracepoint event]\n  net:netif_rx                                       [Tracepoint event]\n  net:netif_rx_entry                                 [Tracepoint event]\n  net:netif_rx_exit                                  [Tracepoint event]\n  net:netif_rx_ni_entry                              [Tracepoint event]\n  net:netif_rx_ni_exit                               [Tracepoint event]\n  skb:consume_skb                                    [Tracepoint event]\n  skb:kfree_skb                                      [Tracepoint event]\n  skb:skb_copy_datagram_iovec                        [Tracepoint event]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e例子：动态跟踪内核函数 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003etcp_sendmsg()\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，\u003cstrong\u003e\u003cmark\u003e打印调用栈\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ perf probe --add=\u0026#39;tcp_sendmsg\u0026#39;\nAdded new event:\n  probe:tcp_sendmsg    (on tcp_sendmsg)\n\nYou can now use it in all perf tools, such as:\n\n        perf record -e probe:tcp_sendmsg -aR sleep 1\n\n$ perf record -e probe:tcp_sendmsg -aR -g sleep 5\n[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 0.707 MB perf.data (107 samples) ]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ perf report --stdio\n\n# Children      Self  Trace output\n# ........  ........  ..................\n#\n   100.00%   100.00%  (ffffffff817e5640)\n            |\n            |--76.64%--runtime.goexit\n            |          |\n            |          |--73.83%--k8s.io/apimachinery/pkg/watch.(*StreamWatcher).receive\n            |          |          k8s.io/client-go/rest/watch.(*Decoder).Decode\n            |          |          k8s.io/apimachinery/pkg/runtime/serializer/streaming.(*decoder).Decode\n            |          |          k8s.io/apimachinery/pkg/util/framer.(*lengthDelimitedFrameReader).Read\n            |          |          io.ReadAtLeast\n            |          |          net.(*conn).Write\n            |          |          net.(*netFD).Write\n            |          |          internal/poll.(*FD).Write\n...\n#\n# (Tip: To see list of saved events and attributes: perf evlist -v)\n#\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"10616-other-tools\"\u003e10.6.16. Other Tools\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estrace(1)\u003c/code\u003e：跟踪 socket 相关的系统调用，（注意：开销很大）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elsof(8)\u003c/code\u003e：列出给定进程的所有已打开文件，其中有详细的 socket 信息\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ess(8)\u003c/code\u003e：socket 统计\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enfsstat(8)\u003c/code\u003e: NFS server and client statistics\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiftop(8)\u003c/code\u003e：网卡实时流量统计，按 host（IP 地址）分类（网络嗅探器 sniffer）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/net\u003c/code\u003e：包含很多网络相关的文件\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"1071-iperf\"\u003e10.7.1. iperf\u003c/h3\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/linux-trouble-shooting-cheat-sheet/\"\u003e\u003cspan\u003e« Linux Trouble Shooting Cheat Sheet\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/google-tech-writing-notes-zh/\"\u003e\u003cspan\u003e[笔记] Google（英文）技术写作课（2020） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2020-05-05T00:00:00Z",
  "Author": "Arthur Chiao"
}