{
  "Source": "arthurchiao.art",
  "Title": "OVS Unknown Unicast Flooding Under Distributed L2 Gateway",
  "Link": "https://arthurchiao.art/blog/ovs-unknown-unicast-flooding-under-distributed-gw/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eOVS Unknown Unicast Flooding Under Distributed L2 Gateway\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2019-10-13 | Last Update 2020-05-18\u003c/p\u003e\n  \n  \u003ch2 id=\"tl-dr\"\u003eTL; DR\u003c/h2\u003e\n\n\u003cp\u003eIn a distributed L2 gateway environment (e.g. Spine-Leaf), misconfigurations of\n\u003cstrong\u003eARP aging time\u003c/strong\u003e may cause \u003cstrong\u003eOVS unicast flooding\u003c/strong\u003e. And, the behaviors of\ndistributed L2 gateway products vary among different vendors.\u003c/p\u003e\n\n\u003ch1 id=\"1-problem-description\"\u003e1 Problem Description\u003c/h1\u003e\n\n\u003cp\u003eAn internal user reported that they noticed some of their instances (docker\ncontainers) periodically get a relatively large sceptical ingress traffic - even\nif their instance is not serving, shown as below:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/ovs-unicast-flooding-under-distributed-gw/1-1.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 1.1 Sceptical periodic ingress traffic to an instance\u003c/p\u003e\n\n\u003ch2 id=\"2-infra--environment-info\"\u003e2 Infra \u0026amp; Environment Info\u003c/h2\u003e\n\n\u003cp\u003eThis section provides some basic infrastructure information to help understand\nthe problem. For more detailed information, please refer to my previous post \u003ca href=\"/blog/ctrip-network-arch-evolution/\"\u003eCtrip\nNetwork Architecture Evolution in the Cloud Computing Era\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe data center network utilizes a Spine-Leaf architecture, with Leaf nodes\nserve as both distributed L2 and L3 gateway.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/ovs-unicast-flooding-under-distributed-gw/2-1.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 2.1 Datacenter network topology\u003c/p\u003e\n\n\u003cp\u003eWhile inside each compute host, all instances connected to a OVS bridge, and the\ndefault route inside container points to its own (distributed) gateway.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/ovs-unicast-flooding-under-distributed-gw/2-2.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 2.2 Virtual network topology inside a host\u003c/p\u003e\n\n\u003cp\u003eOthers:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eOVS version: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e2.3.1\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e2.5.6\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eLinux Kernel: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4.14\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"3-trouble-shooting\"\u003e3 Trouble Shooting\u003c/h1\u003e\n\n\u003ch2 id=\"31-confirm-unicast-flooding\"\u003e3.1 Confirm: Unicast Flooding\u003c/h2\u003e\n\n\u003cp\u003eInvoke \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpdump\u003c/code\u003e and without too much effort, we confirmed that these traffic\nare not targeted for the container, namely, neither the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_ip\u003c/code\u003e nor the\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_mac\u003c/code\u003e of these periodical packets were the intances’s IP/MAC. So we got\n\u003cstrong\u003ethe first conclusion\u003c/strong\u003e: OVS was doing \u003cstrong\u003eunicast flooding\u003c/strong\u003e [1].\u003c/p\u003e\n\n\u003cp\u003eUnicast flooding means, OVS didn’t know where the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_mac\u003c/code\u003e of a packet is, so\nit duplicated this packet, and sent a copy of this packet to all the interfaces\nthat having the same VLAN tag. E.g., in Fig 2.2, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einst1\u003c/code\u003e’s egress traffic will\nbe duplicated to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einst2\u003c/code\u003e, but not \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einst3\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einst4\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"32-confirm-all-flooded-traffic-are-destinated-for-the-l2-gw\"\u003e3.2 Confirm: all flooded traffic are destinated for the L2 GW\u003c/h2\u003e\n\n\u003cp\u003eThen next the question was, why OVS didn’t know the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_mac\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThese flooded packets varied a log, they came from different IP addresses, and\nwent for different IP addresses, either.\u003c/p\u003e\n\n\u003cp\u003eBut further looking into the captured packets, we found that \u003cstrong\u003eall these flooded\npackets sharing the same \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_mac\u003c/code\u003e\u003c/strong\u003e, let’s say \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e00:11:22:33:44:55\u003c/code\u003e.  It took we\na while to figure out that this was the distributed L2 gateway address in our\nSpine-Leaf network (this MAC was manually coded, responsible by another team,\nthat’s why we didn’t determined it at first time).\u003c/p\u003e\n\n\u003ch2 id=\"33-verify-ovs-fdb-entry-went-stale-while-container-arp-was-active\"\u003e3.3 Verify: OVS fdb entry went stale while container ARP was active\u003c/h2\u003e\n\n\u003cp\u003eWhat OVS fdb looks like:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eovs-appctl fdb/show br-int\n port  VLAN  MAC                Age\n    1     0  c2:dd:d2:40:7c:15    1\n    2     0  04:40:a9:db:6f:df    1\n    2     4  00:11:22:33:44:55    16\n    2     9  00:11:22:33:44:55    6\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eNext, we’d like to verify our assumption: L2 GW’s entry in OVS fdb would be\nstale when this problem happened.\u003c/p\u003e\n\n\u003cp\u003eFortunately, the problem happened every 20 minutes (turned out there are some\nperiodic jobs that generated the traffic), so it’s easy for us to capture\nanything we wanted. We used following command to check the entry’s existence. In\nour case, the instance has a VLAN tag \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4\u003c/code\u003e, so we grep pattern \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026#34; 4\n00:11:22:33:44:55\u0026#34;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efor \u003c/span\u003ei \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e1..1800\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\n    \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003edate\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003eovs-appctl fdb/show br-int | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34; 4 00:11:22:33:44:55\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e fdb.txt\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e1\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eNormally, the print would like this:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e2     4  00:11:22:33:44:55    16\n2     4  00:11:22:33:44:55    17\n2     4  00:11:22:33:44:55    18\n2     4  00:11:22:33:44:55    19\n2     4  00:11:22:33:44:55    0\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eDuring the test, we found that the print disappeared for minutes, and this\nperiod exactly matched the problematic period. So the second conclusion: \u003cstrong\u003ethe\nfdb entry indeeded went to stale ahead of the ARP entry inside container\u003c/strong\u003e (as\ncontainer was using this ARP entry transmitting those packets).\u003c/p\u003e\n\n\u003cp\u003eBut there was still one question remaining: \u003cstrong\u003econtainer’s traffic was not\ninterrupted when during flooding\u003c/strong\u003e, which meaned, the packets from gateway to\ncontainer had succesfully been received by container, so from container’s view,\nit was not affected by this flooding behavior (but if the flooded traffic was\nreally huge, the container may be affected, as there may have packet drops at\nthis case).\u003c/p\u003e\n\n\u003cp\u003eIn short: \u003cstrong\u003egateway had replied every request it received from container, why\nOVS hadn’t flushed its fdb entry for gateway?\u003c/strong\u003e In theory OVS would do so, as\nthe replies were unicast packets originated from gateway. Did we miss something?\u003c/p\u003e\n\n\u003ch2 id=\"34-distributed-l2-gw-behavior-vendor-dependent\"\u003e3.4 Distributed L2 GW behavior: vendor-dependent\u003c/h2\u003e\n\n\u003cp\u003eCloud it be possible that the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc_mac\u003c/code\u003e of unicast reply from gateway is\ndifferent from the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGW_MAC\u003c/code\u003e seen in container?\u003c/p\u003e\n\n\u003cp\u003eTo verify, I invoked a really simple traffic, ping GW from container, print the\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst\u003c/code\u003e MAC addresses of each packet:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etcpdump \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e eth1 host 10.60.6.1 and icmp\nfa:16:3e:96:5e:3e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 00:11:22:33:44:55, 10.6.6.9 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.60.6.1: ICMP \u003cspan class=\"nb\"\u003eecho \u003c/span\u003erequest, \u003cspan class=\"nb\"\u003eid \u003c/span\u003e7123, \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e1, length 64\n70:ea:1a:aa:bb:cc \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e fa:16:3e:96:5e:3e, 10.6.6.1 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.60.6.9: ICMP \u003cspan class=\"nb\"\u003eecho \u003c/span\u003ereply, \u003cspan class=\"nb\"\u003eid \u003c/span\u003e7123, \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e1, length 64\nfa:16:3e:96:5e:3e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 00:11:22:33:44:55, 10.6.6.9 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.60.6.1: ICMP \u003cspan class=\"nb\"\u003eecho \u003c/span\u003erequest, \u003cspan class=\"nb\"\u003eid \u003c/span\u003e7123, \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e2, length 64\n70:ea:1a:aa:bb:cc \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e fa:16:3e:96:5e:3e, 10.6.6.1 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.60.6.9: ICMP \u003cspan class=\"nb\"\u003eecho \u003c/span\u003ereply, \u003cspan class=\"nb\"\u003eid \u003c/span\u003e7123, \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e2, length 64\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eThat’s it!\u003c/strong\u003e Why the reply packet has a MAC address \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e70:ea:1a:aa:bb:cc\u003c/code\u003e\ninstead of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e00:11:22:33:44:55\u003c/code\u003e? Who is \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e70:ea:1a:aa:bb:cc\u003c/code\u003e?  We are notified\nthat this was one of the real MACs of the distributed L2 GW, while the latter\nwas the virtual MAC. That’s the problem! \u003cstrong\u003eGW replies with a different MAC than\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e00:11:22:33:44:55\u003c/code\u003e, so this entry would never be flushed by OVS fdb, thus\nflooding continued\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis was the behavior of Cisco devices, we further checked our H3C devices,\nsurprizingly found that under the same conditions, H3C replies were consistent:\nit always uses \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e00:11:22:33:44:55\u003c/code\u003e for both sending and receiving.\nTill now, I havn’t got a definitive answer about what a distributed L2 (and L3)\nshould behave.\u003c/p\u003e\n\n\u003ch3 id=\"more-about-physical-switch-arp-aging\"\u003eMore about physical switch ARP aging\u003c/h3\u003e\n\n\u003cp\u003eThe cisco switch maintains a ARP timer for each IP, which defaults to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1500s\u003c/code\u003e\n(\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e25\u003c/code\u003e minutes) [4].\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eLEAF \u003cspan class=\"c\"\u003e# show ip arp vrf test | in 2001\u003c/span\u003e\n10.6.2.227 00:01:12 fa16.xxxx.97c7 Vlan2001\n10.6.2.228 00:01:15 fa16.xxxx.97c8 Vlan2001\n10.6.2.229 00:01:33 fa16.xxxx.97c9 Vlan2001\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIf there are no frames originated from this ARP for \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e19\u003c/code\u003e\nminutes, it will send a gratuitous ARP to this IP (host).\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eHost \u003cspan class=\"nv\"\u003e$ \u003c/span\u003etcpdump \u003cspan class=\"nt\"\u003e-en\u003c/span\u003e \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e eth0 ether src 00:11:22:33:44:55\n15:26:31.650401 00:11:22:33:44:55 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e fa:16:xx:67, vlan 2001, ARP, Request who-has 10.6.2.241 \u003cspan class=\"o\"\u003e(\u003c/span\u003efa:16:xx:67\u003cspan class=\"o\"\u003e)\u003c/span\u003e tell 10.6.2.1\n15:27:06.023959 00:11:22:33:44:55 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e fa:16:xx:c5, vlan 2001, ARP, Request who-has 10.6.2.73  \u003cspan class=\"o\"\u003e(\u003c/span\u003efa:16:xx:c5\u003cspan class=\"o\"\u003e)\u003c/span\u003e tell 10.6.2.1\n15:27:07.594005 00:11:22:33:44:55 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e fa:16:xx:aa, vlan 2001, ARP, Request who-has 10.6.2.7   \u003cspan class=\"o\"\u003e(\u003c/span\u003efa:16:xx:aa\u003cspan class=\"o\"\u003e)\u003c/span\u003e tell 10.6.2.1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"35-fixup\"\u003e3.5 Fixup\u003c/h2\u003e\n\n\u003cp\u003eThis problem was raised by the distributed L2 GW behavior, but actually it is a\nconfiguration error inside host: we should always \u003cstrong\u003emake sure intermediate\nforwarding devices (OVS bridges in our case) have a longer aging time than\ninstance itself, and physical switch ARP aging time\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eLinux kernel’s ARP aging machanism is really complicated, rather than one or\nseveral parameters, it is controlled by a combination of parameters and a state\nmachine, refer to \u003ca href=\"http://www.programmersought.com/article/8757101780/\"\u003ethis post\u003c/a\u003e [3] if you are\ninterested. Set OVS fdb aging to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1800s\u003c/code\u003e\nis safe enough for us:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eovs-vsctl \u003cspan class=\"nb\"\u003eset \u003c/span\u003ebridge br-int  other_config:mac-aging-time\u003cspan class=\"o\"\u003e=\u003c/span\u003e1800\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eovs-vsctl \u003cspan class=\"nb\"\u003eset \u003c/span\u003ebridge br-bond other_config:mac-aging-time\u003cspan class=\"o\"\u003e=\u003c/span\u003e1800\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e(Above configurations survive OVS and system reboot.)\u003c/p\u003e\n\n\u003cp\u003eAfter this configuration, the problem disappeared:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/ovs-unicast-flooding-under-distributed-gw/3-1.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 3.1 Problem disappeared\u003c/p\u003e\n\n\u003ch1 id=\"4-summary\"\u003e4 Summary\u003c/h1\u003e\n\n\u003cp\u003eThe kernel usually has a\nlonger ARP aging time than OVS fdb (default 300s), thus in some cases, when the\ngateway’s MAC entry is still valid in ARP table, it is already stale in OVS fdb.\nSo the next egress packet (with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_mac=GW_MAC\u003c/code\u003e) to the gateway will trigger\nOVS \u003ca href=\"https://www.cisco.com/c/en/us/support/docs/switches/catalyst-6000-series-switches/23563-143.html\"\u003e\u003cstrong\u003eunicast flooding\u003c/strong\u003e\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen received a correctly responded packet from gateway, OVS fdb will flush\ngateway’s MAC entry, then \u003cstrong\u003esubsequent unicast flooding will stop\u003c/strong\u003e (turned to\nnormal L2 forwarding as OVS knowns where \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGW_MAC\u003c/code\u003e is).\u003c/p\u003e\n\n\u003cp\u003eThe real catastrophe comes when gateway responded incorrectly, to be specific:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003ethe gateway is a \u003cstrong\u003edistributed L2 gateway\u003c/strong\u003e, with a \u003cstrong\u003evirtual MAC\u003c/strong\u003e and many\n\u003cstrong\u003einstance MACs\u003c/strong\u003e (the same idea of VIP and instance IPs in load balancers)\u003c/li\u003e\n  \u003cli\u003eegress traffic from container to gateway uses gateway’s virtual MAC\u003c/li\u003e\n  \u003cli\u003eresponded traffic from gateway to container uses one of its real MAC\n(instance MAC)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn this case, the OVS fdb will not be flushed, so OVS will \u003cstrong\u003eunicast-flood every\negress packet\u003c/strong\u003e of the container which are destinated for the gateway, until the\ngateway proactively advertises its virtual MAC to container, or container\ninitiates a proactive ARP request to gateway - this flooding period may persist\nfor minutes, and all traffic in the same VLAN (or even in the entire OVS if VLAN\nnot used) will be accumulated/copied to every instance that connected to OVS.\u003c/p\u003e\n\n\u003cp\u003eThis may cause severe problems (e.g. packet drop) if you have QoS settings for\nthe OVS interfaces that containers are using.\u003c/p\u003e\n\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://www.cisco.com/c/en/us/support/docs/switches/catalyst-6000-series-switches/23563-143.html\"\u003eCisco Doc: Unicast Flooding\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/ctrip-network-arch-evolution/\"\u003eCtrip Network Architecture Evolution in the Cloud Computing Era\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"http://www.programmersought.com/article/8757101780/\"\u003eAnalysis of ARP aging time principle implemented by Linux\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://www.cisco.com/c/m/en_us/techdoc/dc/reference/cli/nxos/commands/l3/ip-arp-timeout.html\"\u003eCisco Doc: ip arp timeout settings\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/ovs-forwards-unknown-unicast/\"\u003e\u003cspan\u003e« OVS balance-slb bond Forwards Unknown Unicast\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/write-your-own-virtual-machine-zh/\"\u003e\u003cspan\u003e[译] 400 行 C 代码实现一个虚拟机（2018） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2019-10-13T00:00:00Z",
  "Author": "Arthur Chiao"
}