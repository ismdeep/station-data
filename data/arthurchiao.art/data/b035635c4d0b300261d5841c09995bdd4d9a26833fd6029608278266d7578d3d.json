{
  "Source": "arthurchiao.art",
  "Title": "BPF 进阶笔记（五）：几种 TCP 相关的 BPF（sockops、struct_ops、header options）",
  "Link": "https://arthurchiao.art/blog/bpf-advanced-notes-5-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eBPF 进阶笔记（五）：几种 TCP 相关的 BPF（sockops、struct_ops、header options）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2022-09-03 | Last Update 2022-09-03\u003c/p\u003e\n  \n  \u003cp\u003e整理一些 TCP 相关的 BPF 内容，主要来自 Facebook 和 Google 的分享。\u003c/p\u003e\n\n\u003ch2 id=\"关于-bpf-进阶笔记-系列\"\u003e关于 “BPF 进阶笔记” 系列\u003c/h2\u003e\n\n\u003cp\u003e平时学习和使用 BPF 时所整理。由于是笔记而非教程，因此内容不会追求连贯，有基础的\n同学可作查漏补缺之用。\u003c/p\u003e\n\n\u003cp\u003e文中涉及的代码，如无特殊说明，均基于内核 \u003cstrong\u003e\u003cmark\u003e5.10\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"/blog/bpf-advanced-notes-1-zh/\"\u003eBPF 进阶笔记（一）：BPF 程序（BPF Prog）类型详解：使用场景、函数签名、执行位置及程序示例\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/bpf-advanced-notes-2-zh/\"\u003eBPF 进阶笔记（二）：BPF Map 类型详解：使用场景、程序示例\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/bpf-advanced-notes-3-zh/\"\u003eBPF 进阶笔记（三）：BPF Map 内核实现\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/bpf-advanced-notes-4-zh/\"\u003eBPF 进阶笔记（四）：调试 BPF 程序\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/bpf-advanced-notes-5-zh/\"\u003eBPF 进阶笔记（五）：几种 TCP 相关的 BPF（sockops、struct_ops、header options）\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#关于-bpf-进阶笔记-系列\" id=\"markdown-toc-关于-bpf-进阶笔记-系列\"\u003e关于 “BPF 进阶笔记” 系列\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-socket-相关类型sockops\" id=\"markdown-toc-1-socket-相关类型sockops\"\u003e1 Socket 相关类型：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esockops\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-技术背景\" id=\"markdown-toc-11-技术背景\"\u003e1.1 技术背景\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-设计初衷\" id=\"markdown-toc-12-设计初衷\"\u003e1.2 设计初衷\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-特点尤其是与之前其他-bpf-程序的不同\" id=\"markdown-toc-13-特点尤其是与之前其他-bpf-程序的不同\"\u003e1.3 特点（尤其是与之前其他 BPF 程序的不同）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#14-ops-分类\" id=\"markdown-toc-14-ops-分类\"\u003e1.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eops\u003c/code\u003e 分类\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#15-实现简介\" id=\"markdown-toc-15-实现简介\"\u003e1.5 实现简介\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#struct-bpf_sock_ops\" id=\"markdown-toc-struct-bpf_sock_ops\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct bpf_sock_ops\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#struct-bpf_sock_ops_kern\" id=\"markdown-toc-struct-bpf_sock_ops_kern\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct bpf_sock_ops_kern\u003c/code\u003e：\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#tcp_call_bpf\" id=\"markdown-toc-tcp_call_bpf\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_call_bpf()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#两种类型的-sock_ops-bpf-helper-函数\" id=\"markdown-toc-两种类型的-sock_ops-bpf-helper-函数\"\u003e两种类型的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_ops\u003c/code\u003e BPF helper 函数\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#16-例子\" id=\"markdown-toc-16-例子\"\u003e1.6 例子\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-tcp-拥塞控制cc\" id=\"markdown-toc-2-tcp-拥塞控制cc\"\u003e2 TCP 拥塞控制（CC）\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-struct-struct_ops\" id=\"markdown-toc-21-struct-struct_ops\"\u003e2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct struct_ops\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-拥塞控制算法c-和-bpf-实现\" id=\"markdown-toc-22-拥塞控制算法c-和-bpf-实现\"\u003e2.2 拥塞控制算法：C 和 BPF 实现\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-加载并启用新-cc-算法\" id=\"markdown-toc-23-加载并启用新-cc-算法\"\u003e2.3 加载并启用新 CC 算法\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#通过-libbpf-加载\" id=\"markdown-toc-通过-libbpf-加载\"\u003e通过 libbpf 加载\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#通过-bpftool-加载\" id=\"markdown-toc-通过-bpftool-加载\"\u003e通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftool\u003c/code\u003e 加载\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#通过-sysctl-启用\" id=\"markdown-toc-通过-sysctl-启用\"\u003e通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esysctl\u003c/code\u003e 启用\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#通过-setsockopt-启用\" id=\"markdown-toc-通过-setsockopt-启用\"\u003e通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esetsockopt()\u003c/code\u003e 启用\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-性能\" id=\"markdown-toc-24-性能\"\u003e2.4 性能\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-tcp-header-options\" id=\"markdown-toc-3-tcp-header-options\"\u003e3 TCP header options\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-需求\" id=\"markdown-toc-31-需求\"\u003e3.1 需求\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-例子\" id=\"markdown-toc-32-例子\"\u003e3.2 例子\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-struct-sk_storagesocket-的本地存储local-storage\" id=\"markdown-toc-4-struct-sk_storagesocket-的本地存储local-storage\"\u003e4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sk_storage\u003c/code\u003e：socket 的本地存储（local storage）\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-需求\" id=\"markdown-toc-41-需求\"\u003e4.1 需求\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-解决方式\" id=\"markdown-toc-42-解决方式\"\u003e4.2 解决方式\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#hashtab-way\" id=\"markdown-toc-hashtab-way\"\u003ehashtab way\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#bpf_sk_storage-way\" id=\"markdown-toc-bpf_sk_storage-way\"\u003ebpf_sk_storage way\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#43-例子\" id=\"markdown-toc-43-例子\"\u003e4.3 例子\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#参考资料\" id=\"markdown-toc-参考资料\"\u003e参考资料\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003cp\u003e总结几种 TCP 相关的 BPF 程序类型。按目的划分为三类：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eSocket 相关\u003c/mark\u003e\u003c/strong\u003e，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_ops\u003c/code\u003e，例如设置 SYN RTO、SYN-ACK RTO。\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eTCP 拥塞控制（CC）相关\u003c/mark\u003e\u003c/strong\u003e：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct_ops\u003c/code\u003e。\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eTCP header options 相关\u003c/mark\u003e\u003c/strong\u003e：用于在 TCP header option 中插入自定义数据，例如用于验证新算法。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"1-socket-相关类型sockops\"\u003e1 Socket 相关类型：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esockops\u003c/code\u003e\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_ops\u003c/code\u003e BPF 早在 kernel 4.13 就引入了，当时称为 TCP-BPF（因为此时没有其他与\nTCP 相关的 BPF 程序类型），是一种\u003cstrong\u003e\u003cmark\u003e通过 BPF 程序拦截 socket 操作，然后动态设置 TCP 参数\u003c/mark\u003e\u003c/strong\u003e\n的机制。例如，\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e判断某个 TCP 连接的 destination IP 是否在同数据中心，然后\u003cstrong\u003e\u003cmark\u003e动态设置最佳建连参数\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e设置某些新参数\u003c/mark\u003e\u003c/strong\u003e，例如 SYN RTO 和 SYN-ACK RTO，在此之前，这些参数都是在内核编译时就确定的，编译之后就无法再修改；\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_ops\u003c/code\u003e BPF 程序会利用 socket 的一些信息（例如 IP 和 port）来\u003cstrong\u003e\u003cmark\u003e决定 TCP 的最佳配置\u003c/mark\u003e\u003c/strong\u003e。\n例如，在 TCP 建连时，如果判断 client 和 server 处于同一个数据中心（网络质量非常好），那么就为这个 TCP 连接，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e设置更合适的 buffer size：\u003cstrong\u003e\u003cmark\u003eRTT 越小，所需的 buffer 越小\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n  \u003cli\u003e修改 SYN RTO 和 SYN-ACK RTO，大大降低重传等待时间；\u003c/li\u003e\n  \u003cli\u003e如果通信双方都支持 ECN，就将 TCP 拥塞控制设置为 DCTCP（DataCenter TCP）。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"11-技术背景\"\u003e1.1 技术背景\u003c/h2\u003e\n\n\u003cp\u003eLinux 提供了几个不同维度的配置参数来对 TCP 行为进行调优：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eglobal\u003c/mark\u003e\u003c/strong\u003e：全局配置，适用于作为默认配置；\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eper-namespace\u003c/mark\u003e\u003c/strong\u003e：例如一般每个容器都都自己独立的 netns；\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eper-connection\u003c/mark\u003e\u003c/strong\u003e：每个 TCP 连接级别的配置参数，\n包括 buffer size, congestion control, and window clamp 等等。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLinux 提供了\u003cstrong\u003e\u003cmark\u003e两种设置 per-connection TCP parameters 的方式\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003esetsockopt()\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e（socket level）：需要修改应用程序，而且策略与应用程序绑定；\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eip-route\u003c/mark\u003e\u003c/strong\u003e：基于 route prefix 设置参数；但相比 BPF 还是受限很多，能访问到的连接信息很少。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"12-设计初衷\"\u003e1.2 设计初衷\u003c/h2\u003e\n\n\u003cp\u003e如果能有一种新的\u003cstrong\u003e\u003cmark\u003e可编程框架来设置 per-connection 参数\u003c/mark\u003e\u003c/strong\u003e，将突破想象的天花板。\n原来在内核编译时就确定的配置，在内核运行之后也能修改了，典型例子就是\nSYN RTO 和 SYN-ACK RTO。\u003c/p\u003e\n\n\u003cp\u003e传统方式只能根据连接的初始、静态信息（例如 IP 地址和端口号）设置 TCP 参数，而\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_ops\u003c/code\u003e BPF 程序除了支持静态信息，还支持动态方式。例如，\n考虑初始拥塞窗口（\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eINIT_CWND\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，initial congestion window），\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e可以写个 sock_ops BPF 程序在一个 INIT_CWND 范围内探测，最终确定一个 per-subnet optimal 的 INIT_CWND 值；\u003c/li\u003e\n  \u003cli\u003e还可以让这种探测常态化（合理频率），让连接配置随着负载或硬件自适应变化。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e当然，这种类型的 BPF 程序早已超出了当初的设计目的（调优 TCP 参数）。\n它既可让开发者尝试不同参数，也可以帮助收集信息（来更好的调优），例如 per-ip-prefix INIT_CWND 调优。\u003c/p\u003e\n\n\u003ch2 id=\"13-特点尤其是与之前其他-bpf-程序的不同\"\u003e1.3 特点（尤其是与之前其他 BPF 程序的不同）\u003c/h2\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_ops\u003c/code\u003e BPF 需要 \u003cstrong\u003e\u003cmark\u003eattach 到 cgroupv2\u003c/mark\u003e\u003c/strong\u003e。因此，基于这种程序可以\n  实现 \u003cstrong\u003e\u003cmark\u003ecgroup 级别的策略\u003c/mark\u003e\u003c/strong\u003e，只要将应用进程放到相应的 cgroup 即可。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e“有状态”：\u003cstrong\u003e\u003cmark\u003e在两个位置各触发一次，计算出最终结果\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n    \u003cp\u003e之前的 BPF 程序类型都遵循相同的模型：one BPF program per entry (or calling) point。\n 也就是说 BPF 程序类型和触发执行的位置是一一对应的，因此调用链路很明显。\u003c/p\u003e\n\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_ops\u003c/code\u003e BPF 程序则不同：同一段 BPF 程序会在 TCP 执行路径上的不同位置被调用。\n \u003cstrong\u003e\u003cmark\u003e为了区分是从哪里调用过来的\u003c/mark\u003e\u003c/strong\u003e，就需要引入一些参数，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eop\u003c/code\u003e 字段就是用于这一目的。\u003c/p\u003e\n\n    \u003cp\u003e除了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eop\u003c/code\u003e 字段，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_ops\u003c/code\u003e BPF 程序还能访问一部分 socket 状态信息。\n 此外，还能用 getsockops and setsockops BPF helper 函数来获取或设置某些 TCP 参数。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e为什么要这样设计呢？也就是说为什么不像之前的 BPF 程序一样，每个触发点一种类型的 BPF 程序呢？\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e一个原因是：要实现某些目的，\u003cstrong\u003e\u003cmark\u003e必须要在多个位置获取信息\u003c/mark\u003e\u003c/strong\u003e并保存或修改配置。\n例如，如果想针对 DC 内的连接进行优化，就需要动态调小 SYN RTO 和 SYN-ACK RTO，以及\nsocket buffer size 等几个参数。\u003c/li\u003e\n  \u003cli\u003e如果使用多个独立 BPF 程序来完成这件事情，可能就会导致 BPF 程序之间不兼容的情况，还需要同时 load 多个 BPF 程序。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"14-ops-分类\"\u003e1.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eops\u003c/code\u003e 分类\u003c/h2\u003e\n\n\u003cp\u003e分为两类。\u003c/p\u003e\n\n\u003cp\u003e第一类是 get 操作，返回值就是想获取的某个信息，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eBPF_SOCK_OPS_TIMEOUT_INIT\u003c/li\u003e\n  \u003cli\u003eBPF_SOCK_OPS_RWND_INIT\u003c/li\u003e\n  \u003cli\u003eBPF_SOCK_OPS_NEEDS_ECN\u003c/li\u003e\n  \u003cli\u003eBPF_SOCK_OPS_BASE_RTT\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e第二类都带 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e_CB\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 后缀，表示 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_ops\u003c/code\u003e BPF\n\u003cstrong\u003e\u003cmark\u003e程序是从哪里调用过来的\u003c/mark\u003e\u003c/strong\u003e，这种程序的目的是修改连接的状态，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eBPF_SOCK_OPS_TCP_CONNECT_CB\u003c/li\u003e\n  \u003cli\u003eBPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB\u003c/li\u003e\n  \u003cli\u003eBPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"15-实现简介\"\u003e1.5 实现简介\u003c/h2\u003e\n\n\u003ch3 id=\"struct-bpf_sock_ops\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct bpf_sock_ops\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e结构体定义：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// https://github.com/torvalds/linux/blob/v5.8/include/uapi/linux/bpf.h#L3946\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* User bpf_sock_ops struct to access socket values and specify request ops\n * and their replies.\n * Some of this fields are in network (bigendian) byte order and may need\n * to be converted before use (bpf_ntohl() defined in samples/bpf/bpf_endian.h).\n * New fields can only be added at the end of this structure\n */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock_ops\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eunion\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e        \u003cspan class=\"cm\"\u003e/* Optionally passed to bpf program */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003ereply\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e        \u003cspan class=\"cm\"\u003e/* Returned by bpf program        */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003ereplylong\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* Optionally returned by bpf prog  */\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003efamily\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eremote_ip4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* Stored in network byte order */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003elocal_ip4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* Stored in network byte order */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eremote_ip6\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* Stored in network byte order */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003elocal_ip6\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* Stored in network byte order */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eremote_port\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* Stored in network byte order */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003elocal_port\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* stored in host byte order */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eis_fullsock\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* Some TCP fields are only valid if\n                 * there is a full socket. If not, the\n                 * fields read as zero.\n                 */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003esnd_cwnd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003esrtt_us\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e        \u003cspan class=\"cm\"\u003e/* Averaged RTT \u0026lt;\u0026lt; 3 in usecs */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock_ops_cb_flags\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* flags defined in uapi/linux/tcp.h */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003ertt_min\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003esnd_ssthresh\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003ercv_nxt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003esnd_nxt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003esnd_una\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003emss_cache\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eecn_flags\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003erate_delivered\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003erate_interval_us\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003epackets_out\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eretrans_out\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003etotal_retrans\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003esegs_in\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003edata_segs_in\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003esegs_out\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003edata_segs_out\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003elost_out\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003esacked_out\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003esk_txhash\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u64\u003c/span\u003e \u003cspan class=\"n\"\u003ebytes_received\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u64\u003c/span\u003e \u003cspan class=\"n\"\u003ebytes_acked\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__bpf_md_ptr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* [skb_data, skb_data_end) covers the whole TCP header.\n     *\n     * BPF_SOCK_OPS_PARSE_HDR_OPT_CB: The packet received\n     * BPF_SOCK_OPS_HDR_OPT_LEN_CB:   Not useful because the\n     *                                header has not been written.\n     * BPF_SOCK_OPS_WRITE_HDR_OPT_CB: The header and options have\n     *                  been written so far.\n     * BPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB:  The SYNACK that concludes\n     *                    the 3WHS.\n     * BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB: The ACK that concludes\n     *                    the 3WHS.\n     *\n     * bpf_load_hdr_opt() can also be used to read a particular option.\n     */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__bpf_md_ptr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_data\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__bpf_md_ptr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_data_end\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_len\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e        \u003cspan class=\"cm\"\u003e/* The total length of a packet.\n                 * It includes the header, options,\n                 * and payload.\n                 */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_tcp_flags\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* tcp_flags of the header.  It provides\n                 * an easy way to check for tcp_flags\n                 * without parsing skb_data.\n                 *\n                 * In particular, the skb_tcp_flags\n                 * will still be available in\n                 * BPF_SOCK_OPS_HDR_OPT_LEN even though\n                 * the outgoing header has not\n                 * been written yet.\n                 */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eBPF 程序通过其中的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ereply\u003c/code\u003e 字段返回程序执行结果。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ereplylong\u003c/code\u003e 字段是为了以后能支持更长的返回值。\u003c/p\u003e\n\n\u003ch3 id=\"struct-bpf_sock_ops_kern\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct bpf_sock_ops_kern\u003c/code\u003e：\u003c/h3\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/linux/filter.h\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock_ops_kern\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e    \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eunion\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"n\"\u003ereply\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"n\"\u003ereplylong\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esyn_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb_data_end\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu8\u003c/span\u003e    \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu8\u003c/span\u003e    \u003cspan class=\"n\"\u003eis_fullsock\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu8\u003c/span\u003e    \u003cspan class=\"n\"\u003eremaining_opt_len\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu64\u003c/span\u003e    \u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e            \u003cspan class=\"cm\"\u003e/* temp and everything after is not\n                     * initialized to 0 before calling\n                     * the BPF program. New fields that\n                     * should be initialized to 0 should\n                     * be inserted before temp.\n                     * temp is scratch storage used by\n                     * sock_ops_convert_ctx_access\n                     * as temporary storage of a register.\n                     */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct bpf_sock_ops\u003c/code\u003e 中的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eop\u003c/code\u003e \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ereply\u003c/code\u003e \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ereplylong\u003c/code\u003e 是可读/可写的，\n并且直接映射到内核数据结构的种的相应字段；其他字段都是只读的，\n被 BPF 框架映射到对应的内核字段。\u003c/p\u003e\n\n\u003ch3 id=\"tcp_call_bpf\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_call_bpf()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e用来执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_ops\u003c/code\u003e BPF 程序。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/net/tcp.h\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Call BPF_SOCK_OPS program that returns an int. If the return value\n * is \u0026lt; 0, then the BPF op failed (for example if the loaded BPF\n * program does not support the chosen operation or there is no BPF\n * program loaded).\n */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003etcp_call_bpf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"n\"\u003enargs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock_ops_kern\u003c/span\u003e \u003cspan class=\"n\"\u003esock_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ememset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esock_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eoffsetof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock_ops_kern\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk_fullsock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esock_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eis_fullsock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esock_owned_by_me\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003esock_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esock_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enargs\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ememcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esock_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enargs\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_CGROUP_RUN_PROG_SOCK_OPS\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esock_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esock_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereply\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"两种类型的-sock_ops-bpf-helper-函数\"\u003e两种类型的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_ops\u003c/code\u003e BPF helper 函数\u003c/h3\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003ebpf_setsockopt() 与标准 Linux \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esetsockopt\u003c/code\u003e 类似，但只支持有限一些选项。包括：\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eSO_RCVBUF\u003c/li\u003e\n      \u003cli\u003eSO_SNDBUF\u003c/li\u003e\n      \u003cli\u003eSO_MAX_PACING_RATE\u003c/li\u003e\n      \u003cli\u003eSO_PRIORITY\u003c/li\u003e\n      \u003cli\u003eSO_RCVLOWAT\u003c/li\u003e\n      \u003cli\u003eSO_MARK\u003c/li\u003e\n      \u003cli\u003eTCP_CONGESTION\u003c/li\u003e\n      \u003cli\u003eTCP_BPF_IW\u003c/li\u003e\n      \u003cli\u003eTCP_BPF_SNDCWND_CLAMP\u003c/li\u003e\n    \u003c/ul\u003e\n\n    \u003cp\u003e其中的两个新选项：\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eTCP_BPF_IW – 设置初始 snd_cwnd。如果这个连接已经发包了，这个会被忽略。\u003c/li\u003e\n      \u003cli\u003eTCP_BPF_SNDCWND_CLAMP – 设置 socket 的 snd_cwnd_clamp 和 snd_ssthresh\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003ebpf_getsockopt() 与标准 Linux getsockopt 类似，但目前只支持\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eTCP_CONGESTION\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eLinux 标准方式的缺点：需要改应用代码。\u003c/p\u003e\n\n\u003ch2 id=\"16-例子\"\u003e1.6 例子\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_ops\u003c/code\u003e BPF 程序依赖 cgroupv2，因此需要先创建一个 cgroup，然后将相关进程 attach 到这个 cgroup。\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emount \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e cgroup2 none /tmp/cgroupv2\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir\u003c/span\u003e \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e /tmp/cgroupv2/foo\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebash\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$$\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e /tmp/cgroupv2/foo/cgroup.procs\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e任何在当前 shell 内启动的程序都将属于这个 cgroupv2 了。\n例如 使用 netperf/netserver or iperf3。\u003c/p\u003e\n\n\u003cp\u003eattach:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eload_sock_ops \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"nt\"\u003e-l\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u0026lt;cgroupv2\u0026gt; \u0026lt;tcp-bpf program\u0026gt;\n\n\u003cspan class=\"c\"\u003e# For our example:\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eload_sock_ops \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e /tmp/cgroupv2/foo tcp_iw_kern.o\n\n\u003cspan class=\"c\"\u003e# To remove/unload a `sock_ops` BPF program\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eload_sock_ops \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e \u0026lt;cgroupv2\u0026gt;mkdir \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e /tmp/cgroupv2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003etcp_iw_kern is a \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_ops\u003c/code\u003e BPF program that only affects flows\nwhere one of the ports is 5560 and sets TCP parameters that\nare appropriate for larger RTTs: it set TCP’s initial\ncongestion window of active opened flows to 40, the receive\nwindows to 40 and send and receive buffers to 1.5MB so the\nflow can achieve better throughput.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eSEC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;sockops\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_clamp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock_ops\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ebufsize\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e150000\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eto_init\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eclamp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003erv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Check that both hosts are within same datacenter. For\n     * this example it is the case when the first 5.5 bytes of\n     * their IPv6 addresses are the same.\n     */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003efamily\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eAF_INET6\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocal_ip6\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eremote_ip6\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebpf_ntohl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocal_ip6\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0xfff00000\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebpf_ntohl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eremote_ip6\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0xfff00000\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_TIMEOUT_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"n\"\u003erv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eto_init\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_TCP_CONNECT_CB\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* Set sndbuf and rcvbuf of active connections */\u003c/span\u003e\n            \u003cspan class=\"n\"\u003erv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_setsockopt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSOL_SOCKET\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSO_SNDBUF\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ebufsize\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebufsize\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n            \u003cspan class=\"n\"\u003erv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erv\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_setsockopt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSOL_SOCKET\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSO_RCVBUF\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ebufsize\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebufsize\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"n\"\u003erv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_setsockopt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSOL_TCP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTCP_BPF_SNDCWND_CLAMP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eclamp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclamp\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"cm\"\u003e/* Set cwnd clamp and sndbuf, rcvbuf of passive connections */\u003c/span\u003e\n            \u003cspan class=\"cm\"\u003e/* See actual program for this code */\u003c/span\u003e\n        \u003cspan class=\"nl\"\u003edefault:\u003c/span\u003e\n            \u003cspan class=\"n\"\u003erv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003erv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ereply\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erv\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"2-tcp-拥塞控制cc\"\u003e2 TCP 拥塞控制（CC）\u003c/h1\u003e\n\n\u003cp\u003eFacebook 实际问题：\u003cstrong\u003e\u003cmark\u003e要测试和部署一个新的 TCP CC 算法\u003c/mark\u003e\u003c/strong\u003e，有多难？非常难，因为它会转化为下列问题：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e快速且安全地修改内核，并重新编译；\u003c/li\u003e\n  \u003cli\u003e部署新内核、收集数据；\u003c/li\u003e\n  \u003cli\u003e1 \u0026amp; 2 迭代。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e非常麻烦且耗时。然后就开始思考，能否用 BPF 实现 TCP CC 算法？\n当时这种想法是很前卫的，都没听说过，很难想象如何用 BPF 去做。\n现在我们当然能做到了，而且能做到的远远不止这些。\u003c/p\u003e\n\n\u003ch2 id=\"21-struct-struct_ops\"\u003e2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct struct_ops\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e先讨论下 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct_ops\u003c/code\u003e，人们讨论过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct_ops\u003c/code\u003e 是否能用于 qdisc 或其他一些地方\n，因为它们很类似，都是一个内核 “C”结构体，里面存放的是一些函数指针。这种\npattern 在内核中非常常见：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ekernel module\u003c/li\u003e\n  \u003cli\u003etcp_congestion_ops\u003c/li\u003e\n  \u003cli\u003eQdisc_ops, tcp/udp proto…etc.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct tcp_congestion_ops\u003c/code\u003e 只是其中之一。\u003c/p\u003e\n\n\u003cp\u003estruct_ops 是 TCP-CC 的基础，里面包含一些指针，每个指针做不同的事情，\n新的拥塞控制算法所需做的就是实现这些指针。具体来说，BPF struct_ops 是\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e一个在 BPF 内实现（内核结构体的）函数指针的 API；\u003c/li\u003e\n  \u003cli\u003e每个函数指针实际上都是一个 BPF 程序，类型是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_STRUCT_OPS\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003estruct_ops bpf program 没有 static running ctx，而是从内核 BTF 中学习到函数签名，\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eBTF 能告诉我们这个函数指针有几个参数，runtime，\u003c/li\u003e\n      \u003cli\u003e我们只需要将这几个参数 push 到栈上，\u003c/li\u003e\n      \u003cli\u003eBTF of kernel: Get the function signature. Only push the needed args to the stack\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e能做到这些是因为最近的 BPF 领域的工作，例如 BTF aware verifier, Trampoline, CO-RE 等。\u003c/p\u003e\n\n\u003ch2 id=\"22-拥塞控制算法c-和-bpf-实现\"\u003e2.2 拥塞控制算法：C 和 BPF 实现\u003c/h2\u003e\n\n\u003cp\u003e下面是两个 cubic 算法的实现，其中一个是用 BPF 写的，另一个是内核 cubic，能看出来哪个是 BPF 吗？\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bpf-advanced-notes/guess-1.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e这个可能是比较简单的：左边的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e(void *)\u003c/code\u003e 泄露了答案。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bpf-advanced-notes/answer-1.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e再来看个稍微难点的，这里我选择的是 recalc_ssthresh，因为这个函数足够小，能放到一页\n内，同样，这里一个 BPF 实现，一个内核实现，\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bpf-advanced-notes/guess-2.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e这个要难一些，因为只有函数签名不同，实际上 BPF 需要的函数签名要长一些。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bpf-advanced-notes/answer-2.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e以上展示了如何编写拥塞控制算法，接下来看如何在生产环境使用。\u003c/p\u003e\n\n\u003ch2 id=\"23-加载并启用新-cc-算法\"\u003e2.3 加载并启用新 CC 算法\u003c/h2\u003e\n\n\u003ch3 id=\"通过-libbpf-加载\"\u003e通过 libbpf 加载\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bpf-advanced-notes/load-into-kernel.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003elibbpf 做的事情：\u003c/p\u003e\n\n\u003cp\u003e前面提到，每个函数指针都实现为一个 BPF 程序，因此人们需要做的是\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e将这些 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_STRUCT_OPS\u003c/code\u003e 类型的程序加载到内核，并获取它们的文件描述符，\u003c/li\u003e\n  \u003cli\u003e然后创建一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct tcp_congestion_ops\u003c/code\u003e 对象，其中的每个函数指针都指向对应 BPF 程序的 fd，\u003c/li\u003e\n  \u003cli\u003e最后再将这个内核对象加载到内核，注册到合适的网络位置，作为可用的 CC 算法。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e好消息是，不用 libbpf 这么底层麻烦的方式了，bpftool 已经封装了这些操作。\u003c/p\u003e\n\n\u003ch3 id=\"通过-bpftool-加载\"\u003e通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftool\u003c/code\u003e 加载\u003c/h3\u003e\n\n\u003cp\u003e用 bpftool 加载到内核，接下来一切就跟内核实现一样了：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftool struct_ops register bpf_cubic.o\nRegistered tcp_congestion_ops cubic \u003cspan class=\"nb\"\u003eid \u003c/span\u003e18\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"通过-sysctl-启用\"\u003e通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esysctl\u003c/code\u003e 启用\u003c/h3\u003e\n\n\u003cp\u003eAvailable in sysctls as any native kernel TCP CC\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003esysctl net.ipv4.tcp_congestion_control\nnet.ipv4.tcp_congestion_control \u003cspan class=\"o\"\u003e=\u003c/span\u003e cubic bpf_cubic\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到 bpf_cubic 已经存在于系统中了。像原生内核 TCP CC 一样启用它：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003esysctl \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e net.ipv4.tcp_congestion_control\u003cspan class=\"o\"\u003e=\u003c/span\u003ebpf_cubic\nnet.ipv4.tcp_congestion_control \u003cspan class=\"o\"\u003e=\u003c/span\u003e bpf_cubic\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"通过-setsockopt-启用\"\u003e通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esetsockopt()\u003c/code\u003e 启用\u003c/h3\u003e\n\n\u003cp\u003e针对给定连接（fd）设置使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_cubic\u003c/code\u003e 算法：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e    \u003cspan class=\"n\"\u003esetsockopt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eIPPROTO_TCP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTCP_CONGESTION\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;bpf_cubic\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estrlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;bpf_cubic\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"24-性能\"\u003e2.4 性能\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bpf-advanced-notes/performance.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e可以看到性能与内核版本几乎一样，因为前面代码已经看到，BPF 代码与内核代码几乎也是一样的。\u003c/p\u003e\n\n\u003cp\u003e延迟也是一样的，这里就不放图了。\u003c/p\u003e\n\n\u003ch1 id=\"3-tcp-header-options\"\u003e3 TCP header options\u003c/h1\u003e\n\n\u003ch2 id=\"31-需求\"\u003e3.1 需求\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://lwn.net/Articles/829315/\"\u003eBPF TCP header options\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e很多场景都会有解析和修改 TCP header option 的需求，例如\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e在 header 中写入 max delay ack，这样接收方就能设置一个更低的 RTO；后文还会用到这个例子。会看到如何在 BPF 中实现。\n实际上这个使用场景 Google 也在 RFC 中提出过\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e其他场景可能跟数据中心或内部通信流量相关，例如\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e协商网络速率\u003c/li\u003e\n      \u003cli\u003e选择更合适的 CC 算法\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBPF 程序能对任何 header option 进行修改或写入。也就是说没有任何限制，但内核负责检查重复的 option，以及 option 格式是否正确等等。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e这给了数据中心内部流量处理时很大的灵活性，因为这些流量目的都是数据中心内的位置，因此在发送时能进行更好的控制。\u003c/li\u003e\n  \u003cli\u003e另外，也使得我们能在老内核上支持一下新标准引入的 option，\u003c/li\u003e\n  \u003cli\u003e三次握手是一个常见的使用场景，\u003c/li\u003e\n  \u003cli\u003e在解析和写入 data/pure-ack 甚至 fin-header 中也可以使用\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"32-例子\"\u003e3.2 例子\u003c/h2\u003e\n\n\u003cp\u003e服务端使用的例子。\u003c/p\u003e\n\n\u003cp\u003e先复习下 option header 结构：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                 1Byte    1Byte\n               +--------+--------+----------------------------+\n               |  Kind  | Length | Data                       |\n               +--------+--------+----------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e第一个例子是协商 max delay ack。\u003c/p\u003e\n\n\u003cp\u003e客户端发送了 SYN 之后，服务端会回 SYN-ACK，此时会执行下面的 BPF 函数。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003ewrite_synack_opt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock_ops\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// 1. 判断 option 类型是否为 0xDA (Delay Ack，延迟应答)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esyn_opt_in\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekind\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0xDA\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_load_hdr_opt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esyn_opt_in\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esyn_opt_in\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_LOAD_HDR_OPT_TCP_SYN\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// 2. 如果不是（客户端没带这个 option 表示它不支持），什么都不做，直接返回\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eENOMSG\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eCG_OK\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// 3. 如果服务端在 syncookie 中，则要求客户端一会再次发送（resend）这个 option\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_WRITE_HDR_TCP_SYNACK_COOKIE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esynack_opt_out\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eOPTION_F_RESEND\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// 4. 设置服务端 max delay ack in synack\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esynack_opt_out\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* 10ms max delay ack */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebpf_store_hdr_opt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esynack_opt_out\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esynack_opt_out\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个 SYN-ACK 包发出去，客户端再回来一个 ACK 之后，三次握手就完成了。\u003c/p\u003e\n\n\u003cp\u003e此时会触发被动建连的 BPF 回调函数。\u003c/p\u003e\n\n\u003cp\u003e第二个是被动建连：\n同样会再次检查 0xDA，如果设置了，就根据客户端指定的 ack-delay 来计算一个新的 RTO 值（更小），以便\n与这个 ack-delay 匹配：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003ehandle_passive_estab\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock_ops\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// 1. Look for a particular option “0xDA” in SYN\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esyn_opt_in\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekind\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0xDA\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_load_hdr_opt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esyn_opt_in\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esyn_opt_in\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_LOAD_HDR_OPT_TCP_SYN\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// 2. Client does not have 0xDA option\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eENOMSG\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eCG_OK\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// 3. Use a lower RTO to match the delay ack of the client\u003c/span\u003e\n    \u003cspan class=\"n\"\u003emin_rto_us\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esyn_opt_in\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e1000\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebpf_setsockopt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSOL_TCP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTCP_BPF_RTO_MIN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003emin_rto_us\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emin_rto_us\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e因此，整个概念就是围绕两个 helper 构建的。\nthe low header options and right header option\n你可以根据对方发送过来的包中的 option 来修改这个连接的行为。\u003c/p\u003e\n\n\u003ch1 id=\"4-struct-sk_storagesocket-的本地存储local-storage\"\u003e4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sk_storage\u003c/code\u003e：socket 的本地存储（local storage）\u003c/h1\u003e\n\n\u003ch2 id=\"41-需求\"\u003e4.1 需求\u003c/h2\u003e\n\n\u003cp\u003e随着能用 BPF 来编写越来越多的网卡功能和特性，一个很自然的需求就是：\nBPF 程序希望将某些信息关联到特定的 socket。\u003c/p\u003e\n\n\u003cp\u003e例如，明天我可能就会用 BPF 开发一个新的 TCP CC 算法，希望将特定连接的少量数据存放到对应的 socket，比如是 RTT 采样。\u003c/p\u003e\n\n\u003ch2 id=\"42-解决方式\"\u003e4.2 解决方式\u003c/h2\u003e\n\n\u003ch3 id=\"hashtab-way\"\u003ehashtab way\u003c/h3\u003e\n\n\u003cp\u003e定义一个 bpf hashmap，key 是 4-tuple，value 是数据。这种方式是可以用的，但缺点：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e每个包都执行查找操作，非常消耗资源；\u003c/li\u003e\n  \u003cli\u003e维护麻烦：when to remove this key from the map? socket 删除是需要去 delete 相关数据，如果删除失败或有 bug，这个 hashmap 可能就爆了。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"bpf_sk_storage-way\"\u003ebpf_sk_storage way\u003c/h3\u003e\n\n\u003cp\u003e另一种方式称为 bpf_sk_storage，\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e直接将数据存储到 socket（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk\u003c/code\u003e）自身，数据跟着 socket 走；当 socket 关闭时，数据会自动清理；\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_sk_storage_get(smap, sk, ...)\u003c/code\u003e，\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e注意这里仍然要传一个 map 参数，后面会解释为什么。\u003c/li\u003e\n      \u003cli\u003e显然要传一个 socket 指针参数，告诉内核希望将数据关联到哪个 socket\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003eBenchmark shows \u0026gt;50% lookup time improvement\u003c/li\u003e\n  \u003cli\u003e这个概念最近已经被 google re-purposed，支持将数据存储到其他内核对象  (e.g. bpf_inode_storage)。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"43-例子\"\u003e4.3 例子\u003c/h2\u003e\n\n\u003cp\u003e首先定义一个  \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eBPF_MAP_TYPE_SK_STORAGE\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 类型的 BPF map\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eKey 必须是一个 socket fd\u003c/li\u003e\n  \u003cli\u003eValue 可以是任意的，存储希望存储到 sk 中的数据\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e例如，定义如下两个 map：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003emap_rtt：用于存储 socket 的 RTT 数据\u003c/li\u003e\n  \u003cli\u003emap_location：存放对端（remote side）的位置数据（East/West coast, APAC, EUR）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003ebpf_sk_storage_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003emap_rtt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ertt_10ms\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_SK_STORAGE_GET_F_CREATE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebpf_sk_storage_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003emap_location\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003elocation_west\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_SK_STORAGE_GET_F_CREATE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e下图展示了数据是如何组织的，经过简化，\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bpf-advanced-notes/tcp-header-option-example.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e在用户空间，用常规的 map API 访问 BPF_MAP_TYPE_SK_STORAGE map 就行\u003c/p\u003e\n\n\u003cp\u003e例如如果想更新 location，就拿 map_location_fd 和 sk_fd，注意这里传的是 socket fd 而不是指针，\n因为\u003cstrong\u003e\u003cmark\u003e在用户空间是拿不到（也无法使用）socket 指针的\u003c/mark\u003e\u003c/strong\u003e，\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_map_update_elem(map_location_fd, \u0026amp;sk_fd, \u0026amp;location_east, 0)\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e这里想说明的是，用户空间程序必须持有一个 socket 文件描述符，但对于某些共享 map，\n有些进程没有这个 fd 信息，怎么办呢？\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e必须要持有（hold）对应 socket 的文件描述符\u003c/li\u003e\n  \u003cli\u003e对于已共享 map，其他进程可能无法 hold fd\u003c/li\u003e\n  \u003cli\u003e其他一些 map 也有类似情况（as a value），例如 sockmap, reuseport_array…etc\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e已经提出了每个 socket 一个 ID，这个 ID 就是 socket cookie\n是否有通用办法，从 socket cookie 中获取 fd？还没定论。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e每个 socket （\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk\u003c/code\u003e）一个 ID：已经有 sk cookie 了\u003c/li\u003e\n  \u003cli\u003eA generic way to do sk cookie =\u0026gt; fd?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"参考资料\"\u003e参考资料\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003ehttps://netdevconf.info/2.2/papers/brakmo-tcpbpf-talk.pdf\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://lwn.net/Articles/809092/\"\u003eIntroduce BPF STRUCT_OPS\u003c/a\u003e, lwn.net, 2020\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://lwn.net/Articles/829315/\"\u003eBPF TCP header options\u003c/a\u003e, lwn.net, 2020\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://linuxplumbersconf.org/event/7/contributions/687/\"\u003eBPF extensible network: TCP header option, CC, and socket local storage\u003c/a\u003e, LPC\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/tcp-listen-a-tale-of-two-queues/\"\u003e\u003cspan\u003e« TCP Socket Listen: A Tale of Two Queues (2022)\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/trip-large-scale-cloud-native-networking-and-security-with-cilium-ebpf/\"\u003e\u003cspan\u003eTrip.com: Large Scale Cloud Native Networking \u0026amp; Security with Cilium/eBPF (eBPFSummit, 2022) »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2022-09-03T00:00:00Z",
  "Author": "Arthur Chiao"
}