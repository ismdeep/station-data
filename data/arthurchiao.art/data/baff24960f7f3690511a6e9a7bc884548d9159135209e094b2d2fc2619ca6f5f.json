{
  "Source": "arthurchiao.art",
  "Title": "Cracking Kubernetes Network Policy",
  "Link": "https://arthurchiao.art/blog/cracking-k8s-network-policy/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eCracking Kubernetes Network Policy\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2022-01-23 | Last Update 2022-01-23\u003c/p\u003e\n  \n  \u003ch2 id=\"tl-dr\"\u003eTL; DR\u003c/h2\u003e\n\n\u003cp\u003eThis post digs into the Kubernetes \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicy\u003c/code\u003e model, then \u003cstrong\u003e\u003cmark\u003edesigns\na policy enforcer\u003c/mark\u003e\u003c/strong\u003e based on the technical requirements and further\nimplements it with \u003cstrong\u003e\u003cmark\u003eless than 100 lines of eBPF code\u003c/mark\u003e\u003c/strong\u003e.  Hope\nthat after reading through this post, readers will get a deeper understanding\non \u003cstrong\u003e\u003cmark\u003ehow network policies are enforced in the underlying\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCode and scripts in this post\u003c/strong\u003e: \u003ca href=\"https://github.com/ArthurChiao/arthurchiao.github.io/tree/master/assets/code/cracking-k8s-network-policy\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eRelated posts:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"/blog/cracking-k8s-node-proxy/\"\u003eCracking Kubernetes Node Proxy (aka kube-proxy)\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/cracking-k8s-network-policy/\"\u003eCracking Kubernetes Network Policy\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/cracking-k8s-authn/\"\u003eCracking Kubernetes Authentication (AuthN) Model\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/cracking-k8s-authz-rbac/\"\u003eCracking Kubernetes RBAC Authorization (AuthZ) Model\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#tl-dr\" id=\"markdown-toc-tl-dr\"\u003eTL; DR\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-introduction\" id=\"markdown-toc-1-introduction\"\u003e1 Introduction\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-access-control-networkpolicy-in-kubernetes\" id=\"markdown-toc-11-access-control-networkpolicy-in-kubernetes\"\u003e1.1 Access control (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicy\u003c/code\u003e) in Kubernetes\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-how-policies-could-be-enforced-in-the-underlying\" id=\"markdown-toc-12-how-policies-could-be-enforced-in-the-underlying\"\u003e1.2 How policies could be enforced in the underlying?\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-purpose-of-this-post\" id=\"markdown-toc-13-purpose-of-this-post\"\u003e1.3 Purpose of this post\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-design-a-dataplane-policy-enforcer\" id=\"markdown-toc-2-design-a-dataplane-policy-enforcer\"\u003e2 Design a dataplane policy enforcer\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-introducing-service-identity\" id=\"markdown-toc-21-introducing-service-identity\"\u003e2.1 Introducing service identity\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-introducing-identity-store-labels---identity\" id=\"markdown-toc-22-introducing-identity-store-labels---identity\"\u003e2.2 Introducing identity store: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eLabels \u0026lt;-\u0026gt; Identity\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-introducing-policy-cache\" id=\"markdown-toc-23-introducing-policy-cache\"\u003e2.3 Introducing policy cache\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-introducing-ipcache-podip---identity\" id=\"markdown-toc-24-introducing-ipcache-podip---identity\"\u003e2.4 Introducing IPCache: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePodIP -\u0026gt; Identity\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#25-hooking-and-parsing-traffic\" id=\"markdown-toc-25-hooking-and-parsing-traffic\"\u003e2.5 Hooking and parsing traffic\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#26-compose-up-an-end-to-end-workflow\" id=\"markdown-toc-26-compose-up-an-end-to-end-workflow\"\u003e2.6 Compose up: an end-to-end workflow\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-implement-the-enforcer-with-ebpf\" id=\"markdown-toc-3-implement-the-enforcer-with-ebpf\"\u003e3 Implement the enforcer with eBPF\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-the-code\" id=\"markdown-toc-31-the-code\"\u003e3.1 The code\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-compile\" id=\"markdown-toc-32-compile\"\u003e3.2 Compile\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-load-and-attach\" id=\"markdown-toc-33-load-and-attach\"\u003e3.3 Load and attach\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-test-environment-and-verification\" id=\"markdown-toc-4-test-environment-and-verification\"\u003e4 Test environment and verification\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-test-environment-setup\" id=\"markdown-toc-41-test-environment-setup\"\u003e4.1 Test environment setup\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-verification\" id=\"markdown-toc-42-verification\"\u003e4.2 Verification\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#case-1-with-no-policy\" id=\"markdown-toc-case-1-with-no-policy\"\u003eCase 1: with no policy\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#case-2-with-specific-policy-allow-rolebackend---tcp6379roledb\" id=\"markdown-toc-case-2-with-specific-policy-allow-rolebackend---tcp6379roledb\"\u003eCase 2: with specific policy: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eallow role=backend -\u0026gt; tcp:6379@role=db\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#case-3-with-default-policy-allow-any\" id=\"markdown-toc-case-3-with-default-policy-allow-any\"\u003eCase 3: with default policy: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eallow any\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#43-logging--debugging\" id=\"markdown-toc-43-logging--debugging\"\u003e4.3 Logging \u0026amp; debugging\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-discussions\" id=\"markdown-toc-5-discussions\"\u003e5 Discussions\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#51-towards-a-practical-networkpolicy-solution\" id=\"markdown-toc-51-towards-a-practical-networkpolicy-solution\"\u003e5.1 Towards a practical \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicy\u003c/code\u003e solution\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#52-networkpolicy-support-of-cilium\" id=\"markdown-toc-52-networkpolicy-support-of-cilium\"\u003e5.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicy\u003c/code\u003e support of Cilium\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#53-reflecting-on-the-kubernetes-networking-model\" id=\"markdown-toc-53-reflecting-on-the-kubernetes-networking-model\"\u003e5.3 Reflecting on the Kubernetes networking model\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#6-conclusion\" id=\"markdown-toc-6-conclusion\"\u003e6 Conclusion\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#references\" id=\"markdown-toc-references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"1-introduction\"\u003e1 Introduction\u003c/h1\u003e\n\n\u003ch2 id=\"11-access-control-networkpolicy-in-kubernetes\"\u003e1.1 Access control (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicy\u003c/code\u003e) in Kubernetes\u003c/h2\u003e\n\n\u003cp\u003eKubernetes provides \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicy\u003c/code\u003e to control the \u003cstrong\u003e\u003cmark\u003eL3/L4\u003c/mark\u003e\u003c/strong\u003e\ntraffic flows of applications. An example is depicted as below,\nwhere we would like \u003cstrong\u003e\u003cmark\u003eall pods labeled \u003ccode\u003erole=backend\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (clients)\nto access the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp:6379\u003c/code\u003e of \u003cstrong\u003e\u003cmark\u003eall pods with label \u003ccode\u003erole=db\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (servers),\nand all other clients should be denied [1]:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-cloud-native-security/k8s-network-policy.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1-1. Access control in Kubernetes with NetworkPolicy [1]\u003c/p\u003e\n\n\u003cp\u003eBelow is a minimal \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicy\u003c/code\u003e to achieve the above purpose (assuming\nall pods running in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edefault\u003c/code\u003e namespace):\u003c/p\u003e\n\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enetworking.k8s.io/v1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eNetworkPolicy\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enetwork-policy-allow-backend\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003epodSelector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e             \u003cspan class=\"c1\"\u003e# Targets that this NetworkPolicy will be applied on\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ematchLabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003erole\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edb\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eingress\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e                 \u003cspan class=\"c1\"\u003e# Apply on targets\u0026#39;s ingress traffic\u003c/span\u003e\n  \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003efrom\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003epodSelector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e         \u003cspan class=\"c1\"\u003e# Entities that are allowed to access the targets\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ematchLabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003erole\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ebackend\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eports\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e                 \u003cspan class=\"c1\"\u003e# Allowed proto+port\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eTCP\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eport\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e6379\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eKubernetes formalizes this user-facing description, but\n\u003cstrong\u003e\u003cmark\u003eleaves the implementation to each networking solution\u003c/mark\u003e\u003c/strong\u003e\nas an \u003cstrong\u003e\u003cmark\u003eadd-on feature\u003c/mark\u003e\u003c/strong\u003e, which means that they can choose to\n\u003cstrong\u003e\u003cmark\u003esupport it or not\u003c/mark\u003e\u003c/strong\u003e - if the answer is NO, the network policies\nyou created in Kubernetes would just be ignored.\u003c/p\u003e\n\n\u003ch2 id=\"12-how-policies-could-be-enforced-in-the-underlying\"\u003e1.2 How policies could be enforced in the underlying?\u003c/h2\u003e\n\n\u003cp\u003eNetworking or security engineers might wonder: if we were responsible for\nsupporting such a feature, how could we \u003cstrong\u003e\u003cmark\u003eenforce the high-level policy\nspecification in the underlying datapath\u003c/mark\u003e\u003c/strong\u003e?\u003c/p\u003e\n\n\u003cp\u003eThe most straight forward way may be hooking and filtering at the network\ninterface of each Pod. But at the traffic level, \u003cstrong\u003e\u003cmark\u003eall we have are raw packets\u003c/mark\u003e\u003c/strong\u003e,\nwhich contain MAC/IP/TCP headers instead of labels (e.g. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erole=backend\u003c/code\u003e),\nas illustrated below:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cracking-k8s-network-policy/networking-layer-view.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 1-2. A networking and security view of the ingress traffic at Pod\u0026#39;s network interface\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eEmbedding labels into each individual packet is possible theoretically, but\nit’s definitely one of the worst ideas considering efficiency, transparency,\nperformance, operation cost, etc.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn summary of the technical question: how could we \u003cstrong\u003e\u003cmark\u003everdict (allow/deny)\na packet or flow\u003c/mark\u003e\u003c/strong\u003e while \u003cstrong\u003e\u003cmark\u003elacking the ability to directly\nunderstand the policies\u003c/mark\u003e\u003c/strong\u003e described in a high-level language?\u003c/p\u003e\n\n\u003ch2 id=\"13-purpose-of-this-post\"\u003e1.3 Purpose of this post\u003c/h2\u003e\n\n\u003cp\u003eThis post answers the question by first analyzing the\ntechnical requirements, then implement a proof-of-concept policy enforcer from\nscratch. The toy enforcer is a standalone program, consisting of\n\u003cstrong\u003e\u003cmark\u003eless than 100 lines of eBPF code\u003c/mark\u003e\u003c/strong\u003e, and could run with\nnetworking solutions that haven’t supported \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicies\u003c/code\u003e yet, such as\nflannel.\u003c/p\u003e\n\n\u003cp\u003eThe remaining of this post is organized as follows:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eSection 2 designs the policy enforcer;\u003c/li\u003e\n  \u003cli\u003eSection 3 implements it with eBPF;\u003c/li\u003e\n  \u003cli\u003eSection 4 verifies it;\u003c/li\u003e\n  \u003cli\u003eSection 5 discusses some important stuffs;\u003c/li\u003e\n  \u003cli\u003eSection 6 concludes this post.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"2-design-a-dataplane-policy-enforcer\"\u003e2 Design a dataplane policy enforcer\u003c/h1\u003e\n\n\u003cp\u003eWe’ll take ingress policy as example in the remaing of this post. Egress is similar.\u003c/p\u003e\n\n\u003cp\u003eNow first recap what we have had at hand:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cracking-k8s-network-policy/design-1.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-1. What the control/data plane each knows or understands\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eIn the Kubernetes control plane, we have service, pod and policy\n\u003cstrong\u003e\u003cmark\u003eresources\u003c/mark\u003e\u003c/strong\u003e described in their \u003ccode class=\"language-plaintext highlighter-rouge\"\u003espec\u003c/code\u003es (and reflected in\ntheir \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estatus\u003c/code\u003ees),\u003c/li\u003e\n  \u003cli\u003eIn the dataplane, all the enforcer can directly see are \u003cstrong\u003e\u003cmark\u003eraw packets\u003c/mark\u003e\u003c/strong\u003e;\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThese two planes speak totally \u003cstrong\u003e\u003cmark\u003edifferent languages\u003c/mark\u003e\u003c/strong\u003e: the former describes\nresources in high level human-readable formats (e.g. YAML), while the latter is\ngood at handling \u003cstrong\u003e\u003cmark\u003enumerical and arithmetic operations\u003c/mark\u003e\u003c/strong\u003e\n(processing ip addresses, protocol types, ports), so some intermediate stuffs\nmust be introduced to interpret things between them.\u003c/p\u003e\n\n\u003cp\u003eLet’s see the first one: service identity.\u003c/p\u003e\n\n\u003ch2 id=\"21-introducing-service-identity\"\u003e2.1 Introducing service identity\u003c/h2\u003e\n\n\u003cp\u003eSelectors like \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erole=frontend\u003c/code\u003e are control plane aware metadata, while the policy\nenforcer at the dataplane is only good at handling numeric data.\nSo for the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicy\u003c/code\u003e to be understood by the dataplane, we need to interpret\nthe label-based selector into a numeric one.\u003c/p\u003e\n\n\u003cp\u003eTo be specific, for those pods that can be selected by \u003cstrong\u003e\u003cmark\u003ea specific group\nof labels\u003c/mark\u003e\u003c/strong\u003e (e.g. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erole=frontend;namespce=default;\u003c/code\u003e), we allocate\n\u003cstrong\u003e\u003cmark\u003ea numeric ID\u003c/mark\u003e\u003c/strong\u003e (e.g. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10002\u003c/code\u003e) for them. So there is a\n\u003cstrong\u003e\u003cmark\u003eone-one mapping\u003c/mark\u003e\u003c/strong\u003e between the labels and the numeric ID.\u003c/p\u003e\n\n\u003cp\u003eThe numeric ID acts actually as the “service/application identity”, since all\n\u003cstrong\u003e\u003cmark\u003epods of a same service/application share the same identity\u003c/mark\u003e\u003c/strong\u003e.\nFor the simple example at the beginning of this post, we’ll have,\u003c/p\u003e\n\n\u003cp align=\"center\"\u003eTable 2-1. Labels \u0026lt;-\u0026gt; Identity mapping\u003c/p\u003e\n\n\u003ctable\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cstrong\u003e\u003cmark\u003eLables\u003c/mark\u003e\u003c/strong\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cstrong\u003e\u003cmark\u003eIdentity\u003c/mark\u003e\u003c/strong\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erole=db;namespace=default;\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10001\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erole=frontend;namespace=default;\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10002\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erole=backend;namespace=default;\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10003\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eHere we only included two labels \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erole=\u0026lt;role\u0026gt;;namespace=\u0026lt;ns\u0026gt;\u003c/code\u003e for identity\nmapping/allocation, but in reality there be many, such as, one may also would\nlike to include the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eserviceaccount=\u0026lt;sa\u0026gt;\u003c/code\u003e label.\u003c/p\u003e\n\n\u003cp\u003eWe also need an algorithm to allocate an identity from given labels, but this\nis beyond the scope of this post. We just hardcode it and pretend that we\nalready have a proper identity allocation algorithm.\u003c/p\u003e\n\n\u003ch2 id=\"22-introducing-identity-store-labels---identity\"\u003e2.2 Introducing identity store: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eLabels \u0026lt;-\u0026gt; Identity\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eTo store the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elabels \u0026lt;-\u0026gt; identity\u003c/code\u003e metadata, we need an \u003cstrong\u003e\u003cmark\u003eidentity store\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cracking-k8s-network-policy/design-2.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-2. Introducing identity and identity store to correlate application/pods to a numeric security identity\u003c/p\u003e\n\n\u003cp\u003eIn our design it’s just a simple key-value store, with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elabels\u003c/code\u003e we could get\nthe corresponding \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eidentity\u003c/code\u003e, and vice verses.\u003c/p\u003e\n\n\u003cp\u003eWith the structural identities of services turned into numerical identities,\nwe are one step closer to our policy enforcer.\u003c/p\u003e\n\n\u003ch2 id=\"23-introducing-policy-cache\"\u003e2.3 Introducing policy cache\u003c/h2\u003e\n\n\u003cp\u003eWith the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elabels \u0026lt;-\u0026gt; identity\u003c/code\u003e mapping, we can now transform\nthe label-based policy spec into a numeric representation that our dataplane\nenforcer understands. We also need to save it in a dataplane cache, and we name\nit \u003cstrong\u003e\u003cmark\u003epolicy cache\u003c/mark\u003e\u003c/strong\u003e, as shown below,\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cracking-k8s-network-policy/design-3.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-3. Dataplane aware policy cache\u003c/p\u003e\n\n\u003cp\u003eFor performance consideration, the policy cache should be designed as a\nper-node or per-pod cache. Here we use a \u003cstrong\u003e\u003cmark\u003eper-pod model\u003c/mark\u003e\u003c/strong\u003e,\ne.g. for the policy mentioned at the beginning of the post,\u003c/p\u003e\n\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003epodSelector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e             \u003cspan class=\"c1\"\u003e# Targets that this NetworkPolicy will be applied on\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ematchLabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003erole\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edb\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eingress\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e                 \u003cspan class=\"c1\"\u003e# Apply on targets\u0026#39;s ingress traffic\u003c/span\u003e\n  \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003efrom\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003epodSelector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e         \u003cspan class=\"c1\"\u003e# Entities that are allowed to access the targets\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ematchLabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003erole\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ebackend\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eports\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e                 \u003cspan class=\"c1\"\u003e# Allowed proto+port\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eTCP\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eport\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e6379\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWe use \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc_identity:proto:dst_port:direction\u003c/code\u003e as key, insert a rule into the\ncache, the existence of the rule indicates that this \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc_identity\u003c/code\u003e could\naccess this \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eproto:dst_port\u003c/code\u003e in that \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edirection\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003eTable 2-2. Contents of the policy cache for a \u003ccode\u003erole=db\u003c/code\u003e pod\u003c/p\u003e\n\n\u003ctable\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eKey (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSrcIdentity:Proto:Port:Direction\u003c/code\u003e)\u003c/td\u003e\n      \u003ctd\u003eValue (value is ignored)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10003:tcp:6379:ingress\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eOn receiving a packet, if we could decide \u003cstrong\u003e\u003cmark\u003ewhich application it comes\nfrom\u003c/mark\u003e\u003c/strong\u003e (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc_identity\u003c/code\u003e), then a \u003cstrong\u003e\u003cmark\u003everdict over the packet\u003c/mark\u003e\u003c/strong\u003e\ncan be determined by matching policies in this cache: if a rule is matched, let\nthe packet go, otherwise just drop it.\u003c/p\u003e\n\n\u003cp\u003eNow the question turns to: \u003cstrong\u003e\u003cmark\u003ehow to correlate a packet to its (the sender\u0026#39;s) identity\u003c/mark\u003e\u003c/strong\u003e.\nEnter IP address cache.\u003c/p\u003e\n\n\u003ch2 id=\"24-introducing-ipcache-podip---identity\"\u003e2.4 Introducing IPCache: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePodIP -\u0026gt; Identity\u003c/code\u003e\u003c/h2\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eWhile there are many cases when correlating a packet to its identity, here we\nstart from the \u003cstrong\u003e\u003cmark\u003ehard one\u003c/mark\u003e\u003c/strong\u003e: user traffic is not modified or\nencapsulated by the networking solution. This means that we can’t get the\nidentity information from a packet itself directly. Later we will see other\nscenarios.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eConsider the fact that:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eA Pod’s IP address is unique (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehostNetwork\u003c/code\u003e pods are left for later discussions)\u003c/li\u003e\n  \u003cli\u003eA Pod’s identity is deterministic (all pods with the same labels share the same identity)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eSo, \u003cstrong\u003e\u003cmark\u003epod IP can be uniquely mapped to the pod\u0026#39;s identity\u003c/mark\u003e\u003c/strong\u003e.\nThus we introduce yet another cache: mapping pod’s IP to its identity,\nwe call this \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eipcache\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\nand globally share this information, as shown below:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cracking-k8s-network-policy/design-4.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-4. Introducing ipcache to hold IP-\u0026gt;Identity mappings\u003c/p\u003e\n\n\u003cp\u003eFor example, if \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erole=frontend\u003c/code\u003e has two pods \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.5.2.2\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.5.3.3\u003c/code\u003e, and\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erole=backend\u003c/code\u003e has a pod \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.5.4.4\u003c/code\u003e, then in ipcache we’ll have:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003eTable 2-3. IP cache\u003c/p\u003e\n\n\u003ctable\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eKey (\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eIP\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e)\u003c/td\u003e\n      \u003ctd\u003eValue (\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eIdentity\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.5.2.2\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10001\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.5.3.3\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10001\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.5.4.4\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10002\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eOur puzzle is almost done! Since \u003cstrong\u003e\u003cmark\u003eIP address can be parsed from each packet\u003c/mark\u003e\u003c/strong\u003e!\nThen, with an exact \u003cstrong\u003e\u003cmark\u003ereverse steps\u003c/mark\u003e\u003c/strong\u003e through the previous sections, our policy\nenforcer cloud just decide whether to let the packet go!\u003c/p\u003e\n\n\u003ch2 id=\"25-hooking-and-parsing-traffic\"\u003e2.5 Hooking and parsing traffic\u003c/h2\u003e\n\n\u003cp\u003eNow make up the last piece of our solution: hooking traffic, extract\nIP/proto/ports information from packet headers, then query and enforce\npolicies:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cracking-k8s-network-policy/design-5.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-5. Hooking and parsing traffic, and querying and enforcing ingress policies\u003c/p\u003e\n\n\u003ch2 id=\"26-compose-up-an-end-to-end-workflow\"\u003e2.6 Compose up: an end-to-end workflow\u003c/h2\u003e\n\n\u003cp\u003eNow let’s see a hypothetical end-to-end example:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cracking-k8s-network-policy/work-flow.png\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-6. An end-to-end workflow\u003c/p\u003e\n\n\u003cp\u003eThe step 1~3 are control plane related:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e1) \u003cstrong\u003e\u003cmark\u003ePods created\u003c/mark\u003e\u003c/strong\u003e, identities allocated and seen by all parties (global identity store);\u003c/li\u003e\n  \u003cli\u003e2) \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eip-\u0026gt;identity\u003c/code\u003e mappings synchronized to\u003c/mark\u003e\u003c/strong\u003e dataplane \u003cstrong\u003e\u003cmark\u003eipcache\u003c/mark\u003e\u003c/strong\u003e;\u003c/li\u003e\n  \u003cli\u003e3) \u003cstrong\u003e\u003cmark\u003ePolicy created\u003c/mark\u003e\u003c/strong\u003e, transformed from label-based description to\nidentity-based description, and synchronized to dataplane policy cache;\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThen when client traffic reaches a server pod, our policy enforcer starts to work:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e4) \u003cstrong\u003e\u003cmark\u003eParse packet header\u003c/mark\u003e\u003c/strong\u003e, extract IP/Proto/Port etc information;\u003c/li\u003e\n  \u003cli\u003e5) \u003cstrong\u003e\u003cmark\u003eGet src_identity\u003c/mark\u003e\u003c/strong\u003e from ipcache with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc_ip\u003c/code\u003e as key;\u003c/li\u003e\n  \u003cli\u003e6) \u003cstrong\u003e\u003cmark\u003eGet policy\u003c/mark\u003e\u003c/strong\u003e from policy cache with src_identity/proto/dst_port/direction information;\u003c/li\u003e\n  \u003cli\u003e7) \u003cstrong\u003e\u003cmark\u003eVerdict\u003c/mark\u003e\u003c/strong\u003e: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eallow\u003c/code\u003e if policy found, otherwise \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edeny\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eGreat, works wonderful, at least in theory! Now let’s implement it with some POC code.\u003c/p\u003e\n\n\u003ch1 id=\"3-implement-the-enforcer-with-ebpf\"\u003e3 Implement the enforcer with eBPF\u003c/h1\u003e\n\n\u003cp\u003eThis post mainly focuses on the dataplane part, so for the POC implementation, we’ll\njust hardcode something that the control plane does (step 1~3).\nFor the dataplane (step 4~7) part, we use eBPF.\u003c/p\u003e\n\n\u003ch2 id=\"31-the-code\"\u003e3.1 The code\u003c/h2\u003e\n\n\u003cp\u003eSome macros, constants, structures, as well as our \u003cstrong\u003e\u003cmark\u003epolicy cache\u003c/mark\u003e\u003c/strong\u003e itself (hardcoded with just one rule):\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003el3_off\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eETH_HLEN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// IP header offset in raw packet data\u003c/span\u003e\n\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003el4_off\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003el3_off\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// TCP header offset: l3_off + IP header\u003c/span\u003e\n\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003el7_off\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003el4_off\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// Payload offset: l4_off + TCP header\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#define DB_POD_IP         0x020011AC // 172.17.0.2 in network order\n#define FRONTEND_POD_IP   0x030011AC // 172.17.0.3 in network order\n#define BACKEND_POD1_IP   0x040011AC // 172.17.0.4 in network order\n#define BACKEND_POD2_IP   0x050011AC // 172.17.0.5 in network order\n\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003epolicy\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e           \u003cspan class=\"c1\"\u003e// Ingress/inbound policy representation:\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e    \u003cspan class=\"n\"\u003esrc_identity\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// traffic from a service with \u0026#39;identity == src_identity\u0026#39;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u8\u003c/span\u003e   \u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e         \u003cspan class=\"c1\"\u003e// are allowed to access the \u0026#39;proto:dst_port\u0026#39; of\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u8\u003c/span\u003e   \u003cspan class=\"n\"\u003epad1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e          \u003cspan class=\"c1\"\u003e// the destination pod.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__be16\u003c/span\u003e \u003cspan class=\"n\"\u003edst_port\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003epolicy\u003c/span\u003e \u003cspan class=\"n\"\u003edb_ingress_policy_cache\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Per-pod policy cache,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e10003\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eIPPROTO_TCP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6379\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e         \u003cspan class=\"c1\"\u003e// We just hardcode one policy here\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{},\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThe datapath logic, including ipcache and policy cache lookup, as well\nas the main hooking and policy verdict logic:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003e__always_inline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eipcache_lookup\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__be32\u003c/span\u003e \u003cspan class=\"n\"\u003eip\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eip\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eDB_POD_IP\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e10001\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eFRONTEND_POD_IP\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e10002\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBACKEND_POD1_IP\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e10003\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBACKEND_POD2_IP\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e10003\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"nl\"\u003edefault:\u003c/span\u003e               \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003e__always_inline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003epolicy_lookup\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003esrc_identity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e__u8\u003c/span\u003e \u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e__be16\u003c/span\u003e \u003cspan class=\"n\"\u003edst_port\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003epolicy\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edb_ingress_policy_cache\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003esrc_identity\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003esrc_identity\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eproto\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eproto\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003edst_port\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003edst_port\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// not found\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003e__always_inline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003e__policy_can_access\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003e__sk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003esrc_identity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e__u8\u003c/span\u003e \u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edata_end\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edata_end\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eproto\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eIPPROTO_TCP\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata_end\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003el7_off\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etcphdr\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etcp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etcphdr\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003el4_off\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epolicy_lookup\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esrc_identity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003entohs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etcp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003e__section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;egress\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// veth\u0026#39;s egress relates to pod\u0026#39;s ingress\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003etc_egress\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003e__sk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// 1. Basic validation\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edata_end\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edata_end\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata_end\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003el4_off\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// May be system packet, for simplicity just let it go\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eTC_ACT_OK\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// 2. Extract header and map src_ip -\u0026gt; src_identity\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eiphdr\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eip4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eiphdr\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003el3_off\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003esrc_identity\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eipcache_lookup\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eip4\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esrc_identity\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// packet from a service with unknown identity, just drop it\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eTC_ACT_SHOT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// 3. Determine if traffic with src_identity could access this pod\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__policy_can_access\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esrc_identity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eip4\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eTC_ACT_OK\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eTC_ACT_SHOT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWith an understanding of the design in section 2, this code should be simple\nenough and just explains itself.\u003c/p\u003e\n\n\u003ch2 id=\"32-compile\"\u003e3.2 Compile\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eexport \u003c/span\u003e\u003cspan class=\"nv\"\u003eapp\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003etoy-enforcer\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eclang \u003cspan class=\"nt\"\u003e-O2\u003c/span\u003e \u003cspan class=\"nt\"\u003e-Wall\u003c/span\u003e \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e \u003cspan class=\"nv\"\u003e$app\u003c/span\u003e.c \u003cspan class=\"nt\"\u003e-target\u003c/span\u003e bpf \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e \u003cspan class=\"nv\"\u003e$app\u003c/span\u003e.o\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"33-load-and-attach\"\u003e3.3 Load and attach\u003c/h2\u003e\n\n\u003cp\u003eLoad \u0026amp; attach bpf:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003etc qdisc add dev \u003cspan class=\"nv\"\u003e$nic\u003c/span\u003e clsact \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003esudo \u003c/span\u003etc filter add dev \u003cspan class=\"nv\"\u003e$nic\u003c/span\u003e egress bpf da obj  \u003cspan class=\"nv\"\u003e$app\u003c/span\u003e.o sec egress\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eCleanup:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003etc qdisc del dev \u003cspan class=\"nv\"\u003e$nic\u003c/span\u003e clsact 2\u0026gt;\u0026amp;1 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e/dev/null\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eSome explanations:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eWe assume a pod uses veth pair as its network interface, this is true for most Kubernetes networking solutions;\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e$nic\u003c/code\u003e is the host end of the veth pair;\u003c/li\u003e\n  \u003cli\u003eThe host end of a veth pair has an opposite traffic direction with the container\nside, e.g. the \u003cstrong\u003e\u003cmark\u003eingress traffic of a Pod\u003c/mark\u003e\u003c/strong\u003e corresponds to the\n\u003cstrong\u003e\u003cmark\u003eegress of the host end\u003c/mark\u003e\u003c/strong\u003e, and vise verses. That why we attach\nthe BPF program with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eegress\u003c/code\u003e flag.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThese stuffs will be more clear in the section with examples. Just go ahead if they confuse you now.\u003c/p\u003e\n\n\u003ch1 id=\"4-test-environment-and-verification\"\u003e4 Test environment and verification\u003c/h1\u003e\n\n\u003ch2 id=\"41-test-environment-setup\"\u003e4.1 Test environment setup\u003c/h2\u003e\n\n\u003cp\u003eFor traffic control at Pod’s network interface, whether the traffic comes from the same node\nor other nodes doesn’t make a difference to us. So we can test the policy\nin such as simplified topology:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cracking-k8s-network-policy/playground.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 4-1. Test environment: simulating Pods with containers as they won\u0026#39;t make difference for our case\u003c/p\u003e\n\n\u003cp\u003eCreate four containers directly with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker run\u003c/code\u003e, each represent \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erole=db\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erole=frontend\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erole=backend\u003c/code\u003e pods;\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003edocker run \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e db redis:6.2.6\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003edocker run \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e frontend redis:6.2.6 \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e100d\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003edocker run \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e backend1 redis:6.2.6 \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e100d\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003edocker run \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e backend2 redis:6.2.6 \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e100d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eContainers are connected to the default \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker0\u003c/code\u003e Linux bridge with \u003cstrong\u003e\u003cmark\u003eveth pairs\u003c/mark\u003e\u003c/strong\u003e.\nWe use an official \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eredis\u003c/code\u003e docker image, so we can test L4 connectivity easily.\nWe also will use \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ensenter-ctn\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e to execute commands\nin a container’s namespace to work around the missing of tools (e.g. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eifconfig\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiproute2\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpdump\u003c/code\u003e) in the container,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# A simple wrapper over nsenter\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction \u003c/span\u003ensenter-ctn \u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003eCTN\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e \u003cspan class=\"c\"\u003e# container ID or name\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003ePID\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003edocker inspect \u003cspan class=\"nt\"\u003e--format\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;{{.State.Pid}}\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$CTN\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eshift \u003c/span\u003e1 \u003cspan class=\"c\"\u003e# remove the first arguement, shift others to the left\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esudo \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e \u003cspan class=\"nv\"\u003e$PID\u003c/span\u003e \u003cspan class=\"nv\"\u003e$@\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ePut the snippet into your \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e~/.bashrc\u003c/code\u003e file then \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esource ~/.bashrc\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow first check the \u003cstrong\u003e\u003cmark\u003eIP address of each \u0026#34;pod\u0026#34;\u003c/mark\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"k\"\u003efor \u003c/span\u003ectn \u003cspan class=\"k\"\u003ein \u003c/span\u003edb frontend backend1 backend2\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo \u003c/span\u003ensenter-ctn \u003cspan class=\"nv\"\u003e$ctn\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip addr show eth0 | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003einet | \u003cspan class=\"nb\"\u003eawk\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;{print $2}\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\n\u003c/span\u003e172.17.0.2/16\n172.17.0.3/16\n172.17.0.4/16\n172.17.0.5/16\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"42-verification\"\u003e4.2 Verification\u003c/h2\u003e\n\n\u003ch3 id=\"case-1-with-no-policy\"\u003eCase 1: with no policy\u003c/h3\u003e\n\n\u003cp\u003eDo a redis ping to the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erole=db\u003c/code\u003e container from each client container,\nthe server will \u003cstrong\u003e\u003cmark\u003ereturn a \u003ccode\u003ePONG\u003c/code\u003e if all are right\u003c/mark\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ docker exec -it frontend sh    |   $ docker exec -it backend1 sh    |   $ docker exec -it backend2 sh\n# redis-cli -h 172.17.0.2 ping   |   # redis-cli -h 172.17.0.2 ping   |   # redis-cli -h 172.17.0.2 ping\nPONG                             |   PONG                             |   PONG\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eJust as expected! The result is illustrated as below:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cracking-k8s-network-policy/no-policy.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 4-2. No policy: both frontend and backend pods can access \u003ccode\u003etcp:6379@db\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3 id=\"case-2-with-specific-policy-allow-rolebackend---tcp6379roledb\"\u003eCase 2: with specific policy: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eallow role=backend -\u0026gt; tcp:6379@role=db\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eNow let’s load and attach our BPF program to the network interface of the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erole=db\u003c/code\u003e pod.\nWe have two possible places to attach the program:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eThe container side of the veth pair (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0\u003c/code\u003e inside the container)\u003c/li\u003e\n  \u003cli\u003eThe host side of the veth pair (the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evethxxx\u003c/code\u003e device on the bridge)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe final policy effect will be the same, so we just select the second one, as\nthis avoids switching network namespaces when executing commands.\nNow \u003cstrong\u003e\u003cmark\u003efind the host end of the veth pair\u003c/mark\u003e\u003c/strong\u003e for \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erole=db\u003c/code\u003e container:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter-ctn db \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e ip \u003cspan class=\"nb\"\u003elink\n\u003c/span\u003e4: eth0@if5: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP mode DEFAULT\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eNetwork devices with unique index \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5\u003c/code\u003e are \u003cstrong\u003e\u003cmark\u003ethe two ends of the veth pair\u003c/mark\u003e\u003c/strong\u003e,\nso we look for the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eifindex=5\u003c/code\u003e device on the host, which is the device that we’ll attach BPF program to:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink\n\u003c/span\u003e5: vethcf236fd@if4: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue master docker0\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 66:d9:a0:1a:2b:a5 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eNow we can load \u0026amp; attach our BPF enforcer and the hardcoded policy in it:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eexport \u003c/span\u003e\u003cspan class=\"nv\"\u003enic\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003evethcf236fd\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003etc qdisc add dev \u003cspan class=\"nv\"\u003e$nic\u003c/span\u003e clsact \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003esudo \u003c/span\u003etc filter add dev \u003cspan class=\"nv\"\u003e$nic\u003c/span\u003e egress bpf da obj  \u003cspan class=\"nv\"\u003e$app\u003c/span\u003e.o sec egress\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eTest again:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ docker exec -it frontend sh    |   $ docker exec -it backend1 sh    |   $ docker exec -it backend2 sh\n# redis-cli -h 172.17.0.2 ping   |   # redis-cli -h 172.17.0.2 ping   |   # redis-cli -h 172.17.0.2 ping\n^C                               |   PONG                             |   PONG\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebackend1\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebackend2\u003c/code\u003e still ok, but \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003efrontend\u003c/code\u003e timed out\u003c/mark\u003e\u003c/strong\u003e\n(as its packets got silently dropped by our enforcer according the policy),\njust as expected:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cracking-k8s-network-policy/allow-backend.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 4-3. With a policy: frontend pod is denied and backend pods are allowed\u003c/p\u003e\n\n\u003cp\u003eNow \u003cstrong\u003e\u003cmark\u003eremove the BPF enforcer and policy\u003c/mark\u003e\u003c/strong\u003e and test again:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003etc qdisc del dev \u003cspan class=\"nv\"\u003e$nic\u003c/span\u003e clsact 2\u0026gt;\u0026amp;1 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e/dev/null\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ docker exec -it frontend sh    |   $ docker exec -it backend1 sh    |   $ docker exec -it backend2 sh\n# redis-cli -h 172.17.0.2 ping   |   # redis-cli -h 172.17.0.2 ping   |   # redis-cli -h 172.17.0.2 ping\nPONG                             |   PONG                             |   PONG\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003eConnectivity for frontend pod restored\u003c/mark\u003e\u003c/strong\u003e!\u003c/p\u003e\n\n\u003ch3 id=\"case-3-with-default-policy-allow-any\"\u003eCase 3: with default policy: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eallow any\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eWe could also \u003cstrong\u003e\u003cmark\u003esupport a default \u003ccode\u003eallow any\u003c/code\u003e policy\u003c/mark\u003e\u003c/strong\u003e,\nwhich has the \u003cstrong\u003e\u003cmark\u003elowest priority\u003c/mark\u003e\u003c/strong\u003e, and behaves just like there is no policy at all.\nWith this design, our toy policy enforcer could be loaded and attached when a pod\nis created, and detached and removed when the pod is destroyed - consistent\nwith the life cycle of the pod.\nThe effect illustrated:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cracking-k8s-network-policy/allow-any-2.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 4-4. Default allow-any policy: enforcing at the host side of the veth pair\u003c/p\u003e\n\n\u003cp\u003eAnd the equivalent if you’re attaching the BPF program to the container side of the veth pair:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cracking-k8s-network-policy/allow-any.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 4-5. Default allow-any policy: enforcing at the container side of the veth pair\u003c/p\u003e\n\n\u003cp\u003eThe default policy can be achieved easily:\nwe can denote a special \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e{0, 0, 0, 0}\u003c/code\u003e rule as the default \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eallow any\u003c/code\u003e rule,\nthen the \u003cstrong\u003e\u003cmark\u003einital policy cache for a pod\u003c/mark\u003e\u003c/strong\u003e will look like the following:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003epolicy\u003c/span\u003e \u003cspan class=\"n\"\u003edb_ingress_policy_cache\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"c1\"\u003e// default rule: allow any\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAs long as the user adds a specific policy, the agent for maintaining the\npolicy cache should \u003cstrong\u003e\u003cmark\u003eremove this default rule\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"43-logging--debugging\"\u003e4.3 Logging \u0026amp; debugging\u003c/h2\u003e\n\n\u003cp\u003eWe also embedded some logging code in the source for debugging. To use\nit, first make sure the tracing switch is turned on:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo cat\u003c/span\u003e /sys/kernel/tracing/tracing_on\n1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ethen \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecat\u003c/code\u003e the trace pipe to check the log:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo cat\u003c/span\u003e /sys/kernel/debug/tracing/trace_pipe | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003eredis\n    redis-server-2581    \u003cspan class=\"o\"\u003e[\u003c/span\u003e001] d.s1 46820.560456: bpf_trace_printk: policy_lookup: 10003 6 6379\n    redis-server-2581    \u003cspan class=\"o\"\u003e[\u003c/span\u003e001] d.s1 46820.560468: bpf_trace_printk: Toy-enforcer: PASS, as policy found\n\n       redis-cli-10540   \u003cspan class=\"o\"\u003e[\u003c/span\u003e003] d.s1 46824.145704: bpf_trace_printk: policy_lookup: 10002 6 6379\n       redis-cli-10540   \u003cspan class=\"o\"\u003e[\u003c/span\u003e003] d.s1 46824.145724: bpf_trace_printk: Toy-enforcer: DROP, as policy not found\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThis ends our implementation and verification part, and in the next, let’s\ntalk about some important stuffs in depth.\u003c/p\u003e\n\n\u003ch1 id=\"5-discussions\"\u003e5 Discussions\u003c/h1\u003e\n\n\u003ch2 id=\"51-towards-a-practical-networkpolicy-solution\"\u003e5.1 Towards a practical \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicy\u003c/code\u003e solution\u003c/h2\u003e\n\n\u003cp\u003eRe-depict Fig 2-6 here to facilitate our subsequent discussion:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cracking-k8s-network-policy/work-flow.png\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 2-6. An end-to-end workflow\u003c/p\u003e\n\n\u003cp\u003eTo extend our design \u0026amp; implementation into a practical \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicy\u003c/code\u003e solution, more\nthings need to be done, just to name a few:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003eAutomate step 1~3. Such as,\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003eIntroducing a \u003cstrong\u003e\u003cmark\u003eglobal identity store\u003c/mark\u003e\u003c/strong\u003e (instead of hardcode) and an identity allocation algorithm;\u003c/li\u003e\n      \u003cli\u003e\n        \u003cp\u003eIntroducing an \u003cstrong\u003e\u003cmark\u003eagent for each node\u003c/mark\u003e\u003c/strong\u003e, which is responsible for\u003c/p\u003e\n\n        \u003col\u003e\n          \u003cli\u003eIdentity allocation,\u003c/li\u003e\n          \u003cli\u003eWatching policy resources in Kubernetes and converts and pushes to the dataplane policycache,\u003c/li\u003e\n          \u003cli\u003eWatching pod resources in Kubernetes and push \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP-\u0026gt;identity\u003c/code\u003e metadata to the local ipcache.\u003c/li\u003e\n        \u003c/ol\u003e\n      \u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003ePerform \u003cstrong\u003e\u003cmark\u003eper-flow instead of per-packet\u003c/mark\u003e\u003c/strong\u003e policy enforcement.\u003c/p\u003e\n\n    \u003cp\u003eSuch as, only lookup policy cache for the \u003cstrong\u003e\u003cmark\u003ehandshake packets\u003c/mark\u003e\u003c/strong\u003e\n of a TCP flow, and if a connection is allowed and established, all the\n subsequent packets of this flow can just go through without matching against\n the policy. This involves \u003cstrong\u003e\u003cmark\u003econnection tracking\u003c/mark\u003e\u003c/strong\u003e (conntrack) [3].\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eSupport other types of target selectors, such as namespace selector or IPBlock selector.\u003c/p\u003e\n\n    \u003cp\u003eThis is straight-forward and simple to implement in our solution.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eOptimizations\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eEmbed identity along with the packet\u003c/mark\u003e\u003c/strong\u003e if we have additional head\nroom, such as in VxLAN tunneling case. ipcache could be avoided in this scenario.\u003c/li\u003e\n      \u003cli\u003eStorage ipcache/policycache with suitable \u003cstrong\u003e\u003cmark\u003eeBPF maps\u003c/mark\u003e\u003c/strong\u003e.\u003c/li\u003e\n      \u003cli\u003eUsing hashing in policy lookup instead of several raw equality checks.\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIf all these stuffs have been resolved, you’ll get a native eBPF-based policy\nengine for Kubernetes. If time dates back to 2015, you could even name it\n\u003cstrong\u003e\u003cmark\u003eCilium\u003c/mark\u003e\u003c/strong\u003e!\u003c/p\u003e\n\n\u003ch2 id=\"52-networkpolicy-support-of-cilium\"\u003e5.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicy\u003c/code\u003e support of Cilium\u003c/h2\u003e\n\n\u003cp\u003eCilium as a Kubernetes networking solution \u003cstrong\u003e\u003cmark\u003eimplements as well as extends\u003c/mark\u003e\u003c/strong\u003e\nthe standard Kubernetes \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicy\u003c/code\u003e. To be specific, it supports three\nkinds of policies: standard Kubernetes \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicy\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCiliumNetworkPolicy\u003c/code\u003e (CNP)\nand \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eClusterwideCiliumNetworkPolicy\u003c/code\u003e (CCNP).\u003c/p\u003e\n\n\u003cp\u003eIn the underlying, Cilium works much the same way as the toy enforcer in this\npost.  To be specific, the components of our toy design can be directly mapped\nto the corresponding components in Cilium:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eGlobal identity store -\u0026gt; Cilium kvstore \u003cstrong\u003e\u003cmark\u003e(cilium-etcd)\u003c/mark\u003e\u003c/strong\u003e [4]\u003c/li\u003e\n  \u003cli\u003ePer-node agent -\u0026gt; \u003cstrong\u003e\u003cmark\u003ecilium-agent\u003c/mark\u003e\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003eipcache -\u0026gt; Cilium per-node \u003cstrong\u003e\u003cmark\u003eipcache\u003c/mark\u003e\u003c/strong\u003e (\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/sys/fs/bpf/tc/globals/cilium_ipcache\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e)\u003c/li\u003e\n  \u003cli\u003epolicy cache -\u0026gt; Cilium per-endpoint \u003cstrong\u003e\u003cmark\u003epolicy cache\u003c/mark\u003e\u003c/strong\u003e (\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/sys/fs/bpf/tc/globals/cilium_policy_xx\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/trip-cloud-native-security/pod-policy-enforcement.png\" width=\"75%\" height=\"75%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig 5-1. Ingress policy enforcement inside a Cilium node [1]\u003c/p\u003e\n\n\u003cp\u003eOne thing we haven’t mentioned yet is that: the \u003cstrong\u003e\u003cmark\u003etransparency\nproperty\u003c/mark\u003e\u003c/strong\u003e (transparently hooking and filter traffic) of our toy\nenforcer to the upper networking infrastructures makes it \u003cstrong\u003e\u003cmark\u003eco-workable with\nsome networking solutions\u003c/mark\u003e\u003c/strong\u003e that haven’t supported\nnetwork policy yet, such flannel. This is also \u003cstrong\u003e\u003cmark\u003ewhy Cilium supports CNI\nchaining with flannel\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"53-reflecting-on-the-kubernetes-networking-model\"\u003e5.3 Reflecting on the Kubernetes networking model\u003c/h2\u003e\n\n\u003cp\u003eWith all have been discussed above, it’s interesting to reflect on the\nKubernetes \u003ca href=\"https://kubernetes.io/docs/concepts/services-networking/\"\u003enetworking model\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eKubernetes utilizes an \u003cstrong\u003e\u003cmark\u003e\u0026#34;IP-per-Pod\u0026#34;\u003c/mark\u003e\u003c/strong\u003e model, which has three principles, let\ncracking them down and see what that implies to policy solution design:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003ePrinciple 1: \u003cstrong\u003e\u003cmark\u003e\u0026#34;pods on a node can communicate with all pods on all nodes without NAT\u0026#34;\u003c/mark\u003e\u003c/strong\u003e\u003c/p\u003e\n\n    \u003cp\u003eThis is the core foundation of our security solution.\n  Without this property, pod communications will be totally different, such as,\n  via NAT and/or unique ports on the node, which will break our identity and\n  ipcache design.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003ePrinciple 2: \u003cstrong\u003e\u003cmark\u003e\u0026#34;agents on a node (e.g. system daemons, kubelet) can communicate with all pods on that node\u0026#34;\u003c/mark\u003e\u003c/strong\u003e\u003c/p\u003e\n\n    \u003cp\u003eIt’s unable to identify “nodes” in our previous design, and since all nodes\n  can communicate to all pods, there will be security leaks if we can’t control\n  from/to nodes of pod traffic. So we should introduce something to\n  identify what’s a node, and even more accurate, what’s a local node and\n  what’s a remote node to a pod.  This is just what the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enode\u003c/code\u003e and\n  \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eremote-node\u003c/code\u003e special identities are meant for in Cilium.\u003c/p\u003e\n\n    \u003cp\u003eBesides, Cilium also supports a so-called \u003ca href=\"https://docs.cilium.io/en/v1.11/gettingstarted/host-firewall/\"\u003e“host firewall”\u003c/a\u003e, \n  targeting traffic from/to nodes (identified by node ip in the underlying).\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003ePrinciple 3: \u003cstrong\u003e\u003cmark\u003e\u0026#34;pods in the host network of a node can communicate with all pods on all nodes without NAT\u0026#34;\u003c/mark\u003e\u003c/strong\u003e\u003c/p\u003e\n\n    \u003cp\u003eAgain, this property conflicts with our ipcache design: although label selectors\n  could identify those pods, they have no ip addresses. This is also a \n  \u003ca href=\"https://github.com/cilium/cilium/issues/10405\"\u003elimitation\u003c/a\u003e of Cilium\n  (hostNetwork pods can not be distinguished from each other).\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"6-conclusion\"\u003e6 Conclusion\u003c/h1\u003e\n\n\u003cp\u003eThis post designs an educational policy engine for Kubernetes \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkPolicy\u003c/code\u003e\n, and implements it in less than 100 lines of eBPF code (with no\nsurprises, code snippets \u003cstrong\u003e\u003cmark\u003estole from Cilium project\u003c/mark\u003e\u003c/strong\u003e,\nand intentionally named variables/functions in the Cilium style).\u003c/p\u003e\n\n\u003cp\u003eAfter reading through this post, users should be more familiar with the\n\u003cstrong\u003e\u003cmark\u003eunderlying working mechanisms\u003c/mark\u003e\u003c/strong\u003e of access control in\n\u003cstrong\u003e\u003cmark\u003eKubernetes+Cilium\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch1 id=\"references\"\u003eReferences\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"/blog/trip-first-step-towards-cloud-native-security/\"\u003eTrip.com: First Step towards Cloud Native Security\u003c/a\u003e, 2021\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/cracking-k8s-node-proxy/\"\u003eCracking Kubernetes Node Proxy (aka kube-proxy)\u003c/a\u003e, 2019\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/conntrack-design-and-implementation/\"\u003eConnection Tracking (conntrack): Design and Implementation Inside Linux Kernel\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/whats-inside-cilium-etcd/\"\u003eWhat’s inside Cilium Etcd (kvstore)\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/bbr-paper-zh/\"\u003e\u003cspan\u003e« [译] [论文] BBR：基于拥塞（而非丢包）的拥塞控制（ACM, 2017）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/raft-paper-zh/\"\u003e\u003cspan\u003e[译] [论文] Raft 共识算法（及 etcd/raft 源码解析）（USENIX, 2014） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2022-01-23T00:00:00Z",
  "Author": "Arthur Chiao"
}