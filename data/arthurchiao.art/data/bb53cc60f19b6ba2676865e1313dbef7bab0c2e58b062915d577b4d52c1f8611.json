{
  "Source": "arthurchiao.art",
  "Title": "Customize TCP initial RTO (retransmission timeout) with BPF",
  "Link": "https://arthurchiao.art/blog/customize-tcp-initial-rto-with-bpf/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eCustomize TCP initial RTO (retransmission timeout) with BPF\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2021-04-28 | Last Update 2022-08-27\u003c/p\u003e\n  \n  \u003ch1 id=\"tl-dr\"\u003eTL; DR\u003c/h1\u003e\n\n\u003cp\u003eOn initiating a new TCP connection (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003econnect()\u003c/code\u003e),\nthe initial retransmission timeout (RTO) has been set as a\n\u003cstrong\u003e\u003cmark\u003eharcoded value of 1 second\u003c/mark\u003e\u003c/strong\u003e in Linux kernel (not configurable).\nSince 4.13, a BPF hook has been added to the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econnect\u003c/code\u003e operation, which provides\na chance to dynamically override the hardcode (instead of re-compiling\nkernel) with custom BPF programs.\u003c/p\u003e\n\n\u003cp\u003eThis post explores that facility, and implements \u003cstrong\u003e\u003cmark\u003eone such program with\nseveral lines of BPF code\u003c/mark\u003e\u003c/strong\u003e.  Hope that it helps readers to understand why\n\u003cstrong\u003e\u003cmark\u003e\u0026#34;BPF makes Linux kernel programmable\u0026#34;\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#tl-dr\" id=\"markdown-toc-tl-dr\"\u003eTL; DR\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-introduction\" id=\"markdown-toc-1-introduction\"\u003e1 Introduction\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-tcp-initial-rto-kernel--412\" id=\"markdown-toc-11-tcp-initial-rto-kernel--412\"\u003e1.1 TCP initial RTO (kernel \u0026lt;= 4.12)\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-measure-the-initial-rto-kernel--412\" id=\"markdown-toc-12-measure-the-initial-rto-kernel--412\"\u003e1.2 Measure the initial RTO (kernel \u0026lt;= 4.12)\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-bpf-hook-in-new-kernels--413\" id=\"markdown-toc-13-bpf-hook-in-new-kernels--413\"\u003e1.3 BPF hook in new kernels (\u0026gt;= 4.13)\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#14-purpose-of-this-post-with-kernels--413\" id=\"markdown-toc-14-purpose-of-this-post-with-kernels--413\"\u003e1.4 Purpose of this post (with kernels \u0026gt;= 4.13)\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-implementation-and-verification\" id=\"markdown-toc-2-implementation-and-verification\"\u003e2 Implementation and verification\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-bpf-code\" id=\"markdown-toc-21-bpf-code\"\u003e2.1 BPF code\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-compile-load-and-attach\" id=\"markdown-toc-22-compile-load-and-attach\"\u003e2.2 Compile, load and attach\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-verify\" id=\"markdown-toc-23-verify\"\u003e2.3 Verify\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-cleanup\" id=\"markdown-toc-24-cleanup\"\u003e2.4 Cleanup\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-explanations\" id=\"markdown-toc-3-explanations\"\u003e3 Explanations\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-hook-at-the-right-place-sockops\" id=\"markdown-toc-31-hook-at-the-right-place-sockops\"\u003e3.1 Hook at the right place (sockops)\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-set-custom-initial-rto\" id=\"markdown-toc-32-set-custom-initial-rto\"\u003e3.2 Set custom initial RTO\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-determine-the-return-value\" id=\"markdown-toc-33-determine-the-return-value\"\u003e3.3 Determine the return value\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-debug-facility\" id=\"markdown-toc-4-debug-facility\"\u003e4 Debug facility\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-related-stuffs\" id=\"markdown-toc-5-related-stuffs\"\u003e5 Related stuffs\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#51-netipv4tcp_syn_retries\" id=\"markdown-toc-51-netipv4tcp_syn_retries\"\u003e5.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet.ipv4.tcp_syn_retries\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#52-netipv4tcp_synack_retries\" id=\"markdown-toc-52-netipv4tcp_synack_retries\"\u003e5.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet.ipv4.tcp_synack_retries\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#6-summary\" id=\"markdown-toc-6-summary\"\u003e6 Summary\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#references\" id=\"markdown-toc-references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#appendix-full-code\" id=\"markdown-toc-appendix-full-code\"\u003eAppendix: full code\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"1-introduction\"\u003e1 Introduction\u003c/h1\u003e\n\n\u003ch2 id=\"11-tcp-initial-rto-kernel--412\"\u003e1.1 TCP initial RTO (kernel \u0026lt;= 4.12)\u003c/h2\u003e\n\n\u003cp\u003eIn Linux kernel (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;= 4.12\u003c/code\u003e), the \u003cstrong\u003e\u003cmark\u003einitial RTO\u003c/mark\u003e\u003c/strong\u003e when establishing a new TCP connection\nis \u003cstrong\u003e\u003cmark\u003eexactly 1 second\u003c/mark\u003e\u003c/strong\u003e, which is \u003cstrong\u003e\u003cmark\u003ehardcoded in the kernel code and\nnot configurable\u003c/mark\u003e\u003c/strong\u003e, taking \u003ca href=\"https://github.com/torvalds/linux/blob/v4.12/net/ipv4/tcp_output.c#L3251\"\u003ev4.12\u003c/a\u003e\nas example:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eCalling stack \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_connect() -\u0026gt; tcp_connect_init() -\u0026gt; tcp_timeout_init()\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/ipv4/tcp_output.c\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003etcp_connect_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einet_csk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk_rto\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTCP_TIMEOUT_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Set initial timeout value\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ewhere macro \u003ca href=\"https://github.com/torvalds/linux/blob/v4.12/include/net/tcp.h#L138\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTCP_TIMEOUT_INIT()\u003c/code\u003e\u003c/a\u003e\nis defined as a constant,\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/net/tcp.h\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#define TCP_TIMEOUT_INIT ((unsigned)(1*HZ))    \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* RFC6298 2.1 initial RTO value    */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#define TCP_RTO_MAX    ((unsigned)(120*HZ))\n#define TCP_RTO_MIN    ((unsigned)(HZ/5))\n#define TCP_TIMEOUT_MIN    (2U) \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* Min timeout for TCP timers in jiffies */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ewhich is the \u003cstrong\u003e\u003cmark\u003eHZ of the machine\u003c/mark\u003e\u003c/strong\u003e,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;CONFIG_HZ=\u0026#39;\u003c/span\u003e /boot/config-\u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003euname\u003c/span\u003e \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\n\u003cspan class=\"nv\"\u003eCONFIG_HZ\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e250\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"12-measure-the-initial-rto-kernel--412\"\u003e1.2 Measure the initial RTO (kernel \u0026lt;= 4.12)\u003c/h2\u003e\n\n\u003cp\u003eConfirm the setting by initiating a TCP request to a non-existing service (so it will always timeout):\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etelnet 9.9.9.9 9999\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ethe captured traffic:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003etcpdump \u003cspan class=\"nt\"\u003e-nn\u003c/span\u003e \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e enp0s3 host 9.9.9.9 and port 9999\n21:26:43.834860 IP 192.168.1.5.53844 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 9.9.9.9.9999: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e281070166, ... length 0 \u003cspan class=\"c\"\u003e# +0s\u003c/span\u003e\n21:26:44.859801 IP 192.168.1.5.53844 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 9.9.9.9.9999: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e281070166, ... length 0 \u003cspan class=\"c\"\u003e# +1s\u003c/span\u003e\n21:26:46.876328 IP 192.168.1.5.53844 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 9.9.9.9.9999: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e281070166, ... length 0 \u003cspan class=\"c\"\u003e# +2s\u003c/span\u003e\n21:26:51.068268 IP 192.168.1.5.53844 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 9.9.9.9.9999: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e281070166, ... length 0 \u003cspan class=\"c\"\u003e# +4s\u003c/span\u003e\n21:26:59.259304 IP 192.168.1.5.53844 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 9.9.9.9.9999: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e281070166, ... length 0 \u003cspan class=\"c\"\u003e# +8s\u003c/span\u003e\n21:27:15.389522 IP 192.168.1.5.53844 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 9.9.9.9.9999: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e281070166, ... length 0 \u003cspan class=\"c\"\u003e# +16s\u003c/span\u003e\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAs shown in the last column (comments), \u003cstrong\u003e\u003cmark\u003ethe first retry got triggered after 1s\u003c/mark\u003e\u003c/strong\u003e, then \nexponentially backoffed with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e2-\u0026gt;4-\u0026gt;8-\u0026gt;16...\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"13-bpf-hook-in-new-kernels--413\"\u003e1.3 BPF hook in new kernels (\u0026gt;= 4.13)\u003c/h2\u003e\n\n\u003cp\u003eGlancing at kernel \u003ca href=\"https://github.com/torvalds/linux/blob/v4.19/net/ipv4/tcp_output.c#L3348\"\u003e4.19\u003c/a\u003e\n, the initial RTO constant \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTCP_TIMEOUT_INIT\u003c/code\u003e is \u003cstrong\u003e\u003cmark\u003ereplaced by an inline function call\u003c/mark\u003e\u003c/strong\u003e,\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/ipv4/tcp_output.c\u003c/span\u003e\n\u003cspan class=\"cm\"\u003e/* Do all connect socket setups that can be done AF independent. */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003etcp_connect_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einet_csk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eicsk_rto\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_timeout_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eand the latter internally sets the initial RTO to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTCP_TIMEOUT_INIT\u003c/code\u003e, but \u003cstrong\u003e\u003cmark\u003egives us a\nchance to retrieve the desired initial RTO from the BPF code attached to this socket\u003c/mark\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/net/tcp.h\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#define TCP_TIMEOUT_INIT ((unsigned)(1*HZ))    \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* RFC6298 2.1 initial RTO value    */\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"nf\"\u003etcp_timeout_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_call_bpf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_TIMEOUT_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e                \u003cspan class=\"c1\"\u003e// timeout == -1, using default value in the below\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTCP_TIMEOUT_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// defined as the HZ of the system, which is effectively 1 second\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_call_bpf(sk, BPF_SOCK_OPS_TIMEOUT_INIT, 0, NULL)\u003c/code\u003e return \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-1\u003c/code\u003e if\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eNo BPF programs attached to the socket/cgroup, or\u003c/li\u003e\n  \u003cli\u003eThere are BPF programs, but the the excution failed\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOtherwise, if \u003cstrong\u003e\u003cmark\u003eit returns a positive value, that value will be used as the initial RTO\u003c/mark\u003e\u003c/strong\u003e,\ninstead of the default \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTCP_TIMEOUT_INIT\u003c/code\u003e (1 second).\u003c/p\u003e\n\n\u003ch2 id=\"14-purpose-of-this-post-with-kernels--413\"\u003e1.4 Purpose of this post (with kernels \u0026gt;= 4.13)\u003c/h2\u003e\n\n\u003cp\u003eUnless write your own BPF program and attach it to the right place, which\nwill later be triggered and got executed in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_call_bpf()\u003c/code\u003e,\nthere will be no BPF programs, so it will use default RTO.\u003c/p\u003e\n\n\u003cp\u003eThis post tries to \u003cstrong\u003e\u003cmark\u003eset a custom initial RTO with the BPF mechanism provided above\u003c/mark\u003e\u003c/strong\u003e.\nWith this piece of BPF code, we’ll be able to dynamically set/unset custom initial RTOs.\u003c/p\u003e\n\n\u003ch1 id=\"2-implementation-and-verification\"\u003e2 Implementation and verification\u003c/h1\u003e\n\n\u003ch2 id=\"21-bpf-code\"\u003e2.1 BPF code\u003c/h2\u003e\n\n\u003cp\u003eIt turns out that achieving our goal requires only a fairly small piece of BPF\ncode (for demo), as shown below (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp-rto.c\u003c/code\u003e):\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;linux/bpf.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifndef __section\n# define __section(NAME)                  \\\n    __attribute__((section(NAME), used))\n#endif\n\u003c/span\u003e\n\u003cspan class=\"n\"\u003e__section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;sockops\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eset_initial_rto\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock_ops\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ehz\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e250\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// grep \u0026#39;CONFIG_HZ=\u0026#39; /boot/config-$(uname -r), HZ of my machine\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_TIMEOUT_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ereply\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehz\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 3 seconds\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003e_license\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"n\"\u003e__section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;license\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;GPL\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eLet’s leave the explanations to the next section, and try it and see the result first.\u003c/p\u003e\n\n\u003ch2 id=\"22-compile-load-and-attach\"\u003e2.2 Compile, load and attach\u003c/h2\u003e\n\n\u003cp\u003eCompile to BPF object code,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eclang \u003cspan class=\"nt\"\u003e-O2\u003c/span\u003e \u003cspan class=\"nt\"\u003e-target\u003c/span\u003e bpf \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e tcp-rto.c \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e tcp-rto.o\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eLoad it into kernel,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool prog load tcp-rto.o /sys/fs/bpf/tcp-rto\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool prog show\n...\n169: sock_ops  name set_initial_rto  tag e4384b8da577553a  gpl\n        loaded_at 2021-04-29T15:49:03+0800  uid 0\n        xlated 296B  jited 186B  memlock 4096B\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAttach to default cgroup (v2):\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ PROG_ID=169\n$ sudo bpftool cgroup attach /sys/fs/cgroup/unified/ sock_ops id $PROG_ID\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003cstrong\u003e\u003cmark\u003eBPF programs of \u003ccode\u003esockops\u003c/code\u003e type requires cgroupv2\u003c/mark\u003e\u003c/strong\u003e. After attaching a BPF program to a cgroup,\nthe program will be executed for all the sockets in that cgroup.\u003c/p\u003e\n\n  \u003cp\u003eYou could also attach the program to a custom cgroup, but that’s beyong the scope\nof this post. Refer to \u003ca href=\"/blog/cracking-k8s-node-proxy/\"\u003eCracking kubernetes node proxy (aka kube-proxy)\u003c/a\u003e if you need it.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"23-verify\"\u003e2.3 Verify\u003c/h2\u003e\n\n\u003cp\u003eWe’ve intentionally set our initial RTO as a weired value of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3s\u003c/code\u003e in the BPF code, now let’s confirm it works:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etelnet 9.9.9.9 9999\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThe captured traffic:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003etcpdump \u003cspan class=\"nt\"\u003e-nn\u003c/span\u003e \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e enp0s3 host 9.9.9.9 and port 9999\n21:37:46.357686 IP 192.168.1.5.53866 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 9.9.9.9.9999: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e3392061475, .. length 0 \u003cspan class=\"c\"\u003e# +0s\u003c/span\u003e\n21:37:49.372053 IP 192.168.1.5.53866 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 9.9.9.9.9999: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e3392061475, .. length 0 \u003cspan class=\"c\"\u003e# +3s\u003c/span\u003e\n21:37:55.515914 IP 192.168.1.5.53866 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 9.9.9.9.9999: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e3392061475, .. length 0 \u003cspan class=\"c\"\u003e# +6s\u003c/span\u003e\n21:38:07.547362 IP 192.168.1.5.53866 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 9.9.9.9.9999: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e3392061475, .. length 0 \u003cspan class=\"c\"\u003e# +12s\u003c/span\u003e\n21:38:32.635499 IP 192.168.1.5.53866 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 9.9.9.9.9999: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e3392061475, .. length 0 \u003cspan class=\"c\"\u003e# +24s\u003c/span\u003e\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eStarted with a RTO of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3s\u003c/code\u003e, then exponentially backoff-ed as \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3-\u0026gt;6-\u0026gt;12-\u0026gt;24...\u003c/code\u003e,\n\u003cstrong\u003e\u003cmark\u003ejust as expected!\u003c/mark\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2 id=\"24-cleanup\"\u003e2.4 Cleanup\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo rm\u003c/span\u003e /sys/fs/bpf/tcp-rto\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool cgroup detach /sys/fs/cgroup/unified/ sock_ops \u003cspan class=\"nb\"\u003eid\u003c/span\u003e \u003cspan class=\"nv\"\u003e$PROG_ID\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"3-explanations\"\u003e3 Explanations\u003c/h1\u003e\n\n\u003ch2 id=\"31-hook-at-the-right-place-sockops\"\u003e3.1 Hook at the right place (sockops)\u003c/h2\u003e\n\n\u003cp\u003eTo fulfill our goal, \u003cstrong\u003e\u003cmark\u003eour BPF program needs to be excuted whenever there\nare TCP \u003ccode\u003econnect\u003c/code\u003e socket operations\u003c/mark\u003e\u003c/strong\u003e (sockops).\nThis is achieved by declaring our BPF handler to be placed at \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esockops\u003c/code\u003e section:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003e__section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;sockops\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eset_initial_rto\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock_ops\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"32-set-custom-initial-rto\"\u003e3.2 Set custom initial RTO\u003c/h2\u003e\n\n\u003cp\u003eThe next task is to implement our handler, the logic is quite simple:\n\u003cstrong\u003e\u003cmark\u003echeck socket operation type\u003c/mark\u003e\u003c/strong\u003e, then\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eIf it’s \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_SOCK_OPS_TIMEOUT_INIT\u003c/code\u003e (correspoinding to the code in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_timeout_init()\u003c/code\u003e),\n  modify the timeout value, then return\u003c/li\u003e\n  \u003cli\u003eOtherwise, do nothing, just return\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eFirst see \u003cstrong\u003e\u003cmark\u003ehow the custom timeout value will be parsed by the kernel\u003c/mark\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"nf\"\u003etcp_timeout_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_call_bpf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_TIMEOUT_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e                \u003cspan class=\"c1\"\u003e// timeout == -1, using default value in the below\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTCP_TIMEOUT_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// defined as the HZ of the system, which is effectively 1 second, see below\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eand the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_call_bpf()\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e//  include/net/tcp.h\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Call BPF_SOCK_OPS program that returns an int. If the return value\n * is \u0026lt; 0, then the BPF op failed (for example if the loaded BPF\n * program does not support the chosen operation or there is no BPF program loaded).  */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003etcp_call_bpf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"n\"\u003enargs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_CGROUP_RUN_PROG_SOCK_OPS\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esock_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esock_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereply\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIf \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eret == 0\u003c/code\u003e, the timeout value will be \u003cstrong\u003e\u003cmark\u003eparsed from field sock_ops.reply\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eSo for our handler, we just need to check the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eop\u003c/code\u003e field, if it’s\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_SOCK_OPS_TIMEOUT_INIT\u003c/code\u003e, then change it to the desired value:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eset_initial_rto\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock_ops\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ehz\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e250\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// grep \u0026#39;CONFIG_HZ=\u0026#39; /boot/config-$(uname -r), HZ of my machine\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_TIMEOUT_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ereply\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehz\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// seconds\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRET\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThen only piece is missing: \u003cstrong\u003e\u003cmark\u003edetermine the correct return value\u003c/mark\u003e\u003c/strong\u003e \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;RET\u0026gt;\u003c/code\u003e of our handler.\u003c/p\u003e\n\n\u003ch2 id=\"33-determine-the-return-value\"\u003e3.3 Determine the return value\u003c/h2\u003e\n\n\u003cp\u003eTake a further look at the calling stack:\n\u003cstrong\u003e\u003cmark\u003etcp_call_bpf() -\u0026gt; BPF_CGROUP_RUN_PROG_SOCK_OPS() -\u0026gt; __cgroup_bpf_run_filter_sock_ops() -\u0026gt; set_initial_rto()\u003c/mark\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/linux/bpf-cgroup.h\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#define BPF_CGROUP_RUN_PROG_SOCK_OPS(sock_ops)\t\t\t\t       \\\n({\t\t\t\t\t\t\t\t\t       \\\n\tint __ret = 0;\t\t\t\t\t\t\t       \\\n\tif (cgroup_bpf_enabled \u0026amp;\u0026amp; (sock_ops)-\u0026gt;sk) {\t       \\\n\t\ttypeof(sk) __sk = sk_to_full_sk((sock_ops)-\u0026gt;sk);\t       \\\n\t\tif (__sk \u0026amp;\u0026amp; sk_fullsock(__sk))\t\t\t\t       \\\n\t\t\t__ret = __cgroup_bpf_run_filter_sock_ops(__sk,\t       \\\n\t\t\t\t\t\t\t\t sock_ops,     \\\n\t\t\t\t\t\t\t BPF_CGROUP_SOCK_OPS); \\\n\t}\t\t\t\t\t\t\t\t       \\\n\t__ret;\t\t\t\t\t\t\t\t       \\\n})\n\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// kernel/bpf/cgroup.c\u003c/span\u003e\n\u003cspan class=\"cm\"\u003e/**\n * __cgroup_bpf_run_filter_sock_ops() - Run a program on a sock\n * @sk: socket to get cgroup from\n * @sock_ops: bpf_sock_ops_kern struct to pass to program. Contains\n * sk with connection information (IP addresses, etc.) May not contain\n * cgroup info if it is a req sock.\n * @type: The type of program to be exectuted\n *\n * socket passed is expected to be of type INET or INET6.\n *\n * The program type passed in via @type must be suitable for sock_ops\n * filtering. No further check is performed to assert that.\n *\n * This function will return %-EPERM if any if an attached program was found\n * and if it returned != 1 during execution. In all other cases, 0 is returned.\n */\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003e__cgroup_bpf_run_filter_sock_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\t\t\t\t     \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock_ops_kern\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esock_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_attach_type\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ecgroup\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecgrp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esock_cgroup_ptr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_cgrp_data\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\t\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_PROG_RUN_ARRAY\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecgrp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebpf\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eeffective\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003esock_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\t\t\t\t \u003cspan class=\"n\"\u003eBPF_PROG_RUN\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEPERM\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEXPORT_SYMBOL\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__cgroup_bpf_run_filter_sock_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eSo \u003cstrong\u003e\u003cmark\u003efor a successful run\u003c/mark\u003e\u003c/strong\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_call_bpf()\u003c/code\u003e expects a return value\nof \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0\u003c/code\u003e from \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_CGROUP_RUN_PROG_SOCK_OPS\u003c/code\u003e, which effectively requires our handler\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eset_initial_rto()\u003c/code\u003e returning \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThat’s all! We’ve done with our handler.\u003c/p\u003e\n\n\u003ch1 id=\"4-debug-facility\"\u003e4 Debug facility\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_trace_printk()\u003c/code\u003e can be used to print logs to kernel’s tracing facility,\nsee appendix for the full code, the output looks like this:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo cat\u003c/span\u003e /sys/kernel/debug/tracing/trace_pipe\n ...\n  NetworkManager-709     \u003cspan class=\"o\"\u003e[\u003c/span\u003e000] .... 1492923.972742: 0: Miss, \u003cspan class=\"nv\"\u003eop\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e6\n          \u0026lt;idle\u0026gt;-0       \u003cspan class=\"o\"\u003e[\u003c/span\u003e003] ..s. 1492924.174092: 0: Miss, \u003cspan class=\"nv\"\u003eop\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e4\n          \u0026lt;idle\u0026gt;-0       \u003cspan class=\"o\"\u003e[\u003c/span\u003e002] ..s. 1492938.675528: 0: Set TCP connect \u003cspan class=\"nb\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 3s\n          \u0026lt;idle\u0026gt;-0       \u003cspan class=\"o\"\u003e[\u003c/span\u003e002] ..s. 1492938.675575: 0: Set TCP connect \u003cspan class=\"nb\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 3s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"5-related-stuffs\"\u003e5 Related stuffs\u003c/h1\u003e\n\n\u003ch2 id=\"51-netipv4tcp_syn_retries\"\u003e5.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet.ipv4.tcp_syn_retries\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eHow many times the SYN will be retransmitted (retried) at most?\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003esysctl net.ipv4.tcp_syn_retries\nnet.ipv4.tcp_syn_retries \u003cspan class=\"o\"\u003e=\u003c/span\u003e 6\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eEffectively, this takes \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1+2+4+8+16+32+64=127s\u003c/code\u003e before the connection finally aborts.\u003c/p\u003e\n\n\u003ch2 id=\"52-netipv4tcp_synack_retries\"\u003e5.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet.ipv4.tcp_synack_retries\u003c/code\u003e\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003esysctl net.ipv4.tcp_synack_retries\nnet.ipv4.tcp_synack_retries \u003cspan class=\"o\"\u003e=\u003c/span\u003e 5\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"6-summary\"\u003e6 Summary\u003c/h1\u003e\n\n\u003cp\u003eThis post creates a simple BPF program to dynamically change TCP initial RTO, which\nreveals the tip of the BPF iceberg.\u003c/p\u003e\n\n\u003cp\u003eWithout this facility, in some cases, we have to modify and re-compile the kernel\nto achieve the same effects. In this sense, BPF make Linux kernel programmable.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eUpdate [20210507]\u003c/strong\u003e: it is after the finish of this post that i found\nthis \u003ca href=\"https://serverfault.com/questions/295390/how-can-i-tune-the-initial-tcp-retransmit-timeout\"\u003estackexchange thread\u003c/a\u003e\nand this post \u003ca href=\"https://blog.habets.se/2020/11/BPF-the-future-of-configs.html\"\u003eBPF: The future of configs\u003c/a\u003e, which\ncovered the same topic.\u003c/p\u003e\n\n\u003ch1 id=\"references\"\u003eReferences\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://lwn.net/Articles/727189/\"\u003ebpf: Adding support for sock_ops\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"http://github.com/torvalds/linux/blob/v4.19/samples/bpf/tcp_clamp_kern.c\"\u003esamples/bpf/tcp_clamp_kern.c\u003c/a\u003e, linux v4.19\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"appendix-full-code\"\u003eAppendix: full code\u003c/h1\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;linux/bpf.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifndef __section\n# define __section(NAME)                  \\\n    __attribute__((section(NAME), used))\n#endif\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifndef BPF_FUNC\n#define BPF_FUNC(NAME, ...)     \\\n        (*NAME)(__VA_ARGS__) = (void *) BPF_FUNC_##NAME\n#endif\n\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eBPF_FUNC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etrace_printk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003efmt_size\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifndef printk\n# define printk(fmt, ...)                                      \\\n    ({                                                         \\\n     char ____fmt[] = fmt;                                  \\\n     trace_printk(____fmt, sizeof(____fmt), ##__VA_ARGS__); \\\n     })\n#endif\n\u003c/span\u003e\n\u003cspan class=\"n\"\u003e__section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;sockops\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eset_initial_rto\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock_ops\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ehz\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e250\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// grep \u0026#39;CONFIG_HZ=\u0026#39; /boot/config-$(uname -r), HZ of my machine\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_TIMEOUT_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ereply\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehz\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 3 seconds\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Set TCP connect timeout = %ds\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eprintk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Miss, op=%d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003e_license\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"n\"\u003e__section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;license\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;GPL\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/bpf-portability-and-co-re-zh/\"\u003e\u003cspan\u003e« [译] BPF 可移植性和 CO-RE（一次编译，到处运行）（Facebook，2020）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/lifetime-of-bpf-objects-zh/\"\u003e\u003cspan\u003e[译] BPF 对象（BPF objects）的生命周期（Facebook，2018） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2021-04-28T00:00:00Z",
  "Author": "Arthur Chiao"
}