{
  "Source": "arthurchiao.art",
  "Title": "[译] 利用 ebpf sockmap/redirection 提升 socket 性能（2020）",
  "Link": "https://arthurchiao.art/blog/socket-acceleration-with-ebpf-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003e[译] 利用 ebpf sockmap/redirection 提升 socket 性能（2020）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2021-01-28 | Last Update 2021-01-28\u003c/p\u003e\n  \n  \u003ch3 id=\"译者序\"\u003e译者序\u003c/h3\u003e\n\n\u003cp\u003e本文翻译自 2020 年的一篇英文博客 \u003ca href=\"https://cyral.com/blog/how-to-ebpf-accelerating-cloud-native/\"\u003eHow to use eBPF for accelerating Cloud Native\napplications\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e原文标题非常宽泛，但内容其实很技术：展示了如何编写简单的 BPF 程序做 socket level\n重定向（redirection）。对于\u003cstrong\u003e源和目的端都在同一台机器\u003c/strong\u003e的应用来说，这样可以\n\u003cstrong\u003e绕过整个 TCP/IP 协议栈\u003c/strong\u003e，直接将数据发送到 socket 对端。效果如右下图（懒得画图\n，直接从 \u003ca href=\"https://www.slideshare.net/ThomasGraf5/accelerating-envoy-and-istio-with-cilium-and-the-linux-kernel\"\u003eCilium 分享\u003c/a\u003e\n截个图，所以其中 Cilium 字样，但\u003cstrong\u003e本文不需要 Cilium\u003c/strong\u003e）：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/socket-acceleration-with-ebpf/sock-redir.png\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e实现这个功能依赖两个东西：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003esockmap：这是一个存储 socket 信息的映射表。作用：\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e一段 BPF 程序\u003cstrong\u003e监听所有的内核 socket 事件\u003c/strong\u003e，并将新建的 socket 记录到这个 map；\u003c/li\u003e\n      \u003cli\u003e另一段 BPF 程序\u003cstrong\u003e拦截所有 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 系统调用\u003c/strong\u003e，然后去 map 里查找 socket 对端，之后\n调用 BPF 函数绕过 TCP/IP 协议栈，直接将数据发送到对端的 socket queue。\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003ecgroups：指定要\u003cstrong\u003e监听哪个范围内的 sockets 事件\u003c/strong\u003e，进而决定了稍后要对哪些 socket 做重定向。\u003c/p\u003e\n\n    \u003cp\u003esockmap 需要关联到某个 cgroup，然后这个 cgroup 内的所有 socket 就都会执行加\n 载的 BPF 程序。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e运行本文中的例子一台主机就够了，非常适合 BPF 练手。译文所用的\u003ca href=\"https://github.com/ArthurChiao/socket-acceleration-with-ebpf\"\u003e完整代码\u003c/a\u003e，\n原文用的\u003ca href=\"https://github.com/cyralinc/os-eBPF/\"\u003e完整代码\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e由于译者水平有限，本文不免存在遗漏或错误之处。如有疑问，请查阅原文。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e以下是译文。\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#译者序\" id=\"markdown-toc-译者序\"\u003e译者序\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-引言\" id=\"markdown-toc-1-引言\"\u003e1 引言\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-bpf-基础\" id=\"markdown-toc-11-bpf-基础\"\u003e1.1 BPF 基础\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-本文-bpf-程序总体设计\" id=\"markdown-toc-12-本文-bpf-程序总体设计\"\u003e1.2 本文 BPF 程序总体设计\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-bpf-程序一监听-socket-事件更新-sockmap\" id=\"markdown-toc-2-bpf-程序一监听-socket-事件更新-sockmap\"\u003e2 BPF 程序一：监听 socket 事件，更新 sockmap\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-监听-socket-事件\" id=\"markdown-toc-21-监听-socket-事件\"\u003e2.1 监听 socket 事件\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-将-socket-信息写入-sockmap\" id=\"markdown-toc-22-将-socket-信息写入-sockmap\"\u003e2.2 将 socket 信息写入 sockmap\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#221-从-socket-metadata-中提取-sockmap-key\" id=\"markdown-toc-221-从-socket-metadata-中提取-sockmap-key\"\u003e2.2.1 从 socket metadata 中提取 sockmap key\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#222-插入-sockmap\" id=\"markdown-toc-222-插入-sockmap\"\u003e2.2.2 插入 sockmap\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-小结\" id=\"markdown-toc-23-小结\"\u003e2.3 小结\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-bpf-程序二拦截-sendmsg-系统调用socket-重定向\" id=\"markdown-toc-3-bpf-程序二拦截-sendmsg-系统调用socket-重定向\"\u003e3 BPF 程序二：拦截 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 系统调用，socket 重定向\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-拦截-sendmsg-系统调用\" id=\"markdown-toc-31-拦截-sendmsg-系统调用\"\u003e3.1 拦截 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 系统调用\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-从-socket-message-中提取-key\" id=\"markdown-toc-32-从-socket-message-中提取-key\"\u003e3.2 从 socket message 中提取 key\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-socket-重定向\" id=\"markdown-toc-33-socket-重定向\"\u003e3.3 Socket 重定向\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-编译加载运行\" id=\"markdown-toc-4-编译加载运行\"\u003e4 编译、加载、运行\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-编译\" id=\"markdown-toc-41-编译\"\u003e4.1 编译\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-加载load和-attach-sockops-程序\" id=\"markdown-toc-42-加载load和-attach-sockops-程序\"\u003e4.2 加载（load）和 attach \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esockops\u003c/code\u003e 程序\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#加载到内核\" id=\"markdown-toc-加载到内核\"\u003e加载到内核\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#attach-到-cgroups\" id=\"markdown-toc-attach-到-cgroups\"\u003eAttach 到 cgroups\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#查看-map-id\" id=\"markdown-toc-查看-map-id\"\u003e查看 map ID\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#43-加载和-attach-sk_msg-程序\" id=\"markdown-toc-43-加载和-attach-sk_msg-程序\"\u003e4.3 加载和 attach \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_msg\u003c/code\u003e 程序\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#加载到内核-1\" id=\"markdown-toc-加载到内核-1\"\u003e加载到内核\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#attach\" id=\"markdown-toc-attach\"\u003eAttach\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#查看\" id=\"markdown-toc-查看\"\u003e查看\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#44-测试\" id=\"markdown-toc-44-测试\"\u003e4.4 测试\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#45-清理\" id=\"markdown-toc-45-清理\"\u003e4.5 清理\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-结束语\" id=\"markdown-toc-5-结束语\"\u003e5 结束语\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#附录bpf-开发环境搭建\" id=\"markdown-toc-附录bpf-开发环境搭建\"\u003e附录：BPF 开发环境搭建\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003cp\u003e很多用户基于我们提供的服务来构建实时应用（real time applications），这些应用对性能\n有着严格的要求，因而促使我们不断探索各种提升性能的方式，eBPF 就是尝试之一\n，用于加速应用之间的通信。由于这方面资料尚少，因此我们整理成两篇文章分享给大家：\n本篇讲实现，\u003ca href=\"https://cyral.com/blog/lessons-using-ebpf-accelerating-cloud-native/\"\u003e下一篇\u003c/a\u003e\n是一些性能测试和问题讨论。\u003c/p\u003e\n\n\u003ch1 id=\"1-引言\"\u003e1 引言\u003c/h1\u003e\n\n\u003ch2 id=\"11-bpf-基础\"\u003e1.1 BPF 基础\u003c/h2\u003e\n\n\u003cp\u003e通常情况下，eBPF 程序由两部分构成：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e内核空间部分：\u003cstrong\u003e内核事件触发\u003c/strong\u003e执行，例如网卡收到一个包、系统调用创建了一个 shell 进程等等；\u003c/li\u003e\n  \u003cli\u003e用户空间部分：通过某种\u003cstrong\u003e共享数据的方式\u003c/strong\u003e（例如 BPF maps）来\u003cstrong\u003e读取\u003c/strong\u003e内核部分产生的数据；\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e本文主要关注内核部分。内核支持不同类型的 eBPF 程序，它们各自可以 attach 到不同的 hook 点，如下图所示：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/socket-acceleration-with-ebpf/bpf-kernel-hooks.png\" width=\"50%\" height=\"50%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e当内核中触发了与这些 hook 相关的事件（例如，发生 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esetsockopt()\u003c/code\u003e系统调用）时，\nattach 到这里的 BPF 程序就会执行。\u003c/p\u003e\n\n\u003cp\u003e用户侧需要用到的所有 \u003cstrong\u003eBPF 类型都定义在\u003c/strong\u003e UAPI \u003ca href=\"https://github.com/torvalds/linux/blob/master/include/uapi/linux/bpf.h\"\u003ebpf.h\u003c/a\u003e。\n本文将主要关注下面两种\u003cmark\u003e能拦截到 socket 操作\u003c/mark\u003e（例如 TCP \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econnect\u003c/code\u003e、\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 等）的类型：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SOCK_OPS\u003c/code\u003e：socket operations 事件触发执行。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_MSG\u003c/code\u003e：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg()\u003c/code\u003e 系统调用触发执行。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e本文将\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e用 \u003cstrong\u003eC 编写 eBPF 代码\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003e用 LLVM Clang 前端来生成 ELF bytecode\u003c/li\u003e\n  \u003cli\u003e用 \u003ca href=\"https://manpages.ubuntu.com/manpages/focal/man8/bpftool-prog.8.html\"\u003ebpftool\u003c/a\u003e  将代码加载到内核（以及从内核卸载）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e下面看代码实现。\u003c/p\u003e\n\n\u003ch2 id=\"12-本文-bpf-程序总体设计\"\u003e1.2 本文 BPF 程序总体设计\u003c/h2\u003e\n\n\u003cp\u003e首先创建一个全局的\u003cstrong\u003e映射表\u003c/strong\u003e（map）来\u003cstrong\u003e记录所有的 socket 信息\u003c/strong\u003e。基于这个\nsockmap，编写两段 BPF 程序分别完成以下功能：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e程序一：\u003cmark\u003e拦截所有 TCP connection 事件\u003c/mark\u003e，然后将 socket 信息存储到这个 map；\u003c/li\u003e\n  \u003cli\u003e程序二：\u003cmark\u003e拦截所有 \u003ccode\u003esendmsg()\u003c/code\u003e 系统调用\u003c/mark\u003e，然后从 map 中查\n询这个socket 信息，之后直接将数据\u003cstrong\u003e重定向到对端\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"2-bpf-程序一监听-socket-事件更新-sockmap\"\u003e2 BPF 程序一：监听 socket 事件，更新 sockmap\u003c/h1\u003e\n\n\u003ch2 id=\"21-监听-socket-事件\"\u003e2.1 监听 socket 事件\u003c/h2\u003e\n\n\u003cp\u003e程序功能：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e系统中有 socket 操作时\u003c/strong\u003e（例如 connection establishment、tcp retransmit 等），触发执行；\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e\u003cstrong\u003e指定加载位置来实现\u003c/strong\u003e：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__section(\u0026#34;sockops\u0026#34;)\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e执行逻辑\u003c/strong\u003e：提取 socket 信息，并以 key \u0026amp; value 形式存储到 sockmap。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e代码如下：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003e__section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;sockops\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 加载到 ELF 中的 `sockops` 区域，有 socket operations 时触发执行\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003ebpf_sockmap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock_ops\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 被动建连\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 主动建连\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003efamily\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e             \u003cspan class=\"c1\"\u003e// AF_INET\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ebpf_sock_ops_ipv4\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e         \u003cspan class=\"c1\"\u003e// 将 socket 信息记录到到 sockmap\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"nl\"\u003edefault:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e对于\u003cstrong\u003e两端都在本节点\u003c/strong\u003e的 socket 来说，\u003cmark\u003e这段代码会执行两次\u003c/mark\u003e：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e源端发送 SYN 时\u003c/strong\u003e会产生一个事件，命中 case 2\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e目的端发送 SYN+ACK 时\u003c/strong\u003e会产生一个事件，命中 case 1\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e因此对于每一个成功建连的 socket，sockmap 中会有两条记录（key 不同）。\u003c/p\u003e\n\n\u003cp\u003e提取 socket 信息以存储到 sockmap 是由函数 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_sock_ops_ipv4()\u003c/code\u003e 完成的，接下\n来看下它的实现。\u003c/p\u003e\n\n\u003ch2 id=\"22-将-socket-信息写入-sockmap\"\u003e2.2 将 socket 信息写入 sockmap\u003c/h2\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003ebpf_sock_ops_ipv4\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock_ops\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock_key\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eextract_key4_from_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esock_hash_update\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esock_ops_map\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_NOEXIST\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;sock_hash_update() failed, ret: %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eprintk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;sockmap: op %d, port %d --\u0026gt; %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocal_port\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_ntohl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eremote_port\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e三个步骤：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eextract_key4_from_ops()\u003c/code\u003e 从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct bpf_sock_ops *skops\u003c/code\u003e（socket metadata）中提取 key；\u003c/li\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_hash_update()\u003c/code\u003e 将 key:value 写入全局的 sockmap \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_ops_map\u003c/code\u003e，这\n个变量定义在我们的头文件中。\u003c/li\u003e\n  \u003cli\u003e打印一行日志，方面我们测试用，后面会看到效果。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"221-从-socket-metadata-中提取-sockmap-key\"\u003e2.2.1 从 socket metadata 中提取 sockmap key\u003c/h3\u003e\n\n\u003cp\u003emap 的类型可以是：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_MAP_TYPE_SOCKMAP\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_MAP_TYPE_SOCKHASH\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e本文用的是第二种，sockmap 定义如下，\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_map_def\u003c/span\u003e \u003cspan class=\"n\"\u003e__section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;maps\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esock_ops_map\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e           \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_MAP_TYPE_SOCKHASH\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekey_size\u003c/span\u003e       \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock_key\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue_size\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e             \u003cspan class=\"c1\"\u003e// 存储 socket\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emax_entries\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e65535\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap_flags\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ekey 定义如下：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock_key\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"kt\"\u003euint32_t\u003c/span\u003e \u003cspan class=\"n\"\u003esip4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// 源 IP\u003c/span\u003e\n\t\u003cspan class=\"kt\"\u003euint32_t\u003c/span\u003e \u003cspan class=\"n\"\u003edip4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// 目的 IP\u003c/span\u003e\n\t\u003cspan class=\"kt\"\u003euint8_t\u003c/span\u003e  \u003cspan class=\"n\"\u003efamily\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 协议类型\u003c/span\u003e\n\t\u003cspan class=\"kt\"\u003euint8_t\u003c/span\u003e  \u003cspan class=\"n\"\u003epad1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// this padding required for 64bit alignment\u003c/span\u003e\n\t\u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003epad2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// else ebpf kernel verifier rejects loading of the program\u003c/span\u003e\n\t\u003cspan class=\"kt\"\u003euint32_t\u003c/span\u003e \u003cspan class=\"n\"\u003epad3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\t\u003cspan class=\"kt\"\u003euint32_t\u003c/span\u003e \u003cspan class=\"n\"\u003esport\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 源端口\u003c/span\u003e\n\t\u003cspan class=\"kt\"\u003euint32_t\u003c/span\u003e \u003cspan class=\"n\"\u003edport\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 目的端口\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"n\"\u003e__attribute__\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003epacked\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e下面是提取 key 的实现，非常简单：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eextract_key4_from_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock_ops\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eops\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock_key\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// keep ip and port in network byte order\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edip4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eremote_ip4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esip4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocal_ip4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003efamily\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// local_port is in host byte order, and remote_port is in network byte order\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esport\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebpf_htonl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocal_port\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edport\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFORCE_READ\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eremote_port\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"222-插入-sockmap\"\u003e2.2.2 插入 sockmap\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_hash_update()\u003c/code\u003e 将 socket 信息写入到 sockmap，这个函数是我们定义的一个宏，\n会展开成内核提供的一个 hash update 函数，不再详细展开。\u003c/p\u003e\n\n\u003ch2 id=\"23-小结\"\u003e2.3 小结\u003c/h2\u003e\n\n\u003cp\u003e至此，第一段代码就完成了，它能\u003cmark\u003e确保我们拦截到 socket 建连事件\u003c/mark\u003e，并将\nsocket 信息写入一个全局的映射表（sockmap）。\u003c/p\u003e\n\n\u003ch1 id=\"3-bpf-程序二拦截-sendmsg-系统调用socket-重定向\"\u003e3 BPF 程序二：拦截 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 系统调用，socket 重定向\u003c/h1\u003e\n\n\u003cp\u003e第二段 BPF 程序的功能：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e拦截所有的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 系统调用，从消息中提取 key；\u003c/li\u003e\n  \u003cli\u003e根据 key 查询 sockmap，找到这个 socket 的对端，然后绕过 TCP/IP 协议栈，直接将\n数据重定向过去。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e要完成这个功能，需要：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e在 socket 发起 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 系统调用时\u003cstrong\u003e触发执行\u003c/strong\u003e，\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e\u003cstrong\u003e指定加载位置来实现\u003c/strong\u003e：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__section(\u0026#34;sk_msg\u0026#34;)\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e关联到前面已经创建好的 sockmap，因为要去里面查询 socket 的对端信息。\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e通过将 sockmap attach 到 BPF 程序实现：\u003cmark\u003emap 中的所有 socket 都会继承这段程序\u003c/mark\u003e，\n 因此其中的任何 socket 触发 sendmsg 系统调用时，都会执行到这段代码。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"31-拦截-sendmsg-系统调用\"\u003e3.1 拦截 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 系统调用\u003c/h2\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003e__section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;sk_msg\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 加载目标文件（ELF ）中的 `sk_msg` section，`sendmsg` 系统调用时触发执行\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003ebpf_redir\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_msg_md\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock_key\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eextract_key4_from_msg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003emsg_redirect_hash\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esock_ops_map\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_F_INGRESS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eSK_PASS\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e当 attach 了这段程序的 socket 上有 sendmsg 系统调用时，内核就会执行这段代码。它会：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e从 socket metadata 中提取 key，\u003c/li\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_socket_redirect_hash()\u003c/code\u003e 寻找对应的 socket，并根据 flag（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_F_INGRESS\u003c/code\u003e），\n将数据重定向到 socket 的某个 queue。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"32-从-socket-message-中提取-key\"\u003e3.2 从 socket message 中提取 key\u003c/h2\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eextract_key4_from_msg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_msg_md\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock_key\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esip4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eremote_ip4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edip4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocal_ip4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003efamily\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edport\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebpf_htonl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocal_port\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esport\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFORCE_READ\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eremote_port\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"33-socket-重定向\"\u003e3.3 Socket 重定向\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emsg_redirect_hash()\u003c/code\u003e 也是我们定义的一个宏，最终调用的是 BPF 内置的辅助函数。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e最终需要用的其实是内核辅助函数 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_msg_redirect_hash()\u003c/code\u003e，但后者无法直接访问，\n只能通过 UAPI \u003ca href=\"https://github.com/torvalds/linux/blob/master/include/uapi/linux/bpf.h\"\u003elinux/bpf.h\u003c/a\u003e\n预定义的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_FUNC_msg_redirect_hash\u003c/code\u003e 来访问，否则校验器无法通过。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emsg_redirect_hash(msg, \u0026amp;sock_ops_map, \u0026amp;key, BPF_F_INGRESS)\u003c/code\u003e 几个参数：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sk_msg_md *msg\u003c/code\u003e：用户可访问的待发送数据的元信息（metadata）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026amp;sock_ops_map\u003c/code\u003e：这个 BPF 程序 attach 到的 sockhash map\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekey\u003c/code\u003e：在 map 中索引用的 key\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_F_INGRESS\u003c/code\u003e：放到对端的哪个 queue（rx 还是 tx）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"4-编译加载运行\"\u003e4 编译、加载、运行\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftool\u003c/code\u003e 是一个用户空间工具，能用来加载 BPF 代码到内核、创建和更新 maps，以及收集 BPF\n程序和 maps 信息。其源代码位于 Linux 内核树中：\u003ca href=\"https://github.com/torvalds/linux/tree/master/tools/bpf/bpftool\"\u003etools/bpf/bpftool\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"41-编译\"\u003e4.1 编译\u003c/h2\u003e\n\n\u003cp\u003e用 LLVM Clang frontend 来编译前面两段程序，生成目标代码（object code）：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eclang \u003cspan class=\"nt\"\u003e-O2\u003c/span\u003e \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e \u003cspan class=\"nt\"\u003e-target\u003c/span\u003e bpf \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e bpf_sockops.c \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e bpf_sockops.o\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eclang \u003cspan class=\"nt\"\u003e-O2\u003c/span\u003e \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e \u003cspan class=\"nt\"\u003e-target\u003c/span\u003e bpf \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e bpf_redir.c \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e bpf_redir.o\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"42-加载load和-attach-sockops-程序\"\u003e4.2 加载（load）和 attach \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esockops\u003c/code\u003e 程序\u003c/h2\u003e\n\n\u003ch3 id=\"加载到内核\"\u003e加载到内核\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool prog load bpf_sockops.o /sys/fs/bpf/bpf_sockops \u003cspan class=\"nb\"\u003etype \u003c/span\u003esockops\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e这条命令将 object 代码加载到内核（但还没 attach 到 hook 点）\u003c/li\u003e\n  \u003cli\u003e加载之后的代码会 pin 到一个 \u003ca href=\"https://lwn.net/Articles/664688/\"\u003eBPF 虚拟文件系统\u003c/a\u003e \n来持久存储，这样就能获得一个\u003cstrong\u003e指向这个程序的文件句柄\u003c/strong\u003e（handle）供稍后使用。\u003c/li\u003e\n  \u003cli\u003ebpftool 会\u003cstrong\u003e在 ELF 目标文件中创建我们声明的 sockmap\u003c/strong\u003e（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_ops_map\u003c/code\u003e 变量，定\n义在头文件中）。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"attach-到-cgroups\"\u003eAttach 到 cgroups\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool cgroup attach /sys/fs/cgroup/unified/ sock_ops pinned /sys/fs/bpf/bpf_sockops\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e这条命令将加载之后的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_ops\u003c/code\u003e 程序 \u003cstrong\u003eattach 到指定的 cgroup\u003c/strong\u003e，\u003c/li\u003e\n  \u003cli\u003e\u003cmark\u003e这个 cgroup 内的所有进程的所有 sockets\u003c/mark\u003e，都将会应用这段程序。如果使用的是\n \u003ca href=\"http://man7.org/conf/osseu2018/cgroups_v2-OSS.eu-2018-Kerrisk.pdf\"\u003ecgroupv2\u003c/a\u003e\n 时，systemd 会在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/fs/cgroup/unified\u003c/code\u003e 自动创建一个 mount 点。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e下面的命令说明 \u003cmark\u003e/sys/fs/cgroup/unified/ 确实是 cgroupv2 挂载点\u003c/mark\u003e：\u003c/p\u003e\n\n  \u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emount | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003ecgroup\ncgroup2 on /sys/fs/cgroup/unified \u003cspan class=\"nb\"\u003etype \u003c/span\u003ecgroup2 \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,nosuid,nodev,noexec,relatime,nsdelegate\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e  \u003c/div\u003e\n\n  \u003cp\u003e如果想自定义 cgroupv2 挂载点，可参考\n\u003ca href=\"/blog/cracking-k8s-node-proxy/\"\u003eCracking kubernetes node proxy (aka kube-proxy)\u003c/a\u003e，其中的第五种方式。\u003c/p\u003e\n\n  \u003cp\u003e译注。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"查看-map-id\"\u003e查看 map ID\u003c/h3\u003e\n\n\u003cp\u003e至此，目标代码已经加载（load）和附着（attach）到 hook 点了，接下来查看\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_ops\u003c/code\u003e 程序所使用的 map ID，因为\u003cstrong\u003e后面要用这个 ID 来 attach \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_msg\u003c/code\u003e 程序\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003eMAP_ID\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool prog show pinned /sys/fs/bpf/bpf_sockops | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e \u003cspan class=\"nt\"\u003e-E\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;map_ids [0-9]+\u0026#39;\u003c/span\u003e| \u003cspan class=\"nb\"\u003ecut\u003c/span\u003e \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-f2-\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool map pin \u003cspan class=\"nb\"\u003eid\u003c/span\u003e \u003cspan class=\"nv\"\u003e$MAP_ID\u003c/span\u003e /sys/fs/bpf/sock_ops_map\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"43-加载和-attach-sk_msg-程序\"\u003e4.3 加载和 attach \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_msg\u003c/code\u003e 程序\u003c/h2\u003e\n\n\u003ch3 id=\"加载到内核-1\"\u003e加载到内核\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool prog load bpf_redir.o /sys/fs/bpf/bpf_redir \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    map name sock_ops_map \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    pinned /sys/fs/bpf/sock_ops_map\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e将程序加载到内核\u003c/li\u003e\n  \u003cli\u003e将程序 pin 到 BPF 文件系统的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/fs/bpf/bpf_redir\u003c/code\u003e 位置\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e重用已有的 sockmap\u003c/strong\u003e，指定了 sockmap 的名字为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_ops_map\u003c/code\u003e 并且文件路径为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/fs/bpf/sock_ops_map\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"attach\"\u003eAttach\u003c/h3\u003e\n\n\u003cp\u003e将已经加载到内核的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_msg\u003c/code\u003e 程序 attach 到 sockmap，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool prog attach pinned /sys/fs/bpf/bpf_redir msg_verdict pinned /sys/fs/bpf/sock_ops_map\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e从现在开始，sockmap 内的所有 socket 在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 时都将触发执行这段 BPF 代码。\u003c/p\u003e\n\n\u003ch3 id=\"查看\"\u003e查看\u003c/h3\u003e\n\n\u003cp\u003e查看系统中已经加载的所有 BPF 程序：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool prog show\n...\n38: sock_ops  name bpf_sockmap  tag d9aec8c151998c9c  gpl\n        loaded_at 2021-01-28T22:52:06+0800  uid 0\n        xlated 672B  jited 388B  memlock 4096B  map_ids 13\n        btf_id 20\n43: sk_msg  name bpf_redir  tag 550f6d3cfcae2157  gpl\n        loaded_at 2021-01-28T22:52:06+0800  uid 0\n        xlated 224B  jited 156B  memlock 4096B  map_ids 13\n        btf_id 24\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e查看系统中所有的 map，以及 map 详情：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool map show\n13: sockhash  name sock_ops_map  flags 0x0\n        key 24B  value 4B  max_entries 65535  memlock 5767168B\n\n\u003cspan class=\"c\"\u003e# -p/--pretty：人类友好格式打印\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e map show \u003cspan class=\"nb\"\u003eid \u003c/span\u003e13\n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e: 13,\n    \u003cspan class=\"s2\"\u003e\u0026#34;type\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;sockhash\u0026#34;\u003c/span\u003e,\n    \u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;sock_ops_map\u0026#34;\u003c/span\u003e,\n    \u003cspan class=\"s2\"\u003e\u0026#34;flags\u0026#34;\u003c/span\u003e: 0,\n    \u003cspan class=\"s2\"\u003e\u0026#34;bytes_key\u0026#34;\u003c/span\u003e: 24,\n    \u003cspan class=\"s2\"\u003e\u0026#34;bytes_value\u0026#34;\u003c/span\u003e: 4,\n    \u003cspan class=\"s2\"\u003e\u0026#34;max_entries\u0026#34;\u003c/span\u003e: 65535,\n    \u003cspan class=\"s2\"\u003e\u0026#34;bytes_memlock\u0026#34;\u003c/span\u003e: 5767168,\n    \u003cspan class=\"s2\"\u003e\u0026#34;frozen\u0026#34;\u003c/span\u003e: 0\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e打印 map 内的所有内容：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e map dump \u003cspan class=\"nb\"\u003eid \u003c/span\u003e13\n\u003cspan class=\"o\"\u003e[{\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\u0026#34;key\u0026#34;\u003c/span\u003e:\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;0x7f\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x01\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x7f\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x01\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x01\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x03\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0xe8\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0xa1\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x86\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e\n  ],\n  \u003cspan class=\"s2\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"s2\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e:\u003cspan class=\"s2\"\u003e\u0026#34;Operation not supported\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\u0026#34;key\u0026#34;\u003c/span\u003e:\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;0x7f\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x01\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x7f\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x01\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x01\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0xa1\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x86\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x03\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0xe8\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;0x00\u0026#34;\u003c/span\u003e\n  ],\n  \u003cspan class=\"s2\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"s2\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e:\u003cspan class=\"s2\"\u003e\u0026#34;Operation not supported\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中的 error 是因为 sockhash map 不支持从用户空间获取 map 内的值（values）。\u003c/p\u003e\n\n\u003ch2 id=\"44-测试\"\u003e4.4 测试\u003c/h2\u003e\n\n\u003cp\u003e在一个窗口中启动 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esocat\u003c/code\u003e 作为服务端，监听在 1000 端口：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# start a TCP listener at port 1000, and echo back the received data\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003esocat TCP4-LISTEN:1000,fork \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e:cat\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e另一个窗口用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enc\u003c/code\u003e 作为客户端来访问服务端，建立 socket：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# connect to the local TCP listener at port 1000\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enc localhost 1000\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e观察我们在 BPF 代码中打印的日志：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ sudo cat /sys/kernel/debug/tracing/trace_pipe\n    nc-13227   [002] .... 105048.340802: 0: sockmap: op 4, port 50932 --\u0026gt; 1001\n    nc-13227   [002] ..s1 105048.340811: 0: sockmap: op 5, port 1001 --\u0026gt; 50932\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"45-清理\"\u003e4.5 清理\u003c/h2\u003e\n\n\u003cp\u003e从 sockmap 中 detach 第二段 BPF 程序，并将其从 BPF 文件系统中 unpin：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool prog detach pinned /sys/fs/bpf/bpf_redir msg_verdict pinned /sys/fs/bpf/sock_ops_map\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo rm\u003c/span\u003e /sys/fs/bpf/bpf_redir\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e当 BPF 文件系统中某个文件的 \u003ca href=\"https://facebookmicrosites.github.io/bpf/blog/2018/08/31/object-lifetime.html\"\u003ereference count\u003c/a\u003e \n为零时，该就会自动从 BPF 文件系统中删除。\u003c/p\u003e\n\n\u003cp\u003e同理，从 cgroups 中 detach 第一段 BPF 程序，并将其从 BPF 文件系统中 unpin：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool cgroup detach /sys/fs/cgroup/unified/ sock_ops pinned /sys/fs/bpf/bpf_sockops\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo rm\u003c/span\u003e /sys/fs/bpf/bpf_sockops\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后删除 sockmaps：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo rm\u003c/span\u003e /sys/fs/bpf/sock_ops_map\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"5-结束语\"\u003e5 结束语\u003c/h1\u003e\n\n\u003cp\u003e本文展示了如何利用 sockmap/cgroups BPF 程序加速两端都在同一台机器的 socket 的通\n信。\u003ca href=\"https://cyral.com/blog/lessons-using-ebpf-accelerating-cloud-native/\"\u003e下一篇\u003c/a\u003e\n会给出一些性能测试，有兴趣可以前往查看。\u003c/p\u003e\n\n\u003cp\u003e最后，希望本文能给大家带来一些帮助。有任何问题，可以邮件联系我们：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eproduct@cyral.com\u003c/code\u003e。\u003c/p\u003e\n\n\u003ch1 id=\"附录bpf-开发环境搭建\"\u003e附录：BPF 开发环境搭建\u003c/h1\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e原文测试环境：Ubuntu Linux 18.04 with kernel 5.3.0-40-generic.\u003c/p\u003e\n\n    \u003cp\u003e已经有点老，搭建步骤见 \u003ca href=\"https://cyral.com/blog/how-to-ebpf-accelerating-cloud-native/\"\u003e原文附录\u003c/a\u003e。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e译文测试环境：Ubuntu Linux 20.04 with kernel 5.8.0-38-generic.\u003c/p\u003e\n\n    \u003cp\u003e已经用了很久，具体搭建步骤忘了。建议参考 Cilium 开发环境搭建步骤，或自行 google。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/traffic-mirror-with-tc-and-tunneling/\"\u003e\u003cspan\u003e« Traffic Mirroring: Theory and Practice (with tc and Tunneling)\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/advanced-bpf-kernel-features-for-container-age-zh/\"\u003e\u003cspan\u003e[译] 为容器时代设计的高级 eBPF 内核特性（FOSDEM, 2021） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2021-01-28T00:00:00Z",
  "Author": "Arthur Chiao"
}