{
  "Source": "arthurchiao.art",
  "Title": "[译] Linux 网络栈监控和调优：发送数据（2017）",
  "Link": "https://arthurchiao.art/blog/tuning-stack-tx-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003e[译] Linux 网络栈监控和调优：发送数据（2017）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2018-12-17 | Last Update 2020-09-29\u003c/p\u003e\n  \n  \u003ch2 id=\"译者序\"\u003e译者序\u003c/h2\u003e\n\n\u003cp\u003e本文翻译自 2017 年的一篇英文博客\n\u003ca href=\"https://blog.packagecloud.io/eng/2017/02/06/monitoring-tuning-linux-networking-stack-sending-data\"\u003eMonitoring and Tuning the Linux Networking Stack: Sending Data\u003c/a\u003e。\u003cstrong\u003e如果能看懂英文，建议阅读原文，或者和本文对照看。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e这篇文章写的是 \u003cstrong\u003e“Linux networking stack”\u003c/strong\u003e，这里的 ”stack“ 不仅仅是内核协议栈，\n而是包括内核协议栈在内的，从应用程序通过系统调用\u003cstrong\u003e写数据到 socket\u003c/strong\u003e，到数据被组织\n成一个或多个数据包最终被物理网卡发出去的整个路径。所以文章有三方面，交织在一起，\n看起来非常累（但是很过瘾）：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e原理及代码实现：网络各层，包括驱动、硬中断、软中断、内核协议栈、socket 等等。\u003c/li\u003e\n  \u003cli\u003e监控：对代码中的重要计数进行监控，一般在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc\u003c/code\u003e 或\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys\u003c/code\u003e 下面有对应输出。\u003c/li\u003e\n  \u003cli\u003e调优：修改网络配置参数。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e本文的另一个特色是，几乎所有讨论的内核代码，都在相应的地方给出了 github 上的链接，\n具体到行。\u003c/p\u003e\n\n\u003cp\u003e网络栈非常复杂，原文太长又没有任何章节号，看起来非常累。因此本文翻译时添加了适当\n的章节号，以期按图索骥。\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cp\u003e\u003cstrong\u003e2020 更新\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e基于 Prometheus+Grafana 监控网络栈：\u003ca href=\"/blog/monitoring-network-stack/\"\u003eMonitoring Network Stack\u003c/a\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e以下是翻译。\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003ch2 id=\"太长不读tl-dr\"\u003e太长不读（TL; DR）\u003c/h2\u003e\n\n\u003cp\u003e本文介绍了运行 Linux 内核的机器是如何\u003cstrong\u003e发包\u003c/strong\u003e（send packets）的，包是怎样从用户程\n序一步步到达硬件网卡并被发出去的，以及如何\u003cstrong\u003e监控\u003c/strong\u003e（monitoring）和\u003cstrong\u003e调优\u003c/strong\u003e（\ntuning）这一路径上的各个网络栈组件。\u003c/p\u003e\n\n\u003cp\u003e本文的姊妹篇是 \u003ca href=\"/blog/tuning-stack-rx-zh/\"\u003eLinux 网络栈监控和调优：接收数据\u003c/a\u003e，\n对应的原文是 \u003ca href=\"https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/\"\u003eMonitoring and Tuning the Linux Networking Stack: Receiving\nData\u003c/a\u003e\n。\u003c/p\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#译者序\" id=\"markdown-toc-译者序\"\u003e译者序\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#太长不读tl-dr\" id=\"markdown-toc-太长不读tl-dr\"\u003e太长不读（TL; DR）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-网络栈监控和调优常规建议\" id=\"markdown-toc-1-网络栈监控和调优常规建议\"\u003e1 网络栈监控和调优：常规建议\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-发包过程俯瞰\" id=\"markdown-toc-2-发包过程俯瞰\"\u003e2 发包过程俯瞰\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-协议层注册\" id=\"markdown-toc-3-协议层注册\"\u003e3 协议层注册\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-通过-socket-发送网络数据\" id=\"markdown-toc-4-通过-socket-发送网络数据\"\u003e4 通过 socket 发送网络数据\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-sock_sendmsg-__sock_sendmsg-__sock_sendmsg_nosec\" id=\"markdown-toc-41-sock_sendmsg-__sock_sendmsg-__sock_sendmsg_nosec\"\u003e4.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_sendmsg\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__sock_sendmsg\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__sock_sendmsg_nosec\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-inet_sendmsg\" id=\"markdown-toc-42-inet_sendmsg\"\u003e4.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einet_sendmsg\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-udp-协议层\" id=\"markdown-toc-5-udp-协议层\"\u003e5 UDP 协议层\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#51-udp_sendmsg\" id=\"markdown-toc-51-udp_sendmsg\"\u003e5.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_sendmsg\u003c/code\u003e\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#511-udp-corking软木塞\" id=\"markdown-toc-511-udp-corking软木塞\"\u003e5.1.1 UDP corking（软木塞）\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#512-获取目的-ip-地址和端口\" id=\"markdown-toc-512-获取目的-ip-地址和端口\"\u003e5.1.2 获取目的 IP 地址和端口\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#513-socket-发送bookkeeping-和打时间戳\" id=\"markdown-toc-513-socket-发送bookkeeping-和打时间戳\"\u003e5.1.3 Socket 发送：bookkeeping 和打时间戳\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#514-辅助消息ancillary-messages\" id=\"markdown-toc-514-辅助消息ancillary-messages\"\u003e5.1.4 辅助消息（Ancillary messages）\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#515-设置自定义-ip-选项\" id=\"markdown-toc-515-设置自定义-ip-选项\"\u003e5.1.5 设置自定义 IP 选项\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#516-多播或单播multicast-or-unicast\" id=\"markdown-toc-516-多播或单播multicast-or-unicast\"\u003e5.1.6 多播或单播（Multicast or unicast）\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#517-路由\" id=\"markdown-toc-517-路由\"\u003e5.1.7 路由\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#518-msg_confirm-阻止-arp-缓存过期\" id=\"markdown-toc-518-msg_confirm-阻止-arp-缓存过期\"\u003e5.1.8 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eMSG_CONFIRM\u003c/code\u003e: 阻止 ARP 缓存过期\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#519-uncorked-udp-sockets-快速路径准备待发送数据\" id=\"markdown-toc-519-uncorked-udp-sockets-快速路径准备待发送数据\"\u003e5.1.9 uncorked UDP sockets 快速路径：准备待发送数据\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#ip_make_skb\" id=\"markdown-toc-ip_make_skb\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_make_skb\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#发送数据\" id=\"markdown-toc-发送数据\"\u003e发送数据\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#5110-没有被-cork-的数据时的慢路径\" id=\"markdown-toc-5110-没有被-cork-的数据时的慢路径\"\u003e5.1.10 没有被 cork 的数据时的慢路径\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#ip_append_data\" id=\"markdown-toc-ip_append_data\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_append_data\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#__ip_append_data\" id=\"markdown-toc-__ip_append_data\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__ip_append_data\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#flushing-corked-sockets\" id=\"markdown-toc-flushing-corked-sockets\"\u003eFlushing corked sockets\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#5111-error-accounting\" id=\"markdown-toc-5111-error-accounting\"\u003e5.1.11 Error accounting\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#52-udp_send_skb\" id=\"markdown-toc-52-udp_send_skb\"\u003e5.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_send_skb\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#53-监控udp-层统计\" id=\"markdown-toc-53-监控udp-层统计\"\u003e5.3 监控：UDP 层统计\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#procnetsnmp\" id=\"markdown-toc-procnetsnmp\"\u003e/proc/net/snmp\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#procnetudp\" id=\"markdown-toc-procnetudp\"\u003e/proc/net/udp\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#54-调优socket-发送队列内存大小\" id=\"markdown-toc-54-调优socket-发送队列内存大小\"\u003e5.4 调优：socket 发送队列内存大小\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#6-ip-协议层\" id=\"markdown-toc-6-ip-协议层\"\u003e6 IP 协议层\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#61-ip_send_skb\" id=\"markdown-toc-61-ip_send_skb\"\u003e6.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_send_skb\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#62-ip_local_out-and-__ip_local_out\" id=\"markdown-toc-62-ip_local_out-and-__ip_local_out\"\u003e6.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_local_out\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__ip_local_out\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#63-netfilter-and-nf_hook\" id=\"markdown-toc-63-netfilter-and-nf_hook\"\u003e6.3 netfilter and nf_hook\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#64-目的路由缓存\" id=\"markdown-toc-64-目的路由缓存\"\u003e6.4 目的（路由）缓存\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#65-ip_output\" id=\"markdown-toc-65-ip_output\"\u003e6.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_output\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#66-ip_finish_output\" id=\"markdown-toc-66-ip_finish_output\"\u003e6.6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_finish_output\u003c/code\u003e\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#path-mtu-discovery\" id=\"markdown-toc-path-mtu-discovery\"\u003ePath MTU Discovery\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#67-ip_finish_output2\" id=\"markdown-toc-67-ip_finish_output2\"\u003e6.7 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_finish_output2\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#68-dst_neigh_output\" id=\"markdown-toc-68-dst_neigh_output\"\u003e6.8 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_neigh_output\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#69-neigh_hh_output\" id=\"markdown-toc-69-neigh_hh_output\"\u003e6.9 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh_hh_output\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#610-n-output\" id=\"markdown-toc-610-n-output\"\u003e6.10 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003en-\u0026gt;output\u003c/code\u003e\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#neigh_resolve_output\" id=\"markdown-toc-neigh_resolve_output\"\u003eneigh_resolve_output\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#611-监控-ip-层\" id=\"markdown-toc-611-监控-ip-层\"\u003e6.11 监控: IP 层\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#procnetsnmp-1\" id=\"markdown-toc-procnetsnmp-1\"\u003e/proc/net/snmp\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#procnetnetstat\" id=\"markdown-toc-procnetnetstat\"\u003e/proc/net/netstat\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#7-linux-netdevice-子系统\" id=\"markdown-toc-7-linux-netdevice-子系统\"\u003e7 Linux netdevice 子系统\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#71-linux-traffic-control流量控制\" id=\"markdown-toc-71-linux-traffic-control流量控制\"\u003e7.1 Linux traffic control（流量控制）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#72-dev_queue_xmit-and-__dev_queue_xmit\" id=\"markdown-toc-72-dev_queue_xmit-and-__dev_queue_xmit\"\u003e7.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_queue_xmit\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__dev_queue_xmit\u003c/code\u003e\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#721-netdev_pick_tx\" id=\"markdown-toc-721-netdev_pick_tx\"\u003e7.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_pick_tx\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#722-__netdev_pick_tx\" id=\"markdown-toc-722-__netdev_pick_tx\"\u003e7.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netdev_pick_tx\u003c/code\u003e\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#transmit-packet-steering-xps\" id=\"markdown-toc-transmit-packet-steering-xps\"\u003eTransmit Packet Steering (XPS)\u003c/a\u003e\u003c/li\u003e\n              \u003cli\u003e\u003ca href=\"#skb_tx_hash\" id=\"markdown-toc-skb_tx_hash\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_tx_hash\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#73-继续__dev_queue_xmit\" id=\"markdown-toc-73-继续__dev_queue_xmit\"\u003e7.3 继续\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__dev_queue_xmit\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#74-__dev_xmit_skb\" id=\"markdown-toc-74-__dev_xmit_skb\"\u003e7.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__dev_xmit_skb\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#75-调优-transmit-packet-steering-xps\" id=\"markdown-toc-75-调优-transmit-packet-steering-xps\"\u003e7.5 调优: Transmit Packet Steering (XPS)\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#8-queuing-disciplines排队规则\" id=\"markdown-toc-8-queuing-disciplines排队规则\"\u003e8 Queuing Disciplines（排队规则）\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#81-qdisc_run_begin-and-qdisc_run_end仅设置-qdisc-状态位\" id=\"markdown-toc-81-qdisc_run_begin-and-qdisc_run_end仅设置-qdisc-状态位\"\u003e8.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_run_begin()\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_run_end()\u003c/code\u003e：仅设置 qdisc 状态位\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#82-__qdisc_run真正的-qdisc-执行入口\" id=\"markdown-toc-82-__qdisc_run真正的-qdisc-执行入口\"\u003e8.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__qdisc_run()\u003c/code\u003e：真正的 qdisc 执行入口\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#83-qdisc_restart从-qdisc-队列中取包发送给网络驱动\" id=\"markdown-toc-83-qdisc_restart从-qdisc-队列中取包发送给网络驱动\"\u003e8.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_restart\u003c/code\u003e：从 qdisc 队列中取包，发送给网络驱动\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#831-dequeue_skb从-qdisc-队列取待发送-skb\" id=\"markdown-toc-831-dequeue_skb从-qdisc-队列取待发送-skb\"\u003e8.3.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edequeue_skb()\u003c/code\u003e：从 qdisc 队列取待发送 skb\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#832-sch_direct_xmit发送给网卡驱动\" id=\"markdown-toc-832-sch_direct_xmit发送给网卡驱动\"\u003e8.3.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_direct_xmit()\u003c/code\u003e：发送给网卡驱动\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#833-handle_dev_cpu_collision\" id=\"markdown-toc-833-handle_dev_cpu_collision\"\u003e8.3.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehandle_dev_cpu_collision()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#834-dev_requeue_skb重新压入-qdisc-队列等待下次发送\" id=\"markdown-toc-834-dev_requeue_skb重新压入-qdisc-队列等待下次发送\"\u003e8.3.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_requeue_skb()\u003c/code\u003e：重新压入 qdisc 队列，等待下次发送\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#84-复习__qdisc_run-主逻辑\" id=\"markdown-toc-84-复习__qdisc_run-主逻辑\"\u003e8.4 复习：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__qdisc_run()\u003c/code\u003e 主逻辑\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#841-__netif_schedule\" id=\"markdown-toc-841-__netif_schedule\"\u003e8.4.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netif_schedule\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#842-net_tx_action\" id=\"markdown-toc-842-net_tx_action\"\u003e8.4.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_tx_action()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#843-net_tx_action-completion-queue待释放-skb-队列\" id=\"markdown-toc-843-net_tx_action-completion-queue待释放-skb-队列\"\u003e8.4.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_tx_action()\u003c/code\u003e completion queue：待释放 skb 队列\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#844-net_tx_action-output-queue待发送-skb-队列\" id=\"markdown-toc-844-net_tx_action-output-queue待发送-skb-队列\"\u003e8.4.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_tx_action\u003c/code\u003e output queue：待发送 skb 队列\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#85-最终来到-dev_hard_start_xmit\" id=\"markdown-toc-85-最终来到-dev_hard_start_xmit\"\u003e8.5 最终来到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_hard_start_xmit\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#86-monitoring-qdiscs\" id=\"markdown-toc-86-monitoring-qdiscs\"\u003e8.6 Monitoring qdiscs\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#using-the-tc-command-line-tool\" id=\"markdown-toc-using-the-tc-command-line-tool\"\u003eUsing the tc command line tool\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#87-tuning-qdiscs\" id=\"markdown-toc-87-tuning-qdiscs\"\u003e8.7 Tuning qdiscs\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#调整__qdisc_run-处理权重\" id=\"markdown-toc-调整__qdisc_run-处理权重\"\u003e调整\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__qdisc_run\u003c/code\u003e 处理权重\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#增加发送队列长度\" id=\"markdown-toc-增加发送队列长度\"\u003e增加发送队列长度\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#9-网络设备驱动\" id=\"markdown-toc-9-网络设备驱动\"\u003e9 网络设备驱动\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#91-驱动回调函数注册\" id=\"markdown-toc-91-驱动回调函数注册\"\u003e9.1 驱动回调函数注册\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#92-通过-ndo_start_xmit-发送数据\" id=\"markdown-toc-92-通过-ndo_start_xmit-发送数据\"\u003e9.2 通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003endo_start_xmit\u003c/code\u003e 发送数据\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#93-igb_tx_map\" id=\"markdown-toc-93-igb_tx_map\"\u003e9.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_tx_map\u003c/code\u003e\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#dynamic-queue-limits-dql\" id=\"markdown-toc-dynamic-queue-limits-dql\"\u003eDynamic Queue Limits (DQL)\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#94-发送完成transmit-completions\" id=\"markdown-toc-94-发送完成transmit-completions\"\u003e9.4 发送完成（Transmit completions）\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#941-transmit-completion-irq\" id=\"markdown-toc-941-transmit-completion-irq\"\u003e9.4.1 Transmit completion IRQ\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#942-igb_poll\" id=\"markdown-toc-942-igb_poll\"\u003e9.4.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_poll\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#943-igb_clean_tx_irq\" id=\"markdown-toc-943-igb_clean_tx_irq\"\u003e9.4.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_clean_tx_irq\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#944-igb_poll-返回值\" id=\"markdown-toc-944-igb_poll-返回值\"\u003e9.4.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_poll\u003c/code\u003e 返回值\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#95-监控网络设备\" id=\"markdown-toc-95-监控网络设备\"\u003e9.5 监控网络设备\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#951-使用-ethtool--s-命令\" id=\"markdown-toc-951-使用-ethtool--s-命令\"\u003e9.5.1 使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eethtool -S\u003c/code\u003e 命令\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#952-使用-sysfs\" id=\"markdown-toc-952-使用-sysfs\"\u003e9.5.2 使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esysfs\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#953-使用procnetdev\" id=\"markdown-toc-953-使用procnetdev\"\u003e9.5.3 使用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/net/dev\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#96-监控-dql\" id=\"markdown-toc-96-监控-dql\"\u003e9.6 监控 DQL\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#97-调优网络设备\" id=\"markdown-toc-97-调优网络设备\"\u003e9.7 调优网络设备\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#971-查询-tx-queue-数量\" id=\"markdown-toc-971-查询-tx-queue-数量\"\u003e9.7.1 查询 TX Queue 数量\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#972-调整-tx-queue-数量\" id=\"markdown-toc-972-调整-tx-queue-数量\"\u003e9.7.2 调整 TX queue 数量\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#973-调整-tx-queue-大小\" id=\"markdown-toc-973-调整-tx-queue-大小\"\u003e9.7.3 调整 TX queue 大小\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#10-网络栈之旅结束\" id=\"markdown-toc-10-网络栈之旅结束\"\u003e10 网络栈之旅：结束\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#11-extras\" id=\"markdown-toc-11-extras\"\u003e11 Extras\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#111-减少-arp-流量-msg_confirm\" id=\"markdown-toc-111-减少-arp-流量-msg_confirm\"\u003e11.1 减少 ARP 流量 (MSG_CONFIRM)\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#112-udp-corking软木塞\" id=\"markdown-toc-112-udp-corking软木塞\"\u003e11.2 UDP Corking（软木塞）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#113-打时间戳\" id=\"markdown-toc-113-打时间戳\"\u003e11.3 打时间戳\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#12-结论\" id=\"markdown-toc-12-结论\"\u003e12 结论\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#13-额外帮助\" id=\"markdown-toc-13-额外帮助\"\u003e13 额外帮助\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e想对 Linux 网络栈进行监控或调优，必须对其正在发生什么有一个深入的理解，\n而这离不开读内核源码。希望本文可以给那些正准备投身于此的人提供一份参考。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"1-网络栈监控和调优常规建议\"\u003e1 网络栈监控和调优：常规建议\u003c/h1\u003e\n\n\u003cp\u003e正如我们前一篇文章提到的，网络栈很复杂，没有一种方式适用于所有场景。如果性能和网络\n健康状态对你或你的业务非常重要，那你没有别的选择，只能花大量的时间、精力和金钱去\n深入理解系统的各个部分之间是如何交互的。\u003c/p\u003e\n\n\u003cp\u003e本文中的一些示例配置仅为了方便理解（效果），并不作为任何特定配置或默认配置的建议\n。在做任何配置改动之前，你应该有一个能够对系统进行监控的框架，以查看变更是否带来\n预期的效果。\u003c/p\u003e\n\n\u003cp\u003e对远程连接上的机器进行网络变更是相当危险的，机器很可能失联。另外，不要在生产环境\n直接调整这些配置；如果可能的话，在新机器上改配置，然后将机器灰度上线到生产。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"2-发包过程俯瞰\"\u003e2 发包过程俯瞰\u003c/h1\u003e\n\n\u003cp\u003e本文将拿\u003cstrong\u003eIntel I350\u003c/strong\u003e网卡的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb\u003c/code\u003e 驱动作为参考，网卡的 data sheet 这里可以下载\n\u003ca href=\"http://www.intel.com/content/dam/www/public/us/en/documents/datasheets/ethernet-controller-i350-datasheet.pdf\"\u003ePDF\u003c/a\u003e\n（警告：文件很大）。\u003c/p\u003e\n\n\u003cp\u003e从比较高的层次看，一个数据包从用户程序到达硬件网卡的整个过程如下：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e使用\u003cstrong\u003e系统调用\u003c/strong\u003e（如 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendto\u003c/code\u003e，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 等）写数据\u003c/li\u003e\n  \u003cli\u003e数据穿过\u003cstrong\u003esocket 子系统\u003c/strong\u003e，进入\u003cstrong\u003esocket 协议族\u003c/strong\u003e（protocol family）系统（在我们的例子中为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAF_INET\u003c/code\u003e）\u003c/li\u003e\n  \u003cli\u003e协议族处理：数据穿过\u003cstrong\u003e协议层\u003c/strong\u003e，这一过程（在许多情况下）会将\u003cstrong\u003e数据\u003c/strong\u003e（data）转换成\u003cstrong\u003e数据包\u003c/strong\u003e（packet）\u003c/li\u003e\n  \u003cli\u003e数据穿过\u003cstrong\u003e路由层\u003c/strong\u003e，这会涉及路由缓存和 ARP 缓存的更新；如果目的 MAC 不在 ARP 缓存表中，将触发一次 ARP 广播来查找 MAC 地址\u003c/li\u003e\n  \u003cli\u003e穿过协议层，packet 到达\u003cstrong\u003e设备无关层\u003c/strong\u003e（device agnostic layer）\u003c/li\u003e\n  \u003cli\u003e使用 XPS（如果启用）或散列函数\u003cstrong\u003e选择发送队列\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003e调用网卡驱动的\u003cstrong\u003e发送函数\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003e数据传送到网卡的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc\u003c/code\u003e（queue discipline，排队规则）\u003c/li\u003e\n  \u003cli\u003eqdisc 会直接\u003cstrong\u003e发送数据\u003c/strong\u003e（如果可以），或者将其放到队列，下次触发\u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNET_TX\u003c/code\u003e 类型软中断\u003c/strong\u003e（softirq）的时候再发送\u003c/li\u003e\n  \u003cli\u003e数据从 qdisc 传送给驱动程序\u003c/li\u003e\n  \u003cli\u003e驱动程序创建所需的\u003cstrong\u003eDMA 映射\u003c/strong\u003e，以便网卡从 RAM 读取数据\u003c/li\u003e\n  \u003cli\u003e驱动向网卡发送信号，通知\u003cstrong\u003e数据可以发送了\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e网卡从 RAM 中获取数据并发送\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003e发送完成后，设备触发一个\u003cstrong\u003e硬中断\u003c/strong\u003e（IRQ），表示发送完成\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e硬中断处理函数\u003c/strong\u003e被唤醒执行。对许多设备来说，这会\u003cstrong\u003e触发 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNET_RX\u003c/code\u003e 类型的软中断\u003c/strong\u003e，然后 NAPI poll 循环开始收包\u003c/li\u003e\n  \u003cli\u003epoll 函数会调用驱动程序的相应函数，\u003cstrong\u003e解除 DMA 映射\u003c/strong\u003e，释放数据\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e接下来会详细介绍整个过程。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_3\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"3-协议层注册\"\u003e3 协议层注册\u003c/h1\u003e\n\n\u003cp\u003e协议层分析我们将会关注 IP 和 UDP 层，其他协议层可参考这个过程。\u003c/p\u003e\n\n\u003cp\u003e我们首先来看协议族是如何注册到内核，并被 socket 子系统使用的。\u003c/p\u003e\n\n\u003cp\u003e当用户程序像下面这样创建 UDP socket 时会发生什么？\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esocket\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eAF_INET\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSOCK_DGRAM\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eIPPROTO_UDP\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e简单来说，内核会去查找由 UDP 协议栈导出的一组函数（其中包括用于发送和接收网络数据\n的函数），并赋给 socket 的相应字段。准确理解这个过程需要查看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAF_INET\u003c/code\u003e 地址族的\n代码。\u003c/p\u003e\n\n\u003cp\u003e内核初始化的很早阶段就执行了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einet_init\u003c/code\u003e 函数，这个函数会注册 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAF_INET\u003c/code\u003e 协议族\n，以及该协议族内的各协议栈（TCP，UDP，ICMP 和 RAW），并调用初始化函数使协议栈准备\n好处理网络数据。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einet_init\u003c/code\u003e 定义在\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/ipv4/af_inet.c#L1678-L1804\"\u003enet/ipv4/af_inet.c\u003c/a\u003e\n。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAF_INET\u003c/code\u003e 协议族导出一个包含 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecreate\u003c/code\u003e 方法的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct net_proto_family\u003c/code\u003e 类型实例。当从\n用户程序创建 socket 时，内核会调用此方法：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet_proto_family\u003c/span\u003e \u003cspan class=\"n\"\u003einet_family_ops\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efamily\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePF_INET\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einet_create\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eowner\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTHIS_MODULE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einet_create\u003c/code\u003e 根据传递的 socket 参数，在已注册的协议中查找对应的协议。我们来看一下：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"cm\"\u003e/* Look for the requested type/protocol pair. */\u003c/span\u003e\n\u003cspan class=\"n\"\u003elookup_protocol\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eESOCKTNOSUPPORT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ercu_read_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elist_for_each_entry_rcu\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eanswer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003einetsw\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003esock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"cm\"\u003e/* Check the non-wild match. */\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eanswer\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eIPPROTO_IP\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"cm\"\u003e/* Check for the two wild cases. */\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIPPROTO_IP\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eanswer\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIPPROTO_IP\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eanswer\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEPROTONOSUPPORT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后，将该协议的回调方法（集合）赋给这个新创建的 socket：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003esock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eops\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eanswer\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eops\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eaf_inet.c\u003c/code\u003e 中看到所有协议的初始化参数。\n下面是\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/ipv4/af_inet.c#L998-L1020\"\u003eTCP 和 UDP\u003c/a\u003e的初始化参数：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* Upon startup we insert all the elements in inetsw_array[] into\n * the linked list inetsw.\n */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003einet_protosw\u003c/span\u003e \u003cspan class=\"n\"\u003einetsw_array\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e       \u003cspan class=\"n\"\u003eSOCK_STREAM\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e   \u003cspan class=\"n\"\u003eIPPROTO_TCP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprot\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e       \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etcp_prot\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eops\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e        \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003einet_stream_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eno_check\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e   \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e      \u003cspan class=\"n\"\u003eINET_PROTOSW_PERMANENT\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\n                              \u003cspan class=\"n\"\u003eINET_PROTOSW_ICSK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e       \u003cspan class=\"n\"\u003eSOCK_DGRAM\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e   \u003cspan class=\"n\"\u003eIPPROTO_UDP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprot\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e       \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eudp_prot\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eops\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e        \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003einet_dgram_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eno_check\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e   \u003cspan class=\"n\"\u003eUDP_CSUM_DEFAULT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e      \u003cspan class=\"n\"\u003eINET_PROTOSW_PERMANENT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n       \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\n            \u003cspan class=\"cm\"\u003e/* .... more protocols ... */\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIPPROTO_UDP\u003c/code\u003e 协议类型有一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eops\u003c/code\u003e 变量，包含\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/ipv4/af_inet.c#L935-L960\"\u003e很多信息\n\u003c/a\u003e，包\n括用于发送和接收数据的回调函数：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eproto_ops\u003c/span\u003e \u003cspan class=\"n\"\u003einet_dgram_ops\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efamily\u003c/span\u003e          \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePF_INET\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eowner\u003c/span\u003e           \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTHIS_MODULE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\n  \u003cspan class=\"cm\"\u003e/* ... */\u003c/span\u003e\n\n  \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendmsg\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einet_sendmsg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erecvmsg\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einet_recvmsg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\n  \u003cspan class=\"cm\"\u003e/* ... */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEXPORT_SYMBOL\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einet_dgram_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eprot\u003c/code\u003e 字段指向一个协议相关的变量（的地址），对于 UDP 协议，其中包含了 UDP 相关的\n回调函数。 UDP 协议对应的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eprot\u003c/code\u003e 变量为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_prot\u003c/code\u003e，定义在\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/ipv4/udp.c#L2171-L2203\"\u003enet/ipv4/udp.c\u003c/a\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003estruct proto udp_prot = {\n  .name        = \u0026#34;UDP\u0026#34;,\n  .owner           = THIS_MODULE,\n\n  /* ... */\n\n  .sendmsg     = udp_sendmsg,\n  .recvmsg     = udp_recvmsg,\n\n  /* ... */\n};\nEXPORT_SYMBOL(udp_prot);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e现在，让我们转向发送 UDP 数据的用户程序，看看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_sendmsg\u003c/code\u003e 是如何在内核中被调用的。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_4\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"4-通过-socket-发送网络数据\"\u003e4 通过 socket 发送网络数据\u003c/h1\u003e\n\n\u003cp\u003e用户程序想发送 UDP 网络数据，因此它使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendto\u003c/code\u003e 系统调用，看起来可能是这样的：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esendto\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esocket\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebuffer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebuflen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e该系统调用穿过\u003ca href=\"https://blog.packagecloud.io/eng/2016/04/05/the-definitive-guide-to-linux-system-calls/\"\u003eLinux 系统调用（system call）层\u003c/a\u003e，最后到达\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/socket.c#L1756-L1803\"\u003enet/socket.c\u003c/a\u003e中的这个函数：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/*\n *      Send a datagram to a given address. We move the address into kernel\n *      space and check the user space data area is readable before invoking\n *      the protocol.\n */\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eSYSCALL_DEFINE6\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esendto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003e__user\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebuff\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esockaddr\u003c/span\u003e \u003cspan class=\"n\"\u003e__user\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eaddr_len\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/*  ... code ... */\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esock_sendmsg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* ... code  ... */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSYSCALL_DEFINE6\u003c/code\u003e 宏会展开成一堆宏，后者经过一波复杂操作创建出一个带 6 个参数的系统\n调用（因此叫 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDEFINE6\u003c/code\u003e）。作为结果之一，你会看到内核中的所有系统调用都带 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esys_\u003c/code\u003e前\n缀。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendto\u003c/code\u003e 代码会先将数据整理成底层可以处理的格式，然后调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_sendmsg\u003c/code\u003e。特别地，\n它将传递给 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendto\u003c/code\u003e 的地址放到另一个变量（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emsg\u003c/code\u003e）中：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e  \u003cspan class=\"n\"\u003eiov\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eiov_base\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebuff\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eiov\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eiov_len\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_name\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_iov\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eiov\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_iovlen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_control\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_controllen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_namelen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emove_addr_to_kernel\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eaddr_len\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n          \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                  \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout_put\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n          \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_name\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esockaddr\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n          \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_namelen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eaddr_len\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这段代码将用户程序传入到内核的（存放待发送数据的）地址，作为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emsg_name\u003c/code\u003e 字段嵌入到\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct msghdr\u003c/code\u003e 类型变量中。这和用户程序直接调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 而不是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendto\u003c/code\u003e 发送\n数据差不多，这之所以可行，是因为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendto\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 底层都会调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_sendmsg\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_4.1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"41-sock_sendmsg-__sock_sendmsg-__sock_sendmsg_nosec\"\u003e4.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_sendmsg\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__sock_sendmsg\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__sock_sendmsg_nosec\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_sendmsg\u003c/code\u003e 做一些错误检查，然后调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__sock_sendmsg\u003c/code\u003e；后者做一些自己的错误检查\n，然后调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__sock_sendmsg_nosec\u003c/code\u003e。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__sock_sendmsg_nosec\u003c/code\u003e 将数据传递到 socket 子系统\n的更深处：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003e__sock_sendmsg_nosec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ekiocb\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eiocb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esocket\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                       \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003emsghdr\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock_iocb\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esi\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e  \u003cspan class=\"p\"\u003e....\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* other code ... */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esendmsg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiocb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e通过我们前面介绍的 socket 创建过程，你应该能看懂，注册到这里的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 方法就是\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einet_sendmsg\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_4.2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"42-inet_sendmsg\"\u003e4.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einet_sendmsg\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e从名字可以猜到，这是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAF_INET\u003c/code\u003e 协议族提供的通用函数。 此函数首先调用\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_rps_record_flow\u003c/code\u003e 来记录最后一个处理该（数据所属的）flow 的 CPU; Receive\nPacket Steering 会用到这个信息。接下来，调用 socket 的协议类型（本例是 UDP）对应的\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 方法：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003einet_sendmsg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ekiocb\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eiocb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esocket\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003emsghdr\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                 \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n      \u003cspan class=\"n\"\u003esock_rps_record_flow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n      \u003cspan class=\"cm\"\u003e/* We may need to bind the socket. */\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003einet_sk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003einet_num\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_prot\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eno_autobind\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003einet_autobind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n              \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEAGAIN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_prot\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esendmsg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiocb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEXPORT_SYMBOL\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einet_sendmsg\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e本例是 UDP 协议，因此上面的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk-\u0026gt;sk_prot-\u0026gt;sendmsg\u003c/code\u003e 指向的是我们之前看到的（通过\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_prot\u003c/code\u003e 导出的）\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_sendmsg\u003c/code\u003e 函数。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003esendmsg()函数作为分界点，处理逻辑从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAF_INET\u003c/code\u003e 协议族通用处理转移到具体的 UDP 协议的处理。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_5\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"5-udp-协议层\"\u003e5 UDP 协议层\u003c/h1\u003e\n\n\u003cp\u003e\u003ca name=\"chap_5.1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"51-udp_sendmsg\"\u003e5.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_sendmsg\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e这个函数定义在\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/ipv4/udp.c#L845-L1088\"\u003enet/ipv4/udp.c\u003c/a\u003e\n，函数非常长，我们分段来看。\u003c/p\u003e\n\n\u003ch3 id=\"511-udp-corking软木塞\"\u003e5.1.1 UDP corking（软木塞）\u003c/h3\u003e\n\n\u003cp\u003e在变量声明和基本错误检查之后，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_sendmsg\u003c/code\u003e 所做的第一件事就是检查 socket 是否“\n塞住”了（corked）。 UDP corking 是一项优化技术，允许内核将多次数据累积成单个数据报发\n送。在用户程序中有两种方法可以启用此选项：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esetsockopt\u003c/code\u003e 系统调用设置 socket 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eUDP_CORK\u003c/code\u003e 选项\u003c/li\u003e\n  \u003cli\u003e程序调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esend\u003c/code\u003e，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendto\u003c/code\u003e 或 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 时，带 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eMSG_MORE\u003c/code\u003e 参数\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e详细信息参考 \u003ca href=\"http://man7.org/linux/man-pages/man7/udp.7.html\"\u003eUDP man page\u003c/a\u003e和\n\u003ca href=\"http://man7.org/linux/man-pages/man2/send.2.html\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esend/sendto/sendmsg\u003c/code\u003e man\npage\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_sendmsg\u003c/code\u003e 代码检查 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eup-\u0026gt;pending\u003c/code\u003e 以确定 socket 当前是否已被塞住(corked)，如果是，\n则直接跳到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edo_append_data\u003c/code\u003e 进行数据追加(append)。 我们将在稍后看到如何追加数据。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eudp_sendmsg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ekiocb\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eiocb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003emsghdr\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* variables and error checking ... */\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003efl4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003einet\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecork\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efl\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eip4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eup\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epending\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n          \u003cspan class=\"cm\"\u003e/*\n           * There are pending frames.\n           * The socket lock must be held while it\u0026#39;s corked.\n           */\u003c/span\u003e\n          \u003cspan class=\"n\"\u003elock_sock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n          \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eup\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epending\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eup\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epending\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eAF_INET\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                          \u003cspan class=\"n\"\u003erelease_sock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                          \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEINVAL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                  \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003edo_append_data\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n          \u003cspan class=\"n\"\u003erelease_sock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"512-获取目的-ip-地址和端口\"\u003e5.1.2 获取目的 IP 地址和端口\u003c/h3\u003e\n\n\u003cp\u003e接下来获取目标地址和端口，有两个可能的来源：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e如果之前 socket 已经建立连接，那 socket 本身就存储了目标地址\u003c/li\u003e\n  \u003cli\u003e地址通过辅助结构（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct msghdr\u003c/code\u003e）传入，正如我们在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendto\u003c/code\u003e 的内核代码中看到的那样\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e具体逻辑：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/*\n *      Get and verify the address.\n */\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_name\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n          \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esockaddr_in\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eusin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esockaddr_in\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_name\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n          \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_namelen\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eusin\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEINVAL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n          \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eusin\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esin_family\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eAF_INET\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eusin\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esin_family\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eAF_UNSPEC\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                          \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEAFNOSUPPORT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n          \u003cspan class=\"n\"\u003edaddr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eusin\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esin_addr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003es_addr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n          \u003cspan class=\"n\"\u003edport\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eusin\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esin_port\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n          \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edport\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEINVAL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n          \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_state\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eTCP_ESTABLISHED\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEDESTADDRREQ\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n          \u003cspan class=\"n\"\u003edaddr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einet\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003einet_daddr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n          \u003cspan class=\"n\"\u003edport\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einet\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003einet_dport\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n          \u003cspan class=\"cm\"\u003e/* Open fast path for connected socket.\n             Route will not be used, if at least one option is set.\n           */\u003c/span\u003e\n          \u003cspan class=\"n\"\u003econnected\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e是的，你没看错，UDP 代码中出现了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTCP_ESTABLISHED\u003c/code\u003e！UDP socket 的状态使用了 TCP 状态\n来描述，不知道是好是坏。\u003c/p\u003e\n\n\u003cp\u003e回想前面我们看到用户程序调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendto\u003c/code\u003e 时，内核如何替用户初始化一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct msghdr\u003c/code\u003e\n变量。上面的代码显示了内核如何解析该变量以便设置 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edaddr\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edport\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e如果没有 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct msghdr\u003c/code\u003e 变量，内核函数到达 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_sendmsg\u003c/code\u003e 函数时，会从 socket 本身检索\n目标地址和端口，并将 socket 标记为“已连接”。\u003c/p\u003e\n\n\u003ch3 id=\"513-socket-发送bookkeeping-和打时间戳\"\u003e5.1.3 Socket 发送：bookkeeping 和打时间戳\u003c/h3\u003e\n\n\u003cp\u003e接下来，获取存储在 socket 上的源地址、设备索引（device index）和时间戳选项（例\n如 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSOCK_TIMESTAMPING_TX_HARDWARE\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSOCK_TIMESTAMPING_TX_SOFTWARE\u003c/code\u003e,\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSOCK_WIFI_STATUS\u003c/code\u003e）：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einet\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003einet_saddr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eoif\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_bound_dev_if\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003esock_tx_timestamp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etx_flags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"514-辅助消息ancillary-messages\"\u003e5.1.4 辅助消息（Ancillary messages）\u003c/h3\u003e\n\n\u003cp\u003e除了发送或接收数据包之外，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erecvmsg\u003c/code\u003e 系统调用还允许用户设置或请求辅助数\n据。用户程序可以通过将请求信息组织成 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct msghdr\u003c/code\u003e 类型变量来利用此辅助数据。一些辅\n助数据类型记录在\u003ca href=\"http://man7.org/linux/man-pages/man7/ip.7.html\"\u003eIP man page\u003c/a\u003e中\n。\u003c/p\u003e\n\n\u003cp\u003e辅助数据的一个常见例子是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP_PKTINFO\u003c/code\u003e。对于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP_PKTINFO\u003c/code\u003e 允许程序在发送\n数据时设置一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ein_pktinfo\u003c/code\u003e 变量。程序可以通过填写 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct in_pktinfo\u003c/code\u003e 变量中的字段\n来指定要在 packet 上使用的源地址。如果程序是监听多个 IP 地址的服务端程序，那这是一个\n很有用的选项。在这种情况下，服务端可能想使用客户端连接服务端的那个 IP 地址来回复客\n户端，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP_PKTINFO\u003c/code\u003e 非常适合这种场景。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esetsockopt\u003c/code\u003e 可以在\u003cstrong\u003esocket 级别\u003c/strong\u003e设置发送包的\n\u003ca href=\"https://en.wikipedia.org/wiki/Time_to_live#IP_packets\"\u003eIP_TTL\u003c/a\u003e和\n\u003ca href=\"https://en.wikipedia.org/wiki/Type_of_service\"\u003eIP_TOS\u003c/a\u003e。而辅助消息允\n许在每个\u003cstrong\u003e数据包级别\u003c/strong\u003e设置 TTL 和 TOS 值。Linux 内核会使用一个\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/ipv4/route.c#L179-L197\"\u003e数组\n\u003c/a\u003e将 TOS\n转换为优先级，后者会影响数据包如何以及合适从 qdisc 中发送出去。我们稍后会了解到这\n意味着什么。\u003c/p\u003e\n\n\u003cp\u003e我们可以看到内核如何在 UDP socket 上处理 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 的辅助消息：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_controllen\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eip_cmsg_send\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esock_net\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                           \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_family\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eAF_INET6\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eopt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"n\"\u003efree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003econnected\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e解析辅助消息的工作是由 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_cmsg_send\u003c/code\u003e 完成的，定义在\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/ipv4/ip_sockglue.c#L190-L241\"\u003enet/ipv4/ip_sockglue.c\u003c/a\u003e\n。注意，传递一个未初始化的辅助数据，将会把这个 socket 标记为“未建立连接的”（译者注\n：因为从 5.1.2 的代码可以看出，有辅助消息时优先处理辅助消息，没有辅助消息才从 socket\n里面拿信息）。\u003c/p\u003e\n\n\u003ch3 id=\"515-设置自定义-ip-选项\"\u003e5.1.5 设置自定义 IP 选项\u003c/h3\u003e\n\n\u003cp\u003e接下来，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 将检查用户是否通过辅助消息设置了的任何自定义 IP 选项。如果设置了\n，将使用这些自定义值；如果没有，那就使用 socket 中（已经在用）的参数：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eopt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eip_options_rcu\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003einet_opt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003ercu_read_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003einet_opt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ercu_dereference\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einet\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003einet_opt\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einet_opt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ememcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eopt_copy\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einet_opt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                       \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003einet_opt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003einet_opt\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eopt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eoptlen\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eopt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eopt_copy\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eopt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ercu_read_unlock\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来，该函数检查是否设置了源记录路由（source record route, SRR）IP 选项。\nSRR 有两种类型：\u003ca href=\"https://en.wikipedia.org/wiki/Loose_Source_Routing\"\u003e宽松源记录路由和严格源记录路由\u003c/a\u003e。\n如果设置了此选项，则会记录第一跳地址并将其保存到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efaddr\u003c/code\u003e，并将 socket 标记为“未连接”。\n这将在后面用到：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efaddr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eopt\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eopt\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eopt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esrr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003edaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEINVAL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efaddr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eopt\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eopt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003econnected\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e处理完 SRR 选项后，将处理 TOS 选项，这可以从辅助消息中获取，或者从 socket 当前值中获取。\n然后检查：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e是否（使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esetsockopt\u003c/code\u003e）在 socket 上设置了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSO_DONTROUTE\u003c/code\u003e，或\u003c/li\u003e\n  \u003cli\u003e是否（调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendto\u003c/code\u003e 或 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 时）指定了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eMSG_DONTROUTE\u003c/code\u003e 标志，或\u003c/li\u003e\n  \u003cli\u003e是否已设置了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eis_strictroute\u003c/code\u003e，表示需要严格的\n\u003ca href=\"http://www.networksorcery.com/enp/protocol/ip/option009.htm\"\u003eSRR\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e任何一个为真，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etos\u003c/code\u003e 字段的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eRTO_ONLINK\u003c/code\u003e 位将置 1，并且 socket 被视为“未连接”：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003etos\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eget_rttos\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einet\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esock_flag\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSOCK_LOCALROUTE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_flags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eMSG_DONTROUTE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eopt\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eopt\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eopt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eis_strictroute\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etos\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eRTO_ONLINK\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003econnected\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"516-多播或单播multicast-or-unicast\"\u003e5.1.6 多播或单播（Multicast or unicast）\u003c/h3\u003e\n\n\u003cp\u003e接下来代码开始处理 multicast。这有点复杂，因为用户可以通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP_PKTINFO\u003c/code\u003e 辅助消息\n来指定发送包的源地址或设备号，如前所述。\u003c/p\u003e\n\n\u003cp\u003e如果目标地址是多播地址：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e将多播设备（device）的索引（index）设置为发送（写）这个 packet 的设备索引，并且\u003c/li\u003e\n  \u003cli\u003epacket 的源地址将设置为 multicast 源地址\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e如果目标地址不是一个组播地址，则发送 packet 的设备制定为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einet-\u0026gt;uc_index\u003c/code\u003e（单播），\n除非用户使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP_PKTINFO\u003c/code\u003e 辅助消息覆盖了它。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eipv4_is_multicast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eoif\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eoif\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einet\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emc_index\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003esaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"n\"\u003esaddr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einet\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emc_addr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003econnected\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eoif\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eoif\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einet\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003euc_index\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"517-路由\"\u003e5.1.7 路由\u003c/h3\u003e\n\n\u003cp\u003e现在开始路由！\u003c/p\u003e\n\n\u003cp\u003eUDP 层中处理路由的代码以\u003cstrong\u003e快速路径\u003c/strong\u003e（fast path）开始。 如果 socket 已连接，则直接尝试获取路由：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econnected\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ert\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ertable\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003esk_dst_check\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果 socket 未连接，或者虽然已连接，但路由辅助函数 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_dst_check\u003c/code\u003e 认定路由已过期，则代码将进入\u003cstrong\u003e慢速路径\u003c/strong\u003e（slow\npath）以生成一条路由记录。首先调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eflowi4_init_output\u003c/code\u003e 构造一个描述此 UDP 流的变量：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ert\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esock_net\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003efl4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003efl4_stack\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eflowi4_init_output\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eoif\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_mark\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etos\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                           \u003cspan class=\"n\"\u003eRT_SCOPE_UNIVERSE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_protocol\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                           \u003cspan class=\"n\"\u003einet_sk_flowi_flags\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eFLOWI_FLAG_CAN_SLEEP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                           \u003cspan class=\"n\"\u003efaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edport\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einet\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003einet_sport\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后，socket 及其 flow 实例会传递给安全子系统，这样\u003ca href=\"https://en.wikipedia.org/wiki/Security-Enhanced_Linux\"\u003eSELinux\u003c/a\u003e或\u003ca href=\"https://en.wikipedia.org/wiki/Smack_(software)\"\u003eSMACK\u003c/a\u003e这样的系统就可以在 flow 实例上设置安全 ID。\n接下来，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_route_output_flow\u003c/code\u003e 将调用 IP 路由代码，创建一个路由实例：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003esecurity_sk_classify_flow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eflowi4_to_flowi\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"n\"\u003ert\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eip_route_output_flow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果创建路由实例失败，并且返回码是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eENETUNREACH\u003c/code\u003e,\n则 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOUTNOROUTES\u003c/code\u003e 计数器将会加 1。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIS_ERR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ert\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePTR_ERR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ert\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ert\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eENETUNREACH\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIP_INC_STATS\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eIPSTATS_MIB_OUTNOROUTES\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这些统计计数器所在的源文件、其他可用的计数器及其含义，将将在下面的 UDP 监控部分讨\n论。\u003c/p\u003e\n\n\u003cp\u003e接下来，如果是广播路由，但 socket 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSOCK_BROADCAST\u003c/code\u003e 选项未设置，则处理过程终止。\n如果 socket 被视为“已连接”，则路由实例将缓存到 socket 上：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEACCES\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003ert\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ert_flags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eRTCF_BROADCAST\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003esock_flag\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSOCK_BROADCAST\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n        \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econnected\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esk_dst_set\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edst_clone\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ert\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"518-msg_confirm-阻止-arp-缓存过期\"\u003e5.1.8 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eMSG_CONFIRM\u003c/code\u003e: 阻止 ARP 缓存过期\u003c/h3\u003e\n\n\u003cp\u003e如果调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esend\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendto\u003c/code\u003e 或 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 的时候指定了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eMSG_CONFIRM\u003c/code\u003e 参数，UDP 协议层将会如下处理：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_flags\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eMSG_CONFIRM\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n          \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003edo_confirm\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eback_from_confirm\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e该标志提示系统去确认一下 ARP 缓存条目是否仍然有效，防止其被垃圾回收。\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edo_confirm\u003c/code\u003e 标签位于此函数末尾处，很简单：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nl\"\u003edo_confirm:\u003c/span\u003e\n        \u003cspan class=\"n\"\u003edst_confirm\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ert\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_flags\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eMSG_PROBE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eback_from_confirm\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_confirm\u003c/code\u003e 函数只是在相应的缓存条目上设置一个标记位，稍后当查询邻居缓存并找到\n条目时将检查该标志，我们后面一些会看到。此功能通常用于 UDP 网络应用程序，以减少\n不必要的 ARP 流量。\u003c/p\u003e\n\n\u003cp\u003e此代码确认缓存条目然后跳回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eback_from_confirm\u003c/code\u003e 标签。\u003c/p\u003e\n\n\u003cp\u003e一旦 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edo_confirm\u003c/code\u003e 代码跳回到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eback_from_confirm\u003c/code\u003e（或者之前就没有执行到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edo_confirm\u003c/code\u003e\n），代码接下来将处理 UDP cork 和 uncorked 情况。\u003c/p\u003e\n\n\u003ch3 id=\"519-uncorked-udp-sockets-快速路径准备待发送数据\"\u003e5.1.9 uncorked UDP sockets 快速路径：准备待发送数据\u003c/h3\u003e\n\n\u003cp\u003e如果不需要 corking，数据就可以封装到一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sk_buff\u003c/code\u003e 实例中并传递给\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_send_skb\u003c/code\u003e，离 IP 协议层更进了一步。这是通过调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_make_skb\u003c/code\u003e 来完成的。\u003c/p\u003e\n\n\u003cp\u003e注意，先前通过调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_route_output_flow\u003c/code\u003e 生成的路由条目也会一起传进来，\n它将保存到 skb 里，稍后在 IP 协议层中被使用。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* Lockless fast path for the non-corking case. */\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ecorkreq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eskb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eip_make_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egetfrag\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_iov\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eulen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                          \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eudphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ert\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                          \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_flags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePTR_ERR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eIS_ERR_OR_NULL\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eudp_send_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_make_skb\u003c/code\u003e 函数将创建一个 skb，其中需要考虑到很多的事情，例如：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://blog.packagecloud.io/eng/2017/02/06/monitoring-tuning-linux-networking-stack-sending-data/Maximum_transmission_unit\"\u003eMTU\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003eUDP corking（如果启用）\u003c/li\u003e\n  \u003cli\u003eUDP Fragmentation Offloading（\u003ca href=\"https://wiki.linuxfoundation.org/networking/ufo\"\u003eUFO\u003c/a\u003e）\u003c/li\u003e\n  \u003cli\u003eFragmentation（分片）：如果硬件不支持 UFO，但是要传输的数据大于 MTU，需要软件做分片\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e大多数网络设备驱动程序不支持 UFO，因为网络硬件本身不支持此功能。我们来看下这段代码，先看 corking 禁用的情况，启用的情况我们更后面再看。\u003c/p\u003e\n\n\u003ch4 id=\"ip_make_skb\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_make_skb\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003e定义在\u003ca href=\"\"\u003enet/ipv4/ip_output.c\u003c/a\u003e，这个函数有点复杂。\u003c/p\u003e\n\n\u003cp\u003e构建 skb 的时候，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_make_skb\u003c/code\u003e 依赖的底层代码需要使用一个 corking 变量和一个 queue 变量\n，skb 将通过 queue 变量传入。如果 socket 未被 cork，则会传入一个假的 corking 变量和一个\n空队列。\u003c/p\u003e\n\n\u003cp\u003e我们来看看假 corking 变量和空队列是如何初始化的：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nf\"\u003eip_make_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* more args */\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003einet_cork\u003c/span\u003e \u003cspan class=\"n\"\u003ecork\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff_head\u003c/span\u003e \u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eMSG_PROBE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003e__skb_queue_head_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003ecork\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecork\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecork\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eopt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eip_setup_cork\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ecork\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* more args */\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eERR_PTR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如上所示，cork 和 queue 都是在栈上分配的，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_make_skb\u003c/code\u003e 根本不需要它。\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_setup_cork\u003c/code\u003e 初始化 cork 变量。接下来，调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__ip_append_data\u003c/code\u003e 并传入 cork 和 queue 变\n量：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__ip_append_data\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ecork\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                       \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etask_frag\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egetfrag\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                       \u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etranshdrlen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们将在后面看到这个函数是如何工作的，因为不管 socket 是否被 cork，最后都会执行它。\u003c/p\u003e\n\n\u003cp\u003e现在，我们只需要知道\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__ip_append_data\u003c/code\u003e 将创建一个 skb，向其追加数据，并将该 skb 添加\n到传入的 queue 变量中。如果追加数据失败，则调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__ip_flush_pending_frame\u003c/code\u003e 丢弃数据\n并向上返回错误（指针类型）：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e__ip_flush_pending_frames\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ecork\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eERR_PTR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后，如果没有发生错误，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__ip_make_skb\u003c/code\u003e 将 skb 出队，添加 IP 选项，并返回一个准备好传\n递给更底层发送的 skb：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nf\"\u003e__ip_make_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ecork\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch4 id=\"发送数据\"\u003e发送数据\u003c/h4\u003e\n\n\u003cp\u003e如果没有错误，skb 就会交给 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_send_skb\u003c/code\u003e，后者会继续将其传给下一层协议，IP 协议：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePTR_ERR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eIS_ERR_OR_NULL\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eudp_send_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果有错误，错误计数就会有相应增加。后面的“错误计数”部分会详细介绍。\u003c/p\u003e\n\n\u003ch3 id=\"5110-没有被-cork-的数据时的慢路径\"\u003e5.1.10 没有被 cork 的数据时的慢路径\u003c/h3\u003e\n\n\u003cp\u003e如果使用了 UDP corking，但之前没有数据被 cork，则慢路径开始：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e对 socket 加锁\u003c/li\u003e\n  \u003cli\u003e检查应用程序是否有 bug：已经被 cork 的 socket 是否再次被 cork\u003c/li\u003e\n  \u003cli\u003e设置该 UDP flow 的一些参数，为 corking 做准备\u003c/li\u003e\n  \u003cli\u003e将要发送的数据追加到现有数据\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_sendmsg\u003c/code\u003e 代码继续向下看，就是这一逻辑：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e  \u003cspan class=\"n\"\u003elock_sock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eup\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epending\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n          \u003cspan class=\"cm\"\u003e/* The socket is already corked while preparing it. */\u003c/span\u003e\n          \u003cspan class=\"cm\"\u003e/* ... which is an evident application bug. --ANK */\u003c/span\u003e\n          \u003cspan class=\"n\"\u003erelease_sock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n          \u003cspan class=\"n\"\u003eLIMIT_NETDEBUG\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eKERN_DEBUG\u003c/span\u003e \u003cspan class=\"n\"\u003epr_fmt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;cork app bug 2\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEINVAL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n          \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"cm\"\u003e/*\n   *      Now cork the socket to pend data.\n   */\u003c/span\u003e\n  \u003cspan class=\"n\"\u003efl4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003einet\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecork\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efl\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eip4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edaddr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esaddr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003efl4_dport\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edport\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003efl4_sport\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einet\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003einet_sport\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eup\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epending\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAF_INET\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003edo_append_data\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eup\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003eulen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eip_append_data\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egetfrag\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_iov\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eulen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                       \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eudphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ert\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                       \u003cspan class=\"n\"\u003ecorkreq\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_flags\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eMSG_MORE\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_flags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch4 id=\"ip_append_data\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_append_data\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003e这个函数简单封装了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__ip_append_data\u003c/code\u003e，在调用后者之前，做了两件重要的事情：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e检查是否从用户传入了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eMSG_PROBE\u003c/code\u003e 标志。该标志表示用户不想真正发送数据，只是做路\n径探测（例如，确定\u003ca href=\"https://en.wikipedia.org/wiki/Path_MTU_Discovery\"\u003ePMTU\u003c/a\u003e）\u003c/li\u003e\n  \u003cli\u003e检查 socket 的发送队列是否为空。如果为空，意味着没有 cork 数据等待处理，因此调用\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_setup_cork\u003c/code\u003e 来设置 corking\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e一旦处理了上述条件，就调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__ip_append_data\u003c/code\u003e 函数，该函数包含用于将数据处理成数据\n包的大量逻辑。\u003c/p\u003e\n\n\u003ch4 id=\"__ip_append_data\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__ip_append_data\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003e如果 socket 是 corked，则从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_append_data\u003c/code\u003e 调用此函数；如果 socket 未被 cork，则从\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_make_skb\u003c/code\u003e 调用此函数。在任何一种情况下，函数都将分配一个新缓冲区来存储传入\n的数据，或者将数据附加到现有数据中。\u003c/p\u003e\n\n\u003cp\u003e这种工作的方式围绕 socket 的发送队列。等待发送的现有数据（例如，如果 socket 被 cork）\n将在队列中有一个对应条目，可以被追加数据。\u003c/p\u003e\n\n\u003cp\u003e这个函数很复杂;它执行很多计算以确定如何构造传递给下面的网络层的 skb。\u003c/p\u003e\n\n\u003cp\u003e该函数的重点包括：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e如果硬件支持，则处理 UDP Fragmentation Offload（UFO）。绝大多数网络硬件不支持\nUFO。如果你的网卡驱动程序支持它，它将设置 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNETIF_F_UFO\u003c/code\u003e 标记位\u003c/li\u003e\n  \u003cli\u003e处理支持分散/收集（\n\u003ca href=\"https://en.wikipedia.org/wiki/Vectored_I/O\"\u003escatter/gather\u003c/a\u003e）IO 的网卡。许多\n卡都支持此功能，并使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNETIF_F_SG\u003c/code\u003e 标志进行通告。支持该特性的网卡可以处理数据\n被分散到多个 buffer 的数据包;内核不需要花时间将多个缓冲区合并成一个缓冲区中。避\n免这种额外的复制会提升性能，大多数网卡都支持此功能\u003c/li\u003e\n  \u003cli\u003e通过调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_wmalloc\u003c/code\u003e 跟踪发送队列的大小。当分配新的 skb 时，skb 的大小由创建它\n的 socket 计费（charge），并计入 socket 发送队列的已分配字节数。如果发送队列已经\n没有足够的空间（超过计费限制），则 skb 并分配失败并返回错误。我们将在下面的调优\n部分中看到如何设置 socket 发送队列大小（txqueuelen）\u003c/li\u003e\n  \u003cli\u003e更新错误统计信息。此函数中的任何错误都会增加“discard”计数。我们将在下面的监控部分中\n看到如何读取此值\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e函数执行成功后返回 0，以及一个适用于网络设备传输的 skb。\u003c/p\u003e\n\n\u003cp\u003e在 unorked 情况下，持有 skb 的 queue 被作为参数传递给上面描述的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__ip_make_skb\u003c/code\u003e，在那里\n它被出队并通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_send_skb\u003c/code\u003e 发送到更底层。\u003c/p\u003e\n\n\u003cp\u003e在 cork 的情况下，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__ip_append_data\u003c/code\u003e 的返回值向上传递。数据位于发送队列中，直到\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_sendmsg\u003c/code\u003e 确定是时候调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_push_pending_frames\u003c/code\u003e 来完成 skb，后者会进一步调用\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_send_skb\u003c/code\u003e。\u003c/p\u003e\n\n\u003ch4 id=\"flushing-corked-sockets\"\u003eFlushing corked sockets\u003c/h4\u003e\n\n\u003cp\u003e现在，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_sendmsg\u003c/code\u003e 会继续，检查\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__ip_append_skb\u003c/code\u003e 的返回值（错误码）：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eudp_flush_pending_frames\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"nf\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ecorkreq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eudp_push_pending_frames\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb_queue_empty\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_write_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eup\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epending\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003erelease_sock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们来看看每个情况：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e如果出现错误（错误为非零），则调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_flush_pending_frames\u003c/code\u003e，这将取消 cork 并从 socket 的发送队列中删除所有数据\u003c/li\u003e\n  \u003cli\u003e如果在未指定 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eMSG_MORE\u003c/code\u003e 的情况下发送此数据，则调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_push_pending_frames\u003c/code\u003e，它将数据传递到更下面的网络层\u003c/li\u003e\n  \u003cli\u003e如果发送队列为空，请将 socket 标记为不再 cork\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e如果追加操作完成并且有更多数据要进入 cork，则代码将做一些清理工作，并返回追加数据的长度：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eip_rt_put\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ert\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efree\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ekfree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eipc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eopt\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这就是内核如何处理 corked UDP sockets 的。\u003c/p\u003e\n\n\u003ch3 id=\"5111-error-accounting\"\u003e5.1.11 Error accounting\u003c/h3\u003e\n\n\u003cp\u003e如果：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003enon-corking 快速路径创建 skb 失败，或 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_send_skb\u003c/code\u003e 返回错误，或\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_append_data\u003c/code\u003e 无法将数据附加到 corked UDP socket，或\u003c/li\u003e\n  \u003cli\u003e当 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_push_pending_frames\u003c/code\u003e 调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_send_skb\u003c/code\u003e 发送 corked skb 时后者返回错误\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e仅当返回的错误是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eENOBUFS\u003c/code\u003e（内核无可用内存）或 socket 已设置 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSOCK_NOSPACE\u003c/code\u003e（发送队\n列已满）时，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSNDBUFERRORS\u003c/code\u003e 统计信息才会增加：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/*\n * ENOBUFS = no kernel mem, SOCK_NOSPACE = no sndbuf space.  Reporting\n * ENOBUFS might not be good (it\u0026#39;s not tunable per se), but otherwise\n * we don\u0026#39;t have a good statistic (IpOutDiscards but it can be too many\n * things).  We could add another new stat but at least for now that\n * seems like overkill.\n */\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eENOBUFS\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003etest_bit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSOCK_NOSPACE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_socket\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eUDP_INC_STATS_USER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esock_net\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eUDP_MIB_SNDBUFERRORS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_udplite\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们接下来会在监控小节里看到如何读取这些计数。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_5.2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"52-udp_send_skb\"\u003e5.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_send_skb\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_sendmsg\u003c/code\u003e 通过调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_send_skb\u003c/code\u003e 函数将 skb 送到下一网络层，在本例中是 IP 协议层。 这个函数做了一些重要的事情：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e向 skb 添加 UDP 头\u003c/li\u003e\n  \u003cli\u003e处理校验和：软件校验和，硬件校验和或无校验和（如果禁用）\u003c/li\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_send_skb\u003c/code\u003e 将 skb 发送到 IP 协议层\u003c/li\u003e\n  \u003cli\u003e更新发送成功或失败的统计计数器\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e让我们来看看。首先，创建 UDP 头：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eudp_send_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eflowi4\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"cm\"\u003e/* useful variables ... */\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/*\n         * Create a UDP header\n         */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003euh\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eudp_hdr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003euh\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esource\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einet\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003einet_sport\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003euh\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003efl4_dport\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003euh\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehtons\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003euh\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003echeck\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来，处理校验和。有几种情况：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e首先处理\u003ca href=\"https://en.wikipedia.org/wiki/UDP-Lite\"\u003eUDP-Lite\u003c/a\u003e校验和\u003c/li\u003e\n  \u003cli\u003e接下来，如果 socket 校验和选项被关闭（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esetsockopt\u003c/code\u003e 带 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSO_NO_CHECK\u003c/code\u003e 参数），它将被标记为校\n验和关闭\u003c/li\u003e\n  \u003cli\u003e接下来，如果硬件支持 UDP 校验和，则将调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp4_hwcsum\u003c/code\u003e 来设置它。请注意，如果数\n据包是分段的，内核将在软件中生成校验和，你可以在\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/ipv4/udp.c#L720-L763\"\u003eudp4_hwcsum\u003c/a\u003e\n的源代码中看到这一点\u003c/li\u003e\n  \u003cli\u003e最后，通过调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_csum\u003c/code\u003e 生成软件校验和\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eis_udplite\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e                                  \u003cspan class=\"cm\"\u003e/*     UDP-Lite      */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecsum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eudplite_csum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"nf\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_no_check\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eUDP_CSUM_NOXMIT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"cm\"\u003e/* UDP csum disabled */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eip_summed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCHECKSUM_NONE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"nf\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eip_summed\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eCHECKSUM_PARTIAL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* UDP hardware csum */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eudp4_hwcsum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecsum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eudp_csum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来，添加了\u003ca href=\"https://en.wikipedia.org/wiki/User_Datagram_Protocol#IPv4_Pseudo_Header\"\u003e伪头\n\u003c/a\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003euh\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003echeck\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecsum_tcpudp_magic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efl4\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                              \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_protocol\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecsum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euh\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003echeck\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003euh\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003echeck\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCSUM_MANGLED_0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果校验和为 0，则根据\u003ca href=\"https://tools.ietf.org/html/rfc768\"\u003eRFC 768\u003c/a\u003e，校验为全 1（\ntransmitted  as all ones (the equivalent  in one’s complement  arithmetic)）。最\n后，将 skb 传递给 IP 协议层并增加统计计数：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nl\"\u003esend:\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eip_send_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esock_net\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n          \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eENOBUFS\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003einet\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003erecverr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003eUDP_INC_STATS_USER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esock_net\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                                     \u003cspan class=\"n\"\u003eUDP_MIB_SNDBUFERRORS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_udplite\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n          \u003cspan class=\"nf\"\u003eUDP_INC_STATS_USER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esock_net\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                             \u003cspan class=\"n\"\u003eUDP_MIB_OUTDATAGRAMS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_udplite\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_send_skb\u003c/code\u003e 成功，将更新 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOUTDATAGRAMS\u003c/code\u003e 统计。如果 IP 协议层报告错误，并且错误\n是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eENOBUFS\u003c/code\u003e（内核缺少内存）而且错误 queue（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einet-\u0026gt;recverr\u003c/code\u003e）没有启用，则更新\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSNDBUFERRORS\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e在继续讨论 IP 协议层之前，让我们先看看如何在 Linux 内核中监视和调优 UDP 协议层。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_5.3\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"53-监控udp-层统计\"\u003e5.3 监控：UDP 层统计\u003c/h2\u003e\n\n\u003cp\u003e两个非常有用的获取 UDP 协议统计文件：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/net/snmp\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/net/udp\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"procnetsnmp\"\u003e/proc/net/snmp\u003c/h3\u003e\n\n\u003cp\u003e监控 UDP 协议层统计：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/net/snmp | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003eUdp\u003cspan class=\"se\"\u003e\\:\u003c/span\u003e\nUdp: InDatagrams NoPorts InErrors OutDatagrams RcvbufErrors SndbufErrors\nUdp: 16314 0 0 17161 0 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e要准确地理解这些计数，你需要仔细地阅读内核代码。一些类型的错误计数并不是只出现在\n一种计数中，而可能是出现在多个计数中。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eInDatagrams\u003c/code\u003e: Incremented when recvmsg was used by a userland program to read datagram. Also incremented when a UDP packet is encapsulated and sent back for processing.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNoPorts\u003c/code\u003e: Incremented when UDP packets arrive destined for a port where no program is listening.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eInErrors\u003c/code\u003e: Incremented in several cases: no memory in the receive queue, when a bad checksum is seen, and if sk_add_backlog fails to add the datagram.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOutDatagrams\u003c/code\u003e: Incremented when a UDP packet is handed down without error to the IP protocol layer to be sent.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eRcvbufErrors\u003c/code\u003e: Incremented when sock_queue_rcv_skb reports that no memory is available; this happens if sk-\u0026gt;sk_rmem_alloc is greater than or equal to sk-\u0026gt;sk_rcvbuf.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSndbufErrors\u003c/code\u003e: Incremented if the IP protocol layer reported an error when trying to send the packet and no error queue has been setup. Also incremented if no send queue space or kernel memory are available.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eInCsumErrors\u003c/code\u003e: Incremented when a UDP checksum failure is detected. Note that in all cases I could find, InCsumErrors is incremented at the same time as InErrors. Thus, InErrors - InCsumErros should yield the count of memory related errors on the receive side.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e注意，UDP 协议层发现的某些错误会出现在其他协议层的统计信息中。一个例子：路由错误\n。 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_sendmsg\u003c/code\u003e 发现的路由错误将导致 IP 协议层的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOutNoRoutes\u003c/code\u003e 统计增加。\u003c/p\u003e\n\n\u003ch3 id=\"procnetudp\"\u003e/proc/net/udp\u003c/h3\u003e\n\n\u003cp\u003e监控 UDP socket 统计：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/net/udp\n  sl  local_address rem_address   st tx_queue rx_queue \u003cspan class=\"nb\"\u003etr \u003c/span\u003etm-\u0026gt;when retrnsmt   uid  \u003cspan class=\"nb\"\u003etimeout \u003c/span\u003einode ref pointer drops\n  515: 00000000:B346 00000000:0000 07 00000000:00000000 00:00000000 00000000   104        0 7518 2 0000000000000000 0\n  558: 00000000:0371 00000000:0000 07 00000000:00000000 00:00000000 00000000     0        0 7408 2 0000000000000000 0\n  588: 0100007F:038F 00000000:0000 07 00000000:00000000 00:00000000 00000000     0        0 7511 2 0000000000000000 0\n  769: 00000000:0044 00000000:0000 07 00000000:00000000 00:00000000 00000000     0        0 7673 2 0000000000000000 0\n  812: 00000000:006F 00000000:0000 07 00000000:00000000 00:00000000 00000000     0        0 7407 2 0000000000000000 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e每一列的意思：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esl\u003c/code\u003e: Kernel hash slot for the socket\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elocal_address\u003c/code\u003e: Hexadecimal local address of the socket and port number, separated by :.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erem_address\u003c/code\u003e: Hexadecimal remote address of the socket and port number, separated by :.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003est\u003c/code\u003e: The state of the socket. Oddly enough, the UDP protocol layer seems to use some TCP socket states. In the example above, 7 is TCP_CLOSE.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_queue\u003c/code\u003e: The amount of memory allocated in the kernel for outgoing UDP datagrams.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erx_queue\u003c/code\u003e: The amount of memory allocated in the kernel for incoming UDP datagrams.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etr\u003c/code\u003e, tm-\u0026gt;when, retrnsmt: These fields are unused by the UDP protocol layer.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003euid\u003c/code\u003e: The effective user id of the user who created this socket.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etimeout\u003c/code\u003e: Unused by the UDP protocol layer.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einode\u003c/code\u003e: The inode number corresponding to this socket. You can use this to help you determine which user process has this socket open. Check /proc/[pid]/fd, which will contain symlinks to socket[:inode].\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eref\u003c/code\u003e: The current reference count for the socket.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epointer\u003c/code\u003e: The memory address in the kernel of the struct sock.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edrops\u003c/code\u003e: The number of datagram drops associated with this socket. Note that this does not include any drops related to sending datagrams (on corked UDP sockets or otherwise); this is only incremented in receive paths as of the kernel version examined by this blog post.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e打印这些计数的代码在\u003ca href=\"https://github.com/torvalds/linux/blob/master/net/ipv4/udp.c#L2396-L2431\"\u003enet/ipv4/udp.c\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_5.4\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"54-调优socket-发送队列内存大小\"\u003e5.4 调优：socket 发送队列内存大小\u003c/h2\u003e\n\n\u003cp\u003e发送队列（也叫“写队列”）的最大值可以通过设置 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet.core.wmem_max sysctl\u003c/code\u003e 进行修改。\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003esysctl \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e net.core.wmem_max\u003cspan class=\"o\"\u003e=\u003c/span\u003e8388608\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk-\u0026gt;sk_write_queue\u003c/code\u003e 用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet.core.wmem_default\u003c/code\u003e 初始化， 这个值也可以调整。\u003c/p\u003e\n\n\u003cp\u003e调整初始发送 buffer 大小：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003esysctl \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e net.core.wmem_default\u003cspan class=\"o\"\u003e=\u003c/span\u003e8388608\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e也可以通过从应用程序调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esetsockopt\u003c/code\u003e 并传递 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSO_SNDBUF\u003c/code\u003e 来设置 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk-\u0026gt;sk_write_queue\u003c/code\u003e\n。通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esetsockopt\u003c/code\u003e 设置的最大值是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet.core.wmem_max\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e不过，可以通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esetsockopt\u003c/code\u003e 并传递 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSO_SNDBUFFORCE\u003c/code\u003e 来覆盖 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet.core.wmem_max\u003c/code\u003e 限制，\n这需要 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCAP_NET_ADMIN\u003c/code\u003e 权限。\u003c/p\u003e\n\n\u003cp\u003e每次调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__ip_append_data\u003c/code\u003e 分配 skb 时，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk-\u0026gt;sk_wmem_alloc\u003c/code\u003e 都会递增。正如我们所看到\n的，UDP 数据报传输速度很快，通常不会在发送队列中花费太多时间。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_6\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"6-ip-协议层\"\u003e6 IP 协议层\u003c/h1\u003e\n\n\u003cp\u003eUDP 协议层通过调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_send_skb\u003c/code\u003e 将 skb 交给 IP 协议层，所以我们从这里开始，探索一下 IP\n协议层。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_6.1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"61-ip_send_skb\"\u003e6.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_send_skb\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_send_skb\u003c/code\u003e 函数定义在\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/ipv4/ip_output.c#L1367-L1380\"\u003enet/ipv4/ip_output.c\u003c/a\u003e\n中，非常简短。它只是调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_local_out\u003c/code\u003e，如果调用失败，就更新相应的错误计数。让\n我们来看看：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eip_send_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eip_local_out\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enet_xmit_errno\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eIP_INC_STATS\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eIPSTATS_MIB_OUTDISCARDS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_xmit_errno\u003c/code\u003e 函数将低层错误转换为 IP 和 UDP 协议层所能理解的错误。如果发生错误，\nIP 协议计数器 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOutDiscards\u003c/code\u003e 会递增。稍后我们将看到读取哪些文件可以获取此统计信\n息。现在，让我们继续，看看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_local_out\u003c/code\u003e 带我们去哪。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_6.2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"62-ip_local_out-and-__ip_local_out\"\u003e6.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_local_out\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__ip_local_out\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e幸运的是，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_local_out\u003c/code\u003e 和\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__ip_local_out\u003c/code\u003e 都很简单。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_local_out\u003c/code\u003e 只需调用\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__ip_local_out\u003c/code\u003e，如果返回值为 1，则调用路由层 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_output\u003c/code\u003e 发送数据包：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eip_local_out\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__ip_local_out\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edst_output\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们来看看\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__ip_local_out\u003c/code\u003e 的代码：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003e__ip_local_out\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eiphdr\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eiph\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eip_hdr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eiph\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etot_len\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehtons\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eip_send_check\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiph\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003enf_hook\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNFPROTO_IPV4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_INET_LOCAL_OUT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                       \u003cspan class=\"n\"\u003eskb_dst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edst_output\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，该函数首先做了两件重要的事情：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e设置 IP 数据包的长度\u003c/li\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_send_check\u003c/code\u003e 来计算要写入 IP 头的校验和。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_send_check\u003c/code\u003e 函数将进一步调用\n名为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_fast_csum\u003c/code\u003e 的函数来计算校验和。在 x86 和 x86_64 体系结构上，此函数用汇编实\n现，代码：\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/arch/x86/include/asm/checksum_64.h#L40-L73\"\u003e64 位实现\u003c/a\u003e\n和\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/arch/x86/include/asm/checksum_32.h#L63-L98\"\u003e32 位实现\u003c/a\u003e\n。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e接下来，IP 协议层将通过调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_hook\u003c/code\u003e 进入 netfilter，其返回值将传递回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_local_out\u003c/code\u003e\n。 如果 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_hook\u003c/code\u003e 返回 1，则表示允许数据包通过，并且调用者应该自己发送数据包。这正\n是我们在上面看到的情况：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_local_out\u003c/code\u003e 检查返回值 1 时，自己通过调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_output\u003c/code\u003e 发\n送数据包。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_6.3\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"63-netfilter-and-nf_hook\"\u003e6.3 netfilter and nf_hook\u003c/h2\u003e\n\n\u003cp\u003e简洁起见，我决定跳过对 netfilter，iptables 和 conntrack 的深入研究。如果你想深入了解\nnetfilter 的代码实现，可以从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einclude/linux/netfilter.h\u003c/code\u003e\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/include/linux/netfilter.h#L142-L147\"\u003e这里\n\u003c/a\u003e\n和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet/netfilter/core.c\u003c/code\u003e\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/netfilter/core.c#L168-L209\"\u003e这里\n\u003c/a\u003e开\n始。\u003c/p\u003e\n\n\u003cp\u003e简短版本是：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_hook\u003c/code\u003e 只是一个 wrapper，它调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_hook_thresh\u003c/code\u003e，首先检查是否有为这\n个\u003cstrong\u003e协议族\u003c/strong\u003e和\u003cstrong\u003ehook 类型\u003c/strong\u003e（这里分别为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNFPROTO_IPV4\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_INET_LOCAL_OUT\u003c/code\u003e）安装\n的过滤器，然后将返回到 IP 协议层，避免深入到 netfilter 或更下面，比如 iptables 和\nconntrack。\u003c/p\u003e\n\n\u003cp\u003e请记住：如果你有非常多或者非常复杂的 netfilter 或 iptables 规则，那些规则将在触发\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 系统调的用户进程的上下文中执行。如果对这个用户进程设置了 CPU 亲和性，相应\n的 CPU 将花费系统时间（system time）处理出站（outbound）iptables 规则。如果你在做性\n能回归测试，那可能要考虑根据系统的负载，将相应的用户进程绑到到特定的 CPU，或者是\n减少 netfilter/iptables 规则的复杂度，以减少对性能测试的影响。\u003c/p\u003e\n\n\u003cp\u003e出于讨论目的，我们假设 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enf_hook\u003c/code\u003e 返回 1，表示调用者（在这种情况下是 IP 协议层）应该\n自己发送数据包。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_6.4\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"64-目的路由缓存\"\u003e6.4 目的（路由）缓存\u003c/h2\u003e\n\n\u003cp\u003edst 代码在 Linux 内核中实现\u003cstrong\u003e协议无关\u003c/strong\u003e的目标缓存。为了继续学习发送 UDP 数据报的流程\n，我们需要了解 dst 条目是如何被设置的，首先来看 dst 条目和路由是如何生成的。 目标缓\n存，路由和邻居子系统，任何一个都可以拿来单独详细的介绍。我们不深入细节，只是快速\n地看一下它们是如何组合到一起的。\u003c/p\u003e\n\n\u003cp\u003e我们上面看到的代码调用了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_output(skb)\u003c/code\u003e。 此函数只是查找关联到这个 skb 的 dst 条目\n，然后调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoutput\u003c/code\u003e 方法。代码如下：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* Output packet to network from transport.  */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003edst_output\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_dst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eoutput\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e看起来很简单，但是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoutput\u003c/code\u003e 方法之前是如何关联到 dst 条目的？\u003c/p\u003e\n\n\u003cp\u003e首先很重要的一点，目标缓存条目是以多种不同方式添加的。到目前为止，我们已经在代码\n中看到的一种方法是从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_sendmsg\u003c/code\u003e 调用\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/ipv4/route.c#L2252-L2267\"\u003eip_route_output_flow\u003c/a\u003e\n。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_route_output_flow\u003c/code\u003e 函数调用\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/ipv4/route.c#L1990-L2173\"\u003e__ip_route_output_key\u003c/a\u003e\n，后者进而调用\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/ipv4/route.c#L1868-L1988\"\u003e__mkroute_output\u003c/a\u003e\n。 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__mkroute_output\u003c/code\u003e 函数创建路由和目标缓存条目。当它执行创建操作时，它会判断哪\n个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoutput\u003c/code\u003e 方法适合此 dst。大多数时候，这个函数是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_output\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_6.5\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"65-ip_output\"\u003e6.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_output\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e在 UDP IPv4 情况下，上面的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoutput\u003c/code\u003e 方法指向的是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_output\u003c/code\u003e。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_output\u003c/code\u003e 函数很简单：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eip_output\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet_device\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_dst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eIP_UPD_PO_STATS\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev_net\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eIPSTATS_MIB_OUT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehtons\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eETH_P_IP\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_HOOK_COND\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNFPROTO_IPV4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNF_INET_POST_ROUTING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                            \u003cspan class=\"n\"\u003eip_finish_output\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                            \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIPCB\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eIPSKB_REROUTED\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e首先，更新 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIPSTATS_MIB_OUT\u003c/code\u003e 统计计数。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP_UPD_PO_STATS\u003c/code\u003e 宏将更新字节数和包数统计。\n我们将在后面的部分中看到如何获取 IP 协议层统计信息以及它们各自的含义。接下来，设置\n要发送此 skb 的设备，以及协议。\u003c/p\u003e\n\n\u003cp\u003e最后，通过调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_HOOK_COND\u003c/code\u003e 将控制权交给 netfilter。查看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_HOOK_COND\u003c/code\u003e 的函数原型\n有助于更清晰地解释它如何工作。来自\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/include/linux/netfilter.h#L177-L188\"\u003einclude/linux/netfilter.h\u003c/a\u003e\n：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003cspan class=\"n\"\u003eNF_HOOK_COND\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003euint8_t\u003c/span\u003e \u003cspan class=\"n\"\u003epf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ehook\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n             \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet_device\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ein\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet_device\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n             \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eokfn\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003econd\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNF_HOOK_COND\u003c/code\u003e 通过检查传入的条件来工作。在这里条件是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e!(IPCB(skb)-\u0026gt;flags \u0026amp;\nIPSKB_REROUTED\u003c/code\u003e。如果此条件为真，则 skb 将发送给 netfilter。如果 netfilter 允许包通过\n，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eokfn\u003c/code\u003e 回调函数将被调用。在这里，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eokfn\u003c/code\u003e 是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_finish_output\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_6.6\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"66-ip_finish_output\"\u003e6.6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_finish_output\u003c/code\u003e\u003c/h2\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eip_finish_output\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#if defined(CONFIG_NETFILTER) \u0026amp;\u0026amp; defined(CONFIG_XFRM)\n\u003c/span\u003e        \u003cspan class=\"cm\"\u003e/* Policy lookup after SNAT yielded a new policy */\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb_dst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003exfrm\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eIPCB\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eIPSKB_REROUTED\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edst_output\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eip_skb_dst_mtu\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eskb_is_gso\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eip_fragment\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eip_finish_output2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eip_finish_output2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果内核启用了 netfilter 和数据包转换（XFRM），则更新 skb 的标志并通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_output\u003c/code\u003e 将\n其发回。\u003c/p\u003e\n\n\u003cp\u003e更常见的两种情况是：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e如果数据包的长度大于 MTU 并且分片不会 offload 到设备，则会调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_fragment\u003c/code\u003e 在发送之前对数据包进行分片\u003c/li\u003e\n  \u003cli\u003e否则，数据包将直接发送到 ip_finish_output2\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e在继续我们的内核之前，让我们简单地谈谈 Path MTU Discovery。\u003c/p\u003e\n\n\u003ch3 id=\"path-mtu-discovery\"\u003ePath MTU Discovery\u003c/h3\u003e\n\n\u003cp\u003eLinux 提供了一个功能，我迄今为止一直避免提及：\u003ca href=\"https://en.wikipedia.org/wiki/Path_MTU_Discovery\"\u003e路径 MTU 发现\n\u003c/a\u003e。此功能允许内核自动确定\n路由的最大传输单元（\n\u003ca href=\"https://en.wikipedia.org/wiki/Maximum_transmission_unit\"\u003eMTU\u003c/a\u003e\n）。发送小于或等于该路由的 MTU 的包意味着可以避免 IP 分片，这是推荐设置，因为数\n据包分片会消耗系统资源，而避免分片看起来很容易：只需发送足够小的不需要分片的数据\n包。\u003c/p\u003e\n\n\u003cp\u003e你可以在应用程序中通过调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esetsockopt\u003c/code\u003e 带 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSOL_IP\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP_MTU_DISCOVER\u003c/code\u003e 选项，在\npacket 级别来调整路径 MTU 发现设置，相应的合法值参考 IP 协议的\u003ca href=\"http://man7.org/linux/man-pages/man7/ip.7.html\"\u003eman\npage\u003c/a\u003e。例如，你可能想设置的值是\n：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP_PMTUDISC_DO\u003c/code\u003e，表示“始终执行路径 MTU 发现”。更高级的网络应用程序或诊断工具可\n能选择自己实现\u003ca href=\"https://www.ietf.org/rfc/rfc4821.txt\"\u003eRFC 4821\u003c/a\u003e，以在应用程序启动\n时针对特定的路由做 PMTU。在这种情况下，你可以使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP_PMTUDISC_PROBE\u003c/code\u003e 选项告诉内核\n设置“Do not Fragment”位，这就会允许你发送大于 PMTU 的数据。\u003c/p\u003e\n\n\u003cp\u003e应用程序可以通过调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003egetsockopt\u003c/code\u003e 带 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSOL_IP\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP_MTU\u003c/code\u003e 选项来查看当前 PMTU。可以使\n用它指导应用程序在发送之前，构造 UDP 数据报的大小。\u003c/p\u003e\n\n\u003cp\u003e如果已启用 PMTU 发现，则发送大于 PMTU 的 UDP 数据将导致应用程序收到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEMSGSIZE\u003c/code\u003e 错误。\n这种情况下，应用程序只能减小 packet 大小重试。\u003c/p\u003e\n\n\u003cp\u003e强烈建议启用 PTMU 发现，因此我将不再详细描述 IP 分片的代码。当我们查看 IP 协议层统计信\n息时，我将解释所有统计信息，包括与分片相关的统计信息。其中许多计数都在\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_fragment\u003c/code\u003e 中更新的。不管分片与否，代码最后都会调到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_finish_output2\u003c/code\u003e，所以让\n我们继续。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_6.7\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"67-ip_finish_output2\"\u003e6.7 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_finish_output2\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eIP 分片后调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_finish_output2\u003c/code\u003e，另外 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_finish_output\u003c/code\u003e 也会直接调用它。这个函数\n在将包发送到邻居缓存之前处理各种统计计数器。让我们看看它是如何工作的：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eip_finish_output2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* variable declarations */\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ert\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ert_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eRTN_MULTICAST\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eIP_UPD_PO_STATS\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev_net\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eIPSTATS_MIB_OUTMCAST\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ert\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ert_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eRTN_BROADCAST\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eIP_UPD_PO_STATS\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev_net\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eIPSTATS_MIB_OUTBCAST\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Be paranoid, rather than too clever. */\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb_headroom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ehh_len\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eheader_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003eskb2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_realloc_headroom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLL_RESERVED_SPACE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb2\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003ekfree_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eENOMEM\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eskb_set_owner_w\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003econsume_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eskb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果与此数据包关联的路由是多播类型，则使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP_UPD_PO_STATS\u003c/code\u003e 宏来增加\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOutMcastPkts\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOutMcastOctets\u003c/code\u003e 计数。如果广播路由，则会增加 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOutBcastPkts\u003c/code\u003e 和\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOutBcastOctets\u003c/code\u003e 计数。\u003c/p\u003e\n\n\u003cp\u003e接下来，确保 skb 结构有足够的空间容纳需要添加的任何链路层头。如果空间不够，则调用\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_realloc_headroom\u003c/code\u003e 分配额外的空间，并且新的 skb 的费用（charge）记在相关的\nsocket 上。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"n\"\u003ercu_read_lock_bh\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003enexthop\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__force\u003c/span\u003e \u003cspan class=\"n\"\u003eu32\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ert_nexthop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ert\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eip_hdr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eneigh\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__ipv4_neigh_lookup_noref\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enexthop\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eneigh\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eneigh\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__neigh_create\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003earp_tbl\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003enexthop\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e继续，查询路由层找到下一跳，再根据下一跳信息查找邻居缓存。如果未找到，则\n调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__neigh_create\u003c/code\u003e 创建一个邻居。例如，第一次将数据发送到另一\n台主机的时候，就是这种情况。请注意，创建邻居缓存的时候带了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003earp_tbl\u003c/code\u003e（\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/ipv4/arp.c#L160-L187\"\u003enet/ipv4/arp.c\u003c/a\u003e\n中定义）参数。其他系统（如 IPv6 或\n\u003ca href=\"https://en.wikipedia.org/wiki/DECnet\"\u003eDECnet\u003c/a\u003e）维护自己的 ARP 表，并将不同的变量\n传给\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__neigh_create\u003c/code\u003e。 这篇文章的目的并不是要详细介绍邻居缓存，但注意如果创建，\n会导致缓存表增大。本文后面会介绍有关邻居缓存的更多详细信息。 邻居缓存会导出一组\n统计信息，以便可以衡量这种增长。有关详细信息，请参阅下面的监控部分。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eIS_ERR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eneigh\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edst_neigh_output\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eneigh\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003ercu_read_unlock_bh\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ercu_read_unlock_bh\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003enet_dbg_ratelimited\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%s: No header cache and no neighbour!\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                            \u003cspan class=\"n\"\u003e__func__\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ekfree_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEINVAL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后，如果创建邻居缓存成功，则调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_neigh_output\u003c/code\u003e 继续传递 skb；否则，释放 skb 并返\n回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEINVAL\u003c/code\u003e，这会向上传递，导致 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOutDiscards\u003c/code\u003e 在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_send_skb\u003c/code\u003e 中递增。让我们继续在\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_neigh_output\u003c/code\u003e 中接近 Linux 内核的 netdevice 子系统。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_6.8\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"68-dst_neigh_output\"\u003e6.8 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_neigh_output\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_neigh_output\u003c/code\u003e 函数做了两件重要的事情。首先，回想一下之前在本文中我\n们看到，如果用户调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 并通过辅助消息指定 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eMSG_CONFIRM\u003c/code\u003e 参数，则会设置一个标\n志位以指示目标高速缓存条目仍然有效且不应进行垃圾回收。这个检查就是在这个函数里面\n做的，并且邻居上的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econfirm\u003c/code\u003e 字段设置为当前的 jiffies 计数。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003edst_neigh_output\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003edst_entry\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eneighbour\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                   \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ehh_cache\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ehh\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epending_confirm\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003enow\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejiffies\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epending_confirm\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"cm\"\u003e/* avoid dirtying neighbour */\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003econfirmed\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003econfirmed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其次，检查邻居的状态并调用适当的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoutput\u003c/code\u003e 函数。让我们看一下这些条件，并尝试了解发\n生了什么：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"n\"\u003ehh\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehh\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enud_state\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eNUD_CONNECTED\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ehh\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehh_len\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nf\"\u003eneigh_hh_output\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehh\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eoutput\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e邻居被认为是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNUD_CONNECTED\u003c/code\u003e，如果它满足以下一个或多个条件：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNUD_PERMANENT\u003c/code\u003e：静态路由\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNUD_NOARP\u003c/code\u003e：不需要 ARP 请求（例如，目标是多播或广播地址，或环回设备）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNUD_REACHABLE\u003c/code\u003e：邻居是“可达的。”只要\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/ipv4/arp.c#L905-L923\"\u003e成功处理了\u003c/a\u003eARP 请求，目标就会被标记为可达\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e进一步，如果“硬件头”（hh）被缓存（之前已经发送过数据，并生成了缓存），将调\n用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh_hh_output\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e否则，调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoutput\u003c/code\u003e 函数。\u003c/p\u003e\n\n\u003cp\u003e以上两种情况，最后都会到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_queue_xmit\u003c/code\u003e，它将 skb 发送给 Linux 网络设备子系统，在它\n进入设备驱动程序层之前将对其进行更多处理。让我们沿着 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh_hh_output\u003c/code\u003e 和\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003en-\u0026gt;output\u003c/code\u003e 代码继续向下，直到达到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_queue_xmit\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_6.9\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"69-neigh_hh_output\"\u003e6.9 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh_hh_output\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e如果目标是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNUD_CONNECTED\u003c/code\u003e 并且硬件头已被缓存，则将调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh_hh_output\u003c/code\u003e，在将 skb 移交\n给 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_queue_xmit\u003c/code\u003e 之前执行一小部分处理。 我们来看看\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/include/net/neighbour.h#L336-L356\"\u003einclude/net/neighbour.h\u003c/a\u003e\n：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eneigh_hh_output\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ehh_cache\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ehh\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eseq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ehh_len\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eseq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eread_seqbegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ehh\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehh_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ehh_len\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehh\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehh_len\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehh_len\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eHH_DATA_MOD\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"cm\"\u003e/* this is inlined by gcc */\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003ememcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eHH_DATA_MOD\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehh\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehh_data\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eHH_DATA_MOD\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                 \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                         \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ehh_alen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHH_DATA_ALIGN\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehh_len\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                         \u003cspan class=\"n\"\u003ememcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ehh_alen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehh\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehh_data\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehh_alen\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                 \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eread_seqretry\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ehh\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehh_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eseq\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n         \u003cspan class=\"n\"\u003eskb_push\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehh_len\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n         \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edev_queue_xmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个函数理解有点难，部分原因是\u003ca href=\"https://en.wikipedia.org/wiki/Seqlock\"\u003eseqlock\u003c/a\u003e这\n个东西，它用于在缓存的硬件头上做读/写锁。可以将上面的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edo {} while ()\u003c/code\u003e循环想象成\n一个简单的重试机制，它将尝试在循环中执行，直到成功。\u003c/p\u003e\n\n\u003cp\u003e循环里处理硬件头的长度对齐。这是必需的，因为某些硬件头（如\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/include/linux/ieee80211.h#L210-L218\"\u003eIEEE\n802.11\u003c/a\u003e\n头）大于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eHH_DATA_MOD\u003c/code\u003e（16 字节）。\u003c/p\u003e\n\n\u003cp\u003e将头数据复制到 skb 后，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_push\u003c/code\u003e 将更新 skb 内指向数据缓冲区的指针。最后调用\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_queue_xmit\u003c/code\u003e 将 skb 传递给 Linux 网络设备子系统。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_6.10\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"610-n-output\"\u003e6.10 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003en-\u0026gt;output\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e如果目标不是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNUD_CONNECTED\u003c/code\u003e 或硬件头尚未缓存，则代码沿 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003en-\u0026gt;output\u003c/code\u003e 路径向下。\nneigbour 结构上的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoutput\u003c/code\u003e 指针指向哪个函数？这得看情况。要了解这是如何设置的，我们\n需要更多地了解邻居缓存的工作原理。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct\nneighbour\u003c/code\u003e 包含几个重要字段：我们在上面看到的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enud_state\u003c/code\u003e 字段，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoutput\u003c/code\u003e 函数和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eops\u003c/code\u003e\n结构。回想一下，我们之前看到如果在缓存中找不到现有条目，会从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip_finish_output2\u003c/code\u003e\n调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__neigh_create\u003c/code\u003e 创建一个。当调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__neigh_creaet\u003c/code\u003e 时，将分配邻居，其 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoutput\u003c/code\u003e 函\n数\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/core/neighbour.c#L294\"\u003e最初\u003c/a\u003e\n设置为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh_blackhole\u003c/code\u003e。随着\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__neigh_create\u003c/code\u003e 代码的进行，它将根据邻居的状态修改\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoutput\u003c/code\u003e 值以指向适当的发送方法。\u003c/p\u003e\n\n\u003cp\u003e例如，当代码确定是“已连接的”邻居时，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh_connect\u003c/code\u003e 会将 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoutput\u003c/code\u003e 设置为\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh-\u0026gt;ops-\u0026gt;connected_output\u003c/code\u003e。或者，当代码怀疑邻居可能已关闭时，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh_suspect\u003c/code\u003e\n会将 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoutput\u003c/code\u003e 设置为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh-\u0026gt;ops-\u0026gt;output\u003c/code\u003e（例如，如果已超过\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/sys/net/ipv4/neigh/default/delay_first_probe_time\u003c/code\u003e 自发送探测以来的\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edelay_first_probe_time\u003c/code\u003e 秒）。\u003c/p\u003e\n\n\u003cp\u003e换句话说：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh-\u0026gt;output\u003c/code\u003e 会被设置为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh-\u0026gt;ops_connected_output\u003c/code\u003e 或\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh-\u0026gt;ops-\u0026gt;output\u003c/code\u003e，具体取决于邻居的状态。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh-\u0026gt;ops\u003c/code\u003e 来自哪里？\u003c/p\u003e\n\n\u003cp\u003e分配邻居后，调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003earp_constructor\u003c/code\u003e（\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/ipv4/arp.c#L220-L313\"\u003enet/ipv4/arp.c\u003c/a\u003e\n）来设置 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct neighbor\u003c/code\u003e 的某些字段。特别是，此函数会检查与此邻居关联的设备是否\n导出来一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct header_ops\u003c/code\u003e 实例（\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/ethernet/eth.c#L342-L348\"\u003e以太网设备是这样做的\n\u003c/a\u003e），\n该结构体有一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecache\u003c/code\u003e 方法。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh-\u0026gt;ops\u003c/code\u003e 设置为\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/ipv4/arp.c#L138-L144\"\u003enet/ipv4/arp\u003c/a\u003e\n中定义的以下实例：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eneigh_ops\u003c/span\u003e \u003cspan class=\"n\"\u003earp_hh_ops\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efamily\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e               \u003cspan class=\"n\"\u003eAF_INET\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esolicit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e              \u003cspan class=\"n\"\u003earp_solicit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eerror_report\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e         \u003cspan class=\"n\"\u003earp_error_report\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eoutput\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e               \u003cspan class=\"n\"\u003eneigh_resolve_output\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econnected_output\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e     \u003cspan class=\"n\"\u003eneigh_resolve_output\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e所以，不管 neighbor 是不是“已连接的”，或者邻居缓存代码是否怀疑连接“已关闭”，\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh_resolve_output\u003c/code\u003e 最终都会被赋给 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh-\u0026gt;output\u003c/code\u003e。当执行到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003en-\u0026gt;output\u003c/code\u003e 时就会调\n用它。\u003c/p\u003e\n\n\u003ch3 id=\"neigh_resolve_output\"\u003eneigh_resolve_output\u003c/h3\u003e\n\n\u003cp\u003e此函数的目的是解析未连接的邻居，或已连接但没有缓存硬件头的邻居。我们来看看这个\n函数是如何工作的：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* Slow and careful. */\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eneigh_resolve_output\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eneighbour\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eneigh\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003edst_entry\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_dst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003erc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003ediscard\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eneigh_event_send\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eneigh\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet_device\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eneigh\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eseq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e代码首先进行一些基本检查，然后调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh_event_send\u003c/code\u003e。 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh_event_send\u003c/code\u003e 函数是\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__neigh_event_send\u003c/code\u003e 的简单封装，后者干大部分脏话累活。可以在\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/core/neighbour.c#L964-L1028\"\u003enet/core/neighbour.c\u003c/a\u003e\n中读\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__neigh_event_send\u003c/code\u003e 的源代码，从大的层面看，三种情况：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNUD_NONE\u003c/code\u003e 状态（默认状态）的邻居：假设\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/sys/net/ipv4/neigh/default/app_solicit\u003c/code\u003e 和\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/sys/net/ipv4/neigh/default/mcast_solicit\u003c/code\u003e 配置允许发送探测（如果不是，\n则将状态标记为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNUD_FAILED\u003c/code\u003e），将导致立即发送 ARP 请求。邻居状态将更新为\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNUD_INCOMPLETE\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNUD_STALE\u003c/code\u003e 状态的邻居：将更新为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNUD_DELAYED\u003c/code\u003e 并且将设置计时器以稍后探测它们（\n稍后是现在的时间+\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/sys/net/ipv4/neigh/default/delay_first_probe_time\u003c/code\u003e 秒\n）\u003c/li\u003e\n  \u003cli\u003e检查 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNUD_INCOMPLETE\u003c/code\u003e 状态的邻居（包括上面第一种情形），以确保未解析邻居的排\n队 packet 的数量小于等于\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/sys/net/ipv4/neigh/default/unres_qlen\u003c/code\u003e。如果超过\n，则数据包会出列并丢弃，直到小于等于 proc 中的值。 统计信息中有个计数器会因此\n更新\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e如果需要 ARP 探测，ARP 将立即被发送。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__neigh_event_send\u003c/code\u003e 将返回 0，表示邻居被视为“已\n连接”或“已延迟”，否则返回 1。返回值 0 允许 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh_resolve_output\u003c/code\u003e 继续：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eheader_ops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecache\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eneigh\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehh\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehh_len\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eneigh_hh_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eneigh\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果邻居关联的设备的协议实现（在我们的例子中是以太网）支持缓存硬件头，并且当前没\n有缓存，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh_hh_init\u003c/code\u003e 将缓存它。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003e__skb_pull\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_network_offset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eseq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eread_seqbegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eneigh\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eha_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edev_hard_header\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003entohs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                                              \u003cspan class=\"n\"\u003eneigh\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eha\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eread_seqretry\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eneigh\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eha_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eseq\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来，seqlock 锁控制对邻居的硬件地址字段（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigh-\u0026gt;ha\u003c/code\u003e）的访问。\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_hard_header\u003c/code\u003e 为 skb 创建以太网头时将读取该字段。\u003c/p\u003e\n\n\u003cp\u003e之后是错误检查：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003erc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edev_queue_xmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout_kfree_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果以太网头写入成功，将调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_queue_xmit\u003c/code\u003e 将 skb 传递给 Linux 网络设备子系统进行发\n送。如果出现错误，goto 将删除 skb，设置并返回错误码：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nl\"\u003eout:\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ediscard\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eneigh_dbg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;%s: dst=%p neigh=%p\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e__func__\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eneigh\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003eout_kfree_skb\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"n\"\u003erc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEINVAL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ekfree_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEXPORT_SYMBOL\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eneigh_resolve_output\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在我们进入 Linux 网络设备子系统之前，让我们看看一些用于监控和转换 IP 协议层的文件。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_6.11\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"611-监控-ip-层\"\u003e6.11 监控: IP 层\u003c/h2\u003e\n\n\u003ch3 id=\"procnetsnmp-1\"\u003e/proc/net/snmp\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/net/snmp\nIp: Forwarding DefaultTTL InReceives InHdrErrors InAddrErrors ForwDatagrams InUnknownProtos InDiscards InDelivers OutRequests OutDiscards OutNoRoutes ReasmTimeout ReasmReqds ReasmOKs ReasmFails FragOKs FragFails FragCreates\nIp: 1 64 25922988125 0 0 15771700 0 0 25898327616 22789396404 12987882 51 1 10129840 2196520 1 0 0 0\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个文件包扩多种协议的统计，IP 层的在最前面，每一列代表什么有说明。\u003c/p\u003e\n\n\u003cp\u003e前面我们已经看到 IP 协议层有一些地方会更新计数器。这些计数器的类型是 C 枚举类型，定\n义在\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/include/uapi/linux/snmp.h#L10-L59\"\u003einclude/uapi/linux/snmp.h\u003c/a\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIPSTATS_MIB_NUM\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"cm\"\u003e/* frequently written fields in fast path, kept in same cache line */\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIPSTATS_MIB_INPKTS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e     \u003cspan class=\"cm\"\u003e/* InReceives */\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIPSTATS_MIB_INOCTETS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e     \u003cspan class=\"cm\"\u003e/* InOctets */\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIPSTATS_MIB_INDELIVERS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e     \u003cspan class=\"cm\"\u003e/* InDelivers */\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIPSTATS_MIB_OUTFORWDATAGRAMS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"cm\"\u003e/* OutForwDatagrams */\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIPSTATS_MIB_OUTPKTS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e      \u003cspan class=\"cm\"\u003e/* OutRequests */\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIPSTATS_MIB_OUTOCTETS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e      \u003cspan class=\"cm\"\u003e/* OutOctets */\u003c/span\u003e\n\n  \u003cspan class=\"cm\"\u003e/* ... */\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e一些有趣的统计：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOutRequests\u003c/code\u003e: Incremented each time an IP packet is attempted to be sent. It appears that this is incremented for every send, successful or not.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOutDiscards\u003c/code\u003e: Incremented each time an IP packet is discarded. This can happen if appending data to the skb (for corked sockets) fails, or if the layers below IP return an error.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOutNoRoute\u003c/code\u003e: Incremented in several places, for example in the UDP protocol layer (udp_sendmsg) if no route can be generated for a given destination. Also incremented when an application calls “connect” on a UDP socket but no route can be found.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFragOKs\u003c/code\u003e: Incremented once per packet that is fragmented. For example, a packet split into 3 fragments will cause this counter to be incremented once.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFragCreates\u003c/code\u003e: Incremented once per fragment that is created. For example, a packet split into 3 fragments will cause this counter to be incremented thrice.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFragFails\u003c/code\u003e: Incremented if fragmentation was attempted, but is not permitted (because the “Don’t Fragment” bit is set). Also incremented if outputting the fragment fails.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e其他（接收数据部分）的统计可以见本文的姊妹篇：\u003ca href=\"https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/#monitoring-ip-protocol-layer-statistics\"\u003e原文\n\u003c/a\u003e\n，\u003ca href=\"\"\u003e中文翻译版\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"procnetnetstat\"\u003e/proc/net/netstat\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/net/netstat | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003eIpExt\nIpExt: InNoRoutes InTruncatedPkts InMcastPkts OutMcastPkts InBcastPkts OutBcastPkts InOctets OutOctets InMcastOctets OutMcastOctets InBcastOctets OutBcastOctets InCsumErrors InNoECTPkts InECT0Pktsu InCEPkts\nIpExt: 0 0 0 0 277959 0 14568040307695 32991309088496 0 0 58649349 0 0 0 0 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e格式与前面的类似，除了每列的名称都有 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIpExt\u003c/code\u003e 前缀之外。\u003c/p\u003e\n\n\u003cp\u003e一些有趣的统计：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOutMcastPkts\u003c/code\u003e: Incremented each time a packet destined for a multicast address is sent.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOutBcastPkts\u003c/code\u003e: Incremented each time a packet destined for a broadcast address is sent.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOutOctects\u003c/code\u003e: The number of packet bytes output.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOutMcastOctets\u003c/code\u003e: The number of multicast packet bytes output.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOutBcastOctets\u003c/code\u003e: The number of broadcast packet bytes output.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e其他（接收数据部分）的统计可以见本文的姊妹篇：\u003ca href=\"https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/#monitoring-ip-protocol-layer-statistics\"\u003e原文\n\u003c/a\u003e\n，\u003ca href=\"\"\u003e中文翻译版\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e注意这些计数分别在 IP 层的不同地方被更新。由于代码一直在更新，重复计数或者计数错误\n的 bug 可能会引入。如果这些计数对你非常重要，强烈建议你阅读内核的相应源码，确定它\n们是在哪里被更新的，以及更新的对不对，是不是有 bug。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_7\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"7-linux-netdevice-子系统\"\u003e7 Linux netdevice 子系统\u003c/h1\u003e\n\n\u003cp\u003e在继续跟进 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_queue_xmit\u003c/code\u003e 发送数据包之前，让我们花点时间介绍几个将在下一部分中出\n现的重要概念。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_7.1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"71-linux-traffic-control流量控制\"\u003e7.1 Linux traffic control（流量控制）\u003c/h2\u003e\n\n\u003cp\u003eLinux 支持称为流量控制（\u003ca href=\"http://tldp.org/HOWTO/Traffic-Control-HOWTO/intro.html\"\u003etraffic\ncontrol\u003c/a\u003e）的功能。此功能\n允许系统管理员控制数据包如何从机器发送出去。本文不会深入探讨 Linux 流量控制\n的各个方面的细节。\u003ca href=\"http://tldp.org/HOWTO/Traffic-Control-HOWTO/\"\u003e这篇文档\u003c/a\u003e对流量\n控制系统、它如何控制流量，及其其特性进行了深入的介绍。\u003c/p\u003e\n\n\u003cp\u003e这里介绍一些值得一提的概念，使后面的代码更容易理解。\u003c/p\u003e\n\n\u003cp\u003e流量控制系统包含几组不同的 queue system，每种有不同的排队特征。各个排队系统通常称\n为 qdisc，也称为排队规则。你可以将 qdisc 视为\u003cstrong\u003e调度程序\u003c/strong\u003e; qdisc 决定数据包的发送时\n间和方式。\u003c/p\u003e\n\n\u003cp\u003e在 Linux 上，每个 device 都有一个与之关联的默认 qdisc。对于仅支持单发送队列的网卡，使\n用默认的 qdisc \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epfifo_fast\u003c/code\u003e。支持多个发送队列的网卡使用 mq 的默认 qdisc。可以运行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc\nqdisc\u003c/code\u003e 来查看系统 qdisc 信息。\u003c/p\u003e\n\n\u003cp\u003e某些设备支持硬件流量控制，这允许管理员将流量控制 offload 到网络硬件，节省系统的\nCPU 资源。\u003c/p\u003e\n\n\u003cp\u003e现在已经介绍了这些概念，让我们从\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/core/dev.c#L2890-L2894\"\u003enet/core/dev.c\u003c/a\u003e\n继续 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_queue_xmit\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_7.2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"72-dev_queue_xmit-and-__dev_queue_xmit\"\u003e7.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_queue_xmit\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__dev_queue_xmit\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_queue_xmit\u003c/code\u003e 简单封装了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__dev_queue_xmit\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003edev_queue_xmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003e__dev_queue_xmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEXPORT_SYMBOL\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev_queue_xmit\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__dev_queue_xmit\u003c/code\u003e 才是干脏活累活的地方。我们\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/core/dev.c#L2808-L2825\"\u003e一段段\n\u003c/a\u003e来看：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003e__dev_queue_xmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eaccel_priv\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet_device\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_queue\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eQdisc\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003erc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eENOMEM\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eskb_reset_mac_header\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* Disable soft irqs for various locks below. Also\n         * stops preemption for RCU.\n         */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ercu_read_lock_bh\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eskb_update_prio\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e开始的逻辑：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e声明变量\u003c/li\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_reset_mac_header\u003c/code\u003e，准备发送 skb。这会重置 skb 内部的指针，使得 ether 头可\n以被访问\u003c/li\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ercu_read_lock_bh\u003c/code\u003e，为接下来的读操作加锁。更多关于使用 RCU 安全访问数据的信\n息，可以参考\u003ca href=\"https://www.kernel.org/doc/Documentation/RCU/checklist.txt\"\u003e这里\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_update_prio\u003c/code\u003e，如果启用了\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/Documentation/cgroups/net_prio.txt\"\u003e网络优先级 cgroup\u003c/a\u003e，这会设置 skb 的优先级\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e现在，我们来看更复杂的部分：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"n\"\u003etxq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_pick_tx\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eaccel_priv\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这会选择发送队列。本文后面会看到，一些网卡支持多发送队列。我们来看这是如何工作的。\u003c/p\u003e\n\n\u003ch3 id=\"721-netdev_pick_tx\"\u003e7.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_pick_tx\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_pick_tx\u003c/code\u003e 定义在\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/core/flow_dissector.c#L397-L417\"\u003enet/core/flow_dissector.c\u003c/a\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_queue\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nf\"\u003enetdev_pick_tx\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet_device\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eaccel_priv\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003equeue_index\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ereal_num_tx_queues\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet_device_ops\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eops\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003endo_select_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003equeue_index\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003endo_select_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                                            \u003cspan class=\"n\"\u003eaccel_priv\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003equeue_index\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__netdev_pick_tx\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eaccel_priv\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003equeue_index\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edev_cap_txqueue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003equeue_index\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eskb_set_queue_mapping\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003equeue_index\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_get_tx_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003equeue_index\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如上所示，如果网络设备仅支持单个 TX 队列，则会跳过复杂的代码，直接返回单个 TX 队列。\n大多高端服务器上使用的设备都有多个 TX 队列。具有多个 TX 队列的设备有两种情况：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e驱动程序实现 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003endo_select_queue\u003c/code\u003e，以硬件或 feature-specific 的方式更智能地选择 TX 队列\u003c/li\u003e\n  \u003cli\u003e驱动程序没有实现 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003endo_select_queue\u003c/code\u003e，这种情况需要内核自己选择设备\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e从 3.13 内核开始，没有多少驱动程序实现 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003endo_select_queue\u003c/code\u003e。bnx2x 和 ixgbe 驱动程序实\n现了此功能，但仅用于以太网光纤通道（\u003ca href=\"https://en.wikipedia.org/wiki/Fibre_Channel_over_Ethernet\"\u003eFCoE\u003c/a\u003e）。鉴于此，我们假设网络设备没有实现\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003endo_select_queue\u003c/code\u003e 和/或没有使用 FCoE。在这种情况下，内核将使用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netdev_pick_tx\u003c/code\u003e\n选择 tx 队列。\u003c/p\u003e\n\n\u003cp\u003e一旦\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netdev_pick_tx\u003c/code\u003e 确定了队列号，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_set_queue_mapping\u003c/code\u003e 将缓存该值（稍后将在\n流量控制代码中使用），\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_get_tx_queue\u003c/code\u003e 将查找并返回指向该队列的指针。让我们\n看一下\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netdev_pick_tx\u003c/code\u003e 在返回\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__dev_queue_xmit\u003c/code\u003e 之前的工作原理。\u003c/p\u003e\n\n\u003ch3 id=\"722-__netdev_pick_tx\"\u003e7.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netdev_pick_tx\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e我们来看内核如何选择 TX 队列。\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/core/flow_dissector.c#L375-L395\"\u003enet/core/flow_dissector.c\u003c/a\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eu16\u003c/span\u003e \u003cspan class=\"nf\"\u003e__netdev_pick_tx\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet_device\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003equeue_index\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esk_tx_queue_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003equeue_index\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eooo_okay\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n            \u003cspan class=\"n\"\u003equeue_index\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ereal_num_tx_queues\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003enew_index\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eget_xps_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enew_index\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003enew_index\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_tx_hash\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003equeue_index\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003enew_index\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003ercu_access_pointer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_dst_cache\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003esk_tx_queue_set\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enew_index\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003equeue_index\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew_index\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003equeue_index\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e代码首先调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_tx_queue_get\u003c/code\u003e 检查发送队列是否已经缓存在 socket 上，如果尚未缓存，\n则返回-1。\u003c/p\u003e\n\n\u003cp\u003e下一个 if 语句检查是否满足以下任一条件：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003equeue_index \u0026lt; 0\u003c/code\u003e：表示尚未设置 TX queue 的情况\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eooo_okay\u003c/code\u003e 标志是否非零：如果不为 0，则表示现在允许无序（out of order）数据包。\n协议层必须正确地地设置此标志。当 flow 的所有 outstanding（需要确认的？）数据包都\n已确认时，TCP 协议层将设置此标志。当发生这种情况时，内核可以为此数据包选择不同\n的 TX 队列。UDP 协议层不设置此标志 - 因此 UDP 数据包永远不会将 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eooo_okay\u003c/code\u003e 设置为非零\n值。\u003c/li\u003e\n  \u003cli\u003eTX queue index 大于 TX queue 数量：如果用户最近通过 ethtool 更改了设备上的队列数，\n则会发生这种情况。稍后会详细介绍。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e以上任何一种情况，都表示没有找到合适的 TX queue，因此接下来代码会进入慢路径以继续\n寻找合适的发送队列。首先调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eget_xps_queue\u003c/code\u003e，它会使用一个由用户配置的 TX queue 到\nCPU 的映射，这称为 XPS（Transmit Packet Steering ，发送数据包控制），我们将更详细\n地了解 XPS 是什么以及它如何工作。\u003c/p\u003e\n\n\u003cp\u003e如果内核不支持 XPS，或者系统管理员未配置 XPS，或者配置的映射引用了无效队列，\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eget_xps_queue\u003c/code\u003e 返回-1，则代码将继续调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_tx_hash\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e一旦 XPS 或内核使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_tx_hash\u003c/code\u003e 自动选择了发送队列，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_tx_queue_set\u003c/code\u003e 会将队列缓存\n在 socket 对象上，然后返回。让我们看看 XPS，以及 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_tx_hash\u003c/code\u003e 在继续调用\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_queue_xmit\u003c/code\u003e 之前是如何工作的。\u003c/p\u003e\n\n\u003ch4 id=\"transmit-packet-steering-xps\"\u003eTransmit Packet Steering (XPS)\u003c/h4\u003e\n\n\u003cp\u003e发送数据包控制（XPS）是一项功能，允许系统管理员配置哪些 CPU 可以处理网卡的哪些发送\n队列。XPS 的主要目的是\u003cstrong\u003e避免处理发送请求时的锁竞争\u003c/strong\u003e。使用 XPS 还可以减少缓存驱逐，\n避免\u003ca href=\"https://en.wikipedia.org/wiki/Non-uniform_memory_access\"\u003eNUMA\u003c/a\u003e机器上的远程\n内存访问等。\u003c/p\u003e\n\n\u003cp\u003e可以查看内核有关 XPS 的\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/Documentation/networking/scaling.txt#L364-L422\"\u003e文档\n\u003c/a\u003e\n了解其如何工作的更多信息。我们后面会介绍如何调整系统的 XPS，现在，你只需要知道\n配置 XPS，系统管理员需要定义 TX queue 到 CPU 的映射（bitmap 形式）。\u003c/p\u003e\n\n\u003cp\u003e上面代码中，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eget_xps_queue\u003c/code\u003e 将查询这个用户指定的映射，以确定应使用哪个发送\n队列。如果 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eget_xps_queue\u003c/code\u003e 返回-1，则将改为使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_tx_hash\u003c/code\u003e。\u003c/p\u003e\n\n\u003ch4 id=\"skb_tx_hash\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_tx_hash\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003e如果 XPS 未包含在内核中，或 XPS 未配置，或配置的队列不可用（可能因为用户调整了队列数\n），\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_tx_hash\u003c/code\u003e 将接管以确定应在哪个队列上发送数据。准确理解 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_tx_hash\u003c/code\u003e 的工作\n原理非常重要，具体取决于你的发送负载。请注意，这段代码已经随时间做过一些更新，因\n此如果你使用的内核版本与本文不同，则应直接查阅相应版本的 j 内核源代码。\u003c/p\u003e\n\n\u003cp\u003e让我们看看它是如何工作的，来自\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/include/linux/netdevice.h#L2331-L2340\"\u003einclude/linux/netdevice.h\u003c/a\u003e\n：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/*\n * Returns a Tx hash for the given packet when dev-\u0026gt;real_num_tx_queues is used\n * as a distribution range limit for the returned value.\n */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"n\"\u003eu16\u003c/span\u003e \u003cspan class=\"nf\"\u003eskb_tx_hash\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet_device\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                              \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003e__skb_tx_hash\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ereal_num_tx_queues\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e直接调用了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e __skb_tx_hash\u003c/code\u003e, \u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/core/flow_dissector.c#L239-L271\"\u003enet/core/flow_dissector.c\u003c/a\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/*\n * Returns a Tx hash based on the given packet descriptor a Tx queues\u0026#39; number\n * to be used as a distribution range.\n */\u003c/span\u003e\n\u003cspan class=\"n\"\u003eu16\u003c/span\u003e \u003cspan class=\"nf\"\u003e__skb_tx_hash\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet_device\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                  \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003enum_tx_queues\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"n\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eu16\u003c/span\u003e \u003cspan class=\"n\"\u003eqoffset\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eu16\u003c/span\u003e \u003cspan class=\"n\"\u003eqcount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enum_tx_queues\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb_rx_queue_recorded\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ehash\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_get_rx_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehash\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003enum_tx_queues\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003ehash\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"n\"\u003enum_tx_queues\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个函数中的第一个 if 是一个有趣的短路。函数名 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_rx_queue_recorded\u003c/code\u003e 有点误导。skb\n有一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003equeue_mapping\u003c/code\u003e 字段，rx 和 tx 都会用到这个字段。无论如何，如果系统正在接收数\n据包并将其转发到其他地方，则此 if 语句都为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrue\u003c/code\u003e。否则，代码将继续向下：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enum_tc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eu8\u003c/span\u003e \u003cspan class=\"n\"\u003etc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_get_prio_tc_map\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epriority\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eqoffset\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etc_to_txq\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etc\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eoffset\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eqcount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etc_to_txq\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etc\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e要理解这段代码，首先要知道，程序可以设置 socket 上发送的数据的优先级。这可以通过\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esetsockopt\u003c/code\u003e 带 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSOL_SOCKET\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSO_PRIORITY\u003c/code\u003e 选项来完成。有关 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSO_PRIORITY\u003c/code\u003e 的更多信息\n，请参见\u003ca href=\"http://man7.org/linux/man-pages/man7/socket.7.html\"\u003esocket (7) man\npage\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e请注意，如果使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esetsockopt\u003c/code\u003e 带 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP_TOS\u003c/code\u003e 选项来设置在 socket 上发送的 IP 包的 TOS 标志（\n或者作为辅助消息传递给 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e，在数据包级别设置），内核会将其转换为\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb-\u0026gt;priority\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e如前所述，一些网络设备支持基于硬件的流量控制系统。\u003cstrong\u003e如果 num_tc 不为零，则表示此设\n备支持基于硬件的流量控制\u003c/strong\u003e。这种情况下，将查询一个\u003cstrong\u003epacket priority 到该硬件支持\n的流量控制\u003c/strong\u003e的映射，根据此映射选择适当的流量类型（traffic class）。\u003c/p\u003e\n\n\u003cp\u003e接下来，将计算出该 traffic class 的 TX queue 的范围，它将用于确定发送队列。\u003c/p\u003e\n\n\u003cp\u003e如果 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enum_tc\u003c/code\u003e 为零（网络设备不支持硬件流量控制），则 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqcount\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqoffset\u003c/code\u003e 变量分\n别设置为发送队列数和 0。\u003c/p\u003e\n\n\u003cp\u003e使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqcount\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqoffset\u003c/code\u003e，将计算发送队列的 index：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_hash\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ehash\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_hash\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ehash\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__force\u003c/span\u003e \u003cspan class=\"n\"\u003eu16\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ehash\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__flow_hash_1word\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eu16\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e(((\u003c/span\u003e\u003cspan class=\"n\"\u003eu64\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ehash\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eqcount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eqoffset\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEXPORT_SYMBOL\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__skb_tx_hash\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后，通过\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netdev_pick_tx\u003c/code\u003e 返回选出的 TX queue index。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_7.3\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"73-继续__dev_queue_xmit\"\u003e7.3 继续\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__dev_queue_xmit\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e至此已经选到了合适的发送队列。\u003c/p\u003e\n\n\u003cp\u003e继续\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__dev_queue_xmit can continue\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"n\"\u003eq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ercu_dereference_bh\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eqdisc\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef CONFIG_NET_CLS_ACT\n\u003c/span\u003e        \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etc_verd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSET_TC_AT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etc_verd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eAT_EGRESS\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e        \u003cspan class=\"n\"\u003etrace_net_dev_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eenqueue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003erc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__dev_xmit_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e首先获取与此队列关联的 qdisc。回想一下，之前我们看到单发送队列设备的默认类型是\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epfifo_fast\u003c/code\u003e qdisc，而对于多队列设备，默认类型是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emq\u003c/code\u003e qdisc。\u003c/p\u003e\n\n\u003cp\u003e接下来，如果内核中已启用数据包分类 API，则代码会为 packet 分配 traffic class。 接下\n来，检查 disc 是否有合适的队列来存放 packet。像 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enoqueue\u003c/code\u003e 这样的 qdisc 没有队列。 如果\n有队列，则代码调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__dev_xmit_skb\u003c/code\u003e 继续处理数据，然后跳转到此函数的末尾。我们很快\n就会看到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__dev_xmit_skb\u003c/code\u003e。现在，让我们看看如果没有队列会发生什么，从一个非常有用\n的注释开始：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"cm\"\u003e/* The device has no queue. Common case for software devices:\n           loopback, all the sorts of tunnels...\n\n           Really, it is unlikely that netif_tx_lock protection is necessary\n           here.  (f.e. loopback and IP tunnels are clean ignoring statistics\n           counters.)\n           However, it is possible, that they rely on protection\n           made by us here.\n\n           Check this and shot the lock. It is not prone from deadlocks.\n           Either shot noqueue qdisc, it is even simpler 8)\n         */\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eIFF_UP\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecpu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esmp_processor_id\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* ok because BHs are off */\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e正如注释所示，\u003cstrong\u003e唯一可以拥有”没有队列的 qdisc”的设备是环回设备和隧道设备\u003c/strong\u003e。如果\n设备当前处于运行状态，则获取当前 CPU，然后判断此设备队列上的发送锁是否由此 CPU 拥有\n：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003exmit_lock_owner\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003ecpu\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__this_cpu_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003exmit_recursion\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eRECURSION_LIMIT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003erecursion_alert\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果发送锁不由此 CPU 拥有，则在此处检查 per-CPU 计数器变量 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003exmit_recursion\u003c/code\u003e，判断其是\n否超过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eRECURSION_LIMIT\u003c/code\u003e。 一个程序可能会在这段代码这里持续发送数据，然后被抢占，\n调度程序选择另一个程序来运行。第二个程序也可能驻留在此持续发送数据。因此，\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003exmit_recursion\u003c/code\u003e 计数器用于确保在此处竞争发送数据的程序不超过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eRECURSION_LIMIT\u003c/code\u003e 个\n。\u003c/p\u003e\n\n\u003cp\u003e我们继续：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                        \u003cspan class=\"n\"\u003eHARD_TX_LOCK\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecpu\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003enetif_xmit_stopped\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003e__this_cpu_inc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003exmit_recursion\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003erc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edev_hard_start_xmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003e__this_cpu_dec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003exmit_recursion\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev_xmit_complete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                                        \u003cspan class=\"n\"\u003eHARD_TX_UNLOCK\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                                        \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eHARD_TX_UNLOCK\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003enet_crit_ratelimited\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Virtual device %s asks to queue packet!\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                             \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"err\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"cm\"\u003e/* Recursion is detected! It is possible,\n                         * unfortunately\n                         */\u003c/span\u003e\n\u003cspan class=\"nl\"\u003erecursion_alert:\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003enet_crit_ratelimited\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Dead loop on virtual device %s, fix it urgently!\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                             \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来的代码首先尝试获取发送锁，然后检查要使用的设备的发送队列是否被停用。如果没\n有停用，则更新 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003exmit_recursion\u003c/code\u003e 计数，然后将数据向下传递到更靠近发送的设备。我们稍\n后会更详细地看到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_hard_start_xmit\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e或者，如果当前 CPU 是发送锁定的拥有者，或者如果 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eRECURSION_LIMIT\u003c/code\u003e 被命中，则不进行发\n送，而会打印告警日志。\u003c/p\u003e\n\n\u003cp\u003e函数剩余部分的代码设置错误码并返回。\u003c/p\u003e\n\n\u003cp\u003e由于我们对真正的以太网设备感兴趣，让我们来看一下之前就需要跟进去的\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__dev_xmit_skb\u003c/code\u003e 函数，这是发送主线上的函数。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_7.4\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"74-__dev_xmit_skb\"\u003e7.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__dev_xmit_skb\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e现在我们带着排队规则 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc\u003c/code\u003e、网络设备 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev\u003c/code\u003e 和发送队列 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etxq\u003c/code\u003e 三个变量来到\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__dev_xmit_skb\u003c/code\u003e，\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/core/dev.c#L2684-L2745\"\u003enet/core/dev.c\u003c/a\u003e\n：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003e__dev_xmit_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eQdisc\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                 \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet_device\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                 \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_queue\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003espinlock_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eroot_lock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eqdisc_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003econtended\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eqdisc_pkt_len_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eqdisc_calculate_pkt_len\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/*\n         * Heuristic to force contended enqueues to serialize on a\n         * separate lock before trying to get qdisc main lock.\n         * This permits __QDISC_STATE_RUNNING owner to get the lock more often\n         * and dequeue packets faster.\n         */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003econtended\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eqdisc_is_running\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtended\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"n\"\u003espin_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebusylock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e代码首先使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_pkt_len_init\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_calculate_pkt_len\u003c/code\u003e 来计算数据的准确长度\n，稍后 qdisc 会用到该值。 对于硬件 offload（例如 UFO）这是必需的，因为添加的额外的头\n信息，硬件 offload 的时候回用到。\u003c/p\u003e\n\n\u003cp\u003e接下来，使用另一个锁来帮助减少 qdisc 主锁上的竞争（我们稍后会看到这第二个锁）。 如\n果 qdisc 当前正在运行，那么试图发送的其他程序将在 qdisc 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebusylock\u003c/code\u003e 上竞争。 这允许\n运行 qdisc 的程序在处理数据包的同时，与较少量的程序竞争第二个主锁。随着竞争者数量\n的减少，这种技巧增加了吞吐量。\u003ca href=\"https://github.com/torvalds/linux/commit/79640a4ca6955e3ebdb7038508fa7a0cd7fa5527\"\u003e原始 commit 描述\n\u003c/a\u003e\n。 接下来是主锁：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"n\"\u003espin_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来处理 3 种可能情况：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e如果 qdisc 已停用\u003c/li\u003e\n  \u003cli\u003e如果 qdisc 允许数据包 bypass 排队系统，并且没有其他包要发送，并且 qdisc 当前没有运\n行。允许包 bypass 所谓的\u003cstrong\u003e“work-conserving qdisc” - 那些用于流量整形（traffic\nreshaping）目的并且不会引起发送延迟的 qdisc\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003e所有其他情况\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e让我们来看看每种情况下发生什么，从 qdisc 停用开始：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etest_bit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__QDISC_STATE_DEACTIVATED\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ekfree_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003erc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNET_XMIT_DROP\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这很简单。 如果 qdisc 停用，则释放数据并将返回代码设置为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNET_XMIT_DROP\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e接下来，如果 qdisc 允许数据包 bypass，并且没有其他包要发送，并且 qdisc 当前没有运行：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"err\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"nf\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eTCQ_F_CAN_BYPASS\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eqdisc_qlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                   \u003cspan class=\"n\"\u003eqdisc_run_begin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"cm\"\u003e/*\n                 * This is a work-conserving queue; there are no old skbs\n                 * waiting to be sent out; and the qdisc is not running -\n                 * xmit the skb directly.\n                 */\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epriv_flags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eIFF_XMIT_DST_RELEASE\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eskb_dst_force\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003eqdisc_bstats_update\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esch_direct_xmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eroot_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtended\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003espin_unlock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebusylock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003econtended\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003e__qdisc_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eqdisc_run_end\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003erc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNET_XMIT_SUCCESS\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个 if 语句有点复杂，如果满足以下所有条件，则整个语句的计算结果为 true：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eq-\u0026gt; flags＆TCQ_F_CAN_BYPASS\u003c/code\u003e：qdisc 允许数据包绕过排队系统。对于所谓的“\nwork-conserving” qdiscs 这会是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrue\u003c/code\u003e；即，允许 packet bypass 流量整形 qdisc。\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epfifo_fast\u003c/code\u003e qdisc 允许数据包 bypass\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e!qdisc_qlen(q)\u003c/code\u003e：qdisc 的队列中没有待发送的数据\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_run_begin(p)\u003c/code\u003e：如果 qdisc 未运行，此函数将设置 qdisc 的状态为“running”并返\n回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrue\u003c/code\u003e，如果 qdisc 已在运行，则返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efalse\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e如果以上三个条件都为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrue\u003c/code\u003e，那么：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e检查 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIFF_XMIT_DST_RELEASE\u003c/code\u003e 标志，此标志允许内核释放 skb 的目标缓存。如果标志已禁用，将强制对 skb 进行引用计数\u003c/li\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_bstats_update\u003c/code\u003e 更新 qdisc 发送的字节数和包数统计\u003c/li\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_direct_xmit\u003c/code\u003e 用于发送数据包。我们将很快深入研究 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_direct_xmit\u003c/code\u003e，因为慢路径也会调用到它\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_direct_xmit\u003c/code\u003e 的返回值有两种情况：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e队列不为空（返回\u0026gt; 0）。在这种情况下，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebusylock\u003c/code\u003e 将被释放，然后调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__qdisc_run\u003c/code\u003e 重新启动 qdisc 处理\u003c/li\u003e\n  \u003cli\u003e队列为空（返回 0）。在这种情况下，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_run_end\u003c/code\u003e 用于关闭 qdisc 处理\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e在任何一种情况下，都会返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNET_XMIT_SUCCESS\u003c/code\u003e，这不是太糟糕。\u003c/p\u003e\n\n\u003cp\u003e让我们检查最后一种情况：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"err\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eskb_dst_force\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003erc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eenqueue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eNET_XMIT_MASK\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eqdisc_run_begin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtended\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003espin_unlock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebusylock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003econtended\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003e__qdisc_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在所有其他情况下：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_dst_force\u003c/code\u003e 强制对 skb 的目标缓存进行引用计数\u003c/li\u003e\n  \u003cli\u003e调用 qdisc 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eenqueue\u003c/code\u003e 方法将数据入队，保存函数返回值\u003c/li\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_run_begin(p)\u003c/code\u003e将 qdisc 标记为正在运行。如果它尚未运行（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003econtended ==\nfalse\u003c/code\u003e），则释放 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebusylock\u003c/code\u003e，然后调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__qdisc_run(p)\u003c/code\u003e启动 qdisc 处理\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e函数最后释放相应的锁，并返回状态码：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"n\"\u003espin_unlock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtended\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"n\"\u003espin_unlock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebusylock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca name=\"chap_7.5\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"75-调优-transmit-packet-steering-xps\"\u003e7.5 调优: Transmit Packet Steering (XPS)\u003c/h2\u003e\n\n\u003cp\u003e使用 XPS 需要在内核配置中启用它（Ubuntu 上内核 3.13.0 有 XPS），并提供一个位掩码，用于\n描述\u003cstrong\u003eCPU 和 TX queue 的对应关系\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e这些位掩码类似于\n\u003ca href=\"https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/#receive-packet-steering-rps\"\u003eRPS\u003c/a\u003e\n位掩码，你可以在内核\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/Documentation/networking/scaling.txt#L147-L150\"\u003e文档\n\u003c/a\u003e\n中找到有关这些位掩码的一些资料。\u003c/p\u003e\n\n\u003cp\u003e简而言之，要修改的位掩码位于以下位置：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e/sys/class/net/DEVICE_NAME/queues/QUEUE/xps_cpus\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e因此，对于 eth0 和 TX queue 0，你需要使用十六进制数修改文件：\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/class/net/eth0/queues/tx-0/xps_cpus\u003c/code\u003e，制定哪些 CPU 应处理来自 eth0 的发送队列 0\n的发送过程。另外，\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/Documentation/networking/scaling.txt#L412-L422\"\u003e文档\n\u003c/a\u003e\n指出，在某些配置中可能不需要 XPS。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_8\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"8-queuing-disciplines排队规则\"\u003e8 Queuing Disciplines（排队规则）\u003c/h1\u003e\n\n\u003cp\u003e至此，我们需要先看一些 qdisc 代码。本文不打算涵盖 TX 所有选项的具体细节。\n如果对此感兴趣，可以查看\u003ca href=\"http://lartc.org/howto/index.html\"\u003e这篇\u003c/a\u003e很棒的指南。\u003c/p\u003e\n\n\u003cp\u003e接下来将查看\u003cstrong\u003e通用的数据包调度程序\u003c/strong\u003e（generic packet scheduler）是如何工作的\n。特别地，我们将分析 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_run_begin()\u003c/code\u003e、\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_run_end()\u003c/code\u003e、\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__ qdisc_run()\u003c/code\u003e 和\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_direct_xmit()\u003c/code\u003e 函数是如何一层层将数据传递给驱动程序的。\u003c/p\u003e\n\n\u003cp\u003e从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_run_begin()\u003c/code\u003e 的工作原理开始。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_8.1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"81-qdisc_run_begin-and-qdisc_run_end仅设置-qdisc-状态位\"\u003e8.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_run_begin()\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_run_end()\u003c/code\u003e：仅设置 qdisc 状态位\u003c/h2\u003e\n\n\u003cp\u003e定义在\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/include/net/sch_generic.h#L101-L107\"\u003einclude/net/sch_generic.h\u003c/a\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"n\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003eqdisc_run_begin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eQdisc\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eqdisc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eqdisc_is_running\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eqdisc\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eqdisc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003e__state\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003e__QDISC___STATE_RUNNING\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eqdisc_run_end\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eQdisc\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eqdisc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eqdisc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003e__state\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;=\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"n\"\u003e__QDISC___STATE_RUNNING\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_run_begin()\u003c/code\u003e 检查 qdisc 是否设置了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__QDISC___STATE_RUNNING\u003c/code\u003e 状态\n 位。如果设置了，直接返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efalse\u003c/code\u003e；否则，设置此状态位，然后返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrue\u003c/code\u003e。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_run_end()\u003c/code\u003e 执行相反的操作，清除此状态位。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e需要注意的是，这两个函数都\u003cstrong\u003e只是设置状态位，并没有真正干活\u003c/strong\u003e。真正的处理过程是从\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__qdisc_run()\u003c/code\u003e 开始的。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_8.2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"82-__qdisc_run真正的-qdisc-执行入口\"\u003e8.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__qdisc_run()\u003c/code\u003e：真正的 qdisc 执行入口\u003c/h2\u003e\n\n\u003cp\u003e这个函数乍看非常简单，甚至让人产生错觉：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003e__qdisc_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eQdisc\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003equota\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eweight_p\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eqdisc_restart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 从队列取出一个 skb 并发送，剩余队列不为空时返回非零，见 8.3\u003c/span\u003e\n\n                \u003cspan class=\"c1\"\u003e// 如果发生下面情况之一，则延后处理：\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// 1. quota 用尽\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// 2. 其他进程需要 CPU\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"n\"\u003equota\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eneed_resched\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003e__netif_schedule\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eqdisc_run_end\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e          \u003cspan class=\"c1\"\u003e// 清除 RUNNING 状态位\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e函数首先获取 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eweight_p\u003c/code\u003e，这个变量通常是通过 sysctl 设置的，收包路径也会用到。我们稍\n后会看到如何调整此值。这个循环做两件事：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewhile\u003c/code\u003e 循环中调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_restart()\u003c/code\u003e，直到它返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efalse\u003c/code\u003e（或触发下面的中断）。\u003c/li\u003e\n  \u003cli\u003e判断是否还有 quota，或 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneed_resched()\u003c/code\u003e 是否返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrue\u003c/code\u003e。其中任何一个为真，\n将调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netif_schedule()\u003c/code\u003e 然后跳出循环。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e注意：用户程序调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e \u003cstrong\u003e系统调用之后，内核便接管了执行过程，一路执行到\n这里;用户程序一直在累积系统时间（system time）\u003c/strong\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cul\u003e\n  \u003cli\u003e如果用户程序在内核中用完其 time quota，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneed_resched()\u003c/code\u003e 将返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrue\u003c/code\u003e。\u003c/li\u003e\n  \u003cli\u003e如果仍有 quota，且用户程序的时间片尚未使用，则将再次调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_restart()\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e先来看看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_restart(q)\u003c/code\u003e是如何工作的，然后将深入研究\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netif_schedule(q)\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_8.3\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"83-qdisc_restart从-qdisc-队列中取包发送给网络驱动\"\u003e8.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_restart\u003c/code\u003e：从 qdisc 队列中取包，发送给网络驱动\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/sched/sch_generic.c#L156-L192\"\u003eqdisc_restart()\u003c/a\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/*\n * NOTE: Called under qdisc_lock(q) with locally disabled BH.\n *\n * __QDISC_STATE_RUNNING guarantees only one CPU can process\n * this qdisc at a time. qdisc_lock(q) serializes queue accesses for this queue.\n *\n *  netif_tx_lock serializes accesses to device driver.\n *\n *  qdisc_lock(q) and netif_tx_lock are mutually exclusive,\n *  if one is grabbed, another must be free.\n *\n * Returns to the caller:\n *                                0  - queue is empty or throttled.\n *                                \u0026gt;0 - queue is not empty.\n */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eqdisc_restart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eQdisc\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e      \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edequeue_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003espinlock_t\u003c/span\u003e          \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eroot_lock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eqdisc_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet_device\u003c/span\u003e   \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eqdisc_dev\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_queue\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etxq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_get_tx_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_get_queue_mapping\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003esch_direct_xmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eroot_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_restart()\u003c/code\u003e 函数开头的注释非常有用，描述了用到的三个锁：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__QDISC_STATE_RUNNING\u003c/code\u003e 保证了同一时间只有一个 CPU 可以处理这个 qdisc。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_lock(q)\u003c/code\u003e 将\u003cstrong\u003e访问此 qdisc\u003c/strong\u003e 的操作顺序化。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetif_tx_lock\u003c/code\u003e 将\u003cstrong\u003e访问设备驱动\u003c/strong\u003e的操作顺序化。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e函数逻辑：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e首先调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edequeue_skb()\u003c/code\u003e 从 qdisc 中取出要发送的 skb。如果队列为空，返回 0，\n这将导致上层的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_restart()\u003c/code\u003e 返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efalse\u003c/code\u003e，继而退出 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewhile\u003c/code\u003e 循环。\u003c/li\u003e\n  \u003cli\u003e如果 skb 不为空，接下来获取 qdisc 队列锁，然后找到相关的发送设备 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev\u003c/code\u003e 和发送\n队列 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etxq\u003c/code\u003e，最后带着这些参数调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_direct_xmit()\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e先来看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edequeue_skb()\u003c/code\u003e，然后再回到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_direct_xmit()\u003c/code\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"831-dequeue_skb从-qdisc-队列取待发送-skb\"\u003e8.3.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edequeue_skb()\u003c/code\u003e：从 qdisc 队列取待发送 skb\u003c/h3\u003e\n\n\u003cp\u003e定义在 \u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/sched/sch_generic.c#L59-L78\"\u003enet/sched/sch_generic.c\u003c/a\u003e。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nf\"\u003edequeue_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eQdisc\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e      \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egso_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 待发送包\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_queue\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etxq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edev_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 之前发送失败的包所在的队列\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* check the reason of requeuing without tx lock first */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etxq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_get_tx_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_get_queue_mapping\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003enetif_xmit_frozen_or_stopped\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egso_skb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eqlen\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eskb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eTCQ_F_ONETXQUEUE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003enetif_xmit_frozen_or_stopped\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eskb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edequeue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e函数首先声明一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sk_buff *skb\u003c/code\u003e 变量，这是接下来要处理的数据。这个变量后\n面会依不同情况而被赋不同的值，最后作为返回值返回给调用方。\u003c/p\u003e\n\n\u003cp\u003e变量 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb\u003c/code\u003e 初始化为 qdisc 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003egso_skb\u003c/code\u003e 字段，这是\u003cstrong\u003e之前由于发送失败而重新入队的数据\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e接下来分为两种情况，根据 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb = q-\u0026gt;gso_skb\u003c/code\u003e 是否为空：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e如果不为空，会将之前重新入队的 skb 出队，作为待处理数据返回。\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e检查发送队列是否已停止。\u003c/li\u003e\n      \u003cli\u003e如果队列未停止，则 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003egso_skb\u003c/code\u003e 字段置空，队列长度减 1，返回 skb。\u003c/li\u003e\n      \u003cli\u003e如果队列已停止，则 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003egso_skb\u003c/code\u003e 不动，返回空。\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e如果为空（即之前没有数据重新入队），则从要处理的 qdisc 中取出一个新 skb，作为待处理数据返回。\u003c/p\u003e\n\n    \u003cp\u003e进入另一个 tricky 的 if 语句，如果：\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003eqdisc 不是单发送队列，或\u003c/li\u003e\n      \u003cli\u003e发送队列未停止工作\u003c/li\u003e\n    \u003c/ol\u003e\n\n    \u003cp\u003e则调用 qdisc 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edequeue()\u003c/code\u003e 方法获取新数据并返回。dequeue 的内部实现依 qdisc 的实现和功能而有所不同。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e该函数最后返回变量 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb\u003c/code\u003e，这是接下来要处理的数据包。\u003c/p\u003e\n\n\u003ch3 id=\"832-sch_direct_xmit发送给网卡驱动\"\u003e8.3.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_direct_xmit()\u003c/code\u003e：发送给网卡驱动\u003c/h3\u003e\n\n\u003cp\u003e现在来到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_direct_xmit()\u003c/code\u003e（定义在\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/sched/sch_generic.c#L109-L154\"\u003enet/sched/sch_generic.c\u003c/a\u003e\n），这是将数据向下发送到网络设备的重要一步。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/*\n * Transmit one skb, and handle the return status as required. Holding the\n * __QDISC_STATE_RUNNING bit guarantees that only one CPU can execute this\n * function.\n *\n * Returns to the caller:\n *                                0  - queue is empty or throttled.\n *                                \u0026gt;0 - queue is not empty.\n */\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003esch_direct_xmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eQdisc\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet_device\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_queue\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003espinlock_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eroot_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNETDEV_TX_BUSY\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003espin_unlock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003enetif_xmit_frozen_or_stopped\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edev_hard_start_xmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003espin_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev_xmit_complete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e                    \u003cspan class=\"c1\"\u003e// 1. 驱动发送成功\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eqdisc_qlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e                         \u003cspan class=\"c1\"\u003e//    将 qdisc 队列的剩余长度作为返回值\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eNETDEV_TX_LOCKED\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// 2. 驱动获取发送锁失败\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehandle_dev_cpu_collision\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e                                         \u003cspan class=\"c1\"\u003e// 3. 驱动发送“正忙”，当前无法发送\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edev_requeue_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e               \u003cspan class=\"c1\"\u003e//    将数据重新入队，等下次发送。\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003enetif_xmit_frozen_or_stopped\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这段代码首先释放 qdisc（发送队列）锁，然后获取（设备驱动的）发送锁。\u003c/p\u003e\n\n\u003cp\u003e接下来，如果发送队列没有停止，就会调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_hard_start_xmit()\u003c/code\u003e。稍后将看到，\n后者会把数据从 Linux 内核的网络设备子系统发送到设备驱动程序。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_hard_start_xmit()\u003c/code\u003e 执行之后，（或因发送队列停止而跳过执行），队列的发送锁就会被释放。\u003c/p\u003e\n\n\u003cp\u003e接下来，再次获取此 qdisc 的锁，然后通过调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_xmit_complete()\u003c/code\u003e 检查 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_hard_start_xmit()\u003c/code\u003e 的返回值。\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e如果 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_xmit_complete()\u003c/code\u003e 返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrue\u003c/code\u003e，数据已成功发送，则将 qdisc 队列长度设置为返回值，否则\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e如果 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_hard_start_xmit()\u003c/code\u003e 返回的是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNETDEV_TX_LOCKED\u003c/code\u003e，调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehandle_dev_cpu_collision()\u003c/code\u003e 来处理锁竞争。\u003c/p\u003e\n\n    \u003cp\u003e当驱动程序锁定发送队列失败时，支持 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNETIF_F_LLTX\u003c/code\u003e 功能的设备会返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNETDEV_TX_LOCKED\u003c/code\u003e。 稍后会仔细研究 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehandle_dev_cpu_collision\u003c/code\u003e。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e现在，让我们继续关注 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_direct_xmit()\u003c/code\u003e 并查看，以上两种情况都不满足时的情况。\n如果发送失败，而且不是以上两种情况，那还有第三种可能：由于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNETDEV_TX_BUSY\u003c/code\u003e。驱动\n程序返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNETDEV_TX_BUSY\u003c/code\u003e 表示设备或驱动程序“正忙”，数据现在无法发送。这种情\n况下，调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_requeue_skb()\u003c/code\u003e 将数据重新入队，等下次发送。\u003c/p\u003e\n\n\u003cp\u003e来深入地看一下 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehandle_dev_cpu_collision()\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_requeue_skb()\u003c/code\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"833-handle_dev_cpu_collision\"\u003e8.3.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehandle_dev_cpu_collision()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e定义在 \u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/sched/sch_generic.c#L80-L107\"\u003enet/sched/sch_generic.c\u003c/a\u003e，处理两种情况：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e发送锁由当前 CPU 保持\u003c/li\u003e\n  \u003cli\u003e发送锁由其他 CPU 保存\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e第一种情况认为是配置问题，打印一条警告。\u003c/p\u003e\n\n\u003cp\u003e第二种情况，更新统计计数器 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecpu_collision\u003c/code\u003e，通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_requeue_skb\u003c/code\u003e 将数据重新入队\n以便稍后发送。回想一下，我们在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edequeue_skb\u003c/code\u003e 中看到了专门处理重新入队的 skb 的代码。\u003c/p\u003e\n\n\u003cp\u003e代码很简短，可以快速阅读：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003ehandle_dev_cpu_collision\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                           \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_queue\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edev_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                           \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eQdisc\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev_queue\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003exmit_lock_owner\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003esmp_processor_id\u003c/span\u003e\u003cspan class=\"p\"\u003e()))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"cm\"\u003e/*\n                 * Same CPU holding the lock. It may be a transient\n                 * configuration error, when hard_start_xmit() recurses. We\n                 * detect it by checking xmit owner and drop the packet when\n                 * deadloop is detected. Return OK to try the next skb.\n                 */\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ekfree_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003enet_warn_ratelimited\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Dead loop on netdevice %s, fix it urgently!\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                     \u003cspan class=\"n\"\u003edev_queue\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eqdisc_qlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"cm\"\u003e/*\n                 * Another cpu is holding lock, requeue \u0026amp; delay xmits for\n                 * some time.\n                 */\u003c/span\u003e\n                \u003cspan class=\"n\"\u003e__this_cpu_inc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esoftnet_data\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecpu_collision\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edev_requeue_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来看看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_requeue_skb\u003c/code\u003e 做了什么，后面会看到，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_direct_xmit\u003c/code\u003e 会调用它.\u003c/p\u003e\n\n\u003ch3 id=\"834-dev_requeue_skb重新压入-qdisc-队列等待下次发送\"\u003e8.3.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_requeue_skb()\u003c/code\u003e：重新压入 qdisc 队列，等待下次发送\u003c/h3\u003e\n\n\u003cp\u003e这个函数很简短，\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/sched/sch_generic.c#L39-L57\"\u003enet/sched/sch_generic.c\u003c/a\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* Modifications to data participating in scheduling must be protected with\n * qdisc_lock(qdisc) spinlock.\n *\n * The idea is the following:\n * - enqueue, dequeue are serialized via qdisc root lock\n * - ingress filtering is also serialized via qdisc root lock\n * - updates to tree and tree walking are only done under the rtnl mutex.\n */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003edev_requeue_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eQdisc\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eskb_dst_force\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// skb 上强制增加一次引用计数\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egso_skb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// 回想一下，dequeue_skb() 中取出一个 skb 时会检查该字段\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eqstats\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erequeues\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 更新 `requeue` 计数\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eqlen\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e          \u003cspan class=\"c1\"\u003e// 更新 qdisc 队列长度\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003e__netif_schedule\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 触发 softirq\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来再回忆一遍我们一步步到达这里的过程，然后查看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netif_schedule()\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_8.4\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"84-复习__qdisc_run-主逻辑\"\u003e8.4 复习：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__qdisc_run()\u003c/code\u003e 主逻辑\u003c/h2\u003e\n\n\u003cp\u003e回想一下，我们是从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__qdisc_run()\u003c/code\u003e 开始到达这里的：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003e__qdisc_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eQdisc\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003equota\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eweight_p\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eqdisc_restart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c1\"\u003e// dequeue skb, send it\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"n\"\u003equota\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eneed_resched\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"c1\"\u003e// Ordered by possible occurrence: Postpone processing if\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003e__netif_schedule\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e         \u003cspan class=\"c1\"\u003e// 1. we\u0026#39;ve exceeded packet quota\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                       \u003cspan class=\"c1\"\u003e// 2. another process needs the CPU\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e                                    \n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eqdisc_run_end\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewhile\u003c/code\u003e 循环调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_restart()\u003c/code\u003e，后者取出一个 skb，然后尝试通过\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_direct_xmit()\u003c/code\u003e 来发送；\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_direct_xmit\u003c/code\u003e 调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_hard_start_xmit\u003c/code\u003e 来向驱动\n程序进行实际发送。任何无法发送的 skb 都重新入队，将在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNET_TX\u003c/code\u003e softirq 中进行\n发送。\u003c/p\u003e\n\n\u003cp\u003e发送过程的下一步是查看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_hard_start_xmit()\u003c/code\u003e，了解如何调用驱动程序来发送数据。但\n在此之前，应该先查看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netif_schedule()\u003c/code\u003e 以完全理解 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__qdisc_run()\u003c/code\u003e 和\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_requeue_skb()\u003c/code\u003e 的工作方式。\u003c/p\u003e\n\n\u003ch3 id=\"841-__netif_schedule\"\u003e8.4.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netif_schedule\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e现在来看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netif_schedule()\u003c/code\u003e，\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/core/dev.c#L2127-L2146\"\u003enet/core/dev.c\u003c/a\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003e__netif_schedule\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eQdisc\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003etest_and_set_bit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__QDISC_STATE_SCHED\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e__netif_reschedule\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEXPORT_SYMBOL\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__netif_schedule\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003e__netif_reschedule\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eQdisc\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esoftnet_data\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003elocal_irq_save\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e                  \u003cspan class=\"c1\"\u003e// 保存硬中断状态，并禁用硬中断（IRQ）\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003e__get_cpu_var\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esoftnet_data\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e      \u003cspan class=\"c1\"\u003e// 获取当前 CPU 的 struct softnet_data 实例\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_sched\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eoutput_queue_tailp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// 将 qdisc 添加到 softnet_data 的 output 队列中\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eoutput_queue_tailp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_sched\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eraise_softirq_irqoff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNET_TX_SOFTIRQ\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 重要步骤：触发 NET_TX_SOFTIRQ 类型软中断（softirq）\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elocal_irq_restore\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e               \u003cspan class=\"c1\"\u003e// 恢复 IRQ 状态并重新启用硬中断\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etest_and_set_bit()\u003c/code\u003e 检查 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eq-\u0026gt;state\u003c/code\u003e 中的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__QDISC_STATE_SCHED\u003c/code\u003e 位，如果为该位为 0，会将其置 1。\n如果置位成功（意味着之前处于非 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__QDISC_STATE_SCHED\u003c/code\u003e 状态），代码将调用\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netif_reschedule()\u003c/code\u003e，这个函数不长，但做的事情非常重要。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e更多有关 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct softnet_data\u003c/code\u003e 初始化的内容，可参考我们之前关于网络栈接收数据的\n\u003ca href=\"https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/#linux-network-device-subsystem\"\u003e文章\u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netif_reschedule()\u003c/code\u003e 中的重要步骤是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eraise_softirq_irqoff()\u003c/code\u003e，它触发一次 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNET_TX_SOFTIRQ\u003c/code\u003e 类型\nsoftirq。 softirqs 及其注册过程也包含在我们之前的\u003ca href=\"https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/#softirqs\"\u003e文章\n\u003c/a\u003e\n中。简单来说，可以认为 \u003cstrong\u003esoftirqs 是以很高优先级在执行的内核线程，并代表内核处理数据\u003c/strong\u003e，\n用于网络数据的收发处理（incoming 和 outgoing）。\u003c/p\u003e\n\n\u003cp\u003e正如在\u003ca href=\"\"\u003e上一篇\u003c/a\u003e文章中看到的，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNET_TX_SOFTIRQ\u003c/code\u003e softirq 有一个注册的回调函数\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_tx_action()\u003c/code\u003e，这意味着有一个内核线程将会执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_tx_action()\u003c/code\u003e。该线程偶尔会被暂\n停（pause），\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eraise_softirq_irqoff()\u003c/code\u003e 会恢复（resume）其执行。让我们看一下\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_tx_action()\u003c/code\u003e 的作用，以便了解内核如何处理发送数据请求。\u003c/p\u003e\n\n\u003ch3 id=\"842-net_tx_action\"\u003e8.4.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_tx_action()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e定义在\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/core/dev.c#L3297-L3353\"\u003enet/core/dev.c\u003c/a\u003e\n，由两个 if 组成，分别处理 executing CPU 的 \u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esoftnet_data\u003c/code\u003e 实例的两个 queue\u003c/strong\u003e：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003ecompletion queue\u003c/li\u003e\n  \u003cli\u003eoutput queue\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e让我们分别来看这两种情况，注意，\u003cstrong\u003e这段代码在 softirq 上下文中作为一个独立的内核线\n程执行\u003c/strong\u003e。网络栈发送侧的\u003cstrong\u003e热路径中不适合执行的代码，将被延后（defer），然\n后由执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_tx_action()\u003c/code\u003e 的线程处理\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"843-net_tx_action-completion-queue待释放-skb-队列\"\u003e8.4.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_tx_action()\u003c/code\u003e completion queue：待释放 skb 队列\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esoftnet_data\u003c/code\u003e 的 completion queue 存放\u003cstrong\u003e等待释放的 skb\u003c/strong\u003e。函数 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_kfree_skb_irq\u003c/code\u003e 可以将\nskbs 添加到队列中以便稍后释放。设备驱动程序通常使用它来推迟释放已经发送成功的 skbs。驱动\n程序推迟释放 skb 的原因是，释放内存可能需要时间，而且有些代码（如 hardirq 处理程序）\n需要尽可能快的执行并返回。\u003c/p\u003e\n\n\u003cp\u003e看一下 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_tx_action\u003c/code\u003e 第一段代码，该代码处理 completion queue 中等待释放的 skb：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eclist\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003elocal_irq_disable\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eclist\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003esd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion_queue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003elocal_irq_enable\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclist\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eclist\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eclist\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eclist\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003e__kfree_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果 completion queue 非空，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewhile\u003c/code\u003e 循环将遍历这个列表并\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__kfree_skb\u003c/code\u003e 释放每个 skb 占\n用的内存。\u003cstrong\u003e牢记，此代码在一个名为 softirq 的独立“线程”中运行 - 它并没有占用用\n户程序的系统时间（system time）\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"844-net_tx_action-output-queue待发送-skb-队列\"\u003e8.4.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_tx_action\u003c/code\u003e output queue：待发送 skb 队列\u003c/h3\u003e\n\n\u003cp\u003eoutput queue 存储 \u003cstrong\u003e待发送的 skb\u003c/strong\u003e。如前所述，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netif_reschedule()\u003c/code\u003e 将数据添加到 output\nqueue 中，通常从\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netif_schedule\u003c/code\u003e 调用过来。\u003c/p\u003e\n\n\u003cp\u003e目前，我们看到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netif_schedule()\u003c/code\u003e 函数在两个地方被调用：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_requeue_skb()\u003c/code\u003e：如果驱动程序返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNETDEV_TX_BUSY\u003c/code\u003e 或者存在 CPU 冲突，可以调用此函数。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__qdisc_run()\u003c/code\u003e：一旦超出 quota 或者需要 reschedule，会调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netif_schedule\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e这个函数会将 qdisc 添加到 softnet_data 的 output queue 进行处理。 这里将输出队列处理代码拆分为三个块。\u003c/p\u003e\n\n\u003cp\u003e我们来看看第一块：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eoutput_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e       \u003cspan class=\"c1\"\u003e// 如果 output queue 上有 qdisc\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eQdisc\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003elocal_irq_disable\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ehead\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eoutput_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 将 head 指向第一个 qdisc\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eoutput_queue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eoutput_queue_tailp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esd\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eoutput_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 更新队尾指针\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elocal_irq_enable\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果 output queue 上有 qdisc，则将 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehead\u003c/code\u003e 变量指向第一个 qdisc，并\n更新队尾指针。\u003c/p\u003e\n\n\u003cp\u003e接下来，一个 \u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewhile\u003c/code\u003e 循环开始遍历 qdsics 列表\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eQdisc\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ehead\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_sched\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003espinlock_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eroot_lock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eqdisc_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003espin_trylock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e                 \u003cspan class=\"c1\"\u003e// 非阻塞：尝试获取 qdisc root lock\u003c/span\u003e\n            \u003cspan class=\"n\"\u003esmp_mb__before_clear_bit\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eclear_bit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__QDISC_STATE_SCHED\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 清除 q-\u0026gt;state SCHED 状态位\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003eqdisc_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e                              \u003cspan class=\"c1\"\u003e// 执行 qdisc 规则，这会设置 q-\u0026gt;state 的 RUNNING 状态位\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003espin_unlock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot_lock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e                    \u003cspan class=\"c1\"\u003e// 释放 qdisc 锁\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003etest_bit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__QDISC_STATE_DEACTIVATED\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c1\"\u003e// qdisc 还在运行\u003c/span\u003e\n                \u003cspan class=\"n\"\u003e__netif_reschedule\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e                 \u003cspan class=\"c1\"\u003e// 重新放入 queue，稍后继续尝试获取 root lock\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e                                   \u003cspan class=\"c1\"\u003e// qdisc 已停止运行，清除 SCHED 状态位\u003c/span\u003e\n                \u003cspan class=\"n\"\u003esmp_mb__before_clear_bit\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eclear_bit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__QDISC_STATE_SCHED\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003espin_trylock()\u003c/code\u003e 获得 root lock 后，\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eclear_bit()\u003c/code\u003e 清除 qdisc 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__QDISC_STATE_SCHED\u003c/code\u003e 状态位。\u003c/li\u003e\n  \u003cli\u003e然后执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_run()\u003c/code\u003e，这会将 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__QDISC___STATE_RUNNING\u003c/code\u003e 状态位置 1，并执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__qdisc_run()\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e这里很重要。从系统调用开始的发送过程代表 applition 执行，花费的是系统时间；但接\n下来它将转入 softirq 上下文中执行（这个 qdisc 的 skb 之前没有被发送出去发），花\n费的是 softirq 时间。这种区分非常重要，因为这\u003cstrong\u003e直接影响着应用程序的 CPU 使用量监\n控\u003c/strong\u003e，尤其是发送大量数据的应用。换一种陈述方式：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e无论发送完成还是驱动程序返回错误，程序的系统时间都包括调用驱动程序发送数据所花的时间。\u003c/li\u003e\n  \u003cli\u003e如果驱动层发送失败（例如，设备忙于发送其他内容），则会将 qdisc 添加到\noutput queue，稍后由 softirq 线程处理。在这种情况下，将会额外花费一些 softirq（\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esi\u003c/code\u003e）时间在发送数据上。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e因此，发送数据花费的总时间是下面二者之和：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e系统调用的系统时间\u003c/strong\u003e（sys time）\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNET_TX\u003c/code\u003e 类型的 softirq 时间\u003c/strong\u003e（softirq time）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e如果 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003espin_trylock()\u003c/code\u003e 失败，则检查 qdisc 是否已经停止运行（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__QDISC_STATE_DEACTIVATED\u003c/code\u003e 状态位），两种情况：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eqdisc 未停用：调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netif_reschedule()\u003c/code\u003e，这会将 qdisc 放回到原 queue 中，稍后再次尝试获取 qdisc 锁。\u003c/li\u003e\n  \u003cli\u003eqdisc 已停用：清除 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__QDISC_STATE_SCHED\u003c/code\u003e 状态位。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003ca name=\"chap_8.5\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"85-最终来到-dev_hard_start_xmit\"\u003e8.5 最终来到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_hard_start_xmit\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e至此，我们已经穿过了整个网络栈，最终来到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_hard_start_xmit\u003c/code\u003e。也许你是从\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 系统调用直接到达这里的，或者你是通过 qdisc 上的 softirq 线程处理网络数据来\n到这里的。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_hard_start_xmit\u003c/code\u003e 将调用设备驱动程序来实际执行发送操作。\u003c/p\u003e\n\n\u003cp\u003e这个函数处理两种主要情况：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e已经准备好要发送的数据，或\u003c/li\u003e\n  \u003cli\u003e需要 segmentation offloading 的数据\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e先看第一种情况，要发送的数据已经准备好的情况。\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/net/core/dev.c#L2541-L2652\"\u003enet/code/dev.c\u003c/a\u003e\n：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003edev_hard_start_xmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet_device\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_queue\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet_device_ops\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eops\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003erc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNETDEV_TX_OK\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_len\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003enetdev_features_t\u003c/span\u003e \u003cspan class=\"n\"\u003efeatures\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/*\n                 * If device doesn\u0026#39;t need skb-\u0026gt;dst, release it right now while\n                 * its hot in this cpu cache\n                 */\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epriv_flags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eIFF_XMIT_DST_RELEASE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eskb_dst_drop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003efeatures\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enetif_skb_features\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e代码首先获取设备的回调函数集合 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eops\u003c/code\u003e，后面让驱动程序做一些发送数据的工作时会用到\n。检查 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb-\u0026gt;next\u003c/code\u003e 以确定此数据不是已分片数据的一部分，然后继续执行以下两项操作：\u003c/p\u003e\n\n\u003cp\u003e首先，检查设备是否设置了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIFF_XMIT_DST_RELEASE\u003c/code\u003e 标志。这个版本的内核中的任何“真实”\n以太网设备都不使用此标志，但环回设备和其他一些软件设备使用。如果启用此特性，则可\n以减少目标高速缓存条目上的引用计数，因为驱动程序不需要它。\u003c/p\u003e\n\n\u003cp\u003e接下来，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetif_skb_features\u003c/code\u003e 获取设备支持的功能列表，并根据数据的协议类型（\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev-\u0026gt;protocol\u003c/code\u003e）对特性列表进行一些修改。例如，如果设备支持此协议的校验和计算，\n则将对 skb 进行相应的标记。 VLAN tag（如果已设置）也会导致功能标记被修改。\u003c/p\u003e\n\n\u003cp\u003e接下来，将检查 vlan 标记，如果设备无法 offload VLAN tag，将通过\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__vlan_put_tag\u003c/code\u003e 在软\n件中执行此操作：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evlan_tx_tag_present\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                    \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003evlan_hw_offload_capable\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efeatures\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003evlan_proto\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eskb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e__vlan_put_tag\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003evlan_proto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                             \u003cspan class=\"n\"\u003evlan_tx_tag_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                        \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003evlan_tci\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后，检查数据以确定这是不是 encapsulation （隧道封装）offload 请求，例如，\n\u003ca href=\"https://en.wikipedia.org/wiki/Generic_Routing_Encapsulation\"\u003eGRE\u003c/a\u003e。 在这种情况\n下，feature flags 将被更新，以添加任何特定于设备的硬件封装功能：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                \u003cspan class=\"cm\"\u003e/* If encapsulation offload request, verify we are testing\n                 * hardware encapsulation features instead of standard\n                 * features for the netdev\n                 */\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eencapsulation\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003efeatures\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;=\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehw_enc_features\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetif_needs_gso\u003c/code\u003e 用于确定 skb 是否需要分片。 如果需要，但设备不支持，则\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetif_needs_gso\u003c/code\u003e 将返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrue\u003c/code\u003e，表示分片应在软件中进行。 在这种情况下，调用\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_gso_segment\u003c/code\u003e 进行分片，代码将跳转到 gso 以发送数据包。我们稍后会看到 GSO 路径。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enetif_needs_gso\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efeatures\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev_gso_segment\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efeatures\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e\n                                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout_kfree_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003egso\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果数据不需要分片，则处理一些其他情况。 首先，数据是否需要顺序化？ 也就是说，如\n果数据分布在多个缓冲区中，设备是否支持发送网络数据，还是首先需要将它们组合成单个\n有序缓冲区？ 绝大多数网卡不需要在发送之前将数据顺序化，因此在几乎所有情况下，\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_needs_linearize\u003c/code\u003e 将为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efalse\u003c/code\u003e 然后被跳过。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                                    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb_needs_linearize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efeatures\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                            \u003cspan class=\"n\"\u003e__skb_linearize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout_kfree_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e从接下来的一段注释我们可以了解到，下面的代码判断数据包是否仍然需要计算校验和。 如果设备不支持计算校验和，则在这里通过软件计算：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                        \u003cspan class=\"cm\"\u003e/* If packet is not checksummed and device does not\n                         * support checksumming for this protocol, complete\n                         * checksumming here.\n                         */\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eip_summed\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eCHECKSUM_PARTIAL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eencapsulation\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                                        \u003cspan class=\"n\"\u003eskb_set_inner_transport_header\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                                \u003cspan class=\"n\"\u003eskb_checksum_start_offset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n                                \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                                        \u003cspan class=\"n\"\u003eskb_set_transport_header\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                                \u003cspan class=\"n\"\u003eskb_checksum_start_offset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n                                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efeatures\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eNETIF_F_ALL_CSUM\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                                     \u003cspan class=\"n\"\u003eskb_checksum_help\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                                        \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout_kfree_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e再往前，我们来到了 packet taps（tap 是包过滤器的安插点，例如抓包执行的地方）。回想\n一下在\u003ca href=\"https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/#netifreceiveskbcore-special-box-delivers-data-to-packet-taps-and-protocol-layers\"\u003e接收数据的文章\n\u003c/a\u003e\n中，我们看到了数据包是如何传递给 tap（如\n\u003ca href=\"http://www.tcpdump.org/manpages/pcap.3pcap.html\"\u003ePCAP\u003c/a\u003e）的。 该函数中的下一个代\n码块将要发送的数据包传递给 tap（如果有的话）：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003elist_empty\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eptype_all\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003edev_queue_xmit_nit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最终，调用驱动的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eops\u003c/code\u003e 里面的发送回调函数 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003endo_start_xmit\u003c/code\u003e 将数据包传给网卡设备：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                \u003cspan class=\"n\"\u003eskb_len\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003erc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003endo_start_xmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003etrace_net_dev_xmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_len\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erc\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eNETDEV_TX_OK\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003etxq_trans_update\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003endo_start_xmit\u003c/code\u003e 的返回值表示发送成功与否，并作为这个函数的返回值被返回给更上层。\n我们看到了这个返回值将如何影响上层：数据可能会被此时的 qdisc 重新入队，因此\n稍后尝试再次发送。\u003c/p\u003e\n\n\u003cp\u003e我们来看看 GSO 的 case。如果此函数的前面部分完成了分片，或者之前已经完成了分片但是\n上次发送失败，则会进入下面的代码：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nl\"\u003egso:\u003c/span\u003e\n        \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enskb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003enskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003elist_empty\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eptype_all\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003edev_queue_xmit_nit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003eskb_len\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003erc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eops\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003endo_start_xmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etrace_net_dev_xmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_len\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erc\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eNETDEV_TX_OK\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erc\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"n\"\u003eNETDEV_TX_MASK\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout_kfree_gso_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003enskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enskb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etxq_trans_update\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enetif_xmit_stopped\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etxq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eNETDEV_TX_BUSY\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e你可能已经猜到，此 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewhile\u003c/code\u003e 循环会遍历分片生成的 skb 列表。\u003c/p\u003e\n\n\u003cp\u003e每个数据包将被：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e传给包过滤器（tap，如果有的话）\u003c/li\u003e\n  \u003cli\u003e通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003endo_start_xmit\u003c/code\u003e 传递给驱动程序进行发送\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e设备驱动 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003endo_start_xmit()\u003c/code\u003e返回错误时，会进行一些错误处理，并将错误返回给更上层。\n未发送的 skbs 可能会被重新入队以便稍后再次发送。\u003c/p\u003e\n\n\u003cp\u003e该函数的最后一部分做一些清理工作，在上面发生错误时释放一些资源：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nl\"\u003eout_kfree_gso_skb:\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edestructor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eDEV_GSO_CB\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edestructor\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003econsume_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003eout_kfree_skb\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ekfree_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEXPORT_SYMBOL_GPL\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edev_hard_start_xmit\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在继续进入到设备驱动程序之前，先来看一些和前面分析过的代码有关的监控和调优的内容。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_8.6\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"86-monitoring-qdiscs\"\u003e8.6 Monitoring qdiscs\u003c/h2\u003e\n\n\u003ch3 id=\"using-the-tc-command-line-tool\"\u003eUsing the tc command line tool\u003c/h3\u003e\n\n\u003cp\u003e使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc\u003c/code\u003e 工具监控 qdisc 统计：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etc \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e qdisc show dev eth1\nqdisc mq 0: root\n Sent 31973946891907 bytes 2298757402 pkt \u003cspan class=\"o\"\u003e(\u003c/span\u003edropped 0, overlimits 0 requeues 1776429\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n backlog 0b 0p requeues 1776429\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e网络设备的 qdisc 统计对于监控系统发送数据包的运行状况至关重要。你可以通过运行命令\n行工具 tc 来查看状态。 上面的示例显示了如何检查 eth1 的统计信息。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebytes\u003c/code\u003e: The number of bytes that were pushed down to the driver for transmit.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epkt\u003c/code\u003e: The number of packets that were pushed down to the driver for transmit.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edropped\u003c/code\u003e: The number of packets that were dropped by the qdisc. This can\nhappen if transmit queue length is not large enough to fit the data being\nqueued to it.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eoverlimits\u003c/code\u003e: Depends on the queuing discipline, but can be either the number\nof packets that could not be enqueued due to a limit being hit, and/or the\nnumber of packets which triggered a throttling event when dequeued.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erequeues\u003c/code\u003e: Number of times dev_requeue_skb has been called to requeue an skb.\nNote that an skb which is requeued multiple times will bump this counter each\ntime it is requeued.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebacklog\u003c/code\u003e: Number of bytes currently on the qdisc’s queue. This number is\nusually bumped each time a packet is enqueued.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e一些 qdisc 还会导出额外的统计信息。每个 qdisc 都不同，对同一个 counter 可能会累积不同\n的次数。你需要查看相应 qdisc 的源代码，弄清楚每个 counter 是在哪里、什么条件下被更新\n的，如果这些数据对你非常重要，那你必须这么谨慎。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_8.7\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"87-tuning-qdiscs\"\u003e8.7 Tuning qdiscs\u003c/h2\u003e\n\n\u003ch3 id=\"调整__qdisc_run-处理权重\"\u003e调整\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__qdisc_run\u003c/code\u003e 处理权重\u003c/h3\u003e\n\n\u003cp\u003e你可以调整前面看到的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__qdisc_run\u003c/code\u003e 循环的权重（上面看到的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003equota\u003c/code\u003e 变量），这将导致\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__netif_schedule\u003c/code\u003e 更多的被调用执行。 结果将是当前 qdisc 将被更多的添加到当前 CPU 的\noutput_queue，最终会使发包所占的时间变多。\u003c/p\u003e\n\n\u003cp\u003e例如：调整所有 qdisc 的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__qdisc_run\u003c/code\u003e 权重：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003esysctl \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e net.core.dev_weight\u003cspan class=\"o\"\u003e=\u003c/span\u003e600\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"增加发送队列长度\"\u003e增加发送队列长度\u003c/h3\u003e\n\n\u003cp\u003e每个网络设备都有一个可以修改的 txqueuelen。 大多数 qdisc 在将数据插入到其发送队列之\n前，会检查 txqueuelen 是否足够（表示的是字节数？）。 你可以调整这个参数以增加 qdisc\n队列的字节数。\u003c/p\u003e\n\n\u003cp\u003eExample: increase the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etxqueuelen\u003c/code\u003e of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeth0\u003c/code\u003e to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10000\u003c/code\u003e.\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eifconfig eth0 txqueuelen 10000\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e默认值是 1000，你可以通过 ifconfig 命令的输出，查看每个网络设备的 txqueuelen。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_9\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"9-网络设备驱动\"\u003e9 网络设备驱动\u003c/h1\u003e\n\n\u003cp\u003e我们即将结束我们的网络栈之旅。\u003c/p\u003e\n\n\u003cp\u003e要理解数据包的发送过程，有一个重要的概念。大多数设备和驱动程序通过两个阶段处理数\n据包发送：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e合理地组织数据，然后触发设备通过 DMA 从 RAM 中读取数据并将其发送到网络中\u003c/li\u003e\n  \u003cli\u003e发送完成后，设备发出中断，驱动程序解除映射缓冲区、释放内存或清除其状态\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e第二阶段通常称为“发送完成”（transmit completion）阶段。我们将对以上两阶段进行研\n究，先从第一个开始：发送阶段。\u003c/p\u003e\n\n\u003cp\u003e之前已经看到，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev_hard_start_xmit\u003c/code\u003e 通过调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003endo_start_xmit\u003c/code\u003e（保持一个锁）来发送\n数据，所以接下来先看驱动程序是如何注册 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003endo_start_xmit\u003c/code\u003e 的，然后再深入理解该函数的\n工作原理。\u003c/p\u003e\n\n\u003cp\u003e与上篇\u003ca href=\"/blog/tuning-stack-rx-zh/\"\u003eLinux 网络栈监控和调优：接收数据\u003c/a\u003e\n一样，我们将拿 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb\u003c/code\u003e 驱动作为例子。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_9.1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"91-驱动回调函数注册\"\u003e9.1 驱动回调函数注册\u003c/h2\u003e\n\n\u003cp\u003e驱动程序实现了一系列方法来支持设备操作，例如：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e发送数据（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003endo_start_xmit\u003c/code\u003e）\u003c/li\u003e\n  \u003cli\u003e获取统计信息（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003endo_get_stats64\u003c/code\u003e）\u003c/li\u003e\n  \u003cli\u003e处理设备 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eioctl\u003c/code\u003es（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003endo_do_ioctl\u003c/code\u003e）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e这些方法通过一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct net_device_ops\u003c/code\u003e 实例导出。让我们来看看\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/drivers/net/ethernet/intel/igb/igb_main.c#L1905-L1928\"\u003eigb 驱动程序\n\u003c/a\u003e\n中这些操作：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet_device_ops\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_netdev_ops\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003endo_open\u003c/span\u003e               \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_open\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003endo_stop\u003c/span\u003e               \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_close\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003endo_start_xmit\u003c/span\u003e         \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_xmit_frame\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003endo_get_stats64\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_get_stats64\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* ... more fields ... */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_netdev_ops\u003c/code\u003e 变量在\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/drivers/net/ethernet/intel/igb/igb_main.c#L2090\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_probe\u003c/code\u003e\u003c/a\u003e\n函数中注册给设备：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eigb_probe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003epci_dev\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epdev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003epci_device_id\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"cm\"\u003e/* ... lots of other stuff ... */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003enetdev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev_ops\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eigb_netdev_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* ... more code ... */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e正如我们在上一节中看到的，更上层的代码将通过设备的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_ops\u003c/code\u003e 字段\n调用适当的回调函数。想了解更多关于 PCI 设备是如何启动的，以及何时/何处调用\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_probe\u003c/code\u003e，请查看我们之前文章中的\u003ca href=\"https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/#initialization\"\u003e驱动程序初始化\n\u003c/a\u003e\n部分。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_9.2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"92-通过-ndo_start_xmit-发送数据\"\u003e9.2 通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003endo_start_xmit\u003c/code\u003e 发送数据\u003c/h2\u003e\n\n\u003cp\u003e上层的网络栈通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct net_device_ops\u003c/code\u003e 实例里的回调函数，调用驱动程序来执行各种\n操作。正如我们之前看到的，qdisc 代码调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003endo_start_xmit\u003c/code\u003e 将数据传递给驱动程序进行\n发送。对于大多数硬件设备，都是在保持一个锁时调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003endo_start_xmit\u003c/code\u003e 函数。\u003c/p\u003e\n\n\u003cp\u003e在 igb 设备驱动程序中，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003endo_start_xmit\u003c/code\u003e 字段初始化为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_xmit_frame\u003c/code\u003e 函数，所以\n我们接下来从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_xmit_frame\u003c/code\u003e 开始，查看该驱动程序是如何发送数据的。跟随\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/drivers/net/ethernet/intel/igb/igb_main.c#L4664-L4741\"\u003edrivers/net/ethernet/intel/igb/igb_main.c\u003c/a\u003e\n，并记得以下代码在整个执行过程中都 hold 着一个锁：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003enetdev_tx_t\u003c/span\u003e \u003cspan class=\"nf\"\u003eigb_xmit_frame_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_ring\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_tx_buffer\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etso\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"n\"\u003etx_flags\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eu16\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTXD_USE_COUNT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb_headlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e__be16\u003c/span\u003e \u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evlan_get_protocol\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eu8\u003c/span\u003e \u003cspan class=\"n\"\u003ehdr_len\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* need: 1 descriptor per page * PAGE_SIZE/IGB_MAX_DATA_PER_TXD,\n         *       + 1 desc for skb_headlen/IGB_MAX_DATA_PER_TXD,\n         *       + 2 desc gap to keep tail from touching head,\n         *       + 1 desc for context descriptor,\n         * otherwise try next time\n         */\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNETDEV_FRAG_PAGE_MAX_SIZE\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIGB_MAX_DATA_PER_TXD\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eshort\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_shinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enr_frags\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003eTXD_USE_COUNT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb_shinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003efrags\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_shinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enr_frags\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e函数首先使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTXD_USER_COUNT\u003c/code\u003e 宏来计算发送 skb 所需的描述符数量，用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecount\u003c/code\u003e\n变量表示。然后根据分片情况，对 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecount\u003c/code\u003e 进行相应调整。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eigb_maybe_stop_tx\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"cm\"\u003e/* this is a hard error */\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eNETDEV_TX_BUSY\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后驱动程序调用内部函数 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_maybe_stop_tx\u003c/code\u003e，检查 TX Queue 以确保有足够可用的描\n述符。如果没有，则返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNETDEV_TX_BUSY\u003c/code\u003e。正如我们之前在 qdisc 代码中看到的那样，这\n将导致 qdisc 将 skb 重新入队以便稍后重试。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"cm\"\u003e/* record the location of the first descriptor for this packet */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efirst\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer_info\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_to_use\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebytecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egso_segs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后，获取 TX Queue 中下一个可用缓冲区信息，用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct igb_tx_buffer *first\u003c/code\u003e 表\n示，这个信息稍后将用于设置缓冲区描述符。数据包 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb\u003c/code\u003e 指针及其大小 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb-\u0026gt;len\u003c/code\u003e\n也存储到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efirst\u003c/code\u003e。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"n\"\u003eskb_tx_timestamp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来代码调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb_tx_timestamp\u003c/code\u003e，获取基于软件的发送时间戳。应用程序可以\n使用发送时间戳来确定数据包通过网络栈的发送路径所花费的时间。\u003c/p\u003e\n\n\u003cp\u003e某些设备还支持硬件时间戳，这允许系统将打时间戳任务 offload 到设备。程序员因此可以\n获得更准确的时间戳，因为它更接近于硬件实际发送的时间。\u003c/p\u003e\n\n\u003cp\u003e某些网络设备可以使用\u003ca href=\"https://events.linuxfoundation.org/sites/events/files/slides/lcjp14_ichikawa_0.pdf\"\u003ePrecision Time\nProtocol\u003c/a\u003e\n（PTP，精确时间协议）在硬件中为数据包加时间戳。驱动程序处理用户的硬件时间戳请求。\u003c/p\u003e\n\n\u003cp\u003e我们现在看到这个代码：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb_shinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_flags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eSKBTX_HW_TSTAMP\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_adapter\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eadapter\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_priv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eadapter\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eptp_tx_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eskb_shinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_flags\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eSKBTX_IN_PROGRESS\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003etx_flags\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eIGB_TX_FLAGS_TSTAMP\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                        \u003cspan class=\"n\"\u003eadapter\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eptp_tx_skb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eadapter\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eptp_tx_start\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejiffies\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eadapter\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehw\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emac\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ee1000_82576\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003eschedule_work\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eadapter\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eptp_tx_work\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e上面的 if 语句检查 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSKBTX_HW_TSTAMP\u003c/code\u003e 标志，该标志表示用户请求了硬件时间戳。接下来检\n查是否设置了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eptp_tx_skb\u003c/code\u003e。一次只能给一个数据包加时间戳，因此给正在打时间戳的 skb\n上设置了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSKBTX_IN_PROGRESS\u003c/code\u003e 标志。然后更新 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_flags\u003c/code\u003e，将 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIGB_TX_FLAGS_TSTAMP\u003c/code\u003e 标志\n置位。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_flags\u003c/code\u003e 变量稍后将被复制到缓冲区信息结构中。\u003c/p\u003e\n\n\u003cp\u003e当前的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejiffies\u003c/code\u003e 值赋给 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eptp_tx_start\u003c/code\u003e。驱动程序中的其他代码将使用这个值，\n以确保 TX 硬件打时间戳不会 hang 住。最后，如果这是一个 82576 以太网硬件网卡，将用\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eschedule_work\u003c/code\u003e 函数启动\u003ca href=\"http://www.makelinux.net/ldd3/chp-7-sect-6\"\u003e工作队列\u003c/a\u003e。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evlan_tx_tag_present\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etx_flags\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003eIGB_TX_FLAGS_VLAN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etx_flags\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evlan_tx_tag_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIGB_TX_FLAGS_VLAN_SHIFT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e上面的代码将检查 skb 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evlan_tci\u003c/code\u003e 字段是否设置了，如果是，将设置 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIGB_TX_FLAGS_VLAN\u003c/code\u003e\n标记，并保存 VLAN ID。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"cm\"\u003e/* record initial flags and protocol */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_flags\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etx_flags\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后将 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_flags\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eprotocol\u003c/code\u003e 值都保存到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efirst\u003c/code\u003e 变量里面。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"n\"\u003etso\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_tso\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ehdr_len\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etso\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout_drop\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"nf\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003etso\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eigb_tx_csum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来，驱动程序调用其内部函数 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_tso\u003c/code\u003e，判断 skb 是否需要分片。如果需要\n，缓冲区信息变量（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efirst\u003c/code\u003e）将更新标志位，以提示硬件需要做 TSO。\u003c/p\u003e\n\n\u003cp\u003e如果不需要 TSO，则 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_tso\u003c/code\u003e 返回 0；否则返回 1。 如果返回 0，则将调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_tx_csum\u003c/code\u003e 来\n处理校验和 offload 信息（是否需要 offload，是否支持此协议的 offload）。\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_tx_csum\u003c/code\u003e 函数将检查 skb 的属性，修改 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efirst\u003c/code\u003e 变量中的一些标志位，以表示需要校验\n和 offload。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"n\"\u003eigb_tx_map\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehdr_len\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_tx_map\u003c/code\u003e 函数准备给设备发送的数据。我们后面会仔细查看这个函数。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"cm\"\u003e/* Make sure there is space in the ring for the next send. */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eigb_maybe_stop_tx\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDESC_NEEDED\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eNETDEV_TX_OK\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e发送结束之后，驱动要检查确保有足够的描述符用于下一次发送。如果不够，TX Queue 将被\n关闭。最后返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNETDEV_TX_OK\u003c/code\u003e 给上层（qdisc 代码）。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nl\"\u003eout_drop:\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eigb_unmap_and_free_tx_resource\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eNETDEV_TX_OK\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后是一些错误处理代码，只有当 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_tso\u003c/code\u003e 遇到某种错误时才会触发此代码。\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_unmap_and_free_tx_resource\u003c/code\u003e 用于清理数据。在这种情况下也返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNETDEV_TX_OK\u003c/code\u003e\n。发送没有成功，但驱动程序释放了相关资源，没有什么需要做的了。请注意，在这种情\n况下，此驱动程序不会增加 drop 计数，但或许它应该增加。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_9.3\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"93-igb_tx_map\"\u003e9.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_tx_map\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_tx_map\u003c/code\u003e 函数处理将 skb 数据映射到 RAM 的 DMA 区域的细节。它还会更新设备 TX Queue 的\n尾部指针，从而触发设备“被唤醒”，从 RAM 获取数据并开始发送。\u003c/p\u003e\n\n\u003cp\u003e让我们简单地看一下这个\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/drivers/net/ethernet/intel/igb/igb_main.c#L4501-L4627\"\u003e函数\n\u003c/a\u003e\n的工作原理：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eigb_tx_map\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_ring\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                       \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_tx_buffer\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                       \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eu8\u003c/span\u003e \u003cspan class=\"n\"\u003ehdr_len\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* ... other variables ... */\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"n\"\u003etx_flags\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_flags\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"n\"\u003ecmd_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_tx_cmd_type\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etx_flags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eu16\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_to_use\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eIGB_TX_DESC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eigb_tx_olinfo_status\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etx_flags\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ehdr_len\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_headlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003edata_len\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edata_len\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003edma\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edma_map_single\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDMA_TO_DEVICE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e上面的代码所做的一些事情：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e声明变量并初始化\u003c/li\u003e\n  \u003cli\u003e使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIGB_TX_DESC\u003c/code\u003e 获取下一个可用描述符的指针\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_tx_olinfo_status\u003c/code\u003e 函数更新 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_flags\u003c/code\u003e，并将它们复制到描述符（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_desc\u003c/code\u003e）中\u003c/li\u003e\n  \u003cli\u003e计算 skb 头长度和数据长度\u003c/li\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edma_map_single\u003c/code\u003e 为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb-\u0026gt;data\u003c/code\u003e 构造内存映射，以允许设备通过 DMA 从 RAM 中读取数据\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e接下来是驱动程序中的一个\u003cstrong\u003e非常长的循环，用于为 skb 的每个分片生成有效映射\u003c/strong\u003e。具体如何\n做的细节并不是特别重要，但如下步骤值得一提：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e驱动程序遍历该数据包的所有分片\u003c/li\u003e\n  \u003cli\u003e当前描述符有其数据的 DMA 地址信息\u003c/li\u003e\n  \u003cli\u003e如果分片的大小大于单个 IGB 描述符可以发送的大小，则构造多个描述符指向可 DMA 区域的块，直到描述符指向整个分片\u003c/li\u003e\n  \u003cli\u003e更新描述符迭代器\u003c/li\u003e\n  \u003cli\u003e更新剩余长度\u003c/li\u003e\n  \u003cli\u003e当没有剩余分片或者已经消耗了整个数据长度时，循环终止\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e下面提供循环的代码以供以上描述参考。这里的代码进一步向读者说明，\u003cstrong\u003e如果可能的话，避\n免分片是一个好主意\u003c/strong\u003e。分片需要大量额外的代码来处理网络栈的每一层，包括驱动层。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrag\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eskb_shinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003efrags\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];;\u003c/span\u003e \u003cspan class=\"n\"\u003efrag\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edma_mapping_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edma\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003edma_error\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* record length, and DMA address */\u003c/span\u003e\n                \u003cspan class=\"n\"\u003edma_unmap_len_set\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003edma_unmap_addr_set\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edma\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edma\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebuffer_addr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecpu_to_le64\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edma\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIGB_MAX_DATA_PER_TXD\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecmd_type_len\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003ecpu_to_le32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecmd_type\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"n\"\u003eIGB_MAX_DATA_PER_TXD\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                        \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eIGB_TX_DESC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eolinfo_status\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                        \u003cspan class=\"n\"\u003edma\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003eIGB_MAX_DATA_PER_TXD\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"n\"\u003eIGB_MAX_DATA_PER_TXD\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                        \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebuffer_addr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecpu_to_le64\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edma\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003edata_len\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecmd_type_len\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecpu_to_le32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecmd_type\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eIGB_TX_DESC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eolinfo_status\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_frag_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrag\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003edata_len\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003edma\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_frag_dma_map\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efrag\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                       \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDMA_TO_DEVICE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer_info\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e所有需要的描述符都已建好，且 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eskb\u003c/code\u003e 的所有数据都映射到 DMA 地址后，驱动就会\n进入到它的最后一步，触发一次发送：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"cm\"\u003e/* write last descriptor with RS and EOP bits */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecmd_type\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eIGB_TXD_DCMD\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecmd_type_len\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecpu_to_le32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecmd_type\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e对最后一个描述符设置 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eRS\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEOP\u003c/code\u003e 位，以提示设备这是最后一个描述符了。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"n\"\u003enetdev_tx_sent_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etxring_txq\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebytecount\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* set the timestamp */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etime_stamp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejiffies\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_tx_sent_queue\u003c/code\u003e 函数，同时带着将发送的字节数作为参数。这个函数是 byte\nquery limit（字节查询限制）功能的一部分，我们将在稍后详细介绍。当前的 jiffies 存\n储到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efirst\u003c/code\u003e 的时间戳字段。\u003c/p\u003e\n\n\u003cp\u003e接下来，有点 tricky：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"cm\"\u003e/* Force memory writes to complete before letting h/w know there\n         * are new descriptors to fetch.  (Only applicable for weak-ordered\n         * memory model archs, such as IA-64).\n         *\n         * We also need this memory barrier to make certain all of the\n         * status bits have been updated before next_to_watch is written.\n         */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ewmb\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* set next_to_watch value indicating a packet is present */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_to_watch\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_to_use\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003ewritel\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etail\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* we need this if more than one processor can write to our tail\n         * at a time, it synchronizes IO on IA64/Altix systems\n         */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003emmiowb\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e上面的代码做了一些重要的事情：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewmb\u003c/code\u003e 函数强制完成内存写入。这通常称作\u003cstrong\u003e“写屏障”\u003c/strong\u003e（write barrier）\n，是通过 CPU 平台相关的特殊指令完成的。这对某些 CPU 架构非常重要，因为如果触发\n设备启动 DMA 时不能确保所有内存写入已经完成，那设备可能从 RAM 中读取不一致\n状态的数据。\u003ca href=\"http://preshing.com/20120930/weak-vs-strong-memory-models/\"\u003e这篇文章\u003c/a\u003e和\u003ca href=\"http://www.cs.utexas.edu/~pingali/CS378/2012fa/lectures/consistency.pdf\"\u003e这个课程\u003c/a\u003e深\n入探讨了内存顺序的细节\u003c/li\u003e\n  \u003cli\u003e设置 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enext_to_watch\u003c/code\u003e 字段，它将在 completion 阶段后期使用\u003c/li\u003e\n  \u003cli\u003e更新计数，并且 TX Queue 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enext_to_use\u003c/code\u003e 字段设置为下一个可用的描述符。使用\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewritel\u003c/code\u003e 函数更新 TX Queue 的尾部。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewritel\u003c/code\u003e 向\u003ca href=\"https://en.wikipedia.org/wiki/Memory-mapped_I/O\"\u003e内存映射 I/O\u003c/a\u003e地址写入一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elong\u003c/code\u003e 型数据\n，这里地址是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_ring-\u0026gt;tail\u003c/code\u003e（一个硬件地址），要写入的值是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ei\u003c/code\u003e。这次写操作会让\n设备知道其他数据已经准备好，可以通过 DMA 从 RAM 中读取并写入网络\u003c/li\u003e\n  \u003cli\u003e最后，调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emmiowb\u003c/code\u003e 函数。它执行特定于 CPU 体系结构的指令，对内存映射的\n写操作进行排序。它也是一个写屏障，用于内存映射的 I/O 写\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e想了解更多关于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewmb\u003c/code\u003e，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emmiowb\u003c/code\u003e 以及何时使用它们的信息，可以阅读 Linux 内核中一些包含\n内存屏障的优秀\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/Documentation/memory-barriers.txt\"\u003e文档\u003c/a\u003e\n。\u003c/p\u003e\n\n\u003cp\u003e最后，代码包含了一些错误处理。只有 DMA API（将 skb 数据地址映射到 DMA 地址）返回错误\n时，才会执行此代码。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nl\"\u003edma_error:\u003c/span\u003e\n        \u003cspan class=\"n\"\u003edev_err\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;TX DMA map failed\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* clear dma mappings for failed tx_buffer_info map */\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(;;)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer_info\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eigb_unmap_and_free_tx_resource\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_to_use\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在继续跟进“发送完成”（transmit completion）过程之前，让我们来看下之前跳过了的一\n个东西：dynamic queue limits（动态队列限制）。\u003c/p\u003e\n\n\u003ch3 id=\"dynamic-queue-limits-dql\"\u003eDynamic Queue Limits (DQL)\u003c/h3\u003e\n\n\u003cp\u003e正如在本文中看到的，\u003cstrong\u003e数据在逐步接近网络设备的过程中，花费了大量时间在\n不同阶段的 Queue 里面\u003c/strong\u003e。队列越大，在队列中所花费的时间就越多。\u003c/p\u003e\n\n\u003cp\u003e解决这个问题的一种方式是\u003cstrong\u003e背压\u003c/strong\u003e（back pressure）。动态队列限制（DQL）系统是一种\n机制，驱动程序可以使用该机制向网络系统（network system）施加反压，以避免设备\n无法发送时有过多的数据积压在队列。\u003c/p\u003e\n\n\u003cp\u003e要使用 DQL，驱动需要在其发送和完成例程（transmit and completion routines）中调用\n几次简单的 API。DQL 内部算法判断何时数据已足够多，达到此阈值后，DQL 将暂时禁用 TX\nQueue，从而对网络系统产生背压。当足够的数据已发送完后，DQL 再自动重新启用\n该队列。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.linuxplumbersconf.org/2012/wp-content/uploads/2012/08/bql_slide.pdf\"\u003e这里\u003c/a\u003e\n给出了 DQL 的一些性能数据及 DQL 内部算法的说明。\u003c/p\u003e\n\n\u003cp\u003e我们刚刚看到的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_tx_sent_queue\u003c/code\u003e 函数就是 DQL API 一部分。当数据排\n队到设备进行发送时，将调用此函数。发送完成后，驱动程序调用\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_tx_completed_queue\u003c/code\u003e。在内部，这两个函数都将调用 DQL 库（在\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/lib/dynamic_queue_limits.c\"\u003elib/dynamic_queue_limits.c\u003c/a\u003e\n和\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/include/linux/dynamic_queue_limits.h\"\u003einclude/linux/dynamic_queue_limits.h\u003c/a\u003e\n），以判断是否禁用、重新启用 DQL，或保持配置不动。\u003c/p\u003e\n\n\u003cp\u003eDQL 在 sysfs 中导出了一些统计信息和调优参数。调整 DQL 不是必需的；算法自己会随着时间\n变化调整其参数。尽管如此，为了完整性，我们稍后会看到如何监控和调整 DQL。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_9.4\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"94-发送完成transmit-completions\"\u003e9.4 发送完成（Transmit completions）\u003c/h2\u003e\n\n\u003cp\u003e设备发送数据之后会产生一个中断，表示发送已完成。然后，设备驱动程序可以调度一些长\n时间运行的工作，例如解除 DMA 映射、释放数据。这是如何工作的取决于不同设备。对于\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb\u003c/code\u003e 驱动程序（及其关联设备），发送完成和数据包接收所触发的 IRQ 是相同的。这意味着\n对于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb\u003c/code\u003e 驱动程序，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNET_RX\u003c/code\u003e 既用于处理发送完成，又用于处理数据包接收。\u003c/p\u003e\n\n\u003cp\u003e让我重申一遍，以强调这一点的重要性：\u003cstrong\u003e你的设备可能会发出与“接收到数据包时触发的中\n断”相同的中断来表示“数据包发送已完成”\u003c/strong\u003e。如果是这种情况，则 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNET_RX\u003c/code\u003e softirq 会被用于\n处理\u003cstrong\u003e数据包接收\u003c/strong\u003e和\u003cstrong\u003e发送完成\u003c/strong\u003e两种情况。\u003c/p\u003e\n\n\u003cp\u003e由于两个操作共享相同的 IRQ，因此只能注册一个 IRQ 处理函数来处理这两种情况。\n回忆以下收到网络数据时的流程：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e收到网络数据\u003c/li\u003e\n  \u003cli\u003e网络设备触发 IRQ\u003c/li\u003e\n  \u003cli\u003e驱动的 IRQ 处理程序执行，清除 IRQ 并运行 softIRQ（如果尚未运行）。这里触发的 softIRQ 是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNET_RX\u003c/code\u003e 类型\u003c/li\u003e\n  \u003cli\u003esoftIRQ 本质上作为单独的内核线程，执行 NAPI 轮询循环\u003c/li\u003e\n  \u003cli\u003e只要有足够的预算，NAPI 轮询循环就一直接收数据包\u003c/li\u003e\n  \u003cli\u003e每次处理数据包后，预算都会减少，直到没有更多数据包要处理、预算达到 0 或时间片已过期为止\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e在 igb（和 ixgbe）驱动中，上面的步骤 5 在处理接收数据之前会先处理发送完成（TX\ncompletion）。请记住，\u003cstrong\u003e根据驱动程序的实现，处理发送完成和接收数据的函数可能共享一\n份处理预算\u003c/strong\u003e。igb 和 ixgbe 驱动程序分别跟踪发送完成和接收数据包的预算，因此处理发送完\n成不一定会消耗完 RX 预算。\u003c/p\u003e\n\n\u003cp\u003e也就是说，整个 NAPI 轮询循环在 hard code 时间片内运行。这意味着如果要处理大量的 TX 完成\n，TX 完成可能会比处理接收数据时占用更多的时间片。对于在高负载环境中运行网络硬\n件的人来说，这可能是一个重要的考虑因素。\u003c/p\u003e\n\n\u003cp\u003e让我们看看 igb 驱动程序在实际是如何实现的。\u003c/p\u003e\n\n\u003ch3 id=\"941-transmit-completion-irq\"\u003e9.4.1 Transmit completion IRQ\u003c/h3\u003e\n\n\u003cp\u003e收包过程我们已经在\u003ca href=\"/blog/tuning-stack-rx-zh/\"\u003e数据接收部分的博客\u003c/a\u003e\n中介绍过，这里不再赘述，只给出相应链接。\u003c/p\u003e\n\n\u003cp\u003e那么，让我们从头开始：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e网络设备\u003ca href=\"https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/#bringing-a-network-device-up\"\u003e启用\u003c/a\u003e（bring up）\u003c/li\u003e\n  \u003cli\u003eIRQ 处理函数完成\u003ca href=\"https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/#register-an-interrupt-handler\"\u003e注册\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e用户程序将数据发送到 socket。数据穿过网络栈，最后被网络设备从内存中取出并发送\u003c/li\u003e\n  \u003cli\u003e设备完成数据发送并触发 IRQ 表示发送完成\u003c/li\u003e\n  \u003cli\u003e驱动程序的 IRQ 处理函数开始\u003ca href=\"https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/#interrupt-handler\"\u003e处理中断\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003eIRQ 处理程序调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enapi_schedule\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/#napi-and-napischedule\"\u003eNAPI 代码\u003c/a\u003e触发 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNET_RX\u003c/code\u003e 类型 softirq\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNET_RX\u003c/code\u003e 类型 sofitrq 的中断处理函数 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_rx_action\u003c/code\u003e\u003ca href=\"https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/#network-data-processing-begins\"\u003e开始执行\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_rx_action\u003c/code\u003e 函数调用驱动程序注册的\u003ca href=\"https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/#napi-poll-function-and-weight\"\u003eNAPI 轮询函数\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003eNAPI 轮询函数 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_poll\u003c/code\u003e\u003ca href=\"https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/#igbpoll\"\u003e开始运行\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003epoll 函数 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_poll\u003c/code\u003e 同时处理接收数据包和发送完成（transmit completion）逻辑。让我\n们深入研究这个函数的代码，看看发生了什么。\u003c/p\u003e\n\n\u003ch3 id=\"942-igb_poll\"\u003e9.4.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_poll\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/drivers/net/ethernet/intel/igb/igb_main.c#L5987-L6018\"\u003edrivers/net/ethernet/intel/igb/igb_main.c\u003c/a\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/**\n *  igb_poll - NAPI Rx polling callback\n *  @napi: napi polling structure\n *  @budget: count of how many packets we should handle\n **/\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eigb_poll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enapi_struct\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enapi\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ebudget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_q_vector\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econtainer_of\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enapi\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                                     \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_q_vector\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                                     \u003cspan class=\"n\"\u003enapi\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eclean_complete\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#ifdef CONFIG_IGB_DCA\n\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eadapter\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eIGB_FLAG_DCA_ENABLED\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eigb_update_dca\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ering\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eclean_complete\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_clean_tx_irq\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003erx\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ering\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eclean_complete\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;=\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_clean_rx_irq\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebudget\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* If all work not completed, return budget and keep polling */\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eclean_complete\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ebudget\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* If not enough Rx work done, exit the polling mode */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003enapi_complete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enapi\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eigb_ring_irq_enable\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e函数按顺序执行以下操作：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e如果在内核中启用了直接缓存访问（\u003ca href=\"https://lwn.net/Articles/247493/\"\u003eDCA\u003c/a\u003e）功能\n，则更新 CPU 缓存（预热，warm up），后续对 RX Ring Buffer 的访问将命中 CPU 缓存。可以在接\n收数据博客的 Extras 部分中阅读\u003ca href=\"https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/#direct-cache-access-dca\"\u003e有关 DCA 的更多信息\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_clean_tx_irq\u003c/code\u003e 执行发送完成操作\u003c/li\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_clean_rx_irq\u003c/code\u003e 处理收到的数据包\u003c/li\u003e\n  \u003cli\u003e最后，检查 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eclean_complete\u003c/code\u003e 变量，判断是否还有更多工作可以完成。如果是，则返\n回预算。如果是这种情况，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_rx_action\u003c/code\u003e 会将此 NAPI 实例移动到轮询列表的末尾，\n以便稍后再次处理\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e要了解 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_clean_rx_irq\u003c/code\u003e 如何工作的，请阅读上一篇博客文章的\u003ca href=\"https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/#igbcleanrxirq\"\u003e这一部分\n\u003c/a\u003e\n。\u003c/p\u003e\n\n\u003cp\u003e本文主要关注发送方面，因此我们将继续研究上面的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_clean_tx_irq\u003c/code\u003e 如何工作。\u003c/p\u003e\n\n\u003ch3 id=\"943-igb_clean_tx_irq\"\u003e9.4.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_clean_tx_irq\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e来看一下这个函数的实现，\n\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/drivers/net/ethernet/intel/igb/igb_main.c#L6020-L6189\"\u003edrivers/net/ethernet/intel/igb/igb_main.c\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e这个函数有点长，分成几部分来看：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003eigb_clean_tx_irq\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_q_vector\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_adapter\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eadapter\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eadapter\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_ring\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ering\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_tx_buffer\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eunion\u003c/span\u003e \u003cspan class=\"n\"\u003ee1000_adv_tx_desc\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etotal_bytes\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etotal_packets\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ebudget\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ework_limit\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_to_clean\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etest_bit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__IGB_DOWN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eadapter\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e该函数首先初始化一些变量，其中比较重要的是预算（变量 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebudget\u003c/code\u003e）\n，初始化为此队列的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx.work_limit\u003c/code\u003e。在 igb 驱动程序中，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx.work_limit\u003c/code\u003e 初始化为 hard\ncode 值 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIGB_DEFAULT_TX_WORK\u003c/code\u003e（128）。\u003c/p\u003e\n\n\u003cp\u003e值得注意的是，虽然我们现在看到的 TX 完成代码与 RX 处理在同一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNET_RX\u003c/code\u003e softirq 中运行\n，但 igb 驱动的 TX 和 RX 函数\u003cstrong\u003e不共享处理预算\u003c/strong\u003e。由于整个轮询函数在同一时间片内运行，因此\n每次 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_poll\u003c/code\u003e 运行不会出现 RX 或 TX 饥饿，只要调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_poll\u003c/code\u003e，两者都将被处理。\u003c/p\u003e\n\n\u003cp\u003e继续前进，代码检查网络设备是否已关闭。如果是，则返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrue\u003c/code\u003e 并退出 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_clean_tx_irq\u003c/code\u003e。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer_info\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eIGB_TX_DESC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_buffer\u003c/code\u003e 变量初始化为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_ring-\u0026gt;next_to_clean\u003c/code\u003e（其本身被初始化为 0）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_desc\u003c/code\u003e 变量初始化为相关描述符的指针\u003c/li\u003e\n  \u003cli\u003e计数器 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ei\u003c/code\u003e 减去 TX Queue 的大小。可以调整此值（我们将在调优部分中看到），但初始化为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIGB_DEFAULT_TXD\u003c/code\u003e（256）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e接下来，循环开始。它包含一些有用的注释，用于解释每个步骤中发生的情况：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eunion\u003c/span\u003e \u003cspan class=\"n\"\u003ee1000_adv_tx_desc\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eeop_desc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_to_watch\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* if next_to_watch is not set then there is no work pending */\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eeop_desc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* prevent any other reads prior to eop_desc */\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eread_barrier_depends\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* if DD is not set pending work has not been completed */\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eeop_desc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ewb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estatus\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ecpu_to_le32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eE1000_TXD_STAT_DD\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* clear next_to_watch to prevent false hangs */\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_to_watch\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* update the statistics for this packet */\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etotal_bytes\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebytecount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etotal_packets\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egso_segs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* free the skb */\u003c/span\u003e\n                \u003cspan class=\"n\"\u003edev_kfree_skb_any\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* unmap skb header data */\u003c/span\u003e\n                \u003cspan class=\"n\"\u003edma_unmap_single\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                 \u003cspan class=\"n\"\u003edma_unmap_addr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edma\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                                 \u003cspan class=\"n\"\u003edma_unmap_len\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                                 \u003cspan class=\"n\"\u003eDMA_TO_DEVICE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* clear tx_buffer data */\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003edma_unmap_len_set\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003col\u003e\n  \u003cli\u003e首先将 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeop_desc\u003c/code\u003e（eop = end of packet）设置为发送缓冲区 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_buffer\u003c/code\u003e 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enext_to_watch\u003c/code\u003e，后者是在我们之前看到的发送代码中设置的\u003c/li\u003e\n  \u003cli\u003e如果 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeop_desc\u003c/code\u003e 为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNULL\u003c/code\u003e，则表示没有待处理的工作\u003c/li\u003e\n  \u003cli\u003e接下来调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eread_barrier_depends\u003c/code\u003e 函数，该函数执行此 CPU 体系结构相关的指令，通过屏障防止其他任何读操作\u003c/li\u003e\n  \u003cli\u003e接下来，检查描述符 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeop_desc\u003c/code\u003e 的状态位。如果 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eE1000_TXD_STAT_DD\u003c/code\u003e 未设置，则表示发送尚未完成，因此跳出循环\u003c/li\u003e\n  \u003cli\u003e清除 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_buffer-\u0026gt;next_to_watch\u003c/code\u003e。驱动中的 watchdog 定时器将监视此字段以判断发送是否 hang 住。清除此字段将不会触发 watchdog\u003c/li\u003e\n  \u003cli\u003e统计发送的总字节数和包数，这些计数将被复制到驱动的相应计数中\u003c/li\u003e\n  \u003cli\u003e释放 skb\u003c/li\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edma_unmap_single\u003c/code\u003e 取消 skb 数据区映射\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_buffer-\u0026gt;skb\u003c/code\u003e 设置为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNULL\u003c/code\u003e，解除 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_buffer\u003c/code\u003e 映射\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e接下来，在上面的循环内部开始了另一个循环：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                \u003cspan class=\"cm\"\u003e/* clear last DMA location and unmap remaining buffers */\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eeop_desc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer_info\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eIGB_TX_DESC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                        \u003cspan class=\"cm\"\u003e/* unmap any remaining paged data */\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edma_unmap_len\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003edma_unmap_page\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                               \u003cspan class=\"n\"\u003edma_unmap_addr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edma\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                                               \u003cspan class=\"n\"\u003edma_unmap_len\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                                               \u003cspan class=\"n\"\u003eDMA_TO_DEVICE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003edma_unmap_len_set\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个内层循环会遍历每个发送描述符，直到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_desc\u003c/code\u003e 等于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeop_desc\u003c/code\u003e，并会解除被其他描\n述符引用的被 DMA 映射的数据。\u003c/p\u003e\n\n\u003cp\u003e外层循环继续：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                \u003cspan class=\"cm\"\u003e/* move us one more past the eop_desc for start of next pkt */\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer_info\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eIGB_TX_DESC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* issue prefetch for next Tx descriptor */\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eprefetch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_desc\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* update budget accounting */\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ebudget\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"err\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebudget\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e外层循环递增迭代器，更新 budget，然后检查是否要进入下一次循环。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"n\"\u003enetdev_tx_completed_queue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etxring_txq\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                                  \u003cspan class=\"n\"\u003etotal_packets\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etotal_bytes\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_to_clean\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eu64_stats_update_begin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_syncp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_stats\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebytes\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003etotal_bytes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_stats\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epackets\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003etotal_packets\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eu64_stats_update_end\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_syncp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etotal_bytes\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003etotal_bytes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etotal_packets\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003etotal_packets\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这段代码：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_tx_completed_queue\u003c/code\u003e，它是上面解释的 DQL API 的一部分。如果处理了足够的发送完成，这可能会重新启用 TX Queue\u003c/li\u003e\n  \u003cli\u003e更新各处的统计信息，以便用户可以访问它们，我们稍后会看到\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e代码继续，首先检查是否设置了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIGB_RING_FLAG_TX_DETECT_HANG\u003c/code\u003e 标志。每次运行定时器\n回调函数时，watchdog 定时器都会设置此标志，以强制定期检查 TX Queue。如果该标志被设\n置了，则代码将检查 TX Queue 是否 hang 住：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etest_bit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIGB_RING_FLAG_TX_DETECT_HANG\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ee1000_hw\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ehw\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eadapter\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehw\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n                \u003cspan class=\"cm\"\u003e/* Detect a transmit hang in hardware, this serializes the\n                 * check with the clearing of time_stamp and movement of i\n                 */\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eclear_bit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIGB_RING_FLAG_TX_DETECT_HANG\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_to_watch\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003etime_after\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejiffies\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etime_stamp\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n                               \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eadapter\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_timeout_factor\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eHZ\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                    \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erd32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eE1000_STATUS\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eE1000_STATUS_TXOFF\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\n                        \u003cspan class=\"cm\"\u003e/* detected Tx unit hang */\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003edev_err\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                \u003cspan class=\"s\"\u003e\u0026#34;Detected Tx Unit Hang\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n                                \u003cspan class=\"s\"\u003e\u0026#34;  Tx Queue             \u0026lt;%d\u0026gt;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n                                \u003cspan class=\"s\"\u003e\u0026#34;  TDH                  \u0026lt;%x\u0026gt;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n                                \u003cspan class=\"s\"\u003e\u0026#34;  TDT                  \u0026lt;%x\u0026gt;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n                                \u003cspan class=\"s\"\u003e\u0026#34;  next_to_use          \u0026lt;%x\u0026gt;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n                                \u003cspan class=\"s\"\u003e\u0026#34;  next_to_clean        \u0026lt;%x\u0026gt;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n                                \u003cspan class=\"s\"\u003e\u0026#34;buffer_info[next_to_clean]\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n                                \u003cspan class=\"s\"\u003e\u0026#34;  time_stamp           \u0026lt;%lx\u0026gt;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n                                \u003cspan class=\"s\"\u003e\u0026#34;  next_to_watch        \u0026lt;%p\u0026gt;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n                                \u003cspan class=\"s\"\u003e\u0026#34;  jiffies              \u0026lt;%lx\u0026gt;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n                                \u003cspan class=\"s\"\u003e\u0026#34;  desc.status          \u0026lt;%x\u0026gt;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003equeue_index\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003erd32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eE1000_TDH\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ereg_idx\u003c/span\u003e\u003cspan class=\"p\"\u003e)),\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003ereadl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etail\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_to_use\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_to_clean\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etime_stamp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_to_watch\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003ejiffies\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003etx_buffer\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_to_watch\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ewb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estatus\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003enetif_stop_subqueue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                            \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003equeue_index\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                        \u003cspan class=\"cm\"\u003e/* we are about to reset, no point in enabling stuff */\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e上面的 if 语句检查：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_buffer-\u0026gt;next_to_watch\u003c/code\u003e 已设置，并且\u003c/li\u003e\n  \u003cli\u003e当前 jiffies 大于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_buffer\u003c/code\u003e 发送路径上记录的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etime_stamp\u003c/code\u003e 加上超时因子，并且\u003c/li\u003e\n  \u003cli\u003e设备的发送状态寄存器未设置 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eE1000_STATUS_TXOFF\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e如果这三个条件都为真，则会打印一个错误，表明已检测到挂起。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetif_stop_subqueue\u003c/code\u003e\n用于关闭队列，最后函数返回 true。\u003c/p\u003e\n\n\u003cp\u003e让我们继续阅读代码，看看如果没有发送挂起检查会发生什么，或者如果有，但没有检测到\n挂起：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#define TX_WAKE_THRESHOLD (DESC_NEEDED * 2)\n\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etotal_packets\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003enetif_carrier_ok\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eigb_desc_unused\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eTX_WAKE_THRESHOLD\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"cm\"\u003e/* Make sure that anybody stopping the queue after this\n                 * sees the new next_to_clean.\n                 */\u003c/span\u003e\n                \u003cspan class=\"n\"\u003esmp_mb\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__netif_subqueue_stopped\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                             \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003equeue_index\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                    \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etest_bit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__IGB_DOWN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eadapter\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003enetif_wake_subqueue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                            \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003equeue_index\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                        \u003cspan class=\"n\"\u003eu64_stats_update_begin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_syncp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_stats\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erestart_queue\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eu64_stats_update_end\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_ring\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx_syncp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e!!\u003c/span\u003e\u003cspan class=\"n\"\u003ebudget\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在上面的代码中，如果先前已禁用，则驱动程序将重新启动 TX Queue。\n它首先检查：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e是否有数据包处理完成（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etotal_packets\u003c/code\u003e 非零）\u003c/li\u003e\n  \u003cli\u003e调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetif_carrier_ok\u003c/code\u003e，确保设备没有被关闭\u003c/li\u003e\n  \u003cli\u003eTX Queue 中未使用的描述符数量大于等于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTX_WAKE_THRESHOLD\u003c/code\u003e（我的 x86_64 系统上此阈值为 42）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e如果满足以上所有条件，则执行\u003cstrong\u003e写屏障\u003c/strong\u003e（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esmp_mb\u003c/code\u003e）。\u003c/p\u003e\n\n\u003cp\u003e接下来检查另一组条件。如果：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e队列停止了\u003c/li\u003e\n  \u003cli\u003e设备未关闭\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e则调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetif_wake_subqueue\u003c/code\u003e 唤醒 TX Queue，并向更高层发信号通知它们可能需要将数据\n再次入队。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erestart_queue\u003c/code\u003e 统计计数器递增。我们接下来会看到如何阅读这个值。\u003c/p\u003e\n\n\u003cp\u003e最后，返回一个布尔值。如果有任何剩余的未使用预算，则返回 true，否则为 false。在\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_poll\u003c/code\u003e 中检查此值以确定返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_rx_action\u003c/code\u003e 的内容。\u003c/p\u003e\n\n\u003ch3 id=\"944-igb_poll-返回值\"\u003e9.4.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_poll\u003c/code\u003e 返回值\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_poll\u003c/code\u003e 函数通过以下逻辑决定返回什么值给 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_rx_action\u003c/code\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etx\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ering\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eclean_complete\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_clean_tx_irq\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003erx\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ering\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eclean_complete\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;=\u003c/span\u003e \u003cspan class=\"n\"\u003eigb_clean_rx_irq\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebudget\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* If all work not completed, return budget and keep polling */\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eclean_complete\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ebudget\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e换句话说，如果：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_clean_tx_irq\u003c/code\u003e 清除了所有\u003cstrong\u003e待发送\u003c/strong\u003e数据包，且未用完其 TX 预算（transmit\ncompletion budget），并且\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eigb_clean_rx_irq\u003c/code\u003e 清除了所有\u003cstrong\u003e接收到的\u003c/strong\u003e数据包，且未用完其 RX 预算（packet\nprocessing budget）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e那么，最后将返回整个预算值（包括 igb 在内的大多数驱动程序 hard code 为 64）；否则，如果\nRX 或 TX 处理中的任何用完了其 budget（因为还有更多工作要做），则调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enapi_complete\u003c/code\u003e\n禁用 NAPI 并返回 0：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e        \u003cspan class=\"cm\"\u003e/* If not enough Rx work done, exit the polling mode */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003enapi_complete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enapi\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eigb_ring_irq_enable\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq_vector\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca name=\"chap_9.5\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"95-监控网络设备\"\u003e9.5 监控网络设备\u003c/h2\u003e\n\n\u003cp\u003e监控网络设备有多种方式，每种方式提供的监控粒度和复杂度各不相同。我们先从最粗\n大粒度开始，然后逐步到最细的粒度。\u003c/p\u003e\n\n\u003ch3 id=\"951-使用-ethtool--s-命令\"\u003e9.5.1 使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eethtool -S\u003c/code\u003e 命令\u003c/h3\u003e\n\n\u003cp\u003eUbuntu 安装 ethtool：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt-get \u003cspan class=\"nb\"\u003einstall \u003c/span\u003eethtool.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eethtool -S \u0026lt;NIC\u0026gt;\u003c/code\u003e可以打印设备的收发统计信息（例如，发送错误）：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eethtool \u003cspan class=\"nt\"\u003e-S\u003c/span\u003e eth0\nNIC statistics:\n     rx_packets: 597028087\n     tx_packets: 5924278060\n     rx_bytes: 112643393747\n     tx_bytes: 990080156714\n     rx_broadcast: 96\n     tx_broadcast: 116\n     rx_multicast: 20294528\n     ....\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e监控这个数据不是太容易，因为并无统一的标准规定\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-S\u003c/code\u003e 应该打印出哪些字段。不同的设备\n，甚至是相同设备的不同版本，都可能打印出名字不同但意思相同的字段。\u003c/p\u003e\n\n\u003cp\u003e你首先需要检查里面的“drop”、“buffer”、“miss”、“errors”等字段，然后查看驱动程序的\n代码，以确定哪些计数是在软件里更新的（例如，内存不足时更新），哪些是直接来自硬件\n寄存器更新的。如果是硬件寄存器值，那你需要查看网卡的 data sheet，确定这个计数真正\n表示什么，因为 ethtool 给出的很多字段都是有误导性的（misleading）。\u003c/p\u003e\n\n\u003ch3 id=\"952-使用-sysfs\"\u003e9.5.2 使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esysfs\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003esysfs 也提供了很多统计值，但比网卡层的统计更上层一些。\u003c/p\u003e\n\n\u003cp\u003e例如，你可以通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecat \u0026lt;file\u0026gt;\u003c/code\u003e的方式查看 eth0 接收的丢包数。\u003c/p\u003e\n\n\u003cp\u003e示例：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /sys/class/net/eth0/statistics/tx_aborted_errors\n2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e每个 counter 对应一个文件，包括 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_aborted_errors\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_carrier_errors\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_compressed\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etx_dropped\u003c/code\u003e,等等。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e不幸的是，每个值代表什么是由驱动决定的，因此，什么时候更新它们，在什么条件下更新\n，都是驱动决定的。\u003c/strong\u003e例如，你可能已经注意到，对于同一种错误，有的驱动将其视为 drop\n，而有的驱动将其视为 miss。\u003c/p\u003e\n\n\u003cp\u003e如果这些值对你非常重要，那你必须阅读驱动代码和网卡 data sheet，以确定每个值真正代\n表什么。\u003c/p\u003e\n\n\u003ch3 id=\"953-使用procnetdev\"\u003e9.5.3 使用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/net/dev\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/net/dev\u003c/code\u003e 提供了更高一层的统计，它给系统中的每个网络设备一个统计摘要。\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /proc/net/dev\nInter-|   Receive                                                |  Transmit\n face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed\n  eth0: 110346752214 597737500    0    2    0     0          0  20963860 990024805984 6066582604    0    0    0     0       0          0\n    lo: 428349463836 1579868535    0    0    0     0          0         0 428349463836 1579868535    0    0    0     0       0          0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里打印出来的字段是上面 sysfs 里字段的一个子集，可以作为通用 general reference。\u003c/p\u003e\n\n\u003cp\u003e上面的建议在这里同样适用，即：\n如果这些值对你非常重要，那你必须阅读驱动代码和网卡 data sheet，以确定每个值真正代\n表什么。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_9.6\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"96-监控-dql\"\u003e9.6 监控 DQL\u003c/h2\u003e\n\n\u003cp\u003e可以通过\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/class/net/\u0026lt;NIC\u0026gt;/queues/tx-\u0026lt;QUEUE_ID\u0026gt;/byte_queue_limits/\u003c/code\u003e\n监控网络设备的动态队列限制（DQL）信息。\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /sys/class/net/eth0/queues/tx-0/byte_queue_limits/inflight\n350\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e文件包括：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehold_time\u003c/code\u003e: Initialized to HZ (a single hertz). If the queue has been full for hold_time, then the maximum size is decreased.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einflight\u003c/code\u003e: This value is equal to (number of packets queued - number of packets completed). It is the current number of packets being transmit for which a completion has not been processed.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elimit_max\u003c/code\u003e: A hardcoded value, set to DQL_MAX_LIMIT (1879048192 on my x86_64 system).\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elimit_min\u003c/code\u003e: A hardcoded value, set to 0.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elimit\u003c/code\u003e: A value between limit_min and limit_max which represents the current maximum number of objects which can be queued.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e在修改这些值之前，强烈建议先阅读\u003ca href=\"https://www.linuxplumbersconf.org/2012/wp-content/uploads/2012/08/bql_slide.pdf\"\u003e这些资料\n\u003c/a\u003e，以更深入地了解其算法。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_9.7\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"97-调优网络设备\"\u003e9.7 调优网络设备\u003c/h2\u003e\n\n\u003ch3 id=\"971-查询-tx-queue-数量\"\u003e9.7.1 查询 TX Queue 数量\u003c/h3\u003e\n\n\u003cp\u003e如果网络及其驱动支持多 TX Queue，那可以用 ethtool 调整 TX queue（也叫 TX channel）的数量。\u003c/p\u003e\n\n\u003cp\u003e查看网卡 TX Queue 数量：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eethtool \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e eth0\nChannel parameters \u003cspan class=\"k\"\u003efor \u003c/span\u003eeth0:\nPre-set maximums:\nRX:   0\nTX:   0\nOther:    0\nCombined: 8\nCurrent hardware settings:\nRX:   0\nTX:   0\nOther:    0\nCombined: 4\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里显示了（由驱动和硬件）预设的最大值，以及当前值。\u003c/p\u003e\n\n\u003cp\u003e注意：不是所有设备驱动都支持这个选项。\u003c/p\u003e\n\n\u003cp\u003e如果你的网卡不支持，会遇到以下错误：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eethtool \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e eth0\nChannel parameters \u003cspan class=\"k\"\u003efor \u003c/span\u003eeth0:\nCannot get device channel parameters\n: Operation not supported\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这表示设备驱动没有实现 ethtool 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eget_channels\u003c/code\u003e 方法，这可能是由于网卡不支持调整\nqueue 数量，不支持多 TX Queue，或者驱动版本太旧导致不支持此操作。\u003c/p\u003e\n\n\u003ch3 id=\"972-调整-tx-queue-数量\"\u003e9.7.2 调整 TX queue 数量\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eethtool -L\u003c/code\u003e 可以修改 TX Queue 数量。\u003c/p\u003e\n\n\u003cp\u003e注意：一些设备及其驱动只支持 combined queue，这种情况下一个 TX queue 和和一个 RX queue 绑定到一起的。前面的例子中我们已经看到了。\u003c/p\u003e\n\n\u003cp\u003e例子：设置收发队列数量为 8：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eethtool \u003cspan class=\"nt\"\u003e-L\u003c/span\u003e eth0 combined 8\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果你的设备和驱动支持分别设置 TX queue 和 RX queue 的数量，那你可以分别设置。\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eethtool \u003cspan class=\"nt\"\u003e-L\u003c/span\u003e eth0 tx 8\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e注意：对于大部分驱动，调整以上设置会导致网卡先 down 再 up，经过这个网卡的连接会断掉\n。如果只是一次性改动，那这可能不是太大问题。\u003c/p\u003e\n\n\u003ch3 id=\"973-调整-tx-queue-大小\"\u003e9.7.3 调整 TX queue 大小\u003c/h3\u003e\n\n\u003cp\u003e一些设备及其驱动支持修改 TX queue 大小，这是如何实现的取决于具体的硬件，但是，\nethtool 提供了一个通用的接口可以调整这个大小。由于 DQL 在更高层面处理数据排队的问题\n，因此调整队列大小可能不会产生明显的影响。然而，你可能还是想要将 TX queue 调到最大\n，然后再把剩下的事情交给 DQL：\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eethtool -g\u003c/code\u003e 查看队列当前的大小：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eethtool \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e eth0\nRing parameters \u003cspan class=\"k\"\u003efor \u003c/span\u003eeth0:\nPre-set maximums:\nRX:   4096\nRX Mini:  0\nRX Jumbo: 0\nTX:   4096\nCurrent hardware settings:\nRX:   512\nRX Mini:  0\nRX Jumbo: 0\nTX:   512\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e以上显示硬件支持最大 4096 个接收和发送描述符，但当前只使用了 512 个。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-G\u003c/code\u003e 修改 queue 大小：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eethtool \u003cspan class=\"nt\"\u003e-G\u003c/span\u003e eth0 tx 4096\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e注意：对于大部分驱动，调整以上设置会导致网卡先 down 再 up，经过这个网卡的连接会断掉\n。如果只是一次性改动，那这可能不是太大问题。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_10\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"10-网络栈之旅结束\"\u003e10 网络栈之旅：结束\u003c/h1\u003e\n\n\u003cp\u003e至此，你已经知道关于 Linux 如何发送数据包的全部内容了：从用户程序直到驱动，以及反\n方向。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_11\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"11-extras\"\u003e11 Extras\u003c/h1\u003e\n\n\u003cp\u003e\u003ca name=\"chap_11.1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"111-减少-arp-流量-msg_confirm\"\u003e11.1 减少 ARP 流量 (MSG_CONFIRM)\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esend\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendto\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esendmsg\u003c/code\u003e 系统调用都支持一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eflags\u003c/code\u003e 参数。如果你调用的时候传递了\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eMSG_CONFIRM\u003c/code\u003e flag，它会使内核里的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_neigh_output\u003c/code\u003e 函数更新邻居（ARP）缓存的时\n间戳。所导致的结果是，相应的邻居缓存不会被垃圾回收。这会减少发出的 ARP 请求的数量\n。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_11.2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"112-udp-corking软木塞\"\u003e11.2 UDP Corking（软木塞）\u003c/h2\u003e\n\n\u003cp\u003e在查看 UDP 协议栈的时候我们深入地研究过了 UDP corking 这个选项。如果你想在应用中使用\n这个选项，可以在调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esetsockopt\u003c/code\u003e 设置 IPPROTO_UDP 类型 socket 的时候，将 UDP_CORK 标记\n位置 1。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_11.3\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"113-打时间戳\"\u003e11.3 打时间戳\u003c/h2\u003e\n\n\u003cp\u003e本文已经看到，网络栈可以收集发送包的时间戳信息。我们在文章中已经看到了软\n件部分哪里可以设置时间戳；而一些网卡甚至还支持硬件时间戳。\u003c/p\u003e\n\n\u003cp\u003e如果你想看内核网络栈给收包增加了多少延迟，那这个特性非常有用。\u003c/p\u003e\n\n\u003cp\u003e内核\u003ca href=\"https://github.com/torvalds/linux/blob/v3.13/Documentation/networking/timestamping.txt\"\u003e关于时间戳的文档\u003c/a\u003e\n非常优秀，甚至还包括一个\u003ca href=\"https://github.com/torvalds/linux/tree/v3.13/Documentation/networking/timestamping\"\u003e示例程序和相应的 Makefile\u003c/a\u003e，有兴趣的话可以上手试试。\u003c/p\u003e\n\n\u003cp\u003e使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eethtool -T\u003c/code\u003e 可以查看网卡和驱动支持哪种打时间戳方式：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eethtool \u003cspan class=\"nt\"\u003e-T\u003c/span\u003e eth0\nTime stamping parameters \u003cspan class=\"k\"\u003efor \u003c/span\u003eeth0:\nCapabilities:\n  software-transmit     \u003cspan class=\"o\"\u003e(\u003c/span\u003eSOF_TIMESTAMPING_TX_SOFTWARE\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  software-receive      \u003cspan class=\"o\"\u003e(\u003c/span\u003eSOF_TIMESTAMPING_RX_SOFTWARE\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  software-system-clock \u003cspan class=\"o\"\u003e(\u003c/span\u003eSOF_TIMESTAMPING_SOFTWARE\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nPTP Hardware Clock: none\nHardware Transmit Timestamp Modes: none\nHardware Receive Filter Modes: none\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e从上面这个信息看，该网卡不支持硬件打时间戳。但这个系统上的软件打时间戳，仍然可以\n帮助我判断内核在接收路径上到底带来多少延迟。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_12\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"12-结论\"\u003e12 结论\u003c/h1\u003e\n\n\u003cp\u003eLinux 网络栈很复杂。\u003c/p\u003e\n\n\u003cp\u003e我们已经看到，即使是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNET_RX\u003c/code\u003e 这样看起来极其简单的（名字），也不是按照我们（字面上\n）理解的方式在运行，虽然名字带 RX，但其实发送数据也在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNET_RX\u003c/code\u003e 软中断处理函数中被处\n理。\u003c/p\u003e\n\n\u003cp\u003e这揭示了我认为的问题的核心：\u003cstrong\u003e不深入阅读和理解网络栈，就不可能优化和监控它\u003c/strong\u003e。\n\u003cstrong\u003e你监控不了你没有深入理解的代码\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_13\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"13-额外帮助\"\u003e13 额外帮助\u003c/h1\u003e\n\n\u003cp\u003e需要一些额外的关于网络栈的指导(navigating the network stack)？对本文有疑问，或有\n相关内容本文没有提到？以上问题，都可以发邮件给\u003ca href=\"support@packagecloud.io\"\u003e我们\u003c/a\u003e，\n以便我们知道如何提供帮助。\u003c/p\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/dns-practice-zh/\"\u003e\u003cspan\u003e« DNS 问题分析示例（2019）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/cilium-cheat-sheet/\"\u003e\u003cspan\u003eCilium Cheat Sheet »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2018-12-17T00:00:00Z",
  "Author": "Arthur Chiao"
}