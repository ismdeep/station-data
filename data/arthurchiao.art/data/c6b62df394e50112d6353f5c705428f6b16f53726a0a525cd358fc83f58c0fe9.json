{
  "Source": "arthurchiao.art",
  "Title": "Cilium Code Walk Through: Node \u0026 Endpoint Health Probe",
  "Link": "https://arthurchiao.art/blog/cilium-code-health-probe/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eCilium Code Walk Through: Node \u0026amp; Endpoint Health Probe\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2020-12-31 | Last Update 2020-12-31\u003c/p\u003e\n  \n  \u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#tl-dr\" id=\"markdown-toc-tl-dr\"\u003eTL; DR\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-design\" id=\"markdown-toc-1-design\"\u003e1 Design\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-full-mesh-probe\" id=\"markdown-toc-11-full-mesh-probe\"\u003e1.1 Full-mesh probe\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-types-of-probes\" id=\"markdown-toc-12-types-of-probes\"\u003e1.2 Types of probes\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-probe-results\" id=\"markdown-toc-13-probe-results\"\u003e1.3 Probe results\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#14-a-special-endpoint-cilium-health-ep\" id=\"markdown-toc-14-a-special-endpoint-cilium-health-ep\"\u003e1.4 A special endpoint: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#15-summary\" id=\"markdown-toc-15-summary\"\u003e1.5 Summary\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-implementation\" id=\"markdown-toc-2-implementation\"\u003e2 Implementation\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-initialization-high-level-overview\" id=\"markdown-toc-21-initialization-high-level-overview\"\u003e2.1 Initialization: high level overview\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-inithealth---launch---runserver---serverserve\" id=\"markdown-toc-22-inithealth---launch---runserver---serverserve\"\u003e2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einitHealth() -\u0026gt; Launch() -\u0026gt; runServer() -\u0026gt; server.Serve()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-runserver\" id=\"markdown-toc-23-runserver\"\u003e2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erunServer()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-runactiveservices\" id=\"markdown-toc-24-runactiveservices\"\u003e2.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erunActiveServices()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#25-launch-cilium-health-ep\" id=\"markdown-toc-25-launch-cilium-health-ep\"\u003e2.5 Launch \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-cli-cheat-sheet\" id=\"markdown-toc-3-cli-cheat-sheet\"\u003e3 CLI cheat sheet\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-check-cilium-agent-status\" id=\"markdown-toc-31-check-cilium-agent-status\"\u003e3.1 Check cilium agent status\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-check-connectivity-results\" id=\"markdown-toc-32-check-connectivity-results\"\u003e3.2 Check connectivity results\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-check-health-info-in-ctnat-tables\" id=\"markdown-toc-33-check-health-info-in-ctnat-tables\"\u003e3.3 Check health info in CT/NAT tables\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eThis post also provides a \u003ca href=\"/blog/cilium-code-health-probe-zh/\"\u003eChinese version\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis post belongs to the\n\u003ca href=\"/blog/cilium-code-series/\"\u003eCilium Code Walk Through Series\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis post gives a brief introduction to the Cilium health probe stuffs.\nCode based on \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1.8.4\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch1 id=\"tl-dr\"\u003eTL; DR\u003c/h1\u003e\n\n\u003cp\u003eCall diagram:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-code-health-probe/entire-call-stack.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eCall stack:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003erunDaemon                                        // daemon/cmd/daemon_main.go\n  |-initHealth                                   // daemon/cmd/health.go\n  |  |-health.Launch                             // cilium-health/launch/launcher.go\n  |  |  |-ch.server \u003cspan class=\"o\"\u003e=\u003c/span\u003e server.NewServer\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n  |  |  |             |-newServer\n  |  |  |                |-api :\u003cspan class=\"o\"\u003e=\u003c/span\u003e restapi.NewCiliumHealthAPI\n  |  |  |                |-srv :\u003cspan class=\"o\"\u003e=\u003c/span\u003e healthApi.NewServer\u003cspan class=\"o\"\u003e(\u003c/span\u003eapi\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  |  |  |-ch.client \u003cspan class=\"o\"\u003e=\u003c/span\u003e client.NewDefaultClient\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n  |  |  |-go runServer\u003cspan class=\"o\"\u003e()\u003c/span\u003e                         // cilium-health/launch/launcher.go\n  |  |      |-go ch.server.Serve\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n  |  |      |     |-for \u003cspan class=\"o\"\u003e{\u003c/span\u003e go tcpServer.Serve\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n  |  |      |     |-go runActiveServices\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n  |  |      |           |-s.FetchStatusResponse\n  |  |      |           |   |-getAllNodes\n  |  |      |           |   | |-s.Daemon.GetClusterNodes\n  |  |      |           |   |    |-\u003cspan class=\"s2\"\u003e\u0026#34;GET /cluster/nodes\u0026#34;\u003c/span\u003e to cilium-agent API\n  |  |      |           |   |-prober.Run\n  |  |      |           |   |   |-p.Pinger.Run\n  |  |      |           |   |   |-p.runHTTPProbe\n  |  |      |           |   |        |-for node \u003cspan class=\"k\"\u003ein \u003c/span\u003enodes:\n  |  |      |           |   |            \u003cspan class=\"k\"\u003efor \u003c/span\u003eip \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003enodeIP, healthIP]:\n  |  |      |           |   |              \u003cspan class=\"k\"\u003efor \u003c/span\u003eport \u003cspan class=\"k\"\u003ein \u003c/span\u003eports:\n  |  |      |           |   |                httpProbe\u003cspan class=\"o\"\u003e(\u003c/span\u003enode, ip, port\u003cspan class=\"o\"\u003e)\u003c/span\u003e // \u003cspan class=\"nv\"\u003eport\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e4240\n  |  |      |           |   |-updateCluster\u003cspan class=\"o\"\u003e(\u003c/span\u003eprober.Results\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  |  |      |           |-s.getNodes\n  |  |      |           |-prober.OnIdle \u003cspan class=\"o\"\u003e=\u003c/span\u003e func\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  |  |      |           |   updateCluster\u003cspan class=\"o\"\u003e(\u003c/span\u003eprober.Results\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  |  |      |           |   nodesAdded, nodesRemoved :\u003cspan class=\"o\"\u003e=\u003c/span\u003e getNodes\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n  |  |      |           |     |-s.Daemon.GetClusterNodes\n  |  |      |           |        |-\u003cspan class=\"s2\"\u003e\u0026#34;GET /cluster/nodes\u0026#34;\u003c/span\u003e to cilium-agent API\n  |  |      |           |   prober.setNodes\u003cspan class=\"o\"\u003e(\u003c/span\u003enodesAdded, nodesRemoved\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  |  |      |           | \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n  |  |      |           |-prober.RunLoop\n  |  |      |           |-s.Server.Serve\u003cspan class=\"o\"\u003e()\u003c/span\u003e  // api/v1/health/server/server.go\n  |  |      |              |-s.Listen\u003cspan class=\"o\"\u003e()\u003c/span\u003e     // listen at unix://xxx/health.sock\n  |  |      |              |-if unix sock:\n  |  |      |                  |-domainSocket.Serve\u003cspan class=\"o\"\u003e(\u003c/span\u003el\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  |  |      |-for \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  |  |          ch.client.Restapi.GetHealthz\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n  |  |          ch.setStatus\u003cspan class=\"o\"\u003e(\u003c/span\u003estatus\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  |  |        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n  |  |\n  |  |-pidfile.Remove\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/var/run/cilium/state/health-endpoint.pid\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  |  |-UpdateController\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;cilium-health-ep\u0026#34;\u003c/span\u003e, func\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  |      DoFunc: func\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  |          LaunchAsEndpoint \n  |          RunInterval: 60 \u003cspan class=\"k\"\u003e*\u003c/span\u003e time.Second,\n  |      \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n  |    \u003cspan class=\"o\"\u003e})\u003c/span\u003e\n  |\n  |-startAgentHealthHTTPService                 // daemon/cmd/agenthealth.go\n      |- mux.Handle\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/healthz\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"1-design\"\u003e1 Design\u003c/h1\u003e\n\n\u003ch2 id=\"11-full-mesh-probe\"\u003e1.1 Full-mesh probe\u003c/h2\u003e\n\n\u003cp\u003eBy design, \u003cstrong\u003eeach Cilium node can actively probe all other nodes\u003c/strong\u003e about their\nhealth statuses, and in this way each node always keeps a fresh view of the\nglobal health status of the cluster.\u003c/p\u003e\n\n\u003cp\u003eAs each node will probe all other nodes, the probing paths turn out to be a\nfull-mesh network, as shown below:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-code-health-probe/full-mesh.png\" width=\"40%\" height=\"40%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Full-mesh health probing of Cilium nodes\u003c/p\u003e\n\n\u003cp\u003eThe probing behavior is controlled by two options in cilium-agent, both with default \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrue\u003c/code\u003e:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eenable-health-checking\u003c/code\u003e: probe the status of \u003cstrong\u003eother nodes\u003c/strong\u003e.\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eenable-endpoint-health-checking\u003c/code\u003e: probe the status of the \u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e on other nodes\u003c/strong\u003e.\nWe will detail on \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e later.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"12-types-of-probes\"\u003e1.2 Types of probes\u003c/h2\u003e\n\n\u003cp\u003eSpeaking from the viewpoint of \u003cstrong\u003enetwork layers\u003c/strong\u003e, there are two kinds of probes:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003eL3 probe\u003c/strong\u003e: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eping\u003c/code\u003e (ICMP)\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eL7 probe\u003c/strong\u003e: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGET \u0026lt;HTTP API\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eAnd by combining the two options, there are \u003cmark\u003e4 types of probes\u003c/mark\u003e in total:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eenable-health-checking=true\u003c/code\u003e:\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003eICMP probe (L3): \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eping \u0026lt;NodeIP\u0026gt;\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003eHTTP probe (L7): \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGET http://\u0026lt;NodeIP\u0026gt;:4240/hello\u003c/code\u003e\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eenable-endpoint-health-checking=true\u003c/code\u003e:\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003eICMP probe (L3): \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eping \u0026lt;HealthIP\u0026gt;\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003eHTTP probe (L7): \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGET http://\u0026lt;HealthIP\u0026gt;:4240/hello\u003c/code\u003e\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"13-probe-results\"\u003e1.3 Probe results\u003c/h2\u003e\n\n\u003cp\u003eThe agent stores the probe results to a local cache, and we can retrieve it via CLI:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode1\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium-health status\nProbe \u003cspan class=\"nb\"\u003etime\u003c/span\u003e:   2020-12-29T15:17:02Z\nNodes:\n  cluster1/node1 \u003cspan class=\"o\"\u003e(\u003c/span\u003elocalhost\u003cspan class=\"o\"\u003e)\u003c/span\u003e:\n    Host connectivity to 10.5.6.60:        \u003cspan class=\"c\"\u003e# \u0026lt;-- NodeIP\u003c/span\u003e\n      ICMP to stack:   OK, \u003cspan class=\"nv\"\u003eRTT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e9.557967ms\n      HTTP to agent:   OK, \u003cspan class=\"nv\"\u003eRTT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e405.072µs\n    Endpoint connectivity to 10.6.2.213:   \u003cspan class=\"c\"\u003e# \u0026lt;-- HealthIP\u003c/span\u003e\n      ICMP to stack:   OK, \u003cspan class=\"nv\"\u003eRTT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e9.951333ms\n      HTTP to agent:   OK, \u003cspan class=\"nv\"\u003eRTT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e468.645µs\n  cluster1/node2:\n    ...\n  cluster2/node100:\n    Host connectivity to 10.6.6.100:        \u003cspan class=\"c\"\u003e# \u0026lt;-- NodeIP\u003c/span\u003e\n      ICMP to stack:   OK, \u003cspan class=\"nv\"\u003eRTT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e10.164048ms\n      HTTP to agent:   OK, \u003cspan class=\"nv\"\u003eRTT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e694.196µs\n    Endpoint connectivity to 10.22.1.3:     \u003cspan class=\"c\"\u003e# \u0026lt;-- HealthIP\u003c/span\u003e\n      ICMP to stack:   OK, \u003cspan class=\"nv\"\u003eRTT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e11.282117ms\n      HTTP to agent:   OK, \u003cspan class=\"nv\"\u003eRTT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e765.092µs\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIf \u003ca href=\"/blog/cilium-clustermesh/\"\u003eclustermesh is enabled\u003c/a\u003e,\n\u003cstrong\u003ecilium-agent will also probe the nodes that are in other K8s clusters\u003c/strong\u003e inside\nthe clustermesh, that’s why we can see nodes from different clusters in the\nabove output.\u003c/p\u003e\n\n\u003ch2 id=\"14-a-special-endpoint-cilium-health-ep\"\u003e1.4 A special endpoint: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eIn its simple way, cilium-agent creates an \u003ca href=\"https://docs.cilium.io/en/v1.9/concepts/terminology/#endpoints\"\u003eEndpoint\u003c/a\u003e\nfor each Pod on the node. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e is \u003cstrong\u003ea special Endpoint\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium endpoint list\nENDPOINT   POLICY \u003cspan class=\"o\"\u003e(\u003c/span\u003eingress\u003cspan class=\"o\"\u003e)\u003c/span\u003e   POLICY \u003cspan class=\"o\"\u003e(\u003c/span\u003eegress\u003cspan class=\"o\"\u003e)\u003c/span\u003e   IDENTITY   LABELS \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003esource\u003c/span\u003e:key[\u003cspan class=\"o\"\u003e=\u003c/span\u003evalue]\u003cspan class=\"o\"\u003e)\u003c/span\u003e  IPv4         STATUS\n...\n2399       Disabled           Disabled          4          reserved:health              10.6.2.213   ready\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIt is not a Pod, but as we can see, it has its own\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cmark\u003eEndpoint ID\u003c/mark\u003e: randomly allocated by cilium-agent, unique within each node.\u003c/li\u003e\n  \u003cli\u003e\u003cmark\u003eIdentity\u003c/mark\u003e: fixed value \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4\u003c/code\u003e, which belongs to the \u003cstrong\u003ereserved identity\u003c/strong\u003e set.\nAnd that means, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e \u003cstrong\u003eon each node has the same identity value \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4\u003c/code\u003e\u003c/strong\u003e.\u003c/li\u003e\n  \u003cli\u003e\u003cmark\u003eIP address\u003c/mark\u003e: randomly allocated by cilium-agent.\u003c/li\u003e\n  \u003cli\u003e\u003cmark\u003eVeth pair\u003c/mark\u003e: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elxc_health@\u0026lt;peer\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWe could also check the IP address of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e with the following command:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium status \u003cspan class=\"nt\"\u003e--all-addresses\u003c/span\u003e | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003ehealth\n  10.6.2.213 \u003cspan class=\"o\"\u003e(\u003c/span\u003ehealth\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"15-summary\"\u003e1.5 Summary\u003c/h2\u003e\n\n\u003cp\u003eFrom the above discussions we can conclude that the health probe mechanism in\nCilium is simple and straight forward.\u003c/p\u003e\n\n\u003cp\u003eBut when it comes to implementation, things become complicated.\u003c/p\u003e\n\n\u003ch1 id=\"2-implementation\"\u003e2 Implementation\u003c/h1\u003e\n\n\u003cp\u003eThe entire flow diagram and calling stack has been given at the very beginning\nof this post. In the next, let’s walk through them steps by steps.\u003c/p\u003e\n\n\u003ch2 id=\"21-initialization-high-level-overview\"\u003e2.1 Initialization: high level overview\u003c/h2\u003e\n\n\u003cp\u003eStarting from the initialization of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-agent\u003c/code\u003e daemon.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-code-health-probe/init-highlevel.png\" width=\"90%\" height=\"90%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eMajor steps:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003eCall \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einitHealth()\u003c/code\u003e, \u003cstrong\u003emost of the remaining work\u003c/strong\u003e will be done here.\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003eInit prober, \u003cmark\u003eprobe all other nodes sequentially\u003c/mark\u003e.\u003c/li\u003e\n      \u003cli\u003e\u003cmark\u003eLaunch cilium-health-ep\u003c/mark\u003e. This step doesn’t wait for the\nabove step’s finishing, they are independent steps.\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eRegister cilium-agent \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/healthz\u003c/code\u003e API and start serving this API.\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eThis API reports \u003cstrong\u003ecilium-agent health status\u003c/strong\u003e.\u003c/li\u003e\n      \u003cli\u003e\u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium status --brief\u003c/code\u003e internally calls this API\u003c/strong\u003e.\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eOne important thing to note is that, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einitHealth()\u003c/code\u003e creates many goroutines to\ninitalize the health subsystem (including the sequential probing to all nodes),\nand \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/healthz\u003c/code\u003e API doesn’t wait former’s finishing.\nSo usually cilium-agent \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/healthz\u003c/code\u003e API quickly becomes ready and returns \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOK\u003c/code\u003e if\nyou GET it, but the health probing to all nodes may take several seconds,\nminutes, or even hours.\u003c/p\u003e\n\n\u003cp\u003eAs most of the heavy work is done in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einitHealth()\u003c/code\u003e, let dig inside.\u003c/p\u003e\n\n\u003ch2 id=\"22-inithealth---launch---runserver---serverserve\"\u003e2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einitHealth() -\u0026gt; Launch() -\u0026gt; runServer() -\u0026gt; server.Serve()\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eSteps in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einitHealth()\u003c/code\u003e:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003eCall \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehealth.Launch()\u003c/code\u003e, the latter performs\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003eInit \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ech.server\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003eInit \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ech.client\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003eCall \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ego ch.runServer()\u003c/code\u003e, \u003cstrong\u003emost of the remaining work will be done there\u003c/strong\u003e.\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003eRemove stale pid file (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/var/run/cilium/state/health-endpoint.pid\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eCreate \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e controller (periodic task), the latter will perform\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003eCreate \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e Endpoint,\u003c/li\u003e\n      \u003cli\u003eMake ensure \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e is alive, recreate it if needed\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThen let’s see the heavy work in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ego ch.runServer()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"23-runserver\"\u003e2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erunServer()\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-code-health-probe/runServer.png\" width=\"50%\" height=\"50%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eCode at \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health/launch/launcher.go\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSteps:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003eWait cilium-agent starts successfully\u003c/strong\u003e (repeatedly \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGET /healthz\u003c/code\u003e until OK)\u003c/li\u003e\n  \u003cli\u003eRemove stale sock file \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/var/run/cilium/health.sock\u003c/code\u003e. When you execute\n  \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health\u003c/code\u003e command, it will send requests to this sock.\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eCall \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ego ch.server.Serve()\u003c/code\u003e: \u003cstrong\u003estart cilium-health API server in a new goroutine\u003c/strong\u003e,\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003eSpawn TCP servers goroutines\u003c/li\u003e\n      \u003cli\u003eSpawn a goroutine to run \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erunActiveServices()\u003c/code\u003e. This will create the\nprober and unix/http/https servers, and the unix server will re-create\nthe \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehealth.sock\u003c/code\u003e file at its \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eListen()\u003c/code\u003e method.\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eBlocking until new \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehealth.sock\u003c/code\u003e file is ready, then set permission for this\nfile.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003ePeriodically \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGET /healthz\u003c/code\u003e from ciliu-agent, and cache the result to daemon.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ech.server.Serve()\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// pkg/health/server/server.go\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// Serve spins up the following goroutines:\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// * TCP API Server: Responders to the health API \u0026#34;/hello\u0026#34; message, one per path\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// * Prober: Periodically run pings across the cluster, update server\u0026#39;s connectivity status cache.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// * Unix API Server: Handle all health API requests over a unix socket.\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eServer\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eServe\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etcpServers\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esrv\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etcpServers\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eerrors\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"n\"\u003esrv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eServe\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eerrors\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erunActiveServices\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"n\"\u003eerrors\u003c/span\u003e \u003cspan class=\"c\"\u003e// Block for the first error, then return.\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eMost of the remaing work will be done in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erunActiveServices()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"24-runactiveservices\"\u003e2.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erunActiveServices()\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-code-health-probe/runActiveServices.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eSteps:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eCall \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFetchStatusResponse()\u003c/code\u003e, which will \u003cmark\u003eprobe all nodes sequentially\u003c/mark\u003e.\u003c/li\u003e\n  \u003cli\u003eSet up \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOnIdle()\u003c/code\u003e handler for the prober, then start \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eprober.RunLoop()\u003c/code\u003e,\nwhich will periodically update current node set.\u003c/li\u003e\n  \u003cli\u003eCall \u003ccode class=\"language-plaintext highlighter-rouge\"\u003es.Server.Seve()\u003c/code\u003e, \u003cmark\u003estart to serve Unix/HTTP/HTTPS requests\u003c/mark\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eNote the 1st step,\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eThe probe process is sequential over all other nodes,\u003c/li\u003e\n  \u003cli\u003eIf a node is not reachable, L7 check will time out after \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e30s\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eSo, \u003cstrong\u003eif there are lots of nodes that not reachable via L7 probe\u003c/strong\u003e, step 3 would\nbe delayed. Specifically, we could see the following errors when executing\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health\u003c/code\u003e command:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium-health status\nError: Cannot get status: Get \u003cspan class=\"s2\"\u003e\u0026#34;http://%2Fvar%2Frun%2Fcilium%2Fhealth.sock/v1beta/status\u0026#34;\u003c/span\u003e: dial unix /var/run/cilium/health.sock: connect: no such file or directory\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAs this sock file will be created later, in step 3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003es.Server.Serve() -\u0026gt; Listen()\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eCode:\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// pkg/health/server/server.go\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// Run services that are actively probing other hosts and endpoints over ICMP and HTTP,\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// and hosting the health admin API on a local Unix socket.\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eServer\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003erunActiveServices\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFetchStatusResponse\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003enodesAdded\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetNodes\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprober\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003enewProber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enodesAdded\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprober\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eOnIdle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c\"\u003e// Fetch results and update set of nodes to probe every ProbeInterval\u003c/span\u003e\n        \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eupdateCluster\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprober\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetResults\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003enodesAdded\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enodesRemoved\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetNodes\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003elog\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWithError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;unable to get cluster nodes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eprober\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetNodes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enodesAdded\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enodesRemoved\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprober\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRunLoop\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eServer\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eServe\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThe last line \u003ccode class=\"language-plaintext highlighter-rouge\"\u003es.Server.Serve()\u003c/code\u003e is implemented as:\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// api/v1/server/server.go\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// Serve the api\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eServer\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eServe\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehasListeners\u003c/span\u003e\n        \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eListen\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"c\"\u003e// net.Listen(s.SocketPath) -\u0026gt; create sock file\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehandler\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"c\"\u003e// set default handler, if none is set\u003c/span\u003e\n        \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSetHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eapi\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eServe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"no\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehasScheme\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eschemeUnix\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c\"\u003e// \u0026#34;Serving cilium at unix://%s\u0026#34;, s.SocketPath\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eListener\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003edomainSocket\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eServe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edomainSocketL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehasScheme\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eschemeHTTP\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehasScheme\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eschemeHTTPS\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"25-launch-cilium-health-ep\"\u003e2.5 Launch \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/cilium-code-health-probe/launch-cilium-health-ep.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eAs shown above, creating \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e is independent of the steps in\nsection \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e2.2~2.4\u003c/code\u003e (the latter is asynchronously executed since \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ego\nrunServer()\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health-ep\u003c/code\u003e is a Cilium Endpoint, so it will also go through the\nfollowing endpoint creating procedure:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eAllocate IP address,\u003c/li\u003e\n  \u003cli\u003eCreate netns,\u003c/li\u003e\n  \u003cli\u003eCreate veth pair (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elxc_health\u003c/code\u003e),\u003c/li\u003e\n  \u003cli\u003eCreate Endpoint\u003c/li\u003e\n  \u003cli\u003eAllocate identity: note that in Cilium, \u003cmark\u003eidentity is allocated after endpoint creation\u003c/mark\u003e.\u003c/li\u003e\n  \u003cli\u003eRegenerate BPF\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eCode: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium-health/launch/endpoint.go\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch1 id=\"3-cli-cheat-sheet\"\u003e3 CLI cheat sheet\u003c/h1\u003e\n\n\u003cp\u003eSome health related CLIs.\u003c/p\u003e\n\n\u003ch2 id=\"31-check-cilium-agent-status\"\u003e3.1 Check cilium agent status\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium status --brief\u003c/code\u003e: brief output, which internally performs \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026#34;GET /healthz\u0026#34;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium status\u003c/code\u003e: normal output\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecilium status --verbose\u003c/code\u003e: verbose output\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"32-check-connectivity-results\"\u003e3.2 Check connectivity results\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium-health status\n...\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium status \u003cspan class=\"nt\"\u003e--verbose\u003c/span\u003e\n...\nCluster health:                          265/268 reachable   \u003cspan class=\"o\"\u003e(\u003c/span\u003e2020-12-31T09:00:03Z\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  Name                         IP                Node          Endpoints\n  cluster1/node1 \u003cspan class=\"o\"\u003e(\u003c/span\u003elocalhost\u003cspan class=\"o\"\u003e)\u003c/span\u003e   10.5.6.60         reachable     reachable\n  cluster2/node2               10.6.9.132        reachable     reachable\n  ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"33-check-health-info-in-ctnat-tables\"\u003e3.3 Check health info in CT/NAT tables\u003c/h2\u003e\n\n\u003cp\u003eICMP records in Conntrack (CT) table and NAT table:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium bpf ct list global | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003eICMP |head \u003cspan class=\"nt\"\u003e-n4\u003c/span\u003e\nICMP IN 10.4.9.12:0 -\u0026gt; 10.5.8.4:518 \u003cspan class=\"nv\"\u003eexpires\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1987899 \u003cspan class=\"nv\"\u003eRxPackets\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003eRxBytes\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e50 \u003cspan class=\"nv\"\u003eRxFlagsSeen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x00 \u003cspan class=\"nv\"\u003eLastRxReport\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1987839 \u003cspan class=\"nv\"\u003eTxPackets\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003eTxBytes\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e50 \u003cspan class=\"nv\"\u003eTxFlagsSeen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x00 \u003cspan class=\"nv\"\u003eLastTxReport\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1987839 \u003cspan class=\"nv\"\u003eFlags\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x0000 \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"nv\"\u003eRevNAT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003eSourceSecurityID\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2 \u003cspan class=\"nv\"\u003eIfIndex\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\nICMP OUT 10.5.2.101:47153 -\u0026gt; 10.4.9.11:0 \u003cspan class=\"nv\"\u003eexpires\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1987951 \u003cspan class=\"nv\"\u003eRxPackets\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003eRxBytes\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003eRxFlagsSeen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x00 \u003cspan class=\"nv\"\u003eLastRxReport\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003eTxPackets\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003eTxBytes\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e50 \u003cspan class=\"nv\"\u003eTxFlagsSeen\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x00 \u003cspan class=\"nv\"\u003eLastTxReport\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1987891 \u003cspan class=\"nv\"\u003eFlags\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0x0000 \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"nv\"\u003eRevNAT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003eSourceSecurityID\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003eIfIndex\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecilium bpf nat list | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003eICMP |head \u003cspan class=\"nt\"\u003e-n4\u003c/span\u003e\nICMP OUT 10.5.2.101:65204 -\u0026gt; 10.4.6.9:0 XLATE_SRC 10.5.2.101:65204 \u003cspan class=\"nv\"\u003eCreated\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1987884sec \u003cspan class=\"nv\"\u003eHostLocal\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1\nICMP IN 10.4.4.11:0 -\u0026gt; 10.5.2.101:39843 XLATE_DST 10.5.2.101:39843 \u003cspan class=\"nv\"\u003eCreated\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1987884sec \u003cspan class=\"nv\"\u003eHostLocal\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/cilium-code-health-probe-zh/\"\u003e\u003cspan\u003e« Cilium 源码解析：Node 之间的健康探测（health probe）机制\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/cloud-native-data-center-networking-notes-zh/\"\u003e\u003cspan\u003e[笔记]《Cloud Native Data Center Networking》（云原生数据中心网络设计）(O\u0026#39;Reilly 2019) »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2020-12-31T00:00:00Z",
  "Author": "Arthur Chiao"
}