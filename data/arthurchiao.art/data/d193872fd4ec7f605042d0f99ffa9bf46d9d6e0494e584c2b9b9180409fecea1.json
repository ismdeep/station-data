{
  "Source": "arthurchiao.art",
  "Title": "Pidfd and Socket-lookup BPF (SK_LOOKUP) Illustrated (2022)",
  "Link": "https://arthurchiao.art/blog/pidfd-and-socket-lookup-bpf-illustrated/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003ePidfd and Socket-lookup BPF (SK_LOOKUP) Illustrated (2022)\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2022-12-11 | Last Update 2022-12-11\u003c/p\u003e\n  \n  \u003ch3 id=\"tl-dr\"\u003eTL; DR\u003c/h3\u003e\n\n\u003cp\u003eMost unix programming text books as well as practices hold the following statements to be true:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eOne socket\u003c/mark\u003e\u003c/strong\u003e could be opened by \u003cstrong\u003e\u003cmark\u003eone and only one process\u003c/mark\u003e\u003c/strong\u003e (application);\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003eOne socket\u003c/mark\u003e\u003c/strong\u003e could listen/serve on \u003cstrong\u003e\u003cmark\u003eone and only one port\u003c/mark\u003e\u003c/strong\u003e;\u003c/p\u003e\n\n    \u003cp\u003eRecall the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebind\u003c/code\u003e system call\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eint bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen)\u003c/code\u003e where\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eaddr\u003c/code\u003e is determined by \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP+Port\u003c/code\u003e (and socket address family).\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eHowever, with some advanced techniques like \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003epidfd_getfd()\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\nsystem call in Linux kernel \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5.4+\u003c/code\u003e and \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eSK_LOOKUP\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e BPF in\nkernel \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5.6+\u003c/code\u003e, we could easily break the above limitations, supporting scenarios like below:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e       +-----------+  +-----------+  +----------+                              +------------------+\n       | Process 1 |  | Process 2 |  | Process 3|                              |   Process(app)   |\n       |           |  |           |  |          |                              |                  |\n       |  SockFD1  |  |  SockFD2  |  |  SockFD3 |                              |     SockFD       |\n       +-----------+  +-----------+  +----------+                              +------------------+\n                \\         |         /                                                   |\n                +--------------------+                                         +------------------+\n                |       Socket       |                                         |     Socket       |\n                +--------------------+                                         +------------------+\n                          |                                                    /        |         \\\n                +--------------------+                                 +--------+  +---------+  +----------+\n                |       TCP@80       |                                 |  TCP@7 |  | TCP@77  |  | TCP@777  |\n                +--------------------+                                 +--------+  +---------+  +----------+\n                          |                                                     \\       |         /\n                +--------------------+                                          +------------------+\n                |      ServerIP      |                                          |    ServerIP      |\n                +--------------------+                                          +------------------+\n                          /\\                                                            /\\\n                          ||                                                            ||\n                       requests                                                      requests\n\n                       Scenario 1:                                                  Scenario 2:\n  Multiple processes serve requests over the same socket.         Single socket listens/serves on multiple ports.\n  E.g. Three HTTP servers share the same TCP@localhost:80         E.g. one socket servers on TCP@localhost\n  socket.                                                         {:6, :66, :666} simultaneously.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThis post explains the underlying working mechanism of the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSK_LOOKUP\u003c/code\u003e BPF,\nand provides example codes based on \u003ca href=\"https://github.com/cilium/ebpf\"\u003ecilium/ebpf\u003c/a\u003e\nlibrary, which has minimal dependencies and doesn’t require header files to be installed.\u003c/p\u003e\n\n\u003cp\u003eDemo codes in this post: \u003ca href=\"https://github.com/arthurchiao/pidfd-and-sk-lookup-bpf-illustrated\"\u003egithub.com/arthurchiao/pidfd-and-sk-lookup-bpf-illustrated\u003c/a\u003e.\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#tl-dr\" id=\"markdown-toc-tl-dr\"\u003eTL; DR\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-introduction\" id=\"markdown-toc-1-introduction\"\u003e1 Introduction\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-multiple-processes-serving-on-the-same-socket\" id=\"markdown-toc-2-multiple-processes-serving-on-the-same-socket\"\u003e2 Multiple processes serving on the same socket\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-background\" id=\"markdown-toc-21-background\"\u003e2.1 Background\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#211-pidfd-and-pidfd_open-system-call-kernel-54\" id=\"markdown-toc-211-pidfd-and-pidfd_open-system-call-kernel-54\"\u003e2.1.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epidfd\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epidfd_open()\u003c/code\u003e system call (kernel \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5.4+\u003c/code\u003e)\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#212-pidfd_getfd-system-call-kernel-56\" id=\"markdown-toc-212-pidfd_getfd-system-call-kernel-56\"\u003e2.1.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epidfd_getfd()\u003c/code\u003e system call (kernel \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5.6+\u003c/code\u003e)\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-share-socket-a-demo-of-multiple-servers-share-the-same-socket-listen-fd\" id=\"markdown-toc-22-share-socket-a-demo-of-multiple-servers-share-the-same-socket-listen-fd\"\u003e2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eshare-socket\u003c/code\u003e: a demo of multiple servers share the same socket (listen fd)\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#221-source-code-golang\" id=\"markdown-toc-221-source-code-golang\"\u003e2.2.1 Source code (golang)\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#222-test\" id=\"markdown-toc-222-test\"\u003e2.2.2 Test\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-graceful-upgrade-a-demo-for-graceful-l4l7-service-upgrade\" id=\"markdown-toc-23-graceful-upgrade-a-demo-for-graceful-l4l7-service-upgrade\"\u003e2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003egraceful-upgrade\u003c/code\u003e: a demo for graceful L4/L7 service upgrade\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#231-source-code-golang\" id=\"markdown-toc-231-source-code-golang\"\u003e2.3.1 Source code (golang)\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#232-test\" id=\"markdown-toc-232-test\"\u003e2.3.2 Test\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-summary\" id=\"markdown-toc-24-summary\"\u003e2.4 Summary\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-single-process-socket-serving-on-multiple-ports\" id=\"markdown-toc-3-single-process-socket-serving-on-multiple-ports\"\u003e3 Single process (socket) serving on multiple ports\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-bpf_prog_type_sk_lookup-program\" id=\"markdown-toc-31-bpf_prog_type_sk_lookup-program\"\u003e3.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_LOOKUP\u003c/code\u003e program\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#311-motivation\" id=\"markdown-toc-311-motivation\"\u003e3.1.1 Motivation\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#312-attachment\" id=\"markdown-toc-312-attachment\"\u003e3.1.2 Attachment\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#313-hooks\" id=\"markdown-toc-313-hooks\"\u003e3.1.3 Hooks\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-create-a-simple-echo-server\" id=\"markdown-toc-32-create-a-simple-echo-server\"\u003e3.2 Create a simple echo server\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#321-create-server-with-ncatnc\" id=\"markdown-toc-321-create-server-with-ncatnc\"\u003e3.2.1 Create server with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003encat/nc\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#322-test-accessing\" id=\"markdown-toc-322-test-accessing\"\u003e3.2.2 Test accessing\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-bpf-program\" id=\"markdown-toc-33-bpf-program\"\u003e3.3 BPF program\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#331-kernelbpf-code\" id=\"markdown-toc-331-kernelbpf-code\"\u003e3.3.1 Kernel/BPF code\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#332-userspace-code\" id=\"markdown-toc-332-userspace-code\"\u003e3.3.2 Userspace code\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#333-compile-load-attach\" id=\"markdown-toc-333-compile-load-attach\"\u003e3.3.3 Compile, load, attach\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#334-configure-with-bpftool-map-update\" id=\"markdown-toc-334-configure-with-bpftool-map-update\"\u003e3.3.4 Configure with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftool map update\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#335-test\" id=\"markdown-toc-335-test\"\u003e3.3.5 Test\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-improvement-pin-the-bpf-program-and-bpf-link-to-bpffs\" id=\"markdown-toc-34-improvement-pin-the-bpf-program-and-bpf-link-to-bpffs\"\u003e3.4 Improvement: pin the BPF program and BPF link to bpffs\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-summary\" id=\"markdown-toc-4-summary\"\u003e4 Summary\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#references\" id=\"markdown-toc-references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"1-introduction\"\u003e1 Introduction\u003c/h1\u003e\n\n\u003cp\u003eThis post explains the underlying working mechanism of the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSK_LOOKUP\u003c/code\u003e BPF.\nWe’ll have several examples to implement the following scenarios.\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e       +-----------+  +-----------+  +----------+                              +------------------+\n       | Process 1 |  | Process 2 |  | Process 3|                              |   Process(app)   |\n       |           |  |           |  |          |                              |                  |\n       |  SockFD1  |  |  SockFD2  |  |  SockFD3 |                              |     SockFD       |\n       +-----------+  +-----------+  +----------+                              +------------------+\n                \\         |         /                                                   |\n                +--------------------+                                         +------------------+\n                |       Socket       |                                         |     Socket       |\n                +--------------------+                                         +------------------+\n                          |                                                    /        |         \\\n                +--------------------+                                 +--------+  +---------+  +----------+\n                |       TCP@80       |                                 |  TCP@7 |  | TCP@77  |  | TCP@777  |\n                +--------------------+                                 +--------+  +---------+  +----------+\n                          |                                                     \\       |         /\n                +--------------------+                                          +------------------+\n                |      ServerIP      |                                          |    ServerIP      |\n                +--------------------+                                          +------------------+\n                          /\\                                                            /\\\n                          ||                                                            ||\n                       requests                                                      requests\n\n                       Scenario 1:                                                  Scenario 2:\n  Multiple processes serve requests over the same socket.         Single socket listens/serves on multiple ports.\n  E.g. Three HTTP servers share the same TCP@localhost:80         E.g. one socket servers on TCP@localhost\n  socket.                                                         {:6, :66, :666} simultaneously.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"2-multiple-processes-serving-on-the-same-socket\"\u003e2 Multiple processes serving on the same socket\u003c/h1\u003e\n\n\u003cp\u003eThe first scenario: multiple processes listen and serve on exactly the same socket,\nas depicted below:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\n       +-----------+  +-----------+  +----------+\n       | Process 1 |  | Process 2 |  | Process 3|\n       |           |  |           |  |          |\n       |  SockFD1  |  |  SockFD2  |  |  SockFD3 |\n       +-----------+  +-----------+  +----------+\n                \\         |         /\n                +--------------------+\n                |       Socket       |\n                +--------------------+\n                          |\n                +--------------------+\n                |       TCP@80       |\n                +--------------------+\n                          |\n                +--------------------+\n                |      ServerIP      |\n                +--------------------+\n                          /\\\n                          ||\n                       requests\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"21-background\"\u003e2.1 Background\u003c/h2\u003e\n\n\u003cp\u003eThe secret weapon to realize the above conception is \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003epidfd_getfd()\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e.\nBut, to understand \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epidfd_getfd()\u003c/code\u003e well, we need to start from \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003epidfd\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eNote that these two stuffs have nothing to do with BPF, but they’ve laied out\nthe foundation for SK_LOOKUP BPF, we’ll see that in section 3.\u003c/p\u003e\n\n\u003ch3 id=\"211-pidfd-and-pidfd_open-system-call-kernel-54\"\u003e2.1.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epidfd\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epidfd_open()\u003c/code\u003e system call (kernel \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5.4+\u003c/code\u003e)\u003c/h3\u003e\n\n\u003cp\u003eA recap of the lwn.net article \u003ca href=\"https://lwn.net/Articles/794707/\"\u003eCompleting the pidfd API (2019)\u003c/a\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003eUnix-like systems traditionally represent \u003cstrong\u003e\u003cmark\u003eobjects as files\u003c/mark\u003e\u003c/strong\u003e,\nbut \u003cstrong\u003e\u003cmark\u003eprocesses have always been an exception\u003c/mark\u003e\u003c/strong\u003e. They are, instead,\n\u003cstrong\u003e\u003cmark\u003erepresented by process IDs\u003c/mark\u003e\u003c/strong\u003e (integer \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePID\u003c/code\u003e).\u003c/p\u003e\n\n    \u003cp\u003eThere are a few problems with this representation, the biggest one is\n  that \u003cstrong\u003e\u003cmark\u003ePIDs are reused\u003c/mark\u003e\u003c/strong\u003e and this can happen quickly, which creates\n  a race condition where code that operates on a process (most often by sending\n  it a signal) might end up \u003cstrong\u003e\u003cmark\u003eperforming an action on the wrong process\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eA pidfd is, instead, \u003cstrong\u003e\u003cmark\u003ea file descriptor that refers to an existing process\u003c/mark\u003e\u003c/strong\u003e.\nOnce the pidfd exists, it will \u003cstrong\u003e\u003cmark\u003eonly refer to that one process\u003c/mark\u003e\u003c/strong\u003e,\nso it can be used to send signals without worry that the wrong process might\nend up being the recipient. This feature is valuable enough to some\nprocess-management systems (e.g. the one used by Android).\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eTo get the pidfd of a process, use the \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003epidfd_open()\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e system call:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eman pidfd_open\nNAME\n       pidfd_open - obtain a file descriptor that refers to a process\nSYNOPSIS\n       \u003cspan class=\"c\"\u003e#include \u0026lt;sys/types.h\u0026gt;\u003c/span\u003e\n       int pidfd_open\u003cspan class=\"o\"\u003e(\u003c/span\u003epid_t pid, unsigned int flags\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nDESCRIPTION\n\t   The  pidfd_open\u003cspan class=\"o\"\u003e()\u003c/span\u003e  system  call creates a file descriptor that refers to\n       the process whose PID is specified \u003cspan class=\"k\"\u003ein \u003c/span\u003epid.  The file descriptor is returned as\n       the \u003cspan class=\"k\"\u003efunction \u003c/span\u003eresult\u003cspan class=\"p\"\u003e;\u003c/span\u003e the close-on-exec flag is \u003cspan class=\"nb\"\u003eset \u003c/span\u003eon the file descriptor.\nRETURN VALUE\n\t   On success, pidfd_open\u003cspan class=\"o\"\u003e()\u003c/span\u003e returns a nonnegative file descriptor.  On\n       error, \u003cspan class=\"nt\"\u003e-1\u003c/span\u003e is returned and errno is \u003cspan class=\"nb\"\u003eset \u003c/span\u003eto indicate the cause of the error.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWith \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epidfd\u003c/code\u003e understood, let’s move on to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epidfd_getfd()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"212-pidfd_getfd-system-call-kernel-56\"\u003e2.1.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epidfd_getfd()\u003c/code\u003e system call (kernel \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5.6+\u003c/code\u003e)\u003c/h3\u003e\n\n\u003cp\u003eAgain, a recap from the lwn.net article \u003ca href=\"https://lwn.net/Articles/808997/\"\u003eGrabbing file descriptors with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epidfd_getfd()\u003c/code\u003e (2020)\u003c/a\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003eThe kernel has already had several mechanisms of controlling groups of processes\nfrom user space that \u003cstrong\u003e\u003cmark\u003eallow one process to operate on another\u003c/mark\u003e\u003c/strong\u003e.\nOne piece that is currently missing is the ability for a process to\n\u003cstrong\u003e\u003cmark\u003esnatch a copy of an open file descriptor from another\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n    \u003cp\u003eIt is possible in legacy kernels to open a file that another process also has open,\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eThe \u003cstrong\u003e\u003cmark\u003einformation needed to do this\u003c/mark\u003e\u003c/strong\u003e is in each process’s\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc\u003c/code\u003e directory;\u003c/li\u003e\n      \u003cli\u003eThis does \u003cstrong\u003e\u003cmark\u003enot work for\u003c/mark\u003e\u003c/strong\u003e file descriptors referring\nto \u003cstrong\u003e\u003cmark\u003epipes, sockets\u003c/mark\u003e\u003c/strong\u003e, or other objects that do not appear\nin the filesystem hierarchy;\u003c/li\u003e\n      \u003cli\u003eOpening a new file in this way creates a new entry in the file\ntable; it is not the entry corresponding to the file descriptor in the\nprocess of interest.\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eThe distinction matters if the objective is to \u003cstrong\u003e\u003cmark\u003emodify that particular file descriptor\u003c/mark\u003e\u003c/strong\u003e.\nOne use case is \u003cstrong\u003e\u003cmark\u003eusing seccomp to intercept attempts to bind a socket\u003c/mark\u003e\u003c/strong\u003e to a privileged port.\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eA privileged supervisor process could grab the file descriptor\nfor that socket from the target process and actually perform the bind —\nsomething the target process would not have the privilege to do on its own.\u003c/li\u003e\n      \u003cli\u003eSince the grabbed file descriptor is essentially identical to the original,\nthe bind operation will be visible to the target process as well.\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWith the introduction of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epidfd_getfd\u003c/code\u003e, this requirement can be met in an elegant way.\nA supervisor process would merely need to make a\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003epidfd_getfd()\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e system call:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003epidfd_getfd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003epidfd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etargetfd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eExample usage:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etarget_pid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e12000\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// target process ID\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etargetfd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e// target file descriptor in target process\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003efd2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epidfd_getfd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epidfd_open\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etarget_pid\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003etargetfd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// fd2: file descriptor in the current process\u003c/span\u003e\n                                                                  \u003cspan class=\"c1\"\u003e// which is a duplication of `targetfd`\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThis system call obtains a \u003cstrong\u003e\u003cmark\u003eduplicate of another process\u0026#39;s file descriptor\u003c/mark\u003e\u003c/strong\u003e.\nIn the above, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efd2\u003c/code\u003e in current process is a duplicate of the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efd=3\u003c/code\u003e in process \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e12000\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFrom \u003ca href=\"https://man7.org/linux/man-pages/man2/pidfd_getfd.2.html\"\u003eman page\u003c/a\u003e:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efd2\u003c/code\u003e refers to the \u003cstrong\u003e\u003cmark\u003esame open file description\u003c/mark\u003e\u003c/strong\u003e as\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etargetfd\u003c/code\u003e, so they \u003cstrong\u003e\u003cmark\u003eshare file status flags and file offset\u003c/mark\u003e\u003c/strong\u003e;\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003eOperations on the underlying file object\u003c/mark\u003e\u003c/strong\u003e (e.g, assigning an address to\na socket object using \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebind(2)\u003c/code\u003e) \u003cstrong\u003e\u003cmark\u003ecan equally be performed via \u003ccode\u003efd2\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e.\u003c/li\u003e\n  \u003cli\u003eThe duplication operation is governed by a ptrace access mode\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ePTRACE_MODE_ATTACH_REALCREDS\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e check,\nso this permission is needed.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eYama is a Linux Security Module that collects system-wide DAC security\nprotections that are not handled by the core kernel itself. This is\nselectable at build-time with CONFIG_SECURITY_YAMA, and can be controlled\nat run-time through sysctls in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/proc/sys/kernel/yama\u003c/code\u003e:\u003c/p\u003e\n\n  \u003cul\u003e\n    \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0\u003c/code\u003e: classic ptrace permissions;\u003c/li\u003e\n    \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1\u003c/code\u003e: restricted ptrace;\u003c/li\u003e\n    \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e2\u003c/code\u003e: admin-only attach;\u003c/li\u003e\n    \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3\u003c/code\u003e: no attach. no processes may use ptrace with PTRACE_ATTACH nor via PTRACE_TRACEME. \u003cstrong\u003e\u003cmark\u003eOnce set, this sysctl value cannot be changed\u003c/mark\u003e\u003c/strong\u003e.\u003c/li\u003e\n  \u003c/ul\u003e\n\n  \u003cp\u003eSee \u003ca href=\"https://www.kernel.org/doc/Documentation/security/Yama.txt\"\u003eDocumentation/security/Yama.txt\u003c/a\u003e for more information.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn the next, let’s see how this can solve some real world problems in an elegant way.\u003c/p\u003e\n\n\u003ch2 id=\"22-share-socket-a-demo-of-multiple-servers-share-the-same-socket-listen-fd\"\u003e2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eshare-socket\u003c/code\u003e: a demo of multiple servers share the same socket (listen fd)\u003c/h2\u003e\n\n\u003cp\u003eWe’ll write our demo code with golang, as it’s easy to start HTTP servers with golang built-in modules.\u003c/p\u003e\n\n\u003ch3 id=\"221-source-code-golang\"\u003e2.2.1 Source code (golang)\u003c/h3\u003e\n\n\u003cp\u003eThe code is very simple, all the error handling code are omitted here:\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003epid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eflag\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;pid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Target PID\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003efd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eflag\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;fd\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Target fd\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eflag\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eParse\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n\t\u003cspan class=\"n\"\u003ehandler\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eHandlerFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e \u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eResponseWriter\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Response from process %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetpid\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\n\t\u003cspan class=\"n\"\u003elistenAddr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;:8080\u0026#34;\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epid\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"c\"\u003e// Start a server, listen \u0026amp; serve on a socket that already exists\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003edupFdAndServe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehandler\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"c\"\u003e// Start a server, open a new socket on the given `listenAddr`\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003elistenAndServe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elistenAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehandler\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThe program accepts two optional parameters \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epid\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efd\u003c/code\u003e, which refers to\na specific socket in a process,\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eIf the parameters are not provided, the program just \u003cstrong\u003e\u003cmark\u003estarts a simple HTTP server\u003c/mark\u003e\u003c/strong\u003e; otherwise,\u003c/li\u003e\n  \u003cli\u003eIt will \u003cstrong\u003e\u003cmark\u003eduplicate that file descriptor then create a server listening on that duplicated fd\u003c/mark\u003e\u003c/strong\u003e;\neffectively, this means serving on the same socket of the given \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e(pid,fd)\u003c/code\u003e;\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn both case, the HTTP server will reply with a message of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026#34;Response from process \u0026lt;PID\u0026gt;\u0026#34;\u003c/code\u003e\nwhere \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;PID\u0026gt;\u003c/code\u003e is the process ID of the server instance that serving this request.\nThis is used to determine which server a response comes from.\u003c/p\u003e\n\n\u003cp\u003eThe code to start a new server or serving on the duplicated file descriptor:\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// Start a normal http server\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003elistenAndServe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elistenAddr\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehandler\u003c/span\u003e \u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eHandlerFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003elc\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eListenConfig\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003eControl\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enetwork\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eaddress\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"n\"\u003esyscall\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRawConn\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\t\u003cspan class=\"c\"\u003e// Print listen FD and PID for later use\u003c/span\u003e\n\t\t\t\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eControl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e \u003cspan class=\"kt\"\u003euintptr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Listening on %s, fd=%d , pid=%d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elistenAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetpid\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\t\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e\n\t\t\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eln\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003elc\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eListen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eBackground\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;tcp\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elistenAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eServe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eln\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eHandlerFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehandler\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// Start a http server by duplicating the given FD in the given process\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003edupFdAndServe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etargetPid\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etargetFd\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehandler\u003c/span\u003e \u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eHandlerFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003epidfd\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eOpen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etargetPid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003elistenFd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetFd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etargetFd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eln\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFileListener\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNewFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003euintptr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elistenFd\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Duplicated the given socket FD and listening on it\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eServe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eln\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eHandlerFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehandler\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThe code uses a golang library which encapsulates the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epidfd_getfd()\u003c/code\u003e system call.\u003c/p\u003e\n\n\u003cp\u003eTha’s all! Now compile the code:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003eshare-socket \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e go build\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"222-test\"\u003e2.2.2 Test\u003c/h3\u003e\n\n\u003cp\u003eFirst, with no parameters provided, run the program and it will start a simple HTTP server:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./share-socket\nListening on :8080, \u003cspan class=\"nv\"\u003efd\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3, \u003cspan class=\"nv\"\u003epid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e198004\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThe server’s process ID is \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e198004\u003c/code\u003e, and the TCP socket has an FD \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3\u003c/code\u003e. Now test it:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"k\"\u003efor \u003c/span\u003en \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e1..6\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo \u003c/span\u003ecurl 127.0.0.1:8080\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e1\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\n\u003c/span\u003eResponse from process 198004\nResponse from process 198004\nResponse from process 198004\nResponse from process 198004\nResponse from process 198004\nResponse from process 198004\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAs expected, all responses comes from that process.\u003c/p\u003e\n\n\u003cp\u003eNow, we invoke the program again with the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epid\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efd\u003c/code\u003e printed:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo\u003c/span\u003e ./share-socket \u003cspan class=\"nt\"\u003e-fd\u003c/span\u003e 3 \u003cspan class=\"nt\"\u003e-pid\u003c/span\u003e 198004\nDuplicated the given socket FD and listening on it, \u003cspan class=\"nv\"\u003epid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e198011\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThis time, it tells us that we’ve successfully\n\u003cstrong\u003e\u003cmark\u003ecopied the the socket\u0026#39;s file descriptor and created a new server listening on it\u003c/mark\u003e\u003c/strong\u003e,\ntoo. Now test it:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"k\"\u003efor \u003c/span\u003en \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e1..6\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo \u003c/span\u003ecurl 127.0.0.1:8080\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e1\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\n\u003c/span\u003eResponse from process 198004\nResponse from process 198004\nResponse from process 198011\nResponse from process 198011\nResponse from process 198004\nResponse from process 198004\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAs can be seen, responses come from the two servers (\u003cstrong\u003e\u003cmark\u003eshare a same TCP socket\u003c/mark\u003e\u003c/strong\u003e),\njust as expected,\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e       +-------------+            +-------------+\n       |  Server 1   |            |  Server 2   | // server2 = http.Serve(listen(fd2))\n       |             |            |             |\n       | pid1=198004 |            | pid2=198011 | //       pidfd_getfd(pidfd_open(target_pid), targetfd, flags)\n       |  fd1=3      |            |  fd2=xx     | // fd2 = pidfd_getfd(pidfd_open(198004),     3,        0)\n       +-------------+            +-------------+\n                \\                   /\n                +--------------------+\n                |       Socket       |\n                +--------------------+\n                          |\n                +--------------------+\n                |       TCP@8080     |\n                +--------------------+\n                          |\n                +--------------------+\n                |      ServerIP      |\n                +--------------------+\n                          /\\\n                          ||\n                       requests\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"23-graceful-upgrade-a-demo-for-graceful-l4l7-service-upgrade\"\u003e2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003egraceful-upgrade\u003c/code\u003e: a demo for graceful L4/L7 service upgrade\u003c/h2\u003e\n\n\u003cp\u003eIn the above \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eshare-socket\u003c/code\u003e example, we’ve seen how two, or in general,\n\u003cstrong\u003e\u003cmark\u003emultiple services could listen and serve on the same socket\u003c/mark\u003e\u003c/strong\u003e.\nIt’s not hard to get the idea that with some additional control or management work, a\ngraceful upgrade mechanism could be realized. The hypothetical graceful\nupgrade procedure:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eOne or multiple instances serve on a socket, e.g. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0.0.0.0:80\u003c/code\u003e;\u003c/li\u003e\n  \u003cli\u003eSing signal to old instances;\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eOn receiving kill signals, an old instance will:\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003eStart a new process to run the new code or new configuration, but still\nserve on the same socket as before, by duplicating the socket file\ndescriptor;\u003c/li\u003e\n      \u003cli\u003eTerminate the old process after a graceful period.\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn this section, we’ll make such a demo.\u003c/p\u003e\n\n\u003ch3 id=\"231-source-code-golang\"\u003e2.3.1 Source code (golang)\u003c/h3\u003e\n\n\u003cp\u003eThe skeleton code is much the same as \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eshare-socket\u003c/code\u003e, with the signal handling\ncoded added as below:\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eServer\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ehandleUpgradeSignal\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eupgradeCh\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003echan\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSignal\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003esignal\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNotify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eupgradeCh\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esyscall\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSIGHUP\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"n\"\u003eupgradeCh\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;received SIGUP, going to upgrade\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\t\t\u003cspan class=\"c\"\u003e// Pass pid and listenfd to child process\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003eenv\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEnviron\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003eenv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;_PID=%d\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetpid\u003c/span\u003e\u003cspan class=\"p\"\u003e()))\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003eenv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;_FD=%d\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elistenFd\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n\t\t\u003cspan class=\"n\"\u003ecmd\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003eexec\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003ecmd\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEnv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003ecmd\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStdout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStdout\u003c/span\u003e \u003cspan class=\"c\"\u003e// inherit stdout/stderr so we can see logs in the same window\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003ecmd\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStderr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStderr\u003c/span\u003e\n\n\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003ecmd\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStart\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\t\u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\t\t\u003cspan class=\"n\"\u003ecmd\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWait\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\t\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;start new instance (process) done, serving on the same socket\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eServer\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ehandleShutdownSignal\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eshutdownCh\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003echan\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSignal\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003esignal\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNotify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eshutdownCh\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esyscall\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSIGTERM\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esyscall\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\t\u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"n\"\u003eshutdownCh\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;received SIGTERM/SIGINT, going to shutdown\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\t\u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecancel\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWithTimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eBackground\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eShutdown\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;fail to shutdown: %s\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"232-test\"\u003e2.3.2 Test\u003c/h3\u003e\n\n\u003cp\u003eStart a server in termal 1, acting as legacy instance:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo\u003c/span\u003e ./graceful-upgrade\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e2022-12-10T21:17:26 \u003cspan class=\"nv\"\u003ePID\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e201363] server up, listening on :8080\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThe server has a PID=201363. Now test it:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"k\"\u003efor \u003c/span\u003en \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e1..4\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo \u003c/span\u003ecurl 127.0.0.1:8080\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e1\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\n\u003c/span\u003eResponse from process 201363\nResponse from process 201363\nResponse from process 201363\nResponse from process 201363\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eMeet expectation. Now in another terminal, send a upgrade signal to the server:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo kill\u003c/span\u003e \u003cspan class=\"nt\"\u003e-HUP\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003epidof graceful-upgrade\u003cspan class=\"si\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eLogs from the terminal 1 (add one blank line to distinguish logs before and\nafter receiving upgrade signal):\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo\u003c/span\u003e ./graceful-upgrade\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e2022-12-10T21:17:26 \u003cspan class=\"nv\"\u003ePID\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e201363] server up, listening on :8080\n\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e2022-12-10T21:17:44 \u003cspan class=\"nv\"\u003ePID\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e201363] received SIGUP, going to upgrade\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e2022-12-10T21:17:44 \u003cspan class=\"nv\"\u003ePID\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e201363] start new instance \u003cspan class=\"o\"\u003e(\u003c/span\u003eprocess\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003edone\u003c/span\u003e, serving on the same socket\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e2022-12-10T21:17:44 \u003cspan class=\"nv\"\u003ePID\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e201385] duplicated the given socket FD and listening on it\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e2022-12-10T21:17:49 \u003cspan class=\"nv\"\u003ePID\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e201385] 5 seconds have past since new instance up, going to stop the old server\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e2022-12-10T21:17:49 \u003cspan class=\"nv\"\u003ePID\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e201363] received SIGTERM/SIGINT, going to shutdown\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ewhich shows that the upgrade has finished, which new instance PID=201385.\nTest it again:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"k\"\u003efor \u003c/span\u003en \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e1..4\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo \u003c/span\u003ecurl 127.0.0.1:8080\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e1\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\n\u003c/span\u003eResponse from process 201385\nResponse from process 201385\nResponse from process 201385\nResponse from process 201385\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAs expected, all responses came from the new instance (process).\u003c/p\u003e\n\n\u003cp\u003eClean up:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo kill\u003c/span\u003e \u003cspan class=\"nt\"\u003e-9\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003epidof graceful-upgrade\u003cspan class=\"si\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"24-summary\"\u003e2.4 Summary\u003c/h2\u003e\n\n\u003cp\u003eThis ends the first half of our tour. As the title shows, this is an article about\nBPF, but till now, we haven’t see anything that relates to BPF - don’t worry, it comes now.\u003c/p\u003e\n\n\u003ch1 id=\"3-single-process-socket-serving-on-multiple-ports\"\u003e3 Single process (socket) serving on multiple ports\u003c/h1\u003e\n\n\u003cp\u003eIn this section we’ll turn to the second scenario: single socket serving on\nmultiple ports.  We’ll have a demonstration like below:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                +------------------+\n                |   Process(app)   |           \u0026lt;--- TCP echo server\n                +------------------+\n                         |\n                +------------------+\n                |     Socket       |           \u0026lt;---- Socket of the server\n                +------------------+\n                /        |         \\\n        +--------+  +---------+  +----------+\n        | :7@TCP |  | :77@TCP |  | :777@TCP |  \u0026lt;---- Ports the socket listens \u0026amp; servers on\n        +--------+  +---------+  +----------+\n                 \\       |         /\n                 +------------------+\n                 |    ServerIP      |          \u0026lt;---- Server IP\n                 +------------------+\n                         /\\\n                         ||\n                      requests                 \u0026lt;---- Requests from client\n\n                     Scenario 2:\n        Single socket serving on multiple ports\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eTo fulfill this task, we need a kind of BPF program called \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_LOOKUP\u003c/code\u003e.\nBesides, we also need the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epidfd_getfd()\u003c/code\u003e to duplicate file descriptors.\u003c/p\u003e\n\n\u003ch2 id=\"31-bpf_prog_type_sk_lookup-program\"\u003e3.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_LOOKUP\u003c/code\u003e program\u003c/h2\u003e\n\n\u003cp\u003ePosition of socket-level BPF in kernel networking stack:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                      +------------------+\n                      | Socket           |\n                      +------------------+ \u0026lt;-- Socket BPF, e.g. BPF_SK_LOOKUP\n                      | L4 (TCP/UDP/...) |\n                      +------------------+\n                      | L3 (IP)          |\n                      +------------------+  \u0026lt;-- TC BPF\n                      | L2               |\n                      +------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eA more detailed view of where the SK_LOOKUP gets triggered in kernel network stack:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/birth-of-sk-lookup-bpf/bpf_inet_lookup_hook.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Position of the SK_LOOKUP BPF. Image credit Cloudflare [2]\u003c/p\u003e\n\n\u003cp\u003eFrom \u003ca href=\"https://www.kernel.org/doc/html/latest/bpf/prog_sk_lookup.html\"\u003ekernel doc\u003c/a\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eBPF sk_lookup program type (BPF_PROG_TYPE_SK_LOOKUP)\n\u003cstrong\u003e\u003cmark\u003eintroduces programmability into the socket lookup process performed by the transport layer\u003c/mark\u003e\u003c/strong\u003e\nwhen a packet is to be delivered locally.\u003c/li\u003e\n  \u003cli\u003eWhen invoked it can \u003cstrong\u003e\u003cmark\u003eselect a socket that will receive the incoming packet\u003c/mark\u003e\u003c/strong\u003e\nby calling the \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ebpf_sk_assign()\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e BPF helper function.\u003c/li\u003e\n  \u003cli\u003eHooks for a common attach point (BPF_SK_LOOKUP) exist for both TCP and UDP.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"311-motivation\"\u003e3.1.1 Motivation\u003c/h3\u003e\n\n\u003cp\u003eBPF sk_lookup program type was introduced to address setup scenarios where binding sockets to an address with bind() socket call is impractical, such as:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003ereceiving connections on a range of IP addresses, e.g. 192.0.2.0/24, when binding to a wildcard address INADRR_ANY is not possible due to a port conflict,\u003c/li\u003e\n  \u003cli\u003ereceiving connections on all or a wide range of ports, i.e. an L7 proxy use case.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eSuch setups would require creating and bind()’ing one socket to each of the IP address/port in the range, leading to resource consumption and potential latency spikes during socket lookup.\u003c/p\u003e\n\n\u003ch3 id=\"312-attachment\"\u003e3.1.2 Attachment\u003c/h3\u003e\n\n\u003cp\u003eBPF sk_lookup program can be \u003cstrong\u003e\u003cmark\u003eattached to a network namespace\u003c/mark\u003e\u003c/strong\u003e\nwith \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ebpf(BPF_LINK_CREATE, ...)\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e syscall using the\nBPF_SK_LOOKUP attach type and a netns FD as attachment target_fd.\u003c/p\u003e\n\n\u003cp\u003eMultiple programs can be attached to one network namespace. Programs will be invoked in the same order as they were attached.\u003c/p\u003e\n\n\u003ch3 id=\"313-hooks\"\u003e3.1.3 Hooks\u003c/h3\u003e\n\n\u003cp\u003eThe attached BPF sk_lookup programs run whenever the transport layer needs to\n\u003cstrong\u003e\u003cmark\u003efind a listening (TCP) or an unconnected (UDP) socket for an incoming packet\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eIncoming \u003cstrong\u003e\u003cmark\u003etraffic to established (TCP) and connected (UDP) sockets\u003c/mark\u003e\u003c/strong\u003e\nis delivered as usual \u003cstrong\u003e\u003cmark\u003ewithout triggering the BPF sk_lookup hook\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eExamples: \u003ca href=\"https://github.com/torvalds/linux/blob/v5.10/tools/testing/selftests/bpf/prog_tests/sk_lookup.c\"\u003ekernel selftests\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"32-create-a-simple-echo-server\"\u003e3.2 Create a simple echo server\u003c/h2\u003e\n\n\u003cp\u003ePlayground information:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /etc/lsb-release\n\u003cspan class=\"nv\"\u003eDISTRIB_ID\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eUbuntu\n\u003cspan class=\"nv\"\u003eDISTRIB_RELEASE\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e20.04\n\u003cspan class=\"nv\"\u003eDISTRIB_CODENAME\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003efocal\n\u003cspan class=\"nv\"\u003eDISTRIB_DESCRIPTION\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Ubuntu 20.04.5 LTS\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003euname\u003c/span\u003e \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e\n5.15.0-52-generic\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eOur application will be a simple TCP server, which receives requests from client,\nand echo the exact request content back to the client.\u003c/p\u003e\n\n\u003ch3 id=\"321-create-server-with-ncatnc\"\u003e3.2.1 Create server with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003encat/nc\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eOn ubuntu 20.04, there is no \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-e\u003c/code\u003e option support in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enc\u003c/code\u003e, so we just use \u003ccode class=\"language-plaintext highlighter-rouge\"\u003encat\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003encat\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eCreate an echo server, which will execute \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecat\u003c/code\u003e command on receiving a request\nto send the contents back to clients:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003encat \u003cspan class=\"nt\"\u003e-4lke\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003ewhich \u003cspan class=\"nb\"\u003ecat\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e 127.0.0.1 7777\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eCheck the socket’s information:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# -t: Display only TCP sockets\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# -l: Display only listening sockets\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# -p: Show process using socket\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# -n: Numeric output\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# -e: Show detailed (extended) socket information. Format: uid:\u0026lt;uid_number\u0026gt; ino:\u0026lt;inode_number\u0026gt; sk:\u0026lt;cookie\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ess \u003cspan class=\"nt\"\u003e-4tlpne\u003c/span\u003e sport \u003cspan class=\"o\"\u003e=\u003c/span\u003e 7777\nState   Recv-Q  Send-Q  Local Address:Port  Peer Address:Port  Process\nLISTEN  0       10      127.0.0.1:7777      0.0.0.0:\u003cspan class=\"k\"\u003e*\u003c/span\u003e          \u003cspan class=\"nb\"\u003eusers\u003c/span\u003e:\u003cspan class=\"o\"\u003e((\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;ncat\u0026#34;\u003c/span\u003e,pid\u003cspan class=\"o\"\u003e=\u003c/span\u003e122701,fd\u003cspan class=\"o\"\u003e=\u003c/span\u003e3\u003cspan class=\"o\"\u003e))\u003c/span\u003e uid:1000 ino:896838 sk:1 \u0026lt;-\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003euid_number\u003c/code\u003e: the user id the socket belongs to (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1000\u003c/code\u003e in the above output)\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einode_number\u003c/code\u003e: the socket’s inode number in VFS (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e896838\u003c/code\u003e in the above output)\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecookie\u003c/code\u003e: an uuid of the socket (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1\u003c/code\u003e in the above output)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"322-test-accessing\"\u003e3.2.2 Test accessing\u003c/h3\u003e\n\n\u003cp\u003eConnect to the server with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enc\u003c/code\u003e command, then send a \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026#34;hello\u0026#34;\u003c/code\u003e string to server:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enc 127.0.0.1 7777\nhello    \u003cspan class=\"c\"\u003e# message we sent to server\u003c/span\u003e\nhello    \u003cspan class=\"c\"\u003e# message received from server\u003c/span\u003e\n^C\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWorks as expected.\u003c/p\u003e\n\n\u003ch2 id=\"33-bpf-program\"\u003e3.3 BPF program\u003c/h2\u003e\n\n\u003ch3 id=\"331-kernelbpf-code\"\u003e3.3.1 Kernel/BPF code\u003c/h3\u003e\n\n\u003cp\u003eOur BPF code is very simple.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eFirst, declare a BPF map to hold our configuration (ports)\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eThen, declare a BPF_MAP_TYPE_SOCKMAP type BPF map to store the sockets\u003c/p\u003e\n\n    \u003cp\u003eIDs are allocated in a way that makes them suitable as an\n  array index, which allows using the simpler BPF sockmap (an array) instead of a\n  socket hash table.\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Hash table for storing listening ports. Hash key is the port number.\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_map_def\u003c/span\u003e \u003cspan class=\"n\"\u003eSEC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;maps\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eport_map\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_MAP_TYPE_HASH\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emax_entries\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1024\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekey_size\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__u16\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue_size\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__u8\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Hash table for storing sockets (socket pointers)\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_map_def\u003c/span\u003e \u003cspan class=\"n\"\u003eSEC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;maps\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esocket_map\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_MAP_TYPE_SOCKMAP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emax_entries\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekey_size\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__u32\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue_size\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__u64\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThen, the processing logic, ~10 lines of code, this is the entire code:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Program for dispatching packets to sockets\u003c/span\u003e\n\u003cspan class=\"n\"\u003eSEC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;sk_lookup/echo_dispatch\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eecho_dispatch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sk_lookup\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"c1\"\u003e// Check if the given port is being served by a server\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003e__u16\u003c/span\u003e \u003cspan class=\"n\"\u003eport\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocal_port\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// port expected to be listened on by server\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003e__u8\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eopen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_map_lookup_elem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eport_map\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eport\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eopen\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e          \u003cspan class=\"c1\"\u003e// NULL means not found,\u003c/span\u003e\n\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eSK_PASS\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// we just let the packet go\u003c/span\u003e\n\n\t\u003cspan class=\"c1\"\u003e// There is a socket serving on the given port, now try to find it\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_map_lookup_elem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esocket_map\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// socket not found, this is weired, user can choose\u003c/span\u003e\n\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eSK_DROP\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// to drop the packet or let it go, here we just drop it\u003c/span\u003e\n\n\t\u003cspan class=\"c1\"\u003e// Dispatch the packet to the server socket\u003c/span\u003e\n\t\u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sk_assign\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ebpf_sk_release\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Release the reference held by sk\u003c/span\u003e\n\n\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eSK_DROP\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSK_PASS\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThere are already comments explain the code, we re-list them briefly:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003eWhen a packet reaches the TCP layer, the src_port and dst_port can be decoded from the TCP header;\u003c/p\u003e\n\n    \u003cp\u003eThe kernel then try to determine if a socket is listening on the given\n dst_port; and at this time, sk_lookup bpf program is triggered, with a\n \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct bpf_sk_lookup ctx\u003c/code\u003e object initialized and passed to the program; of\n all the parameters in the structure, the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ectx-\u0026gt;local_port\u003c/code\u003e stores the\n \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_port\u003c/code\u003e.  Enter the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eecho_dispatch()\u003c/code\u003e program.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eBPF program checks if the given port is configured;\u003c/p\u003e\n\n    \u003cp\u003eIf not: it’s not our business, just the let the packet go, kernel will handle it correctly;\n If does: find the corresponding socket. Go to step 3.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eFind the socket in our sockmap.\u003c/p\u003e\n\n    \u003cp\u003eOn found, go to 4; on failed, drop the packet;\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eTry to assign the packet to the socket, then release the reference\u003c/p\u003e\n\n    \u003cp\u003eOn success, let the packet go; on failure, drop the packet.\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"332-userspace-code\"\u003e3.3.2 Userspace code\u003c/h3\u003e\n\n\u003cp\u003eWe need a little bit of golang code to load the BPF object into kernel, attach\nto the hook point, and link the BPF program to a network namespace (netns).\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"c\"\u003e// Allow the current process to lock memory for eBPF resources.\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003erlimit\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRemoveMemlock\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003elog\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFatal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\t\u003cspan class=\"c\"\u003e// Load pre-compiled programs and maps into the kernel.\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eobjs\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003ebpfObjects\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003eloadBpfObjects\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eobjs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003elog\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFatalf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;loading objects: %v\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"n\"\u003eobjs\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eClose\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n    \u003cspan class=\"c\"\u003e// Link BPF prog to netns\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003enetns\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eOpen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;/proc/self/ns/net\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c\"\u003e// This can be a path to another netns as well.\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"n\"\u003enetns\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eClose\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n\t\u003cspan class=\"n\"\u003eprog\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003eobjs\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEchoDispatch\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003elink\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003elink\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAttachNetNs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enetns\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFd\u003c/span\u003e\u003cspan class=\"p\"\u003e()),\u003c/span\u003e \u003cspan class=\"n\"\u003eprog\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c\"\u003e// Duplicate socket FD and store the socket to sockmap\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003etargetPid\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"m\"\u003e123602\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003etargetPidFd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003epidfd\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eOpen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etargetPid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\t\u003cspan class=\"n\"\u003etargetFd\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003esockFd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003etargetPidFd\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetFd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etargetFd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\t\u003cspan class=\"k\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e \u003cspan class=\"kt\"\u003euint32\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"kt\"\u003euint64\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003euint64\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esockFd\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003eobjs\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSocketMap\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePut\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\t\u003cspan class=\"n\"\u003elog\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Sleeping for some time ...\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e6000\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\t\u003cspan class=\"c\"\u003e// The socket lookup program is now active until Close().\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003elink\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eClose\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"333-compile-load-attach\"\u003e3.3.3 Compile, load, attach\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emake\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo\u003c/span\u003e ./steer-multi-ports\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"334-configure-with-bpftool-map-update\"\u003e3.3.4 Configure with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftool map update\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eConfirm 7/77/777 are available by scanning the opened ports in the system:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enmap \u003cspan class=\"nt\"\u003e-sT\u003c/span\u003e \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 1-1000 \u0026lt;node ip\u0026gt;\nPORT    STATE SERVICE\n22/tcp  open  ssh\n\nNmap \u003cspan class=\"k\"\u003edone\u003c/span\u003e: 1 IP address \u003cspan class=\"o\"\u003e(\u003c/span\u003e1 host up\u003cspan class=\"o\"\u003e)\u003c/span\u003e scanned \u003cspan class=\"k\"\u003ein \u003c/span\u003e0.05 seconds\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eStart the userspace agent, which will automatically load and attach the BPF\nprogram and BPF maps into kernel:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo\u003c/span\u003e ./steer-multi-ports\n2022/12/10 21:21:52 Loading BPF objects ...\n2022/12/10 21:21:52 Opening netns ...\n2022/12/10 21:21:52 Linking BPF prog to netns ...\n2022/12/10 21:21:52 Pinning BPF \u003cspan class=\"nb\"\u003elink \u003c/span\u003eto bpffs ...\n2022/12/10 21:21:52 Duplicating socket FD ...\n2022/12/10 21:21:52 Target PidFd ...  11\n2022/12/10 21:21:52 Storing duplicated sockFD into sockmap ...  12\n2022/12/10 21:21:52 Sleeping \u003cspan class=\"k\"\u003efor \u003c/span\u003esome \u003cspan class=\"nb\"\u003etime\u003c/span\u003e ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eCheck the loaded BPF programs and BPF maps in kernel:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool prog show\n...\n60: sk_lookup  name echo_dispatch  tag da043673afd29081\n        loaded_at 2022-12-10T21:01:31+0800  uid 0\n        xlated 272B  jited 159B  memlock 4096B  map_ids 6,7 \u003cspan class=\"c\"\u003e# maps used by this program\u003c/span\u003e\n        btf_id 104\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool map show\n6: \u003cspan class=\"nb\"\u003ehash  \u003c/span\u003ename port_map  flags 0x0\n        key 2B  value 1B  max_entries 1024  memlock 8192B\n7: sockmap  name socket_map  flags 0x0\n        key 4B  value 8B  max_entries 1  memlock 4096B\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool map dump \u003cspan class=\"nb\"\u003eid \u003c/span\u003e6\nFound 0 elements\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool map dump \u003cspan class=\"nb\"\u003eid \u003c/span\u003e7\nFound 0 elements\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool \u003cspan class=\"nb\"\u003elink \u003c/span\u003eshow\n3: netns  prog 64\n        netns_ino 4026531840  attach_type sk_lookup\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eStart our server program:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003encat \u003cspan class=\"nt\"\u003e-4lke\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003ewhich \u003cspan class=\"nb\"\u003ecat\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e 127.0.0.1 7777 \u0026amp;\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e1] 122701\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ess \u003cspan class=\"nt\"\u003e-4tlpne\u003c/span\u003e sport \u003cspan class=\"o\"\u003e=\u003c/span\u003e 7777\nState    Recv-Q   Send-Q   Local Address:Port   Peer Address:Port   Process\nLISTEN   0        10       127.0.0.1:7777       0.0.0.0:\u003cspan class=\"k\"\u003e*\u003c/span\u003e           \u003cspan class=\"nb\"\u003eusers\u003c/span\u003e:\u003cspan class=\"o\"\u003e((\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;ncat\u0026#34;\u003c/span\u003e,pid\u003cspan class=\"o\"\u003e=\u003c/span\u003e122701,fd\u003cspan class=\"o\"\u003e=\u003c/span\u003e3\u003cspan class=\"o\"\u003e))\u003c/span\u003e uid:1000 ino:896838 sk:1 \u0026lt;-\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eInsert 7/77/777 (hex format) into BPF map:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool map update \u003cspan class=\"nb\"\u003eid \u003c/span\u003e81 key 0x07 0x00 value 0x00\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool map update \u003cspan class=\"nb\"\u003eid \u003c/span\u003e81 key 0x4d 0x00 value 0x00\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool map update \u003cspan class=\"nb\"\u003eid \u003c/span\u003e81 key 0x09 0x03 value 0x00\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool map dump \u003cspan class=\"nb\"\u003eid \u003c/span\u003e6\nkey: 09 03  value: 00\nkey: 07 00  value: 00\nkey: 4d 00  value: 00\nFound 3 elements\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"335-test\"\u003e3.3.5 Test\u003c/h3\u003e\n\n\u003cp\u003eScan the system ports again:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enmap \u003cspan class=\"nt\"\u003e-sT\u003c/span\u003e \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 1-1000 127.0.0.1\nNmap scan report \u003cspan class=\"k\"\u003efor \u003c/span\u003elocalhost \u003cspan class=\"o\"\u003e(\u003c/span\u003e127.0.0.1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nPORT    STATE SERVICE\n7/tcp   open  \u003cspan class=\"nb\"\u003eecho\n\u003c/span\u003e22/tcp  open  ssh\n77/tcp  open  priv-rje\n777/tcp open  multiling-http\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAs shown in the output, TCP port 7/77/777 have been opened.\u003c/p\u003e\n\n\u003cp\u003eNow send one request to each port,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Steer\u0026#39;\u003c/span\u003e    | \u003cspan class=\"nb\"\u003etimeout \u003c/span\u003e1 nc \u003cspan class=\"nt\"\u003e-4\u003c/span\u003e 127.0.0.1 7\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;on\u0026#39;\u003c/span\u003e       | \u003cspan class=\"nb\"\u003etimeout \u003c/span\u003e1 nc \u003cspan class=\"nt\"\u003e-4\u003c/span\u003e 127.0.0.1 77\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;multiple\u0026#39;\u003c/span\u003e | \u003cspan class=\"nb\"\u003etimeout \u003c/span\u003e1 nc \u003cspan class=\"nt\"\u003e-4\u003c/span\u003e 127.0.0.1 777\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;ports\u0026#39;\u003c/span\u003e    | \u003cspan class=\"nb\"\u003etimeout \u003c/span\u003e1 nc \u003cspan class=\"nt\"\u003e-4\u003c/span\u003e 127.0.0.1 7777\nSteer\non\nmultiple\nports\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWorks as expected!\u003c/p\u003e\n\n\u003ch2 id=\"34-improvement-pin-the-bpf-program-and-bpf-link-to-bpffs\"\u003e3.4 Improvement: pin the BPF program and BPF link to bpffs\u003c/h2\u003e\n\n\u003cp\u003eOur userspace program has nothing to do after finish loading and attaching BPF\nprogram and maps. But it exits after that, the BPF program and BPF maps it\nattached will be dettached and cleaned.\u003c/p\u003e\n\n\u003cp\u003eThe correct way to avoid this problem is using bpffs and pin the BPF programs and\nBPF maps into sysfs. You can do it with golang (the cilium/ebpf libaray we used),\nor, you can also do it with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftool\u003c/code\u003e commands:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir \u003c/span\u003ebpffs\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003emount \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e bpf none ./bpffs\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool map pin \u003cspan class=\"nb\"\u003eid \u003c/span\u003e6 ./bpffs/port_map\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool map pin \u003cspan class=\"nb\"\u003eid \u003c/span\u003e7 ./bpffs/socket_map\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo chown \u003c/span\u003earthurchiao:arthurchiao ./bpffs/\u003cspan class=\"o\"\u003e{\u003c/span\u003eport_map,socket_map\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool prog show pinned /sys/fs/bpf/echo_dispatch_prog\n60: sk_lookup  name echo_dispatch  tag da043673afd29081\n        loaded_at 2022-12-10T21:01:31+0800  uid 0\n        xlated 272B  jited 159B  memlock 4096B  map_ids 6,7\n        btf_id 104\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool \u003cspan class=\"nb\"\u003elink \u003c/span\u003epin \u003cspan class=\"nb\"\u003eid \u003c/span\u003e3 /sys/fs/bpf/echo_dispatch_link\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool \u003cspan class=\"nb\"\u003elink \u003c/span\u003eshow pinned /sys/fs/bpf/echo_dispatch_link\n3: netns  prog 64\n        netns_ino 4026531840  attach_type sk_lookup\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e /proc/self/ns/net\nlrwxrwxrwx 1 arthurchiao arthurchiao /proc/self/ns/net -\u0026gt; \u003cspan class=\"s1\"\u003e\u0026#39;net:[4026531840]\u0026#39;\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool map update pinned ./bpffs/port_map key 0x07 0x00 value 0x00\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool map update pinned ./bpffs/port_map key 0x4d 0x00 value 0x00\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool map update pinned ./bpffs/port_map key 0x09 0x03 value 0x00\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebpftool map dump pinned ./bpffs/port_map\nkey: 09 03  value: 00\nkey: 07 00  value: 00\nkey: 4d 00  value: 00\nFound 3 elements\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"4-summary\"\u003e4 Summary\u003c/h1\u003e\n\n\u003cp\u003eCode used in this post: \u003ca href=\"https://github.com/arthurchiao/pidfd-and-sk-lookup-bpf-illustrated\"\u003egithub.com/arthurchiao/pidfd-and-sk-lookup-bpf-illustrated\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch1 id=\"references\"\u003eReferences\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003eExamples in \u003ca href=\"https://github.com/oraoto/go-pidfd\"\u003egithub.com/oraoto/go-pidfd\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003eCloudflare, \u003ca href=\"https://github.com/jsitnicki/ebpf-summit-2020\"\u003eSteering connections to sockets with BPF socket lookup hook\u003c/a\u003e, eBPF Summit, 2020\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/birth-of-sk-lookup-bpf-zh/\"\u003e\u003cspan\u003e« [译] Socket listen 多地址需求与 SK_LOOKUP BPF 的诞生（LPC, 2019）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/k8s-cgroup-zh/\"\u003e\u003cspan\u003ek8s 基于 cgroup 的资源限额（capacity enforcement）：模型设计与代码实现（2023） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2022-12-11T00:00:00Z",
  "Author": "Arthur Chiao"
}