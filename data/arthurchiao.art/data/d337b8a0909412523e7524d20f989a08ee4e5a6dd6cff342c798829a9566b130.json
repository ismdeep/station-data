{
  "Source": "arthurchiao.art",
  "Title": "tcpdump/wireshark 抓包及分析（2019）",
  "Link": "https://arthurchiao.art/blog/tcpdump-practice-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003etcpdump/wireshark 抓包及分析（2019）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2018-12-14 | Last Update 2020-10-29\u003c/p\u003e\n  \n  \u003cp\u003e本文将展示如何使用 tcpdump 抓包，以及如何用 tcpdump 和 wireshark 分析网络流量。\n文中的例子比较简单，适合作为入门参考。\u003c/p\u003e\n\n\u003ch2 id=\"1-基础环境准备\"\u003e1 基础环境准备\u003c/h2\u003e\n\n\u003cp\u003e为方便大家跟着上手练习，本文将搭建一个容器环境。\u003c/p\u003e\n\n\u003ch3 id=\"11-pull-docker-镜像\"\u003e1.1 Pull Docker 镜像\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003edocker pull alpine:3.8\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"12-运行容器\"\u003e1.2 运行容器\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003edocker run \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e ctn-1 alpine:3.8 \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e3600d\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003edocker ps\nCONTAINER ID    IMAGE        COMMAND         CREATED        STATUS          PORTS  NAMES\n233bc36bde4b    alpine:3.8   \u003cspan class=\"s2\"\u003e\u0026#34;sleep 3600d\u0026#34;\u003c/span\u003e   1 minutes ago  Up 14 minutes           ctn-1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e进入容器：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e ctn-1 sh\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e查看容器网络信息：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e/ \u003cspan class=\"c\"\u003e# ifconfig\u003c/span\u003e\neth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:09\n          inet addr:172.17.0.9  Bcast:0.0.0.0  Mask:255.255.0.0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"13-安装-tcpdump\"\u003e1.3 安装 tcpdump\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e/ \u003cspan class=\"c\"\u003e# apk update\u003c/span\u003e\n/ \u003cspan class=\"c\"\u003e# apk add tcpdump\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"2-httptcp-抓包\"\u003e2 HTTP/TCP 抓包\u003c/h2\u003e\n\n\u003cp\u003e接下来我们用 wget 获取一个网站的首页文件（index.html），同时 tcpdump 抓包，对抓\n到的网络流量进行分析。\u003c/p\u003e\n\n\u003ch3 id=\"21-http-请求下载测试页面\"\u003e2.1 HTTP 请求：下载测试页面\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"www.example.com\"\u003eexample.com\u003c/a\u003e 是一个测试网站，wget 是一个 linux 命令行工\n具，可以下载网络文件。\u003c/p\u003e\n\n\u003cp\u003e如下命令可以下载一个 example.com 网站的首页文件 index.html：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e/ \u003cspan class=\"c\"\u003e# wget http://example.com\u003c/span\u003e\nConnecting to example.com \u003cspan class=\"o\"\u003e(\u003c/span\u003e93.184.216.34:80\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nindex.html           100% |\u003cspan class=\"k\"\u003e*****************************\u003c/span\u003e|  1270   0:00:00 ETA\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e虽然这看起来极其简单，但背后却涵盖了很多复杂的过程，例如：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e域名查找\u003c/strong\u003e：通过访问 DNS 服务查找 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eexample.com\u003c/code\u003e 服务器对应的 IP 地址\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eTCP 连接参数初始化\u003c/strong\u003e：临时端口、初始序列号的选择等等\u003c/li\u003e\n  \u003cli\u003e客户端（容器）通过 \u003cstrong\u003eTCP 三次握手协议\u003c/strong\u003e和服务器 IP 建立 TCP 连接\u003c/li\u003e\n  \u003cli\u003e客户端发起 HTTP GET 请求\u003c/li\u003e\n  \u003cli\u003e服务器返回 HTTP 响应，包含页面数据传输\u003c/li\u003e\n  \u003cli\u003e如果页面超过一个 MTU，会分为多个 packet 进行传输（后面会看到，确实超过 MTU 了）\u003c/li\u003e\n  \u003cli\u003eTCP 断开连接的\u003cstrong\u003e四次挥手\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"22-抓包打到标准输出\"\u003e2.2 抓包：打到标准输出\u003c/h3\u003e\n\n\u003cp\u003e用下面的 tcpdump 命令抓包，另一窗口执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewget http://example.com\u003c/code\u003e，能看到如下类\n似的输出。为了方便后面的讨论，这里将一些字段去掉了，并做了适当的对齐：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e/ \u003cspan class=\"c\"\u003e# tcpdump -n -S -i eth0 host example.com\u003c/span\u003e\n1  02:52:44.513700 IP 172.17.0.9.41038 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 93.184.216.34.80: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS] , \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e3310420140,                            length 0\n2  02:52:44.692890 IP 93.184.216.34.80 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 172.17.0.9.41038: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS.], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e1353235534,            ack 3310420141, length 0\n3  02:52:44.692953 IP 172.17.0.9.41038 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 93.184.216.34.80: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.] ,                            ack 1353235535, length 0\n4  02:52:44.693009 IP 172.17.0.9.41038 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 93.184.216.34.80: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eP.], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e3310420141:3310420215, ack 1353235535, length 74: HTTP: GET / HTTP/1.1\n5  02:52:44.872266 IP 93.184.216.34.80 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 172.17.0.9.41038: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.] ,                            ack 3310420215, length 0\n6  02:52:44.873342 IP 93.184.216.34.80 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 172.17.0.9.41038: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.] , \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e1353235535:1353236983, ack 3310420215, length 1448: HTTP: HTTP/1.1 200 OK\n7  02:52:44.873405 IP 172.17.0.9.41038 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 93.184.216.34.80: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.] ,                            ack 1353236983, length 0\n8  02:52:44.874533 IP 93.184.216.34.80 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 172.17.0.9.41038: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eP.], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e1353236983:1353237162, ack 3310420215, length 179: HTTP\n9  02:52:44.874560 IP 172.17.0.9.41038 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 93.184.216.34.80: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.] ,                            ack 1353237162, length 0\n10 02:52:44.874705 IP 172.17.0.9.41038 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 93.184.216.34.80: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eF.], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e3310420215,            ack 1353237162, length 0\n11 02:52:45.053732 IP 93.184.216.34.80 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 172.17.0.9.41038: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.] ,                            ack 3310420216, length 0\n12 02:52:45.607825 IP 93.184.216.34.80 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 172.17.0.9.41038: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eF.], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e1353237162,            ack 3310420216, length 0\n13 02:52:45.607869 IP 172.17.0.9.41038 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 93.184.216.34.80: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.] ,                            ack 1353237163, length 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e参数说明：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-n\u003c/code\u003e：打印 IP 而不是 hostname，打印端口号而不是协议（例如打印 80 而不是 http）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-S\u003c/code\u003e：打印绝对时间戳\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-i eth0\u003c/code\u003e：指定从 eth0 网卡抓包\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehost example.com\u003c/code\u003e：抓和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eexample.com\u003c/code\u003e 通信的包（双向）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e更多 tcpdump 的常用命令，可以参考\u003ca href=\"https://arthurchiao.github.io/blog/tcpdump/\"\u003etcpdump: An Incomplete Guide\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"23-抓包存文件\"\u003e2.3 抓包：存文件\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-w\u003c/code\u003e 命令可以将抓到的包写到文件，注意这和用重定向方式将输出写到文件是不同的。\n后者写的只是标准输出打印的 LOG，而 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-w\u003c/code\u003e 写的是原始包。\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e/ \u003cspan class=\"c\"\u003e# tcpdump -i eth0 host example.com -w example.pcap\u003c/span\u003e\n^C\n13 packets captured\n13 packets received by filter\n0 packets dropped by kernel\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e生成的 pcap 文件可以用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpdump\u003c/code\u003e 或者 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewireshark\u003c/code\u003e 之类的网络流量分析工具打开。\u003c/p\u003e\n\n\u003ch2 id=\"3-流量分析-tcpdump\"\u003e3 流量分析: tcpdump\u003c/h2\u003e\n\n\u003cp\u003e如果不指定输出的话，tcpdump 会直接将信息打到标准输出，就是我们上面看到的那样。从\n这些输出里，我们看到很多信息。\u003c/p\u003e\n\n\u003ch3 id=\"31-每列说明\"\u003e3.1 每列说明\u003c/h3\u003e\n\n\u003cp\u003e第 1 列是为了讨论方便而加的行号，实际的 tcpdump 输出并没有这一列。接下来将用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#\u003c/code\u003e\n号加数字表示第几个包，例如 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#3\u003c/code\u003e 表示第 3 个包。\u003c/p\u003e\n\n\u003cp\u003e接下来依次为：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003epacket \u003cstrong\u003e时间戳\u003c/strong\u003e，例如 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e02:52:44.513700\u003c/code\u003e 表示抓到这个包的时间是** 02 时 52 分 44 秒 513 毫秒**\u003c/li\u003e\n  \u003cli\u003epacket \u003cstrong\u003e类型\u003c/strong\u003e，这里是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIP\u003c/code\u003e 包\u003c/li\u003e\n  \u003cli\u003e源 (SRC) IP 和端口，目的 (DST) IP 和端口\u003c/li\u003e\n  \u003cli\u003epacket TCP flags，其中\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eS\u003c/code\u003e 表示 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esyn\u003c/code\u003e 包\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e.\u003c/code\u003e 表示 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eack\u003c/code\u003e 包\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eF\u003c/code\u003e 表示 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efin\u003c/code\u003e 包\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eP\u003c/code\u003e 表示 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epush\u003c/code\u003e 包（发送正常数据）\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e序列号（seq）\u003c/li\u003e\n  \u003cli\u003e应答号（ack）\u003c/li\u003e\n  \u003cli\u003e包的 payload 长度\u003c/li\u003e\n  \u003cli\u003e包的部分内容（ASCII）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"32-三次握手13\"\u003e3.2 三次握手（1～3）\u003c/h3\u003e\n\n\u003cp\u003ewget 是基于 HTTP 协议，因此它在下载文件之前，必定要和服务端建立一个连接。\u003c/p\u003e\n\n\u003cp\u003e而 TCP 建立连接的过程就是著名的\u003cstrong\u003e三次握手\u003c/strong\u003e [4]：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eclient -\u0026gt; server: SYN\u003c/li\u003e\n  \u003cli\u003eserver -\u0026gt; client: SYN+ACK\u003c/li\u003e\n  \u003cli\u003eclient -\u0026gt; server: ACK\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e我们可以看到，这刚好对应于前三个包：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e1  02:52:44.513700 IP 172.17.0.9.41038 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 93.184.216.34.80: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS] , \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e3310420140,                 length 0\n2  02:52:44.692890 IP 93.184.216.34.80 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 172.17.0.9.41038: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS.], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e1353235534, ack 3310420141, length 0\n3  02:52:44.692953 IP 172.17.0.9.41038 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 93.184.216.34.80: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.] ,                 ack 1353235535, length 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch4 id=\"第一次握手-syn\"\u003e第一次握手: SYN\u003c/h4\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#1\u003c/code\u003e 包含以下信息：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e02:52:44.513700\u003c/code\u003e 时刻，客户端主动向 server（93.184.216.34）发起一个 SYN 请求，请求建立连接\u003c/li\u003e\n  \u003cli\u003e客户端请求的\u003cstrong\u003e服务端端口是 80\u003c/strong\u003e（HTTP 服务默认 80 端口），客户端使用的是\u003cstrong\u003e临时端口\u003c/strong\u003e（大于 1024）41038\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#1\u003c/code\u003e 序列号是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3310420140\u003c/code\u003e，这是客户端的初始序列号（客户端和服务端分别维护自己的序列号，两者没有关系；另外，初始序列号是系统选择的，一般不是 0）\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#1\u003c/code\u003e length 为 0，因为 SYN 包不带 TCP payload，所有信息都在 TCP header\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4 id=\"第二次握手-synack\"\u003e第二次握手: SYN+ACK\u003c/h4\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#2\u003c/code\u003e 的 ack 是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3310420140\u003c/code\u003e，等于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#1\u003c/code\u003e 的 seq 加 1，这就说明，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#2\u003c/code\u003e 是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#1\u003c/code\u003e 的应\n答包。\u003c/p\u003e\n\n\u003cp\u003e这个应答包的特点：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eTCP flags 为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eS.\u003c/code\u003e，即 SYN+ACK\u003c/li\u003e\n  \u003cli\u003elength 也是 0，说明没有 payload\u003c/li\u003e\n  \u003cli\u003eseq 为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1353235534\u003c/code\u003e，这是\u003cstrong\u003e服务端的初始序列号\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003e到达 eth0 的时间为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e02:52:44.692890\u003c/code\u003e，说明时间过了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e18ms\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4 id=\"第三次握手-ack\"\u003e第三次握手: ACK\u003c/h4\u003e\n\n\u003cp\u003e同理，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#3\u003c/code\u003e 的 ack 等于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#2\u003c/code\u003e 的 seq 加 1，说明 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#3\u003c/code\u003e 是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#2\u003c/code\u003e 的应答包。\u003c/p\u003e\n\n\u003cp\u003e这个包的特点：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eTCP flags 为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e.\u003c/code\u003e，即 ACK\u003c/li\u003e\n  \u003cli\u003e长度为 0，说明没有 TCP payload\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e至此，三次握手完成。\u003c/p\u003e\n\n\u003ch3 id=\"33-正常数据传输\"\u003e3.3 正常数据传输\u003c/h3\u003e\n\n\u003cp\u003e三次握手完成后，client 和 server 开始 HTTP 通信，客户端通过 HTTP GET 方法下载 index.html。\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e4  02:52:44.693009 IP 172.17.0.9.41038 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 93.184.216.34.80: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eP.], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e3310420141:3310420215, ack 1353235535, length 74: HTTP: GET / HTTP/1.1\n5  02:52:44.872266 IP 93.184.216.34.80 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 172.17.0.9.41038: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.] ,                            ack 3310420215, length 0\n6  02:52:44.873342 IP 93.184.216.34.80 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 172.17.0.9.41038: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.] , \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e1353235535:1353236983, ack 3310420215, length 1448: HTTP: HTTP/1.1 200 OK\n7  02:52:44.873405 IP 172.17.0.9.41038 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 93.184.216.34.80: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.] ,                            ack 1353236983, length 0\n8  02:52:44.874533 IP 93.184.216.34.80 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 172.17.0.9.41038: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eP.], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e1353236983:1353237162, ack 3310420215, length 179: HTTP\n9  02:52:44.874560 IP 172.17.0.9.41038 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 93.184.216.34.80: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.] ,                            ack 1353237162, length 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里可以看到：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#4\u003c/code\u003e: client 向 server 发起 HTTP GET 请求，请求路径为根路径（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/\u003c/code\u003e），这个 packet 长度为 74 字节\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#5\u003c/code\u003e: 发送了 ACK 包，对 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#4\u003c/code\u003e 进行确认\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#6\u003c/code\u003e: 发送了 1448 字节的数据给 client\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#7\u003c/code\u003e: client 对 server 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#6\u003c/code\u003e 进行应答\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#8\u003c/code\u003e: server 向 client 端继续发送 179 字节数据\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#9\u003c/code\u003e: client 对 server 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#8\u003c/code\u003e 进行应答\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"34-四次挥手\"\u003e3.4 四次挥手\u003c/h3\u003e\n\n\u003cp\u003e最后是四次挥手 [5]：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eclient -\u0026gt; server: FIN （我们看到的是 FIN+ACK，这是因为这个 FIN 包除了正常的关闭连接功能之外，还被用于应答 client 发过来的前一个包）\u003c/li\u003e\n  \u003cli\u003eserver -\u0026gt; client: ACK\u003c/li\u003e\n  \u003cli\u003eserver -\u0026gt; client: FIN+ACK\u003c/li\u003e\n  \u003cli\u003eclient -\u0026gt; server: ACK\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e10 02:52:44.874705 IP 172.17.0.9.41038 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 93.184.216.34.80: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eF.], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e3310420215, ack 1353237162, length 0\n11 02:52:45.053732 IP 93.184.216.34.80 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 172.17.0.9.41038: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.] ,                 ack 3310420216, length 0\n12 02:52:45.607825 IP 93.184.216.34.80 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 172.17.0.9.41038: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eF.], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e1353237162, ack 3310420216, length 0\n13 02:52:45.607869 IP 172.17.0.9.41038 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 93.184.216.34.80: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.] ,                 ack 1353237163, length 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"4-流量分析-wireshark\"\u003e4 流量分析: wireshark\u003c/h2\u003e\n\n\u003cp\u003etcpdump 可以指定 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-r\u003c/code\u003e 读取 pcap 文件，并以指定的格式输出包的信息，最后输出的内容\n和上面看到的类似。我们上面的流量非常简单，所以看 tcpdump 的输出就够了。\u003c/p\u003e\n\n\u003cp\u003e对于复杂的 pcap，例如，其中包含了上百个 IP 地址、上千个端口、上万个连接的 pcap，\n通过 tcpdump 看输出可能就比较低效了。\u003c/p\u003e\n\n\u003cp\u003e这时，\u003ca href=\"https://www.wireshark.org\"\u003ewireshark\u003c/a\u003e 这样带图形用户界面，且功能强大的网\n络流分析工具就派上了用场。\u003c/p\u003e\n\n\u003cp\u003ewireshark 支持强大的过滤功能，支持按 IP、端口、协议、连接、TCP flag 以及它们的各\n种组合进行过滤，然后进行分析，大大节省网络排障的时间。\u003c/p\u003e\n\n\u003cp\u003ewireshark 官方维护了一个 sample pcap\u003ca href=\"https://wiki.wireshark.org/SampleCapturesA\"\u003e列表\n\u003c/a\u003e，我们拿\n\u003ca href=\"https://wiki.wireshark.org/SampleCaptures?action=AttachFile\u0026amp;do=get\u0026amp;target=iperf-mptcp-0-0.pcap\"\u003eiperf-mptcp-0-0.pcap\u003c/a\u003e\n作为例子来展示如何使用 wireshark。\u003c/p\u003e\n\n\u003ch3 id=\"41-追踪-tcp-流\"\u003e4.1 追踪 TCP 流\u003c/h3\u003e\n\n\u003cp\u003e下载后双击就可以用 wireshark 打开。看到有重传（TCP Retransmition）的包：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcpdump-practice/retrans.jpg\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e在重传的包上，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e右键 -\u0026gt; Follow -\u0026gt; TCP Stream\u003c/code\u003e，会过滤出\u003cstrong\u003e只属于这个连接的包\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcpdump-practice/retrans-stream.jpg\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e我们看到，这个连接只有 3 个包：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#1\u003c/code\u003e 在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e08:00:05.125\u003c/code\u003e 发送出去，请求建立连接\u003c/li\u003e\n  \u003cli\u003e大约 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1s\u003c/code\u003e 后，客户端仍然没有收到服务端的 ACK 包，触发客户端 \u003cstrong\u003eTCP 超时重传\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003e又过了大约 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e2s\u003c/code\u003e，仍然没有收到 ACK 包，\u003cstrong\u003e再次触发超时重传\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003e这里其实还可以看出 TCP 重传的机制：\u003cstrong\u003e指数后退\u003c/strong\u003e，比如第一次等待 1s，第二次等\n待 2s，第三次等待 4s，第四次 8s\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e因此，从这个抓包文件看，这次连接没有建立起来，而直接原因就是 client 没有收到\nserver 的应答包。要跟进这个问题，就需要在 server 端一起抓包，看应答包是否有发出来\n。本文不对此展开。\u003c/p\u003e\n\n\u003ch3 id=\"42-过滤流\"\u003e4.2 过滤流\u003c/h3\u003e\n\n\u003cp\u003e上面的截图我们看到 wireshark 里有 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp.stream eq 1\u003c/code\u003e，这其实就是其强大的过滤表达式。\u003c/p\u003e\n\n\u003cp\u003e我们可以直接手写表达式，然后回车，符合条件的包就会显示出来。而且，在编辑表达式的\n时候，wireshark 有自动提示，还是比较方便的。这些表达式和 tcpdump 的 filter 表达\n式很类似，如果熟悉 tcpdump，那这里不会有太大困难。\u003c/p\u003e\n\n\u003cp\u003e下面举一些例子：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip.addr == 192.168.1.1\u003c/code\u003e 过滤 SRC IP \u003cstrong\u003e或\u003c/strong\u003e DST IP 是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e192.168.1.1\u003c/code\u003e 的包\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip.src_host == 192.168.1.1 and ip.dst_host == 192.168.1.2\u003c/code\u003e 过滤 SRC IP 是\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e192.168.1.1\u003c/code\u003e，并且 DST IP 是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e192.168.1.2\u003c/code\u003e 的包\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp.port == 80\u003c/code\u003e 源端口或目的端口是 80 的包\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp.flags.reset == 1\u003c/code\u003e 过滤 TCP RST 包。先找到 RST 包，然后右键 Follow -\u0026gt; TCP\nStream 是常用的排障方式\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp.analysis.retransmission\u003c/code\u003e 过滤所有的重传包\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"43-导出符合条件的包\"\u003e4.3 导出符合条件的包\u003c/h3\u003e\n\n\u003cp\u003e有时 pcap 文件太大，导致 wireshark 非常慢，而大部分数据包可能是不需要的。在这种情况\n下，可以先用过滤条件筛选出感兴趣的包，然后 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFile -\u0026gt; Export Specified Packets ...\u003c/code\u003e\n，弹出的对话框里，可以选择当前显示的包，或者某个指定区间的包另存为新 pcap。\u003c/p\u003e\n\n\u003cp\u003e然后就可以关闭原来的 pcap，打开新的 pcap 进行分析。\u003c/p\u003e\n\n\u003ch2 id=\"5-总结\"\u003e5 总结\u003c/h2\u003e\n\n\u003cp\u003etcpdump 和 wireshark 功能非常强大，组合起来更是网络排障的首选利器。这里介绍的内\n容只是九牛一毛，更多的时候，你需要 \u003cstrong\u003etcpdump+wireshark+google\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://www.tcpdump.org/manpages/tcpdump.1.html\"\u003eMan Page of tcpdump\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://www.wireshark.org\"\u003eWireshark\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://wiki.wireshark.org/SampleCapturesA\"\u003eWireshark: Sample Pcaps\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Handshaking#TCP_three-way_handshake\"\u003eTCP 3-way Handshaking\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://wiki.wireshark.org/TCP%204-times%20close\"\u003eTCP 4-times Close\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://arthurchiao.github.io/blog/tcpdump/\"\u003etcpdump: An Incomplete Guide\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/tuning-stack-rx-zh/\"\u003e\u003cspan\u003e« [译] Linux 网络栈监控和调优：接收数据（2016）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/dns-practice-zh/\"\u003e\u003cspan\u003eDNS 问题分析示例（2019） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2018-12-14T00:00:00Z",
  "Author": "Arthur Chiao"
}