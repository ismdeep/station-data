{
  "Source": "arthurchiao.art",
  "Title": "BPF 进阶笔记（一）：BPF 程序（BPF Prog）类型详解：使用场景、函数签名、执行位置及程序示例",
  "Link": "https://arthurchiao.art/blog/bpf-advanced-notes-1-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eBPF 进阶笔记（一）：BPF 程序（BPF Prog）类型详解：使用场景、函数签名、执行位置及程序示例\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2021-07-04 | Last Update 2022-12-06\u003c/p\u003e\n  \n  \u003cp\u003e内核目前支持 \u003ca href=\"https://github.com/torvalds/linux/blob/v5.8/include/uapi/linux/bpf.h#L161\"\u003e30 来种\u003c/a\u003e\nBPF 程序类型。对于主要的程序类型，本文将介绍其：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e使用场景\u003c/strong\u003e：适合用来做什么？\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eHook 位置\u003c/strong\u003e：在\u003cstrong\u003e\u003cmark\u003e何处（where）、何时（when）\u003c/mark\u003e\u003c/strong\u003e会触发执行？例如在内核协议栈的哪个位置，或是什么事件触发执行。\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e程序签名\u003c/strong\u003e（程序 \u003cstrong\u003e\u003cmark\u003e入口函数\u003c/mark\u003e\u003c/strong\u003e 签名）\n    \u003col\u003e\n      \u003cli\u003e传入参数：调用到 BPF 程序时，传给它的上下文（context，也就是函数参数）是什么？\u003c/li\u003e\n      \u003cli\u003e返回值：返回值类型、含义、合法列表等。\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e加载方式\u003c/strong\u003e：如何将程序附着（attach）到执行点？\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e程序示例\u003c/strong\u003e：一些实际例子。\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e延伸阅读\u003c/strong\u003e：其他高级主题，例如相关的内核设计与实现。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e本文参考：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://blogs.oracle.com/linux/notes-on-bpf-1\"\u003eBPF: A Tour of Program Types\u003c/a\u003e，内容略老，基于内核 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4.14\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/iovisor/bcc/blob/v0.20.0/docs/kernel-versions.md\"\u003eBPF Features by Linux Kernel Version\u003c/a\u003e，bcc 文档，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ev0.20.0\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"关于-bpf-进阶笔记-系列\"\u003e关于 “BPF 进阶笔记” 系列\u003c/h2\u003e\n\n\u003cp\u003e平时学习和使用 BPF 时所整理。由于是笔记而非教程，因此内容不会追求连贯，有基础的\n同学可作查漏补缺之用。\u003c/p\u003e\n\n\u003cp\u003e文中涉及的代码，如无特殊说明，均基于内核 \u003cstrong\u003e\u003cmark\u003e5.8/5.10\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"/blog/bpf-advanced-notes-1-zh/\"\u003eBPF 进阶笔记（一）：BPF 程序（BPF Prog）类型详解：使用场景、函数签名、执行位置及程序示例\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/bpf-advanced-notes-2-zh/\"\u003eBPF 进阶笔记（二）：BPF Map 类型详解：使用场景、程序示例\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/bpf-advanced-notes-3-zh/\"\u003eBPF 进阶笔记（三）：BPF Map 内核实现\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/bpf-advanced-notes-4-zh/\"\u003eBPF 进阶笔记（四）：调试 BPF 程序\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/bpf-advanced-notes-5-zh/\"\u003eBPF 进阶笔记（五）：几种 TCP 相关的 BPF（sockops、struct_ops、header options）\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#关于-bpf-进阶笔记-系列\" id=\"markdown-toc-关于-bpf-进阶笔记-系列\"\u003e关于 “BPF 进阶笔记” 系列\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#基础\" id=\"markdown-toc-基础\"\u003e基础\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#bpf-程序类型完整列表\" id=\"markdown-toc-bpf-程序类型完整列表\"\u003eBPF 程序类型：完整列表\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#每种程序能使用的-helper-函数完整列表\" id=\"markdown-toc-每种程序能使用的-helper-函数完整列表\"\u003e每种程序能使用的 helper 函数：完整列表\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#bpf-attach-类型完整列表\" id=\"markdown-toc-bpf-attach-类型完整列表\"\u003eBPF attach 类型：完整列表\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#\" id=\"markdown-toc-\"\u003e————————————————————————\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#socket-相关类型\" id=\"markdown-toc-socket-相关类型\"\u003eSocket 相关类型\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#-1\" id=\"markdown-toc--1\"\u003e————————————————————————\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-bpf_prog_type_socket_filter\" id=\"markdown-toc-1-bpf_prog_type_socket_filter\"\u003e1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SOCKET_FILTER\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#使用场景\" id=\"markdown-toc-使用场景\"\u003e使用场景\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#场景一流量过滤复制只读相当于抓包\" id=\"markdown-toc-场景一流量过滤复制只读相当于抓包\"\u003e场景一：流量过滤/复制（只读，相当于抓包）\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#场景二可观测性流量统计\" id=\"markdown-toc-场景二可观测性流量统计\"\u003e场景二：可观测性：流量统计\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#hook-位置sock_queue_rcv_skb\" id=\"markdown-toc-hook-位置sock_queue_rcv_skb\"\u003eHook 位置：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_queue_rcv_skb()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序签名\" id=\"markdown-toc-程序签名\"\u003e程序签名\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#传入参数struct-__sk_buff-\" id=\"markdown-toc-传入参数struct-__sk_buff-\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct __sk_buff *\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#返回值\" id=\"markdown-toc-返回值\"\u003e返回值\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#加载方式setsockopt\" id=\"markdown-toc-加载方式setsockopt\"\u003e加载方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esetsockopt()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序示例\" id=\"markdown-toc-程序示例\"\u003e程序示例\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#1-可观测性内核自带-samplesbpfsockex1--samplesbpfsockex3\" id=\"markdown-toc-1-可观测性内核自带-samplesbpfsockex1--samplesbpfsockex3\"\u003e1. 可观测性：内核自带 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esamples/bpf/sockex1\u003c/code\u003e ~ \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esamples/bpf/sockex3\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#2-流量复制每个包只保留前-n-个字节\" id=\"markdown-toc-2-流量复制每个包只保留前-n-个字节\"\u003e2. 流量复制：每个包只保留前 N 个字节\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#延伸阅读\" id=\"markdown-toc-延伸阅读\"\u003e延伸阅读\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-bpf_prog_type_sock_ops\" id=\"markdown-toc-2-bpf_prog_type_sock_ops\"\u003e2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SOCK_OPS\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#使用场景动态跟踪修改-socket-操作\" id=\"markdown-toc-使用场景动态跟踪修改-socket-操作\"\u003e使用场景：动态跟踪/修改 socket 操作\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#场景一动态跟踪监听-socket-事件\" id=\"markdown-toc-场景一动态跟踪监听-socket-事件\"\u003e场景一：动态跟踪：监听 socket 事件\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#场景二动态修改-socket例如-tcp-建连操作\" id=\"markdown-toc-场景二动态修改-socket例如-tcp-建连操作\"\u003e场景二：动态修改 socket（例如 tcp 建连）操作\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#场景三socket-redirection需要-bpf_prog_type_sk_skb-程序配合\" id=\"markdown-toc-场景三socket-redirection需要-bpf_prog_type_sk_skb-程序配合\"\u003e场景三：socket redirection（需要 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_SKB\u003c/code\u003e 程序配合）\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#hook-位置多个地方\" id=\"markdown-toc-hook-位置多个地方\"\u003eHook 位置：多个地方\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序签名-1\" id=\"markdown-toc-程序签名-1\"\u003e程序签名\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#传入参数-struct-bpf_sock_ops-\" id=\"markdown-toc-传入参数-struct-bpf_sock_ops-\"\u003e传入参数： \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct bpf_sock_ops *\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#返回值-1\" id=\"markdown-toc-返回值-1\"\u003e返回值\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#加载方式attach-到某个-cgroup可使用-bpftool-等工具\" id=\"markdown-toc-加载方式attach-到某个-cgroup可使用-bpftool-等工具\"\u003e加载方式：attach 到某个 cgroup（可使用 bpftool 等工具）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序示例-1\" id=\"markdown-toc-程序示例-1\"\u003e程序示例\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#1-customize-tcp-initial-rto-retransmission-timeout-with-bpf\" id=\"markdown-toc-1-customize-tcp-initial-rto-retransmission-timeout-with-bpf\"\u003e1. Customize TCP initial RTO (retransmission timeout) with BPF\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#2-cracking-kubernetes-node-proxy-aka-kube-proxy其中的第五种实现方式\" id=\"markdown-toc-2-cracking-kubernetes-node-proxy-aka-kube-proxy其中的第五种实现方式\"\u003e2. Cracking kubernetes node proxy (aka kube-proxy)，其中的第五种实现方式\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#3-译-利用-ebpf-sockmapredirection-提升-socket-性能2020\" id=\"markdown-toc-3-译-利用-ebpf-sockmapredirection-提升-socket-性能2020\"\u003e3. (译) 利用 ebpf sockmap/redirection 提升 socket 性能（2020）\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#延伸阅读-1\" id=\"markdown-toc-延伸阅读-1\"\u003e延伸阅读\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-bpf_prog_type_sk_skb\" id=\"markdown-toc-3-bpf_prog_type_sk_skb\"\u003e3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_SKB\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#使用场景-1\" id=\"markdown-toc-使用场景-1\"\u003e使用场景\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#场景一修改-skbsocket-信息socket-重定向\" id=\"markdown-toc-场景一修改-skbsocket-信息socket-重定向\"\u003e场景一：修改 skb/socket 信息，socket 重定向\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#场景二动态解析消息流stream-parsing\" id=\"markdown-toc-场景二动态解析消息流stream-parsing\"\u003e场景二：动态解析消息流（stream parsing）\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#hook-位置\" id=\"markdown-toc-hook-位置\"\u003eHook 位置\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#socket-redirection-类型\" id=\"markdown-toc-socket-redirection-类型\"\u003esocket redirection 类型\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#strparser-类型smap_parse_func_strparser--smap_verdict_func\" id=\"markdown-toc-strparser-类型smap_parse_func_strparser--smap_verdict_func\"\u003estrparser 类型：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esmap_parse_func_strparser()\u003c/code\u003e / \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esmap_verdict_func()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序签名-2\" id=\"markdown-toc-程序签名-2\"\u003e程序签名\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#传入参数-struct-__sk_buff-\" id=\"markdown-toc-传入参数-struct-__sk_buff-\"\u003e传入参数： \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct __sk_buff *\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#返回值-2\" id=\"markdown-toc-返回值-2\"\u003e返回值\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#加载方式attach-到某个-sockmap可使用-bpftool-等工具\" id=\"markdown-toc-加载方式attach-到某个-sockmap可使用-bpftool-等工具\"\u003e加载方式：attach 到某个 sockmap（可使用 bpftool 等工具）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序示例-2\" id=\"markdown-toc-程序示例-2\"\u003e程序示例\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#1-译-利用-ebpf-sockmapredirection-提升-socket-性能2020\" id=\"markdown-toc-1-译-利用-ebpf-sockmapredirection-提升-socket-性能2020\"\u003e1. (译) 利用 ebpf sockmap/redirection 提升 socket 性能（2020）\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#2-strparser-框架解析消息流\" id=\"markdown-toc-2-strparser-框架解析消息流\"\u003e2. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estrparser\u003c/code\u003e 框架：解析消息流\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#延伸阅读-2\" id=\"markdown-toc-延伸阅读-2\"\u003e延伸阅读\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-bpf_prog_type_sk_msg\" id=\"markdown-toc-4-bpf_prog_type_sk_msg\"\u003e4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_MSG\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-bpf_prog_type_sk_reuseport\" id=\"markdown-toc-5-bpf_prog_type_sk_reuseport\"\u003e5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_REUSEPORT\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#使用场景-2\" id=\"markdown-toc-使用场景-2\"\u003e使用场景\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#场景一发布系统新老进程无损流量切换\" id=\"markdown-toc-场景一发布系统新老进程无损流量切换\"\u003e场景一：发布系统：新老进程无损流量切换\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#场景二加速-socket-查找\" id=\"markdown-toc-场景二加速-socket-查找\"\u003e场景二：加速 socket 查找\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#hook-位置-1\" id=\"markdown-toc-hook-位置-1\"\u003eHook 位置\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序签名-3\" id=\"markdown-toc-程序签名-3\"\u003e程序签名\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#传入参数\" id=\"markdown-toc-传入参数\"\u003e传入参数\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#返回值-3\" id=\"markdown-toc-返回值-3\"\u003e返回值\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#内核实现\" id=\"markdown-toc-内核实现\"\u003e内核实现\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#6-bpf_prog_type_sk_lookup\" id=\"markdown-toc-6-bpf_prog_type_sk_lookup\"\u003e6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_LOOKUP\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#使用场景-3\" id=\"markdown-toc-使用场景-3\"\u003e使用场景\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#-2\" id=\"markdown-toc--2\"\u003e————————————————————————\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#tc-子系统相关类型\" id=\"markdown-toc-tc-子系统相关类型\"\u003eTC 子系统相关类型\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#-3\" id=\"markdown-toc--3\"\u003e————————————————————————\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-bpf_prog_type_sched_cls\" id=\"markdown-toc-1-bpf_prog_type_sched_cls\"\u003e1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SCHED_CLS\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#使用场景-4\" id=\"markdown-toc-使用场景-4\"\u003e使用场景\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#场景一tc-分类器\" id=\"markdown-toc-场景一tc-分类器\"\u003e场景一：tc 分类器\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#hook-位置sch_handle_ingresssch_handle_egress\" id=\"markdown-toc-hook-位置sch_handle_ingresssch_handle_egress\"\u003eHook 位置：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_handle_ingress()\u003c/code\u003e/\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_handle_egress()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序签名-4\" id=\"markdown-toc-程序签名-4\"\u003e程序签名\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#传入参数struct-__sk_buff--1\" id=\"markdown-toc-传入参数struct-__sk_buff--1\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct __sk_buff *\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#返回值-4\" id=\"markdown-toc-返回值-4\"\u003e返回值\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#加载方式tc-命令背后使用-netlink\" id=\"markdown-toc-加载方式tc-命令背后使用-netlink\"\u003e加载方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc\u003c/code\u003e 命令（背后使用 netlink）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序示例-3\" id=\"markdown-toc-程序示例-3\"\u003e程序示例\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#延伸阅读-3\" id=\"markdown-toc-延伸阅读-3\"\u003e延伸阅读\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-bpf_prog_type_sched_act\" id=\"markdown-toc-2-bpf_prog_type_sched_act\"\u003e2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SCHED_ACT\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#使用场景-5\" id=\"markdown-toc-使用场景-5\"\u003e使用场景\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#场景一tc-action\" id=\"markdown-toc-场景一tc-action\"\u003e场景一：tc action\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#hook-位置-2\" id=\"markdown-toc-hook-位置-2\"\u003eHook 位置\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序签名-5\" id=\"markdown-toc-程序签名-5\"\u003e程序签名\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#加载方式tc-命令\" id=\"markdown-toc-加载方式tc-命令\"\u003e加载方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc\u003c/code\u003e 命令\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#延伸阅读-4\" id=\"markdown-toc-延伸阅读-4\"\u003e延伸阅读\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#-4\" id=\"markdown-toc--4\"\u003e————————————————————————\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#xdpexpress-data-path程序\" id=\"markdown-toc-xdpexpress-data-path程序\"\u003eXDP（eXpress Data Path）程序\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#-5\" id=\"markdown-toc--5\"\u003e————————————————————————\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-bpf_prog_type_xdp\" id=\"markdown-toc-1-bpf_prog_type_xdp\"\u003e1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_XDP\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#使用场景-6\" id=\"markdown-toc-使用场景-6\"\u003e使用场景\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#场景一防火墙四层负载均衡等\" id=\"markdown-toc-场景一防火墙四层负载均衡等\"\u003e场景一：防火墙、四层负载均衡等\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#hook-位置网络驱动\" id=\"markdown-toc-hook-位置网络驱动\"\u003eHook 位置：网络驱动\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序签名-6\" id=\"markdown-toc-程序签名-6\"\u003e程序签名\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#传入参数struct-xdp_md-\" id=\"markdown-toc-传入参数struct-xdp_md-\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct xdp_md *\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#返回值enum-xdp_action\" id=\"markdown-toc-返回值enum-xdp_action\"\u003e返回值：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eenum xdp_action\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#加载方式netlink-socket\" id=\"markdown-toc-加载方式netlink-socket\"\u003e加载方式：netlink socket\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序示例-4\" id=\"markdown-toc-程序示例-4\"\u003e程序示例\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#1-samplesbpfbpf_loadc\" id=\"markdown-toc-1-samplesbpfbpf_loadc\"\u003e1. samples/bpf/bpf_load.c\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#延伸阅读-5\" id=\"markdown-toc-延伸阅读-5\"\u003e延伸阅读\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#-6\" id=\"markdown-toc--6\"\u003e————————————————————————\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#cgroup-v2-相关类型\" id=\"markdown-toc-cgroup-v2-相关类型\"\u003ecgroup (v2) 相关类型\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#-7\" id=\"markdown-toc--7\"\u003e————————————————————————\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#0-cgroup-bpf-通用调用栈\" id=\"markdown-toc-0-cgroup-bpf-通用调用栈\"\u003e0 cgroup BPF 通用调用栈\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#01-创建-socket-时初始化其-cgroupv2-配置\" id=\"markdown-toc-01-创建-socket-时初始化其-cgroupv2-配置\"\u003e0.1 创建 socket 时初始化其 cgroupv2 配置\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#02-入向ingresshook-处理\" id=\"markdown-toc-02-入向ingresshook-处理\"\u003e0.2 入向（ingress）hook 处理\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#03-出向egresshook-处理\" id=\"markdown-toc-03-出向egresshook-处理\"\u003e0.3 出向（egress）hook 处理\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-bpf_prog_type_cgroup_skb\" id=\"markdown-toc-1-bpf_prog_type_cgroup_skb\"\u003e1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_CGROUP_SKB\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#使用场景-7\" id=\"markdown-toc-使用场景-7\"\u003e使用场景\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#场景一在-cgroup-级别放行丢弃数据包\" id=\"markdown-toc-场景一在-cgroup-级别放行丢弃数据包\"\u003e场景一：在 cgroup 级别：放行/丢弃数据包\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#hook-位置-3\" id=\"markdown-toc-hook-位置-3\"\u003eHook 位置\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#入向__sk_receive_skbtcp_v4_rcv-tcp_filterudp_queue_rcv_one_skb---sk_filter_trim_cap\" id=\"markdown-toc-入向__sk_receive_skbtcp_v4_rcv-tcp_filterudp_queue_rcv_one_skb---sk_filter_trim_cap\"\u003e入向：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__sk_receive_skb\u003c/code\u003e/\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_v4_rcv-\u0026gt;tcp_filter\u003c/code\u003e/\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_queue_rcv_one_skb\u003c/code\u003e -\u0026gt; \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_filter_trim_cap()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#出向ip6_finish_output\" id=\"markdown-toc-出向ip6_finish_output\"\u003e出向：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip[6]_finish_output()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序签名-7\" id=\"markdown-toc-程序签名-7\"\u003e程序签名\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#传入参数struct-sk_buff-skb\" id=\"markdown-toc-传入参数struct-sk_buff-skb\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sk_buff *skb\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#返回值-5\" id=\"markdown-toc-返回值-5\"\u003e返回值\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#加载方式attach-到-cgroup-文件描述符\" id=\"markdown-toc-加载方式attach-到-cgroup-文件描述符\"\u003e加载方式：attach 到 cgroup 文件描述符\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-bpf_prog_type_cgroup_sock\" id=\"markdown-toc-2-bpf_prog_type_cgroup_sock\"\u003e2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_CGROUP_SOCK\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#使用场景-8\" id=\"markdown-toc-使用场景-8\"\u003e使用场景\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#场景一在-cgroup-级别触发-socket-操作时拒绝放行网络访问\" id=\"markdown-toc-场景一在-cgroup-级别触发-socket-操作时拒绝放行网络访问\"\u003e场景一：在 cgroup 级别：触发 socket 操作时拒绝/放行网络访问\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序签名-8\" id=\"markdown-toc-程序签名-8\"\u003e程序签名\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#传入参数struct-sk_buff-skb-1\" id=\"markdown-toc-传入参数struct-sk_buff-skb-1\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sk_buff *skb\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#返回值-6\" id=\"markdown-toc-返回值-6\"\u003e返回值\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#触发执行inet_create\" id=\"markdown-toc-触发执行inet_create\"\u003e触发执行：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einet_create()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#加载方式attach-到-cgroup-文件描述符-1\" id=\"markdown-toc-加载方式attach-到-cgroup-文件描述符-1\"\u003e加载方式：attach 到 cgroup 文件描述符\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-bpf_prog_type_cgroup_device\" id=\"markdown-toc-3-bpf_prog_type_cgroup_device\"\u003e3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_CGROUP_DEVICE\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#使用场景-9\" id=\"markdown-toc-使用场景-9\"\u003e使用场景\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#场景一设备文件device-file访问控制\" id=\"markdown-toc-场景一设备文件device-file访问控制\"\u003e场景一：设备文件（device file）访问控制\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序签名-9\" id=\"markdown-toc-程序签名-9\"\u003e程序签名\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#传入参数struct-bpf_cgroup_dev_ctx-\" id=\"markdown-toc-传入参数struct-bpf_cgroup_dev_ctx-\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct bpf_cgroup_dev_ctx *\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#返回值-7\" id=\"markdown-toc-返回值-7\"\u003e返回值\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#触发执行创建或访问设备文件时\" id=\"markdown-toc-触发执行创建或访问设备文件时\"\u003e触发执行：创建或访问设备文件时\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#加载方式attach-到-cgroup-文件描述符-2\" id=\"markdown-toc-加载方式attach-到-cgroup-文件描述符-2\"\u003e加载方式：attach 到 cgroup 文件描述符\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序示例-5\" id=\"markdown-toc-程序示例-5\"\u003e程序示例\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#延伸阅读-6\" id=\"markdown-toc-延伸阅读-6\"\u003e延伸阅读\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#-8\" id=\"markdown-toc--8\"\u003e————————————————————————\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#kprobestracepointsperf-events\" id=\"markdown-toc-kprobestracepointsperf-events\"\u003ekprobes、tracepoints、perf events\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#-9\" id=\"markdown-toc--9\"\u003e————————————————————————\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-bpf_prog_type_kprobe\" id=\"markdown-toc-1-bpf_prog_type_kprobe\"\u003e1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_KPROBE\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#使用场景-10\" id=\"markdown-toc-使用场景-10\"\u003e使用场景\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#场景一观测内核函数kprobe和用户空间函数uprobe\" id=\"markdown-toc-场景一观测内核函数kprobe和用户空间函数uprobe\"\u003e场景一：观测内核函数（kprobe）和用户空间函数（uprobe）\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#hook-位置kretprobe_perf_funcuretprobe_perf_func\" id=\"markdown-toc-hook-位置kretprobe_perf_funcuretprobe_perf_func\"\u003eHook 位置：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ek[ret]probe_perf_func()\u003c/code\u003e/\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eu[ret]probe_perf_func()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序签名-10\" id=\"markdown-toc-程序签名-10\"\u003e程序签名\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#传入参数struct-pt_regs-ctx\" id=\"markdown-toc-传入参数struct-pt_regs-ctx\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct pt_regs *ctx\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#返回值-8\" id=\"markdown-toc-返回值-8\"\u003e返回值\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#加载方式sysfsdebugtracing-目录下的配置文件\" id=\"markdown-toc-加载方式sysfsdebugtracing-目录下的配置文件\"\u003e加载方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/fs/debug/tracing/\u003c/code\u003e 目录下的配置文件\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序示例-6\" id=\"markdown-toc-程序示例-6\"\u003e程序示例\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#延伸阅读-7\" id=\"markdown-toc-延伸阅读-7\"\u003e延伸阅读\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-bpf_prog_type_tracepoint\" id=\"markdown-toc-2-bpf_prog_type_tracepoint\"\u003e2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_TRACEPOINT\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#使用场景-11\" id=\"markdown-toc-使用场景-11\"\u003e使用场景\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#场景一instrument-内核代码中的-tracepoints\" id=\"markdown-toc-场景一instrument-内核代码中的-tracepoints\"\u003e场景一：Instrument 内核代码中的 tracepoints\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#hook-位置perf_trace_event_class\" id=\"markdown-toc-hook-位置perf_trace_event_class\"\u003eHook 位置：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf_trace_\u0026lt;event_class\u0026gt;()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序签名-11\" id=\"markdown-toc-程序签名-11\"\u003e程序签名\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#传入参数因-tracepoint-而异\" id=\"markdown-toc-传入参数因-tracepoint-而异\"\u003e传入参数：因 tracepoint 而异\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#返回值-9\" id=\"markdown-toc-返回值-9\"\u003e返回值\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#加载方式sysfsdebugtracing-目录下的配置文件-1\" id=\"markdown-toc-加载方式sysfsdebugtracing-目录下的配置文件-1\"\u003e加载方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/fs/debug/tracing/\u003c/code\u003e 目录下的配置文件\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-bpf_prog_type_perf_event\" id=\"markdown-toc-3-bpf_prog_type_perf_event\"\u003e3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_PERF_EVENT\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#使用场景-12\" id=\"markdown-toc-使用场景-12\"\u003e使用场景\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#场景一instrument-软件硬件-perf-事件\" id=\"markdown-toc-场景一instrument-软件硬件-perf-事件\"\u003e场景一：Instrument 软件/硬件 perf 事件\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#加载方式ioctl\" id=\"markdown-toc-加载方式ioctl\"\u003e加载方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eioctl()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序签名-12\" id=\"markdown-toc-程序签名-12\"\u003e程序签名\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#传入参数struct-bpf_perf_event_data-\" id=\"markdown-toc-传入参数struct-bpf_perf_event_data-\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct bpf_perf_event_data *\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#触发执行每个采样间隔执行一次\" id=\"markdown-toc-触发执行每个采样间隔执行一次\"\u003e触发执行：每个采样间隔执行一次\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#-10\" id=\"markdown-toc--10\"\u003e————————————————————————\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#轻量级隧道类型\" id=\"markdown-toc-轻量级隧道类型\"\u003e轻量级隧道类型\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#-11\" id=\"markdown-toc--11\"\u003e————————————————————————\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-bpf_prog_type_lwt_in\" id=\"markdown-toc-1-bpf_prog_type_lwt_in\"\u003e1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_LWT_IN\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#使用场景-13\" id=\"markdown-toc-使用场景-13\"\u003e使用场景\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#场景一检查入向流量是否需要做解封装decap\" id=\"markdown-toc-场景一检查入向流量是否需要做解封装decap\"\u003e场景一：检查入向流量是否需要做解封装（decap）\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#hook-位置lwtunnel_input\" id=\"markdown-toc-hook-位置lwtunnel_input\"\u003eHook 位置：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elwtunnel_input()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序签名-13\" id=\"markdown-toc-程序签名-13\"\u003e程序签名\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#传入参数struct-sk_buff-\" id=\"markdown-toc-传入参数struct-sk_buff-\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sk_buff *\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#返回值-10\" id=\"markdown-toc-返回值-10\"\u003e返回值\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#加载方式ip-route-add\" id=\"markdown-toc-加载方式ip-route-add\"\u003e加载方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip route add\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#延伸阅读-8\" id=\"markdown-toc-延伸阅读-8\"\u003e延伸阅读\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-bpf_prog_type_lwt_out\" id=\"markdown-toc-2-bpf_prog_type_lwt_out\"\u003e2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_LWT_OUT\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#使用场景-14\" id=\"markdown-toc-使用场景-14\"\u003e使用场景\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#场景一对出向流量做封装encap\" id=\"markdown-toc-场景一对出向流量做封装encap\"\u003e场景一：对出向流量做封装（encap）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#加载方式ip-route-add-1\" id=\"markdown-toc-加载方式ip-route-add-1\"\u003e加载方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip route add\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序签名-14\" id=\"markdown-toc-程序签名-14\"\u003e程序签名\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#传入参数struct-__sk_buff--2\" id=\"markdown-toc-传入参数struct-__sk_buff--2\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct __sk_buff *\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#触发执行lwtunnel_output\" id=\"markdown-toc-触发执行lwtunnel_output\"\u003e触发执行：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elwtunnel_output()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-bpf_prog_type_lwt_xmit\" id=\"markdown-toc-3-bpf_prog_type_lwt_xmit\"\u003e3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_LWT_XMIT\u003c/code\u003e\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#使用场景-15\" id=\"markdown-toc-使用场景-15\"\u003e使用场景\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#场景一实现轻量级隧道发送端的-encapredir-方法\" id=\"markdown-toc-场景一实现轻量级隧道发送端的-encapredir-方法\"\u003e场景一：实现轻量级隧道发送端的 encap/redir 方法\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#hook-位置lwtunnel_xmit\" id=\"markdown-toc-hook-位置lwtunnel_xmit\"\u003eHook 位置：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elwtunnel_xmit()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#程序签名-15\" id=\"markdown-toc-程序签名-15\"\u003e程序签名\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#传入参数struct-__sk_buff--3\" id=\"markdown-toc-传入参数struct-__sk_buff--3\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct __sk_buff *\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#加载方式ip-route-add-2\" id=\"markdown-toc-加载方式ip-route-add-2\"\u003e加载方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip route add\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"基础\"\u003e基础\u003c/h1\u003e\n\n\u003ch2 id=\"bpf-程序类型完整列表\"\u003eBPF 程序类型：完整列表\u003c/h2\u003e\n\n\u003cp\u003eKernel 5.10 支持的 BPF 程序类型：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// https://github.com/torvalds/linux/blob/v5.10/include/uapi/linux/bpf.h#L170\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_prog_type\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_UNSPEC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_SOCKET_FILTER\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_KPROBE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_SCHED_CLS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_SCHED_ACT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_TRACEPOINT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_XDP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_PERF_EVENT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_CGROUP_SKB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_CGROUP_SOCK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_LWT_IN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_LWT_OUT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_LWT_XMIT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_SOCK_OPS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_SK_SKB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_CGROUP_DEVICE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_SK_MSG\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_RAW_TRACEPOINT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_CGROUP_SOCK_ADDR\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_LWT_SEG6LOCAL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_LIRC_MODE2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_SK_REUSEPORT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_FLOW_DISSECTOR\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_CGROUP_SYSCTL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_CGROUP_SOCKOPT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_TRACING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_STRUCT_OPS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_EXT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_LSM\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_PROG_TYPE_SK_LOOKUP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"每种程序能使用的-helper-函数完整列表\"\u003e每种程序能使用的 helper 函数：完整列表\u003c/h2\u003e\n\n\u003cp\u003e见 \u003ca href=\"https://github.com/iovisor/bcc/blob/master/docs/kernel-versions.md#program-types\"\u003ebcc 维护的文档\u003c/a\u003e。\n\u003ca name=\"enum-bpf_attach_type\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"bpf-attach-类型完整列表\"\u003eBPF attach 类型：完整列表\u003c/h2\u003e\n\n\u003cp\u003e通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esocket()\u003c/code\u003e 系统调用将 BPF 程序 attach 到 hook 点时用到，\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// https://github.com/torvalds/linux/blob/v5.10/include/uapi/linux/bpf.h#L204\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_attach_type\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_INET_INGRESS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_INET_EGRESS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_INET_SOCK_CREATE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_SOCK_OPS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_SK_SKB_STREAM_PARSER\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_SK_SKB_STREAM_VERDICT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_DEVICE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_SK_MSG_VERDICT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_INET4_BIND\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_INET6_BIND\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_INET4_CONNECT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_INET6_CONNECT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_INET4_POST_BIND\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_INET6_POST_BIND\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_UDP4_SENDMSG\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_UDP6_SENDMSG\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_LIRC_MODE2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_FLOW_DISSECTOR\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_SYSCTL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_UDP4_RECVMSG\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_UDP6_RECVMSG\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_GETSOCKOPT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_SETSOCKOPT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_TRACE_RAW_TP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_TRACE_FENTRY\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_TRACE_FEXIT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_MODIFY_RETURN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_LSM_MAC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_TRACE_ITER\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_INET4_GETPEERNAME\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_INET6_GETPEERNAME\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_INET4_GETSOCKNAME\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_INET6_GETSOCKNAME\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_XDP_DEVMAP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_INET_SOCK_RELEASE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_XDP_CPUMAP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_SK_LOOKUP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_XDP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__MAX_BPF_ATTACH_TYPE\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_CGROUP_DEVICE\u003c/code\u003e 使用场景可参考 \u003ca href=\"/blog/cgroupv2-zh/\"\u003e(译) Control Group v2 (cgroupv2)（KernelDoc, 2021）\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch1\u003e————————————————————————\u003c/h1\u003e\n\u003ch1 id=\"socket-相关类型\"\u003eSocket 相关类型\u003c/h1\u003e\n\u003ch1 id=\"-1\"\u003e————————————————————————\u003c/h1\u003e\n\n\u003cp\u003e用于 \u003cstrong\u003e\u003cmark\u003e过滤和重定向 socket 数据，或者监听 socket 事件\u003c/mark\u003e\u003c/strong\u003e。类型包括：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SOCKET_FILTER\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SOCK_OPS\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_SKB\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_MSG\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_REUSEPORT\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_LOOKUP\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"1-bpf_prog_type_socket_filter\"\u003e1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SOCKET_FILTER\u003c/code\u003e\u003c/h1\u003e\n\n\u003ch2 id=\"使用场景\"\u003e使用场景\u003c/h2\u003e\n\n\u003ch3 id=\"场景一流量过滤复制只读相当于抓包\"\u003e场景一：流量过滤/复制（只读，相当于抓包）\u003c/h3\u003e\n\n\u003cp\u003e从名字 \u003cstrong\u003e\u003cmark\u003eSOCKET_FILTER\u003c/mark\u003e\u003c/strong\u003e 可以看出，这种类型的 BPF 程序能对流量进行\n过滤（filtering）。\u003c/p\u003e\n\n\u003ch3 id=\"场景二可观测性流量统计\"\u003e场景二：可观测性：流量统计\u003c/h3\u003e\n\n\u003cp\u003e仍然是对流量进行过滤，但只统计流量信息，不要包本身。\u003c/p\u003e\n\n\u003ch2 id=\"hook-位置sock_queue_rcv_skb\"\u003eHook 位置：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_queue_rcv_skb()\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e在 \u003ca href=\"https://github.com/torvalds/linux/blob/v5.10/net/core/sock.c#L473\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_queue_rcv_skb()\u003c/code\u003e\u003c/a\u003e 中触发执行：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/core/sock.c\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// 处理 socket 入向流量，TCP/UDP/ICMP/raw-socket 等协议类型都会执行到这里\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003esock_queue_rcv_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esk_filter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 执行 BPF 代码，这里返回的 err 表示对这个包保留前多少字节（trim）\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e                  \u003cspan class=\"c1\"\u003e// 如果字节数大于 0\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e           \u003cspan class=\"c1\"\u003e// 跳过接下来的处理逻辑，直接返回到更上层\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// 如果字节数等于 0，继续执行内核正常的 socket receive 逻辑\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003e__sock_queue_rcv_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"程序签名\"\u003e程序签名\u003c/h2\u003e\n\n\u003cp\u003e\u003ca name=\"struct-__sk_buff\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"传入参数struct-__sk_buff-\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct __sk_buff *\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e上面可以看到，hook 入口 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_filter(sk, skb)\u003c/code\u003e 传的是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sk_buff *skb\u003c/code\u003e，\n但经过层层传递，最终传递给 BPF 程序的其实是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct __sk_buff *\u003c/code\u003e。\n这个结构体的\u003cstrong\u003e\u003cmark\u003e定义\u003c/mark\u003e\u003c/strong\u003e见 \u003ca href=\"https://github.com/torvalds/linux/blob/v5.10/include/uapi/linux/bpf.h#L4080\"\u003einclude/uapi/linux/bpf.h\u003c/a\u003e，\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/uapi/linux/bpf.h\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// user accessible mirror of in-kernel sk_buff.\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003e__sk_buff\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e如注释所说，它是对 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sk_buff\u003c/code\u003e 的\u003cstrong\u003e\u003cmark\u003e用户可访问字段\u003c/mark\u003e\u003c/strong\u003e的镜像。\u003c/li\u003e\n  \u003cli\u003eBPF 程序中对 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct __sk_buff\u003c/code\u003e 字段的访问，将会被 \u003cstrong\u003e\u003cmark\u003eBPF 校验器转换成对相应的\nstruct sk_buff 字段的访问\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e为什么要多引入这一层封装\u003c/mark\u003e\u003c/strong\u003e，见 \u003ca href=\"https://lwn.net/Articles/636647\"\u003ebpf: allow extended BPF programs access skb fields\u003c/a\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"返回值\"\u003e返回值\u003c/h3\u003e\n\n\u003cp\u003e再来看一下 hook 前后的逻辑：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/core/sock.c\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// 处理 socket 入向流量，TCP/UDP/ICMP/raw-socket 等协议类型都会执行到这里\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003esock_queue_rcv_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esk_filter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 执行 BPF 代码，这里返回的 err 表示对这个包保留前多少字节（trim）\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e                  \u003cspan class=\"c1\"\u003e// 如果字节数大于 0\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e           \u003cspan class=\"c1\"\u003e// 跳过接下来的处理逻辑，直接返回到更上层\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// 如果字节数等于 0，继续执行内核正常的 socket receive 逻辑\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003e__sock_queue_rcv_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_filter()\u003c/code\u003e 的返回值 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eerr\u003c/code\u003e\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eerr != 0\u003c/code\u003e：直接 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ereturn err\u003c/code\u003e，返回到调用方，\u003cstrong\u003e\u003cmark\u003e不再继续原来正常的内核处理逻辑\u003c/mark\u003e\u003c/strong\u003e \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__sock_queue_rcv_skb()\u003c/code\u003e；所以效果就是：\u003cstrong\u003e\u003cmark\u003e将这个包过滤了出来\u003c/mark\u003e\u003c/strong\u003e（符合过滤条件）；\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eerr == 0\u003c/code\u003e：接下来继续执行正常的内核处理，也就是\u003cstrong\u003e\u003cmark\u003e这个包不符合过滤条件\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e所以至此大概就知道要实现过滤和截断功能，程序应该返回什么了。要精确搞清楚，需要\n看 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_filter()\u003c/code\u003e 一直调用到 BPF 程序的代码，看中间是否对 BPF 程序的返回值做了封\n装和转换。\u003c/p\u003e\n\n\u003cp\u003e这里给出结论：BPF 程序的\u003cstrong\u003e\u003cmark\u003e返回值\u003c/mark\u003e\u003c/strong\u003e，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003en\u003c/code\u003e（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003en \u0026lt; pkt_size\u003c/code\u003e）：返回一个 \u003cstrong\u003e截断的包\u003c/strong\u003e（副本），只保留前面 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003en\u003c/code\u003e 个字节。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0\u003c/code\u003e：\u003cstrong\u003e忽略\u003c/strong\u003e这个包；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e需要说明：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e这里所谓的截断并不是截断原始包，而只是\u003cmark\u003e复制一份包的元数据\u003c/mark\u003e，修改其中的包长字段；\u003c/li\u003e\n  \u003cli\u003e程序本身不会截断或丢弃原始流量，也就是说，对\u003cstrong\u003e\u003cmark\u003e原始流量是只读的\u003c/mark\u003e\u003c/strong\u003e（read only）；\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"加载方式setsockopt\"\u003e加载方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esetsockopt()\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e通过 \u003ccode\u003esetsockopt(fd, \u003cmark\u003eSO_ATTACH_BPF\u003c/mark\u003e, ...)\u003c/code\u003e 系统调用，其中 fd 是\n\u003cstrong\u003e\u003cmark\u003eBPF 程序的文件描述符\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"程序示例\"\u003e程序示例\u003c/h2\u003e\n\n\u003ch3 id=\"1-可观测性内核自带-samplesbpfsockex1--samplesbpfsockex3\"\u003e1. 可观测性：内核自带 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esamples/bpf/sockex1\u003c/code\u003e ~ \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esamples/bpf/sockex3\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e这三个例子都是用 BPF 程序 \u003cstrong\u003e\u003cmark\u003e过滤网络设备设备上的包\u003c/mark\u003e\u003c/strong\u003e，\n根据协议类型、IP、端口等信息统计流量。\u003c/p\u003e\n\n\u003cp\u003e源码 \u003ca href=\"https://github.com/torvalds/linux/blob/v5.10/samples/bpf/\"\u003esamples/bpf/\u003c/a\u003e。\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003esamples/bpf/\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emake\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./sockex1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"2-流量复制每个包只保留前-n-个字节\"\u003e2. 流量复制：每个包只保留前 N 个字节\u003c/h3\u003e\n\n\u003cp\u003e下面的例子根据包的协议类型对包进行截断。简单起见，不解析 IPv4 option 字段。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;uapi/linux/bpf.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;uapi/linux/in.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;uapi/linux/types.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;uapi/linux/string.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;uapi/linux/if_ether.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;uapi/linux/if_packet.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;uapi/linux/ip.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;uapi/linux/tcp.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;uapi/linux/udp.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;bpf/bpf_helpers.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifndef offsetof\n#define offsetof(TYPE, MEMBER) ((size_t) \u0026amp;((TYPE *)0)-\u0026gt;MEMBER)\n#endif\n\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// We are only interested in TCP/UDP headers, so drop every other protocol\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// and trim packets after the TCP/UDP header by returning eth_len + ipv4_hdr + TCP/UDP header\u003c/span\u003e\n\u003cspan class=\"n\"\u003e__section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;socket\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003ebpf_trim_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003e__sk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eproto\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eload_byte\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eETH_HLEN\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eoffsetof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eiphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eETH_HLEN\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eiphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eIPPROTO_TCP\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etcphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eIPPROTO_UDP\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eudphdr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"nl\"\u003edefault:\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                               \u003cspan class=\"c1\"\u003e// drop this packet\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003e_license\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"n\"\u003e__section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;license\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;GPL\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e编译及测试：比较简单的方法是将源文件放到内核源码树中 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esamples/bpf/\u003c/code\u003e 目录下。\n参考其中的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esockex1\u003c/code\u003e 来编译、加载和测试。\u003c/p\u003e\n\n\u003ch2 id=\"延伸阅读\"\u003e延伸阅读\u003c/h2\u003e\n\n\u003cp\u003e相关实现见 \u003ca href=\"https://github.com/torvalds/linux/blob/v5.8/net/core/filter.c#L90\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_filter_trim_cap()\u003c/code\u003e\u003c/a\u003e，\n它会进一步调用 \u003ca href=\"https://github.com/torvalds/linux/blob/v5.8/include/linux/filter.h#L679\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_prog_run_save_cb()\u003c/code\u003e\u003c/a\u003e 。\u003c/p\u003e\n\n\u003ch1 id=\"2-bpf_prog_type_sock_ops\"\u003e2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SOCK_OPS\u003c/code\u003e\u003c/h1\u003e\n\n\u003ch2 id=\"使用场景动态跟踪修改-socket-操作\"\u003e使用场景：动态跟踪/修改 socket 操作\u003c/h2\u003e\n\n\u003cp\u003e这里所说的 socket 事件包括建连（connection establishment）、重传（retransmit）、超时（timeout）等等。\u003c/p\u003e\n\n\u003ch3 id=\"场景一动态跟踪监听-socket-事件\"\u003e场景一：动态跟踪：监听 socket 事件\u003c/h3\u003e\n\n\u003cp\u003e这种场景只会拦截和解析系统事件，不会修改任何东西。\u003c/p\u003e\n\n\u003ch3 id=\"场景二动态修改-socket例如-tcp-建连操作\"\u003e场景二：动态修改 socket（例如 tcp 建连）操作\u003c/h3\u003e\n\n\u003cp\u003e\u003cmark\u003e拦截到事件后\u003c/mark\u003e，通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_setsockopt()\u003c/code\u003e \u003cmark\u003e动态修改 socket 配置\u003c/mark\u003e，\n能够实现 per-connection 的优化，提升性能。例如，\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e监听到被动建连（passive establishment of a connection）事件时，如果\n\u003cstrong\u003e对端和本机不在同一个网段\u003c/strong\u003e，就\u003cstrong\u003e\u003cmark\u003e动态修改这个 socket 的 MTU\u003c/mark\u003e\u003c/strong\u003e。\n这样能避免包因为太大而被中间路由器分片（fragmenting）。\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e替换目的 IP 地址\u003c/mark\u003e\u003c/strong\u003e，实现高性能的\u003cstrong\u003e透明代理及负载均衡\u003c/strong\u003e。\nCilium 对 K8s 的 Service 就是这样实现的，详见 [1]。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"场景三socket-redirection需要-bpf_prog_type_sk_skb-程序配合\"\u003e场景三：socket redirection（需要 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_SKB\u003c/code\u003e 程序配合）\u003c/h3\u003e\n\n\u003cp\u003e这个其实算是“动态修改”的特例。与 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_SKB\u003c/code\u003e 程序配合，通过\nsockmap+redirection 实现 socket 重定向。这种情况下分为两段 BPF 程序，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e第一段是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SOCK_OPS\u003c/code\u003e 程序，拦截 socket 事件，并从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct bpf_sock_ops\u003c/code\u003e 中提取 socket 信息存储到 sockmap；\u003c/li\u003e\n  \u003cli\u003e第二段是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_SKB\u003c/code\u003e 类型程序，从拦截到的 socket message 提取\nsocket 信息，然后去 sockmap 查找对端 socket，然后通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpf_sk_redirect_map()\u003c/code\u003e\n直接重定向过去。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"hook-位置多个地方\"\u003eHook 位置：多个地方\u003c/h2\u003e\n\n\u003cp\u003e其他类型的 BPF 程序都是在某个特定的代码出执行的，但 SOCK_OPS 程序不同，它们\n\u003cstrong\u003e\u003cmark\u003e在多个地方执行，op 字段表示触发执行的地方\u003c/mark\u003e\u003c/strong\u003e。\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eop\u003c/code\u003e 字段是枚举类型，\u003ca href=\"https://github.com/torvalds/linux/blob/v5.8/include/uapi/linux/bpf.h#L4002\"\u003e完整列表\u003c/a\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/uapi/linux/bpf.h\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* List of known BPF sock_ops operators. */\u003c/span\u003e\n\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_VOID\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_TIMEOUT_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e          \u003cspan class=\"c1\"\u003e// 初始化 TCP RTO 时调用 BPF 程序\u003c/span\u003e\n                                        \u003cspan class=\"c1\"\u003e//   程序应当返回希望使用的 SYN-RTO 值；-1 表示使用默认值\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_RWND_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e             \u003cspan class=\"c1\"\u003e// BPF 程序应当返回 initial advertized window (in packets)；-1 表示使用默认值\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_TCP_CONNECT_CB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// 主动建连 初始化之前 回调 BPF 程序\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 主动建连 成功之后   回调 BPF 程序\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 被动建连 成功之后   回调 BPF 程序\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_NEEDS_ECN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e             \u003cspan class=\"c1\"\u003e// If connection\u0026#39;s congestion control needs ECN */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_BASE_RTT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e              \u003cspan class=\"c1\"\u003e// 获取 base RTT。The correct value is based on the path，可能还与拥塞控制\u003c/span\u003e\n                                        \u003cspan class=\"c1\"\u003e//   算法相关。In general it indicates\u003c/span\u003e\n                                        \u003cspan class=\"c1\"\u003e//   a congestion threshold. RTTs above this indicate congestion\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_RTO_CB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                \u003cspan class=\"c1\"\u003e// 触发 RTO（超时重传）时回调 BPF 程序，三个参数：\u003c/span\u003e\n                                        \u003cspan class=\"c1\"\u003e//   Arg1: value of icsk_retransmits\u003c/span\u003e\n                                        \u003cspan class=\"c1\"\u003e//   Arg2: value of icsk_rto\u003c/span\u003e\n                                        \u003cspan class=\"c1\"\u003e//   Arg3: whether RTO has expired\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_RETRANS_CB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// skb 发生重传之后，回调 BPF 程序，三个参数：\u003c/span\u003e\n                                        \u003cspan class=\"c1\"\u003e//   Arg1: sequence number of 1st byte\u003c/span\u003e\n                                        \u003cspan class=\"c1\"\u003e//   Arg2: # segments\u003c/span\u003e\n                                        \u003cspan class=\"c1\"\u003e//   Arg3: return value of tcp_transmit_skb (0 =\u0026gt; success)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_STATE_CB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e              \u003cspan class=\"c1\"\u003e// TCP 状态发生变化时，回调 BPF 程序。参数：\u003c/span\u003e\n                                        \u003cspan class=\"c1\"\u003e//   Arg1: old_state\u003c/span\u003e\n                                        \u003cspan class=\"c1\"\u003e//   Arg2: new_state\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_SOCK_OPS_TCP_LISTEN_CB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e         \u003cspan class=\"c1\"\u003e// 执行 listen(2) 系统调用，socket 进入 LISTEN 状态之后，回调 BPF 程序\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e从以上注释可以看到，这些 OPS 分为两种类型：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003e通过 BPF 程序的返回值来动态修改配置\u003c/mark\u003e\u003c/strong\u003e，类型包括\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_SOCK_OPS_TIMEOUT_INIT\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_SOCK_OPS_RWND_INIT\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_SOCK_OPS_NEEDS_ECN\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_SOCK_OPS_BASE_RTT\u003c/code\u003e\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e在 socket/tcp 状态发生变化时，\u003cstrong\u003e\u003cmark\u003e回调（callback）BPF 程序\u003c/mark\u003e\u003c/strong\u003e，类型包括\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_SOCK_OPS_TCP_CONNECT_CB\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_SOCK_OPS_RTO_CB\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_SOCK_OPS_RETRANS_CB\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_SOCK_OPS_STATE_CB\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_SOCK_OPS_TCP_LISTEN_CB\u003c/code\u003e\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e引入该功能的内核 patch 见 \u003ca href=\"https://lwn.net/Articles/727189/\"\u003ebpf: Adding support for sock_ops\u003c/a\u003e；\u003c/p\u003e\n\n\u003cp\u003eSOCK_OPS 类型的 BPF 程序\u003cstrong\u003e\u003cmark\u003e都是从\u003c/mark\u003e\u003c/strong\u003e \u003ca href=\"https://github.com/torvalds/linux/blob/v5.8/include/net/tcp.h#L2227\"\u003etcp_call_bpf()\u003c/a\u003e\n\u003cstrong\u003e\u003cmark\u003e调用过来的\u003c/mark\u003e\u003c/strong\u003e，这个文件中多个地方都会调用到该函数。\u003c/p\u003e\n\n\u003ch2 id=\"程序签名-1\"\u003e程序签名\u003c/h2\u003e\n\u003ch3 id=\"传入参数-struct-bpf_sock_ops-\"\u003e传入参数： \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct bpf_sock_ops *\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e结构体 \u003ca href=\"https://github.com/torvalds/linux/blob/v5.8/include/uapi/linux/bpf.h#L3946\"\u003e定义\u003c/a\u003e，\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/uapi/linux/bpf.h\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_sock_ops\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e               \u003cspan class=\"c1\"\u003e// socket 事件类型，就是上面的 BPF_SOCK_OPS_*\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eunion\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e      \u003cspan class=\"c1\"\u003e// Optionally passed to bpf program\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003ereply\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// BPF 程序的返回值。例如，op==BPF_SOCK_OPS_TIMEOUT_INIT 时，\u003c/span\u003e\n                            \u003cspan class=\"c1\"\u003e//   BPF 程序的返回值就表示希望为这个 TCP 连接设置的 RTO 值\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003ereplylong\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Optionally returned by bpf prog\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003efamily\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eremote_ip4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e        \u003cspan class=\"cm\"\u003e/* Stored in network byte order */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003elocal_ip4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e         \u003cspan class=\"cm\"\u003e/* Stored in network byte order */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eremote_ip6\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e     \u003cspan class=\"cm\"\u003e/* Stored in network byte order */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003elocal_ip6\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e      \u003cspan class=\"cm\"\u003e/* Stored in network byte order */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eremote_port\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"cm\"\u003e/* Stored in network byte order */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003elocal_port\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e        \u003cspan class=\"cm\"\u003e/* stored in host byte order */\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"返回值-1\"\u003e返回值\u003c/h3\u003e\n\n\u003cp\u003e如前面所述，ops 类型不同，返回值也不同。\u003c/p\u003e\n\n\u003ch2 id=\"加载方式attach-到某个-cgroup可使用-bpftool-等工具\"\u003e加载方式：attach 到某个 cgroup（可使用 bpftool 等工具）\u003c/h2\u003e\n\n\u003cp\u003e指定以 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_CGROUP_SOCK_OPS\u003c/code\u003e 类型，将 BPF 程序 attach 到某个 cgroup 文件描述符。\u003c/p\u003e\n\n\u003cp\u003e\u003cmark\u003e依赖 cgroupv2\u003c/mark\u003e。\u003c/p\u003e\n\n\u003cp\u003e内核已经有了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_CGROUP_SOCK\u003c/code\u003e 类型的 BPF 程序，这里为什么又要引入一个\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SOCK_OPS\u003c/code\u003e 类型的程序呢？\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_CGROUP_SOCK\u003c/code\u003e 类型的 BPF 程序：在一个连接（connection）的生命周期中\u003cstrong\u003e\u003cmark\u003e只执行一次\u003c/mark\u003e\u003c/strong\u003e，\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SOCK_OPS\u003c/code\u003e 类型的 BPF 程序：在一个连接的生命周期中，在\u003cstrong\u003e\u003cmark\u003e不同地方被多次调用\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"程序示例-1\"\u003e程序示例\u003c/h2\u003e\n\n\u003ch3 id=\"1-customize-tcp-initial-rto-retransmission-timeout-with-bpf\"\u003e1. \u003ca href=\"/blog/customize-tcp-initial-rto-with-bpf/\"\u003eCustomize TCP initial RTO (retransmission timeout) with BPF\u003c/a\u003e\u003c/h3\u003e\n\u003ch3 id=\"2-cracking-kubernetes-node-proxy-aka-kube-proxy其中的第五种实现方式\"\u003e2. \u003ca href=\"/blog/cracking-k8s-node-proxy/\"\u003eCracking kubernetes node proxy (aka kube-proxy)\u003c/a\u003e，其中的第五种实现方式\u003c/h3\u003e\n\u003ch3 id=\"3-译-利用-ebpf-sockmapredirection-提升-socket-性能2020\"\u003e3. \u003ca href=\"/blog/socket-acceleration-with-ebpf-zh/\"\u003e(译) 利用 ebpf sockmap/redirection 提升 socket 性能（2020）\u003c/a\u003e\u003c/h3\u003e\n\n\u003ch2 id=\"延伸阅读-1\"\u003e延伸阅读\u003c/h2\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://lwn.net/Articles/727189/\"\u003ebpf: Adding support for sock_ops\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"3-bpf_prog_type_sk_skb\"\u003e3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_SKB\u003c/code\u003e\u003c/h1\u003e\n\n\u003ch2 id=\"使用场景-1\"\u003e使用场景\u003c/h2\u003e\n\n\u003ch3 id=\"场景一修改-skbsocket-信息socket-重定向\"\u003e场景一：修改 skb/socket 信息，socket 重定向\u003c/h3\u003e\n\n\u003cp\u003e这个功能依赖 sockmap，后者是一种特殊类型的 BPF map，其中存储的是 socket 引用（references）。\u003c/p\u003e\n\n\u003cp\u003e典型流程：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e创建 sockmap\u003c/li\u003e\n  \u003cli\u003e拦截 socket 操作，将 socket 信息存入 sockmap\u003c/li\u003e\n  \u003cli\u003e拦截 socket sendmsg/recvmsg 等系统调用，从 msg 中提取信息（IP、port 等），然后\n在 sockmap 中查找对端 socket，然后重定向过去。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e根据提取到的 socket 信息判断接下来应该做什么的过程称为 \u003cmark\u003everdict（判决）\u003c/mark\u003e。\nverdict 类型可以是：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__SK_DROP\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__SK_PASS\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__SK_REDIRECT\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"场景二动态解析消息流stream-parsing\"\u003e场景二：动态解析消息流（stream parsing）\u003c/h3\u003e\n\n\u003cp\u003e这种程序的一个应用是 \u003ca href=\"https://www.kernel.org/doc/Documentation/networking/strparser.txt\"\u003estrparser framework\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e它与上层应用配合，\u003cstrong\u003e\u003cmark\u003e在内核中提供应用层消息解析的支持\u003c/mark\u003e\u003c/strong\u003e（provide kernel support\nfor application layer messages）。两个使用了 strparser 框架的例子：TLS 和 KCM（\nKernel Connection Multiplexor）。\u003c/p\u003e\n\n\u003ch2 id=\"hook-位置\"\u003eHook 位置\u003c/h2\u003e\n\n\u003ch3 id=\"socket-redirection-类型\"\u003esocket redirection 类型\u003c/h3\u003e\n\n\u003cp\u003eTODO\u003c/p\u003e\n\n\u003ch3 id=\"strparser-类型smap_parse_func_strparser--smap_verdict_func\"\u003estrparser 类型：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esmap_parse_func_strparser()\u003c/code\u003e / \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esmap_verdict_func()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eSocket receive 过程执行到 \u003ca href=\"https://github.com/torvalds/linux/blob/v5.8/kernel/bpf/sockmap.c\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esmap_parse_func_strparser()\u003c/code\u003e\u003c/a\u003e\n时，触发 STREAM_PARSER BPF 程序执行。\u003c/p\u003e\n\n\u003cp\u003e执行到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esmap_verdict_func()\u003c/code\u003e 时，触发 VERDICT BPF 程序执行。\u003c/p\u003e\n\n\u003ch2 id=\"程序签名-2\"\u003e程序签名\u003c/h2\u003e\n\n\u003ch3 id=\"传入参数-struct-__sk_buff-\"\u003e传入参数： \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct __sk_buff *\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e见 \u003ca href=\"#struct-__sk_buff\"\u003e前面\u003c/a\u003e 的介绍。\u003c/p\u003e\n\n\u003cp\u003e从中可以提取出 socket 信息（IP、port 等）。\u003c/p\u003e\n\n\u003ch3 id=\"返回值-2\"\u003e返回值\u003c/h3\u003e\n\n\u003cp\u003eTODO\u003c/p\u003e\n\n\u003ch2 id=\"加载方式attach-到某个-sockmap可使用-bpftool-等工具\"\u003e加载方式：attach 到某个 sockmap（可使用 bpftool 等工具）\u003c/h2\u003e\n\n\u003cp\u003e这种程序需要指定 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_SK_SKB_STREAM_*\u003c/code\u003e 类型，将 BPF 程序 attach 到 sockmap：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e重定向程序：指定 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_SK_SKB_STREAM_VERDICT\u003c/code\u003e 加载到某个 sockmap。\u003c/li\u003e\n  \u003cli\u003estrparser 程序：指定 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_SK_SKB_STREAM_PARSER\u003c/code\u003e 加载到某个 sockmap。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"程序示例-2\"\u003e程序示例\u003c/h2\u003e\n\n\u003ch3 id=\"1-译-利用-ebpf-sockmapredirection-提升-socket-性能2020\"\u003e1. \u003ca href=\"/blog/socket-acceleration-with-ebpf-zh/\"\u003e(译) 利用 ebpf sockmap/redirection 提升 socket 性能（2020）\u003c/a\u003e\u003c/h3\u003e\n\n\u003ch3 id=\"2-strparser-框架解析消息流\"\u003e2. \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estrparser\u003c/code\u003e 框架：解析消息流\u003c/h3\u003e\n\n\u003ch2 id=\"延伸阅读-2\"\u003e延伸阅读\u003c/h2\u003e\n\n\u003col\u003e\n  \u003cli\u003e内核 patch 文档：\u003ca href=\"https://lwn.net/Articles/731133/\"\u003eBPF: sockmap and sk redirect support\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"4-bpf_prog_type_sk_msg\"\u003e4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_MSG\u003c/code\u003e\u003c/h1\u003e\n\n\u003ch1 id=\"5-bpf_prog_type_sk_reuseport\"\u003e5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_REUSEPORT\u003c/code\u003e\u003c/h1\u003e\n\n\u003ch2 id=\"使用场景-2\"\u003e使用场景\u003c/h2\u003e\n\n\u003ch3 id=\"场景一发布系统新老进程无损流量切换\"\u003e场景一：发布系统：新老进程无损流量切换\u003c/h3\u003e\n\n\u003cp\u003e发布系统要做到服务发布时客户端完全无感知，一种实现方式就是让\n\u003cstrong\u003e\u003cmark\u003e运行老代码的进程和运行新代码的进程共享同一个端口\u003c/mark\u003e\u003c/strong\u003e（例如 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e80\u003c/code\u003e），\n这对 BPF 程序提出的要求就是：能够正确对 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;dst_ip:dst_port\u0026gt;\u003c/code\u003e 相同的流量正确进行分流：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e一部分转发给老进程（老连接）\u003c/li\u003e\n  \u003cli\u003e一部分转发给新进程（新连接）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_REUSEPORT\u003c/code\u003e + \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_MAP_TYPE_REUSEPORT_SOCKARRAY\u003c/code\u003e 最初就是针对这个需求引入的，\n前者 hook 到 cgroup level 的socket 事件，后者存储特定信息（BPF 程序的设计者来决定）到 socket 的映射。\u003c/p\u003e\n\n\u003cp\u003e更多参考 ：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"/blog/facebook-from-xdp-to-socket-zh/\"\u003e(译) Facebook 流量路由最佳实践：从公网入口到内网业务的全路径 XDP/BPF 基础设施（LPC, 2021）\u003c/a\u003e。\u003c/li\u003e\n  \u003cli\u003e内核 patch \u003ca href=\"http://archive.lwn.net:8080/netdev/20180808080131.3014367-1-kafai@fb.com/t/\"\u003eIntroduce BPF_MAP_TYPE_REUSEPORT_SOCKARRAY and BPF_PROG_TYPE_SK_REUSEPORT\u003c/a\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"场景二加速-socket-查找\"\u003e场景二：加速 socket 查找\u003c/h3\u003e\n\n\u003cp\u003e这种程序类型是为了加速 listener socket 的查找速度，使用方式：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e创建一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_MAP_TYPE_REUSEPORT_SOCKARRAY\u003c/code\u003e 类型的数组，来存放监听在同一端口的所有 sockets。\u003c/li\u003e\n  \u003cli\u003e加载一段 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_REUSEPORT\u003c/code\u003e 类型的 BPF 程序，程序返回值是 socket\n数组中的 index。接下来系统就会选中这个 index 对应的 socket。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"hook-位置-1\"\u003eHook 位置\u003c/h2\u003e\n\n\u003ch2 id=\"程序签名-3\"\u003e程序签名\u003c/h2\u003e\n\n\u003ch3 id=\"传入参数\"\u003e传入参数\u003c/h3\u003e\n\n\u003ch3 id=\"返回值-3\"\u003e返回值\u003c/h3\u003e\n\n\u003cp\u003eSocket array 中的 index。\u003c/p\u003e\n\n\u003ch2 id=\"内核实现\"\u003e内核实现\u003c/h2\u003e\n\n\u003cp\u003e逻辑如下，还是非常简单的：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/core/sock_reuseport.c\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nf\"\u003erun_bpf_filter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock_reuseport\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ereuse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eu16\u003c/span\u003e \u003cspan class=\"n\"\u003esocks\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                   \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_prog\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eprog\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ehdr_len\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb_shared\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enskb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_clone\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eGFP_ATOMIC\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eskb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enskb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003epskb_pull\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehdr_len\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// temporarily advance data past protocol header\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eindex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_prog_run_save_cb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprog\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__skb_push\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehdr_len\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003econsume_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003esocks\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ereuse\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esocks\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"6-bpf_prog_type_sk_lookup\"\u003e6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SK_LOOKUP\u003c/code\u003e\u003c/h1\u003e\n\n\u003cp\u003e特点：attach 到 network namespace。\u003c/p\u003e\n\n\u003ch2 id=\"使用场景-3\"\u003e使用场景\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"/blog/birth-of-sk-lookup-bpf-zh/\"\u003e(译) Socket listen 多地址需求与 SK_LOOKUP BPF 的诞生（LPC, 2019）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/pidfd-and-socket-lookup-bpf-illustrated/\"\u003ePidfd and Socket-lookup BPF (SK_LOOKUP) Illustrated (2022)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"-2\"\u003e————————————————————————\u003c/h1\u003e\n\u003ch1 id=\"tc-子系统相关类型\"\u003eTC 子系统相关类型\u003c/h1\u003e\n\u003ch1 id=\"-3\"\u003e————————————————————————\u003c/h1\u003e\n\n\u003cp\u003e将 BPF 程序用作 tc 分类器（classifiers）和执行器（actions）。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SCHED_CLS\u003c/code\u003e：tc classifier，分类器\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SCHED_ACT\u003c/code\u003e：tc action，动作\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cmark\u003eTC 是 Linux 的 QoS 子系统\u003c/mark\u003e。帮助信息（非常有用）：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc(8)\u003c/code\u003e manpage for a general introduction\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc-bpf(8)\u003c/code\u003e for BPF specifics\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"1-bpf_prog_type_sched_cls\"\u003e1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SCHED_CLS\u003c/code\u003e\u003c/h1\u003e\n\n\u003ch2 id=\"使用场景-4\"\u003e使用场景\u003c/h2\u003e\n\n\u003ch3 id=\"场景一tc-分类器\"\u003e场景一：tc 分类器\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc(8)\u003c/code\u003e 命令\u003cmark\u003e支持 eBPF\u003c/mark\u003e，因此能直接将 BPF 程序作为\nclassifiers 和 actions 加载到 ingress/egress hook 点。\u003c/p\u003e\n\n\u003cp\u003e如何使用 tc BPF 提供的能力，参考 \u003ca href=\"http://man7.org/linux/man-pages/man8/tc-bpf.8.html\"\u003eman8: tc-bpf\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"hook-位置sch_handle_ingresssch_handle_egress\"\u003eHook 位置：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_handle_ingress()\u003c/code\u003e/\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_handle_egress()\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_handle_ingress()/egress()\u003c/code\u003e 会调用到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcf_classify()\u003c/code\u003e，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e对于 ingress，通过网络设备的 receive 方法做\u003cstrong\u003e\u003cmark\u003e流量分类\u003c/mark\u003e\u003c/strong\u003e，这个处\n理位置在\u003cstrong\u003e\u003cmark\u003e网卡驱动处理之后，在内核协议栈（IP 层）处理之前\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n  \u003cli\u003e对于 egress，将包交给设备队列（device queue）发送之前，执行 BPF 程序。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"程序签名-4\"\u003e程序签名\u003c/h2\u003e\n\n\u003ch3 id=\"传入参数struct-__sk_buff--1\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct __sk_buff *\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e见 \u003ca href=\"#struct-__sk_buff\"\u003e前面\u003c/a\u003e 的介绍。\u003c/p\u003e\n\n\u003ch3 id=\"返回值-4\"\u003e返回值\u003c/h3\u003e\n\n\u003cp\u003e返回 TC verdict 结果。\u003c/p\u003e\n\n\u003ch2 id=\"加载方式tc-命令背后使用-netlink\"\u003e加载方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc\u003c/code\u003e 命令（背后使用 netlink）\u003c/h2\u003e\n\n\u003cp\u003e步骤：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cmark\u003e为网络设备添加分类器\u003c/mark\u003e（classifier/qdisc）：创建一个 “clsact” qdisc\u003c/li\u003e\n  \u003cli\u003e\u003cmark\u003e为网络设备添加过滤器\u003c/mark\u003e（filter）：需要指定方向（egress/ingress）、目标文件、ELF section 等选项\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e例如，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etc qdisc add dev eth0 clsact\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etc filter add dev eth0 egress bpf da obj toy-proxy-bpf.o sec egress\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e加载过程分为 tc 前端和内核 bpf 后端两部分，\u003cstrong\u003e\u003cmark\u003e中间通过 netlink socket 通信，源码分析见\u003c/mark\u003e\u003c/strong\u003e\n\u003ca href=\"/blog/firewalling-with-bpf-xdp/\"\u003eFirewalling with BPF/XDP: Examples and Deep Dive\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"程序示例-3\"\u003e程序示例\u003c/h2\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"/blog/firewalling-with-bpf-xdp/\"\u003eFirewalling with BPF/XDP: Examples and Deep Dive\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/cracking-k8s-node-proxy/\"\u003eCracking Kubernetes Node Proxy (aka kube-proxy)\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"延伸阅读-3\"\u003e延伸阅读\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"\"\u003ecls_bpf.c\u003c/a\u003e 实现 tc classifier 模块\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"2-bpf_prog_type_sched_act\"\u003e2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SCHED_ACT\u003c/code\u003e\u003c/h1\u003e\n\n\u003cp\u003e使用方式与 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_SCHED_CLS\u003c/code\u003e 类似，但用作 TC action。\u003c/p\u003e\n\n\u003ch2 id=\"使用场景-5\"\u003e使用场景\u003c/h2\u003e\n\n\u003ch3 id=\"场景一tc-action\"\u003e场景一：tc action\u003c/h3\u003e\n\n\u003ch2 id=\"hook-位置-2\"\u003eHook 位置\u003c/h2\u003e\n\n\u003ch2 id=\"程序签名-5\"\u003e程序签名\u003c/h2\u003e\n\n\u003ch2 id=\"加载方式tc-命令\"\u003e加载方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc\u003c/code\u003e 命令\u003c/h2\u003e\n\n\u003ch2 id=\"延伸阅读-4\"\u003e延伸阅读\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"\"\u003eact_bpf.c\u003c/a\u003e 实现 tc action 模块\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"-4\"\u003e————————————————————————\u003c/h1\u003e\n\u003ch1 id=\"xdpexpress-data-path程序\"\u003eXDP（eXpress Data Path）程序\u003c/h1\u003e\n\u003ch1 id=\"-5\"\u003e————————————————————————\u003c/h1\u003e\n\n\u003cp\u003eXDP 位于\u003cmark\u003e设备驱动中（在创建 skb 之前）\u003c/mark\u003e，因此能最大化网络处理性能，\n而且可编程、通用（很多厂商的设备都支持）。\u003c/p\u003e\n\n\u003cp\u003e各厂商网卡/驱动对 \u003cstrong\u003e\u003cmark\u003eXDP 及其内核版本\u003c/mark\u003e\u003c/strong\u003e的支持，见 bcc\n\u003ca href=\"https://github.com/iovisor/bcc/blob/master/docs/kernel-versions.md#xdp\"\u003e维护的文档\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch1 id=\"1-bpf_prog_type_xdp\"\u003e1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_XDP\u003c/code\u003e\u003c/h1\u003e\n\n\u003ch2 id=\"使用场景-6\"\u003e使用场景\u003c/h2\u003e\n\n\u003ch3 id=\"场景一防火墙四层负载均衡等\"\u003e场景一：防火墙、四层负载均衡等\u003c/h3\u003e\n\n\u003cp\u003e由于 XDP 程序执行时 skb 都还没创建，开销非常低，因此效率非常高。适用于 DDoS 防御、四层负载均衡等场景。\u003c/p\u003e\n\n\u003cp\u003eXDP 就是通过 BPF hook 对内核进行\u003cstrong\u003e\u003cmark\u003e运行时编程\u003c/mark\u003e\u003c/strong\u003e（run-time\nprogramming），但\u003cstrong\u003e\u003cmark\u003e基于内核而不是绕过（bypass）内核\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"hook-位置网络驱动\"\u003eHook 位置：网络驱动\u003c/h2\u003e\n\n\u003cp\u003eXDP 是在\u003cstrong\u003e\u003cmark\u003e网络驱动\u003c/mark\u003e\u003c/strong\u003e中实现的，\u003cstrong\u003e\u003cmark\u003e有专门的 TX/RX queue\u003c/mark\u003e\u003c/strong\u003e（native 方式）。\u003c/p\u003e\n\n\u003cp\u003e对于没有实现 XDP 的驱动，内核中实现了一个称为 \u003cstrong\u003e\u003cmark\u003e“generic XDP”\u003c/mark\u003e\u003c/strong\u003e 的 fallback 实现，\n见 \u003ca href=\"https://github.com/torvalds/linux/blob/v5.8/net/core/dev.c\"\u003enet/core/dev.c\u003c/a\u003e。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eNative XDP：处理的阶段非常早，在 skb 创建之前，因此性能非常高；\u003c/li\u003e\n  \u003cli\u003eGeneric XDP：\u003cstrong\u003e\u003cmark\u003e在 skb 创建之后\u003c/mark\u003e\u003c/strong\u003e，因此性能比前者差，但功能是一样的。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"程序签名-6\"\u003e程序签名\u003c/h2\u003e\n\n\u003cp\u003e\u003ca name=\"struct-xdp_md\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"传入参数struct-xdp_md-\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct xdp_md *\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/torvalds/linux/blob/v5.8/include/uapi/linux/bpf.h#L3754\"\u003e定义\u003c/a\u003e，非常轻量级：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/uapi/linux/bpf.h\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* user accessible metadata for XDP packet hook */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003exdp_md\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003edata_end\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003edata_meta\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Below access go through struct xdp_rxq_info */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eingress_ifindex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* rxq-\u0026gt;dev-\u0026gt;ifindex */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003erx_queue_index\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"cm\"\u003e/* rxq-\u0026gt;queue_index  */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eegress_ifindex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"cm\"\u003e/* txq-\u0026gt;dev-\u0026gt;ifindex */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"返回值enum-xdp_action\"\u003e返回值：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eenum xdp_action\u003c/code\u003e\u003c/h3\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/uapi/linux/bpf.h\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003exdp_action\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eXDP_ABORTED\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eXDP_DROP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eXDP_PASS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eXDP_TX\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eXDP_REDIRECT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"加载方式netlink-socket\"\u003e加载方式：netlink socket\u003c/h2\u003e\n\n\u003cp\u003e通过 \u003cstrong\u003e\u003cmark\u003enetlink socket\u003c/mark\u003e\u003c/strong\u003e 消息 attach：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e首先创建一个 netlink 类型的 socket：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esocket(AF_NETLINK, SOCK_RAW, NETLINK_ROUTE)\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e然后发送一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNLA_F_NESTED | 43\u003c/code\u003e 类型的 netlink 消息，表示这是 XDP message。消息中包含 BPF fd, the interface index (ifindex) 等信息。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc\u003c/code\u003e attach BPF 程序，其实背后使用的也是 netlink socket。\u003c/p\u003e\n\n\u003ch2 id=\"程序示例-4\"\u003e程序示例\u003c/h2\u003e\n\n\u003ch3 id=\"1-samplesbpfbpf_loadc\"\u003e1. \u003ca href=\"https://github.com/torvalds/linux/blob/v5.8/samples/bpf/bpf_load.c\"\u003esamples/bpf/bpf_load.c\u003c/a\u003e\u003c/h3\u003e\n\n\u003ch2 id=\"延伸阅读-5\"\u003e延伸阅读\u003c/h2\u003e\n\n\u003cp\u003eTODO\u003c/p\u003e\n\n\u003ch1 id=\"-6\"\u003e————————————————————————\u003c/h1\u003e\n\u003ch1 id=\"cgroup-v2-相关类型\"\u003ecgroup (v2) 相关类型\u003c/h1\u003e\n\u003ch1 id=\"-7\"\u003e————————————————————————\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003ecgroup\u003c/mark\u003e\u003c/strong\u003e 最典型的使用场景是容器（containers）。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e命名空间（namespace）：控制资源视图，即\u003cstrong\u003e\u003cmark\u003e能看到什么，不能看到什么\u003c/mark\u003e\u003c/strong\u003e，\u003c/li\u003e\n  \u003cli\u003ecgroup：控制的\u003cstrong\u003e\u003cmark\u003e能使用多少\u003c/mark\u003e\u003c/strong\u003e？\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003ecgroup BPF\u003c/mark\u003e\u003c/strong\u003e 用于在 cgroup 级别对\u003cstrong\u003e\u003cmark\u003e进程、socket、设备文件\u003c/mark\u003e\u003c/strong\u003e\n（device file）等进行动态控制，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e处理资源分配，例如 CPU、网络带宽等。\u003c/li\u003e\n  \u003cli\u003e系统资源权限控制（allowing or denying）。\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e控制访问权限（allow or deny），程序的返回结果只有两种：\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e放行\u003c/li\u003e\n      \u003cli\u003e禁止（导致随后包被丢弃）\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e完整的 cgroups BPF hook 列表见 \u003ca href=\"#enum-bpf_attach_type\"\u003e前面\u003c/a\u003e \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eenum bpf_attach_type\u003c/code\u003e\n列表，其中的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_CGROUP_*\u003c/code\u003e。\u003c/p\u003e\n\n\u003ch1 id=\"0-cgroup-bpf-通用调用栈\"\u003e0 cgroup BPF 通用调用栈\u003c/h1\u003e\n\n\u003ch2 id=\"01-创建-socket-时初始化其-cgroupv2-配置\"\u003e0.1 创建 socket 时初始化其 cgroupv2 配置\u003c/h2\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// https://github.com/torvalds/linux/blob/v5.10/net/core/sock.c#L1715\u003c/span\u003e\n\u003cspan class=\"cm\"\u003e/**\n *    sk_alloc - All socket objects are allocated here\n *    @net: the applicable net namespace\n *    @family: protocol family\n *    @priority: for allocation (%GFP_KERNEL, %GFP_ATOMIC, etc)\n *    @prot: struct proto associated with this new sock instance\n *    @kern: is this to be a kernel socket?\n */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nf\"\u003esk_alloc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003efamily\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egfp_t\u003c/span\u003e \u003cspan class=\"n\"\u003epriority\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eproto\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eprot\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ekern\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esk_prot_alloc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprot\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epriority\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003e__GFP_ZERO\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efamily\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_family\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efamily\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_prot\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_prot_creator\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprot\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_kern_sock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ekern\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_net_refcnt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ekern\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_net_refcnt\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eget_net\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e                          \u003cspan class=\"c1\"\u003e// 网络命名空间\u003c/span\u003e\n            \u003cspan class=\"n\"\u003esock_inuse_add\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003esock_net_set\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003erefcount_set\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_wmem_alloc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003emem_cgroup_sk_alloc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e                   \u003cspan class=\"c1\"\u003e// memory cgroup 信息单独维护\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecgroup_sk_alloc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_cgrp_data\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// per-socket cgroup 信息，包括了 memory cgroup 之外\u003c/span\u003e\n                                                   \u003cspan class=\"c1\"\u003e// 该 socket 的 cgroup 信息\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esock_update_classid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_cgrp_data\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esock_update_netprioidx\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_cgrp_data\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esk_tx_queue_clear\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，创建 socket 时会初始化其所属的 cgroup 信息，因此后面就能\n\u003cstrong\u003e\u003cmark\u003e在 cgroup 级别\u003c/mark\u003e\u003c/strong\u003e监听 socket 事件或拦截 socket 操作。\u003c/p\u003e\n\n\u003ch2 id=\"02-入向ingresshook-处理\"\u003e0.2 入向（ingress）hook 处理\u003c/h2\u003e\n\n\u003cp\u003e很多 hook 点会执行到下面两个宏来\u003cstrong\u003e\u003cmark\u003e执行 cgroup BPF 代码\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/linux/bpf-cgroup.h\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#define BPF_CGROUP_RUN_PROG_INET_INGRESS(sk, skb)                  \\\n({                                                                 \\\n    int __ret = 0;                                                 \\\n    if (cgroup_bpf_enabled)                                        \\\n        __ret = __cgroup_bpf_run_filter_skb(sk, skb,               \\\n                            BPF_CGROUP_INET_INGRESS);              \\\n                                                                   \\\n    __ret;                                                         \\\n})\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e函数的定义：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// https://github.com/torvalds/linux/blob/v5.10/kernel/bpf/cgroup.c#L987\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003e__cgroup_bpf_run_filter_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_attach_type\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eoffset\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eskb_network_header\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esave_sk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esaved_data_end\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ecgroup\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecgrp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ecgrp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esock_cgroup_ptr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_cgrp_data\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 获取 socket cgroup 信息\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esave_sk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__skb_push\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eoffset\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ebpf_compute_and_save_data_end\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esaved_data_end\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_CGROUP_INET_EGRESS\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_PROG_CGROUP_INET_EGRESS_RUN_ARRAY\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecgrp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebpf\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eeffective\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e__bpf_prog_run_save_cb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_PROG_RUN_ARRAY\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecgrp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebpf\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eeffective\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e__bpf_prog_run_save_cb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEPERM\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebpf_restore_data_end\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esaved_data_end\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__skb_pull\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eoffset\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esave_sk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"03-出向egresshook-处理\"\u003e0.3 出向（egress）hook 处理\u003c/h2\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/linux/bpf-cgroup.h\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#define BPF_CGROUP_RUN_SK_PROG(sk, type)                       \\\n({                                                                 \\\n    int __ret = 0;                                                 \\\n    if (cgroup_bpf_enabled) {                                      \\\n        __ret = __cgroup_bpf_run_filter_sk(sk, type);              \\\n    }                                                              \\\n    __ret;                                                         \\\n})\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e函数的定义：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// https://github.com/torvalds/linux/blob/v5.10/kernel/bpf/cgroup.c#L1040\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003e__cgroup_bpf_run_filter_sk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_attach_type\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ecgroup\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecgrp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esock_cgroup_ptr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_cgrp_data\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 获取 socket cgroup 信息\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_PROG_RUN_ARRAY\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecgrp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebpf\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eeffective\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_PROG_RUN\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEPERM\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"1-bpf_prog_type_cgroup_skb\"\u003e1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_CGROUP_SKB\u003c/code\u003e\u003c/h1\u003e\n\n\u003ch2 id=\"使用场景-7\"\u003e使用场景\u003c/h2\u003e\n\n\u003ch3 id=\"场景一在-cgroup-级别放行丢弃数据包\"\u003e场景一：在 cgroup 级别：放行/丢弃数据包\u003c/h3\u003e\n\n\u003cp\u003e在 IP egress/ingress 层禁止或允许网络访问。\u003c/p\u003e\n\n\u003ch2 id=\"hook-位置-3\"\u003eHook 位置\u003c/h2\u003e\n\n\u003ch3 id=\"入向__sk_receive_skbtcp_v4_rcv-tcp_filterudp_queue_rcv_one_skb---sk_filter_trim_cap\"\u003e入向：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__sk_receive_skb\u003c/code\u003e/\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_v4_rcv-\u0026gt;tcp_filter\u003c/code\u003e/\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eudp_queue_rcv_one_skb\u003c/code\u003e -\u0026gt; \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_filter_trim_cap()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e对于 ingress，上述三个函数会分别从 \u003cstrong\u003e\u003cmark\u003eIP/TCP/UDP 处理逻辑\u003c/mark\u003e\u003c/strong\u003e里调用到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_filter_trim_cap()\u003c/code\u003e，\n后者又会调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_CGROUP_RUN_PROG_INET_INGRESS(sk, skb)\u003c/code\u003e。这个宏上面有介绍。\u003c/p\u003e\n\n\u003cp\u003e下面代码忽略了一些错误处理：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// https://github.com/torvalds/linux/blob/v5.10/net/core/filter.c#L120\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/**\n *    sk_filter_trim_cap - run a packet through a socket filter\n *    @cap: limit on how short the eBPF program may trim the packet\n *\n * Run the eBPF program and then cut skb-\u0026gt;data to correct size returned by\n * the program. If pkt_len is 0 we toss packet. If skb-\u0026gt;len is smaller\n * than pkt_len we keep whole skb-\u0026gt;data. This is the socket level\n * wrapper to BPF_PROG_RUN. It returns 0 if the packet should\n * be accepted or -EPERM if the packet should be tossed.\n *\n */\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003esk_filter_trim_cap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecap\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBPF_CGROUP_RUN_PROG_INET_INGRESS\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 上面有介绍\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esecurity_sock_rcv_skb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_filter\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003efilter\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ercu_dereference\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_filter\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esave_sk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003epkt_len\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epkt_len\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_prog_run_save_cb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efilter\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eprog\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esave_sk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epkt_len\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003epskb_trim\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecap\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epkt_len\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEPERM\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果返回值非零，调用方（例如 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__sk_receive_skb()\u003c/code\u003e）随后会将包丢弃并释放。\u003c/p\u003e\n\n\u003ch3 id=\"出向ip6_finish_output\"\u003e出向：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip[6]_finish_output()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eegress 是类似的，但在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip[6]_finish_output()\u003c/code\u003e 中。\u003c/p\u003e\n\n\u003ch2 id=\"程序签名-7\"\u003e程序签名\u003c/h2\u003e\n\n\u003ch3 id=\"传入参数struct-sk_buff-skb\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sk_buff *skb\u003c/code\u003e\u003c/h3\u003e\n\n\u003ch3 id=\"返回值-5\"\u003e返回值\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1\u003c/code\u003e：放行；\u003c/li\u003e\n  \u003cli\u003e其他任何值：会使 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__cgroup_bpf_run_filter_skb()\u003c/code\u003e 返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-EPERM\u003c/code\u003e，这会进一步返\n回给调用方，告诉它们应该丢弃该包。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"加载方式attach-到-cgroup-文件描述符\"\u003e加载方式：attach 到 cgroup 文件描述符\u003c/h2\u003e\n\n\u003cp\u003e根据 BPF attach 的 hook 位置，选择合适的 attach 类型：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_CGROUP_INET_INGRESS\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_CGROUP_INET_EGRESS\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"2-bpf_prog_type_cgroup_sock\"\u003e2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_CGROUP_SOCK\u003c/code\u003e\u003c/h1\u003e\n\n\u003ch2 id=\"使用场景-8\"\u003e使用场景\u003c/h2\u003e\n\n\u003ch3 id=\"场景一在-cgroup-级别触发-socket-操作时拒绝放行网络访问\"\u003e场景一：在 cgroup 级别：触发 socket 操作时拒绝/放行网络访问\u003c/h3\u003e\n\n\u003cp\u003e这里的 socket 相关事件包括\nBPF_CGROUP_INET_SOCK_CREATE、BPF_CGROUP_SOCK_OPS。\u003c/p\u003e\n\n\u003ch2 id=\"程序签名-8\"\u003e程序签名\u003c/h2\u003e\n\n\u003ch3 id=\"传入参数struct-sk_buff-skb-1\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sk_buff *skb\u003c/code\u003e\u003c/h3\u003e\n\n\u003ch3 id=\"返回值-6\"\u003e返回值\u003c/h3\u003e\n\n\u003cp\u003e跟前面一样，程序返回 1 表示允许访问。\n返回其他值会导致 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e__cgroup_bpf_run_filter_sk()\u003c/code\u003e 返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-EPERM\u003c/code\u003e，调用方收到这个返回值会将包丢弃。\u003c/p\u003e\n\n\u003ch2 id=\"触发执行inet_create\"\u003e触发执行：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einet_create()\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eSocket 创建时会执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einet_create()\u003c/code\u003e，里面会调用\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_CGROUP_RUN_PROG_INET_SOCK()\u003c/code\u003e，如果该函数执行失败，socket 就会被释放。\u003c/p\u003e\n\n\u003ch2 id=\"加载方式attach-到-cgroup-文件描述符-1\"\u003e加载方式：attach 到 cgroup 文件描述符\u003c/h2\u003e\n\n\u003cp\u003eTODO\u003c/p\u003e\n\n\u003ch1 id=\"3-bpf_prog_type_cgroup_device\"\u003e3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_CGROUP_DEVICE\u003c/code\u003e\u003c/h1\u003e\n\n\u003ch2 id=\"使用场景-9\"\u003e使用场景\u003c/h2\u003e\n\n\u003ch3 id=\"场景一设备文件device-file访问控制\"\u003e场景一：设备文件（device file）访问控制\u003c/h3\u003e\n\n\u003ch2 id=\"程序签名-9\"\u003e程序签名\u003c/h2\u003e\n\n\u003ch3 id=\"传入参数struct-bpf_cgroup_dev_ctx-\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct bpf_cgroup_dev_ctx *\u003c/code\u003e\u003c/h3\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// https://github.com/torvalds/linux/blob/v5.10/include/uapi/linux/bpf.h#L4833\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_cgroup_dev_ctx\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eaccess_type\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* encoded as (BPF_DEVCG_ACC_* \u0026lt;\u0026lt; 16) | BPF_DEVCG_DEV_* */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003emajor\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u32\u003c/span\u003e \u003cspan class=\"n\"\u003eminor\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e字段含义：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eaccess_type\u003c/code\u003e：访问操作的类型，例如 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003emknod/read/write\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emajor\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eminor\u003c/code\u003e：主次设备号；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"返回值-7\"\u003e返回值\u003c/h3\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0\u003c/code\u003e：访问失败（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-EPERM\u003c/code\u003e）\u003c/li\u003e\n  \u003cli\u003e其他值：访问成功。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"触发执行创建或访问设备文件时\"\u003e触发执行：创建或访问设备文件时\u003c/h2\u003e\n\n\u003ch2 id=\"加载方式attach-到-cgroup-文件描述符-2\"\u003e加载方式：attach 到 cgroup 文件描述符\u003c/h2\u003e\n\n\u003cp\u003e指定 attach 类型为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_CGROUP_DEVICE\u003c/code\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"程序示例-5\"\u003e程序示例\u003c/h2\u003e\n\n\u003cp\u003e内核测试用例：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/torvalds/linux/blob/v5.10/tools/testing/selftests/bpf/progs/dev_cgroup.c\"\u003etools/testing/selftests/bpf/progs/dev_cgroup.c\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/torvalds/linux/blob/v5.10/tools/testing/selftests/bpf/test_dev_cgroup.c\"\u003etools/testing/selftests/bpf/test_dev_cgroup.c\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"延伸阅读-6\"\u003e延伸阅读\u003c/h2\u003e\n\n\u003cp\u003e可参考 \u003ca href=\"/blog/cgroupv2-zh/\"\u003e(译) Control Group v2 (cgroupv2)（KernelDoc, 2021）\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch1 id=\"-8\"\u003e————————————————————————\u003c/h1\u003e\n\u003ch1 id=\"kprobestracepointsperf-events\"\u003ekprobes、tracepoints、perf events\u003c/h1\u003e\n\u003ch1 id=\"-9\"\u003e————————————————————————\u003c/h1\u003e\n\n\u003cp\u003e\u003cmark\u003e三者都用于 kernel instrumentation\u003c/mark\u003e。简单对比：\u003c/p\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003e数据源\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eType\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003eKernel/User space\u003c/th\u003e\n      \u003cth style=\"text-align: left\"\u003e \u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003ekprobes\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eDynamic\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eKernel\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e观测内核函数的运行时（进入和离开函数）参数值等信息\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003euprobes\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eDynamic\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eUserspace\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e同上，但观测的是用户态函数\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003etracepoints\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eStatic\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eKernel\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e将自定义 handler 编译并加载到某些内核 hook，能拿到更多观测信息\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eUSDT\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eStatic\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003eUserspace\u003c/td\u003e\n      \u003ctd style=\"text-align: left\"\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e更具体区别可参考\n\u003ca href=\"https://jvns.ca/blog/2017/07/05/linux-tracing-systems/\"\u003eLinux tracing systems \u0026amp; how they fit together\u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://www.kernel.org/doc/Documentation/kprobes.txt\"\u003ekprobes\u003c/a\u003e：对\u003cstrong\u003e\u003cmark\u003e特定函数\u003c/mark\u003e\u003c/strong\u003e进行 instrumentation。\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e\u003cstrong\u003e进入\u003c/strong\u003e函数时触发 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekprobe\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cstrong\u003e离开\u003c/strong\u003e函数时触发 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekretprobe\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n\n    \u003cp\u003e启用后，会 \u003cstrong\u003e\u003cmark\u003e将 probe 位置的一段空代码替换为一个断点指令\u003c/mark\u003e\u003c/strong\u003e。\n  当程序执行到这个断点时，会\u003cstrong\u003e触发一条 trap 指令\u003c/strong\u003e，然后保存寄存器状态，\n  \u003cstrong\u003e跳转到指定的处理函数\u003c/strong\u003e（instrumentation handler）。\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003ekprobes 由 \u003ca href=\"https://github.com/torvalds/linux/blob/v5.8/kernel/trace/trace_kprobe.c#L1697\"\u003ekprobe_dispatcher()\u003c/a\u003e 处理，\n其中会获取 kprobe 的地址和寄存器上下文信息。\u003c/li\u003e\n      \u003cli\u003ekretprobes 是通过 kprobes 实现的。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://www.kernel.org/doc/Documentation/trace/tracepoints.rst\"\u003eTracepoints\u003c/a\u003e：内核中的轻量级 hook。\u003c/p\u003e\n\n    \u003cp\u003eTracepoints 与 kprobes 类似，但\n  前者是动态插入代码来完成的，后者\u003cstrong\u003e\u003cmark\u003e显式地（静态地）写在代码中的\u003c/mark\u003e\u003c/strong\u003e。\n  启用之后，会\u003cstrong\u003e\u003cmark\u003e从这些地方收集 debug 信息\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n    \u003cp\u003e同一个 tracepoints 可能会在多个地方声明；例如，\n  \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrace_drv_return_int()\u003c/code\u003e 在 net/mac80211/driver-ops.c 中的多个地方被调用。\u003c/p\u003e\n\n    \u003cp\u003e\u003cmark\u003e查看可用的 tracepoints 列表\u003c/mark\u003e：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003els /sys/kernel/debug/tracing/events\u003c/code\u003e。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://perf.wiki.kernel.org/index.php/Main_Page\"\u003ePerf events\u003c/a\u003e：是这里提到的几种 eBPF 程序的基础。\u003c/p\u003e\n\n    \u003cp\u003eBPF 基于已有的基础设施来完成事件采样（event sampling），允许 attach 程序到\n  感兴趣的 perf 事件，包括 kprobes, uprobes, tracepoints 以及软件和硬件事件。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e这些 instrumentation points \u003cstrong\u003e\u003cmark\u003e使 BPF 成为了一个通用的跟踪工具\u003c/mark\u003e\u003c/strong\u003e，\n超越了最初的网络范畴。\u003c/p\u003e\n\n\u003ch1 id=\"1-bpf_prog_type_kprobe\"\u003e1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_KPROBE\u003c/code\u003e\u003c/h1\u003e\n\n\u003ch2 id=\"使用场景-10\"\u003e使用场景\u003c/h2\u003e\n\n\u003ch3 id=\"场景一观测内核函数kprobe和用户空间函数uprobe\"\u003e场景一：观测内核函数（kprobe）和用户空间函数（uprobe）\u003c/h3\u003e\n\n\u003cp\u003e通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekprobe\u003c/code\u003e/\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekretprobe\u003c/code\u003e 观测内核函数。\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ek[ret]probe_perf_func()\u003c/code\u003e 会执行加载到 probe 点的 BPF 程序。\u003c/p\u003e\n\n\u003cp\u003e另外，这种程序也能 attach 到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eu[ret]probes\u003c/code\u003e，详情见\n\u003ca href=\"https://www.kernel.org/doc/Documentation/trace/uprobetracer.txt\"\u003euprobetracer.txt\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"hook-位置kretprobe_perf_funcuretprobe_perf_func\"\u003eHook 位置：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ek[ret]probe_perf_func()\u003c/code\u003e/\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eu[ret]probe_perf_func()\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e启用某个 probe 并执行到断点时，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ek[ret]probe_perf_func()\u003c/code\u003e 会通过\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrace_call_bpf()\u003c/code\u003e 执行 attach 在这个 probe 位置的 BPF 程序。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eu[ret]probe_perf_func()\u003c/code\u003e 也是类似的。\u003c/p\u003e\n\n\u003ch2 id=\"程序签名-10\"\u003e程序签名\u003c/h2\u003e\n\u003ch3 id=\"传入参数struct-pt_regs-ctx\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct pt_regs *ctx\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e可以通过这个指针\u003cmark\u003e访问寄存器\u003c/mark\u003e。\u003c/p\u003e\n\n\u003cp\u003e这个变量内的很多字段是平台相关的，但也有一些通用函数，例如\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eregs_return_value(regs)\u003c/code\u003e，返回的是存储程序返回值的寄存器内的值（x86 上对应的是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eax\u003c/code\u003e 寄存器）。\u003c/p\u003e\n\n\u003ch3 id=\"返回值-8\"\u003e返回值\u003c/h3\u003e\n\n\u003ch2 id=\"加载方式sysfsdebugtracing-目录下的配置文件\"\u003e加载方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/fs/debug/tracing/\u003c/code\u003e 目录下的配置文件\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/kernel/debug/tracing/events/[uk]probe/\u0026lt;probename\u0026gt;/id\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/kernel/debug/tracing/events/[uk]retprobe/\u0026lt;probename\u0026gt;/id\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"程序示例-6\"\u003e程序示例\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.kernel.org/doc/Documentation/trace/kprobetrace.txt\"\u003eDocumentation/trace/kprobetrace.txt\u003c/a\u003e\n有详细的例子。例如，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# 创建一个名为 `myprobe` 的程序，attach 到进入函数 `tcp_retransmit_skb()` 的地方\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;p:myprobe tcp_retransmit_skb\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e /sys/kernel/debug/tracing/kprobe_events\n\n\u003cspan class=\"c\"\u003e# 获取 probe id\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /sys/kernel/debug/tracing/events/kprobes/myprobe/id\n2266\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e用以上 id 打开一个 perf event，启用它，然后将这个 perf event 的 BPF 程序指定为我们的程序。\n过程可参考 \u003ca href=\"https://github.com/torvalds/linux/blob/v5.8/samples/bpf/bpf_load.c#L76\"\u003eload_and_attach()\u003c/a\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// samples/bpf/bpf_load.c\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eload_and_attach\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_insn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eprog\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eperf_event_attr\u003c/span\u003e \u003cspan class=\"n\"\u003eattr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Load BPF program and assign programfd to it; and get probeid of probe from sysfs */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eattr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePERF_TYPE_TRACEPOINT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eattr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esample_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePERF_SAMPLE_RAW\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eattr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esample_period\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eattr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewakeup_events\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eattr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econfig\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprobeid\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e               \u003cspan class=\"c1\"\u003e// /sys/kernel/debug/tracing/events/kprobes/\u0026lt;probe\u0026gt;/id\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eeventfd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esys_perf_event_open\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eattr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprogramfd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eioctl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eeventfd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ePERF_EVENT_IOC_ENABLE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eioctl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eeventfd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ePERF_EVENT_IOC_SET_BPF\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprogramfd\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"延伸阅读-7\"\u003e延伸阅读\u003c/h2\u003e\n\n\u003cp\u003eTODO\u003c/p\u003e\n\n\u003ch1 id=\"2-bpf_prog_type_tracepoint\"\u003e2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_TRACEPOINT\u003c/code\u003e\u003c/h1\u003e\n\n\u003ch2 id=\"使用场景-11\"\u003e使用场景\u003c/h2\u003e\n\n\u003ch3 id=\"场景一instrument-内核代码中的-tracepoints\"\u003e场景一：Instrument 内核代码中的 tracepoints\u003c/h3\u003e\n\n\u003cp\u003e启用方式和上面的 kprobe 类似：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho \u003c/span\u003e1 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e /sys/kernel/xxx/enable\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003e可跟踪的事件都在 \u003ccode\u003e/sys/kernel/debug/tracing/events\u003c/code\u003e 目录下面\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"hook-位置perf_trace_event_class\"\u003eHook 位置：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf_trace_\u0026lt;event_class\u0026gt;()\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e相应的 tracepoint 启用并执行到之后，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf_trace_\u0026lt;event_class\u0026gt;()\u003c/code\u003e （定义见 include/trace/perf.h）\n调用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eperf_trace_run_bpf_submit()\u003c/code\u003e，后者通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrace_call_bpf()\u003c/code\u003e 触发 BPF 程序执行。\u003c/p\u003e\n\n\u003ch2 id=\"程序签名-11\"\u003e程序签名\u003c/h2\u003e\n\u003ch3 id=\"传入参数因-tracepoint-而异\"\u003e传入参数：因 tracepoint 而异\u003c/h3\u003e\n\n\u003cp\u003e传入的参数和类型因 tracepoint 而异，见其定义。\u003c/p\u003e\n\n\u003cp\u003e见 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/kernel/debug/tracing/events/\u0026lt;tracepoint\u0026gt;/format\u003c/code\u003e。例如，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo cat\u003c/span\u003e /sys/kernel/debug/tracing/events/net/netif_rx/format\nname: netif_rx\nID: 1457\nformat:\n        field:unsigned short common_type\u003cspan class=\"p\"\u003e;\u003c/span\u003e       offset:0\u003cspan class=\"p\"\u003e;\u003c/span\u003e       size:2\u003cspan class=\"p\"\u003e;\u003c/span\u003e signed:0\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        field:unsigned char common_flags\u003cspan class=\"p\"\u003e;\u003c/span\u003e       offset:2\u003cspan class=\"p\"\u003e;\u003c/span\u003e       size:1\u003cspan class=\"p\"\u003e;\u003c/span\u003e signed:0\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        field:unsigned char common_preempt_count\u003cspan class=\"p\"\u003e;\u003c/span\u003e       offset:3\u003cspan class=\"p\"\u003e;\u003c/span\u003e       size:1\u003cspan class=\"p\"\u003e;\u003c/span\u003e signed:0\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        field:int common_pid\u003cspan class=\"p\"\u003e;\u003c/span\u003e   offset:4\u003cspan class=\"p\"\u003e;\u003c/span\u003e       size:4\u003cspan class=\"p\"\u003e;\u003c/span\u003e signed:1\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        field:void \u003cspan class=\"k\"\u003e*\u003c/span\u003e skbaddr\u003cspan class=\"p\"\u003e;\u003c/span\u003e   offset:8\u003cspan class=\"p\"\u003e;\u003c/span\u003e       size:8\u003cspan class=\"p\"\u003e;\u003c/span\u003e signed:0\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        field:unsigned int len\u003cspan class=\"p\"\u003e;\u003c/span\u003e offset:16\u003cspan class=\"p\"\u003e;\u003c/span\u003e      size:4\u003cspan class=\"p\"\u003e;\u003c/span\u003e signed:0\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        field:__data_loc char[] name\u003cspan class=\"p\"\u003e;\u003c/span\u003e   offset:20\u003cspan class=\"p\"\u003e;\u003c/span\u003e      size:4\u003cspan class=\"p\"\u003e;\u003c/span\u003e signed:1\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\nprint \u003cspan class=\"nb\"\u003efmt\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;dev=%s skbaddr=%p len=%u\u0026#34;\u003c/span\u003e, __get_str\u003cspan class=\"o\"\u003e(\u003c/span\u003ename\u003cspan class=\"o\"\u003e)\u003c/span\u003e, REC-\u0026gt;skbaddr, REC-\u0026gt;len\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e顺便看一下这个 tracepoint 在内核中的\u003ca href=\"https://github.com/torvalds/linux/blob/v5.8/net/core/dev.c#L4758\"\u003e实现\u003c/a\u003e，\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/core/dev.c\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003enetif_rx_internal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enet_timestamp_check\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev_tstamp_prequeue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003etrace_netif_rx\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"返回值-9\"\u003e返回值\u003c/h3\u003e\n\n\u003ch2 id=\"加载方式sysfsdebugtracing-目录下的配置文件-1\"\u003e加载方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/sys/fs/debug/tracing/\u003c/code\u003e 目录下的配置文件\u003c/h2\u003e\n\n\u003cp\u003e例如，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# 启用 `net/net_dev_xmit` tracepoint as \u0026#34;myprobe2\u0026#34;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;p:myprobe2 trace:net/net_dev_xmit\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e /sys/kernel/debug/tracing/kprobe_events\n\n\u003cspan class=\"c\"\u003e# 获取 probe ID\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /sys/kernel/debug/tracing/events/kprobes/myprobe2/id\n2270\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e过程加载代码可参考 \u003ca href=\"https://github.com/torvalds/linux/blob/v5.8/samples/bpf/bpf_load.c#L76\"\u003eload_and_attach()\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch1 id=\"3-bpf_prog_type_perf_event\"\u003e3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_PERF_EVENT\u003c/code\u003e\u003c/h1\u003e\n\n\u003ch2 id=\"使用场景-12\"\u003e使用场景\u003c/h2\u003e\n\n\u003ch3 id=\"场景一instrument-软件硬件-perf-事件\"\u003e场景一：Instrument 软件/硬件 perf 事件\u003c/h3\u003e\n\n\u003cp\u003e包括系统调用事件、定时器超时事件、硬件采样事件等。硬件事件包括 PMU（processor\nmonitoring unit）事件，它告诉我们已经执行了多少条指令之类的信息。\u003c/p\u003e\n\n\u003cp\u003ePerf 事件监控能具体到某个进程、组、处理器，也可以指定采样频率。\u003c/p\u003e\n\n\u003ch2 id=\"加载方式ioctl\"\u003e加载方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eioctl()\u003c/code\u003e\u003c/h2\u003e\n\n\u003col\u003e\n  \u003cli\u003eperf_event_open() ，带一些采样配置信息；\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eioctl(fd, \u003cmark\u003ePERF_EVENT_IOC_SET_BPF\u003c/mark\u003e)\u003c/code\u003e 设置 BPF 程序，\u003c/li\u003e\n  \u003cli\u003e然后用 ioctl(fd, PERF_EVENT_IOC_ENABLE) 启用事件，\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"程序签名-12\"\u003e程序签名\u003c/h2\u003e\n\u003ch3 id=\"传入参数struct-bpf_perf_event_data-\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct bpf_perf_event_data *\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/torvalds/linux/blob/v5.8/include/uapi/linux/bpf_perf_event.h#L13\"\u003e定义\u003c/a\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// include/uapi/linux/bpf_perf_event.h\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_perf_event_data\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebpf_user_pt_regs_t\u003c/span\u003e \u003cspan class=\"n\"\u003eregs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u64\u003c/span\u003e \u003cspan class=\"n\"\u003esample_period\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e__u64\u003c/span\u003e \u003cspan class=\"n\"\u003eaddr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"触发执行每个采样间隔执行一次\"\u003e触发执行：每个采样间隔执行一次\u003c/h2\u003e\n\n\u003cp\u003e取决于 perf event firing 和选择的采样频率。\u003c/p\u003e\n\n\u003ch1 id=\"-10\"\u003e————————————————————————\u003c/h1\u003e\n\u003ch1 id=\"轻量级隧道类型\"\u003e轻量级隧道类型\u003c/h1\u003e\n\u003ch1 id=\"-11\"\u003e————————————————————————\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://lwn.net/Articles/650778/\"\u003eLightweight tunnels\u003c/a\u003e 提供了\u003cstrong\u003e\u003cmark\u003e对内核路\n由子系统的编程能力\u003c/mark\u003e\u003c/strong\u003e，据此可以实现轻量级隧道。\u003c/p\u003e\n\n\u003cp\u003e举个例子，下面是没有 BPF 编程能力时，如何（为不同协议）添加路由：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# VXLAN:\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip route add 40.1.1.1/32 encap vxlan \u003cspan class=\"nb\"\u003eid \u003c/span\u003e10 dst 50.1.1.2 dev vxlan0\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eMPLS:\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip route add 10.1.1.0/30 encap mpls 200 via inet 10.1.1.1 dev swp1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e有了 BPF 可编程性之后，能为\u003cmark\u003e出向流量\u003c/mark\u003e（入向是只读的）做封装。\n详见 \u003ca href=\"https://lwn.net/Articles/705609/\"\u003eBPF for lightweight tunnel encapsulation\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e与 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc\u003c/code\u003e 类似，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip route\u003c/code\u003e 支持直接将 BPF 程序 attach 到网络设备：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip route add 192.168.253.2/32 \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n     encap bpf out obj lwt_len_hist_kern.o section len_hist \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n     dev veth0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"1-bpf_prog_type_lwt_in\"\u003e1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_LWT_IN\u003c/code\u003e\u003c/h1\u003e\n\n\u003ch2 id=\"使用场景-13\"\u003e使用场景\u003c/h2\u003e\n\n\u003ch3 id=\"场景一检查入向流量是否需要做解封装decap\"\u003e场景一：检查入向流量是否需要做解封装（decap）\u003c/h3\u003e\n\n\u003cp\u003eExamine inbound packets for lightweight tunnel de-encapsulation.\u003c/p\u003e\n\n\u003ch2 id=\"hook-位置lwtunnel_input\"\u003eHook 位置：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elwtunnel_input()\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e该函数支持多种封装类型。\nThe BPF case runs bpf_input in net/core/lwt_bpf.c with redirection disallowed.\u003c/p\u003e\n\n\u003ch2 id=\"程序签名-13\"\u003e程序签名\u003c/h2\u003e\n\u003ch3 id=\"传入参数struct-sk_buff-\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct sk_buff *\u003c/code\u003e\u003c/h3\u003e\n\n\u003ch3 id=\"返回值-10\"\u003e返回值\u003c/h3\u003e\n\n\u003ch2 id=\"加载方式ip-route-add\"\u003e加载方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip route add\u003c/code\u003e\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip route add \u0026lt;route+prefix\u0026gt; encap bpf \u003cspan class=\"k\"\u003ein \u003c/span\u003eobj \u0026lt;bpf obj file.o\u0026gt; section \u0026lt;ELF section\u0026gt; dev \u0026lt;device\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"延伸阅读-8\"\u003e延伸阅读\u003c/h2\u003e\n\n\u003cp\u003eTODO\u003c/p\u003e\n\n\u003ch1 id=\"2-bpf_prog_type_lwt_out\"\u003e2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_LWT_OUT\u003c/code\u003e\u003c/h1\u003e\n\n\u003ch2 id=\"使用场景-14\"\u003e使用场景\u003c/h2\u003e\n\n\u003ch2 id=\"场景一对出向流量做封装encap\"\u003e场景一：对出向流量做封装（encap）\u003c/h2\u003e\n\n\u003ch2 id=\"加载方式ip-route-add-1\"\u003e加载方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip route add\u003c/code\u003e\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip route add \u0026lt;route+prefix\u0026gt; encap bpf out obj \u0026lt;bpf object file.o\u0026gt; section \u0026lt;ELF section\u0026gt; dev \u0026lt;device\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"程序签名-14\"\u003e程序签名\u003c/h2\u003e\n\u003ch3 id=\"传入参数struct-__sk_buff--2\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct __sk_buff *\u003c/code\u003e\u003c/h3\u003e\n\n\u003ch2 id=\"触发执行lwtunnel_output\"\u003e触发执行：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elwtunnel_output()\u003c/code\u003e\u003c/h2\u003e\n\n\u003ch1 id=\"3-bpf_prog_type_lwt_xmit\"\u003e3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBPF_PROG_TYPE_LWT_XMIT\u003c/code\u003e\u003c/h1\u003e\n\n\u003ch2 id=\"使用场景-15\"\u003e使用场景\u003c/h2\u003e\n\n\u003ch3 id=\"场景一实现轻量级隧道发送端的-encapredir-方法\"\u003e场景一：实现轻量级隧道发送端的 encap/redir 方法\u003c/h3\u003e\n\n\u003ch2 id=\"hook-位置lwtunnel_xmit\"\u003eHook 位置：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elwtunnel_xmit()\u003c/code\u003e\u003c/h2\u003e\n\n\u003ch2 id=\"程序签名-15\"\u003e程序签名\u003c/h2\u003e\n\u003ch3 id=\"传入参数struct-__sk_buff--3\"\u003e传入参数：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct __sk_buff *\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e定义见 \u003ca href=\"#struct-__sk_buff\"\u003e前面\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"加载方式ip-route-add-2\"\u003e加载方式：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip route add\u003c/code\u003e\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip route add \u0026lt;route+prefix\u0026gt; encap bpf xmit obj \u0026lt;bpf obj file.o\u0026gt; section \u0026lt;ELF section\u0026gt; dev \u0026lt;device\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/firewalling-with-bpf-xdp/\"\u003e\u003cspan\u003e« Firewalling with BPF/XDP: Examples and Deep Dive\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/bpf-advanced-notes-2-zh/\"\u003e\u003cspan\u003eBPF 进阶笔记（二）：BPF Map 类型详解：使用场景、程序示例 »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2021-07-04T00:00:00Z",
  "Author": "Arthur Chiao"
}