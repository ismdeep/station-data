{
  "Source": "arthurchiao.art",
  "Title": "OVS Deep Dive 1: vswitchd",
  "Link": "https://arthurchiao.art/blog/ovs-deep-dive-1-vswitchd/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eOVS Deep Dive 1: vswitchd\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2016-12-31 | Last Update \u003c/p\u003e\n  \n  \u003cp class=\"intro\"\u003e\u003cspan class=\"dropcap\"\u003eI\u003c/span\u003en this OVS Deep Dive series,\nI will walk through the \u003ca href=\"https://github.com/openvswitch/ovs\"\u003eOpen vSwtich\u003c/a\u003e\n source code to look into the core designs\nand implementations of OVS. The code is based on\n \u003cspan style=\"font-weight:bold\"\u003eovs 2.6.1\u003c/span\u003e.\n\u003c/p\u003e\n\n\u003ch2 id=\"1-vswitchd-overview\"\u003e1. vswitchd Overview\u003c/h2\u003e\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/ovs-deep-dive/ovs_arch.jpg\" width=\"80%\" height=\"80%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig.1. OVS Architecture (image source NSRC[1])\u003c/p\u003e\n\n\u003cp\u003eAs depicted in Fig.1, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eovs-vswitchd\u003c/code\u003e sits in the key position of OVS, which\nneeds to interact with OpenFlow controller, OVSDB, and kernel module.\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eCore components in the system\n    \u003cul\u003e\n      \u003cli\u003ecommunicate with \u003cstrong\u003eoutside world\u003c/strong\u003e using \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOpenFlow\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003ecommunicate with \u003cstrong\u003eovsdb-server\u003c/strong\u003e using \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOVSDB protocol\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003ecommunicate with \u003cstrong\u003ekernel\u003c/strong\u003e over \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetlink\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003ecommunicate with \u003cstrong\u003esystem\u003c/strong\u003e through \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev\u003c/code\u003e abstract interface\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003eImplements mirroring, bonding, and VLANs\u003c/li\u003e\n  \u003cli\u003eCLI Tools: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eovs-ofctl\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eovs-appctl\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe following diagram reveals more details:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                       +-------------------+\n                       |    ovs-vswitchd   |\u0026lt;\u003cspan class=\"nt\"\u003e--\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003eovsdb-server\n                       +-------------------+\n                       |      ofproto      |\u0026lt;\u003cspan class=\"nt\"\u003e--\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003eOpenFlow controllers\n                       +--------+-+--------+\n                       | netdev | | ofproto|\n                       +--------+ |provider|\n                       | netdev | +--------+\n                       |provider|\n                       +--------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eHere, the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evswitch\u003c/code\u003e module is further devided into submodules/libraies:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eovs-vswitchd\u003c/code\u003e: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evswitchd\u003c/code\u003e daemon\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto\u003c/code\u003e: library which abstracts ovs bridge\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto-provider\u003c/code\u003e: interface to control an specific kind of OpenFlow switch\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev\u003c/code\u003e: library which abstracts network devices\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev-provider\u003c/code\u003e: OS- and hardware-specific interface to network devices\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe explain these concepts and data structures in following sections.\u003c/p\u003e\n\n\u003ch2 id=\"2-key-data-structures\"\u003e2. Key Data Structures\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e                          _\n                         |   +-------------------+\n                         |   |    ovs-vswitchd   |\u0026lt;\u003cspan class=\"nt\"\u003e--\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003eovsdb-server\n                         |   +-------------------+\n                         |   |      ofproto      |\u0026lt;\u003cspan class=\"nt\"\u003e--\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003eOpenFlow controllers\n                         |   +--------+-+--------+  _\n                         |   | netdev | |ofproto-|   |\n               userspace |   +--------+ |  dpif  |   |\n                         |   | netdev | +--------+   |\n                         |   |provider| |  dpif  |   |\n                         |   +---||---+ +--------+   |\n                         |       \u003cspan class=\"o\"\u003e||\u003c/span\u003e     |  dpif  |   | implementation of\n                         |       \u003cspan class=\"o\"\u003e||\u003c/span\u003e     |provider|   | ofproto provider\n                         |_      \u003cspan class=\"o\"\u003e||\u003c/span\u003e     +---||---+   |\n                                 \u003cspan class=\"o\"\u003e||\u003c/span\u003e         \u003cspan class=\"o\"\u003e||\u003c/span\u003e       |\n                          _  +---||-----+---||---+   |\n                         |   |          |datapath|   |\n                  kernel |   |          +--------+  _|\n                         |   |                   |\n                         |_  +--------||---------+\n                                      \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n                                   physical\n                                      NIC\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp align=\"center\"\u003eFig.2.1. OVS Internal Architecture [2]\u003c/p\u003e\n\n\u003cp\u003eAn OVS bridges manages two types of resources:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ethe forwarding plane it controls (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edatapath\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003ethe (physical and virtual) network devices attached to it (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eKey data structures:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003eOVS bridge implementation\u003c/p\u003e\n\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto-provider\u003c/code\u003e\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003efor \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edatapath\u003c/code\u003e management\u003c/p\u003e\n\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edpif\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edpif-provider\u003c/code\u003e\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003efor network devices management\u003c/p\u003e\n\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev-provider\u003c/code\u003e\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe explain them, respectively.\u003c/p\u003e\n\n\u003ch3 id=\"21-ofproto\"\u003e2.1 ofproto\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct ofproto\u003c/code\u003e abstracts OpenFlow switches.\nAn ofproto instance is just an OpenFlow switch (bridge).\u003c/p\u003e\n\n\u003cp\u003eData Structures (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto/ofproto-provider.h\u003c/code\u003e):\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct ofproto\u003c/code\u003e: represents an OpenFlow switch (ovs bridge),\n                  all flow/port operations are done on the ofproto\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct ofport\u003c/code\u003e: represents a port within an ofproto\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct rule\u003c/code\u003e: represents an OpenFlow flow within an ofproto\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct ofgroup\u003c/code\u003e: represents an OpenFlow 1.1+ group within an ofproto\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* An OpenFlow switch. */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eofproto\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eofproto_class\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto_class\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                 \u003cspan class=\"cm\"\u003e/* Datapath type. */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                 \u003cspan class=\"cm\"\u003e/* Datapath name. */\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Settings. */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003euint64_t\u003c/span\u003e \u003cspan class=\"n\"\u003efallback_dpid\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"cm\"\u003e/* Datapath ID if no better choice found. */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003euint64_t\u003c/span\u003e \u003cspan class=\"n\"\u003edatapath_id\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"cm\"\u003e/* Datapath ID. */\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Datapath. */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ehmap\u003c/span\u003e \u003cspan class=\"n\"\u003eports\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e          \u003cspan class=\"cm\"\u003e/* Contains \u0026#34;struct ofport\u0026#34;s. */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esimap\u003c/span\u003e \u003cspan class=\"n\"\u003eofp_requests\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"cm\"\u003e/* OpenFlow port number requests. */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003emax_ports\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e         \u003cspan class=\"cm\"\u003e/* Max possible OpenFlow port num, plus one. */\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Flow tables. */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eoftable\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etables\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Rules indexed on their cookie values, in all flow tables. */\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* List of expirable flows, in all flow tables. */\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* OpenFlow connections. */\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Groups. */\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Tunnel TLV mapping table. */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\n\u003cspan class=\"cm\"\u003e/* An OpenFlow port within a \u0026#34;struct ofproto\u0026#34;.\n *\n * The port\u0026#39;s name is netdev_get_name(port-\u0026gt;netdev).\n */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eofport\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ehmap_node\u003c/span\u003e \u003cspan class=\"n\"\u003ehmap_node\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* In struct ofproto\u0026#39;s \u0026#34;ports\u0026#34; hmap. */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eofproto\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* The ofproto that contains this port. */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eofputil_phy_port\u003c/span\u003e \u003cspan class=\"n\"\u003epp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eofp_port_t\u003c/span\u003e \u003cspan class=\"n\"\u003eofp_port\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e        \u003cspan class=\"cm\"\u003e/* OpenFlow port number. */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003euint64_t\u003c/span\u003e \u003cspan class=\"n\"\u003echange_seq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecreated\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"cm\"\u003e/* Time created, in msec. */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emtu\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"22-ofproto-provider\"\u003e2.2 ofproto-provider\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/ovs-deep-dive/ofproto_providers.png\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig.2.1. OVS Providers\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eofproto class structure, to be defined by each ofproto (ovs bridge)\nimplementation.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAn \u003cstrong\u003eofproto provider\u003c/strong\u003e is what ofproto uses to directly \u003cstrong\u003emonitor and control\nan OpenFlow-capable switch\u003c/strong\u003e. struct \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto_class\u003c/code\u003e, in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto/ofproto-provider.h\u003c/code\u003e,\ndefines the interfaces to implement an ofproto provider for new hardware or software.\u003c/p\u003e\n\n\u003cp\u003eOpen vSwitch has a \u003cstrong\u003ebuilt-in ofproto provider\u003c/strong\u003e named \u003cstrong\u003eofproto-dpif\u003c/strong\u003e, which\nis built on top of a library for manipulating datapaths, called \u003cstrong\u003edpif\u003c/strong\u003e.\nA “datapath” is a simple flow table, one that is only required to support\nexact-match flows, that is, flows without wildcards. When a packet arrives on\na network device, the datapath looks for it in this table.  If there is a\nmatch, then it performs the associated actions.  If there is no match, the\ndatapath passes the packet up to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto-dpif\u003c/code\u003e, \u003cstrong\u003ewhich maintains the full\nOpenFlow flow table\u003c/strong\u003e.  If the packet matches in this flow table, then\nofproto-dpif executes its actions and inserts a new entry into the dpif flow\ntable.  (Otherwise, ofproto-dpif passes the packet up to ofproto to send the\npacket to the OpenFlow controller, if one is configured.)\u003c/p\u003e\n\n\u003cp\u003eThe “dpif” library in turn delegates much of its functionality to a “dpif\nprovider”.  Fig.2.1 shows how dpif providers fit into the Open\nvSwitch architecture.\u003c/p\u003e\n\n\u003ch3 id=\"23-netdev\"\u003e2.3 netdev\u003c/h3\u003e\n\n\u003cp\u003eThe Open vSwitch library, defined in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elib/netdev-provider.h\u003c/code\u003e, implemented in\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elib/netdev.c\u003c/code\u003e, that \u003cstrong\u003eabstracts interacting with\nnetwork devices\u003c/strong\u003e, that is, Ethernet interfaces.\u003c/p\u003e\n\n\u003cp\u003eEvery port on a switch must have a corresponding netdev that must minimally\nsupport a few operations, such as the ability to read the netdev’s MTU, get the\nnumber of RX and TX queues.\u003c/p\u003e\n\n\u003cp\u003eThe netdev library is a thin\nlayer over “netdev provider” code, explained further below.\u003c/p\u003e\n\n\u003ch3 id=\"24-netdev-provider\"\u003e2.4 netdev-provider\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/ovs-deep-dive/netdev_providers.png\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig.2.2. netdev providers\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003enetdev provider\u003c/strong\u003e implements an \u003cstrong\u003eOS- and hardware-specific interface to\n“network devices”\u003c/strong\u003e, e.g. and ethernet device. \u003cstrong\u003eOpen vSwitch must be able to open\neach port on a switch as a netdev\u003c/strong\u003e, so you will need to implement a\n“netdev provider” that works with your switch hardware and software.\u003c/p\u003e\n\n\u003cp\u003eFig.2.2 depicts the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev providers\u003c/code\u003e in OVS. The detailed\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev\u003c/code\u003e provider types are listed below:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAll types of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev\u003c/code\u003e classes\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003elinux netdev (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elib/netdev-linux.c\u003c/code\u003e, for linux platform)\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esystem\u003c/code\u003e - \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_linux_class\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etap\u003c/code\u003e - \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_tap_class\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einternal\u003c/code\u003e - \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_internal_class\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003ebsd netdev (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elib/netdev-bsd.c\u003c/code\u003e, for bsd platform)\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esystem\u003c/code\u003e - \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_bsd_class\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etap\u003c/code\u003e - \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_tap_class\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003ewindows netdev (for windows platform)\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esystem\u003c/code\u003e - \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_windows_class\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einternal\u003c/code\u003e - \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_internal_class\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003edummy netdev (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elib/netdev-dummy.c\u003c/code\u003e)\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edummy\u003c/code\u003e - \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edummy_class\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edummy-internal\u003c/code\u003e - \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edummy_internal_class\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edummy-pmd\u003c/code\u003e - \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edummy_pmd_class\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003evport netdev (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elib/netdev-vport.c\u003c/code\u003e, a vport holds a reference to a port in\ndatapath, the latter could be opened with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_open()\u003c/code\u003e)\n    \u003cul\u003e\n      \u003cli\u003etunnel class:\n        \u003cul\u003e\n          \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egeneve\u003c/code\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egre\u003c/code\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evxlan\u003c/code\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elisp\u003c/code\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estt\u003c/code\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epatch\u003c/code\u003e - \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epatch_class\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003edpdk netdev\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edpdk_class\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edpdk_ring_class\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edpdk_vhost_class\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edpdk_vhost_client_class\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor example, the community is experimenting running OVS over DPDK, which\nperforms high performance packet processing in userspace. In this solution, the\nkernel module of OVS will be replaced by the counterparts in DPDK.  That means a\nDPDK netdev must be implemented as the \u003cstrong\u003enetdev-provider\u003c/strong\u003e for this platform. If\nyou look at the source code, you will see that’s what exactly been doing at\nthe end of DPDK init code - register it’s netdev provider classes:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\n\u003cspan class=\"nf\"\u003enetdev_dpdk_register\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enetdev_register_provider\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edpdk_class\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enetdev_register_provider\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edpdk_ring_class\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enetdev_register_provider\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edpdk_vhost_class\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enetdev_register_provider\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edpdk_vhost_client_class\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThe Porting section of the documentation has more information in the\n“Writing a netdev Provider” section.\u003c/p\u003e\n\n\u003ch2 id=\"3-call-flows\"\u003e3. Call Flows\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/ovs-deep-dive/vswitch_flow_diagram.jpg\" width=\"35%\" height=\"35%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig.3.1 vswitchd flow diagram\u003c/p\u003e\n\n\u003cp\u003eEntrypoint of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evswitchd\u003c/code\u003e is in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evswitchd/ovs-vswitchd.c\u003c/code\u003e.\nLogical control diagram of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eovs-vswitchd\u003c/code\u003e is depicted in Fig.3.1.\u003c/p\u003e\n\n\u003cp\u003eAt the start, it initializes the bridge module, which is implemented in\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003evswitchd/bridge.c\u003c/code\u003e. The bridge module will retrieve some configuration\nparameters from ovsdb.\u003c/p\u003e\n\n\u003cp\u003eThen, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eovs-vswitchd\u003c/code\u003e enters the main loop. In the first iteration of this loop,\nit initializes some libraries, include DPDK (if configured), and the most\nimportant, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto\u003c/code\u003e library. Note that these resources only init once.\u003c/p\u003e\n\n\u003cp\u003eThen, each datapath will do its work by running \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto_type_run()\u003c/code\u003e, which will\ncall into the specific \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etype_run()\u003c/code\u003e implementation of that datapath type.\u003c/p\u003e\n\n\u003cp\u003eThen, each bridge will do its work by running \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto_run()\u003c/code\u003e, which will call\ninto the specific \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erun()\u003c/code\u003e implementation of ofproto class.\u003c/p\u003e\n\n\u003cp\u003eThen, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eovs-vswitchd\u003c/code\u003e will handle IPC (JSON-RPC) messages, which comes from\ncommand line (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eovs-appctl\u003c/code\u003e) and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eovsdb-server\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThen, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_run()\u003c/code\u003e is called to process all the various kinds of netdevs.\u003c/p\u003e\n\n\u003cp\u003eAfter all the above work is done, the brige, unixctl server, and netdev modules\nwill enter blocking state until new signals trigger.\u003c/p\u003e\n\n\u003cp\u003eCorresponding psudo-code is shown below:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* step.1. init bridge module, obtain configs from ovsdb */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebridge_init\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* step.2. deamon loop */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eexiting\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* step.2.1. process control messages from OpenFlow Controller and CLI */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ebridge_run\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n          \u003cspan class=\"o\"\u003e|\u003c/span\u003e\n          \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"n\"\u003edpdk_init\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n          \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"n\"\u003ebridge_init_ofproto\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"c1\"\u003e// init bridges, only once\u003c/span\u003e\n          \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"n\"\u003ebridge_run__\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n              \u003cspan class=\"o\"\u003e|\u003c/span\u003e\n              \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edatapath\u003c/span\u003e \u003cspan class=\"n\"\u003etypes\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"cm\"\u003e/* Let each datapath type do the work that it needs to do. */\u003c/span\u003e\n                     \u003cspan class=\"n\"\u003eofproto_type_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n              \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eall_bridges\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n                     \u003cspan class=\"n\"\u003eofproto_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebridge\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// handle messages from OpenFlow Controller\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eunixctl_server_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunixctl\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* receive control messages from CLI (ovs-appctl \u0026lt;xxx\u0026gt;) */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003enetdev_run\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* Performs periodic work needed by all the various kinds of netdevs */\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* step.2.2. wait events arriving */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ebridge_wait\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eunixctl_server_wait\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunixctl\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003enetdev_wait\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* step.2.3. block util events arrive */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epoll_block\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWe explain some of the most important procedures in the following.\u003c/p\u003e\n\n\u003ch2 id=\"4-procedures-and-submodules\"\u003e4. Procedures and Submodules\u003c/h2\u003e\n\n\u003ch3 id=\"41-bridge-module-init\"\u003e4.1. bridge module init\u003c/h3\u003e\n\u003cp\u003eLet’s see what the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebridge_init()\u003c/code\u003e really does:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* Initializes the bridge module, configuring it to obtain its configuration\n * from an OVSDB server accessed over \u0026#39;remote\u0026#39;, which should be a string in a\n * form acceptable to ovsdb_idl_create(). */\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\n\u003cspan class=\"nf\"\u003ebridge_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eremote\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* step.1. Create connection to database. */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eidl\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eovsdb_idl_create\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eremote\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eovsrec_idl_class\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* step.2. Register unixctl commands. (ovs-appctl \u0026lt;command\u0026gt;) */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eunixctl_command_register\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;qos/show-types\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;interface\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eunixctl_command_register\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;bridge/dump-flows\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;bridge\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,)\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* step.3. init submodules */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elacp_init\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// register command lacp/show \u0026lt;port\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebond_init\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// register bond commands\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecfm_init\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebfd_init\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eovs_numa_init\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estp_init\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elldp_init\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erstp_init\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eifnotifier\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eif_notifier_create\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eif_change_cb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eovs-vswitchd\u003c/code\u003e first creates a connection to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eovsdb-server\u003c/code\u003e using a module\ncalled \u003cstrong\u003e\u003cem\u003eOVSDB IDL\u003c/em\u003e\u003c/strong\u003e.\n\u003cstrong\u003e\u003cem\u003eIDL\u003c/em\u003e\u003c/strong\u003e is short for \u003cstrong\u003eInterface Definition Language\u003c/strong\u003e.\nThe OVSDB IDL maintains an in-memory replica of a database. It issues RPC\nrequests to an OVSDB database server and parses the responses, converting\nraw JSON into data structures that are easier for clients to digest.\nThere is more explanations about OVSDB IDL in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eovsdb-idl.h\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eunixctl_command_register()\u003c/code\u003e will register a single unixctl command, which\nallow controlling \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eovs-vswitchd\u003c/code\u003e over CLI. Each submodule \ncalls this method to register its subcommands and expose them to the outside.\nAs we mentioned in the beginning, the command line tool to interact with\nvswitchd is \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eovs-appctl\u003c/code\u003e, so you could verify the those registered commands:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eovs-appctl \u003cspan class=\"nt\"\u003e--version\u003c/span\u003e\novs-appctl \u003cspan class=\"o\"\u003e(\u003c/span\u003eOpen vSwitch\u003cspan class=\"o\"\u003e)\u003c/span\u003e 2.5.0\nCompiled Mar 18 2016 15:00:11\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eovs-appctl bridge/dump-flows br-int\n\u003cspan class=\"nv\"\u003eduration\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e850872s, \u003cspan class=\"nv\"\u003en_packets\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2828, \u003cspan class=\"nv\"\u003en_bytes\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e181182, \u003cspan class=\"nv\"\u003epriority\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3,in_port\u003cspan class=\"o\"\u003e=\u003c/span\u003e1,dl_vlan\u003cspan class=\"o\"\u003e=\u003c/span\u003e1003,actions\u003cspan class=\"o\"\u003e=\u003c/span\u003emod_vlan_vid:1003,NORMAL\n\u003cspan class=\"nv\"\u003eduration\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e868485s, \u003cspan class=\"nv\"\u003en_packets\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3886, \u003cspan class=\"nv\"\u003en_bytes\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e222426, \u003cspan class=\"nv\"\u003epriority\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1,actions\u003cspan class=\"o\"\u003e=\u003c/span\u003eNORMAL\n\u003cspan class=\"nv\"\u003etable_id\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e23, \u003cspan class=\"nv\"\u003eduration\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1019439s, \u003cspan class=\"nv\"\u003en_packets\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0, \u003cspan class=\"nv\"\u003en_bytes\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0, ,actions\u003cspan class=\"o\"\u003e=\u003c/span\u003edrop\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eovs-appctl qos/show br-int\nQoS not configured on br-int\novs-appctl: ovs-vswitchd: server returned an error\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAt the end of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebridge_init()\u003c/code\u003e, some vswitchd submodules are initialized,\nincluding \u003cstrong\u003eLACP, BOND, CFM, BDF, NUMA, STP, LLDP, RSTP\u003c/strong\u003e, and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einotifiers\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe internal structure of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eovs-vswitchd\u003c/code\u003e is shown in Fig.4.1.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/ovs-deep-dive/vswitchd_2.png\" width=\"65%\" height=\"65%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig.4.1 vswitchd internal modules\u003c/p\u003e\n\n\u003ch3 id=\"42-ofproto-library-init\"\u003e4.2. ofproto library init\u003c/h3\u003e\n\n\u003cp\u003eofproto maintains a registered ofproto class array \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto_classes\u003c/code\u003e, in\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto/ofproto.c\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"mi\"\u003e288\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* All registered ofproto classes, in probe order. */\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e289\u003c/span\u003e \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eofproto_class\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto_classes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e290\u003c/span\u003e \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003en_ofproto_classes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e291\u003c/span\u003e \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003eallocated_ofproto_classes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIn \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto_init()\u003c/code\u003e, the built in ofproto class \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto_dpif_class\u003c/code\u003e will be\nregistered, which is defined and implemented in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto/ofproto-dpif.c\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eofproto_class\u003c/span\u003e \u003cspan class=\"n\"\u003eofproto_dpif_class\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eport_alloc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eport_construct\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eport_destruct\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eport_dealloc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eport_modified\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eport_query_by_name\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eport_add\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eport_del\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ect_flush\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                   \u003cspan class=\"cm\"\u003e/* ct_flush */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThe \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einit()\u003c/code\u003e method of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto_dpif_class\u003c/code\u003e will register its unixctl commands:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\n\u003cspan class=\"nf\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eshash\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eiface_hints\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eshash_node\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Make a local copy, since we don\u0026#39;t own \u0026#39;iface_hints\u0026#39; elements. */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eSHASH_FOR_EACH\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eiface_hints\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eiface_hint\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eorig_hint\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eiface_hint\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enew_hint\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003exmalloc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003esizeof\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enew_hint\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003enew_hint\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebr_name\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003exstrdup\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eorig_hint\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebr_name\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003enew_hint\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebr_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003exstrdup\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eorig_hint\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebr_type\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003enew_hint\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eofp_port\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eorig_hint\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eofp_port\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eshash_add\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003einit_ofp_ports\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enew_hint\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eofproto_unixctl_init\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// register fdb/xxx commands\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eudpif_init\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e           \u003cspan class=\"c1\"\u003e// register upcall/xxx commands\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eLet’s test one:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# an ofproto instance is an ovs bridge, so to list all bridges, just issue:\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eovs-appctl ofproto/list\nbr-bond\nbr-int\n\n\u003cspan class=\"c\"\u003e# you can also get the bridges info by querying ovsdb directly:\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eovs-vsctl show\nf9c76d49-891c-4670-b2fc-75aabca7a1a6\n    Bridge br-int\n        fail_mode: secure\n        Port br-int\n            Interface br-int\n                \u003cspan class=\"nb\"\u003etype\u003c/span\u003e: internal\n    Bridge br-bond\n        Port br-bond\n            Interface br-bond\n                \u003cspan class=\"nb\"\u003etype\u003c/span\u003e: internal\n    ovs_version: \u003cspan class=\"s2\"\u003e\u0026#34;2.5.0\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eNote that \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto\u003c/code\u003e library only inits once.\u003c/p\u003e\n\n\u003ch3 id=\"43-datapath-processing\"\u003e4.3. Datapath Processing\u003c/h3\u003e\n\n\u003cp style=\"color: red; font-weight:bold\"\u003eTODO: this section needs to refine\u003c/p\u003e\n\n\u003cp\u003eAfter \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto\u003c/code\u003e library is correctly initialized (which means all datapath\ntypes that will be used later have been registered), vswitchd will loop over\nthe datapath types and let the datapath handle all the things it needs to,\nsuch as, process port changes in this datapath, handle upcall (sending\nmis-matched packets to OpenFlow controller). Datapath finishes these\nlogics by implementing the callback \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etype_run()\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto-dpif\u003c/code\u003e - the built in datapath type, the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etype_run()\u003c/code\u003e is implemented\nin \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto/ofproto_dpif.c\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003cspan class=\"nf\"\u003etype_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eudpif_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebacker\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eudpif\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e|\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"n\"\u003eunixctl_command_reply\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"c1\"\u003e// handles upcall\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebacker\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003erecv_set_enable\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eudpif_set_threads\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebacker\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eudpif\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en_handlers\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en_revalidators\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebacker\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eneed_revalidate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// revalidate\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eudpif_revalidate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebacker\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eudpif\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Check for and handle port changes dpif. */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprocess_dpif_port_changes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebacker\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"44-bridge-processing\"\u003e4.4. Bridge Processing\u003c/h3\u003e\n\n\u003cp style=\"color: red; font-weight:bold\"\u003eTODO: this section needs to refine\u003c/p\u003e\n\n\u003cp\u003eIn each loop, vswitchd also let each bridge handle all its affairs in\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto_run()\u003c/code\u003e.  \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto_run()\u003c/code\u003e is defined in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003evswitch/bridge.c\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003cspan class=\"nf\"\u003eofproto_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eofproto\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto_class\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// calls into ofproto-dpif.c for dpif class\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto_class\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eport_poll\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto_class\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eport_poll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edevname\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eEAGAIN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eprocess_port_change\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edevname\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enew_seq\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003echange_seq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* Update OpenFlow port status for any port whose netdev has changed.\n         *\n         * Refreshing a given \u0026#39;ofport\u0026#39; can cause an arbitrary ofport to be\n         * destroyed, so it\u0026#39;s not safe to update ports directly from the\n         * HMAP_FOR_EACH loop, or even to use HMAP_FOR_EACH_SAFE.  Instead, we\n         * need this two-phase approach. */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eSSET_FOR_EACH\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edevname\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edevnames\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eupdate_port\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edevname\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003econnmgr_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003econnmgr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehandle_openflow\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// handles openflow messages\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIn the above, the bridge first calls the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erun()\u003c/code\u003e method of this ofproto class,\nto let the ofproto class handle all its class-specific affairs. Then it proceeds\nto the handling of port changes and OpenFlow messages.\u003cbr/\u003e\nFor \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edpif\u003c/code\u003e, the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erun()\u003c/code\u003e method is implemented in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto/ofproto-dpif.c\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003cspan class=\"nf\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eofproto\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto_\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enetflow\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003enetflow_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enetflow\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esflow\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003edpif_sflow_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esflow\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eipfix\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003edpif_ipfix_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eipfix\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003echange_seq\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003enew_seq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eHMAP_FOR_EACH\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eofport\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eup\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehmap_node\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eup\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eports\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eport_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eofport\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elacp_enabled\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehas_bonded_bundles\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eHMAP_FOR_EACH\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebundle\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehmap_node\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebundles\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ebundle_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebundle\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003estp_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erstp_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emac_learning_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eml\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebacker\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eneed_revalidate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eREV_MAC_LEARNING\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emcast_snooping_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ems\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebacker\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eneed_revalidate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eREV_MCAST_SNOOPING\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edump_seq\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003enew_dump_seq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* Expire OpenFlow flows whose idle_timeout or hard_timeout has passed. */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eLIST_FOR_EACH_SAFE\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erule\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enext_rule\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexpirable\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                            \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eup\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexpirable\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003erule_expire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erule_dpif_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erule\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"cm\"\u003e/* All outstanding data in existing flows has been accounted, so it\u0026#39;s a\n         * good time to do bond rebalancing. */\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehas_bonded_bundles\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eHMAP_FOR_EACH\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebundle\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehmap_node\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebundles\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebundle\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003ebond_rebalance\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebundle\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebond\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"45-sum-up-bridge_run\"\u003e4.5 Sum Up: bridge_run()\u003c/h3\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\n\u003cspan class=\"nf\"\u003ebridge_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* step.1. init all needed */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eovsdb_idl_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eidl\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// handle RPC; sync with remote OVSDB\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eif_notifier_run\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// TODO: not sure what\u0026#39;s doing here\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecfg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003edpdk_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ecfg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eother_config\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* init ofproto library.  This only runs once */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebridge_init_ofproto\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecfg\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e|\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto_init\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// resiter `ofproto/list` command\u003c/span\u003e\n           \u003cspan class=\"o\"\u003e|\u003c/span\u003e\n           \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto_class_register\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto_dpif_class\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// register default ofproto class\u003c/span\u003e\n           \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e \u003cspan class=\"n\"\u003eclasses\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eofproto_classes\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"c1\"\u003e// for ofproto_dpif_class, this will call the init() method in ofproto-dpif.c\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* step.2. datapath \u0026amp; bridge processing */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebridge_run__\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e|\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"n\"\u003eFOR_EACH\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etypes\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* Let each datapath type do the work that it needs to do. */\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e|\u003c/span\u003e    \u003cspan class=\"n\"\u003eofproto_type_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e|\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"n\"\u003eFOR_EACH\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eall_bridges\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* Let each bridge do the work that it needs to do. */\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eofproto_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebr\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n               \u003cspan class=\"o\"\u003e|\u003c/span\u003e\n               \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"n\"\u003eofproto_class\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n               \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"n\"\u003econnmgr_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econnmgr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehandle_openflow\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// handles messages from OpenFlow controller\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* step.3. commit to ovsdb if needed */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eovsdb_idl_txn_commit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etxn\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"46-unixctl-ipc-handling\"\u003e4.6 Unixctl IPC Handling\u003c/h3\u003e\n\u003cp\u003eIn each loop of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eovs-vswitchd\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eunixctl_server_run()\u003c/code\u003e will be called once.\nIn this method, the unixctl server first accepts connctions from IPC clients,\nthen processes requests from each connection.\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\n\u003cspan class=\"nf\"\u003eunixctl_server_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eunixctl_server\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// accept connections\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eerror\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epstream_accept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elistener\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estream\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003erpc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejsonrpc_open\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estream\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eEAGAIN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// process requests from each connection\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eLIST_FOR_EACH_SAFE\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003econns\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003erun_connection\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n          \u003cspan class=\"o\"\u003e|\u003c/span\u003e\n          \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"n\"\u003ejsonrpc_run\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n          \u003cspan class=\"o\"\u003e|\u003c/span\u003e    \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"n\"\u003estream_send\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n          \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"n\"\u003ejsonrpc_recv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econn_rpc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n               \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eJSONRPC_REQUEST\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n               \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"n\"\u003eprocess_command\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// format the received text to desired output\u003c/span\u003e\n                    \u003cspan class=\"o\"\u003e|--\u003c/span\u003e\u003cspan class=\"n\"\u003eregisterd\u003c/span\u003e \u003cspan class=\"n\"\u003eunixctl\u003c/span\u003e \u003cspan class=\"n\"\u003ecommand\u003c/span\u003e \u003cspan class=\"n\"\u003ecallback\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp style=\"color: red; font-weight:bold\"\u003eTODO: add an example\u003c/p\u003e\n\n\u003ch3 id=\"47-netdev-run\"\u003e4.7. netdev run\u003c/h3\u003e\n\u003cp\u003eIn \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_run()\u003c/code\u003e, vswitchd \u003cstrong\u003eloops over all the network devices, and updates\nthe \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev\u003c/code\u003e information of any of them changed\u003c/strong\u003e (e.g. mtu, src/dst mac).\nThe netdev processing in each loop is as follows:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* Performs periodic work needed by all the various kinds of netdevs.\n *\n * If your program opens any netdevs, it must call this function within its\n * main poll loop. */\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\n\u003cspan class=\"nf\"\u003enetdev_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enetdev_initialize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_registered_class\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCMAP_FOR_EACH\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecmap_node\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev_classes\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct netdev\u003c/code\u003e is a generic abstraction of network devices, defined in\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elib/netdev-provider.h\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* A network device (e.g. an Ethernet device).\n *\n * Network device implementations may read these members but should not modify\n * them. */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                         \u003cspan class=\"cm\"\u003e/* Name of network device. */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_class\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev_class\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* Functions to control this device. */\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en_txq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en_rxq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eref_cnt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                        \u003cspan class=\"cm\"\u003e/* Times this devices was opened. */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eshash_node\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e            \u003cspan class=\"cm\"\u003e/* Pointer to element in global map. */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eEach specific type of network device needs to implement the methods in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct\nnetdev_class\u003c/code\u003e, e.g. there are implementations for BSD, linux, DPDK. These\nimplementations are in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elib/netdev_xxx.c\u003c/code\u003e.\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_class\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* Type of netdevs in this class, e.g. \u0026#34;system\u0026#34;, \u0026#34;tap\u0026#34;, \u0026#34;gre\u0026#34;, etc. */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eis_pmd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"cm\"\u003e/* If \u0026#39;true\u0026#39; then this netdev should be polled by PMD threads. */\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* ## Top-Level Functions ## */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_class\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev_class\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ewait\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_class\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev_class\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* ## netdev Functions ## */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003econstruct\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edestruct\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erxq_recv\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_rxq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erx\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003edp_packet_batch\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ebatch\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erxq_wait\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_rxq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erx\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erc-\u0026gt;class-\u0026gt;run(rc-\u0026gt;class)\u003c/code\u003e will run into specific implementations, for linux\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev\u003c/code\u003es, it will call into \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev_linux_run()\u003c/code\u003e in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elib/netdev_linux.c\u003c/code\u003e. And\nwhat it does in the callback is \u003cstrong\u003edetecting linux network device changes through\nnetlink, e.g. mtc, src/dst mac changes, and updates these changes to\ncorresponding \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev\u003c/code\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\n\u003cspan class=\"nf\"\u003enetdev_linux_run\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_class\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev_class\u003c/span\u003e \u003cspan class=\"n\"\u003eOVS_UNUSED\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev_linux_miimon_enabled\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n        \u003cspan class=\"n\"\u003enetdev_linux_miimon_run\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Returns a NETLINK_ROUTE socket listening for RTNLGRP_LINK,\n     * RTNLGRP_IPV4_IFADDR and RTNLGRP_IPV6_IFADDR changes */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_linux_notify_sock\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eerror\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enl_sock_recv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// receive from kernel space\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ertnetlink_parse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003echange\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003enetdev_linux_update\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003echange\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                  \u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// update netdev changes, e.g. mtu, src/dst mac, etc\u003c/span\u003e\n                  \u003cspan class=\"o\"\u003e|-\u003c/span\u003e \u003cspan class=\"n\"\u003enetdev_linux_changed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eENOBUFS\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003enetdev_get_devices\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev_linux_class\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edevice_shash\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eSHASH_FOR_EACH\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edevice_shash\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eget_flags\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"n\"\u003enetdev_linux_changed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enetdev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eNetlink socket family is a Linux kernel interface used for \u003cstrong\u003eIPC\nbetween both the kernel and userspace processes, and between different userspace\nprocesses\u003c/strong\u003e. Similarly to the Unix domain sockets, and unlike INET sockets,\nNetlink communication cannot traverse host boundaries. However, while the Unix\ndomain sockets use the file system namespace, Netlink processes are addressed by\nprocess identifiers (PIDs).  Netlink is designed and used for transferring\nmiscellaneous networking information between the kernel space and userspace\nprocesses[3].\u003c/p\u003e\n\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eovs-vswitchd\u003c/code\u003e flow diagram\u003c/p\u003e\n\n    \u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/ovs-deep-dive/vswitch_flow_diagram.jpg\" width=\"35%\" height=\"35%\"/\u003e\u003c/p\u003e\n    \u003cp align=\"center\"\u003eFig.3.1 vswitchd flow diagram\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eovs-vswitchd\u003c/code\u003e iteraction with other modules\u003c/p\u003e\n\n    \u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/ovs-deep-dive/vswitchd_2.png\" width=\"65%\" height=\"65%\"/\u003e\u003c/p\u003e\n    \u003cp align=\"center\"\u003eFig.4.1 vswitchd internal modules\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eImplementation terms\u003c/p\u003e\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto\u003c/code\u003e: ovs bridge\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto provider\u003c/code\u003e: interface to manage an specific OpenFlow-capable software/hardware switch\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto-dpif\u003c/code\u003e - the built-in ofproto provider implementation in OVS\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edpif\u003c/code\u003e - a library servers for \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eofproto-dpif\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev\u003c/code\u003e - generic abstraction of network devices\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetdev-provider\u003c/code\u003e - interface to OS- and platform-specific network devices\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"5-event-loop-wait--block\"\u003e5. event loop: wait \u0026amp; block\u003c/h2\u003e\n\n\u003ch2 id=\"6-ingress-flow-diagram-todo\"\u003e6. ingress flow diagram (TODO)\u003c/h2\u003e\n\n\u003ch2 id=\"7-egress-flow-diagram-todo\"\u003e7. egress flow diagram (TODO)\u003c/h2\u003e\n\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://www.google.com.hk/url?sa=t\u0026amp;rct=j\u0026amp;q=\u0026amp;esrc=s\u0026amp;source=web\u0026amp;cd=8\u0026amp;cad=rja\u0026amp;uact=8\u0026amp;ved=0ahUKEwiy6sCB_pXRAhWKnpQKHblDC2wQFgg-MAc\u0026amp;url=https%3A%2F%2Fnsrc.org%2Fworkshops%2F2014%2Fnznog-sdn%2Fraw-attachment%2Fwiki%2FAgenda%2FOpenVSwitch.pdf\u0026amp;usg=AFQjCNFg9VULvEmHMXQAsuTOE6XLH6WbzQ\u0026amp;sig2=UlVrLltLct2F_xjgnqZiOA\"\u003eAn OpenVSwitch Introduction From NSRC\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/topics/porting.rst\"\u003eOVS Doc: Porting Guide\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Netlink\"\u003eWikipedia: netlink\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/ovs-deep-dive-0-overview/\"\u003e\u003cspan\u003e« OVS Deep Dive 0: Overview\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/ovs-deep-dive-2/\"\u003e\u003cspan\u003eOVS Deep Dive 2: OVSDB »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2016-12-31T00:00:00Z",
  "Author": "Arthur Chiao"
}