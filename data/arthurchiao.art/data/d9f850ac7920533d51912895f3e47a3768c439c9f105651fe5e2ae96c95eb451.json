{
  "Source": "arthurchiao.art",
  "Title": "[笔记]《BGP in the Data Center》 (O'Reilly 2017)",
  "Link": "https://arthurchiao.art/blog/bgp-in-data-center-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003e[笔记]《BGP in the Data Center》 (O\u0026#39;Reilly 2017)\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2019-04-01 | Last Update \u003c/p\u003e\n  \n  \u003cp\u003e本文是读 \u003ca href=\"https://www.oreilly.com/library/view/bgp-in-the/9781491983416/\"\u003eBGP in the Data\nCenter\u003c/a\u003e （\nO’Reilly, 2017）时所做的笔记。原书很短，只有 90 页不到，但理论和实践兼备，\n是现代数据中心和 BGP 入门的很好参考。\u003c/p\u003e\n\n\u003cp\u003e作者 Dinesh G. Dutt 是一家网络公司的首席科学家，在网络行业有 20 多年工作经验，曾\n是 Cisco Fellow，是 TRILL、VxLAN 等协议的合作者（co-author）之一。\u003c/p\u003e\n\n\u003cp\u003eBGP 原本是用于服务供应商（service provider）网络的，并不适用于数据中心，因此进入\n到数据中心的 BGP 是经过改造的。本文介绍的就是\u003cstrong\u003e\u003cmark\u003e数据中心中的\u003c/mark\u003e\u003c/strong\u003e BGP\n（BGP in the data center），这\u003cstrong\u003e\u003cmark\u003e与传统 BGP 还是有很大不同\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e以下是笔记内容。\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#前言\" id=\"markdown-toc-前言\"\u003e前言\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-数据中心网络绪论\" id=\"markdown-toc-1-数据中心网络绪论\"\u003e1 数据中心网络绪论\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-数据中心网络的需求\" id=\"markdown-toc-11-数据中心网络的需求\"\u003e1.1 数据中心网络的需求\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-clos-网络拓扑\" id=\"markdown-toc-12-clos-网络拓扑\"\u003e1.2 Clos 网络拓扑\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#三级-clos-网络\" id=\"markdown-toc-三级-clos-网络\"\u003e三级 Clos 网络\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#clos-网络的副作用\" id=\"markdown-toc-clos-网络的副作用\"\u003eClos 网络的副作用\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-clos-network-网络架构\" id=\"markdown-toc-13-clos-network-网络架构\"\u003e1.3 Clos Network 网络架构\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#14-服务器接入模型server-attach-model\" id=\"markdown-toc-14-服务器接入模型server-attach-model\"\u003e1.4 服务器接入模型（Server Attach Model）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#15-连接到外部网络connectivity-to-the-external-world\" id=\"markdown-toc-15-连接到外部网络connectivity-to-the-external-world\"\u003e1.5 连接到外部网络（Connectivity to the External World）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#16-多租户或-cloud支持\" id=\"markdown-toc-16-多租户或-cloud支持\"\u003e1.6 多租户（或 Cloud）支持\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#17-现代数据中心设计的运维考虑\" id=\"markdown-toc-17-现代数据中心设计的运维考虑\"\u003e1.7 现代数据中心设计的运维考虑\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#18-选择路由协议choice-of-routing-protocol\" id=\"markdown-toc-18-选择路由协议choice-of-routing-protocol\"\u003e1.8 选择路由协议（Choice of Routing Protocol）\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-bgp-是如何适配到数据中心的\" id=\"markdown-toc-2-bgp-是如何适配到数据中心的\"\u003e2 BGP 是如何适配到数据中心的\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-有几路由协议\" id=\"markdown-toc-21-有几路由协议\"\u003e2.1 有几路由协议\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-ibgp-和-ebgp\" id=\"markdown-toc-22-ibgp-和-ebgp\"\u003e2.2 iBGP 和 eBGP\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-asn-编号\" id=\"markdown-toc-23-asn-编号\"\u003e2.3 ASN 编号\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#私有-asn\" id=\"markdown-toc-私有-asn\"\u003e私有 ASN\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#path-hunting-问题\" id=\"markdown-toc-path-hunting-问题\"\u003ePath Hunting 问题\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#asn-numbering-model\" id=\"markdown-toc-asn-numbering-model\"\u003eASN Numbering Model\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-最优路径算法\" id=\"markdown-toc-24-最优路径算法\"\u003e2.4 最优路径算法\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#25-多路径选择\" id=\"markdown-toc-25-多路径选择\"\u003e2.5 多路径选择\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#26-默认定时器导致的慢收敛\" id=\"markdown-toc-26-默认定时器导致的慢收敛\"\u003e2.6 默认定时器导致的慢收敛\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#advertisement-interval\" id=\"markdown-toc-advertisement-interval\"\u003eAdvertisement Interval\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#keepalive-and-hold-timers\" id=\"markdown-toc-keepalive-and-hold-timers\"\u003eKeepalive and Hold Timers\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#connect-timer\" id=\"markdown-toc-connect-timer\"\u003eConnect Timer\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#27-数据中心默认-bgp-配置\" id=\"markdown-toc-27-数据中心默认-bgp-配置\"\u003e2.7 数据中心默认 BGP 配置\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#28-总结\" id=\"markdown-toc-28-总结\"\u003e2.8 总结\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-自动化-bgp-配置\" id=\"markdown-toc-3-自动化-bgp-配置\"\u003e3 自动化 BGP 配置\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-自动化配置基础\" id=\"markdown-toc-31-自动化配置基础\"\u003e3.1 自动化配置基础\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-示例数据中心网络\" id=\"markdown-toc-32-示例数据中心网络\"\u003e3.2 示例数据中心网络\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-自动化传统-bgp-的困难\" id=\"markdown-toc-33-自动化传统-bgp-的困难\"\u003e3.3 自动化传统 BGP 的困难\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#leaf-节点核心配置\" id=\"markdown-toc-leaf-节点核心配置\"\u003eLeaf 节点核心配置\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#spine-节点核心配置\" id=\"markdown-toc-spine-节点核心配置\"\u003eSpine 节点核心配置\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-路由再分发redistributes-routes\" id=\"markdown-toc-34-路由再分发redistributes-routes\"\u003e3.4 路由再分发（Redistributes Routes）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#35-路由策略\" id=\"markdown-toc-35-路由策略\"\u003e3.5 路由策略\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#route-maps\" id=\"markdown-toc-route-maps\"\u003eRoute-Maps\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#route-maps-对-bgp-处理的影响\" id=\"markdown-toc-route-maps-对-bgp-处理的影响\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eroute-maps\u003c/code\u003e 对 BGP 处理的影响\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#36-使用接口名作为邻居\" id=\"markdown-toc-36-使用接口名作为邻居\"\u003e3.6 使用接口名作为邻居\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#37-总结\" id=\"markdown-toc-37-总结\"\u003e3.7 总结\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-其他-bgp-配置\" id=\"markdown-toc-4-其他-bgp-配置\"\u003e4 其他 BGP 配置\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-接口-ip-和-remote-as\" id=\"markdown-toc-41-接口-ip-和-remote-as\"\u003e4.1 接口 IP 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eremote-as\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-numbered-interfaces-数量\" id=\"markdown-toc-42-numbered-interfaces-数量\"\u003e4.2 Numbered Interfaces 数量\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#43-unnumbered-interfaces\" id=\"markdown-toc-43-unnumbered-interfaces\"\u003e4.3 Unnumbered Interfaces\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#44-bgp-unnumbered\" id=\"markdown-toc-44-bgp-unnumbered\"\u003e4.4 BGP Unnumbered\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#ipv6-router-advertisement\" id=\"markdown-toc-ipv6-router-advertisement\"\u003eIPv6 Router Advertisement\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#rfc-5594\" id=\"markdown-toc-rfc-5594\"\u003eRFC 5594\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#基于-rfc-5549-实现转发\" id=\"markdown-toc-基于-rfc-5549-实现转发\"\u003e基于 RFC 5549 实现转发\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#bgp-capability-to-negotiate-rfc-5549-use\" id=\"markdown-toc-bgp-capability-to-negotiate-rfc-5549-use\"\u003eBGP Capability to Negotiate RFC 5549 Use\u003c/a\u003e            \u003cul\u003e\n              \u003cli\u003e\u003ca href=\"#互操作性\" id=\"markdown-toc-互操作性\"\u003e互操作性\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#45-remote-as-指定-bgp-session-类型\" id=\"markdown-toc-45-remote-as-指定-bgp-session-类型\"\u003e4.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eremote-as\u003c/code\u003e 指定 BGP session 类型\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#46-总结\" id=\"markdown-toc-46-总结\"\u003e4.6 总结\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-bgp-生命周期管理\" id=\"markdown-toc-5-bgp-生命周期管理\"\u003e5 BGP 生命周期管理\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#51-查看配置\" id=\"markdown-toc-51-查看配置\"\u003e5.1 查看配置\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#查看-bgp-session-信息\" id=\"markdown-toc-查看-bgp-session-信息\"\u003e查看 BGP session 信息\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#查看当前路由\" id=\"markdown-toc-查看当前路由\"\u003e查看当前路由\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#52-连接到外部网络\" id=\"markdown-toc-52-连接到外部网络\"\u003e5.2 连接到外部网络\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#53-计划节点维护\" id=\"markdown-toc-53-计划节点维护\"\u003e5.3 计划节点维护\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#54-debug-bgp\" id=\"markdown-toc-54-debug-bgp\"\u003e5.4 Debug BGP\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#55-总结\" id=\"markdown-toc-55-总结\"\u003e5.5 总结\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#6-服务器上运行-bgp\" id=\"markdown-toc-6-服务器上运行-bgp\"\u003e6 服务器上运行 BGP\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#61-虚拟服务器的兴起\" id=\"markdown-toc-61-虚拟服务器的兴起\"\u003e6.1 虚拟服务器的兴起\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#anycast-地址\" id=\"markdown-toc-anycast-地址\"\u003eAnycast 地址\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#62-交换机和服务器做-bgp-peering-的模型\" id=\"markdown-toc-62-交换机和服务器做-bgp-peering-的模型\"\u003e6.2 交换机和服务器做 BGP Peering 的模型\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#asn-分配\" id=\"markdown-toc-asn-分配\"\u003eASN 分配\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#路由交换模型\" id=\"markdown-toc-路由交换模型\"\u003e路由交换模型\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#63-边界服务器-bgp-peering-方案\" id=\"markdown-toc-63-边界服务器-bgp-peering-方案\"\u003e6.3 边界服务器 BGP Peering 方案\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#动态邻居\" id=\"markdown-toc-动态邻居\"\u003e动态邻居\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#bgp-unnumbered\" id=\"markdown-toc-bgp-unnumbered\"\u003eBGP Unnumbered\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#服务器上可用的路由软件\" id=\"markdown-toc-服务器上可用的路由软件\"\u003e服务器上可用的路由软件\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#64-总结\" id=\"markdown-toc-64-总结\"\u003e6.4 总结\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003e数据中心中的\u003c/strong\u003e BGP 就像一头怪兽（a rather strange beast）。\n\u003cstrong\u003e\u003cmark\u003eBGP 进入数据中心是相当意外的\u003c/mark\u003e\u003c/strong\u003e（rather unexpected），\n但\u003cstrong\u003e\u003cmark\u003e现在已经是数据中心路由协议的首选\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e本书定位\u003c/strong\u003e：网络运维人员和工程师，有基本的网络和 BGP 知识，想知道 BGP 在数据中\n心是如何应用的。\n理解本书内容无需任何 BGP 高级知识，或任何特定路由平台的经验。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e本书主要目的\u003c/strong\u003e：用一本书囊括数据中心部署 BGP 所需的\u003cstrong\u003e\u003cmark\u003e理论和实践\u003c/mark\u003e\u003c/strong\u003e\n（theory and pratice）。\u003c/p\u003e\n\n\u003cp\u003e本书使用的 BGP 软件：\u003ca href=\"https://frrouting.org\"\u003eFRRouting\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"1-数据中心网络绪论\"\u003e1 数据中心网络绪论\u003c/h1\u003e\n\n\u003cp\u003e本章介绍在给定应用需求和预期规模的前提下，如何为现代数据中心设计网络（network\ndesign of a modern data center network）。\u003c/p\u003e\n\n\u003cp\u003e和十年前相比，现代数据中心规模更大，网络部署速度要求更快（秒级而不是天级）。这显\n著影响了网络的设计和部署。\u003c/p\u003e\n\n\u003cp\u003eBGP（Border Gateway Protocol）：\u003cstrong\u003e边界网关协议\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e过去的几十年里，连接到互联网（公网）的系统通过 BGP 发现彼此（find one another）\n。但是，它也可以用在数据中心内部。现代数据中心中使用最广泛的路由协议就是 BGP。\n\u003cstrong\u003e\u003cmark\u003eBGP 是标准协议，有很多免费和开源的软件实现\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e本章试图回答以下问题：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e现代数据中心网络设计的\u003cstrong\u003e\u003cmark\u003e目标\u003c/mark\u003e\u003c/strong\u003e是什么？\u003c/li\u003e\n  \u003cli\u003e这些目标与其他网络（例如企业网和园区网，enterprise and campus）的设计目标有什么\u003cstrong\u003e\u003cmark\u003e不同\u003c/mark\u003e\u003c/strong\u003e？\u003c/li\u003e\n  \u003cli\u003e数据中心\u003cstrong\u003e\u003cmark\u003e为什么选择 BGP\u003c/mark\u003e\u003c/strong\u003e 作为路由协议？\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003ca name=\"chap_1.1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"11-数据中心网络的需求\"\u003e1.1 数据中心网络的需求\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003e现代数据中心的演进\u003c/mark\u003e\u003c/strong\u003e都是由\u003cstrong\u003e\u003cmark\u003e大型互联网公司的需求驱动\u003c/mark\u003e\u003c/strong\u003e的，例如 Google 和 Amazon。\u003c/p\u003e\n\n\u003cp\u003e核心需求：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e服务器到服务器通信越来越多（Increased server-to-server communication）\u003c/p\u003e\n\n    \u003cp\u003e单体应用到\u003cstrong\u003e\u003cmark\u003e微服务化\u003c/mark\u003e\u003c/strong\u003e的转变，导致南北向流量减少，东西向流量增加。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e规模（Scale）\u003c/p\u003e\n\n    \u003cp\u003e过去，几百台服务器就已经是一个大数据中心；现在，现代数据中心一个机\n 房可能就有上万台服务器。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e弹性（Resilience）\u003c/p\u003e\n\n    \u003cp\u003e老式数据中心的设计都是\u003cstrong\u003e假设网络是可靠的\u003c/strong\u003e，而现代数据中心应用都是\u003cstrong\u003e假设网络是不可靠的\u003c/strong\u003e ——\n 总会由于各种原因导致网络或机器故障。弹性就是要保证发生故障时，\u003cstrong\u003e受影响的范围可控，尽量做到不影响用户体验\u003c/strong\u003e。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e现代数据中心网络必须满足以上三方面基本需求。\u003c/p\u003e\n\n\u003cp\u003e多租户网络需要额外考虑：支持\u003cstrong\u003e虚拟网络的快速部署和拆除\u003c/strong\u003e（rapid deployment and\nteardown)。\u003c/p\u003e\n\n\u003cp\u003e传统网络设计的扩展方式：\u003cstrong\u003escale-in\u003c/strong\u003e（垂直扩展），即通过更换性能更高的设备实现。\n缺点：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e高性能设备特别贵\u003c/li\u003e\n  \u003cli\u003e这些设备大部分都是部署两份实现冗余（two-way redundancy），但仍然存在同时挂掉的风险，可用性不是足够高\u003c/li\u003e\n  \u003cli\u003e发生故障时，故障范围特别大（尤其是核心设备）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003ca name=\"chap_1.2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"12-clos-网络拓扑\"\u003e1.2 Clos 网络拓扑\u003c/h2\u003e\n\n\u003cp\u003e大型互联网公司最后采用了一种称为 Clos 的架构。Clos 架构最初是贝尔实验室的\nCharles Clos 在 \u003cstrong\u003e\u003cmark\u003e1950s 为电话交换网设计\u003c/mark\u003e\u003c/strong\u003e的。\nCLOS 可以实现\u003cstrong\u003e\u003cmark\u003e无阻塞架构\u003c/mark\u003e\u003c/strong\u003e（non-blocking architecture）：\u003cstrong\u003e\u003cmark\u003e上下行带宽都充分利用\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/1-1.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 1-1 简单的两级（two-tier） Clos 网络\u003c/p\u003e\n\n\u003cp\u003e特点：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e连接的一致性\u003c/mark\u003e\u003c/strong\u003e（uniformity of connectivity）：任意两个服务器之间都是 3 跳\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e节点同构\u003c/mark\u003e\u003c/strong\u003e（homogeneous）：服务器都是对等的，交换机/路由器也是\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e全连接\u003c/mark\u003e\u003c/strong\u003e（full-mesh）：故障时影响面小；总带宽高，而且方便扩展，总带宽只受限于 Spine 的接口数量\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e注意，在以上模型中，\u003cstrong\u003e\u003cmark\u003eSpine 仅用于连接 Leaf\u003c/mark\u003e\u003c/strong\u003e，因此在这种模型中，\n\u003cstrong\u003e\u003cmark\u003e所有的功能（functionality）都集中在 Leaf 上\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e扩展方式：\u003cstrong\u003escale-out\u003c/strong\u003e（水平扩展）。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003e最大服务器数量\u003c/mark\u003e\u003c/strong\u003e（无阻塞架构下）：\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003en * m / 2\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，其中\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003en\u003c/code\u003e 是一个 Leaf 节点的端口数量，\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003em\u003c/code\u003e 是一个 Spine 节点的端口数量。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e典型带宽，分为接入（leaf-server）和互连（leaf-spine）：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e接入 10G，互连 40G\u003c/li\u003e\n  \u003cli\u003e接入 25G，互连 100G\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e受电源限制，单个机柜最大不超过 40 台服务器。\u003c/p\u003e\n\n\u003ch3 id=\"三级-clos-网络\"\u003e三级 Clos 网络\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/1-2.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 1-2 三级（three-tier） Clos 网络\u003c/p\u003e\n\n\u003cp\u003e一组 ToR 和 Leaf 组成一个二级 Clos，称为一个 pod 或 cluster；\npod/cluster 作为一个独立单元再和 Spine 组成一个二级 Clos。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e最大服务器数量\u003c/strong\u003e：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003en * n * n /4\u003c/code\u003e，其中 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003en\u003c/code\u003e 是交换机端口数量。\u003c/p\u003e\n\n\u003cp\u003eClos 架构的魅力：无论从哪一级看，每个组成部分都是类似的，可以方便地替换和扩容。\u003c/p\u003e\n\n\u003cp\u003e为了解决规模瓶颈，大型互联网公司甚至会考虑 4 级甚至 6 级 Clos 架构。\u003c/p\u003e\n\n\u003ch3 id=\"clos-网络的副作用\"\u003eClos 网络的副作用\u003c/h3\u003e\n\n\u003cp\u003e由于 Spine 和 Leaf 之间是 full-mesh，网线会特别多，排线会复杂一些。\u003c/p\u003e\n\n\u003cp\u003e设备故障影响面比较小，排障和更换设备方便（resilience）。\u003c/p\u003e\n\n\u003cp\u003e设备都是对等的，管理比较方便。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_1.3\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"13-clos-network-网络架构\"\u003e1.3 Clos Network 网络架构\u003c/h2\u003e\n\n\u003cp\u003e传统网络架构中，接入层和汇聚层走二层交换，因此需要运行 STP 协议消除二层环路。\n如果在 Clos 网络中交换机也走二层，那可用（active）链路就会大大减少，如图 1-3 所\n示：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/1-3.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 1-3 启用 STP 之后的网络连接\u003c/p\u003e\n\n\u003cp\u003e如果有链路发生故障，那可用链路的效率会更低：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/1-4.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 1-4 启用 STP 并且一条链路发生故障之后的网络连接\u003c/p\u003e\n\n\u003cp\u003e由此可见，\u003cstrong\u003e走二层会导致非常低效和不均匀的连接\u003c/strong\u003e（highly inefficient and\nnonuniform connectivity）。\u003c/p\u003e\n\n\u003cp\u003e而另一方面，如果走三层路由，那就可以充分利用 Spine 和 Leaf 之间的 full-mesh\n连接。而且路由还可以判断最短路径，或者为了达到更高整体利用率设置特定的路径。\u003c/p\u003e\n\n\u003cp\u003e因此，第一个结论：\u003cstrong\u003e对于 Spine-Leaf 网络，路由（三层）比交换（二层）更合适\u003c/strong\u003e。通\n过二层连接的网络称为\u003cstrong\u003e桥接网络\u003c/strong\u003e（bridged network）；通过路由连接的网络称为\u003cstrong\u003e路\n由网络\u003c/strong\u003e（routed network）。\u003c/p\u003e\n\n\u003cp\u003e使用路由的另一个好处是，避免了各种厂商相关的 STP 优化方案（将多条物理链路聚合成\n一条虚拟链路提高利用率）。\u003c/p\u003e\n\n\u003cp\u003e典型的传统桥接网络需要运行：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eSTP\u003c/li\u003e\n  \u003cli\u003e一个单向链路检测协议（虽然现在已经合并到 STP 了）\u003c/li\u003e\n  \u003cli\u003e一个 VLAN 分发协议\u003c/li\u003e\n  \u003cli\u003e一个 first-hop 路由协议，例如 HSRP（Host Standby Routing Protocol） 或 VRRP（Virtual Router Redundancy Protocol）\u003c/li\u003e\n  \u003cli\u003e一个路由协议，用于连接多个桥接网络\u003c/li\u003e\n  \u003cli\u003e一个独立的单向链路检测协议，用于走路由的链路（routed links）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e如果是路由网络，那只需要：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e一个路由协议（例如 BGP）\u003c/li\u003e\n  \u003cli\u003e一个单向链路检测协议\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e和服务器直连的路由器（leaf）会充当 anycast gateway（也可以称为分布式网关）\u003c/strong\u003e，\n此外就不需要其他协议了。\u003c/p\u003e\n\n\u003cp\u003e以上，就是 Clos 网络如何实现高度可扩展和弹性伸缩的。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_1.4\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"14-服务器接入模型server-attach-model\"\u003e1.4 服务器接入模型（Server Attach Model）\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e单接入\u003c/strong\u003e（single-attach）\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e双接入\u003c/strong\u003e（dual-attach）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e大型互联网公司采用\u003cstrong\u003e单接入方式\u003c/strong\u003e（single-attach servers），即，每个服务器只连接\n到单个置顶交换机。这种设计背后的逻辑是：服务器数量足够多，由于网络问题导致单个机\n柜挂掉时，影响不是很大。\u003c/p\u003e\n\n\u003cp\u003e但是对于小型网络，乃至部分大型公司的网络，挂掉一个机柜带来的影响是不能接受的。\n因此这些公司采用\u003cstrong\u003e双接入\u003c/strong\u003e（dual-attach servers）方式：每个服务器连接到两个置顶\n交换机。\u003c/p\u003e\n\n\u003cp\u003e双接入方式为了提高链路利用率，会将两个链路聚合成一个虚拟链路，这个技术是厂商相关\n的，因此叫法不太一样：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eCisco 叫 vPC（virtual Port Channel）\u003c/li\u003e\n  \u003cli\u003eCumulus 叫 CLAG\u003c/li\u003e\n  \u003cli\u003eArista 叫 MLAG（Multi-Chassis Link Aggregation Protocol）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e这\u003cstrong\u003e需要宿主机运行链路聚合控制协议（Link Aggreration Control Protocol, LACP）\n以创建 bond 链路\u003c/strong\u003e。如图 1-5 所示。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/1-5.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 1-5 双接入方式下的链路聚合\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_1.5\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"15-连接到外部网络connectivity-to-the-external-world\"\u003e1.5 连接到外部网络（Connectivity to the External World）\u003c/h2\u003e\n\n\u003cp\u003e对于\u003cstrong\u003e中型或大型网络\u003c/strong\u003e，\u003cstrong\u003e通过 border leaf\u003c/strong\u003e 连接到外网。\u003c/p\u003e\n\n\u003cp\u003e主要好处：将数据中心的网络和外部网络隔开（isolate）。数据中心内的路由协议无需和\n外部交互（interact），更加稳定和安全。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/1-6.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 1-6 通过 border leaf 将一个 Clos 网络连接到外部网络\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e小型数据中心\u003c/strong\u003e出于成本考虑，不会部署单独的 border leaf 节点，而是\u003cstrong\u003e通过 Spine\u003c/strong\u003e 连接到\n外部网络，如图 1-7 所示。需要注意：这种方案中所有 Spine 都需要连接到外部网络，而\n不是一部分 Spine。这非常重要，因为 \u003cstrong\u003eClos 网络中所有 Spine 都是对等的\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/1-7.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 1-7 通过 spine 将一个 Clos 网络连接到外部网络\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_1.6\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"16-多租户或-cloud支持\"\u003e1.6 多租户（或 Cloud）支持\u003c/h2\u003e\n\n\u003cp\u003eClos 拓扑也适用于云计算网络，不管是公有云还是私有云。\u003c/p\u003e\n\n\u003cp\u003e云计算架构的额外需求：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e敏捷性（Agility）：能快速创建/删除虚拟网络\u003c/li\u003e\n  \u003cli\u003e隔离性（Isolation）：租户之间互相不可见\u003c/li\u003e\n  \u003cli\u003e规模（Scale）：能够支持大量的租户\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003ca name=\"chap_1.7\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"17-现代数据中心设计的运维考虑\"\u003e1.7 现代数据中心设计的运维考虑\u003c/h2\u003e\n\n\u003cp\u003e数据中心的设计会影响到数据中心的运维。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e自动化是最基本的要求\u003c/strong\u003e（Automation is nothing less than a requirement for\nbasic survial）。在设计的时候要考虑能使自动化运维简单、可重复（simple and\nrepeatable）。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_1.8\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"18-选择路由协议choice-of-routing-protocol\"\u003e1.8 选择路由协议（Choice of Routing Protocol）\u003c/h2\u003e\n\n\u003cp\u003e对企业网（enterprise network），两种协议比较合适：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eOSPF（Open Shortest Path First）\u003c/li\u003e\n  \u003cli\u003eIS-IS（Intermediate System to Intermediate System）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e它们都设计用于企业网内部，大部分企业网管理员对此应该很熟悉。\u003c/p\u003e\n\n\u003cp\u003e但是，\u003cstrong\u003eOSPF 不支持多协议\u003c/strong\u003e（例如对 IPv4 和 IPv6 需要运行两个独立协议），因此并没有\n被大型互联网厂商采用。\u003c/p\u003e\n\n\u003cp\u003eIS-IS 支持 IPv4/IPv6，但是可选的实现比较少。而且，一些管理员认为，IS-IS 这样的链\n路状态（link-state）协议不适用于 Clos 这样的富连接（richly connected）网络。\u003c/p\u003e\n\n\u003cp\u003eBGP 的特点：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e成熟\u003c/li\u003e\n  \u003cli\u003e支撑着互联网（powers the internet）\u003c/li\u003e\n  \u003cli\u003e容易理解（fundamentally simple to understand），虽然名声可能不佳（despite its\nreputation）\u003c/li\u003e\n  \u003cli\u003e实现很多，包括很多开源实现\u003c/li\u003e\n  \u003cli\u003e支持多协议（例如 IPv4/IPv6，MPLS）和 VPN（内置）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e只需对 BGP 做一些改造，就可以将它高效地应用中数据中心中。微软的 Azure 团队是最早\n对 BGP 进行改造用于数据中心的。现在，我接触的大部分客户都是部署 BGP。\u003c/p\u003e\n\n\u003cp\u003e在下一章中，我们将看到人们\u003cstrong\u003e对传统 BGP 进行了哪些改造\u003c/strong\u003e，然后将它应用到数据中心的。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"2-bgp-是如何适配到数据中心的\"\u003e2 BGP 是如何适配到数据中心的\u003c/h1\u003e\n\n\u003cp\u003e在 BGP 用于数据中心之前，它主要用于\u003cstrong\u003e服务提供商网络\u003c/strong\u003e（service provider network）。\n这导致的一个问题就是，数据中心不能运行 BGP，不然会和底层供应商的网络有冲突。如\n果你是网络管理和运维人员，那意识到这一点非常重要。\u003c/p\u003e\n\n\u003cp\u003e不同网络场景：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e数据中心：高密度连接（dense connectivity）\u003c/li\u003e\n  \u003cli\u003e服务提供商（连接不同域）：相对低密度连接（relatively sparse connectivity）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e因此，服务提供商的网络首先是考虑可靠性（stability），其次才是（路由等）变化的快\n速通知（rapid notification of changes）。因此，BGP 发送通知的实时性比较低。而在\n数据中心中，管理员更希望\u003cstrong\u003e路由更新（routing updates）越快越好\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e另外，由于 BGP 自身的设计、行为，以及它作为路径矢量协议（path-verctor protocol）\n的特性，单个链路挂掉会导致节点之间发送大量 BGP 消息。\u003c/p\u003e\n\n\u003cp\u003e第三个例子，BGP 从多个 ASN 收到一条 prefix（路由网段前缀）之后，最\n终只会生成一条最优路径。而在数据中心中，我们希望生成多条路径。\u003c/p\u003e\n\n\u003cp\u003e为适配数据中心而对 BGP 进行的改造，见 \u003ca href=\"\"\u003eFRC 7938\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e本章描述这些改动，以及背后的考虑（rationale for the change）。\u003cstrong\u003e这里再次强调，数\n据中心使用的 BGP 和传统的 BGP 并不一样，如果不理解这一点，管理员很容易误操作造成\n网络故障\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_2.1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"21-有几路由协议\"\u003e2.1 有几路由协议\u003c/h2\u003e\n\n\u003cp\u003e传统 BGP 从 OSPF、IS-IS、EIGRP（Enhanced Interior Gateway Routing Protocol） 等\n协议接收路由通告，这些称为\u003cstrong\u003e内部路由协议\u003c/strong\u003e（internal routing protocols），用于控制\n企业内的路由。无怪乎很多人当时认为，要在数据中心中落地 BGP，还需要另一个协议。\n但实际上，\u003cstrong\u003e在数据中心中 BGP 就是（特定的）内部路由协议，不需要再运行另一个协议\n了\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_2.2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"22-ibgp-和-ebgp\"\u003e2.2 iBGP 和 eBGP\u003c/h2\u003e\n\n\u003cp\u003e数据中心内部是该使用内部网关协议（iBGP）还是外部网关协议（eBGP）？\u003cstrong\u003e很多人觉得应\n该是 iBGP，因为在数据中心内部，但其实不是\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e数据中心中 eBPG 是使用最广泛的\u003c/strong\u003e。原因；\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e主要原因是 eBGP 比 iBGP 更易理解和部署\u003c/p\u003e\n\n    \u003cp\u003eiBGP 的最优路径选择算法很复杂，而且存在一些限制，使用、配置、管理复杂。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eeBGP 的实现比 iBGP 多，选择面比较大\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003ca name=\"chap_2.3\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"23-asn-编号\"\u003e2.3 ASN 编号\u003c/h2\u003e\n\n\u003cp\u003e每个 BGP 节点都有一个 ASN（Autonomous System Number）。ASN 用于\u003cstrong\u003e识别路由环境、\n判断最优路径、关联路由策略\u003c/strong\u003e等等。\u003c/p\u003e\n\n\u003cp\u003eASN 有两个版本：老版用 2 个字节表示，新版用 4 个字节表示。\u003c/p\u003e\n\n\u003cp\u003e数据中心 BGP 中 ASN 的分配方式和公网 BGP ASN 的分配方式不同。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e公网的 BGP 使用 well-known ASN，但数据中心中使用的一般都是私有 ASN，因为一般不需\n要和公网做 peer\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"私有-asn\"\u003e私有 ASN\u003c/h3\u003e\n\n\u003cp\u003e私有 ASN 和 私有网段类似。\u003c/p\u003e\n\n\u003cp\u003e但注意：\u003cstrong\u003e如果管理员真要用公网 ASN，那也是没人能阻止的\u003c/strong\u003e。有两个原因不建议这样做：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e造成管理的混乱，包括人和工具\u003c/li\u003e\n  \u003cli\u003e会将内网信息泄露到公网，造成极大的安全问题\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e私有 ASN 数量\u003c/strong\u003e：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e老版本（2 字节）：大概 1023 个（64512~65534)\u003c/li\u003e\n  \u003cli\u003e新版本（4 字节）：大概 95 million（4200000000~4294967294）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"path-hunting-问题\"\u003ePath Hunting 问题\u003c/h3\u003e\n\n\u003cp\u003e有多种分配 ASN 的方式。\u003c/p\u003e\n\n\u003cp\u003e如果采用每个节点一个 ASN 的方案，那会存在一个 count-to-infinity 问题。简单说就是\n：每个节点不知道其他节点的物理链路状态（physical link state），因此无法判断一条\n路由是真的不通了（节点挂掉）还是通过其他路径还是可达的。\u003c/p\u003e\n\n\u003cp\u003e当一个节点挂到后，其他节点陆续撤回（withdraw）可达路由时，导致网络内大量的 BGP 消\n息。这个问题称为 path hunting。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/2-1.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 2-1 一个简单拓扑，解释 path hunting\u003c/p\u003e\n\n\u003ch3 id=\"asn-numbering-model\"\u003eASN Numbering Model\u003c/h3\u003e\n\n\u003cp\u003e为了避免 path hunting 问题，\u003cstrong\u003eClos 网络内的 ASN 编号模型\u003c/strong\u003e如下：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e每个 ToR 都有自己的 ASN\u003c/li\u003e\n  \u003cli\u003epod 边缘的 leaf 有自己的 ASN，但同一个 pod 内的 leaf，共用同一个 ASN\u003c/li\u003e\n  \u003cli\u003epod 之间的 spine，共享一个 ASN\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e图 2-2 是一个三级 Clos 的例子：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/2-2.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 2-2 Clos 拓扑 ASN 编号模型示例\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e这种编号模型是如何解决 path hunting 问题的\u003c/strong\u003e：以图 2-1 为例，如果 R2 和 R3 有\n相同的 ASN，那 R1 收到 R2 的一条到 10.1.1.1 的消息后，再收到 R3 来的到 10.1.1.1\n消息时（检测到有环路），就会拒绝后者。当 R4 挂掉时，消息回撤会很简单。\u003c/p\u003e\n\n\u003cp\u003e这种编号模型的缺点：\u003cstrong\u003e无法做路由聚合或摘要\u003c/strong\u003e（route aggregation or summarization\n）。还是拿图 2-1 为例，如果 R2 和 R3 通过直连的服务器总共收集到了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.1.2/32 ~\n10.1.1.250/32\u003c/code\u003e 的可达消息。如果 R2 和 R3 做路由聚合，那只需要向 R1 通告一条\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.1.0/24\u003c/code\u003e 可达消息，而不用通告 250 次，每次一个 IP。在这种情况下，如果 R2-R4\n链路挂了，那 R1 仍然认为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.1.0/24\u003c/code\u003e 到 R4 仍然是可达的，因为可以通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eR1-R3-R4\u003c/code\u003e\n，但实际上有些 IP 是只能通过 R2-R4 才通的。也即路由聚合在这种情况下带来了问题。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_2.4\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"24-最优路径算法\"\u003e2.4 最优路径算法\u003c/h2\u003e\n\n\u003cp\u003e给定一个节点的 prefix，BGP 通过算法判断到这个 node 的最佳路径。\u003c/p\u003e\n\n\u003cp\u003eUPDATE 消息会触发最优路径计算过程。可以对 UPDATE 消息做缓存，批量处理，具体取决\n于不同 BGP 的实现。\u003c/p\u003e\n\n\u003cp\u003e最优路径算法中有 8 个参数，但和数据中心相关的只有一个：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eAS_PATH\u003c/code\u003e。\n可以用下面这句话记这八个参数：\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eWise Lip Lovers Apply Oral Mediacation Every Night.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e每个字段的意思见图 2-3。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/2-3.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 2-3 BGP 最优路径选择标准\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_2.5\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"25-多路径选择\"\u003e2.5 多路径选择\u003c/h2\u003e\n\n\u003cp\u003e对于 Clos 这种密集连接型网络，\u003cstrong\u003e路由多路径\u003c/strong\u003e（route multi-pahting）是构建健壮、\n可扩展网络的基本要求。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eBGP 支持多路径，包括对等（equal cost）和非对等（unequal cost）多路径\u003c/strong\u003e。但支持\n程度取决于具体实现。\u003c/p\u003e\n\n\u003cp\u003e两条路由相同的判断标准：以上八个条件都相同。其中，AS_PATH 字段一定要 ASN\n相同才算相同，只是跳数相同不行。这将多路径分为了两种部署方式。\u003c/p\u003e\n\n\u003cp\u003e第一种方式，服务器是双接入的（直连两个 ToR），如图 2-4 所示。在这种情况下，Spine\n会收到两条到服务器的路径，分别经过两个 ToR。由于两条 path 的 ASN 不一样，Spine\n认为这两个 path 不同（unequal），因此最终会二选一。\u003c/p\u003e\n\n\u003cp\u003e第二种方式，服务器内起 VM 或容器，并且在不同服务器内有多个实例，所有实例有相同的\n虚 IP （virutal IP）。由于不同服务器连接到了不同 ToR，因此 Spine 会收到多条到虚\nIP 的路径，所有路径的跳数相同，但每个路径上的 ASN 不同，因此 Spine 也将它们当作\nunequal path 处理。\u003c/p\u003e\n\n\u003cp\u003e要解决以上问题有多种方式，最简单的方式：配置最优路径算法，认为跳数相同 AS_PATH\n就算相同，不管 ASN 是否相同。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/2-4.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 2-4 一个简单拓扑，解释 path hunting\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_2.6\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"26-默认定时器导致的慢收敛\"\u003e2.6 默认定时器导致的慢收敛\u003c/h2\u003e\n\n\u003cp\u003e简单来说，BGP 中的几个定时器控制 peer 之间通信的速度。对于 BGP，这些参数的默认值\n都是针对\u003cstrong\u003e服务提供商环境\u003c/strong\u003e优化的，其中\u003cstrong\u003e稳定性的优先级高于快速收敛\u003c/strong\u003e。而数据中心\n则相反，快速收敛的优先级更高。\u003c/p\u003e\n\n\u003cp\u003e当一个节点挂掉，或挂掉之后恢复时，有四个定时器影响 BGP 的收敛速度。对这些参数进\n行调优，可以使得 BGP 达到内部路由协议（例如 OSFP）的性能。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eAdvertisement Interval\u003c/li\u003e\n  \u003cli\u003eKeepalive and Hold Timers\u003c/li\u003e\n  \u003cli\u003eConnect Timer\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"advertisement-interval\"\u003eAdvertisement Interval\u003c/h3\u003e\n\n\u003cp\u003e发布路由通告的间隔。在这个间隔内的事件会被缓存，然后时间到了一起发送。\u003c/p\u003e\n\n\u003cp\u003e默认：\u003cstrong\u003eeBGP 是 30s，iBGP 是 0s\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e对于密集连接型的数据中心来说，30s 显然太长了，\u003cstrong\u003e0s 比较合适\u003c/strong\u003e。这会使得 eBGP 的收敛\n速度达到 OSFP 这种 IGP 的水平。\u003c/p\u003e\n\n\u003ch3 id=\"keepalive-and-hold-timers\"\u003eKeepalive and Hold Timers\u003c/h3\u003e\n\n\u003cp\u003e每个节点会向它的 peer 发送心跳消息。如果一段时间内（称为 hold time）没收到 peer\n的心跳，就会清除所有从这个 peer 收到的消息。\u003c/p\u003e\n\n\u003cp\u003e默认：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eKeepalive: 60s\u003c/li\u003e\n  \u003cli\u003eHold timer: 180s\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e这表示每分钟发一个心跳，如果三分钟之内一个心跳都没收到，就认为 peer 挂了。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e数据中心中的三分钟太长了，足以让人过完一生\u003c/strong\u003e（Inside the data center, three\nminutes is a lifetime）。典型配置：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eKeepalive: 3s\u003c/li\u003e\n  \u003cli\u003eHold timer: 9s\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"connect-timer\"\u003eConnect Timer\u003c/h3\u003e\n\n\u003cp\u003e节点和 peer 建立连接失败后，再次尝试建立连接之前需要等待的时长。\u003c/p\u003e\n\n\u003cp\u003e默认：60s。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_2.7\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"27-数据中心默认-bgp-配置\"\u003e2.7 数据中心默认 BGP 配置\u003c/h2\u003e\n\n\u003cp\u003e很多 BGP 实现的默认配置都是针对服务提供商网络调优的，而不是针对数据中心。\u003c/p\u003e\n\n\u003cp\u003e建议：\u003cstrong\u003e显示配置用到的参数\u003c/strong\u003e（即使某些配置和默认值相同），这样配置一目了然，运维和排障都比较方便。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e下面是 FRRouting BGP 的默认配置，我认为是数据中心 BGP 的最优实践。在我参与过的\n几乎所有生产环境数据中心都使用的这个配置\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eMultipath enabled for  \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eeBGP\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiBGP\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eAdvertisement interval: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0s\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eKeepalive and Hold Timers: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3s\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e9s\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eLogging adjacency changes enabled\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca name=\"chap_2.8\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"28-总结\"\u003e2.8 总结\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003e数据中心网络默认部署模型：eBGP\u003c/li\u003e\n  \u003cli\u003eASN 编号模型\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e接下来的两章将会把本章学到的知识用到真实 Clos 环境。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_3\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"3-自动化-bgp-配置\"\u003e3 自动化 BGP 配置\u003c/h1\u003e\n\n\u003cp\u003e运维口头禅：\u003cstrong\u003e无自动化，即等死\u003c/strong\u003e（automate or die）。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_3.1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"31-自动化配置基础\"\u003e3.1 自动化配置基础\u003c/h2\u003e\n\n\u003cp\u003e只要存在模式（pattern），就有可能实现自动化（Automation is possible when there\nare patterns）。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_3.2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"32-示例数据中心网络\"\u003e3.2 示例数据中心网络\u003c/h2\u003e\n\n\u003cp\u003e本书剩余部分将使用图 3-1 所示的拓扑，它代表了当前大部分数据中心网络的拓扑。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/3-1.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 3-1 示例数据中心网络\u003c/p\u003e\n\n\u003cp\u003e接下来涉及以下节点的配置：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eleaf 节点：leaf01 ~ leaf04\u003c/li\u003e\n  \u003cli\u003espine 节点：spine01 ~ spine04\u003c/li\u003e\n  \u003cli\u003eborder leaf 节点：exit01 ~ exit02\u003c/li\u003e\n  \u003cli\u003e服务器：server01 ~ server04\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e除了服务器之外，其他所有节点都是路由器，路由协议是 BGP。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eA quick reminder: 我们使用的是 Clos 拓扑，因此 Spine 和 Leaf 节点都是路由器。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ca name=\"chap_3.3\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"33-自动化传统-bgp-的困难\"\u003e3.3 自动化传统 BGP 的困难\u003c/h2\u003e\n\n\u003cp\u003e配置 3-1 网络：\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erouter bgp 65000\u003c/code\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e配置 ASN，并开始了一个 BGP 配置 block（对 FRR）。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebgp router-id 10.0.254.1\u003c/code\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e每个节点要有一个唯一的 router-id。一种比较好的方式是，选择这个节点的 loopback\nIP 作为 router-id。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneighbor peer-group ISL\u003c/code\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e在 FRR 中，定义配置模板。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneighbor ISL remote-as 65500\u003c/code\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e配置对端 ASN。传统 BGP 配置需要这一项。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneighbor 169.254.1.0 peer-group ISL\u003c/code\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e使用配置模板 ISL 中的参数，和指定 IP 建立连接。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eaddress-family ipv4 unicast\u003c/code\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eBGP 支持多协议，因此需要显式指定希望的路由协议，此处为 ipv4 unicast。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneighbor ISL activate\u003c/code\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e启用。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetwork 10.0.254.1/32\u003c/code\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e对外通告本节点到 10.0.254.1/32 的路由是可达的。这首先需要确保这条路由在节点的\n路由表中是存在的。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emaximum-paths 64\u003c/code\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e允许使用多路径。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"leaf-节点核心配置\"\u003eLeaf 节点核心配置\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e// leaf01’s BGP configuration\nlog file /var/log/frr/frr.log\n\nrouter bgp 65000\n  bgp router-id 10.0.254.1\n  bgp log-neighbor-changes\n  bgp no default ipv4-unicast\n  timers bgp 3 9\n  neighbor peer-group ISL\n  neighbor ISL remote-as 65500\n  neighbor ISL advertisement-interval 0\n  neighbor ISL timers connect 5\n  neighbor 169.254.1.0 peer-group ISL\n  neighbor 169.254.1.64 peer-group ISL\n  address-family ipv4 unicast\n    neighbor ISL activate\n    network 10.0.254.1/32\n    network 10.1.1.0/26\n    maximum-paths 64\nexit-address-family\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e// leaf02’s BGP configuration\nlog file /var/log/frr/frr.log\n\nrouter bgp 65001\n  bgp router-id 10.0.254.2\n  bgp log-neighbor-changes\n  bgp no default ipv4-unicast\n  timers bgp 3 9\n  neighbor peer-group ISL\n  neighbor ISL remote-as 65500\n  neighbor ISL advertisement-interval 0\n  neighbor ISL timers connect 5\n  neighbor 169.254.1.0 peer-group ISL\n  neighbor 169.254.1.64 peer-group ISL\n  address-family ipv4 unicast\n    neighbor ISL activate\n    network 10.0.254.1/32\n    network 10.1.1.0/26\n    maximum-paths 64\nexit-address-family\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"spine-节点核心配置\"\u003eSpine 节点核心配置\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e// spine01’s BGP configuration\nlog file /var/log/frr/frr.log\n\nrouter bgp 65534\n  bgp router-id 10.0.254.254\n  bgp log-neighbor-changes\n  bgp no default ipv4-unicast\n  timers bgp 3 9\n  neighbor peer-group ISL\n  neighbor ISL advertisement-interval 0\n  neighbor ISL timers connect 5\n  neighbor 169.254.1.1 remote-as 65000\n  neighbor 169.254.1.1 peer-group ISL\n  neighbor 169.254.1.3 remote-as 65001\n  neighbor 169.254.1.3 peer-group ISL\n  neighbor 169.254.1.5 remote-as 65002\n  neighbor 169.254.1.5 peer-group ISL\n  neighbor 169.254.1.7 remote-as 65003\n  neighbor 169.254.1.7 peer-group ISL\n  bgp bestpath as-path multipath-relax\n  address-family ipv4 unicast\n    neighbor ISL activate\n    network 10.0.254.254/32\n    maximum-paths 64\nexit-address-family\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e// spine02’s BGP configuration\nlog file /var/log/frr/frr.log\n\nrouter bgp 65534\n  bgp router-id 10.0.254.253\n  bgp log-neighbor-changes\n  bgp no default ipv4-unicast\n  timers bgp 3 9\n  neighbor peer-group ISL\n  neighbor ISL advertisement-interval 0\n  neighbor ISL timers connect 5\n  neighbor 169.254.1.1 remote-as 65000\n  neighbor 169.254.1.1 peer-group ISL\n  neighbor 169.254.1.3 remote-as 65001\n  neighbor 169.254.1.3 peer-group ISL\n  neighbor 169.254.1.5 remote-as 65002\n  neighbor 169.254.1.5 peer-group ISL\n  neighbor 169.254.1.7 remote-as 65003\n  neighbor 169.254.1.7 peer-group ISL\n  bgp bestpath as-path multipath-relax\n  address-family ipv4 unicast\n    neighbor ISL activate\n    network 10.0.254.254/32\n    maximum-paths 64\nexit-address-family\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e总结自动化会遇到的问题：配置中使用 IP 地址的话，会有很多地方重复；新加或修改 IP\n地址时很多地方都要改。\u003c/p\u003e\n\n\u003cp\u003e如何解决这个问题？看下面几个工具。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_3.4\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"34-路由再分发redistributes-routes\"\u003e3.4 路由再分发（Redistributes Routes）\u003c/h2\u003e\n\n\u003cp\u003e将一种协议收到的路由以另一种协议再发送出去，称为\u003cstrong\u003e路由再分发\u003c/strong\u003e（redistributing routes）\n。格式：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eresitribute \u0026lt;protocol\u0026gt; route-map \u0026lt;route-map-name\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;protocol\u0026gt;\u003c/code\u003e 支持：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estatic\u003c/code\u003e：通告（announce）静态配置的路由\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003econnected\u003c/code\u003e：通告和接口地址（interface address）相关联的路由\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekernel\u003c/code\u003e：只适用于 Linux。通过路由套件（FRRouting、bird、quagga 等）配置的路由\n，或通过 iproute2 等工具直接配置在内核的路由\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eospf\u003c/code\u003e：通过 OSPF 学习到的路由\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebgp\u003c/code\u003e：通过 BGP 学习到的路由\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erip\u003c/code\u003e：通过 RIP 学习到的路由\u003c/li\u003e\n  \u003cli\u003eothers, e.g. IS-IS\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e因此，以上 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetwork \u0026lt;IP\u0026gt;\u003c/code\u003e 配置就可以简化成 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eredistribute connected\u003c/code\u003e，去掉了\nhardcode IP。Leaf 节点的配置变成：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003elog file /var/log/frr/frr.log\nrouter bgp 65000\n  bgp router-id 10.0.254.1\n  bgp log-neighbor-changes\n  bgp no default ipv4-unicast\n  timers bgp 3 9\n  neighbor peer-group ISL\n  neighbor ISL remote-as 65500\n  neighbor ISL advertisement-interval 0\n  neighbor ISL timers connect 5\n  neighbor 169.254.1.0 peer-group ISL\n  neighbor 169.254.1.64 peer-group ISL\n  address-family ipv4 unicast\n    neighbor ISL activate\n    redistribute connected\n    maximum-paths 64\nexit-address-family\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e但是，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eredistribute\u003c/code\u003e 方式也有潜在的问题。\u003cstrong\u003e如果接口上的 IP 配错了会导致错误的路\n由通告\u003c/strong\u003e，例如如果接口配置了 8.8.8.8/32，也就是默认 DNS 地址，那所有的 DNS 请求\n都会打到这个接口。\u003c/p\u003e\n\n\u003cp\u003e解决这个问题需要用到\u003cstrong\u003e路由策略（routing policy）\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_3.5\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"35-路由策略\"\u003e3.5 路由策略\u003c/h2\u003e\n\n\u003cp\u003e用最简单的话来说，路由策略就是规定哪些路由通告可以接受，哪些需要拒绝。\u003c/p\u003e\n\n\u003cp\u003e例如，禁止通告上面提到的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e8.8.8.8\u003c/code\u003e 问题：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e    \u003cspan class=\"k\"\u003eif \u003c/span\u003eprefix equals \u003cspan class=\"s1\"\u003e\u0026#39;8.8.8.8/32\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen \u003c/span\u003ereject \u003cspan class=\"k\"\u003eelse \u003c/span\u003eaccept\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e策略可以写成函数，支持传递参数，例如只接受本地路由：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eACCEPT_DC_LOCAL\u003cspan class=\"o\"\u003e(\u003c/span\u003eprefix\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif \u003c/span\u003eprefix belongs to 10.1.0.0/16 \u003cspan class=\"k\"\u003ethen \u003c/span\u003eaccept\n    \u003cspan class=\"k\"\u003eelse if\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e10.0.254.0/24 contains prefix and\n            subnet equals 32\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\n    \u003c/span\u003eaccept\n    \u003cspan class=\"k\"\u003eelse \u003c/span\u003ereject\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e注意：建议所有变量使用大写，因为我见过的几乎所有网络配置都是这样的，不要使用\ncamelCase 等其他格式。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"route-maps\"\u003eRoute-Maps\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eroute-maps\u003c/code\u003e 是实现路由策略的常见方式。Cisco IOS、NXOS，以及开源的 FRRouting、\nArista 等等都支持 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eroute-maps\u003c/code\u003e。\u003ca href=\"\"\u003eBIRD\u003c/a\u003e软件走的更远，支持一种简单的领域特定语言\n（DSL）。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eroute-maps\u003c/code\u003e 格式：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroute-map NAME \u003cspan class=\"o\"\u003e(\u003c/span\u003epermit|deny\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003esequence_number]\n  match classifier\n  \u003cspan class=\"nb\"\u003eset \u003c/span\u003eaction\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esequence_number\u003c/code\u003e 规定了在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eroute-maps\u003c/code\u003e 内 clause 的匹配优先级。\u003c/p\u003e\n\n\u003cp\u003e以下的策略：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroute-map EXCEPT_ISL_ETH0 deny 10\n  match interface swp51\nroute-map EXCEPT_ISL_ETH0 deny 20\n  match interface swp52\nroute-map EXCEPT_ISL_ETH0 deny 30\n  match interface eth0\nroute-map EXCEPT_ISL_ETH0 permit 40\n  redistribute connected route-map EXCEPT_ISL_ETH0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e和以下为代码是等价的：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eEXCEPT_ISL_ETH0\u003cspan class=\"o\"\u003e(\u003c/span\u003einterface\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif \u003c/span\u003einterface is not swp51 and\n  interface is not swp52 and\n  interface is not eth0 \u003cspan class=\"k\"\u003ethen\n  \u003c/span\u003eredistribute connected\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch4 id=\"route-maps-对-bgp-处理的影响\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eroute-maps\u003c/code\u003e 对 BGP 处理的影响\u003c/h4\u003e\n\n\u003cp\u003eBGP 是路径矢量协议，因此它在\u003cstrong\u003e运行完最优路径算法之后，才会通告路由更新\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eroute-maps\u003c/code\u003e 会应用到每个收到和发出的包。\u003c/p\u003e\n\n\u003cp\u003e如果 BGP 有大量的邻居，同时有大量的和邻居相关的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eroute-maps\u003c/code\u003e，\u003cstrong\u003e最优路径计算过程\n将非常慢\u003c/strong\u003e，不仅消耗大量 CPU 资源，而且\u003cstrong\u003e使得路由通告变慢，即路由收敛变慢\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e解决这个问题的一种方式是使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epeer-group\u003c/code\u003e。将有相同路由策略的邻居放到一个 group\n。一般都是由实现完成，不需要手动配置。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_3.6\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"36-使用接口名作为邻居\"\u003e3.6 使用接口名作为邻居\u003c/h2\u003e\n\n\u003cp\u003eFRRouting 的一个特性，可以自动推断出接口的 IP 地址，因此策略中可以指定端口而不是\nIP。\u003c/p\u003e\n\n\u003cp\u003eLeaf 节点：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e// leaf01’s BGP configuration\nlog file /var/log/frr/frr.log\n\nip prefix-list DC_LOCAL_SUBNET 5 permit 10.1.0.0/16 le 26\nip prefix-list DC_LOCAL_SUBNET 10 permit 10.0.254.0/24 le 32\nroute-map ACCEPT_DC_LOCAL permit 10\n  match ip-address DC_LOCAL_SUBNET\n\nrouter bgp 65000\n  bgp router-id 10.0.254.1\n  bgp log-neighbor-changes\n  bgp no default ipv4-unicast\n  timers bgp 3 9\n  neighbor peer-group ISL\n  neighbor ISL remote-as 65500\n  neighbor ISL advertisement-interval 0\n  neighbor ISL timers connect 5\n  neighbor swp51 peer-group ISL\n  neighbor swp52 peer-group ISL\n  address-family ipv4 unicast\n    neighbor ISL activate\n    redistribute connected route-map DC_LOCAL\n    maximum-paths 64\n  exit-address-family\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e// leaf02’s BGP configuration\nlog file /var/log/frr/frr.log\n\nip prefix-list DC_LOCAL_SUBNET 5 permit 10.1.0.0/16 le 26\nip prefix-list DC_LOCAL_SUBNET 10 permit 10.0.254.0/24 le 32\nroute-map ACCEPT_DC_LOCAL permit 10\n  match ip-address DC_LOCAL_SUBNET\n\nrouter bgp 65001\n  bgp router-id 10.0.254.2\n  bgp log-neighbor-changes\n  bgp no default ipv4-unicast\n  timers bgp 3 9\n  neighbor peer-group ISL\n  neighbor ISL remote-as 65500\n  neighbor ISL advertisement-interval 0\n  neighbor ISL timers connect 5\n  neighbor swp51 peer-group ISL\n  neighbor swp52 peer-group ISL\n  address-family ipv4 unicast\n    neighbor ISL activate\n    redistribute connected route-map DC_LOCAL\n    maximum-paths 64\n  exit-address-family\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eSpine 节点：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003elog file /var/log/frr/frr.log\n\nip prefix-list ACCRT 5 permit 10.1.0.0/16 le 26\nip prefix-list ACCRT 10 permit 10.0.254.0/24 le 32\nroute-map DC_LOCAL permit 10\n  match ip-address ACCRT\n\nrouter bgp 65500\n  bgp router-id 10.0.254.254\n  bgp log-neighbor-changes\n  bgp no default ipv4-unicast\n  timers bgp 3 9\n  neighbor peer-group ISL\n  neighbor ISL advertisement-interval 0\n  neighbor ISL timers connect 5\n  neighbor swp1 remote-as 65000\n  neighbor swp1 peer-group ISL\n  neighbor swp2 remote-as 65001\n  neighbor swp2 peer-group ISL\n  neighbor swp3 remote-as 65002\n  neighbor swp3 peer-group ISL\n  neighbor swp4 remote-as 65003\n  neighbor swp4 peer-group ISL\n  bgp bestpath as-path multipath-relax\n  address-family ipv4 unicast\n    neighbor ISL activate\n    redistribute connected route-map DC_LOCAL\n    maximum-paths 64\n  exit-address-family\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca name=\"chap_3.7\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"37-总结\"\u003e3.7 总结\u003c/h2\u003e\n\n\u003cp\u003e将配置模板化，避免具体 IP：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eredistribute connected\u003c/code\u003e 替换 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetwork \u0026lt;IP\u0026gt;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eroute-maps\u003c/code\u003e 安全策略\u003c/li\u003e\n  \u003cli\u003e使用接口名而不是接口上的 IP\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e但以上还不够通用，下一章继续。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_4\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"4-其他-bgp-配置\"\u003e4 其他 BGP 配置\u003c/h1\u003e\n\n\u003cp\u003e本章将展示如何通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eremote-as\u003c/code\u003e 彻底去掉配置中的接口的 IP 地址，这将使得 BGP 的配\n置非常：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e同构（homogeneous）\u003c/li\u003e\n  \u003cli\u003e无重复（duplication-free）（即不会出现大段大段类似的配置）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e非常便于自动化。\u003c/p\u003e\n\n\u003cp\u003e要实现这个目标，首先需要理解一个\u003cstrong\u003e和路由同样古老的概念：unnumbered interfaces\u003c/strong\u003e\n，以及我们如何将它适配到 BGP。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003eNumbered Interface\u003c/strong\u003e：配置了 IP 地址的接口\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eUnnumbered Interface\u003c/strong\u003e：没有配置 IP 地址的接口\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca name=\"chap_4.1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"41-接口-ip-和-remote-as\"\u003e4.1 接口 IP 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eremote-as\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eBGP 基于 TCP/IP 协议，因此需要一个 IP 地址才能建立连接。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e在没有为（本地）接口分配 IP 地址的情况下，如何确定远端节点的地址呢\u003c/strong\u003e？要回答这\n个问题，需要理解一个稍微有点冷门的 RFC 协议，以及 IPv6 提供的无状态配置工具（\nstateless configuration tools）。同时，这也涉及到了路由问题的核心（real heart of\nrouting）。\u003c/p\u003e\n\n\u003cp\u003e第二个问题是，每个 BGP 配置都需要知道对端 ASN。但依赖这个 ASN 只是为了\u003cstrong\u003e以此判断\nsession 是被 iBGP 还是 eBGP 规则管理\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_4.2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"42-numbered-interfaces-数量\"\u003e4.2 Numbered Interfaces 数量\u003c/h2\u003e\n\n\u003cp\u003e是否真需要给每个接口配置一个 IP 地址？\u003c/p\u003e\n\n\u003cp\u003e考虑一个简单的两级 Clos：4 个 spine，32 个 leaf，这种规模的网络很常见。对于这个网\n络，需要 4 * 32 * 2 = 256 个 IP 地址。如果 leaf 数量变成 96 —— 这种规模也很常见\n—— 那总 IP 数量就是 4 * 96 * 2 = 768 个。如果 spine 数量增加到 16 个，那 IP 数量\n就变成 3072 个。\u003c/p\u003e\n\n\u003cp\u003e可以看到，这种方式下，\u003cstrong\u003e所需的 IP 数量随着 spine 和 leaf 数量及接口数量的增加而\n急剧增加\u003c/strong\u003e。而这些 IP 除了 建立 BGP session 之外没有任何其他用途。为什么不想办法\n干掉它们呢？\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e关于 Numbered Interfaces 的哲学思考（Philosophical Aside）\u003c/p\u003e\n\n  \u003cp\u003e在传统三层网络中，为每个可寻址的接口（addressable interface endpoint）分配一个\nIP 地址是很常见的操作。但这也引出一个问题：这些 IP 地址到底是属于一个接口，还\n是这台 node？\u003c/p\u003e\n\n  \u003cp\u003e与此相关的一个更实际的问题是：如果一台 node 收到一个 ARP 请求，请求的 IP 是\nnode 的另外一个接口上的 IP，而并不是接收到 ARP 包的这个接口的 IP，那 node 需要\n回 ARP 应答吗？\n路由器的回答是 NO。如果想让路由器支持，必须打开“ARP 代理”（proxy-arp）功能。\nLinux 的回答是 YES，它这样设计是为了使通信范围尽量大。\u003c/p\u003e\n\n  \u003cp\u003eICMP 的设计进一步强化了接口必须有 IP 地址的思想。数据包转发失败的时候，ICMP 只\n汇报有问题的 endpoint 的 IP 地址。它并不会报告其他信息，比如 endpoint 的域名（\nDNS name）。这（打印 IP 地址）有什么帮助？traceroute 可以据此判断出哪台 node\n的哪个接口出了问题。\u003c/p\u003e\n\n  \u003cp\u003e最后，给一根网线两端的接口配置同一网段的两个 IP 地址，是穷人验证网线是否工\n作正常的方式。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ca name=\"chap_4.3\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"43-unnumbered-interfaces\"\u003e4.3 Unnumbered Interfaces\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eUnnumbered Interface\u003c/strong\u003e：没有配置 IP 地址的接口。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意，这种情况下，接口并不是没有 IP 地址，而是从 node 的其他接口借 IP 地址来用\u003c/strong\u003e。\n但是，如果被借的那个接口挂了，这个 IP 自然也就不可用了。因此，为了保证借来的 IP 永\n远可用，\u003cstrong\u003e被借的接口便永远不能挂，这个接口就是：loopback interface\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e路由器能够在 unnumbered interface 上应答 ARP，因为接口可以借 IP。ICMP 和\ntraceroute 也能正常工作。那么，\u003cstrong\u003e这样不就无法区分出一个包是从哪个接口进入\n路由器的吗\u003c/strong\u003e？\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eClos 网络的任意两个 node 之间只有一条链路\u003c/strong\u003e，也即，\u003cstrong\u003e任何两个 node 之间都只有唯一的\n一对接口。因此不会出现上面提到的问题\u003c/strong\u003e。如果有多条链路，的确会无法区分从哪个接口\n进入路由器，但是多条链路的情况在 Clos 网络中是非常罕见的，原因在第一章分析过。\u003c/p\u003e\n\n\u003cp\u003e那么，路由协议是怎么处理 unnumbered interface 的呢？OSPF（运行在 IP 协议之上）可\n以正常工作，其 RFC 里面描述了这方面的设计。大部分厂商的实现可能不支持，但\nFRRouting 支持。Unnumbered OSPF 已经在很多生产环境部署。IS-IS，不依赖 IP 协议，\n也可以在 unnumbered interface 场景下正常工作。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_4.4\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"44-bgp-unnumbered\"\u003e4.4 BGP Unnumbered\u003c/h2\u003e\n\n\u003cp\u003eBGP 到底是如何在接口没有 IP 的情况下正常工作的呢？\u003c/p\u003e\n\n\u003cp\u003e在路由协议的世界里有一个“鸡生蛋蛋生鸡”问题。\u003cstrong\u003e如果路由协议是用来通告路由可达信息的\n，那么它本身是如何知道对端的可达信息的呢？\u003c/strong\u003e一些协议通过引入一个链路特定的组播地\n址（link-specific multicast address）来解决（组播会限制在链路层）。BGP 不能这样\n做，因为它依赖 TCP，而 TCP 需要的是单播而不是组播包。\u003cstrong\u003eBGP 的解决方式是：连接路\n由器的接口使用一个共享的子网\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e同子网的接口之间通信只需要二层，不需要三层。子网之内的路由称为 connected route\n，因为子网内都是在链路层直接可达的。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e回到 BGP peer 如何管理通信的问题，传统 eBGP 就是通过 connected route 发现邻居的\n，无需其他配置。\u003c/p\u003e\n\n\u003cp\u003e那么，我们如何在没有用户配置，以及接口没有配置 IP 地址的情况下，发现对端的 IP 地\n址的呢？\u003c/p\u003e\n\n\u003cp\u003e这就涉及到了 IPv6，以及一个有点晦涩的标准，\u003ca href=\"https://tools.ietf.org/html/rfc5549\"\u003eRFC\n5549\u003c/a\u003e。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eIPv6：开启 LLA 和 RA（无需部署 IPv6 网络就可以用）\u003c/li\u003e\n  \u003cli\u003eRFC 5549：描述了下一跳为 IPv6 地址的 IPv4 路由\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"ipv6-router-advertisement\"\u003eIPv6 Router Advertisement\u003c/h3\u003e\n\n\u003cp\u003eIPv6 的架构设计是：无需显式配置，网络就可以尽量正常地工作。因此，IPv6 网络中的每个 link\n都会自动分配一个 IP 地址，并且是（在链路层）是唯一的，一般是根据 MAC 地址算出来\n的。这个地址叫\u003cstrong\u003e链路本地地址\u003c/strong\u003e（Link Local Address，LLA）。LLA 只能被直连的邻居\n访问，并且必须是通过这个 LLA 接口（即不支持 ARP 代理之类的）。\u003c/p\u003e\n\n\u003cp\u003e为了使得服务器可以自动发现路由器邻居（neighboring routers），引入了一个新的\u003cstrong\u003e链路\n层协议\u003c/strong\u003e，称为\u003cstrong\u003e路由器通告\u003c/strong\u003e（Router Advertisement，RA）。启用后，RA 会定期通告接\n口的 IPv6 地址，包括 LLA。因此各节点就可以自动发现其他节点的 IPv6 地址了。\u003c/p\u003e\n\n\u003cp\u003e现在，服务器和路由器都已经广泛支持 LLA 和 RA。\u003c/p\u003e\n\n\u003cp\u003e另外需要注意的是，\u003cstrong\u003e使用 IPv6 LLA 并不需要部署 IPv6 网络；这种方案也并不涉及任何隧\n道协议。IPv6 LLA 只是用于 BGP 创建连接。只需要开启 LLA 和 RA 功能即可\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"rfc-5594\"\u003eRFC 5594\u003c/h3\u003e\n\n\u003cp\u003eLLA 和 RA 解决了 peer IP 的自动发现和 BGP 连接的建立，但是没有说明节点如何才能到\n达 RA 里的路由。\n在 BGP 中，这是通过 RA 里面的 NEXTHOP 属性实现的。\u003cstrong\u003e如果 IPv4 路由可以使用 IPv6 地\n址作为下一跳\u003c/strong\u003e，那 unnumbered interface 的目标就能够实现。\u003c/p\u003e\n\n\u003cp\u003eBGP 支持多协议，单个连接上允许多种协议族的路由通告与撤回。因此，BGP IPv4 UPDATE\n消息可以通过 IPv6 TCP 连接发送，反之亦然。这种方式也不需要任何的隧道技术。\u003c/p\u003e\n\n\u003cp\u003eBGP UPDATE 消息说，NEXTHOP 的协议必须与路由通告消息本身所使用的协议相同，即，\nIPv4 路由只能通告 IPv4 下一跳，IPv6 路由只能通告 IPv6 下一跳。如果接口上没有\nIPv4 地址，那 IPv4 下一跳是哪里呢？这就进入了 RFC 5549。\u003c/p\u003e\n\n\u003cp\u003eRFC 5549 解决的问题是：\u003cstrong\u003e通过纯 IPv6 网络通告 IPv4 路由，并路由 IPv4 包\u003c/strong\u003e（\nadvertisement of an IPv4 route and routing of an IPv4 packet over a pure IPv6\nnetwork）。即，它提供了一种\u003cstrong\u003e下一跳是 IPv6 地址的 IPv4 路由\u003c/strong\u003e（carray IPv4 routes\nwith an IPv6 nexthop）。\u003c/p\u003e\n\n\u003cp\u003e原理上来说这其实很好理解，因为二层网络中下一跳 IP 只是用来获\n取对端的 MAC 地址（IPv4 ARP，IPV6 ND）。因此只要有同一接口上的任意一个地址（不管\n是 IPv4 还是 IPv6），就可以获取到对端 MAC，然后就可以将包发送到下一跳。\u003c/p\u003e\n\n\u003ch3 id=\"基于-rfc-5549-实现转发\"\u003e基于 RFC 5549 实现转发\u003c/h3\u003e\n\n\u003cp\u003eBGP 网络自动初始化过程：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/4-1.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 4-1 BGP unnumbered packet timeline sequence\u003c/p\u003e\n\n\u003cp\u003e在 FRRouting 中，BGP 会将最优路由发送到一个叫\u003cstrong\u003e路由信息数据库\u003c/strong\u003e（Routing\nInformation Base，RIB）的进程（在 FRRouting 中这个进程是 zebra）。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eRIB 存储所有协议类型的路由，如果到同一路由有多条路径，RIB 会选择距离最短的一条\n。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e我们假设收到一条路由通告，路由为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.1.0/24\u003c/code\u003e。通过消息中的 NEXTHOP 可以拿到对\n端的 MAC 地址。接下来 RIB 会在路由表里将下一跳设为一个保留的（或看起来非法的）\nIPv4 地址 169.254.0.1，然后在 ARP 表里将这个 IP 地址对应的 MAC 地址设为对端接口的\nMAC 地址。\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eROUTE: 10.1.1.0/24 via 169.254.0.1 dev swp1\nARP: 169.254.0.1 dev swp1 lladdr 00:00:01:02:03:04 PERMANENT\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003e至此，就可以正常转发到这个 IPv4 网段的路由了（虽然路由器两端的接口都没有配置\nIPv4 地址）。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e如果一段时间内没有收到这条路由的通告，就认为这条路由失效了，会删去上面的两行配置\n。\u003c/p\u003e\n\n\u003cp\u003e总结：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eBGP unnumbered 通过接口的 IPv6 LLA 和 peer 建立 BGP session\u003c/li\u003e\n  \u003cli\u003eIPv6 LLA 通过 RA 实现自动邻居发现\u003c/li\u003e\n  \u003cli\u003eRA 不仅包括 LLA 信息，还包括 MAC 信息\u003c/li\u003e\n  \u003cli\u003eBGP 通过 RFC 5549 实现 IPv4 routes over an IPv6 nexthop（IPv6 LLA）\u003c/li\u003e\n  \u003cli\u003eRIB 进程在 ARP 表里添加一条静态表项：MAC 地址为 RA 消息中的 MAC 地址，IP 为 一个保留的 IPv4 地址 169.254.0.1（其实是 IPv4 的 LLA）\u003c/li\u003e\n  \u003cli\u003eBGP 将下一跳是 IPv6 LLA 的 IPv4 路由交给 RIB\u003c/li\u003e\n  \u003cli\u003eRIB 将 nexthop 改为 169.254.0.1，然后添加到路由表\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"bgp-capability-to-negotiate-rfc-5549-use\"\u003eBGP Capability to Negotiate RFC 5549 Use\u003c/h3\u003e\n\n\u003cp\u003e以 IPv6 作为下一跳的 IPv4 路由毕竟还是和通常的不太一样，因此 RFC 5549 定义了一个\n新的能力，叫 \u003cstrong\u003eextended nexthop\u003c/strong\u003e，然后通过 peering session 进行协商，以判断两边\n的 BGP 能力。\u003c/p\u003e\n\n\u003ch4 id=\"互操作性\"\u003e互操作性\u003c/h4\u003e\n\n\u003cp\u003e每个 eBGP peer 在发送路由通告之前，都会将 NEXTHOP 设为自己的 IP 地址。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/4-2.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 4-2 基于 RFC 5549 的互操作\u003c/p\u003e\n\n\u003cp\u003e图 4-2，假设路由器 B 和 D 支持 RFC 5549，A 和 C 不支持。由于 A 和 C 不支持，因此\nB 和 A 之间的接口以及 B 和 C 之间的接口，都需要配置 IPv4 IP 地址。\u003c/p\u003e\n\n\u003cp\u003e当 A 通告到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.1.0/24\u003c/code\u003e 可达时，nexthop 地址必须填它自己的 IPv4 地址。当 B 收\n到这个消息，进一步通告给 D 和 C 时，分两种情况：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e通告给 D 时：nexthop 设置为 B 的 IPv6 LLA\u003c/li\u003e\n  \u003cli\u003e通告给 C 时：nexthop 设置为 B 的 IPv4 地址\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e反向的类似。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_4.5\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"45-remote-as-指定-bgp-session-类型\"\u003e4.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eremote-as\u003c/code\u003e 指定 BGP session 类型\u003c/h2\u003e\n\n\u003cp\u003e以上配置消除了显示配置 IP 地址。接下来看如何通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eremote-as\u003c/code\u003e 配置 ASN。\u003c/p\u003e\n\n\u003cp\u003e配置 ASN 有两个主要目的：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e安全考虑：多个管理域（administrative domain）互连，如果连错了，会有很大的安全\n问题\u003c/li\u003e\n  \u003cli\u003e判断 BGP session 到底是 iGBP 还是 eBGP\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e在数据中心内不存在跨管理域的问题，因此安全不是 ASN 的主要目的。因此，数据中心中\nASN 的主要目的就是判断 iBGP 还是 eBGP 控制着 session。\u003c/p\u003e\n\n\u003cp\u003e判断方法：\u003cstrong\u003e从 BGP OPEN 消息中的 ASN 判断\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_4.6\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"46-总结\"\u003e4.6 总结\u003c/h2\u003e\n\n\u003cp\u003e通过避免接口的 IP 地址，以及通过 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eremote-as\u003c/code\u003e 指定 ASN 的类型（iBGP or eBGP），配\n置可以简化成下面这样。可以看到，除了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erouter bgp \u0026lt;id\u0026gt;\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebgp router-id \u0026lt;ip\u0026gt;\u003c/code\u003e\n这两行需要单独配置之外，其他所有配置都是一样的，不管是对 Spine 还是 Leaf 节点。\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e// leaf01 configuration\n\nlog file /var/log/frr/frr.log\n\nip prefix-list DC_LOCAL_SUBNET 5 permit 10.1.0.0/16 le 26\nip prefix-list DC_LOCAL_SUBNET 10 permit 10.0.254.0/24 le 32\nroute-map ACCEPT_DC_LOCAL permit 10\n  match ip-address DC_LOCAL_SUBNET\n\nrouter bgp 65000\n  bgp router-id 10.0.254.1\n  neighbor peer-group ISL\n  neighbor ISL remote-as external\n  neighbor swp51 interface peer-group ISL\n  neighbor swp52 interface peer-group ISL\n  address-family ipv4 unicast\n    neighbor ISL activate\n    redistribute connected route-map ACCEPT_DC_LOCAL\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e// spine01 configuration\n\nlog file /var/log/frr/frr.log\n\nip prefix-list DC_LOCAL_SUBNET 5 permit 10.1.0.0/16 le 26\nip prefix-list DC_LOCAL_SUBNET 10 permit 10.0.254.0/24 le 32\nroute-map ACCEPT_DC_LOCAL permit 10\n  match ip-address DC_LOCAL_SUBNET\n\nrouter bgp 65534\n  bgp router-id 10.0.254.254\n  neighbor peer-group ISL\n  neighbor ISL remote-as external\n  neighbor swp1 interface peer-group ISL\n  neighbor swp2 interface peer-group ISL\n  neighbor swp3 interface peer-group ISL\n  neighbor swp4 interface peer-group ISL\n  address-family ipv4 unicast\n    neighbor ISL activate\n    redistribute connected route-map ACCEPT_DC_LOCAL\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这种配置，很适合用 ansible 之类的工具在多台节点上推了。\u003c/p\u003e\n\n\u003cp\u003e下一章：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e查看配置\u003c/li\u003e\n  \u003cli\u003e管理 BGP\u003c/li\u003e\n  \u003cli\u003e配置 BGP 连接到外部网络\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003ca name=\"chap_5\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"5-bgp-生命周期管理\"\u003e5 BGP 生命周期管理\u003c/h1\u003e\n\n\u003cp\u003e如何 BGP 配置之后，行为和预期的不一致，怎么排查？本章回答这些问题。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_5.1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"51-查看配置\"\u003e5.1 查看配置\u003c/h2\u003e\n\n\u003ch3 id=\"查看-bgp-session-信息\"\u003e查看 BGP session 信息\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eshow ip bgp summary\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eshow ip bgp ipv4 unicast summary\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eshow ip bgp ipv6 unicast summary\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eshow ip bgp neighbors \u0026lt;neibhor_name\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/5-1.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 5-1 查看 BGP 网络信息\u003c/p\u003e\n\n\u003ch3 id=\"查看当前路由\"\u003e查看当前路由\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eshow ip gbp\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eshow bgp ipv4 unicast\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eshow ip gbp \u0026lt;prefix\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/5-2.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 5-2 查看 BGP 路由信息\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/5-3.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 5-3 查看 BGP 路由详细信息\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_5.2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"52-连接到外部网络\"\u003e5.2 连接到外部网络\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/5-4.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 5-4 查看 BGP neighbor 详细信息\u003c/p\u003e\n\n\u003cp\u003e如图 5-4，两个 border leaf 节点 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eexit01\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eexit02\u003c/code\u003e 将数据中心网络连接到互联网\n。Border leaf 的两个作用：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e去掉私有 ASN（stripping off the private ASNs）\u003c/li\u003e\n  \u003cli\u003e可能会对数据中心内部路由做聚合，然后将聚合后的路由通告给边界路由器\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cul\u003e\n  \u003cli\u003e去私有 ASN：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneigbor \u0026lt;neibhor_name\u0026gt; remove-private-AS all\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e聚合路由：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eaggregate-address \u0026lt;summary-route\u0026gt; summary-only\u003c/code\u003e，其中\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esummary-only\u003c/code\u003e 关键字表示，禁止通告单条路由（individual routes），如果没有指定\n这个选项，聚合之后的路由和原始路由都会通告出去。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca name=\"chap_5.3\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"53-计划节点维护\"\u003e5.3 计划节点维护\u003c/h2\u003e\n\n\u003cp\u003e例如，如果计划对 spine01 进行升级，那要通知其他 peer 在计算最优路径时，要绕开\nspine01。\u003c/p\u003e\n\n\u003cp\u003e第一章介绍过，现代数据中心都会有两个以上 Spine，中型到大型企业网一般都是 4 个\n。如果是 4 个 spine，那维护一台时，网络仍然能提供 75% 的容量；如果是两台 spine，\n那维护一台时，只能提供 50% 的容量。\u003c/p\u003e\n\n\u003cp\u003e如果服务器是双接入的（直连两个 ToR），那只有 50% 的链路利用率。大型互联网公司解\n决这个问题的办法是：\u003cstrong\u003e改用单接入（single-attach），庞大的机柜数量使得挂掉单个机柜\n带来的影响足够小\u003c/strong\u003e。另外还采用 16 或 32 spine，这样单个 spine 挂掉，只影响 1/16\n或 1/32 的交换机间流量。\u003c/p\u003e\n\n\u003cp\u003e最常用的手段：\u003cstrong\u003e将 node 的 ASN（重复）加在自己的路由通告里面，这样它的\nAS_PATH 跳数就会比其他的路径要多，导致最优路径选择的时候，不会经过这个 node\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e例如，要对 spine02 进行维护：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eroute-map SCHED_MAINT permit 10\n  \u003cspan class=\"nb\"\u003eset \u003c/span\u003eas-path prepend 65000 65000\n\nneighbor ISL route-map SCHED_MAINT out\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e路由收敛之后，最优路径就会绕开 spine02：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/5-5.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 5-5 最优路由绕开了 spine02\u003c/p\u003e\n\n\u003cp\u003e这种方式是比较通用的；另外也有一些其他方式完成类似功能，但不是所有实现都支持。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_5.4\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"54-debug-bgp\"\u003e5.4 Debug BGP\u003c/h2\u003e\n\n\u003cp\u003e打开 debug 开关，查看日志等。因实现而异。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_5.5\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"55-总结\"\u003e5.5 总结\u003c/h2\u003e\n\n\u003cp\u003e\u003ca name=\"chap_5\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"6-服务器上运行-bgp\"\u003e6 服务器上运行 BGP\u003c/h1\u003e\n\n\u003cp\u003e现代数据中心颠覆了我们以往对计算和网络的所有认知。不管是 NoSQL 数据库、新\n应用架构或微服务的出现，还是 Clos 网络用路由代替桥接做底层通信的方式，都为\n以前既成的设计思想画上了句号。而这也影响了防火墙和负载均衡器等服务的部署。\u003c/p\u003e\n\n\u003cp\u003e本章将看到\u003cstrong\u003e一种新网络模型\u003c/strong\u003e：\u003cstrong\u003e路由过程如何（从硬件交换设备）进入到了服务器内部\u003c/strong\u003e，\n以及我们如何对服务器做 BGP 配置以使它们和 ToR 或 leaf 通信。\u003c/p\u003e\n\n\u003cp\u003e传统来说，网络管理员的管理边界是 ToR，服务器内部的配置和管理由服务器管理员负责。\n而在现代数据中心中，两种管理员已经开始合并为一种管理员，或者至少，网络管理员的管\n理边界以及深入到了服务器内部。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_6.1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"61-虚拟服务器的兴起\"\u003e6.1 虚拟服务器的兴起\u003c/h2\u003e\n\n\u003cp\u003e传统数据中心中，\u003cstrong\u003e桥接和路由的边界\u003c/strong\u003e，以及 \u003cstrong\u003eL2-L3 网关\u003c/strong\u003e，都是部署防火\n墙和负载均衡器的地方。这些物理边界和传统的客户端/服务器模型边界也是比较匹配的。\u003c/p\u003e\n\n\u003cp\u003eClos 网络打破了这些自然边界，使得以上部署模型都失效了。\u003c/p\u003e\n\n\u003cp\u003e新的数据中心中，服务都是跑在物理服务器内的虚拟机内，或者是没有虚拟化的物理\n服务器。这些虚拟机都能够快速的创建和删除，随着应用流量而扩缩容。\u003c/p\u003e\n\n\u003ch3 id=\"anycast-地址\"\u003eAnycast 地址\u003c/h3\u003e\n\n\u003cp\u003e虚拟机会出现在数据中心的任意服务器内，因此 IP 不再会固定到单个机柜或路由器，多个\n机柜可能会通告同一个 IP。通过路由的 ECMP 转发功能，包会被转发到最近的一个节点。\n这种被多个实例同时通告的 IP 称为\u003cstrong\u003e任播\u003c/strong\u003e（Anycast） IP 地址。\n它们属于单播（unicast）IP 地址，因此他们的目标是单个终点（作为对比，组播和广播的\n目标是多个终点），但是，这个终点是路由过程（routing）决定的，从多个提供相关服务\n的实例中选择一个。\u003c/p\u003e\n\n\u003cp\u003eToR 如何发现或通告（discover or advertise）anycast IP？\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_6.2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"62-交换机和服务器做-bgp-peering-的模型\"\u003e6.2 交换机和服务器做 BGP Peering 的模型\u003c/h2\u003e\n\n\u003cp\u003e置顶交换机和服务器做 BGP Peering 有两种模型：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eBGP unnumbered model，第 4 章介绍过了\u003c/li\u003e\n  \u003cli\u003e依赖 BGP 的一种称为动态邻居（dynamic neighbors）的特性\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e接下来比较两种模型的异同。\u003c/p\u003e\n\n\u003cp\u003e两者相同的地方：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eASN 分配\u003c/li\u003e\n  \u003cli\u003e路由交换模型\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"asn-分配\"\u003eASN 分配\u003c/h3\u003e\n\n\u003cp\u003e最常见的部署方式：所有服务器共用一个 ASN。\u003c/p\u003e\n\n\u003cp\u003e优点：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e配置和自动化简单\u003c/li\u003e\n  \u003cli\u003e从服务器识别和过滤路由简单\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e缺点：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e如果不仅仅是通过到达服务器的默认路由（more than the default route to the host\n），那服务器上的配置会变得复杂\u003c/li\u003e\n  \u003cli\u003e跟踪哪个服务器通告出的路由比较困难，因为所有的服务器使用相同的 ASN\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e第二种方案：\u003cstrong\u003e直连相同 ToR 的服务器共用同一个 ASN\u003c/strong\u003e，不同 ToR 下面的服务器使用不同\n的 ASN。相当于每个机柜一个 ASN。\u003c/p\u003e\n\n\u003cp\u003e优点：\u003cstrong\u003e服务器变成了新的 Clos 层\u003c/strong\u003e（服务器和置顶交换机 full-mesh，确实是 Clos 架构的新的一层）。\u003c/p\u003e\n\n\u003cp\u003e缺点：和上面第一种方案缺点类似，不过现在每个 ASN 的范围缩小到了一个机柜。\u003c/p\u003e\n\n\u003cp\u003e第三种方案：每个服务器一个 ASN。我知道确实有一些人这样做，但是我觉得这样粒度细过\n头了（overkill）。\u003c/p\u003e\n\n\u003cp\u003e优点：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e完美映射到 Clos 网络模型，每个服务器都变成一个网络节点\u003c/li\u003e\n  \u003cli\u003e很容易判断路由是从哪个服务器通告出来的\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e缺点：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eASN 数量和服务器数量一样多，考虑到服务器的数量成千上万，ASN 管理和维护会是一个潜在问题\u003c/li\u003e\n  \u003cli\u003e由于 ASN 数量非常多，必须得使用四字节 ASN 版本，可能和其他两字节 BGP 存在兼容性问题\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"路由交换模型\"\u003e路由交换模型\u003c/h3\u003e\n\n\u003cp\u003e现在在网络层面，服务器也是一个路由器，和 leaf、spine 并没有区别，因此必须做好安全\n控制。\u003c/p\u003e\n\n\u003cp\u003e第一，\u003cstrong\u003e对服务器通告的路由，ToR 要能确定接受哪些，拒绝哪些\u003c/strong\u003e。\n例如：如果服务器通告了一个错误或非法路由，就会将部分流量引导到错误的地方。\u003c/p\u003e\n\n\u003cp\u003e第二，\u003cstrong\u003e确保 ToR 不要将服务器当作（可以转发大量网络流量的）中间节点\u003c/strong\u003e，服务器扛\n不住这种硬件网络级别的流量。\u003c/p\u003e\n\n\u003cp\u003e第三，\u003cstrong\u003e和服务器直连的路由器只通告默认路由，这样做是为\n了避免路由器将太多路由通告到服务器，撑爆服务器的路由表\u003c/strong\u003e，或影响最佳路由决策等等。\u003c/p\u003e\n\n\u003cp\u003e要满足以上条件，就需要用到我们第 3 章介绍的路由策略（routing policies）。例如，\n下面是实现以上需求的路由策略：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eip prefix-list ANYCAST_VIP \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e5 permit 10.1.1.1/32\nip prefix-list ANYCAST_VIP \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e10 permit 20.5.10.110/32\n\nip prefix-list DEFONLY \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e5 permit 0.0.0.0/0\n\nroute-map ACCEPT_ONLY_ANYCAST permit 10\n  match ip address prefix-list ANYCAST_VIP\n\nroute-map ADVERTISE_DEFONLY permit 10\n  match ip address prefix-list DEFONLY\n\nneighbor server route-map ACCEPT_ONLY_ANYCAST \u003cspan class=\"k\"\u003ein\n\u003c/span\u003eneighbor server route-map ADVERTISE_DEFONLY out\nneighbor server default-originate\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneighbor server route-map ACCEPT_ONLY_ANYCAST in\u003c/code\u003e 实现了：从 server 来的路由通告，只接受 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eANYCAST_VIP\u003c/code\u003e 里面有的 anycast IP\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneighbor server route-map ADVERTISE_DEFONLY out\u003c/code\u003e 实现了：只对 server 通告默认路由\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca name=\"chap_6.3\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"63-边界服务器-bgp-peering-方案\"\u003e6.3 边界服务器 BGP Peering 方案\u003c/h2\u003e\n\n\u003cp\u003e部署\u003cstrong\u003e防火墙和负载均衡器\u003c/strong\u003e的 BGP 模型。有两种：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e动态邻居（dynamic neighbors）\u003c/li\u003e\n  \u003cli\u003eBGP unnumbered\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"动态邻居\"\u003e动态邻居\u003c/h3\u003e\n\n\u003cp\u003eBGP 默认监听所有 IP 过来的 TCP 连接请求。动态邻居是 BGP 的一个特性，可以指定\u003cstrong\u003e只监听特\n定网段过来的连接请求\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e例如，一个机柜里的服务器一般都是同一网段。假设为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.0.0/26\u003c/code\u003e。那对 ToR 做以下\n配置，它就只会接受 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.0.0/26\u003c/code\u003e 网段的过来的、ASN 是 65530 的 peer 的建立连\n接请求。\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eneighbor servers peer-group\nneighbor servers remote-as 65530\nbgp listen range 10.1.0.0/26 peer-group servers\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e同理，对服务器做如下配置，可以限制它只和 ToR 建立连接：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eneighbor ISL peer-group\nneighbor ISL remote-as external\nneighbor 10.1.0.1 peer-group ISL\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e但是，动态邻居特性目前不支持针对接口做配置，例如不支持 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebgp listen interface\nvlan10 peer-group servers\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e可以限制动态邻居的数量：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eneighbor listen limit \u0026lt;limit number\u0026gt;\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e主要优点：和单接入服务器模型非常匹配，并且服务器要是通过 PXE（Preboot Execution\nEnvironment）启动的。如图 6-1。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/6-1.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 6-1 BGP 动态邻居模型\u003c/p\u003e\n\n\u003ch3 id=\"bgp-unnumbered\"\u003eBGP Unnumbered\u003c/h3\u003e\n\n\u003cp\u003e路由器和服务器之间也支持 BGP unnumbered，和第四章介绍的路由器之间的 unnumbered\n类似。这种方式的拓扑如图 6-2：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/bgp-in-data-center/6-2.PNG\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003e图 6-2 BGP unnumbered 模型\u003c/p\u003e\n\n\u003cp\u003e动态邻居模型基于共享子网，而 unnumbered 模型不需要共享子网。和路由器类似，服务器\n的 IP 地址和接口是没有关系的，一般配置为 loopback 地址。每个服务器可以分配一个\n/32 地址。因为通告 IPv6 LLA 和路由器做 peer，因此无需共享的子网。\u003c/p\u003e\n\n\u003cp\u003eToR 配置：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eneighbor peer-group servers\nneighbor servers remote-as external\nneighbor swp1 peer-group servers\nneighbor swp2 peer-group servers\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e服务器配置：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eneighbor eth0 remote-as external\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e优点：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e纯路由网络（服务器和置顶交换机也是路由），完全去掉了桥接\u003c/li\u003e\n  \u003cli\u003e单接入服务器、双接入服务器都支持，却不需要运行任何厂商相关的 multinode LACP\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e缺点：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e不支持 DHCPv4 或 PXE，因为 PXE-boot 过程中没有路由协议栈，而交换机不知道如何\n转发包到特定的服务器\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e有办法解决这个问题，但这超出了本身讨论的范围。\u003c/p\u003e\n\n\u003ch3 id=\"服务器上可用的路由软件\"\u003e服务器上可用的路由软件\u003c/h3\u003e\n\n\u003cp\u003e至此，网络设计领域的老兵会意识到：\u003cstrong\u003e服务器上跑的 BGP 其实只是一个 GBP speaker，\n不需要最优路径计算、将路由添加到路由表等全套 BGP 功能\u003c/strong\u003e。大型互联网公司也意识到\n了这一点，因此他们会运行一些能作为 BGP speaker 的软件，例如\n\u003ca href=\"https://github.com/Exa-Networks/exabgp\"\u003eExaBGP\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e更注重全功能的软件有 \u003ca href=\"https://bird.network.cz/\"\u003eFRRouting\u003c/a\u003e  和\n\u003ca href=\"https://bird.network.cz/\"\u003eBIRD\u003c/a\u003e。FRRouting 对 BGP unnumbered 和动态邻居两种模型\n都支持。\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"chap_6.4\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"64-总结\"\u003e6.4 总结\u003c/h2\u003e\n\n\u003cp\u003e本章展示了如何将 BGP 扩展到服务器内部。\u003c/p\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/are-you-a-software-architect-zh/\"\u003e\u003cspan\u003e« [译] 你是软件架构师吗？（InfoQ，2010）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/internet-routing-architecture-zh/\"\u003e\u003cspan\u003e[笔记] 《Internet Routing Architecture》(Cisco Press, 2000) »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2019-04-01T00:00:00Z",
  "Author": "Arthur Chiao"
}