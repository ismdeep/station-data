{
  "Source": "arthurchiao.art",
  "Title": "[译] 深入理解 tc ebpf 的 direct-action (da) 模式（2020）",
  "Link": "https://arthurchiao.art/blog/understanding-tc-da-mode-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003e[译] 深入理解 tc ebpf 的 direct-action (da) 模式（2020）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2021-02-21 | Last Update 2021-02-21\u003c/p\u003e\n  \n  \u003ch3 id=\"译者序\"\u003e译者序\u003c/h3\u003e\n\n\u003cp\u003e本文翻译自 2020 年 Quentin Monnet 的一篇英文博客：\n\u003ca href=\"https://qmonnet.github.io/whirl-offload/2020/04/11/tc-bpf-direct-action/\"\u003eUnderstanding tc “direct action” mode for BPF\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003eQuentin Monnet 是 Cilium 开发者之一。\u003c/p\u003e\n\n\u003cp\u003e如作者所说，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eda\u003c/code\u003e 模式不仅是使用 tc ebpf 程序的推荐方式，而且（据他所知，截至本文\n写作时）也是唯一方式。所以，很多人一直在使用它（包括通过 Cilium 间接使用），却没\n有深挖过它到底是什么意思 —— 这样用就行了。\u003c/p\u003e\n\n\u003cp\u003e本文结合 tc/ebpf 开发史，介绍了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eda\u003c/code\u003e 模式的来龙去脉，并给出了例子、内核及 iproute2/tc 中的实现。\u003c/p\u003e\n\n\u003cp\u003e翻译已获得 Quentin Monnet 授权。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e由于译者水平有限，本文不免存在遗漏或错误之处。如有疑问，请查阅原文。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e以下是译文。\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#译者序\" id=\"markdown-toc-译者序\"\u003e译者序\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-背景知识linux-流量控制tc子系统\" id=\"markdown-toc-1-背景知识linux-流量控制tc子系统\"\u003e1 背景知识：Linux 流量控制（tc）子系统\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-tc-术语\" id=\"markdown-toc-11-tc-术语\"\u003e1.1 tc 术语\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-tc-示例匹配-ip-和-port-对流量进行分类\" id=\"markdown-toc-12-tc-示例匹配-ip-和-port-对流量进行分类\"\u003e1.2 tc 示例：匹配 IP 和 Port 对流量进行分类\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-tc-ebpf-程序\" id=\"markdown-toc-2-tc-ebpf-程序\"\u003e2 tc ebpf 程序\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-用作-classifier分类器\" id=\"markdown-toc-21-用作-classifier分类器\"\u003e2.1 用作 classifier（分类器）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-用作-action动作\" id=\"markdown-toc-22-用作-action动作\"\u003e2.2 用作 action（动作）\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-direct-action\" id=\"markdown-toc-3-direct-action\"\u003e3 direct-action\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-传统-classifieraction-模式的限制\" id=\"markdown-toc-31-传统-classifieraction-模式的限制\"\u003e3.1 传统 classifier+action 模式的限制\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-为-tc-ebpf-classifier-引入-direct-action-模式\" id=\"markdown-toc-32-为-tc-ebpf-classifier-引入-direct-action-模式\"\u003e3.2 为 tc ebpf classifier 引入 direct-action 模式\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-能为-tc-ebpf-action-引入-direct-classifier-模式吗\" id=\"markdown-toc-33-能为-tc-ebpf-action-引入-direct-classifier-模式吗\"\u003e3.3 能为 tc ebpf action 引入 “direct-classifier” 模式吗？\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-tc-ebpf-classifier-返回值被重新解读是否因此丢失了-classid-信息\" id=\"markdown-toc-34-tc-ebpf-classifier-返回值被重新解读是否因此丢失了-classid-信息\"\u003e3.4 tc ebpf classifier 返回值被重新解读，是否因此丢失了 classid 信息？\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-新的-qdisc-类型clsact\" id=\"markdown-toc-4-新的-qdisc-类型clsact\"\u003e4 新的 qdisc 类型：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eclsact\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-完整示例ebpf-程序--tc-命令\" id=\"markdown-toc-5-完整示例ebpf-程序--tc-命令\"\u003e5 完整示例（eBPF 程序 + tc 命令）\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#51-ebpf-程序tc-ebpf-classifierfilter\" id=\"markdown-toc-51-ebpf-程序tc-ebpf-classifierfilter\"\u003e5.1 eBPF 程序（tc ebpf classifier/filter）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#52-编译\" id=\"markdown-toc-52-编译\"\u003e5.2 编译\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#53-加载到内核\" id=\"markdown-toc-53-加载到内核\"\u003e5.3 加载到内核\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#54-清理\" id=\"markdown-toc-54-清理\"\u003e5.4 清理\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#6-实现\" id=\"markdown-toc-6-实现\"\u003e6 实现\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#61-内核实现\" id=\"markdown-toc-61-内核实现\"\u003e6.1 内核实现\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#62-iproute2tc-实现\" id=\"markdown-toc-62-iproute2tc-实现\"\u003e6.2 iproute2/tc 实现\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#7-总结\" id=\"markdown-toc-7-总结\"\u003e7 总结\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#参考资料\" id=\"markdown-toc-参考资料\"\u003e参考资料\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003cp\u003eLinux 的流量控制子系统（Traffic Control, TC）已经在内核中存在多年，并仍处于活跃开发之中。\nKernel \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4.1\u003c/code\u003e 的一个重要变化是：\u003cstrong\u003e添加了一些新的 hook\u003c/strong\u003e，并\u003cmark\u003e支持将 eBPF 程序作为\ntc classifier（也称为 filter） 或 tc action 加载到这些 hook 点\u003c/mark\u003e。大概六个月之后，\nkernel \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4.4\u003c/code\u003e 发布时，\u003cmark\u003eiproute2 引入了一个 \u003ccode\u003edirect-action\u003c/code\u003e 模式\u003c/mark\u003e，但\u003cstrong\u003e关于这个模式的文档甚少\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e本文初稿时，除了 commit log 之外，没有关于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edirect-action\u003c/code\u003e 的其他文档。如今\n\u003ca href=\"http://docs.cilium.io/en/latest/bpf/#tc-traffic-control\"\u003eCilium Guide\u003c/a\u003e 及 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc-bpf(8)\u003c/code\u003e 中\n都有了一些简要描述，说这个模式 “instructs\neBPF classifier to not invoke external TC actions, instead use the TC\nactions return codes (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTC_ACT_OK\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTC_ACT_SHOT\u003c/code\u003e etc.) for classifiers.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch1 id=\"1-背景知识linux-流量控制tc子系统\"\u003e1 背景知识：Linux 流量控制（tc）子系统\u003c/h1\u003e\n\n\u003cp\u003e在介绍 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edirect-action\u003c/code\u003e 之前，需要先回顾一下 Linux TC 的经典使用场景和使用方式。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e流量控制最终是在内核中完成的\u003c/strong\u003e：tc 模块根据不同算法对网络设备上的流量进行控制\n（限速、设置优先级等等）。用户一般通过 iproute2 中的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc\u003c/code\u003e 工具完成配置 —— 这是与\n内核 TC 子系统相对应的\u003cstrong\u003e用户侧工具\u003c/strong\u003e —— \u003cmark\u003e二者之间（大部分情况下）通过\nNetlink 消息通信\u003c/mark\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"11-tc-术语\"\u003e1.1 tc 术语\u003c/h2\u003e\n\n\u003cp\u003eTC 是一个强大但复杂的框架（且\u003ca href=\"https://qmonnet.github.io/whirl-offload/2016/09/01/dive-into-bpf/#about-tc\"\u003e文档\u003c/a\u003e较少）。\n它的\u003cstrong\u003e\u003cmark\u003e几个核心概念\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003equeueing discipline (qdisc)：排队规则，根据某种算法完成限速、整形等功能\u003c/li\u003e\n  \u003cli\u003eclass：用户定义的流量类别\u003c/li\u003e\n  \u003cli\u003eclassifier (也称为 filter)：分类器，分类规则\u003c/li\u003e\n  \u003cli\u003eaction：要对包执行什么动作\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e组合以上概念，下面是对某个网络设备上的流量进行分类和限速时，所需完成的大致步骤：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e为网络设备\u003cstrong\u003e\u003cmark\u003e创建一个 qdisc\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eqdisc 是一个\u003cmark\u003e整流器/整形器\u003c/mark\u003e（shaper），\u003cstrong\u003e可以包含多个 class\u003c/strong\u003e，不同 class 可以应用不同的策略。\u003c/li\u003e\n      \u003cli\u003eqdisc 需要附着（attach）到某个网络接口（network interface），及流量方向（ingress or egress）。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003e创建流量类别（class）\u003c/mark\u003e\u003c/strong\u003e，并 attach 到 qdisc。\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e例如，根据带宽分类，创建高、中、低三个类别。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e\u003cmark\u003e创建 filter（classifier）\u003c/mark\u003e\u003c/strong\u003e，并 attach 到 qdisc。\u003c/p\u003e\n\n    \u003cp\u003efilters 用于\u003cstrong\u003e对网络设备上的流量进行分类\u003c/strong\u003e，并\u003cstrong\u003e将包分发（dispatch）到前面定义的不同 class\u003c/strong\u003e。\u003c/p\u003e\n\n    \u003cp\u003efilter 会对每个包进行过滤，返回下列值之一：\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0\u003c/code\u003e：表示 mismatch。如果后面还有其他 filters，则\u003cstrong\u003e\u003cmark\u003e继续对这个包应用下一个 filter\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-1\u003c/code\u003e：表示这个 filter 上配置的\u003cstrong\u003e\u003cmark\u003e默认 classid\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n      \u003cli\u003e其他值：\u003cstrong\u003e\u003cmark\u003e表示一个 classid\u003c/mark\u003e\u003c/strong\u003e。系统接下来应该将包送往这个指定的 class。可以看到，通过这种方式可以实现非线性分类（non-linear classification）。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e另外，\u003cstrong\u003e\u003cmark\u003e可以给 filter 添加 action\u003c/mark\u003e\u003c/strong\u003e。例如，将选中的包丢弃（drop），或者将流量镜像到另一个网络设备等等。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e除此之外，qdisc 和 class 还可以循环嵌套，即：\n\u003cstrong\u003eclass 里加入新 qdisc，然后新 qdisc 里又可以继续添加新 class\u003c/strong\u003e，\n最终形成的是一个以 root qdisc 为根的树。但对于本文接下来的内容，我们不需要了解这么多。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"12-tc-示例匹配-ip-和-port-对流量进行分类\"\u003e1.2 tc 示例：匹配 IP 和 Port 对流量进行分类\u003c/h2\u003e\n\n\u003cp\u003e下面是一个例子，（参考了 \u003ca href=\"http://luxik.cdi.cz/~devik/qos/htb/manual/userg.htm\"\u003eHTB shaper 文档\u003c/a\u003e）：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# x:y 格式：\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# * x 表示 qdisc, y 表示这个 qdisc 内的某个 class\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# * 1: 是 1:0 的简写\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# \u0026#34;default 11\u0026#34;：any traffic that is not otherwise classified will be assigned to class 1:11\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etc qdisc add dev eth0 root handle 1: htb default 11\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etc class add dev eth0 parent 1: classid 1:1 htb rate 100kbps ceil 100kbps\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etc class add dev eth0 parent 1:1 classid 1:10 htb rate 30kbps ceil 100kbps\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etc class add dev eth0 parent 1:1 classid 1:11 htb rate 10kbps ceil 100kbps\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etc filter add dev eth0 protocol ip parent 1:0 prio 1 u32 \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    match ip src 1.2.3.4 match ip dport 80 0xffff flowid 1:10\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etc filter add dev eth0 protocol ip parent 1:0 prio 1 u32 \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    match ip src 1.2.3.4 action drop\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e以上设置表示以下\u003cmark\u003e顺序逻辑\u003c/mark\u003e：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e如果包匹配 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc_ip==1.2.3.4 \u0026amp;\u0026amp; dst_port==80\u003c/code\u003e，则将其送到第一个队列。这个队列对应的 class 目标速率是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e30kbps\u003c/code\u003e；否则，\u003c/li\u003e\n  \u003cli\u003e如果包匹配 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc_ip==1.2.3.4\u003c/code\u003e，则将其 drop；\u003c/li\u003e\n  \u003cli\u003e所有其他包将被送到第二个队列，对应的 class 目标速率是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10kbps\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"2-tc-ebpf-程序\"\u003e2 tc ebpf 程序\u003c/h1\u003e\n\n\u003cp\u003e有了以上基础，现在可以讨论 eBPF 了。\u003c/p\u003e\n\n\u003cp\u003e本质上，eBPF 是一种类汇编语言，能编写运行在内核的、安全的程序。\neBPF 程序能 attach 到内核中的若干 hook 点，其中大部分 hook 点\n都是用于包处理（packet processing）和监控（monitoring）目的的。\u003c/p\u003e\n\n\u003cp\u003e这些 hook 中\u003cmark\u003e有两个与 TC 相关\u003c/mark\u003e：从内核 4.1 开始，\u003cmark\u003eeBPF\n程序能作为 tc classifier 或 tc action 附着（attach）到这两个 hook 点\u003c/mark\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"21-用作-classifier分类器\"\u003e2.1 用作 classifier（分类器）\u003c/h2\u003e\n\n\u003cp\u003e作为分类器使用时，eBPF 能使处理过程更灵活，甚至还能实现有状态处理，或者与用户\n态交互（通过名为 map 的特殊数据结构）。\u003c/p\u003e\n\n\u003cp\u003e但这种场景下的 eBPF 程序\u003cmark\u003e本质上还是一个分类器\u003c/mark\u003e，因此\u003cstrong\u003e返回值与普通分类器并无二致\u003c/strong\u003e：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0\u003c/code\u003e：mismatch\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-1\u003c/code\u003e：match，表示当前 filter 的默认 classid\u003c/li\u003e\n  \u003cli\u003e其他值：表示 classid\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"22-用作-action动作\"\u003e2.2 用作 action（动作）\u003c/h2\u003e\n\n\u003cp\u003e用作 action 时，eBPF 程序的返回值\n提示系统接下来对这个包执行什么动作（action），下面的内容来自 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc-bpf(2)\u003c/code\u003e：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTC_ACT_UNSPEC (-1)\u003c/code\u003e：使用 tc 的默认 action（与 classifier/filter 返回 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-1\u003c/code\u003e 时类似）。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTC_ACT_OK (0)\u003c/code\u003e：结束处理过程，放行（allows the packet to proceed）。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTC_ACT_RECLASSIFY (1)\u003c/code\u003e：从头开始，重新执行分类过程。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTC_ACT_SHOT (2)\u003c/code\u003e：\u003cmark\u003e丢弃包\u003c/mark\u003e。\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTC_ACT_PIPE (3)\u003c/code\u003e：如果有下一个 action，执行之。\u003c/li\u003e\n  \u003cli\u003e其他值：定义在\n\u003ca href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/uapi/linux/pkt_cls.h\"\u003einclude/uapi/linux/pkt_cls.h\u003c/a\u003e。\n\u003ca href=\"http://docs.cilium.io/en/latest/bpf/#tc-traffic-control\"\u003eBPF and XDP Reference Guide from Cilium\u003c/a\u003e 有进一步介绍。\u003c/li\u003e\n  \u003cli\u003e没有定义在以上头文件中的值，属于未定义返回值（unspecified return codes）。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"3-direct-action\"\u003e3 direct-action\u003c/h1\u003e\n\n\u003cp\u003e有了以上基础，现在可以讨论 direct-action 了。\u003c/p\u003e\n\n\u003ch2 id=\"31-传统-classifieraction-模式的限制\"\u003e3.1 传统 classifier+action 模式的限制\u003c/h2\u003e\n\n\u003cp\u003e上面看到，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eclassifer 能对包进行匹配，但\u003cstrong\u003e\u003cmark\u003e返回的 classid\u003c/mark\u003e\u003c/strong\u003e；它\n\u003cstrong\u003e只能告诉系统接下来把这个包送到那个 class（队列）\u003c/strong\u003e，\n但无法让系统对这个包执行动作（drop、allow、mirror 等）。\u003c/li\u003e\n  \u003cli\u003eaction 返回的是动作，告诉系统接下来要对这个包做什么（drop、allow、mirror 等），但它无\n法对包进行分类（规则匹配）。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e所以，\u003cmark\u003e如果要实现”匹配+执行动作“的目的\u003c/mark\u003e —— 例如，如果源 IP 是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.1.1.1\u003c/code\u003e，则 drop 这\n个包 —— 就\u003cmark\u003e需要两个步骤：一个 classifier 和一个 action\u003c/mark\u003e，即 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eclassfifier+action\u003c/code\u003e 模式。\u003c/p\u003e\n\n\u003ch2 id=\"32-为-tc-ebpf-classifier-引入-direct-action-模式\"\u003e3.2 为 tc ebpf classifier 引入 direct-action 模式\u003c/h2\u003e\n\n\u003cp\u003e虽然 eBPF 有一些限制，例如单个程序的指令数是有上限的、只允许有限循环等等，但\n它提供了一种数据包处理的\u003cstrong\u003e强大\u003c/strong\u003e语言。这带来的结果之一是：\u003cmark\u003e对于很多场景，eBPF\nclassifier 已经有足够的能力完成完成任务处理，无需再 attach 额外的\nqdisc 或 class 了\u003c/mark\u003e，对于 tc 层的数据包过滤（pass/drop/etc）场景尤其如此。\u003c/p\u003e\n\n\u003cp\u003e所以，为了\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e避免因套用 tc 原有流程而引入一个功能单薄的 action\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e简化那些 classfier 独自就能完成所有工作的场景\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003e提升性能\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e针对 eBPF classifier，社区为 TC 引入了一个新的 flag：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edirect-action\u003c/code\u003e，简写 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eda\u003c/code\u003e。\n这个 flag 用在 filter 的 attach time，告诉系统：\n\u003cstrong\u003e\u003cmark\u003efilter（classifier）的返回值应当被解读为 action 类型的返回值\u003c/mark\u003e\u003c/strong\u003e\n（即前面提到的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTC_ACT_XXX\u003c/code\u003e；本来的话，应当被解读为 classid。）。\u003c/p\u003e\n\n\u003cp\u003e这意味着，一个作为 tc classifier 加载的 eBPF 程序，现在可以返回\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTC_ACT_SHOT\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTC_ACT_OK\u003c/code\u003e 等 tc action 的返回值了。换句话说，现在不需要另一个专门的\ntc action 对象来 drop 或 mirror 相应的包了。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e性能方面，这显然也是更优的，因为 \u003cmark\u003eTC 子系统无需再调用到额外的 action 模块\n，而后者是在内核之外的（external to the kernel）\u003c/mark\u003e。\u003c/li\u003e\n  \u003cli\u003e从使用方来说，使用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edirect-action\u003c/code\u003e flag 也是最简单的、最快的，是现在的推荐方式。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"33-能为-tc-ebpf-action-引入-direct-classifier-模式吗\"\u003e3.3 能为 tc ebpf action 引入 “direct-classifier” 模式吗？\u003c/h2\u003e\n\n\u003cp\u003e那么，\u003cmark\u003eTC eBPF action 能完成类似功能吗？\u003c/mark\u003e也就是说，能用 action 模块来完成处理包+返回\n“pass” 或 “drop” 吗?答案是不行：\n\u003cmark\u003eactions 并没有直接 attach 到某个 qdisc，它们只能用于包从某个 classifier 出来的地方\u003c/mark\u003e，\n这也就意味着：\u003cstrong\u003e无论如何都得有个 classifier/filter\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e另一个问题：这意味着 \u003cmark\u003eTC eBPF actions 毫无用处了吗？\u003c/mark\u003e也不是。\neBPF action 仍然还可以用在其他 filters 后面。例如下面这个场景，\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eattach 一个 u32 filter 到一个 qdisc，根据包中的某些字段做（初步）过滤\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e在这个 filter 后面再加一个 ebpf action（做进一步过滤）\u003c/p\u003e\n\n    \u003cp\u003e因为 ebpf action 中可以实现逻辑处理，因此可以在这里做额外判断，如果包满\n 足某些额外的条件，就返回 drop。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e以上就是 ebpf action 可以使用的场景之一。但坦白说，我见过的场景都是 eBPF 程序同\n时负责 filtering 和返回 action，而不需要额外的 filters。\u003c/p\u003e\n\n\u003ch2 id=\"34-tc-ebpf-classifier-返回值被重新解读是否因此丢失了-classid-信息\"\u003e3.4 tc ebpf classifier 返回值被重新解读，是否因此丢失了 classid 信息？\u003c/h2\u003e\n\n\u003cp\u003e\u003cmark\u003e正常 classifier 返回的是 classid\u003c/mark\u003e，提示系统接下来应该把包送到哪个 class 做进一步处理。\n而现在， tc ebpf classifier \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edirect-action\u003c/code\u003e 模式返回的是 action 结果。\u003c/p\u003e\n\n\u003cp\u003e\u003cmark\u003e这是否意味着 eBPF classifier 丢失了 classid 信息？\u003c/mark\u003e\u003c/p\u003e\n\n\u003cp\u003e答案是：NO，我们\u003cstrong\u003e仍然可以从其他地方获得这个 classid 信息\u003c/strong\u003e。传递给 filter 程序\n的参数是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct __skb_buff\u003c/code\u003e，其中有个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etc_classid\u003c/code\u003e 字段，存储的就是返回的\nclassid。后面介绍内核实现时会看到。\u003c/p\u003e\n\n\u003ch1 id=\"4-新的-qdisc-类型clsact\"\u003e4 新的 qdisc 类型：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eclsact\u003c/code\u003e\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edirect-action\u003c/code\u003e 模式引入内核和 iproute2 之后几个月，\n内核 Linux \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4.5\u003c/code\u003e 添加了一个新的 qdisc 类型： \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eclsact\u003c/code\u003e。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eclsact\u003c/code\u003e 与 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eingress\u003c/code\u003e qdisc 类似\u003c/strong\u003e，能够以 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edirect-action\u003c/code\u003e 模式 attach eBPF 程序，\n其\u003cmark\u003e特点是不会执行任何排队\u003c/mark\u003e（does not perform any queuing）。\u003c/li\u003e\n  \u003cli\u003e但 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eclsact\u003c/code\u003e 是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eingress\u003c/code\u003e 的超集，因为它\u003cmark\u003e还支持在 egress 上以 direct-action\n模式 attach eBPF 程序\u003c/mark\u003e，而在此之前我们是无法做到这一点的。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e更多关于 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eclsact\u003c/code\u003e \u003cem\u003eqdisc\u003c/em\u003e 信息见\n\u003ca href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=1f211a1b929c804100e138c5d3d656992cfd5622\"\u003ecommit log\u003c/a\u003e\n和 \u003ca href=\"http://docs.cilium.io/en/latest/bpf/#tc-traffic-control\"\u003eCilium Guide\u003c/a\u003e。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eclsact\u003c/code\u003e 是 iproute2/tc 中的 qdisc 名字。与此对应的内核模块名是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_ingress\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esch_clsact\u003c/code\u003e：\u003c/p\u003e\n\n  \u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// net/sched/sch_ingress.c\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e__init\u003c/span\u003e \u003cspan class=\"nf\"\u003eingress_module_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eregister_qdisc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eingress_qdisc_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eregister_qdisc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eclsact_qdisc_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\t\t\u003cspan class=\"n\"\u003eunregister_qdisc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eingress_qdisc_ops\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emodule_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eingress_module_init\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eMODULE_ALIAS\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;sch_clsact\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e  \u003c/div\u003e\n\n  \u003cp\u003e译注。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch1 id=\"5-完整示例ebpf-程序--tc-命令\"\u003e5 完整示例（eBPF 程序 + tc 命令）\u003c/h1\u003e\n\n\u003cp\u003e下面展示如何编写一个 tc ebpf filter (classifier)，以及如何编译、加载、附着到内核\n。\u003c/p\u003e\n\n\u003ch2 id=\"51-ebpf-程序tc-ebpf-classifierfilter\"\u003e5.1 eBPF 程序（tc ebpf classifier/filter）\u003c/h2\u003e\n\n\u003cp\u003e下面这段程序根据包的大小和协议类型进行处理，可能会 drop、allow 或对包执行其他操\n作。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;linux/bpf.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;linux/if_ether.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;linux/pkt_cls.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;linux/swab.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eclassifier\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003e__sk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edata_end\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edata_end\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eethhdr\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eeth\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eethhdr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edata_end\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eTC_ACT_SHOT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eeth\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eh_proto\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003e___constant_swab16\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eETH_P_IP\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/*\n         * Packet processing is not implemented in this sample. Parse\n         * IPv4 header, possibly push/pop encapsulation headers, update\n         * header fields, drop or transmit based on network policy,\n         * collect statistics and store them in a eBPF map...\n         */\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eprocess_packet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eTC_ACT_OK\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"52-编译\"\u003e5.2 编译\u003c/h2\u003e\n\n\u003cp\u003e使用 clang/LLVM 将我们的 ebpf filter 程序编译为编译成目标文件：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eclang \u003cspan class=\"nt\"\u003e-O2\u003c/span\u003e \u003cspan class=\"nt\"\u003e-emit-llvm\u003c/span\u003e \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e foo.c \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e - | \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    llc \u003cspan class=\"nt\"\u003e-march\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ebpf \u003cspan class=\"nt\"\u003e-mcpu\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eprobe \u003cspan class=\"nt\"\u003e-filetype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eobj \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e foo.o\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"53-加载到内核\"\u003e5.3 加载到内核\u003c/h2\u003e\n\n\u003cp\u003e首先需要创建一个 qdisc（因为 \u003cmark\u003efilter 必须 attach 到某个 qdisc\u003c/mark\u003e）：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etc qdisc add dev eth0 clsact\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后\u003cmark\u003e将我们的 filter 程序 attach 到 qdisc\u003c/mark\u003e：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etc filter add dev eth0 ingress bpf direct-action obj foo.o sec .text\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e查看：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etc filter show dev eth0\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etc filter show dev eth0 ingress\nfilter protocol all pref 49152 bpf chain 0\nfilter protocol all pref 49152 bpf chain 0 handle 0x1 foo.o:[.text] direct-action not_in_hw \u003cspan class=\"nb\"\u003eid \u003c/span\u003e11 tag ebe28a8e9a2e747f\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efoo.o\u003c/code\u003e 中的 filter 已经 attach 到 ingress 路径，并且使用了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edirect-action\u003c/code\u003e 模式。\n现在这段对流量进行分类+执行动作（classification and action selection）程序已经开始工作了。\u003c/p\u003e\n\n\u003ch2 id=\"54-清理\"\u003e5.4 清理\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etc qdisc del dev eth0 clsact\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"6-实现\"\u003e6 实现\u003c/h1\u003e\n\n\u003ch2 id=\"61-内核实现\"\u003e6.1 内核实现\u003c/h2\u003e\n\n\u003cp\u003e内核对 direct-action 模式的支持出现在 \u003ca href=\"https://github.com/torvalds/linux/commit/045efa82ff56\"\u003e045efa82ff56\u003c/a\u003e，\ncommit log 如下（排版略有调整）：\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003ecls_bpf: introduce integrated actions\u003c/p\u003e\n\n  \u003cp\u003eOften cls_bpf classifier is used with single action drop attached.\nOptimize this use case and let cls_bpf return both classid and action.\nFor backwards compatibility reasons enable this feature under\nTCA_BPF_FLAG_ACT_DIRECT flag.\u003c/p\u003e\n\n  \u003cp\u003eThen more interesting programs like the following are easier to write:\u003c/p\u003e\n\n  \u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003ecls_bpf_prog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003e__sk_buff\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"cm\"\u003e/* classify arp, ip, ipv6 into different traffic classes and drop all other packets */\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003ehtons\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eETH_P_ARP\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e  \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etc_classid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003ehtons\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eETH_P_IP\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e   \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etc_classid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003ehtons\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eETH_P_IPV6\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e \u003cspan class=\"n\"\u003eskb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etc_classid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"nl\"\u003edefault:\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eTC_ACT_SHOT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eTC_ACT_OK\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e  \u003c/div\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e尤其值得一提的是下面这段逻辑，\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/understanding-tc-da-mode/kernel-commit.png\" width=\"65%\" height=\"65%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e做一点解释：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efilter_res = BPF_PROG_RUN(prog-\u0026gt;filter, skb);\u003c/code\u003e 这个函数\u003cmark\u003e执行 eBPF 程序（classifier/filter），并将返回值存到 filter_res\u003c/mark\u003e，\u003c/li\u003e\n  \u003cli\u003e\u003cmark\u003e在这个 patch 之前，eBPF 程序返回的是 classid\u003c/mark\u003e，因此我们看到原有的\n逻辑是：\n    \u003cul\u003e\n      \u003cli\u003e如果 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efilter_res !=0 \u0026amp;\u0026amp; filter_res != -1\u003c/code\u003e，那 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eres-\u0026gt;classid = filter_res;\u003c/code\u003e\u003c/li\u003e\n      \u003cli\u003e然后执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eret = tcf_exts_exec(skb, \u0026amp;prog-\u0026gt;exts, res);\u003c/code\u003e，这会\u003cmark\u003e调用到相关的 action 模块，对包执行 action\u003c/mark\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003cmark\u003e有了这个 patch，并且使用了 da 模式，filter_res 被解读为 action 值\u003c/mark\u003e\n(\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eprog-\u0026gt;exts_integrated\u003c/code\u003e 为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrue\u003c/code\u003e 时表示 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edirect-action\u003c/code\u003e)。此时，\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eclassid\u003c/code\u003e 是从 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eqdisc_skb_cb(skb)-\u0026gt;tc_classid\u003c/code\u003e 获取的，其中 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estruct __sk_buff *skb\u003c/code\u003e 是传递给 eBPF 程序的上下文\u003c/li\u003e\n      \u003cli\u003e将 filter_res 作为 action 值，执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eret = cls_bpf_exec_opcode(filter_res);\u003c/code\u003e（\u003cstrong\u003e而非调用外部 action 模块\u003c/strong\u003e），然后退出循环\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"62-iproute2tc-实现\"\u003e6.2 iproute2/tc 实现\u003c/h2\u003e\n\n\u003cp\u003e相应的 iproute2 commit \u003ca href=\"https://git.kernel.org/pub/scm/network/iproute2/iproute2.git/commit/?id=faa8a463002f\"\u003efaa8a463002f\u003c/a\u003e，\n添加了对 tc \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eda|direct-action\u003c/code\u003e 的支持。\u003c/p\u003e\n\n\u003ch1 id=\"7-总结\"\u003e7 总结\u003c/h1\u003e\n\n\u003cp\u003e本文介绍了 tc ebpf 中 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eda\u003c/code\u003e 模式的来龙去脉，并给出了详细的使用案例。\n截至本文发表时，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eda\u003c/code\u003e 模式不仅是使用 tc ebpf 的推荐方式，而且\n据我所知也是唯一方式。\u003c/p\u003e\n\n\u003ch1 id=\"参考资料\"\u003e参考资料\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"http://www.netdevconf.org/1.1/proceedings/slides/borkmann-tc-classifier-cls-bpf.pdf\"\u003eOn getting tc classifier fully programmable with cls_bpf\u003c/a\u003e, Daniel Borkmann, netdev 1.1, Sevilla, February 2016\u003c/li\u003e\n  \u003cli\u003eLinux kernel commit \u003ca href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=045efa82ff563cd4e656ca1c2e354fa5bf6bbda4\"\u003e045efa82ff56\u003c/a\u003e cls_bpf: introduce integrated actions,\nDaniel Borkmann and Alexei Starovoitov, September 2015\u003c/li\u003e\n  \u003cli\u003eLinux kernel commit \u003ca href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=1f211a1b929c804100e138c5d3d656992cfd5622\"\u003e1f211a1b929c\u003c/a\u003e net, sched: add clsact qdisc,\nDaniel Borkmann, January 2016\u003c/li\u003e\n  \u003cli\u003eiproute2 commit \u003ca href=\"https://git.kernel.org/pub/scm/network/iproute2/iproute2.git/commit/?id=faa8a463002fb9a365054dd333556e0aaa022759\"\u003efaa8a463002f\u003c/a\u003e f_bpf: allow for optional classid and add flags,\nDaniel Borkmann, September 2015\u003c/li\u003e\n  \u003cli\u003eiproute2 commit \u003ca href=\"https://git.kernel.org/pub/scm/network/iproute2/iproute2.git/commit/?id=8f9afdd531560c1534be44424669add2e19deeec\"\u003e8f9afdd53156\u003c/a\u003e tc, clsact: add clsact frontend,\nDaniel Borkmann, January 2016\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/advanced-bpf-kernel-features-for-container-age-zh/\"\u003e\u003cspan\u003e« [译] 为容器时代设计的高级 eBPF 内核特性（FOSDEM, 2021）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/on-getting-tc-classifier-fully-programmable-zh/\"\u003e\u003cspan\u003e[译] [论文] 迈向完全可编程 tc 分类器（cls_bpf）（NetdevConf，2016） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2021-02-21T00:00:00Z",
  "Author": "Arthur Chiao"
}