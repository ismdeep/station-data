{
  "Source": "arthurchiao.art",
  "Title": "Linux Trouble Shooting Cheat Sheet",
  "Link": "https://arthurchiao.art/blog/linux-trouble-shooting-cheat-sheet/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eLinux Trouble Shooting Cheat Sheet\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2020-05-05 | Last Update 2020-05-05\u003c/p\u003e\n  \n  \u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#1-physical-resources\" id=\"markdown-toc-1-physical-resources\"\u003e1. Physical Resources\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-cpu\" id=\"markdown-toc-11-cpu\"\u003e1.1 CPU\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-memory\" id=\"markdown-toc-12-memory\"\u003e1.2 Memory\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-network-interfaces\" id=\"markdown-toc-13-network-interfaces\"\u003e1.3 Network Interfaces\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#14-storage-device-io\" id=\"markdown-toc-14-storage-device-io\"\u003e1.4 Storage Device I/O\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#15-storage-capacity\" id=\"markdown-toc-15-storage-capacity\"\u003e1.5 Storage Capacity\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#16-storage-controller\" id=\"markdown-toc-16-storage-controller\"\u003e1.6 Storage Controller\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#17-network-controller\" id=\"markdown-toc-17-network-controller\"\u003e1.7 Network Controller\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#18-cpu-interconnect\" id=\"markdown-toc-18-cpu-interconnect\"\u003e1.8 CPU Interconnect\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#19-memory-interconnect\" id=\"markdown-toc-19-memory-interconnect\"\u003e1.9 Memory Interconnect\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#110-io-interconnect\" id=\"markdown-toc-110-io-interconnect\"\u003e1.10 I/O Interconnect\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-software-resources\" id=\"markdown-toc-2-software-resources\"\u003e2. Software Resources\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-kernel-mutex\" id=\"markdown-toc-21-kernel-mutex\"\u003e2.1 Kernel mutex\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-user-mutex\" id=\"markdown-toc-22-user-mutex\"\u003e2.2 User mutex\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-task-capacity\" id=\"markdown-toc-23-task-capacity\"\u003e2.3 Task Capacity\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-file-descriptors\" id=\"markdown-toc-24-file-descriptors\"\u003e2.4 File descriptors\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-tracing\" id=\"markdown-toc-3-tracing\"\u003e3. Tracing\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-trace-cmd-ftrace\" id=\"markdown-toc-31-trace-cmd-ftrace\"\u003e3.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrace-cmd\u003c/code\u003e (ftrace)\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003cp\u003eContents from the wonderful book \u003cstrong\u003e\u003cem\u003eSystems Performance\u003c/em\u003e\u003c/strong\u003e: Enterprise and the\nCloud, and authorâ€™s website: \u003ca href=\"http://www.brendangregg.com/USEmethod/use-linux.html\"\u003eUSE Method: Linux Performance Checklist\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWill be updated according to my own needs.\u003c/p\u003e\n\n\u003ch1 id=\"1-physical-resources\"\u003e1. Physical Resources\u003c/h1\u003e\n\n\u003ch2 id=\"11-cpu\"\u003e1.1 CPU\u003c/h2\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e+-----+-------------+----------------------------------------------------------------------------------+\n|     |             | 1. per CPU                                                                       |\n|     |             |     * `mpstat -P ALL 1`: `%idle`                                                 |\n|     |             |     * `sar -P ALL`     : `%idle`                                                 |\n|     |             | 2. system wide                                                                   |\n|     |             |     * `vmstat 1`  : `id`                                                         |\n|     |             |     * `sar -u 1 5`: `%idle`                                                      |\n|     |             |     * `dstat -c`  : `idl`                                                        |\n|     |             | 3. per process                                                                   |\n|     | Utilization |     * `top`       : `%CPU`                                                       |\n|     |             |     * `htop`      : `%CPU`                                                       |\n|     |             |     * `ps -o pcpu`: `%CPU`                                                       |\n|     |             |     * `pidstat 1` : `CPU`                                                        |\n|     |             | 4. per kernel thread                                                             |\n|     |             |     * `top` : `VIRT`                                                             |\n|     |             |     * `hotp`: press `K` to sort, see `VIRT` column                               |\n|     +-------------+----------------------------------------------------------------------------------|\n|     |             | 1. system wide                                                                   |\n| CPU |             |     * `vmstat 1`  : column `r` \u0026gt; CPU count                                       |\n|     |             |     * `sar -q 1 5`: column `runq-sz` \u0026gt; CPU count                                 |\n|     |             | 2. per process                                                                   |\n|     | Saturation  |     * `cat /proc/\u0026lt;pid\u0026gt;/schedstat`: 2nd column (`sched_info`, `run_delay`)        |\n|     |             |     * `getdelays.c`              : CPU                                           |\n|     |             |     * `perf sched latency`       : show avg and max delay per schedule           |\n|     |             |     * dynamic tracing, e.g. SystemTap `schedtimes.stp` queued (us)               |\n|     +-------------+----------------------------------------------------------------------------------|\n|     |             | * `perf` (LPE): if processor-specific error events (CPC) are available, e.g.     |\n|     | Errors      |   AMD64\u0026#39;s Single-bit ECC Errors                                                  |\n|     |             |                                                                                  |\n+-----+-------------+----------------------------------------------------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eExplainations:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e`sar -P ALL`: `%idle`\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003estands for: executing \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esar -P ALL\u003c/code\u003e, then check the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e%idle\u003c/code\u003e column in the output.\nThe others are similar.\u003c/p\u003e\n\n\u003ch2 id=\"12-memory\"\u003e1.2 Memory\u003c/h2\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e+--------+-------------+-------------------------------------------------------------------------------+\n|        |             | 1. system wide                                                                |\n|        |             |     * `free -m`     : `Mem`, `Swap`                                           |\n|        |             |     * `vmstat 1`    : `swpd`, `free`                                          |\n|        |             |     * `sar -r 1 5`  : `%memused`                                              |\n|        | Utilization |     * `dstat -m`    : `free`                                                  |\n|        |             |     * `slabtop -s c`: sort by cache size                                      |\n|        |             | 2. per process                                                                |\n|        |             |     * `top`/`htop`  : `RES` (resident memory), `VIRT` (virtual memory), `MEM` |\n|        +-------------+-------------------------------------------------------------------------------|\n|        |             | 1. system wide                                                                |\n|        |             |     * `vmstat 1`  : `si`/`so` (swap)                                          |\n|        |             |     * `sar -B 1 5`: `pgscank` + `pgscand` (scanning)                          |\n|        |             |     * `sar -W 1 5`: `pswpin/s` + `pswpout/s`                                  |\n| Memory | Saturation  | 2. per process                                                                |\n|        |             |     * `getdelays.c`                             : SWAP                        |\n|        |             |     * `cat /proc/\u0026lt;pid\u0026gt;/stat | awk \u0026#39;{print $10}\u0026#39;`: stands for minor fault rate |\n|        |             |       (`min_flt`), or dynamic tracing                                         |\n|        |             |     * `dmesg -T | grep killed`                  : OOM killer                  |\n|        +-------------+-------------------------------------------------------------------------------|\n|        |             | * `dmesg`: for physical failures                                              |\n|        | Errors      | * dynamic tracing, e.g. `uprobes` for failed `malloc` (DTrace, SystemTap)     |\n|        |             |                                                                               |\n+--------+-------------+-------------------------------------------------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"13-network-interfaces\"\u003e1.3 Network Interfaces\u003c/h2\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e+------------+-------------+---------------------------------------------------------------------------+\n|            |             | * `ip -s link`    : statistics                                            |\n|            | Utilization | * `sar -n DEV 1 5`: real time stats, e.g. rx pkts/s, rx bytes/s           |\n|            |             |                                                                           |\n|            +-------------+---------------------------------------------------------------------------|\n|            |             | * `ifconfig`         : overruns, dropped                                  |\n|  Network   |             | * `netstat -s`       : protocol statistics, e.g. IP, ICMP, UDP, TCP       |\n| Interfaces | Saturation  | * `sar -n EDEV 1 5`  : real time interface errors                         |\n|            |             | * `cat /proc/net/dev`: RX/TX drop                                         |\n|            |             | * dynamic tracing of other TCP/IP stack queueing                          |\n|            +-------------+---------------------------------------------------------------------------|\n|            |             | * `ifconfig`                                   : errors, dropped          |\n|            |             | * `netstat -i`                                 : RX-ERR, TX-ERR           |\n|            |             | * `ip -s link`                                 : errors                   |\n|            | Errors      | * `sar -n EDEV 1 5`                            : rxerr/s, txerr/s         |\n|            |             | * `cat /proc/net/dev`                          : errs, drop               |\n|            |             | * `cat /sys/class/net/\u0026lt;interface\u0026gt;/statistics/*`:                          |\n|            |             | * dynamic tracing of driver function returns                              |\n+------------+-------------+---------------------------------------------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"14-storage-device-io\"\u003e1.4 Storage Device I/O\u003c/h2\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e+------------+-------------+---------------------------------------------------------------------------+\n|            |             | 1. system wide                                                            |\n|            |             |     * `iostat -xz 1`: `%util`                                             |\n|            |             |     * `sar -d 1 5`  : `%util`                                             |\n|            | Utilization | 2. per process                                                            |\n|            |             |     * `iotop`                                                             |\n|            |             |     * `cat /proc/\u0026lt;pid\u0026gt;/sched`                                             |\n|  Storage   +-------------+---------------------------------------------------------------------------|\n| Device I/O |             | * `iostat -xz 1`: `avgqu-sz` \u0026gt; 1, or high await                           |\n|            |             | * `sar -d 1 5`  : `%util`                                                 |\n|            | Saturation  | * LPE block probes for queue length/latency                               |\n|            |             | * dynamic/static tracing of I/O subsystem (including LPE block probes)    |\n|            |             |                                                                           |\n|            +-------------+---------------------------------------------------------------------------|\n|            |             | * `cat /sys/devices/../ioerr_cnt`                                         |\n|            | Errors      | * `smartctl`                                                              |\n|            |             | * dynamic/static tracing of I/O subsystem response codes                  |\n+------------+-------------+---------------------------------------------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"15-storage-capacity\"\u003e1.5 Storage Capacity\u003c/h2\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e+----------+-------------+-----------------------------------------------------------------------------+\n|          |             | * `swapon -s`                                                               |\n|          |             | * `free`                                                                    |\n|          | Utilization | * `cat /proc/meminfo`: `SwapTotal`, `SwapFree`                              |\n|          |             | * `df -h`            : `Size`, `Use%`                                       |\n|          |             |                                                                             |\n|          +-------------+-----------------------------------------------------------------------------|\n|          |             |                                                                             |\n| Storage  | Saturation  | No sure this one makes sense â€”â€” once it\u0026#39;s full, `ENOSPC`.                   |\n| Capacity |             |                                                                             |\n|          +-------------+-----------------------------------------------------------------------------|\n|          |             | 1. file system                                                              |\n|          |             |     * `strace` for `ENOSPC`                                                 |\n|          | Errors      |     * dynamic tracing for `ENOSPC`                                          |\n|          |             |     * `/var/log/messages` errs                                              |\n|          |             |     * application log errors                                                |\n+----------+-------------+-----------------------------------------------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"16-storage-controller\"\u003e1.6 Storage Controller\u003c/h2\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e+------------+-------------+----------------------------------------------------------------------------+\n|            |             |                                                                            |\n|            | Utilization | * `iostat -xz 1`: sum devices and compare to known IOPS/tput limits/card   |\n|            |             |                                                                            |\n|            +-------------+----------------------------------------------------------------------------|\n|  Storage   |             |                                                                            |\n| Controller | Saturation  | see storage device I/O saturation in the above.                            |\n|            |             |                                                                            |\n|            +-------------+----------------------------------------------------------------------------|\n|            |             |                                                                            |\n|            | Errors      | see storage device I/O errors in the above.                                |\n|            |             |                                                                            |\n+------------+-------------+----------------------------------------------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"17-network-controller\"\u003e1.7 Network Controller\u003c/h2\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e+------------+-------------+---------------------------------------------------------------------------+\n|            |             | * `ip -s link`                                                            |\n|            |             | * `sar -n DEV 1 5`                                                        |\n|            | Utilization | * `cat /proc/net/dev`                                                     |\n|            |             | * supplementary by myself:                                                |\n|            |             |     * `iftop`                                                             |\n|  Network   +-------------+---------------------------------------------------------------------------|\n| Controller |             |                                                                           |\n|            | Saturation  | see network interfaces, saturation in the above.                          |\n|            |             |                                                                           |\n|            +-------------+---------------------------------------------------------------------------|\n|            |             |                                                                           |\n|            | Errors      | see network interfaces, errors.                                           |\n|            |             |                                                                           |\n+------------+-------------+---------------------------------------------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"18-cpu-interconnect\"\u003e1.8 CPU Interconnect\u003c/h2\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e+--------------+-------------+-------------------------------------------------------------------------+\n|              |             |                                                                         |\n|              | Utilization | * LPE (CPC) for CPU interconnect ports, tput/max.                       |\n|              |             |                                                                         |\n|              +-------------+-------------------------------------------------------------------------|\n|    CPU       |             |                                                                         |\n| Interconnect | Saturation  | * LPE (CPC) for stall cycles.                                           |\n|              |             |                                                                         |\n|              +-------------+-------------------------------------------------------------------------|\n|              |             |                                                                         |\n|              | Errors      | * LPE (CPC) for whatever is available.                                  |\n|              |             |                                                                         |\n+--------------+-------------+-------------------------------------------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"19-memory-interconnect\"\u003e1.9 Memory Interconnect\u003c/h2\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e+--------------+-------------+-------------------------------------------------------------------------+\n|              |             | * LPE (CPC) for for memory busses, tput/max                             |\n|              |             | * CPI \u0026gt;= N, e.g. N=10                                                   |\n|              | Utilization | * CPC local vs. remote counters                                         |\n|              |             |                                                                         |\n|              +-------------+-------------------------------------------------------------------------|\n|   Memory     |             |                                                                         |\n| Interconnect | Saturation  | * LPE (CPC) for stall cycles.                                           |\n|              |             |                                                                         |\n|              +-------------+-------------------------------------------------------------------------|\n|              |             |                                                                         |\n|              | Errors      | * LPE (CPC) for whatever is available.                                  |\n|              |             |                                                                         |\n+--------------+-------------+-------------------------------------------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"110-io-interconnect\"\u003e1.10 I/O Interconnect\u003c/h2\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e+--------------+-------------+-------------------------------------------------------------------------+\n|              |             | * LPE (CPC) for tput/max                                                |\n|              | Utilization | * inference via known tput from iostat/ip/...                           |\n|              |             |                                                                         |\n|              +-------------+-------------------------------------------------------------------------|\n|     I/O      |             |                                                                         |\n| Interconnect | Saturation  | * LPE (CPC) for stall cycles.                                           |\n|              |             |                                                                         |\n|              +-------------+-------------------------------------------------------------------------|\n|              |             |                                                                         |\n|              | Errors      | * LPE (CPC) for whatever is available.                                  |\n|              |             |                                                                         |\n+--------------+-------------+-------------------------------------------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"2-software-resources\"\u003e2. Software Resources\u003c/h1\u003e\n\n\u003ch2 id=\"21-kernel-mutex\"\u003e2.1 Kernel mutex\u003c/h2\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e+--------+-------------+--------------------------------------------------------------------------------+\n|        |             |                                                                                |\n|        |             | * `cat /proc/lock_stat` (With `CONFIG_LOCK_STATS=y`): \u0026#34;holdtime-totat\u0026#34; /       |\n|        | Utilization |   \u0026#34;acquisitions\u0026#34; (also see \u0026#34;holdtime-min\u0026#34;, \u0026#34;holdtime-max\u0026#34;) [8]                 |\n|        |             | * dynamic tracing of lock functions or instructions (maybe)                    |\n|        |             |                                                                                |\n|        +-------------+--------------------------------------------------------------------------------|\n|        |             | * `/proc/lock_stat` (With `CONFIG_LOCK_STATS=y`): \u0026#34;waittime-total\u0026#34;,            |\n| Kernel |             |   \u0026#34;contentions\u0026#34; (also see \u0026#34;waittime-min\u0026#34;, \u0026#34;waittime-max\u0026#34;)                      |\n| Mutex  | Saturation  | * dynamic tracing of lock functions or instructions (maybe)                    |\n|        |             | * spinning shows up with profiling (`perf record -a -g -F 997` ...,            |\n|        |             |   oprofile, dynamic tracing)                                                   |\n|        +-------------+--------------------------------------------------------------------------------|\n|        |             | * dynamic tracing (eg, recusive mutex enter)                                   |\n|        | Errors      | * other errors can cause kernel lockup/panic, debug with kdump/crash           |\n|        |             |                                                                                |\n+--------+-------------+--------------------------------------------------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"22-user-mutex\"\u003e2.2 User mutex\u003c/h2\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e+--------+-------------+--------------------------------------------------------------------------------+\n|        |             | * `valgrind --tool=drd --exclusive-threshold=...` (held time)                  |\n|        | Utilization | * dynamic tracing of lock to unlock function time                              |\n|        |             |                                                                                |\n|        +-------------+--------------------------------------------------------------------------------|\n| User   |             | * `valgrind --tool=drd` to infer contention from held time                     |\n| Mutex  | Saturation  | * dynamic tracing of synchronization functions for wait time                   |\n|        |             | * profiling (oprofile, PEL, ...) user stacks for spins                         |\n|        +-------------+--------------------------------------------------------------------------------|\n|        |             | * `valgrind --tool=drd` various errors                                         |\n|        | Errors      | * dynamic tracing of `pthread_mutex_lock()` for `EAGAIN`, `EINVAL`,            |\n|        |             |   `EPERM`, `EDEADLK`, `ENOMEM`, `EOWNERDEAD`, ...                              |\n+--------+-------------+--------------------------------------------------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"23-task-capacity\"\u003e2.3 Task Capacity\u003c/h2\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e+----------+-------------+------------------------------------------------------------------------------+\n|          |             | * `top`/`htop`: \u0026#34;Tasks\u0026#34; (current)                                            |\n|          | Utilization | * `sysctl kernel.threads-max`                                                |\n|          |             | * `/proc/sys/kernel/threads-max` (max)                                       |\n|          +-------------+------------------------------------------------------------------------------|\n|          |             |                                                                              |\n|   Task   |             | * threads blocking on memory allocation                                      |\n| Capacity | Saturation  | * `sar -B`: at this point the page scanner (\u0026#34;pgscan*\u0026#34;) should be running,    |\n|          |             |   else examine using dynamic tracing                                         |\n|          |             |                                                                              |\n|          +-------------+------------------------------------------------------------------------------|\n|          |             | * \u0026#34;can\u0026#39;t fork()\u0026#34; errors                                                      |\n|          | Errors      | * user-level threads: pthread_create() failures with EAGAIN, EINVAL, ...     |\n|          |             | * kernel: dynamic tracing of kernel_thread() ENOMEM                          |\n+----------+-------------+------------------------------------------------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"24-file-descriptors\"\u003e2.4 File descriptors\u003c/h2\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e+-------------+-------------+---------------------------------------------------------------------------+\n|             |             | 1. system-wide                                                            |\n|             |             |     * `sar -v`, \u0026#34;file-nr\u0026#34; vs `/proc/sys/fs/file-max`                      |\n|             |             |     * `dstat --fs`: \u0026#34;files\u0026#34;                                               |\n|             | Utilization |     * `cat /proc/sys/fs/file-nr`                                          |\n|             |             | 2. per-process                                                            |\n|             |             |     * `ls /proc/\u0026lt;PID\u0026gt;/fd | wc -l` vs `ulimit -n`                          |\n|             |             |                                                                           |\n|    File     +-------------+---------------------------------------------------------------------------|\n|             |             |                                                                           |\n| Descriptors |             | does this make sense? I don\u0026#39;t think there is any queueing or blocking,    |\n|             | Saturation  | other than on memory allocation.                                          |\n|             |             |                                                                           |\n|             +-------------+---------------------------------------------------------------------------|\n|             |             |                                                                           |\n|             | Errors      | * strace errno == EMFILE on syscalls returning fds (eg, open(),           |\n|             |             |   accept(), ...).                                                         |\n+-------------+-------------+---------------------------------------------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"3-tracing\"\u003e3. Tracing\u003c/h1\u003e\n\n\u003ch2 id=\"31-trace-cmd-ftrace\"\u003e3.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrace-cmd\u003c/code\u003e (ftrace)\u003c/h2\u003e\n\n\u003cp\u003eTrace kernel function calls.\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etrace-cmd record \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e function_graph \u003cspan class=\"nt\"\u003e-P\u003c/span\u003e \u0026lt;PID\u0026gt;\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etrace-cmd record \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e sched:sched_switch \u0026lt;CMD\u0026gt;\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etrace-cmd record \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e function_graph \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e do_IRQ \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e irq_handler_entry \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e10\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etrace-cmd record \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e kmalloc_node \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;bytes_req \u0026gt; 1000\u0026#39;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etrace-cmd report\n\n\u003cspan class=\"c\"\u003e# functions could be traced\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etrace-cmd list \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# events could be traced\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /sys/kernel/debug/tracing/available_events\n\n\u003cspan class=\"c\"\u003e# record events\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   * -e [ \u0026lt;event\u0026gt; | \u0026lt;subsystem\u0026gt; | \u0026lt;subsystem:even\u0026gt; | all ]\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etrace-cmd record \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e sched:sched_switch\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ereferences:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://jvns.ca/blog/2017/03/19/getting-started-with-ftrace/\"\u003eftrace: trace your kernel functions!\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://lwn.net/Articles/410200/\"\u003eLWN.net: trace-cmd: A front-end for Ftrace\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/monitoring-network-stack/\"\u003e\u003cspan\u003eÂ«Â Monitoring Linux Network Stack\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/systems-performance-notes-zh/\"\u003e\u003cspan\u003e[ç¬”è®°] ã€ŠSystems Performance: Enterprise and the Cloudã€‹(Prentice Hall, 2013)Â Â»\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2020-05-05T00:00:00Z",
  "Author": "Arthur Chiao"
}