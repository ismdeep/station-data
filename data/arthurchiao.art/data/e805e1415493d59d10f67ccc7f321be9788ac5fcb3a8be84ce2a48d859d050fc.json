{
  "Source": "arthurchiao.art",
  "Title": "Beneath the TCP Handshakes in Modern Networking Infrastructures",
  "Link": "https://arthurchiao.art/blog/tcp-handshake-in-modern-network-infra/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eBeneath the TCP Handshakes in Modern Networking Infrastructures\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2019-10-11 | Last Update 2019-10-11\u003c/p\u003e\n  \n  \u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#tcp-3-way-handshake\" id=\"markdown-toc-tcp-3-way-handshake\"\u003eTCP 3-way Handshake\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-scenario-1\" id=\"markdown-toc-1-scenario-1\"\u003e1. Scenario 1\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-phenomenon-syn---synack---rst\" id=\"markdown-toc-11-phenomenon-syn---synack---rst\"\u003e1.1 Phenomenon: SYN -\u0026gt; SYN+ACK -\u0026gt; RST\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-capture\" id=\"markdown-toc-12-capture\"\u003e1.2 Capture\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-analysis\" id=\"markdown-toc-13-analysis\"\u003e1.3 Analysis\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#14-root-cause\" id=\"markdown-toc-14-root-cause\"\u003e1.4 Root Cause\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#141-the-short-answer\" id=\"markdown-toc-141-the-short-answer\"\u003e1.4.1 The Short Answer\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#142-the-long-answer\" id=\"markdown-toc-142-the-long-answer\"\u003e1.4.2 The Long Answer\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-scenario-2\" id=\"markdown-toc-2-scenario-2\"\u003e2. Scenario 2\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-phenomenon-handshake-ok-connection-reset-on-transmit-data\" id=\"markdown-toc-21-phenomenon-handshake-ok-connection-reset-on-transmit-data\"\u003e2.1 Phenomenon: Handshake OK, Connection Reset on Transmit Data\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-capture\" id=\"markdown-toc-22-capture\"\u003e2.2 Capture\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-analysis\" id=\"markdown-toc-23-analysis\"\u003e2.3 Analysis\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-root-cause\" id=\"markdown-toc-24-root-cause\"\u003e2.4 Root Cause\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-closing-remarks\" id=\"markdown-toc-3-closing-remarks\"\u003e3. Closing Remarks\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-appendix-a-istio-sidecar-interception\" id=\"markdown-toc-4-appendix-a-istio-sidecar-interception\"\u003e4. Appendix A: Istio Sidecar Interception\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"tcp-3-way-handshake\"\u003eTCP 3-way Handshake\u003c/h2\u003e\n\n\u003cp\u003eIn its simplest form, TCP 3-way handshake is easy to understand, and there are\nplenty of online materials talking about this. (You could check out one of my\n\u003ca href=\"/blog/tcpdump-practice-zh/\"\u003eprevious post\u003c/a\u003e if you could read Chinease.)\u003c/p\u003e\n\n\u003cp\u003eHowever, understanding, practising and trouble shooting TCP issues in the real\nworld is another matter. As container platforms begin to dominate the world, as\nwell as service-mesh’s emerging as the next major shift of the underlying\nnetworking infrastructure, modern networking falicities in these platforms make\nTCP related problems even more complicated. In traditional views, those problems\nmay look fairly weired.\u003c/p\u003e\n\n\u003cp\u003eThis article will show two of such scenarios. What’s your ideas when seeing\nbelow two pictures?\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-handshake-in-modern-network-infra/1-1.png\" width=\"30%\" height=\"30%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eProblematic TCP stream of scenario 1\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-handshake-in-modern-network-infra/2-1.png\" width=\"30%\" height=\"30%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eProblematic TCP stream of scenario 2\u003c/p\u003e\n\n\u003ch1 id=\"1-scenario-1\"\u003e1. Scenario 1\u003c/h1\u003e\n\n\u003ch2 id=\"11-phenomenon-syn---synack---rst\"\u003e1.1 Phenomenon: SYN -\u0026gt; SYN+ACK -\u0026gt; RST\u003c/h2\u003e\n\n\u003cp\u003eClient initiated a connection to server, server immediately acked\n(SYN+ACK), but client reset this packet on receiving it, and kept waiting\nfor next SYN+ACK from server. After many times of restransmit and reset, the\nconnection finally timed out.\u003c/p\u003e\n\n\u003ch2 id=\"12-capture\"\u003e1.2 Capture\u003c/h2\u003e\n\n\u003cp\u003eThe tcpdump output:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e1 18:56:40.353352 IP 10.4.26.45.35582 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.4.26.234.80: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS],  \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e853654705, win 29200, length 0\n2 18:56:40.353506 IP 10.4.26.11.80 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.4.26.45.35582:  Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS.], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e914414059, ack 853654706, win 28960, length 0\n3 18:56:40.353521 IP 10.4.26.45.35582 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.4.26.11.80:  Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eR],  \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e853654706, win 0, length 0\n4 18:56:41.395322 IP 10.4.26.45.35582 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.4.26.234.80: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS],  \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e853654705, win 29200, length 0\n5 18:56:41.395441 IP 10.4.26.11.80 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.4.26.45.35582:  Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS.], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e930694343, ack 853654706, win 28960, length 0\n6 18:56:41.395457 IP 10.4.26.45.35582 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.4.26.11.80:  Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eR],  \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e853654706, win 0, length 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ewhere,\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eClient: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.4.26.45\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eServer: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.4.26.234\u003c/code\u003e, providing HTTP service at port \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e80\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhat’s the problem? Think about this before you proceed on.\u003c/p\u003e\n\n\u003ch2 id=\"13-analysis\"\u003e1.3 Analysis\u003c/h2\u003e\n\n\u003cp\u003eLet’s try to understand what’s happend in depth:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#1\u003c/code\u003e: client initiated a connection to server, with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc_port=35582,dst_port=80\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#2\u003c/code\u003e: server acked (SYN+ACK)\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#3\u003c/code\u003e: client reset the server’s SYN+ACK packet\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#4\u003c/code\u003e: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#1\u003c/code\u003e timed out, client retransmits it\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#5\u003c/code\u003e: server acked \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#4\u003c/code\u003e (still SYN+ACK)\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#6\u003c/code\u003e: client rejected again (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#5\u003c/code\u003e, SYN+ACK)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe time sequence of this TCP stream is re-depicted here:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-handshake-in-modern-network-infra/1-1.png\" width=\"30%\" height=\"30%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 1.1 The problematic TCP stream\u003c/p\u003e\n\n\u003cp\u003eAt first look, this seems fairly strange, because server acked client’s request,\nwhile client immediately reset this packet on receiving, then kept waiting for next\nSYN+ACK from server (instead of closing this connecting attempt). It\neven retransmitted the first SYN packet on timeout (noticed by that \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#4\u003c/code\u003e\nuses the same temporary port as \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#1\u003c/code\u003e do).\u003c/p\u003e\n\n\u003ch2 id=\"14-root-cause\"\u003e1.4 Root Cause\u003c/h2\u003e\n\n\u003cp\u003ePay attention to this: client assumed the server is at \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.4.26.234\u003c/code\u003e, why the\nSYN+ACK packets (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#2\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#4\u003c/code\u003e) came from \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.4.26.11\u003c/code\u003e? By some investigations,\nwe found that: the server was deployed as a K8S \u003cstrong\u003eExternalIP Service\u003c/strong\u003e, with\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.4.26.11\u003c/code\u003e as the VIP (ExternalIP), and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.4.26.234\u003c/code\u003e as the PodIP.\u003c/p\u003e\n\n\u003ch3 id=\"141-the-short-answer\"\u003e1.4.1 The Short Answer\u003c/h3\u003e\n\n\u003cp\u003eClient connected to server with server’s VIP as destination IP, but server\n(instance) replied with its real IP (PodIP). IP mismatch made client believing\nthat the SYN+ACK packets were invalid, so it rejected them.\u003c/p\u003e\n\n\u003ch3 id=\"142-the-long-answer\"\u003e1.4.2 The Long Answer\u003c/h3\u003e\n\n\u003cp\u003eFirst of all, we are in a Cilium powered K8S cluster.\nCilium will generate BPF rules to load balance the traffics to this VIP\nto all its backend Pods. The normal traffic path looks like Fig 1.1:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-handshake-in-modern-network-infra/1-2.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 1.2 Normal data flow between client and server instances\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e@Client: client sends traffic to server \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVIP\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e@ClientHost: Cilium does DNAT, change VIP to one of its \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePodIP\u003c/code\u003e (backend\ninstance IP)\u003c/li\u003e\n  \u003cli\u003e@ServerHost: traffic routed to server instance whose IP is \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePodIP\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e@Server: server instance reply with its own \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePodIP\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e@ServerHost: route reply packet to client host\u003c/li\u003e\n  \u003cli\u003e@ClientHost: Cilium does SNAT, change server’s \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePodIP\u003c/code\u003e to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVIP\u003c/code\u003e, then forward\ntraffic to client instance\u003c/li\u003e\n  \u003cli\u003e@Client: client receives traffic. From its own viewpoint, the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc_ip\u003c/code\u003e of the\nreceived packet is just the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edst_ip\u003c/code\u003e of the previous sent packet (both are\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVIP\u003c/code\u003e), so it accepts the packet. 3-way handshake finish.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe problem arises when \u003cstrong\u003eclient and server are on the same host\u003c/strong\u003e, in which\ncase, \u003cstrong\u003estep 6 is not implemented by Cilium\u003c/strong\u003e, as shown in Fig 1.2:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-handshake-in-modern-network-infra/1-3.png\" width=\"45%\" height=\"45%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 1.3 Data flow when client and server are on the same host\u003c/p\u003e\n\n\u003cp\u003eWe have reported this problem and it is confirmed a bug, see \u003ca href=\"https://github.com/cilium/cilium/issues/9285\"\u003ethis\nissue\u003c/a\u003e for more details.\u003c/p\u003e\n\n\u003ch1 id=\"2-scenario-2\"\u003e2. Scenario 2\u003c/h1\u003e\n\n\u003ch2 id=\"21-phenomenon-handshake-ok-connection-reset-on-transmit-data\"\u003e2.1 Phenomenon: Handshake OK, Connection Reset on Transmit Data\u003c/h2\u003e\n\n\u003cp\u003eClient initiated a TCP connection to server succesfully (3 packets), however, on\nsending the first data packet (the 4th packet in total), the connection got\nreset by server immediately.\u003c/p\u003e\n\n\u003ch2 id=\"22-capture\"\u003e2.2 Capture\u003c/h2\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e1 12:10:30.083284 IP 10.6.2.2.51136 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.7.3.3.8080: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS],  \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e1658620893, win 29200, length 0\n2 12:10:30.083513 IP 10.6.3.3.8080 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.7.2.2.51136: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS.], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e2918345428, ack 1658620894, win 28960, length 0\n3 12:10:30.083612 IP 10.6.2.2.51136 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.7.3.3.8080: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.],  ack 1, win 229, length 0\n4 12:10:30.083899 IP 10.6.2.2.51136 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.7.3.3.8080: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eP.], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e1:107, ack 1, win 229, length 106\n5 12:10:30.084038 IP 10.6.3.3.8080 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.7.2.2.51136: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.],  ack 107, win 227, length 0\n6 12:10:30.084251 IP 10.6.3.3.8080 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e 10.7.2.2.51136: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eR.], \u003cspan class=\"nb\"\u003eseq \u003c/span\u003e1, ack 107, win 227, length 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAgain, it’s worth to think about this before proceed on.\u003c/p\u003e\n\n\u003ch2 id=\"23-analysis\"\u003e2.3 Analysis\u003c/h2\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#1\u003c/code\u003e: client initiated a connection to server, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esrc_port=51136,dst_port=8080\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#2\u003c/code\u003e: server acked (SYN+ACK)\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#3\u003c/code\u003e: client acked server, \u003cstrong\u003eTCP connection succesfully established\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#4\u003c/code\u003e: client sent a \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e106\u003c/code\u003e byte data packet\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#5\u003c/code\u003e: server acked \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#4\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#6\u003c/code\u003e: server reset this connection right after \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e#5\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe time sequence of this TCP stream is re-depicted here:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-handshake-in-modern-network-infra/2-1.png\" width=\"30%\" height=\"30%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 2.1 Time sequence of the problematic TCP stream\u003c/p\u003e\n\n\u003ch2 id=\"24-root-cause\"\u003e2.4 Root Cause\u003c/h2\u003e\n\n\u003cp\u003eClient sees a topology like Fig 2.1:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-handshake-in-modern-network-infra/2-2.png\" width=\"40%\" height=\"40%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 2.2 Client view of the two sides\u003c/p\u003e\n\n\u003cp\u003eIt initiated an connection, which got accepted by server succesfully, namely,\nthe 3-way handshake finished withouth any error. But on transmitting data,\nserver immediately rejected this connection. So, the problem must reside in the\nserver side.\u003c/p\u003e\n\n\u003cp\u003eDigging into the server side, we found that a sidecar (envoy, to be specific)\nwas injected for the server side container. If you are not familir with this\nword, please refer to some introductory documents of \u003ca href=\"https://istio.io\"\u003eIstio\u003c/a\u003e.\nIn short words, the sidecar serves as a middle man between server container and\nthe outside world:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eon ingress direction, it intercepts all ingress traffic to server, do some\nprocessing, then forwards the allowed traffic to server\u003c/li\u003e\n  \u003cli\u003eon egress direction, it intercepts all egress traffic from server, again do\nsome processing, and forwards the allowed traffic to outside world.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eThe traffic interception is implemented with iptables rules in Istio.\nExplanation of the detailed implementations is beyong the scope of this post,\nbut you could refer to the figure in Appendix A if you are interested.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eSo this is the magic: the connection is not established between client and\nserver directly, but \u003cstrong\u003esplit into 2 separate connections\u003c/strong\u003e:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003econnection between client and sidecar\u003c/li\u003e\n  \u003cli\u003econnection between sidecar and server\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThose two connections are independently handshaked, thus even if the latter\nfailed, the former could still be succesful.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-handshake-in-modern-network-infra/2-3.png\" width=\"55%\" height=\"55%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 2.3 Actual view of the two sides: a middleman sits between client and server\u003c/p\u003e\n\n\u003cp\u003eThis is what exactly happened: server failed to start due to some internal\nerrors, but the connection between client and sidecar was established. When\nclient began to send data packets, sidecar first acked for receiving, then\nforwarded this to (the failed) server, and got rejected. It then realized that\nthe backend service was not available, so closed (RST) the connection between\nitself and the client.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-handshake-in-modern-network-infra/2-4.png\" width=\"55%\" height=\"55%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 2.4 Connection between sidecar and server not established\u003c/p\u003e\n\n\u003ch1 id=\"3-closing-remarks\"\u003e3. Closing Remarks\u003c/h1\u003e\n\n\u003cp\u003eIn modern days, the underlying network infrastructures are increasingly powerful\nand flexible, but comes at a price of deeper stack depth, and poses more\nchallenges on developers and maintainers for trouble shooting.  This inevitablly\nrequires more in-depth knowledge on the network infrastructures, virtualization\ntechnologies, kernel stack, etc.\u003c/p\u003e\n\n\u003ch1 id=\"4-appendix-a-istio-sidecar-interception\"\u003e4. Appendix A: Istio Sidecar Interception\u003c/h1\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-handshake-in-modern-network-infra/4-1.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. 4.1 Istio sidecar interception (inbound) with iptables rules\u003c/p\u003e\n\n\u003cp\u003eCorresponding iptables rules:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# get the Pod netns\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker inspect \u0026lt;Container ID or Name\u0026gt; | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003ePid\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\n            \u003cspan class=\"s2\"\u003e\u0026#34;Pid\u0026#34;\u003c/span\u003e: 82881,\n\n\u003cspan class=\"c\"\u003e# show iptables rules in Pod netns\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ensenter \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e 82881 \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e iptables \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e nat \u003cspan class=\"nt\"\u003e-nvL\u003c/span\u003e\nChain PREROUTING \u003cspan class=\"o\"\u003e(\u003c/span\u003epolicy ACCEPT 1725 packets, 104K bytes\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n pkts bytes target     prot opt \u003cspan class=\"k\"\u003ein     \u003c/span\u003eout     \u003cspan class=\"nb\"\u003esource               \u003c/span\u003edestination\n 2086  125K ISTIO_INBOUND  tcp  \u003cspan class=\"nt\"\u003e--\u003c/span\u003e  \u003cspan class=\"k\"\u003e*\u003c/span\u003e      \u003cspan class=\"k\"\u003e*\u003c/span\u003e       0.0.0.0/0            0.0.0.0/0\n\nChain INPUT \u003cspan class=\"o\"\u003e(\u003c/span\u003epolicy ACCEPT 2087 packets, 125K bytes\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n pkts bytes target     prot opt \u003cspan class=\"k\"\u003ein     \u003c/span\u003eout     \u003cspan class=\"nb\"\u003esource               \u003c/span\u003edestination\n\nChain OUTPUT \u003cspan class=\"o\"\u003e(\u003c/span\u003epolicy ACCEPT 465 packets, 29339 bytes\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n pkts bytes target     prot opt \u003cspan class=\"k\"\u003ein     \u003c/span\u003eout     \u003cspan class=\"nb\"\u003esource               \u003c/span\u003edestination\n  464 27840 ISTIO_OUTPUT  tcp  \u003cspan class=\"nt\"\u003e--\u003c/span\u003e  \u003cspan class=\"k\"\u003e*\u003c/span\u003e      \u003cspan class=\"k\"\u003e*\u003c/span\u003e       0.0.0.0/0            0.0.0.0/0\n\nChain POSTROUTING \u003cspan class=\"o\"\u003e(\u003c/span\u003epolicy ACCEPT 498 packets, 31319 bytes\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n pkts bytes target     prot opt \u003cspan class=\"k\"\u003ein     \u003c/span\u003eout     \u003cspan class=\"nb\"\u003esource               \u003c/span\u003edestination\n\nChain ISTIO_INBOUND \u003cspan class=\"o\"\u003e(\u003c/span\u003e1 references\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n pkts bytes target     prot opt \u003cspan class=\"k\"\u003ein     \u003c/span\u003eout     \u003cspan class=\"nb\"\u003esource               \u003c/span\u003edestination\n  362 21720 ISTIO_IN_REDIRECT  tcp  \u003cspan class=\"nt\"\u003e--\u003c/span\u003e  \u003cspan class=\"k\"\u003e*\u003c/span\u003e      \u003cspan class=\"k\"\u003e*\u003c/span\u003e       0.0.0.0/0            0.0.0.0/0            tcp dpt:8080\n\nChain ISTIO_IN_REDIRECT \u003cspan class=\"o\"\u003e(\u003c/span\u003e1 references\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n pkts bytes target     prot opt \u003cspan class=\"k\"\u003ein     \u003c/span\u003eout     \u003cspan class=\"nb\"\u003esource               \u003c/span\u003edestination\n  362 21720 REDIRECT   tcp  \u003cspan class=\"nt\"\u003e--\u003c/span\u003e  \u003cspan class=\"k\"\u003e*\u003c/span\u003e      \u003cspan class=\"k\"\u003e*\u003c/span\u003e       0.0.0.0/0            0.0.0.0/0            redir ports 15001\n\nChain ISTIO_OUTPUT \u003cspan class=\"o\"\u003e(\u003c/span\u003e1 references\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n pkts bytes target     prot opt \u003cspan class=\"k\"\u003ein     \u003c/span\u003eout     \u003cspan class=\"nb\"\u003esource               \u003c/span\u003edestination\n    0     0 ISTIO_REDIRECT  all  \u003cspan class=\"nt\"\u003e--\u003c/span\u003e  \u003cspan class=\"k\"\u003e*\u003c/span\u003e      lo      0.0.0.0/0           \u003cspan class=\"o\"\u003e!\u003c/span\u003e127.0.0.1\n  420 25200 RETURN     all  \u003cspan class=\"nt\"\u003e--\u003c/span\u003e  \u003cspan class=\"k\"\u003e*\u003c/span\u003e      \u003cspan class=\"k\"\u003e*\u003c/span\u003e       0.0.0.0/0            0.0.0.0/0            owner UID match 1337\n    0     0 RETURN     all  \u003cspan class=\"nt\"\u003e--\u003c/span\u003e  \u003cspan class=\"k\"\u003e*\u003c/span\u003e      \u003cspan class=\"k\"\u003e*\u003c/span\u003e       0.0.0.0/0            0.0.0.0/0            owner GID match 1337\n   11   660 RETURN     all  \u003cspan class=\"nt\"\u003e--\u003c/span\u003e  \u003cspan class=\"k\"\u003e*\u003c/span\u003e      \u003cspan class=\"k\"\u003e*\u003c/span\u003e       0.0.0.0/0            127.0.0.1\n   33  1980 ISTIO_REDIRECT  all  \u003cspan class=\"nt\"\u003e--\u003c/span\u003e  \u003cspan class=\"k\"\u003e*\u003c/span\u003e      \u003cspan class=\"k\"\u003e*\u003c/span\u003e       0.0.0.0/0            0.0.0.0/0\n\nChain ISTIO_REDIRECT \u003cspan class=\"o\"\u003e(\u003c/span\u003e2 references\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n pkts bytes target     prot opt \u003cspan class=\"k\"\u003ein     \u003c/span\u003eout     \u003cspan class=\"nb\"\u003esource               \u003c/span\u003edestination\n   33  1980 REDIRECT   tcp  \u003cspan class=\"nt\"\u003e--\u003c/span\u003e  \u003cspan class=\"k\"\u003e*\u003c/span\u003e      \u003cspan class=\"k\"\u003e*\u003c/span\u003e       0.0.0.0/0            0.0.0.0/0            redir ports 15001\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/cilium-bpf-xdp-reference-guide-2019-zh/\"\u003e\u003cspan\u003e« [译] Cilium：BPF 和 XDP 参考指南（2019）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/ovs-forwards-unknown-unicast/\"\u003e\u003cspan\u003eOVS balance-slb bond Forwards Unknown Unicast »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2019-10-11T00:00:00Z",
  "Author": "Arthur Chiao"
}