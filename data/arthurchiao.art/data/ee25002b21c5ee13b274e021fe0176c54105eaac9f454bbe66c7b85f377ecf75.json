{
  "Source": "arthurchiao.art",
  "Title": "[译] 400 行 C 代码实现一个虚拟机（2018）",
  "Link": "https://arthurchiao.art/blog/write-your-own-virtual-machine-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003e[译] 400 行 C 代码实现一个虚拟机（2018）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2019-10-16 | Last Update 2021-02-22\u003c/p\u003e\n  \n  \u003ch3 id=\"译者序\"\u003e译者序\u003c/h3\u003e\n\n\u003cp\u003e本文翻译自 2018 年的一篇英文博客 \u003ca href=\"https://justinmeiners.github.io/lc3-vm/\"\u003eWrite your Own Virtual Machine\u003c/a\u003e\n。文章介绍如何用 400 行左右的 C 代码实现一个虚拟机，该虚拟机能够运行标准\n的 LC-3 汇编程序。\u003c/p\u003e\n\n\u003cp\u003e不过要注意，本文所说的“虚拟机”是指 \u003cstrong\u003eJVM\u003c/strong\u003e 或者 \u003cstrong\u003eErlang Beam\u003c/strong\u003e 那种虚拟机（解释\n器），并不是 VirtualBox 或 VMWare 启动的那种有完整操作系统的虚拟机。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e由于译者水平有限，本文不免存在遗漏或错误之处。如有疑问，请查阅原文。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e以下是译文。\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#译者序\" id=\"markdown-toc-译者序\"\u003e译者序\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#1-引言\" id=\"markdown-toc-1-引言\"\u003e1. 引言\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#什么是虚拟机\" id=\"markdown-toc-什么是虚拟机\"\u003e什么是虚拟机？\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-lc-3-架构\" id=\"markdown-toc-2-lc-3-架构\"\u003e2. LC-3 架构\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-内存\" id=\"markdown-toc-21-内存\"\u003e2.1 内存\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-寄存器\" id=\"markdown-toc-22-寄存器\"\u003e2.2 寄存器\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-指令集\" id=\"markdown-toc-23-指令集\"\u003e2.3 指令集\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#24-条件标志位\" id=\"markdown-toc-24-条件标志位\"\u003e2.4 条件标志位\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-汇编示例\" id=\"markdown-toc-3-汇编示例\"\u003e3. 汇编示例\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-执行程序\" id=\"markdown-toc-4-执行程序\"\u003e4. 执行程序\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#过程procedure\" id=\"markdown-toc-过程procedure\"\u003e过程（Procedure）\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-指令实现\" id=\"markdown-toc-5-指令实现\"\u003e5. 指令实现\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#51-add\" id=\"markdown-toc-51-add\"\u003e5.1 ADD\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#52-ldi\" id=\"markdown-toc-52-ldi\"\u003e5.2 LDI\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#6-全部指令的参考实现\" id=\"markdown-toc-6-全部指令的参考实现\"\u003e6. 全部指令的参考实现\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#61-rti--res\" id=\"markdown-toc-61-rti--res\"\u003e6.1 RTI \u0026amp; RES\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#62-bitwise-and按位与\" id=\"markdown-toc-62-bitwise-and按位与\"\u003e6.2 Bitwise and（按位与）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#63-bitwise-not按位非\" id=\"markdown-toc-63-bitwise-not按位非\"\u003e6.3 Bitwise not（按位非）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#64-branch条件分支\" id=\"markdown-toc-64-branch条件分支\"\u003e6.4 Branch（条件分支）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#65-jump跳转\" id=\"markdown-toc-65-jump跳转\"\u003e6.5 Jump（跳转）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#66-jump-register跳转寄存器\" id=\"markdown-toc-66-jump-register跳转寄存器\"\u003e6.6 Jump Register（跳转寄存器）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#67-load加载\" id=\"markdown-toc-67-load加载\"\u003e6.7 Load（加载）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#68-load-register加载寄存器\" id=\"markdown-toc-68-load-register加载寄存器\"\u003e6.8 Load Register（加载寄存器）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#69-load-effective-address加载有效地址\" id=\"markdown-toc-69-load-effective-address加载有效地址\"\u003e6.9 Load Effective Address（加载有效地址）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#610-store存储\" id=\"markdown-toc-610-store存储\"\u003e6.10 Store（存储）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#611-store-indirect间接存储\" id=\"markdown-toc-611-store-indirect间接存储\"\u003e6.11 Store Indirect（间接存储）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#612-store-register存储寄存器\" id=\"markdown-toc-612-store-register存储寄存器\"\u003e6.12 Store Register（存储寄存器）\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#7-trap-routines中断陷入例程\" id=\"markdown-toc-7-trap-routines中断陷入例程\"\u003e7. Trap Routines（中断陷入例程）\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#71-puts\" id=\"markdown-toc-71-puts\"\u003e7.1 PUTS\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#8-trap-routine-参考实现\" id=\"markdown-toc-8-trap-routine-参考实现\"\u003e8. Trap Routine 参考实现\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#81-输入单个字符input-character\" id=\"markdown-toc-81-输入单个字符input-character\"\u003e8.1 输入单个字符（Input Character）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#82-输出单个字符output-character\" id=\"markdown-toc-82-输出单个字符output-character\"\u003e8.2 输出单个字符（Output Character）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#83-打印输入单个字符提示prompt-for-input-character\" id=\"markdown-toc-83-打印输入单个字符提示prompt-for-input-character\"\u003e8.3 打印输入单个字符提示（Prompt for Input Character）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#84-输出字符串output-string\" id=\"markdown-toc-84-输出字符串output-string\"\u003e8.4 输出字符串（Output String）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#85-暂停程序执行halt-program\" id=\"markdown-toc-85-暂停程序执行halt-program\"\u003e8.5 暂停程序执行（Halt Program）\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#9-加载程序\" id=\"markdown-toc-9-加载程序\"\u003e9. 加载程序\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#10-内存映射寄存器memory-mapped-registers\" id=\"markdown-toc-10-内存映射寄存器memory-mapped-registers\"\u003e10. 内存映射寄存器（Memory Mapped Registers）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#11-平台相关的细节\" id=\"markdown-toc-11-平台相关的细节\"\u003e11. 平台相关的细节\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#12-运行虚拟机\" id=\"markdown-toc-12-运行虚拟机\"\u003e12. 运行虚拟机\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#调试\" id=\"markdown-toc-调试\"\u003e调试\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#13-c-实现可选\" id=\"markdown-toc-13-c-实现可选\"\u003e13. C++ 实现（可选）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#14-其他语言实现\" id=\"markdown-toc-14-其他语言实现\"\u003e14. 其他语言实现\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"1-引言\"\u003e1. 引言\u003c/h1\u003e\n\n\u003cp\u003e本文将教你编写一个自己的虚拟机（VM），这个虚拟机能够运行汇编语言编写的程序，\n例如我朋友编写的 \u003ca href=\"https://github.com/rpendleton/lc3-2048\"\u003e2048\u003c/a\u003e 或者我自己的\n\u003ca href=\"https://github.com/justinmeiners/lc3-rogue\"\u003eRoguelike\u003c/a\u003e。如果你会编程，但希望\n\u003cstrong\u003e更深入地了解计算机的内部原理以及编程语言是如何工作的\u003c/strong\u003e，那本文很适合你。从零开始\n写一个虚拟机听起来可能让人有点望而生畏，但读完本文之后你会惊讶于这件事原来如此简\n单，并从中深受启发。\u003c/p\u003e\n\n\u003cp\u003e本文所说的虚拟机最终由 400 行左右 C 代码组成。理解这些代码只需要基本的 C/C++\n知识和二进制运算。这个虚拟机可以在 Unix 系统（包括 macOS）上执行。代码中包含少\n量平台相关的配置终端（terminal）和显示（display）的代码，但这些并不是本项目的核\n心。（欢迎大家添加对 Windows 的支持。）\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e注意：这个虚拟机是\u003ca href=\"https://en.wikipedia.org/wiki/Literate_programming\"\u003eLiterate Programming\u003c/a\u003e 的产物。\n本文会解释每段代码的原理，最终的实现就是将这些代码片段连起来。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"什么是虚拟机\"\u003e什么是虚拟机？\u003c/h2\u003e\n\n\u003cp\u003e虚拟机就像计算机（computer），它模拟包括 CPU 在内的几个硬件组件，能够执行\n算术运算、读写内存、与 I/O 设备交互。最重要的是，它能理解机器语言（machine\nlanguage），因此可以用相应的语言来对它进行编程。\u003c/p\u003e\n\n\u003cp\u003e一个虚拟机需要模拟哪些硬件要看它的使用场景。有些虚拟机是设计用来模拟特定类型的计算设备\n的，例如视频游戏模拟器。现在 NES 已经不常见了，但我们还是可以用 NES 硬件模拟器来玩\nNES 游戏。这些模拟器必须能\u003ca href=\"http://wiki.nesdev.com/w/index.php/Tricky-to-emulate_games\"\u003e忠实地\u003c/a\u003e\n重建每一个\u003ca href=\"http://wiki.nesdev.com/w/index.php/Emulator_tests\"\u003e细节\u003c/a\u003e，以及原硬件的每个主要组件。\u003c/p\u003e\n\n\u003cp\u003e另外一些虚拟机则完全是虚构的，而非用来模拟硬件。这类虚拟机的主要用途是使软件开发\n更容易。例如，要开发一个能运行在不同计算架构上的程序，你无需使用每种架构特定的汇\n编方言来实现一遍自己的程序，而只需要使用一个跨平台的虚拟机提供的汇编语言。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/write-your-own-virtual-machine-zh/no_vm.gif\" width=\"40%\" height=\"40%\"/\u003e\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/write-your-own-virtual-machine-zh/vm.gif\" width=\"40%\" height=\"40%\"/\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e注：编译器也解决了类似的跨平台问题，它将标准的高级语言编写的程序编译成能在不同\nCPU 架构上执行的程序。相比之下，虚拟机的跨平台方式是自己创建一个标准的 CPU 架\n构，然后在不同的物理设备上模拟这个 CPU 架构。编译器方式的优点是没有运行时开销\n（runtime overhead），但实现一个支持多平台的编译器是非常困难的，但实现一个虚拟\n机就简单多了。在实际中，人们会根据需求的不同混合使用虚拟机和编译器，因为二者工\n作在不同的层次。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Java_virtual_machine\"\u003eJava Virtual Machine (JVM)\u003c/a\u003e\n就是一个非常成功的例子。JVM 本身是一个中等大小、程序员完全能够看懂的程序，因此很\n容易将它移植到包括手机在内的上千种设备上。只要在设备上实现了 JVM，接下来任何\nJava、Kotlin 或 Clojure 程序都无需任何修改就可以直接运行在这个设备上。唯一的开销\n来自虚拟机自身以及机器之上的\n\u003ca href=\"https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/\"\u003e进一步抽象\u003c/a\u003e。\n大部分情况下，这完全是可以接受的。\u003c/p\u003e\n\n\u003cp\u003e虚拟机不必很大或者能适应各种场景，老式的\u003ca href=\"https://fabiensanglard.net/anotherWorld_code_review/\"\u003e视频游戏\n\u003c/a\u003e经常使用很小的虚拟机来提\n供简单的\u003ca href=\"https://sf2platinum.wordpress.com/page/1/\"\u003e脚本系统\u003c/a\u003e（scripting systems）。\u003c/p\u003e\n\n\u003cp\u003e虚拟机还适用于在一个安全的或隔离的环境中执行代码。一个例子就是垃圾回收（GC）。要\n在 C 或 C++ 之上实现一个自动垃圾回收机制\u003ca href=\"https://www.lua.org/pil/24.2.html\"\u003e并不容易\n\u003c/a\u003e，因为\u003cmark\u003e程序无法看到它自身的栈或变量\u003c/mark\u003e。\n但是，虚拟机是在它运行的程序“之外”的，因此它能够看到栈上所有的\u003ca href=\"https://en.wikipedia.org/wiki/Tracing_garbage_collection\"\u003e内存引用\n\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e另一个例子是\u003ca href=\"https://solidity.readthedocs.io/en/v0.4.24/introduction-to-smart-contracts.html\"\u003e\u003cmark\u003e以太坊智能合约\u003c/mark\u003e\n\u003c/a\u003e（Ethereum smart contracts）。\n智能合约是在区块链网络中被验证节点（validating node）执行的小段程序。这就要求\n人们在\u003cstrong\u003e无法提前审查这些由陌生人编写的代码\u003c/strong\u003e的情况下，直接他们的机器上执行这些代码。\n为避免合约执行一些恶意行为，智能合约将它们放到一个\n\u003ca href=\"http://ethdocs.org/en/latest/introduction/what-is-ethereum.html#ethereum-virtual-machine\"\u003e虚拟机\u003c/a\u003e\n内执行，这个虚拟机没有权限访问文件系统、网络、磁盘等等资源。以太坊也很好地展现了\n虚拟机的可移植性特性，因为以太坊节点可以运行在多种计算机和操作系统上。使用虚拟机\n使得智能合约的编写无需考虑将在什么平台运行。\u003c/p\u003e\n\n\u003ch1 id=\"2-lc-3-架构\"\u003e2. LC-3 架构\u003c/h1\u003e\n\n\u003cp\u003e我们的虚拟机将会模拟一个虚构的称为 \u003ca href=\"https://en.wikipedia.org/wiki/LC-3\"\u003eLC-3\u003c/a\u003e 的计算机。\nLC-3 在学校中比较流行，用于教学生如何用汇编编程。\u003ca href=\"http://ref.x86asm.net/coder64.html\"\u003e与 x86 相比\n\u003c/a\u003e，LC-3 的指令集更\n加简化，但现代 CPU 的主要思想其中都包括了。\u003c/p\u003e\n\n\u003cp\u003e我们首先需要模拟机器最基础的硬件组件，尝试来理解每个组件是做什么的，如果\n现在无法将这些组件拼成一张完整的图也不要着急。\u003c/p\u003e\n\n\u003ch2 id=\"21-内存\"\u003e2.1 内存\u003c/h2\u003e\n\n\u003cp\u003eLC-3 有 65,536 个内存位置（16 bit 无符号整形能寻址的最大值），每个位置可以存储一\n个 16-bit 的值。这意味着它总共可以存储 128KB 数据（64K * 2 Byte），比我们平时接触\n的计算机内存小多了！在我们的程序中，这个内存会以简单数组的形式存放数据：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* 65536 locations */\u003c/span\u003e\n\u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003ememory\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eUINT16_MAX\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"22-寄存器\"\u003e2.2 寄存器\u003c/h2\u003e\n\n\u003cp\u003e一个寄存器就是 CPU 上一个能够存储单个数据的槽（slot）。\u003cstrong\u003e\u003cmark\u003e寄存器就像是 CPU 的\n“工作台”（workbench）\u003c/mark\u003e\u003c/strong\u003e，\u003cstrong\u003eCPU 要对一段数据进行处理，必须先将数据放到某个寄存器中\u003c/strong\u003e。但\n因为寄存器的数量很少，因此在任意时刻只能有很少的数据加载到寄存器。计算机的解决办\n法是：首先将数据从内存加载到寄存器，然后将计算结果放到其他寄存器，最后将最终结果\n再写回内存。\u003c/p\u003e\n\n\u003cp\u003eLC-3 总共有 10 个寄存器，每个都是 16 比特。其中大部分都是通用目的寄存器，少数几\n个用于特定目的。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e8 个通用目的寄存器（R0-R7）\u003c/li\u003e\n  \u003cli\u003e1 个程序计数器（program counter, PC）寄存器\u003c/li\u003e\n  \u003cli\u003e1 个条件标志位（condition flags，COND）寄存器\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e通用目的寄存器可以用于执行任何程序计算。\u003cstrong\u003e程序计数器（PC）是一个无符号整数，表示内\n存中将要执行的下一条指令的地址\u003c/strong\u003e。条件标记寄存器记录前一次计算结果的正负符号。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eR_R0\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eR_R1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eR_R2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eR_R3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eR_R4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eR_R5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eR_R6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eR_R7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eR_PC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* program counter */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eR_COND\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eR_COUNT\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e和内存一样，我们也用数组来表示这些寄存器：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_COUNT\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"23-指令集\"\u003e2.3 指令集\u003c/h2\u003e\n\n\u003cp\u003e一条指令就是一条 CPU 命令，它告诉 CPU 执行什么任务，例如将两个数相加。一条指令包\n含两部分：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e操作码（opcode）：表示任务的类型\u003c/li\u003e\n  \u003cli\u003e执行任务所需的参数\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e每个操作码代表 CPU “知道”的一种任务。在 LC-3 中只有 16 个操作码。计算机能够完成\n的所有计算，都是这些简单指令组成的指令流。每条指令 16 比特长，其中最左边的 4 个\n比特存储的是操作码，其余的比特存储的是参数。\u003c/p\u003e\n\n\u003cp\u003e我们稍后会详细介绍每条指令是做什么的，现在先定义下面的这些操作码，确保它们\n是按如下顺序定义的，这样每条指令就可以获得正确的枚举值：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOP_BR\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* branch */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOP_ADD\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* add  */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOP_LD\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e     \u003cspan class=\"cm\"\u003e/* load */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOP_ST\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e     \u003cspan class=\"cm\"\u003e/* store */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOP_JSR\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* jump register */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOP_AND\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* bitwise and */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOP_LDR\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* load register */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOP_STR\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* store register */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOP_RTI\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* unused */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOP_NOT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* bitwise not */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOP_LDI\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* load indirect */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOP_STI\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* store indirect */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOP_JMP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* jump */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOP_RES\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* reserved (unused) */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOP_LEA\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* load effective address */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOP_TRAP\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* execute trap */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e注：Intel x86 架构有几百条指令，而其他的架构例如 ARM 和 LC-3 只有很少的指令\n。较小的指令集称为精简指令集（\u003ca href=\"https://en.wikipedia.org/wiki/Reduced_instruction_set_computer\"\u003eRISC\u003c/a\u003e），较大\n的指令集称为复杂指令集（\u003ca href=\"https://en.wikipedia.org/wiki/Complex_instruction_set_computer\"\u003eCISC\u003c/a\u003e）。更大\n的指令集本质上通常并没有提供新特性，只是使得编写\n汇编\u003ca href=\"https://cs.stanford.edu/people/eroberts/courses/soco/projects/risc/risccisc/\"\u003e更加方便\u003c/a\u003e\n。一条 CISC 指令能做的事情可能需要好几条 RISC 才能完成。但是，对设计和制造工程\n师来说，CISC 更加复杂和昂贵，设计和制造业更贵。包括这一点在内的一些权衡使得指\n令设计也在不断变化。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"24-条件标志位\"\u003e2.4 条件标志位\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eR_COND\u003c/code\u003e 寄存器存储条件标记，其中\u003cmark\u003e记录了最近一次计算的执行结果\u003c/mark\u003e。\n这使得程序可以完成诸如 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eif (x \u0026gt; 0) { ... }\u003c/code\u003e 之类的逻辑条件。\u003c/p\u003e\n\n\u003cp\u003e每个 CPU 都有很多条件标志位来表示不同的情形。LC-3 只使用 3 个条件标记位，用来\n表示前一次计算结果的符号：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eFL_POS\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* P */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eFL_ZRO\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* Z */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eFL_NEG\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* N */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e注：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026lt;\u0026lt;\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e\u0026gt;\u0026gt;\u003c/code\u003e 表示移位操作。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e至此，我们就完成了虚拟机的硬件组件的模拟。\u003c/p\u003e\n\n\u003ch1 id=\"3-汇编示例\"\u003e3. 汇编示例\u003c/h1\u003e\n\n\u003cp\u003e下面通过一个 LC-3 汇编程序先来感受一下这个虚拟机运行的是什么代码。这里无需知\n道如何编写汇编程序或者理解背后的工作原理，只是先直观感受一下。下面是 “Hello\nWorld” 例子：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-asm\"\u003e.ORIG x3000                        ; this is the address in memory where the program will be loaded\nLEA R0, HELLO_STR                  ; load the address of the HELLO_STR string into R0\nPUTs                               ; output the string pointed to by R0 to the console\nHALT                               ; halt the program\nHELLO_STR .STRINGZ \u0026#34;Hello World!\u0026#34;  ; store this string here in the program\n.END                               ; mark the end of the file\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e和 C 类似，这段程序从最上面开始，每次执行一条声明（statement）。但和 C 不同的是，\n这里没有作用域符号 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e{}\u003c/code\u003e 或者控制结构（例如 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eif\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewhile\u003c/code\u003e），仅仅是一个扁平的声\n明列表（a flat list of statements）。这样的程序更容易执行。\u003c/p\u003e\n\n\u003cp\u003e注意，其中一些声明中的名字和我们前面的定义的操作码（opcodes）是一样的。前面\n介绍到，每条指令都是 16 比特，但这里的汇编程序看起来每行的字符数都是不一样的。\n为什么会有这种不一致呢？\u003c/p\u003e\n\n\u003cp\u003e这是因为这些汇编声明都是以人类可读写的格式编写的，以纯文本的形式表示。一种称为\n\u003cstrong\u003e汇编器\u003c/strong\u003e（assembler）的工具会\u003cstrong\u003e将这些文本格式的指令转换成 16 比特的二进制指令，\n后者是虚拟机可以理解的\u003c/strong\u003e。这种二进制格式称为机器码（machine code），是虚拟机可以\n执行的格式，其本质上就是一个 16 比特指令组成的数组。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/write-your-own-virtual-machine-zh/assembler.gif\" width=\"35%\" height=\"35%\"/\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e注：虽然在开发中编译器（compiler）和汇编器（assembler）的角色是类似的，但二者\n是两个不同的工具。汇编器只是简单地将程序员编写的文本编码（encode）成二进制格式\n，将其中的符号替换成相应的二进制表示并打包到指令内。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e.ORIG\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e.STRINGZ\u003c/code\u003e 看起来像是指令，但其实不是\u003c/strong\u003e，它们称为\u003cmark\u003e汇编制导命令\u003c/mark\u003e\n（assembler directives），\u003cstrong\u003e可以生成一段代码或数据\u003c/strong\u003e。例如，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e.STRINGZ\u003c/code\u003e 会在它所在的\n位置插入一段字符串。\u003c/p\u003e\n\n\u003cp\u003e循环和条件判断是通过类似 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003egoto\u003c/code\u003e 的指令实现的。下面是一个如何计时到 10 的例子：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-asm\"\u003eAND R0, R0, 0                      ; clear R0\nLOOP                               ; label at the top of our loop\nADD R0, R0, 1                      ; add 1 to R0 and store back in R0\nADD R1, R0, -10                    ; subtract 10 from R0 and store back in R1\nBRn LOOP                           ; go back to LOOP if the result was negative\n... ; R0 is now 10!\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e注：本文不需要读者会编写汇编代码。但如果你感兴趣，你可以使用\n\u003ca href=\"http://highered.mheducation.com/sites/0072467509/student_view0/lc-3_simulator.html\"\u003eLC-3\u003c/a\u003e\n工具来编写和汇编你自己写的汇编程序。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch1 id=\"4-执行程序\"\u003e4. 执行程序\u003c/h1\u003e\n\n\u003cp\u003e前面的例子是给大家一个直观印象来理解虚拟机在做什么。实现一个虚拟机不必精通汇编编\n程，只要遵循正确的流程来读取和执行指令，任何 LC-3 程序都能够正确执行，不管这些程\n序有多么复杂。理论上，这样的虚拟机甚至可以运行一个浏览器或者 Linux 这样的操作系\n统。\u003c/p\u003e\n\n\u003cp\u003e如果深入地思考这个特性，你就会意识到这是一个\u003cmark\u003e在哲学上非常奇特的现象\u003c/mark\u003e：\n\u003cstrong\u003e程序能完成各种智能的事情，其中一些我们甚至都很难想象；但同时，所有这些程序最终都是用我们编\n写的这些少量指令来执行的！\u003c/strong\u003e\u003cmark\u003e我们既了解 —— 又不了解 —— 那些和程序执行相关的的事情\u003c/mark\u003e。图灵\n曾经讨探讨过这种令人惊叹的思想：\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“The view that machines cannot give rise to surprises is due, I believe, to a\nfallacy to which philosophers and mathematicians are particularly subject.\nThis is the assumption that as soon as a fact is presented to a mind all\nconsequences of that fact spring into the mind simultaneously with it. It is a\nvery useful assumption under many circumstances, but one too easily forgets\nthat it is false.” — \u003ca href=\"https://academic.oup.com/mind/article-pdf/LIX/236/433/9866119/433.pdf\"\u003eAlan M. Turing\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"过程procedure\"\u003e过程（Procedure）\u003c/h2\u003e\n\n\u003cp\u003e我们将编写的这个过程（procedure）描述如下：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e从 PC 寄存器指向的内存地址中加载一条指令\u003c/li\u003e\n  \u003cli\u003e递增 PC 寄存器\u003c/li\u003e\n  \u003cli\u003e查看指令中的 opcode 字段，判断指令类型\u003c/li\u003e\n  \u003cli\u003e根据指令类型和指令中所带的参数执行该指令\u003c/li\u003e\n  \u003cli\u003e跳转到步骤 1\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e你可能会有疑问：“如果这个循环不断递增 PC，而我们没有 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eif\u003c/code\u003e 或 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewhile\u003c/code\u003e，那程序不会\n很快运行到内存外吗？”答案是不会，我们前面提到过，有类似 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003egoto\u003c/code\u003e 的指令会通过修改\nPC 来改变执行流。\u003c/p\u003e\n\n\u003cp\u003e下面是以上流程的大致代码实现：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eargc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e[])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eLoad\u003c/span\u003e \u003cspan class=\"n\"\u003eArguments\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eSetup\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* set the PC to starting position */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ePC_START\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x3000\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* 0x3000 is the default */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_PC\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePC_START\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003erunning\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erunning\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emem_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_PC\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* FETCH */\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eOP_ADD\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eADD\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eOP_AND\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eAND\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eOP_NOT\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eNOT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eOP_BR\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eBR\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eOP_JMP\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eJMP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eOP_JSR\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eJSR\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eOP_LD\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eLD\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eOP_LDI\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eLDI\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eOP_LDR\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eLDR\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eOP_LEA\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eLEA\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eOP_ST\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eST\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eOP_STI\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eSTI\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eOP_STR\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eSTR\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eOP_TRAP\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eTRAP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eOP_RES\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eOP_RTI\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"nl\"\u003edefault:\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eBAD\u003c/span\u003e \u003cspan class=\"n\"\u003eOPCODE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eShutdown\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"5-指令实现\"\u003e5. 指令实现\u003c/h1\u003e\n\n\u003cp\u003e现在需要做的就是正确地实现每一条指令。每条指令的详细描述见 GitHub Repo 中附录的\n\u003ca href=\"https://justinmeiners.github.io/lc3-vm/supplies/lc3-isa.pdf\"\u003ePDF 文档\u003c/a\u003e。你需要\n照着文档的描述自己实现这些指令。这项工作做起来其实比听起来要容易。下面我会拿其中\n的两个作为例子来展示如何实现，其余的见下一章。\u003c/p\u003e\n\n\u003ch2 id=\"51-add\"\u003e5.1 ADD\u003c/h2\u003e\n\n\u003cp\u003eADD 指令将两个数相加，然后将结果存到一个寄存器中。关于这条指令的描述见 526 页。\nADD 指令的编码格式如下：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/write-your-own-virtual-machine-zh/add_layout.gif\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e这里给出了两张图是因为 ADD 指令有两种不同的“模式”。在解释模式之前，先来看看两张\n图的共同点：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e两者都是以 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0001\u003c/code\u003e 这 4 个比特开始的，这是 OP_ADD 的操作码（opcode）\u003c/li\u003e\n  \u003cli\u003e后面 3 个比特名为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDR\u003c/code\u003e（destination register），即目的寄存器，相加的结果会放到\n这里\u003c/li\u003e\n  \u003cli\u003e再后面 3 个比特是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSR1\u003c/code\u003e，这个寄存器存放了第一个将要相加的数字\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e至此，我们知道了相加的结果应该存到哪里，以及相加的第一个数字。只要再知道第二个数\n在哪里就可以执行加法操作了。从这里开始，这两者模式开始不同：注意第 5 比特\n，这个标志位表示的是操作模式是\u003cstrong\u003e立即模式\u003c/strong\u003e（immediate mode）还是\u003cstrong\u003e寄存器模式\u003c/strong\u003e\n（register mode）。在寄存器模式中，第二个数是存储在寄存器中的，和第一个数类似。\n这个寄存器称为 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSR2\u003c/code\u003e，保存在第 0-2 比特中。第 3 和 第 4 比特没用到。用汇编代码描\n述就是：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-asm\"\u003eADD R2 R0 R1 ; add the contents of R0 to R1 and store in R2.\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e在立即模式中，第二个数直接存储在指令中，而不是寄存器中。这种模式更加方便，因\n为程序不需要额外的指令来将数据从内存加载到寄存器，直接从指令中就可以拿到这个值。\n这种方式的限制是存储的数很小，不超过 2^5 = 32（无符号）。这种方式很适合对一个值\n进行递增。用汇编描述就是：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-asm\"\u003eADD R0 R0 1 ; add 1 to R0 and store back in R0\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e下面一段解释来自 LC-3 规范：\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eIf bit [5] is 0, the second source operand is obtained from SR2. If bit [5] is\n1, the second source operand is obtained by sign-extending the imm5 field to\n16 bits. In both cases, the second source operand is added to the contents of\nSR1 and the result stored in DR. (Pg. 526)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e这段解释也就是我们前面讨论的内容。但什么是 “sign-extending”（有符号扩展）？虽然立即\n模式中存储的值只有 5 比特，但这个值需要加到一个 16 比特的值上。因此，这些 5 比\n特的数需要扩展到 16 比特才能和另一个数相匹配。对于正数，我们可以在前面填充 0，\n填充之后值是不变的。但是，对于负数，这样填充会导致问题。例如， \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-1\u003c/code\u003e 的 5 比特表示\n是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e11111\u003c/code\u003e。如果我们用 0 填充，那填充之后的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0000 0000 0001 1111\u003c/code\u003e 等于 32！这种\n情况下就需要使用有符号扩展（ sign extension），对于正数填充 0，对负数填充 1。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"nf\"\u003esign_extend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ebit_count\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebit_count\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e|=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0xFFFF\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ebit_count\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e注：如果你如何用二进制表示负数感兴趣，可以查阅二进制补码（\u003ca href=\"https://en.wikipedia.org/wiki/Two%27s_complement\"\u003eTwo’s Complement\u003c/a\u003e）\n相关的内容。本文中只需要知道怎么进行有符号扩展就行了。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e规范中还有一句：\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eThe condition codes are set, based on whether the result is negative, zero, or\npositive. (Pg. 526)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e前面我们定义的那个条件标记枚举类型现在要派上用场了。每次有值写到寄存器时，我们\n需要更新这个标记，以标明这个值的符号。为了方便，我们用下面的函数来实现这个功能：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eupdate_flags\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_COND\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFL_ZRO\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* a 1 in the left-most bit indicates negative */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_COND\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFL_NEG\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_COND\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFL_POS\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e现在我们就可以实现 ADD 的逻辑了：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003er0\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x7\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* destination register (DR) */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003er1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x7\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* first operand (SR1) */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003eimm_flag\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* whether we are in immediate mode */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimm_flag\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003eimm5\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esign_extend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x1F\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eimm5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003er2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x7\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er2\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eupdate_flags\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e本节包含了大量信息，这里再总结一下：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eADD 接受两个值作为参数，并将计算结果写到一个寄存器中\u003c/li\u003e\n  \u003cli\u003e在寄存器模式中，第二个值存储在某个寄存器中\u003c/li\u003e\n  \u003cli\u003e在立即模式中，第二个值存储在指令最右边的 5 个比特中\u003c/li\u003e\n  \u003cli\u003e短于 16 比特的值需要执行有符号扩展\u003c/li\u003e\n  \u003cli\u003e每次指令修改了寄存器后，都需要更新条件标志位（condition flags）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e以上就是 ADD 的实现，你可能会觉得以这样的方式实现另外 15 个指令将会是一件非常繁\n琐的事情。好消息是，前面的这些函数基本都是可以重用的，因为另外 15 条指令中，大部\n分都会组合有符号扩展、不同的模式和更新条件标记等等。\u003c/p\u003e\n\n\u003ch2 id=\"52-ldi\"\u003e5.2 LDI\u003c/h2\u003e\n\n\u003cp\u003eLDI 是 load indirect 的缩写，用于从内存加载一个值到寄存器，规范见 532 页。\nLDI 的二进制格式如下：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/write-your-own-virtual-machine-zh/ldi_layout.gif\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e与 ADD 相比，LDI 只有一种模式，参数也更少。LDI 的操作码是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1010\u003c/code\u003e，对应 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOP_LDI\u003c/code\u003e\n枚举类型。和 ADD 类似，它包含一个 3 比特的 DR（destination register）寄存器，用\n于存放加载的值。剩余的比特组成 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePCoffset9\u003c/code\u003e 字段，这是该指令内嵌的一个立即值（\nimmediate value），和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eimm5\u003c/code\u003e 类似。由于这个指令是从内存加载值，因此我们可以猜测\n，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePCoffset9\u003c/code\u003e 是一个加载值的内存地址。LC-3 规范提供了更多细节：\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eAn address is computed by sign-extending bits [8:0] to 16 bits and adding this\nvalue to the incremented PC. What is stored in memory at this address is the\naddress of the data to be loaded into DR. (Pg. 532)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e和前面一样，我们需要将这个 9 比特的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePCoffset9\u003c/code\u003e 以有符号的方式扩展到 16 比特，但\n这次是将扩展之后的值加到当前的\u003cstrong\u003e程序计数器 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePC\u003c/code\u003e\u003c/strong\u003e（如果回头去看前面的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewhile\u003c/code\u003e 循\n环，就会发现这条指令加载之后 PC 就会递增）。相加得到的结果（也就是 PC 加完之后的\n值）表示一个内存地址，这个地址中存储的值表示另一个地址，后者中存储的是需要加载到\nDR 中的值。\u003c/p\u003e\n\n\u003cp\u003e这种方式听上去非常绕，但它确是不可或缺的。LD 指令只能加载 offset 是 9 位的地址，\n但整个内存是 16 位的。LDI 适用于加载那些远离当前 PC 的地址内的值，但要加载这\n些值，需要将这些最终地址存储在离 PC 较近的位置。可以将它想想成 C 中有一个局部变\n量，这变量是指向某些数据的指针：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// the value of far_data is an address\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// of course far_data itself (the location in memory containing the address) has an address\u003c/span\u003e\n\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003efar_data\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;apple\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// In memory it may be layed out like this:\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Address Label      Value\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// 0x123:  far_data = 0x456\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// ...\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// 0x456:  string   = \u0026#39;a\u0026#39;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// if PC was at 0x100\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LDI R0 0x023\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// would load \u0026#39;a\u0026#39; into R0\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e和 ADD 类似，将值放到 DR 之后需要更新条件标志位：\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eThe condition codes are set based on whether the value loaded is negative,\nzero, or positive. (Pg. 532)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e下面是我对 LDI 的实现（后面章节中会介绍 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emem_read\u003c/code\u003e）：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003er0\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x7\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* destination register (DR) */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003epc_offset\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esign_extend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x1ff\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* PCoffset 9*/\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* add pc_offset to the current PC, look at that memory location to get the final address */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emem_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emem_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_PC\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003epc_offset\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eupdate_flags\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e后面会看到，这些指令的实现中，大部分辅助功能函数都是可以复用的。\u003c/p\u003e\n\n\u003cp\u003e以上是两个例子，接下来就可以参考这两个例子实现其他的指令。注意本文中有两个指令是\n没有用到的：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOP_RTI\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOP_RES\u003c/code\u003e。你可以忽略这两个指令，如果执行到它们直接报错。\n将 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emain()\u003c/code\u003e 函数中未实现的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eswitch case\u003c/code\u003e 补全后，你的虚拟机主体就完成了！\u003c/p\u003e\n\n\u003ch1 id=\"6-全部指令的参考实现\"\u003e6. 全部指令的参考实现\u003c/h1\u003e\n\n\u003cp\u003e本节给出所有指令的实现。如果你自己的实现遇到问题，可以参考这里给出的版本。\u003c/p\u003e\n\n\u003ch2 id=\"61-rti--res\"\u003e6.1 RTI \u0026amp; RES\u003c/h2\u003e\n\n\u003cp\u003e这两个指令本文没用到。\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-asm\"\u003eabort();\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"62-bitwise-and按位与\"\u003e6.2 Bitwise and（按位与）\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-asm\"\u003e{\n    uint16_t r0 = (instr \u0026gt;\u0026gt; 9) \u0026amp; 0x7;\n    uint16_t r1 = (instr \u0026gt;\u0026gt; 6) \u0026amp; 0x7;\n    uint16_t imm_flag = (instr \u0026gt;\u0026gt; 5) \u0026amp; 0x1;\n\n    if (imm_flag) {\n        uint16_t imm5 = sign_extend(instr \u0026amp; 0x1F, 5);\n        reg[r0] = reg[r1] \u0026amp; imm5;\n    } else {\n        uint16_t r2 = instr \u0026amp; 0x7;\n        reg[r0] = reg[r1] \u0026amp; reg[r2];\n    }\n    update_flags(r0);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"63-bitwise-not按位非\"\u003e6.3 Bitwise not（按位非）\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-asm\"\u003e{\n    uint16_t r0 = (instr \u0026gt;\u0026gt; 9) \u0026amp; 0x7;\n    uint16_t r1 = (instr \u0026gt;\u0026gt; 6) \u0026amp; 0x7;\n\n    reg[r0] = ~reg[r1];\n    update_flags(r0);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"64-branch条件分支\"\u003e6.4 Branch（条件分支）\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-asm\"\u003e{\n    uint16_t pc_offset = sign_extend((instr) \u0026amp; 0x1ff, 9);\n    uint16_t cond_flag = (instr \u0026gt;\u0026gt; 9) \u0026amp; 0x7;\n    if (cond_flag \u0026amp; reg[R_COND]) {\n        reg[R_PC] += pc_offset;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"65-jump跳转\"\u003e6.5 Jump（跳转）\u003c/h2\u003e\n\n\u003cp\u003eRET 在规范中作为一个单独的指令列出，因为在汇编中它是一个独立的关键字。但是，RET\n本质上是 JMP 的一个特殊情况。当 R1 为 7 时会执行 RET。\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-asm\"\u003e{\n    /* Also handles RET */\n    uint16_t r1 = (instr \u0026gt;\u0026gt; 6) \u0026amp; 0x7;\n    reg[R_PC] = reg[r1];\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"66-jump-register跳转寄存器\"\u003e6.6 Jump Register（跳转寄存器）\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-asm\"\u003e{\n    uint16_t r1 = (instr \u0026gt;\u0026gt; 6) \u0026amp; 0x7;\n    uint16_t long_pc_offset = sign_extend(instr \u0026amp; 0x7ff, 11);\n    uint16_t long_flag = (instr \u0026gt;\u0026gt; 11) \u0026amp; 1;\n\n    reg[R_R7] = reg[R_PC];\n    if (long_flag) {\n        reg[R_PC] += long_pc_offset;  /* JSR */\n    } else {\n        reg[R_PC] = reg[r1]; /* JSRR */\n    }\n    break;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"67-load加载\"\u003e6.7 Load（加载）\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-asm\"\u003e{\n    uint16_t r0 = (instr \u0026gt;\u0026gt; 9) \u0026amp; 0x7;\n    uint16_t pc_offset = sign_extend(instr \u0026amp; 0x1ff, 9);\n    reg[r0] = mem_read(reg[R_PC] + pc_offset);\n    update_flags(r0);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"68-load-register加载寄存器\"\u003e6.8 Load Register（加载寄存器）\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-asm\"\u003e{\n    uint16_t r0 = (instr \u0026gt;\u0026gt; 9) \u0026amp; 0x7;\n    uint16_t r1 = (instr \u0026gt;\u0026gt; 6) \u0026amp; 0x7;\n    uint16_t offset = sign_extend(instr \u0026amp; 0x3F, 6);\n    reg[r0] = mem_read(reg[r1] + offset);\n    update_flags(r0);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"69-load-effective-address加载有效地址\"\u003e6.9 Load Effective Address（加载有效地址）\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-asm\"\u003e{\n    uint16_t r0 = (instr \u0026gt;\u0026gt; 9) \u0026amp; 0x7;\n    uint16_t pc_offset = sign_extend(instr \u0026amp; 0x1ff, 9);\n    reg[r0] = reg[R_PC] + pc_offset;\n    update_flags(r0);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"610-store存储\"\u003e6.10 Store（存储）\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-asm\"\u003e{\n    uint16_t r0 = (instr \u0026gt;\u0026gt; 9) \u0026amp; 0x7;\n    uint16_t pc_offset = sign_extend(instr \u0026amp; 0x1ff, 9);\n    mem_write(reg[R_PC] + pc_offset, reg[r0]);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"611-store-indirect间接存储\"\u003e6.11 Store Indirect（间接存储）\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-asm\"\u003e{\n    uint16_t r0 = (instr \u0026gt;\u0026gt; 9) \u0026amp; 0x7;\n    uint16_t pc_offset = sign_extend(instr \u0026amp; 0x1ff, 9);\n    mem_write(mem_read(reg[R_PC] + pc_offset), reg[r0]);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"612-store-register存储寄存器\"\u003e6.12 Store Register（存储寄存器）\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-asm\"\u003e{\n    uint16_t r0 = (instr \u0026gt;\u0026gt; 9) \u0026amp; 0x7;\n    uint16_t r1 = (instr \u0026gt;\u0026gt; 6) \u0026amp; 0x7;\n    uint16_t offset = sign_extend(instr \u0026amp; 0x3F, 6);\n    mem_write(reg[r1] + offset, reg[r0]);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch1 id=\"7-trap-routines中断陷入例程\"\u003e7. Trap Routines（中断陷入例程）\u003c/h1\u003e\n\n\u003cp\u003eLC-3 提供了几个预定于的函数（过程），用于执行常规任务以及与 I/O 设备交换，\n例如，用于从键盘接收输入的函数，在控制台上显示字符串的函数。这些都称为\ntrap routines，你可以将它们当做操作系统或者是 LC-3 的 API。\n每个 trap routine 都有一个对应的 trap code（中断号）。要执行一次捕获，\n需要用相应的 trap code 执行 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTRAP\u003c/code\u003e 指令。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/write-your-own-virtual-machine-zh/trap_layout.gif\" width=\"60%\" height=\"60%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e定义所有 trap code：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTRAP_GETC\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x20\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e  \u003cspan class=\"cm\"\u003e/* get character from keyboard, not echoed onto the terminal */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTRAP_OUT\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x21\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"cm\"\u003e/* output a character */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTRAP_PUTS\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x22\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e  \u003cspan class=\"cm\"\u003e/* output a word string */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTRAP_IN\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x23\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* get character from keyboard, echoed onto the terminal */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTRAP_PUTSP\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x24\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* output a byte string */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTRAP_HALT\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x25\u003c/span\u003e   \u003cspan class=\"cm\"\u003e/* halt the program */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e你可能会觉得奇怪：为什么 trap code 没有包含在指令编码中？这是因为\u003cstrong\u003e它们没有给\nLC-3 带来任何新功能，只是提供了一种方便地执行任务的方式\u003c/strong\u003e（和 C 中的系统函数类似\n）。在官方 LC-3 模拟器中，trap routines 是用\u003ca href=\"https://justinmeiners.github.io/lc3-vm/supplies/os.asm\"\u003e汇编实现\u003c/a\u003e的。\n\u003cstrong\u003e当调用到 trap code 时，PC 会移动到 code 对应的地址\u003c/strong\u003e。CPU 执行这个函数（\nprocedure）的指令流，函数结束后 PC 重置到 trap 调用之前的位置。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e注：这就是为什么程序从 0x3000 而不是 0x0 开始的原因。低地址空间是特意留出来\n给 trap routine 用的。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e规范只定义了 trap routine 的行为，并没有规定应该如何实现。在我们这个虚拟机中，\n将会用 C 实现。当触发某个 trap code 时，会调用一个相应的 C 函数。这个函数执行\n完成后，执行过程会返回到原来的指令流。\u003c/p\u003e\n\n\u003cp\u003e虽然 trap routine 可以用汇编实现，而且物理的 LC-3 计算机也确实是这样做的，但对虚\n拟机来说并不是非常合适。相比于实现自己的 primitive I/O routines，我们可以利用操\n作系统上已有的。这样可以使我们的虚拟机运行更良好，还简化了代码，提供了一个便于移\n植的高层抽象。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e注：从键盘获取输入就是一个例子。汇编版本使用一个循环来持续检查键盘有没有输入\n，这会消耗大量 CPU 而实际上没做多少事情！使用操作系统提供的某个合适的输入函\n数的话，程序可以在收到输入之前一直 sleep。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eTRAP 处理逻辑：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0xFF\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eTRAP_GETC\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eTRAP\u003c/span\u003e \u003cspan class=\"n\"\u003eGETC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eTRAP_OUT\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eTRAP\u003c/span\u003e \u003cspan class=\"n\"\u003eOUT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eTRAP_PUTS\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eTRAP\u003c/span\u003e \u003cspan class=\"n\"\u003ePUTS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eTRAP_IN\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eTRAP\u003c/span\u003e \u003cspan class=\"n\"\u003eIN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eTRAP_PUTSP\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eTRAP\u003c/span\u003e \u003cspan class=\"n\"\u003ePUTSP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eTRAP_HALT\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eTRAP\u003c/span\u003e \u003cspan class=\"n\"\u003eHALT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e和前面几节类似，我会拿一个 trap routine 作为例子展示如何实现，其他的留给读者自己\n完成。\u003c/p\u003e\n\n\u003ch2 id=\"71-puts\"\u003e7.1 PUTS\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePUT\u003c/code\u003e trap code 用于输出一个以空字符结尾的字符串（和 C 中的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eprintf\u003c/code\u003e 类似）。规\n范见 543 页。\u003c/p\u003e\n\n\u003cp\u003e显示一个字符串需要将这个字符串的地址放到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eR0\u003c/code\u003e 寄存器，然后触发 trap。规范中说：\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eWrite a string of ASCII characters to the console display. The characters are\ncontained in consecutive memory locations, one character per memory location,\nstarting with the address specified in R0. Writing terminates with the\noccurrence of x0000 in a memory location. (Pg. 543)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e意思是说字符串是存储在一个\u003cstrong\u003e连续的内存区域\u003c/strong\u003e。注意这里和 C 中的字符串有所不同：C\n中每个字符占用一个 byte；LC-3 中内存寻找是 16 位的，\u003cstrong\u003e每个字符都是 16 位\u003c/strong\u003e，占用\n两个 byte。因此要用 C 函数打印这些字符，需要将每个值先转换成 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003echar\u003c/code\u003e 类型再输出：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* one char per word */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ememory\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_R0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eputc\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efflush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这就是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePUTS\u003c/code\u003e trap routine 的实现了。如果熟悉 C 的话，这个函数应该很容易理解。现\n在你可以按照 LC-3 规范，自己动手实现其他的 trap routine 了。\u003c/p\u003e\n\n\u003ch1 id=\"8-trap-routine-参考实现\"\u003e8. Trap Routine 参考实现\u003c/h1\u003e\n\n\u003cp\u003e本节给出所有 trap routine 的一份参考实现。\u003c/p\u003e\n\n\u003ch2 id=\"81-输入单个字符input-character\"\u003e8.1 输入单个字符（Input Character）\u003c/h2\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/* read a single ASCII char */\u003c/span\u003e\n\u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_R0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003egetchar\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"82-输出单个字符output-character\"\u003e8.2 输出单个字符（Output Character）\u003c/h2\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eputc\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_R0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003efflush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"83-打印输入单个字符提示prompt-for-input-character\"\u003e8.3 打印输入单个字符提示（Prompt for Input Character）\u003c/h2\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Enter a character: \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetchar\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eputc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_R0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"84-输出字符串output-string\"\u003e8.4 输出字符串（Output String）\u003c/h2\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* one char per byte (two bytes per word) here we need to swap back to\n       big endian format */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ememory\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_R0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003echar1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0xFF\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eputc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echar1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003echar2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echar2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eputc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echar2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efflush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"85-暂停程序执行halt-program\"\u003e8.5 暂停程序执行（Halt Program）\u003c/h2\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eputs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;HALT\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003efflush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003erunning\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"9-加载程序\"\u003e9. 加载程序\u003c/h1\u003e\n\n\u003cp\u003e前面提到了从内存加载和执行指令，但\u003cstrong\u003e指令是如何进入内存的呢\u003c/strong\u003e？将汇编程序转换为\n机器码时，得到的是一个文件，其中包含一个指令流和相应的数据。只需要将这个文件的内\n容复制到内存就算完成加载了。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e程序的前 16 比特规定了这个程序在内存中的起始地址，这个地址称为 origin\u003c/strong\u003e。因此\n加载时应该首先读取这 16 比特，确定起始地址，然后才能依次读取和放置后面的指令及数\n据。\u003c/p\u003e\n\n\u003cp\u003e下面是将 LC-3 程序读到内存的代码：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eread_image_file\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eFILE\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003eorigin\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* the origin tells us where in memory to place the image */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efread\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eorigin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eorigin\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eorigin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eswap16\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eorigin\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* we know the maximum file size so we only need one fread */\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003emax_read\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eUINT16_MAX\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eorigin\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ememory\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eorigin\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003eread\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efread\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003emax_read\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* swap to little endian */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eswap16\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e注意读取前 16 比特之后，对这个值执行了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eswap16()\u003c/code\u003e。这是因为 LC-3 程序是大端\n（big-endian），但现在大部分计算机都是小端的（little-endian），因此需要做大小端\n转换。如果你是在某些\u003ca href=\"https://en.wikipedia.org/wiki/Power_Mac_G4_Cube\"\u003e特殊的机器\u003c/a\u003e\n（例如 \u003ca href=\"https://en.wikipedia.org/wiki/PowerPC#Endian_modes\"\u003ePPC\u003c/a\u003e）上运行，那就不\n需要这些转换了。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"nf\"\u003eswap16\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e注：大小端（\u003ca href=\"https://en.wikipedia.org/wiki/Endianness\"\u003eEndianness\u003c/a\u003e）是指对于\n一个整型数据，它的每个字节应该如何解释。在小端中，第一个字节是最低位，而在大端\n中刚好相反，第一个字节是最高位。据我所知，这个顺序完全是人为规定的。不同的公司\n做出的抉择不同，因此我们这些后来人只能针对大小端做一些特殊处理。要理解本文中大\n小端相关的内容，知道这些就足够了。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e我们再封装一下前面加载程序的函数，接受一个文件路径字符串作为参数，这样更加方便：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eread_image\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eimage_path\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eFILE\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003efile\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efopen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimage_path\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;rb\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eread_image_file\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"10-内存映射寄存器memory-mapped-registers\"\u003e10. 内存映射寄存器（Memory Mapped Registers）\u003c/h2\u003e\n\n\u003cp\u003e某些特殊类型的寄存器是无法从常规寄存器表（register table）中访问的。因此，\u003cstrong\u003e在内\n存中为这些寄存器预留了特殊的地址。要读写这些寄存器，只需要读写相应的内存地址\u003c/strong\u003e。\n这些称为 \u003cstrong\u003e内存映射寄存器\u003c/strong\u003e（MMR）。内存映射寄存器通常用于处理与特殊硬件的交互。\u003c/p\u003e\n\n\u003cp\u003eLC-3 有两个内存映射寄存器需要实现，分别是：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eKBSR\u003c/code\u003e：键盘状态寄存器（keyboard status register），表示是否有键按下\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eKBDR\u003c/code\u003e：键盘数据寄存器（keyboard data register），表示哪个键按下了\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e虽然可以用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGETC\u003c/code\u003e 来请求键盘输入，但这个 trap routine 会阻塞执行，知道从键盘获得\n了输入。KBSR 和 KBDR 使得我们可以\u003ca href=\"https://en.wikipedia.org/wiki/Polling_(computer_science)\"\u003e轮询\u003c/a\u003e设备的状态然后继续执\n行，因此程序不会阻塞。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eMR_KBSR\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0xFE00\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* keyboard status */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eMR_KBDR\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0xFE02\u003c/span\u003e  \u003cspan class=\"cm\"\u003e/* keyboard data */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e内存映射寄存器使内存访问稍微复杂了一些。这种情况下不能直接读写内存位置，而要使\n用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esetter\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003egetter\u003c/code\u003e 辅助函数。当获取输入时，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egetter\u003c/code\u003e 会检查键盘输入并更新两\n个寄存器（也就是相应的内存位置）。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003emem_write\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ememory\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"nf\"\u003emem_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaddress\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eMR_KBSR\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echeck_key\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ememory\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eMR_KBSR\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ememory\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eMR_KBDR\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetchar\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ememory\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eMR_KBSR\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ememory\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这就是我们的虚拟机的最后一部分了！只要你实现了前面提到的 trap routine 和指令，你\n的虚拟机就即将能够运行了！\u003c/p\u003e\n\n\u003ch2 id=\"11-平台相关的细节\"\u003e11. 平台相关的细节\u003c/h2\u003e\n\n\u003cp\u003e本节包含一些与键盘交互以及显示相关的代码。如果不感兴趣可以直接复制粘贴。\u003c/p\u003e\n\n\u003cp\u003e如果不是在 Unix 类系统上运行本程序，例如 Windows，那本节内容需要替换为相应的平台\n实现。\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"nf\"\u003echeck_key\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efd_set\u003c/span\u003e \u003cspan class=\"n\"\u003ereadfds\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eFD_ZERO\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ereadfds\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eFD_SET\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSTDIN_FILENO\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ereadfds\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etimeval\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etv_sec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etv_usec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eselect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ereadfds\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e下面是特定于 Unix 的设置终端输入的代码：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etermios\u003c/span\u003e \u003cspan class=\"n\"\u003eoriginal_tio\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003edisable_input_buffering\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etcgetattr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSTDIN_FILENO\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eoriginal_tio\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003etermios\u003c/span\u003e \u003cspan class=\"n\"\u003enew_tio\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eoriginal_tio\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enew_tio\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ec_lflag\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;=\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"n\"\u003eICANON\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"n\"\u003eECHO\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etcsetattr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSTDIN_FILENO\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTCSANOW\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003enew_tio\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003erestore_input_buffering\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etcsetattr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSTDIN_FILENO\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTCSANOW\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eoriginal_tio\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e当程序被中断时，我们需要将终端的设置恢复到默认：\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003ehandle_interrupt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003esignal\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erestore_input_buffering\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eexit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003esignal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehandle_interrupt\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003edisable_input_buffering\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"12-运行虚拟机\"\u003e12. 运行虚拟机\u003c/h1\u003e\n\n\u003cp\u003e现在你可以编译和运行这个 LC-3 虚拟机了！\u003c/p\u003e\n\n\u003cp\u003e使用你喜欢的 C 编译器编译这个虚拟机（\n\u003ca href=\"https://justinmeiners.github.io/lc3-vm/src/lc3.c\"\u003elc3.c\u003c/a\u003e 或排版更紧凑的\n\u003ca href=\"/assets/img/write-your-own-virtual-machine-zh/lc3-vm.c\"\u003elc3-vm.c\u003c/a\u003e），然后下载汇\n编之后的两个小游戏：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"/assets/img/write-your-own-virtual-machine-zh/2048.obj\"\u003e2048\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://justinmeiners.github.io/lc3-vm/supplies/rogue.obj\"\u003eRogue\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e用如下命令执行：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elc3-vm path/to/2048.obj\u003c/code\u003e。\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ePlay 2048!\n\u003cspan class=\"o\"\u003e{\u003c/span\u003e2048 Example 13\u003cspan class=\"o\"\u003e}\u003c/span\u003e\nControl the game using WASD keys.\nAre you on an ANSI terminal \u003cspan class=\"o\"\u003e(\u003c/span\u003ey/n\u003cspan class=\"o\"\u003e)\u003c/span\u003e? y\n+--------------------------+\n|                          |\n|                          |\n|                          |\n|                     2    |\n|                          |\n|   2                      |\n|                          |\n|                          |\n|                          |\n+--------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"调试\"\u003e调试\u003c/h2\u003e\n\n\u003cp\u003e如果程序不能正常工作，那可能是你的实现有问题。调试程序就有点麻烦了。我建议通读\nLC-3 程序的汇编源代码，然后使用一个调试器单步执行虚拟机指令，确保虚拟机执行到\n的指令是符合预期的。如果发现了不符合预期的行为，就需要重新查看 LC-3 规范，确认你\n的实现是否有问题。\u003c/p\u003e\n\n\u003ch1 id=\"13-c-实现可选\"\u003e13. C++ 实现（可选）\u003c/h1\u003e\n\n\u003cp\u003e使用 C++ 会使代码更简短。本节介绍 C++ 的一些实现技巧。\u003c/p\u003e\n\n\u003cp\u003eC++ 有强大的编译时泛型（compile-time generics）机制，可以帮我们自动生成部分指令\n的实现代码。这里的基本思想是重用每个指令的公共部分。例如，好几条指令都用到了间接\n寻址或有符号扩展然后加到当前寄存器的功能。模板如下：\u003c/p\u003e\n\n\u003cdiv class=\"language-cpp highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eInstruction\u003c/span\u003e \u003cspan class=\"n\"\u003eC\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eins\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003einstr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimm5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimm_flag\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003epc_plus_off\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebase_plus_off\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x4EEE\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003er0\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x7\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x12E3\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003er1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x7\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x0022\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003er2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x7\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimm_flag\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimm5\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esign_extend\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003einstr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x1F\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x00C0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// Base + offset\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ebase_plus_off\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003esign_extend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x3f\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x4C0D\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Indirect address\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epc_plus_off\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_PC\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003esign_extend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x1ff\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x0001\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// BR\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003econd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x7\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econd\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_COND\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_PC\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epc_plus_off\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x0002\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// ADD\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimm_flag\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eimm5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er2\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x0020\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// AND\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimm_flag\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eimm5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er2\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x0200\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// NOT\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x1000\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_PC\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// JMP\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x0010\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// JSR\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003elong_flag\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epc_plus_off\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_PC\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e  \u003cspan class=\"n\"\u003esign_extend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x7ff\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_R7\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_PC\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elong_flag\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_PC\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epc_plus_off\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eR_PC\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x0004\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emem_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epc_plus_off\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// LD\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x0400\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emem_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emem_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epc_plus_off\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// LDI\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x0040\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emem_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebase_plus_off\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// LDR\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x4000\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epc_plus_off\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// LEA\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x0008\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003emem_write\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epc_plus_off\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// ST\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x0800\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003emem_write\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emem_read\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epc_plus_off\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// STI\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x0080\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003emem_write\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebase_plus_off\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ereg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// STR\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x8000\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// TRAP\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eTRAP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//if (0x0100 \u0026amp; opbit) { } // RTI\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x4666\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eopbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003eupdate_flags\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eOp\u003c/span\u003e \u003cspan class=\"n\"\u003eTable\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eop_table\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e])(\u003c/span\u003e\u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eins\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eins\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eins\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eins\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eins\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eins\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eins\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eins\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eins\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eins\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eins\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eins\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eins\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eins\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e这里的技巧是从 \u003ca href=\"https://www.youtube.com/watch?v=QIUVSD3yqqE\"\u003eBisqwit’s NES emulator\u003c/a\u003e 学来的。如果你对仿真或\nNES 感兴趣，强烈建议观看他的视频。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e完整版 C++ 实现见 \u003ca href=\"https://justinmeiners.github.io/lc3-vm/src/lc3-alt.cpp\"\u003elc3-alt.cpp\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch1 id=\"14-其他语言实现\"\u003e14. 其他语言实现\u003c/h1\u003e\n\n\u003cp\u003e社区贡献的其他语言实现（链接见\u003ca href=\"https://justinmeiners.github.io/lc3-vm/\"\u003e原文\u003c/a\u003e）：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eC\u003c/li\u003e\n  \u003cli\u003eC++\u003c/li\u003e\n  \u003cli\u003eCommon Lisp\u003c/li\u003e\n  \u003cli\u003eGo\u003c/li\u003e\n  \u003cli\u003eHaskell\u003c/li\u003e\n  \u003cli\u003eJavaScript\u003c/li\u003e\n  \u003cli\u003ePython\u003c/li\u003e\n  \u003cli\u003eRacket\u003c/li\u003e\n  \u003cli\u003eRust\u003c/li\u003e\n  \u003cli\u003eSwift\u003c/li\u003e\n  \u003cli\u003eTypeScript\u003c/li\u003e\n\u003c/ul\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/ovs-unknown-unicast-flooding-under-distributed-gw/\"\u003e\u003cspan\u003e« OVS Unknown Unicast Flooding Under Distributed L2 Gateway\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/cilium-network-topology-on-aws/\"\u003e\u003cspan\u003eCilium Network Topology and Traffic Path on AWS »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2019-10-16T00:00:00Z",
  "Author": "Arthur Chiao"
}