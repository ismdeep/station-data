{
  "Source": "arthurchiao.art",
  "Title": "直观解读 JuiceFS 的数据和元数据设计（二）：看山不是山（2024）",
  "Link": "https://arthurchiao.art/blog/juicefs-data-metadata-design-illustrative-guide-2-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003e直观解读 JuiceFS 的数据和元数据设计（二）：看山不是山（2024）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2024-10-27 | Last Update 2024-10-27\u003c/p\u003e\n  \n  \u003cp\u003e本系列分为三篇文章，试图通过简单的实地环境来\u003cstrong\u003e\u003cmark\u003e直观理解\u003c/mark\u003e\u003c/strong\u003e JuiceFS\n的\u003cstrong\u003e\u003cmark\u003e数据（data）和元数据（metadata）\u003c/mark\u003e\u003c/strong\u003e设计。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/juicefs-data-metadata-design/juicefs-obj-naming.png\" width=\"100%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. JuiceFS object key naming and the objects in MinIO.\u003c/p\u003e\n\n\u003cp\u003e水平及维护精力所限，文中不免存在错误或过时之处，请酌情参考。\n\u003cstrong\u003e\u003cmark\u003e传播知识，尊重劳动，年满十八周岁，转载请注明\u003ca href=\"https://arthurchiao.art\"\u003e出处\u003c/a\u003e\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"/blog/juicefs-data-metadata-design-illustrative-guide-1-zh/\"\u003e直观解读 JuiceFS 的数据和元数据设计（一）：看山是山（2024）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/juicefs-data-metadata-design-illustrative-guide-2-zh/\"\u003e直观解读 JuiceFS 的数据和元数据设计（二）：看山不是山（2024）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/juicefs-data-metadata-design-illustrative-guide-3-zh/\"\u003e直观解读 JuiceFS 的数据和元数据设计（三）：看山还是山（2024）\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#1-引言\" id=\"markdown-toc-1-引言\"\u003e1 引言\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-对象存储中-juicefs-写入的文件\" id=\"markdown-toc-2-对象存储中-juicefs-写入的文件\"\u003e2 对象存储中 JuiceFS 写入的文件\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-bucket-内每个-volume-一个目录\" id=\"markdown-toc-11-bucket-内每个-volume-一个目录\"\u003e1.1 Bucket 内：每个 volume 一个“目录”\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-每个-volume-的目录-chunks-juicefs_uuid-meta-\" id=\"markdown-toc-22-每个-volume-的目录-chunks-juicefs_uuid-meta-\"\u003e2.2 每个 volume 的目录： \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e{chunks/, juicefs_uuid, meta/, ...}\u003c/code\u003e\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#221-juicefs_uuidjuicefs-volume-的唯一标识\" id=\"markdown-toc-221-juicefs_uuidjuicefs-volume-的唯一标识\"\u003e2.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejuicefs_uuid\u003c/code\u003e：JuiceFS volume 的唯一标识\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#222-metajuicefs-元数据备份\" id=\"markdown-toc-222-metajuicefs-元数据备份\"\u003e2.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emeta/\u003c/code\u003e：JuiceFS 元数据备份\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#223-chunks\" id=\"markdown-toc-223-chunks\"\u003e2.2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003echunks/\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-小结\" id=\"markdown-toc-23-小结\"\u003e2.3 小结\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-juicefs-数据的设计\" id=\"markdown-toc-3-juicefs-数据的设计\"\u003e3 JuiceFS \u003cmark\u003e数据\u003c/mark\u003e的设计\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-顶层切分一切文件先切-chunk\" id=\"markdown-toc-31-顶层切分一切文件先切-chunk\"\u003e3.1 顶层切分：一切文件先切 chunk\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#311-示意图\" id=\"markdown-toc-311-示意图\"\u003e3.1.1 示意图\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#312-对象存储不存在-chunk-实体\" id=\"markdown-toc-312-对象存储不存在-chunk-实体\"\u003e3.1.2 对象存储：不存在 chunk 实体\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-chunk-内的一次连续写入slice\" id=\"markdown-toc-32-chunk-内的一次连续写入slice\"\u003e3.2 Chunk 内的一次连续写入：Slice\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#321-slice-的重叠问题\" id=\"markdown-toc-321-slice-的重叠问题\"\u003e3.2.1 Slice 的重叠问题\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#322-读-chunk-数据时的多-slice-处理碎片化和碎片合并\" id=\"markdown-toc-322-读-chunk-数据时的多-slice-处理碎片化和碎片合并\"\u003e3.2.2 读 chunk 数据时的多 slice 处理：碎片化和碎片合并\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#323-对象存储不存在-slice-实体\" id=\"markdown-toc-323-对象存储不存在-slice-实体\"\u003e3.2.3 对象存储：不存在 slice 实体\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-slice-切分成固定大小-blockeg-4mb并发读写对象存储\" id=\"markdown-toc-33-slice-切分成固定大小-blockeg-4mb并发读写对象存储\"\u003e3.3 Slice 切分成固定大小 Block（e.g. 4MB）：并发读写对象存储\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-object-key-命名格式及代码\" id=\"markdown-toc-34-object-key-命名格式及代码\"\u003e3.4 object key 命名格式（及代码）\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#35-将-chunksliceblock-对应到对象存储\" id=\"markdown-toc-35-将-chunksliceblock-对应到对象存储\"\u003e3.5 将 chunk/slice/block 对应到对象存储\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#36-小结光靠对象存储数据和-sliceblock-信息无法还原文件\" id=\"markdown-toc-36-小结光靠对象存储数据和-sliceblock-信息无法还原文件\"\u003e3.6 小结：光靠对象存储数据和 slice/block 信息无法还原文件\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-juicefs-元数据的设计tkv-版\" id=\"markdown-toc-4-juicefs-元数据的设计tkv-版\"\u003e4 JuiceFS \u003cmark\u003e元数据\u003c/mark\u003e的设计（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTKV\u003c/code\u003e 版）\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#411-tkv-类型-key-列表\" id=\"markdown-toc-411-tkv-类型-key-列表\"\u003e4.1.1 TKV 类型 key 列表\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-元数据引擎中的-keyvalue\" id=\"markdown-toc-42-元数据引擎中的-keyvalue\"\u003e4.2 元数据引擎中的 key/value\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#421-扫描相关的-tikv-key\" id=\"markdown-toc-421-扫描相关的-tikv-key\"\u003e4.2.1 扫描相关的 TiKV key\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#422-解码成-juicefs-metadata-key\" id=\"markdown-toc-422-解码成-juicefs-metadata-key\"\u003e4.2.2 解码成 JuiceFS metadata key\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-总结\" id=\"markdown-toc-5-总结\"\u003e5 总结\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#参考资料\" id=\"markdown-toc-参考资料\"\u003e参考资料\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"1-引言\"\u003e1 引言\u003c/h1\u003e\n\n\u003cp\u003e上一篇从功能的角度体验了下 JuiceFS，这一篇我们深入到背后，看看 JuiceFS \n分别在数据和元数据上做了哪些设计，才给到用户和本地文件系统一样的体验的。\u003c/p\u003e\n\n\u003ch1 id=\"2-对象存储中-juicefs-写入的文件\"\u003e2 对象存储中 JuiceFS 写入的文件\u003c/h1\u003e\n\n\u003cp\u003e本篇以 MinIO 为例，来看 JuiceFS 写入到对象存储中的文件是怎样组织的。\n其他云厂商的对象存储（AWS S3、阿里云 OSS 等）也都是类似的。\u003c/p\u003e\n\n\u003ch2 id=\"11-bucket-内每个-volume-一个目录\"\u003e1.1 Bucket 内：每个 volume 一个“目录”\u003c/h2\u003e\n\n\u003cp\u003e可以用上一篇介绍的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejuicefs format\u003c/code\u003e 命令再创建两个 volume，方便观察它们在 bucket 中的组织关系，\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/juicefs-data-metadata-design/minio-bucket-volume-list.png\" width=\"100%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. MinIO bucket browser: \u003cmark\u003evolume list\u003c/mark\u003e.\u003c/p\u003e\n\n\u003cp\u003e如上图所示，bucket 内的\u003cstrong\u003e\u003cmark\u003e顶层“目录”就是 JuiceFS 的 volumes\u003c/mark\u003e\u003c/strong\u003e，\u003c/p\u003e\n\n\u003cp\u003e我们这里提到\u003cstrong\u003e\u003cmark\u003e“目录”\u003c/mark\u003e\u003c/strong\u003e时加双引号，是因为对象存储是扁平的 key-value 存储，\u003cstrong\u003e\u003cmark\u003e没有目录的概念\u003c/mark\u003e\u003c/strong\u003e，\n前端展示时\u003cstrong\u003e\u003cmark\u003e模拟出目录结构\u003c/mark\u003e\u003c/strong\u003e（key 前缀一样的，把这个前缀作为一个“目录”）是为了查看和理解方便。\n简单起见，后文不再加双引号。\u003c/p\u003e\n\n\u003ch2 id=\"22-每个-volume-的目录-chunks-juicefs_uuid-meta-\"\u003e2.2 每个 volume 的目录： \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e{chunks/, juicefs_uuid, meta/, ...}\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e每个 volume 目录内的结构如下：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e{volume_name}/\n  |-chunks/         # 数据目录，volume 中的所有用户数据都放在这里面\n  |-juicefs_uuid    \n  |-meta/           # `juicefs mount --backup-meta ...` 产生的元数据备份存放的目录\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"221-juicefs_uuidjuicefs-volume-的唯一标识\"\u003e2.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejuicefs_uuid\u003c/code\u003e：JuiceFS volume 的唯一标识\u003c/h3\u003e\n\n\u003cp\u003e可以把这个文件下载下来查看内容，会发现里面存放的就是 juicefs format 输出里看到的那个 uuid，\n也就是这个 volume 的唯一标识。\u003c/p\u003e\n\n\u003cp\u003e删除 volume 时需要用到这个 uuid。\u003c/p\u003e\n\n\u003ch3 id=\"222-metajuicefs-元数据备份\"\u003e2.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emeta/\u003c/code\u003e：JuiceFS 元数据备份\u003c/h3\u003e\n\n\u003cp\u003e如果在 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejuicefs mount\u003c/code\u003e 时指定了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--backup-meta\u003c/code\u003e，JuiceFS 就会定期把元数据（存在在 TiKV 中）备份到这个目录中，\n用途：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e元数据引擎故障时，可以从这里恢复；\u003c/li\u003e\n  \u003cli\u003e在不同元数据引擎之间迁移元数据。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e详见 \u003ca href=\"/blog/juicefs-metadata-deep-dive-5-zh/\"\u003eJuiceFS 元数据引擎五探：元数据备份与恢复（2024）\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"223-chunks\"\u003e2.2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003echunks/\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/juicefs-data-metadata-design/minio-juicefs-block-list.png\" width=\"100%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. MinIO bucket browser: \u003cmark\u003efiles in a bucket\u003c/mark\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003echunks/\u003c/code\u003e 内的目录结构如下，\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e{volume_name}/\n  |-chunks/\n  |   |-0/                # \u0026lt;-- id1 = slice_id / 1000 / 1000\n  |   |  |-0/             # \u0026lt;-- id2 = slice_id / 1000\n  |   |     |-1_0_16      # \u0026lt;-- {slice_id}_{block_id}_{size_of_this_block}\n  |   |     |-3_0_4194304 #\n  |   |     |-3_1_1048576 #\n  |   |     |-...\n  |-juicefs_uuid    \n  |-meta/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如上，所有的文件在 bucket 中都是用数字命名和存放的，分为三个层级：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e第一层级：纯数字，是 sliceID 除以 100 万得到的；\u003c/li\u003e\n  \u003cli\u003e第二层级：纯数字，是 sliceID 除以 1000 得到的；\u003c/li\u003e\n  \u003cli\u003e第三层级：纯数字加下划线，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e{slice_id}_{block_id}_{size_of_this_block}\u003c/code\u003e，表示的是这个 chunk 的这个 slice 内的 block_id 和 block 的大小。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e不理解 chunk/slice/block 这几个概念没关系，我们马上将要介绍。\u003c/p\u003e\n\n\u003ch2 id=\"23-小结\"\u003e2.3 小结\u003c/h2\u003e\n\n\u003cp\u003e通过以上 bucket 页面，我们非常直观地看到了\u003cstrong\u003e\u003cmark\u003e一个 JuiceFS volume 的所有数据在对象存储中是如何组织的\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e接下来进入正题，了解一下 JuiceFS 的数据和元数据设计。\u003c/p\u003e\n\n\u003ch1 id=\"3-juicefs-数据的设计\"\u003e3 JuiceFS \u003cmark\u003e数据\u003c/mark\u003e的设计\u003c/h1\u003e\n\n\u003ch2 id=\"31-顶层切分一切文件先切-chunk\"\u003e3.1 顶层切分：一切文件先切 chunk\u003c/h2\u003e\n\n\u003cp\u003e对于\u003cstrong\u003e\u003cmark\u003e每个文件\u003c/mark\u003e\u003c/strong\u003e，JuiceFS 首先会按\u003cstrong\u003e\u003cmark\u003e固定大小（64MB）切大块\u003c/mark\u003e\u003c/strong\u003e，\n这些大块称为「\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e」。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e这是为了读或修改文件内容时，\u003cstrong\u003e\u003cmark\u003e方便查找和定位\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n  \u003cli\u003e不管是一个\u003cstrong\u003e\u003cmark\u003e只有几字节的文本文件\u003c/mark\u003e\u003c/strong\u003e，还是一个\u003cstrong\u003e\u003cmark\u003e几十 GB 的视频文件\u003c/mark\u003e\u003c/strong\u003e，\n在 JuiceFS 中都是切分成 chunk，只是 chunk 的数量不同而已。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"311-示意图\"\u003e3.1.1 示意图\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/juicefs-data-metadata-design/file-to-chunk.png\" width=\"80%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. JuiceFS: split each file into their respective chunks (with max chunk size 64MB).\u003c/p\u003e\n\n\u003ch3 id=\"312-对象存储不存在-chunk-实体\"\u003e3.1.2 对象存储：不存在 chunk 实体\u003c/h3\u003e\n\n\u003cp\u003e结合上一节在对象存储中看到的目录结构，\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e{volume_name}/\n  |-chunks/\n  |   |-0/                # \u0026lt;-- id1 = slice_id / 1000 / 1000\n  |   |  |-0/             # \u0026lt;-- id2 = slice_id / 1000\n  |   |     |-1_0_16      # \u0026lt;-- {slice_id}_{block_id}_{size_of_this_block}\n  |   |     |-3_0_4194304 #\n  |   |     |-3_1_1048576 #\n  |   |     |-...\n  |-juicefs_uuid    \n  |-meta/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003col\u003e\n  \u003cli\u003eChunk 在对象存储中 \u003cstrong\u003e\u003cmark\u003e没有对应任何实际文件\u003c/mark\u003e\u003c/strong\u003e，也就是说在\u003cstrong\u003e\u003cmark\u003e对象存储中没有一个个 64MB 的 chunks\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n  \u003cli\u003e用 JuiceFS 的话来说，Chunk 是一个逻辑概念。暂时不理解没关系，接着往下看。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"32-chunk-内的一次连续写入slice\"\u003e3.2 Chunk 内的一次连续写入：Slice\u003c/h2\u003e\n\n\u003cp\u003echunk 只是一个“框”，在这个框里面对应\u003cstrong\u003e\u003cmark\u003e文件读写\u003c/mark\u003e\u003c/strong\u003e的，是 JuiceFS 称为「Slice」 的东西。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003echunk 内的\u003cstrong\u003e\u003cmark\u003e一次连续写入\u003c/mark\u003e\u003c/strong\u003e，会\u003cstrong\u003e\u003cmark\u003e创建一个 slice\u003c/mark\u003e\u003c/strong\u003e，对应这段连续写入的数据；\u003c/li\u003e\n  \u003cli\u003e由于 slice 是 chunk 内的概念，因此它不能跨 Chunk 边界，长度也不会超 max chunk size 64M。\u003c/li\u003e\n  \u003cli\u003eslice ID 是\u003cstrong\u003e\u003cmark\u003e全局唯一\u003c/mark\u003e\u003c/strong\u003e的；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"321-slice-的重叠问题\"\u003e3.2.1 Slice 的重叠问题\u003c/h3\u003e\n\n\u003cp\u003e根据写入行为的不同，一个 Chunk 内可能会有多个 Slice，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e如果文件是由一次\u003cstrong\u003e\u003cmark\u003e连贯的顺序\u003c/mark\u003e\u003c/strong\u003e写生成，那每个 Chunk \u003cstrong\u003e\u003cmark\u003e只包含一个 Slice\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n  \u003cli\u003e如果文件是\u003cstrong\u003e\u003cmark\u003e多次追加写\u003c/mark\u003e\u003c/strong\u003e，每次追加均调用 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eflush\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 触发写入上传，就会产生\u003cstrong\u003e\u003cmark\u003e多个 Slice\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/juicefs-data-metadata-design/chunks-to-slices.png\" width=\"50%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. JuiceFS: chunks are composed of slices, each slice corresponds to a continues write operation.\u003c/p\u003e\n\n\u003cp\u003e拿 chunk1 为例，\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e用户先写了一段 ~30MB 数据，产生 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eslice5\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n  \u003cli\u003e过了一会，从 ~20MB 的地方重新开始写 45MB（删掉了原文件的最后一小部分，然后开始追加写），\n    \u003cul\u003e\n      \u003cli\u003echunk1 内的部分产生 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eslice6\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n      \u003cli\u003e超出 chunk1 的部分，因为 slice 不能跨 chunk 边界，因此产生 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003echunk2\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 和 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eslice7\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e过了一会，从 chunk1 ~10MB 的地方开始修改（覆盖写），产生 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eslice8\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e由于 Slice 存在重叠，因此引入了几个字段标识它的有效数据范围，\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// pkg/meta/slice.go\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003eslice\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eid\u003c/span\u003e    \u003cspan class=\"kt\"\u003euint64\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esize\u003c/span\u003e  \u003cspan class=\"kt\"\u003euint32\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eoff\u003c/span\u003e   \u003cspan class=\"kt\"\u003euint32\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003elen\u003c/span\u003e   \u003cspan class=\"kt\"\u003euint32\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epos\u003c/span\u003e   \u003cspan class=\"kt\"\u003euint32\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eleft\u003c/span\u003e  \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eslice\u003c/span\u003e \u003cspan class=\"c\"\u003e// 这个字段不会存储到 TiKV 中\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eright\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eslice\u003c/span\u003e \u003cspan class=\"c\"\u003e// 这个字段不会存储到 TiKV 中\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"322-读-chunk-数据时的多-slice-处理碎片化和碎片合并\"\u003e3.2.2 读 chunk 数据时的多 slice 处理：碎片化和碎片合并\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/juicefs-data-metadata-design/chunks-to-slices.png\" width=\"50%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. JuiceFS: chunks are composed of slices, each slice corresponds to a continues write operation.\u003c/p\u003e\n\n\u003cp\u003e对 JuiceFS 用户来说，文件永远只有一个，但在 JuiceFS 内部，这个文件对应的 Chunk 可能会有多个重叠的 Slice，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e有重叠的部分，以最后一次写入的为准。\u003c/li\u003e\n  \u003cli\u003e直观上来说，就是上图 chunk 中的 slices 从\u003cstrong\u003e\u003cmark\u003e上往下看，被盖掉的部分都是无效的\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e因此，读文件时，需要查找「当前读取范围内最新写入的 Slice」，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e在大量重叠 Slice 的情况下，这会显著影响读性能，称为文件「碎片化」。\u003c/li\u003e\n  \u003cli\u003e碎片化不仅影响读性能，还会在对象存储、元数据等层面增加空间占用。\u003c/li\u003e\n  \u003cli\u003e每当写入发生时，客户端都会判断文件的碎片化情况，并异步地运行碎片合并，将一个 Chunk 内的所有 Slice 合并。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"323-对象存储不存在-slice-实体\"\u003e3.2.3 对象存储：不存在 slice 实体\u003c/h3\u003e\n\n\u003cp\u003e跟 chunk 类似，在对象存储中 slice 也没有 \u003cstrong\u003e\u003cmark\u003e没有对应实际文件\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e{volume_name}/\n  |-chunks/\n  |   |-0/                # \u0026lt;-- id1 = slice_id / 1000 / 1000\n  |   |  |-0/             # \u0026lt;-- id2 = slice_id / 1000\n  |   |     |-1_0_16      # \u0026lt;-- {slice_id}_{block_id}_{size_of_this_block}\n  |   |     |-3_0_4194304 #\n  |   |     |-3_1_1048576 #\n  |   |     |-...\n  |-juicefs_uuid    \n  |-meta/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"33-slice-切分成固定大小-blockeg-4mb并发读写对象存储\"\u003e3.3 Slice 切分成固定大小 Block（e.g. 4MB）：并发读写对象存储\u003c/h2\u003e\n\n\u003cp\u003e为了加速写到对象存储，JuiceFS 将 Slice 进一步拆分成一个个「Block」（默认 4MB），\u003cstrong\u003e\u003cmark\u003e多线程并发\u003c/mark\u003e\u003c/strong\u003e写入。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/juicefs-data-metadata-design/slices-to-blocks.png\" width=\"50%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. JuiceFS: slices are composed of blocks (4MB by default), each block is an object in object storage.\u003c/p\u003e\n\n\u003cp\u003eBlock 是 JuiceFS 数据切分设计中\u003cstrong\u003e\u003cmark\u003e最后一个层级\u003c/mark\u003e\u003c/strong\u003e，也是 chunk/slice/block\n三个层级中\u003cstrong\u003e\u003cmark\u003e唯一能在 bucket 中看到对应文件的\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/juicefs-data-metadata-design/minio-juicefs-block-list.png\" width=\"100%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. MinIO bucket browser: \u003cmark\u003eobjects in a bucket\u003c/mark\u003e.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e连续写\u003c/mark\u003e\u003c/strong\u003e：前面 Block 默认都是 4MB，最后一个 Block 剩多少是多少。\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e追加写\u003c/mark\u003e\u003c/strong\u003e：数据不足 4MB 时，最终存入对象存储的也会是一个小于 4M 的 Block。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e从上图的名字和大小其实可以看出分别对应我们哪个文件：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1_0_16\u003c/code\u003e：对应我们的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efile1_1KB\u003c/code\u003e；\n    \u003cul\u003e\n      \u003cli\u003e我们上一篇的的\u003cstrong\u003e\u003cmark\u003e追加写\u003c/mark\u003e\u003c/strong\u003e \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eecho \u0026#34;hello\u0026#34; \u0026gt;\u0026gt; file1_1KB\u003c/code\u003e 并不是写入了 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1_0_16\u003c/code\u003e，\n而是\u003cstrong\u003e\u003cmark\u003e创建了一个新对象\u003c/mark\u003e\u003c/strong\u003e \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e7_0_16\u003c/code\u003e，这个 object list 最后面，所以在截图中没显示出来；\u003c/li\u003e\n      \u003cli\u003e换句话说，我们的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efile1_1KB\u003c/code\u003e \u003cstrong\u003e\u003cmark\u003e虽然只有两行内容，但在 MinIO 中对应的却是两个 object\u003c/mark\u003e\u003c/strong\u003e，各包含一行。\u003c/li\u003e\n      \u003cli\u003e通过这个例子，大家可以体会到 JuiceFS 中\u003cstrong\u003e\u003cmark\u003e连续写和追加写的巨大区别\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3_0_4194304\u003c/code\u003e + \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3_1_1048576\u003c/code\u003e：总共 5MB，对应我们的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efile2_5MB\u003c/code\u003e；\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e4_*\u003c/code\u003e：对应我们的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efile3_129MB\u003c/code\u003e；\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"34-object-key-命名格式及代码\"\u003e3.4 object key 命名格式（及代码）\u003c/h2\u003e\n\n\u003cp\u003e格式：\u003ccode\u003e{volume}/chunks/\u003cmark\u003e{id1}/{id2}/{slice_id}_{block_id}_{size_of_this_block}\u003c/mark\u003e\u003c/code\u003e，对应的代码，\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// pkg/chunk/cached_store.go\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erSlice\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblockID\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estore\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eHashPrefix\u003c/span\u003e  \u003cspan class=\"c\"\u003e// false by default\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;chunks/%02X/%v/%v_%v_%v\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"o\"\u003e%\u003c/span\u003e\u003cspan class=\"m\"\u003e256\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"m\"\u003e1000\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"m\"\u003e1000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eblockID\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblockSize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblockID\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;chunks/%v/%v/%v_%v_%v\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"m\"\u003e1000\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"m\"\u003e1000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"m\"\u003e1000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eblockID\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblockSize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblockID\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"35-将-chunksliceblock-对应到对象存储\"\u003e3.5 将 chunk/slice/block 对应到对象存储\u003c/h2\u003e\n\n\u003cp\u003e最后，我们将 volume 的数据切分和组织方式对应到 MinIO 中的路径和 objects，\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/juicefs-data-metadata-design/juicefs-obj-naming.png\" width=\"100%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. JuiceFS object key naming and the objects in MinIO.\u003c/p\u003e\n\n\u003ch2 id=\"36-小结光靠对象存储数据和-sliceblock-信息无法还原文件\"\u003e3.6 小结：光靠对象存储数据和 slice/block 信息无法还原文件\u003c/h2\u003e\n\n\u003cp\u003e至此，JuiceFS 解决了数据如何切分和存放的问题，这是一个\u003cstrong\u003e\u003cmark\u003e正向的过程\u003c/mark\u003e\u003c/strong\u003e：用户创建一个文件，我们能按这个格式切分、命名、上传到对象存储。\u003c/p\u003e\n\n\u003cp\u003e对应的反向过程是：\u003cstrong\u003e\u003cmark\u003e给定对象存储中的 objects，我们如何将其还原成用户的文件呢\u003c/mark\u003e\u003c/strong\u003e？\n显然，光靠 objects 名字中包含的 slice/block ID 信息是不够的，例如，\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e最简单情况下，每个 chunk 都没有任何 slice 重叠问题，那我们能够根据 object 名字中的 slice_id/block_id/block_size 信息拼凑出一个文件，\n  但仍然无法知道这个文件的\u003cstrong\u003e\u003cmark\u003e文件名\u003c/mark\u003e\u003c/strong\u003e、路径（父目录）、文件权限（rwx）等等信息；\u003c/li\u003e\n  \u003cli\u003echunk 一旦存在 slice 重叠，光靠对象存储中的信息就无法还原文件了；\u003c/li\u003e\n  \u003cli\u003e软链接、硬链接、文件属性等信息，更是无法从对象存储中还原。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e解决这个反向过程，我们就需要文件的一些元数据作为辅助 —— 这些信息在文件切分和写入对象存储之前，已经记录到 JuiceFS 的元数据引擎中了。\u003c/p\u003e\n\n\u003ch1 id=\"4-juicefs-元数据的设计tkv-版\"\u003e4 JuiceFS \u003cmark\u003e元数据\u003c/mark\u003e的设计（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eTKV\u003c/code\u003e 版）\u003c/h1\u003e\n\n\u003cp\u003eJuiceFS 支持不同类型的元数据引擎，例如 Redis、MySQL、TiKV/etcd 等等，每种类型的元数据引擎都有自己的 key 命名规则。\n本文讨论的是 JuiceFS 使用 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003etransactional key-value\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e（TKV）类型的元数据引擎时的 key 命名规则。\u003c/p\u003e\n\n\u003cp\u003e更具体地，我们将拿 TiKV 作为元数据引擎来研究。\u003c/p\u003e\n\n\u003ch2 id=\"411-tkv-类型-key-列表\"\u003e4.1.1 TKV 类型 key 列表\u003c/h2\u003e\n\n\u003cp\u003e这里的 key 是 JuiceFS 定义元数据 key，\u003cstrong\u003e\u003cmark\u003ekey/value 写入元数据引擎\u003c/mark\u003e\u003c/strong\u003e；\n请注意跟前面提到的对象存储 key 区别开，那个 \u003cstrong\u003e\u003cmark\u003ekey/value 是写入对象存储的\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003ekey 是一个字符串，所有 key 的列表，\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e// pkg/meta/tkv.go\n\n  setting                           format\n  C{name}                           counter\n  A{8byte-inode}I                   inode attribute\n  A{8byte-inode}D{name}             dentry\n  A{8byte-inode}P{8byte-inode}      parents // for hard links\n  A{8byte-inode}C{4byte-blockID}    file chunks\n  A{8byte-inode}S                   symlink target\n  A{8byte-inode}X{name}             extented attribute\n  D{8byte-inode}{8byte-length}      deleted inodes\n  F{8byte-inode}                    Flocks\n  P{8byte-inode}                    POSIX locks\n  K{8byte-sliceID}{8byte-blockID}   slice refs\n  Ltttttttt{8byte-sliceID}          delayed slices\n  SE{8byte-sessionID}               session expire time\n  SH{8byte-sessionID}               session heartbeat // for legacy client\n  SI{8byte-sessionID}               session info\n  SS{8byte-sessionID}{8byte-inode}  sustained inode\n  U{8byte-inode}                    usage of data length, space and inodes in directory\n  N{8byte-inode}                    detached inde\n  QD{8byte-inode}                   directory quota\n  R{4byte-aclID}                    POSIX acl\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在 TKV 的 Keys 中，所有整数都以编码后的二进制形式存储 [2]：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003einode 和 counter value 占 8 个字节，使用小端编码\u003c/li\u003e\n  \u003cli\u003eSessionID、sliceID 和 timestamp 占 8 个字节，使用大端编码\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003esetting\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 是一个特殊的 key，对应的 value 就是这个 volume 的设置信息。\n前面的 JuiceFS 元数据引擎系列文章中介绍过 [3]，这里不再赘述。\u003c/p\u003e\n\n\u003cp\u003e其他的，每个 key 的首字母可以快速区分 key 的类型，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eC：\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ec\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003eounter，这里面又包含很多种类，例如 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ename\u003c/code\u003e 可以是：\n    \u003cul\u003e\n      \u003cli\u003enextChunk\u003c/li\u003e\n      \u003cli\u003enextInode\u003c/li\u003e\n      \u003cli\u003enextSession\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003eA：inode \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ea\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003ettribute\u003c/li\u003e\n  \u003cli\u003eD：\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ed\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003eeleted inodes\u003c/li\u003e\n  \u003cli\u003eF：\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eF\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003elocks\u003c/li\u003e\n  \u003cli\u003eP：\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eP\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003eOSIX lock\u003c/li\u003e\n  \u003cli\u003eS：\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003es\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003eession related\u003c/li\u003e\n  \u003cli\u003eK：slice ref\u003c/li\u003e\n  \u003cli\u003eL: delayed (to be deleted?) slices\u003c/li\u003e\n  \u003cli\u003eU：\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eu\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003esage of data length, space and inodes in directory\u003c/li\u003e\n  \u003cli\u003eN：detached inode\u003c/li\u003e\n  \u003cli\u003eQD：\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ed\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003eirectory \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eq\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003euota\u003c/li\u003e\n  \u003cli\u003eR：POSIX acl\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e需要注意的是，这里是 JuiceFS 定义的 key 格式，在实际将 key/value 写入元数据引擎时，\n\u003cstrong\u003e\u003cmark\u003e元数据引擎可能会对 key 再次进行编码\u003c/mark\u003e\u003c/strong\u003e，例如 TiKV 就会在 key 中再插入一些自己的字符。\n前面的 JuiceFS 元数据引擎系列文章中也介绍过，这里不再赘述。\u003c/p\u003e\n\n\u003ch2 id=\"42-元数据引擎中的-keyvalue\"\u003e4.2 元数据引擎中的 key/value\u003c/h2\u003e\n\n\u003ch3 id=\"421-扫描相关的-tikv-key\"\u003e4.2.1 扫描相关的 TiKV key\u003c/h3\u003e\n\n\u003cp\u003eTiKV 的 scan 操作类似 etcd 的 list prefix，这里扫描所有 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efoo-dev\u003c/code\u003e volume 相关的 key，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./tikv-ctl.sh scan \u003cspan class=\"nt\"\u003e--from\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;zfoo-dev\u0026#39;\u003c/span\u003e \u003cspan class=\"nt\"\u003e--to\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;zfoo-dew\u0026#39;\u003c/span\u003e\nkey: zfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e77A\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e20\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e77\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e77\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e77\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e77\u003cspan class=\"se\"\u003e\\1\u003c/span\u003e77I\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e71\nkey: zfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e77A\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e01\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e77\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00Dfile1_\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e771KB\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e72\nkey: zfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e77A\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e01\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e77\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00Dfile2_\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e775MB\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e72\n...\nkey: zfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e77SI\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e77\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e01\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e71\n        default cf value: start_ts: 453485726123950084 value: 7B225665727369...33537387D\nkey: zfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e77U\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e01\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e77\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e70\nkey: zfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e77setting\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e76\n        default cf value: start_ts: 453485722598113282 value: 7B0A224E616D65223A202266...0A7D\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"422-解码成-juicefs-metadata-key\"\u003e4.2.2 解码成 JuiceFS metadata key\u003c/h3\u003e\n\n\u003cp\u003e用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etikv-ctl --decode \u0026lt;key\u0026gt;\u003c/code\u003e 可以解码出来，注意去掉最前面的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ez\u003c/code\u003e，得到的就是\n\u003cstrong\u003e\u003cmark\u003eJuiceFS 的原始 key\u003c/mark\u003e\u003c/strong\u003e，看着会更清楚一点，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003efoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75A\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e20\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e77\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e77\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e77\u003cspan class=\"se\"\u003e\\1\u003c/span\u003e77I\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75A\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e01\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00Dfile1_1KB\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75A\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e01\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00Dfile2_5MB\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75A\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e01\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00Dfile3_129MB\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75A\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e01\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00I\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75A\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e02\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00C\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75A\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e02\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00I\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75A\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e03\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00C\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75A\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e03\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00I\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75A\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e04\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00C\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75A\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e04\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00C\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e01\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75A\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e04\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00C\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e02\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75A\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e04\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00I\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75ClastCleanupFiles\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75ClastCleanupSessions\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75ClastCleanupTrash\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75CnextChunk\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75CnextCleanupSlices\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75CnextInode\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75CnextSession\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75CtotalInodes\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75CusedSpace\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75SE\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e01\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75SI\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e01\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75U\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e01\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\u003cspan class=\"se\"\u003e\\0\u003c/span\u003e00\nfoo-dev\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e75setting\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e从上面的 keys，可以看到我们创建的\u003cstrong\u003e\u003cmark\u003e三个文件的元信息\u003c/mark\u003e\u003c/strong\u003e了，\n这里面是用 slice_id 等信息关联的，所以\u003cstrong\u003e\u003cmark\u003e能和对象存储里的数据 block 关联上\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e可以基于上一节的 key 编码规则进一步解码，得到更具体的 sliceID/inode 等等信息，这里我们暂时就不展开了。\u003c/p\u003e\n\n\u003ch1 id=\"5-总结\"\u003e5 总结\u003c/h1\u003e\n\n\u003cp\u003e这一篇我们深入到 JuiceFS 内部，从\u003cstrong\u003e\u003cmark\u003e数据和元数据存储中的东西\u003c/mark\u003e\u003c/strong\u003e来\n\u003cstrong\u003e\u003cmark\u003e反观 JuiceFS 切分数据和记录元数据的设计\u003c/mark\u003e\u003c/strong\u003e。\n站在这个层次看，已经跟前一篇的理解程度全然不同。\u003c/p\u003e\n\n\u003cp\u003e如果说第一篇是“见自己”（功能如所见），这第二篇就是“见天（元数据引擎）地（对象存储）”，\n那必然还得有一篇“见众生”。\u003c/p\u003e\n\n\u003ch1 id=\"参考资料\"\u003e参考资料\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003e官方文档：\u003ca href=\"https://juicefs.com/docs/zh/community/architecture/#how-juicefs-store-files\"\u003eJuiceFS 如何存储文件\u003c/a\u003e, juicefs.com\u003c/li\u003e\n  \u003cli\u003e官方文档：\u003ca href=\"https://juicefs.com/docs/zh/community/internals\"\u003eJuiceFS 开发：内部实现\u003c/a\u003e, juicefs.com\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/juicefs-metadata-deep-dive-1-zh/\"\u003eJuiceFS 元数据引擎初探：高层架构、引擎选型、读写工作流（2024）\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003chr/\u003e\n\n\u003cp\u003e\u003ca href=\"https://notbyai.fyi\"\u003e\u003cimg src=\"/assets/img/Written-By-Human-Not-By-AI-Badge-white.svg\" alt=\"Written by Human, Not by AI\"/\u003e\u003c/a\u003e\n\u003ca href=\"https://notbyai.fyi\"\u003e\u003cimg src=\"/assets/img/Written-By-Human-Not-By-AI-Badge-black.svg\" alt=\"Written by Human, Not by AI\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/juicefs-data-metadata-design-illustrative-guide-1-zh/\"\u003e\u003cspan\u003e« 直观解读 JuiceFS 的数据和元数据设计（一）：看山是山（2024）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/juicefs-data-metadata-design-illustrative-guide-3-zh/\"\u003e\u003cspan\u003e直观解读 JuiceFS 的数据和元数据设计（三）：看山还是山（2024） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2024-10-27T00:00:00Z",
  "Author": "Arthur Chiao"
}