{
  "Source": "arthurchiao.art",
  "Title": "K8s 调度框架设计与 scheduler plugins 开发部署示例（2024）",
  "Link": "https://arthurchiao.art/blog/k8s-scheduling-plugins-zh/",
  "Content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eK8s 调度框架设计与 scheduler plugins 开发部署示例（2024）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2024-02-25 | Last Update 2024-02-25\u003c/p\u003e\n  \n  \u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#1-引言\" id=\"markdown-toc-1-引言\"\u003e1 引言\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-调度框架sceduling-framework扩展点\" id=\"markdown-toc-11-调度框架sceduling-framework扩展点\"\u003e1.1 调度框架（sceduling framework）扩展点\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#111-影响调度决策的扩展点\" id=\"markdown-toc-111-影响调度决策的扩展点\"\u003e1.1.1 影响调度决策的扩展点\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#112-不影响调度决策的扩展点informational\" id=\"markdown-toc-112-不影响调度决策的扩展点informational\"\u003e1.1.2 不影响调度决策的扩展点（informational）\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-调度插件分类\" id=\"markdown-toc-12-调度插件分类\"\u003e1.2 调度插件分类\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#121-in-tree-plugins\" id=\"markdown-toc-121-in-tree-plugins\"\u003e1.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ein-tree\u003c/code\u003e plugins\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#122-out-of-tree-plugins\" id=\"markdown-toc-122-out-of-tree-plugins\"\u003e1.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eout-of-tree\u003c/code\u003e plugins\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#13-每个扩展点上分别有哪些内置插件\" id=\"markdown-toc-13-每个扩展点上分别有哪些内置插件\"\u003e1.3 每个扩展点上分别有哪些内置插件\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-pod-调度过程\" id=\"markdown-toc-2-pod-调度过程\"\u003e2 Pod 调度过程\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-等待调度阶段\" id=\"markdown-toc-21-等待调度阶段\"\u003e2.1 等待调度阶段\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#211-preenqueue\" id=\"markdown-toc-211-preenqueue\"\u003e2.1.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePreEnqueue\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#212-queuesort\" id=\"markdown-toc-212-queuesort\"\u003e2.1.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eQueueSort\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-调度阶段scheduling-cycle\" id=\"markdown-toc-22-调度阶段scheduling-cycle\"\u003e2.2 调度阶段（scheduling cycle）\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#221-prefilterpod-预处理和检查不符合预期就提前结束调度\" id=\"markdown-toc-221-prefilterpod-预处理和检查不符合预期就提前结束调度\"\u003e2.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePreFilter\u003c/code\u003e：pod 预处理和检查，不符合预期就提前结束调度\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#222-filter排除所有不符合要求的-node\" id=\"markdown-toc-222-filter排除所有不符合要求的-node\"\u003e2.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFilter\u003c/code\u003e：排除所有不符合要求的 node\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#223-postfilterfilter-之后没有-node-剩下补救阶段\" id=\"markdown-toc-223-postfilterfilter-之后没有-node-剩下补救阶段\"\u003e2.2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePostFilter\u003c/code\u003e：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFilter\u003c/code\u003e 之后没有 node 剩下，补救阶段\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#224-prescore\" id=\"markdown-toc-224-prescore\"\u003e2.2.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePreScore\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#225-score\" id=\"markdown-toc-225-score\"\u003e2.2.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eScore\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#226-normalizescore\" id=\"markdown-toc-226-normalizescore\"\u003e2.2.6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNormalizeScore\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#227-reserveinformational维护-plugin-状态信息\" id=\"markdown-toc-227-reserveinformational维护-plugin-状态信息\"\u003e2.2.7 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eReserve\u003c/code\u003e：Informational，维护 plugin 状态信息\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#228-permit允许拒绝等待进入-binding-cycle\" id=\"markdown-toc-228-permit允许拒绝等待进入-binding-cycle\"\u003e2.2.8 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePermit\u003c/code\u003e：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e允许/拒绝/等待\u003c/code\u003e进入 binding cycle\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-绑定阶段binding-cycle\" id=\"markdown-toc-23-绑定阶段binding-cycle\"\u003e2.3 绑定阶段（binding cycle）\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#231-prebindbind-之前的预处理例如到-node-上去挂载-volume\" id=\"markdown-toc-231-prebindbind-之前的预处理例如到-node-上去挂载-volume\"\u003e2.3.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePreBind\u003c/code\u003e：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBind\u003c/code\u003e 之前的预处理，例如到 node 上去挂载 volume\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#232-bind将-pod-关联到-node\" id=\"markdown-toc-232-bind将-pod-关联到-node\"\u003e2.3.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBind\u003c/code\u003e：将 pod 关联到 node\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#233-postbindinformational可选执行清理操作\" id=\"markdown-toc-233-postbindinformational可选执行清理操作\"\u003e2.3.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePostBind\u003c/code\u003e：informational，可选，执行清理操作\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-开发一个极简-sticky-node-调度器插件out-of-tree\" id=\"markdown-toc-3-开发一个极简-sticky-node-调度器插件out-of-tree\"\u003e3 开发一个极简 sticky node 调度器插件（out-of-tree）\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-设计\" id=\"markdown-toc-31-设计\"\u003e3.1 设计\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#311-背景知识\" id=\"markdown-toc-311-背景知识\"\u003e3.1.1 背景知识\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#312-业务需求\" id=\"markdown-toc-312-业务需求\"\u003e3.1.2 业务需求\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#313-技术方案\" id=\"markdown-toc-313-技术方案\"\u003e3.1.3 技术方案\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-实现\" id=\"markdown-toc-32-实现\"\u003e3.2 实现\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#321-prefilter\" id=\"markdown-toc-321-prefilter\"\u003e3.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePrefilter()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#322-filter\" id=\"markdown-toc-322-filter\"\u003e3.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFilter()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#323-postbind\" id=\"markdown-toc-323-postbind\"\u003e3.2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePostBind()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#324-其他说明\" id=\"markdown-toc-324-其他说明\"\u003e3.2.4 其他说明\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-部署\" id=\"markdown-toc-33-部署\"\u003e3.3 部署\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#331-配置\" id=\"markdown-toc-331-配置\"\u003e3.3.1 配置\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#332-运行\" id=\"markdown-toc-332-运行\"\u003e3.3.2 运行\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#34-测试\" id=\"markdown-toc-34-测试\"\u003e3.4 测试\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#341-首次创建-vm\" id=\"markdown-toc-341-首次创建-vm\"\u003e3.4.1 首次创建 VM\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#342-删掉-vmipod重新调度时\" id=\"markdown-toc-342-删掉-vmipod重新调度时\"\u003e3.4.2 删掉 VMI/Pod，重新调度时\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-总结\" id=\"markdown-toc-4-总结\"\u003e4 总结\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#参考资料\" id=\"markdown-toc-参考资料\"\u003e参考资料\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"1-引言\"\u003e1 引言\u003c/h1\u003e\n\n\u003cp\u003eK8s 调度框架提供了一种扩展\u003cstrong\u003e\u003cmark\u003e调度功能\u003c/mark\u003e\u003c/strong\u003e的插件机制，\n对于想实现自定义调度逻辑的场景非常有用。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e如果 pod spec 里没指定 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eschedulerName\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 字段，则使用默认调度器；\u003c/li\u003e\n  \u003cli\u003e如果指定了，就会走到相应的调度器/调度插件。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e本文整理一些相关内容，并展示如何用 300 来行代码实现一个简单的固定宿主机调度插件。\n代码基于 k8s \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ev1.28\u003c/code\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"11-调度框架sceduling-framework扩展点\"\u003e1.1 调度框架（sceduling framework）扩展点\u003c/h2\u003e\n\n\u003cp\u003e如下图所示，K8s 调度框架定义了一些\u003cstrong\u003e\u003cmark\u003e扩展点\u003c/mark\u003e\u003c/strong\u003e（extension points），\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/k8s-scheduling-plugins/scheduling-framework-extensions.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Scheduling framework extension points.\n\u003c/p\u003e\n\n\u003cp\u003e用户可以编写自己的\u003cstrong\u003e\u003cmark\u003e调度插件\u003c/mark\u003e\u003c/strong\u003e（scheduler plugins）注册到这些扩展点来实现想要的调度逻辑。\n每个扩展点上一般会有\u003cstrong\u003e\u003cmark\u003e多个 plugins\u003c/mark\u003e\u003c/strong\u003e，按注册顺序依次执行。\u003c/p\u003e\n\n\u003cp\u003e扩展点根据是否影响调度决策，可以分为两类。\u003c/p\u003e\n\n\u003ch3 id=\"111-影响调度决策的扩展点\"\u003e1.1.1 影响调度决策的扩展点\u003c/h3\u003e\n\n\u003cp\u003e大部分扩展点是\u003cstrong\u003e\u003cmark\u003e影响调度决策\u003c/mark\u003e\u003c/strong\u003e的，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e后面会看到，这些函数的返回值中包括一个成功/失败字段，决定了是允许还是拒绝这个 pod 进入下一处理阶段；\u003c/li\u003e\n  \u003cli\u003e任何一个扩展点失败了，这个 pod 的调度就失败了；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"112-不影响调度决策的扩展点informational\"\u003e1.1.2 不影响调度决策的扩展点（informational）\u003c/h3\u003e\n\n\u003cp\u003e少数几个扩展点是 informational 的，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e这些函数\u003cstrong\u003e\u003cmark\u003e没有返回值\u003c/mark\u003e\u003c/strong\u003e，因此\u003cstrong\u003e\u003cmark\u003e不能影响调度决策\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n  \u003cli\u003e但是，在这里面\u003cstrong\u003e\u003cmark\u003e可以修改 pod/node 等信息\u003c/mark\u003e\u003c/strong\u003e，或者执行清理操作。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"12-调度插件分类\"\u003e1.2 调度插件分类\u003c/h2\u003e\n\n\u003cp\u003e根据是否维护在 k8s 代码仓库本身，分为两类。\u003c/p\u003e\n\n\u003ch3 id=\"121-in-tree-plugins\"\u003e1.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ein-tree\u003c/code\u003e plugins\u003c/h3\u003e\n\n\u003cp\u003e维护在 k8s 代码目录 \u003ca href=\"https://github.com/kubernetes/kubernetes/tree/v1.28.4/pkg/scheduler/framework/plugins\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epkg/scheduler/framework/plugins\u003c/code\u003e\u003c/a\u003e 中，\n\u003cstrong\u003e\u003cmark\u003e跟内置调度器一起编译\u003c/mark\u003e\u003c/strong\u003e。里面有十几个调度插件，大部分都是常用和在用的，\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ell pkg/scheduler/framework/plugins\ndefaultbinder/\ndefaultpreemption/\ndynamicresources/\nfeature/\nimagelocality/\ninterpodaffinity/\nnames/\nnodeaffinity/\nnodename/\nnodeports/\nnoderesources/\nnodeunschedulable/\nnodevolumelimits/\npodtopologyspread/\nqueuesort/\nschedulinggates/\nselectorspread/\ntainttoleration/\nvolumebinding/\nvolumerestrictions/\nvolumezone/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ein-tree 方式每次要添加新插件，或者修改原有插件，都需要修改 kube-scheduler 代码然后编译和\n\u003cstrong\u003e\u003cmark\u003e重新部署 kube-scheduler\u003c/mark\u003e\u003c/strong\u003e，比较重量级。\u003c/p\u003e\n\n\u003ch3 id=\"122-out-of-tree-plugins\"\u003e1.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eout-of-tree\u003c/code\u003e plugins\u003c/h3\u003e\n\n\u003cp\u003eout-of-tree plugins 由\u003cstrong\u003e\u003cmark\u003e用户自己编写和维护\u003c/mark\u003e\u003c/strong\u003e，\u003cstrong\u003e\u003cmark\u003e独立部署\u003c/mark\u003e\u003c/strong\u003e，\n不需要对 k8s 做任何代码或配置改动。\u003c/p\u003e\n\n\u003cp\u003e本质上 out-of-tree plugins 也是跟 kube-scheduler 代码一起编译的，不过 kube-scheduler\n相关代码已经抽出来作为一个独立项目 \u003ca href=\"https://github.com/kubernetes-sigs/scheduler-plugins\"\u003egithub.com/kubernetes-sigs/scheduler-plugins\u003c/a\u003e。\n用户只需要引用这个包，编写自己的调度器插件，然后以普通 pod 方式部署就行（其他部署方式也行，比如 binary 方式部署）。\n编译之后是个包含\u003cstrong\u003e\u003cmark\u003e默认调度器和所有 out-of-tree 插件\u003c/mark\u003e\u003c/strong\u003e的总调度器程序，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e它有内置调度器的功能；\u003c/li\u003e\n  \u003cli\u003e也包括了 out-of-tree 调度器的功能；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e用法有两种：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e跟现有调度器并行部署，只管理特定的某些 pods；\u003c/li\u003e\n  \u003cli\u003e取代现有调度器，因为它功能也是全的。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"13-每个扩展点上分别有哪些内置插件\"\u003e1.3 每个扩展点上分别有哪些内置插件\u003c/h2\u003e\n\n\u003cp\u003e内置的调度插件，以及分别工作在哪些 extention points：\n\u003ca href=\"https://kubernetes.io/docs/reference/scheduling/config/#scheduling-plugins\"\u003e官方文档\u003c/a\u003e。\n比如，\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003enode selectors 和 node affinity 用到了 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eNodeAffinity\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e plugin；\u003c/li\u003e\n  \u003cli\u003etaint/toleration 用到了 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eTaintToleration\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e plugin。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"2-pod-调度过程\"\u003e2 Pod 调度过程\u003c/h1\u003e\n\n\u003cp\u003e一个 pod 的完整调度过程可以分为两个阶段：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003escheduling cycle\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e：为 pod 选择一个 node，类似于\u003cstrong\u003e\u003cmark\u003e数据库查询和筛选\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ebinding cycle\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e：落实以上选择，类似于\u003cstrong\u003e\u003cmark\u003e处理各种关联的东西并将结果写到数据库\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e例如，虽然 scheduling cycle 为 pod 选择了一个 node，但是在接下来的 binding cycle 中，\n在这个 node 上给这个 pod 创建 persistent volume 失败了，\n那整个调度过程也是算失败的，需要回到最开始的步骤重新调度。\n以上两个过程加起来称为一个 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003escheduling context\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e另外，在进入一个 scheduling context 之前，还有一个\u003cstrong\u003e\u003cmark\u003e调度队列\u003c/mark\u003e\u003c/strong\u003e，\n用户可以编写自己的算法对队列内的 pods 进行排序，决定哪些 pods 先进入调度流程。\n总流程如下图所示：\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/k8s-scheduling-plugins/scheduling-framework-extensions.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. queuing/sorting and scheduling context\n\u003c/p\u003e\n\n\u003cp\u003e下面分别来看。\u003c/p\u003e\n\n\u003ch2 id=\"21-等待调度阶段\"\u003e2.1 等待调度阶段\u003c/h2\u003e\n\n\u003ch3 id=\"211-preenqueue\"\u003e2.1.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePreEnqueue\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003ePod 处于 ready for scheduling 的阶段。\n内部工作原理：\u003ca href=\"https://github.com/kubernetes/community/blob/f03b6d5692bd979f07dd472e7b6836b2dad0fd9b/contributors/devel/sig-scheduling/scheduler_queues.md\"\u003esig-scheduling/scheduler_queues.md\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e这一步没过就不会进入调度队列，更不会进入调度流程。\u003c/p\u003e\n\n\u003ch3 id=\"212-queuesort\"\u003e2.1.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eQueueSort\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e对调度队列（scheduling queue）内的 pod 进行排序，决定先调度哪些 pods。\u003c/p\u003e\n\n\u003ch2 id=\"22-调度阶段scheduling-cycle\"\u003e2.2 调度阶段（scheduling cycle）\u003c/h2\u003e\n\n\u003ch3 id=\"221-prefilterpod-预处理和检查不符合预期就提前结束调度\"\u003e2.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePreFilter\u003c/code\u003e：pod 预处理和检查，不符合预期就提前结束调度\u003c/h3\u003e\n\n\u003cp\u003e这里的插件可以对 Pod 进行预处理，或者条件检查，函数签名如下：\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// https://github.com/kubernetes/kubernetes/blob/v1.28.4/pkg/scheduler/framework/interface.go#L349-L367\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// PreFilterPlugin is an interface that must be implemented by \u0026#34;PreFilter\u0026#34; plugins.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// These plugins are called at the beginning of the scheduling cycle.\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003ePreFilterPlugin\u003c/span\u003e \u003cspan class=\"k\"\u003einterface\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// PreFilter is called at the beginning of the scheduling cycle. All PreFilter\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// plugins must return success or the pod will be rejected. PreFilter could optionally\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// return a PreFilterResult to influence which nodes to evaluate downstream. This is useful\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// for cases where it is possible to determine the subset of nodes to process in O(1) time.\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// When it returns Skip status, returned PreFilterResult and other fields in status are just ignored,\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// and coupled Filter plugin/PreFilterExtensions() will be skipped in this scheduling cycle.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ePreFilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eCycleState\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ev1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ePreFilterResult\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"c\"\u003e// PreFilterExtensions returns a PreFilterExtensions interface if the plugin implements one,\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// or nil if it does not. A Pre-filter plugin can provide extensions to incrementally\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// modify its pre-processed info. The framework guarantees that the extensions\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// AddPod/RemovePod will only be called after PreFilter, possibly on a cloned\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// CycleState, and may call those functions more than once before calling\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// Filter again on a specific node.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ePreFilterExtensions\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"n\"\u003ePreFilterExtensions\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e输入：\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ep *v1.Pod\u003c/code\u003e 是\u003cstrong\u003e\u003cmark\u003e待调度的 pod\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n      \u003cli\u003e第二个参数 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003estate\u003c/code\u003e 可用于保存一些状态信息，然后在后面的扩展点（例如 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFilter()\u003c/code\u003e 阶段）拿出来用；\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e输出：\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e只要有\u003cstrong\u003e\u003cmark\u003e任何一个 plugin 返回失败，这个 pod 的调度就失败了\u003c/mark\u003e\u003c/strong\u003e；\u003c/li\u003e\n      \u003cli\u003e换句话说，所有已经注册的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePreFilter\u003c/code\u003e plugins 都成功之后，pod 才会进入到下一个环节；\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"222-filter排除所有不符合要求的-node\"\u003e2.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFilter\u003c/code\u003e：排除所有不符合要求的 node\u003c/h3\u003e\n\n\u003cp\u003e这里的插件可以\u003cstrong\u003e\u003cmark\u003e过滤掉那些不满足要求的 node\u003c/mark\u003e\u003c/strong\u003e（equivalent of Predicates in a scheduling Policy），\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e针对每个 node，调度器会按配置顺序依次执行 filter plugins；\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e任何一个插件\u003c/mark\u003e\u003c/strong\u003e 返回失败，这个 node 就被排除了；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// https://github.com/kubernetes/kubernetes/blob/v1.28.4/pkg/scheduler/framework/interface.go#L349C1-L367C2\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// FilterPlugin is an interface for Filter plugins. These plugins are called at the\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// filter extension point for filtering out hosts that cannot run a pod.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// This concept used to be called \u0026#39;predicate\u0026#39; in the original scheduler.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// These plugins should return \u0026#34;Success\u0026#34;, \u0026#34;Unschedulable\u0026#34; or \u0026#34;Error\u0026#34; in Status.code.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// However, the scheduler accepts other valid codes as well.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// Anything other than \u0026#34;Success\u0026#34; will lead to exclusion of the given host from running the pod.\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003eFilterPlugin\u003c/span\u003e \u003cspan class=\"k\"\u003einterface\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ePlugin\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// Filter is called by the scheduling framework.\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// All FilterPlugins should return \u0026#34;Success\u0026#34; to declare that\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// the given node fits the pod. If Filter doesn\u0026#39;t return \u0026#34;Success\u0026#34;,\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// it will return \u0026#34;Unschedulable\u0026#34;, \u0026#34;UnschedulableAndUnresolvable\u0026#34; or \u0026#34;Error\u0026#34;.\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// For the node being evaluated, Filter plugins should look at the passed\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// nodeInfo reference for this particular node\u0026#39;s information (e.g., pods\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// considered to be running on the node) instead of looking it up in the\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// NodeInfoSnapshot because we don\u0026#39;t guarantee that they will be the same.\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// For example, during preemption, we may pass a copy of the original\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// nodeInfo object that has some pods removed from it to evaluate the\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// possibility of preempting them to schedule the target pod.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eFilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eCycleState\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epod\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ev1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePod\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enodeInfo\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eNodeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eStatus\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e输入：\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enodeInfo\u003c/code\u003e 是\u003cstrong\u003e\u003cmark\u003e当前给定的 node\u003c/mark\u003e\u003c/strong\u003e 的信息，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFilter()\u003c/code\u003e 程序判断这个 node 是否符合要求；\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e输出：\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003e放行或拒绝。\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e对于给定 node，如果\u003cstrong\u003e\u003cmark\u003e所有 Filter plugins 都返回成功\u003c/mark\u003e\u003c/strong\u003e，这个 node 才算通过筛选，\n成为\u003cstrong\u003e\u003cmark\u003e备选 node 之一\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"223-postfilterfilter-之后没有-node-剩下补救阶段\"\u003e2.2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePostFilter\u003c/code\u003e：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFilter\u003c/code\u003e 之后没有 node 剩下，补救阶段\u003c/h3\u003e\n\n\u003cp\u003e如果 Filter 阶段之后，\u003cstrong\u003e\u003cmark\u003e所有 nodes 都被筛掉了\u003c/mark\u003e\u003c/strong\u003e，一个都没剩，才会执行这个阶段；否则不会执行这个阶段的 plugins。\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// https://github.com/kubernetes/kubernetes/blob/v1.28.4/pkg/scheduler/framework/interface.go#L392C1-L407C2\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// PostFilterPlugin is an interface for \u0026#34;PostFilter\u0026#34; plugins. These plugins are called after a pod cannot be scheduled.\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003ePostFilterPlugin\u003c/span\u003e \u003cspan class=\"k\"\u003einterface\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// A PostFilter plugin should return one of the following statuses:\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// - Unschedulable: the plugin gets executed successfully but the pod cannot be made schedulable.\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// - Success: the plugin gets executed successfully and the pod can be made schedulable.\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// - Error: the plugin aborts due to some internal error.\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e//\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// Informational plugins should be configured ahead of other ones, and always return Unschedulable status.\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// Optionally, a non-nil PostFilterResult may be returned along with a Success status. For example,\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// a preemption plugin may choose to return nominatedNodeName, so that framework can reuse that to update the\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// preemptor pod\u0026#39;s .spec.status.nominatedNodeName field.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ePostFilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eCycleState\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epod\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ev1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePod\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efilteredNodeStatusMap\u003c/span\u003e \u003cspan class=\"n\"\u003eNodeToStatusMap\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ePostFilterResult\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e按 plugin 顺序依次执行，\u003cstrong\u003e\u003cmark\u003e任何一个插件\u003c/mark\u003e\u003c/strong\u003e将 node 标记为 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eSchedulable\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\n就算\u003cstrong\u003e\u003cmark\u003e成功\u003c/mark\u003e\u003c/strong\u003e，不再执行剩下的 PostFilter plugins。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cmark\u003e典型例子\u003c/mark\u003e\u003c/strong\u003e：\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003epreemptiontoleration\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFilter()\u003c/code\u003e 之后已经没有可用 node 了，在这个阶段就挑一个 pod/node，抢占它的资源。\u003c/p\u003e\n\n\u003ch3 id=\"224-prescore\"\u003e2.2.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePreScore\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePreScore/Score/NormalizeScore\u003c/code\u003e 都是给 node 打分的，以最终选出一个最合适的 node。这里就不展开了，\n函数签名也在上面给到的源文件路径中，这里就不贴了。\u003c/p\u003e\n\n\u003ch3 id=\"225-score\"\u003e2.2.5 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eScore\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e针对每个 node 依次调用 scoring plugin，得到一个分数。\u003c/p\u003e\n\n\u003ch3 id=\"226-normalizescore\"\u003e2.2.6 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNormalizeScore\u003c/code\u003e\u003c/h3\u003e\n\n\u003ch3 id=\"227-reserveinformational维护-plugin-状态信息\"\u003e2.2.7 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eReserve\u003c/code\u003e：Informational，维护 plugin 状态信息\u003c/h3\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// https://github.com/kubernetes/kubernetes/blob/v1.28.4/pkg/scheduler/framework/interface.go#L444C1-L462C2\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// ReservePlugin is an interface for plugins with Reserve and Unreserve\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// methods. These are meant to update the state of the plugin. This concept\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// used to be called \u0026#39;assume\u0026#39; in the original scheduler. These plugins should\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// return only Success or Error in Status.code. However, the scheduler accepts\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// other valid codes as well. Anything other than Success will lead to\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// rejection of the pod.\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003eReservePlugin\u003c/span\u003e \u003cspan class=\"k\"\u003einterface\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// Reserve is called by the scheduling framework when the scheduler cache is\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// updated. If this method returns a failed Status, the scheduler will call\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// the Unreserve method for all enabled ReservePlugins.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eReserve\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eCycleState\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ev1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePod\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enodeName\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eStatus\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// Unreserve is called by the scheduling framework when a reserved pod was\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// rejected, an error occurred during reservation of subsequent plugins, or\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// in a later phase. The Unreserve method implementation must be idempotent\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// and may be called by the scheduler even if the corresponding Reserve\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// method for the same plugin was not called.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eUnreserve\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eCycleState\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ev1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePod\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enodeName\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里有两个方法，都是 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003einformational\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e，也就是不影响调度决策；\n维护了 runtime state (aka “stateful plugins”) 的插件，可以通过这两个方法\n\u003cstrong\u003e\u003cmark\u003e接收 scheduler 传来的信息\u003c/mark\u003e\u003c/strong\u003e：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eReserve\u003c/code\u003e\u003c/p\u003e\n\n    \u003cp\u003e用来避免 scheduler 等待 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebind\u003c/code\u003e 操作结束期间，因 race condition 导致的错误。\n 只有当\u003cstrong\u003e\u003cmark\u003e所有\u003c/mark\u003e\u003c/strong\u003e \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eReserve\u003c/code\u003e plugins 都成功后，才会进入下一阶段，否则 scheduling cycle 就中止了。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eUnreserve\u003c/code\u003e\u003c/p\u003e\n\n    \u003cp\u003e调度失败，这个阶段回滚时执行。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eUnreserve()\u003c/code\u003e 必须幂等，且不能 fail。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"228-permit允许拒绝等待进入-binding-cycle\"\u003e2.2.8 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePermit\u003c/code\u003e：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e允许/拒绝/等待\u003c/code\u003e进入 binding cycle\u003c/h3\u003e\n\n\u003cp\u003e这是 scheduling cycle 的最后一个扩展点了，可以\u003cstrong\u003e\u003cmark\u003e阻止或延迟\u003c/mark\u003e\u003c/strong\u003e将一个 pod binding 到 candidate node。\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// PermitPlugin is an interface that must be implemented by \u0026#34;Permit\u0026#34; plugins.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// These plugins are called before a pod is bound to a node.\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003ePermitPlugin\u003c/span\u003e \u003cspan class=\"k\"\u003einterface\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// Permit is called before binding a pod (and before prebind plugins). Permit\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// plugins are used to prevent or delay the binding of a Pod. A permit plugin\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// must return success or wait with timeout duration, or the pod will be rejected.\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// The pod will also be rejected if the wait timeout or the pod is rejected while\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// waiting. Note that if the plugin returns \u0026#34;wait\u0026#34;, the framework will wait only\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// after running the remaining plugins given that no other plugin rejects the pod.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ePermit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eCycleState\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ev1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePod\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enodeName\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e三种结果：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003eapprove\u003c/strong\u003e：所有 Permit plugins 都 appove 之后，这个 pod 就进入下面的 binding 阶段；\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003edeny\u003c/strong\u003e：任何一个 Permit plugin deny 之后，就无法进入 binding 阶段。这会触发 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eReserve\u003c/code\u003e plugins 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eUnreserve()\u003c/code\u003e 方法；\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003ewait\u003c/strong\u003e (with a timeout)：如果有 Permit plugin 返回 “wait”，这个 pod 就会进入一个 internal “waiting” Pods list；\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"23-绑定阶段binding-cycle\"\u003e2.3 绑定阶段（binding cycle）\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/k8s-scheduling-plugins/scheduling-framework-extensions.png\" width=\"100%\" height=\"100%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Scheduling framework extension points.\n\u003c/p\u003e\n\n\u003ch3 id=\"231-prebindbind-之前的预处理例如到-node-上去挂载-volume\"\u003e2.3.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePreBind\u003c/code\u003e：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBind\u003c/code\u003e 之前的预处理，例如到 node 上去挂载 volume\u003c/h3\u003e\n\n\u003cp\u003e例如，在将 pod 调度到一个 node 之前，先给这个 pod 在那台 node 上挂载一个 network volume。\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// PreBindPlugin is an interface that must be implemented by \u0026#34;PreBind\u0026#34; plugins.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// These plugins are called before a pod being scheduled.\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003ePreBindPlugin\u003c/span\u003e \u003cspan class=\"k\"\u003einterface\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// PreBind is called before binding a pod. All prebind plugins must return\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// success or the pod will be rejected and won\u0026#39;t be sent for binding.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ePreBind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eCycleState\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ev1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePod\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enodeName\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eStatus\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e任何一个 PreBind plugin 失败，都会导致 pod 被 reject，进入到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ereserve\u003c/code\u003e plugins 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eUnreserve()\u003c/code\u003e 方法；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"232-bind将-pod-关联到-node\"\u003e2.3.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eBind\u003c/code\u003e：将 pod 关联到 node\u003c/h3\u003e\n\n\u003cp\u003e所有 PreBind 完成之后才会进入 Bind。\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// https://github.com/kubernetes/kubernetes/blob/v1.28.4/pkg/scheduler/framework/interface.go#L497\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// Bind plugins are used to bind a pod to a Node.\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003eBindPlugin\u003c/span\u003e \u003cspan class=\"k\"\u003einterface\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// Bind plugins will not be called until all pre-bind plugins have completed. Each\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// bind plugin is called in the configured order. A bind plugin may choose whether\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// or not to handle the given Pod. If a bind plugin chooses to handle a Pod, the\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// remaining bind plugins are skipped. When a bind plugin does not handle a pod,\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// it must return Skip in its Status code. If a bind plugin returns an Error, the\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// pod is rejected and will not be bound.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eCycleState\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ev1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePod\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enodeName\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eStatus\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n  \u003cli\u003e所有 plugin 按配置顺序依次执行；\u003c/li\u003e\n  \u003cli\u003e每个 plugin 可以选择是否要处理一个给定的 pod；\u003c/li\u003e\n  \u003cli\u003e如果选择处理，\u003cstrong\u003e\u003cmark\u003e后面剩下的 plugins 会跳过\u003c/mark\u003e\u003c/strong\u003e。也就是\u003cstrong\u003e\u003cmark\u003e最多只有一个 bind plugin 会执行\u003c/mark\u003e\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"233-postbindinformational可选执行清理操作\"\u003e2.3.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePostBind\u003c/code\u003e：informational，可选，执行清理操作\u003c/h3\u003e\n\n\u003cp\u003e这是一个 informational extension point，也就是无法影响调度决策（没有返回值）。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ebind 成功的 pod 才会进入这个阶段；\u003c/li\u003e\n  \u003cli\u003e作为 binding cycle 的最后一个阶段，一般是用来清理一些相关资源。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// https://github.com/kubernetes/kubernetes/blob/v1.28.4/pkg/scheduler/framework/interface.go#L473\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// PostBindPlugin is an interface that must be implemented by \u0026#34;PostBind\u0026#34; plugins.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// These plugins are called after a pod is successfully bound to a node.\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003ePostBindPlugin\u003c/span\u003e \u003cspan class=\"k\"\u003einterface\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// PostBind is called after a pod is successfully bound. These plugins are informational.\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// A common application of this extension point is for cleaning\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// up. If a plugin needs to clean-up its state after a pod is scheduled and\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e// bound, PostBind is the extension point that it should register.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ePostBind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eCycleState\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ev1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePod\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enodeName\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"3-开发一个极简-sticky-node-调度器插件out-of-tree\"\u003e3 开发一个极简 sticky node 调度器插件（out-of-tree）\u003c/h1\u003e\n\n\u003cp\u003e这里以 kubevirt \u003cstrong\u003e\u003cmark\u003e固定宿主机\u003c/mark\u003e\u003c/strong\u003e调度 VM 为例，展示如何用几百行代码实现一个 out-of-tree 调度器插件。\u003c/p\u003e\n\n\u003ch2 id=\"31-设计\"\u003e3.1 设计\u003c/h2\u003e\n\n\u003ch3 id=\"311-背景知识\"\u003e3.1.1 背景知识\u003c/h3\u003e\n\n\u003cp\u003e一点背景知识 [2,3]：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVirtualMachine\u003c/code\u003e 是一个虚拟机 CRD；\u003c/li\u003e\n  \u003cli\u003e一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVirtualMachine\u003c/code\u003e 会对应一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVirtualMachineInstance\u003c/code\u003e，这是一个运行中的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVirtualMachine\u003c/code\u003e；\u003c/li\u003e\n  \u003cli\u003e一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVirtualMachineInstance\u003c/code\u003e 对应一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePod\u003c/code\u003e；\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e如果发生故障，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVirtualMachineInstance\u003c/code\u003e 和 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePod\u003c/code\u003e 可能会重建和重新调度，但 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVirtualMachine\u003c/code\u003e 是不变的；\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eVirtualMachine \u0026lt;--\u0026gt; VirtualMachineInstance/Pod\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 的关系，\n类似于 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eStatefulSet \u0026lt;--\u0026gt; Pod\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 的关系。\u003c/p\u003e\n\n\u003ch3 id=\"312-业务需求\"\u003e3.1.2 业务需求\u003c/h3\u003e\n\n\u003cp\u003eVM 创建之后只要被调度到某台 node，以后不管发生什么故障，它永远都被调度到这个 node 上（除非人工干预）。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e可能场景：VM 挂载了宿主机本地磁盘，因此换了宿主机之后数据就没了。\n故障场景下，机器或容器不可用没关系，微服务系统自己会处理实例的健康检测和流量拉出，\n底层基础设施保证不换宿主机就行了，这样故障恢复之后数据还在。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e技术描述：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e用户创建一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVirtualMachine\u003c/code\u003e 后，能正常调度到一台 node 创建出来；\u003c/li\u003e\n  \u003cli\u003e后续不管发生什么问题（pod crash/eviction/recreate、node restart …），这个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVirtualMachine\u003c/code\u003e\n都要被调度到这台机器。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"313-技术方案\"\u003e3.1.3 技术方案\u003c/h3\u003e\n\n\u003col\u003e\n  \u003cli\u003e用户创建一个 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVirtualMachine\u003c/code\u003e 后，由默认调度器给它分配一个 node，然后将 node 信息保存到 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVirtualMachine\u003c/code\u003e CR 上；\u003c/li\u003e\n  \u003cli\u003e如果 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVirtualMachineInstance\u003c/code\u003e 或 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePod\u003c/code\u003e 被删除或发生重建，调度器先找到对应的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eVirtualMachine\u003c/code\u003e CR，\n  如果 CR 中有保存的 node 信息，就用这个 node；否则（必定是第一次调度），转 1。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"32-实现\"\u003e3.2 实现\u003c/h2\u003e\n\n\u003cp\u003e实现以上功能需要在三个位置注册调度扩展函数：\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePreFilter\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFilter\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePostBind\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e代码基于 k8s \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ev1.28\u003c/code\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"321-prefilter\"\u003e3.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePrefilter()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e主要做一些检查和准备工作，\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e如果不是我们的 Pod：直接返回成功，留给其他 plugin 去处理；\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e如果是我们的 Pod，查询关联的 VMI/VM CR，这里分两种情况：\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e找到了：说明之前已经调度过（可能是 pod 被删除了导致重新调度），我们应该解析出原来的 node，供后面 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFilter()\u003c/code\u003e 阶段使用；\u003c/li\u003e\n      \u003cli\u003e没找到：说明是第一次调度，什么都不做，让默认调度器为我们选择初始 node。\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003e将 pod 及为它选择的 node（没有就是空）\u003cstrong\u003e\u003cmark\u003e保存到一个 state 上下文中\u003c/mark\u003e\u003c/strong\u003e，这个 state 会传给后面的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFilter()\u003c/code\u003e 阶段使用。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// PreFilter invoked at the preFilter extension point.\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epl\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eStickyVM\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ePreFilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCycleState\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epod\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ev1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePreFilterResult\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003estickyState\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"no\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c\"\u003e// Get pod owner reference\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epodOwnerRef\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003egetPodOwnerRef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003epodOwnerRef\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNewStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSuccess\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Pod owner ref not found, return\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c\"\u003e// Get VMI\u003c/span\u003e\n    \u003cspan class=\"n\"\u003evmiName\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003epodOwnerRef\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eName\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ens\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003epod\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNamespace\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003evmi\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003epl\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekubevirtClient\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eVirtualMachineInstances\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ens\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTODO\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003evmiName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emetav1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetOptions\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eResourceVersion\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNewStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;get vmi failed\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003evmiOwnerRef\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003egetVMIOwnerRef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evmi\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003evmiOwnerRef\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNewStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSuccess\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;VMI owner ref not found, return\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c\"\u003e// Get VM\u003c/span\u003e\n    \u003cspan class=\"n\"\u003evmName\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003evmiOwnerRef\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eName\u003c/span\u003e\n    \u003cspan class=\"n\"\u003evm\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003epl\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekubevirtClient\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eVirtualMachines\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ens\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTODO\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003evmName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emetav1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetOptions\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eResourceVersion\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNewStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;get vmi failed\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c\"\u003e// Annotate sticky node to VM\u003c/span\u003e\n    \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enodeExists\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAnnotations\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003estickyAnnotationKey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNewStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSuccess\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Check pod/vmi/vm finish, return\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"322-filter\"\u003e3.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFilter()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e调度器会根据 pod 的 nodeSelector 等，为我们\u003cstrong\u003e\u003cmark\u003e初步选择出一些备选 nodes\u003c/mark\u003e\u003c/strong\u003e。\n然后会遍历这些 node，依次调用各 plugin 的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFilter()\u003c/code\u003e 方法，看这个 node 是否合适。\n伪代码：\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e// For a given pod\nfor node in selectedNodes:\n    for pl in plugins:\n        pl.Filter(ctx, customState, pod, node)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们的 plugin 逻辑，首先解析传过来的 state/pod/node 信息，\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e如果 state 中保存了一个 node，\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e如果保存的这个 node 就是当前 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFilter()\u003c/code\u003e 传给我们的 node，返回成功；\u003c/li\u003e\n      \u003cli\u003e对于其他所有 node，都返回失败。\u003c/li\u003e\n    \u003c/ol\u003e\n\n    \u003cp\u003e以上的效果就是：只要这个 pod 上一次调度到某个 node，我们就继续让它调度到这个 node，\n 也就是\u003cstrong\u003e\u003cmark\u003e“固定宿主机调度”\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e如果 state 中没有保存的 node，说明是第一次调度，也返回成功，\u003cstrong\u003e\u003cmark\u003e默认调度器会给我们分一个 node\u003c/mark\u003e\u003c/strong\u003e。\n  我们在后面的 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePostBind\u003c/code\u003e 阶段把这个 node 保存到 state 中。\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epl\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eStickyVM\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eFilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCycleState\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epod\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ev1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePod\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enodeInfo\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNodeInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStatus\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRead\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estateKey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNewStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;read preFilter state fail: %v\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eok\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003estickyState\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eok\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNewStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;convert %+v to stickyState fail\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enodeExists\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003enodeInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eName\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c\"\u003e// returning \u0026#34;framework.Error\u0026#34; will prevent process on other nodes\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNewStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUnschedulable\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;already stick to another node\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"323-postbind\"\u003e3.2.3 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ePostBind()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e能到这个阶段，说明已经为 pod 选择好了一个 node。我们只需要检查下这个 node 是否已经保存到 VM CR 中，\n如果没有就保存之。\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epl\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eStickyVM\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ePostBind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eframework\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCycleState\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epod\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ev1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePod\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enodeName\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRead\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estateKey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eok\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003estickyState\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eok\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eklog\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eErrorf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;PostBind: pod %s/%s: convert failed\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epod\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNamespace\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epod\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enodeExists\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eklog\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eErrorf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;PostBind: VM already has sticky annotation, return\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c\"\u003e// Get pod owner reference\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epodOwnerRef\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003egetPodOwnerRef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003epodOwnerRef\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c\"\u003e// Get VMI owner reference\u003c/span\u003e\n    \u003cspan class=\"n\"\u003evmiName\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003epodOwnerRef\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eName\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ens\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003epod\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNamespace\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003evmi\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003epl\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekubevirtClient\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eVirtualMachineInstances\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ens\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTODO\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003evmiName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emetav1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetOptions\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eResourceVersion\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003evmiOwnerRef\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003egetVMIOwnerRef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evmi\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003evmiOwnerRef\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c\"\u003e// Add sticky node to VM annotations\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eretry\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRetryOnConflict\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eretry\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDefaultRetry\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003evmName\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003evmiOwnerRef\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eName\u003c/span\u003e\n        \u003cspan class=\"n\"\u003evm\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003epl\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekubevirtClient\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eVirtualMachines\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ens\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTODO\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003evmName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emetav1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetOptions\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eResourceVersion\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003evm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAnnotations\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003evm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAnnotations\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003evm\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAnnotations\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003estickyAnnotationKey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enodeName\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epl\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekubevirtClient\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eVirtualMachines\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epod\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNamespace\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUpdate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evm\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emetav1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUpdateOptions\u003c/span\u003e\u003cspan class=\"p\"\u003e{});\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e前面提到过，这个阶段是 \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003einformational\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e 的，\n它不能影响调度决策，所以它\u003cstrong\u003e\u003cmark\u003e没有返回值\u003c/mark\u003e\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"324-其他说明\"\u003e3.2.4 其他说明\u003c/h3\u003e\n\n\u003cp\u003e以上就是核心代码，再加点初始化代码和脚手架必需的东西就能编译运行了。\n完整代码见 \u003ca href=\"https://github.com/ArthurChiao/arthurchiao.github.io/tree/master/assets/code/k8s-scheduling-plugins\"\u003e这里\u003c/a\u003e\n（不包括依赖包）。\u003c/p\u003e\n\n\u003cp\u003e实际开发中，golang 依赖问题可能比较麻烦，需要根据 k8s 版本、scheduler-plugins 版本、golang 版本、kubevirt 版本等等自己解决。\u003c/p\u003e\n\n\u003ch2 id=\"33-部署\"\u003e3.3 部署\u003c/h2\u003e\n\n\u003cp\u003eScheduling plugins 跟网络 CNI plugins 不同，后者是可执行文件（binary），放到一个指定目录就行了。\nScheduling plugins 是 long running 服务。\u003c/p\u003e\n\n\u003ch3 id=\"331-配置\"\u003e3.3.1 配置\u003c/h3\u003e\n\n\u003cp\u003e为我们的 StickyVM scheduler 创建一个配置：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eksc.yaml\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ekubescheduler.config.k8s.io/v1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eKubeSchedulerConfiguration\u003c/span\u003e\n\u003cspan class=\"na\"\u003eclientConnection\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ekubeconfig\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e/etc/kubernetes/scheduler.kubeconfig\u0026#34;\u003c/span\u003e\n\u003cspan class=\"na\"\u003eprofiles\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n\u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eschedulerName\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003estickyvm\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eplugins\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003epreFilter\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eenabled\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eStickyVM\u003c/span\u003e\n      \u003cspan class=\"na\"\u003edisabled\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eNodeResourceFit\u003c/span\u003e\n    \u003cspan class=\"na\"\u003efilter\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eenabled\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eStickyVM\u003c/span\u003e\n      \u003cspan class=\"na\"\u003edisabled\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eNodePorts\u003c/span\u003e\n      \u003cspan class=\"c1\"\u003e# - name: \u0026#34;*\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ereserve\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003edisabled\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e*\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"na\"\u003epreBind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003edisabled\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e*\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"na\"\u003epostBind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eenabled\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eStickyVM\u003c/span\u003e\n      \u003cspan class=\"na\"\u003edisabled\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e*\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e一个 ksc 里面可以描述\u003ca href=\"https://kubernetes.io/docs/reference/scheduling/config/#multiple-profiles\"\u003e多个 profile\u003c/a\u003e，\n会启动多个独立 scheduler。\n由于这个配置是给 kube-scheduler 的，而不是 kube-apiserver，\u003c/p\u003e\n\n  \u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e# content of the file passed to \u0026#34;--config\u0026#34;\u003c/span\u003e\n\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ekubescheduler.config.k8s.io/v1alpha1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eKubeSchedulerConfiguration\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e  \u003c/div\u003e\n\n  \u003cp\u003e所以 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ek api-resources\u003c/code\u003e 或 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ek get  KubeSchedulerConfiguration\u003c/code\u003e 都是找不到这个资源的。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003epod 想用哪个 profile，就填对应的 schdulerName。\n如果没指定，就是 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edefault-scheduler\u003c/code\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"332-运行\"\u003e3.3.2 运行\u003c/h3\u003e\n\n\u003cp\u003e不需要对 k8s 做任何配置改动，作为普通 pod 部署运行就行（需要创建合适的 CluterRole 等等）。\u003c/p\u003e\n\n\u003cp\u003e这里为了方面，用 k8s cluster admin 证书直接从开发机启动，适合开发阶段快速迭代：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./bin/stickyvm-scheduler \u003cspan class=\"nt\"\u003e--leader-elect\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e \u003cspan class=\"nt\"\u003e--config\u003c/span\u003e ksc.yaml\nCreating StickyVM scheduling plugin\nCreating kubevirt clientset\nCreate kubevirt clientset successful\nCreate StickyVM scheduling plugin successful\nStarting Kubernetes Scheduler\u003cspan class=\"s2\"\u003e\u0026#34; version=\u0026#34;\u003c/span\u003ev0.0.20231122\u003cspan class=\"s2\"\u003e\u0026#34;\nGolang settings\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003eGOGC\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003eGOMAXPROCS\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003eGOTRACEBACK\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\nServing securely on \u003cspan class=\"o\"\u003e[\u003c/span\u003e::]:10259\n\u003cspan class=\"s2\"\u003e\u0026#34;Starting DynamicServingCertificateController\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"34-测试\"\u003e3.4 测试\u003c/h2\u003e\n\n\u003cp\u003e只需要在 VM CR spec 里面指定调度器名字。\u003c/p\u003e\n\n\u003ch3 id=\"341-首次创建-vm\"\u003e3.4.1 首次创建 VM\u003c/h3\u003e\n\n\u003cp\u003e新创建一个 VM 时的 workflow，\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eyaml 里指定用 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eschedulerName: stickyvm\u003c/code\u003e，\u003c/li\u003e\n  \u003cli\u003ek8s 默认调度器自动选一个 node，\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eStickyVM\u003c/code\u003e 根据 ownerref 依次拿到 vmi/vm，然后在 postbind hook 里将这个 node 添加到 VM annotation 里；\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e日志：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ePrefilter: start\nPrefilter: processing pod default/virt-launcher-kubevirt-smoke-fedora-nd4hp\nPreFilter: parent is VirtualMachineInstance kubevirt-smoke-fedora\nPreFilter: found corresponding VMI\nPreFilter: found corresponding VM\nPreFilter: VM has no sticky node, skip to write to scheduling context\nPrefilter: finish\nFilter: start\nFilter: pod default/virt-launcher-kubevirt-smoke-fedora-nd4hp, sticky node not exist, got node-1, \u003cspan class=\"k\"\u003ereturn \u003c/span\u003esuccess\nPostBind: start: pod default/virt-launcher-kubevirt-smoke-fedora-nd4hp\nPostBind: annotating selected node node-1 to VM\nPostBind: parent is VirtualMachineInstance kubevirt-smoke-fedora\nPostBind: found corresponding VMI\nPostBind: found corresponding VM\nPostBind: annotating node node-1 to VM: kubevirt-smoke-fedora\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"342-删掉-vmipod重新调度时\"\u003e3.4.2 删掉 VMI/Pod，重新调度时\u003c/h3\u003e\n\n\u003cp\u003e删除 vmi 或者 pod，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eStickyVM\u003c/code\u003e plugin 会在 prefilter 阶段从 annotation 拿出这个\nnode 信息，然后在 filter 阶段做判断，只有过滤到这个 node 时才返回成功，从而实现\n固定 node 调度的效果：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ePrefilter: start\nPrefilter: processing pod default/virt-launcher-kubevirt-smoke-fedora-m8f7v\nPreFilter: parent is VirtualMachineInstance kubevirt-smoke-fedora\nPreFilter: found corresponding VMI\nPreFilter: found corresponding VM\nPreFilter: VM already sticky to node node-1, write to scheduling context\nPrefilter: finish\nFilter: start\nFilter: default/virt-launcher-kubevirt-smoke-fedora-m8f7v, already stick to node-1, skip node-2\nFilter: start\nFilter: default/virt-launcher-kubevirt-smoke-fedora-m8f7v, given node is sticky node node-1, \u003cspan class=\"k\"\u003ereturn \u003c/span\u003esuccess\nFilter: finish\nFilter: start\nFilter: default/virt-launcher-kubevirt-smoke-fedora-m8f7v, already stick to node-1, skip node-3\nPostBind: start: pod default/virt-launcher-kubevirt-smoke-fedora-m8f7v\nPostBind: VM already has sticky annotation, \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这时候 VM 上已经有 annotation，因此 postbind 阶段不需要做任何事情。\u003c/p\u003e\n\n\u003ch1 id=\"4-总结\"\u003e4 总结\u003c/h1\u003e\n\n\u003cp\u003e本文整理了一些 k8s 调度框架和扩展插件相关的内容，并通过一个例子展示了开发和部署过程。\u003c/p\u003e\n\n\u003ch1 id=\"参考资料\"\u003e参考资料\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/kubernetes-sigs/scheduler-plugins\"\u003egithub.com/kubernetes-sigs/scheduler-plugins\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/vm-on-k8s/\"\u003eVirtual Machines on Kubernetes: Requirements and Solutions (2023)\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/kubevirt-create-vm/\"\u003eSpawn a Virtual Machine in Kubernetes with kubevirt: A Deep Dive (2023)\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://kubernetes.io/docs/concepts/scheduling-eviction/scheduling-framework/\"\u003eScheduling Framework\u003c/a\u003e, kubernetes.io\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/kubernetes-sigs/scheduler-plugins\"\u003egithub.com/kubernetes-sigs/scheduler-plugins\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003chr/\u003e\n\n\u003cp\u003e\u003ca href=\"https://notbyai.fyi\"\u003e\u003cimg src=\"/assets/img/Written-By-Human-Not-By-AI-Badge-white.svg\" alt=\"Written by Human, Not by AI\"/\u003e\u003c/a\u003e\n\u003ca href=\"https://notbyai.fyi\"\u003e\u003cimg src=\"/assets/img/Written-By-Human-Not-By-AI-Badge-black.svg\" alt=\"Written by Human, Not by AI\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/linux-cpu-5-zh/\"\u003e\u003cspan\u003e« Linux 服务器功耗与性能管理（五）：问题讨论（2024）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n      \n      \u003ca class=\"next\" href=\"/blog/bert-paper-zh/\"\u003e\u003cspan\u003e[译][论文] BERT：预训练深度双向 Transformers 做语言理解（Google，2019） »\u003c/span\u003e\n       \n      \u003c/a\u003e\n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2024-02-25T00:00:00Z",
  "Author": "Arthur Chiao"
}