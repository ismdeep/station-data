{
  "Source": "bogomolov.tech",
  "Title": "Beat detection in Java for Android",
  "Link": "https://bogomolov.tech/Basics-of-sound/",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cimg src=\"/Basics-of-sound/disco-app-dev.jpg\" title=\"Disco Lights app development\"/\u003e\u003cp\u003eThis post is about how to create a beat detector in an Android application. You can use this algorithm as a base for BMP or tempo detection. Let’s dive in.\u003c/p\u003e\u003ch2 id=\"How-a-microphone-works\"\u003e\u003ca href=\"#How-a-microphone-works\" class=\"headerlink\" title=\"How a microphone works\"\u003e\u003c/a\u003eHow a microphone works\u003c/h2\u003e\u003cp\u003eSound waves move the diaphragm and coil inside a microphone back and forth. These movements are converted into electrical current. The electrical current is then converted to discrete values. These discrete values are called audio samples. Samples are stored sequentially in the binary format.\u003c/p\u003e\u003cp\u003eI used 16 bits per sample. It is represented as an integer in the range from -32768 to 32767. The default format of sample representation is PCM (Pulse-Code Modulation).\u003c/p\u003e\u003cp\u003eWhen you record audio on 44KHz frequency, you will have 44000 samples in one second.\u003c/p\u003e\u003ch2 id=\"How-to-detect-a-beat\"\u003e\u003ca href=\"#How-to-detect-a-beat\" class=\"headerlink\" title=\"How to detect a beat\"\u003e\u003c/a\u003eHow to detect a beat\u003c/h2\u003e\u003cp\u003eIn Android, sound from the microphone writes to a buffer. A buffer contains some samples. Application read buffer and then do calculations in it.\u003c/p\u003e\u003cp\u003eThere are several algorithms to detect beats. I used one from there: \u003ca href=\"http://archive.gamedev.net/archive/reference/programming/features/beatdetection/index.html\" target=\"_blank\" rel=\"noopener\"\u003elink\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe are detecting the beat from an array of samples. Here is a high layer of the algorithm: we will get instant energy. Then we compare the instant energy with the average values. If the instant energy is higher than average, it will be treated as a beat. This is a simplified algorithm explanation.\u003c/p\u003e\u003cp\u003eHere is my implementation in Java of that algorithm.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisBeat\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eshort\u003c/span\u003e[] samples)\u003c/span\u003e \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e instantEnergy = getInstantEnergy(samples);\n\n    \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e[] values = ringBuffer.getValues();\n\n    \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e localAverage = getAverage(values);\n\n    \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e variance = getVariance(values, localAverage);\n    \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e constant = (-\u003cspan class=\"hljs-number\"\u003e0.0025714f\u003c/span\u003e * variance) + \u003cspan class=\"hljs-number\"\u003e1.5142857f\u003c/span\u003e;\n\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (constant \u0026lt; \u003cspan class=\"hljs-number\"\u003e1.2f\u003c/span\u003e) {\n        constant = \u003cspan class=\"hljs-number\"\u003e1.2f\u003c/span\u003e;\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (constant \u0026gt; \u003cspan class=\"hljs-number\"\u003e2f\u003c/span\u003e) {\n        constant = \u003cspan class=\"hljs-number\"\u003e2f\u003c/span\u003e;\n    }\n\n    ringBuffer.add(instantEnergy);\n\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e instantEnergy \u0026gt; constant * localAverage;\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFirst, calculate instant energy. It is a sum of pow of buffered samples.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetInstantEnergy\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eshort\u003c/span\u003e[] samples)\u003c/span\u003e \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e sum = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003eshort\u003c/span\u003e sample : samples) {\n        sum += Math.pow(sample, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e sum;\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen get an average of previously calculated instant energies (storing them in a Circular buffer).\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetAverage\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e[] values)\u003c/span\u003e \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e sum = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e value : values) {\n        sum += value;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e sum / values.length;\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext, get an average variance, which is the difference between every previous instant energy and average instant energy.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetVariance\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e[] values, \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e avg, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e blockNum)\u003c/span\u003e \u003c/span\u003e{\n    \u003cspan class=\"hljs-comment\"\u003e// blockNum = circular buffer size\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e diffSum = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i \u0026lt; blockNum; i++) {\n        diffSum += Math.pow(values[i] - avg, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e diffSum / blockNum;\n}\n``` \n\nIf current instant energy is more than average instant energy multiplied to coefficient, then we treat \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e buffer as the beat.\n```java\ninstantEnergy \u0026gt; constant * localAverage\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn my case sometimes the coefficient was an extremely low number, so I limit it with that values.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (constant \u0026lt; \u003cspan class=\"hljs-number\"\u003e1.2f\u003c/span\u003e) {\n    constant = \u003cspan class=\"hljs-number\"\u003e1.2f\u003c/span\u003e;\n} \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (constant \u0026gt; \u003cspan class=\"hljs-number\"\u003e2f\u003c/span\u003e) {\n    constant = \u003cspan class=\"hljs-number\"\u003e2f\u003c/span\u003e;\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThat’s it. That algorithm is pretty simple and is far from perfect. Still, it may cover your requirements.\u003c/p\u003e\u003cp\u003eYou can see how it works by downloading my \u003ca href=\"https://play.google.com/store/apps/details?id=tech.bogomolov.discolight\" target=\"_blank\" rel=\"noopener\"\u003edisco light Android application\u003c/a\u003e.\u003c/p\u003e\u003cbr/\u003e\u003cdiv class=\"related-posts\"\u003e\u003chr/\u003e\u003ch3\u003eRelated posts:\u003c/h3\u003e\u003cul class=\"popular-posts\"\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Facebook-Log-Id-Symfony/\" title=\"Implement Facebook login button with Symfony\" rel=\"bookmark\"\u003eImplement Facebook login button with Symfony\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Nodejs-production-systemd/\" title=\"How to manage Nodejs process using systemd\" rel=\"bookmark\"\u003eHow to manage Nodejs process using systemd\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Telegram-notification-on-SSH-login/\" title=\"Send message to Telegram on any SSH login\" rel=\"bookmark\"\u003eSend message to Telegram on any SSH login\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/What-is-Big-O-notation/\" title=\"What is Big-O notation\" rel=\"bookmark\"\u003eWhat is Big-O notation\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/android-sms-forwarding/\" title=\"SMS Forwarding - Android App Sends Texts to Webserver\" rel=\"bookmark\"\u003eSMS Forwarding - Android App Sends Texts to Webserver\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv id=\"comment-container\"\u003e\u003c/div\u003e\u003cdiv id=\"disqus_thread\"\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2020-06-07T00:00:00Z",
  "Author": "Konstantin Bogomolov"
}