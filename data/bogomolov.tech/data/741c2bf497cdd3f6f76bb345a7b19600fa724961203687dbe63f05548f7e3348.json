{
  "Source": "bogomolov.tech",
  "Title": "How to get HTTPS working on localhost",
  "Link": "https://bogomolov.tech/localhost-https/",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cp\u003eThis is a complete tutorial on how to get HTTPS working on localhost or any local domains. The main part is about manual SSL certificate creation. It is worth to now almost low-level details. If you need just a quick and easy setup, go to the end of the article where you will find other solutions.\u003c/p\u003e\u003cp\u003eWhat is this tutorial about:\u003c/p\u003e\u003cul\u003e\u003cli\u003eHow to set up local a domain\u003c/li\u003e\u003cli\u003eHow to create a self-signed SSL certificate (or more accurately, TLS certificate)\u003c/li\u003e\u003cli\u003eHow to configure Nginx to use an SSL certificate\u003c/li\u003e\u003cli\u003eHow to run Nginx with HTTPS configured in a Docker container using docker-compose\u003c/li\u003e\u003cli\u003eSolutions without manual certificate creation\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eI am using Linux so this tutorial is for Linux OS. If you use Windows, you can run the same commands using the Git Bash emulator or WSL (Windows Subsystem for Linux). Though I didn’t try it, some commands may not work. Anyway, the setup path is the same. Only commands may differ.\u003c/p\u003e\u003cp\u003eWe will use Docker with docker-compose and Nginx at the end to test if HTTPS works.\u003c/p\u003e\u003ch2 id=\"Why-you-might-need-an-HTTPS-for-local-domain\"\u003e\u003ca href=\"#Why-you-might-need-an-HTTPS-for-local-domain\" class=\"headerlink\" title=\"Why you might need an HTTPS for local domain\"\u003e\u003c/a\u003eWhy you might need an HTTPS for local domain\u003c/h2\u003e\u003cp\u003eThere are some reasons you might need to have HTTPS enabled for local domain:\u003c/p\u003e\u003cul\u003e\u003cli\u003eYou may need it to implement OAuth. For example, if you’re implementing \u003ca href=\"/Facebook-Log-Id-Symfony/\"\u003eFacebook login\u003c/a\u003e button on your website, it requires HTTPS to test it locally\u003c/li\u003e\u003cli\u003eIf you have a local domain configured in the “hosts” file, and you want to test Service worker locally\u003c/li\u003e\u003cli\u003eCheck if your web app redirects work as expected\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Set-up-a-local-domain\"\u003e\u003ca href=\"#Set-up-a-local-domain\" class=\"headerlink\" title=\"Set up a local domain\"\u003e\u003c/a\u003eSet up a local domain\u003c/h2\u003e\u003cp\u003eYou can use “localhost” as a domain name or create a local custom domain for development purposes. If you decide to continue with “localhost”, just skip this part and go to the next.\u003c/p\u003e\u003cp\u003eI will use “myapp.local” domain name as an example throughout the tutorial. You can use any domain you want.\u003c/p\u003e\u003cp\u003eTo create a local domain you need to add a new record to the “hosts” file.\u003c/p\u003e\u003cp\u003eOpen “/etc/hosts” file using “nano” or “vim” editor. In most cases, you will need to add “sudo” to have permission to edit and save the file. I am using “nano” editor in the command below.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs plain\"\u003esudo nano /etc/hosts\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAdd a new line with a domain name you want.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e127.0.0.1       myapp.local\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis will map “myapp.local” domain (or any domain name you chose) to 127.0.0.1 IP. This IP is mapped to localhost in the same file.\u003c/p\u003e\u003cp\u003eSave and close the editor. Now when you start the Nginx server (i.e. if you use Docker from this tutorial), you can use myapp.local domain in the address bar in the browser.\u003c/p\u003e\u003ch2 id=\"Create-Root-self-signed-SSL-certificate\"\u003e\u003ca href=\"#Create-Root-self-signed-SSL-certificate\" class=\"headerlink\" title=\"Create Root self-signed SSL certificate\"\u003e\u003c/a\u003eCreate Root self-signed SSL certificate\u003c/h2\u003e\u003cp\u003eYou can use a root certificate to create any number of local certificates. Place root certificate in the project folder or in any global folder to reuse it for any local project.\u003c/p\u003e\u003cp\u003eI created a new folder “local-root-ca” in the user’s home directory.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003emkdir ~/\u003cspan class=\"hljs-built_in\"\u003elocal\u003c/span\u003e-root-ca\n\u003cspan class=\"hljs-built_in\"\u003ecd\u003c/span\u003e ~/\u003cspan class=\"hljs-built_in\"\u003elocal\u003c/span\u003e-root-ca\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eRun “genrsa” command in that folder to create a private RSA key.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003eopenssl genrsa -des3 -out rootCA.key 2048\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen create self-signed root CA (Certificate authority) certificate with the command below.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003eopenssl req -x509 -new -nodes -key rootCA.key -sha256 -days 1024 -out rootCA.pem\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe “req” command creates a self-signed certificate for use as root CA.\u003c/p\u003e\u003cp\u003eYou will be prompted to enter some certificate information. I used all default so just hit Enter for every prompt.\u003c/p\u003e\u003cp\u003eThe output will look like this.\u003c/p\u003e\u003cimg src=\"/localhost-https/openssl-req-output.png\" width=\"728px\" class=\"auto-width\" alt=\"OpenSSL req command output screenshot\" title=\"OpenSSL req command output screenshot\"/\u003e\u003cp\u003eThe next step is to add a self-signed root CA certificate to the trusted certificates in the browser. You will find tutorials for the Chrome and Firefox browsers below.\u003c/p\u003e\u003ch3 id=\"Add-self-signed-SSL-certificate-to-the-trusted-in-Chrome-browser\"\u003e\u003ca href=\"#Add-self-signed-SSL-certificate-to-the-trusted-in-Chrome-browser\" class=\"headerlink\" title=\"Add self-signed SSL certificate to the trusted in Chrome browser\"\u003e\u003c/a\u003eAdd self-signed SSL certificate to the trusted in Chrome browser\u003c/h3\u003e\u003cp\u003eI used version 90 of the Chrome browser.\u003c/p\u003e\u003cp\u003eGo to Settings (click three dots in the top right). Then click on the “Privacy and Security” menu on the left.\u003c/p\u003e\u003cimg src=\"/localhost-https/privacy-and-security-menu.png\" width=\"573px\" class=\"auto-width\" alt=\"Chrome Privacy and Security menu screenshot\" title=\"Chrome Privacy and Security menu screenshot\"/\u003e\u003cp\u003eChoose the “Security” menu item.\u003c/p\u003e\u003cimg src=\"/localhost-https/security-menu.png\" width=\"720px\" class=\"auto-width\" alt=\"Chrome Security menu screenshot\" title=\"Chrome Security menu screenshot\"/\u003e\u003cp\u003eThen scroll to the bottom and choose the “Manage Certificates” section in the “Advanced” section.\u003c/p\u003e\u003cimg src=\"/localhost-https/manage-certificates-menu.png\" width=\"720px\" class=\"auto-width\" alt=\"Chrome Manage Certificates menu screenshot\" title=\"Chrome Manage Certificates menu screenshot\"/\u003e\u003cp\u003eChoose the “Authority” tab and click the “Import” button.\u003c/p\u003e\u003cimg src=\"/localhost-https/authorities-tab.png\" width=\"817px\" class=\"auto-width\" alt=\"Chrome Authority tab menu screenshot\" title=\"Chrome Authority tab menu screenshot\"/\u003e\u003cp\u003eThen choose your previously created “rootCA.pem” file.\u003c/p\u003e\u003cp\u003eCheck at least “Trust this certificate for identifying websites” and click OK.\u003c/p\u003e\u003cimg src=\"/localhost-https/trust-for-websites.png\" width=\"566px\" class=\"auto-width\" alt=\"Chrome Trust this certificate screenshot\" title=\"Chrome Trust this certificate screenshot\"/\u003e\u003cp\u003eThat’s it. Now the Chrome browser trusts your certificates we will create lately.\u003c/p\u003e\u003ch3 id=\"Add-self-signed-SSL-certificate-to-the-trusted-in-Firefox-browser\"\u003e\u003ca href=\"#Add-self-signed-SSL-certificate-to-the-trusted-in-Firefox-browser\" class=\"headerlink\" title=\"Add self-signed SSL certificate to the trusted in Firefox browser\"\u003e\u003c/a\u003eAdd self-signed SSL certificate to the trusted in Firefox browser\u003c/h3\u003e\u003cp\u003eI used version 88 of the Firefox browser.\u003c/p\u003e\u003cp\u003eGo to Preferences (click on the hamburger menu in the top right first). Then click on the “Privacy \u0026amp; Security” menu item on the left.\u003c/p\u003e\u003cimg src=\"/localhost-https/ff-privacy-security.png\" width=\"270px\" class=\"auto-width\" alt=\"Firefox Privacy \u0026amp; Security menu screenshot\" title=\"Firefox Privacy \u0026amp; Security menu screenshot\"/\u003e\u003cp\u003eScroll down and find the “Security” section, and the “View Certificates” button here. Click it.\u003c/p\u003e\u003cimg src=\"/localhost-https/ff-view-certificates.png\" width=\"841px\" class=\"auto-width\" alt=\"Firefox Privacy \u0026amp; Security menu screenshot\" title=\"Firefox Privacy \u0026amp; Security menu screenshot\"/\u003e\u003cp\u003eChoose the “Authorities” tab and click the “Import” button. Find your previously created “rootCA.pem” file and choose it.\u003c/p\u003e\u003cimg src=\"/localhost-https/ff-import-certificate.png\" width=\"752px\" class=\"auto-width\" alt=\"Firefox Authorities tab screenshot\" title=\"Firefox Authorities tab screenshot\"/\u003e\u003cp\u003eIn the next dialog check at least “Trust this CA to identify websites”. Then click the “Ok” button.\u003c/p\u003e\u003cimg src=\"/localhost-https/ff-trust-websites.png\" width=\"668px\" class=\"auto-width\" alt=\"Firefox Downloading certificate dialog screenshot\" title=\"Firefox Downloading certificate dialog screenshot\"/\u003e\u003cp\u003eThat’s it. Now Firefox browser trusts your certificates we will create lately.\u003c/p\u003e\u003ch2 id=\"Create-domain-SSL-certificates-common-configuration\"\u003e\u003ca href=\"#Create-domain-SSL-certificates-common-configuration\" class=\"headerlink\" title=\"Create domain SSL certificates common configuration\"\u003e\u003c/a\u003eCreate domain SSL certificates common configuration\u003c/h2\u003e\u003cp\u003ePrepare config files you will use to create domain SSL certificates. This is a one-time task. You can use it for multiple local domains lately.\u003c/p\u003e\u003cp\u003eCreate a certificate config file named “server.csr.cnf” with the content below.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs plain\"\u003e[req]\ndefault_bits = 2048\nprompt = no\ndefault_md = sha256\ndistinguished_name = dn\n\n[dn]\nC=US\nST=RandomState\nL=RandomCity\nO=RandomOrganization\nOU=RandomOrganizationUnit\n\u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"2b4e464a42476a4f4f594e5858164e534a465b474e6b4e534a465b474e05484446\"\u003e[email protected]\u003c/a\u003e\n\nCN = ${ENV::SSL_DOMAIN_TEMP}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eCreate an extension file named “v3.ext” with the content below.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs plain\"\u003eauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1 = ${ENV::SSL_DOMAIN_TEMP}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe will use the environment variable “SSL_DOMAIN_TEMP” here. It will be easier to reuse this config for the different domains.\u003c/p\u003e\u003ch2 id=\"Create-a-domain-SSL-certificate\"\u003e\u003ca href=\"#Create-a-domain-SSL-certificate\" class=\"headerlink\" title=\"Create a domain SSL certificate\"\u003e\u003c/a\u003eCreate a domain SSL certificate\u003c/h2\u003e\u003cp\u003eSet the domain name we want to create an SSL certificate to the environment variable “SSL_DOMAIN_TEMP”.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e SSL_DOMAIN_TEMP=myapp.local\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen create “crt” and “key” files. Both are parts of an SSL certificate. The “crt” file is a signed SSL certificate and the “key” file is a private key to it.\u003c/p\u003e\u003cp\u003eCreate a “key” file command.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003eopenssl req -new -sha256 -nodes -out server.csr -newkey rsa:2048 -keyout server.key -config \u0026lt;( cat server.csr.cnf )\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eCreate a “crt” file command.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003eopenssl x509 -req -\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out server.crt -days 500 -sha256 -extfile v3.ext\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eCreate new folder “certificates”. It might be in the project folder if you will use Docker Compose. Or in any folder, if you use Nginx without Docker.\u003c/p\u003e\u003cp\u003eThen copy domain SSL certificate files (“server.crt” and “server.key”) to the new folder. File “server.csr” can be deleted.\u003c/p\u003e\u003ch2 id=\"Nginx-HTTPS-configuration-sample\"\u003e\u003ca href=\"#Nginx-HTTPS-configuration-sample\" class=\"headerlink\" title=\"Nginx HTTPS configuration sample\"\u003e\u003c/a\u003eNginx HTTPS configuration sample\u003c/h2\u003e\u003cp\u003eIf you’re using Docker from this tutorial, you need to create an Nginx configuration file. Create a new file “default.conf” in the project folder.\u003c/p\u003e\u003cp\u003eHere is the basic Nginx configuration for localhost with HTTPS enabled.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs plain\"\u003eserver {\n    server_name _;\n    \n    listen 80 default_server;\n    listen 443 ssl;\n\n    ssl_certificate      /var/server.crt;\n    ssl_certificate_key  /var/server.key;\n\n    location / {\n        root   /usr/share/nginx/html/;\n        index  index.html index.htm;\n    }\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf you don’t use Docker, then use this config as a base for your local Nginx configuration.\u003c/p\u003e\u003ch2 id=\"Run-Nginx-using-Docker-Compose\"\u003e\u003ca href=\"#Run-Nginx-using-Docker-Compose\" class=\"headerlink\" title=\"Run Nginx using Docker Compose\"\u003e\u003c/a\u003eRun Nginx using Docker Compose\u003c/h2\u003e\u003cp\u003eYou can skip this part if you don’t use Docker.\u003c/p\u003e\u003cp\u003eCreate the “docker-compose.yml” file in the project directory. We already have folder “certificates” here.\u003c/p\u003e\u003cp\u003eFill docker-compose.yml with the content below.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs yaml\"\u003e\u003cspan class=\"hljs-attr\"\u003eversion:\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0026#39;3\u0026#39;\u003c/span\u003e\n\n\u003cspan class=\"hljs-attr\"\u003eservices:\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003enginx:\u003c/span\u003e\n        \u003cspan class=\"hljs-attr\"\u003eimage:\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003enginx:alpine\u003c/span\u003e\n        \u003cspan class=\"hljs-attr\"\u003eports:\u003c/span\u003e\n            \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-string\"\u003e:80\u003c/span\u003e\n            \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e443\u003c/span\u003e\u003cspan class=\"hljs-string\"\u003e:443\u003c/span\u003e\n        \u003cspan class=\"hljs-attr\"\u003evolumes:\u003c/span\u003e\n            \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e./default.conf:/etc/nginx/conf.d/default.conf\u003c/span\u003e\n            \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e./certificates/server.crt:/var/server.crt\u003c/span\u003e\n            \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e./certificates/server.key:/var/server.key\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere we are:\u003c/p\u003e\u003cul\u003e\u003cli\u003ecreate a simple Nginx container from the lightweight Alpine image\u003c/li\u003e\u003cli\u003emap 80 (HTTP) and 443 (HTTPS) ports from the container\u003c/li\u003e\u003cli\u003emount Nginx config and SSL certificate inside the Docker container\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIf you have another web server running, Docker can’t map ports 80 and 443. So either stop web server or change mapped ports, like “-81:80”. In this case, you will test the website using a URL with a port, i.e. \u003ca href=\"http://localhost:81\" target=\"_blank\" rel=\"noopener\"\u003ehttp://localhost:81\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"Test-if-localhost-with-HTTPS-works\"\u003e\u003ca href=\"#Test-if-localhost-with-HTTPS-works\" class=\"headerlink\" title=\"Test if localhost with HTTPS works\"\u003e\u003c/a\u003eTest if localhost with HTTPS works\u003c/h2\u003e\u003cp\u003eAll steps completed. Now we can run the Docker container and check if HTTPS works.\u003c/p\u003e\u003cp\u003eStart Docker container. Run the command below from the project folder.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003edocker-compose up\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWait for the container to start and go to the browser. Enter URL \u003ca href=\"https://myapp.local\" target=\"_blank\" rel=\"noopener\"\u003ehttps://myapp.local\u003c/a\u003e or any domain you used in the configuration. You will the website has a secure connection in the browser.\u003c/p\u003e\u003cimg src=\"/localhost-https/result.png\" width=\"720px\" class=\"auto-width\" alt=\"Localhost HTTPS secure connection screenshot\" title=\"Localhost HTTPS secure connection screenshot\"/\u003e\u003ch2 id=\"Solutions-without-manual-certificate-creation\"\u003e\u003ca href=\"#Solutions-without-manual-certificate-creation\" class=\"headerlink\" title=\"Solutions without manual certificate creation\"\u003e\u003c/a\u003eSolutions without manual certificate creation\u003c/h2\u003e\u003cp\u003eAs I promised, here are simple solutions to use. Choose any.\u003c/p\u003e\u003cul\u003e\u003cli\u003eUse \u003ca href=\"https://github.com/FiloSottile/mkcert\" target=\"_blank\" rel=\"noopener\"\u003emkcert\u003c/a\u003e utility to automate the whole process described above\u003c/li\u003e\u003cli\u003eUse \u003ca href=\"https://caddyserver.com/\" target=\"_blank\" rel=\"noopener\"\u003eCaddy\u003c/a\u003e web server with automatic HTTPS\u003c/li\u003e\u003cli\u003eUse \u003ca href=\"https://ngrok.com/\" target=\"_blank\" rel=\"noopener\"\u003engrok\u003c/a\u003e to expose local server to the public URL with HTTPS\u003c/li\u003e\u003c/ul\u003e\u003cbr/\u003e\u003cdiv class=\"related-posts\"\u003e\u003chr/\u003e\u003ch3\u003eRelated posts:\u003c/h3\u003e\u003cul class=\"popular-posts\"\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Facebook-Log-Id-Symfony/\" title=\"Implement Facebook login button with Symfony\" rel=\"bookmark\"\u003eImplement Facebook login button with Symfony\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Basics-of-sound/\" title=\"Beat detection in Java for Android\" rel=\"bookmark\"\u003eBeat detection in Java for Android\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Nodejs-production-systemd/\" title=\"How to manage Nodejs process using systemd\" rel=\"bookmark\"\u003eHow to manage Nodejs process using systemd\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Telegram-notification-on-SSH-login/\" title=\"Send message to Telegram on any SSH login\" rel=\"bookmark\"\u003eSend message to Telegram on any SSH login\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/What-is-Big-O-notation/\" title=\"What is Big-O notation\" rel=\"bookmark\"\u003eWhat is Big-O notation\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv id=\"comment-container\"\u003e\u003c/div\u003e\u003cdiv id=\"disqus_thread\"\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2021-05-07T00:00:00Z",
  "Author": "Konstantin Bogomolov"
}