{
  "Source": "bogomolov.tech",
  "Title": "Setting up a blog with Hexo \u0026 GitLab Pages - A step-by-step guide",
  "Link": "https://bogomolov.tech/how-this-blog-created/",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cp\u003eWelcome to the comprehensive blog post where we will take you on an exciting journey to create your very own website using a static website generator and free web hosting. Don’t worry if you’re new to programming, we’ll guide you every step of the way.\u003c/p\u003e\u003cp\u003eIn this tutorial, we will be using the powerful, simple and user-friendly blog framework called \u003ca href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\"\u003eHexo\u003c/a\u003e. Combined with \u003ca href=\"https://docs.gitlab.com/ee/user/project/pages/\" target=\"_blank\" rel=\"noopener\"\u003eGitLab Pages\u003c/a\u003e, a free hosting platform offering HTTPS support and the ability to use a custom domain, your website will have a professional and secure online presence. To bring our vision to life, we’ll leverage the capabilities of \u003ca href=\"https://nodejs.org\" target=\"_blank\" rel=\"noopener\"\u003eNode.js\u003c/a\u003e and \u003ca href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\"\u003eGit\u003c/a\u003e, two essential tools in the web development world.\u003c/p\u003e\u003cp\u003eSo, whether you’re an aspiring writer, a passionate blogger, or a business owner looking to establish a digital presence, this tutorial is your gateway to creating a captivating website. Let’s embark on this exciting journey together and unlock the potential of your online presence. Get ready to turn your ideas into reality as we dive into the world of website creation!\u003c/p\u003e\u003ch2 id=\"What-is-a-static-site-generator\"\u003e\u003ca href=\"#What-is-a-static-site-generator\" class=\"headerlink\" title=\"What is a static site generator\"\u003e\u003c/a\u003eWhat is a static site generator\u003c/h2\u003e\u003cp\u003eLet’s dive into the world of static websites. Unlike dynamic web pages that create new content on the every page load, static websites have pre-generated content that doesn’t change. Every time a visitor loads a page, they will receive the same pre-generated HTML page.\u003c/p\u003e\u003cp\u003eTo make these static websites, we use special tools called static site generators. One popular example is Hexo, which takes documents written in Markdown and turns them into HTML files.\u003c/p\u003e\u003cp\u003eBy using a static site generator like Hexo, you can have a website that’s efficient and consistent. It won’t change unless you want it to. So, let’s explore the magic of static websites and the power of these generators. Get ready for a journey of simplicity and captivating content!\u003c/p\u003e\u003ch2 id=\"Choose-the-best-static-website-generator\"\u003e\u003ca href=\"#Choose-the-best-static-website-generator\" class=\"headerlink\" title=\"Choose the best static website generator\"\u003e\u003c/a\u003eChoose the best static website generator\u003c/h2\u003e\u003cp\u003eWhen it comes to static site generators, the options are plentiful, making the task of selecting the best one quite challenging. Many of these generators rely on popular JavaScript frameworks like ReactJS or VueJS, which may not be familiar to everyone. However, there exists another category of generators that simplifies the process by using Markdown as the input method.\u003c/p\u003e\u003cp\u003eTo help you navigate through this diverse landscape, I’ve compiled a list of well-known static site generators along with some insightful statistics sourced from GitHub. These statistics were last updated in March 2021, and there haven’t been significant changes as of June 2023.\u003c/p\u003e\u003cp\u003eSo, without further ado, let’s explore the world of static site generators and discover which one could be the perfect fit for your needs.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\"\u003eHexo\u003c/a\u003e\u003c/p\u003e\u003cimg src=\"/how-this-blog-created/hexo-github-stats.png\" width=\"553px\" height=\"35px\" class=\"m-0 auto-width\" alt=\"Hexo GitHub stats\" title=\"Hexo GitHub stats\" loading=\"lazy\"/\u003e - used by 83.3K, 856 watchers - 32.4K stars, 10.46 avg. stars/day - 83 open issues, 3650 total issues - 152 contributors, 956 total pull requests - primary language is Javascript - last release version is 5.4.0\u003cp\u003e\u003ca href=\"https://gohugo.io/\" target=\"_blank\" rel=\"noopener\"\u003eHugo\u003c/a\u003e\u003c/p\u003e\u003cimg src=\"/how-this-blog-created/hugo-github-stats.png\" width=\"553px\" height=\"35px\" class=\"m-0 auto-width\" alt=\"Hugo GitHub stats\" title=\"Hugo GitHub stats\" loading=\"lazy\"/\u003e - used by 65K, 1059 watchers - 50.7K stars, 18.02 avg. stars/day - 592 open issues, 5223 total issues - 700 contributors, 3052 total pull requests - primary language is Go - last release version is 0.81.0\u003cp\u003e\u003ca href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noopener\"\u003eJekyll\u003c/a\u003e\u003c/p\u003e\u003cimg src=\"/how-this-blog-created/jekyll-github-stats.png\" width=\"553px\" height=\"35px\" class=\"m-0 auto-width\" alt=\"Jekyll GitHub stats\" title=\"Jekyll GitHub stats\" loading=\"lazy\"/\u003e - used by 1.1M, 1473 watchers - 42.4K stars, 9.35 avg. stars/day - 80 open issues, 4367 total issues - 949 contributors, 4060 total pull requests - primary language is Ruby - last release version 4.2.0\u003cp\u003eBased on the simple analysis of the provided statistics, Jekyll emerges as the better choice, among the various options considered. A notable observation is that Hugo’s major version number remains at 0, indicating a less mature state, and it exhibits a higher number of reported issues compared to its counterparts.\u003c/p\u003e\u003cp\u003eFor me personally, the determining factor lies in the primary language I frequently use. As I extensively utilize NodeJS in my work, opting for a static site generator built on this technology offers the advantage of familiarity and convenience. In the event of encountering any bugs or desiring to extend the functionality through the utilization of plugins, the NodeJS ecosystem seamlessly supports these endeavors.\u003c/p\u003e\u003cp\u003eConsidering these factors, my preference ultimately lands on Hexo as the chosen static site generator. Its alignment with NodeJS aligns harmoniously with my workflow and ensures a smooth and hassle-free experience when it comes to both troubleshooting and expanding the website’s capabilities.\u003c/p\u003e\u003ch2 id=\"Hexo-installation\"\u003e\u003ca href=\"#Hexo-installation\" class=\"headerlink\" title=\"Hexo installation\"\u003e\u003c/a\u003eHexo installation\u003c/h2\u003e\u003cp\u003eTo begin the journey of creating your blog with Hexo, there are a couple of prerequisites you’ll need to fulfill. First and foremost, make sure you have \u003ca href=\"https://nodejs.org\" target=\"_blank\" rel=\"noopener\"\u003eNode JS\u003c/a\u003e and \u003ca href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\"\u003eGit\u003c/a\u003e version control system installed on your machine, if they are not already present. In my case, I’m utilizing NodeJS version 18. If you desire to install a specific version of NodeJS, you can utilize \u003ca href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener\"\u003eNVM\u003c/a\u003e (Node Version Manager) to conveniently manage different NodeJS versions.\u003c/p\u003e\u003cp\u003eOnce you have Node JS and Git set up, the next step is to install Hexo globally on your system. You can accomplish this by executing the following command, which will install the hexo-cli package:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003enpm install -g hexo-cli\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFor the purpose of this tutorial, I will be using Hexo-cli version 4.3.1 and Hexo version 6.3.0 (tutorial updated in June 2023).\u003c/p\u003e\u003ch2 id=\"Create-a-new-Project-with-Hexo\"\u003e\u003ca href=\"#Create-a-new-Project-with-Hexo\" class=\"headerlink\" title=\"Create a new Project with Hexo\"\u003e\u003c/a\u003eCreate a new Project with Hexo\u003c/h2\u003e\u003cp\u003eTo kickstart your Hexo journey, let’s begin by initializing a new Hexo project. Feel free to replace “blog” with your desired project name. Execute the following command in your terminal:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003ehexo init blog\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis command will create a new folder with the specified project name and initialize it as a Hexo project.\u003c/p\u003e\u003cp\u003eOnce the project is initialized, navigate to the newly created folder and install the project dependencies by running the following command:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e\u003cspan class=\"hljs-built_in\"\u003ecd\u003c/span\u003e blog\nnpm install\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis command will ensure that all the necessary dependencies for your Hexo project are installed. In the newest versions of Hexo, the command \u003ccode\u003enpm install\u003c/code\u003e might not be needed. However, it will not break anything, so it is better to run it in case dependencies are not installed during Hexo initialization.\u003c/p\u003e\u003cp\u003eNow, let’s create your first blog post. Use the following command to generate a simple post with your desired title:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003ehexo new post \u003cspan class=\"hljs-string\"\u003e\u0026#34;My first post title\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUpon execution, you will see the output indicating the creation of a new post file:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003eINFO  Created: /app/\u003cspan class=\"hljs-built_in\"\u003esource\u003c/span\u003e/_posts/My-first-post-title.md\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can find the newly generated post file at the specified location.\u003c/p\u003e\u003cp\u003eLet’s add some content to our first post. Copy and paste the following content into the “My-first-post-title.md” file:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs markdown\"\u003e---\ntitle: My first post title\ndate: 2023-06-11 12:00:00\n\u003cspan class=\"hljs-section\"\u003etags:\n---\u003c/span\u003e\n\u003cspan class=\"hljs-section\"\u003e# This is H1 header\u003c/span\u003e\n\nThis is content\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, let’s preview your website and post by running the Hexo server locally. Simply enter the following command in your terminal:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003ehexo server\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis command will generate your website and serve the generated files locally. You can then open your preferred browser and navigate to the provided URL (\u003ca href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\"\u003ehttp://localhost:4000\u003c/a\u003e) to see how your website and post appear. If no errors occur, you will see the following output:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003eINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTake this opportunity to explore your website and ensure everything looks as expected.\u003c/p\u003e\u003cp\u003eCongratulations! Your simple Hexo website is now ready to be deployed. You can refer to the Hexo \u003ca href=\"https://hexo.io/docs/index.html\" target=\"_blank\" rel=\"noopener\"\u003edocumentation\u003c/a\u003e for further information. Alternatively, if you need help with any specific commands, you can use the hexo help command in your terminal to access a list of available commands.\u003c/p\u003e\u003cp\u003eIn the next section, we will continue with the deployment process to GitLab Pages.\u003c/p\u003e\u003ch2 id=\"What-is-GitLab-Pages\"\u003e\u003ca href=\"#What-is-GitLab-Pages\" class=\"headerlink\" title=\"What is GitLab Pages\"\u003e\u003c/a\u003eWhat is GitLab Pages\u003c/h2\u003e\u003cp\u003eWhen it comes to hosting your static website, GitLab Pages emerges as a convenient and user-friendly option. What sets it apart from traditional hosting services is its seamless integration with your GitLab repository, enabling you to publish your website directly from the repository itself.\u003c/p\u003e\u003cp\u003eIn this tutorial, we will utilize GitLab Pages as our chosen hosting solution, leveraging its free web hosting capabilities. Not only will you be able to host your website without incurring any costs, but we will also delve into the process of configuring GitLab Pages to utilize a custom domain and ensure HTTPS encryption for enhanced security.\u003c/p\u003e\u003cp\u003eWhile GitLab Pages takes center stage in our tutorial, it’s worth mentioning an alternative option that you may find interesting to explore: \u003ca href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\"\u003eGitHub Pages\u003c/a\u003e. Both GitLab Pages and GitHub Pages provide similar functionality, allowing you to host your static website effortlessly. The choice ultimately depends on your preferences and the specific requirements of your project.\u003c/p\u003e\u003ch2 id=\"Create-a-new-GitLab-repository\"\u003e\u003ca href=\"#Create-a-new-GitLab-repository\" class=\"headerlink\" title=\"Create a new GitLab repository\"\u003e\u003c/a\u003eCreate a new GitLab repository\u003c/h2\u003e\u003cp\u003eLet’s create a new repository (blank project) on the \u003ca href=\"https://gitlab.com/\" target=\"_blank\" rel=\"noopener\"\u003eGitLab website\u003c/a\u003e. Once you have created the repository, navigate to your project folder and initialize a Git repository locally using the following command:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003egit init\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis command sets up a local Git repository within your project folder, allowing you to manage version control for your files.\u003c/p\u003e\u003cp\u003eNext, you need to connect your local repository to the remote GitLab repository you just created. To do this, run the following command:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003egit remote add origin \u0026lt;your_repository_link\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eReplace \u0026lt;your_repository_link\u0026gt; with the URL of your GitLab repository. You can obtain this link from the GitLab website by navigating to your repository and scrolling down to the “Push an existing folder” section. There, you will find the necessary commands listed. Simply copy the command provided and execute it in your terminal.\u003c/p\u003e\u003cp\u003eTo give you an example, here is a screenshot of the commands from my test repository on GitLab:\u003c/p\u003e\u003cimg src=\"/how-this-blog-created/repository-initialization.png\" width=\"772px\" height=\"142px\" class=\"auto-width border\" alt=\"GitLab initialization commands\" title=\"GitLab initialization commands\" loading=\"lazy\"/\u003e\u003cp\u003eWith the Git repository now configured, let’s proceed to the next step, which involves setting up the deployment configuration for your website.\u003c/p\u003e\u003ch2 id=\"Add-GitLab-Deployment-Configuration-to-the-Project\"\u003e\u003ca href=\"#Add-GitLab-Deployment-Configuration-to-the-Project\" class=\"headerlink\" title=\"Add GitLab Deployment Configuration to the Project\"\u003e\u003c/a\u003eAdd GitLab Deployment Configuration to the Project\u003c/h2\u003e\u003cp\u003eMoving on, let’s move towards preparing a deployment configuration for your Hexo website.\u003c/p\u003e\u003cp\u003eSince Hexo is a static website generator, it doesn’t store the generated HTML files directly in the Git repository. Consequently, we need to ensure that the files are regenerated each time there is an update to the website.\u003c/p\u003e\u003cp\u003eTo achieve this, we will leverage the power of GitLab’s Continuous Delivery (CD) tool. With GitLab CD, static files will be automatically generated on the GitLab side whenever you push updates to the remote repository.\u003c/p\u003e\u003cp\u003eTo initiate the deployment configuration, create a new file named .gitlab-ci.yml at the root of your project. You can easily add this file by following the steps below:\u003c/p\u003e\u003cp\u003eOpen a text editor of your choice I prefer \u003ca href=\"https://www.jetbrains.com/webstorm/\" target=\"_blank\" rel=\"noopener\"\u003eJetbrains\u003c/a\u003e products. If you need a fee editor, I suggest you to use \u003ca href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\"\u003eVisual Studio Code\u003c/a\u003e.\u003cbr/\u003eCreate a new file and save it as .gitlab-ci.yml.\u003cbr/\u003eCopy and paste the following content into the file:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs yaml\"\u003e\u003cspan class=\"hljs-attr\"\u003eimage:\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003enode:18\u003c/span\u003e\n\u003cspan class=\"hljs-attr\"\u003ecache:\u003c/span\u003e\n  \u003cspan class=\"hljs-attr\"\u003epaths:\u003c/span\u003e\n    \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003enode_modules/\u003c/span\u003e\n\n\u003cspan class=\"hljs-attr\"\u003ebefore_script:\u003c/span\u003e\n  \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003enpm\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003einstall\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003ehexo-cli\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e-g\u003c/span\u003e\n  \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003enpm\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003einstall\u003c/span\u003e\n\n\u003cspan class=\"hljs-attr\"\u003epages:\u003c/span\u003e\n  \u003cspan class=\"hljs-attr\"\u003escript:\u003c/span\u003e\n    \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003ehexo\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003egenerate\u003c/span\u003e\n  \u003cspan class=\"hljs-attr\"\u003eartifacts:\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003epaths:\u003c/span\u003e\n      \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003epublic\u003c/span\u003e\n  \u003cspan class=\"hljs-attr\"\u003eonly:\u003c/span\u003e\n    \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003emaster\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis configuration file specifies the steps that GitLab will perform during the deployment process. In this case, it instructs GitLab to execute the hexo generate command, which regenerates the static files for your Hexo website. The generated files will be stored in the public folder.\u003c/p\u003e\u003cp\u003eHere is a simple explanation for some parameters:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eimage\u003c/code\u003e - here we specify Docker image. \u003ccode\u003enode:18\u003c/code\u003e is the official \u003ca href=\"https://hub.docker.com/_/node/\" target=\"_blank\" rel=\"noopener\"\u003eNode JS Docker image\u003c/a\u003e with NodeJS version 18\u003c/li\u003e\u003cli\u003e\u003ccode\u003ecache:path:\u003c/code\u003e - contains a folder to cache between jobs\u003c/li\u003e\u003cli\u003e\u003ccode\u003ebefore_script\u003c/code\u003e - contains scripts we want to run before any job\u003c/li\u003e\u003cli\u003e\u003ccode\u003epages\u003c/code\u003e - contains job configuration\u003c/li\u003e\u003cli\u003e\u003ccode\u003epages:script\u003c/code\u003e - script to run in the job. We will generate static pages with Hexo here\u003c/li\u003e\u003cli\u003e\u003ccode\u003eartifacts:paths\u003c/code\u003e - this folder with a generated website will be hosted at GitLab Pages and will be available in GitLab UI after the job finishes\u003c/li\u003e\u003cli\u003e\u003ccode\u003eonly\u003c/code\u003e - conditions to run jobs, i.e. run this job only on the master branch\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eBy following these steps and adding the provided content to your .gitlab-ci.yml file, you will have set up the necessary deployment configuration for your Hexo website on GitLab.\u003c/p\u003e\u003cp\u003eReference:\u003cbr/\u003e\u003ca href=\"https://hexo.io/docs/gitlab-pages\" target=\"_blank\" rel=\"noopener\"\u003eActual Hexo config\u003c/a\u003e\u003cbr/\u003e\u003ca href=\"https://docs.gitlab.com/ee/ci/yaml/README.html\" target=\"_blank\" rel=\"noopener\"\u003eActual GitLab yaml reference\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"Save-commit-your-Project\"\u003e\u003ca href=\"#Save-commit-your-Project\" class=\"headerlink\" title=\"Save (commit) your Project\"\u003e\u003c/a\u003eSave (commit) your Project\u003c/h2\u003e\u003cp\u003eBefore we proceed with the deployment process, it’s important to save the changes you’ve made to your local repository by committing them. Committing allows you to capture the current state of your project and serves as a way to track and manage your modifications effectively.\u003c/p\u003e\u003cp\u003eTo commit your changes, follow the commands below in your terminal:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003egit add --all\ngit commit -m \u003cspan class=\"hljs-string\"\u003e\u0026#34;Commit message, describing your changes\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe first command, \u003ccode\u003egit add --all\u003c/code\u003e, stages all the changes you’ve made, including new files, modified files, and deleted files. This prepares them for the commit.\u003c/p\u003e\u003cp\u003eThe second command, \u003ccode\u003egit commit -m \u0026#34;Commit message, describing your changes\u0026#34;\u003c/code\u003e, creates a commit with a descriptive message that summarizes the changes you’ve made. It’s essential to provide a meaningful and concise message to help you and other collaborators understand the purpose of the commit.\u003c/p\u003e\u003cp\u003eOnce you’ve committed your changes, you’re now ready to proceed with the deployment process. In the next steps, we will set up the GitLab project to ensure that your website is hosted and made accessible to others.\u003c/p\u003e\u003ch2 id=\"Enable-GitLab-Runners\"\u003e\u003ca href=\"#Enable-GitLab-Runners\" class=\"headerlink\" title=\"Enable GitLab Runners\"\u003e\u003c/a\u003eEnable GitLab Runners\u003c/h2\u003e\u003cp\u003eGitLab Runners play a vital role in executing build and deployment jobs within the GitLab CI/CD pipeline. These runners are standalone applications that are responsible for processing the tasks associated with your projects, such as building, testing, and deploying your code.\u003c/p\u003e\u003cp\u003eTo enable the shared runners in GitLab and ensure that your build and deployment jobs can be executed, follow the steps below:\u003c/p\u003e\u003col\u003e\u003cli\u003eNavigate to your GitLab project’s Settings and select CI/CD.\u003c/li\u003e\u003cli\u003eUnder the CI/CD settings, locate the Shared Runners section and click on Expand.\u003c/li\u003e\u003cli\u003eCheck if the Shared Runners option is already enabled. If it is disabled, toggle the switch to enable it.\u003c/li\u003e\u003cli\u003eEnabling shared runners allows your project to utilize the available GitLab runners, which are responsible for running your build and deployment jobs.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eHere is a visual representation of the option to enable shared runners in GitLab:\u003c/p\u003e\u003cp\u003eEnabling Shared Runners in GitLab:\u003c/p\u003e\u003cimg src=\"/how-this-blog-created/enable-runners.png\" width=\"449px\" height=\"52px\" class=\"auto-width border\" alt=\"GitLab Enable runners switch\" title=\"GitLab Enable runners switch\" loading=\"lazy\"/\u003e\u003cp\u003eBy enabling shared runners, you ensure that your build and deployment jobs can be executed using the available GitLab runners, facilitating the smooth execution of your project’s CI/CD pipeline.\u003c/p\u003e\u003ch2 id=\"Upload-your-website-to-GitLab\"\u003e\u003ca href=\"#Upload-your-website-to-GitLab\" class=\"headerlink\" title=\"Upload your website to GitLab\"\u003e\u003c/a\u003eUpload your website to GitLab\u003c/h2\u003e\u003cp\u003eTo deploy your changes and update your website on GitLab Pages, follow these steps.\u003c/p\u003e\u003col\u003e\u003cli\u003eUpload your local changes to the remote repository by running the push command:\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003egit push -u origin master\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis command will push your local changes to the master branch of your GitLab repository.\u003c/p\u003e\u003col start=\"2\"\u003e\u003cli\u003eOnce the changes are pushed, GitLab’s Continuous Delivery (CD) system will automatically generate the static files and update your website. You can monitor the progress of this process by navigating to your project’s Settings and selecting either Pipelines or Jobs. Here, you will be able to see the running job related to the deployment process.\u003c/li\u003e\u003c/ol\u003e\u003cimg src=\"/how-this-blog-created/running-pipeline.png\" width=\"772px\" height=\"144px\" class=\"auto-width border\" alt=\"GitLab running pipeline example\" title=\"GitLab running pipeline example\" loading=\"lazy\"/\u003e\u003cp\u003eDepending on the complexity of your website and the size of the changes, it may take some time for the deployment process to complete. In some cases, it can take up to 30 minutes for the site to become available after the initial deployment.\u003c/p\u003e\u003col start=\"3\"\u003e\u003cli\u003eOnce the deployment process is finished, your website should be accessible via your custom domain. You can also check the availability of your website by visiting the URLs provided in the Settings section of your GitLab project under Pages. See the section below on how to set up your custom domain.\u003c/li\u003e\u003c/ol\u003e\u003cimg src=\"/how-this-blog-created/website-pages-urls.png\" width=\"772px\" height=\"147px\" class=\"auto-width border\" alt=\"GitLab Pages available urls\" title=\"GitLab Pages available urls\" loading=\"lazy\"/\u003e\u003cp\u003eBy following these steps, you can ensure that your changes are successfully deployed to GitLab Pages and that your website is updated accordingly.\u003c/p\u003e\u003ch2 id=\"Create-a-Page-on-GitLab\"\u003e\u003ca href=\"#Create-a-Page-on-GitLab\" class=\"headerlink\" title=\"Create a Page on GitLab\"\u003e\u003c/a\u003eCreate a Page on GitLab\u003c/h2\u003e\u003cp\u003eTo configure your GitLab project for deployment and make your website accessible, follow the steps below:\u003c/p\u003e\u003col\u003e\u003cli\u003eOpen your GitLab repository and navigate to the Operate tab. From there, select Pages.\u003c/li\u003e\u003cli\u003eIn the Pages settings, ensure that the checkbox labeled “Force HTTPS” is checked. Enabling this option ensures that your website will be served securely over HTTPS.\u003c/li\u003e\u003cli\u003eNext, click the New Domain button to add your custom domain. Enter your desired domain name in the provided field. This allows you to access your website using your own domain instead of the default GitLab Pages URL.\u003c/li\u003e\u003cli\u003eTo make your page available to everyone, go to the Settings tab once again and select General. From there, click on Visibility, project features, permissions.\u003c/li\u003e\u003cli\u003eIn the configuration options, locate the section related to Pages and change the settings to Everyone. This ensures that your website is accessible to all visitors.\u003cbr/\u003eTo assist you in visualizing the steps, here are two screenshots showcasing the respective settings:\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eAdding a new domain in GitLab Pages:\u003c/p\u003e\u003cimg src=\"/how-this-blog-created/adding-domain.png\" width=\"805px\" height=\"324px\" class=\"auto-width border\" alt=\"GitLab Pages New Domain\" title=\"GitLab Pages New Domain\" loading=\"lazy\"/\u003e\u003cp\u003eSetting the visibility of your GitLab Pages:\u003c/p\u003e\u003cimg src=\"/how-this-blog-created/pages-visibility.png\" width=\"772px\" height=\"90px\" class=\"auto-width border\" alt=\"GitLab Pages visibility\" title=\"GitLab Pages visibility\" loading=\"lazy\"/\u003e\u003cp\u003eBy following these steps and adjusting the necessary settings, you will successfully configure your GitLab project for deployment and make your website available to a broader audience.\u003c/p\u003e\u003ch2 id=\"Set-up-DNS-records\"\u003e\u003ca href=\"#Set-up-DNS-records\" class=\"headerlink\" title=\"Set up DNS records\"\u003e\u003c/a\u003eSet up DNS records\u003c/h2\u003e\u003cp\u003eTo configure the DNS records for your domain and ensure it is properly connected to GitLab Pages, follow these steps:\u003c/p\u003e\u003col\u003e\u003cli\u003eBegin by adding a TXT record in your domain’s DNS configuration. This record is required to verify domain ownership. Refer to your domain registrar or DNS provider’s documentation on how to add a new DNS record. Enter the necessary values provided by GitLab to complete the verification process.\u003c/li\u003e\u003cli\u003eNext, add an A record to map your domain to GitLab Pages. The IP address to use is 35.185.44.232. This allows requests to your domain to be directed to GitLab Pages and serve your website.\u003c/li\u003e\u003cli\u003eIt’s important to note that the IP address for GitLab Pages may change, so it’s recommended to check the \u003ca href=\"https://docs.gitlab.com/ee/user/project/pages/custom_domains_ssl_tls_certification/index.html#for-root-domains\" target=\"_blank\" rel=\"noopener\"\u003eGitLab Pages documentation\u003c/a\u003e for the most up-to-date IP address.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eTo help you visualize the process, here are examples of how it looks in the Cloudflare Admin panel for adding the TXT and A records:\u003c/p\u003e\u003cp\u003eAdding a TXT record in Cloudflare:\u003c/p\u003e\u003cimg src=\"/how-this-blog-created/cloudflare-txt-record.png\" width=\"772px\" height=\"27px\" class=\"auto-width border m-0 mt-2\" alt=\"CloudFlare DNS GitLab Pages TXT record example\" title=\"CloudFlare DNS GitLab Pages TXT record example\" loading=\"lazy\"/\u003e\u003cp\u003eAdding an A record in Cloudflare:\u003c/p\u003e\u003cimg src=\"/how-this-blog-created/cloudflare-a-record.png\" width=\"772px\" height=\"27px\" class=\"auto-width border m-0 mb-2\" alt=\"CloudFlare DNS GitLab Pages A record example\" title=\"CloudFlare DNS GitLab Pages A record example\" loading=\"lazy\"/\u003e\u003cp\u003eBy following these steps and configuring the necessary DNS records, you will successfully connect your domain to GitLab Pages and make your website accessible under your custom domain.\u003c/p\u003e\u003ch2 id=\"Preview-Your-Website\"\u003e\u003ca href=\"#Preview-Your-Website\" class=\"headerlink\" title=\"Preview Your Website\"\u003e\u003c/a\u003ePreview Your Website\u003c/h2\u003e\u003cp\u003eOpen it in the browser and take a look to ensure that everything is functioning correctly and appears as expected.\u003c/p\u003e\u003cp\u003eIf you have successfully completed all the steps outlined above, you will now have the satisfaction of seeing your website come to life. Congratulations on your accomplishment! Your hard work has paid off, and you now have a fully functional website that is ready to be explored by visitors from around the world.\u003c/p\u003e\u003cp\u003eThe journey doesn’t end here though. With your website up and running, you have the exciting opportunity to create engaging content and share your thoughts, ideas, and stories with your audience. Take advantage of the knowledge you have gained and leverage the steps mentioned earlier to write captivating blog posts. You can easily upload your newly created content by following the same steps outlined throughout this tutorial.\u003c/p\u003e\u003cp\u003eEmbrace this moment and embark on your blogging journey with confidence. The possibilities are endless, and your website is the canvas for your creativity. Happy writing and best of luck on your blogging endeavors!\u003c/p\u003e\u003ch2 id=\"What-are-the-alternatives-to-GitLab-Pages\"\u003e\u003ca href=\"#What-are-the-alternatives-to-GitLab-Pages\" class=\"headerlink\" title=\"What are the alternatives to GitLab Pages\"\u003e\u003c/a\u003eWhat are the alternatives to GitLab Pages\u003c/h2\u003e\u003cp\u003eIn the realm of hosting options for static websites, there are plenty of alternatives to GitLab Pages exists, each with its own unique features and advantages. Popular alternatives include GitHub Pages, Heroku, Netlify, Cloudflare Pages, and many more. While the choice of hosting service largely depends on individual preferences and project requirements, this tutorial focuses on GitLab Pages due to its initial adoption.\u003c/p\u003e\u003cp\u003eHowever, it’s important to note that over time, I have conducted extensive performance testing and optimization to identify the most suitable hosting solution. As of June 2023, I have made the decision to transition to Cloudflare Pages based on its exceptional performance and feature set.\u003c/p\u003e\u003ch2 id=\"Afterword\"\u003e\u003ca href=\"#Afterword\" class=\"headerlink\" title=\"Afterword\"\u003e\u003c/a\u003eAfterword\u003c/h2\u003e\u003cp\u003eThat brings us to the end of this tutorial. I sincerely hope you found it informative and engaging. If you encountered any challenges or have any feedback to share about the tutorial, I encourage you to reach out and let me know.\u003c/p\u003e\u003cp\u003eIf you have any questions, concerns, or simply want to share your thoughts, you can easily connect with me on \u003ca href=\"https://twitter.com/bogkonstantin/status/1667937822840430595?s=20\" target=\"_blank\" rel=\"noopener\"\u003eTwitter\u003c/a\u003e. I would love to hear from you and address any queries or issues you may have. Please feel free to leave a comment or send me a tweet describing your experience with the tutorial.\u003c/p\u003e\u003cbr/\u003e\u003cdiv class=\"related-posts\"\u003e\u003chr/\u003e\u003ch3\u003eRelated posts:\u003c/h3\u003e\u003cul class=\"popular-posts\"\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Facebook-Log-Id-Symfony/\" title=\"Implement Facebook login button with Symfony\" rel=\"bookmark\"\u003eImplement Facebook login button with Symfony\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Basics-of-sound/\" title=\"Beat detection in Java for Android\" rel=\"bookmark\"\u003eBeat detection in Java for Android\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Nodejs-production-systemd/\" title=\"How to manage Nodejs process using systemd\" rel=\"bookmark\"\u003eHow to manage Nodejs process using systemd\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Telegram-notification-on-SSH-login/\" title=\"Send message to Telegram on any SSH login\" rel=\"bookmark\"\u003eSend message to Telegram on any SSH login\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/What-is-Big-O-notation/\" title=\"What is Big-O notation\" rel=\"bookmark\"\u003eWhat is Big-O notation\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv id=\"comment-container\"\u003e\u003c/div\u003e\u003cdiv id=\"disqus_thread\"\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2019-11-09T00:00:00Z",
  "Author": "Konstantin Bogomolov"
}