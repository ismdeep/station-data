{
  "Source": "bogomolov.tech",
  "Title": "Streamline PHP Development - Deploy Laravel / Symfony Projects with Gitlab CI/CD",
  "Link": "https://bogomolov.tech/gitlab-ci-cd-symfony/",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cimg src=\"/gitlab-ci-cd-symfony/gitlab-ci-cd.jpg\" width=\"680px\" height=\"453px\" class=\"auto-width border\" alt=\"GitLab Continues Deployment tutorial\" title=\"Continues Deployment using GitLab\" loading=\"lazy\"/\u003e\u003cp\u003eAre you tired of manually deploying your PHP projects every time you make a push to the repository? Well, I’ve got some great news for you! In this post, I’ll show you how to set up an automatic deployment process using GitLab CI/CD.\u003c/p\u003e\u003cp\u003eImagine a scenario where with each push to your repository, your application automatically gets built and deployed to your remote server without any hassle. Sounds amazing, right? That’s exactly what we’ll achieve through a simple and effective configuration for the GitLab CI/CD pipeline.\u003c/p\u003e\u003cp\u003eThis configuration is designed to handle both the backend and frontend of your PHP application, making it suitable for any project based on popular frameworks like Laravel or Symfony. With GitLab CI/CD, you won’t even need to worry about installing Composer and NodeJS on your production machine. Everything will be prepared and ready for deployment.\u003c/p\u003e\u003cp\u003eBy following the steps outlined in this post, you’ll be able to streamline your development process and save valuable time and effort. So let’s dive in and discover the power of GitLab CI/CD in automating the deployment of your PHP projects!\u003c/p\u003e\u003ch3 id=\"What-is-CI-CD\"\u003e\u003ca href=\"#What-is-CI-CD\" class=\"headerlink\" title=\"What is CI/CD?\"\u003e\u003c/a\u003eWhat is CI/CD?\u003c/h3\u003e\u003cp\u003eIn the realm of modern software development, Continuous Integration (CI) and Continuous Deployment (CD) have emerged as indispensable practices.\u003c/p\u003e\u003cp\u003eContinuous Integration involves the frequent merging of code changes from multiple developers into a shared repository. By automating this process, CI ensures that all modifications are smoothly integrated, thereby detecting and resolving potential conflicts early on. This practice promotes collaboration, fosters a cohesive codebase, and reduces integration issues that may arise when working on complex projects.\u003c/p\u003e\u003cp\u003eOn the other hand, Continuous Deployment takes the automation a step further by facilitating the seamless release and deployment of software. With CD, any code change that successfully passes the integration tests can be automatically deployed to production environments. By eliminating the need for manual intervention, CD accelerates the release cycle, enabling faster time-to-market and more reliable software updates.\u003c/p\u003e\u003cp\u003eThe combination of CI and CD revolutionizes the software development lifecycle, enabling teams to continuously deliver high-quality applications with greater efficiency. By automating the integration and deployment processes, developers can focus on writing code, while the CI/CD pipeline takes care of building, testing, and deploying the application. This leads to shorter development cycles, enhanced code stability, and increased agility in responding to customer feedback and market demands.\u003c/p\u003e\u003cp\u003eIn summary, CI and CD are complementary practices that bring tremendous value to software development projects. By embracing these practices, development teams can streamline their workflows, improve collaboration, and deliver robust and reliable software at an accelerated pace.\u003c/p\u003e\u003ch3 id=\"Preparing-the-Webserver-for-Continuous-Deployment\"\u003e\u003ca href=\"#Preparing-the-Webserver-for-Continuous-Deployment\" class=\"headerlink\" title=\"Preparing the Webserver for Continuous Deployment\"\u003e\u003c/a\u003ePreparing the Webserver for Continuous Deployment\u003c/h3\u003e\u003cp\u003eTo prepare your webserver for seamless Continuous Deployment, follow these steps:\u003c/p\u003e\u003col\u003e\u003cli\u003eStart by logging into your webserver using SSH. You can either use an existing user or create a new one specifically for deployment purposes. To create a new user, execute the following command:\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003esudo adduser deployer\u003c/code\u003e\u003c/pre\u003e\u003col start=\"2\"\u003e\u003cli\u003eTo avoid the need to change file permissions every time, add the web server user (e.g., www-data) to the deployer group:\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003esudo usermod -a -G deployer www-data\u003c/code\u003e\u003c/pre\u003e\u003col start=\"3\"\u003e\u003cli\u003eCreate a new directory to host your project:\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003esudo mkdir /var/www/your_project\u003c/code\u003e\u003c/pre\u003e\u003col start=\"4\"\u003e\u003cli\u003eNext, change the owner of the project directory to the deployer user:\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003esudo chown -R deployer:deployer /var/www/your_project\u003c/code\u003e\u003c/pre\u003e\u003col start=\"5\"\u003e\u003cli\u003eIf your project requires a specific configuration file, you can place it in the newly created directory. Otherwise, you can omit the cp .env.local $CI_COMMIT_SHA/ command in the configuration steps below.\u003c/li\u003e\u003c/ol\u003e\u003col start=\"6\"\u003e\u003cli\u003eIf you don’t already have an SSH key, generate one by logging in as the deployer user:\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003esu deployer\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen, create the SSH key using the following command (remember to replace \u003ccode\u003e\u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"90f5fdf1f9fcd0f5e8f1fde0fcf5bef3fffd\"\u003e[email protected]\u003c/a\u003e\u003c/code\u003e with your actual email address):\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003essh-keygen -t ed25519 -C \u003cspan class=\"hljs-string\"\u003e\u0026#34;\u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"fb9e969a9297bb9e839a968b979ed5989496\"\u003e[email protected]\u003c/a\u003e\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003col start=\"7\"\u003e\u003cli\u003eTo enable SSH access, add the content of the public key to the authorized_keys file:\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003ecat ~/.ssh/id_rsa.pub \u0026gt;\u0026gt; ~/.ssh/authorized_keys\u003c/code\u003e\u003c/pre\u003e\u003col start=\"8\"\u003e\u003cli\u003eFinally, copy the content of the private key, as it will be needed for the GitLab configuration:\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003ecat ~/.ssh/id_rsa\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eBy following these steps, you’ll ensure that your webserver is properly set up for Continuous Deployment, allowing for smooth and efficient deployment of your project.\u003c/p\u003e\u003ch3 id=\"Setting-up-a-GitLab-repository-for-Continuous-Deployment\"\u003e\u003ca href=\"#Setting-up-a-GitLab-repository-for-Continuous-Deployment\" class=\"headerlink\" title=\"Setting up a GitLab repository for Continuous Deployment\"\u003e\u003c/a\u003eSetting up a GitLab repository for Continuous Deployment\u003c/h3\u003e\u003cp\u003eTo enable or disable GitLab CI/CD Pipelines for your project, follow these steps:\u003c/p\u003e\u003col\u003e\u003cli\u003eOpen \u003ca href=\"https://gitlab.com/\" target=\"_blank\" rel=\"noopener\"\u003eGitLab\u003c/a\u003e and navigate to your project.\u003c/li\u003e\u003cli\u003eClick on “Settings” in the sidebar menu.\u003c/li\u003e\u003cli\u003eIn the Settings page, select “General” from the tabs on the left.\u003c/li\u003e\u003cli\u003eScroll down and click on “Visibility, project features, permissions” to access the related options.\u003c/li\u003e\u003cli\u003eExpand the “Repository” section.\u003c/li\u003e\u003cli\u003eLook for the “CI/CD” toggle and enable or disable it based on your desired configuration.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eNow, let’s proceed with adding the necessary environment variables:\u003c/p\u003e\u003col\u003e\u003cli\u003eGo back to your project’s Settings.\u003c/li\u003e\u003cli\u003eThis time, select “CI/CD” from the tabs on the left.\u003c/li\u003e\u003cli\u003eScroll down to find the “Variables” section.\u003c/li\u003e\u003cli\u003eClick on the “Add Variable” button to create a new variable.\u003c/li\u003e\u003cli\u003eFor each variable, add the following details:\u003cul\u003e\u003cli\u003eVariable Key: SSH_PRIVATE_KEY\u003c/li\u003e\u003cli\u003eVariable Value: Copy the contents of the id_rsa file from the previous step.\u003c/li\u003e\u003cli\u003eVariable Key: SSH_USER\u003c/li\u003e\u003cli\u003eVariable Value: deployer (or the desired username)\u003c/li\u003e\u003cli\u003eVariable Key: SSH_HOST\u003c/li\u003e\u003cli\u003eVariable Value: Your server’s IP address\u003c/li\u003e\u003cli\u003eVariable Key: PROJECT_FOLDER\u003c/li\u003e\u003cli\u003eVariable Value: Enter the desired folder name\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003eClick on the “Add Variable” button to save each variable.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eBy configuring these environment variables, you provide essential information for your CI/CD pipeline to connect and deploy to the target server. The SSH_PRIVATE_KEY variable allows secure authentication, SSH_USER specifies the username (e.g., deployer), SSH_HOST indicates the server’s IP address, and PROJECT_FOLDER denotes the desired folder name.\u003c/p\u003e\u003cp\u003eRemember to save the settings after adding each variable. With these variables in place, your CI/CD pipeline will have the necessary information to deploy your project seamlessly.\u003c/p\u003e\u003ch3 id=\"Prepare-CI-CD-Project-Configuration\"\u003e\u003ca href=\"#Prepare-CI-CD-Project-Configuration\" class=\"headerlink\" title=\"Prepare CI/CD Project Configuration\"\u003e\u003c/a\u003ePrepare CI/CD Project Configuration\u003c/h3\u003e\u003cp\u003eTo establish a smooth and efficient CI/CD process for your project, you’ll need to create a .gitlab-ci.yml file at the root of your project directory. This file serves as the configuration blueprint for your CI/CD pipeline.\u003c/p\u003e\u003cp\u003eOpen a text editor and create a new file named “.gitlab-ci.yml”. Then, populate the file with the appropriate content based on your project’s specific requirements. Below is a sample template that you can modify as needed:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs yaml\"\u003e\u003cspan class=\"hljs-attr\"\u003eimage:\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003ebogkonstantin/php-7.4-node-12-debug:latest\u003c/span\u003e\n\n\u003cspan class=\"hljs-attr\"\u003estages:\u003c/span\u003e\n    \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003ebuild\u003c/span\u003e\n    \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003edeploy\u003c/span\u003e\n\n\u003cspan class=\"hljs-attr\"\u003ebuild:\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003estage:\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003ebuild\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003eonly:\u003c/span\u003e\n        \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003emaster\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003eartifacts:\u003c/span\u003e\n        \u003cspan class=\"hljs-attr\"\u003epaths:\u003c/span\u003e\n            \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e./\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003escript:\u003c/span\u003e\n        \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003eAPP_ENV=prod\u003c/span\u003e\n        \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003ecomposer\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003einstall\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e--no-dev\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e--optimize-autoloader\u003c/span\u003e\n        \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003eyarn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003einstall\u003c/span\u003e\n        \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003eyarn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003eencore\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003eproduction\u003c/span\u003e\n        \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003erm\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e-r\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003enode_modules\u003c/span\u003e\n        \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003emkdir\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e-p\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003evar\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003echmod\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e-R\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e777\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003evar\u003c/span\u003e\n\n\u003cspan class=\"hljs-attr\"\u003edeploy:\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003estage:\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003edeploy\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003eonly:\u003c/span\u003e\n        \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003emaster\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003ebefore_script:\u003c/span\u003e\n        \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0026#39;which ssh-agent || ( apt-get update -y \u0026amp;\u0026amp; apt-get install openssh-client -y )\u0026#39;\u003c/span\u003e\n        \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003eeval\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e$(ssh-agent\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e-s)\u003c/span\u003e\n        \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003eecho\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0026#34;$SSH_PRIVATE_KEY\u0026#34;\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e|\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003etr\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e-d\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0026#39;\\r\u0026#39;\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e|\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003essh-add\u003c/span\u003e \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e\n        \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003emkdir\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e-p\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e~/.ssh\u003c/span\u003e\n        \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003echmod\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e700\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e~/.ssh\u003c/span\u003e\n        \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0026#39;[[ -f /.dockerenv ]] \u0026amp;\u0026amp; echo -e \u0026#34;Host *\\n\\tStrictHostKeyChecking no\\n\\n\u0026#34; \u0026gt;\u0026gt; ~/.ssh/config\u0026#39;\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003escript:\u003c/span\u003e\n        \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003ezip\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e-r\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e$CI_COMMIT_SHA.zip\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e.\u003c/span\u003e\n        \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003escp\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e-p\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e$CI_COMMIT_SHA.zip\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e$SSH_USER@$SSH_HOST:/var/www/$PROJECT_FOLDER/\u003c/span\u003e\n        \u003cspan class=\"hljs-bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003essh\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e$SSH_USER@$SSH_HOST\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0026#34;cd  /var/www/$PROJECT_FOLDER/ \u0026amp;\u0026amp; unzip -q $CI_COMMIT_SHA.zip -d $CI_COMMIT_SHA \u0026amp;\u0026amp; rm $CI_COMMIT_SHA.zip \u0026amp;\u0026amp; cp .env.local $CI_COMMIT_SHA/ \u0026amp;\u0026amp; ln -sfn $CI_COMMIT_SHA current \u0026amp;\u0026amp; exit\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eProviding Detailed Explanations:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eimage\u003c/code\u003e - this attribute specifies the Docker image utilized within the CI/CD pipeline. In this case, the image is a custom creation, based on the Debian operating system. It incorporates PHP 7.4, NodeJS 12, Composer 2, npm, and Yarn, pre-installed for your convenience. For more comprehensive insights into the specificities of this image, you can refer to the Dockerfile, available for examination \u003ca href=\"https://hub.docker.com/r/bogkonstantin/php-7.4-node-12-debug\" target=\"_blank\" rel=\"noopener\"\u003ehere\u003c/a\u003e.\u003c/li\u003e\u003cli\u003e\u003ccode\u003estages\u003c/code\u003e - this section defines the stages of the CI/CD pipeline. In the given configuration, there are two stages: “build” and “deploy”. It is often considered a good practice to include a separate stage for testing your application.\u003c/li\u003e\u003cli\u003e\u003ccode\u003ebuild\u003c/code\u003e - within the “build” stage, various tasks are performed. The first task involves installing Composer packages without dev dependencies. Additionally, the frontend is built, and the “node_modules” folder is removed to reduce the package size, as it is typically not required in the production environment. If you are using npm instead of Yarn, you can modify the command accordingly.\u003c/li\u003e\u003cli\u003e\u003ccode\u003edeploy\u003c/code\u003e - the “deploy” stage is responsible for deploying the application to the desired environment. In this case, the SSH key is added to the running container to enable secure authentication. Then, the built application is archived, uploaded to the remote server, unpacked, and finally, the symlink is updated to point to the new build. This ensures a smooth transition to the latest version of your application.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eBy utilizing the .gitlab-ci.yml file and its configurations, you can automate essential tasks, enhance collaboration, and streamline your development workflow. It empowers you to build, test, and deploy your project efficiently, while maintaining a high level of quality and reliability.\u003c/p\u003e\u003ch3 id=\"A-Wrap-Up-of-Key-Steps-and-Considerations\"\u003e\u003ca href=\"#A-Wrap-Up-of-Key-Steps-and-Considerations\" class=\"headerlink\" title=\"A Wrap-Up of Key Steps and Considerations\"\u003e\u003c/a\u003eA Wrap-Up of Key Steps and Considerations\u003c/h3\u003e\u003cp\u003eOnce you are ready to proceed, you can initiate a commit and push it to the remote repository. This triggers the CI/CD pipeline, automatically executing the defined stages and actions. It’s important to ensure that your changes are properly committed and pushed, as this enables the pipeline to detect and incorporate the latest updates into the deployment process.\u003c/p\u003e\u003cp\u003eAdditionally, don’t forget to update the folder configuration within your Nginx or Apache settings. This step ensures that the web server correctly points to the appropriate folder where your application is deployed. By adjusting the folder configuration, you guarantee that your web server serves the updated version of your project, reflecting the latest changes introduced through the CI/CD pipeline.\u003c/p\u003e\u003cp\u003eThat covers the essential steps for setting up your CI/CD configuration. If you wish to test the configuration locally, you can utilize GitLab Runner, which facilitates the execution of jobs defined in the .gitlab-ci.yml file. For detailed information about GitLab Runner and its functionalities, you can refer to the comprehensive documentation available \u003ca href=\"https://docs.gitlab.com/runner/\" target=\"_blank\" rel=\"noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eWith these steps completed, you can seamlessly leverage the power of continuous integration and deployment to streamline your development process and deliver reliable software with efficiency and ease.\u003c/p\u003e\u003ch3 id=\"Afterword\"\u003e\u003ca href=\"#Afterword\" class=\"headerlink\" title=\"Afterword\"\u003e\u003c/a\u003eAfterword\u003c/h3\u003e\u003cp\u003eIf you encounter any issues or have suggestions for improving the configuration, please don’t hesitate to reach out. Feel free to contact me directly, and I’ll be happy to help. Alternatively, you can also leave a comment on \u003ca href=\"https://twitter.com/bogkonstantin/status/1668730833337831424?s=20\" target=\"_blank\" rel=\"noopener\"\u003eTwitter\u003c/a\u003e to share your thoughts and ideas. Your feedback is valuable, and I’m open to exploring better approaches or addressing any concerns you may have.\u003c/p\u003e\u003cbr/\u003e\u003cdiv class=\"related-posts\"\u003e\u003chr/\u003e\u003ch3\u003eRelated posts:\u003c/h3\u003e\u003cul class=\"popular-posts\"\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Facebook-Log-Id-Symfony/\" title=\"Implement Facebook login button with Symfony\" rel=\"bookmark\"\u003eImplement Facebook login button with Symfony\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Basics-of-sound/\" title=\"Beat detection in Java for Android\" rel=\"bookmark\"\u003eBeat detection in Java for Android\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Nodejs-production-systemd/\" title=\"How to manage Nodejs process using systemd\" rel=\"bookmark\"\u003eHow to manage Nodejs process using systemd\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Telegram-notification-on-SSH-login/\" title=\"Send message to Telegram on any SSH login\" rel=\"bookmark\"\u003eSend message to Telegram on any SSH login\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/What-is-Big-O-notation/\" title=\"What is Big-O notation\" rel=\"bookmark\"\u003eWhat is Big-O notation\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv id=\"comment-container\"\u003e\u003c/div\u003e\u003cdiv id=\"disqus_thread\"\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2021-02-03T00:00:00Z",
  "Author": "Konstantin Bogomolov"
}