{
  "Source": "bogomolov.tech",
  "Title": "PHP Extension Development - A Guide to Creating a Simple Extension and Setting Up Your Development Environment",
  "Link": "https://bogomolov.tech/php-extension-development/",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cp\u003eIn this step-by-step tutorial, I will guide you through the process of constructing a basic PHP extension / module from scratch.\u003c/p\u003e\u003cp\u003eAdditionally, we’ll delve into establishing a development environment for PHP extension development with a C debugger in Visual Studio Code.\u003c/p\u003e\u003ch2 id=\"What-is-a-PHP-extension\"\u003e\u003ca href=\"#What-is-a-PHP-extension\" class=\"headerlink\" title=\"What is a PHP extension?\"\u003e\u003c/a\u003eWhat is a PHP extension?\u003c/h2\u003e\u003cp\u003ePHP extensions (or PHP modules) - are libraries that provide additional functionality to the PHP scripting engine. They are written in C and compiled into a shared library that can be loaded dynamically into the PHP runtime.\u003c/p\u003e\u003cp\u003eGood examples of PHP extensions are the \u003ca href=\"https://www.php.net/manual/en/book.mysql.php\" target=\"_blank\" rel=\"noopener\"\u003eMySQL\u003c/a\u003e and \u003ca href=\"https://www.php.net/manual/en/book.image.php\" target=\"_blank\" rel=\"noopener\"\u003eGD\u003c/a\u003e extensions.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://wiki.php.net/internals/extensions\" target=\"_blank\" rel=\"noopener\"\u003eHere\u003c/a\u003e is a detailed explanation of what a PHP extension and what is the difference with Zend extension.\u003c/p\u003e\u003ch2 id=\"Setting-up-the-development-environment\"\u003e\u003ca href=\"#Setting-up-the-development-environment\" class=\"headerlink\" title=\"Setting up the development environment\"\u003e\u003c/a\u003eSetting up the development environment\u003c/h2\u003e\u003cp\u003eYou need to have Docker installed on your machine. If you don’t have it, you can download it \u003ca href=\"https://www.docker.com/get-started/\" target=\"_blank\" rel=\"noopener\"\u003ehere\u003c/a\u003e. Also, you need to have Visual Studio Code installed. You can download it \u003ca href=\"https://code.visualstudio.com/download\" target=\"_blank\" rel=\"noopener\"\u003ehere\u003c/a\u003e. To work with C code, you need to install the C/C++ extension for Visual Studio Code, which you can find \u003ca href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools\" target=\"_blank\" rel=\"noopener\"\u003ehere\u003c/a\u003e. Additionally, you need to install the Docker Dev Containers extension in Visual Studio Code, available \u003ca href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers\" target=\"_blank\" rel=\"noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"All-commands-to-build-and-run-in-one-place\"\u003e\u003ca href=\"#All-commands-to-build-and-run-in-one-place\" class=\"headerlink\" title=\"All commands to build and run in one place\"\u003e\u003c/a\u003eAll commands to build and run in one place\u003c/h2\u003e\u003cp\u003eBelow, you will find an explanation of all the commands we will use in this tutorial. However, if you want to build and run the extension right now, you can execute the commands below.\u003c/p\u003e\u003cp\u003eClone my \u003ca href=\"https://github.com/bogkonstantin/php-extension-hello-world\" target=\"_blank\" rel=\"noopener\"\u003erepository\u003c/a\u003e, which contains all the files we will use in this tutorial. I have tested all commands on macOS. If you are using a different operating system, you might need to adjust some configurations.\u003c/p\u003e\u003cp\u003eTo clone the repository, run the following command:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003egit \u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003e \u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"7a1d130e3a1d130e120f1854191517\"\u003e[email protected]\u003c/a\u003e:bogkonstantin/php-extension-hello-world.git\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext, navigate to the directory:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e\u003cspan class=\"hljs-built_in\"\u003ecd\u003c/span\u003e php-extension-hello-world\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd run the command to build the container:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003edocker build --pull --rm -f \u003cspan class=\"hljs-string\"\u003e\u0026#34;Dockerfile\u0026#34;\u003c/span\u003e -t php-dev:latest \u003cspan class=\"hljs-string\"\u003e\u0026#34;.\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen, you need to run the container and attach to it:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003edocker run --rm --name php-dev -it php-dev bash\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUsing the command below, you can test the functionality of the extension. Run the following command from inside the container:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003ephp -r \u003cspan class=\"hljs-string\"\u003e\u0026#34;echo hello_world() . PHP_EOL;\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Hello-World-PHP-extension-source-code\"\u003e\u003ca href=\"#Hello-World-PHP-extension-source-code\" class=\"headerlink\" title=\"Hello World PHP extension source code\"\u003e\u003c/a\u003eHello World PHP extension source code\u003c/h2\u003e\u003cp\u003eThe extension consists of three files: \u003ccode\u003ephp_hello.h\u003c/code\u003e, \u003ccode\u003ehello.c\u003c/code\u003e, and \u003ccode\u003econfig.m4\u003c/code\u003e. The first one is the header file, used to declare functions and classes of the extension. The second one is the source code of the extension, and the third one is the configuration file for the extension, preparing it for compilation.\u003c/p\u003e\u003cp\u003eSince this tutorial primarily focuses on setting up the development environment, we won’t delve into the details of the extension code. We will simply create a straightforward extension that returns the string “Hello.”\u003c/p\u003e\u003cp\u003eLet’s take a look at the header file (\u003ccode\u003ephp_hello.h\u003c/code\u003e):\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs c\"\u003e\u003cspan class=\"hljs-meta\"\u003e#\u003cspan class=\"hljs-meta-keyword\"\u003eifndef\u003c/span\u003e PHP_HELLO_H\u003c/span\u003e\n\u003cspan class=\"hljs-meta\"\u003e#\u003cspan class=\"hljs-meta-keyword\"\u003edefine\u003c/span\u003e PHP_HELLO_H 1\u003c/span\u003e\n\n\u003cspan class=\"hljs-meta\"\u003e#\u003cspan class=\"hljs-meta-keyword\"\u003edefine\u003c/span\u003e PHP_HELLO_WORLD_VERSION \u003cspan class=\"hljs-meta-string\"\u003e\u0026#34;1.0\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan class=\"hljs-meta\"\u003e#\u003cspan class=\"hljs-meta-keyword\"\u003edefine\u003c/span\u003e PHP_HELLO_WORLD_EXTNAME \u003cspan class=\"hljs-meta-string\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\nPHP_FUNCTION(hello_world);\n\n\u003cspan class=\"hljs-keyword\"\u003eextern\u003c/span\u003e zend_module_entry hello_module_entry;\n\u003cspan class=\"hljs-meta\"\u003e#\u003cspan class=\"hljs-meta-keyword\"\u003edefine\u003c/span\u003e phpext_hello_ptr \u0026amp;hello_module_entry\u003c/span\u003e\n\n\u003cspan class=\"hljs-meta\"\u003e#\u003cspan class=\"hljs-meta-keyword\"\u003eendif\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe next file is the source code of the extension (\u003ccode\u003ehello.c\u003c/code\u003e):\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs c\"\u003e\u003cspan class=\"hljs-meta\"\u003e#\u003cspan class=\"hljs-meta-keyword\"\u003eifdef\u003c/span\u003e HAVE_CONFIG_H\u003c/span\u003e\n\u003cspan class=\"hljs-meta\"\u003e#\u003cspan class=\"hljs-meta-keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"hljs-meta-string\"\u003e\u0026#34;config.h\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan class=\"hljs-meta\"\u003e#\u003cspan class=\"hljs-meta-keyword\"\u003eendif\u003c/span\u003e\u003c/span\u003e\n\n\u003cspan class=\"hljs-meta\"\u003e#\u003cspan class=\"hljs-meta-keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"hljs-meta-string\"\u003e\u0026#34;php.h\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan class=\"hljs-meta\"\u003e#\u003cspan class=\"hljs-meta-keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"hljs-meta-string\"\u003e\u0026#34;php_hello.h\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\n\u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e zend_function_entry hello_functions[] = {\n    PHP_FE(hello_world, \u003cspan class=\"hljs-literal\"\u003eNULL\u003c/span\u003e)\n    {\u003cspan class=\"hljs-literal\"\u003eNULL\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003eNULL\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003eNULL\u003c/span\u003e}\n};\n\nzend_module_entry hello_module_entry = {\n#\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ZEND_MODULE_API_NO \u0026gt;= \u003cspan class=\"hljs-number\"\u003e20010901\u003c/span\u003e\n    STANDARD_MODULE_HEADER,\n#endif\n    PHP_HELLO_WORLD_EXTNAME,\n    hello_functions,\n    \u003cspan class=\"hljs-literal\"\u003eNULL\u003c/span\u003e,\n    \u003cspan class=\"hljs-literal\"\u003eNULL\u003c/span\u003e,\n    \u003cspan class=\"hljs-literal\"\u003eNULL\u003c/span\u003e,\n    \u003cspan class=\"hljs-literal\"\u003eNULL\u003c/span\u003e,\n    \u003cspan class=\"hljs-literal\"\u003eNULL\u003c/span\u003e,\n#\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ZEND_MODULE_API_NO \u0026gt;= \u003cspan class=\"hljs-number\"\u003e20010901\u003c/span\u003e\n    PHP_HELLO_WORLD_VERSION,\n#endif\n    STANDARD_MODULE_PROPERTIES\n};\n\n\u003cspan class=\"hljs-meta\"\u003e#\u003cspan class=\"hljs-meta-keyword\"\u003eifdef\u003c/span\u003e COMPILE_DL_HELLO\u003c/span\u003e\nZEND_GET_MODULE(hello)\n\u003cspan class=\"hljs-meta\"\u003e#\u003cspan class=\"hljs-meta-keyword\"\u003eendif\u003c/span\u003e\u003c/span\u003e\n\nPHP_FUNCTION(hello_world)\n{\n    zend_string *str = zend_string_init(\u003cspan class=\"hljs-string\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003esizeof\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e)\u003cspan class=\"hljs-number\"\u003e-1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\n    RETURN_STR(str);\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd the last one is the configuration file (\u003ccode\u003econfig.m4\u003c/code\u003e):\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs m4\"\u003ePHP_ARG_ENABLE(hello, whether to enable Hello World support,\n[ --enable-hello   Enable Hello World support])\n\nif test \u0026#34;$PHP_HELLO\u0026#34; = \u0026#34;yes\u0026#34;; then\n  AC_DEFINE(HAVE_HELLO, 1, [Whether you have Hello World])\n  PHP_NEW_EXTENSION(hello, hello.c, $ext_shared)\nfi\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Building-the-PHP-in-debug-mode-and-extension\"\u003e\u003ca href=\"#Building-the-PHP-in-debug-mode-and-extension\" class=\"headerlink\" title=\"Building the PHP in debug mode and extension\"\u003e\u003c/a\u003eBuilding the PHP in debug mode and extension\u003c/h2\u003e\u003cp\u003eAt first - you need to build PHP from source with the \u003ccode\u003e--enable-debug\u003c/code\u003e parameter. Below, you can see the Dockerfile. It will build PHP 7.4 with debug symbols and all the other tools we need for building and developing PHP and an extension.\u003c/p\u003e\u003cp\u003eSince this Dockerfile provides instructions for Debian, you can use it as a base to set up a development environment on your machine. However, it’s much easier to use a ready-to-use Docker image.\u003c/p\u003e\u003cp\u003eThe full Dockerfile looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs dockerfile\"\u003e\u003cspan class=\"hljs-keyword\"\u003eFROM\u003c/span\u003e debian:bookworm\n\n\u003cspan class=\"hljs-keyword\"\u003eRUN\u003c/span\u003e\u003cspan class=\"bash\"\u003e apt update \\\n    \u0026amp;\u0026amp; apt install -y \\\n    build-essential \\\n    autoconf \\\n    libtool \\\n    bison \\\n    re2c \\\n    pkg-config \\\n    git \\\n    libxml2-dev \\\n    libsqlite3-dev \\\n    gdb \\\n    nano \\\n    procps\u003c/span\u003e\n\n\u003cspan class=\"hljs-keyword\"\u003eRUN\u003c/span\u003e\u003cspan class=\"bash\"\u003e git \u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003e https://github.com/php/php-src.git --branch=php-7.4.33 --depth=1 \\\n    \u0026amp;\u0026amp; \u003cspan class=\"hljs-built_in\"\u003ecd\u003c/span\u003e php-src \\\n    \u0026amp;\u0026amp; ./buildconf --force \\\n    \u0026amp;\u0026amp; ./configure --\u003cspan class=\"hljs-built_in\"\u003eenable\u003c/span\u003e-debug \\\n    \u0026amp;\u0026amp; make -j $(nproc) \\\n    \u0026amp;\u0026amp; make install \\\n    \u0026amp;\u0026amp; php -v\u003c/span\u003e\n\n\u003cspan class=\"hljs-keyword\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"bash\"\u003e ./ext /php-src/ext/hello\u003c/span\u003e\n\n\u003cspan class=\"hljs-keyword\"\u003eWORKDIR\u003c/span\u003e\u003cspan class=\"bash\"\u003e /php-src\u003c/span\u003e\n\n\u003cspan class=\"hljs-keyword\"\u003eRUN\u003c/span\u003e\u003cspan class=\"bash\"\u003e \u003cspan class=\"hljs-built_in\"\u003ecd\u003c/span\u003e /php-src/ext/hello \\\n    \u0026amp;\u0026amp; phpize \\\n    \u0026amp;\u0026amp; ./configure --\u003cspan class=\"hljs-built_in\"\u003eenable\u003c/span\u003e-hello \\\n    \u0026amp;\u0026amp; make \\\n    \u0026amp;\u0026amp; \u003cspan class=\"hljs-built_in\"\u003eecho\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0026#34;extension=/php-src/ext/hello/modules/hello.so\u0026#34;\u003c/span\u003e \u0026gt;\u0026gt; /usr/\u003cspan class=\"hljs-built_in\"\u003elocal\u003c/span\u003e/lib/php.ini\u003c/span\u003e\n\n\u003cspan class=\"hljs-keyword\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"bash\"\u003e ./launch.json /php-src/.vscode\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet’s examine the Dockerfile in detail. Firstly, we are using Debian 12.4 Bookworm in this tutorial.\u003c/p\u003e\u003cp\u003eThis part involves the installation of essential tools for building PHP and extensions:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003eapt update\napt install build-essential autoconf libtool bison re2c pkg-config\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eA few other tools we need in this tutorial:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e\u003cspan class=\"hljs-comment\"\u003e# for cloning php-src\u003c/span\u003e\ngit \n\n\u003cspan class=\"hljs-comment\"\u003e# since we going to build using default configuration, we need this libraries:\u003c/span\u003e\nlibxml2-dev libsqlite3-dev\n\n\u003cspan class=\"hljs-comment\"\u003e# c debugger\u003c/span\u003e\ngdb\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext, we are cloning the PHP source code. We are using PHP 7.4.33 version in this example. You can use any version you prefer; just change the branch name accordingly. However, for PHP 8+ versions, you need to adjust the extension code, as the PHP internal API has changed.\u003c/p\u003e\u003cp\u003eSetting \u003ccode\u003eDepth=1\u003c/code\u003e means we are cloning only the latest commit, saving both time and space.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003egit \u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003e https://github.com/php/php-src.git --branch=php-7.4.33 --depth=1\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eInside the \u003ccode\u003e/php-src\u003c/code\u003e directory, we are building PHP with debug symbols, which will be used for debugging.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e./buildconf\n./configure --\u003cspan class=\"hljs-built_in\"\u003eenable\u003c/span\u003e-debug\nmake -j $(nproc)\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis command is used to install the previously built PHP:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003emake install\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd check if it is installed correctly:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003ephp -v\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext, we are building the extension. The extension is located in the \u003ccode\u003e/php-src/ext/hello\u003c/code\u003e directory and is copied during the build process to the image:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e\u003cspan class=\"hljs-built_in\"\u003ecd\u003c/span\u003e /php-src/ext/hello\nphpize\n./configure --\u003cspan class=\"hljs-built_in\"\u003eenable\u003c/span\u003e-hello\nmake\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAdd the extension to the \u003ccode\u003ephp.ini\u003c/code\u003e file:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e\u003cspan class=\"hljs-built_in\"\u003eecho\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0026#34;extension=/php-src/ext/hello/modules/hello.so\u0026#34;\u003c/span\u003e \u0026gt;\u0026gt; /usr/\u003cspan class=\"hljs-built_in\"\u003elocal\u003c/span\u003e/lib/php.ini\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis is not in the Dockerfile, but if you want to rebuild the extension later, you might need to clean it first:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003emake clean all\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Debugging-with-CLI-gdb\"\u003e\u003ca href=\"#Debugging-with-CLI-gdb\" class=\"headerlink\" title=\"Debugging with CLI (gdb)\"\u003e\u003c/a\u003eDebugging with CLI (gdb)\u003c/h2\u003e\u003cp\u003eFor easy development, you need to use a debugger. GDB is already installed in the container. You can debug using the CLI from inside the container. Below, you can see an example of debugging:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003egdb php\n\u003cspan class=\"hljs-built_in\"\u003ebreak\u003c/span\u003e /php-src/ext/hello/hello.c:36\n\u003cspan class=\"hljs-comment\"\u003e# Make breakpoint pending on future shared library load? (y or [n]) y\u003c/span\u003e\nrun -r \u003cspan class=\"hljs-string\"\u003e\u0026#34;echo hello_world() . PHP_EOL;\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou will see the breakpoint was triggered:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003eBreakpoint 1, zif_hello_world (execute_data=0xfffff5413090, return_value=0xfffff5413070)\n    at /php-src/ext/hello/hello.c:36\n36\t    zend_string *str = zend_string_init(\u003cspan class=\"hljs-string\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e, sizeof(\u003cspan class=\"hljs-string\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e)-1, 0);\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo learn more about debugging with GDB, you can read tutorials on the internet, such as \u003ca href=\"https://web.stanford.edu/class/archive/cs/cs107/cs107.1196/resources/gdb\" target=\"_blank\" rel=\"noopener\"\u003ethis one\u003c/a\u003e. It might not be straightforward, but it is a very powerful tool.\u003c/p\u003e\u003ch2 id=\"Debugging-with-VSCode\"\u003e\u003ca href=\"#Debugging-with-VSCode\" class=\"headerlink\" title=\"Debugging with VSCode\"\u003e\u003c/a\u003eDebugging with VSCode\u003c/h2\u003e\u003cp\u003eDebugging with the CLI is not very convenient. It is much easier to use VSCode. After you run a container, you can attach to it using VSCode. Open the Command Palette and type “Dev-Containers: Attach to Running Container…”. Select the container you want to attach to. After that, you will be attached to the container, and you will see files from the container in VSCode.\u003c/p\u003e\u003cimg src=\"/php-extension-development/vscode_attach_to_dev_container.png\" width=\"800px\" height=\"255px\" class=\"m-0 auto-width\" alt=\"Attach Visual Studio Code to Docker Dev Container\" title=\"Attach Visual Studio Code to Docker Dev Container\" loading=\"lazy\"/\u003e\u003cp\u003eYou can find the configuration in the \u003ccode\u003e.vscode/launch.json\u003c/code\u003e file, which is already copied to the container. You can use it for debugging. Just set a breakpoint in \u003ccode\u003ehello.c\u003c/code\u003e (path inside the container: \u003ccode\u003e/php-src/ext/hello\u003c/code\u003e) and click on the “Start Debugging” button. You will see the breakpoint was triggered.\u003c/p\u003e\u003cimg src=\"/php-extension-development/vscode_set_breakpoint.png\" width=\"800px\" height=\"533px\" class=\"m-0 auto-width\" alt=\"Set a debug breakpoint in Visual Studio Code\" title=\"Set a debug breakpoint in Visual Studio Code\" loading=\"lazy\"/\u003e\u003cp\u003eIn the last screenshot, you can see a successfully triggered breakpoint.\u003c/p\u003e\u003cimg src=\"/php-extension-development/vscode_breakpoint_triggered.png\" width=\"800px\" height=\"500px\" class=\"m-0 auto-width\" alt=\"Visual Studio Code - debug C, triggered breakpoint\" title=\"Visual Studio Code - debug C, triggered breakpoint\" loading=\"lazy\"/\u003e\u003ch2 id=\"Summary\"\u003e\u003ca href=\"#Summary\" class=\"headerlink\" title=\"Summary\"\u003e\u003c/a\u003eSummary\u003c/h2\u003e\u003cp\u003eIn summary, this tutorial equips developers with the essential skills to create and debug PHP extensions efficiently. By seamlessly integrating Docker and Visual Studio Code, the process becomes more accessible, fostering a smoother development experience.\u003c/p\u003e\u003cbr/\u003e\u003cdiv class=\"related-posts\"\u003e\u003chr/\u003e\u003ch3\u003eRelated posts:\u003c/h3\u003e\u003cul class=\"popular-posts\"\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Facebook-Log-Id-Symfony/\" title=\"Implement Facebook login button with Symfony\" rel=\"bookmark\"\u003eImplement Facebook login button with Symfony\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Basics-of-sound/\" title=\"Beat detection in Java for Android\" rel=\"bookmark\"\u003eBeat detection in Java for Android\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Nodejs-production-systemd/\" title=\"How to manage Nodejs process using systemd\" rel=\"bookmark\"\u003eHow to manage Nodejs process using systemd\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/Telegram-notification-on-SSH-login/\" title=\"Send message to Telegram on any SSH login\" rel=\"bookmark\"\u003eSend message to Telegram on any SSH login\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003cli class=\"popular-posts-item\"\u003e\u003cdiv class=\"popular-posts-title\"\u003e\u003ch3\u003e\u003ca href=\"/What-is-Big-O-notation/\" title=\"What is Big-O notation\" rel=\"bookmark\"\u003eWhat is Big-O notation\u003c/a\u003e\u003c/h3\u003e\u003c/div\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv id=\"comment-container\"\u003e\u003c/div\u003e\u003cdiv id=\"disqus_thread\"\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2023-12-29T00:00:00Z",
  "Author": "Konstantin Bogomolov"
}