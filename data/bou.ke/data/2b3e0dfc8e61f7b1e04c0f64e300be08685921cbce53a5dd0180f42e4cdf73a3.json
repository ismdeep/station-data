{
  "Source": "bou.ke",
  "Title": "Static files in Go",
  "Link": "https://bou.ke/blog/static-files/",
  "Content": "\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"post\"\u003e\n  \u003ch1\u003eStatic files in Go\u003c/h1\u003e\n  \u003cp\u003eA common problem when developing a Go-based web service is that of static files. While you could \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ersync\u003c/code\u003e over your files before deploying a new binary, I prefer packing it into the binary for easier deployment and atomicity of the assets. There are quite a few packages out there already to help you compile assets into the binary, most notably the following:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/jteeuwen/go-bindata\" target=\"_blank\"\u003ego-bindata\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/mjibson/esc\" target=\"_blank\"\u003eesc\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/GeertJohan/go.rice\" target=\"_blank\"\u003ego.rice\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNone of these tools were quite there for me, and were missing some feature that I really wanted. The most important thing for me is that I wanted the assets to not just be compressed before being compiled into the binary, but to also be served compressed, so the server doesn’t need to do an unnecessary decompression (and possibly compress it again before sending it to the client).\u003c/p\u003e\n\n\u003ch2 id=\"staticfiles\"\u003eStaticfiles\u003c/h2\u003e\n\n\u003cp\u003eSo, to scratch my own itch I made \u003ca href=\"https://github.com/bouk/staticfiles\" target=\"_blank\"\u003eStaticfiles\u003c/a\u003e, a command line tool that’s very similar to the tools listed above, but different in some key ways. Most notably, it doesn’t constrain itself by implementing the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehttp.FileSystem\u003c/code\u003e API, which makes it possible to do things like serving files directly in their compressed form. It also doesn’t have a built-in development mode, but because of its support for build tags it is very easy to extend it with one (and I have \u003ca href=\"https://github.com/bouk/staticfiles#local-development-mode\" target=\"_blank\"\u003ean example of how to do this\u003c/a\u003e in the repo). The generated file server will add \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eETag\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eLast-Modified\u003c/code\u003e headers to the responses, to avoid unnecessary file downloads. I also made sure the tool itself is very fast, by parallelizing reading and compressing of files.\u003c/p\u003e\n\n\u003ch2 id=\"check-it-out\"\u003eCheck it out\u003c/h2\u003e\n\u003cp\u003ePlease try out \u003ca href=\"https://github.com/bouk/staticfiles\" target=\"_blank\"\u003eStaticfiles\u003c/a\u003e and let me know what you think! If you run into a problem, feel free to open an issue and I can take a look.\u003c/p\u003e\n\n  \u003cp\u003e\u003cspan class=\"date\"\u003eAug 2016\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2016-08-01T00:00:00Z",
  "Author": "bou.ke"
}