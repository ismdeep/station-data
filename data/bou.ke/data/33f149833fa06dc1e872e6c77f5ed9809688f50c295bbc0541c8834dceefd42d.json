{
  "Source": "bou.ke",
  "Title": "My experience creating a Telegram Bot",
  "Link": "https://bou.ke/blog/telegram-bots/",
  "Content": "\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"post\"\u003e\n  \u003ch1\u003eMy experience creating a Telegram Bot\u003c/h1\u003e\n  \u003cp\u003eTelegram has been adding lots of features this year, including extensive chatbot support. To highlight and \npromote these features they announced a \u003ca href=\"https://telegram.org/blog/botprize\" target=\"_blank\"\u003ebot prize\u003c/a\u003e in April.\u003c/p\u003e\n\n\u003cimg src=\"/images/botprize.jpg\" style=\"max-width: 300px\"/\u003e\n\u003cp\u003eI got very interested of course, not just because of the cold hard cash prize, but also because bots are super hot right now, with \u003ca href=\"https://api.slack.com/bot-users\" target=\"_blank\"\u003eSlack\u003c/a\u003e, and \u003ca href=\"https://developers.facebook.com/docs/messenger-platform\" target=\"_blank\"\u003eFacebook\u003c/a\u003e betting big on bots. I wrote this post to document my experience in creating \u003ca href=\"https://memorizationbot.com/\" target=\"_blank\"\u003eMemorization Bot\u003c/a\u003e, which is a so-called ‚Äòspaced-repetition system‚Äô bot. Spaced-repetition systems are designed to make you remember things by showing you a flash card and asking you to recall what piece of information is hidden on the other side of it. After you reveal the information, it asks you how well you remembered it, and depending on your reply it schedules the card to be shown again at some later point in the future. This is super useful for remembering any kind of factual information you want, lots of people use it for learning new languages for example.\u003c/p\u003e\n\n\u003cp\u003eI‚Äôve tried using other more popular spaced-reptition systems in the past like \u003ca href=\"https://ankisrs.net/\" target=\"_blank\"\u003eAnki\u003c/a\u003e, but one deficiency I found with that one in particular is that you need to open up the application every day to check whether there‚Äôs anything that needs a review.\u003c/p\u003e\n\n\u003ch2 id=\"memorization-bot\"\u003eMemorization Bot\u003c/h2\u003e\n\n\u003cp\u003eThis is where the idea for Memorization Bot came from. I realized that the bot format is perfect for this, as the bot can simply send you a message telling you it‚Äôs time for your rehearsal. This makes the rehearsal process entirely frictionless, and I haven‚Äôt missed a single day since starting to use it.\u003c/p\u003e\n\n\u003ch3 id=\"example-of-usage\"\u003eExample of usage\u003c/h3\u003e\n\n\u003cp\u003eEvery day at 09:30 I receive a notification telling me it‚Äôs time for my rehearsal.\u003c/p\u003e\n\n\u003cimg src=\"/images/memorizationbot-1.png\" style=\"max-width: 375px\"/\u003e\n\u003cp\u003eWhen I open the chat, I am presented with the front side of the card, and the option to show the back.\u003c/p\u003e\n\n\u003cimg src=\"/images/memorizationbot-2.png\" style=\"max-width: 375px\"/\u003e\n\u003cp\u003eThen, I press ‚ÄúüîÑ Show back‚Äù which presents me with the back and it asks me to reply with how well I recalled it.\u003c/p\u003e\n\n\u003cimg src=\"/images/memorizationbot-3.png\" style=\"max-width: 375px\"/\u003e\n\u003cp\u003eAfter I reply, it will schedule the card to be shown again in the future. If there‚Äôs more cards to show it will do so, otherwise I‚Äôm done! The chat bot format is super beneficial for this app, as I didn‚Äôt need to seek out anything, it was all presented to me and I just needed to press the buttons on the screen.\u003c/p\u003e\n\n\u003ch3 id=\"algorithm\"\u003eAlgorithm\u003c/h3\u003e\n\n\u003cp\u003eFor the algorithm I went with \u003ca href=\"https://www.supermemo.com/english/ol/sm2.htm\" target=\"_blank\"\u003eSuperMemory 2\u003c/a\u003e, with some modifications to make it work with 4 replies instead of 6. You can find the implementation \u003ca href=\"https://github.com/bouk/memorizationbot/blob/master/sm/sm.go\" target=\"_blank\"\u003ein the repository\u003c/a\u003e. The original version is \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esm.SM2\u003c/code\u003e, with the modified version available as \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esm.SM2Mod\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"technical-details\"\u003eTechnical details\u003c/h3\u003e\n\n\u003cp\u003eFor the implementation I decided to use Go with Postgres as the backing database. I used Go because in my experience it‚Äôs really good at handling lots of HTTP requests without breaking a sweat, which is needed as Telegram will hammer your application with webhooks. I used Postgres because it has great timezone handling and consistency guarantees. I utilize PL/pgSQL functions to handle all the scheduling and timezone logic.\u003c/p\u003e\n\n\u003cp\u003eThe hardest part of creating the bot was keeping track of what state the user was in, and determining what to display to the user depending on that. I solved this by having two giant case statements, one that determines what actions to take depending on the user reply, and another that determines what to display to the user when they transition into a state. This latter it easy to display the right message, no matter what the starting state is.\u003c/p\u003e\n\n\u003cp\u003eAll the possible states are in a single big enumeration, which looks something like this:\u003c/p\u003e\n\n\u003cpre\u003etype State uint\n\nconst (\n  DeckList = State(iota)\n  Rehearsing\n  RehearsingCardReview\n  DeckCreate\n  DeckDetails\n  CardCreate\n  CardCreateBack\n  CardDelete\n  etc...\n\u003c/pre\u003e\n\n\u003cp\u003eThis integer is saved in the users table with a JSON object containing some extra info about the state (e.g. the selected deck when the state is \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eDeckDetails\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eOn every incoming message I simply fetch the current state from the database, process the message, and save the new state back into the database. I then look up the state and reply with the appropriate messages.\u003c/p\u003e\n\n\u003cp\u003eTo ensure that users don‚Äôt get in a confused state, I use Postgres row-level locking around the processing of a user message so only one event is being processed per user at any time. Every operation inside the handling of a message is done in a transaction, so any error simply brings the user back to their previous state.\u003c/p\u003e\n\n\u003cp\u003eFor the actual communication with the Telegram API I used \u003ca href=\"https://github.com/go-telegram-bot-api/telegram-bot-api/\" target=\"_blank\"\u003etelegram-bot-api\u003c/a\u003e which is a fantastically well maintained and complete implementation.\u003c/p\u003e\n\n\u003cp\u003eYou can add the bot \u003ca href=\"https://telegram.me/memorizationbot\" target=\"_blank\"\u003ehere\u003c/a\u003e and find all the code \u003ca href=\"https://github.com/bouk/memorizationbot\" target=\"_blank\"\u003eon my GitHub\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"why-i-like-telegrams-bot-api\"\u003eWhy I like Telegram‚Äôs Bot API\u003c/h2\u003e\n\n\u003cp\u003eI haven‚Äôt tried creating a bot for Facebook yet, but at first glance its API seems a lot less powerful than Telegram‚Äôs. Telegram‚Äôs power comes from the fact that it allows you to define \u003ca href=\"https://core.telegram.org/bots#keyboards\" target=\"_blank\"\u003ecustom keyboards\u003c/a\u003e that enable you to build a custom UI. This makes it very easy to create a menu system of sorts, and allows the user to clearly see what they can do at any moment, without having to guess random phrases.\u003c/p\u003e\n\n\u003cimg src=\"/images/memorizationbot-4.png\" style=\"max-width: 375px\"/\u003e\n\u003cp\u003eFacebook‚Äôs messenger platform allows you to send multiple cards that each only allow you to present up to 3 buttons. This is a lot less flexible. Presumably this is because Facebook wants people to make natural language bots, through platforms like \u003ca href=\"https://wit.ai/\" target=\"_blank\"\u003ewit.ai\u003c/a\u003e. I personally have never had a pleasant interaction with a natural language bot, and I don‚Äôt think it‚Äôs going to happen any time soon. The biggest problem in my experience is that there‚Äôs no way to figure out what the bot can actually do, which Telegram solved elegantly with the reply keyboards.\u003c/p\u003e\n\n\u003cimg src=\"/images/memorizationbot-5.png\" style=\"max-width: 549px\"/\u003e\n\u003ch2 id=\"you-should-make-a-bot-too\"\u003eYou should make a bot too!\u003c/h2\u003e\n\n\u003cp\u003eWhen I started out creating Memorization Bot I couldn‚Äôt find any complete examples of Telegram bots people created. Most of them were either trivial bots that just replied with the message people sent, or would just broadcast the same message to everyone. I hope these notes help someone else create an interesting and useful bot, make sure to \u003ca href=\"https://twitter.com/BvdBijl\" target=\"_blank\"\u003etweet at me\u003c/a\u003e if you do!\u003c/p\u003e\n\n  \u003cp\u003e\u003cspan class=\"date\"\u003eOct 2016\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2016-10-01T00:00:00Z",
  "Author": "bou.ke"
}