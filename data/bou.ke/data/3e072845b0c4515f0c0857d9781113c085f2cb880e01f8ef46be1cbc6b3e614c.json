{
  "Source": "bou.ke",
  "Title": "Idiomatic Generics in Go",
  "Link": "https://bou.ke/blog/idiomatic-generics-in-go/",
  "Content": "\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"post\"\u003e\n  \u003ch1\u003eIdiomatic Generics in Go\u003c/h1\u003e\n  \u003cp\u003eGo has a fantastic standard library and powerful concurrency primitives, but the type system is notoriously lacking. One of the main features that is sorely missing is generics. In this post I’ll compare different methods of implementing generics in Go, and show you what crazy hoops I jumped through to arrive at something that resembles generics in other languages.\u003c/p\u003e\n\n\u003ch2 id=\"copy-and-paste\"\u003eCopy and Paste\u003c/h2\u003e\n\n\u003cp\u003eA combination of interfaces and good ol’ copy and paste is the way Go \u003ca href=\"https://golang.org/src/pkg/sort/sort.go?s=5371:5390#L223\" target=\"_blank\"\u003ecurrently implements sortable slices\u003c/a\u003e. This is of course a terrible, terrible idea. The names of your types will end up being \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eStringSet\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eIntSet\u003c/code\u003e, and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eFloatSet\u003c/code\u003e. When you find a bug you’ll be forced to go through all of the instances where you copied and pasted, fix it and hope you don’t miss any. This is clearly not a sustainable way to ‘implement’ generics.\u003c/p\u003e\n\n\u003ch2 id=\"reflection\"\u003eReflection\u003c/h2\u003e\n\n\u003cp\u003eA commonly suggested way to implement higher-order functions such as Map/Reduce/Filter is to use reflection, and you’ll end up with something like this:\u003c/p\u003e\n\n\u003cscript src=\"https://gist.github.com/bouk/fbf273835d996c9f072e.js\"\u003e\u003c/script\u003e\n\n\u003cp\u003eThis will give you lots of flexibility, at the cost of static type checking. Losing static type checking will force you to do type checking at runtime, which has a big performance impact and you will lose many of the guarantees a type system gives you. The code is also way harder to understand because of the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einterface{}\u003c/code\u003e types everywhere.\u003c/p\u003e\n\n\u003ch2 id=\"templating\"\u003eTemplating\u003c/h2\u003e\n\n\u003cp\u003eIt would be ideal if we could just write Go like this:\u003c/p\u003e\n\n\u003cscript src=\"https://gist.github.com/bouk/c66f38b49aafa2aa02ba.js\"\u003e\u003c/script\u003e\n\n\u003cp\u003eI’ve implemented a program that does exactly this. It parses the file, traverses the AST and replaces any reference to the type variable \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eT\u003c/code\u003e with the passed type.\u003c/p\u003e\n\n\u003cscript src=\"https://gist.github.com/bouk/4682082a23df8305c73c.js\"\u003e\u003c/script\u003e\n\n\u003cp\u003eThis approach has been taken by other projects such as \u003ca href=\"https://github.com/joeshaw/gengen\" target=\"_blank\"\u003egengen\u003c/a\u003e, the issue however is that this is still a pain to use. You will have to manage the correctly typed files yourself, while also juggling packaging issues (as multiple versions of the same template will share a namespace). We need something a bit more powerful.\u003c/p\u003e\n\n\u003ch2 id=\"go-ing-beyond-templating-gonericsio\"\u003eGo-ing beyond templating: gonerics.io\u003c/h2\u003e\n\n\u003cp\u003eTo fix this issue I’ve created a service called gonerics.io, which delivers easily usable generics as a service (GAAS). Using gonerics.io is as simple as \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ego get\u003c/code\u003eting the appropriate package. For example: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ego get gonerics.io/d/set/string.git\u003c/code\u003e. You can then use it as follows:\u003c/p\u003e\n\n\u003cscript src=\"https://gist.github.com/bouk/e5e8010f552717e1bcc9.js\"\u003e\u003c/script\u003e\n\n\u003cp\u003eThis will print \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrue false\u003c/code\u003e, as you would expect. The code is also super readable, as you don’t have to do any crazy casting or reflection. Converting this to a program that uses ints is as easy as changing the import, like follows:\u003c/p\u003e\n\n\u003cscript src=\"https://gist.github.com/bouk/b4e0ac1dc3bd39b2210d.js\"\u003e\u003c/script\u003e\n\n\u003cp\u003eAfter running \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ego get gonerics.io/d/set/int.git\u003c/code\u003e and compiling, this will also print \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrue false\u003c/code\u003e. This makes generics super easy to use!\u003c/p\u003e\n\n\u003ch2 id=\"lets-go-get-functional\"\u003eLet’s go-get functional\u003c/h2\u003e\n\n\u003cp\u003eThis is not where it stops of course. I’ve also implemented the above mentioned Map/Reduce and Filter using gonerics. The template can be found \u003ca href=\"https://gist.github.com/bouk/9850cdb187cbbd192463\" target=\"_blank\"\u003ehere\u003c/a\u003e. If we now do \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ego get gonerics.io/f/functional/int.git\u003c/code\u003e we will have access to a bunch of powerful functions, that are also typesafe! For example:\u003c/p\u003e\n\n\u003cscript src=\"https://gist.github.com/bouk/fdd2b8adfd6e307c8850.js\"\u003e\u003c/script\u003e\n\n\u003cp\u003eWhen we run this we get the following output:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e[2 4 6 8 10 12 14 16 18 20 22 24]\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e[13 25 37 49 61 73]\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e[1 4 9 16 25 36 49 64 81 100 121 144]\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eI’ve also added support for templates with multiple arguments, so we can do something like this:\u003c/p\u003e\n\n\u003cscript src=\"https://gist.github.com/bouk/8bc549237b337c0761d8.js\"\u003e\u003c/script\u003e\n\n\u003cp\u003eWhich will print \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e16\u003c/code\u003e when executed.\u003c/p\u003e\n\n\u003cimg src=\"/images/go-dawg.png\" style=\"float:right; height:150px;\"/\u003e\n\u003ch2 id=\"we-have-to-go-deeper\"\u003eWe have to Go deeper\u003c/h2\u003e\n\n\u003cp\u003eThe fact that goneric templates are go-gettable opens up some interesting possibilities. Take this simple template for a directed graph datastructure for example:\u003c/p\u003e\n\n\u003cscript src=\"https://gist.github.com/bouk/de34a0036f39cf5647bb.js\"\u003e\u003c/script\u003e\n\n\u003cp\u003eWe can then use it as follows:\u003c/p\u003e\n\n\u003cscript src=\"https://gist.github.com/bouk/9a64df0ce733ee8c4590.js\"\u003e\u003c/script\u003e\n\n\u003cp\u003eBecause \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ego get\u003c/code\u003e recursively fetches dependencies I can simply refer to another goneric template inside my template and achieve code reusability through generics!\u003c/p\u003e\n\n\u003ch2 id=\"giving-it-a-go\"\u003eGiving it a Go\u003c/h2\u003e\n\n\u003cp\u003eGonerics.io supports custom templates, to use them simply create a gist of your template (like the above \u003ca href=\"https://gist.github.com/bouk/c66f38b49aafa2aa02ba\" target=\"_blank\"\u003eset template\u003c/a\u003e for example). You can then import it using a URL like the following (the gist ID is without your Github username):\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egonerics.io/g/\u0026lt;gist id\u0026gt;/\u0026lt;type arguments seperated by _\u0026gt;.git\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThe package will then be available under the name of file minus “.go”. Your gist should have only a single file, with the .go extension. There probably won’t be any useful error message when you make a mistake because I haven’t implemented any. The type arguments are accessible under T, U, V etc.\u003c/p\u003e\n\n\u003ch2 id=\"how-does-this-work\"\u003eHow does this work?!\u003c/h2\u003e\n\n\u003cp\u003eThrough the magic of CGI and shell scripting! In \u003ca href=\"https://github.com/bouk/gonerics/blob/master/nginx-config\" target=\"_blank\"\u003emy Nginx config\u003c/a\u003e I use a \u003ca href=\"https://github.com/bouk/gonerics/blob/master/cgi.sh\" target=\"_blank\"\u003eshell script\u003c/a\u003e as the CGI program to use. When git request the repository, this script will check if the specific combination of template and arguments has been served before. If it hasn’t, it will first generate the correct file and check it into a new git repo. Finally, it’ll call \u003ca href=\"https://git-scm.com/docs/git-http-backend\" target=\"_blank\"\u003egit-http-backed\u003c/a\u003e which will actually serve the http request.\u003c/p\u003e\n\n\u003cp\u003eThe rest of the (rough) code that powers gonerics.io can be found here: \u003ca href=\"https://github.com/bouk/gonerics\" target=\"_blank\"\u003egithub.com/bouk/gonerics\u003c/a\u003e. Don’t use gonerics.io for anything important please. It’s meant as a proof of concept.\u003c/p\u003e\n\n\u003ch2 id=\"the-future-of-generics-in-go\"\u003eThe future of generics in Go\u003c/h2\u003e\n\n\u003cp\u003eGo should have proper support for generics so these shenanigans aren’t necessary. Rob Pike has recently suggested a new command for the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ego\u003c/code\u003e tool called \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ego generate\u003c/code\u003e with the intention to also \u003ca href=\"https://docs.google.com/document/d/1V03LUfjSADDooDMhe-_K59EgpTEm3V8uvQRuNMAEnjg/edit#heading=h.i81x19ol3oyz\" target=\"_blank\"\u003esupport a simple form of templating\u003c/a\u003e. Looking over the design document, I feel like it would not solve the generics problem at all (although that isn’t really what they set out to do). Go would greatly benefit from a proper generics system, and I think it’s way overdue.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://news.ycombinator.com/item?id=8388282\" target=\"_blank\"\u003eHackerNews\u003c/a\u003e \u003ca href=\"https://www.reddit.com/r/golang/comments/2hw356/idiomatic_generics_in_go/\" target=\"_blank\"\u003eReddit\u003c/a\u003e\u003c/p\u003e\n\n  \u003cp\u003e\u003cspan class=\"date\"\u003eSep 2014\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2014-09-01T00:00:00Z",
  "Author": "bou.ke"
}