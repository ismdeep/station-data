{
  "Source": "bou.ke",
  "Title": "The M1 MacBook Air is the best computer I've ever owned",
  "Link": "https://bou.ke/blog/macbouk-air/",
  "Content": "\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"post\"\u003e\n  \u003ch1\u003eThe M1 MacBook Air is the best computer I\u0026#39;ve ever owned\u003c/h1\u003e\n  \u003cp\u003eI started a new job recently so I had the opportunity to get one of the new M1 MacBooks, I decided to go with the Air. The reviews have been very positive and I’m here to tell you: it is indeed an amazing device. The performance feels a lot better than my MacBook Pro 16”, which is only a year old and about 3x the price.\u003c/p\u003e\n\n\u003cp\u003eWhen I got the Mac I set out with the goal of avoiding Intel builds of software as much as possible and using native whenever possible unless it’s absolutely impossible.\u003c/p\u003e\n\n\u003ch2 id=\"nix\"\u003eNix\u003c/h2\u003e\n\n\u003cp\u003eI have my \u003ca href=\"https://github.com/bouk/b\" target=\"_blank\"\u003ewhole system configuration\u003c/a\u003e stored in \u003ca href=\"/blog/nix/\"\u003eNix\u003c/a\u003e, which was the thing that I least expected to work and arm64 support is still a \u003ca href=\"https://github.com/NixOS/nixpkgs/issues/95903\" target=\"_blank\"\u003ework in progress\u003c/a\u003e. I could install the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ex86_64\u003c/code\u003e build of Nix and run it under Rosetta but wanted to avoid that, so I went back to my old pal;\u003c/p\u003e\n\n\u003ch2 id=\"homebrew\"\u003eHomebrew\u003c/h2\u003e\n\n\u003cp\u003eThis was one of the first things I installed and got working, when I did it I had to install it into \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/opt/homebrew\u003c/code\u003e manually and install everything with the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--source\u003c/code\u003e flag but… everything mostly worked? Lots of props to the Homebrew team for getting everything running so quickly, with some amazing \u003ca href=\"https://github.com/Homebrew/brew/issues/7857\" target=\"_blank\"\u003eopen-source project management\u003c/a\u003e the community worked together very quickly to support most of the software that Homebrew offers. There’s still some software that doesn’t work—notably neovim. But I’m sure that will be fixed soon.\u003c/p\u003e\n\n\u003cp\u003eThe installer now installs into \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/opt/homebrew\u003c/code\u003e by default and there’s prebuilt bottles of most packages, so the Homebrew experience is great.\u003c/p\u003e\n\n\u003ch2 id=\"go\"\u003eGo\u003c/h2\u003e\n\n\u003cp\u003eA lot of my work involves Go, and I depend on a lot of tools written in Go. I was happy to see that the \u003ca href=\"https://blog.golang.org/ports\" target=\"_blank\"\u003eGo team was on top of it\u003c/a\u003e and released the 1.16 beta quite quickly, which is what is installed right now when you do \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebrew install go\u003c/code\u003e. I’ve had no issues with it and am enjoying some of the new features like \u003ca href=\"https://github.com/golang/go/issues/41191\" target=\"_blank\"\u003efile embedding\u003c/a\u003e. GoLand was also \u003ca href=\"https://blog.jetbrains.com/go/2020/12/30/goland-2020-3-1-is-out/\" target=\"_blank\"\u003eupdated\u003c/a\u003e to support M1 pretty quickly.\u003c/p\u003e\n\n\u003ch2 id=\"terraform\"\u003eTerraform\u003c/h2\u003e\n\n\u003cp\u003eTerraform I had the most issues with since using it depends on a bunch of plugins, which are generally only available for x86_64. This won’t change until Go 1.16 has been released. So here I had to resort to building for x86_64, which is easy to do:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ecurl -L \u0026#39;https://github.com/hashicorp/terraform/archive/v0.14.4.tar.gz\u0026#39; | tar -xzf-\ncd terraform-0.14.4/\nGOARCH=amd64 go build -o ~/bin/terraform\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd now Terraform will just use plugin built for Intel. I assume that most Terraform plugins will support arm64 very quickly after Go 1.16 is out.\u003c/p\u003e\n\n\u003ch2 id=\"rust-and-universal-binaries\"\u003eRust and Universal Binaries\u003c/h2\u003e\n\n\u003cp\u003eI use \u003ca href=\"https://github.com/alacritty/alacritty\" target=\"_blank\"\u003eAlacritty\u003c/a\u003e as my terminal. It supported \u003ccode class=\"language-plaintext highlighter-rouge\"\u003earm64\u003c/code\u003e pretty quickly but the current build for it doesn’t include it. Creating a universal binary for Rust is quite easy:\u003c/p\u003e\n\n\u003cdiv class=\"language-bash highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003erustup target add x86_64-apple-darwin aarch64-apple-darwin\ncargo build \u003cspan class=\"nt\"\u003e--release\u003c/span\u003e \u003cspan class=\"nt\"\u003e--target\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ex86_64-apple-darwin\ncargo build \u003cspan class=\"nt\"\u003e--release\u003c/span\u003e \u003cspan class=\"nt\"\u003e--target\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eaarch64-apple-darwin\nlipo target/\u003cspan class=\"o\"\u003e{\u003c/span\u003ex86_64,aarch64\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"nt\"\u003e-apple-darwin\u003c/span\u003e/release/alacritty \u003cspan class=\"nt\"\u003e-create\u003c/span\u003e \u003cspan class=\"nt\"\u003e-output\u003c/span\u003e alacritty\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eRunning \u003ccode class=\"language-plaintext highlighter-rouge\"\u003efile alacritty\u003c/code\u003e will now show you something like:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ealacritty: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64]\nalacritty (for architecture x86_64):    Mach-O 64-bit executable x86_64\nalacritty (for architecture arm64):     Mach-O 64-bit executable arm64\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eNow you can run it in either \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ex86_64\u003c/code\u003e mode with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003earch -x86_64 alacritty\u003c/code\u003e or natively with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003earch -arm64 alacritty\u003c/code\u003e and the OS will automatically select the right binary.\u003c/p\u003e\n\n\u003cp\u003eBuilding a universal binary for a Go application is similarly easy:\u003c/p\u003e\n\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eGOARCH=amd64 go build -o app_amd64 main.go\nGOARCH=arm64 go build -o app_arm64 main.go\nlipo app_{amd64,arm64} -create -output app\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"windows-and-games\"\u003eWindows and Games\u003c/h2\u003e\n\n\u003cp\u003eThere’s a couple of \u003ca href=\"https://en.wikipedia.org/wiki/Age_of_Mythology\" target=\"_blank\"\u003egames\u003c/a\u003e I’ve been playing for a long time that I still need on any computer I get, but they’re 32-bit Windows-only. This was something that was surprisingly easy to get working:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eInstall the \u003ca href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\" target=\"_blank\"\u003eParallels Technical Preview\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003eSign up for Windows Insider and download the \u003ca href=\"https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewARM64\" target=\"_blank\"\u003eWindows 10 on ARM Insider Preview\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003eInstall it into Parallels\u003c/li\u003e\n  \u003cli\u003eDone\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eNow you can download Steam and basically install anything and it will probably work. Microsoft really did some amazing magic in getting both 32-bit and 64-bit x86 programs running on \u003ccode class=\"language-plaintext highlighter-rouge\"\u003earm64\u003c/code\u003e.\u003c/p\u003e\n\n\u003cimg src=\"/images/windows-solitaire.png\" alt=\"\" style=\"max-height: min(100vh, 400px)\" loading=\"lazy\"/\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eSomehow Apple has created the best PC in every category at once. It is even the best Windows PC, despite the multiple layers of emulation that are happening. The battery life is incredible, I haven’t experienced any slowdowns, I don’t hear any fans spin up (because there are none). It’s hard not to be excited about this.\u003c/p\u003e\n\n\u003cp\u003eIf Apple chose to go down this path, they could dominate the server space if they took their magic chips, put it in a \u003ca href=\"https://en.wikipedia.org/wiki/Rack_unit\" target=\"_blank\"\u003erack unit\u003c/a\u003e and made it easy to install Linux onto it. Intel is completely screwed unless they come up with something better, fast.\u003c/p\u003e\n\n  \u003cp\u003e\u003cspan class=\"date\"\u003eJan 2021\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2021-01-01T00:00:00Z",
  "Author": "bou.ke"
}