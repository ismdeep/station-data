{
  "Source": "bou.ke",
  "Title": "Adding some context to Go",
  "Link": "https://bou.ke/blog/context/",
  "Content": "\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"post\"\u003e\n  \u003ch1\u003eAdding some context to Go\u003c/h1\u003e\n  \u003cp\u003e\u003ca href=\"https://blog.golang.org/go1.7\" target=\"_blank\"\u003eGo 1.7 was just released\u003c/a\u003e, and it contains a very useful addition to the standard library: the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econtext\u003c/code\u003e package! Context is a pattern that is used for passing down request-scoped values and timeouts to Goroutines that are involved with a request. The Go blog has a useful \u003ca href=\"https://blog.golang.org/context\" target=\"_blank\"\u003earticle\u003c/a\u003e with examples on how to use \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eContext\u003c/code\u003e. Like any worker with a new hammer, I immediately started looking for nails to hit.\u003c/p\u003e\n\n\u003cp\u003eOne of my favourite Go packages for writing HTTP services is \u003ca href=\"https://github.com/julienschmidt/httprouter\" target=\"_blank\"\u003eJulian Schmidt’s httprouter\u003c/a\u003e. It provides you with a no-nonsense way to have parameterized routing in Go, while having better performance than the built-in muxer. Using \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehttprouter\u003c/code\u003e looks something like this (example stolen from the README):\u003c/p\u003e\n\n\u003cpre\u003epackage main\n\nimport (\n    \u0026#34;fmt\u0026#34;\n    \u0026#34;github.com/julienschmidt/httprouter\u0026#34;\n    \u0026#34;net/http\u0026#34;\n    \u0026#34;log\u0026#34;\n)\n\nfunc Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n    fmt.Fprint(w, \u0026#34;Welcome!\\n\u0026#34;)\n}\n\nfunc Hello(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {\n    fmt.Fprintf(w, \u0026#34;hello, %s!\\n\u0026#34;, ps.ByName(\u0026#34;name\u0026#34;))\n}\n\nfunc main() {\n    router := httprouter.New()\n    router.GET(\u0026#34;/\u0026#34;, Index)\n    router.GET(\u0026#34;/hello/:name\u0026#34;, Hello)\n\n    log.Fatal(http.ListenAndServe(\u0026#34;:8080\u0026#34;, router))\n}\n\n\u003c/pre\u003e\n\n\u003cp\u003eAs you can see the API is very straightforward, but it does come at a price. You now need to add a third parameter to your handlers, which makes it API-incompatible with the built-in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehttp.HandlerFunc\u003c/code\u003e type definition. Another issue is that middlewares don’t pass through the parameters. That is, if there is anything between the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehttprouter\u003c/code\u003e and your handler (like a middleware that compresses the response), you have no way of accessing the URL parameters.\u003c/p\u003e\n\n\u003ch2 id=\"enter-context\"\u003eEnter \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eContext\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eContext\u003c/code\u003e seems to be the perfect fit for this. It allows us to attach additional information to the request, without forcing mid/downstream consumers to change their API. In Go 1.7 the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehttp.Request\u003c/code\u003e struct has two new methods;\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003efunc Context() context.Context\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eand\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eWithContext(ctx context.Context) *Request\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003ethe latter of which returns a new \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eRequest\u003c/code\u003e with the context replaced. I have \u003ca href=\"https://github.com/bouk/httprouter\" target=\"_blank\"\u003eforked httprouter\u003c/a\u003e and attempted to re-implement the parameters using \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eContext\u003c/code\u003e. It uses as much of the standard \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet/http\u003c/code\u003e interfaces as possible, and using it looks as follows:\u003c/p\u003e\n\n\u003cpre\u003epackage main\n\nimport (\n    \u0026#34;fmt\u0026#34;\n    \u0026#34;github.com/bouk/httprouter\u0026#34;\n    \u0026#34;net/http\u0026#34;\n    \u0026#34;log\u0026#34;\n)\n\nfunc Index(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprint(w, \u0026#34;Welcome!\\n\u0026#34;)\n}\n\nfunc Hello(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \u0026#34;hello, %s!\\n\u0026#34;, httprouter.GetParam(r, \u0026#34;name\u0026#34;))\n}\n\nfunc main() {\n    router := httprouter.New()\n    router.GET(\u0026#34;/\u0026#34;, Index)\n    router.GET(\u0026#34;/hello/:name\u0026#34;, Hello)\n\n    log.Fatal(http.ListenAndServe(\u0026#34;:8080\u0026#34;, router))\n}\n\u003c/pre\u003e\n\n\u003cp\u003eBecause we are now conforming to the Go \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehttp.Handler\u003c/code\u003e interface, we can easily attach a middleware onto a single route, while still retaining the ability to reach the parameters. For example, we could put \u003ca href=\"https://github.com/NYTimes/gziphandler\" target=\"_blank\"\u003egithub.com/NYTimes/gziphandler\u003c/a\u003e onto our \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eHello\u003c/code\u003e handler:\u003c/p\u003e\n\n\u003cpre\u003epackage main\n\nimport (\n\t\u0026#34;fmt\u0026#34;\n\t\u0026#34;github.com/NYTimes/gziphandler\u0026#34;\n\t\u0026#34;github.com/bouk/httprouter\u0026#34;\n\t\u0026#34;log\u0026#34;\n\t\u0026#34;net/http\u0026#34;\n)\n\nfunc Index(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprint(w, \u0026#34;Welcome!\\n\u0026#34;)\n}\n\nfunc Hello(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \u0026#34;hello, %s!\\n\u0026#34;, httprouter.GetParam(r, \u0026#34;name\u0026#34;))\n}\n\nfunc main() {\n\trouter := httprouter.New()\n\trouter.GET(\u0026#34;/\u0026#34;, Index)\n\trouter.GET(\u0026#34;/hello/:name\u0026#34;, gziphandler.GzipHandler(http.HandlerFunc(Hello)))\n\n\tlog.Fatal(http.ListenAndServe(\u0026#34;:8080\u0026#34;, router))\n}\n\u003c/pre\u003e\n\n\u003ch2 id=\"other-uses-for-context\"\u003eOther uses for Context\u003c/h2\u003e\n\n\u003cp\u003eRequest-scoped value passing is just one of the use cases of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eContext\u003c/code\u003e, as it also allows for communicating \u003ca href=\"https://golang.org/pkg/context/#WithCancel\" target=\"_blank\"\u003ecancellation\u003c/a\u003e, \u003ca href=\"https://golang.org/src/context/context.go?s=11899:11974#L359\" target=\"_blank\"\u003edeadlines\u003c/a\u003e and \u003ca href=\"https://golang.org/src/context/context.go?s=13917:13994#L426\" target=\"_blank\"\u003etimeouts\u003c/a\u003e. These features make building more resilient services easier, and support for cancelation has already been built into the standard \u003ca href=\"https://golang.org/pkg/net/#Dialer.DialContext\" target=\"_blank\"\u003enet\u003c/a\u003e, \u003ca href=\"https://golang.org/pkg/net/http/#Request.Context\" target=\"_blank\"\u003enet/http\u003c/a\u003e and \u003ca href=\"https://golang.org/pkg/os/exec/#CommandContext\" target=\"_blank\"\u003eos/exec\u003c/a\u003e packages.\u003c/p\u003e\n\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eI enjoyed adapting an existing library to use this new feature, and I’m excited to see what other people do with it! I would love to get some feedback on my understanding of what/how \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eContext\u003c/code\u003e should be used, so feel free to send me a \u003ca href=\"https://twitter.com/BvdBijl\" target=\"_blank\"\u003etweet\u003c/a\u003e.\u003c/p\u003e\n\n  \u003cp\u003e\u003cspan class=\"date\"\u003eAug 2016\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2016-08-01T00:00:00Z",
  "Author": "bou.ke"
}