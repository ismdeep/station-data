{
  "Source": "bou.ke",
  "Title": "Getting into robotics as a software engineer",
  "Link": "https://bou.ke/blog/robotics/",
  "Content": "\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"post\"\u003e\n  \u003ch1\u003eGetting into robotics as a software engineer\u003c/h1\u003e\n  \u003cp\u003eMost of my career has been working on web services and mobile apps but at some point this got old for me—in high school I was part of a soldering club and I had this lingering feeling that I wanted to get into ‘harder’ problems. Two years ago I started looking around for companies in Amsterdam and came across \u003ca href=\"https://www.monumental.co\" target=\"_blank\"\u003eMonumental\u003c/a\u003e where I’m now working to automate construction using robots, starting with masonry. And let me tell you: it’s super satisfying to see a physical result like a wall get built when the system works. And when I see people working on some crypto or fintech nonsense I can’t help but feel I would be extremely bored working on something like that.\u003c/p\u003e\n\n\u003cimg src=\"/images/robot.jpg\" alt=\"\" style=\"max-height: min(100vh, 2210px)\" loading=\"lazy\"/\u003e\n\u003cp\u003eYou can have much higher impact getting out of the world of bits and bytes and into that of atoms and electrons. An app is not going to house people, feed them or put them on Mars. We can’t solve climate change with smarter software, we’ll also need massive amounts of solar panels and energy storage. We need to change how we feed ourselves, how we heat our houses and how will we build housing when half the people will be retired because of our aging population.\u003c/p\u003e\n\n\u003cp\u003eThe solutions for these problems will require software. Control system, data analysis and vision are how we can make hardware come alive. Software is where a whole system comes together.\u003c/p\u003e\n\n\u003cp\u003eWhen working on hardware you get to work with engineers specialized in other disciplines, in my case mechanical and electrical engineers. It’s super fun and inspiring to collaborate with people who are extremely capable, and exposure to other worlds will make you a better software engineer. Something you’ll realize while working with mechanical engineers is that they look at the world differently. The world around you is malleable, to a much higher degree than you realize. That’s something I found while \u003ca href=\"/blog/lights/\"\u003edoing home improvement\u003c/a\u003e—even if you punch a hole in your wall you can always fix it.\u003c/p\u003e\n\n\u003cp\u003eAs you start working with other engineers you’ll first be intimidated by them: they will be talking about \u003cem\u003etwenty twenty\u003c/em\u003e and \u003cem\u003epercussive maintenance\u003c/em\u003e and \u003cem\u003eEMI\u003c/em\u003e and you’ll have no idea what they’re talking about. Over time you’ll know enough about how they work to communicate across domains and contribute to the discussion. The kinds of programming you’ll be doing is different, more like game programming with 3D trigonometry and scene graphs.\u003c/p\u003e\n\n\u003cp\u003eIn the end however, software for robots is just software. You’ll have to do data munging, figure out backups, all that stuff. However, with hardware, there’s new kinds of bugs you’ll have to deal with. I’ve never had to consider a cable being loose before, but now that’s something to look for when debugging a system. People who can work across disciplines are key, someone needs to make sure everything comes together.\u003c/p\u003e\n\n\u003cp\u003eThings will be harder because you’re dealing with physical objects. Managing what version of a service you have running in the cloud was figured out during the DevOps/GitOps era: you always deploy the latest version you have on git and do a rolling or phased rollout. You don’t worry about state staying around on your running system because you throw away your container/VM on every deployment. This is the \u003cem\u003ecattle, not pets\u003c/em\u003e approach to software development.\u003c/p\u003e\n\n\u003cp\u003eNow imagine you have 3 robots in the office, each running multiple services with different colleagues working on them at the same time. And there’s software running on the operator’s computer that needs to be up-to-date. And you have robots working on-site that you want to keep stable \u003cem\u003eand\u003c/em\u003e up-to-date while all these changes are happening. How do you manage all this? You can’t throw away your robot every time you want to update the software!\u003c/p\u003e\n\n\u003cp\u003eThese are problems we can engineer ourselves out of! One indispensable tool in my own toolkit is \u003ca href=\"/blog/nix/\"\u003eNix\u003c/a\u003e, which allows me to manage the whole system config in our git repository and have the system automatically pull and apply that. This gives us the benefits of throwaway VMs on top of a stateful system. Because of problems like this there will be days where you wish you were working on a simple CRUD app, however.\u003c/p\u003e\n\n\u003cp\u003eYou’ll want to learn C or C++ because microcontrollers are programmed using it, you can’t get around it. And honestly, modern C++ is not \u003cem\u003ethat\u003c/em\u003e bad, but it does require discipline. You’ll have to brace yourself for any code written by embedded engineers, because it’s going to be piles of macro-filled C. Some straightforward OOP with classes and separation of concerns will instantly make you an S-tier great embedded software engineer. Get yourself a \u003ca href=\"https://www.raspberrypi.com/products/raspberry-pi-pico/\" target=\"_blank\"\u003eRaspberry Pi Pico\u003c/a\u003e, a breadboard, servos and LEDs and start messing around with it.\u003c/p\u003e\n\n\u003cp\u003eAlso, if you’re not already, you should get into writing Rust. The powerful type system and safety is incredible. The build tooling and ecosystem is much better than C++ et al. \u003ca href=\"https://embassy.dev\" target=\"_blank\"\u003eRust for embedded\u003c/a\u003e is not there yet, but improving all the time.\u003c/p\u003e\n\n\u003cp\u003eAs you start branching out, you’ll want to learn CAD and \u003ca href=\"https://arslan.io/2022/06/11/how-i-got-into-3d-printing/\" target=\"_blank\"\u003e3D printing\u003c/a\u003e. Because it’s cool to make physical objects and learn a new skill. But also because you’ll understand your colleague’s hair pulling when Fusion 360 crashes better. Then learn soldering as well, because then you can do simple fixes and learn about how electronics are developed. Know that prototyping hardware is easier than ever. CAD tooling is approachable with lots of YouTube tutorials available. Consumer-level 3D printers are becoming easier and \u003ca href=\"https://www.theverge.com/2023/9/20/23881523/bambu-a1-mini-ams-lite-3d-printer-price-release-hands-on\" target=\"_blank\"\u003ebetter all the time\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eGo do it! Go build robots! Send me pictures of the robots you’re making! Life is too short to build another Candy Crush clone!\u003c/p\u003e\n\n\u003cp\u003eAnd if the idea of working on construction robots excites you, \u003ca href=\"https://www.monumental.co/jobs\" target=\"_blank\"\u003ecome work with me\u003c/a\u003e!\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eThanks to \u003ca href=\"https://xav.io\" target=\"_blank\"\u003eXavier\u003c/a\u003e and Phatho for reading drafts of this\u003c/em\u003e.\u003c/p\u003e\n\n  \u003cp\u003e\u003cspan class=\"date\"\u003eFeb 2024\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2024-02-01T00:00:00Z",
  "Author": "bou.ke"
}