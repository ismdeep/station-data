{
  "Source": "bou.ke",
  "Title": "Playing around with shaders",
  "Link": "https://bou.ke/blog/shaders/",
  "Content": "\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"post\"\u003e\n  \u003ch1\u003ePlaying around with shaders\u003c/h1\u003e\n  \u003cp\u003eI came across \u003ca href=\"https://makepad.github.io/makepad/\" target=\"_blank\"\u003emakepad\u003c/a\u003e by \u003ca href=\"https://twitter.com/rikarends\" target=\"_blank\"\u003eRik Arends\u003c/a\u003e, who is creating a text editor based on Rust and WebAssembly, that is using shaders for rendering the UI. Shaders have fascinated me for a long time, as they’re a completely different way of programming. This weekend I had some time to spare, so I started going through \u003ca href=\"https://thebookofshaders.com/\" target=\"_blank\"\u003eThe Book of Shaders\u003c/a\u003e, an online book that explains some of the basics of shaders through interactive toys that you can play around with and tweak, to understand what is going on.\u003c/p\u003e\n\n\u003ccanvas class=\"glslCanvas\" data-fragment-url=\"/shaders/rainbow-waves.txt\"\u003e\u003c/canvas\u003e\n\n\u003cp\u003eThe cool thing about The Book of Shaders is that it comes with an online editor, where you edit the shader on the left, and on the right you have a window that is rendering the shader in real-time. This gives editing the shader a very satisfying feedback loop, where you change a value and immediately see the result. For example, the above rainbow waves shader looks as follows in the editor:\u003c/p\u003e\n\n\u003cimg src=\"/images/shader-editor.png\" alt=\"\" style=\"max-height: min(100vh, 574px)\" loading=\"lazy\"/\u003e\n\u003cp\u003eShaders are kind of mind-bending in how they work. If you’re familiar with canvas drawing APIs like those \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial\" target=\"_blank\"\u003eon the web\u003c/a\u003e you can forget everything you know about them, because they will be of no use to you. The code you write for your shader is executed on all of the pixels at the same time, which means if you want to draw a square for example, you can’t just fill in the pixels one by one. Rather you write code that determines whether the current pixel is inside the square, and give it a different color if it is. Then you repeat this for every single thing you want to do and things get really complicated really fast. After you manage to bend your mind enough to this unnatural way of thinking, you can create some really neat effects however, that run super smoothly.\u003c/p\u003e\n\n\u003ccanvas class=\"glslCanvas\" data-fragment-url=\"/shaders/box-bounce.txt\"\u003e\u003c/canvas\u003e\n\n\u003cp\u003eYou can copy the source for \u003ca href=\"/shaders/radar.txt\"\u003eradar\u003c/a\u003e, \u003ca href=\"/shaders/rainbow-waves.txt\"\u003erainbow waves\u003c/a\u003e and \u003ca href=\"/shaders/rainbow-waves.txt\"\u003ebox bounce\u003c/a\u003e into the \u003ca href=\"https://patriciogonzalezvivo.github.io/glslEditor/\" target=\"_blank\"\u003eonline editor\u003c/a\u003e and play around with them. Trying changing some of the numbers and seeing what the effect is on the output!\u003c/p\u003e\n\n\u003ccanvas class=\"glslCanvas\" data-fragment-url=\"/shaders/radar.txt\"\u003e\u003c/canvas\u003e\n\n\u003cscript src=\"/glslcanvas.js\"\u003e\u003c/script\u003e\n\n\n  \u003cp\u003e\u003cspan class=\"date\"\u003eJun 2019\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2019-06-01T00:00:00Z",
  "Author": "bou.ke"
}