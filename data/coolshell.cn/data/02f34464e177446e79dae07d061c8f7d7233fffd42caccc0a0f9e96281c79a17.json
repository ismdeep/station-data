{
  "Source": "coolshell.cn",
  "Title": "深入理解C语言",
  "Link": "https://coolshell.cn/articles/5761.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"bbb7456692a9c62307eb9e9f-text/javascript\"\u003e\u003c/script\u003eDennis Ritchie  过世了，他发明了C语言，一个影响深远并彻底改变世界的计算机语言。一门经历40多年的到今天还长盛不衰的语言，今天很多语言都受到C的影响，C++，Java，C#，Perl， PHP， Javascript， 等等。但是，你对C了解吗？相信你看过本站的《\u003ca title=\"C语言的谜题\" href=\"https://coolshell.cn/articles/945.html\" target=\"_blank\"\u003eC语言的谜题\u003c/a\u003e》还有《\u003ca title=\"谁说C语言很简单？\" href=\"https://coolshell.cn/articles/873.html\" target=\"_blank\"\u003e谁说C语言很简单？\u003c/a\u003e》，这里，我再写一篇关于深入理解C语言的文章，一方面是缅怀Dennis，另一方面是告诉大家应该如何学好一门语言。（顺便注明一下，下面的一些例子来源于\u003ca href=\"http://www.slideshare.net/olvemaudal/deep-c\" target=\"_blank\"\u003e这个slides\u003c/a\u003e）\u003c/p\u003e\n\u003cp\u003e首先，我们先来看下面这个经典的代码：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eint main()\n{\n    int a = 42;\n    printf(“%d\\n”, a);\n}\u003c/pre\u003e\n\u003cp\u003e从这段代码里你看到了什么问题？我们都知道，这段程序里少了一个#include \u0026lt;stdio.h\u0026gt; 还少了一个return 0;的返回语句。\u003c/p\u003e\n\u003cp\u003e不过，让我们来深入的学习一下，\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e这段代码在C++下无法编译，因为C++需要明确声明函数\u003c/li\u003e\n\u003cli\u003e这段代码在C的编译器下会编译通过，因为在编译期，编译器会生成一个printf的函数定义，并生成.o文件，链接时，会找到标准的链接库，所以能编译通过。\u003c/li\u003e\n\u003cli\u003e 但是，你知道这段程序的退出码吗？在ANSI-C下，退出码是一些未定义的垃圾数。但在C89下，退出码是3，因为其取了printf的返回值。为什么printf函数返回3呢？因为其输出了’4′, ‘2’,’\\n’ 三个字符。而在C99下，其会返回0，也就是成功地运行了这段程序。你可以使用gcc的 -std=c89或是-std=c99来编译上面的程序看结果。\u003c/li\u003e\n\u003cli\u003e另外，我们还要注意main()，在C标准下，如果一个函数不要参数，应该声明成main(void)，而main()其实相当于main(…)，也就是说其可以有任意多的参数。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e我们再来看一段代码：\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-5761\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\nvoid f(void)\n{\n   static int a = 3;\n   static int b;\n   int c;\n   ++a; ++b; ++c;\n   printf(\u0026#34;a=%d\\n\u0026#34;, a);\n   printf(\u0026#34;b=%d\\n\u0026#34;, b);\n   printf(\u0026#34;c=%d\\n\u0026#34;, c);\n}\nint main(void)\n{\n   f();\n   f();\n   f();\n}\u003c/pre\u003e\n\u003cp\u003e这个程序会输出什么？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e我相信你对a的输出相当有把握，就分别是4，5，6，因为那个静态变量。\u003c/li\u003e\n\u003cli\u003e对于c呢，你应该也比较肯定，那是一堆乱数。\u003c/li\u003e\n\u003cli\u003e但是你可能不知道b的输出会是什么？答案是1，2，3。为什么和c不一样呢？因为，如果要初始化，每次调用函数里，编译器都要初始化函数栈空间，这太费性能了。但是c的编译器会初始化静态变量为0，因为这只是在启动程序时的动作。\u003c/li\u003e\n\u003cli\u003e全局变量同样会被初始化。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e说到全局变量，你知道 静态全局变量和一般全局变量的差别吗？是的，对于static 的全局变量，其对链接器不可以见，也就是说，这个变量只能在当前文件中使用。\u003c/p\u003e\n\u003cp\u003e我们再来看一个例子：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\nvoid foo(void)\n{\n    int a;\n    printf(\u0026#34;%d\\n\u0026#34;, a);\n}\nvoid bar(void)\n{\n    int a = 42;\n}\nint main(void)\n{\n    bar();\n    foo();\n}\n\u003c/pre\u003e\n\u003cp\u003e你知道这段代码会输出什么吗？A) 一个随机值，B) 42。A 和 B都对（在“\u003ca title=\"在函数外存取局部变量的一个比喻\" href=\"https://coolshell.cn/articles/4907.html\" target=\"_blank\"\u003e在函数外存取局部变量的一个比喻\u003c/a\u003e”文中的最后给过这个例子），不过，你知道为什么吗？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果你使用一般的编译，会输出42，因为我们的编译器优化了函数的调用栈（重用了之前的栈），为的是更快，这没有什么副作用。反正你不初始化，他就是随机值，既然是随机值，什么都无所谓。\u003c/li\u003e\n\u003cli\u003e但是，如果你的编译打开了代码优化的开关，-O，这意味着，foo()函数的代码会被优化成main()里的一个inline函数，也就是说没有函数调用，就像宏定义一样。于是你会看到一个随机的垃圾数。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e下面，我们再来看一个示例：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\nint b(void) { printf(“3”); return 3; }\nint c(void) { printf(“4”); return 4; }\nint main(void)\n{\n   int a = b() + c();\n   printf(“%d\\n”, a);\n}\u003c/pre\u003e\n\u003cp\u003e这段程序会输出什么？，你会说是，3，4，7。但是我想告诉你，这也有可能输出，4，3，7。为什么呢？ 这是因为，在C/C++中，表达的评估次序是没有标准定义的。编译器可以正着来，也可以反着来，所以，不同的编译器会有不同的输出。你知道这个特性以后，你就知道这样的程序是没有可移植性的。\u003c/p\u003e\n\u003cp\u003e我们再来看看下面的这堆代码，他们分别输出什么呢？\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eint a=41; a++; printf(\u0026#34;%d\\n\u0026#34;, a);\u003c/code\u003e\u003cbr/\u003e\n\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eint a=41; a++ \u0026amp; printf(\u0026#34;%d\\n\u0026#34;, a);\u003c/code\u003e\u003cbr/\u003e\n\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eint a=41; a++ \u0026amp;\u0026amp; printf(\u0026#34;%d\\n\u0026#34;, a);\u003c/code\u003e\u003cbr/\u003e\n\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eint a=41; if (a++ \u0026lt; 42) printf(\u0026#34;%d\\n\u0026#34;, a);\u003c/code\u003e\u003cbr/\u003e\n\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eint a=41; a = a++; printf(\u0026#34;%d\\n\u0026#34;, a);\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e只有示例一，示例三，示例四输出42，而示例二和五的行为则是未定义的。关于这种未定义的东西是因为Sequence Points的影响（Sequence Points是一种规则，也就是程序执行的序列点，在两点之间的表达式只能对变量有一次修改），因为这会让编译器不知道在一个表达式顺列上如何存取变量的值。比如a = a++，a + a++，不过，在C中，这样的情况很少。\u003c/p\u003e\n\u003cp\u003e下面，再看一段代码：（假设int为4字节，char为1字节）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estruct X { int a; char b; int c; };\nprintf(\u0026#34;%d,\u0026#34;, sizeof(struct X));\nstruct Y { int a; char b; int c; char d};\nprintf(\u0026#34;%d\\n\u0026#34;, sizeof(struct Y));\u003c/pre\u003e\n\u003cp\u003e这个代码会输出什么?\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003ea) 9，10\u003cbr/\u003e\nb)12, 12\u003cbr/\u003e\nc)12, 16\u003c/p\u003e\n\u003cp\u003e答案是C，我想，你一定知道字节对齐，是向4的倍数对齐。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e但是，你知道为什么要字节对齐吗？还是因为性能。因为这些东西都在内存里，如果不对齐的话，我们的编译器就要向内存一个字节一个字节的取，这样一来，struct X，就需要取9次，太浪费性能了，而如果我一次取4个字节，那么我三次就搞定了。所以，这是为了性能的原因。\u003c/li\u003e\n\u003cli\u003e但是，为什么struct Y不向12 对齐，却要向16对齐，因为char d; 被加在了最后，当编译器计算一个结构体的尺寸时，是边计算，边对齐的。也就是说，编译器先看到了int，很好，4字节，然后是 char，一个字节，而后面的int又不能填上还剩的3个字节，不爽，把char b对齐成4，于是计算到d时，就是13 个字节，于是就是16啦。但是如果换一下d和c的声明位置，就是12了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e另外，再提一下，上述程序的printf中的%d并不好，因为，在64位下，sizeof的size_t是unsigned long，而32位下是 unsigned int，所以，C99引入了一个专门给size_t用的%zu。这点需要注意。在64位平台下，C/C++ 的编译需要注意很多事。你可以参看《\u003ca title=\"64位平台C/C++开发注意事项\" href=\"https://coolshell.cn/articles/3512.html\" target=\"_blank\"\u003e64位平台C/C++开发注意事项\u003c/a\u003e》。\u003c/p\u003e\n\u003cp\u003e下面，我们再说说编译器的Warning，请看代码：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\nint main(void)\n{\n    int a;\n    printf(\u0026#34;%d\\n\u0026#34;, a);\n}\u003c/pre\u003e\n\u003cp\u003e考虑下面两种编译代码的方式 ：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ecc -Wall a.c\u003c/li\u003e\n\u003cli\u003ecc -Wall -O a.c\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e前一种是不会编译出a未初化的警告信息的，而只有在-O的情况下，才会有未初始化的警告信息。这点就是为什么我们在makefile里的CFLAGS上总是需要-Wall和 -O。\u003c/p\u003e\n\u003cp\u003e最后，我们再来看一个指针问题，你看下面的代码：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\nint main(void)\n{\n    int a[5];\n    printf(\u0026#34;%x\\n\u0026#34;, a);\n    printf(\u0026#34;%x\\n\u0026#34;, a+1);\n    printf(\u0026#34;%x\\n\u0026#34;, \u0026amp;a);\n    printf(\u0026#34;%x\\n\u0026#34;, \u0026amp;a+1);\n}\u003c/pre\u003e\n\u003cp\u003e假如我们的a的地址是：0Xbfe2e100, 而且是32位机，那么这个程序会输出什么？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第一条printf语句应该没有问题，就是 bfe2e100\u003c/li\u003e\n\u003cli\u003e第二条printf语句你可能会以为是bfe2e101。那就错了，a+1，编译器会编译成 a+ 1*sizeof(int)，int在32位下是4字节，所以是加4，也就是bfe2e104\u003c/li\u003e\n\u003cli\u003e第三条printf语句可能是你最头疼的，我们怎么知道a的地址？我不知道吗？可不就是bfe2e100。那岂不成了a==\u0026amp;a啦？这怎么可能？自己存自己的？也许很多人会觉得指针和数组是一回事，那么你就错了。如果是 int *a，那么没有问题，因为a是指针，所以 \u0026amp;a 是指针的地址，a 和 \u0026amp;a不一样。但是这是数组啊a[]，所以\u0026amp;a其实是被编译成了 \u0026amp;a[0]。\u003c/li\u003e\n\u003cli\u003e第四条printf语句就很自然了，就是bfe2e104。还是不对，因为是\u0026amp;a是数组，被看成int(*)[5]，所以sizeof(a)是5，也就是5*sizeof(int)，也就是bfe2e114。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e看过这么多，你可能会觉得C语言设计得真扯淡啊。不过我要告诉下面几点Dennis当初设计C语言的初衷：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003e1）相信程序员，不阻止程序员做他们想做的事。\u003c/strong\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003e2）保持语言的简洁，以及概念上的简单。\u003c/strong\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003e3）保证性能，就算牺牲移植性。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e今天很多语言进化得很高级了，语法也越来越复杂和强大，但是C语言依然光芒四射，Dennis离世了，但是C语言的这些设计思路将永远不朽。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（请勿用于商业用途，转载时请注明作者和出处）\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/03/rust-social-wide-150x150.jpg\" alt=\"Rust语言的编程范式\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_title\"\u003eRust语言的编程范式\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/19996.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2019/11/ken.dennis-300x186-1-150x150.jpeg\" alt=\"Unix 50 年：Ken Thompson 的密码\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/19996.html\" class=\"wp_rp_title\"\u003eUnix 50 年：Ken Thompson 的密码\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/07/api-design-300x278-2-150x150.jpg\" alt=\"API设计原则 – Qt官网的设计实践总结\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_title\"\u003eAPI设计原则 – Qt官网的设计实践总结\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"Leetcode 编程训练\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_title\"\u003eLeetcode 编程训练\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12012.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/10/edsm-150x150.gif\" alt=\"State Threads 回调终结者\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12012.html\" class=\"wp_rp_title\"\u003eState Threads 回调终结者\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-5761\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"84f8994609\"\u003e\u003cimg id=\"rating_5761_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(5761, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.1, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-bbb7456692a9c62307eb9e9f-=\"\"/\u003e\u003cimg id=\"rating_5761_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(5761, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.1, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-bbb7456692a9c62307eb9e9f-=\"\"/\u003e\u003cimg id=\"rating_5761_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(5761, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.1, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-bbb7456692a9c62307eb9e9f-=\"\"/\u003e\u003cimg id=\"rating_5761_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(5761, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.1, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-bbb7456692a9c62307eb9e9f-=\"\"/\u003e\u003cimg id=\"rating_5761_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(5761, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.1, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-bbb7456692a9c62307eb9e9f-=\"\"/\u003e (\u003cstrong\u003e61\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.11\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_5761_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"深入理解C语言\"/\u003e\u003cmeta itemprop=\"headline\" content=\"深入理解C语言\"/\u003e\u003cmeta itemprop=\"description\" content=\"Dennis Ritchie  过世了，他发明了C语言，一个影响深远并彻底改变世界的计算机语言。一门经历40多年的到今天还长盛不衰的语言，今天很多语言都受到C的影响，C++，Java，C#，Perl， PHP， Javascript， 等等。但是，你对C了解吗？相信你看过本站的《C语言的谜题》还有《谁说C语言很简单？》，这里，我再写一篇关于深入理解C语言的文章，一方面是缅怀Dennis，另一方面是...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2011-11-01T08:26:38+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2011-11-02T09:46:35+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/5761.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/5761.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.11\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"61\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-5761-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2011-11-01T08:26:38+08:00",
  "Author": "陈皓"
}