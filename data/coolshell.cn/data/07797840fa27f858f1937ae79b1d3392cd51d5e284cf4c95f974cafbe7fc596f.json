{
  "Source": "coolshell.cn",
  "Title": "Java构造时成员初始化的陷阱",
  "Link": "https://coolshell.cn/articles/1106.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"7c2e307d25aa8e5459236def-text/javascript\"\u003e\u003c/script\u003e让我们先来看两个类：Base和Derived类。注意其中的whenAmISet成员变量，和方法preProcess()\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003epublic class Base\n{\n    Base() {\n        preProcess();\n    }\n\n    void preProcess() {}\n}\u003c/pre\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003epublic class Derived extends Base\n{\n    public String whenAmISet = \u0026#34;set when declared\u0026#34;;\n\n    @Override void preProcess()\n    {\n        whenAmISet = \u0026#34;set in preProcess()\u0026#34;;\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003e如果我们构造一个子类实例，那么，whenAmISet 的值会是什么呢？\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-1106\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003epublic class Main\n{\n    public static void main(String[] args)\n    {\n        Derived d = new Derived();\n        System.out.println( d.whenAmISet );\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003e再续继往下阅读之前，请先给自己一些时间想一下上面的这段程序的输出是什么？是的，这看起来的确相当简单，甚至不需要编译和运行上面的代码，我们也应该知道其答案，那么，你觉得你知道答案吗？你确定你的答案正确吗？\u003c/p\u003e\n\u003cp\u003e很多人都会觉得那段程序的输出应该是“set in preProcess()”，这是因为当子类Derived 的构造函数被调用时，其会隐晦地调用其基类Base的构造函数（通过super()函数），于是基类Base的构造函数会调用preProcess() 函数，因为这个类的实例是Derived的，而且在子类Derived中对这个函数使用了override关键字，所以，实际上调用到的是：Derived.preProcess()，而这个方法设置了whenAmISet 成员变量的值为：“set in preProcess()”。\u003c/p\u003e\n\u003cp\u003e当然，上面的结论是错误的。如果你编译并运行这个程序，你会发现，程序实际输出的是“set when declared ”。怎么为这样呢？难道是基类Base 的preProcess() 方法被调用啦？也不是！你可以在基类的preProcess中输出点什么看看，你会发现程序运行时，Base.preProcess()并没有被调用到（不然这对于Java所有的应用程序将会是一个极具灾难性的Bug）。\u003c/p\u003e\n\u003cp\u003e虽然上面的结论是错误的，但推导过程是合理的，只是不完整，下面是整个运行的流程：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e进入Derived 构造函数。\u003c/li\u003e\n\u003cli\u003eDerived 成员变量的内存被分配。\u003c/li\u003e\n\u003cli\u003eBase 构造函数被隐含调用。\u003c/li\u003e\n\u003cli\u003eBase 构造函数调用preProcess()。\u003c/li\u003e\n\u003cli\u003eDerived 的preProcess 设置whenAmISet 值为 “set in preProcess()”。\u003c/li\u003e\n\u003cli\u003eDerived 的成员变量初始化被调用。\u003c/li\u003e\n\u003cli\u003e执行Derived 构造函数体。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e等一等，这怎么可能？在第6步，Derived 成员的初始化居然在 preProcess() 调用之后？是的，正是这样，我们不能让成员变量的声明和初始化变成一个原子操作，虽然在Java中我们可以把其写在一起，让其看上去像是声明和初始化一体。但这只是假象，\u003cstrong\u003e\u003cspan style=\"color: #800000;\"\u003e我们的错误就在于我们把Java中的声明和初始化看成了一体\u003c/span\u003e\u003c/strong\u003e。\u003cstrong\u003e在C++的世界中，C++并不支持成员变量在声明的时候进行初始化，其需要你在构造函数中显式的初始化其成员变量的值，看起来很土，但其实C++用心良苦。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e在面向对象的世界中，因为程序以对象的形式出现，导致了我们对程序执行的顺序雾里看花。所以，\u003cstrong\u003e在面向对象的世界中，程序执行的顺序相当的重要\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e下面是对上面各个步骤的逐条解释。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e进入构造函数。\u003c/li\u003e\n\u003cli\u003e为成员变量分配内存。\u003c/li\u003e\n\u003cli\u003e除非你显式地调用super()，否则Java 会在子类的构造函数最前面偷偷地插入super() 。\u003c/li\u003e\n\u003cli\u003e调用父类构造函数。\u003c/li\u003e\n\u003cli\u003e调用preProcess，因为被子类override，所以调用的是子类的。\u003c/li\u003e\n\u003cli\u003e于是，初始化发生在了preProcess()之后。这是因为，Java需要保证父类的初始化早于子类的成员初始化，否则，在子类中使用父类的成员变量就会出现问题。\u003c/li\u003e\n\u003cli\u003e正式执行子类的构造函数（当然这是一个空函数，虽然我们没有声明）。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e你可以查看《Java语言的规格说明书》中的 \u003ca href=\"http://java.sun.com/docs/books/jls/third_edition/html/execution.html#12.5\"\u003e相关章节\u003c/a\u003e 来了解更多的Java创建对象时的细节。\u003c/p\u003e\n\u003cp\u003eC++的程序员应该都知道，在C++的世界中在“构造函数中调用虚函数”是不行的，Effective C++ 条款9：Never call virtual functions during construction or destruction，Scott Meyers已经解释得很详细了。\u003c/p\u003e\n\u003cp\u003e在语言设计的时候，“\u003cstrong\u003e在构造函数中调用虚函数\u003c/strong\u003e”是个两难的问题。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e如果调用的是父类的函数的话，这个有点违反虚函数的定义。\u003c/li\u003e\n\u003cli\u003e如果调用的是子类的函数的话，这可能产生问题的：因为在构造子类对象的时候，首先调用父类的构造函数，而这时候如果去调用子类的函数，由于子类还没有构造完成，子类的成员尚未初始化，这么做显然是不安全的。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eC++选择了第一种，而Java选择了第二种。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eC++类的设计相对比较简陋，通过虚函数表来实现，缺少类的元信息。\u003c/li\u003e\n\u003cli\u003e而Java类的则显得比较完整，有super指针来导航到父类。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e最后，需要向大家推荐一本书，Joshua Bloch 和 Neal Gafter 写的 \u003ca href=\"https://www.amazon.com/gp/product/032133678X?ie=UTF8\u0026amp;tag=billthelizard-20\u0026amp;linkCode=as2\u0026amp;camp=1789\u0026amp;creative=9325\u0026amp;creativeASIN=032133678X\"\u003eJava Puzzlers: Traps, Pitfalls, and Corner Cases\u003c/a\u003e，中文版《\u003ca href=\"http://www.china-pub.com/28310\u0026amp;ref=ps\" target=\"_blank\"\u003e\u003cspan\u003eJAVA\u003c/span\u003e解惑\u003c/a\u003e》。\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/03/rust-social-wide-150x150.jpg\" alt=\"Rust语言的编程范式\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_title\"\u003eRust语言的编程范式\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11541.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/24.jpg\" alt=\"面向GC的Java编程\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11541.html\" class=\"wp_rp_title\"\u003e面向GC的Java编程\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11454.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/17.jpg\" alt=\"从LongAdder看更高效的无锁实现\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11454.html\" class=\"wp_rp_title\"\u003e从LongAdder看更高效的无锁实现\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11175.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/03/cow-copy-150x150.jpg\" alt=\"Java中的CopyOnWrite容器\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11175.html\" class=\"wp_rp_title\"\u003eJava中的CopyOnWrite容器\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/9703.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/05/图1-3-150x150.jpg\" alt=\"无锁HashMap的原理与实现\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/9703.html\" class=\"wp_rp_title\"\u003e无锁HashMap的原理与实现\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-1106\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"097bacb5c9\"\u003e\u003cimg id=\"rating_1106_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(1106, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-7c2e307d25aa8e5459236def-=\"\"/\u003e\u003cimg id=\"rating_1106_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(1106, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-7c2e307d25aa8e5459236def-=\"\"/\u003e\u003cimg id=\"rating_1106_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(1106, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-7c2e307d25aa8e5459236def-=\"\"/\u003e\u003cimg id=\"rating_1106_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(1106, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-7c2e307d25aa8e5459236def-=\"\"/\u003e\u003cimg id=\"rating_1106_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(1106, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-7c2e307d25aa8e5459236def-=\"\"/\u003e (\u003cstrong\u003e16\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e3.88\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_1106_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"Java构造时成员初始化的陷阱\"/\u003e\u003cmeta itemprop=\"headline\" content=\"Java构造时成员初始化的陷阱\"/\u003e\u003cmeta itemprop=\"description\" content=\"让我们先来看两个类：Base和Derived类。注意其中的whenAmISet成员变量，和方法preProcess()\n\n[java]\npublic class Base\n{\n    Base() {\n        preProcess();\n    }\n\n    void preProcess() {}\n}[/java]\n\n[java]\npublic class De...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2009-07-03T14:31:49+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2009-07-06T07:36:36+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/1106.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/1106.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"3.88\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"16\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-1106-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2009-07-03T14:31:49+08:00",
  "Author": "陈皓"
}