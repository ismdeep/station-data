{
  "Source": "coolshell.cn",
  "Title": "Lua简明教程",
  "Link": "https://coolshell.cn/articles/10739.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"6bb41c234ac5c0447a579e25-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright\" title=\"welcome!\" alt=\"The Programming Language Lua\" src=\"http://www.lua.org/images/lua.gif\"/\u003e这几天系统地学习了一下\u003ca href=\"http://www.lua.org\" target=\"_blank\"\u003eLua这个脚本语言\u003c/a\u003e，Lua脚本是一个很轻量级的脚本，也是号称性能最高的脚本，用在很多需要性能的地方，比如：游戏脚本，nginx，wireshark的脚本，当你把他的源码下下来编译后，你会发现解释器居然不到200k，这是多么地变态啊（/bin/sh都要1M，MacOS平台），而且能和C语言非常好的互动。我很好奇得浏览了一下Lua解释器的源码，这可能是我看过最干净的C的源码了。\u003c/p\u003e\n\u003cp\u003e我不想写一篇大而全的语言手册，一方面是因为已经有了（见本文后面的链接），重要的原因是，因为大篇幅的文章会挫败人的学习热情，我始终觉得好的文章读起来就像拉大便一样，能一口气很流畅地搞完，才会让人爽（这也是我为什么不想写书的原因）。所以，这必然又是一篇“入厕文章”，还是那句话，我希望本文能够让大家利用上下班，上厕所大便的时间学习一个技术。呵呵。\u003c/p\u003e\n\u003cp\u003e相信你现在已经在厕所里脱掉裤子露出屁股已经准备好大便了，那就让我们畅快地排泄吧……\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E8%BF%90%E8%A1%8C\" title=\"运行\"\u003e运行\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E8%AF%AD%E6%B3%95\" title=\"语法\"\u003e语法\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E6%B3%A8%E9%87%8A\" title=\"注释\"\u003e注释\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E5%8F%98%E9%87%8F\" title=\"变量\"\u003e变量\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\" title=\"控制语句\"\u003e控制语句\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#while%E5%BE%AA%E7%8E%AF\" title=\"while循环\"\u003ewhile循环\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#if-else%E5%88%86%E6%94%AF\" title=\"if-else分支\"\u003eif-else分支\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#for_%E5%BE%AA%E7%8E%AF\" title=\"for 循环\"\u003efor 循环\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-9\" href=\"#until%E5%BE%AA%E7%8E%AF\" title=\"until循环\"\u003euntil循环\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-10\" href=\"#%E5%87%BD%E6%95%B0\" title=\"函数\"\u003e函数\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-11\" href=\"#%E9%80%92%E5%BD%92\" title=\"递归\"\u003e递归\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-12\" href=\"#%E9%97%AD%E5%8C%85\" title=\"闭包\"\u003e闭包\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-13\" href=\"#%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC\" title=\"函数的返回值\"\u003e函数的返回值\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-14\" href=\"#%E5%B1%80%E9%83%A8%E5%87%BD%E6%95%B0\" title=\"局部函数\"\u003e局部函数\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-15\" href=\"#Table\" title=\"Table\"\u003eTable\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-16\" href=\"#MetaTable_%E5%92%8C_MetaMethod\" title=\"MetaTable 和 MetaMethod\"\u003eMetaTable 和 MetaMethod\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-17\" href=\"#%E2%80%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E2%80%9D\" title=\"“面向对象”\"\u003e“面向对象”\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-18\" href=\"#%E6%A8%A1%E5%9D%97\" title=\"模块\"\u003e模块\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-19\" href=\"#%E5%8F%82%E8%80%83\" title=\"参考\"\u003e参考\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E8%BF%90%E8%A1%8C\"\u003e\u003c/span\u003e运行\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e首先，我们需要知道，Lua是类C的，所以，他是大小写字符敏感的。\u003c/p\u003e\n\u003cp\u003e下面是Lua的Hello World。注意：Lua脚本的语句的分号是可选的，这个和\u003ca title=\"Go 语言简介（上）— 语法\" href=\"https://coolshell.cn/articles/8460.html\" target=\"_blank\"\u003eGO语言很类似\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eprint(\u0026#34;Hello World\u0026#34;)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e你可以像python一样，在命令行上运行lua命令后进入lua的shell中执行语句。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003echenhao-air:lua chenhao$ lua\nLua 5.2.2  Copyright (C) 1994-2013 Lua.org, PUC-Rio\n\u0026gt; print(\u0026#34;Hello, World\u0026#34;)\nHello, World\n\u0026gt; \u003c/pre\u003e\n\u003cp\u003e\u003cspan id=\"more-10739\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e也可以把脚本存成一个文件，用如下命令行来运行。\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e\u0026gt;lua file.lua\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e或是像shell一样运行：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003echenhao-air:lua chenhao$ cat hello.lua\n#!/usr/local/bin/lua\nprint(\u0026#34;Hello, World\u0026#34;)\nchenhao-air:lua chenhao$ chmod +x hello.lua\nchenhao-air:test chenhao$ ./hello.lua\nHello, World\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E8%AF%AD%E6%B3%95\"\u003e\u003c/span\u003e语法\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%B3%A8%E9%87%8A\"\u003e\u003c/span\u003e注释\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e-- 两个减号是行注释\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e--[[\n 这是块注释\n 这是块注释\n --]]\u003c/pre\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%8F%98%E9%87%8F\"\u003e\u003c/span\u003e变量\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003eLua的数字只有double型，64bits，你不必担心Lua处理浮点数会慢（除非大于100,000,000,000,000），或是会有精度问题。\u003c/p\u003e\n\u003cp\u003e你可以以如下的方式表示数字，0x开头的16进制和C是很像的。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003enum = 1024\nnum = 3.0\nnum = 3.1416\nnum = 314.16e-2\nnum = 0.31416E1\nnum = 0xff\nnum = 0x56\n\u003c/pre\u003e\n\u003cp\u003e字符串你可以用单引号，也可以用双引号，还支持C类型的转义，比如： ‘\\a’ （响铃）， ‘\\b’ （退格）， ‘\\f’ （表单）， ‘\\n’ （换行）， ‘\\r’ （回车）， ‘\\t’ （横向制表）， ‘\\v’ （纵向制表）， ‘\\\\’ （反斜杠）， ‘\\”‘ （双引号）， 以及 ‘\\” （单引号)\u003c/p\u003e\n\u003cp\u003e下面的四种方式定义了完全相同的字符串（其中的两个中括号可以用于定义有换行的字符串）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003ea = \u0026#39;alo\\n123\u0026#34;\u0026#39;\na = \u0026#34;alo\\n123\\\u0026#34;\u0026#34;\na = \u0026#39;\\97lo\\10\\04923\u0026#34;\u0026#39;\na = [[alo\n123\u0026#34;]]\u003c/pre\u003e\n\u003cp\u003eC语言中的NULL在Lua中是nil，比如你访问一个没有声明过的变量，就是nil，比如下面的v的值就是nil\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003ev = UndefinedVariable\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e布尔类型只有nil和false是 false，数字0啊，‘’空字符串（’\\0’）都是true！\u003c/p\u003e\n\u003cp\u003e另外，需要注意的是：lua中的变量如果没有特殊说明，全是全局变量，那怕是语句块或是函数里。变量前加local关键字的是局部变量。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003etheGlobalVar = 50\nlocal theLocalVar = \u0026#34;local variable\u0026#34;\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\"\u003e\u003c/span\u003e控制语句\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e不多说了，直接看代码吧（注意：Lua没有++或是+=这样的操作）\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"while%E5%BE%AA%E7%8E%AF\"\u003e\u003c/span\u003ewhile循环\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003esum = 0\nnum = 1\nwhile num \u0026lt;= 100 do\n    sum = sum + num\n    num = num + 1\nend\nprint(\u0026#34;sum =\u0026#34;,sum)\u003c/pre\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"if-else%E5%88%86%E6%94%AF\"\u003e\u003c/span\u003eif-else分支\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eif age == 40 and sex ==\u0026#34;Male\u0026#34; then\n    print(\u0026#34;男人四十一枝花\u0026#34;)\nelseif age \u0026gt; 60 and sex ~=\u0026#34;Female\u0026#34; then\n    print(\u0026#34;old man without country!\u0026#34;)\nelseif age \u0026lt; 20 then\n    io.write(\u0026#34;too young, too naive!\\n\u0026#34;)\nelse\n    local age = io.read()\n    print(\u0026#34;Your age is \u0026#34;..age)\nend\u003c/pre\u003e\n\u003cp\u003e上面的语句不但展示了if-else语句，也展示了\u003cbr/\u003e\n1）“～=”是不等于，而不是!=\u003cbr/\u003e\n2）io库的分别从stdin和stdout读写的read和write函数\u003cbr/\u003e\n3）字符串的拼接操作符“..”\u003c/p\u003e\n\u003cp\u003e另外，条件表达式中的与或非为分是：and, or, not关键字。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"for_%E5%BE%AA%E7%8E%AF\"\u003e\u003c/span\u003efor 循环\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003esum = 0\nfor i = 1, 100 do\n    sum = sum + i\nend\u003c/pre\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003esum = 0\nfor i = 1, 100, 2 do\n    sum = sum + i\nend\u003c/pre\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003esum = 0\nfor i = 100, 1, -2 do\n    sum = sum + i\nend\u003c/pre\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"until%E5%BE%AA%E7%8E%AF\"\u003e\u003c/span\u003euntil循环\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003esum = 2\nrepeat\n   sum = sum ^ 2 --幂操作\n   print(sum)\nuntil sum \u0026gt;1000\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%87%BD%E6%95%B0\"\u003e\u003c/span\u003e函数\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003eLua的函数和Javascript的很像\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%80%92%E5%BD%92\"\u003e\u003c/span\u003e递归\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003efunction fib(n)\n  if n \u0026lt; 2 then return 1 end\n  return fib(n - 2) + fib(n - 1)\nend\u003c/pre\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%97%AD%E5%8C%85\"\u003e\u003c/span\u003e闭包\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e同样，Javascript附体！\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003efunction newCounter()\n    local i = 0\n    return function()     -- anonymous function\n       i = i + 1\n        return i\n    end\nend\n\nc1 = newCounter()\nprint(c1())  --\u0026gt; 1\nprint(c1())  --\u0026gt; 2\u003c/pre\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003efunction myPower(x)\n    return function(y) return y^x end\nend\n\npower2 = myPower(2)\npower3 = myPower(3)\n\nprint(power2(4)) --4的2次方\nprint(power3(5)) --5的3次方\u003c/pre\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC\"\u003e\u003c/span\u003e函数的返回值\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e和\u003ca title=\"Go 语言简介（上）— 语法\" href=\"https://coolshell.cn/articles/8460.html\" target=\"_blank\"\u003eGo语言一样\u003c/a\u003e，可以一条语句上赋多个值，如：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003ename, age, bGay = \u0026#34;haoel\u0026#34;, 37, false, \u0026#34;\u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"e98188868c85a981869d84888085c78a8684\"\u003e[email protected]\u003c/a\u003e\u0026#34;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e上面的代码中，因为只有3个变量，所以第四个值被丢弃。\u003c/p\u003e\n\u003cp\u003e函数也可以返回多个值：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003efunction getUserInfo(id)\n    print(id)\n    return \u0026#34;haoel\u0026#34;, 37, \u0026#34;\u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"224a434d474e624a4d564f434b4e0c414d4f\"\u003e[email protected]\u003c/a\u003e\u0026#34;, \u0026#34;https://coolshell.cn\u0026#34;\nend\n\nname, age, email, website, bGay = getUserInfo()\n\u003c/pre\u003e\n\u003cp\u003e注意：上面的示例中，因为没有传id，所以函数中的id输出为nil，因为没有返回bGay，所以bGay也是nil。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%B1%80%E9%83%A8%E5%87%BD%E6%95%B0\"\u003e\u003c/span\u003e局部函数\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e函数前面加上local就是局部函数，其实，Lua中的函数和Javascript中的一个德行。\u003c/p\u003e\n\u003cp\u003e比如：下面的两个函数是一样的：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003efunction foo(x) return x^2 end\nfoo = function(x) return x^2 end\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Table\"\u003e\u003c/span\u003eTable\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e所谓Table其实就是一个Key Value的数据结构，它很像Javascript中的Object，或是PHP中的数组，在别的语言里叫Dict或Map，Table长成这个样子：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003ehaoel = {name=\u0026#34;ChenHao\u0026#34;, age=37, handsome=True}\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e下面是table的CRUD操作：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003ehaoel.website=\u0026#34;https://coolshell.cn/\u0026#34;\nlocal age = haoel.age\nhaoel.handsome = false\nhaoel.name=nil\u003c/pre\u003e\n\u003cp\u003e上面看上去像C/C++中的结构体，但是name,age, handsome, website都是key。你还可以像下面这样写义Table：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003et = {[20]=100, [\u0026#39;name\u0026#39;]=\u0026#34;ChenHao\u0026#34;, [3.14]=\u0026#34;PI\u0026#34;} \u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e这样就更像Key Value了。于是你可以这样访问：t[20]，t[“name”], t[3.14]。\u003c/p\u003e\n\u003cp\u003e我们再来看看数组：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003earr = {10,20,30,40,50}\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e这样看上去就像数组了。但其实其等价于：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003earr = {[1]=10, [2]=20, [3]=30, [4]=40, [5]=50}\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e所以，你也可以定义成不同的类型的数组，比如：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003earr = {\u0026#34;string\u0026#34;, 100, \u0026#34;haoel\u0026#34;, function() print(\u0026#34;coolshell.cn\u0026#34;) end}\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e注：其中的函数可以这样调用：arr[4]()。\u003c/p\u003e\n\u003cp\u003e我们可以看到Lua的下标不是从0开始的，是从1开始的。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003efor i=1, #arr do\n    print(arr[i])\nend\u003c/pre\u003e\n\u003cp\u003e注：上面的程序中：#arr的意思就是arr的长度。\u003c/p\u003e\n\u003cp\u003e注：前面说过，Lua中的变量，如果没有local关键字，全都是全局变量，Lua也是用Table来管理全局变量的，Lua把这些全局变量放在了一个叫“_G”的Table里。\u003c/p\u003e\n\u003cp\u003e我们可以用如下的方式来访问一个全局变量（假设我们这个全局变量名叫globalVar）：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e_G.globalVar\n_G[\u0026#34;globalVar\u0026#34;]\u003c/pre\u003e\n\u003cp\u003e我们可以通过下面的方式来遍历一个Table。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003efor k, v in pairs(t) do\n    print(k, v)\nend\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"MetaTable_%E5%92%8C_MetaMethod\"\u003e\u003c/span\u003eMetaTable 和 MetaMethod\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003eMetaTable和MetaMethod是Lua中的重要的语法，MetaTable主要是用来做一些类似于C++重载操作符式的功能。\u003c/p\u003e\n\u003cp\u003e比如，我们有两个分数：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003efraction_a = {numerator=2, denominator=3}\nfraction_b = {numerator=4, denominator=7}\u003c/pre\u003e\n\u003cp\u003e我们想实现分数间的相加：2/3 + 4/7，我们如果要执行： fraction_a + fraction_b，会报错的。\u003c/p\u003e\n\u003cp\u003e所以，我们可以动用MetaTable，如下所示：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003efraction_op={}\nfunction fraction_op.__add(f1, f2)\n    ret = {}\n    ret.numerator = f1.numerator * f2.denominator + f2.numerator * f1.denominator\n    ret.denominator = f1.denominator * f2.denominator\n    return ret\nend\n\u003c/pre\u003e\n\u003cp\u003e为之前定义的两个table设置MetaTable：（其中的setmetatble是库函数）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003esetmetatable(fraction_a, fraction_op)\nsetmetatable(fraction_b, fraction_op)\u003c/pre\u003e\n\u003cp\u003e于是你就可以这样干了：（调用的是fraction_op.__add()函数）\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003efraction_s = fraction_a + fraction_b\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e至于__add这是MetaMethod，这是Lua内建约定的，其它的还有如下的MetaMethod：\u003c/p\u003e\n\u003cpre\u003e__add(a, b)                     对应表达式 a + b\n__sub(a, b)                     对应表达式 a - b\n__mul(a, b)                     对应表达式 a * b\n__div(a, b)                     对应表达式 a / b\n__mod(a, b)                     对应表达式 a % b\n__pow(a, b)                     对应表达式 a ^ b\n__unm(a)                        对应表达式 -a\n__concat(a, b)                  对应表达式 a .. b\n__len(a)                        对应表达式 #a\n__eq(a, b)                      对应表达式 a == b\n__lt(a, b)                      对应表达式 a \u0026lt; b\n__le(a, b)                      对应表达式 a \u0026lt;= b\n__index(a, b)                   对应表达式 a.b\n__newindex(a, b, c)             对应表达式 a.b = c\n__call(a, ...)                  对应表达式 a(...)\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E2%80%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E2%80%9D\"\u003e\u003c/span\u003e“面向对象”\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e上面我们看到有__index这个重载，这个东西主要是重载了find key的操作。这操作可以让Lua变得有点面向对象的感觉，让其有点像Javascript的prototype。（关于Javascrip的面向对象，你可以参看我之前写的\u003ca title=\"Javascript 面向对象编程\" href=\"https://coolshell.cn/articles/6441.html\" target=\"_blank\"\u003eJavascript的面向对象\u003c/a\u003e）\u003c/p\u003e\n\u003cp\u003e所谓__index，说得明确一点，如果我们有两个对象a和b，我们想让b作为a的prototype只需要：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003esetmetatable(a, {__index = b})\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e例如下面的示例：你可以用一个Window_Prototype的模板加上__index的MetaMethod来创建另一个实例：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eWindow_Prototype = {x=0, y=0, width=100, height=100}\nMyWin = {title=\u0026#34;Hello\u0026#34;}\nsetmetatable(MyWin, {__index = Window_Prototype})\u003c/pre\u003e\n\u003cp\u003e于是：MyWin中就可以访问x, y, width, height的东东了。（注：当表要索引一个值时如table[key], Lua会首先在table本身中查找key的值, 如果没有并且这个table存在一个带有__index属性的Metatable, 则Lua会按照__index所定义的函数逻辑查找）\u003c/p\u003e\n\u003cp\u003e有了以上的基础，我们可以来说说所谓的Lua的面向对象。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003ePerson={}\n\nfunction Person:new(p)\n    local obj = p\n    if (obj == nil) then\n        obj = {name=\u0026#34;ChenHao\u0026#34;, age=37, handsome=true}\n    end\n    self.__index = self\n    return setmetatable(obj, self)\nend\n\nfunction Person:toString()\n    return self.name ..\u0026#34; : \u0026#34;.. self.age ..\u0026#34; : \u0026#34;.. (self.handsome and \u0026#34;handsome\u0026#34; or \u0026#34;ugly\u0026#34;)\nend\n\u003c/pre\u003e\n\u003cp\u003e上面我们可以看到有一个new方法和一个toString的方法。其中：\u003c/p\u003e\n\u003cp\u003e1）self 就是 Person，Person:new(p)，相当于Person.new(self, p)\u003cbr/\u003e\n2）new方法的self.__index = self 的意图是怕self被扩展后改写，所以，让其保持原样\u003cbr/\u003e\n3）setmetatable这个函数返回的是第一个参数的值。\u003c/p\u003e\n\u003cp\u003e于是：我们可以这样调用：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eme = Person:new()\nprint(me:toString())\n\nkf = Person:new{name=\u0026#34;King\u0026#39;s fucking\u0026#34;, age=70, handsome=false}\nprint(kf:toString())\n\u003c/pre\u003e\n\u003cp\u003e继承如下，我就不多说了，Lua和Javascript很相似，都是在Prototype的实例上改过来改过去的。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eStudent = Person:new()\n\nfunction Student:new()\n    newObj = {year = 2013}\n    self.__index = self\n    return setmetatable(newObj, self)\nend\n\nfunction Student:toString()\n    return \u0026#34;Student : \u0026#34;.. self.year..\u0026#34; : \u0026#34; .. self.name\nend\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%A8%A1%E5%9D%97\"\u003e\u003c/span\u003e模块\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e我们可以直接使用require(“model_name”)来载入别的lua文件，文件的后缀是.lua。载入的时候就直接执行那个文件了。比如：\u003c/p\u003e\n\u003cp\u003e我们有一个hello.lua的文件：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eprint(\u0026#34;Hello, World!\u0026#34;)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e如果我们：require(“hello”)，那么就直接输出Hello, World！了。\u003c/p\u003e\n\u003cp\u003e注意：\u003cbr/\u003e\n1）require函数，载入同样的lua文件时，只有第一次的时候会去执行，后面的相同的都不执行了。\u003cbr/\u003e\n2）如果你要让每一次文件都会执行的话，你可以使用dofile(“hello”)函数\u003cbr/\u003e\n3）如果你要玩载入后不执行，等你需要的时候执行时，你可以使用 loadfile()函数，如下所示：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003elocal hello = loadfile(\u0026#34;hello\u0026#34;)\n... ...\n... ...\nhello()\u003c/pre\u003e\n\u003cp\u003eloadfile(“hello”)后，文件并不执行，我们把文件赋给一个变量hello，当hello()时，才真的执行。（我们多希望JavaScript也有这样的功能（参看《\u003ca title=\"Javascript 装载和执行\" href=\"https://coolshell.cn/articles/9749.html\" target=\"_blank\"\u003eJavascript 装载和执行\u003c/a\u003e》））\u003c/p\u003e\n\u003cp\u003e当然，更为标准的玩法如下所示。\u003c/p\u003e\n\u003cp\u003e假设我们有一个文件叫mymod.lua，内容如下：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003elocal HaosModel = {}\n\nlocal function getname()\n    return \u0026#34;Hao Chen\u0026#34;\nend\n\nfunction HaosModel.Greeting()\n    print(\u0026#34;Hello, My name is \u0026#34;..getname())\nend\n\nreturn HaosModel\u003c/pre\u003e\n\u003cp\u003e于是我们可以这样使用：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003elocal hao_model = require(\u0026#34;mymod\u0026#34;)\nhao_model.Greeting()\u003c/pre\u003e\n\u003cp\u003e其实，require干的事就如下：（所以你知道为什么我们的模块文件要写成那样了）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003elocal hao_model = (function ()\n  --mymod.lua文件的内容--\nend)()\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%8F%82%E8%80%83\"\u003e\u003c/span\u003e参考\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e我估计你差不多到擦屁股的时间了，所以，如果你还比较喜欢Lua的话，下面是几个在线文章你可以继续学习之：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://manual.luaer.cn/\" rel=\"nofollow\"\u003emanual.luaer.cn\u003c/a\u003e lua在线手册\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://book.luaer.cn/\" rel=\"nofollow\"\u003ebook.luaer.cn\u003c/a\u003e lua在线lua学习教程\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.codingnow.com/2000/download/lua_manual.html\" rel=\"nofollow\"\u003elua参考手册\u003c/a\u003eLua参考手册的中文翻译（云风翻译版本）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e关于Lua的标库，你可以看看官方文档：\u003ca href=\"http://lua-users.org/wiki/StringLibraryTutorial\" target=\"_blank\"\u003estring\u003c/a\u003e，  \u003ca href=\"http://lua-users.org/wiki/TableLibraryTutorial\" target=\"_blank\"\u003etable\u003c/a\u003e， \u003ca href=\"http://lua-users.org/wiki/MathLibraryTutorial\" target=\"_blank\"\u003emath\u003c/a\u003e， \u003ca href=\"http://lua-users.org/wiki/IoLibraryTutorial\" target=\"_blank\"\u003eio\u003c/a\u003e， \u003ca href=\"http://lua-users.org/wiki/OsLibraryTutorial\" target=\"_blank\"\u003eos\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/10337.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/24.jpg\" alt=\"数据即代码：元驱动编程\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/10337.html\" class=\"wp_rp_title\"\u003e数据即代码：元驱动编程\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/10169.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/5.jpg\" alt=\"类型的本质和函数式实现\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/10169.html\" class=\"wp_rp_title\"\u003e类型的本质和函数式实现\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/5202.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/14.jpg\" alt=\"对象的消息模型\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/5202.html\" class=\"wp_rp_title\"\u003e对象的消息模型\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/3083.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/7.jpg\" alt=\"三个教程\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/3083.html\" class=\"wp_rp_title\"\u003e三个教程\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/2053.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/20.jpg\" alt=\"最为奇怪的程序语言的特性\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/2053.html\" class=\"wp_rp_title\"\u003e最为奇怪的程序语言的特性\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-10739\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"caf20dc3b1\"\u003e\u003cimg id=\"rating_10739_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10739, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-6bb41c234ac5c0447a579e25-=\"\"/\u003e\u003cimg id=\"rating_10739_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10739, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-6bb41c234ac5c0447a579e25-=\"\"/\u003e\u003cimg id=\"rating_10739_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10739, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-6bb41c234ac5c0447a579e25-=\"\"/\u003e\u003cimg id=\"rating_10739_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10739, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-6bb41c234ac5c0447a579e25-=\"\"/\u003e\u003cimg id=\"rating_10739_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10739, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-6bb41c234ac5c0447a579e25-=\"\"/\u003e (\u003cstrong\u003e89\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.52\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_10739_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"Lua简明教程\"/\u003e\u003cmeta itemprop=\"headline\" content=\"Lua简明教程\"/\u003e\u003cmeta itemprop=\"description\" content=\"这几天系统地学习了一下Lua这个脚本语言，Lua脚本是一个很轻量级的脚本，也是号称性能最高的脚本，用在很多需要性能的地方，比如：游戏脚本，nginx，wireshark的脚本，当你把他的源码下下来编译后，你会发现解释器居然不到200k，这是多么地变态啊（/bin/sh都要1M，MacOS平台），而且能和C语言非常好的互动。我很好奇得浏览了一下Lua解释器的源码，这可能是我看过最干净的C的源码了。\n...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2013-12-03T08:29:06+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2013-12-04T10:00:49+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/10739.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/10739.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.52\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"89\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-10739-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2013-12-03T08:29:06+08:00",
  "Author": "陈皓"
}