{
  "Source": "coolshell.cn",
  "Title": "如何加密/混乱C源代码",
  "Link": "https://coolshell.cn/articles/933.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"92cb456ef1747298d33c481f-text/javascript\"\u003e\u003c/script\u003e之前发表了《\u003cstrong\u003e6个变态的C语言Hello World程序\u003c/strong\u003e》[\u003ca href=\"https://coolshell.cn/articles/914.html\" target=\"_blank\"\u003e酷壳链接\u003c/a\u003e] [\u003ca href=\"http://blog.csdn.net/haoel/archive/2009/05/26/4217565.aspx\" target=\"_blank\"\u003eCSDN链接\u003c/a\u003e]，主要是是像大家展示了一些C语言的变态玩法。也向大家展示了一下程序是可以写得让人看不懂的，在那篇文章中，可以看到很多人的留言，很多人都觉得很好玩，是的，那本来是用来\u003cspan style=\"color: #000000;\"\u003e供朋友们“消遣作乐”，供娱乐娱东而已，不必太过认真。\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e不过，通过这种极端的写法，大家可以看到源代码都可以写得那么复杂难懂的。大家也许在赞叹之余一笑了之，而我则希望，大家能够在娱乐以后认真思考一下，你不要以为咱们自己不会把代码搞得那么复杂，只不过没有像那6个Hello World一样那么极端，不过，说句老实话，\u003cstrong\u003e咱们每个程序都有把清晰的程序搞得一团混乱的潜能，只不过程度不一样罢了，我并不是在这里危言耸听，大家好自为之\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e下面是一个Step by Step的教程，教你如何把一个清晰的代码变得复杂难懂的。当然，这只是一个“简明教程”了。还是那句话——“\u003cspan style=\"color: #800000;\"\u003e本文仅供朋友们“消遣作乐”，如果你要觉得有意思的话，顶个贴。如果你觉得没什么意思的话，一笑了之。仅供娱乐而已，不必太过认真。\u003c/span\u003e”\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-933\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E5%BC%80%E5%A7%8B%E7%A8%8B%E5%BA%8F\" title=\"开始程序\"\u003e开始程序\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5%E3%80%81%E6%8A%8Afor%E5%8F%98%E6%88%90while\" title=\"第一步、把for变成while\"\u003e第一步、把for变成while\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%8C%E6%8A%8A%E5%BE%AA%E5%9D%8F%E5%8F%98%E6%88%90%E9%80%92%E5%BD%92\" title=\"第二步，把循坏变成递归\"\u003e第二步，把循坏变成递归\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%8C%E5%BC%84%E4%B9%B1%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E6%B2%A1%E6%9C%89%E5%90%AB%E4%B9%89%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%8D\" title=\"第三步，弄乱代码结构/使用没有含义的变量名\"\u003e第三步，弄乱代码结构/使用没有含义的变量名\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%8C%E5%8F%96%E6%B6%88%E4%B8%B4%E6%97%B6%E5%8F%98%E9%87%8F\" title=\"第四步，取消临时变量\"\u003e第四步，取消临时变量\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%8C%E7%BB%A7%E7%BB%AD%E5%BC%84%E4%B9%B1%E5%8F%98%E9%87%8F%E5%90%8D\" title=\"第五步，继续弄乱变量名\"\u003e第五步，继续弄乱变量名\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#%E7%AC%AC%E5%85%AD%E6%AD%A5%EF%BC%8C%E7%A7%BB%E9%99%A4%E5%B8%B8%E9%87%8F\" title=\"第六步，移除常量\"\u003e第六步，移除常量\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%BC%80%E5%A7%8B%E7%A8%8B%E5%BA%8F\"\u003e\u003c/span\u003e开始程序\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e下面是一个找出素数的程序：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003evoid primes(int cap)\n{\n    int i, j, composite;\n\n    for(i = 2; i \u0026lt; cap; ++i) {\n        composite = 0;\n        for(j = 2; j * j \u0026lt; i; ++j) {\n            composite += !(i % j);\n        }\n        if(!composite){\n            printf(\u0026#34;%dt\u0026#34;, i);\n        }\n    }\n}\n\nint main()\n{\n    primes(100);\n}\n\u003c/pre\u003e\n\u003cp\u003e下面我们来看看如何把上面这段代码搞得复杂难懂。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%AC%AC%E4%B8%80%E6%AD%A5%E3%80%81%E6%8A%8Afor%E5%8F%98%E6%88%90while\"\u003e\u003c/span\u003e第一步、把for变成while\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e通常来说，for循坏要以while循坏简单一些，上面的程序有二重for循环，我们不但要把其变成while循环，而且还要把二重循环的变成一重的循环，然后使用大量的if-else语句来判断。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003evoid primes(int cap)\n{\n    int i, j, composite, t = 0;\n\n    while(t \u0026lt; cap * cap) {\n        i = t / cap;\n        j = t++ % cap;\n        if(i \u0026lt;= 1);\n        else if(!j)\n            composite = j;\n        else if(j == i \u0026amp;\u0026amp; !composite)\n            printf(\u0026#34;%dt\u0026#34;,i);\n        else if(j \u0026gt; 1 \u0026amp;\u0026amp; j \u0026lt; i)\n            composite += !(i % j);\n    }\n}\n\nint main()\n{\n    primes(100);\n}\n\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%8C%E6%8A%8A%E5%BE%AA%E5%9D%8F%E5%8F%98%E6%88%90%E9%80%92%E5%BD%92\"\u003e\u003c/span\u003e第二步，把循坏变成递归\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e递归在某些时候是可以把代码变得简单，但大多数的情况下是把代码变得复杂，而且很没有效率。下面是把上面的while循环变成了递归。变成了递归后，函数的参数都变成3个了。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003evoid primes(int cap, int t, int composite)\n{\n    int i,j;\n    i = t / cap;\n    j = t % cap;\n    if(i \u0026lt;= 1)\n        primes(cap,t+1,composite);\n    else if(!j)\n        primes(cap,t+1,j);\n    else if(j == i \u0026amp;\u0026amp; !composite)\n        (printf(\u0026#34;%dt\u0026#34;,i), primes(cap,t+1,composite));\n    else if(j \u0026gt; 1 \u0026amp;\u0026amp; j \u0026lt; i)\n        primes(cap,t+1, composite + !(i % j));\n    else if(t \u0026lt; cap * cap)\n        primes(cap,t+1,composite);\n}\n\nint main()\n{\n    primes(100,0,0);\n}\n\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%8C%E5%BC%84%E4%B9%B1%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E6%B2%A1%E6%9C%89%E5%90%AB%E4%B9%89%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%8D\"\u003e\u003c/span\u003e第三步，弄乱代码结构/使用没有含义的变量名\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e关于如何弄乱代码结构，其中一个小技巧是，使用“？”表达式代替if-else语句。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003evoid primes(int m, int t, int c)\n{\n    int i,j;\n    i = t / m;\n    j = t % m;\n    (i \u0026lt;= 1) ? primes(m,t+1,c) : (!j) ? primes(m,t+1,j) : (j == i \u0026amp;\u0026amp; !c) ?\n    (printf(\u0026#34;%dt\u0026#34;,i), primes(m,t+1,c)) : (j \u0026gt; 1 \u0026amp;\u0026amp; j \u0026lt; i) ?\n    primes(m,t+1,c + !(i % j)) : (t \u0026lt; m * m) ? primes(m,t+1,c) : 0;\n}\n\nint main()\n{\n    primes(100,0,0);\n}\n\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%8C%E5%8F%96%E6%B6%88%E4%B8%B4%E6%97%B6%E5%8F%98%E9%87%8F\"\u003e\u003c/span\u003e第四步，取消临时变量\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e临时变量一般用来保存反复使用的一个表达式的值。使用大量重复的表达式来取消这些临时变量的也可以让代码复杂起来。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003evoid primes(int m, int t, int c)\n{\n  ((t / m) \u0026lt;= 1) ? primes(m,t+1,c) : !(t % m) ? primes(m,t+1, t % m) :\n  ((t % m)==(t / m) \u0026amp;\u0026amp; !c) ? (printf(\u0026#34;%dt\u0026#34;,(t / m)), primes(m,t+1,c)) :\n  ((t % m)\u0026gt; 1 \u0026amp;\u0026amp; (t % m) \u0026lt; (t / m)) ? primes(m,t+1,c + !((t / m) % (t % m))) :\n  (t \u0026lt; m * m) ? primes(m,t+1,c) : 0;\n}\n\nint main()\n{\n    primes(100,0,0);\n}\n\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%8C%E7%BB%A7%E7%BB%AD%E5%BC%84%E4%B9%B1%E5%8F%98%E9%87%8F%E5%90%8D\"\u003e\u003c/span\u003e第五步，继续弄乱变量名\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e我们知道，下划线是合法的变量名，所以，我们不妨用__，___，____来代替m，t，c。函数名也可以使用下划线来代替。让我们来看看求素数的函数能变成什么。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003evoid _(int __, int ___, int ____)\n{\n    ((___ / __) \u0026lt;= 1) ? _(__,___+1,____) : !(___ % __) ? _(__,___+1,___ % __) :\n    ((___ % __)==(___ / __) \u0026amp;\u0026amp; !____) ? (printf(\u0026#34;%dt\u0026#34;,(___ / __)),\n    _(__,___+1,____)) : ((___ % __) \u0026gt; 1 \u0026amp;\u0026amp; (___ % __) \u0026lt; (___ / __)) ?\n    _(__,___+1,____ + !((___ / __) % (___ % __))) : (___ \u0026lt; __ * __) ?\n    _(__,___+1,____) : 0;\n}\n\nint main()\n{\n    _(100,0,0);\n}\n\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%AC%AC%E5%85%AD%E6%AD%A5%EF%BC%8C%E7%A7%BB%E9%99%A4%E5%B8%B8%E9%87%8F\"\u003e\u003c/span\u003e第六步，移除常量\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e在上面的程序中，还有一些常量，你可以通过增加一个宏定义，或是增加一个函数的形参来取代这一常量。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003evoid _(int __, int ___, int ____, int _____)\n{\n    ((___ / __) \u0026lt;= _____) ? _(__,___+_____,____,_____) : !(___ % __) ? _(__,___+_____,___ % __, _____) :\n    ((___ % __)==(___ / __) \u0026amp;\u0026amp; !____) ? (printf(\u0026#34;%dt\u0026#34;,(___ / __)),\n    _(__,___+_____,____,_____)) : ((___ % __) \u0026gt; _____ \u0026amp;\u0026amp; (___ % __) \u0026lt; (___ / __)) ?\n    _(__,___+_____,____,_____ + !((___ / __) % (___ % __))) : (___ \u0026lt; __ * __) ?\n    _(__,___+_____,____,_____) : 0;\n}\n\nint main() {\n    _(100,0,0,1);\n}\n\u003c/pre\u003e\n\u003cp\u003e程序到这里应该差不多了。还是那句话——“\u003cstrong\u003e每一个程序员都有把源代码弄复杂的潜质\u003c/strong\u003e”，大家好自为之。\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/03/rust-social-wide-150x150.jpg\" alt=\"Rust语言的编程范式\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_title\"\u003eRust语言的编程范式\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/07/api-design-300x278-2-150x150.jpg\" alt=\"API设计原则 – Qt官网的设计实践总结\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_title\"\u003eAPI设计原则 – Qt官网的设计实践总结\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"Leetcode 编程训练\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_title\"\u003eLeetcode 编程训练\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12012.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/10/edsm-150x150.gif\" alt=\"State Threads 回调终结者\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12012.html\" class=\"wp_rp_title\"\u003eState Threads 回调终结者\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11466.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/04/c99-150x150.jpg\" alt=\"C语言的整型溢出问题\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11466.html\" class=\"wp_rp_title\"\u003eC语言的整型溢出问题\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-933\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"7e2d59de3a\"\u003e\u003cimg id=\"rating_933_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(933, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-92cb456ef1747298d33c481f-=\"\"/\u003e\u003cimg id=\"rating_933_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(933, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-92cb456ef1747298d33c481f-=\"\"/\u003e\u003cimg id=\"rating_933_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(933, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-92cb456ef1747298d33c481f-=\"\"/\u003e\u003cimg id=\"rating_933_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(933, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-92cb456ef1747298d33c481f-=\"\"/\u003e\u003cimg id=\"rating_933_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(933, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-92cb456ef1747298d33c481f-=\"\"/\u003e (\u003cstrong\u003e74\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.62\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_933_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"如何加密/混乱C源代码\"/\u003e\u003cmeta itemprop=\"headline\" content=\"如何加密/混乱C源代码\"/\u003e\u003cmeta itemprop=\"description\" content=\"之前发表了《6个变态的C语言Hello World程序》[酷壳链接] [CSDN链接]，主要是是像大家展示了一些C语言的变态玩法。也向大家展示了一下程序是可以写得让人看不懂的，在那篇文章中，可以看到很多人的留言，很多人都觉得很好玩，是的，那本来是用来供朋友们“消遣作乐”，供娱乐娱东而已，不必太过认真。\n\n不过，通过这种极端的写法，大家可以看到源代码都可以写得那么复杂难懂的。大家也许在赞叹之余一...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2009-05-30T15:30:05+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2009-12-24T14:36:48+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/933.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/933.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.62\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"74\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-933-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2009-05-30T15:30:05+08:00",
  "Author": "陈皓"
}