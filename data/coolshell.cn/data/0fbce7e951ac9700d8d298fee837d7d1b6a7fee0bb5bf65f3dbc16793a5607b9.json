{
  "Source": "coolshell.cn",
  "Title": "API设计：用流畅接口构造内部DSL",
  "Link": "https://coolshell.cn/articles/5709.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"d79c3c06de9fac46b6b6a843-text/javascript\"\u003e\u003c/script\u003e\u003cstrong\u003e感谢\u003ca href=\"http://weibo.com/n/weidagang\"\u003e@weidagang\u003c/a\u003e （Todd）向酷壳投递本文。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e程序设计语言的抽象机制包含了两个最基本的方面：一是语言关注的基本元素/语义；另一个是从基本元素/语义到复合元素/语义的构造规则。在C、C++、Java、C#、Python等通用语言中，语言的基本元素/语义往往离问题域较远，通过API库的形式进行层层抽象是降低问题难度最常用的方法。比如，在C语言中最常见的方式是提供函数库来封装复杂逻辑，方便外部调用。\u003c/p\u003e\n\u003cp\u003e不过普通的API设计方法存在一种天然的陷阱，那就是不管怎样封装，大过程虽然比小过程抽象层次更高，但本质上还是过程，受到过程语义的制约。也就是说，通过基本元素/语义构造更高级抽象元素/语义的时候，语言的构造规则很大程度上限制了抽象的维度，我们很难跳出这个维度去，甚至可能根本意识不到这个限制。而SQL、HTML、CSS、make等DSL（领域特定语言）的抽象维度是为特定领域量身定做的，从这些抽象角度看问题往往最为简单，所以DSL在解决其特定领域的问题时比通用程序设计语言更加方便。通常，SQL等非通用语言被称为外部DSL（External DSL）；在通用语言中，我们其实也可以在一定程度上突破语言构造规则的抽象维度限制，定义内部DSL（Internal DSL）。\u003c/p\u003e\n\u003cp\u003e本文将介绍一种被称为流畅接口（Fluent Interface）的内部DSL设计方法。Wikipedia上\u003ca title=\"Fluent Interface\" href=\"https://en.wikipedia.org/wiki/Fluent_interface\"\u003eFluent Interface\u003c/a\u003e的定义是：\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003eA fluent interface (as first coined by Eric Evans and Martin Fowler) is an implementation of an object oriented API that aims to provide for more readable code. A fluent interface is normally implemented by using method chaining to relay the instruction context of a subsequent call (but a fluent interface entails more than just method chaining).\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv\u003e\n\u003cp\u003e下面将分4个部分来逐步说明流畅接口在构造内部DSL中的典型应用。\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#1_%E5%9F%BA%E6%9C%AC%E8%AF%AD%E4%B9%89%E6%8A%BD%E8%B1%A1\" title=\"1. 基本语义抽象\"\u003e1. 基本语义抽象\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#2_%E7%AE%A1%E9%81%93%E6%8A%BD%E8%B1%A1\" title=\"2. 管道抽象\"\u003e2. 管道抽象\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#3_%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E6%8A%BD%E8%B1%A1\" title=\"3. 层次结构抽象\"\u003e3. 层次结构抽象\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#4_%E5%BC%82%E6%AD%A5%E6%8A%BD%E8%B1%A1\" title=\"4. 异步抽象\"\u003e4. 异步抽象\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"1_%E5%9F%BA%E6%9C%AC%E8%AF%AD%E4%B9%89%E6%8A%BD%E8%B1%A1\"\u003e\u003c/span\u003e\u003cstrong\u003e1. 基本语义抽象\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e如果要输出0..4这5个数，我们一般会首先想到类似这样的代码：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e//Java\nfor (int i = 0; i \u0026lt; 5; ++i) {\n    system.out.println(i);\n}\u003c/pre\u003e\n\u003cp\u003e\u003cspan id=\"more-5709\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e而Ruby虽然也支持类似的for循环，但最简单的是下面这样的实现：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"ruby\" class=\"EnlighterJSRAW\"\u003e//Ruby\n5.times {|i| puts i}\u003c/pre\u003e\n\u003cp\u003eRuby中一切皆对象，5是Fixnum类的实例，times是Fixnum的一个方法，它接受一个block参数。相比for循环实现，Ruby的times方式更简洁，可读性更强，但熟悉OOP的朋友可能会有疑问，times是否应该作为整型类的方法呢？在OOP中，方法调用通常代表了向对象发送消息，改变或查询对象的状态，times方法显然不是对整型对象状态的查询和修改。如果你是Ruby的设计者，你会把times方法放入Fixnum类吗？如果答案是否定的，那么Ruby的这种设计本质上代表了什么呢？实际上，这里的times虽然只是一个普通的类方法，但它的目的却与普通意义上的类方法不同，它的语义实际上类似于for循环这样的语言基本语义，可以被视为一种自定义的基本语义。times的语义从一定程度上跳出了类方法的框框，向问题域迈进了一步！\u003c/p\u003e\n\u003cp\u003e另一个例子来自Eric Evans的“用两个时间点构造一个时间段对象”，普通设计：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e//Java\nTimePoint fiveOClock, sixOClock;\nTimeInterval meetingTime = new TimeInterval(fiveOClock, sixOClock);\u003c/pre\u003e\n\u003cp\u003e另一种Evans的设计是这样：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e//Java\nTimeInterval meetingTime = fiveOClock.until(sixOClock);\u003c/pre\u003e\n\u003cp\u003e按传统OO设计，until方法本不应出现在TimePoint类中，这里TimePoint类的until方法同样代表了一种自定义的基本语义，使得表达时间域的问题更加自然。\u003c/p\u003e\n\u003cp\u003e虽然上面的两个简单例子和普通设计相比看不出太大的优势，但它却为我们理解流畅接口打下了基础。重要的是应该体会到它们从一定程度上跳出了语言基本抽象机制的束缚，我们不应该再用类职责划分、迪米特法则（Law of Demeter）等OO设计原则来看待它们。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"2_%E7%AE%A1%E9%81%93%E6%8A%BD%E8%B1%A1\"\u003e\u003c/span\u003e\u003cstrong\u003e2. 管道抽象\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e在Shell中，我们可以通过管道将一系列的小命令组合在一起实现复杂的功能。管道中流动的是单一类型的文本流，计算过程就是从输入流到输出流的变换过程，每个命令是对文本流的一次变换作用，通过管道将作用叠加起来。在Shell中，很多时候我们只需要一句话就能完成log统计这样的中小规模问题。和其他抽象机制相比，管道的优美在于无嵌套。比如下面这段C程序，由于嵌套层次较深，不容易一下子理解清楚：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e//C\nmin(max(min(max(a,b),c),d),e)\n\u003c/pre\u003e\n\u003cp\u003e而用管道来表达同样的功能则清晰得多：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e#!/bin/bash\nmax a b | min c | max d | min e\n\u003c/pre\u003e\n\u003cp\u003e我们很容易理解这段程序表达的意思是：先求a, b的最大值；再把结果和c取最小值；再把结果和d求最大值；再把结果和e求最小值。\u003c/p\u003e\n\u003cp\u003ejQuery的链式调用设计也具有管道的风格，方法链上流动的是同一类型的jQuery对象，每一步方法调用是对对象的一次作用，整个方法链将各个方法的作用叠加起来。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003e//Javascript\n$(\u0026#39;li\u0026#39;).filter(\u0026#39;:event\u0026#39;).css(\u0026#39;background-color\u0026#39;, \u0026#39;red\u0026#39;);\n\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"3_%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E6%8A%BD%E8%B1%A1\"\u003e\u003c/span\u003e3. 层次结构抽象\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e除了管道这种“线性”结构外，流畅接口还可用于构造层次结构抽象。比如，用Javascript动态创建创建下面的HTML片段：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"html\" class=\"EnlighterJSRAW\"\u003e\u0026lt;div id=\u0026#34;’product_123’\u0026#34; class=\u0026#34;’product’\u0026#34;\u0026gt;\n\u0026lt;img src=\u0026#34;’preview_123.jpg’\u0026#34; alt=\u0026#34;\u0026#34; /\u0026gt;\n\u0026lt;ul\u0026gt;\n\t\u0026lt;li\u0026gt;Name: iPad2 32G\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;Price: 3600\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\u0026lt;/div\u0026gt;\n\n\u003c/pre\u003e\n\u003cp\u003e若采用Javascript的DOM API：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003e//Javascript\nvar div = document.createElement(\u0026#39;div\u0026#39;);\ndiv.setAttribute(‘id’, ‘product_123’);\ndiv.setAttribute(‘class’, ‘product’);\n\nvar img = document.createElement(\u0026#39;img\u0026#39;);\nimg.setAttribute(‘src’, ‘preview_123.jpg’);\ndiv.appendChild(img);\n\nvar ul = document.createElement(\u0026#39;ul\u0026#39;);\nvar li1 = document.createElement(\u0026#39;li\u0026#39;);\nvar txt1 = document.createTextNode(\u0026#34;Name: iPad2 32G\u0026#34;);\nli1.appendChild(txt1);\n…\ndiv.appendChild(ul);\u003c/pre\u003e\n\u003cp\u003e而下面流畅接口API则要有表现力得多：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e//Javascript\nvar obj =\n$.div({id:’product_123’, class:’product’})\n    .img({src:’preview_123.jpg’})\n    .ul()\n        .li().text(‘Name: iPad2 32G’)._li()\n        .li().text(‘Price: 3600’)._li()\n    ._ul()\n ._div();\u003c/pre\u003e\n\u003cdiv\u003e和Javascript的标准DOM API相比，上面的API设计不再局限于孤立地看待某一个方法，而是考虑了它们在解决问题时的组合使用，所以代码的表现形式特别贴近问题的本质。这样的代码是自解释的（self-explanatory）在可读性方面要明显胜于DOM API，这相当于定义了一种类似于HTML的内部DSL，它拥有自己的语义和语法。需要特别注意的是，上面的层次结构抽象和管道抽象有着本质的不同，管道抽象的方法链上通常是同一对象的连续传递，而层次抽象中方法链上的对象却在随着层次的变化而变化。此为，我们可以把业务规则也表达在流畅接口中，比如上面的例子中，body()不能包含在div()返回的对象中，div().body()将抛出”body方法不存在”异常。\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"4_%E5%BC%82%E6%AD%A5%E6%8A%BD%E8%B1%A1\"\u003e\u003c/span\u003e\u003cstrong\u003e4. 异步抽象\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cdiv\u003e流畅接口不仅可以构造复杂的层次抽象，还可以用于构造异步抽象。在基于回调机制的异步模式中，多个异步调用的同步和嵌套问题是使用异步的难点所在。有时一个稍复杂的调用和同步关系会导致代码充满了复杂的同步检查和层层回调，难以理解和维护。这个问题从本质上讲和上面HTML的例子一样，是由于多数通用语言并未把异步作为基本元素/语义，许多异步实现模式是向语言的妥协。针对这个问题，我用Javascript编写了一个基于流畅接口的异步DSL，示例代码如下：\u003c/div\u003e\n\u003cdiv\u003e[javascript]\u003cbr/\u003e\n//Javascript\u003cbr/\u003e\n$.begin()\u003cbr/\u003e\n.async(newTask(‘task1’), ‘task1’)\u003cbr/\u003e\n.async(newTask(‘task2’), ‘task2’)\u003cbr/\u003e\n.async(newTask(‘task3’), ‘task3’)\u003cbr/\u003e\n.when()\u003cbr/\u003e\n.each_done(function(name, result) {\u003cbr/\u003e\nconsole.log(name + ‘: ‘ + result);})\u003cbr/\u003e\n.all_done(function(){ console.log(‘good, all completed’); })\u003cbr/\u003e\n.timeout(function(){\u003cbr/\u003e\nconsole.log(‘timeout!!’);\u003cbr/\u003e\n$.begin()\u003cbr/\u003e\n.async(newTask(‘task4’), ‘task4’)\u003cbr/\u003e\n.when()\u003cbr/\u003e\n.each_done(function(name, result) {\u003cbr/\u003e\nconsole.log(name + ‘: ‘ + result); })\u003cbr/\u003e\n.end();}\u003cbr/\u003e\n, 3000)\u003cbr/\u003e\n.end();[/javascript]\u003cp\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv\u003e上面的代码只是一句Javascript调用，但从另一个角度看它却像一段描述异步调用的DSL程序。它通过流畅接口定义了begin when end的语法结构，begin后面跟的是启动异步调用的代码；when后面是异步结果处理，可以选择each_done, all_done, timeout中的一种或多种。而begin when end结构本身是可以嵌套的，比如上面的代码在timeout处理分支中就包含了另一个begin when end结构。通过这个DSL，我们可以比基于回调的方式更好地表达异步调用的同步和嵌套关系。\u003c/div\u003e\n\u003cp\u003e上面介绍了用流畅接口构造的4种典型抽象，出此之外还有很多其他的抽象和应用场合，比如：不少单元测试框架就通过流畅接口定义了单元测试的DSL。虽然上面的例子以Javascript等动态语言居多，但其实流畅接口所依赖的语法基础并不苛刻，即使在Java这样的静态语言中，同样可以轻松地使用。流畅接口不同于传统的API设计，理解和使用流畅接口关键是要突破语言抽象机制带来的定势思维，根据问题域选取适当的抽象维度，利用语言的基本语法构造领域特定的语义和语法。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e参考\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca title=\"Wikipedia: Fluent Interface\" href=\"https://en.wikipedia.org/wiki/Fluent_interface\"\u003eWikipedia: Fluent Interface\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca title=\"Martin Fowler: Fluent Interface\" href=\"http://www.martinfowler.com/bliki/FluentInterface.html\"\u003eMartin Fowler: Fluent Interface\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca title=\"jQuery is DSL\" href=\"http://www.cnblogs.com/cathsfz/archive/2009/08/10/1543266.html\"\u003ejQuery is DSL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca title=\"An Approach to Internal Domain-Specific Languages in Java\" href=\"http://www.infoq.com/articles/internal-dsls-java\"\u003eAn Approach to Internal Domain-Specific Languages in Java\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/10337.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/24.jpg\" alt=\"数据即代码：元驱动编程\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/10337.html\" class=\"wp_rp_title\"\u003e数据即代码：元驱动编程\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/5202.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/14.jpg\" alt=\"对象的消息模型\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/5202.html\" class=\"wp_rp_title\"\u003e对象的消息模型\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/3437.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2010/12/ediff-small-150x150.png\" alt=\"一些杂项资源\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/3437.html\" class=\"wp_rp_title\"\u003e一些杂项资源\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/2053.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/20.jpg\" alt=\"最为奇怪的程序语言的特性\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/2053.html\" class=\"wp_rp_title\"\u003e最为奇怪的程序语言的特性\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/1992.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2009/12/language-fanboys-150x150.jpg\" alt=\"程序员眼中的编程语言\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/1992.html\" class=\"wp_rp_title\"\u003e程序员眼中的编程语言\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-5709\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"eb2c1956e3\"\u003e\u003cimg id=\"rating_5709_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(5709, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(2.7, 3, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-d79c3c06de9fac46b6b6a843-=\"\"/\u003e\u003cimg id=\"rating_5709_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(5709, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(2.7, 3, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-d79c3c06de9fac46b6b6a843-=\"\"/\u003e\u003cimg id=\"rating_5709_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(5709, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(2.7, 3, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-d79c3c06de9fac46b6b6a843-=\"\"/\u003e\u003cimg id=\"rating_5709_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(5709, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(2.7, 3, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-d79c3c06de9fac46b6b6a843-=\"\"/\u003e\u003cimg id=\"rating_5709_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(5709, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(2.7, 3, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-d79c3c06de9fac46b6b6a843-=\"\"/\u003e (\u003cstrong\u003e19\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e2.74\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_5709_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"API设计：用流畅接口构造内部DSL\"/\u003e\u003cmeta itemprop=\"headline\" content=\"API设计：用流畅接口构造内部DSL\"/\u003e\u003cmeta itemprop=\"description\" content=\"感谢@weidagang （Todd）向酷壳投递本文。\n\n程序设计语言的抽象机制包含了两个最基本的方面：一是语言关注的基本元素/语义；另一个是从基本元素/语义到复合元素/语义的构造规则。在C、C++、Java、C#、Python等通用语言中，语言的基本元素/语义往往离问题域较远，通过API库的形式进行层层抽象是降低问题难度最常用的方法。比如，在C语言中最常见的方式是提供函数库来封装复杂逻辑，方...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2011-10-31T08:28:47+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2011-10-31T23:57:28+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/5709.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"Todd\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/5709.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"2.74\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"19\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-5709-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2011-10-31T08:28:47+08:00",
  "Author": "Todd"
}