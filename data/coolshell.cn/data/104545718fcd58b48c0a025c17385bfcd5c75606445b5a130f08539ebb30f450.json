{
  "Source": "coolshell.cn",
  "Title": "“一把梭：REST API 全用 POST”",
  "Link": "https://coolshell.cn/articles/22173.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"f2b78c9a6e379cc4e544a071-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright wp-image-22176\" src=\"https://coolshell.cn/wp-content/uploads/2022/02/http_method-300x169.png\" alt=\"\" width=\"325\" height=\"183\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/02/http_method-300x169.png 300w, https://coolshell.cn/wp-content/uploads/2022/02/http_method-1024x576.png 1024w, https://coolshell.cn/wp-content/uploads/2022/02/http_method-768x432.png 768w, https://coolshell.cn/wp-content/uploads/2022/02/http_method-480x270.png 480w, https://coolshell.cn/wp-content/uploads/2022/02/http_method.png 1200w\" sizes=\"(max-width: 325px) 100vw, 325px\"/\u003e\u003c/p\u003e\n\u003cp\u003e写这篇文章的原因主要还是因为V2EX上的这个\u003ca href=\"https://www.v2ex.com/t/830030?p=1\" target=\"_blank\" rel=\"noopener\"\u003e贴子\u003c/a\u003e，这个贴子中说——\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e“对接同事的接口，他定义的所有接口都是 post 请求，理由是 https 用 post 更安全，之前习惯使用 restful api ，如果说 https 只有 post 请求是安全的话？那为啥还需要 get 、put 、delete ？我该如何反驳他。”\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e然后该贴中大量的回复大概有这么几种论调，1）POST挺好的，就应该这么干，沟通少，2）一把梭，早点干完早点回家，3）吵赢了又怎么样？工作而已，优雅不能当饭吃。虽然评论没有一边倒，但是也有大量的人支持。然后，我在Twitter上嘲讽了一下，用POST干一切就像看到了来你家装修工人说，“老子干活就是用钉子钉一切，什么螺丝、螺栓、卡扣、插销……通通不用，钉枪一把梭，方便，快捷，安全，干完早回家……不过，还是有一些网友觉得用POST挺好的，而且可以节约时间。所以，正好，我在《\u003ca title=\"我做系统架构的一些原则\" href=\"https://coolshell.cn/articles/21672.html\" target=\"_blank\" rel=\"noopener\"\u003e我做系统架构的原则\u003c/a\u003e》中的“\u003ca href=\"https://coolshell.cn/articles/21672.html#%E5%8E%9F%E5%88%99%E4%BA%94%EF%BC%9A%E5%88%B6%E5%AE%9A%E5%B9%B6%E9%81%B5%E5%BE%AA%E6%9C%8D%E4%BB%8E%E6%A0%87%E5%87%86%E3%80%81%E8%A7%84%E8%8C%83%E5%92%8C%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\" target=\"_blank\" rel=\"noopener\"\u003e原则五\u003c/a\u003e”中反对API返回码无论对错全是200的返回那，我专门写下这一篇文章，以正视听。\u003c/p\u003e\n\u003cp\u003e这篇文章主要分成下面这几个部分：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e为什么要用不同的HTTP动词？\u003c/li\u003e\n\u003cli\u003eRestful 进行复杂查询\u003c/li\u003e\n\u003cli\u003e几个主要问题的回应\n\u003cul\u003e\n\u003cli\u003ePOST 更安全吗？\u003c/li\u003e\n\u003cli\u003e全用 POST 可以节省时间沟通少吗？\u003c/li\u003e\n\u003cli\u003e早点回家的正确姿势\u003c/li\u003e\n\u003cli\u003e工作而已，优雅不能当饭吃\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cspan id=\"more-22173\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84HTTP%E5%8A%A8%E8%AF%8D\" title=\"为什么要用不同的HTTP动词\"\u003e为什么要用不同的HTTP动词\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#Restful_%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2\" title=\"Restful 复杂查询\"\u003eRestful 复杂查询\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E5%87%A0%E4%B8%AA%E4%B8%BB%E8%A6%81%E9%97%AE%E9%A2%98%E7%9A%84%E5%9B%9E%E5%BA%94\" title=\"几个主要问题的回应\"\u003e几个主要问题的回应\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#1%EF%BC%89%E4%B8%BA%E4%BB%80%E4%B9%88API_%E8%A6%81Restful%EF%BC%8C%E5%B9%B6%E7%AC%A6%E5%90%88%E8%A7%84%E8%8C%83%EF%BC%9F\" title=\"1）为什么API 要Restful，并符合规范？\"\u003e1）为什么API 要Restful，并符合规范？\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#2%EF%BC%89%E4%B8%BA%E4%BB%80%E4%B9%88%E2%80%9C%E8%BF%87%E6%97%A9%E4%BC%98%E5%8C%96%E2%80%9D%E4%B8%8D%E9%80%82%E7%94%A8%E4%BA%8EAPI%E8%AE%BE%E8%AE%A1%EF%BC%9F\" title=\"2）为什么“过早优化”不适用于API设计？\"\u003e2）为什么“过早优化”不适用于API设计？\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#3%EF%BC%89POST_%E6%9B%B4%E5%AE%89%E5%85%A8%E5%90%97%EF%BC%9F\" title=\"3）POST 更安全吗？\"\u003e3）POST 更安全吗？\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#4%EF%BC%89%E5%85%A8%E7%94%A8_POST_%E5%8F%AF%E4%BB%A5%E8%8A%82%E7%9C%81%E6%97%B6%E9%97%B4%E5%87%8F%E5%B0%91%E6%B2%9F%E9%80%9A%E5%90%97%EF%BC%9F\" title=\"4）全用 POST 可以节省时间减少沟通吗？\"\u003e4）全用 POST 可以节省时间减少沟通吗？\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#5%EF%BC%89%E6%97%A9%E7%82%B9%E5%9B%9E%E5%AE%B6%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF\" title=\"5）早点回家的正确姿势\"\u003e5）早点回家的正确姿势\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-9\" href=\"#6%EF%BC%89%E5%B7%A5%E4%BD%9C%E8%80%8C%E5%B7%B2%EF%BC%8C%E4%BC%98%E9%9B%85%E4%B8%8D%E8%83%BD%E5%BD%93%E9%A5%AD%E5%90%83\" title=\"6）工作而已，优雅不能当饭吃\"\u003e6）工作而已，优雅不能当饭吃\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84HTTP%E5%8A%A8%E8%AF%8D\"\u003e\u003c/span\u003e为什么要用不同的HTTP动词\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e编程世界通常来说有两种逻辑：“\u003cstrong\u003e业务逻辑\u003c/strong\u003e” 和 “\u003cstrong\u003e控制逻辑\u003c/strong\u003e”。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e业务逻辑\u003c/strong\u003e。就是你实现业务需求的功能的代码，就是跟用户需求强相关的代码。比如，把用户提交的数据保存起来，查询用户的数据，完成一个订单交易，为用户退款……等等，这些是业务逻辑\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e控制逻辑\u003c/strong\u003e。就是我们用于控制程序运行的非功能性的代码。比如，用于控制程序循环的变量和条件，使用多线程或分布式的技术，使用HTTP/TCP协议，使用什么样数据库，什么样的中间件……等等，这些跟用户需求完全没关系的东西。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e网络协议也是一样的，一般来说，\u003cstrong\u003e几乎所有的主流网络协议都有两个部分，一个是协议头，一个是协议体。协议头中是协议自己要用的数据，协议体才是用户的数据。所以，协议头主要是用于协议的控制逻辑，而协议体则是业务逻辑。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eHTTP的动词（或是Method）是在协议头中，所以，其主要用于控制逻辑。\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e下面是HTTP的动词规范，一般来说，REST API 需要开发人员严格遵循下面的标准规范（参看\u003ca href=\"https://www.rfc-editor.org/rfc/rfc7231#section-4.2.2\" target=\"_blank\" rel=\"noopener\"\u003eRFC7231 章节4.2.2 – Idempotent Methods\u003c/a\u003e）\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e方法\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003cth\u003e幂等\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eGET\u003c/td\u003e\n\u003ctd\u003e用于查询操作，对应于数据库的 \u003ccode\u003eselect\u003c/code\u003e 操作\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003e✔︎\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePUT\u003c/td\u003e\n\u003ctd\u003e用于所有的信息更新，对应于数据库的 \u003ccode\u003eupdate \u003c/code\u003e操作\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003e✔︎︎\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDELETE\u003c/td\u003e\n\u003ctd\u003e用于更新操作，对应于数据库的 \u003ccode\u003edelete\u003c/code\u003e 操作\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003e✔︎︎\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePOST\u003c/td\u003e\n\u003ctd\u003e用于新增操作，对应于数据库的 \u003ccode\u003einsert\u003c/code\u003e 操作\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003e✘\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eHEAD\u003c/td\u003e\n\u003ctd\u003e用于返回一个资源对象的“元数据”，或是用于探测API是否健康\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003e✔︎\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePATCH\u003c/td\u003e\n\u003ctd\u003e用于局部信息的更新，对应于数据库的 \u003ccode\u003eupdate\u003c/code\u003e 操作\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003e✘\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eOPTIONS\u003c/td\u003e\n\u003ctd\u003e获取API的相关的信息。\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003e✔︎\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e其中，\u003ccode\u003ePUT\u003c/code\u003e 和 \u003ccode\u003ePACTH\u003c/code\u003e 都是更新业务资源信息，如果资源对象不存在则可以新建一个，但他们两者的区别是，\u003ccode\u003ePUT\u003c/code\u003e 用于更新一个业务对象的所有完整信息，就像是我们通过表单提交所有的数据，而 \u003ccode\u003ePACTH\u003c/code\u003e 则对更为API化的数据更新操作，只需要更需要更新的字段（参看 \u003ca href=\"http://tools.ietf.org/html/rfc5789\" rel=\"nofollow\"\u003eRFC 5789\u003c/a\u003e ）。\u003c/p\u003e\n\u003cp\u003e当然，现实世界中，可能并不一定严格地按照数据库操作的CRUD来理解API，比如，你有一个登录的API \u003ccode\u003e/login\u003c/code\u003e 你觉得这个API应该是 \u003ccode\u003eGET\u003c/code\u003e ，\u003ccode\u003ePOST\u003c/code\u003e，\u003ccode\u003ePUT\u003c/code\u003e 还是 \u003ccode\u003ePATCH\u003c/code\u003e ?登录的时候用户需要输入用户名和密码，然后跟数据库里的对比（select操作）后反回一个登录的session token，然后这个token作为用户登录的状态令牌。如果按上面表格来说，应该是 select 操作进行 \u003ccode\u003eGET\u003c/code\u003e ，但是从语义上来说，登录并不是查询信息，应该是用户状态的更新或是新增操作（新增session），所以还是应该使用 \u003ccode\u003ePOST\u003c/code\u003e，而 \u003ccode\u003e/logout\u003c/code\u003e 你可以使用 \u003ccode\u003eDELETE\u003c/code\u003e 。\u003cstrong\u003e这里相说明一下，不要机械地通过数据库的CRUD来对应这些动词，很多时候，还是要分析一下业务语义。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e另外，我们注意到，在这个表格的最后一列中加入了“是否幂等”的，API的幂等对于控制逻辑来说是一件很重要的事。\u003c/strong\u003e所谓幂等，就是该API执行多次和执行一次的结果是完全一样的，没有副作用。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ePOST\u003c/code\u003e 用于新增加数据，比如，新增一个交易订单，这肯定不能是幂等的\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDELETE\u003c/code\u003e 用于删除数据，一个数据删除多次和删除一次的结果是一样的，所以，是幂等的\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePUT\u003c/code\u003e 用于全部数更新，所以，是幂等的。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePATCH\u003c/code\u003e用于局部更新，比如，更新某个字段 cnt = cnt+1，明显不可能是幂等操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e幂等这个特性对于远程调用是一件非常关键的事，就是说，远程调用有很多时候会因为网络原因导致调用timeout，对于timeout的请求，我们是无法知道服务端是否已经是收到请求并执行了，此时，我们不能贸然重试请求，对于不是幂等的调用来说，这会是灾难性的。比如像转帐这样的业务逻辑，转一次和转多次结果是不一样的，如果重新的话有可能就会多转了一次。所以，这个时候，如果你的API遵从了HTTP动词的规范，那么你写起程序来就可以明白在哪些动词下可以重试，而在哪些动词下不能重试。如果你把所有的API都用POST来表达的话，就完全失控了。\u003c/p\u003e\n\u003cp\u003e除了幂等这样的控制逻辑之外，你可能还会有如下的这些控制逻辑的需求：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e缓存\u003c/strong\u003e。通过CDN或是网关对API进行缓存，很显然，我们要在查询\u003ccode\u003eGET\u003c/code\u003e 操作上建议缓存。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e流控\u003c/strong\u003e。你可以通过HTTP的动词进行更粒度的流控，比如：限制API的请用频率，在读操作上和写操作上应该是不一样的。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e路由\u003c/strong\u003e。比如：写请求路由到写服务上，读请求路由到读服务上。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e权限\u003c/strong\u003e。可以获得更细粒度的权限控制和审计。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e监控\u003c/strong\u003e。因为不同的方法的API的性能都不一样，所以，可以区分做性能分析。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e压测\u003c/strong\u003e。当你需要压力测试API时，如果没有动词的区分的话，我相信你的压力测试很难搞吧。\u003c/li\u003e\n\u003cli\u003e……等等\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e也许，你会说，我的业务太简单了，没有必要搞这么复杂。OK，没有问题，但\u003cstrong\u003e是我觉得你最差的情况下，也是需要做到“读写分离”的，就是说，至少要有两个动词，\u003ccode\u003eGET\u003c/code\u003e 表示是读操作，\u003ccode\u003ePOST\u003c/code\u003e表示是写操作。\u003c/strong\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Restful_%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2\"\u003e\u003c/span\u003eRestful 复杂查询\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e一般来说，对于查询类的API，主要就是要完成四种操作：排序，过滤，搜索，分页。下面是一些相关的规范。参考于两个我觉得写的最好的Restful API的规范文档，\u003ca href=\"https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md\" target=\"_blank\" rel=\"noopener\"\u003eMicrosoft REST API Guidelines\u003c/a\u003e，\u003ca href=\"https://github.com/paypal/api-standards/blob/master/api-style-guide.md\" target=\"_blank\" rel=\"noopener\"\u003ePaypal API Design Guidelines\u003c/a\u003e。\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003e排序\u003c/strong\u003e。对于结果集的排序，使用 \u003ccode\u003esort\u003c/code\u003e 关键字，以及 \u003ccode\u003e{field_name}|{asc|desc},{field_name}|{asc|desc}\u003c/code\u003e 的相关语法。比如，某API需要返回公司的列表，并按照某些字段排序，如：\u003ccode\u003eGET /admin/companies?sort=rank|asc\u003c/code\u003e 或是 \u003ccode\u003eGET /admin/companies?sort=rank|asc,zip_code|desc\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003e过滤\u003c/strong\u003e。对于结果集的过滤，使用 \u003ccode\u003efilter\u003c/code\u003e 关键字，以及 \u003ccode\u003e{field_name} op{value}\u003c/code\u003e 的语法。比如： \u003ccode\u003eGET /companies?category=banking\u0026amp;location=china\u003c/code\u003e 。但是，有些时候，我们需要更为灵活的表达式，我们就需要在URL上构造我们的表达式。这里需要定义六个比较操作：\u003ccode\u003e=\u003c/code\u003e，\u003ccode\u003e\u0026lt;\u003c/code\u003e，\u003ccode\u003e\u0026gt;\u003c/code\u003e，\u003ccode\u003e\u0026lt;=\u003c/code\u003e，\u003ccode\u003e\u0026gt;=\u003c/code\u003e，以及三个逻辑操作：\u003ccode\u003eand\u003c/code\u003e，\u003ccode\u003eor\u003c/code\u003e，\u003ccode\u003enot\u003c/code\u003e。（表达式中的一些特殊字符需要做一定的转义，比如：\u003ccode\u003e\u0026gt;=\u003c/code\u003e 转成 \u003ccode\u003ege\u003c/code\u003e）于是，我们就会有如下的查询表达式：\u003ccode\u003eGET /products?$filter=name eq \u0026#39;Milk\u0026#39; and price lt 2.55\u003c/code\u003e 查找所有的价柗小于2.55的牛奶。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003e搜索\u003c/strong\u003e。对于相关的搜索，使用 \u003ccode\u003esearch\u003c/code\u003e 关键字，以及关键词。如：\u003ccode\u003eGET /books/search?description=algorithm\u003c/code\u003e 或是直接就是全文搜索 \u003ccode\u003eGET /books/search?key=algorithm\u003c/code\u003e 。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003e分页\u003c/strong\u003e。对于结果集进行分页处理，分页必需是一个默认行为，这样不会产生大量的返回数据。\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e使用\u003ccode\u003epage\u003c/code\u003e和\u003ccode\u003eper_page\u003c/code\u003e代表页码和每页数据量，比如：\u003ccode\u003eGET /books?page=3\u0026amp;per_page=20\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e可选\u003c/strong\u003e。上面提到的\u003ccode\u003epage\u003c/code\u003e方式为使用相对位置来获取数据，可能会存在两个问题：性能（大数据量）与数据偏差（高频更新）。此时可以使用绝对位置来获取数据：事先记录下当前已获取数据里最后一条数据的\u003ccode\u003eID\u003c/code\u003e、\u003ccode\u003e时间\u003c/code\u003e等信息，以此获取 “\u003cstrong\u003e该ID之前的数据\u003c/strong\u003e” 或 “\u003cstrong\u003e该时刻之前的数据\u003c/strong\u003e”。示例：\u003ccode\u003eGET /news?max_id=23454345\u0026amp;per_page=20\u003c/code\u003e 或 \u003ccode\u003eGET /news?published_before=2011-01-01T00:00:00Z\u0026amp;per_page=20\u003c/code\u003e。\n\u003cp dir=\"auto\"\u003e\n\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003e注意：这里需要注意一下，在理论上来说\u003ccode\u003eGET\u003c/code\u003e是可以带 body 的，但是很多程序的类库或是中间件并不支持 GET 带 body，导致你只能用 POST 来传递参数。这里的原则是：\u003c/strong\u003e\u003c/p\u003e\n\u003col dir=\"auto\"\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003e对于简单的查询，很多参数都设计在 restful API 的路径上了，而 filter/sort/pagination 也不会带来很多的复杂，所以应该使用 \u003ccode\u003eGET\u003c/code\u003e \u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e对于复杂的查询来说，可能会有很复杂的查询参数，比如：ElasticSearch 上的 \u003ccode\u003eindex/_search\u003c/code\u003e里的 DSL，你也应该尽可能的使用 \u003ccode\u003eGET\u003c/code\u003e，而不是\u003ccode\u003ePOST\u003c/code\u003e 除非客观条件上不支持\u003ccode\u003eGET\u003c/code\u003e。ElasticSearch 的\u003ca href=\"https://www.elastic.co/guide/en/elasticsearch/guide/current/_empty_search.html\" target=\"_blank\" rel=\"noopener\"\u003e官方文档\u003c/a\u003e里也是这么说的。\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\u003cp\u003eThe authors of Elasticsearch prefer using GET for a search request because they feel that it describes the action—​retrieving information—​better than the POST verb. （我们推荐使用 GET而不是 POST，因为语义更清楚）However, because GET with a request body is not universally supported, the search API also accepts POST requests （除非你的类库或是服务器不支持 GET带参数 ，你再用POST，我们两个都支持）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e陈皓注：但是在 ElasticSearch 7.11 后，GET 也不支持 body 了。这是 ElasticSearch 的设计和实现不对应了。\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv id=\"message-accessories-1073072655571370085\" class=\"container-2sjPya\"\u003e\n\u003cdiv class=\"messageAttachment-CZp8Iv messageAttachmentNoJustify-lIzP9c\"\u003e\n\u003cdiv class=\"imageContent-3Av-9c embedWrapper-1MtIDg attachmentContentItem-UKeiCx\"\u003e\n\u003cdiv class=\"imageContainer-10XenG\"\u003e\n\u003cdiv class=\"imageWrapper-oMkQl4 imageZoom-3yLCXY clickable-LksVCf\"\u003e另外，对于一些更为复杂的操作，建议通过分别调用多个API的方式来完成，虽然这样会增加网络请求的次数，但是这样的可以让后端程序和数据耦合度更小，更容易成为微服务的架构。\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e最后，如果你想在Rest中使用像GraphQL那样的查询语言，你可以考虑一下类似 \u003ca href=\"https://www.odata.org/\" target=\"_blank\" rel=\"noopener\"\u003eOData\u003c/a\u003e 的解决方案。OData 是 Open Data Protocol 的缩写，最初由 Microsoft 于 2007 年开发。它是一种开放协议，使您能够以简单和标准的方式创建和使用可查询和可互操作的 RESTful API。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%87%A0%E4%B8%AA%E4%B8%BB%E8%A6%81%E9%97%AE%E9%A2%98%E7%9A%84%E5%9B%9E%E5%BA%94\"\u003e\u003c/span\u003e几个主要问题的回应\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e下面是对几个问题的直接回应，如果大家需要我回应更多的问题，可以在后面留言，我会把问题和我的回应添加到下面。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"1%EF%BC%89%E4%B8%BA%E4%BB%80%E4%B9%88API_%E8%A6%81Restful%EF%BC%8C%E5%B9%B6%E7%AC%A6%E5%90%88%E8%A7%84%E8%8C%83%EF%BC%9F\"\u003e\u003c/span\u003e1）为什么API 要Restful，并符合规范？\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cstrong\u003eRestful API算是一个HTTP的规范和标准了，你要说是最佳实践也好，总之，它是一个全世界对HTTP API的一个共识。在这个共识上，你可以无成本地享受很多的技术红利，比如：CDN，API网关，服务治理，监控……等等。这些都是可以让你大幅度降低研发成本，避免踩坑的原因。\u003c/strong\u003e\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"2%EF%BC%89%E4%B8%BA%E4%BB%80%E4%B9%88%E2%80%9C%E8%BF%87%E6%97%A9%E4%BC%98%E5%8C%96%E2%80%9D%E4%B8%8D%E9%80%82%E7%94%A8%E4%BA%8EAPI%E8%AE%BE%E8%AE%A1%EF%BC%9F\"\u003e\u003c/span\u003e2）为什么“过早优化”不适用于API设计？\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e因为API是一种契约，一旦被使用上，就很难再变更了，就算你发行新的版本的API，你还要驱动各种调用方升级他们的调用方式。所以，接口设计就像数据库模式设计一下，一旦设计好了，未来再变更就比较难了。所以，还是要好好设计。正如前面我给的几个文档——\u003ca href=\"https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md\" target=\"_blank\" rel=\"noopener\"\u003eMicrosoft REST API Guidelines\u003c/a\u003e，\u003ca href=\"https://github.com/paypal/api-standards/blob/master/api-style-guide.md\" target=\"_blank\" rel=\"noopener\"\u003ePaypal API Design Guidelines\u003c/a\u003e 或是 \u003ca href=\"https://cloud.google.com/apis/design\" target=\"_blank\" rel=\"noopener\"\u003eGoogle API Design Guide\u003c/a\u003e 都是让你好好设计API的不错的 Guidelines.\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"3%EF%BC%89POST_%E6%9B%B4%E5%AE%89%E5%85%A8%E5%90%97%EF%BC%9F\"\u003e\u003c/span\u003e3）POST 更安全吗？\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e不会。\u003c/p\u003e\n\u003cp\u003e很多同学以为 \u003ccode\u003eGET\u003c/code\u003e 的请求数据在URL中，而 \u003ccode\u003ePOST\u003c/code\u003e 的则不是，所以以为 \u003ccode\u003ePOST\u003c/code\u003e 更安全。不是这样的，整个请求的HTTP URL PATH会全部封装在HTTP的协议头中。只要是HTTPS，就是安全的。当然，有些网关如nginx会把URL打到日志中，或是会放在浏览器的历史记录中，所以有人会说 \u003ccode\u003eGET\u003c/code\u003e 请求不安全，但是，\u003ccode\u003ePOST\u003c/code\u003e 也没有好到哪里去，在 \u003ca href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\" target=\"_blank\" rel=\"noopener\"\u003eCSRF\u003c/a\u003e 这个最常见的安全问题上，则完全就是针对 \u003ccode\u003ePOST\u003c/code\u003e 的。  安全是一件很复杂的事，无论你用哪方法或动词都会不能代表你会更安全。\u003c/p\u003e\n\u003cp\u003e另外，\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果你要 防止你的 \u003ccode\u003eGET\u003c/code\u003e 上有敏感信息，应该加个密，这个跟 \u003ccode\u003ePOST\u003c/code\u003e是一样的。\u003c/li\u003e\n\u003cli\u003e如果你要防止 \u003ccode\u003eGET\u003c/code\u003e 会被中间人修改，你应该做一个URL签名。（通常来说， 我们都在 \u003ccode\u003eGET\u003c/code\u003e 上做签名，\u003ccode\u003ePOST\u003c/code\u003e 就忘做了）\u003c/li\u003e\n\u003cli\u003e如果你要防止有人发一些恶意链接来 hack 你的用户（传说中的 \u003ccode\u003eGET\u003c/code\u003e 不如 \u003ccode\u003ePOST\u003c/code\u003e 安全的一个问题），你应该用 HMAC 之类的认证技术做好认证（参看 \u003ca title=\"HTTP API 认证授权术\" href=\"https://coolshell.cn/articles/19395.html\" target=\"_blank\" rel=\"noopener\"\u003eHTTP API 认证授权术\u003c/a\u003e）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e总之，你要明白，\u003ccode\u003eGET\u003c/code\u003e 和 \u003ccode\u003ePOST\u003c/code\u003e 的安全问题都一样的，不要有谁比谁更安全，然后你就可以掉以轻心的这样的想法，安全都是要很严肃对待的。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"4%EF%BC%89%E5%85%A8%E7%94%A8_POST_%E5%8F%AF%E4%BB%A5%E8%8A%82%E7%9C%81%E6%97%B6%E9%97%B4%E5%87%8F%E5%B0%91%E6%B2%9F%E9%80%9A%E5%90%97%EF%BC%9F\"\u003e\u003c/span\u003e4）全用 POST 可以节省时间减少沟通吗？\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e不但不会，反而更糟糕。\u003c/p\u003e\n\u003cp\u003e说这种话的人，我感觉是不会思考问题。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e其一，为API赋于不同的动词，这个几乎不需要时间。把CRUD写在不同的函数下也是一种很好的编程风格。另外现在几乎所有的开发框架都支持很快速的CRUD的开发，比如Spring Boot，写数据库的CRUD基本上就不需要写SQL语言相关的查询代码，非常之方便。\u003c/li\u003e\n\u003cli\u003e其二，使用规范的方式，可以节约新加入团队人员的学习成本，而且可以大大减少跨团队的沟能成本。规范和标准其实就是在节约团队时间提升整体效率的，这个我们整个人类进行协作的基础。所以，这个世界上有很多的标准，你只要照着这个标准来，你的所生产的零件就可以适配到其它厂商的产品上。而不需要相互沟通。\u003c/li\u003e\n\u003cli\u003e其三，全用POST接口一把梭，不规范不标准，使用你的这个山寨API的人就得来不断的问你，反而增加了沟通。另外，也许你开发业务功能很快了，但是你在做控制逻辑的时候，你就要返工了，从长期上来讲，你的欠下了技术债，这个债反而导致了更大的成本。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"5%EF%BC%89%E6%97%A9%E7%82%B9%E5%9B%9E%E5%AE%B6%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF\"\u003e\u003c/span\u003e5）早点回家的正确姿势\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e不要以为你回家早就没事了，如果你的代码有这样那样的问题，别人看懂，或是出误用了你的代码出了问题，那么，你早回家有什么意义呢？你一样要被打扰，甚至被叫到公司来处理问题。所以，你应该做的是为了“长期的早回家”，而不是“短期的早回家”，要像长期的早回家，通常来说是这样的：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e把代码组织设计好，有更好的扩展性\u003c/strong\u003e。这样在面对新需求的时候，你就可以做到少改代码，甚至不改代码。这样你才可能早回家。不然，每次需求一来，你得重新写，你怎么可能早回家？\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e你的代码质量是不错的，有不错的文档和注释\u003c/strong\u003e。所以，别人不会老有问题来找你，或是你下班后，叫你来处理问题。甚至任何人都可以很容易地接手你的代码，这样你才可能真正不被打扰\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"6%EF%BC%89%E5%B7%A5%E4%BD%9C%E8%80%8C%E5%B7%B2%EF%BC%8C%E4%BC%98%E9%9B%85%E4%B8%8D%E8%83%BD%E5%BD%93%E9%A5%AD%E5%90%83\"\u003e\u003c/span\u003e6）工作而已，优雅不能当饭吃\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e回应两点：\u003c/p\u003e\n\u003cp\u003e其一，遵循个规范而已，把“正常”叫“优雅”，可见标准有多低。这么低的标准也只能“为了吃饭而生存了”。\u003c/p\u003e\n\u003cp\u003e其二，\u003cstrong\u003e作为一个“职业程序员”，要学会热爱和尊重自己的职业，热爱自己职业最重要的就是不要让外行人看扁这个职业，自己都不尊重这个职业，你让别人怎么尊重？尊重自己的职业，不仅仅只是能够获得让人羡慕的报酬，而更是要让自己的这个职业的更有含金量\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e希望大家都能尊重自己从事的这个职业，成为真正的职业化的程序员，而不是一个码农！\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure id=\"attachment_22177\" aria-describedby=\"caption-attachment-22177\" style=\"width: 834px\" class=\"wp-caption aligncenter\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"wp-image-22177 size-full\" src=\"https://coolshell.cn/wp-content/uploads/2022/02/quote-your-job-gives-you-authority-your-behavior-gives-you-respect-irwin-federman-73-55-75.jpeg\" alt=\"\" width=\"834\" height=\"319\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/02/quote-your-job-gives-you-authority-your-behavior-gives-you-respect-irwin-federman-73-55-75.jpeg 834w, https://coolshell.cn/wp-content/uploads/2022/02/quote-your-job-gives-you-authority-your-behavior-gives-you-respect-irwin-federman-73-55-75-300x115.jpeg 300w, https://coolshell.cn/wp-content/uploads/2022/02/quote-your-job-gives-you-authority-your-behavior-gives-you-respect-irwin-federman-73-55-75-768x294.jpeg 768w, https://coolshell.cn/wp-content/uploads/2022/02/quote-your-job-gives-you-authority-your-behavior-gives-you-respect-irwin-federman-73-55-75-604x231.jpeg 604w\" sizes=\"(max-width: 834px) 100vw, 834px\"/\u003e\u003cfigcaption id=\"caption-attachment-22177\" class=\"wp-caption-text\"\u003e你的工作给你权力，而只有你的行为才会给你尊重\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/22298.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2022/10/communication-150x150.png\" alt=\"聊聊团队协同和协同工具\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/22298.html\" class=\"wp_rp_title\"\u003e聊聊团队协同和协同工具\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/22157.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2022/02/monitoring-150x150.jpeg\" alt=\"谈谈公司对员工的监控\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/22157.html\" class=\"wp_rp_title\"\u003e谈谈公司对员工的监控\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21589.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2021/07/knowledge_sharing-300x169-1-150x150.jpeg\" alt=\"如何做一个有质量的技术分享\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21589.html\" class=\"wp_rp_title\"\u003e如何做一个有质量的技术分享\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/20977.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/08/programmer.01-e1596792460687-150x150.png\" alt=\"程序员如何把控自己的职业\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/20977.html\" class=\"wp_rp_title\"\u003e程序员如何把控自己的职业\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/20765.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/01/remote-150x150.jpg\" alt=\"MegaEase的远程工作文化\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/20765.html\" class=\"wp_rp_title\"\u003eMegaEase的远程工作文化\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/20276.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2019/12/open-your-creative-mind-150x150.jpg\" alt=\"别让自己“墙”了自己\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/20276.html\" class=\"wp_rp_title\"\u003e别让自己“墙”了自己\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-22173\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"878f9298fc\"\u003e\u003cimg id=\"rating_22173_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(22173, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-f2b78c9a6e379cc4e544a071-=\"\"/\u003e\u003cimg id=\"rating_22173_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(22173, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-f2b78c9a6e379cc4e544a071-=\"\"/\u003e\u003cimg id=\"rating_22173_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(22173, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-f2b78c9a6e379cc4e544a071-=\"\"/\u003e\u003cimg id=\"rating_22173_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(22173, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-f2b78c9a6e379cc4e544a071-=\"\"/\u003e\u003cimg id=\"rating_22173_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(22173, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-f2b78c9a6e379cc4e544a071-=\"\"/\u003e (\u003cstrong\u003e258\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.59\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_22173_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"“一把梭：REST API 全用 POST”\"/\u003e\u003cmeta itemprop=\"headline\" content=\"“一把梭：REST API 全用 POST”\"/\u003e\u003cmeta itemprop=\"description\" content=\"\n\n写这篇文章的原因主要还是因为V2EX上的这个贴子，这个贴子中说——\n\n“对接同事的接口，他定义的所有接口都是 post 请求，理由是 https 用 post 更安全，之前习惯使用 restful api ，如果说 https 只有 post 请求是安全的话？那为啥还需要 get 、put 、delete ？我该如何反驳他。”\n\n然后该贴中大量的回复大概有这么几种论调，1）POST挺好的，就应...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2022-02-13T12:28:47+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2023-02-09T11:41:05+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/22173.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/22173.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.59\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"258\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-22173-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2022-02-13T12:28:47+08:00",
  "Author": "陈皓"
}