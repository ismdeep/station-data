{
  "Source": "coolshell.cn",
  "Title": "伙伴分配器的一个极简实现",
  "Link": "https://coolshell.cn/articles/10427.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"56e495d9df3dadbc0067bb10-text/javascript\"\u003e\u003c/script\u003e\u003cstrong\u003e（感谢网友 \u003c/strong\u003e\u003ca href=\"http://weibo.com/fullofbull\" target=\"_blank\"\u003e\u003cstrong\u003e@我的上铺叫路遥\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e 投稿）\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e提起buddy system相信很多人不会陌生，它是一种经典的内存分配算法，大名鼎鼎的Linux底层的内存管理用的就是它。这里不探讨内核这么复杂实现，而仅仅是将该算法抽象提取出来，同时给出一份及其简洁的源码实现，以便定制扩展。\u003c/p\u003e\n\u003cp\u003e伙伴分配的实质就是一种特殊的\u003cstrong\u003e“分离适配”\u003c/strong\u003e，即将内存按2的幂进行划分，相当于分离出若干个块大小一致的空闲链表，搜索该链表并给出同需求最佳匹配的大小。其优点是快速搜索合并（O(logN)时间复杂度）以及低外部碎片（最佳适配best-fit）；其缺点是内部碎片，因为按2的幂划分块，如果碰上66单位大小，那么必须划分128单位大小的块。但若需求本身就按2的幂分配，比如可以先分配若干个内存池，在其基础上进一步细分就很有吸引力了。\u003c/p\u003e\n\u003cp\u003e可以在\u003ca href=\"https://en.wikipedia.org/wiki/Buddy_memory_allocation\" target=\"_blank\"\u003e维基百科\u003c/a\u003e上找到该算法的描述，大体如是：\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e分配内存：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e1.寻找大小合适的内存块（大于等于所需大小并且最接近2的幂，比如需要27，实际分配32）\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1.如果找到了，分配给应用程序。\u003cbr/\u003e\n2.如果没找到，分出合适的内存块。\u003c/p\u003e\n\u003cp style=\"padding-left: 60px;\"\u003e1.对半分离出高于所需大小的空闲内存块\u003cbr/\u003e\n2.如果分到最低限度，分配这个大小。\u003cbr/\u003e\n3.回溯到步骤1（寻找合适大小的块）\u003cbr/\u003e\n4.重复该步骤直到一个合适的块\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-10427\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e释放内存：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e1.释放该内存块\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1.寻找相邻的块，看其是否释放了。\u003cbr/\u003e\n2.如果相邻块也释放了，合并这两个块，重复上述步骤直到遇上未释放的相邻块，或者达到最高上限（即所有内存都释放了）。\u003c/p\u003e\n\u003cp\u003e上面这段文字对你来说可能看起来很费劲，没事，我们看个内存分配和释放的示意图你就知道了：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" class=\"aligncenter size-full wp-image-10504\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/buddy-memory-allocation.jpg\" width=\"598\" height=\"346\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/10/buddy-memory-allocation.jpg 598w, https://coolshell.cn/wp-content/uploads/2013/10/buddy-memory-allocation-300x174.jpg 300w, https://coolshell.cn/wp-content/uploads/2013/10/buddy-memory-allocation-467x270.jpg 467w\" sizes=\"(max-width: 598px) 100vw, 598px\"/\u003e\u003c/p\u003e\n\u003cp\u003e上图中，首先我们假设我们一个内存块有1024K，当我们需要给A分配70K内存的时候，\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e我们发现1024K的一半大于70K，然后我们就把1024K的内存分成两半，一半512K。\u003c/li\u003e\n\u003cli\u003e然后我们发现512K的一半仍然大于70K，于是我们再把512K的内存再分成两半，一半是128K。\u003c/li\u003e\n\u003cli\u003e此时，我们发现128K的一半小于70K，于是我们就分配为A分配128K的内存。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e后面的，B，C，D都这样，而释放内存时，则会把相邻的块一步一步地合并起来（合并也必需按分裂的逆操作进行合并）。\u003c/p\u003e\n\u003cp\u003e我们可以看见，这样的算法，用二叉树这个数据结构来实现再合适不过了。\u003c/p\u003e\n\u003cp\u003e我在网上分别找到\u003ca href=\"https://github.com/cloudwu/buddy\" target=\"_blank\"\u003ecloudwu\u003c/a\u003e和\u003ca href=\"https://github.com/wuwenbin/buddy2\"\u003ewuwenbin\u003c/a\u003e写的两份开源实现和测试用例。实际上后一份是对前一份的精简和优化，本文打算从后一份入手讲解，\u003cstrong\u003e因为这份实现真正体现了“极简”二字，追求突破常规的，极致简单的设计。\u003c/strong\u003e网友对其评价甚高，甚至可用作教科书标准实现，看完之后回过头来看cloudwu的代码就容易理解了。\u003c/p\u003e\n\u003cp\u003e分配器的整体思想是，通过一个数组形式的完全二叉树来监控管理内存，二叉树的节点用于标记相应内存块的使用状态，高层节点对应大的块，低层节点对应小的块，在分配和释放中我们就通过这些节点的标记属性来进行块的分离合并。如图所示，假设总大小为16单位的内存，我们就建立一个深度为5的满二叉树，根节点从数组下标[0]开始，监控大小16的块；它的左右孩子节点下标[1~2]，监控大小8的块；第三层节点下标[3~6]监控大小4的块……依此类推。\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter  wp-image-10502\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/伙伴分配器.jpg\" width=\"591\" height=\"347\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/10/伙伴分配器.jpg 844w, https://coolshell.cn/wp-content/uploads/2013/10/伙伴分配器-300x176.jpg 300w\" sizes=\"(max-width: 591px) 100vw, 591px\"/\u003e\u003c/p\u003e\n\u003cp\u003e在分配阶段，首先要搜索大小适配的块，假设第一次分配3，转换成2的幂是4，我们先要对整个内存进行对半切割，从16切割到4需要两步，那么从下标[0]节点开始深度搜索到下标[3]的节点并将其标记为已分配。第二次再分配3那么就标记下标[4]的节点。第三次分配6，即大小为8，那么搜索下标[2]的节点，因为下标[1]所对应的块被下标[3~4]占用了。\u003c/p\u003e\n\u003cp\u003e在释放阶段，我们依次释放上述第一次和第二次分配的块，即先释放[3]再释放[4]，当释放下标[4]节点后，我们发现之前释放的[3]是相邻的，于是我们立马将这两个节点进行合并，这样一来下次分配大小8的时候，我们就可以搜索到下标[1]适配了。若进一步释放下标[2]，同[1]合并后整个内存就回归到初始状态。\u003c/p\u003e\n\u003cp\u003e还是看一下源码实现吧，首先是伙伴分配器的数据结构：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estruct buddy2 {\n  unsigned size;\n  unsigned longest[1];\n};\u003c/pre\u003e\n\u003cp\u003e这里的成员size表明管理内存的总单元数目（测试用例中是32），成员longest就是二叉树的节点标记，表明所对应的内存块的空闲单位，\u003cstrong\u003e在下文中会分析这是整个算法中最精妙的设计。\u003c/strong\u003e此处数组大小为1表明这是可以向后扩展的（注：在GCC环境下你可以写成longest[0]，不占用空间，这里是出于可移植性考虑），我们在分配器初始化的buddy2_new可以看到这种用法。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estruct buddy2* buddy2_new( int size ) {\n  struct buddy2* self;\n  unsigned node_size;\n  int i;\n\n  if (size \u0026lt; 1 || !IS_POWER_OF_2(size))\n    return NULL;\n\n  self = (struct buddy2*)ALLOC( 2 * size * sizeof(unsigned));\n  self-\u0026gt;size = size;\n  node_size = size * 2;\n\n  for (i = 0; i \u0026lt; 2 * size - 1; ++i) {\n    if (IS_POWER_OF_2(i+1))\n      node_size /= 2;\n    self-\u0026gt;longest[i] = node_size;\n  }\n  return self;\n}\u003c/pre\u003e\n\u003cp\u003e整个分配器的大小就是满二叉树节点数目，即所需管理内存单元数目的2倍。一个节点对应4个字节，longest记录了节点所对应的的内存块大小。\u003c/p\u003e\n\u003cp\u003e内存分配的alloc中，入参是分配器指针和需要分配的大小，返回值是内存块索引。alloc函数首先将size调整到2的幂大小，并检查是否超过最大限度。然后进行适配搜索，深度优先遍历，当找到对应节点后，\u003cstrong\u003e将其longest标记为0，即分离适配的块出来，\u003c/strong\u003e并转换为内存块索引offset返回，依据二叉树排列序号，比如内存总体大小32，我们找到节点下标[8]，内存块对应大小是4，则offset = (8+1)*4-32 = 4，那么分配内存块就从索引4开始往后4个单位。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eint buddy2_alloc(struct buddy2* self, int size) {\n  unsigned index = 0;\n  unsigned node_size;\n  unsigned offset = 0;\n\n  if (self==NULL)\n    return -1;\n\n  if (size \u0026lt;= 0)\n    size = 1;\n  else if (!IS_POWER_OF_2(size))\n    size = fixsize(size);\n\n  if (self-\u0026gt;longest[index] \u0026lt; size)\n    return -1;\n\n  for(node_size = self-\u0026gt;size; node_size != size; node_size /= 2 ) {\n    if (self-\u0026gt;longest[LEFT_LEAF(index)] \u0026gt;= size)\n      index = LEFT_LEAF(index);\n    else\n      index = RIGHT_LEAF(index);\n  }\n\n  self-\u0026gt;longest[index] = 0;\n  offset = (index + 1) * node_size - self-\u0026gt;size;\n\n  while (index) {\n    index = PARENT(index);\n    self-\u0026gt;longest[index] =\n      MAX(self-\u0026gt;longest[LEFT_LEAF(index)], self-\u0026gt;longest[RIGHT_LEAF(index)]);\n  }\n\n  return offset;\n}\u003c/pre\u003e\n\u003cp\u003e在函数返回之前需要回溯，因为小块内存被占用，大块就不能分配了，比如下标[8]标记为0分离出来，那么其父节点下标[0]、[1]、[3]也需要相应大小的分离。\u003cstrong\u003e将它们的longest进行折扣计算，取左右子树较大值，\u003c/strong\u003e下标[3]取4，下标[1]取8，下标[0]取16，表明其对应的最大空闲值。\u003c/p\u003e\n\u003cp\u003e在内存释放的free接口，我们只要传入之前分配的内存地址索引，并确保它是有效值。之后就跟alloc做反向回溯，从最后的节点开始一直往上找到longest为0的节点，即当初分配块所适配的大小和位置。\u003cstrong\u003e我们将longest恢复到原来满状态的值。继续向上回溯，检查是否存在合并的块，依据就是左右子树longest的值相加是否等于原空闲块满状态的大小，如果能够合并，就将父节点longest标记为相加的和\u003c/strong\u003e（多么简单！）。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003evoid buddy2_free(struct buddy2* self, int offset) {\n  unsigned node_size, index = 0;\n  unsigned left_longest, right_longest;\n\n  assert(self \u0026amp;\u0026amp; offset \u0026gt;= 0 \u0026amp;\u0026amp; offset \u0026lt; size);\n\n  node_size = 1;\n  index = offset + self-\u0026gt;size - 1;\n\n  for (; self-\u0026gt;longest[index] ; index = PARENT(index)) {\n    node_size *= 2;\n    if (index == 0)\n      return;\n  }\n\n  self-\u0026gt;longest[index] = node_size;\n\n  while (index) {\n    index = PARENT(index);\n    node_size *= 2;\n\n    left_longest = self-\u0026gt;longest[LEFT_LEAF(index)];\n    right_longest = self-\u0026gt;longest[RIGHT_LEAF(index)];\n\n    if (left_longest + right_longest == node_size)\n      self-\u0026gt;longest[index] = node_size;\n    else\n      self-\u0026gt;longest[index] = MAX(left_longest, right_longest);\n  }\n}\u003c/pre\u003e\n\u003cp\u003e上面两个成对alloc/free接口的时间复杂度都是O(logN)，保证了程序运行性能。然而这段程序设计的独特之处就在于\u003cstrong\u003e使用加权来标记内存空闲状态，而不是一般的有限状态机，实际上longest既可以表示权重又可以表示状态，状态机就毫无必要了，所谓“少即是多”嘛！\u003c/strong\u003e反观cloudwu的实现，将节点标记为UNUSED/USED/SPLIT/FULL四个状态机，反而会带来额外的条件判断和管理实现，而且还不如数值那样精确。从逻辑流程上看，wuwenbin的实现简洁明了如同教科书一般，特别是左右子树的走向，内存块的分离合并，块索引到节点下标的转换都是一步到位，不像cloudwu充斥了大量二叉树的深度和长度的间接计算，让代码变得晦涩难读，这些都是longest的功劳。\u003cstrong\u003e一个“极简”的设计往往在于你想不到的突破常规思维的地方。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e这份代码唯一的缺陷就是longest的大小是4字节，内存消耗大。但\u003ca href=\"http://blog.codingnow.com/2011/12/buddy_memory_allocation.html\" target=\"_blank\"\u003ecloudwu的博客\u003c/a\u003e上有人提议用logN来保存值，这样就能实现uint8_t大小了，\u003cstrong\u003e看，又是一个“极简”的设计！\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e说实话，很难在网上找到比这更简约更优雅的buddy system实现了——至少在Google上如此。\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17225.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2015/08/cuckoo-150x150.jpg\" alt=\"Cuckoo Filter：设计与实现\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17225.html\" class=\"wp_rp_title\"\u003eCuckoo Filter：设计与实现\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"Leetcode 编程训练\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_title\"\u003eLeetcode 编程训练\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11847.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/08/puzzle-150x150.png\" alt=\"谜题的答案和活动的心得体会\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11847.html\" class=\"wp_rp_title\"\u003e谜题的答案和活动的心得体会\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11832.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/08/538efefbgw1eiz9cvx78fj20rm0fmdi8-150x150.jpg\" alt=\"【活动】解迷题送礼物\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11832.html\" class=\"wp_rp_title\"\u003e【活动】解迷题送礼物\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/10590.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview-150x150.jpeg\" alt=\"二维码的生成细节和原理\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/10590.html\" class=\"wp_rp_title\"\u003e二维码的生成细节和原理\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/9886.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/8.jpg\" alt=\"二叉树迭代器算法\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/9886.html\" class=\"wp_rp_title\"\u003e二叉树迭代器算法\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-10427\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"d5cd01ea31\"\u003e\u003cimg id=\"rating_10427_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10427, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.8, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-56e495d9df3dadbc0067bb10-=\"\"/\u003e\u003cimg id=\"rating_10427_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10427, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.8, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-56e495d9df3dadbc0067bb10-=\"\"/\u003e\u003cimg id=\"rating_10427_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10427, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.8, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-56e495d9df3dadbc0067bb10-=\"\"/\u003e\u003cimg id=\"rating_10427_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10427, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.8, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-56e495d9df3dadbc0067bb10-=\"\"/\u003e\u003cimg id=\"rating_10427_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10427, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.8, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-56e495d9df3dadbc0067bb10-=\"\"/\u003e (\u003cstrong\u003e32\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e3.78\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_10427_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"伙伴分配器的一个极简实现\"/\u003e\u003cmeta itemprop=\"headline\" content=\"伙伴分配器的一个极简实现\"/\u003e\u003cmeta itemprop=\"description\" content=\"（感谢网友 @我的上铺叫路遥 投稿）\n\n提起buddy system相信很多人不会陌生，它是一种经典的内存分配算法，大名鼎鼎的Linux底层的内存管理用的就是它。这里不探讨内核这么复杂实现，而仅仅是将该算法抽象提取出来，同时给出一份及其简洁的源码实现，以便定制扩展。\n\n伙伴分配的实质就是一种特殊的“分离适配”，即将内存按2的幂进行划分，相当于分离出若干个块大小一致的空闲链表，搜索该链表并给...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2013-10-09T23:10:42+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2013-10-09T23:18:16+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/10427.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"Leo\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/10427.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"3.78\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"32\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-10427-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2013-10-09T23:10:42+08:00",
  "Author": "Leo"
}