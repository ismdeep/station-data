{
  "Source": "coolshell.cn",
  "Title": "分布式系统的事务处理",
  "Link": "https://coolshell.cn/articles/10910.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"8d37ec691ab581ebf737322b-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright size-full wp-image-10946\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2014/01/trade-off.jpg\" width=\"251\" height=\"200\"/\u003e当我们在生产线上用一台服务器来提供数据服务的时候，我会遇到如下的两个问题：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）一台服务器的性能不足以提供足够的能力服务于所有的网络请求。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）我们总是害怕我们的这台服务器停机，造成服务不可用或是数据丢失。\u003c/p\u003e\n\u003cp\u003e于是我们不得不对我们的服务器进行扩展，加入更多的机器来分担性能上的问题，以及来解决单点故障问题。 通常，我们会通过两种手段来扩展我们的数据服务：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）\u003cstrong\u003e数据分区\u003c/strong\u003e：就是把数据分块放在不同的服务器上（如：uid % 16，一致性哈希等）。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）\u003cstrong\u003e数据镜像\u003c/strong\u003e：让所有的服务器都有相同的数据，提供相当的服务。\u003c/p\u003e\n\u003cp\u003e对于第一种情况，我们无法解决数据丢失的问题，单台服务器出问题时，会有部分数据丢失。所以，\u003cstrong\u003e数据服务的高可用性只能通过第二种方法来完成——数据的冗余存储\u003c/strong\u003e（一般工业界认为比较安全的备份数应该是3份，如：Hadoop和Dynamo）\u003cstrong\u003e。 但是，加入更多的机器，会让我们的数据服务变得很复杂，尤其是跨服务器的事务处理，也就是跨服务器的数据一致性\u003c/strong\u003e。这个是一个很难的问题。 让我们用最经典的Use Case：“A帐号向B帐号汇钱”来说明一下，熟悉RDBMS事务的都知道从帐号A到帐号B需要6个操作：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e从A帐号中把余额读出来。\u003c/li\u003e\n\u003cli\u003e对A帐号做减法操作。\u003c/li\u003e\n\u003cli\u003e把结果写回A帐号中。\u003c/li\u003e\n\u003cli\u003e从B帐号中把余额读出来。\u003c/li\u003e\n\u003cli\u003e对B帐号做加法操作。\u003c/li\u003e\n\u003cli\u003e把结果写回B帐号中。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e为了数据的一致性，这6件事，要么都成功做完，要么都不成功，而且这个操作的过程中，对A、B帐号的其它访问必需锁死，所谓锁死就是要排除其它的读写操作，不然会有脏数据的问题，这就是事务。那么，我们在加入了更多的机器后，这个事情会变得复杂起来：\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-10910\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）\u003cstrong\u003e在数据分区的方案中\u003c/strong\u003e：如果A帐号和B帐号的数据不在同一台服务器上怎么办？我们需要一个跨机器的事务处理。也就是说，如果A的扣钱成功了，但B的加钱不成功，我们还要把A的操作给回滚回去。这在跨机器的情况下，就变得比较复杂了。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）\u003cstrong\u003e在数据镜像的方案中\u003c/strong\u003e：A帐号和B帐号间的汇款是可以在一台机器上完成的，但是别忘了我们有多台机器存在A帐号和B帐号的副本。如果对A帐号的汇钱有两个并发操作（要汇给B和C），这两个操作发生在不同的两台服务器上怎么办？也就是说，在数据镜像中，在不同的服务器上对同一个数据的写操作怎么保证其一致性，保证数据不冲突？\u003c/p\u003e\n\u003cp\u003e同时，我们还要考虑性能的因素，如果不考虑性能的话，事务得到保证并不困难，系统慢一点就行了。除了考虑性能外，我们还要考虑可用性，也就是说，一台机器没了，数据不丢失，服务可由别的机器继续提供。 于是，我们需要重点考虑下面的这么几个情况：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）\u003cstrong\u003e容灾\u003c/strong\u003e：数据不丢、结点的Failover\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）\u003cstrong\u003e数据的一致性\u003c/strong\u003e：事务处理\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e3）\u003cstrong\u003e性能：吞吐量 、 响应时间\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e前面说过，要解决数据不丢，只能通过数据冗余的方法，就算是数据分区，每个区也需要进行数据冗余处理。这就是数据副本：当出现某个节点的数据丢失时可以从副本读到，数据副本是分布式系统解决数据丢失异常的唯一手段。所以，在这篇文章中，简单起见，我们只讨论在数据冗余情况下考虑数据的一致性和性能的问题。简单说来：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003e1）要想让数据有高可用性，就得写多份数据。\u003c/strong\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003e2）写多份的问题会导致数据一致性的问题。\u003c/strong\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003e3）数据一致性的问题又会引发性能问题\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e这就是软件开发，按下了葫芦起了瓢。\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B\" title=\"一致性模型\"\u003e一致性模型\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#Master-Slave\" title=\"Master-Slave\"\u003eMaster-Slave\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#Master-Master\" title=\"Master-Master\"\u003eMaster-Master\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#TwoThree_Phase_Commit\" title=\"Two/Three Phase Commit\"\u003eTwo/Three Phase Commit\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#Two_Generals_Problem%EF%BC%88%E4%B8%A4%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98%EF%BC%89\" title=\"Two Generals Problem（两将军问题）\"\u003eTwo Generals Problem（两将军问题）\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#Paxos%E7%AE%97%E6%B3%95\" title=\"Paxos算法\"\u003ePaxos算法\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#%E6%80%BB%E7%BB%93\" title=\"总结\"\u003e总结\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#NWR%E6%A8%A1%E5%9E%8B\" title=\"NWR模型\"\u003eNWR模型\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B\"\u003e\u003c/span\u003e一致性模型\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e说起数据一致性来说，简单说有三种类型（当然，如果细分的话，还有很多一致性模型，如：顺序一致性，FIFO一致性，会话一致性，单读一致性，单写一致性，但为了本文的简单易读，我只说下面三种）：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）\u003cstrong\u003eWeak 弱一致性\u003c/strong\u003e：当你写入一个新值后，读操作在数据副本上可能读出来，也可能读不出来。比如：某些cache系统，网络游戏其它玩家的数据和你没什么关系，VOIP这样的系统，或是百度搜索引擎（呵呵）。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）\u003cstrong\u003eEventually 最终一致性\u003c/strong\u003e：当你写入一个新值后，有可能读不出来，但在某个时间窗口之后保证最终能读出来。比如：DNS，电子邮件、Amazon S3，Google搜索引擎这样的系统。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e3）\u003cstrong\u003eStrong 强一致性\u003c/strong\u003e：新的数据一旦写入，在任意副本任意时刻都能读到新值。比如：文件系统，RDBMS，Azure Table都是强一致性的。\u003c/p\u003e\n\u003cp\u003e从这三种一致型的模型上来说，我们可以看到，Weak和Eventually一般来说是异步冗余的，而Strong一般来说是同步冗余的，异步的通常意味着更好的性能，但也意味着更复杂的状态控制。同步意味着简单，但也意味着性能下降。 好，让我们由浅入深，一步一步地来看有哪些技术：\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Master-Slave\"\u003e\u003c/span\u003eMaster-Slave\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e首先是Master-Slave结构，对于这种加构，Slave一般是Master的备份。在这样的系统中，一般是如下设计的：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）读写请求都由Master负责。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）写请求写到Master上后，由Master同步到Slave上。\u003c/p\u003e\n\u003cp\u003e从Master同步到Slave上，你可以使用异步，也可以使用同步，可以使用Master来push，也可以使用Slave来pull。 通常来说是Slave来周期性的pull，所以，是最终一致性。这个设计的问题是，如果Master在pull周期内垮掉了，那么会导致这个时间片内的数据丢失。如果你不想让数据丢掉，Slave只能成为Read-Only的方式等Master恢复。\u003c/p\u003e\n\u003cp\u003e当然，如果你可以容忍数据丢掉的话，你可以马上让Slave代替Master工作（对于只负责计算的结点来说，没有数据一致性和数据丢失的问题，Master-Slave的方式就可以解决单点问题了） 当然，Master Slave也可以是强一致性的， 比如：当我们写Master的时候，Master负责先写自己，等成功后，再写Slave，两者都成功后返回成功，整个过程是同步的，如果写Slave失败了，那么两种方法，一种是标记Slave不可用报错并继续服务（等Slave恢复后同步Master的数据，可以有多个Slave，这样少一个，还有备份，就像前面说的写三份那样），另一种是回滚自己并返回写失败。（注：一般不先写Slave，因为如果写Master自己失败后，还要回滚Slave，此时如果回滚Slave失败，就得手工订正数据了）你可以看到，如果Master-Slave需要做成强一致性有多复杂。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Master-Master\"\u003e\u003c/span\u003eMaster-Master\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003eMaster-Master，又叫\u003ca href=\"https://en.wikipedia.org/wiki/Multi-master_replication\" target=\"_blank\"\u003eMulti-master\u003c/a\u003e，是指一个系统存在两个或多个Master，每个Master都提供read-write服务。这个模型是Master-Slave的加强版，数据间同步一般是通过Master间的异步完成，所以是最终一致性。 Master-Master的好处是，一台Master挂了，别的Master可以正常做读写服务，他和Master-Slave一样，当数据没有被复制到别的Master上时，数据会丢失。很多数据库都支持Master-Master的Replication的机制。\u003c/p\u003e\n\u003cp\u003e另外，如果多个Master对同一个数据进行修改的时候，这个模型的恶梦就出现了——对数据间的冲突合并，这并不是一件容易的事情。看看Dynamo的Vector Clock的设计（记录数据的版本号和修改者）就知道这个事并不那么简单，而且Dynamo对数据冲突这个事是交给用户自己搞的。就像我们的SVN源码冲突一样，对于同一行代码的冲突，只能交给开发者自己来处理。（在本文后后面会讨论一下Dynamo的Vector Clock）\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"TwoThree_Phase_Commit\"\u003e\u003c/span\u003eTwo/Three Phase Commit\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e这个协议的缩写又叫2PC，中文叫两阶段提交。在分布式系统中，每个节点虽然可以知晓自己的操作时成功或者失败，却无法知道其他节点的操作的成功或失败。当一个事务跨越多个节点时，为了保持事务的ACID特性，需要引入一个作为\u003cstrong\u003e协调者\u003c/strong\u003e的组件来统一掌控所有节点(称作\u003cb\u003e参与者\u003c/b\u003e)的操作结果并最终指示这些节点是否要把操作结果进行真正的提交(比如将更新后的数据写入磁盘等等)。 两阶段提交的算法如下：\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e 第一阶段\u003c/strong\u003e：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e协调者会问所有的参与者结点，是否可以执行提交操作。\u003c/li\u003e\n\u003cli\u003e各个参与者开始事务执行的准备工作：如：为资源上锁，预留资源，写undo/redo log……\u003c/li\u003e\n\u003cli\u003e参与者响应协调者，如果事务的准备工作成功，则回应“可以提交”，否则回应“拒绝提交”。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003e第二阶段\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果所有的参与者都回应“可以提交”，那么，协调者向所有的参与者发送“正式提交”的命令。参与者完成正式提交，并释放所有资源，然后回应“完成”，协调者收集各结点的“完成”回应后结束这个Global Transaction。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e如果有一个参与者回应“拒绝提交”，那么，协调者向所有的参与者发送“回滚操作”，并释放所有资源，然后回应“回滚完成”，协调者收集各结点的“回滚”回应后，取消这个Global Transaction。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter  wp-image-10929\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2014/01/Two-phase_commit.png\" width=\"518\" height=\"195\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/01/Two-phase_commit.png 647w, https://coolshell.cn/wp-content/uploads/2014/01/Two-phase_commit-300x113.png 300w\" sizes=\"(max-width: 518px) 100vw, 518px\"/\u003e\u003c/p\u003e\n\u003cp\u003e我们可以看到，2PC说白了就是第一阶段做Vote，第二阶段做决定的一个算法，也可以看到2PC这个事是强一致性的算法。在前面我们讨论过Master-Slave的强一致性策略，和2PC有点相似，只不过2PC更为保守一些——先尝试再提交。 2PC用的是比较多的，在一些系统设计中，会串联一系列的调用，比如：A -\u0026gt; B -\u0026gt; C -\u0026gt; D，每一步都会分配一些资源或改写一些数据。比如我们B2C网上购物的下单操作在后台会有一系列的流程需要做。如果我们一步一步地做，就会出现这样的问题，如果某一步做不下去了，那么前面每一次所分配的资源需要做反向操作把他们都回收掉，所以，操作起来比较复杂。现在很多处理流程（Workflow）都会借鉴2PC这个算法，使用 try -\u0026gt; confirm的流程来确保整个流程的能够成功完成。 举个通俗的例子，西方教堂结婚的时候，都有这样的桥段：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）牧师分别问新郎和新娘：你是否愿意……不管生老病死……（询问阶段）\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）当新郎和新娘都回答愿意后（锁定一生的资源），牧师就会说：我宣布你们……（事务提交）\u003c/p\u003e\n\u003cp\u003e这是多么经典的一个两阶段提交的事务处理。 另外，我们也可以看到其中的一些问题， A）其中一个是同步阻塞操作，这个事情必然会非常大地影响性能。 B）另一个主要的问题是在TimeOut上，比如，\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）如果第一阶段中，参与者没有收到询问请求，或是参与者的回应没有到达协调者。那么，需要协调者做超时处理，一旦超时，可以当作失败，也可以重试。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）如果第二阶段中，正式提交发出后，如果有的参与者没有收到，或是参与者提交/回滚后的确认信息没有返回，一旦参与者的回应超时，要么重试，要么把那个参与者标记为问题结点剔除整个集群，这样可以保证服务结点都是数据一致性的。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e3）糟糕的情况是，第二阶段中，如果参与者收不到协调者的commit/fallback指令，参与者将处于“状态未知”阶段，参与者完全不知道要怎么办，比如：如果所有的参与者完成第一阶段的回复后（可能全部yes，可能全部no，可能部分yes部分no），如果协调者在这个时候挂掉了。那么所有的结点完全不知道怎么办（问别的参与者都不行）。为了一致性，要么死等协调者，要么重发第一阶段的yes/no命令。\u003c/p\u003e\n\u003cp\u003e两段提交最大的问题就是第3）项，\u003cstrong\u003e如果第一阶段完成后，参与者在第二阶没有收到决策，那么数据结点会进入“不知所措”的状态，这个状态会block住整个事务\u003c/strong\u003e。也就是说，协调者Coordinator对于事务的完成非常重要，Coordinator的可用性是个关键。 因些，我们引入三段提交，三段提交在\u003ca href=\"https://en.wikipedia.org/wiki/Three-phase_commit_protocol\" target=\"_blank\"\u003eWikipedia\u003c/a\u003e上的描述如下，他把二段提交的第一个段break成了两段：询问，然后再锁资源。最后真正提交。三段提交的示意图如下：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2014/01/Three-phase_commit_diagram.png\" width=\"611\" height=\"321\"/\u003e\u003c/p\u003e\n\u003cp\u003e三段提交的核心理念是：\u003cstrong\u003e在询问的时候并不锁定资源，除非所有人都同意了，才开始锁资源\u003c/strong\u003e。\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e理论上来说，如果第一阶段所有的结点返回成功，那么有理由相信成功提交的概率很大。这样一来，可以降低参与者Cohorts的状态未知的概率。也就是说，一旦参与者收到了PreCommit，意味他知道大家其实都同意修改了。这一点很重要。下面我们来看一下3PC的状态迁移图：（\u003cstrong\u003e注意图中的虚线，那些F,T是Failuer或Timeout\u003c/strong\u003e，其中的：状态含义是 q – Query，a – Abort，w – Wait，p – PreCommit，c – Commit）\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter  wp-image-10931\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2014/01/Three-phase_commit_status.png\" width=\"614\" height=\"374\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/01/Three-phase_commit_status.png 767w, https://coolshell.cn/wp-content/uploads/2014/01/Three-phase_commit_status-300x183.png 300w\" sizes=\"(max-width: 614px) 100vw, 614px\"/\u003e\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e从上图的状态变化图我们可以从虚线（那些F,T是Failuer或Timeout）看到——\u003cstrong\u003e如果结点处在P状态（PreCommit）的时候发生了F/T的问题，三段提交比两段提交的好处是，三段提交可以继续直接把状态变成C状态（Commit），而两段提交则不知所措\u003c/strong\u003e。\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e其实，三段提交是一个很复杂的事情，实现起来相当难，而且也有一些问题。\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e看到这里，我相信你有很多很多的问题，你一定在思考2PC/3PC中各种各样的失败场景，\u003cstrong\u003e你会发现Timeout是个非常难处理的事情，因为网络上的Timeout在很多时候让你无所事从，你也不知道对方是做了还是没有做。于是你好好的一个状态机就因为Timeout成了个摆设\u003c/strong\u003e。\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e\u003cstrong\u003e一个网络服务会有三种状态：1）Success，2）Failure，3）Timeout，第三个绝对是恶梦，尤其在你需要维护状态的时候\u003c/strong\u003e。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Two_Generals_Problem%EF%BC%88%E4%B8%A4%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98%EF%BC%89\"\u003e\u003c/span\u003eTwo Generals Problem（两将军问题）\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Two_Generals\u0026#39;_Problem\" target=\"_blank\"\u003eTwo Generals Problem\u003c/a\u003e 两将军问题是这么一个思维性实验问题： 有两支军队，它们分别有一位将军领导，现在准备攻击一座修筑了防御工事的城市。这两支军队都驻扎在那座城市的附近，分占一座山头。一道山谷把两座山分隔开来，并且两位将军唯一的通信方式就是派各自的信使来往于山谷两边。不幸的是，这个山谷已经被那座城市的保卫者占领，并且存在一种可能，那就是任何被派出的信使通过山谷是会被捕。 请注意，虽然两位将军已经就攻击那座城市达成共识，但在他们各自占领山头阵地之前，并没有就进攻时间达成共识。两位将军必须让自己的军队同时进攻城市才能取得成功。因此，他们必须互相沟通，以确定一个时间来攻击，并同意就在那时攻击。如果只有一个将军进行攻击，那么这将是一个灾难性的失败。 这个思维实验就包括考虑他们如何去做这件事情。下面是我们的思考：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）第一位将军先发送一段消息“让我们在上午9点开始进攻”。然而，一旦信使被派遣，他是否通过了山谷，第一位将军就不得而知了。任何一点的不确定性都会使得第一位将军攻击犹豫，因为如果第二位将军不能在同一时刻发动攻击，那座城市的驻军就会击退他的军队的进攻，导致他的军对被摧毁。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）知道了这一点，第二位将军就需要发送一个确认回条：“我收到您的邮件，并会在9点的攻击。”但是，如果带着确认消息的信使被抓怎么办？所以第二位将军会犹豫自己的确认消息是否能到达。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e3）于是，似乎我们还要让第一位将军再发送一条确认消息——“我收到了你的确认”。然而，如果这位信使被抓怎么办呢？\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e4）这样一来，是不是我们还要第二位将军发送一个“确认收到你的确认”的信息。\u003c/p\u003e\n\u003cp\u003e靠，于是你会发现，这事情很快就发展成为不管发送多少个确认消息，都没有办法来保证两位将军有足够的自信自己的信使没有被敌军捕获。\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter  wp-image-10933\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2014/01/two-generals-problems.jpg\" width=\"538\" height=\"251\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/01/two-generals-problems.jpg 598w, https://coolshell.cn/wp-content/uploads/2014/01/two-generals-problems-300x139.jpg 300w\" sizes=\"(max-width: 538px) 100vw, 538px\"/\u003e\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e\u003cstrong style=\"line-height: 1.5em;\"\u003e这个问题是无解的\u003c/strong\u003e\u003cspan style=\"line-height: 1.5em;\"\u003e。\u003c/span\u003e\u003cspan style=\"line-height: 1.5em;\"\u003e两个将军问题和它的无解证明首先由E.A.Akkoyunlu,K.Ekanadham和R.V.Huber于1975年在《一些限制与折衷的网络通信设计》一文中发表，就在这篇文章的第73页中一段描述两个黑帮之间的通信中被阐明。 1978年，在Jim Gray的《数据库操作系统注意事项》一书中（从第465页开始）被命名为两个将军悖论。作为两个将军问题的定义和无解性的证明的来源，这一参考被广泛提及。\u003c/span\u003e\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e这个实验意在阐明：试图通过建立在一个不可靠的连接上的交流来协调一项行动的隐患和设计上的巨大挑战。\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e从工程上来说，一个解决两个将军问题的实际方法是使用一个能够承受通信信道不可靠性的方案，并不试图去消除这个不可靠性，但要将不可靠性削减到一个可以接受的程度。比如，第一位将军排出了100位信使并预计他们都被捕的可能性很小。在这种情况下，不管第二位将军是否会攻击或者受到任何消息，第一位将军都会进行攻击。另外，第一位将军可以发送一个消息流，而第二位将军可以对其中的每一条消息发送一个确认消息，这样如果每条消息都被接收到，两位将军会感觉更好。然而我们可以从证明中看出，他们俩都不能肯定这个攻击是可以协调的。他们没有算法可用（比如，收到4条以上的消息就攻击）能够确保防止仅有一方攻击。再者，第一位将军还可以为每条消息编号，说这是1号，2号……直到n号。这种方法能让第二位将军知道通信信道到底有多可靠，并且返回合适的数量的消息来确保最后一条消息被接收到。如果信道是可靠的话，只要一条消息就行了，其余的就帮不上什么忙了。最后一条和第一条消息丢失的概率是相等的。\u003c/p\u003e\n\u003cp\u003e 两将军问题可以扩展成更变态的\u003cstrong\u003e拜占庭将军问题 (Byzantine Generals Problem)\u003c/strong\u003e，其故事背景是这样的：拜占庭位于现在土耳其的伊斯坦布尔，是东罗马帝国的首都。由于当时拜占庭罗马帝国国土辽阔，为了防御目的，因此每个军队都分隔很远，将军与将军之间只能靠信差传消息。 在战争的时候，拜占庭军队内所有将军必需达成一致的共识，决定是否有赢的机会才去攻打敌人的阵营。但是，军队可能有叛徒和敌军间谍，这些叛徒将军们会扰乱或左右决策的过程。这时候，在已知有成员谋反的情况下，其余忠诚的将军在不受叛徒的影响下如何达成一致的协议，这就是拜占庭将军问题。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Paxos%E7%AE%97%E6%B3%95\"\u003e\u003c/span\u003ePaxos算法\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Paxos_(computer_science)\" target=\"_blank\"\u003eWikipedia上的各种Paxos算法\u003c/a\u003e的描述非常详细，大家可以去围观一下。\u003c/p\u003e\n\u003cp\u003ePaxos 算法解决的问题是在一个可能发生上述异常的分布式系统中如何就某个值达成一致，保证不论发生以上任何异常，都不会破坏决议的一致性。一个典型的场景是，在一个分布式数据库系统中，如果各节点的初始状态一致，每个节点都执行相同的操作序列，那么他们最后能得到一个一致的状态。为保证每个节点执行相同的命令序列，需要在每一条指令上执行一个「一致性算法」以保证每个节点看到的指令一致。一个通用的一致性算法可以应用在许多场景中，是分布式计算中的重要问题。从20世纪80年代起对于一致性算法的研究就没有停止过。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNotes\u003c/strong\u003e：Paxos算法是莱斯利·兰伯特（Leslie Lamport，就是 LaTeX 中的”La”，此人现在在微软研究院）于1990年提出的一种基于消息传递的一致性算法。由于算法难以理解起初并没有引起人们的重视，使Lamport在八年后1998年重新发表到ACM Transactions on Computer Systems上（\u003ca href=\"http://research.microsoft.com/users/lamport/pubs/lamport-paxos.pdf\" rel=\"nofollow\"\u003eThe Part-Time Parliament\u003c/a\u003e）。即便如此paxos算法还是没有得到重视，2001年Lamport 觉得同行无法接受他的幽默感，于是用容易接受的方法重新表述了一遍（\u003ca href=\"http://research.microsoft.com/users/lamport/pubs/paxos-simple.pdf\" rel=\"nofollow\"\u003ePaxos Made Simple\u003c/a\u003e）。可见Lamport对Paxos算法情有独钟。近几年Paxos算法的普遍使用也证明它在分布式一致性算法中的重要地位。2006年Google的三篇论文初现“云”的端倪，其中的Chubby Lock服务使用Paxos作为Chubby Cell中的一致性算法，Paxos的人气从此一路狂飙。（Lamport 本人在 \u003ca href=\"http://research.microsoft.com/users/lamport/pubs/pubs.html#lamport-paxos\" target=\"_blank\"\u003e他的blog 中\u003c/a\u003e描写了他用9年时间发表这个算法的前前后后）\u003c/p\u003e\n\u003cp\u003e注：Amazon的AWS中，所有的云服务都基于一个ALF（Async Lock Framework）的框架实现的，这个ALF用的就是Paxos算法。我在Amazon的时候，看内部的分享视频时，设计者在内部的Principle Talk里说他参考了ZooKeeper的方法，但他用了另一种比ZooKeeper更易读的方式实现了这个算法。\u003c/p\u003e\n\u003cp\u003e简单说来，Paxos的目的是让整个集群的结点对某个值的变更达成一致。Paxos算法基本上来说是个民主选举的算法——大多数的决定会成个整个集群的统一决定。任何一个点都可以提出要修改某个数据的提案，是否通过这个提案取决于这个集群中是否有超过半数的结点同意（所以Paxos算法需要集群中的结点是单数）。\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"line-height: 1.5em;\"\u003e这个算法有两个阶段（假设这个有三个结点：A，B，C）：\u003c/span\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003e第一阶段：Prepare阶段\u003c/strong\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003eA把申请修改的请求Prepare Request发给所有的结点A，B，C。注意，Paxos算法会有一个Sequence Number（你可以认为是一个提案号，这个数不断递增，而且是唯一的，也就是说A和B不可能有相同的提案号），这个提案号会和修改请求一同发出，任何结点在“Prepare阶段”时都会拒绝其值小于当前提案号的请求。所以，结点A在向所有结点申请修改请求的时候，需要带一个提案号，越新的提案，这个提案号就越是是最大的。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e如果接收结点收到的提案号n大于其它结点发过来的提案号，这个结点会回应Yes（本结点上最新的被批准提案号），并保证不接收其它\u0026lt;n的提案。这样一来，结点上在Prepare阶段里总是会对最新的提案做承诺。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e优化：在上述 prepare 过程中，如果任何一个结点发现存在一个更高编号的提案，则需要通知 提案人，提醒其中断这次提案。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003e第二阶段：Accept阶段\u003c/strong\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e如果提案者A收到了超过半数的结点返回的Yes，然后他就会向所有的结点发布Accept Request（同样，需要带上提案号n），如果没有超过半数的话，那就返回失败。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e当结点们收到了Accept Request后，如果对于接收的结点来说，n是最大的了，那么，它就会修改这个值，如果发现自己有一个更大的提案号，那么，结点就会拒绝修改。\u003c/p\u003e\n\u003cp\u003e我们可以看以，这似乎就是一个“两段提交”的优化。其实，\u003cstrong\u003e2PC/3PC都是分布式一致性算法的残次版本，Google Chubby的作者Mike Burrows说过这个世界上只有一种一致性算法，那就是Paxos，其它的算法都是残次品。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003c/strong\u003e我们还可以看到：对于同一个值的在不同结点的修改提案就算是在接收方被乱序收到也是没有问题的。\u003c/p\u003e\n\u003cp\u003e关于一些实例，你可以看一下Wikipedia中文中的“\u003ca href=\"https://zh.wikipedia.org/zh/Paxos%E7%AE%97%E6%B3%95#.E5.AE.9E.E4.BE.8B\" target=\"_blank\"\u003ePaxos样例\u003c/a\u003e”一节，我在这里就不再多说了。对于Paxos算法中的一些异常示例，大家可以自己推导一下。你会发现基本上来说只要保证有半数以上的结点存活，就没有什么问题。\u003c/p\u003e\n\u003cp\u003e多说一下，自从Lamport在1998年发表Paxos算法后，对Paxos的各种改进工作就从未停止，其中动作最大的莫过于2005年发表的\u003ca href=\"http://research.microsoft.com/apps/pubs/default.aspx?id=64624\" target=\"_blank\"\u003eFast Paxos\u003c/a\u003e。无论何种改进，其重点依然是在消息延迟与性能、吞吐量之间作出各种权衡。为了容易地从概念上区分二者，称前者Classic Paxos，改进后的后者为Fast Paxos。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%80%BB%E7%BB%93\"\u003e\u003c/span\u003e总结\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cdiv id=\"Msg_18730\"\u003e下图来自：Google App Engine的co-founder Ryan Barrett在2009年的google i/o上的演讲《\u003ca href=\"http://snarfed.org/transactions_across_datacenters_io.html\" target=\"_blank\"\u003eTransaction Across DataCenter\u003c/a\u003e》（视频： \u003ca title=\"阿里旺旺无法确定该链接的安全性\" href=\"https://www.youtube.com/watch?v=srOgpXECblk\" target=\"_blank\"\u003ehttp://www.youtube.com/watch?v=srOgpXECblk\u003c/a\u003e）\u003c/div\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-10942\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2014/01/Transaction-Across-DataCenter.jpg\" width=\"566\" height=\"255\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/01/Transaction-Across-DataCenter.jpg 566w, https://coolshell.cn/wp-content/uploads/2014/01/Transaction-Across-DataCenter-300x135.jpg 300w\" sizes=\"(max-width: 566px) 100vw, 566px\"/\u003e\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e前面，我们说过，要想让数据有高可用性，就需要冗余数据写多份。写多份的问题会带来一致性的问题，而一致性的问题又会带来性能问题。从上图我们可以看到，我们基本上来说不可以让所有的项都绿起来，这就是著名的CAP理论：一致性，可用性，分区容忍性，你只可能要其中的两个。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"NWR%E6%A8%A1%E5%9E%8B\"\u003e\u003c/span\u003eNWR模型\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e最后我还想提一下Amazon Dynamo的NWR模型。这个NWR模型把CAP的选择权交给了用户，让用户自己的选择你的CAP中的哪两个\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e所谓NWR模型。N代表N个备份，W代表要写入至少W份才认为成功，R表示至少读取R个备份。\u003cstrong\u003e配置的时候要求W+R \u0026gt; N\u003c/strong\u003e。 因为W+R \u0026gt; N， 所以 R \u0026gt; N-W 这个是什么意思呢？就是读取的份数一定要比总备份数减去确保写成功的倍数的差值要大。\u003c/p\u003e\n\u003cp\u003e也就是说，每次读取，都至少读取到一个最新的版本。从而不会读到一份旧数据。当我们需要高可写的环境的时候，我们可以配置W = 1 如果N=3 那么R = 3。 这个时候只要写任何节点成功就认为成功，但是读的时候必须从所有的节点都读出数据。如果我们要求读的高效率，我们可以配置 W=N R=1。这个时候任何一个节点读成功就认为成功，但是写的时候必须写所有三个节点成功才认为成功。\u003c/p\u003e\n\u003cp\u003eNWR模型的一些设置会造成脏数据的问题，因为这很明显不是像Paxos一样是一个强一致的东西，所以，可能每次的读写操作都不在同一个结点上，于是会出现一些结点上的数据并不是最新版本，但却进行了最新的操作。\u003c/p\u003e\n\u003cp\u003e所以，Amazon Dynamo引了数据版本的设计。也就是说，如果你读出来数据的版本是v1，当你计算完成后要回填数据后，却发现数据的版本号已经被人更新成了v2，那么服务器就会拒绝你。版本这个事就像“乐观锁”一样。\u003c/p\u003e\n\u003cp\u003e但是，对于分布式和NWR模型来说，版本也会有恶梦的时候——就是版本冲的问题，比如：我们设置了N=3 W=1，如果A结点上接受了一个值，版本由v1 -\u0026gt; v2，但还没有来得及同步到结点B上（异步的，应该W=1，写一份就算成功），B结点上还是v1版本，此时，B结点接到写请求，按道理来说，他需要拒绝掉，但是他一方面并不知道别的结点已经被更新到v2，另一方面他也无法拒绝，因为W=1，所以写一分就成功了。于是，出现了严重的版本冲突。\u003c/p\u003e\n\u003cp\u003eAmazon的Dynamo把版本冲突这个问题巧妙地回避掉了——版本冲这个事交给用户自己来处理。\u003c/p\u003e\n\u003cp\u003e于是，Dynamo引入了Vector Clock（矢量钟？!）这个设计。这个设计让每个结点各自记录自己的版本信息，也就是说，对于同一个数据，需要记录两个事：1）谁更新的我，2）我的版本号是什么。\u003c/p\u003e\n\u003cp\u003e下面，我们来看一个操作序列：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）一个写请求，第一次被节点A处理了。节点A会增加一个版本信息(A，1)。我们把这个时候的数据记做D1(A，1)。 然后另外一个对同样key的请求还是被A处理了于是有D2(A，2)。这个时候，D2是可以覆盖D1的，不会有冲突产生。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）现在我们假设D2传播到了所有节点(B和C)，B和C收到的数据不是从客户产生的，而是别人复制给他们的，所以他们不产生新的版本信息，所以现在B和C所持有的数据还是D2(A，2)。于是A，B，C上的数据及其版本号都是一样的。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e3）如果我们有一个新的写请求到了B结点上，于是B结点生成数据D3(A,2; B,1)，意思是：数据D全局版本号为3，A升了两新，B升了一次。这不就是所谓的代码版本的log么？\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e4）如果D3没有传播到C的时候又一个请求被C处理了，于是，以C结点上的数据是D4(A,2; C,1)。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e5）好，最精彩的事情来了：如果这个时候来了一个读请求，我们要记得，我们的W=1 那么R=N=3，所以R会从所有三个节点上读，此时，他会读到三个版本：\u003c/p\u003e\n\u003cul\u003e\n\u003cul\u003e\n\u003cli\u003eA结点：D2(A,2)\u003c/li\u003e\n\u003cli\u003eB结点：D3(A,2;  B,1);\u003c/li\u003e\n\u003cli\u003eC结点：D4(A,2;  C,1)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/ul\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e6）这个时候可以判断出，D2已经是旧版本（已经包含在D3/D4中），可以舍弃。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e7）但是D3和D4是明显的版本冲突。于是，交给调用方自己去做版本冲突处理。就像源代码版本管理一样。\u003c/p\u003e\n\u003cp\u003e很明显，上述的Dynamo的配置用的是CAP里的A和P。\u003c/p\u003e\n\u003cp\u003e我非常推大家都去看看这篇论文：《\u003ca href=\"http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf\" target=\"_blank\"\u003eDynamo：Amazon’s Highly Available Key-Value Store\u003c/a\u003e》，如果英文痛苦，你可以\u003ca href=\"http://vdisk.weibo.com/s/AKRQZMLLc1ol  \" target=\"_blank\"\u003e看看译文\u003c/a\u003e（译者不详）。\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/7490.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/06/f1-150x150.jpg\" alt=\"性能调优攻略\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/7490.html\" class=\"wp_rp_title\"\u003e性能调优攻略\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/6470.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/01/12306-150x150.png\" alt=\"由12306.cn谈谈网站性能技术 \" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/6470.html\" class=\"wp_rp_title\"\u003e由12306.cn谈谈网站性能技术 \u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/9169.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/02/Disruptor-150x150.png\" alt=\"并发框架Disruptor译文\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/9169.html\" class=\"wp_rp_title\"\u003e并发框架Disruptor译文\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/6790.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/03/o_conditional_update_1-150x150.png\" alt=\"多版本并发控制(MVCC)在分布式系统中的应用\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/6790.html\" class=\"wp_rp_title\"\u003e多版本并发控制(MVCC)在分布式系统中的应用\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8239.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/09/lock_free_bicycle-150x150.jpg\" alt=\"无锁队列的实现\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8239.html\" class=\"wp_rp_title\"\u003e无锁队列的实现\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/7236.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/05/Bannière-Unix-linux-150x150.jpg\" alt=\"用Unix的设计思想来应对多变的需求\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/7236.html\" class=\"wp_rp_title\"\u003e用Unix的设计思想来应对多变的需求\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-10910\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"22f22df370\"\u003e\u003cimg id=\"rating_10910_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10910, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8d37ec691ab581ebf737322b-=\"\"/\u003e\u003cimg id=\"rating_10910_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10910, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8d37ec691ab581ebf737322b-=\"\"/\u003e\u003cimg id=\"rating_10910_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10910, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8d37ec691ab581ebf737322b-=\"\"/\u003e\u003cimg id=\"rating_10910_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10910, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8d37ec691ab581ebf737322b-=\"\"/\u003e\u003cimg id=\"rating_10910_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10910, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8d37ec691ab581ebf737322b-=\"\"/\u003e (\u003cstrong\u003e119\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.58\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_10910_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"分布式系统的事务处理\"/\u003e\u003cmeta itemprop=\"headline\" content=\"分布式系统的事务处理\"/\u003e\u003cmeta itemprop=\"description\" content=\"当我们在生产线上用一台服务器来提供数据服务的时候，我会遇到如下的两个问题：\n1）一台服务器的性能不足以提供足够的能力服务于所有的网络请求。\n2）我们总是害怕我们的这台服务器停机，造成服务不可用或是数据丢失。\n于是我们不得不对我们的服务器进行扩展，加入更多的机器来分担性能上的问题，以及来解决单点故障问题。 通常，我们会通过两种手段来扩展我们的数据服务：\n1）数据分区：就是把数据分块放在不同的...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2014-01-20T11:08:16+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2014-01-23T17:55:28+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/10910.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/10910.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.58\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"119\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-10910-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2014-01-20T11:08:16+08:00",
  "Author": "陈皓"
}