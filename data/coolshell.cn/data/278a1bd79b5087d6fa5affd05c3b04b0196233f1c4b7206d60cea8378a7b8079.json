{
  "Source": "coolshell.cn",
  "Title": "Go 编程模式：Functional Options",
  "Link": "https://coolshell.cn/articles/21146.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"ed33671d25ae23157086c3e8-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright size-medium wp-image-21241\" src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.options-300x186.png\" alt=\"\" width=\"300\" height=\"186\" srcset=\"https://coolshell.cn/wp-content/uploads/2020/12/go.options-300x186.png 300w, https://coolshell.cn/wp-content/uploads/2020/12/go.options-768x476.png 768w, https://coolshell.cn/wp-content/uploads/2020/12/go.options-436x270.png 436w, https://coolshell.cn/wp-content/uploads/2020/12/go.options.png 1015w\" sizes=\"(max-width: 300px) 100vw, 300px\"/\u003e在本篇文章中，我们来讨论一下Functional Options这个编程模式。这是一个函数式编程的应用案例，编程技巧也很好，是目前在Go语言中最流行的一种编程模式。但是，在我们正式讨论这个模式之前，我们需要先来看看要解决什么样的问题。\u003c/p\u003e\n\u003csection class=\"post-series\"\u003e\u003ch3 class=\"post-series-title\"\u003e本文是全系列中第3 / 10篇：\u003ca href=\"https://coolshell.cn/articles/series/go%e7%bc%96%e7%a8%8b%e6%a8%a1%e5%bc%8f\"\u003eGo编程模式\u003c/a\u003e\u003c/h3\u003e\u003cul class=\"post-series-list\"\u003e\u003cli class=\"post-series-item\"\u003e\u003cspan class=\"post-series-item-title\"\u003e\u003ca href=\"https://coolshell.cn/articles/21128.html\"\u003eGo编程模式：切片，接口，时间和性能\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e\u003cli class=\"post-series-item\"\u003e\u003cspan class=\"post-series-item-title\"\u003e\u003ca href=\"https://coolshell.cn/articles/21140.html\"\u003eGo 编程模式：错误处理\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e\u003cli class=\"post-series-item-current post-series-item\"\u003e\u003cspan class=\"post-series-item-title\"\u003eGo 编程模式：Functional Options\u003c/span\u003e\u003c/li\u003e\u003cli class=\"post-series-item\"\u003e\u003cspan class=\"post-series-item-title\"\u003e\u003ca href=\"https://coolshell.cn/articles/21214.html\"\u003eGo编程模式：委托和反转控制\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e\u003cli class=\"post-series-item\"\u003e\u003cspan class=\"post-series-item-title\"\u003e\u003ca href=\"https://coolshell.cn/articles/21164.html\"\u003eGo编程模式：Map-Reduce\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e\u003cli class=\"post-series-item\"\u003e\u003cspan class=\"post-series-item-title\"\u003e\u003ca href=\"https://coolshell.cn/articles/21179.html\"\u003eGo 编程模式：Go Generation\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e\u003cli class=\"post-series-item\"\u003e\u003cspan class=\"post-series-item-title\"\u003e\u003ca href=\"https://coolshell.cn/articles/17929.html\"\u003eGo编程模式：修饰器\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e\u003cli class=\"post-series-item\"\u003e\u003cspan class=\"post-series-item-title\"\u003e\u003ca href=\"https://coolshell.cn/articles/21228.html\"\u003eGo编程模式：Pipeline\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e\u003cli class=\"post-series-item\"\u003e\u003cspan class=\"post-series-item-title\"\u003e\u003ca href=\"https://coolshell.cn/articles/21263.html\"\u003eGo 编程模式：k8s Visitor 模式\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e\u003cli class=\"post-series-item\"\u003e\u003cspan class=\"post-series-item-title\"\u003e\u003ca href=\"https://coolshell.cn/articles/21615.html\"\u003eGo编程模式 ： 泛型编程\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e\u003c/ul\u003e\u003cnav class=\"post-series-nav\"\u003e\u003cspan class=\"post-series-nav-prev\"\u003e« \u003ca href=\"https://coolshell.cn/articles/21140.html\" rel=\"prev\" title=\"Go 编程模式：错误处理\"\u003e上一篇文章\u003c/a\u003e\u003c/span\u003e\u003cspan class=\"post-series-nav-next\"\u003e\u003ca href=\"https://coolshell.cn/articles/21214.html\" rel=\"next\" title=\"Go编程模式：委托和反转控制\"\u003e下一篇文章\u003c/a\u003e »\u003c/span\u003e\u003c/nav\u003e\u003c/section\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9%E9%97%AE%E9%A2%98\" title=\"配置选项问题\"\u003e配置选项问题\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E9%85%8D%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%A1%88\" title=\"配置对象方案\"\u003e配置对象方案\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#Builder%E6%A8%A1%E5%BC%8F\" title=\"Builder模式\"\u003eBuilder模式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#Functional_Options\" title=\"Functional Options\"\u003eFunctional Options\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3\" title=\"参考文档\"\u003e参考文档\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9%E9%97%AE%E9%A2%98\"\u003e\u003c/span\u003e配置选项问题\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e在我们编程中，我们会经常性的需要对一个对象（或是业务实体）进行相关的配置。比如下面这个业务实体（注意，这仅只是一个示例）：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\"\u003etype Server struct {\n    Addr     string\n    Port     int\n    Protocol string\n    Timeout  time.Duration\n    MaxConns int\n    TLS      *tls.Config\n}\u003c/pre\u003e\n\u003cp\u003e在这个 \u003ccode\u003eServer\u003c/code\u003e 对象中，我们可以看到：\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-21146\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e要有侦听的IP地址 \u003ccode\u003eAddr\u003c/code\u003e 和端口号 \u003ccode\u003ePort\u003c/code\u003e ，这两个配置选项是必填的（当然，IP地址和端口号都可以有默认值，当这里我们用于举例认为是没有默认值，而且不能为空，需要必填的）。\u003c/li\u003e\n\u003cli\u003e然后，还有协议 \u003ccode\u003eProtocol\u003c/code\u003e 、 \u003ccode\u003eTimeout\u003c/code\u003e 和\u003ccode\u003eMaxConns\u003c/code\u003e 字段，这几个字段是不能为空的，但是有默认值的，比如：协议是\u003ccode\u003etcp\u003c/code\u003e, 超时\u003ccode\u003e30\u003c/code\u003e秒 和 最大链接数\u003ccode\u003e1024\u003c/code\u003e个。\u003c/li\u003e\n\u003cli\u003e还有一个 \u003ccode\u003eTLS\u003c/code\u003e 这个是安全链接，需要配置相关的证书和私钥。这个是可以为空的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以，针对于上述这样的配置，我们需要有多种不同的创建不同配置 \u003ccode\u003eServer\u003c/code\u003e 的函数签名，如下所示（代码比较宽，需要左右滚动浏览）：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\"\u003efunc NewDefaultServer(addr string, port int) (*Server, error) {\n  return \u0026amp;Server{addr, port, \u0026#34;tcp\u0026#34;, 30 * time.Second, 100, nil}, nil\n}\n\nfunc NewTLSServer(addr string, port int, tls *tls.Config) (*Server, error) {\n  return \u0026amp;Server{addr, port, \u0026#34;tcp\u0026#34;, 30 * time.Second, 100, tls}, nil\n}\n\nfunc NewServerWithTimeout(addr string, port int, timeout time.Duration) (*Server, error) {\n  return \u0026amp;Server{addr, port, \u0026#34;tcp\u0026#34;, timeout, 100, nil}, nil\n}\n\nfunc NewTLSServerWithMaxConnAndTimeout(addr string, port int, maxconns int, timeout time.Duration, tls *tls.Config) (*Server, error) {\n  return \u0026amp;Server{addr, port, \u0026#34;tcp\u0026#34;, 30 * time.Second, maxconns, tls}, nil\n}\u003c/pre\u003e\n\u003cp\u003e因为Go语言不支持重载函数，所以，你得用不同的函数名来应对不同的配置选项。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%85%8D%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%A1%88\"\u003e\u003c/span\u003e配置对象方案\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e要解决这个问题，最常见的方式是使用一个配置对象，如下所示：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\"\u003etype Config struct {\n    Protocol string\n    Timeout  time.Duration\n    Maxconns int\n    TLS      *tls.Config\n}\u003c/pre\u003e\n\u003cp\u003e我们把那些非必输的选项都移到一个结构体里，于是 \u003ccode\u003eServer\u003c/code\u003e 对象变成了：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\"\u003etype Server struct {\n    Addr string\n    Port int\n    Conf *Config\n}\u003c/pre\u003e\n\u003cp\u003e于是，我们只需要一个 \u003ccode\u003eNewServer()\u003c/code\u003e 的函数了，在使用前需要构造 \u003ccode\u003eConfig\u003c/code\u003e 对象。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\"\u003efunc NewServer(addr string, port int, conf *Config) (*Server, error) {\n    //...\n}\n\n//Using the default configuratrion\nsrv1, _ := NewServer(\u0026#34;localhost\u0026#34;, 9000, nil) \n\nconf := ServerConfig{Protocol:\u0026#34;tcp\u0026#34;, Timeout: 60*time.Duration}\nsrv2, _ := NewServer(\u0026#34;locahost\u0026#34;, 9000, \u0026amp;conf)\u003c/pre\u003e\n\u003cp\u003e这段代码算是不错了，大多数情况下，我们可能就止步于此了。但是，对于有洁癖的有追求的程序员来说，他们能看到其中有一点不好的是，\u003ccode\u003eConfig\u003c/code\u003e 并不是必需的，所以，你需要判断是否是 \u003ccode\u003enil\u003c/code\u003e 或是 Empty – \u003ccode\u003e Config{}\u003c/code\u003e这让我们的代码感觉还是有点不是很干净。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Builder%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003eBuilder模式\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e如果你是一个Java程序员，熟悉设计模式的一定会很自然地使用上Builder模式。比如如下的代码：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\"\u003eUser user = new User.Builder()\n  .name(\u0026#34;Hao Chen\u0026#34;)\n  .email(\u0026#34;\u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"4f272e202a230f27203b222e2623612c2022\"\u003e[email protected]\u003c/a\u003e\u0026#34;)\n  .nickname(\u0026#34;左耳朵\u0026#34;)\n  .build();\u003c/pre\u003e\n\u003cp\u003e仿照上面这个模式，我们可以把上面代码改写成如下的代码（注：下面的代码没有考虑出错处理，其中关于出错处理的更多内容，请参看《\u003ca title=\"GO 编程模式：错误处理\" href=\"https://coolshell.cn/articles/21140.html\" target=\"_blank\" rel=\"noopener\"\u003eGo 编程模式：出错处理\u003c/a\u003e》）：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\"\u003e//使用一个builder类来做包装\ntype ServerBuilder struct {\n  Server\n}\n\nfunc (sb *ServerBuilder) Create(addr string, port int) *ServerBuilder {\n  sb.Server.Addr = addr\n  sb.Server.Port = port\n  //其它代码设置其它成员的默认值\n  return sb\n}\n\nfunc (sb *ServerBuilder) WithProtocol(protocol string) *ServerBuilder {\n  sb.Server.Protocol = protocol \n  return sb\n}\n\nfunc (sb *ServerBuilder) WithMaxConn( maxconn int) *ServerBuilder {\n  sb.Server.MaxConns = maxconn\n  return sb\n}\n\nfunc (sb *ServerBuilder) WithTimeOut( timeout time.Duration) *ServerBuilder {\n  sb.Server.Timeout = timeout\n  return sb\n}\n\nfunc (sb *ServerBuilder) WithTLS( tls *tls.Config) *ServerBuilder {\n  sb.Server.TLS = tls\n  return sb\n}\n\nfunc (sb *ServerBuilder) Build() (Server) {\n  return  sb.Server\n}\n\u003c/pre\u003e\n\u003cp\u003e于是就可以以如下的方式来使用了\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\"\u003esb := ServerBuilder{}\nserver, err := sb.Create(\u0026#34;127.0.0.1\u0026#34;, 8080).\n  WithProtocol(\u0026#34;udp\u0026#34;).\n  WithMaxConn(1024).\n  WithTimeOut(30*time.Second).\n  Build()\u003c/pre\u003e\n\u003cp\u003e上面这样的方式也很清楚，不需要额外的Config类，使用链式的函数调用的方式来构造一个对象，只需要多加一个Builder类，这个Builder类似乎有点多余，我们似乎可以直接在\u003ccode\u003eServer\u003c/code\u003e 上进行这样的 Builder 构造，的确是这样的。但是在处理错误的时候可能就有点麻烦（需要为Server结构增加一个error 成员，破坏了Server结构体的“纯洁”），不如一个包装类更好一些。\u003c/p\u003e\n\u003cp\u003e如果我们想省掉这个包装的结构体，那么就轮到我们的Functional Options上场了，函数式编程。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Functional_Options\"\u003e\u003c/span\u003eFunctional Options\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e首先，我们先定义一个函数类型：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\"\u003etype Option func(*Server)\u003c/pre\u003e\n\u003cp\u003e然后，我们可以使用函数式的方式定义一组如下的函数：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\"\u003efunc Protocol(p string) Option {\n    return func(s *Server) {\n        s.Protocol = p\n    }\n}\nfunc Timeout(timeout time.Duration) Option {\n    return func(s *Server) {\n        s.Timeout = timeout\n    }\n}\nfunc MaxConns(maxconns int) Option {\n    return func(s *Server) {\n        s.MaxConns = maxconns\n    }\n}\nfunc TLS(tls *tls.Config) Option {\n    return func(s *Server) {\n        s.TLS = tls\n    }\n}\u003c/pre\u003e\n\u003cp\u003e上面这组代码传入一个参数，然后返回一个函数，返回的这个函数会设置自己的 \u003ccode\u003eServer\u003c/code\u003e 参数。例如：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e当我们调用其中的一个函数用 \u003ccode\u003eMaxConns(30)\u003c/code\u003e 时\u003c/li\u003e\n\u003cli\u003e其返回值是一个 \u003ccode\u003efunc(s* Server) { s.MaxConns = 30 }\u003c/code\u003e 的函数。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这个叫高阶函数。在数学上，就好像这样的数学定义，计算长方形面积的公式为： \u003ccode\u003erect(width, height) = width * height;\u003c/code\u003e 这个函数需要两个参数，我们包装一下，就可以变成计算正方形面积的公式：\u003ccode\u003esquare(width) = rect(width, width)\u003c/code\u003e 也就是说，\u003ccode\u003esqure(width)\u003c/code\u003e返回了另外一个函数，这个函数就是\u003ccode\u003erect(w,h)\u003c/code\u003e 只不过他的两个参数是一样的。即：\u003ccode\u003ef(x)  = g(x, x)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e好了，现在我们再定一个 \u003ccode\u003eNewServer()\u003c/code\u003e的函数，其中，有一个可变参数 \u003ccode\u003eoptions\u003c/code\u003e 其可以传出多个上面上的函数，然后使用一个for-loop来设置我们的 \u003ccode\u003eServer\u003c/code\u003e 对象。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\"\u003efunc NewServer(addr string, port int, options ...func(*Server)) (*Server, error) {\n\n  srv := Server{\n    Addr:     addr,\n    Port:     port,\n    Protocol: \u0026#34;tcp\u0026#34;,\n    Timeout:  30 * time.Second,\n    MaxConns: 1000,\n    TLS:      nil,\n  }\n  for _, option := range options {\n    option(\u0026amp;srv)\n  }\n  //...\n  return \u0026amp;srv, nil\n}\u003c/pre\u003e\n\u003cp\u003e于是，我们在创建 \u003ccode\u003eServer\u003c/code\u003e 对象的时候，我们就可以这样来了。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\"\u003es1, _ := NewServer(\u0026#34;localhost\u0026#34;, 1024)\ns2, _ := NewServer(\u0026#34;localhost\u0026#34;, 2048, Protocol(\u0026#34;udp\u0026#34;))\ns3, _ := NewServer(\u0026#34;0.0.0.0\u0026#34;, 8080, Timeout(300*time.Second), MaxConns(1000))\u003c/pre\u003e\n\u003cp\u003e怎么样，是不是高度的整洁和优雅？不但解决了使用 \u003ccode\u003eConfig\u003c/code\u003e 对象方式 的需要有一个config参数，但在不需要的时候，是放 \u003ccode\u003enil\u003c/code\u003e 还是放 \u003ccode\u003eConfig{}\u003c/code\u003e的选择困难，也不需要引用一个Builder的控制对象，直接使用函数式编程的试，在代码阅读上也很优雅。\u003c/p\u003e\n\u003cp\u003e所以，以后，大家在要玩类似的代码时，强烈推荐使用Functional Options这种方式，这种方式至少带来了如下的好处：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e直觉式的编程\u003c/li\u003e\n\u003cli\u003e高度的可配置化\u003c/li\u003e\n\u003cli\u003e很容易维护和扩展\u003c/li\u003e\n\u003cli\u003e自文档\u003c/li\u003e\n\u003cli\u003e对于新来的人很容易上手\u003c/li\u003e\n\u003cli\u003e没有什么令人困惑的事（是nil 还是空）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3\"\u003e\u003c/span\u003e参考文档\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cb\u003e“Self referential functions and design” by Rob Pike\u003cbr/\u003e\n\u003c/b\u003e\u003ca href=\"http://commandcenter.blogspot.com.au/2014/01/self-referential-functions-and-design.html\"\u003ehttp://commandcenter.blogspot.com.au/2014/01/self-referential-functions-and-design.html\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e(全文完)\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21164.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.map_.reduce-150x150.png\" alt=\"Go编程模式：Map-Reduce\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21164.html\" class=\"wp_rp_title\"\u003eGo编程模式：Map-Reduce\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17929.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/06/go-hardhat-150x150.png\" alt=\"Go编程模式：修饰器\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17929.html\" class=\"wp_rp_title\"\u003eGo编程模式：修饰器\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21615.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2021/09/go-generics-150x150.png\" alt=\"Go编程模式 ： 泛型编程\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21615.html\" class=\"wp_rp_title\"\u003eGo编程模式 ： 泛型编程\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21263.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.k8s-150x150.png\" alt=\"Go 编程模式：k8s Visitor 模式\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21263.html\" class=\"wp_rp_title\"\u003eGo 编程模式：k8s Visitor 模式\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21228.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.line_.-150x150.png\" alt=\"Go编程模式：Pipeline\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21228.html\" class=\"wp_rp_title\"\u003eGo编程模式：Pipeline\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21214.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.pair_-150x150.png\" alt=\"Go编程模式：委托和反转控制\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21214.html\" class=\"wp_rp_title\"\u003eGo编程模式：委托和反转控制\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-21146\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"abc618415b\"\u003e\u003cimg id=\"rating_21146_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(21146, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-ed33671d25ae23157086c3e8-=\"\"/\u003e\u003cimg id=\"rating_21146_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(21146, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-ed33671d25ae23157086c3e8-=\"\"/\u003e\u003cimg id=\"rating_21146_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(21146, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-ed33671d25ae23157086c3e8-=\"\"/\u003e\u003cimg id=\"rating_21146_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(21146, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-ed33671d25ae23157086c3e8-=\"\"/\u003e\u003cimg id=\"rating_21146_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(21146, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-ed33671d25ae23157086c3e8-=\"\"/\u003e (\u003cstrong\u003e54\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.28\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_21146_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"Go 编程模式：Functional Options\"/\u003e\u003cmeta itemprop=\"headline\" content=\"Go 编程模式：Functional Options\"/\u003e\u003cmeta itemprop=\"description\" content=\"在本篇文章中，我们来讨论一下Functional Options这个编程模式。这是一个函数式编程的应用案例，编程技巧也很好，是目前在Go语言中最流行的一种编程模式。但是，在我们正式讨论这个模式之前，我们需要先来看看要解决什么样的问题。\n\n\n\n配置选项问题\n\n在我们编程中，我们会经常性的需要对一个对象（或是业务实体）进行相关的配置。比如下面这个业务实体（注意，这仅只是一个示例）：\n\ntype Ser...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2020-12-22T23:23:52+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2020-12-28T23:18:30+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/21146.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/21146.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.28\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"54\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-21146-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2020-12-22T23:23:52+08:00",
  "Author": "陈皓"
}