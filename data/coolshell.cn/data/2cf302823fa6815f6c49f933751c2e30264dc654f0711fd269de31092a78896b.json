{
  "Source": "coolshell.cn",
  "Title": "State Threads 回调终结者",
  "Link": "https://coolshell.cn/articles/12012.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"ff346d843283c09c0663271a-text/javascript\"\u003e\u003c/script\u003e\u003cstrong\u003e（感谢网友 \u003c/strong\u003e\u003ca href=\"http://weibo.com/fullofbull\" target=\"_blank\"\u003e\u003cstrong\u003e@我的上铺叫路遥\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e 投稿）\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e上回写了篇\u003ca title=\"一个“蝇量级” C 语言协程库\" href=\"https://coolshell.cn/articles/10975.html\" target=\"_blank\"\u003e《一个“蝇量级”C语言协程库》\u003c/a\u003e，推荐了一下\u003ca title=\"Protothreads\" href=\"http://dunkels.com/adam/pt/\" target=\"_blank\"\u003eProtothreads\u003c/a\u003e，通过coroutine模拟了用户级别的multi-threading模型，虽然本身足够“轻”，杜绝了系统开销，但这个库本身应用场合主要是内存限制的嵌入式领域，提供原生态组件太少，使用限制太多，比如依赖其它调用产生阻塞等。\u003c/p\u003e\n\u003cp\u003e这回又替大家在开源界淘了个宝，推荐一个轻量级网络应用框架\u003cstrong\u003eState Threads\u003c/strong\u003e（以下简称ST），总共也就3000行C代码，跟Protothreads不同在于ST针对的就是\u003cstrong\u003e高性能可扩展服务器\u003c/strong\u003e领域（值得一提的是Protothreads官网\u003ca title=\"参考链接\" href=\"http://dunkels.com/adam/pt/links.html\" target=\"_blank\"\u003e参考链接\u003c/a\u003e上第一条就是ST的官网）。在其\u003ca title=\"FAQ\" href=\"http://state-threads.sourceforge.net/docs/faq.html\" target=\"_blank\"\u003eFAQ\u003c/a\u003e页面上一句引用”Perfection is achieved not when there is nothing more to add, but rather when there is nothing more to take away.”可以视为开发人员对ST源码质量的自信。\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E5%8E%86%E5%8F%B2%E6%B8%8A%E6%BA%90\" title=\"历史渊源\"\u003e历史渊源\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E5%9F%BA%E4%BA%8E%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E7%8A%B6%E6%80%81%E6%9C%BA%EF%BC%88EDSM%EF%BC%89\" title=\"基于事件驱动状态机（EDSM）\"\u003e基于事件驱动状态机（EDSM）\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E5%9F%BA%E4%BA%8EMult-Threading%E8%8C%83%E5%BC%8F\" title=\"基于Mult-Threading范式\"\u003e基于Mult-Threading范式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E5%9F%BA%E4%BA%8E%E5%A4%9A%E6%A0%B8%E7%8E%AF%E5%A2%83\" title=\"基于多核环境\"\u003e基于多核环境\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E4%BD%BF%E7%94%A8%E9%99%90%E5%88%B6\" title=\"使用限制\"\u003e使用限制\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#%E6%80%BB%E7%BB%93\" title=\"总结\"\u003e总结\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#%E5%8F%82%E8%80%83\" title=\"参考\"\u003e参考\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%8E%86%E5%8F%B2%E6%B8%8A%E6%BA%90\"\u003e\u003c/span\u003e历史渊源\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e首先介绍一下这个库的历史渊源，从代码贡献者来看，ST不是个人作品，而是有着雄厚的商业支持和应用背景，比如服务器领域，在\u003ca href=\"http://state-threads.sourceforge.net/news.html\" target=\"_blank\"\u003e这里\u003c/a\u003e你可以看到ST曾作为Apache的多核应用模块发布。其诞生最初是由网景（Netscape）公司的MSPR（Netscape Portable Runtime library）项目中剥离出来，后由SGI（Silicon Graphic Inc）还有Yahoo!公司（前者是主力）开发维护的独立线程库。历史版本方面，作为\u003ca title=\"SourceForge\" href=\"http://sourceforge.net/projects/state-threads/files/\" target=\"_blank\"\u003eSourceForge\u003c/a\u003e上开源项目，由2001年发布v1.0以来一直到2009年v1.9稳定版后未再变动。在平台移植方面，从Makefile的配置选项中可知ST支持多种Unix-like平台，还有专门针对Win32的源码改写。源码例子中，提供了web server、proxy以及dns三种编程实例供参考。可以说代码质量应该是相当的稳定和可靠的。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-12012\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e至于许可证方面，有必要略作说明。出于历史原因，网景最初发布时选择了MPL1.1许可证，而后SGI在维护中又混进了GPLv2许可证，照理说这两种许可证是互不兼容的（MPL1.1后续版本是GPL兼容的），也就是说用双许可证打包发布理论上是非法无效的，见GNU官网上\u003ca title=\"GPL兼容\" href=\"http://www.gnu.org/licenses/license-list.html#MPL\" target=\"_blank\"\u003eMPL兼容性\u003c/a\u003e一节。但这里有值得商榷的地方，因为文中又提及，根据MPL1.1中某条款第13节，如果整段或部分代码允许采用另一许可证作为备用（alternate）选择，比如GPL及其兼容，那么整个库的许可证就可视为GPL兼容的。如此一来所谓GPL兼容性一般解释为你不能在GPLv2的代码中混入MPL1.1，而不是说你不能在MPL1.1代码中混入GPLv2，也就是说GPLv2在MPL1.1之后是可以接受的，事实上SGI就采用了后面的做法，尚未引起版权上的纠纷。为此我还考证了一下FAQ上\u003ca title=\"license\" href=\"http://state-threads.sourceforge.net/docs/faq.html\" target=\"_blank\"\u003elicense\u003c/a\u003e一节的说法，说ST既可以在MPL和GPL之间选择一种，也可以继续用双许可证，还补了一句在non-free项目使用上也没有限制，但对ST源码所做改动必须对用户可见。在源码文件中的SGI的附加声明还解释了将ST转为GPL代码的做法，就是可以删除前面MPL的声明，否则后续用户仍可以在两者之间二选一。个人觉得既然SGI都这样发话了，那么可解释为反之删除GPL的声明继续采用MPL也是可以接受的，如果你对双许可证承诺仍不放心的话。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%9F%BA%E4%BA%8E%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E7%8A%B6%E6%80%81%E6%9C%BA%EF%BC%88EDSM%EF%BC%89\"\u003e\u003c/span\u003e基于事件驱动状态机（EDSM）\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e好了，下面该进入技术性话题了。前面说了ST的目标是\u003cstrong\u003e高性能可扩展\u003c/strong\u003e，其技术特征一言以蔽之就是\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003e“It combines the simplicity of the multi-threaded programming paradigm, in which one thread supports each simultaneous connection, with the performance and scalability of an event-driven state machine (EDSM) architecture.”\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e我们先来纵向比较ST与传统的EDSM区别，再来横向比较与其它线程库（比如Pthread）的区别（注：以下图片全部来自\u003ca title=\"ST FAQ\" href=\"http://state-threads.sourceforge.net/docs/faq.html\" target=\"_blank\"\u003eState Threads Library FAQ\u003c/a\u003e）。\u003c/p\u003e\n\u003cp\u003e传统EDSM最常见的方式就是I/O事件的\u003cstrong\u003e异步回调\u003c/strong\u003e。基本上都会有一个叫做dispatcher的单线程主循环（又叫event loop），用户通过向dispatcher注册回调函数（又叫event handler）来实现异步通知，从而不必在原地空耗资源干等，在dispatcher主循环中通过select()/poll()系统调用来等待各种I/O事件的发生，当内核检测到事件触发并且数据可达或可用时，select()/poll()会返回从而使dispatcher调用相应的回调函数来对处理用户的请求。所以异步回调与其说是通知，不如说用委托更恰当。\u003c/p\u003e\n\u003cp\u003e整个过程都是单线程的。\u003cstrong\u003e这种处理本质上就是将一堆互不相交（disjoint）的回调实现同步控制，就像串联在一个顺序链表上。\u003c/strong\u003e见图1，黑色的双箭头表示I/O事件复用，回调是个筐，里面装着对各种请求的处理（当然不是每个请求都有回调，一个请求也可以对应不同的回调），每个回调被串联起来由dispatcher激活。这里请求等价于thread的概念（不是操作系统的线程），只不过“上下文切换”（context switch）发生在每个回调结束之时（假设不同请求对应不同回调），注册下一个回调以待事件触发时恢复其它请求的处理。至于dispatcher的执行状态（execute state）可作为回调函数的参数保存和传递。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" class=\"aligncenter\" src=\"https://coolshell.cn/wp-content/uploads/2014/10/edsm.gif\" alt=\"EDSM\"/\u003e\u003c/p\u003e\n\u003cp\u003e异步回调的缺陷在于\u003cstrong\u003e难以实现和扩展\u003c/strong\u003e，虽然已经有libevent这样的通用库，以及其它actor/reacotor的设计模式及其框架，但正如Dean Gaudet（Apache开发者）所说：“其内在的复杂性——\u003cstrong\u003e将线性思维分解成一堆回调的负担\u003c/strong\u003e（breaking up linear thought into a bucketload of callbacks）——仍然存在”。从上图可见，\u003cstrong\u003e回调之间请求例程不是连续的，比如回调之间的切换会打断部分请求，又比如有新的请求需要重新注册。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eST本质上仍然是基于EDSM模型，但旨在取代传统的异步回调方式。\u003c/strong\u003eST将请求抽象为thread概念以更接近自然编程模式（所谓的linear thought吧，就像操作系统的线程之间切换那样自然）。ST的调度器（scheduler）对于用户来说是透明的，不像dispatcher那种将执行状态（execute state）暴露给回调方式。每个thread的现场环境可以保存在栈上（一段连续的大小确定的内存空间），由C的运行环境管理。从图2看到，\u003cstrong\u003eST的threads可以并发地线性地处理I/O事件，模型比异步回调简单得多。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" class=\"aligncenter\" src=\"https://coolshell.cn/wp-content/uploads/2014/10/st_edsm.gif\" alt=\"State Threads\"/\u003e\u003c/p\u003e\n\u003cp\u003e这里稍微解释一下ST调度工作原理，ST运行环境维护了四种队列，分别是IOQ、RUNQ、SLEEPQ以及ZOMBIEQ，\u003cstrong\u003e当每个thread处于不同队列中对应不同的状态（ST顾名思义所谓thread状态机）。\u003c/strong\u003e比如polling请求的时候，当前thread就加入IOQ表示等待事件（如果有timeout同时会被放到SLEEPQ中），当事件触发时，thread就从IOQ（如果有timeout同时会从SLEEPQ）移除并转移到RUNQ等待被调度，成为当前的running thread，相当于操作系统的就绪队列，跟传统EDSM对应起来就是注册回调以及激活回调。再比如模拟同步控制wait/sleep/lock的时候，当前thread会被放入SLEEPQ，直到被唤醒或者超时再次进入RUNQ以待调度。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eST的调度具备性能与内存双重优点\u003c/strong\u003e：在性能上，ST实现自己的setjmp/longjmp来模拟调度，无任何系统开销，并且context（就是jmp_buf）针对不同平台和架构用底层语言实现的，可移植性媲美libc。下面放一段代码解释一下调度实现：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e/*\n * Switch away from the current thread context by saving its state \n * and calling the thread scheduler\n */\n#define _ST_SWITCH_CONTEXT(_thread)       \\\n    ST_BEGIN_MACRO                        \\\n    if (!MD_SETJMP((_thread)-\u0026gt;context)) { \\\n      _st_vp_schedule();                  \\\n    }                                     \\\n    ST_END_MACRO\n\n/*\n * Restore a thread context that was saved by _ST_SWITCH_CONTEXT \n * or initialized by _ST_INIT_CONTEXT\n */\n#define _ST_RESTORE_CONTEXT(_thread)   \\\n    ST_BEGIN_MACRO                     \\\n    _ST_SET_CURRENT_THREAD(_thread);   \\\n    MD_LONGJMP((_thread)-\u0026gt;context, 1); \\\n    ST_END_MACRO\n\nvoid _st_vp_schedule(void)\n{\n    _st_thread_t *thread;\n\n    if (_ST_RUNQ.next != \u0026amp;_ST_RUNQ) {\n        /* Pull thread off of the run queue */\n        thread = _ST_THREAD_PTR(_ST_RUNQ.next);\n        _ST_DEL_RUNQ(thread);\n    } else {\n        /* If there are no threads to run, switch to the idle thread */\n        thread = _st_this_vp.idle_thread;\n    }\n    ST_ASSERT(thread-\u0026gt;state == _ST_ST_RUNNABLE);\n\n    /* Resume the thread */\n    thread-\u0026gt;state = _ST_ST_RUNNING;\n    _ST_RESTORE_CONTEXT(thread);\n}\n\u003c/pre\u003e\n\u003cp\u003e如果你熟悉setjmp/longjmp的用法，你就知道当前thread在调用MD_SETJMP将现场上下文保存在jmp_buf中并返回返回0，然后自己调用_st_vp_schedule()将自己调度出去。调度器先从RUNQ上找，如果队列为空就找idle thread，这是在整个ST初始化时创建的一个特殊thread，然后将当前线程设为自己，再调用MD_LONGJMP切换到其上次调用MD_SETJMP的地方，从thread-\u0026gt;context恢复现场并返回1，该thread就接着往下执行了。\u003cstrong\u003e整个过程就同EDSM一样发生在操作系统单线程下，所以没有任何系统开销与阻塞。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e其实真正的阻塞是发生在等待I/O事件复用上，也就是select()/poll()，这是整个ST唯一的系统调用。\u003c/strong\u003eST当前的状态是，整个环境处于空闲状态，所有threads的请求处理都已经完成，也就是RUNQ为空。这时在_st_idle_thread_start维护了一个主循环（类似于event loop），主要负责三种任务：1.对IOQ所有thread进行I/O复用检测；2.对SLEEPQ进行超时检查；3.将idle thread调度出去，代码如下：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003evoid *_st_idle_thread_start(void *arg)\n{\n    _st_thread_t *me = _ST_CURRENT_THREAD();\n\n    while (_st_active_count \u0026gt; 0) {\n        /* Idle vp till I/O is ready or the smallest timeout expired */\n        _ST_VP_IDLE();\n\n        /* Check sleep queue for expired threads */\n        _st_vp_check_clock();\n\n        me-\u0026gt;state = _ST_ST_RUNNABLE;\n        _ST_SWITCH_CONTEXT(me);\n    }\n\n    /* No more threads */\n    exit(0);\n\n    /* NOTREACHED */\n    return NULL;\n}\u003c/pre\u003e\n\u003cp\u003e这里的me就是idle thread，因为_st_idle_thread_start就是创建idle thread的启动点，每从上次_ST_SWITCH_CONTEXT()切换回来的时候，接着在_ST_VP_IDLE()里轮询I/O事件的发生，一旦检测到发生了别的thread事件或者SLEEPQ里面发生超时，再用_ST_SWITCH_CONTEXT()把自己切换出去，如果此时RUNQ中非空的话就切换到队列第一个thread。这里主循环是不会退出的。\u003c/p\u003e\n\u003cp\u003e在内存方面，\u003cstrong\u003eST的执行状态作为局部变量保存在栈上，而不是像回调需要动态分配，\u003c/strong\u003e用户可能分别这样使用thread模式和callback模式：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e/* thread land */\nint foo()\n{\n    int local1;\n    int local2;\n    do_some_io();\n}\n\n/* callback land */\nstruct foo_data {\n    int local1;\n    int local2;\n};\n\nvoid foo_cb(void *arg)\n{\n    struct foo_data *locals = arg;\n    ...\n}\n\nvoid foo()\n{\n    struct foo_data *locals = malloc(sizeof(struct foo_data));\n    register(foo_cb, locals);\n}\n\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%9F%BA%E4%BA%8EMult-Threading%E8%8C%83%E5%BC%8F\"\u003e\u003c/span\u003e基于Mult-Threading范式\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e同样基于multi-threading编程范式，ST同其它线程库又有和有点呢？比如Posix Thread（以下简称PThread）是个通用的线程库，它是\u003cstrong\u003e将用户级线程（thread）同内核执行对象（kernel execution entity，有些书又叫lightweight processes）做了1:1或m:n映射，\u003c/strong\u003e从而实现multi-threading模式。\u003cstrong\u003e而ST是单线程（n:1映射），它的thread实际上就是协程（coroutine）。\u003c/strong\u003e通常的网络应用上，多线程范式绕不开操作系统，但在某些特定的服务器领域，线程间的共享资源会带来额外复杂度，锁、竞态、并发、文件句柄、全局变量、管道、信号等，面对这些Pthread的灵活性会大打折扣。\u003cstrong\u003e而ST的调度是精确的，它只会在明确的I/O和同步函数调用点上发生上下文切换，这正是协程的特性，如此一来ST就不需要互斥保护了，进而也可以放心使用任何静态变量和不可重入库函数了\u003c/strong\u003e（这在同样作为协程的Protothreads里是不允许的，因为那是stack-less的，无法保存上下文），极大的简化了编程和调试同时增加了性能。\u003c/p\u003e\n\u003cp\u003e对于同样用户级线程如GNU Pth和MIT Phread比起来呢？有两点，一是ST的thread是\u003cstrong\u003e无优先级的非抢占式调度\u003c/strong\u003e，也就是说ST基于EDSM的，每个thread都是事件或数据驱动，迟早会把自己调度出去，而且调度点是明确的，并非按时间片来的，从而简化了thread管理；二是ST会\u003cstrong\u003e忽略所有信号处理\u003c/strong\u003e，在_st_io_init中会把sigact.sa_handler设为SIG_IGN，这样做是因为将thread资源最小化，避免了signal mask及其系统调用（在ucontext上是避免不了的）。但这并不意味着ST就不能处理信号，实际上ST建议将信号写入pipe的方式转化为普通I/O事件处理，示例详见\u003ca title=\"signal handling\" href=\"http://state-threads.sourceforge.net/docs/notes.html#signals\" target=\"_blank\"\u003e这里\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e这里顺便说一句，\u003cstrong\u003eC语言实现的协程据我所知只有三种方式\u003c/strong\u003e：Protothread为代表利用switch-case语义跳转，以ST为代表不依赖libc的setjmp/longjmp上下文切换，以及依赖glibc的ucontext接口（\u003ca title=\"云风的coroutine\" href=\"https://github.com/cloudwu/coroutine\" target=\"_blank\"\u003e云风的coroutine\u003c/a\u003e）。第一种最轻，但受限最大，第三种耗资源性能慢（陈皓注：glibc的ucontext接口的实现中有一个和信号有关的系统调用，所以会慢，估计在一些情况下会比pthread还慢），目前看来ST是最好使的。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%9F%BA%E4%BA%8E%E5%A4%9A%E6%A0%B8%E7%8E%AF%E5%A2%83\"\u003e\u003c/span\u003e基于多核环境\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e下面来聊聊ST在多核环境下的应用。服务器领域多核的优势在于实现了物理上真正的并发，所以如何充分利用系统优势也是线程库的一大难点。这对ST来说也许正是它的拿手好戏，前面提及ST曾作为Apache的多核引擎模块发布。这里要补充一下前面漏掉的ST的一个重要概念——\u003cstrong\u003e虚拟处理器\u003c/strong\u003e（virtual processor，简称vp），见图3，多个cpu通过内核的SMP模拟出多个“核”（core），一个core对应一个内核任务（kernel task），同时对应一个用户进程（process），一个process对应ST的一个vp，每个vp下就是ST的thread（是协程不是线程），结合前面所述，vp初始化先创建idle thread，然后根据I/O事件驱动其它threads，这就是ST的多核架构。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" class=\"aligncenter\" src=\"https://coolshell.cn/wp-content/uploads/2014/10/st_app.gif\" alt=\"multi-core\"/\u003e\u003c/p\u003e\n\u003cp\u003e这里要指出的是，\u003cstrong\u003eST只负责自身thread调度，进程管理是应用程序的事情，\u003c/strong\u003e也就是说由用户来决定fork多少进程，每个进程分配多少资源，如何进行IPC等。这种架构的好处就是每个vp有自己独立的空间，避免了资源同步竞态（比如杜绝了多进程里的多线程这样混乱的模型）。我们知道这种\u003cstrong\u003e基于进程的架构是非常健壮的，一个进程奔溃不会影响到其它进程，同时充分利用多核硬件的高并发。\u003c/strong\u003e同时对于具体逻辑业务使用vp里的thread处理，这是基于EDSM的，如此一来做到了\u003cstrong\u003e逻辑业务与内核执行对象之间的解耦\u003c/strong\u003e，没必要因为1K个连接去创建1K的进程。这就是ST的扩展性和灵活性。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%BD%BF%E7%94%A8%E9%99%90%E5%88%B6\"\u003e\u003c/span\u003e使用限制\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003eST的主要限制在于，应用程序所有I/O操作必须使用ST提供的API，因为只有这样thread才能被调度器管理，并且避免阻塞。\u003c/p\u003e\n\u003cp\u003e另一个限制在于thread调试，这本身不容易，好在v1.9的ST提供了DEBUG参数，使用TREADQ以及_st_iterate_threads接口检测thread调度情况，用户还可自定义_st_show_thread_stack接口dump每个thread的栈，在GDB使能_st_iterate_threads_flag变量，这些都在Readme中对调试方法有具体说明。按下不表。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%80%BB%E7%BB%93\"\u003e\u003c/span\u003e总结\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e这篇文章写得有点短了，主要是通过对比来介绍ST的，其实还有大段原理可以讲，大段源码以及实战用例可以贴，但这一下子又写不过来，ST还是有点技术含量的。说白了，\u003cstrong\u003eST的核心思想就是利用multi-threading的简单优雅范式胜过传统异步回调的复杂晦涩实现，又利用EDSM的性能和解耦架构避免了multi-threading在系统上的开销和暗礁。\u003c/strong\u003e学习ST告诉我们一个道理：\u003cstrong\u003e未来技术的趋势永远都是融合的。\u003c/strong\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%8F%82%E8%80%83\"\u003e\u003c/span\u003e参考\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e在\u003ca title=\"sourceforge源码\" href=\"http://sourceforge.net/projects/state-threads/files/\" target=\"_blank\"\u003eSourceForge\u003c/a\u003e以及\u003ca title=\"github源码\" href=\"https://github.com/winlinvip/state-threads\" target=\"_blank\"\u003egithub\u003c/a\u003e上的源码：前者有历史版本及win32版本，后者只有v1.9。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca title=\"State Threads for Internet Applications\" href=\"http://state-threads.sourceforge.net/docs/st.html\" target=\"_blank\"\u003eState Threads for Internet Applications\u003c/a\u003e：介绍原理的，值得一看，\u003ca title=\"中文翻译\" href=\"http://blog.csdn.net/win_lin/article/details/8242653\" target=\"_blank\"\u003e这里\u003c/a\u003e有篇中文翻译附加单元测试（在单CPU 512M内存上创建数万个thread，CPU占用率约5%，内存约4.3K/thread）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca title=\"State Threads Library FAQ\" href=\"http://state-threads.sourceforge.net/docs/faq.html\" target=\"_blank\"\u003eState Threads Library FAQ\u003c/a\u003e：本文基于此而写。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca title=\"API手册\" href=\"http://state-threads.sourceforge.net/docs/reference.html\" target=\"_blank\"\u003eComplete reference\u003c/a\u003e：API完全手册。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca title=\"注意事项\" href=\"http://state-threads.sourceforge.net/docs/notes.html\" target=\"_blank\"\u003ePrograming Notes\u003c/a\u003e：编程注意事项，包括信号处理，IPC，非网络I/O事件等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/10975.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/11.jpg\" alt=\"一个“蝇量级” C 语言协程库\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/10975.html\" class=\"wp_rp_title\"\u003e一个“蝇量级” C 语言协程库\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8711.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/12/200906020837401710-150x150.jpg\" alt=\"程序员疫苗：代码注入\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8711.html\" class=\"wp_rp_title\"\u003e程序员疫苗：代码注入\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/5987.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/27.jpg\" alt=\"如何设计“找回用户帐号”功能\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/5987.html\" class=\"wp_rp_title\"\u003e如何设计“找回用户帐号”功能\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8309.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/24.jpg\" alt=\"C/C++语言中闭包的探究及比较\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8309.html\" class=\"wp_rp_title\"\u003eC/C++语言中闭包的探究及比较\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8239.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/09/lock_free_bicycle-150x150.jpg\" alt=\"无锁队列的实现\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8239.html\" class=\"wp_rp_title\"\u003e无锁队列的实现\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/7965.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/07/fork01jpg-150x150.jpg\" alt=\"一个fork的面试题\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/7965.html\" class=\"wp_rp_title\"\u003e一个fork的面试题\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-12012\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"e74c7f7acd\"\u003e\u003cimg id=\"rating_12012_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(12012, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-ff346d843283c09c0663271a-=\"\"/\u003e\u003cimg id=\"rating_12012_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(12012, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-ff346d843283c09c0663271a-=\"\"/\u003e\u003cimg id=\"rating_12012_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(12012, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-ff346d843283c09c0663271a-=\"\"/\u003e\u003cimg id=\"rating_12012_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(12012, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-ff346d843283c09c0663271a-=\"\"/\u003e\u003cimg id=\"rating_12012_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(12012, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-ff346d843283c09c0663271a-=\"\"/\u003e (\u003cstrong\u003e32\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e3.91\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_12012_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"State Threads 回调终结者\"/\u003e\u003cmeta itemprop=\"headline\" content=\"State Threads 回调终结者\"/\u003e\u003cmeta itemprop=\"description\" content=\"（感谢网友 @我的上铺叫路遥 投稿）\n\n上回写了篇《一个“蝇量级”C语言协程库》，推荐了一下Protothreads，通过coroutine模拟了用户级别的multi-threading模型，虽然本身足够“轻”，杜绝了系统开销，但这个库本身应用场合主要是内存限制的嵌入式领域，提供原生态组件太少，使用限制太多，比如依赖其它调用产生阻塞等。\n\n这回又替大家在开源界淘了个宝，推荐一个轻量级网络应...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2014-10-12T22:48:57+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2014-10-12T22:48:57+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/12012.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"Leo\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/12012.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"3.91\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"32\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-12012-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2014-10-12T22:48:57+08:00",
  "Author": "Leo"
}