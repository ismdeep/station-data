{
  "Source": "coolshell.cn",
  "Title": "TCP 的那些事儿（下）",
  "Link": "https://coolshell.cn/articles/11609.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"a6a362344dea45ddf9a9765b-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright wp-image-11641\" src=\"https://coolshell.cn/wp-content/uploads/2014/05/xin_2001040422167711230318.jpg\" alt=\"\" width=\"360\" height=\"244\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/05/xin_2001040422167711230318.jpg 400w, https://coolshell.cn/wp-content/uploads/2014/05/xin_2001040422167711230318-300x203.jpg 300w, https://coolshell.cn/wp-content/uploads/2014/05/xin_2001040422167711230318-399x270.jpg 399w\" sizes=\"(max-width: 360px) 100vw, 360px\"/\u003e这篇文章是下篇，所以如果你对TCP不熟悉的话，还请你先看看上篇《\u003ca href=\"https://coolshell.cn/articles/11564.html\" target=\"_blank\"\u003eTCP的那些事儿（上）\u003c/a\u003e》 上篇中，我们介绍了TCP的协议头、状态机、数据重传中的东西。但是TCP要解决一个很大的事，那就是要在一个网络根据不同的情况来动态调整自己的发包的速度，小则让自己的连接更稳定，大则让整个网络更稳定。在你阅读下篇之前，你需要做好准备，本篇文章有好些算法和策略，可能会引发你的各种思考，让你的大脑分配很多内存和计算资源，所以，不适合在厕所中阅读。\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#TCP%E7%9A%84RTT%E7%AE%97%E6%B3%95\" title=\"TCP的RTT算法\"\u003eTCP的RTT算法\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95\" title=\"经典算法\"\u003e经典算法\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#Karn_Partridge_%E7%AE%97%E6%B3%95\" title=\"Karn / Partridge 算法\"\u003eKarn / Partridge 算法\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#Jacobson_Karels_%E7%AE%97%E6%B3%95\" title=\"Jacobson / Karels 算法\"\u003eJacobson / Karels 算法\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#TCP%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3\" title=\"TCP滑动窗口\"\u003eTCP滑动窗口\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#Zero_Window\" title=\"Zero Window\"\u003eZero Window\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#Silly_Window_Syndrome\" title=\"Silly Window Syndrome\"\u003eSilly Window Syndrome\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#TCP%E7%9A%84%E6%8B%A5%E5%A1%9E%E5%A4%84%E7%90%86_%E2%80%93_Congestion_Handling\" title=\"TCP的拥塞处理 – Congestion Handling\"\u003eTCP的拥塞处理 – Congestion Handling\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-9\" href=\"#%E6%85%A2%E7%83%AD%E5%90%AF%E5%8A%A8%E7%AE%97%E6%B3%95_%E2%80%93_Slow_Start\" title=\"慢热启动算法 – Slow Start\"\u003e慢热启动算法 – Slow Start\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-10\" href=\"#_%E6%8B%A5%E5%A1%9E%E9%81%BF%E5%85%8D%E7%AE%97%E6%B3%95_%E2%80%93_Congestion_Avoidance\" title=\" 拥塞避免算法 – Congestion Avoidance\"\u003e 拥塞避免算法 – Congestion Avoidance\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-11\" href=\"#%E6%8B%A5%E5%A1%9E%E7%8A%B6%E6%80%81%E6%97%B6%E7%9A%84%E7%AE%97%E6%B3%95\" title=\"拥塞状态时的算法\"\u003e拥塞状态时的算法\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-12\" href=\"#%E5%BF%AB%E9%80%9F%E6%81%A2%E5%A4%8D%E7%AE%97%E6%B3%95_%E2%80%93_Fast_Recovery\" title=\"快速恢复算法 – Fast Recovery\"\u003e快速恢复算法 – Fast Recovery\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-13\" href=\"#%E7%AE%97%E6%B3%95%E7%A4%BA%E6%84%8F%E5%9B%BE\" title=\"算法示意图\"\u003e算法示意图\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-14\" href=\"#FACK%E7%AE%97%E6%B3%95\" title=\"FACK算法\"\u003eFACK算法\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-15\" href=\"#%E5%85%B6%E5%AE%83%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B\" title=\"其它拥塞控制算法简介\"\u003e其它拥塞控制算法简介\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-16\" href=\"#TCP_Vegas_%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95\" title=\"TCP Vegas 拥塞控制算法\"\u003eTCP Vegas 拥塞控制算法\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-17\" href=\"#HSTCPHigh_Speed_TCP_%E7%AE%97%E6%B3%95\" title=\"HSTCP(High Speed TCP) 算法\"\u003eHSTCP(High Speed TCP) 算法\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-18\" href=\"#_TCP_BIC_%E7%AE%97%E6%B3%95\" title=\" TCP BIC 算法\"\u003e TCP BIC 算法\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-19\" href=\"#TCP_WestWood%E7%AE%97%E6%B3%95\" title=\"TCP WestWood算法\"\u003eTCP WestWood算法\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-20\" href=\"#%E5%85%B6%E5%AE%83\" title=\"其它\"\u003e其它\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-21\" href=\"#_%E5%90%8E%E8%AE%B0\" title=\" 后记\"\u003e 后记\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"TCP%E7%9A%84RTT%E7%AE%97%E6%B3%95\"\u003e\u003c/span\u003eTCP的RTT算法\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e从前面的TCP重传机制我们知道Timeout的设置对于重传非常重要。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e设长了，重发就慢，丢了老半天才重发，没有效率，性能差；\u003c/li\u003e\n\u003cli\u003e设短了，会导致可能并没有丢就重发。于是重发的就快，会增加网络拥塞，导致更多的超时，更多的超时导致更多的重发。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e而且，这个超时时间在不同的网络的情况下，根本没有办法设置一个死的值。只能动态地设置。 为了动态地设置，TCP引入了RTT——Round Trip Time，也就是一个数据包从发出去到回来的时间。这样发送端就大约知道需要多少的时间，从而可以方便地设置Timeout——RTO（Retransmission TimeOut），以让我们的重传机制更高效。 听起来似乎很简单，好像就是在发送端发包时记下t0，然后接收端再把这个ack回来时再记一个t1，于是RTT = t1 – t0。没那么简单，这只是一个采样，不能代表普遍情况。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-11609\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95\"\u003e\u003c/span\u003e经典算法\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003ca href=\"http://tools.ietf.org/html/rfc793\" target=\"_blank\"\u003eRFC793\u003c/a\u003e 中定义的经典算法是这样的：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）首先，先采样RTT，记下最近好几次的RTT值。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）然后做平滑计算SRTT（ Smoothed RTT）。公式为：（其中的 α 取值在0.8 到 0.9之间，这个算法英文叫Exponential weighted moving average，中文叫：加权移动平均）\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003cstrong\u003eSRTT = ( α * SRTT ) + ((1- α) * RTT)\u003c/strong\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e3）开始计算RTO。公式如下：\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003cstrong\u003eRTO = min [ UBOUND,  max [ LBOUND,   (β * SRTT) ]  ]\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e其中：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUBOUND是最大的timeout时间，上限值\u003c/li\u003e\n\u003cli\u003eLBOUND是最小的timeout时间，下限值\u003c/li\u003e\n\u003cli\u003eβ 值一般在1.3到2.0之间。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"Karn_Partridge_%E7%AE%97%E6%B3%95\"\u003e\u003c/span\u003eKarn / Partridge 算法\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e但是上面的这个算法在重传的时候会出有一个终极问题——你是用第一次发数据的时间和ack回来的时间做RTT样本值，还是用重传的时间和ACK回来的时间做RTT样本值？\u003c/p\u003e\n\u003cp\u003e这个问题无论你选那头都是按下葫芦起了瓢。 如下图所示：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e情况（a）是ack没回来，所以重传。如果你计算第一次发送和ACK的时间，那么，明显算大了。\u003c/li\u003e\n\u003cli\u003e情况（b）是ack回来慢了，但是导致了重传，但刚重传不一会儿，之前ACK就回来了。如果你是算重传的时间和ACK回来的时间的差，就会算短了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter wp-image-11605\" src=\"https://coolshell.cn/wp-content/uploads/2014/05/Karn-Partridge-Algorithm.jpg\" alt=\"\" width=\"545\" height=\"243\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/05/Karn-Partridge-Algorithm.jpg 745w, https://coolshell.cn/wp-content/uploads/2014/05/Karn-Partridge-Algorithm-300x133.jpg 300w\" sizes=\"(max-width: 545px) 100vw, 545px\"/\u003e\u003c/p\u003e\n\u003cp\u003e所以1987年的时候，搞了一个叫\u003ca href=\"https://en.wikipedia.org/wiki/Karn\u0026#39;s_Algorithm\" target=\"_blank\"\u003eKarn / Partridge Algorithm\u003c/a\u003e，这个算法的最大特点是——\u003cstrong\u003e忽略重传，不把重传的RTT做采样\u003c/strong\u003e（你看，你不需要去解决不存在的问题）。\u003c/p\u003e\n\u003cp\u003e但是，这样一来，又会引发一个大BUG——\u003cstrong\u003e如果在某一时间，网络闪动，突然变慢了，产生了比较大的延时，这个延时导致要重转所有的包（因为之前的RTO很小），于是，因为重转的不算，所以，RTO就不会被更新，这是一个灾难\u003c/strong\u003e。 于是Karn算法用了一个取巧的方式——只要一发生重传，就对现有的RTO值翻倍（这就是所谓的 Exponential backoff），很明显，这种死规矩对于一个需要估计比较准确的RTT也不靠谱。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"Jacobson_Karels_%E7%AE%97%E6%B3%95\"\u003e\u003c/span\u003eJacobson / Karels 算法\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e前面两种算法用的都是“加权移动平均”，这种方法最大的毛病就是如果RTT有一个大的波动的话，很难被发现，因为被平滑掉了。所以，1988年，又有人推出来了一个新的算法，这个算法叫Jacobson / Karels Algorithm（参看\u003ca href=\"http://tools.ietf.org/html/rfc6298\" target=\"_blank\"\u003eRFC6289\u003c/a\u003e）。这个算法引入了最新的RTT的采样和平滑过的SRTT的差距做因子来计算。 公式如下：（其中的DevRTT是Deviation RTT的意思）\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cb\u003eSRTT\u003c/b\u003e\u003cb\u003e = S\u003c/b\u003e\u003cb\u003eRTT\u003c/b\u003e\u003cb\u003e + α\u003c/b\u003e\u003cb\u003e \u003c/b\u003e\u003cb\u003e(\u003c/b\u003e\u003cb\u003eRTT\u003c/b\u003e\u003cb\u003e – S\u003c/b\u003e\u003cb\u003eRTT\u003c/b\u003e\u003cb\u003e)  \u003c/b\u003e—— 计算平滑RTT\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cb\u003eDevRTT\u003c/b\u003e\u003cb\u003e = (1-β\u003c/b\u003e\u003cb\u003e)*\u003c/b\u003e\u003cb\u003eDevRTT\u003c/b\u003e\u003cb\u003e + β\u003c/b\u003e\u003cb\u003e*(|\u003c/b\u003e\u003cb\u003eRTT-SRTT\u003c/b\u003e\u003cb\u003e|) \u003c/b\u003e——计算平滑RTT和真实的差距（加权移动平均）\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003eRTO= µ * SRTT + ∂ *DevRTT \u003c/strong\u003e—— 神一样的公式\u003c/p\u003e\n\u003cp\u003e（其中：在Linux下，α = 0.125，β = 0.25， μ = 1，∂ = 4 ——这就是算法中的“调得一手好参数”，nobody knows why, it just works…） 最后的这个算法在被用在今天的TCP协议中（Linux的源代码在：\u003ca href=\"http://lxr.free-electrons.com/source/net/ipv4/tcp_input.c?v=2.6.32#L609\" target=\"_blank\"\u003etcp_rtt_estimator\u003c/a\u003e）。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"TCP%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3\"\u003e\u003c/span\u003eTCP滑动窗口\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e需要说明一下，如果你不了解TCP的滑动窗口这个事，你等于不了解TCP协议。我们都知道，\u003cstrong\u003eTCP必需要解决的可靠传输以及包乱序（reordering）的问题\u003c/strong\u003e，所以，TCP必需要知道网络实际的数据处理带宽或是数据处理速度，这样才不会引起网络拥塞，导致丢包。\u003c/p\u003e\n\u003cp\u003e所以，TCP引入了一些技术和设计来做网络流控，Sliding Window是其中一个技术。 前面我们说过，\u003cstrong\u003eTCP头里有一个字段叫Window，又叫Advertised-Window，这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据\u003c/strong\u003e。\u003cstrong\u003e于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来\u003c/strong\u003e。 为了说明滑动窗口，我们需要先看一下TCP缓冲区的一些数据结构：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter wp-image-11594\" src=\"https://coolshell.cn/wp-content/uploads/2014/05/sliding_window.jpg\" alt=\"\" width=\"450\" height=\"179\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/05/sliding_window.jpg 906w, https://coolshell.cn/wp-content/uploads/2014/05/sliding_window-300x119.jpg 300w, https://coolshell.cn/wp-content/uploads/2014/05/sliding_window-900x358.jpg 900w\" sizes=\"(max-width: 450px) 100vw, 450px\"/\u003e\u003c/p\u003e\n\u003cp\u003e上图中，我们可以看到：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e接收端LastByteRead指向了TCP缓冲区中读到的位置，NextByteExpected指向的地方是收到的连续包的最后一个位置，LastByteRcved指向的是收到的包的最后一个位置，我们可以看到中间有些数据还没有到达，所以有数据空白区。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e发送端的LastByteAcked指向了被接收端Ack过的位置（表示成功发送确认），LastByteSent表示发出去了，但还没有收到成功确认的Ack，LastByteWritten指向的是上层应用正在写的地方。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e于是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e接收端在给发送端回ACK中会汇报自己的AdvertisedWindow = MaxRcvBuffer – LastByteRcvd – 1;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e而发送方会根据这个窗口来控制发送数据的大小，以保证接收方可以处理。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e下面我们来看一下发送方的滑动窗口示意图：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-11596\" src=\"https://coolshell.cn/wp-content/uploads/2014/05/tcpswwindows.png\" alt=\"\" width=\"660\" height=\"270\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/05/tcpswwindows.png 660w, https://coolshell.cn/wp-content/uploads/2014/05/tcpswwindows-300x122.png 300w\" sizes=\"(max-width: 660px) 100vw, 660px\"/\u003e\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e（\u003ca href=\"http://www.tcpipguide.com/free/t_TCPSlidingWindowAcknowledgmentSystemForDataTranspo-6.htm\" target=\"_blank\"\u003e图片来源\u003c/a\u003e）\u003c/p\u003e\n\u003cp\u003e上图中分成了四个部分，分别是：（其中那个黑模型就是滑动窗口）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e#1已收到ack确认的数据。\u003c/li\u003e\n\u003cli\u003e#2发还没收到ack的。\u003c/li\u003e\n\u003cli\u003e#3在窗口中还没有发出的（接收方还有空间）。\u003c/li\u003e\n\u003cli\u003e#4窗口以外的数据（接收方没空间）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e下面是个滑动后的示意图（收到36的ack，并发出了46-51的字节）：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-11597\" src=\"https://coolshell.cn/wp-content/uploads/2014/05/tcpswslide.png\" alt=\"\" width=\"660\" height=\"210\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/05/tcpswslide.png 660w, https://coolshell.cn/wp-content/uploads/2014/05/tcpswslide-300x95.png 300w\" sizes=\"(max-width: 660px) 100vw, 660px\"/\u003e\u003c/p\u003e\n\u003cp\u003e下面我们来看一个接受端控制发送端的图示：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-11617\" src=\"https://coolshell.cn/wp-content/uploads/2014/05/tcpswflow.png\" alt=\"\" width=\"666\" height=\"836\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/05/tcpswflow.png 666w, https://coolshell.cn/wp-content/uploads/2014/05/tcpswflow-238x300.png 238w\" sizes=\"(max-width: 666px) 100vw, 666px\"/\u003e\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e（\u003ca href=\"http://www.tcpipguide.com/free/t_TCPWindowSizeAdjustmentandFlowControl-2.htm\" target=\"_blank\"\u003e图片来源\u003c/a\u003e）\u003c/p\u003e\n\u003ch5 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"Zero_Window\"\u003e\u003c/span\u003eZero Window\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: left;\"\u003e上图，我们可以看到一个处理缓慢的Server（接收端）是怎么把Client（发送端）的TCP Sliding Window给降成0的。此时，你一定会问，如果Window变成0了，TCP会怎么样？是不是发送端就不发数据了？是的，发送端就不发数据了，你可以想像成“Window Closed”，那你一定还会问，如果发送端不发数据了，接收方一会儿Window size 可用了，怎么通知发送端呢？\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e解决这个问题，TCP使用了Zero Window Probe技术，缩写为ZWP，也就是说，发送端在窗口变成0后，会发ZWP的包给接收方，让接收方来ack他的Window尺寸，一般这个值会设置成3次，第次大约30-60秒（不同的实现可能会不一样）。如果3次过后还是0的话，有的TCP实现就会发RST把链接断了。\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e\u003cstrong\u003e注意\u003c/strong\u003e：只要有等待的地方都可能出现DDoS攻击，Zero Window也不例外，一些攻击者会在和HTTP建好链发完GET请求后，就把Window设置为0，然后服务端就只能等待进行ZWP，于是攻击者会并发大量的这样的请求，把服务器端的资源耗尽。（关于这方面的攻击，大家可以移步看一下\u003ca href=\"https://en.wikipedia.org/wiki/Sockstress\" target=\"_blank\"\u003eWikipedia的SockStress词条\u003c/a\u003e）\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e另外，Wireshark中，你可以使用tcp.analysis.zero_window来过滤包，然后使用右键菜单里的follow TCP stream，你可以看到ZeroWindowProbe及ZeroWindowProbeAck的包。\u003c/p\u003e\n\u003ch5 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"Silly_Window_Syndrome\"\u003e\u003c/span\u003eSilly Window Syndrome\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003eSilly Window Syndrome翻译成中文就是“糊涂窗口综合症”。正如你上面看到的一样，如果我们的接收方太忙了，来不及取走Receive Windows里的数据，那么，就会导致发送方越来越小。到最后，如果接收方腾出几个字节并告诉发送方现在有几个字节的window，而我们的发送方会义无反顾地发送这几个字节。\u003c/p\u003e\n\u003cp\u003e要知道，我们的TCP+IP头有40个字节，为了几个字节，要达上这么大的开销，这太不经济了。\u003c/p\u003e\n\u003cp\u003e另外，你需要知道网络上有个MTU，对于以太网来说，MTU是1500字节，除去TCP+IP头的40个字节，真正的数据传输可以有1460，这就是所谓的MSS（Max Segment Size）注意，TCP的RFC定义这个MSS的默认值是536，这是因为\u003cspan style=\"color: #252525;\"\u003e \u003c/span\u003e\u003cspan class=\"reference-text\" style=\"color: #252525;\"\u003e\u003ca class=\"external mw-magiclink-rfc\" style=\"color: #663366;\" href=\"http://tools.ietf.org/html/rfc791\" rel=\"nofollow\"\u003eRFC 791\u003c/a\u003e里说了任何一个\u003c/span\u003eIP设备都得最少接收576尺寸的大小（实际上来说576是拨号的网络的MTU，而576减去IP头的20个字节就是536）。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e如果你的网络包可以塞满MTU，那么你可以用满整个带宽，如果不能，那么你就会浪费带宽\u003c/strong\u003e。（大于MTU的包有两种结局，一种是直接被丢了，另一种是会被重新分块打包发送） 你可以想像成一个MTU就相当于一个飞机的最多可以装的人，如果这飞机里满载的话，带宽最高，如果一个飞机只运一个人的话，无疑成本增加了，也而相当二。\u003c/p\u003e\n\u003cp\u003e所以，\u003cstrong\u003eSilly Windows Syndrome这个现像就像是你本来可以坐200人的飞机里只做了一两个人\u003c/strong\u003e。 要解决这个问题也不难，就是避免对小的window size做出响应，直到有足够大的window size再响应，这个思路可以同时实现在sender和receiver两端。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果这个问题是由Receiver端引起的，那么就会使用 David D Clark’s 方案。在receiver端，如果收到的数据导致window size小于某个值，可以直接ack(0)回sender，这样就把window给关闭了，也阻止了sender再发数据过来，等到receiver端处理了一些数据后windows size 大于等于了MSS，或者，receiver buffer有一半为空，就可以把window打开让send 发送数据过来。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e如果这个问题是由Sender端引起的，那么就会使用著名的\u003cspan style=\"color: #252525;\"\u003e \u003c/span\u003e\u003ca style=\"color: #0b0080;\" title=\"Nagle\u0026#39;s algorithm\" href=\"https://en.wikipedia.org/wiki/Nagle%27s_algorithm\" target=\"_blank\"\u003eNagle’s algorithm\u003c/a\u003e。这个算法的思路也是延时处理，他有两个主要的条件：1）要等到 Window Size\u0026gt;=MSS 或是 Data Size \u0026gt;=MSS，2）收到之前发送数据的ack回包，他才会发数据，否则就是在攒数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e另外，Nagle算法默认是打开的，所以，对于一些需要小包场景的程序——\u003cstrong\u003e比如像telnet或ssh这样的交互性比较强的程序，你需要关闭这个算法\u003c/strong\u003e。你可以在Socket设置TCP_NODELAY选项来关闭这个算法（关闭Nagle算法没有全局参数，需要根据每个应用自己的特点来关闭）\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003esetsockopt(sock_fd, IPPROTO_TCP, TCP_NODELAY, (char *)\u0026amp;value,sizeof(int));\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e另外，网上有些文章说\u003cspan style=\"color: #000000;\"\u003eTCP_CORK的socket option是也关闭Nagle算法，这不对。\u003cstrong\u003eTCP_CORK其实是更新激进的Nagle算汉，完全禁止小包发送，而Nagle算法没有禁止小包发送，只是禁止了大量的小包发送\u003c/strong\u003e。最好不要两个选项都设置。\u003c/span\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"TCP%E7%9A%84%E6%8B%A5%E5%A1%9E%E5%A4%84%E7%90%86_%E2%80%93_Congestion_Handling\"\u003e\u003c/span\u003eTCP的拥塞处理 – Congestion Handling\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e上面我们知道了，TCP通过Sliding Window来做流控（Flow Control），但是TCP觉得这还不够，因为Sliding Window需要依赖于连接的发送端和接收端，其并不知道网络中间发生了什么。TCP的设计者觉得，一个伟大而牛逼的协议仅仅做到流控并不够，因为流控只是网络模型4层以上的事，TCP的还应该更聪明地知道整个网络上的事。\u003c/p\u003e\n\u003cp\u003e具体一点，我们知道TCP通过一个timer采样了RTT并计算RTO，但是，\u003cstrong\u003e如果网络上的延时突然增加，那么，TCP对这个事做出的应对只有重传数据，但是，重传会导致网络的负担更重，于是会导致更大的延迟以及更多的丢包，于是，这个情况就会进入恶性循环被不断地放大。试想一下，如果一个网络内有成千上万的TCP连接都这么行事，那么马上就会形成“网络风暴”，TCP这个协议就会拖垮整个网络。\u003c/strong\u003e这是一个灾难。\u003c/p\u003e\n\u003cp\u003e所以，TCP不能忽略网络上发生的事情，而无脑地一个劲地重发数据，对网络造成更大的伤害。对此TCP的设计理念是：\u003cspan style=\"color: #cc0000;\"\u003e\u003cstrong\u003eTCP不是一个自私的协议，当拥塞发生的时候，要做自我牺牲。就像交通阻塞一样，每个车都应该把路让出来，而不要再去抢路了。\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e关于拥塞控制的论文请参看《\u003ca href=\"http://ee.lbl.gov/papers/congavoid.pdf\" target=\"_blank\"\u003eCongestion Avoidance and Control\u003c/a\u003e》(PDF)\u003c/p\u003e\n\u003cp\u003e拥塞控制主要是四个算法：\u003cstrong\u003e1）慢启动\u003c/strong\u003e，\u003cstrong\u003e2）拥塞避免\u003c/strong\u003e，\u003cstrong\u003e3）拥塞发生\u003c/strong\u003e，\u003cstrong\u003e4）快速恢复\u003c/strong\u003e。这四个算法不是一天都搞出来的，这个四算法的发展经历了很多时间，到今天都还在优化中。 备注:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e1988年，TCP-Tahoe 提出了1）慢启动，2）拥塞避免，3）拥塞发生时的快速重传\u003c/li\u003e\n\u003cli\u003e1990年，TCP Reno 在Tahoe的基础上增加了4）快速恢复\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%85%A2%E7%83%AD%E5%90%AF%E5%8A%A8%E7%AE%97%E6%B3%95_%E2%80%93_Slow_Start\"\u003e\u003c/span\u003e慢热启动算法 – Slow Start\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e首先，我们来看一下TCP的慢热启动。慢启动的意思是，刚刚加入网络的连接，一点一点地提速，不要一上来就像那些特权车一样霸道地把路占满。新同学上高速还是要慢一点，不要把已经在高速上的秩序给搞乱了。\u003c/p\u003e\n\u003cp\u003e慢启动的算法如下(cwnd全称Congestion Window)：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）连接建好的开始先初始化cwnd = 1，表明可以传一个MSS大小的数据。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）每当收到一个ACK，cwnd++; 呈线性上升\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e3）每当过了一个RTT，cwnd = cwnd*2; 呈指数让升\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e4）还有一个ssthresh（slow start threshold），是一个上限，当cwnd \u0026gt;= ssthresh时，就会进入“拥塞避免算法”（后面会说这个算法）\u003c/p\u003e\n\u003cp\u003e所以，我们可以看到，如果网速很快的话，ACK也会返回得快，RTT也会短，那么，这个慢启动就一点也不慢。下图说明了这个过程。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-11619\" src=\"https://coolshell.cn/wp-content/uploads/2014/05/tcp.slow_.start_.jpg\" alt=\"\" width=\"662\" height=\"388\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/05/tcp.slow_.start_.jpg 662w, https://coolshell.cn/wp-content/uploads/2014/05/tcp.slow_.start_-300x175.jpg 300w\" sizes=\"(max-width: 662px) 100vw, 662px\"/\u003e\u003c/p\u003e\n\u003cp\u003e这里，我需要提一下的是一篇Google的论文\u003cspan style=\"color: #000000;\"\u003e《\u003ca href=\"https://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/36640.pdf\" target=\"_blank\"\u003eAn Argument for Increasing TCP’s Initial Congestion Window\u003c/a\u003e》Linux 3.0后采用了这篇论文的建议——把cwnd 初始化成了 10个MSS。\u003c/span\u003e \u003cspan style=\"color: #000000;\"\u003e而Linux 3.0以前，比如2.6，Linux采用了\u003ca href=\"http://www.rfc-editor.org/rfc/rfc3390.txt\" target=\"_blank\"\u003eRFC3390\u003c/a\u003e，cwnd是跟MSS的值来变的，如果MSS\u0026lt; 1095，则cwnd = 4；如果MSS\u0026gt;2190，则cwnd=2；其它情况下，则是3。\u003c/span\u003e\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"_%E6%8B%A5%E5%A1%9E%E9%81%BF%E5%85%8D%E7%AE%97%E6%B3%95_%E2%80%93_Congestion_Avoidance\"\u003e\u003c/span\u003e 拥塞避免算法 – Congestion Avoidance\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e前面说过，还有一个ssthresh（slow start threshold），是一个上限，当cwnd \u0026gt;= ssthresh时，就会进入“拥塞避免算法”。一般来说ssthresh的值是65535，单位是字节，当cwnd达到这个值时后，算法如下：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）收到一个ACK时，cwnd = cwnd + 1/cwnd\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）当每过一个RTT时，cwnd = cwnd + 1\u003c/p\u003e\n\u003cp\u003e这样就可以避免增长过快导致网络拥塞，慢慢的增加调整到网络的最佳值。很明显，是一个线性上升的算法。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%8B%A5%E5%A1%9E%E7%8A%B6%E6%80%81%E6%97%B6%E7%9A%84%E7%AE%97%E6%B3%95\"\u003e\u003c/span\u003e拥塞状态时的算法\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e前面我们说过，当丢包的时候，会有两种情况：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）等到RTO超时，重传数据包。TCP认为这种情况太糟糕，反应也很强烈。\u003c/p\u003e\n\u003cul\u003e\n\u003cul\u003e\n\u003cli\u003esshthresh =  cwnd /2\u003c/li\u003e\n\u003cli\u003ecwnd 重置为 1\u003c/li\u003e\n\u003cli\u003e进入慢启动过程\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/ul\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）Fast Retransmit算法，也就是在收到3个duplicate ACK时就开启重传，而不用等到RTO超时。\u003c/p\u003e\n\u003cul\u003e\n\u003cul\u003e\n\u003cli\u003eTCP Tahoe的实现和RTO超时一样。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cul\u003e\n\u003cli\u003eTCP Reno的实现是：\n\u003cul\u003e\n\u003cli\u003ecwnd = cwnd /2\u003c/li\u003e\n\u003cli\u003esshthresh = cwnd\u003c/li\u003e\n\u003cli\u003e进入快速恢复算法——Fast Recovery\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/ul\u003e\n\u003cp\u003e上面我们可以看到RTO超时后，sshthresh会变成cwnd的一半，这意味着，如果cwnd\u0026lt;=sshthresh时出现的丢包，那么TCP的sshthresh就会减了一半，然后等cwnd又很快地以指数级增涨爬到这个地方时，就会成慢慢的线性增涨。我们可以看到，TCP是怎么通过这种强烈地震荡快速而小心得找到网站流量的平衡点的。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%BF%AB%E9%80%9F%E6%81%A2%E5%A4%8D%E7%AE%97%E6%B3%95_%E2%80%93_Fast_Recovery\"\u003e\u003c/span\u003e快速恢复算法 – Fast Recovery\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cspan style=\"text-decoration: underline;\"\u003e\u003cstrong\u003eTCP Reno\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"color: #000000;\"\u003e这个算法定义在\u003c/span\u003e\u003ca title=\"\u0026#34;TCP Congestion Control\u0026#34;\" href=\"http://tools.ietf.org/html/rfc5681\"\u003eRFC5681\u003c/a\u003e。快速重传和快速恢复算法一般同时使用。快速恢复算法是认为，你还有3个Duplicated Acks说明网络也不那么糟糕，所以没有必要像RTO超时那么强烈。 \u003cspan style=\"color: #000000;\"\u003e注意，正如前面所说，进入Fast Recovery之前，cwnd 和 sshthresh已被更新：\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ecwnd = cwnd /2\u003c/li\u003e\n\u003cli\u003esshthresh = cwnd\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan style=\"color: #000000;\"\u003e然后，真正的Fast Recovery算法如下：\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ecwnd = sshthresh  + 3 * MSS （3的意思是确认有3个数据包被收到了）\u003c/li\u003e\n\u003cli\u003e重传Duplicated ACKs指定的数据包\u003c/li\u003e\n\u003cli\u003e如果再收到 duplicated Acks，那么cwnd = cwnd +1\u003c/li\u003e\n\u003cli\u003e如果收到了新的Ack，那么，cwnd = sshthresh ，然后就进入了拥塞避免的算法了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果你仔细思考一下上面的这个算法，你就会知道，\u003cstrong\u003e上面这个算法也有问题，那就是——它依赖于3个重复的Acks\u003c/strong\u003e。注意，3个重复的Acks并不代表只丢了一个数据包，很有可能是丢了好多包。但这个算法只会重传一个，而剩下的那些包只能等到RTO超时，于是，进入了恶梦模式——超时一个窗口就减半一下，多个超时会超成TCP的传输速度呈级数下降，而且也不会触发Fast Recovery算法了。\u003c/p\u003e\n\u003cp\u003e通常来说，正如我们前面所说的，SACK或D-SACK的方法可以让Fast Recovery或Sender在做决定时更聪明一些，但是并不是所有的TCP的实现都支持SACK（SACK需要两端都支持），所以，需要一个没有SACK的解决方案。而通过SACK进行拥塞控制的算法是FACK（后面会讲）\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"text-decoration: underline;\"\u003e\u003cstrong\u003eTCP New Reno\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"color: #252525;\"\u003e于是，1995年，TCP New Reno（参见 \u003c/span\u003e\u003ca class=\"external mw-magiclink-rfc\" style=\"color: #663366;\" href=\"http://tools.ietf.org/html/rfc6582\" rel=\"nofollow\"\u003eRFC 6582\u003c/a\u003e ）算法提出来，主要就是在没有SACK的支持下改进Fast Recovery算法的——\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e当sender这边收到了3个Duplicated Acks，进入Fast Retransimit模式，开发重传重复Acks指示的那个包。如果只有这一个包丢了，那么，重传这个包后回来的Ack会把整个已经被sender传输出去的数据ack回来。如果没有的话，说明有多个包丢了。我们叫这个ACK为Partial ACK。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e一旦Sender这边发现了Partial ACK出现，那么，sender就可以推理出来有多个包被丢了，于是乎继续重传sliding window里未被ack的第一个包。直到再也收不到了Partial Ack，才真正结束Fast Recovery这个过程\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e我们可以看到，这个“Fast Recovery的变更”是一个非常激进的玩法，他同时延长了Fast Retransmit和Fast Recovery的过程。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%AE%97%E6%B3%95%E7%A4%BA%E6%84%8F%E5%9B%BE\"\u003e\u003c/span\u003e算法示意图\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e下面我们来看一个简单的图示以同时看一下上面的各种算法的样子：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter wp-image-11621\" src=\"https://coolshell.cn/wp-content/uploads/2014/05/tcp.fr_-1024x359.jpg\" alt=\"\" width=\"680\" height=\"239\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/05/tcp.fr_-1024x359.jpg 1024w, https://coolshell.cn/wp-content/uploads/2014/05/tcp.fr_-300x105.jpg 300w, https://coolshell.cn/wp-content/uploads/2014/05/tcp.fr_-900x315.jpg 900w, https://coolshell.cn/wp-content/uploads/2014/05/tcp.fr_.jpg 1410w\" sizes=\"(max-width: 680px) 100vw, 680px\"/\u003e\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"FACK%E7%AE%97%E6%B3%95\"\u003e\u003c/span\u003eFACK算法\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003eFACK全称Forward Acknowledgment 算法，论文地址在这里（PDF）\u003ca href=\"http://conferences.sigcomm.org/sigcomm/1996/papers/mathis.pdf\" target=\"_blank\"\u003eForward Acknowledgement: Refining TCP Congestion Control\u003c/a\u003e 这个算法是其于SACK的，前面我们说过SACK是使用了TCP扩展字段Ack了有哪些数据收到，哪些数据没有收到，他比Fast Retransmit的3 个duplicated acks好处在于，前者只知道有包丢了，不知道是一个还是多个，而SACK可以准确的知道有哪些包丢了。 所以，SACK可以让发送端这边在重传过程中，把那些丢掉的包重传，而不是一个一个的传，但这样的一来，如果重传的包数据比较多的话，又会导致本来就很忙的网络就更忙了。所以，FACK用来做重传过程中的拥塞流控。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e这个算法会把SACK中最大的Sequence Number 保存在\u003cstrong\u003esnd.fack\u003c/strong\u003e这个变量中，snd.fack的更新由ack带秋，如果网络一切安好则和snd.una一样（snd.una就是还没有收到ack的地方，也就是前面sliding window里的category #2的第一个地方）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e然后定义一个\u003cstrong\u003eawnd = snd.nxt – snd.fack\u003c/strong\u003e（snd.nxt指向发送端sliding window中正在要被发送的地方——前面sliding windows图示的category#3第一个位置），这样awnd的意思就是在网络上的数据。（所谓awnd意为：actual quantity of data outstanding in the network）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e如果需要重传数据，那么，\u003cstrong\u003eawnd = snd.nxt – snd.fack + retran_data\u003c/strong\u003e，也就是说，awnd是传出去的数据 + 重传的数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e然后触发Fast Recovery 的条件是： (\u003cstrong\u003e ( snd.fack – snd.una ) \u0026gt; (3*MSS) \u003c/strong\u003e) || (dupacks == 3) ) 。这样一来，就不需要等到3个duplicated acks才重传，而是只要sack中的最大的一个数据和ack的数据比较长了（3个MSS），那就触发重传。在整个重传过程中cwnd不变。直到当第一次丢包的snd.nxt\u0026lt;=snd.una（也就是重传的数据都被确认了），然后进来拥塞避免机制——cwnd线性上涨。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e我们可以看到如果没有FACK在，那么在丢包比较多的情况下，原来保守的算法会低估了需要使用的window的大小，而需要几个RTT的时间才会完成恢复，而FACK会比较激进地来干这事。 但是，FACK如果在一个网络包会被 reordering的网络里会有很大的问题。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%85%B6%E5%AE%83%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B\"\u003e\u003c/span\u003e其它拥塞控制算法简介\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"TCP_Vegas_%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95\"\u003e\u003c/span\u003e\u003cstrong\u003eTCP Vegas 拥塞控制算法\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e这个算法1994年被提出，它主要对TCP Reno 做了些修改。这个算法通过对RTT的非常重的监控来计算一个基准RTT。然后通过这个基准RTT来估计当前的网络实际带宽，如果实际带宽比我们的期望的带宽要小或是要多的活，那么就开始线性地减少或增加cwnd的大小。如果这个计算出来的RTT大于了Timeout后，那么，不等ack超时就直接重传。（Vegas 的核心思想是用RTT的值来影响拥塞窗口，而不是通过丢包） 这个算法的论文是《\u003ca class=\"external text\" style=\"color: #663366;\" href=\"http://www.cs.cmu.edu/~srini/15-744/F02/readings/BP95.pdf\" target=\"_blank\" rel=\"nofollow\"\u003eTCP Vegas: End to End Congestion Avoidance on a Global Internet\u003c/a\u003e》这篇论文给了Vegas和 New Reno的对比：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter wp-image-11626\" src=\"https://coolshell.cn/wp-content/uploads/2014/05/tcp_vegas_newreno-1024x555.jpg\" alt=\"\" width=\"680\" height=\"369\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/05/tcp_vegas_newreno-1024x555.jpg 1024w, https://coolshell.cn/wp-content/uploads/2014/05/tcp_vegas_newreno-300x162.jpg 300w, https://coolshell.cn/wp-content/uploads/2014/05/tcp_vegas_newreno-900x487.jpg 900w, https://coolshell.cn/wp-content/uploads/2014/05/tcp_vegas_newreno.jpg 1500w\" sizes=\"(max-width: 680px) 100vw, 680px\"/\u003e\u003c/p\u003e\n\u003cp\u003e关于这个算法实现，你可以参看Linux源码：\u003ca href=\"http://lxr.free-electrons.com/source/net/ipv4/tcp_vegas.h\" target=\"_blank\"\u003e/net/ipv4/tcp_vegas.h\u003c/a\u003e， \u003ca href=\"http://lxr.free-electrons.com/source/net/ipv4/tcp_vegas.c\" target=\"_blank\"\u003e/net/ipv4/tcp_vegas.c\u003c/a\u003e\u003c/p\u003e\n\u003ch5\u003e\u003c/h5\u003e\n\u003ch5 style=\"color: #000000;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"HSTCPHigh_Speed_TCP_%E7%AE%97%E6%B3%95\"\u003e\u003c/span\u003eHSTCP(High Speed TCP) 算法\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e这个算法来自\u003ca href=\"http://tools.ietf.org/html/rfc3649\" target=\"_blank\"\u003eRFC 3649\u003c/a\u003e（\u003ca href=\"https://en.wikipedia.org/wiki/HSTCP\" target=\"_blank\"\u003eWikipedia词条\u003c/a\u003e）。其对最基础的算法进行了更改，他使得Congestion Window涨得快，减得慢。其中：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e拥塞避免时的窗口增长方式： cwnd = cwnd + α(cwnd) / cwnd\u003c/li\u003e\n\u003cli\u003e丢包后窗口下降方式：cwnd = (1- β(cwnd))*cwnd\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e注：α(cwnd)和β(cwnd)都是函数，如果你要让他们和标准的TCP一样，那么让α(cwnd)=1，β(cwnd)=0.5就可以了。 对于α(cwnd)和β(cwnd)的值是个动态的变换的东西。 关于这个算法的实现，你可以参看Linux源码：\u003ca href=\"http://lxr.free-electrons.com/source/net/ipv4/tcp_highspeed.c\" target=\"_blank\"\u003e/net/ipv4/tcp_highspeed.c\u003c/a\u003e\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"_TCP_BIC_%E7%AE%97%E6%B3%95\"\u003e\u003c/span\u003e TCP BIC 算法\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e2004年，产内出BIC算法。现在你还可以查得到相关的新闻《Google：\u003ca href=\"https://www.google.com/search?lr=lang_zh-CN%7Clang_zh-TW\u0026amp;newwindow=1\u0026amp;biw=1366\u0026amp;bih=597\u0026amp;tbs=lr%3Alang_1zh-CN%7Clang_1zh-TW\u0026amp;q=%E7%BE%8E%E7%A7%91%E5%AD%A6%E5%AE%B6%E7%A0%94%E5%8F%91BIC-TCP%E5%8D%8F%E8%AE%AE+%E9%80%9F%E5%BA%A6%E6%98%AFDSL%E5%85%AD%E5%8D%83%E5%80%8D\u0026amp;oq=%E7%BE%8E%E7%A7%91%E5%AD%A6%E5%AE%B6%E7%A0%94%E5%8F%91BIC-TCP%E5%8D%8F%E8%AE%AE+%E9%80%9F%E5%BA%A6%E6%98%AFDSL%E5%85%AD%E5%8D%83%E5%80%8D\" target=\"_blank\"\u003e美科学家研发BIC-TCP协议 速度是DSL六千倍\u003c/a\u003e》 BIC全称\u003ca href=\"http://research.csc.ncsu.edu/netsrv/?q=content/bic-and-cubic\" target=\"_blank\"\u003eBinary Increase Congestion control\u003c/a\u003e，在Linux 2.6.8中是默认拥塞控制算法。BIC的发明者发这么多的拥塞控制算法都在努力找一个合适的cwnd – Congestion Window，而且BIC-TCP的提出者们看穿了事情的本质，其实这就是一个搜索的过程，所以BIC这个算法主要用的是Binary Search——二分查找来干这个事。 关于这个算法实现，你可以参看Linux源码：\u003ca href=\"http://lxr.free-electrons.com/source/net/ipv4/tcp_bic.c\" target=\"_blank\"\u003e/net/ipv4/tcp_bic.c\u003c/a\u003e\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"TCP_WestWood%E7%AE%97%E6%B3%95\"\u003e\u003c/span\u003eTCP WestWood算法\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cspan style=\"color: #000000;\"\u003ewestwood采用和Reno相同的慢启动算法、拥塞避免算法。\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003ewestwood的主要改进方面：在发送端做带宽估计，当探测到丢包时，根据带宽值来设置拥塞窗口、\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e慢启动阈值。\u003c/span\u003e 那么，这个算法是怎么测量带宽的？每个RTT时间，会测量一次带宽，测量带宽的公式很简单，就是这段RTT内成功被ack了多少字节。因为，这个带宽和用RTT计算RTO一样，也是需要从每个样本来平滑到一个值的——也是用一个加权移平均的公式。 另外，我们知道，如果一个网络的带宽是每秒可以发送X个字节，而RTT是一个数据发出去后确认需要的时候，所以，X * RTT应该是我们缓冲区大小。所以，在这个算法中，ssthresh的值就是est_BD * min-RTT(最小的RTT值)，如果丢包是Duplicated ACKs引起的，那么如果cwnd \u0026gt; ssthresh，则 cwin = ssthresh。如果是RTO引起的，cwnd = 1，进入慢启动。   关于这个算法实现，你可以参看Linux源码： \u003ca href=\"http://lxr.free-electrons.com/source/net/ipv4/tcp_westwood.c\" target=\"_blank\"\u003e/net/ipv4/tcp_westwood.c\u003c/a\u003e\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%85%B6%E5%AE%83\"\u003e\u003c/span\u003e其它\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e更多的算法，你可以从Wikipedia的 \u003ca href=\"https://en.wikipedia.org/wiki/TCP_congestion-avoidance_algorithm\" target=\"_blank\"\u003eTCP Congestion Avoidance Algorithm\u003c/a\u003e 词条中找到相关的线索\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"_%E5%90%8E%E8%AE%B0\"\u003e\u003c/span\u003e 后记\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e好了，到这里我想可以结束了，TCP发展到今天，里面的东西可以写上好几本书。本文主要目的，还是把你带入这些古典的基础技术和知识中，希望本文能让你了解TCP，更希望本文能让你开始有学习这些基础或底层知识的兴趣和信心。\u003c/p\u003e\n\u003cp\u003e当然，TCP东西太多了，不同的人可能有不同的理解，而且本文可能也会有一些荒谬之言甚至错误，还希望得到您的反馈和批评。\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e（全文完）\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/22263.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2022/07/wall_clock-300x167-1-150x150.jpeg\" alt=\"从一次经历谈 TIME_WAIT 的那些事\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/22263.html\" class=\"wp_rp_title\"\u003e从一次经历谈 TIME_WAIT 的那些事\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/19840.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2019/10/HTTP-770x513-300x200-1-150x150.jpg\" alt=\"HTTP的前世今生\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/19840.html\" class=\"wp_rp_title\"\u003eHTTP的前世今生\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11564.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/05/tin-can-phone-150x150.jpg\" alt=\"TCP 的那些事儿（上）\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11564.html\" class=\"wp_rp_title\"\u003eTCP 的那些事儿（上）\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/9859.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/06/Alan-Cox-150x150.jpg\" alt=\"Alan Cox：单向链表中prev指针的妙用\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/9859.html\" class=\"wp_rp_title\"\u003eAlan Cox：单向链表中prev指针的妙用\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/7490.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/06/f1-150x150.jpg\" alt=\"性能调优攻略\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/7490.html\" class=\"wp_rp_title\"\u003e性能调优攻略\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/1484.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2009/09/tcp1-150x150.jpg\" alt=\"TCP网络关闭的状态变换时序图\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/1484.html\" class=\"wp_rp_title\"\u003eTCP网络关闭的状态变换时序图\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-11609\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"970869c80c\"\u003e\u003cimg id=\"rating_11609_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(11609, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.7, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a6a362344dea45ddf9a9765b-=\"\"/\u003e\u003cimg id=\"rating_11609_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(11609, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.7, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a6a362344dea45ddf9a9765b-=\"\"/\u003e\u003cimg id=\"rating_11609_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(11609, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.7, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a6a362344dea45ddf9a9765b-=\"\"/\u003e\u003cimg id=\"rating_11609_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(11609, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.7, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a6a362344dea45ddf9a9765b-=\"\"/\u003e\u003cimg id=\"rating_11609_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(11609, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.7, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a6a362344dea45ddf9a9765b-=\"\"/\u003e (\u003cstrong\u003e104\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.70\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_11609_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"TCP 的那些事儿（下）\"/\u003e\u003cmeta itemprop=\"headline\" content=\"TCP 的那些事儿（下）\"/\u003e\u003cmeta itemprop=\"description\" content=\"这篇文章是下篇，所以如果你对TCP不熟悉的话，还请你先看看上篇《TCP的那些事儿（上）》 上篇中，我们介绍了TCP的协议头、状态机、数据重传中的东西。但是TCP要解决一个很大的事，那就是要在一个网络根据不同的情况来动态调整自己的发包的速度，小则让自己的连接更稳定，大则让整个网络更稳定。在你阅读下篇之前，你需要做好准备，本篇文章有好些算法和策略，可能会引发你的各种思考，让你的大脑分配很多内存和计算资...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2014-05-28T08:20:32+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2016-07-30T21:31:41+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/11609.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/11609.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.7\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"104\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-11609-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2014-05-28T08:20:32+08:00",
  "Author": "陈皓"
}