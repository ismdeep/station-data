{
  "Source": "coolshell.cn",
  "Title": "C++ STL string的Copy-On-Write技术",
  "Link": "https://coolshell.cn/articles/12199.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"66ed00802b53c0f931424654-text/javascript\"\u003e\u003c/script\u003eScott Meyers在《More Effective C++》中举了个例子，不知你是否还记得？在你还在上学的时候，你的父母要你不要看电视，而去复习功课，于是你把自己关在房间里，做出一副正在复习功课的样子，其实你在干着别的诸如给班上的某位女生写情书之类的事，而一旦你的父母出来在你房间要检查你是否在复习时，你才真正捡起课本看书。这就是“拖延战术”，直到你非要做的时候才去做。\u003c/p\u003e\n\u003cp\u003e当然，这种事情在现实生活中时往往会出事，但其在编程世界中摇身一变，就成为了最有用的技术，正如C++中的可以随处声明变量的特点一样，Scott Meyers推荐我们，在真正需要一个存储空间时才去声明变量（分配内存），这样会得到程序在运行时最小的内存花销。执行到那才会去做分配内存这种比较耗时的工作，这会给我们的程序在运行时有比较好的性能。必竟，20%的程序运行了80%的时间。\u003c/p\u003e\n\u003cp\u003e当然，拖延战术还并不只是这样一种类型，这种技术被我们广泛地应用着，特别是在操作系统当中，当一个程序运行结束时，操作系统并不会急着把其清除出内存，原因是有可能程序还会马上再运行一次（从磁盘把程序装入到内存是个很慢的过程），而只有当内存不够用了，才会把这些还驻留内存的程序清出。\u003c/p\u003e\n\u003cp\u003e写时才拷贝（Copy-On-Write）技术，就是编程界“懒惰行为”——拖延战术的产物。举个例子，比如我们有个程序要写文件，不断地根据网络传来的数据写，如果每一次fwrite或是fprintf都要进行一个磁盘的I/O操作的话，都简直就是性能上巨大的损失，因此通常的做法是，每次写文件操作都写在特定大小的一块内存中（磁盘缓存），只有当我们关闭文件时，才写到磁盘上（这就是为什么如果文件不关闭，所写的东西会丢失的原因）。更有甚者是文件关闭时都不写磁盘，而一直等到关机或是内存不够时才写磁盘，Unix就是这样一个系统，如果非正常退出，那么数据就会丢失，文件就会损坏。\u003c/p\u003e\n\u003cp\u003e呵呵，为了性能我们需要冒这样大的风险，还好我们的程序是不会忙得忘了还有一块数据需要写到磁盘上的，所以这种做法，还是很有必要的。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-12199\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#STL%E7%B1%BBstd_string%E7%9A%84Copy-On-Write\" title=\"STL类std::string的Copy-On-Write\"\u003eSTL类std::string的Copy-On-Write\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E7%89%B9%E6%80%A7\" title=\"特性\"\u003e特性\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#_%E6%B7%B1%E5%85%A5\" title=\" 深入\"\u003e 深入\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#Copy-On-Write%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\" title=\"Copy-On-Write的原理是什么？\"\u003eCopy-On-Write的原理是什么？\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#string%E7%B1%BB%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E6%89%8D%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%9A%84%EF%BC%9F\" title=\"string类在什么情况下才共享内存的？\"\u003estring类在什么情况下才共享内存的？\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#string%E7%B1%BB%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E8%A7%A6%E5%8F%91%E5%86%99%E6%97%B6%E6%89%8D%E6%8B%B7%E8%B4%9D%EF%BC%88Copy-On-Write%EF%BC%89\" title=\"string类在什么情况下触发写时才拷贝（Copy-On-Write）?\"\u003estring类在什么情况下触发写时才拷贝（Copy-On-Write）?\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#Copy-On-Write%E6%97%B6%EF%BC%8C%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F\" title=\"Copy-On-Write时，发生了什么？\"\u003eCopy-On-Write时，发生了什么？\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#Copy-On-Write%E7%9A%84%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84%EF%BC%9F\" title=\"Copy-On-Write的具体实现是怎么样的？\"\u003eCopy-On-Write的具体实现是怎么样的？\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-9\" href=\"#%E5%89%AF%E4%BD%9C%E7%94%A8\" title=\"副作用\"\u003e副作用\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-10\" href=\"#%E5%90%8E%E8%AE%B0\" title=\"后记\"\u003e后记\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"STL%E7%B1%BBstd_string%E7%9A%84Copy-On-Write\"\u003e\u003c/span\u003eSTL类std::string的Copy-On-Write\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e在我们经常使用的STL标准模板库中的string类，也是一个具有写时才拷贝技术的类。C++曾在性能问题上被广泛地质疑和指责过，为了提高性能，STL中的许多类都采用了Copy-On-Write技术。这种偷懒的行为的确使使用STL的程序有着比较高要性能。\u003c/p\u003e\n\u003cp\u003e这里，我想从C++类或是设计模式的角度为各位揭开Copy-On-Write技术在string中实现的面纱，以供各位在用C++进行类库设计时做一点参考。\u003c/p\u003e\n\u003cp\u003e在讲述这项技术之前，我想简单地说明一下string类内存分配的概念。通过常，string类中必有一个私有成员，其是一个char*，用户记录从堆上分配内存的地址，其在构造时分配内存，在析构时释放内存。因为是从堆上分配内存，所以string类在维护这块内存上是格外小心的，string类在返回这块内存地址时，只返回const char*，也就是只读的，如果你要写，你只能通过string提供的方法进行数据的改写。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%89%B9%E6%80%A7\"\u003e\u003c/span\u003e特性\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e由表及里，由感性到理性，我们先来看一看string类的Copy-On-Write的表面特征。让我们写下下面的一段程序：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\n#include \u0026lt;string\u0026gt;\nusing namespace std;\n \nmain()\n{\n    string str1 = \u0026#34;hello world\u0026#34;;\n    string str2 = str1;\n\n    printf (\u0026#34;Sharing the memory:/n\u0026#34;);\n    printf (\u0026#34;/tstr1\u0026#39;s address: %x/n\u0026#34;, str1.c_str() );\n    printf (\u0026#34;/tstr2\u0026#39;s address: %x/n\u0026#34;, str2.c_str() );\n\n    str1[1]=\u0026#39;q\u0026#39;;\n    str2[1]=\u0026#39;w\u0026#39;;\n\n    printf (\u0026#34;After Copy-On-Write:/n\u0026#34;);\n    printf (\u0026#34;/tstr1\u0026#39;s address: %x/n\u0026#34;, str1.c_str() );\n    printf (\u0026#34;/tstr2\u0026#39;s address: %x/n\u0026#34;, str2.c_str() );\n\n    return 0;\n}\u003c/pre\u003e\n\u003cp\u003e这个程序的意图就是让第二个\u003cspan lang=\"EN\"\u003estring\u003c/span\u003e通过第一个\u003cspan lang=\"EN\"\u003estring\u003c/span\u003e构造，然后打印出其存放数据的内存地址，然后分别修改\u003cspan lang=\"EN\"\u003estr1\u003c/span\u003e和\u003cspan lang=\"EN\"\u003estr2\u003c/span\u003e的内容，再查一下其存放内存的地址。程序的输出是这样的（我在\u003cspan lang=\"EN\"\u003eVC6.0\u003c/span\u003e和\u003cspan lang=\"EN\"\u003eg++ 2.95\u003c/span\u003e都得到了同样的结果）：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e\u0026gt; g++ -o stringTest stringTest.cpp\n\u0026gt; ./stringTest\nSharing the memory:\n        str1\u0026#39;s address: 343be9\n        str2\u0026#39;s address: 343be9\nAfter Copy-On-Write:\n        str1\u0026#39;s address: 3407a9\n        str2\u0026#39;s address: 343be9\u003c/pre\u003e\n\u003cp\u003e从结果中我们可以看到，在开始的两个语句后，\u003cspan lang=\"EN\"\u003estr1\u003c/span\u003e和\u003cspan lang=\"EN\"\u003estr2\u003c/span\u003e存放数据的地址是一样的，而在修改内容后，\u003cspan lang=\"EN\"\u003estr1\u003c/span\u003e的地址发生了变化，而\u003cspan lang=\"EN\"\u003estr2\u003c/span\u003e的地址还是原来的。从这个例子，我们可以看到\u003cspan lang=\"EN\"\u003estring\u003c/span\u003e类的\u003cspan lang=\"EN\"\u003eCopy-On-Write\u003c/span\u003e技术。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"_%E6%B7%B1%E5%85%A5\"\u003e\u003c/span\u003e 深入\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e在深入这前，通过上述的演示，我们应该知道在string类中，要实现写时才拷贝，需要解决两个问题，一个是内存共享，一个是Copy-On-Wirte，这两个主题会让我们产生许多疑问，还是让我们带着这样几个问题来学习吧：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1、  Copy-On-Write的原理是什么？\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2、  string类在什么情况下才共享内存的？\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e3、  string类在什么情况下触发写时才拷贝（Copy-On-Write）?\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e4、  Copy-On-Write时，发生了什么？\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e5、  Copy-On-Write的具体实现是怎么样的？\u003c/p\u003e\n\u003cp\u003e喔，你说只要看一看STL中stirng的源码你就可以找到答案了。当然，当然，我也是参考了string的父模板类basic_string的源码。但是，如果你感到看STL的源码就好像看机器码，并严重打击你对C++自信心，乃至产生了自己是否懂C++的疑问，如果你有这样的感觉，那么还是继续往下看我的这篇文章吧。\u003c/p\u003e\n\u003cp\u003eOK，让我们一个问题一个问题地探讨吧，慢慢地所有的技术细节都会浮出水面的。\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Copy-On-Write%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"\u003e\u003c/span\u003eCopy-On-Write的原理是什么？\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e有一定经验的程序员一定知道，Copy-On-Write一定使用了“引用计数”，是的，必然有一个变量类似于RefCnt。当第一个类构造时，string的构造函数会根据传入的参数从堆上分配内存，当有其它类需要这块内存时，这个计数为自动累加，当有类析构时，这个计数会减一，直到最后一个类析构时，此时的RefCnt为1或是0，此时，程序才会真正的Free这块从堆上分配的内存。\u003c/p\u003e\n\u003cp\u003e是的，\u003cstrong\u003e引用计数就是string类中写时才拷贝的原理\u003c/strong\u003e！\u003c/p\u003e\n\u003cp\u003e不过，问题又来了，这个RefCnt该存在在哪里呢？如果存放在string类中，那么每个string的实例都有各自的一套，根本不能共有一个RefCnt，如果是声明成全局变量，或是静态成员，那就是所有的string类共享一个了，这也不行，我们需要的是一个“民主和集中”的一个解决方法。这是如何做到的呢？呵呵，人生就是一个糊涂后去探知，知道后和又糊涂的循环过程。别急别急，在后面我会给你一一道来的。\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"string%E7%B1%BB%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E6%89%8D%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%9A%84%EF%BC%9F\"\u003e\u003c/span\u003estring类在什么情况下才共享内存的？\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e这个问题的答案应该是明显的，根据常理和逻辑，如果一个类要用另一个类的数据，那就可以共享被使用类的内存了。这是很合理的，如果你不用我的，那就不用共享，只有你使用我的，才发生共享。\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e使用别的类的数据时，无非有两种情况，1）以别的类构造自己，2）以别的类赋值。第一种情况时会触发拷贝构造函数，第二种情况会触发赋值操作符。这两种情况我们都可以在类中实现其对应的方法。对于第一种情况，只需要在string类的拷贝构造函数中做点处理，让其引用计数累加；同样，对于第二种情况，只需要重载string类的赋值操作符，同样在其中加上一点处理。\u003c/p\u003e\n\u003cp\u003e唠叨几句：\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e1）构造和赋值的差别\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e对于前面那个例程中的这两句：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estring str1 = \u0026#34;hello world\u0026#34;;\n\nstring str2 = str1;\u003c/pre\u003e\n\u003cp\u003e不要以为有“=”就是赋值操作，其实，这两条语句等价于：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estring str1 (\u0026#34;hello world\u0026#34;);   //调用的是构造函数\n\nstring str2 (str1);            //调用的是拷贝构造函数\u003c/pre\u003e\n\u003cp\u003e如果str2是下面的这样情况：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estring str2;      //调用参数默认为空串的构造函数：string str2(“”);\n\nstr2 = str1;     //调用str2的赋值操作：str2.operator=(str1);\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e2) 另一种情况\u003c/strong\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003echar tmp[]=”hello world”;\n\nstring str1 = tmp;\n\nstring str2 = tmp;\u003c/pre\u003e\n\u003cp\u003e这种情况下会触发内存的共享吗？想当然的，应该要共享。可是根据我们前面所说的共享内存的情况，两个string类的声明和初始语句并不符合我前述的两种情况，所以其并不发生内存共享。而且，C++现有特性也无法让我们做到对这种情况进行类的内存共享。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"string%E7%B1%BB%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E8%A7%A6%E5%8F%91%E5%86%99%E6%97%B6%E6%89%8D%E6%8B%B7%E8%B4%9D%EF%BC%88Copy-On-Write%EF%BC%89\"\u003e\u003c/span\u003estring类在什么情况下触发写时才拷贝（Copy-On-Write）?\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e哦，什么时候会发现写时才拷贝？很显然，当然是在共享同一块内存的类发生内容改变时，才会发生Copy-On-Write。比如string类的[]、=、+=、+、操作符赋值，还有一些string类中诸如insert、replace、append等成员函数,包括类的析构时。\u003c/p\u003e\n\u003cp\u003e修改数据才会触发Copy-On-Write，不修改当然就不会改啦。这就是托延战术的真谛，非到要做的时候才去做。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Copy-On-Write%E6%97%B6%EF%BC%8C%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F\"\u003e\u003c/span\u003eCopy-On-Write时，发生了什么？\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e我们可能根据那个访问计数来决定是否需要拷贝，参看下面的代码：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eIf  ( RefCnt\u0026gt;0 ) {\n    char* tmp =  (char*) malloc(strlen(_Ptr)+1);\n    strcpy(tmp, _Ptr);\n    _Ptr = tmp;\n}\u003c/pre\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e上面的代码是一个假想的拷贝方法，如果有别的类在引用（检查引用计数来获知）这块内存，那么就需要把更改类进行“拷贝”这个动作。\u003c/p\u003e\n\u003cp\u003e我们可以把这个拷的运行封装成一个函数，供那些改变内容的成员函数使用。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Copy-On-Write%E7%9A%84%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84%EF%BC%9F\"\u003e\u003c/span\u003eCopy-On-Write的具体实现是怎么样的？\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e最后的这个问题，我们主要解决的是那个“民主集中”的难题。请先看下面的代码：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estring h1 = “hello”;\nstring h2= h1;\nstring h3;\nh3 = h2;\n \nstring w1 = “world”;\nstring w2(“”);\nw2=w1;\u003c/pre\u003e\n\u003cp\u003e很明显，我们要让h1、h2、h3共享同一块内存，让w1、w2共享同一块内存。因为，在h1、h2、h3中，我们要维护一个引用计数，在w1、w2中我们又要维护一个引用计数。\u003c/p\u003e\n\u003cp\u003e如何使用一个巧妙的方法产生这两个引用计数呢？我们想到了string类的内存是在堆上动态分配的，既然共享内存的各个类指向的是同一个内存区，我们为什么不在这块区上多分配一点空间来存放这个引用计数呢？这样一来，所有共享一块内存区的类都有同样的一个引用计数，而这个变量的地址既然是在共享区上的，那么所有共享这块内存的类都可以访问到，也就知道这块内存的引用者有多少了。\u003c/p\u003e\n\u003cp\u003e请看下图：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" class=\"aligncenter size-full wp-image-12200\" src=\"https://coolshell.cn/wp-content/uploads/2014/12/o_string.jpg\" alt=\"o_string\" width=\"409\" height=\"138\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/12/o_string.jpg 409w, https://coolshell.cn/wp-content/uploads/2014/12/o_string-300x101.jpg 300w\" sizes=\"(max-width: 409px) 100vw, 409px\"/\u003e\u003c/p\u003e\n\u003cp\u003e于是，有了这样一个机制，每当我们为\u003cspan lang=\"EN\"\u003estring\u003c/span\u003e分配内存时，我们总是要多分配一个空间用来存放这个引用计数的值，只要发生拷贝构造可是赋值时，这个内存的值就会加一。而在内容修改时，\u003cspan lang=\"EN\"\u003estring\u003c/span\u003e类为查看这个引用计数是否为\u003cspan lang=\"EN\"\u003e0\u003c/span\u003e，如果不为零，表示有人在共享这块内存，那么自己需要先做一份拷贝，然后把引用计数减去一，再把数据拷贝过来。下面的几个程序片段说明了这两个动作：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e//构造函数（分存内存）\n    string::string(const char* tmp)\n{\n    _Len = strlen(tmp);\n    _Ptr = new char[_Len+1+1];\n    strcpy( _Ptr, tmp );\n    _Ptr[_Len+1]=0;  // 设置引用计数  \n}\n \n//拷贝构造（共享内存）\n    string::string(const string\u0026amp; str)\n    {\n         if (*this != str){\n              this-\u0026gt;_Ptr = str.c_str();   //共享内存\n              this-\u0026gt;_Len = str.szie();\n              this-\u0026gt;_Ptr[_Len+1] ++;  //引用计数加一\n         }\n}\n \n//写时才拷贝Copy-On-Write\nchar\u0026amp; string::operator[](unsigned int idx)\n{\n    if (idx \u0026gt; _Len || _Ptr == 0 ) {\n         static char nullchar = 0;\nreturn nullchar;\n          }\n   \n_Ptr[_Len+1]--;   //引用计数减一\n    char* tmp = new char[_Len+1+1];\n    strncpy( tmp, _Ptr, _Len+1);\n    _Ptr = tmp;\n    _Ptr[_Len+1]=0; // 设置新的共享内存的引用计数\n   \n    return _Ptr[idx];\n}\n\n//析构函数的一些处理\n~string()\n{ \n_Ptr[_Len+1]--;   //引用计数减一\n   \n         // 引用计数为0时，释放内存 \n    if (_Ptr[_Len+1]==0) {\n        delete[] _Ptr;\n         }\n \n}\u003c/pre\u003e\n\u003cp\u003e哈哈，整个技术细节完全浮出水面。\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e不过，这和STL中basic_string的实现细节还有一点点差别，在你打开STL的源码时，你会发现其取引用计数是通过这样的访问：_Ptr[-1]，标准库中，把这个引用计数的内存分配在了前面（我给出来的代码是把引用计数分配以了后面，这很不好），分配在前的好处是当string的长度扩展时，只需要在后面扩展其内存，而不需要移动引用计数的内存存放位置，这又节省了一点时间。\u003c/p\u003e\n\u003cp\u003eSTL中的string的内存结构就像我前面画的那个图一样，_Ptr指着是数据区，而RefCnt则在_Ptr-1 或是_Ptr[-1]处。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%89%AF%E4%BD%9C%E7%94%A8\"\u003e\u003c/span\u003e副作用\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e是谁说的“有太阳的地方就会有黑暗”？或许我们中的许多人都很迷信标准的东西，认为其是久经考验，不可能出错的。呵呵，千万不要有这种迷信，因为任何设计再好，编码再好的代码在某一特定的情况下都会有Bug，STL同样如此，string类的这个共享内存/写时才拷贝技术也不例外，而且这个Bug或许还会让你的整个程序crash掉！\u003c/p\u003e\n\u003cp\u003e不信？！那么让我们来看一个测试案例。假设有一个动态链接库（叫myNet.dll或myNet.so）中有这样一个函数返回的是string类：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estring GetIPAddress(string hostname)\n{\n    static string ip;\n    ……\n    ……\n    return ip;\n}\u003c/pre\u003e\n\u003cp\u003e而你的主程序中动态地载入这个动态链接库，并调用其中的这个函数：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003emain()\n{\n    //载入动态链接库中的函数\n    hDll = LoadLibraray(…..);\n    pFun =  GetModule(hDll, “GetIPAddress”);\n     \n    //调用动态链接库中的函数\n    string ip = (*pFun)(“host1”);\n    ……\n    ……\n    //释放动态链接库\n    FreeLibrary(hDll);\n    ……\n    cout \u0026lt;\u0026lt; ip \u0026lt;\u0026lt; endl;\n}\u003c/pre\u003e\n\u003cp\u003e让我们来看看这段代码，程序以动态方式载入动态链接库中的函数，然后以函数指针的方式调用动态链接库中的函数，并把返回值放在一个string类中，然后释放了这个动态链接库。释放后，输入ip的内容。\u003c/p\u003e\n\u003cp\u003e根据函数的定义，我们知道函数是“值返回”的，所以，函数返回时，一定会调用拷贝构造函数，又根据string类的内存共享机制，在主程序中变量ip是和函数内部的那个静态string变量共享内存（这块内存区是在动态链接库的地址空间的）。而我们假设在整个主程序中都没有对ip的值进行修改过。那么在当主程序释放了动态链接库后，那个共享的内存区也随之释放。所以，以后对ip的访问，必然做造成内存地址访问非法，造成程序crash。即使你在以后没有使用到ip这个变量，那么在主程序退出时也会发生内存访问异常，因为程序退出时，ip会析构，在析构时就会发生内存访问异常。\u003c/p\u003e\n\u003cp\u003e内存访问异常，意味着两件事：1）无论你的程序再漂亮，都会因为这个错误变得暗淡无光，你的声誉也会因为这个错误受到损失。2）未来的一段时间，你会被这个系统级错误所煎熬（在C++世界中，找到并排除这种内存错误并不是一件容易的事情）。这是C/C++程序员永远的心头之痛，千里之堤，溃于蚁穴。而如果你不清楚string类的这种特征，在成千上万行代码中找这样一个内存异常，简直就是一场噩梦。\u003c/p\u003e\n\u003cp\u003e备注：要改正上述的Bug，有很多种方法，这里提供一种仅供参考：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estring ip = (*pFun)(“host1”).cstr();\u003c/code\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%90%8E%E8%AE%B0\"\u003e\u003c/span\u003e后记\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e文章到这里也应该结束了，这篇文章的主要有以下几个目的：\u003c/p\u003e\n\u003cp\u003e1）向大家介绍一下写时才拷贝/内存共享这种技术。\u003cbr/\u003e\n2）以STL中的string类为例，向大家介绍了一种设计模式。\u003cbr/\u003e\n3）在C++世界中，无论你的设计怎么精巧，代码怎么稳固，都难以照顾到所有的情况。智能指针更是一个典型的例子，无论你怎么设计，都会有非常严重的BUG。\u003cbr/\u003e\n4）C++是一把双刃剑，只有了解了原理，你才能更好的使用C++。否则，必将引火烧身。如果你在设计和使用类库时有一种“玩C++就像玩火，必须千万小心”的感觉，那么你就入门了，等你能把这股“火”控制的得心应手时，那才是学成了。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e更新：在最新的STL中，这个特性已经被去掉了。有一个原因是线程不安全！COW其实还是比较危险的。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/3806.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2011/02/C_String-150x150.jpg\" alt=\"Google图片搜索下的的C String\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/3806.html\" class=\"wp_rp_title\"\u003eGoogle图片搜索下的的C String\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/3036.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/19.jpg\" alt=\"面向对象是个骗局？！\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/3036.html\" class=\"wp_rp_title\"\u003e面向对象是个骗局？！\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/03/rust-social-wide-150x150.jpg\" alt=\"Rust语言的编程范式\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_title\"\u003eRust语言的编程范式\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/07/api-design-300x278-2-150x150.jpg\" alt=\"API设计原则 – Qt官网的设计实践总结\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_title\"\u003eAPI设计原则 – Qt官网的设计实践总结\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"Leetcode 编程训练\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_title\"\u003eLeetcode 编程训练\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-12199\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"769a00d108\"\u003e\u003cimg id=\"rating_12199_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(12199, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-66ed00802b53c0f931424654-=\"\"/\u003e\u003cimg id=\"rating_12199_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(12199, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-66ed00802b53c0f931424654-=\"\"/\u003e\u003cimg id=\"rating_12199_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(12199, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-66ed00802b53c0f931424654-=\"\"/\u003e\u003cimg id=\"rating_12199_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(12199, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-66ed00802b53c0f931424654-=\"\"/\u003e\u003cimg id=\"rating_12199_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(12199, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-66ed00802b53c0f931424654-=\"\"/\u003e (\u003cstrong\u003e57\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.23\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_12199_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"C++ STL string的Copy-On-Write技术\"/\u003e\u003cmeta itemprop=\"headline\" content=\"C++ STL string的Copy-On-Write技术\"/\u003e\u003cmeta itemprop=\"description\" content=\"Scott Meyers在《More Effective C++》中举了个例子，不知你是否还记得？在你还在上学的时候，你的父母要你不要看电视，而去复习功课，于是你把自己关在房间里，做出一副正在复习功课的样子，其实你在干着别的诸如给班上的某位女生写情书之类的事，而一旦你的父母出来在你房间要检查你是否在复习时，你才真正捡起课本看书。这就是“拖延战术”，直到你非要做的时候才去做。\n\n当然，这种事情在...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2004-06-23T10:36:50+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2014-12-04T10:56:21+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/12199.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/12199.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.23\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"57\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-12199-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2004-06-23T10:36:50+08:00",
  "Author": "陈皓"
}