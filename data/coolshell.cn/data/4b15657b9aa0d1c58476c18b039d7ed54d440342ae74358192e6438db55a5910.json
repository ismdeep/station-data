{
  "Source": "coolshell.cn",
  "Title": "Javascript 面向对象编程",
  "Link": "https://coolshell.cn/articles/6441.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"61ba2788f7cbf85a4752e71d-text/javascript\"\u003e\u003c/script\u003eJavascript是一个类C的语言，他的面向对象的东西相对于C++/Java比较奇怪，但是其的确相当的强大，在 \u003ca href=\"http://www.cnblogs.com/weidagang2046/\" target=\"_blank\"\u003eTodd 同学\u003c/a\u003e的“\u003ca title=\"对象的消息模型\" href=\"https://coolshell.cn/articles/5202.html\" rel=\"bookmark\" target=\"_blank\"\u003e对象的消息模型\u003c/a\u003e”一文中我们已经可以看到一些端倪了。这两天有个前同事总在问我Javascript面向对象的东西，所以，索性写篇文章让他看去吧，这里这篇文章主要想从一个整体的角度来说明一下Javascript的面向对象的编程。（\u003cstrong\u003e成文比较仓促，应该有不准确或是有误的地方，请大家批评指正\u003c/strong\u003e）\u003c/p\u003e\n\u003cp\u003e另，这篇文章主要基于 \u003ca href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\" target=\"_blank\"\u003eECMAScript 5\u003c/a\u003e， 旨在介绍新技术。关于兼容性的东西，请看最后一节。\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E5%88%9D%E6%8E%A2\" title=\"初探\"\u003e初探\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E5%B1%9E%E6%80%A7%E9%85%8D%E7%BD%AE_%E2%80%93_ObjectdefineProperty\" title=\"属性配置 – Object.defineProperty\"\u003e属性配置 – Object.defineProperty\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#GetSet_%E8%AE%BF%E9%97%AE%E5%99%A8\" title=\"Get/Set 访问器\"\u003eGet/Set 访问器\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E6%9F%A5%E7%9C%8B%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E9%85%8D%E7%BD%AE\" title=\"查看对象属性配置\"\u003e查看对象属性配置\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#call%EF%BC%8Capply%EF%BC%8C_bind_%E5%92%8C_this\" title=\"call，apply， bind 和 this\"\u003ecall，apply， bind 和 this\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#%E7%BB%A7%E6%89%BF_%E5%92%8C_%E9%87%8D%E8%BD%BD\" title=\"继承 和 重载\"\u003e继承 和 重载\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#%E7%BB%84%E5%90%88\" title=\"组合\"\u003e组合\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#Prototype_%E5%92%8C_%E7%BB%A7%E6%89%BF\" title=\"Prototype 和 继承\"\u003ePrototype 和 继承\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-9\" href=\"#%E5%85%BC%E5%AE%B9%E6%80%A7\" title=\"兼容性\"\u003e兼容性\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-10\" href=\"#Objectcreate%E5%87%BD%E6%95%B0\" title=\"Object.create()函数\"\u003eObject.create()函数\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-11\" href=\"#defineProperty%E5%87%BD%E6%95%B0\" title=\"defineProperty()函数\"\u003edefineProperty()函数\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-12\" href=\"#keys%E5%87%BD%E6%95%B0\" title=\"keys()函数\"\u003ekeys()函数\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-13\" href=\"#ObjectgetPrototypeOf_%E5%87%BD%E6%95%B0\" title=\"Object.getPrototypeOf() 函数\"\u003eObject.getPrototypeOf() 函数\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-14\" href=\"#bind_%E5%87%BD%E6%95%B0\" title=\"bind 函数\"\u003ebind 函数\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-15\" href=\"#%E5%8F%82%E8%80%83\" title=\"参考\"\u003e参考\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%88%9D%E6%8E%A2\"\u003e\u003c/span\u003e初探\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e我们知道Javascript中的变量定义基本如下：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003evar name = \u0026#39;Chen Hao\u0026#39;;;\nvar email = \u0026#39;haoel(@)hotmail.com\u0026#39;;\nvar website = \u0026#39;https://coolshell.cn\u0026#39;;\u003c/pre\u003e\n\u003cp\u003e如果要用对象来写的话，就是下面这个样子：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003evar chenhao = {\n    name :\u0026#39;Chen Hao\u0026#39;,\n    email : \u0026#39;haoel(@)hotmail.com\u0026#39;,\n    website : \u0026#39;https://coolshell.cn\u0026#39;\n};\u003c/pre\u003e\n\u003cp\u003e于是，我就可以这样访问：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003e//以成员的方式\nchenhao.name;\nchenhao.email;\nchenhao.website;\n\n//以hash map的方式\nchenhao[\u0026#34;name\u0026#34;];\nchenhao[\u0026#34;email\u0026#34;];\nchenhao[\u0026#34;website\u0026#34;];\n\u003c/pre\u003e\n\u003cp\u003e关于函数，我们知道Javascript的函数是这样的：\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-6441\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003evar doSomething = function(){\n   alert(\u0026#39;Hello World.\u0026#39;);\n};\u003c/pre\u003e\n\u003cp\u003e于是，我们可以这么干：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003evar sayHello = function(){\n   var hello = \u0026#34;Hello, I\u0026#39;m \u0026#34;+ this.name\n                + \u0026#34;, my email is: \u0026#34; + this.email\n                + \u0026#34;, my website is: \u0026#34; + this.website;\n   alert(hello);\n};\n\n//直接赋值，这里很像C/C++的函数指针\nchenhao.Hello = sayHello;\n\nchenhao.Hello();\n\u003c/pre\u003e\n\u003cp\u003e相信这些东西都比较简单，大家都明白了。 可以看到javascript对象函数是直接声明，直接赋值，直接就用了。runtime的动态语言。\u003c/p\u003e\n\u003cp\u003e还有一种比较规范的写法是：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003e//我们可以看到， 其用function来做class。\nvar Person = function(name, email, website){\n    this.name = name;\n    this.email = email;\n    this.website = website;\n\n    this.sayHello = function(){\n        var hello = \u0026#34;Hello, I\u0026#39;m \u0026#34;+ this.name  + \u0026#34;, \\n\u0026#34; +\n                    \u0026#34;my email is: \u0026#34; + this.email + \u0026#34;, \\n\u0026#34; +\n                    \u0026#34;my website is: \u0026#34; + this.website;\n        alert(hello);\n    };\n};\n\nvar chenhao = new Person(\u0026#34;Chen Hao\u0026#34;, \u0026#34;\u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"492128262c250921263d24282025672a2624\"\u003e[email protected]\u003c/a\u003e\u0026#34;,\n                                     \u0026#34;https://coolshell.cn\u0026#34;);\nchenhao.sayHello(); \u003c/pre\u003e\n\u003cp\u003e顺便说一下，要删除对象的属性，很简单：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003edelete chenhao[\u0026#39;email\u0026#39;]\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e上面的这些例子，我们可以看到这样几点：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eJavascript的数据和成员封装很简单。没有类完全是对象操作。纯动态！\u003c/li\u003e\n\u003cli\u003eJavascript function中的this指针很关键，如果没有的话，那就是局部变量或局部函数。\u003c/li\u003e\n\u003cli\u003eJavascript对象成员函数可以在使用时临时声明，并把一个全局函数直接赋过去就好了。\u003c/li\u003e\n\u003cli\u003eJavascript的成员函数可以在实例上进行修改，也就是说不同实例相同函数名的行为不一定一样。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%B1%9E%E6%80%A7%E9%85%8D%E7%BD%AE_%E2%80%93_ObjectdefineProperty\"\u003e\u003c/span\u003e属性配置 – Object.defineProperty\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e先看下面的代码：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003e//创建对象\nvar chenhao = Object.create(null);\n\n//设置一个属性\n Object.defineProperty( chenhao,\n                \u0026#39;name\u0026#39;, { value:  \u0026#39;Chen Hao\u0026#39;,\n                          writable:     true,\n                          configurable: true,\n                          enumerable:   true });\n\n//设置多个属性\nObject.defineProperties( chenhao,\n    {\n        \u0026#39;email\u0026#39;  : { value:  \u0026#39;\u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"5d353c3238311d353229303c3431733e3230\"\u003e[email protected]\u003c/a\u003e\u0026#39;,\n                     writable:     true,\n                     configurable: true,\n                     enumerable:   true },\n        \u0026#39;website\u0026#39;: { value: \u0026#39;https://coolshell.cn\u0026#39;,\n                     writable:     true,\n                     configurable: true,\n                     enumerable:   true }\n    }\n);\n\u003c/pre\u003e\n\u003cp\u003e下面就说说这些属性配置是什么意思。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ewritable：这个属性的值是否可以改。\u003c/li\u003e\n\u003cli\u003econfigurable：这个属性的配置是否可以改。\u003c/li\u003e\n\u003cli\u003eenumerable：这个属性是否能在for…in循环中遍历出来或在Object.keys中列举出来。\u003c/li\u003e\n\u003cli\u003evalue：属性值。\u003c/li\u003e\n\u003cli\u003eget()/set(_value)：get和set访问器。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"GetSet_%E8%AE%BF%E9%97%AE%E5%99%A8\"\u003e\u003c/span\u003eGet/Set 访问器\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e关于get/set访问器，它的意思就是用get/set来取代value（其不能和value一起使用），示例如下：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003evar  age = 0;\nObject.defineProperty( chenhao,\n            \u0026#39;age\u0026#39;, {\n                      get: function() {return age+1;},\n                      set: function(value) {age = value;}\n                      enumerable : true,\n                      configurable : true\n                    }\n);\nchenhao.age = 100; //调用set\nalert(chenhao.age); //调用get 输出101（get中+1了）;\n\u003c/pre\u003e\n\u003cp\u003e我们再看一个更为实用的例子——利用已有的属性(age)通过get和set构造新的属性(birth_year)：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003eObject.defineProperty( chenhao,\n            \u0026#39;birth_year\u0026#39;,\n            {\n                get: function() {\n                    var d = new Date();\n                    var y = d.getFullYear();\n                    return ( y - this.age );\n                },\n                set: function(year) {\n                    var d = new Date();\n                    var y = d.getFullYear();\n                    this.age = y - year;\n                }\n            }\n);\n\nalert(chenhao.birth_year);\nchenhao.birth_year = 2000;\nalert(chenhao.age);\n\u003c/pre\u003e\n\u003cp\u003e这样做好像有点麻烦，你说，我为什么不写成下面这个样子：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003evar chenhao = {\n    name: \u0026#34;Chen Hao\u0026#34;,\n    email: \u0026#34;\u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"8de5ece2e8e1cde5e2f9e0ece4e1a3eee2e0\"\u003e[email protected]\u003c/a\u003e\u0026#34;,\n    website: \u0026#34;https://coolshell.cn\u0026#34;,\n    age: 100,\n    get birth_year() {\n        var d = new Date();\n        var y = d.getFullYear();\n        return ( y - this.age );\n    },\n    set birth_year(year) {\n        var d = new Date();\n        var y = d.getFullYear();\n        this.age = y - year;\n    }\n\n};\nalert(chenhao.birth_year);\nchenhao.birth_year = 2000;\nalert(chenhao.age);\n\u003c/pre\u003e\n\u003cp\u003e是的，你的确可以这样的，不过通过defineProperty()你可以干这些事：\u003cbr/\u003e\n1）设置如 writable，configurable，enumerable 等这类的属性配置。\u003cbr/\u003e\n2）动态地为一个对象加属性。比如：一些HTML的DOM对像。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%9F%A5%E7%9C%8B%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E9%85%8D%E7%BD%AE\"\u003e\u003c/span\u003e查看对象属性配置\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e如果查看并管理对象的这些配置，下面有个程序可以输出对象的属性和配置等东西：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003e//列出对象的属性.\nfunction listProperties(obj)\n{\n    var newLine = \u0026#34;\u0026lt;br /\u0026gt;\u0026#34;;\n    var names = Object.getOwnPropertyNames(obj);\n    for (var i = 0; i \u0026lt; names.length; i++) {\n        var prop = names[i];\n        document.write(prop + newLine);\n\n        // 列出对象的属性配置（descriptor）动用getOwnPropertyDescriptor函数。\n        var descriptor = Object.getOwnPropertyDescriptor(obj, prop);\n        for (var attr in descriptor) {\n            document.write(\u0026#34;...\u0026#34; + attr + \u0026#39;: \u0026#39; + descriptor[attr]);\n            document.write(newLine);\n        }\n        document.write(newLine);\n    }\n}\n\nlistProperties(chenhao);\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"call%EF%BC%8Capply%EF%BC%8C_bind_%E5%92%8C_this\"\u003e\u003c/span\u003ecall，apply， bind 和 this\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e关于Javascript的this指针，和C++/Java很类似。 我们来看个示例：（这个示例很简单了，我就不多说了）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003efunction print(text){\n    document.write(this.value + \u0026#39; - \u0026#39; + text+ \u0026#39;\u0026lt;br\u0026gt;\u0026#39;);\n}\n\nvar a = {value: 10, print : print};\nvar b = {value: 20, print : print};\n\nprint(\u0026#39;hello\u0026#39;);// this =\u0026gt; global, output \u0026#34;undefined - hello\u0026#34;\n\na.print(\u0026#39;a\u0026#39;);// this =\u0026gt; a, output \u0026#34;10 - a\u0026#34;\nb.print(\u0026#39;b\u0026#39;); // this =\u0026gt; b, output \u0026#34;20 - b\u0026#34;\n\na[\u0026#39;print\u0026#39;](\u0026#39;a\u0026#39;); // this =\u0026gt; a, output \u0026#34;10 - a\u0026#34;\n\u003c/pre\u003e\n\u003cp\u003e我们再来看看call 和 apply，这两个函数的差别就是参数的样子不一样，另一个就是性能不一样，apply的性能要差很多。（关于性能，可到 \u003ca href=\"http://jsperf.com/\" target=\"_blank\"\u003eJSPerf\u003c/a\u003e 上去跑跑看看）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003eprint.call(a, \u0026#39;a\u0026#39;); // this =\u0026gt; a, output \u0026#34;10 - a\u0026#34;\nprint.call(b, \u0026#39;b\u0026#39;); // this =\u0026gt; b, output \u0026#34;20 - b\u0026#34;\n\nprint.apply(a, [\u0026#39;a\u0026#39;]); // this =\u0026gt; a, output \u0026#34;10 - a\u0026#34;\nprint.apply(b, [\u0026#39;b\u0026#39;]); // this =\u0026gt; b, output \u0026#34;20 - b\u0026#34;\u003c/pre\u003e\n\u003cp\u003e但是在bind后，this指针，可能会有不一样，但是因为Javascript是动态的。如下面的示例\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003evar p = print.bind(a);\np(\u0026#39;a\u0026#39;);             // this =\u0026gt; a, output \u0026#34;10 - a\u0026#34;\np.call(b, \u0026#39;b\u0026#39;);     // this =\u0026gt; a, output \u0026#34;10 - b\u0026#34;\np.apply(b, [\u0026#39;b\u0026#39;]);  // this =\u0026gt; a, output \u0026#34;10 - b\u0026#34;\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%BB%A7%E6%89%BF_%E5%92%8C_%E9%87%8D%E8%BD%BD\"\u003e\u003c/span\u003e继承 和 重载\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e通过上面的那些示例，我们可以通过Object.create()来实际继承，请看下面的代码，Student继承于Object。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"20\"\u003evar Person = Object.create(null);\n\nObject.defineProperties\n(\n    Person,\n    {\n        \u0026#39;name\u0026#39;  : {  value: \u0026#39;Chen Hao\u0026#39;},\n        \u0026#39;email\u0026#39;  : { value : \u0026#39;\u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"375f5658525b775f58435a565e5b1954585a\"\u003e[email protected]\u003c/a\u003e\u0026#39;},\n        \u0026#39;website\u0026#39;: { value: \u0026#39;https://coolshell.cn\u0026#39;}\n    }\n);\n\nPerson.sayHello = function () {\n    var hello = \u0026#34;\u0026lt;p\u0026gt;Hello, I am \u0026#34;+ this.name  + \u0026#34;, \u0026lt;br\u0026gt;\u0026#34; +\n                \u0026#34;my email is: \u0026#34; + this.email + \u0026#34;, \u0026lt;br\u0026gt;\u0026#34; +\n                \u0026#34;my website is: \u0026#34; + this.website;\n    document.write(hello + \u0026#34;\u0026lt;br\u0026gt;\u0026#34;);\n}\n\nvar Student = Object.create(Person);\nStudent.no = \u0026#34;1234567\u0026#34;; //学号\nStudent.dept = \u0026#34;Computer Science\u0026#34;; //系\n\n//使用Person的属性\ndocument.write(Student.name + \u0026#39; \u0026#39; + Student.email + \u0026#39; \u0026#39; + Student.website +\u0026#39;\u0026lt;br\u0026gt;\u0026#39;);\n\n//使用Person的方法\nStudent.sayHello();\n\n//重载SayHello方法\nStudent.sayHello = function (person) {\n    var hello = \u0026#34;\u0026lt;p\u0026gt;Hello, I am \u0026#34;+ this.name  + \u0026#34;, \u0026lt;br\u0026gt;\u0026#34; +\n                \u0026#34;my email is: \u0026#34; + this.email + \u0026#34;, \u0026lt;br\u0026gt;\u0026#34; +\n                \u0026#34;my website is: \u0026#34; + this.website + \u0026#34;, \u0026lt;br\u0026gt;\u0026#34; +\n                \u0026#34;my student no is: \u0026#34; + this. no + \u0026#34;, \u0026lt;br\u0026gt;\u0026#34; +\n                \u0026#34;my departent is: \u0026#34; + this. dept;\n    document.write(hello + \u0026#39;\u0026lt;br\u0026gt;\u0026#39;);\n}\n//再次调用\nStudent.sayHello();\n\n//查看Student的属性（只有 no 、 dept 和 重载了的sayHello）\ndocument.write(\u0026#39;\u0026lt;p\u0026gt;\u0026#39; + Object.keys(Student) + \u0026#39;\u0026lt;br\u0026gt;\u0026#39;);\n\u003c/pre\u003e\n\u003cp\u003e通用上面这个示例，我们可以看到，Person里的属性并没有被真正复制到了Student中来，但是我们可以去存取。这是因为Javascript用委托实现了这一机制。其实，这就是Prototype，Person是Student的Prototype。\u003c/p\u003e\n\u003cp\u003e当我们的代码需要一个属性的时候，Javascript的引擎会先看当前的这个对象中是否有这个属性，如果没有的话，就会查找他的Prototype对象是否有这个属性，一直继续下去，直到找到或是直到没有Prototype对象。\u003c/p\u003e\n\u003cp\u003e为了证明这个事，我们可以使用Object.getPrototypeOf()来检验一下：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003eStudent.name = \u0026#39;aaa\u0026#39;;\n\n//输出 aaa\ndocument.write(\u0026#39;\u0026lt;p\u0026gt;\u0026#39; + Student.name + \u0026#39;\u0026lt;/p\u0026gt;\u0026#39;);\n\n//输出 Chen Hao\ndocument.write(\u0026#39;\u0026lt;p\u0026gt;\u0026#39; +Object.getPrototypeOf(Student).name + \u0026#39;\u0026lt;/p\u0026gt;\u0026#39;);\u003c/pre\u003e\n\u003cp\u003e于是，你还可以在子对象的函数里调用父对象的函数，就好像C++里的 Base::func() 一样。于是，我们重载hello的方法就可以使用父类的代码了，如下所示：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"3\"\u003e//新版的重载SayHello方法\nStudent.sayHello = function (person) {\n    Object.getPrototypeOf(this).sayHello.call(this);\n    var hello = \u0026#34;my student no is: \u0026#34; + this. no + \u0026#34;, \u0026lt;br\u0026gt;\u0026#34; +\n                \u0026#34;my departent is: \u0026#34; + this. dept;\n    document.write(hello + \u0026#39;\u0026lt;br\u0026gt;\u0026#39;);\n}\u003c/pre\u003e\n\u003cp\u003e这个很强大吧。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%BB%84%E5%90%88\"\u003e\u003c/span\u003e组合\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e上面的那个东西还不能满足我们的要求，我们可能希望这些对象能真正的组合起来。为什么要组合？因为我们都知道是这是OO设计的最重要的东西。不过，这对于Javascript来并没有支持得特别好，不好我们依然可以搞定个事。\u003c/p\u003e\n\u003cp\u003e首先，我们需要定义一个Composition的函数：（target是作用于是对象，source是源对象），下面这个代码还是很简单的，就是把source里的属性一个一个拿出来然后定义到target中。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003efunction Composition(target, source)\n{\n    var desc  = Object.getOwnPropertyDescriptor;\n    var prop  = Object.getOwnPropertyNames;\n    var def_prop = Object.defineProperty;\n\n    prop(source).forEach(\n        function(key) {\n            def_prop(target, key, desc(source, key))\n        }\n    )\n    return target;\n}\n\u003c/pre\u003e\n\u003cp\u003e有了这个函数以后，我们就可以这来玩了：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"19,23\"\u003e//艺术家\nvar Artist = Object.create(null);\nArtist.sing = function() {\n    return this.name + \u0026#39; starts singing...\u0026#39;;\n}\nArtist.paint = function() {\n    return this.name + \u0026#39; starts painting...\u0026#39;;\n}\n\n//运动员\nvar Sporter = Object.create(null);\nSporter.run = function() {\n    return this.name + \u0026#39; starts running...\u0026#39;;\n}\nSporter.swim = function() {\n    return this.name + \u0026#39; starts swimming...\u0026#39;;\n}\n\nComposition(Person, Artist);\ndocument.write(Person.sing() + \u0026#39;\u0026lt;br\u0026gt;\u0026#39;);\ndocument.write(Person.paint() + \u0026#39;\u0026lt;br\u0026gt;\u0026#39;);\n\nComposition(Person, Sporter);\ndocument.write(Person.run() + \u0026#39;\u0026lt;br\u0026gt;\u0026#39;);\ndocument.write(Person.swim() + \u0026#39;\u0026lt;br\u0026gt;\u0026#39;);\n\n//看看 Person中有什么？（输出：sayHello,sing,paint,swim,run）\ndocument.write(\u0026#39;\u0026lt;p\u0026gt;\u0026#39; + Object.keys(Person) + \u0026#39;\u0026lt;br\u0026gt;\u0026#39;);\n\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Prototype_%E5%92%8C_%E7%BB%A7%E6%89%BF\"\u003e\u003c/span\u003ePrototype 和 继承\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e我们先来说说Prototype。我们先看下面的例程，这个例程不需要解释吧，很像C语言里的函数指针，在C语言里这样的东西见得多了。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003evar plus = function(x,y){\n    document.write( x + \u0026#39; + \u0026#39; + y + \u0026#39; = \u0026#39; + (x+y) + \u0026#39;\u0026lt;br\u0026gt;\u0026#39;);\n    return x + y;\n};\n\nvar minus = function(x,y){\n    document.write(x + \u0026#39; - \u0026#39; + y + \u0026#39; = \u0026#39; + (x-y) + \u0026#39;\u0026lt;br\u0026gt;\u0026#39;);\n    return x - y;\n};\n\nvar operations = {\n    \u0026#39;+\u0026#39;: plus,\n    \u0026#39;-\u0026#39;: minus\n};\n\nvar calculate = function(x, y, operation){\n    return operations[operation](x, y);\n};\n\ncalculate(12, 4, \u0026#39;+\u0026#39;);\ncalculate(24, 3, \u0026#39;-\u0026#39;);\n\u003c/pre\u003e\n\u003cp\u003e那么，我们能不能把这些东西封装起来呢，我们需要使用prototype。看下面的示例：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"6,11\"\u003evar Cal = function(x, y){\n    this.x = x;\n    this.y = y;\n}\n\nCal.prototype.operations = {\n    \u0026#39;+\u0026#39;: function(x, y) { return x+y;},\n    \u0026#39;-\u0026#39;: function(x, y) { return x-y;}\n};\n\nCal.prototype.calculate = function(operation){\n    return this.operations[operation](this.x, this.y);\n};\n\nvar c = new Cal(4, 5);\n\nc.calculate(\u0026#39;+\u0026#39;);\nc.calculate(\u0026#39;-\u0026#39;);\u003c/pre\u003e\n\u003cp\u003e这就是prototype的用法，prototype 是javascript这个语言中最重要的内容。网上有太多的文章介始这个东西了。说白了，prototype就是对一对象进行扩展，其特点在于通过“复制”一个已经存在的实例来返回新的实例,而不是新建实例。被复制的实例就是我们所称的“原型”，这个原型是可定制的（当然，这里没有真正的复制，实际只是委托）。上面的这个例子中，我们扩展了实例Cal，让其有了一个operations的属性和一个calculate的方法。\u003c/p\u003e\n\u003cp\u003e这样，我们可以通过这一特性来实现继承。还记得我们最最前面的那个Person吧， 下面的示例是创建一个Student来继承Person。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003efunction Person(name, email, website){\n    this.name = name;\n    this.email = email;\n    this.website = website;\n};\n\nPerson.prototype.sayHello = function(){\n    var hello = \u0026#34;Hello, I am \u0026#34;+ this.name  + \u0026#34;, \u0026lt;br\u0026gt;\u0026#34; +\n                \u0026#34;my email is: \u0026#34; + this.email + \u0026#34;, \u0026lt;br\u0026gt;\u0026#34; +\n                \u0026#34;my website is: \u0026#34; + this.website;\n    return hello;\n};\n\nfunction Student(name, email, website, no, dept){\n    var proto = Object.getPrototypeOf;\n    proto(Student.prototype).constructor.call(this, name, email, website);\n    this.no = no;\n    this.dept = dept;\n}\n\n// 继承prototype\nStudent.prototype = Object.create(Person.prototype);\n\n//重置构造函数\nStudent.prototype.constructor = Student;\n\n//重载sayHello()\nStudent.prototype.sayHello = function(){\n    var proto = Object.getPrototypeOf;\n    var hello = proto(Student.prototype).sayHello.call(this) + \u0026#39;\u0026lt;br\u0026gt;\u0026#39;;\n    hello += \u0026#34;my student no is: \u0026#34; + this. no + \u0026#34;, \u0026lt;br\u0026gt;\u0026#34; +\n             \u0026#34;my departent is: \u0026#34; + this. dept;\n    return hello;\n};\n\nvar me = new Student(\n    \u0026#34;Chen Hao\u0026#34;,\n    \u0026#34;\u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"1078717f757c50787f647d71797c3e737f7d\"\u003e[email protected]\u003c/a\u003e\u0026#34;,\n    \u0026#34;https://coolshell.cn\u0026#34;,\n    \u0026#34;12345678\u0026#34;,\n    \u0026#34;Computer Science\u0026#34;\n);\ndocument.write(me.sayHello());\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%85%BC%E5%AE%B9%E6%80%A7\"\u003e\u003c/span\u003e兼容性\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e上面的这些代码并不一定能在所有的浏览器下都能运行，因为上面这些代码遵循 ECMAScript 5 的规范，关于ECMAScript 5 的浏览器兼容列表，你可以看这里“\u003ca href=\"https://kangax.github.com/es5-compat-table/\" target=\"_blank\"\u003eES5浏览器兼容表\u003c/a\u003e”。\u003c/p\u003e\n\u003cp\u003e本文中的所有代码都在Chrome最新版中测试过了。\u003c/p\u003e\n\u003cp\u003e下面是一些函数，可以用在不兼容ES5的浏览器中：\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"Objectcreate%E5%87%BD%E6%95%B0\"\u003e\u003c/span\u003eObject.create()函数\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003efunction clone(proto) {\n    function Dummy() { }\n\n    Dummy.prototype             = proto;\n    Dummy.prototype.constructor = Dummy;\n\n    return new Dummy(); //等价于Object.create(Person);\n}\n\nvar me = clone(Person);\n\u003c/pre\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"defineProperty%E5%87%BD%E6%95%B0\"\u003e\u003c/span\u003edefineProperty()函数\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003efunction defineProperty(target, key, descriptor) {\n    if (descriptor.value){\n        target[key] = descriptor.value;\n    }else {\n        descriptor.get \u0026amp;\u0026amp; target.__defineGetter__(key, descriptor.get);\n        descriptor.set \u0026amp;\u0026amp; target.__defineSetter__(key, descriptor.set);\n    }\n\n    return target\n}\u003c/pre\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"keys%E5%87%BD%E6%95%B0\"\u003e\u003c/span\u003ekeys()函数\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003efunction keys(object) { var result, key\n    result = [];\n    for (key in object){\n        if (object.hasOwnProperty(key))  result.push(key)\n    }\n\n    return result;\n}\u003c/pre\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"ObjectgetPrototypeOf_%E5%87%BD%E6%95%B0\"\u003e\u003c/span\u003eObject.getPrototypeOf() 函数\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003efunction proto(object) {\n    return !object?                null\n         : \u0026#39;__proto__\u0026#39; in object?  object.__proto__\n         : /* not exposed? */      object.constructor.prototype\n}\u003c/pre\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"bind_%E5%87%BD%E6%95%B0\"\u003e\u003c/span\u003ebind 函数\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003evar slice = [].slice\n\nfunction bind(fn, bound_this) { var bound_args\n    bound_args = slice.call(arguments, 2)\n    return function() { var args\n        args = bound_args.concat(slice.call(arguments))\n        return fn.apply(bound_this, args) }\n}\n\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%8F%82%E8%80%83\"\u003e\u003c/span\u003e参考\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eW3CSchool\u003c/li\u003e\n\u003cli\u003eMDN (Mozilla Developer Network)\u003c/li\u003e\n\u003cli\u003eMSDN (Microsoft Software Development Network)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://killdream.github.com/blog/2011/10/understanding-javascript-oop/\" target=\"_blank\"\u003eUnderstanding Javascript OOP\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan style=\"color: #cc0000;\"\u003e\u003cstrong\u003e（转载时请注明作者和出处，请勿用于任何商业用途）\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/6731.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/03/closure-150x150.png\" alt=\"理解Javascript的闭包\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/6731.html\" class=\"wp_rp_title\"\u003e理解Javascript的闭包\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/6668.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/02/joo_1-150x150.png\" alt=\"再谈javascript面向对象编程 \" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/6668.html\" class=\"wp_rp_title\"\u003e再谈javascript面向对象编程 \u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/5202.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/14.jpg\" alt=\"对象的消息模型\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/5202.html\" class=\"wp_rp_title\"\u003e对象的消息模型\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17634.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/01/pretty-code-150x150.gif\" alt=\"Chrome开发者工具的小技巧\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17634.html\" class=\"wp_rp_title\"\u003eChrome开发者工具的小技巧\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17524.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2016/10/drawing-recursive-150x150.jpg\" alt=\"如何读懂并写出装逼的函数式代码\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17524.html\" class=\"wp_rp_title\"\u003e如何读懂并写出装逼的函数式代码\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-6441\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"4f62714a65\"\u003e\u003cimg id=\"rating_6441_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(6441, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-61ba2788f7cbf85a4752e71d-=\"\"/\u003e\u003cimg id=\"rating_6441_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(6441, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-61ba2788f7cbf85a4752e71d-=\"\"/\u003e\u003cimg id=\"rating_6441_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(6441, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-61ba2788f7cbf85a4752e71d-=\"\"/\u003e\u003cimg id=\"rating_6441_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(6441, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-61ba2788f7cbf85a4752e71d-=\"\"/\u003e\u003cimg id=\"rating_6441_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(6441, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-61ba2788f7cbf85a4752e71d-=\"\"/\u003e (\u003cstrong\u003e32\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.19\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_6441_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"Javascript 面向对象编程\"/\u003e\u003cmeta itemprop=\"headline\" content=\"Javascript 面向对象编程\"/\u003e\u003cmeta itemprop=\"description\" content=\"Javascript是一个类C的语言，他的面向对象的东西相对于C++/Java比较奇怪，但是其的确相当的强大，在 Todd 同学的“对象的消息模型”一文中我们已经可以看到一些端倪了。这两天有个前同事总在问我Javascript面向对象的东西，所以，索性写篇文章让他看去吧，这里这篇文章主要想从一个整体的角度来说明一下Javascript的面向对象的编程。（成文比较仓促，应该有不准确或是有误的地方，请...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2012-01-09T08:16:27+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2012-01-09T18:12:39+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/6441.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/6441.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.19\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"32\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-6441-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2012-01-09T08:16:27+08:00",
  "Author": "陈皓"
}