{
  "Source": "coolshell.cn",
  "Title": "Go语言、Docker 和新技术",
  "Link": "https://coolshell.cn/articles/18190.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"fa137e1f9639e4132b26ed17-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright size-sup_wechat_big \" src=\"https://coolshell.cn/wp-content/uploads/2017/10/golang.docker-360x200.png\" alt=\"\" width=\"360\" height=\"200\"/\u003e上个月，作为 Go 语言的三位创始人之一，Unix 老牌黑客罗勃·派克（Rob Pike）在新文章“\u003ca href=\"https://commandcenter.blogspot.com/2017/09/go-ten-years-and-climbing.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eGo: Ten years and climbing\u003c/a\u003e”中，回顾了一下 Go 语言的发展过程。其中提到，Go 语言这十年的迅猛发展大到连他们自己都没有想到，并且还成为了云计算领域中新一代的开发语言。还提到了，中国程序员对 Go 语言的热爱完全超出了他们的想象，甚至他们都不敢相信是真的。\u003c/p\u003e\n\u003cp\u003e这让我想起，我在 2015 年 5 月份拜访 Docker 公司在湾区的总部时，Docker 负责人也和我表达了相似的感叹：他们完全没有想到居然中国有那么多人喜欢 Docker，而且还有这么多人在为 Docker 做贡献，这让他们感到非常意外。此外，还跟我说，中国是除了美国本土之外的另一个如此喜欢 Docker 技术的国家，在其它国家都没有看到。\u003c/p\u003e\n\u003cp\u003e的确如他们所说，Go 语言和 Docker 这两种技术已经成为新一代的云计算技术，而且可以看到其发展态势非常迅猛。而中国也成为了像美国一样在强力推动这两种技术的国家。这的确是一件让人感到非常高兴的事，因为中国在跟随时代潮流这件事上已经做得非常不错了。\u003c/p\u003e\n\u003cp\u003e然而，从 2014-2015 年我在阿里推动 Docker 和 Go 语言的痛苦和失败过程中，以及这许多年来，有很多很多人问我是否要学 Go 语言，是否要学 Docker，Go 和 Docker 是否能用在生产线上，这些问题看来，对于 Go 语言和 Docker 这两种技术，在国内的技术圈中有相当大的一部分人和群体还在执观望或是不信任的态度。\u003c/p\u003e\n\u003cp\u003e所以，我想写这篇文章，从两个方面来论述一下我的观点和看法。\u003c/p\u003e\n\u003cul class=\"list-paddingleft-2\"\u003e\n\u003cli\u003e一个方面，为什么 Go 语言和 Docker 会是新一代的云计算技术。\u003c/li\u003e\n\u003cli\u003e另一个方面，作为技术人员，我们如何识别什么样的新技术会是未来的趋势。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这两个问题是相辅相成的，所以我会把这两个问题揉在一起谈。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-18190\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e虽然 Go 语言是在 2009 年底开源的，但我是从 2012 年才开始接触和学习 Go 语言的。我只花了一个周末两天的时间就学完了，而且在这两天，我还很快地写出了一个能工作很好的网页爬虫程序，以及一个简单的高并发文件处理服务，用于提取前面抓取的网页的关键内容。这两个程序都很简单，总共才写了不到 500 行代码。\u003c/p\u003e\n\u003cp\u003e我当时对 Go 语言有几点体会。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e第一，语言简单，上手快。\u003c/strong\u003eGo 语言的语法特性简直是太简单了，简单到你几乎玩不出什么花招，直来直去的，学习曲线很低，上手非常快。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e第二，并行和异步编程几乎无痛点。\u003c/strong\u003eGo 语言的 Goroutine 和 Channel 这两个神器简直就是并发和异步编程的巨大福音。像 C、C++、Java、Python 和 JavaScript 这些语言的并发和异步方式太控制就比较复杂了，而且容易出错，而 Go 解决这个问题非常地优雅和流畅。这对于编程多年受尽并发和异步折磨的我来说，完全就是让我眼前一亮的感觉。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter \" src=\"https://coolshell.cn/wp-content/uploads/2017/10/golang.01.png\" alt=\"\" width=\"664\" height=\"403\"/\u003e\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e（图片来自 Medium：\u003ca href=\"https://medium.com/@kevalpatel2106/why-should-you-learn-go-f607681fad65\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eWhy should you learn Go?\u003c/a\u003e）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e第三，Go 语言的 lib 库麻雀虽小五脏俱全。\u003c/strong\u003eGo 语言的 lib 库中基本上有绝大多数常用的库，虽然有些库还不是很好，但我觉得不是问题，因为我相信在未来的发展中会把这些问题解决掉。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e第四，C 语言的理念和 Python 的姿态。\u003c/strong\u003eC 语言的理念是信任程序员，保持语言的小巧，不屏蔽底层且底层友好，关注语言的执行效率和性能。而 Python 的姿态是用尽量少的代码完成尽量多的事。于是我能够感觉到，Go 语言想要把 C 和 Python 统一起来，这是多棒的一件事啊。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter \" src=\"https://coolshell.cn/wp-content/uploads/2017/10/golang.02.png\" alt=\"\" width=\"662\" height=\"400\"/\u003e\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e（图片来自 Medium：\u003ca href=\"https://medium.com/@kevalpatel2106/why-should-you-learn-go-f607681fad65\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eWhy should you learn Go?\u003c/a\u003e）\u003c/p\u003e\n\u003cp\u003e所以，即便 Go 语言存在诸多的问题，比如垃圾回收、异常处理、泛型编程等，但相较于上面这几个优势，我认为这些问题都是些小问题。于是就毫不犹豫地入坑了。\u003c/p\u003e\n\u003cp\u003e当然，一个技术能不能发展起来，关键还要看三点。\u003c/p\u003e\n\u003cul class=\"list-paddingleft-2\"\u003e\n\u003cli\u003e\u003cstrong\u003e有没有一个比较好的社区。\u003c/strong\u003e像 C、C++、Java、Python 和 JavaScript 的生态圈都是非常丰富和火爆的。尤其是有很多商业机构参与的社区那就更为人气爆棚了，比如 Linux 的社区。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e有没有一个工业化的标准。\u003c/strong\u003e像 C、C++、Java 都是有标准化组织的。尤其是 Java，其在架构上还搞出了像 J2EE 这样的企业级标准。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e有没有一个或多个杀手级应用。\u003c/strong\u003eC、C++ 和 Java 的杀手级应用不用多说了，就算是对于 PHP 这样还不能算是一个好的编程语言来说，因为是 Linux 时代的第一个杀手级解决方案 LAMP 中的关键技术，所以，也发展起来了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e上述的这三点是非常关键的，新的技术只需要占到其中一到两点就已经很不错了，何况有的技术，比如 Java，是三点全占到了，所以，Java 的发展是如此好。当然，除了上面这三点重要的，还有一些其它的影响因素，比如：\u003c/p\u003e\n\u003cul class=\"list-paddingleft-2\"\u003e\n\u003cli\u003e\u003cstrong\u003e学习曲线是否低，上手是否快。\u003c/strong\u003e这点非常重要，C++ 在这点上越做越不好了。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e有没有一个不错的提高开发效率的开发框架。\u003c/strong\u003e如：Java 的 Spring 框架，C++ 的 STL 等。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e是否有一个或多个巨型的技术公司作为后盾。\u003c/strong\u003e如：Java 和 Linux 后面的 IBM、Sun……\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e有没有解决软件开发中的痛点。\u003c/strong\u003e如：Java 解决了 C 和 C++ 的内存管理问题。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e用这些标尺来量一下 Go 语言，我们可以清楚地看到：\u003c/p\u003e\n\u003cul class=\"list-paddingleft-2\"\u003e\n\u003cli\u003eGo 语言容易上手；\u003c/li\u003e\n\u003cli\u003eGo 语言解决了并发编程和写底层应用开发效率的痛点；\u003c/li\u003e\n\u003cli\u003eGo 语言有 Google 这个世界一流的技术公司在后面；\u003c/li\u003e\n\u003cli\u003eGo 语言的杀手级应用是 Docker，而 Docker 的生态圈在这几年完全爆棚了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以，Go 语言的未来是不可限量的。当然，我个人觉得，Go 可能会吞食很多 C、C++、Java 的项目。不过，Go 语言所吞食主要的项目应该是中间层的项目，既不是非常底层也不会是业务层。\u003c/p\u003e\n\u003cp\u003e也就是说，Go 语言不会吞食底层到 C 和 C++ 那个级别的，也不会吞食到高层如 Java 业务层的项目。Go 语言能吞食的一定是 PaaS 上的项目，比如一些消息缓存中间件、服务发现、服务代理、控制系统、Agent、日志收集等等，没有复杂的业务场景，也到不了特别底层（如操作系统）的中间平台层的软件项目或工具。而 C 和 C++ 会被打到更底层，Java 会被打到更上层的业务层。这是我的一个判断。\u003c/p\u003e\n\u003cp\u003e好了，我们再用上面的标尺来量一下 Go 语言的杀手级应用 Docker，你会发现基本是一样的。\u003c/p\u003e\n\u003cul class=\"list-paddingleft-2\"\u003e\n\u003cli\u003eDocker 上手很容易。\u003c/li\u003e\n\u003cli\u003eDocker 解决了运维中的环境问题以及服务调度的痛点。\u003c/li\u003e\n\u003cli\u003eDocker 的生态圈中有大公司在后面助力。比如 Google。\u003c/li\u003e\n\u003cli\u003eDocker 产出了工业界标准 OCI。\u003c/li\u003e\n\u003cli\u003eDocker 的社区和生态圈已经出现像 Java 和 Linux 那样的态势。\u003c/li\u003e\n\u003cli\u003e……\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以，早在 3、4 年前我就觉得 Docker 一定会是未来的技术。虽然当时的坑儿还很多，但是，相对于这些大的因素来说，那些小坑儿都不是问题。只是需要一些时间，这些小坑儿在未来 5-10 年就可以完全被填平了。\u003c/p\u003e\n\u003cp\u003e同样，我们可以看到 Kubernetes 作为服务和容器调度的关键技术一定会是最后的赢家。这点我在去年初就能够很明显地感觉到了。\u003c/p\u003e\n\u003cp\u003e关于 Docker 我还想多说几句，这是云计算中 PaaS 的关键技术，虽然，这世上在出现 Docker 之前，几乎所有的要玩公有 PaaS 的公司和产品都玩不起来，比如：Google 的 GAE，国内的各种 XAE，如淘宝的 TAE，新浪的 SAE 等。但我还是想说，\u003cstrong\u003ePaaS 是一个被世界或是被产业界严重低估的平台。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePaaS 层是承上启下的关键技术，任何一个不重视 PaaS 的公司，其技术架构都不可能让这家公司成长为一个大型的公司\u003c/strong\u003e。因为 PaaS 层的技术主要能解决下面这些问题。\u003c/p\u003e\n\u003cul class=\"list-paddingleft-2\"\u003e\n\u003cli\u003e\u003cstrong\u003e软件生产线的问题。\u003c/strong\u003e持续集成和持续发布，以及 DevOps 中的技术必需通过 PaaS。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e分布式服务化的问题。\u003c/strong\u003e分布式服务化的服务高可用、服务编排、服务调度、服务发现、服务路由，以及分布式服务化的支撑技术完全是 PaaS 的菜。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e提高服务的可用性 SLA。\u003c/strong\u003e提高服务可用性 SLA 所需要的分布式、高可用的技术架构和运维工具，也是 PaaS 层提供的。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e软件能力的复用。\u003c/strong\u003e软件工程中的核心就是软件能力的复用，这一点也完美地体现在 PaaS 平台的技术上。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e老实说，这些问题的关键程度已经到了能判断一家依托技术的公司的研发能力是否靠谱的程度。没有这些技术，依托技术拓展业务的公司几乎没有可能发展得规模很大。\u003c/p\u003e\n\u003cp\u003e在后面，我会在“\u003ca href=\"https://time.geekbang.org/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e极客时间\u003c/a\u003e”\u003ca href=\"https://time.geekbang.org/column/intro/48\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e我的付费专栏\u003c/a\u003e里另外写几篇文章详细地讲一下分布式服务化和 PaaS 平台的重要程度。\u003c/p\u003e\n\u003cp\u003e最后，我还要说一下，为什么要早一点地进入这些新技术，而不是等待这些技术成熟了后再进入。原因有这么几个。\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e技术的发展过程非常重要。我进入 Go 和 Docker 的技术不能算早，但也不算晚，从 2012 年学习 Go，到 2013 年学习 Docker 到今天，我清楚地看到了这两种技术的生态圈发展过程。让我收获最大的并不是这些技术本身，而是一个技术的变迁和行业的发展。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e从中，我看到了非常具体的各种思潮和思路，这些东西比起 Go 和 Docker 来说更有价值。因为，这不但让我重新思考我已掌握的技术以及如何更好地解决已有的问题，而且还让我看到了未来。我不但有了技术优势，而且这些知识还让我的技术生涯多了很多的可能性。\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e这些关键新技术，可以让你拿到技术的先机。这些对一个需要技术领导力的个人或公司来说都是非常重要的。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e一个公司或是个人能够占有技术先机，就会比其它公司或个人有更大的影响力。一旦未来行业需求引爆，那么这个公司或是个人的影响力就会形成一个比较大的护城河，并可以快速地产生经济利益。\u003c/p\u003e\n\u003cp\u003e近期，在与中国移动、中国电信以及一些股份制银行进行交流的过程中，我已看到通讯行业、金融行业对于 PaaS 平台的理解已经超过了互联网公司，而我近 3 年来在这些技术上的研究让我也从中受益非浅。\u003c/p\u003e\n\u003cp\u003e所以，Go 语和 Docker 作为 PaaS 平台的关键技术前途是无限的，我很庆幸赶上了这个浪潮，也很庆幸在 3 年前我就看到了这个趋势，现在我也在用这些技术开发相关的技术产品，助力于为高速成长的公司提供这些关键技术。\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e最后注明一下：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e这篇文章于上周发布于\u003ca href=\"https://time.geekbang.org/column/intro/48\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e“极客时间”的我的付费专栏\u003c/a\u003e中。极客时间中的付费是我受Geekbang邀请写的一个付费专栏，因为过去10多年给企业有过很多内训，过去2年又给好多企业做过一些咨询工作，所以，我会把一些商业化的内容写在极客时间里，当然，也会有一些我的新文章。关于这个事，我后面我专门开一篇文章说一下。（大家可以到 Apple的App Store上搜极客时间，Android版本等到12月初吧）\u003cbr/\u003e\n\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21615.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2021/09/go-generics-150x150.png\" alt=\"Go编程模式 ： 泛型编程\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21615.html\" class=\"wp_rp_title\"\u003eGo编程模式 ： 泛型编程\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21263.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.k8s-150x150.png\" alt=\"Go 编程模式：k8s Visitor 模式\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21263.html\" class=\"wp_rp_title\"\u003eGo 编程模式：k8s Visitor 模式\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21228.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.line_.-150x150.png\" alt=\"Go编程模式：Pipeline\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21228.html\" class=\"wp_rp_title\"\u003eGo编程模式：Pipeline\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21214.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.pair_-150x150.png\" alt=\"Go编程模式：委托和反转控制\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21214.html\" class=\"wp_rp_title\"\u003eGo编程模式：委托和反转控制\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21179.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.generate-150x150.png\" alt=\"Go 编程模式：Go Generation\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21179.html\" class=\"wp_rp_title\"\u003eGo 编程模式：Go Generation\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21164.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.map_.reduce-150x150.png\" alt=\"Go编程模式：Map-Reduce\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21164.html\" class=\"wp_rp_title\"\u003eGo编程模式：Map-Reduce\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-18190\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"9d35f7dd6e\"\u003e\u003cimg id=\"rating_18190_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(18190, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-fa137e1f9639e4132b26ed17-=\"\"/\u003e\u003cimg id=\"rating_18190_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(18190, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-fa137e1f9639e4132b26ed17-=\"\"/\u003e\u003cimg id=\"rating_18190_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(18190, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-fa137e1f9639e4132b26ed17-=\"\"/\u003e\u003cimg id=\"rating_18190_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(18190, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-fa137e1f9639e4132b26ed17-=\"\"/\u003e\u003cimg id=\"rating_18190_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(18190, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-fa137e1f9639e4132b26ed17-=\"\"/\u003e (\u003cstrong\u003e109\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.17\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_18190_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"Go语言、Docker 和新技术\"/\u003e\u003cmeta itemprop=\"headline\" content=\"Go语言、Docker 和新技术\"/\u003e\u003cmeta itemprop=\"description\" content=\"上个月，作为 Go 语言的三位创始人之一，Unix 老牌黑客罗勃·派克（Rob Pike）在新文章“Go: Ten years and climbing”中，回顾了一下 Go 语言的发展过程。其中提到，Go 语言这十年的迅猛发展大到连他们自己都没有想到，并且还成为了云计算领域中新一代的开发语言。还提到了，中国程序员对 Go 语言的热爱完全超出了他们的想象，甚至他们都不敢相信是真的。\n\n这让我想起，...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2017-10-30T09:24:20+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2019-04-21T16:41:19+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/18190.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/18190.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.17\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"109\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-18190-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2017-10-30T09:24:20+08:00",
  "Author": "陈皓"
}