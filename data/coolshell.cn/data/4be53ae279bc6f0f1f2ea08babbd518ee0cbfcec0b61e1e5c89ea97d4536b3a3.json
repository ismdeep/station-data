{
  "Source": "coolshell.cn",
  "Title": "Eclipse开发Android应用程序入门:重装上阵",
  "Link": "https://coolshell.cn/articles/4334.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"5265d609701b485e36cd1f80-text/javascript\"\u003e\u003c/script\u003e\u003cstrong\u003e翻译:赵锟\u003c/strong\u003e\u003cbr/\u003e\n原文：\u003ca href=\"http://www.smashingmagazine.com/2011/03/28/get-started-developing-for-android-with-eclipse-reloaded/\"\u003ehttp://www.smashingmagazine.com/2011/03/28/get-started-developing-for-android-with-eclipse-reloaded/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e在我们教程系列的\u003ca href=\"https://coolshell.cn/articles/4270.html\"\u003e第一部分\u003c/a\u003e中，我们使用Android和Eclipse开发了一个简单的饮茶计时器的应用程序。在第二部分，我们将继续开发这个程序，并给它增加一些其他的额外的功能。在开发的过程中，我们将给你介绍更多重要而强大的Android SDK特性，包括持久化数据存储，Activity和Intent，和共享用户首选项（译者注：类似于windows 的注册表的一种机制）。\u003c/p\u003e\n\u003cp\u003e跟着本教程，你需要上一篇教程中的代码，如果你想直接使用代码，你可以使用如下的指令从\u003ca href=\"https://github.com/cblunt/BrewClock\"\u003eGitHub\u003c/a\u003e上check out出tutorial_par_1标记的代码：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" width=\"793\" height=\"564\" src=\"https://coolshell.cn/wp-content/uploads/2011/04/1_starting_point_full.jpg\" alt=\"\" title=\"1_starting_point_full\" class=\"aligncenter size-full wp-image-4362\" srcset=\"https://coolshell.cn/wp-content/uploads/2011/04/1_starting_point_full.jpg 793w, https://coolshell.cn/wp-content/uploads/2011/04/1_starting_point_full-300x213.jpg 300w, https://coolshell.cn/wp-content/uploads/2011/04/1_starting_point_full-768x546.jpg 768w, https://coolshell.cn/wp-content/uploads/2011/04/1_starting_point_full-380x270.jpg 380w\" sizes=\"(max-width: 793px) 100vw, 793px\"/\u003e\u003cbr/\u003e\n[code]\u003cbr/\u003e\n$ git clone git://github.com/cblunt/BrewClock.git\u003cbr/\u003e\n$ cd BrewClock\u003cbr/\u003e\n$ git checkout tutorial_part_1\u003cbr/\u003e\n[/code]\u003c/p\u003e\n\u003cp\u003e在GitHub中检出了代码后，你需要将代码倒入到Eclipse中的项目中：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e运行 Eclipse 选择 \u003cem\u003eFile → Import…\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e在导入窗口, 选择 \u003cem\u003e“Existing Projects into Workspace”\u003c/em\u003e并点击\u003cem\u003e “Next.”\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e在下一屏，点击 \u003cem\u003e“Browse,”\u003c/em\u003e选择你从GitHub上clone出的代码目录。\u003c/li\u003e\n\u003cli\u003e点击“Finish” 将项目导入到Eclipse中。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cspan id=\"more-4334\"\u003e\u003c/span\u003e\u003cbr/\u003e\n在导入项目到Eclipse之后，你有可能会看到有如下的警告信息：\u003cbr/\u003e\n[code]\u003cbr/\u003e\nAndroid required .class compatibility set to 5.0.\u003cbr/\u003e\nPlease fix project properties.\u003cbr/\u003e\n[/code]\u003cbr/\u003e\n如果有这种情况，右键点击“Project Explorer ”中新导入的BrewClock项目，并选择 “Fix Project Properties,” 并重启Eclipse。\u003c/p\u003e\n\u003ch3\u003e数据持久化入门\u003c/h3\u003e\n\u003cp\u003e当前,BrewClock 让用户为他们泡的茶设置一个定时器。这个非常棒的一个工作，但是如果对于不同的茶使用同一个泡茶时间的结果会怎样呢，是不每种茶都应该有自己的一个泡茶时间呢？如果这样，那岂不是所有的用户都需要记下每一类茶所需要泡的时间！这不是一个很好的用户体验。因此，在这篇教程中，我将新增一个功能来为用户每种不同的茶叶存放一个泡茶时间，并当用户想泡茶的时候，可以从茶叶列表中进行选择。\u003c/p\u003e\n\u003cp\u003e为了实现这个目的，我们得利用Android的丰富的数据持久化的API。Android提供了几种方式来存储数据，本文将要覆盖其中的两种方式。第一种，使用SQLite数据库引擎来为我们存储数据。\u003c/p\u003e\n\u003cp\u003eSQLite 是一种流行的轻量级SQL数据库引擎，它将数据存在单个文件中。SQLite经常用于桌面或在那些运行不能运行客户端-服务器SQL引擎（例如MySQL或PostgreSQL)的嵌入式的应用上。\u003c/p\u003e\n\u003cp\u003e每个安装在Android上的应用都可以保存和使用多个SQLite数据库文件（由数据存储容量决定），这些数据由系统自动地进行管理。应用程序的数据是私有并且不能被其他的应用程序所访问。（数据可以通过ContentProvider(译者注：内容提供者类)类进行共享，但是我们不会在本教程中覆盖关于内容提供者的内容）。当数据应用程序被更新时，数据库文件就进行持久化，当应用程序被删除时，数据库文家就被删除。\u003c/p\u003e\n\u003cp\u003e我们在BrewClock应用使用SQLite数据来维护我们的茶叶列表和泡茶所需要的时间。下面是我们我们将使用的数据表的一个总体介绍。\u003c/p\u003e\n\u003cp\u003e[code]\u003cbr/\u003e\n+————————————-+\u003cbr/\u003e\n| Table: teas |\u003cbr/\u003e\n+————+————————+\u003cbr/\u003e\n| Column | Description |\u003cbr/\u003e\n+————+————————+\u003cbr/\u003e\n| _ID | integer, autoincrement |\u003cbr/\u003e\n| name | text, not null |\u003cbr/\u003e\n| brew_time | integer, not null |\u003cbr/\u003e\n+————+————————+\u003cbr/\u003e\n[/code]\u003c/p\u003e\n\u003cp\u003e如果以前你使用过SQL，你应该熟悉这些内容。数据表有三个字段，一个唯一标示（_ID），茶叶名称(name)和泡茶时间(brew_time)字段。我们将使用Android提供给我们的API在应用中建立数据表。系统将负责在正确的位置为我们的创建数据库文件。\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E5%BA%93\" title=\"抽象数据库\"\u003e抽象数据库\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE\" title=\"查询数据\"\u003e查询数据\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E4%BF%AE%E6%94%B9BrewClock%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%EF%BC%8C%E5%85%81%E8%AE%B8%E8%BF%9B%E8%A1%8C%E8%8C%B6%E5%8F%B6%E9%80%89%E6%8B%A9\" title=\"修改BrewClock用户界面，允许进行茶叶选择\"\u003e修改BrewClock用户界面，允许进行茶叶选择\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A\" title=\"数据绑定\"\u003e数据绑定\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E8%AF%BB%E5%8F%96%E9%80%89%E4%B8%AD%E8%8C%B6%E5%8F%B6%E6%95%B0%E6%8D%AE%E5%B9%B6%E6%9B%B4%E6%96%B0%E6%B3%A1%E8%8C%B6%E6%97%B6%E9%97%B4\" title=\"读取选中茶叶数据并更新泡茶时间\"\u003e读取选中茶叶数据并更新泡茶时间\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#%E9%80%89%E9%A1%B9%E8%8F%9C%E5%8D%95\" title=\"选项菜单\"\u003e选项菜单\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#%E5%A4%84%E7%90%86%E8%8F%9C%E5%8D%95%E7%82%B9%E5%87%BB\" title=\"处理菜单点击\"\u003e处理菜单点击\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#%E4%BF%9D%E5%AD%98%E6%96%B0%E5%A2%9E%E8%8C%B6%E5%8F%B6\" title=\"保存新增茶叶\"\u003e保存新增茶叶\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-9\" href=\"#%E6%94%B9%E8%BF%9B%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C\" title=\"改进用户体验\"\u003e改进用户体验\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-10\" href=\"#Activities\" title=\"Activities\"\u003eActivities\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E5%BA%93\"\u003e\u003c/span\u003e抽象数据库\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e为了确保数据库的代码容易被维护，我们用一个单独的类TeaData来抽象所有处理数据库创建，插入，和查询的代码。如果你熟悉模型-试图-控制(译者注：MVC)方法的话，这个你也应该熟悉。所有数据库代码与我们的BrewClockActitvity类隔离开来。Actitvity可以初始化一个新的TeaData实例（这个实例将连接数据库）并完成它所需要的工作。以这种方式工作保证了我们可以方便的更改我们所使用的数据库而不用修改其他那些和数据库不相关部分的代码。\u003c/p\u003e\n\u003cp\u003e通过菜单File → New → Class.在BrewClock项目中创建一个TeaData的新类。确保TeaData扩展于android.database.sqlite.SQLiteOpenHelper 类，并选中“Constructors from superclass”复选框。\u003cbr/\u003e\n\u003cimg decoding=\"async\" src=\"https://coolshell.cn/wp-content/uploads/2011/04/2_create_teadata_class1.jpg\" alt=\"\" title=\"1_starting_point_full\" class=\"aligncenter size-full wp-image-4362\"/\u003e\u003c/p\u003e\n\u003cp\u003eTeaData 类将为你自动地处理SQLite数据库的创建和版本。我们需要增加一些方法来作为其他代码到数据库的接口。\u003c/p\u003e\n\u003cp\u003e增加两个常量来存储数据库的名字和版本,增加表名和表中列名。我们使用Android提供的常类BaseColumns._ID来做为表的唯一id列：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/TeaData.java\nimport android.app.Activity;\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.DatabaseUtils;\nimport android.provider.BaseColumns;\n\npublic class TeaData extends SQLiteOpenHelper {\n  private static final String DATABASE_NAME = \u0026#34;teas.db\u0026#34;;\n  private static final int DATABASE_VERSION = 1;\n\n  public static final String TABLE_NAME = \u0026#34;teas\u0026#34;;\n\n  public static final String _ID = BaseColumns._ID;\n  public static final String NAME = \u0026#34;name\u0026#34;;\n  public static final String BREW_TIME = \u0026#34;brew_time\u0026#34;;\n\n  // …\n}\n\u003c/pre\u003e\n\u003cp\u003e为TeaData增加一个构造方法，以数据库名称合版本号为参数调用其父类的构造方法。Android将会自动地打开数据库（如果数据库不存在就自动创建它）。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/TeaData.java\npublic TeaData(Context context) {\n  super(context, DATABASE_NAME, null, DATABASE_VERSION);\n}\n\u003c/pre\u003e\n\u003cp\u003e我们需要重载onCreate方法，并执行一个SQL 串执行创建数据库表的操作。Android将会在数据库文件第一次被创建时调用这个方法。\u003c/p\u003e\n\u003cp\u003e在启动过程中，Android检查数据库的版本是否我们传入的版本一致。如果版本发生了改变，Android将会调用onUpgrade方法，在这个方法总，你可以编写修改数据库结构的业务逻辑。在本教程中，我们将让Android删除数据库并重建数据库。\u003c/p\u003e\n\u003cp\u003e在onCreate和onUpgrade中增加如下的代码:\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/TeaData.java\n@Override\npublic void onCreate(SQLiteDatabase db) {\n  // CREATE TABLE teas (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, brew_time INTEGER);\n  String sql =\n    \u0026#34;CREATE TABLE \u0026#34; + TABLE_NAME + \u0026#34; (\u0026#34;\n      + _ID + \u0026#34; INTEGER PRIMARY KEY AUTOINCREMENT, \u0026#34;\n      + NAME + \u0026#34; TEXT NOT NULL, \u0026#34;\n      + BREW_TIME + \u0026#34; INTEGER\u0026#34;\n      + \u0026#34;);\u0026#34;;\n\n  db.execSQL(sql);\n}\n\n@Override\npublic void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n  db.execSQL(\u0026#34;DROP TABLE IF EXISTS \u0026#34; + TABLE_NAME);\n  onCreate(db);\n}\n\n\u003c/pre\u003e\n\u003cp\u003e下一步，我们需要新增代码让我们方便地在数据库中新增茶叶记录。我们新增一个带茶叶名称和泡茶时间的方法来负责插入记录。Android为了尽量避免开发者使用SQL语句，提供了一堆类来处理向数据库中查入记录。首先，我们创建一个ContentValues集合，并将相关的值插入到这个集合中去。\u003c/p\u003e\n\u003cp\u003e对于ContentValues集合，我们只要简单地提供一个列名和值来插入就行了。Android负责创建和运行正确的SQL。使用Android的数据类确保了你能写出安全，跨平台的数据库操作代码。\u003c/p\u003e\n\u003cp\u003eAdd a new method, insert(), to the TeaData class:\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/TeaData.java\npublic void insert(String name, int brewTime) {\n  SQLiteDatabase db = getWritableDatabase();\n\n  ContentValues values = new ContentValues();\n  values.put(NAME, name);\n  values.put(BREW_TIME, brewTime);\n\n  db.insertOrThrow(TABLE_NAME, null, values);\n}\n\n\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE\"\u003e\u003c/span\u003e查询数据\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e我们应用程序具有了在数据库中保存数据的能力后，我们同样也需要一种方式将数据取回来。Android提供了游标Cursor接口来完成这件工作。一个游标代表了针对数据库运行一个SQL返回的结果集，游标在这个结果集中维护了一个指针来指向结果集中的一行。这个指针可以向前，向后移动，并返回每一列的值，下面我们用图形来帮助你理解游标:\u003c/p\u003e\n\u003cp\u003eSQL 查询: SELECT * from teas LIMIT 3;\u003cbr/\u003e\n[code]\u003cbr/\u003e\n+———————————–+\u003c/p\u003e\n\u003cp\u003e| _ID | name | brew_time |\u003c/p\u003e\n\u003cp\u003e+———————————–+\u003c/p\u003e\n\u003cp\u003e| 1 | Earl Grey | 3 |\u003c/p\u003e\n\u003cp\u003e| 2 | Green | 1 | \u0026lt;= Cursor\u003c/p\u003e\n\u003cp\u003e| 3 | Assam | 5 |\u003c/p\u003e\n\u003cp\u003e+——-+————-+————-+\u003cbr/\u003e\n[/code]\u003c/p\u003e\n\u003cp\u003e在这个例子中，游标指向了结果集中的第二条记录（绿茶）。我们可以通过调用cursor.moveToPrevious()方法，将游标向前移动，让它指向第一行（Earl Grey），或者调用moveToNext向前移动指向Assam。要取到游标所指向记录的茶叶的名称，我们只要调用cursor.getString(1)，1代表我们向提取数据列的下标（注意下标识从0开始的，1代表第二列，依次类推）。\u003c/p\u003e\n\u003cp\u003e在了解游标后，我们增加一个创建游标对象并返回数据库中所有的茶叶信息。在TeaData中增加all方法：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/TeaData.java\npublic Cursor all(Activity activity) {\n  String[] from = { _ID, NAME, BREW_TIME };\n  String order = NAME;\n\n  SQLiteDatabase db = getReadableDatabase();\n  Cursor cursor = db.query(TABLE_NAME, from, null, null, null, null, order);\n  activity.startManagingCursor(cursor);\n\n  return cursor;\n}\n\u003c/pre\u003e\n\u003cp\u003e因为这个方法乍一看有点古怪，所以让我们先来关心一下这个方法的一些细节。我们没有使用SQL的查询语句，而是使用了Android提供的数据库接口方法。\u003c/p\u003e\n\u003cp\u003e第一，我们需要告诉Android，我们所关心的列的信息。我们创建了一个字符串数组，数组中存放这TeaData中列的标示信息。我们还设置了我名们期望的结果集按照哪一个列进行排序的列名。\u003c/p\u003e\n\u003cp\u003e第二，我们使用getReadalbeDatabase()创建了一个到数据库的只读连接，并调用query方法告诉Android我们希望用query方法运行一个查询。query()方法有很多的参数，Android在内部将这些参数转化为一个查询语句。此外，Android的抽象层保证了即使底层数据储存机制发生了变化，我们的应用程序代码也能正确的工作。\u003c/p\u003e\n\u003cp\u003e由于我们只要返回表中的所有记录，所以我们没有在方法中使用到链接join，过滤filter和分组group（例如：在SQL中的WHERE，JOIN，和GROUP BY）。from和order变量告诉查询数据库需要返回那些列和提取数据时按什么列进行排序。我们使用SQLiteDatabase.query()作为和数据库的人机交互接口。\u003c/p\u003e\n\u003cp\u003e最后，我们让Activity（在本例中，我们的BrewClockActivity）来管理游标。通常，游标需要人工刷新内容，因此当我们增加一个新茶信息到数据库中时，我们就需要刷新我们的游标。每当我们的应用被挂起和恢复的时候，通过调用startManagingCursor()让Android来帮我们重建结果集。\u003c/p\u003e\n\u003cp\u003e在TeaData类中增加count方法:\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/TeaData.java\n  public long count() {\n    SQLiteDatabase db = getReadableDatabase();\n    return DatabaseUtils.queryNumEntries(db, TABLE_NAME);\n  }\n\n\u003c/pre\u003e\n\u003cp\u003e保存TeaData类，使用修正没有import 的类(Source → Organize Imports)，在完成我们的数据类后，下一步我们将着手修改我们BrewClock的人机界面。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%BF%AE%E6%94%B9BrewClock%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%EF%BC%8C%E5%85%81%E8%AE%B8%E8%BF%9B%E8%A1%8C%E8%8C%B6%E5%8F%B6%E9%80%89%E6%8B%A9\"\u003e\u003c/span\u003e修改BrewClock用户界面，允许进行茶叶选择\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e持久化茶和泡茶的时间的目的是让用能快速的选择他们所钟爱的预设置的茶。为了完成这个功能，我们需要再BrewClock的主界面上增加一个Spinner（类似于桌面上弹出菜单），生成一个来自于TeaData的茶列表。\u003c/p\u003e\n\u003cp\u003e和前面的教程一样，我们使用了Eclipse的布局器编辑器在BrewClock的主界面布局XML文件中增加Spinner。在LinearLayout元素下面增加下面这些代码（大约在24行）。如果你打开了可视化的布局编辑器后，你可以点击窗口下面的地”Code View”进行切换。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"xml\" class=\"EnlighterJSRAW\"\u003e\u0026lt;!-- /res/layout/main.xml --\u0026gt;\n\n\u0026lt;!-- Tea Selection --\u0026gt;\n\u0026lt;LinearLayout\n  android:orientation=\u0026#34;vertical\u0026#34;\n  android:layout_width=\u0026#34;fill_parent\u0026#34;\n  android:layout_height=\u0026#34;wrap_content\u0026#34;\u0026gt;\n\n  \u0026lt;Spinner\n    android:id=\u0026#34;@+id/tea_spinner\u0026#34;\n    android:layout_width=\u0026#34;fill_parent\u0026#34;\n    android:layout_height=\u0026#34;wrap_content\u0026#34; /\u0026gt;\n\n\u0026lt;/LinearLayout\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003e在BrewClockActivity类里面,增加一个成员变量指向Spinner，通过使用findViewById连接界面上的控件：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/BrewClockActivity.java\nprotected Spinner teaSpinner;\nprotected TeaData teaData;\n\n// …\n\npublic void onCreate(Bundle savedInstanceState) {\n  // …\n  teaData = new TeaData(this);\n  teaSpinner = (Spinner) findViewById(R.id.tea_spinner);\n}\n\u003c/pre\u003e\n\u003cp\u003e运行你的程序以确保新的界面正确地生效。你应该在泡茶计数器下看见一个空白的弹出式菜单（或者是Spinner)。如果点击spinner，Android将显示一个弹出式的菜单并为你提供选择列表。在这时，菜单的内容因该是空的，现在让我们来绑定Spinner和我们的茶叶数据库。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"500\" height=\"356\" src=\"https://coolshell.cn/wp-content/uploads/2011/04/3_blank_spinner.jpg\" alt=\"\" title=\"3_blank_spinner\" class=\"aligncenter size-full wp-image-4364\" srcset=\"https://coolshell.cn/wp-content/uploads/2011/04/3_blank_spinner.jpg 500w, https://coolshell.cn/wp-content/uploads/2011/04/3_blank_spinner-300x213.jpg 300w\" sizes=\"(max-width: 500px) 100vw, 500px\"/\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A\"\u003e\u003c/span\u003e数据绑定\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e当Android从数据库中查询数据时，它将会返回一个游标Cursor对象。Cursor代表了来自数据库的结果集，并可以移动游标来提取结果中的数据。使用一类Android提供的称为“适配器Adapter”的类，我们很容易将这个结果集绑定到Spinner上。适配器完成了提取数据库结果集中的数据并在界面上显示这些数据等这些复杂而困难工作。\u003c/p\u003e\n\u003cp\u003e在我们的TeaData.all()方法中已经可以返回一个带有tea表内容的游标，使用这个游标，我们所需要做的工作就是创建一个SimpleCursor适配器来绑定我们的teaSpinner，Android会负责处理将数据显示在spinner的列表中。\u003c/p\u003e\n\u003cp\u003e通过创建一个SimpleCursorAdapter类来连接Spinner与teaData.all()返回的游标：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// com/example/brewclock/BrewClockActivity.java\n\npublic void onCreate(Bundle savedInstanceState) {\n  // …\n  Cursor cursor = teaData.all(this);\n\n  SimpleCursorAdapter teaCursorAdapter = new SimpleCursorAdapter(\n    this,\n    android.R.layout.simple_spinner_item,\n    cursor,\n    new String[] { TeaData.NAME },\n    new int[] { android.R.id.text1 }\n  );\n\n  teaSpinner.setAdapter(teaCursorAdapter);\n  teaCursorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n}\n\n\u003c/pre\u003e\n\u003cp\u003e注意，我们使用了Android内建的android.R对象。这个对象提供了你的应用程序中的默认资源，例如视图和布局。在我们的代码中，我们使用了android.R.layout.simple_spinner_item，它是简单的文本标签布局。\u003c/p\u003e\n\u003cp\u003e如果你再次运行的应用程序，你将会看到spinner中仍然是空的！虽然我们已经连接了我们的数据库，但是由于数据库中没有任何记录，所以我们任何看到了空列表。\u003c/p\u003e\n\u003cp\u003e我们通过在构造方法中增加一些默认记录来让用户可以选择所需要的茶叶，为了避免重复记录，我们只有在数据库中记录为0的情况才增加默认记录。在本教程的代码中，我们使用前面增加的count()来检查数据库中表记录是否为空。\u003c/p\u003e\n\u003cp\u003e增加当数据库中表为空的默认记录代码。把这些代码增加从数据库提取茶叶数据的前面（译者注：上一段的代码前）。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// com/example/brewclock/BrewClockActivity.java\npublic void onCreate(Bundle savedInstanceState) {\n  // …\n\n  // Add some default tea data! (Adjust to your preference :)\n  if(teaData.count() == 0) {\n    teaData.insert(\u0026#34;Earl Grey\u0026#34;, 3);\n    teaData.insert(\u0026#34;Assam\u0026#34;, 3);\n    teaData.insert(\u0026#34;Jasmine Green\u0026#34;, 1);\n    teaData.insert(\u0026#34;Darjeeling\u0026#34;, 2);\n  }\n\n  // Code from the previous step:\n  Cursor cursor = teaData.all(this);\n\n  // …\n}\n\n\u003c/pre\u003e\n\u003cp\u003e现在再次运行你的应用程序。你将会发现茶叶Spinner有了一条选择。点击Spinner让你可以从数据库选择你要的茶叶。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://coolshell.cn/wp-content/uploads/2011/04/4_populated_spinner.jpg\" alt=\"\" title=\"4_populated_spinner\" width=\"500\" height=\"356\" class=\"aligncenter size-full wp-image-4365\" srcset=\"https://coolshell.cn/wp-content/uploads/2011/04/4_populated_spinner.jpg 500w, https://coolshell.cn/wp-content/uploads/2011/04/4_populated_spinner-300x213.jpg 300w\" sizes=\"(max-width: 500px) 100vw, 500px\"/\u003e\u003c/p\u003e\n\u003cp\u003e恭喜你！你已经成功关联了你的界面和代码。这是任何软件开发过程中一个非常重要的方面。正如你所看见的，Android将这一步简化的非常容易，但是功能有是非常的NB。使用游标和适配器，你可以将数据源（丛简单的字符串数组到复杂的数据库查询）绑定到任何类型的视图：spinner或列表，设置是类似iTunes cover-flow gallery!\u003c/p\u003e\n\u003cp\u003e虽然现在已经可以开始泡茶了，但是我们工作还远没有结束。当你从Spinner选择了不同的茶，这个选择却不会发生任何作用。我们需要根据用户所选茶叶的种类取更新我们的泡茶时间。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E8%AF%BB%E5%8F%96%E9%80%89%E4%B8%AD%E8%8C%B6%E5%8F%B6%E6%95%B0%E6%8D%AE%E5%B9%B6%E6%9B%B4%E6%96%B0%E6%B3%A1%E8%8C%B6%E6%97%B6%E9%97%B4\"\u003e\u003c/span\u003e读取选中茶叶数据并更新泡茶时间\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e为了能读取用户从数据库中选择茶叶的数据，我们必须增加一个针对此事件的监听器。类似于处理按钮点击事件的OnClickListener监听器一样，我们将实现一个OnItemSelectedListener。当用户从视图中做出一个选择的事件将触发这个监听器，例如从我们的Spinner。\u003c/p\u003e\n\u003cp\u003e在BrewClockActivity中增加需要实现的接口OnItemSelectedListener。并增加其响应的处理方法onItemSelected()和onNothingSelected()：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/BrewClockActivity.java\npublic class BrewClockActivity extends Activity implements OnClickListener, OnItemSelectedListener {\n  // …\n  public void onItemSelected(AdapterView\u0026lt;?\u0026gt; spinner, View view, int position, long id) {\n    if(spinner == teaSpinner) {\n      // Update the brew time with the selected tea’s brewtime\n      Cursor cursor = (Cursor) spinner.getSelectedItem();\n      setBrewTime(cursor.getInt(2));\n    }\n  }\n\n  public void onNothingSelected(AdapterView\u0026lt;?\u0026gt; adapterView) {\n    // Do nothing\n  }\n}\n\n\u003c/pre\u003e\n\u003cp\u003e在这里我们要检查是触发的spinner此事件是不是BrewClock的teaSpinner。如果是，我们将提取代表选中记录的游标对象。这些都是由关联teaData和Spinner的SimpleCursorAdapter来提供我们完成的。Android知道哪个查询产生的Spinner数据，也知道用户选择的哪个数据。Android使用游标来返回数据库的一行记录，也代表了用户所选择的茶叶数据。\u003c/p\u003e\n\u003cp\u003eCursor的getInt()方法带了一个我们想提取的列的下标为参数。在我们的teaData.all()方法中创建游标的时候，我们读取的列是_ID,NAME和BREW_TIME。假设我们在teaSpinner中选择的是Jasmine Tea，那么将返回我们所选数据所对应的数据库记录。\u003c/p\u003e\n\u003cp\u003e然后我们再通过传递参数2来选择此记录的第二列的整型值。这个值提供给setBrewTime()方法。这个方法用于更新界面上的泡茶时间。\u003c/p\u003e\n\u003cp\u003e最后，我们需要告诉teaSpinner BrewClockActivity正在监听OnItemSelected事件。在BrewClockActivity的onCreate方法中增加下面的代码：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/BrewClockActivity.java\npublic void onCreate() {\n  // …\n  teaSpinner.setOnItemSelectedListener(this);\n}\n\u003c/pre\u003e\n\u003cp\u003e大功告成！再次运行你的程序，并从Spinner选择不同的茶叶。每次你所选的茶叶它所对应的泡茶时间都回显示对应的界面上。我们余下的代码中已经可以处理从当前时间开始递减计数。所以在有预先设置的茶叶种类下，我们已经可以完成我们所想要的功能。\u003c/p\u003e\n\u003cp\u003e你当然可以，回到之前的代码中去增加一些茶叶种类你满足你的口味。但是如果你发布BrewClock程序到Android Market，每当有人向增加新的茶叶数据到数据库中，我就需要去手动的取更新数据中的内容并重新发布它；这样所有的人就必须去更新它，并且所有的人都有一个同样的列表。这听起来非常的不灵活，因此我们还有很多的工作需要完成！\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" src=\" https://coolshell.cn/wp-content/uploads/2011/04/5_default_teas.jpg\" alt=\"\" title=\"3_blank_spinner\" class=\"aligncenter size-full wp-image-4364\"/\u003e\u003c/p\u003e\n\u003cp\u003e如果用户自己有方法新增茶叶种类到数据库里面，将会非常的不错的做法。因此我们将在下一章继续。。。\u003c/p\u003e\n\u003ch3\u003eActivity 介绍\u003c/h3\u003e\n\u003cp\u003e和你应用程序中每个屏幕关联的代码就是Activity。每次当你从一屏切换到另外一屏，Android就会创建一个新的Activity。在真实世界中，虽然一个应用程序经常由多个屏幕/Activity构成，Andriod却将每个屏幕看作独立的个体。多个Activity工作在一起形成一种关联的体验，这是因为Android让你非常容易地在屏幕/Activity之间传递数据。\u003c/p\u003e\n\u003cp\u003e在本节最后，你将为你的应用程序新增一个新的Activity（AddTeaActivity）并将它注册到Android系统中。你还需要从最初的BrewClockActivity传递数据到新的Activity中。\u003c/p\u003e\n\u003cp\u003e首先，我们需要给用户一种方式切换到新的Activity上。我们将使用选项菜单来完成之一步。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%80%89%E9%A1%B9%E8%8F%9C%E5%8D%95\"\u003e\u003c/span\u003e选项菜单\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e当用户他们的设备上的“Menu”按键时，选项菜单以弹出菜单的形式出现。Android负责菜单的自动创建和显示；你只需要告诉Android，菜单显示什么内容和当用户点击菜单时该做什么就行。\u003c/p\u003e\n\u003cp\u003e然而,最好不要在代码中硬编码菜单的标题，我们可以使用Android的字符串资源。字符串资源是一个独立的文件，在这个文件中你可以维护所有用于用户阅读的字符串和标签资源，并可以在代码调用它们。这就意味着当你在未来需要修改字符串时，你只要修改这一处地方即可。.\u003c/p\u003e\n\u003cp\u003e在project explorer中导航到“res/values”下，你将会看到string.xml文件已经存在。这个是你再创建新项目的时候由Eclipse创建的，这文件存放着在整个应用程序我们将要使用的字符串。\u003c/p\u003e\n\u003cp\u003e双击打开\u003cem\u003estrings.xml\u003c/em\u003e ,通过窗口底部的选项页切换到XML 视图。\u003c/p\u003e\n\u003cp\u003e在\u0026lt;resources\u0026gt;…\u0026lt;/resources\u0026gt; 元素中增加下面的内容:\u003c/p\u003e\n\u003cpre data-enlighter-language=\"xml\" class=\"EnlighterJSRAW\"\u003e\n\n\u0026lt;!-- res/values/strings.xml --\u0026gt;\n  \u0026lt;resources\u0026gt;\n    \u0026lt;!-- … --\u0026gt;\n    \u0026lt;string name=\u0026#34;add_tea_label\u0026#34;\u0026gt;Add Tea\u0026lt;/string\u0026gt;\n  \u0026lt;/resources\u0026gt;\n\n\n\u003c/pre\u003e\n\u003cp\u003e我们在这里定义了一个字符串，add_tea_label和它关联的文本，我们可以在整个程序代码中通过add_tea_label来使用其关联的文本。如果标签因为某个原因需要修改，我们只需要在这个文件修改这一个地方就能完成整个程序的修改。\u003c/p\u003e\n\u003cp\u003e下一步，让我们创建一个新文件完成选项菜单的定义，如果字符串和布局一样，菜单也使用XML来定义。因此我们将在Eclipse中川建一个新的XML文件：\u003c/p\u003e\n\u003cp\u003e通过选择File → New → Other, 并选择“Android XML File.”在Eclipse中创建一个新的XML文件。\u003c/p\u003e\n\u003cp\u003e选择资源的类型为 “Menu”，保存文件名为main.xml。Eclipse将为你自动的创建一个目录\u003cem\u003eres/menu\u003c/em\u003e, 来存放你的菜单文件。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" src=\" https://coolshell.cn/wp-content/uploads/2011/04/7_new_menu_xml.jpg\"/\u003e\u003c/p\u003e\n\u003cp\u003e打开\u003cem\u003eres/menus/main.xml\u003c/em\u003e 文件, 通过窗口底部的“main.xml”选项页来切换到XML视图。\u003c/p\u003e\n\u003cp\u003e增加菜单项， add_tea。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"xml\" class=\"EnlighterJSRAW\"\u003e\u0026lt;!-- res/values/strings.xml --\u0026gt;\n  \u0026lt;resources\u0026gt;\n    \u0026lt;!-- … --\u0026gt;\n    \u0026lt;string name=\u0026#34;add_tea_label\u0026#34;\u0026gt;Add Tea\u0026lt;/string\u0026gt;\n  \u0026lt;/resources\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003e注意android:title 属性被设置为@string/add_tea_label。这告诉Android在我们的strings.xml文件中查找add_tea_label并返回相关联的标签内容。在本列中我们的菜单项的标签时“Add Tea”。\u003c/p\u003e\n\u003cp\u003e下一步，我们将告诉我们的Activity，当用户点击设备上的“memu”按键时来显示这个选项菜单。\u003c/p\u003e\n\u003cp\u003e返回\u003cem\u003eBrewClockActivity.java\u003c/em\u003e代码, 重载onCreateOptionsMenu 方法,这个方法告诉Android 当用户点击“Menu”按键时，装载我们的菜单：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/BrewClockActivity.java\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n  MenuInflater inflater = getMenuInflater();\n  inflater.inflate(R.menu.main, menu);\n\n  return true;\n}\n\n\u003c/pre\u003e\n\u003cp\u003e当用户点击他设备上的“Menu”按键时，Android将调用onCreateOptionsMenu。在这个方法中，我们创建了一个MenuInflater, 这个对象将从你的应用程序包中装载你的菜单资源。就如同按钮和文本域组成你的应用程序布局一样，main.xml资源也是通过全局对象R来生效的，因此我们将此对象提交给MenuInflater对象。\u003c/p\u003e\n\u003cp\u003e为了测试菜单，保存并在模拟器中并运行应用程序。当程序运行起来使，点击“Menu”按键，你将会看到一个弹出式的菜单显示了一个“Add Tea”选项。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" src=\" https://coolshell.cn/wp-content/uploads/2011/04/8_add_teas_options_menu.jpg\"/\u003e\u003c/p\u003e\n\u003cp\u003e如果你点击“Add Tea”选项，Android自动地检测到点击并关闭菜单。在后台，Android将会提醒应用程序选项已经被点击。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%A4%84%E7%90%86%E8%8F%9C%E5%8D%95%E7%82%B9%E5%87%BB\"\u003e\u003c/span\u003e处理菜单点击\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e当用户点击 “Add Tea” 菜单选项，我们想要显示一个新的Activity以便我们能进入增加新茶叶种类的界面。通过选择File → New → Class来创建一个的Activiy。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" src=\" https://coolshell.cn/wp-content/uploads/2011/04/9_new_activity_settings.jpg\"/\u003e\u003c/p\u003e\n\u003cp\u003e将新类命名为 AddTeaActivity,并确保它继承于android.app.Activity类。这个类也放在com.example.brewclock包中:\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/AddTeaActivity.java\npackage com.example.brewclock;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\npublic class AddTeaActivity extends Activity {\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n  }\n}\n\n\u003c/pre\u003e\n\u003cp\u003e上面样例中的空白Activity将不会完成任何工作。但是通过它，我们已经可以完成选项菜单的功能。\u003c/p\u003e\n\u003cp\u003e在BrewClockActivity增加一个重载方法onOptionsItemSelected 。当用户点击菜单项时，这个方法被Android调用。 (注意点击的MenuItem为它的接收参数：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/BrewClockActivity.java\n@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n  switch(item.getItemId()) {\n    case R.id.add_tea:\n      Intent intent = new Intent(this, AddTeaActivity.class);\n      startActivity(intent);\n      return true;\n\n    default:\n      return super.onOptionsItemSelected(item);\n  }\n}\n\n\n\u003c/pre\u003e\n\u003cp\u003e通过上面的代码，我们告诉Android，当“Add Tea”被点击的时候，我们将要创建一个的Activity；在本教程中，就是AddTeaActivity。然而，不要直接创建这个类的实例，注意我们使用了Intent。Intent有着Android框架的强大特性；他们将Activity绑定在一起来组成应用程序，并允许在他们之间相互传递数据。\u003c/p\u003e\n\u003cp\u003eIntent的优点甚至让你的应用程序可以使用用户安装的其他的应用程序。例如，当用户要从图库里面显示一张图片，Android自动地给显一个对话框来让用户选择应用程序来显示图片。任何注册为可以处理图片显示的应用程序都会出现在这个对话框的列表中。\u003c/p\u003e\n\u003cp\u003eIntent功能强大而复杂的主体, 因此它值得你从官方的文档\u003ca href=\"https://developer.android.com/guide/topics/intents/intents-filters.html\"\u003eofficial Android SDK documentation\u003c/a\u003e中仔细研究。\u003c/p\u003e\n\u003cp\u003e让我们运行我们的应用程序，以测试我们的“Add Tea”屏幕。\u003c/p\u003e\n\u003cp\u003e运行你的项目，按下Menu按键，并点击 “Add Tea.”。\u003c/p\u003e\n\u003cp\u003e不如你预期的，你并没有看到 “Add Tea” Activity，出现在你面前的是一个Android开发者经常看到的对话框：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" src=\" https://coolshell.cn/wp-content/uploads/2011/04/10_crash.jpg\"/\u003e\u003c/p\u003e\n\u003cp\u003e虽然我们创建了一个Intent并告诉Android启动我们的AddTeaActivity Activity, 由于我们没有将这个Activity注册到Android系统中，我们的应用程序最终还是crash掉了。系统不知道从哪里去找到我们试图运行的Activity（应该还记得Intent可以启动安装在设备上的任何Activity吧）。让我们在应用程序的mainfest文件来注册这些Acitivity。\u003c/p\u003e\n\u003cp\u003e打开应用的manifest文件，在Eclipse中的AndroidManifest.xml。通过窗口底部的“AndroidManifest.xml”选项页切换到xml视图\u003c/p\u003e\n\u003cp\u003e应用程序的mainfest文件是保存你应用程序全局设置和信息的地方。你将会看见里面已经有一个.BrewClockActivity 的Activity声明，并且这个Activity在程序运行的时候启动。\u003c/p\u003e\n\u003cp\u003e在\u0026lt;application\u0026gt;中, 增加一个 \u0026lt;activity\u0026gt; 节点，描述为“Add Tea”的 Activity. 使用我们早先在strings.xml声明的 add_tea_label字符串作为这个Activity的标题：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"xml\" class=\"EnlighterJSRAW\"\u003e\u0026lt;!-- AndroidManifest.xml --\u0026gt;\n\u0026lt;application …\u0026gt;\n  …\n  \u0026lt;activity android:name=\u0026#34;.AddTeaActivity\u0026#34; android:label=\u0026#34;@string/add_tea_label\u0026#34; /\u0026gt;\n\u0026lt;/application\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003e在你再次运行BrewClock保存这个manifest文件。这一次，当你打开菜单并点击“Add Tea,”时Android将会启动AddTeaActivity。按下back按键返回主屏幕。\u003c/p\u003e\n\u003cp\u003e完成了Activity的关联，下一步我们将要开发一个增加新茶的界面！\u003c/p\u003e\n\u003ch3\u003e开发茶叶编辑器界面\u003c/h3\u003e\n\u003cp\u003e开发一个增加茶叶界面和上一个教程中开发的BrewClock主界面是非常相似的。首先要创建一个布局文件，然后在按照下面的讲解添加适合的XML内容。\u003c/p\u003e\n\u003cp\u003e和主界面开发所有不同的是，你可以使用Android最近改进的Eclipse布局编辑器来开界面。创建一个新的XML文件来定义你的布局。从菜单File → New然后选择 “Android XML File,” 选择 “Layout”类型。并将文件命令为\u003cem\u003eadd_tea.xml\u003c/em\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" src=\" https://coolshell.cn/wp-content/uploads/2011/04/11_new_layout_xml.jpg\"/\u003e\u003c/p\u003e\n\u003cp\u003e用下面的布局内容替换\u003cem\u003eadd_tea.xml\u003c/em\u003e 文件的内容：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"xml\" class=\"EnlighterJSRAW\"\u003e\u0026lt;!-- res/layouts/add_tea.xml --\u0026gt;\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\n\u0026lt;LinearLayout\n  xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\n  android:layout_width=\u0026#34;fill_parent\u0026#34;\n  android:layout_height=\u0026#34;fill_parent\u0026#34;\n  android:orientation=\u0026#34;vertical\u0026#34;\n  android:padding=\u0026#34;10dip\u0026#34;\u0026gt;\n\n  \u0026lt;TextView\n    android:text=\u0026#34;@string/tea_name_label\u0026#34;\n    android:layout_width=\u0026#34;fill_parent\u0026#34;\n    android:layout_height=\u0026#34;wrap_content\u0026#34; /\u0026gt;\n\n  \u0026lt;EditText\n    android:id=\u0026#34;@+id/tea_name\u0026#34;\n    android:layout_width=\u0026#34;fill_parent\u0026#34;\n    android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt;\n\n  \u0026lt;TextView\n    android:text=\u0026#34;@string/brew_time_label\u0026#34;\n    android:layout_width=\u0026#34;wrap_content\u0026#34;\n    android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt;\n\n  \u0026lt;SeekBar\n    android:id=\u0026#34;@+id/brew_time_seekbar\u0026#34;\n    android:layout_width=\u0026#34;fill_parent\u0026#34;\n    android:layout_height=\u0026#34;wrap_content\u0026#34;\n    android:progress=\u0026#34;2\u0026#34;\n    android:max=\u0026#34;9\u0026#34; /\u0026gt;\n\n  \u0026lt;TextView\n    android:id=\u0026#34;@+id/brew_time_value\u0026#34;\n    android:text=\u0026#34;3 m\u0026#34;\n    android:textSize=\u0026#34;20dip\u0026#34;\n    android:layout_width=\u0026#34;fill_parent\u0026#34;\n    android:layout_height=\u0026#34;wrap_content\u0026#34;\n    android:gravity=\u0026#34;center_horizontal\u0026#34; /\u0026gt;\n\u0026lt;/LinearLayout\u0026gt;\n\n\u003c/pre\u003e\n\u003cp\u003e为了这个界面上使用的字符串，我们同样也需要在\u003cem\u003estrings.xml\u003c/em\u003e 中增加一些新的内容：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"xml\" class=\"EnlighterJSRAW\"\u003e\u0026lt;!-- res/values/strings.xml --\u0026gt;\n\u0026lt;resources\u0026gt;\n  \u0026lt;!-- … --\u0026gt;\n  \u0026lt;string name=\u0026#34;tea_name_label\u0026#34;\u0026gt;Tea Name\u0026lt;/string\u0026gt;\n\n  \u0026lt;string name=\u0026#34;brew_time_label\u0026#34;\u0026gt;Brew Time\u0026lt;/string\u0026gt;\n\u0026lt;/resources\u0026gt;\n\n\u003c/pre\u003e\n\u003cp\u003e在这个布局中，我们加了一个新的界面控件类型，SeekBar。这个控件可以让用户通过从左向右拖拉一个指示器thumb，非常容易的指定泡茶时间。这个值得范围从0到android:max。\u003c/p\u003e\n\u003cp\u003e在这个界面中，我们使用刻度是0到9，意思是从1分钟到10分钟（泡0分钟茶等于是浪费好茶）。第一，我们需要确保AddTeaActivity能正确地加载我们的界面:\u003c/p\u003e\n\u003cp\u003e在Activity的onCreate()方法中增加下面的代码用于加载和显示add_tea布局文件：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/AddTeaActivity.java\npublic void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.add_tea);\n}\n\n\u003c/pre\u003e\n\u003cp\u003e现在通过运行项目来测试你的应用程序，按下“Menu”按键，并点击“Add Tea”菜单。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" src=\" https://coolshell.cn/wp-content/uploads/2011/04/12_add_tea_interface.jpg\"/\u003e\u003c/p\u003e\n\u003cp\u003e你将从“Add Tea”屏幕上看到你的新界面。你可以在文本域中输入文字和从左到右拖动SeekBar。但是由于我们没有增加相关代码，这个界面并没有实现什么具体的功能。\u003c/p\u003e\n\u003cp\u003e在AddTeaActivity中增加下面这些属性，并关联到我们界面上元素：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/AddTeaActivity.java\npublic class AddTeaActivity {\n  // …\n\n  /** Properties **/\n  protected EditText teaName;\n  protected SeekBar brewTimeSeekBar;\n  protected TextView brewTimeLabel;\n\n  // …\n\n\u003c/pre\u003e\n\u003cp\u003e下一步,关联属性和你的界面：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003epublic void onCreate(Bundle savedInstanceState) {\n  // …\n  // Connect interface elements to properties\n  teaName = (EditText) findViewById(R.id.tea_name);\n  brewTimeSeekBar = (SeekBar) findViewById(R.id.brew_time_seekbar);\n  brewTimeLabel = (TextView) findViewById(R.id.brew_time_value);\n}\n\n\u003c/pre\u003e\n\u003cp\u003e界面非常的简单，我们只要增加相应SeekBar 改变事件的监听器。当用户从左到右移动SeekBar指示器时，我们的应用程序需要读出新值并更新SeekBar之下泡茶时间标签的内容。我们将使用一个监听器来检测SeekBar何时改变的：\u003c/p\u003e\n\u003cp\u003e在AddTeaActivity类声明中增加实现 onSeekBarChangedListener接口，并添加所必要的方法：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/AddTeaActivity.java\npublic class AddTeaActivity\nextends Activity\nimplements OnSeekBarChangeListener {\n  // …\n\n  public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n    // TODO Detect change in progress\n  }\n\n  public void onStartTrackingTouch(SeekBar seekBar) {}\n\n  public void onStopTrackingTouch(SeekBar seekBar) {}\n}\n\n\u003c/pre\u003e\n\u003cp\u003e我们唯一感兴趣的事件时onProgressChanged，因此我们需要在这个方法内增加代码更新泡茶时间标签的内容为SeekBar选中的值。之前我们说过SeekBar的刻度是0到9，因此我们需要将SeekBar的加1的值来显示给用户才有意义。\u003c/p\u003e\n\u003cp\u003e在\u003cem\u003eAddTeaActivity.java\u003c/em\u003e代码中增加如下的onProgressChanged()代码：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/AddTeaActivity.java\npublic void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n  if(seekBar == brewTimeSeekBar) {\n    // Update the brew time label with the chosen value.\n    brewTimeLabel.setText((progress + 1) + \u0026#34; m\u0026#34;);\n  }\n}\n\n\u003c/pre\u003e\n\u003cp\u003e在AddTeaActivity的onCreate方法中设置监听器：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/AddTeaActivity.java\npublic void onCreate(Bundle savedInstanceState) {\n  // …\n\n  // Setup Listeners\n  brewTimeSeekBar.setOnSeekBarChangeListener(this);\n}\n\n\u003c/pre\u003e\n\u003cp\u003e现在运行你的程序，并拖动SeekBar,泡茶时间标签的内容将会同步更新为正确地值：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" src=\" https://coolshell.cn/wp-content/uploads/2011/04/13_seekbar.jpg\"/\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%BF%9D%E5%AD%98%E6%96%B0%E5%A2%9E%E8%8C%B6%E5%8F%B6\"\u003e\u003c/span\u003e保存新增茶叶\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e完成了增加茶叶界面之后,剩下的工作就是让用户可以将他们新增的茶叶保存到数据库中.我们将会对界面上输入数据增加一点校验,以避免茶叶名为空的数据被保存到数据库中！\u003c/p\u003e\n\u003cp\u003e在编辑器中打开\u003cem\u003estrings.xml\u003c/em\u003e 增加一些我们在应用程序将要使用到的新标签。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"xml\" class=\"EnlighterJSRAW\"\u003e\u0026lt;!-- res/values/strings.xml --\u0026gt;\n\u0026lt;string name=\u0026#34;save_tea_label\u0026#34;\u0026gt;Save Tea\u0026lt;/string\u0026gt;\n\u0026lt;string name=\u0026#34;invalid_tea_title\u0026#34;\u0026gt;Tea could not be saved.\u0026lt;/string\u0026gt;\n\n\u0026lt;string name=\u0026#34;invalid_tea_no_name\u0026#34;\u0026gt;Enter a name for your tea.\u0026lt;/string\u0026gt;\n\n\n\u003c/pre\u003e\n\u003cp\u003e如同前面的那样，我们需要为AddTeaActivity创建一个新的选项菜单来让用户可以执行保存茶叶的指令：\u003c/p\u003e\n\u003cp\u003e在\u003cem\u003eres/menus\u003c/em\u003e 目录，通过选择File → New 并选 Other → Android XML 文件来创建一个新的 \u003cem\u003eadd_tea.xml\u003c/em\u003e XML文件, 记住资源类型为“Menu”。\u003c/p\u003e\n\u003cp\u003e增加保存茶叶的菜单项：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"xml\" class=\"EnlighterJSRAW\"\u003e\n\n\u0026lt;!-- res/menus/add_tea.xml --\u0026gt;\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\n\u0026lt;menu xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt;\n  \u0026lt;item android:title=\u0026#34;@string/save_tea_label\u0026#34; android:id=\u0026#34;@+id/save_tea\u0026#34; /\u0026gt;\n\u0026lt;/menu\u0026gt;\n\n\n\u003c/pre\u003e\n\u003cp\u003e返回 AddTeaActivity 代码中,类似你在BrewClockActivity中一样，增加重载方法onCreateOptionsMenu 和onOptionsItemSelected。唯一的区别是这次你提供的MenuInflater的资源文件名是\u003cem\u003eadd_tea.xml\u003c/em\u003e ：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/AddTeaActivity.java\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n  MenuInflater inflater = getMenuInflater();\n  inflater.inflate(R.menu.add_tea, menu);\n\n  return true;\n}\n\n@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n  switch(item.getItemId()) {\n    case R.id.save_tea:\n      saveTea();\n\n    default:\n      return super.onOptionsItemSelected(item);\n  }\n}\n\n\u003c/pre\u003e\n\u003cp\u003e下一步, 增加新方法, saveTea(), 来保存茶叶信息。saveTea 首先从界面上读取茶叶的名称和用户所选的泡茶时间，如果这些输入数据都能通过验证，就将这些数据保存到数据库中：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/AddTeaActivity.java\npublic boolean saveTea() {\n  // Read values from the interface\n  String teaNameText = teaName.getText().toString();\n  int brewTimeValue = brewTimeSeekBar.getProgress() + 1;\n\n  // Validate a name has been entered for the tea\n  if(teaNameText.length() \u0026lt; 2) {\n    AlertDialog.Builder dialog = new AlertDialog.Builder(this);\n    dialog.setTitle(R.string.invalid_tea_title);\n    dialog.setMessage(R.string.invalid_tea_no_name);\n    dialog.show();\n\n    return false;\n  }\n\n  // The tea is valid, so connect to the tea database and insert the tea\n  TeaData teaData = new TeaData(this);\n  teaData.insert(teaNameText, brewTimeValue);\n  teaData.close();\n\n  return true;\n}\n\n\n\u003c/pre\u003e\n\u003cp\u003e大段的代码，让我们过一遍这段代码的逻辑。\u003c/p\u003e\n\u003cp\u003e首先，我们从文本框中读取茶叶名称，从SeekBar读取泡茶时间（记着读的时间要加1以保证时间在1到10分钟之内）。下一步，我们验证茶叶名大于等于2个字符（这是非常简单的验证，如果想做更复杂的验证，那么就使用正则表达式吧）。\u003c/p\u003e\n\u003cp\u003e如果茶叶名称非法，我们需要让用户知道。我们使用Android提供的工具类，AlertDialog.Biulder类，这个类给我们提供了一个快捷创建和显示模态窗口的方法。在设置完标题和错误信息后，通过调用show方法来显示对话框。这个对话框是模态的modal，因此用户只有按下back按键，这个对话框才会关闭。在这时，我们不想保存任何数据，所以我们的方法返回了false。\u003c/p\u003e\n\u003cp\u003e如果茶名称合法，我们通过TeaData类创建一个到茶叶数据库的临时连接。这里又一次的显示出把数据库访问抽象成一个独立文件的好处：你可以从任何地方完成对数据库（译者注：其实应该是对TeaData 类）的访问。\u003c/p\u003e\n\u003cp\u003e当调用完teaData.insert() 来增加记录到数据库后，我们不再需要数据库连接，因此在我们返回成功前，我们关闭了连接。\u003c/p\u003e\n\u003cp\u003e在模拟器中运行你的程序，按下“Menu”按键，点击屏幕上的“Add Tea”。试图通过在此按下“Menu”和点击屏幕的 “Save Tea.”来保存空茶叶名的茶叶数据。由于是没有茶叶名，一条错误消息将出现在你的面前：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" src=\" https://coolshell.cn/wp-content/uploads/2011/04/14_invalid_tea.jpg\"/\u003e\u003c/p\u003e\n\u003cp\u003e下一步，试着键入你的茶叶名，并选择合适的泡茶时间，再次从菜单选择 “Save Tea” 。这一次，你将不在看到错误的消息。事实上，你什么都看消息不到。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%94%B9%E8%BF%9B%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C\"\u003e\u003c/span\u003e改进用户体验\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e这样做不是一个很好的用户体验，用户不能知道他的茶叶是否已经成功地保存了。事实上，用户只有从“Add Tea”界面返回，去茶叶列表中查看这一个办法来检查他的是否成功的被保存。这样的做法不好，让用户知道他们的茶叶数据被成功地保存会是更好的一种方式。在茶叶数据被成功保存后，让我们在屏幕上显示一条成功信息。\u003c/p\u003e\n\u003cp\u003e我们要一条被动的非模态化的信息，因此AlertDialog这次就不能满足我们的需求了。下面我们将要使用另外一个Android的非常流行的特性，Toast。\u003c/p\u003e\n\u003cp\u003eToast 在接近屏幕的下方显示一条消息，但是并不会终止用户的操作。Toast经常用于做非重要的的提醒和状态更新。.\u003c/p\u003e\n\u003cp\u003e在\u003cem\u003estrings.xml\u003c/em\u003e 资源文件中新增一个字符串。注意字符串中的%s。我们在下一步中将保存的茶叶名字结合到这个字符串来显示信息。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"xml\" class=\"EnlighterJSRAW\"\u003e\u0026lt;!-- res/values/strings.xml --\u0026gt;\n\u0026lt;string name=\u0026#34;save_tea_success\u0026#34;\u0026gt;%s tea has been saved.\u0026lt;/string\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003e注意，在onOptionsItemSelected 代码中进行修改，当saveTea返回真时，创建并显示一条弹出式的Toast。第二参数getString()用来连接茶叶名称到Toast信息中。最后，我们需要将茶叶名称清楚，以便用户可以快速增加更多的新茶。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/AddTeaActivity.java\n// …\nswitch(item.getItemId()) {\n case R.id.save_tea:\n   if(saveTea()) {\n     Toast.makeText(this, getString(R.string.save_tea_success, teaName.getText().toString()), Toast.LENGTH_SHORT).show();\n     teaName.setText(\u0026#34;\u0026#34;);\n   }\n// …\n\u003c/pre\u003e\n\u003cp\u003e现在，重新运行应用程序，并增加和保存一些新茶叶。你将会看到弹出式的Toast并让你知道你的茶叶信息已经被保存成功。getString()方法用于连接存在XML文件中的String和茶叶名称，并将%s替换成茶叶的名称。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" src=\" https://coolshell.cn/wp-content/uploads/2011/04/16_valid_save.jpg\"/\u003e\u003c/p\u003e\n\u003cp\u003e按下“Back”按键，返回应用程序的主屏幕，点击茶叶spinner。你新增的在数据库中的茶叶已近可以显示在spinner的选项中！\u003c/p\u003e\n\u003ch3\u003e用户首选项\u003c/h3\u003e\n\u003cp\u003e现在BrewClock已经完成了所有的功能。用户可以增加他们喜爱的茶叶和各自不同的泡茶时间到数据库中，并且他们可以快速的从选择他们并开始泡上一杯新茶。任何新增的茶叶信息都被保存在数据库中，因此，即使你退出你的程序，这些茶叶信息在你下次启动程序时仍然可以从spinner列表中找到。\u003c/p\u003e\n\u003cp\u003e当你重启BrewClock的时候，有一件事你必须注意，就是泡茶计数被清为了0。这使得跟踪我们每天喝了多少茶（一条重要的数据）变得困难。作为最后一个练习，让我们将泡茶计数保存在我们设备上。\u003c/p\u003e\n\u003cp\u003e我们将不通过增加茶叶数据库的表来完成这个功能，我们将使用Android的“共享首选项Shared Preferences”，一个Android提供给你应用程序用于存储简单数据的数据库（字符串，数字，等等）。例如，优秀的最高分和用户首选项等（译者注：非常类似Windows下的注册表）。\u003c/p\u003e\n\u003cp\u003e我们首先在\u003cem\u003eBrewClockActivity.java\u003c/em\u003e 中增加一堆常量。这些常量用于存放你的共享首选项的名称。我们将使用键的名称来访问泡茶计数。Android负责保存和持久化我们的共享首选项文件。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e\n\n// src/com/example/brewclock/BrewClockActivity.java\n\nprotected static final String SHARED_PREFS_NAME = \u0026#34;brew_count_preferences\u0026#34;;\n\nprotected static final String BREW_COUNT_SHARED_PREF = \u0026#34;brew_count\u0026#34;;\n\n\u003c/pre\u003e\n\u003cp\u003e下一步，为了我们能在用户首选项中读写泡茶计数，而不是直接的依赖于代码中的初始值，我们将在代码中做一些修改。在BrewClockActivity 的 onCreate 方法中我们将就该setBrewCount附件的代码：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/BrewClockActivity.java\npublic void onCreate() {\n  // … \n\n  // Set the initial brew values\n  SharedPreferences sharedPreferences = getSharedPreferences(SHARED_PREFS_NAME, MODE_PRIVATE);\n  brewCount = sharedPreferences.getInt(BREW_COUNT_SHARED_PREF, 0);\n  setBrewCount(brewCount);\n\n  // …\n}\n\n\u003c/pre\u003e\n\u003cp\u003e这里我们将以使用SharedPreference来获取应用程序的共享首选项的实例，并希望得到brew_count键值的值（通过我们之前定义的BREW_COUNT_SHARED_PREF常量来标示）。如果值能获取，这个值将返回给应用程序，如果没有我们使用getInt的第二参数作为默认值返回（在教程中为0）。\u003c/p\u003e\n\u003cp\u003e现在我们取得存储的泡茶计数值，我们需要确保每当泡茶计数更新的时候，这个值能写回到共享首选项中。\u003c/p\u003e\n\u003cp\u003eBrewClockActivity的setBrewCount中增加下面的代码：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e// src/com/example/brewclock/BrewClockActivity.java\n public void setBrewCount(int count) {\n   brewCount = count;\n   brewCountLabel.setText(String.valueOf(brewCount));\n\n   // Update the brewCount and write the value to the shared preferences.\n   SharedPreferences.Editor editor = getSharedPreferences(SHARED_PREFS_NAME, MODE_PRIVATE).edit();\n   editor.putInt(BREW_COUNT_SHARED_PREF, brewCount);\n   editor.commit();\n }\n\n\n\u003c/pre\u003e\n\u003cp\u003e共享首选项不能直接地保存。我们需要使用Android的SharedPreferences.Editor类。调用SharedPreferences的edit方法，返回一个editor实例，这个实例用来保存我们的首选项值。我们只要调用editor实例的commit方法就可以将值保存到共享首选项中。\u003c/p\u003e\n\u003cp\u003e我们应用程序的所有代码都已完成，现在让我们测试一下我们的程序！\u003c/p\u003e\n\u003cp\u003e在模拟器中运行应用程序，定一个泡茶时间（这真是一个良好的借口去泡一杯你自己爱喝的茶哦）并退出应用程序，试着运行模拟器上的安装的其他应用程序确保BrewClock被终止。记住，除非这个应用程序已经不在内存中，否则Android不会终止一个Activity。\u003c/p\u003e\n\u003cp\u003e当你下一次运行你的应用程序时，你将看见之前的泡茶计数已经被维护了。\u003c/p\u003e\n\u003ch3\u003e总结\u003c/h3\u003e\n\u003cp\u003e恭喜!你已经完成了这个应用的程序的所有开发工作,并使用了Android　SDK中的数个核心组件。在本教程中，你从中学到了：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e创建一个简单的SQLite数据库，并保存你的数据；\u003c/li\u003e\n\u003cli\u003e使用Android的数据库类和编写客户化类抽象数据访问；\u003c/li\u003e\n\u003cli\u003e在你的应用程序中增加选项菜单。；\u003c/li\u003e\n\u003cli\u003e在你应用程序中创建并注册新Activity并使用Intent将他们绑定成一组界面；\u003c/li\u003e\n\u003cli\u003e使用内建的“共享首选项”数据库来保存和提取简单用户数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e无论你要开发神马样类型的应用程序，数据存储和持久化是一个重要的主题。从工具程序和业务工具到3-D游戏，几乎每个应用程序都需要使用到Android提供的数据工具类。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" src=\" https://coolshell.cn/wp-content/uploads/2011/04/17_brew_up.jpg\"/\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Activities\"\u003e\u003c/span\u003eActivities\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e虽然BrewClock现在在某方面来说已经是个功能完善的应用程序了。但是我们仍然可以在增加一些功能以改进用户体验。例如你可以使用下面的方法来改进你的应用程序：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在保存茶叶的时候检查是否存在茶叶名称重名；\u003c/li\u003e\n\u003cli\u003e增加一个菜单选项以将泡茶统计清0；\u003c/li\u003e\n\u003cli\u003e在共享首选项中保存最后所选的泡茶名称和时间以便程序重启时有一个有意义的默认值；\u003c/li\u003e\n\u003cli\u003e增加用户从茶叶数据库中删除记录的选项。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在\u003ca href=\"https://github.com/cblunt/BrewClock\"\u003eGitHub库\u003c/a\u003e 可以获取到所有的源代码，库中的未来的分支包含着Activitiy的解决方案 你可以通过切换你的本地代码拷贝到tutorial_2分支，下载这个开发教程源代码：\u003cbr/\u003e\n[code]\u003c/p\u003e\n\u003cp\u003e$ git clone git://github.com/cblunt/BrewClock.git\u003c/p\u003e\n\u003cp\u003e$ cd BrewClock\u003c/p\u003e\n\u003cp\u003e$ git checkout tutorial_2\u003c/p\u003e\n\u003cp\u003e[/code]\u003cbr/\u003e\n我希望你喜欢这个教程，希望这个教程能帮助你设计和开发更棒的Android应用程序。请通过在下面的回复让我知道你的建议和意见，当然我也欢迎你将你建议写在email中并发送给我。\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e感谢\u003ca href=\"http://blog.anselmbradford.com/\"\u003eAnselm\u003c/a\u003e的建议和反馈！ \u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e（全文完）\u003c/em\u003e\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/4270.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2011/04/install-150x150.gif\" alt=\"Eclipse开发Android应用程序入门\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/4270.html\" class=\"wp_rp_title\"\u003eEclipse开发Android应用程序入门\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17066.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2015/04/phishing-1-150x150.jpg\" alt=\"关于移动端的钓鱼式攻击\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17066.html\" class=\"wp_rp_title\"\u003e关于移动端的钓鱼式攻击\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12225.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/12/1053-DHH-150x150.jpg\" alt=\"DHH 谈混合移动应用开发\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12225.html\" class=\"wp_rp_title\"\u003eDHH 谈混合移动应用开发\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12136.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/11/inbox2-640x264-150x150.jpg\" alt=\"Google Inbox如何跨平台重用代码？\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12136.html\" class=\"wp_rp_title\"\u003eGoogle Inbox如何跨平台重用代码？\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/4220.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/0.jpg\" alt=\"一些有意思的文章和资源\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/4220.html\" class=\"wp_rp_title\"\u003e一些有意思的文章和资源\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/3589.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/1.jpg\" alt=\"食客还是大厨\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/3589.html\" class=\"wp_rp_title\"\u003e食客还是大厨\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-4334\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"502c79d770\"\u003e\u003cimg id=\"rating_4334_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4334, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-5265d609701b485e36cd1f80-=\"\"/\u003e\u003cimg id=\"rating_4334_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4334, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-5265d609701b485e36cd1f80-=\"\"/\u003e\u003cimg id=\"rating_4334_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4334, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-5265d609701b485e36cd1f80-=\"\"/\u003e\u003cimg id=\"rating_4334_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4334, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-5265d609701b485e36cd1f80-=\"\"/\u003e\u003cimg id=\"rating_4334_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4334, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-5265d609701b485e36cd1f80-=\"\"/\u003e (\u003cstrong\u003e13\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e3.00\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_4334_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"Eclipse开发Android应用程序入门:重装上阵\"/\u003e\u003cmeta itemprop=\"headline\" content=\"Eclipse开发Android应用程序入门:重装上阵\"/\u003e\u003cmeta itemprop=\"description\" content=\"翻译:赵锟\n原文：http://www.smashingmagazine.com/2011/03/28/get-started-developing-for-android-with-eclipse-reloaded/\n\n在我们教程系列的第一部分中，我们使用Android和Eclipse开发了一个简单的饮茶计时器的应用程序。在第二部分，我们将继续开发这个程序，并给它增加一些其他的额外的功能。...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2011-04-08T08:30:09+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2011-04-08T11:30:06+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/4334.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"Neo\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/4334.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"3\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"13\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-4334-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2011-04-08T08:30:09+08:00",
  "Author": "Neo"
}