{
  "Source": "coolshell.cn",
  "Title": "Huffman 编码压缩算法",
  "Link": "https://coolshell.cn/articles/7459.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"b723c1ce3737d8036316841d-text/javascript\"\u003e\u003c/script\u003e前两天发布那个\u003ca title=\"rsync 的核心算法\" href=\"https://coolshell.cn/articles/7425.html\" target=\"_blank\"\u003ersync算法\u003c/a\u003e后，想看看数据压缩的算法，知道一个经典的压缩算法Huffman算法。相信大家应该听说过 \u003ca title=\"David Huffman\" href=\"https://en.wikipedia.org/wiki/David_A._Huffman\" target=\"_blank\"\u003eDavid Huffman\u003c/a\u003e 和他的压缩算法—— \u003ca href=\"https://en.wikipedia.org/wiki/Huffman_coding\" target=\"_blank\"\u003eHuffman Code\u003c/a\u003e，一种通过字符出现频率，\u003ca href=\"https://en.wikipedia.org/wiki/Priority_queue\" target=\"_blank\"\u003ePriority Queue\u003c/a\u003e，和二叉树来进行的一种压缩算法，这种二叉树又叫Huffman二叉树 —— 一种带权重的树。从学校毕业很长时间的我忘了这个算法，但是网上查了一下，中文社区内好像没有把这个算法说得很清楚的文章，尤其是树的构造，而正好看到一篇国外的文章《\u003ca href=\"http://en.nerdaholyc.com/huffman-coding-on-a-string/\" target=\"_blank\"\u003eA Simple Example of Huffman Code on a String\u003c/a\u003e》，其中的例子浅显易懂，相当不错，我就转了过来。注意，我没有对此文完全翻译。\u003c/p\u003e\n\u003cp\u003e我们直接来看示例，如果我们需要来压缩下面的字符串：\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003cstrong\u003e “beep boop beer!” \u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e首先，我们先计算出每个字符出现的次数，我们得到下面这样一张表 :\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003ccenter\u003e\u003cp\u003e\u003c/p\u003e\n\u003ctable style=\"width: 250px; height: 200px;\"\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e字符\u003c/span\u003e\u003c/td\u003e\n\u003ctd\u003e次数\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e‘b’\u003c/span\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e3\u003c/span\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e‘e’\u003c/span\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e4\u003c/span\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e‘p’\u003c/span\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e2\u003c/span\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e‘ ‘\u003c/span\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e2\u003c/span\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e‘o’\u003c/span\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e2\u003c/span\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e‘r’\u003c/span\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e1\u003c/span\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e‘!’\u003c/span\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e1\u003c/span\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003c/p\u003e\u003c/center\u003e\u003cbr/\u003e\n然后，我把把这些东西放到Priority Queue中（用出现的次数据当 priority），我们可以看到，Priority Queue 是以Prioirry排序一个数组，如果Priority一样，会使用出现的次序排序：下面是我们得到的Priority Queue：\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-7459\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://coolshell.cn/wp-content/uploads/2012/05/coada1.png\"\u003e\u003cimg decoding=\"async\" class=\"alignnone size-full wp-image-234 aligncenter\" title=\"coada1\" src=\"https://coolshell.cn/wp-content/uploads/2012/05/coada1.png\" alt=\"\" width=\"440\" height=\"61\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e接下来就是我们的算法——把这个Priority Queue 转成二叉树。我们始终从queue的头取两个元素来构造一个二叉树（第一个元素是左结点，第二个是右结点），并把这两个元素的priority相加，并放回Priority中（再次注意，这里的Priority就是字符出现的次数），然后，我们得到下面的数据图表：\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003ca href=\"https://coolshell.cn/wp-content/uploads/2012/05/coada2.png\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"alignnone size-full wp-image-239\" title=\"coada2\" src=\"https://coolshell.cn/wp-content/uploads/2012/05/coada2.png\" alt=\"\" width=\"411\" height=\"151\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e同样，我们再把前两个取出来，形成一个Priority为2+2=4的结点，然后再放回Priority Queue中 :\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://coolshell.cn/wp-content/uploads/2012/05/coada31.png\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"alignnone size-full wp-image-242 aligncenter\" title=\"coada3\" src=\"https://coolshell.cn/wp-content/uploads/2012/05/coada31.png\" alt=\"\" width=\"325\" height=\"201\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e继续我们的算法（我们可以看到，这是一种自底向上的建树的过程）：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://coolshell.cn/wp-content/uploads/2012/05/coada4.png\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"alignnone size-full wp-image-244 aligncenter\" title=\"coada4\" src=\"https://coolshell.cn/wp-content/uploads/2012/05/coada4.png\" alt=\"\" width=\"326\" height=\"221\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://coolshell.cn/wp-content/uploads/2012/05/coada5.png\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"alignnone size-full wp-image-288 aligncenter\" title=\"coada5\" src=\"https://coolshell.cn/wp-content/uploads/2012/05/coada5.png\" alt=\"\" width=\"347\" height=\"207\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://coolshell.cn/wp-content/uploads/2012/05/coada61.png\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"alignnone size-full wp-image-290 aligncenter\" title=\"coada6\" src=\"https://coolshell.cn/wp-content/uploads/2012/05/coada61.png\" alt=\"\" width=\"344\" height=\"273\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e最终我们会得到下面这样一棵二叉树：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://coolshell.cn/wp-content/uploads/2012/05/arbore_final.png\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"alignnone size-full wp-image-291 aligncenter\" title=\"arbore_final\" src=\"https://coolshell.cn/wp-content/uploads/2012/05/arbore_final.png\" alt=\"\" width=\"452\" height=\"304\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e此时，我们把这个树的左支编码为0，右支编码为1，这样我们就可以遍历这棵树得到字符的编码，比如：‘b’的编码是 00，’p’的编码是101， ‘r’的编码是1000。\u003cstrong\u003e我们可以看到出现频率越多的会越在上层，编码也越短，出现频率越少的就越在下层，编码也越长\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://coolshell.cn/wp-content/uploads/2012/05/arbore_final_numerotat.png\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"alignnone size-full wp-image-292 aligncenter\" title=\"arbore_final_numerotat\" src=\"https://coolshell.cn/wp-content/uploads/2012/05/arbore_final_numerotat.png\" alt=\"\" width=\"452\" height=\"304\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e最终我们可以得到下面这张编码表：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003ccenter\u003e\u003cp\u003e\u003c/p\u003e\n\u003ctable style=\"width: 250px; height: 200px;\"\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e字符\u003c/td\u003e\n\u003ctd\u003e编码\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e‘b’\u003c/span\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e00\u003c/span\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e‘e’\u003c/span\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e11\u003c/span\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e‘p’\u003c/span\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e101\u003c/span\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e‘ ‘\u003c/span\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e011\u003c/span\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e‘o’\u003c/span\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e010\u003c/span\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e‘r’\u003c/span\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e1000\u003c/span\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e‘!’\u003c/span\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cspan style=\"font-size: 12px;\"\u003e1001\u003c/span\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003c/p\u003e\u003c/center\u003e\u003cbr/\u003e\n这里需要注意一点，当我们encode的时候，我们是按“bit”来encode，decode也是通过bit来完成，比如，如果我们有这样的bitset “1011110111″ 那么其解码后就是 “pepe”。所以，我们需要通过这个二叉树建立我们Huffman编码和解码的字典表。\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e这里需要注意的一点是，我们的Huffman对各个字符的编码是不会冲突的，也就是说，\u003cstrong\u003e不会存在某一个编码是另一个编码的前缀\u003c/strong\u003e，不然的话就会大问题了。因为encode后的编码是没有分隔符的。\u003c/p\u003e\n\u003cp style=\"text-align: left; padding-left: 30px;\"\u003e于是，对于我们的原始字符串  beep boop beer!\u003c/p\u003e\n\u003cp style=\"text-align: left; padding-left: 30px;\"\u003e其对就能的二进制为 : 0110 0010 0110 0101 0110 0101 0111 0000 0010 0000 0110 0010 0110 1111 0110 1111 0111 0000 0010 0000 0110 0010 0110 0101 0110 0101 0111 0010 0010 0001\u003c/p\u003e\n\u003cp style=\"text-align: left; padding-left: 30px;\"\u003e我们的Huffman的编码为： 0011 1110 1011 0001 0010 1010 1100 1111 1000 1001\u003c/p\u003e\n\u003cp\u003e从上面的例子中，我们可以看到被压缩的比例还是很可观的。\u003c/p\u003e\n\u003cp\u003e作者给出了源码你可以看看（ C99标准） \u003ca href=\"http://en.nerdaholyc.com/wp-content/uploads/2012/05/huffman_string.zip\"\u003eDownload the source files\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17225.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2015/08/cuckoo-150x150.jpg\" alt=\"Cuckoo Filter：设计与实现\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17225.html\" class=\"wp_rp_title\"\u003eCuckoo Filter：设计与实现\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"Leetcode 编程训练\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_title\"\u003eLeetcode 编程训练\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11847.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/08/puzzle-150x150.png\" alt=\"谜题的答案和活动的心得体会\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11847.html\" class=\"wp_rp_title\"\u003e谜题的答案和活动的心得体会\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11832.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/08/538efefbgw1eiz9cvx78fj20rm0fmdi8-150x150.jpg\" alt=\"【活动】解迷题送礼物\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11832.html\" class=\"wp_rp_title\"\u003e【活动】解迷题送礼物\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/10590.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview-150x150.jpeg\" alt=\"二维码的生成细节和原理\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/10590.html\" class=\"wp_rp_title\"\u003e二维码的生成细节和原理\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/10427.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/10/buddy-memory-allocation-150x150.jpg\" alt=\"伙伴分配器的一个极简实现\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/10427.html\" class=\"wp_rp_title\"\u003e伙伴分配器的一个极简实现\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-7459\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"4f4afdc66e\"\u003e\u003cimg id=\"rating_7459_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(7459, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b723c1ce3737d8036316841d-=\"\"/\u003e\u003cimg id=\"rating_7459_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(7459, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b723c1ce3737d8036316841d-=\"\"/\u003e\u003cimg id=\"rating_7459_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(7459, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b723c1ce3737d8036316841d-=\"\"/\u003e\u003cimg id=\"rating_7459_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(7459, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b723c1ce3737d8036316841d-=\"\"/\u003e\u003cimg id=\"rating_7459_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(7459, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b723c1ce3737d8036316841d-=\"\"/\u003e (\u003cstrong\u003e24\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.17\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_7459_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"Huffman 编码压缩算法\"/\u003e\u003cmeta itemprop=\"headline\" content=\"Huffman 编码压缩算法\"/\u003e\u003cmeta itemprop=\"description\" content=\"前两天发布那个rsync算法后，想看看数据压缩的算法，知道一个经典的压缩算法Huffman算法。相信大家应该听说过 David Huffman 和他的压缩算法—— Huffman Code，一种通过字符出现频率，Priority Queue，和二叉树来进行的一种压缩算法，这种二叉树又叫Huffman二叉树 —— 一种带权重的树。从学校毕业很长时间的我忘了这个算法，但是网上查了一下，中文社区内好像没...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2012-05-22T13:32:05+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2012-05-22T16:23:34+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/7459.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/7459.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.17\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"24\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-7459-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2012-05-22T13:32:05+08:00",
  "Author": "陈皓"
}