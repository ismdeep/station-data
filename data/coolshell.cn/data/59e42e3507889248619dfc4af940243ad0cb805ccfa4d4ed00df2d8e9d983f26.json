{
  "Source": "coolshell.cn",
  "Title": "关于高可用的系统",
  "Link": "https://coolshell.cn/articles/17459.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"c598616fb20c110b14da7573-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright size-medium wp-image-17475\" src=\"https://coolshell.cn/wp-content/uploads/2016/08/HighAvailability-BK-300x300.png\" alt=\"HighAvailability-BK\" width=\"300\" height=\"300\" srcset=\"https://coolshell.cn/wp-content/uploads/2016/08/HighAvailability-BK-300x300.png 300w, https://coolshell.cn/wp-content/uploads/2016/08/HighAvailability-BK-150x150.png 150w, https://coolshell.cn/wp-content/uploads/2016/08/HighAvailability-BK-768x768.png 768w, https://coolshell.cn/wp-content/uploads/2016/08/HighAvailability-BK-200x200.png 200w, https://coolshell.cn/wp-content/uploads/2016/08/HighAvailability-BK-270x270.png 270w, https://coolshell.cn/wp-content/uploads/2016/08/HighAvailability-BK.png 1000w\" sizes=\"(max-width: 300px) 100vw, 300px\"/\u003e在《\u003ca href=\"https://coolshell.cn/articles/17446.html\" target=\"_blank\"\u003e这多年来我一直在钻研的技术\u003c/a\u003e》这篇文章中，我讲述了一下，我这么多年来一直在关注的技术领域，其中我多次提到了工业级的软件，我还以为有很多人会问我怎么定义工业级？以及一个高可用性的软件系统应该要怎么干出来？这样我也可以顺理成章的写下这篇文章，但是没有人问，那么，我只好厚颜无耻的自己写下这篇文章了。哈哈。\u003c/p\u003e\n\u003cp\u003e另外，我在一些讨论高可用系统的地方看到大家只讨论各个公司的技术方案，\u003cstrong\u003e其实，高可用的系统并不简单的是技术方案，一个高可用的系统其实还包括很多别的东西，所以，我觉得大家对高可用的系统了解的还不全面，为了让大家的认识更全面，所以，我写下这篇文章\u003c/strong\u003e。\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E7%90%86%E8%A7%A3%E9%AB%98%E5%8F%AF%E7%94%A8%E7%B3%BB%E7%BB%9F\" title=\"理解高可用系统\"\u003e理解高可用系统\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E9%AB%98%E5%8F%AF%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" title=\"高可用系统的技术解决方案\"\u003e高可用系统的技术解决方案\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E9%AB%98%E5%8F%AF%E7%94%A8%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88%E7%9A%84%E7%A4%BA%E4%BE%8B\" title=\"高可用技术方案的示例\"\u003e高可用技术方案的示例\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E7%9A%84SLA%E7%9A%84%E5%AE%9A%E4%B9%89\" title=\"高可用性的SLA的定义\"\u003e高可用性的SLA的定义\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E5%BD%B1%E5%93%8D%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E5%9B%A0%E7%B4%A0\" title=\"影响高可用的因素\"\u003e影响高可用的因素\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#%E6%97%A0%E8%AE%A1%E5%88%92%E7%9A%84%E5%AE%95%E6%9C%BA%E5%8E%9F%E5%9B%A0\" title=\"无计划的宕机原因\"\u003e无计划的宕机原因\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#%E6%9C%89%E8%AE%A1%E5%88%92%E7%9A%84%E5%AE%95%E6%9C%BA%E5%8E%9F%E5%9B%A0\" title=\"有计划的宕机原因\"\u003e有计划的宕机原因\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#%E7%9C%9F%E6%AD%A3%E5%86%B3%E5%AE%9A%E9%AB%98%E5%8F%AF%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%AC%E8%B4%A8%E5%8E%9F%E5%9B%A0\" title=\"真正决定高可用系统的本质原因\"\u003e真正决定高可用系统的本质原因\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-9\" href=\"#%E5%85%B6%E5%AE%83\" title=\"其它\"\u003e其它\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%90%86%E8%A7%A3%E9%AB%98%E5%8F%AF%E7%94%A8%E7%B3%BB%E7%BB%9F\"\u003e\u003c/span\u003e理解高可用系统\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e首先，我们需要理解什么是高可用，英文叫High Availability（\u003ca href=\"https://en.wikipedia.org/wiki/High_availability\"\u003eWikipedia词条\u003c/a\u003e），基本上来说，就是要让我们的计算环境（包括软硬件）做到full-time的可用性。在设计上一般来说，需要做好如下的设计：\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-17459\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e对软硬件的冗余，以消除单点故障。任何系统都会有一个或多个冗余系统做standby\u003c/li\u003e\n\u003cli\u003e对故障的检测和恢复。检测故障以及用备份的结点接管故障点。这也就是failover\u003c/li\u003e\n\u003cli\u003e需要很可靠的交汇点（CrossOver）。这是一些不容易冗余的结点，比如域名解析，负载均衡器等。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e听起似乎很简单吧，然而不是，细节之处全是魔鬼，冗余结点最大的难题就是对于有状态的结点的数据复制和数据一致性的保证（无状态结点的冗余相对比较简单）。冗余数据所带来的一致性问题是魔鬼中的魔鬼：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果系统的数据镜像到冗余结点是异步的，那么在failover的时候就会出现数据差异的情况。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e如果系统在数据镜像到冗余结点是同步的，那么就会导致冗余结点越多性能越慢。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以，很多高可用系统都是在做各种取舍，这需要比对着业务的特点来的，比如银行账号的余额是一个状态型的数据，那么，冗余时就必需做到强一致性，再比如说，订单记录属于追加性的数据，那么在failover的时候，就可以到备机上进行追加，这样就比较简单了（阿里目前所谓的异地双活其实根本做不到状态型数据的双活）。\u003c/p\u003e\n\u003cp\u003e下面，总结一下高可用的设计原理：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e要做到数据不丢，就必需要持久化\u003c/li\u003e\n\u003cli\u003e要做到服务高可用，就必需要有备用（复本），无论是应用结点还是数据结点\u003c/li\u003e\n\u003cli\u003e要做到复制，就会有数据一致性的问题。\u003c/li\u003e\n\u003cli\u003e我们不可能做到100%的高可用，也就是说，我们能做到几个9个的SLA。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%AB%98%E5%8F%AF%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"\u003e\u003c/span\u003e高可用系统的技术解决方案\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e我在《\u003ca href=\"https://coolshell.cn/articles/10910.html\" target=\"_blank\"\u003e分布式系统的事务处理\u003c/a\u003e》中引用过下面这个图：这个图来自来自：Google App Engine的co-founder Ryan Barrett在2009年的Google I/O上的演讲《\u003ca href=\"http://snarfed.org/transactions_across_datacenters_io.html\" target=\"_blank\"\u003eTransaction Across DataCenter\u003c/a\u003e》（视频： \u003ca title=\"阿里旺旺无法确定该链接的安全性\" href=\"https://www.youtube.com/watch?v=srOgpXECblk\" target=\"_blank\"\u003ehttp://www.youtube.com/watch?v=srOgpXECblk\u003c/a\u003e）\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-10942 aligncenter\" src=\"https://coolshell.cn/wp-content/uploads/2014/01/Transaction-Across-DataCenter.jpg\" alt=\"Transaction Across DataCenter\" width=\"566\" height=\"255\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/01/Transaction-Across-DataCenter.jpg 566w, https://coolshell.cn/wp-content/uploads/2014/01/Transaction-Across-DataCenter-300x135.jpg 300w\" sizes=\"(max-width: 566px) 100vw, 566px\"/\u003e\u003c/p\u003e\n\u003cp\u003e这个图基本上来说是目前高可用系统中能看得到的所有的解决方案的基础了。M/S、MM实现起来不难，但是会有很多问题，2PC的问题就是性能不行，而Paxos的问题就是太复杂，实现难度太大。\u003c/p\u003e\n\u003cp\u003e总结一下各个高可用方案的的问题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e对于最终一致性来说，在宕机的情况下，会出现数据没有完全同步完成，会出现数据差异性。\u003c/li\u003e\n\u003cli\u003e对于强一致性来说，要么使用性能比较慢的\u003ca href=\"https://en.wikipedia.org/wiki/X/Open_XA\"\u003eXA系\u003c/a\u003e的两阶段提交的方案，要么使用性能比较好，但是实现比较复杂的Paxos协议。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e注：这是软件方面的方案。当然，也可以使用造价比较高的硬件解决方案，不过本文不涉及硬件解决方案。\u003c/p\u003e\n\u003cp\u003e另外，现今开源软件中，很多缓存，消息中间件或数据库都有持久化和Replication的设计，从而也都有高可用解决方案，但是开源软件一般都没有比较高的SLA，所以，如果我们使用开源软件的话，需要注意这一点。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%AB%98%E5%8F%AF%E7%94%A8%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88%E7%9A%84%E7%A4%BA%E4%BE%8B\"\u003e\u003c/span\u003e高可用技术方案的示例\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e下面，我们来看一下MySQL的高可用的方案的SLA（下图下面红色的标识表示了这个方案有几个9）：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://www.slideshare.net/andrewjamesmorgan/mysql-high-availability-solutions-feb-2015-webinar\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-17461\" src=\"https://coolshell.cn/wp-content/uploads/2016/08/mysql-high-availability-solutions-feb-2015-webinar-9-638.jpg\" alt=\"mysql-high-availability-solutions-feb-2015-webinar-9-638\" width=\"638\" height=\"359\" srcset=\"https://coolshell.cn/wp-content/uploads/2016/08/mysql-high-availability-solutions-feb-2015-webinar-9-638.jpg 638w, https://coolshell.cn/wp-content/uploads/2016/08/mysql-high-availability-solutions-feb-2015-webinar-9-638-300x169.jpg 300w\" sizes=\"(max-width: 638px) 100vw, 638px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e图片来源：\u003ca href=\"http://www.slideshare.net/andrewjamesmorgan/mysql-high-availability-solutions-feb-2015-webinar\"\u003eMySQL High Availability Solutions\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e简单解释一下MySQL的这几个方案（主要是想表达一个越多的9就越复杂）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMySQL Repleaction就是传统的异步数据同步或是半同步Semi-Sync（只要有一个slave收到更新就返回成功）这个方式本质上不到2个9。\u003c/li\u003e\n\u003cli\u003eMySQL Fabric简单来说就是数据分片下的M/S的读写分离模式。这个方案的的可用性可以达到99%\u003c/li\u003e\n\u003cli\u003eDRBD通过底层的磁盘同步技术来解决数据同步的问题，就是RAID 1——把两台以上的主机的硬盘镜像成一个。这个方案不到3个9\u003c/li\u003e\n\u003cli\u003eSolaris Clustering/Oracle VM ，这个机制监控了包括硬件、操作系统、网络和数据库。这个方案一般会伴随着节点间的“心跳机制”，而且还会动用到SAN（Storage Area Network）或是本地的分布式存储系统，还会动用虚拟化技术来做虚拟机的迁移以降低宕机时间的概率。这个解决方案完全就是一个“全栈式的解决方案”。这个方案接近4个9。\u003c/li\u003e\n\u003cli\u003eMySQL Cluster是官方的一个开源方案，其把MySQL的集群分成SQL Node 和Data Node，Data Node是一个自动化sharing和复制的集群NDB，为了更高的可用性，MySQL Cluster采用了“完全同步”的数据复制的机制来冗余数据结点。这个方案接近5个9。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e那么，这些2个9，3个9，4个9，5个9是什么意思呢？又是怎么来的呢？请往下看。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E7%9A%84SLA%E7%9A%84%E5%AE%9A%E4%B9%89\"\u003e\u003c/span\u003e高可用性的SLA的定义\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e上面那些都不是本文的重点，本文的重点现在开始，如何测量系统的高可用性\u003c/strong\u003e。当然是SLA，全称\u003ca href=\"https://en.wikipedia.org/wiki/Service-level_agreement\" target=\"_blank\"\u003eService Level Agrement\u003c/a\u003e，也就是有几个9的高可用性。\u003c/p\u003e\n\u003cp\u003e工业界有两种方法来测量SLA，\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一个是故障发生到恢复的时间\u003c/li\u003e\n\u003cli\u003e另一个是两次故障间的时间\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e但大多数都采用第一种方法，也就是故障发生到恢复的时间，也就是服务不可用的时间，如下表所示：\u003c/p\u003e\n\u003ctable class=\"wikitable\" align=\"center\"\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003cth\u003e系统可用性%\u003c/th\u003e\n\u003cth\u003e宕机时间/年\u003c/th\u003e\n\u003cth\u003e宕机时间/月\u003c/th\u003e\n\u003cth\u003e宕机时间/周\u003c/th\u003e\n\u003cth\u003e宕机时间/天\u003c/th\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e90% (1个9)\u003c/td\u003e\n\u003ctd\u003e36.5 天\u003c/td\u003e\n\u003ctd\u003e72 小时\u003c/td\u003e\n\u003ctd\u003e16.8 小时\u003c/td\u003e\n\u003ctd\u003e2.4 小时\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e99% (2个9)\u003c/td\u003e\n\u003ctd\u003e3.65 天\u003c/td\u003e\n\u003ctd\u003e7.20 小时\u003c/td\u003e\n\u003ctd\u003e1.68 小时\u003c/td\u003e\n\u003ctd\u003e14.4 分\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e99.9% (3个9)\u003c/td\u003e\n\u003ctd\u003e8.76 小时\u003c/td\u003e\n\u003ctd\u003e43.8 分\u003c/td\u003e\n\u003ctd\u003e10.1 分钟\u003c/td\u003e\n\u003ctd\u003e1.44 分\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e99.99% (4个9)\u003c/td\u003e\n\u003ctd\u003e52.56 分\u003c/td\u003e\n\u003ctd\u003e4.38 分\u003c/td\u003e\n\u003ctd\u003e1.01 分钟\u003c/td\u003e\n\u003ctd\u003e8.66 秒\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e99.999% (5个9)\u003c/td\u003e\n\u003ctd\u003e5.26 分\u003c/td\u003e\n\u003ctd\u003e25.9 秒\u003c/td\u003e\n\u003ctd\u003e6.05 秒\u003c/td\u003e\n\u003ctd\u003e0.87 秒\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e比如，99.999%的可用性，一年只能有5分半钟的服务不可用。感觉很难做到吧。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e就算是3个9的可用性，一个月的宕机时间也只有40多分钟，看看那些设计和编码不认真的团队，把所有的期望寄托在人肉处理故障的运维团队， 一个故障就能处理1个多小时甚至2-3个小时，连个自动化的工具都没有，还好意思在官网上声明自己的SLA是3个9或是5个9，这不是欺骗大众吗？\u003c/strong\u003e。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%BD%B1%E5%93%8D%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E5%9B%A0%E7%B4%A0\"\u003e\u003c/span\u003e影响高可用的因素\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e老实说，我们很难计算我们设计的系统有多少的可用性，因为影响一个系统的因素实在是太多了，除了软件设计，还有硬件，还有每三方的服务（如电信联通的宽带SLA），当然包括“建筑施工队的挖掘机”。所以，正如SLA的定义，\u003cstrong\u003e这不仅仅只是一个技术指标，而是一种服务提供商和用户之间的contract或契约\u003c/strong\u003e。\u003cstrong\u003e这种工业级的玩法，就像飞机一样，并不是把飞机造出来就好了，还有大量的无比专业的配套设施、工具、流程、管理和运营\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e简而言之，SLA的几个9就是能持续提供可用服务的级别，不过，工业界中，会把服务不可用的因素分成两种：一种是有计划的，一种是无计划的。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%97%A0%E8%AE%A1%E5%88%92%E7%9A%84%E5%AE%95%E6%9C%BA%E5%8E%9F%E5%9B%A0\"\u003e\u003c/span\u003e无计划的宕机原因\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e下图来自Oracle的 《\u003ca href=\"https://docs.oracle.com/cd/A91202_01/901_doc/rac.901/a89867/pshavdtl.htm\"\u003eHigh Availability Concepts and Best Practices\u003c/a\u003e》\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%9C%89%E8%AE%A1%E5%88%92%E7%9A%84%E5%AE%95%E6%9C%BA%E5%8E%9F%E5%9B%A0\"\u003e\u003c/span\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-17467\" src=\"https://coolshell.cn/wp-content/uploads/2016/08/unplaned_downtime.gif\" alt=\"unplaned_downtime\" width=\"600\" height=\"602\"/\u003e有计划的宕机原因\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e下图来自Oracle的 《\u003ca href=\"https://docs.oracle.com/cd/A91202_01/901_doc/rac.901/a89867/pshavdtl.htm\"\u003eHigh Availability Concepts and Best Practices\u003c/a\u003e》\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-17466\" src=\"https://coolshell.cn/wp-content/uploads/2016/08/planned_downtime.gif\" alt=\"planned_downtime\" width=\"600\" height=\"356\"/\u003e\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e我们可以看到，上面的宕机原因包括如下：\u003c/p\u003e\n\u003cp\u003e无计划的\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e系统级的故障 –  包括主机、操作系统、中间件、数据库、网络、电源以及外围设备\u003c/li\u003e\n\u003cli\u003e数据和中介的故障 – 包括人员误操作、硬盘故障、数据乱了\u003c/li\u003e\n\u003cli\u003e还有：自然灾害、人为破坏、以及供电问题。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e有计划的\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e日常任务：备份，容量规划，用户和安全管理，后台批处理应用\u003c/li\u003e\n\u003cli\u003e运维相关：数据库维护、应用维护、中间件维护、操作系统维护、网络维护\u003c/li\u003e\n\u003cli\u003e升级相关：数据库、应用、中间件、操作系统、网络、包括硬件升级\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%9C%9F%E6%AD%A3%E5%86%B3%E5%AE%9A%E9%AB%98%E5%8F%AF%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%AC%E8%B4%A8%E5%8E%9F%E5%9B%A0\"\u003e\u003c/span\u003e真正决定高可用系统的本质原因\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e从上面这些会影响高可用的SLA的因素，你看到了什么？如果你还是只看到了技术方面或是软件设计的东西，那么你只看到了冰山一角。我们再仔细想一想，\u003cstrong\u003e那个5个9的SLA在一年内只能是5分钟的不可用时间，5分钟啊，如果按一年只出1次故障，你也得在五分钟内恢复故障，让我们想想，这意味着什么？\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e如果你没有一套科学的牛逼的软件工程的管理，没有牛逼先进的自动化的运维工具，没有技术能力很牛逼的工程师团队，怎么可能出现高可用的系统啊\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e是的，\u003cstrong\u003e要干出高可用的系统，这TMD就是一套严谨科学的工程管理\u003c/strong\u003e，其中包括但不限于了：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e软件的设计、编码、测试、上线和软件配置管理的水平\u003c/li\u003e\n\u003cli\u003e工程师的人员技能水平\u003c/li\u003e\n\u003cli\u003e运维的管理和技术水平\u003c/li\u003e\n\u003cli\u003e数据中心的运营管理水平\u003c/li\u003e\n\u003cli\u003e依赖于第三方服务的管理水平\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e深层交的东西则是——对工程这门科学的尊重：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e对待技术的态度\u003c/li\u003e\n\u003cli\u003e一个公司的工程文化\u003c/li\u003e\n\u003cli\u003e领导者对工程的尊重\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e所以，以后有人在你面前提高可用，你要看的不是他的技术设计，而还要看看他们的工程能力，看看他们公司是否真正的尊重工程这门科学\u003c/strong\u003e。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%85%B6%E5%AE%83\"\u003e\u003c/span\u003e其它\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e有好些非技术甚至技术人员和我说过，做个APP做个网站，不就是找几个码农过来写写代码嘛。等系统不可用的时候，他们才会明白，要找技术能力比较强的人，但是，\u003cstrong\u003e就算你和他们讲一万遍道理，他们也很难会明白写代码怎么就是一种工程了，而工程怎么就成了一门科学了。其实，很多做技术的人都不明白这个道理\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e包括很多技术人员也永远不会理解，为什么要做好多像Code Review、自动化运维、自动化测试、持续集成之类这样很无聊的东西。就像我在《\u003ca href=\"https://coolshell.cn/articles/11432.html\" target=\"_blank\"\u003e从Code Review 谈如何做技术\u003c/a\u003e》中提到的，阿里很多的工程师，架构师/专家，甚至资深架构师都没有这个意识，当然，这不怪他们，因为经历决定思维方式，他们的经历的是民用级的系统，做的都是堆功能的工作，的确不需要。\u003c/p\u003e\n\u003cp\u003e看完这些，最后让我们都扪心自问一下，你还敢说你的系统是高可用的了么？ ;-)\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17680.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/02/gitlab-600-150x150.jpg\" alt=\"从Gitlab误删除数据库想到的\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17680.html\" class=\"wp_rp_title\"\u003e从Gitlab误删除数据库想到的\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/07/api-design-300x278-2-150x150.jpg\" alt=\"API设计原则 – Qt官网的设计实践总结\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_title\"\u003eAPI设计原则 – Qt官网的设计实践总结\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/10910.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/01/trade-off-150x150.jpg\" alt=\"分布式系统的事务处理\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/10910.html\" class=\"wp_rp_title\"\u003e分布式系统的事务处理\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/9949.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/07/inverted-bookshelf_thumb-150x150.jpg\" alt=\"IoC/DIP其实是一种管理思想\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/9949.html\" class=\"wp_rp_title\"\u003eIoC/DIP其实是一种管理思想\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/6775.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/24.jpg\" alt=\"Bret Victor – Inventing on Principle\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/6775.html\" class=\"wp_rp_title\"\u003eBret Victor – Inventing on Principle\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-17459\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"4918e88bdd\"\u003e\u003cimg id=\"rating_17459_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17459, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-c598616fb20c110b14da7573-=\"\"/\u003e\u003cimg id=\"rating_17459_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17459, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-c598616fb20c110b14da7573-=\"\"/\u003e\u003cimg id=\"rating_17459_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17459, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-c598616fb20c110b14da7573-=\"\"/\u003e\u003cimg id=\"rating_17459_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17459, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-c598616fb20c110b14da7573-=\"\"/\u003e\u003cimg id=\"rating_17459_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17459, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-c598616fb20c110b14da7573-=\"\"/\u003e (\u003cstrong\u003e72\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.54\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_17459_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"关于高可用的系统\"/\u003e\u003cmeta itemprop=\"headline\" content=\"关于高可用的系统\"/\u003e\u003cmeta itemprop=\"description\" content=\"在《这多年来我一直在钻研的技术》这篇文章中，我讲述了一下，我这么多年来一直在关注的技术领域，其中我多次提到了工业级的软件，我还以为有很多人会问我怎么定义工业级？以及一个高可用性的软件系统应该要怎么干出来？这样我也可以顺理成章的写下这篇文章，但是没有人问，那么，我只好厚颜无耻的自己写下这篇文章了。哈哈。\n\n另外，我在一些讨论高可用系统的地方看到大家只讨论各个公司的技术方案，其实，高可用的系统并不...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2016-08-21T12:34:53+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2016-08-21T16:48:08+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/17459.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/17459.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.54\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"72\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-17459-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2016-08-21T12:34:53+08:00",
  "Author": "陈皓"
}