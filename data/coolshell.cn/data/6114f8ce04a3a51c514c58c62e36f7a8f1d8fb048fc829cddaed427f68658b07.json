{
  "Source": "coolshell.cn",
  "Title": "二维码的生成细节和原理",
  "Link": "https://coolshell.cn/articles/10590.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"9a02f259f22e89bf69cc4b98-text/javascript\"\u003e\u003c/script\u003e二维码又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型：比如：字符，数字，日文，中文等等。这两天学习了一下二维码图片生成的相关细节，觉得这个玩意就是一个密码算法，在此写一这篇文章 ，揭露一下。供好学的人一同学习之。\u003c/p\u003e\n\u003cp\u003e关于QR Code Specification，可参看这个PDF：\u003ca href=\"http://raidenii.net/files/datasheets/misc/qr_code.pdf\" target=\"_blank\"\u003ehttp://raidenii.net/files/datasheets/misc/qr_code.pdf \u003c/a\u003e\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\" title=\"基础知识\"\u003e基础知识\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E5%AE%9A%E4%BD%8D%E5%9B%BE%E6%A1%88\" title=\"定位图案\"\u003e定位图案\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E5%8A%9F%E8%83%BD%E6%80%A7%E6%95%B0%E6%8D%AE\" title=\"功能性数据\"\u003e功能性数据\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E6%95%B0%E6%8D%AE%E7%A0%81%E5%92%8C%E7%BA%A0%E9%94%99%E7%A0%81\" title=\"数据码和纠错码\"\u003e数据码和纠错码\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E6%95%B0%E6%8D%AE%E7%BC%96%E7%A0%81\" title=\"数据编码\"\u003e数据编码\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#%E7%A4%BA%E4%BE%8B%E4%B8%80%EF%BC%9A%E6%95%B0%E5%AD%97%E7%BC%96%E7%A0%81\" title=\"示例一：数字编码\"\u003e示例一：数字编码\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BA%8C%EF%BC%9A%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81\" title=\"示例二：字符编码\"\u003e示例二：字符编码\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#%E7%BB%93%E6%9D%9F%E7%AC%A6%E5%92%8C%E8%A1%A5%E9%BD%90%E7%AC%A6\" title=\"结束符和补齐符\"\u003e结束符和补齐符\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-9\" href=\"#%E6%8C%898bits%E9%87%8D%E6%8E%92\" title=\"按8bits重排\"\u003e按8bits重排\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-10\" href=\"#%E8%A1%A5%E9%BD%90%E7%A0%81%EF%BC%88Padding_Bytes%EF%BC%89\" title=\"补齐码（Padding Bytes）\"\u003e补齐码（Padding Bytes）\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-11\" href=\"#%E7%BA%A0%E9%94%99%E7%A0%81\" title=\"纠错码\"\u003e纠错码\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-12\" href=\"#%E6%9C%80%E7%BB%88%E7%BC%96%E7%A0%81\" title=\"最终编码\"\u003e最终编码\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-13\" href=\"#%E7%A9%BF%E6%8F%92%E6%94%BE%E7%BD%AE\" title=\"穿插放置\"\u003e穿插放置\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-14\" href=\"#Remainder_Bits\" title=\"Remainder Bits\"\u003eRemainder Bits\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-15\" href=\"#%E7%94%BB%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%9B%BE\" title=\"画二维码图\"\u003e画二维码图\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-16\" href=\"#Position_Detection_Pattern\" title=\"Position Detection Pattern\"\u003ePosition Detection Pattern\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-17\" href=\"#Alignment_Pattern\" title=\"Alignment Pattern\"\u003eAlignment Pattern\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-18\" href=\"#Timing_Pattern\" title=\"Timing Pattern\"\u003eTiming Pattern\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-19\" href=\"#Format_Information\" title=\"Format Information\"\u003eFormat Information\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-20\" href=\"#Version_Information\" title=\"Version Information\"\u003eVersion Information\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-21\" href=\"#%E6%95%B0%E6%8D%AE%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BA%A0%E9%94%99%E7%A0%81\" title=\"数据和数据纠错码\"\u003e数据和数据纠错码\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-22\" href=\"#%E6%8E%A9%E7%A0%81%E5%9B%BE%E6%A1%88\" title=\"掩码图案\"\u003e掩码图案\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\"\u003e\u003c/span\u003e基础知识\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e首先，我们先说一下二维码一共有40个尺寸。官方叫版本Version。Version 1是21 x 21的矩阵，Version 2是 25 x 25的矩阵，Version 3是29的尺寸，每增加一个version，就会增加4的尺寸，公式是：(V-1)*4 + 21（V是版本号） 最高Version 40，(40-1)*4+21 = 177，所以最高是177 x 177 的正方形。\u003c/p\u003e\n\u003cp\u003e下面我们看看一个二维码的样例：\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003cimg decoding=\"async\" class=\"aligncenter  wp-image-10592\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview.jpeg\" width=\"616\" height=\"370\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview.jpeg 770w, https://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview-300x180.jpeg 300w, https://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview-768x461.jpeg 768w, https://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview-450x270.jpeg 450w\" sizes=\"(max-width: 616px) 100vw, 616px\"/\u003e\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e\u003cspan id=\"more-10590\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003ch5 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%AE%9A%E4%BD%8D%E5%9B%BE%E6%A1%88\"\u003e\u003c/span\u003e定位图案\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003ePosition Detection Pattern是定位图案，用于标记二维码的矩形大小。这三个定位图案有白边叫Separators for Postion Detection Patterns。之所以三个而不是四个意思就是三个就可以标识一个矩形了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003eTiming Patterns也是用于定位的。原因是二维码有40种尺寸，尺寸过大了后需要有根标准线，不然扫描的时候可能会扫歪了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003eAlignment Patterns 只有Version 2以上（包括Version2）的二维码需要这个东东，同样是为了定位用的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%8A%9F%E8%83%BD%E6%80%A7%E6%95%B0%E6%8D%AE\"\u003e\u003c/span\u003e功能性数据\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eFormat Information 存在于所有的尺寸中，用于存放一些格式化数据的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003eVersion Information 在 \u0026gt;= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%95%B0%E6%8D%AE%E7%A0%81%E5%92%8C%E7%BA%A0%E9%94%99%E7%A0%81\"\u003e\u003c/span\u003e数据码和纠错码\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e除了上述的那些地方，剩下的地方存放 Data Code 数据码 和 Error Correction Code 纠错码。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%95%B0%E6%8D%AE%E7%BC%96%E7%A0%81\"\u003e\u003c/span\u003e数据编码\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e我们先来说说数据编码。QR码支持如下的编码：\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNumeric mode\u003c/strong\u003e 数字编码，从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸（下面有一个表Table 3说明了这点）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAlphanumeric mode\u003c/strong\u003e 字符编码。包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter  wp-image-10594\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/Alphanumeric-mode.png\" width=\"549\" height=\"121\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/10/Alphanumeric-mode.png 686w, https://coolshell.cn/wp-content/uploads/2013/10/Alphanumeric-mode-300x66.png 300w\" sizes=\"(max-width: 549px) 100vw, 549px\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eByte mode\u003c/strong\u003e, 字节编码，可以是0-255的ISO-8859-1字符。有些二维码的扫描器可以自动检测是否是UTF-8的编码。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eKanji mode\u003c/strong\u003e 这是日文编码，也是双字节编码。同样，也可以用于中文编码。日文和汉字的编码会减去一个值。如：在0X8140 to 0X9FFC中的字符会减去8140，在0XE040到0XEBBF中的字符要减去0XC140，然后把结果前两个16进制位拿出来乘以0XC0，然后再加上后两个16进制位，最后转成13bit的编码。如下图示例：\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter  wp-image-10595\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/Kanji-mode.png\" width=\"600\" height=\"174\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/10/Kanji-mode.png 667w, https://coolshell.cn/wp-content/uploads/2013/10/Kanji-mode-300x86.png 300w\" sizes=\"(max-width: 600px) 100vw, 600px\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExtended Channel Interpretation (ECI) mode\u003c/strong\u003e 主要用于特殊的字符集。并不是所有的扫描器都支持这种编码。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStructured Append mode\u003c/strong\u003e 用于混合编码，也就是说，这个二维码中包含了多种编码格式。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFNC1 mode\u003c/strong\u003e 这种编码方式主要是给一些特殊的工业或行业用的。比如GS1条形码之类的。\u003c/p\u003e\n\u003cp\u003e简单起见，后面三种不会在本文 中讨论。\u003c/p\u003e\n\u003cp\u003e下面两张表中，\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTable 2 是各个编码格式的“编号”，这个东西要写在Format Information中。注：中文是1101\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003eTable 3 表示了，不同版本（尺寸）的二维码，对于，数字，字符，字节和Kanji模式下，对于单个编码的2进制的位数。（在二维码的规格说明书中，有各种各样的编码规范表，后面还会提到）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-10596\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/Mode-Indicator.png\" width=\"442\" height=\"332\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/10/Mode-Indicator.png 442w, https://coolshell.cn/wp-content/uploads/2013/10/Mode-Indicator-300x225.png 300w\" sizes=\"(max-width: 442px) 100vw, 442px\"/\u003e\u003c/p\u003e\n\u003cp\u003e下面我们看几个示例，\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%A4%BA%E4%BE%8B%E4%B8%80%EF%BC%9A%E6%95%B0%E5%AD%97%E7%BC%96%E7%A0%81\"\u003e\u003c/span\u003e示例一：数字编码\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e在Version 1的尺寸下，纠错级别为H的情况下，编码： 01234567\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1. 把上述数字分成三组: 012 345 67\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2. 把他们转成二进制:  012 转成 0000001100；  345 转成 0101011001；  67 转成 1000011。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e3. 把这三个二进制串起来: 0000001100 0101011001 1000011\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e4. 把数字的个数转成二进制 (version 1-H是10 bits ): 8个数字的二进制是 0000001000\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e5. 把数字编码的标志0001和第4步的编码加到前面:  0001 0000001000 0000001100 0101011001 1000011\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%A4%BA%E4%BE%8B%E4%BA%8C%EF%BC%9A%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81\"\u003e\u003c/span\u003e示例二：字符编码\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1. 从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2. 两两分组: (10,12) (41,4) (2)\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e3.把每一组转成11bits的二进制:\u003c/p\u003e\n\u003cp style=\"padding-left: 60px;\"\u003e(10,12) 10*45+12 等于 462 转成 00111001110\u003cbr/\u003e\n(41,4) 41*45+4 等于 1849 转成 11100111001\u003cbr/\u003e\n(2) 等于 2 转成 000010\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e4. 把这些二进制连接起来：00111001110 11100111001 000010\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e5. 把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e6. 在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%BB%93%E6%9D%9F%E7%AC%A6%E5%92%8C%E8%A1%A5%E9%BD%90%E7%AC%A6\"\u003e\u003c/span\u003e结束符和补齐符\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e假如我们有个HELLO WORLD的字符串要编码，根据上面的示例二，我们可以得到下面的编码，\u003c/p\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003cth\u003e编码\u003c/th\u003e\n\u003cth\u003e字符数\u003c/th\u003e\n\u003cth\u003eHELLO WORLD的编码\u003c/th\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e0010\u003c/td\u003e\n\u003ctd\u003e000001011\u003c/td\u003e\n\u003ctd\u003e01100001011 01111000110 10001011100 10110111000 10011010100 001101\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e我们还要加上结束符：\u003c/p\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003cth\u003e编码\u003c/th\u003e\n\u003cth\u003e字符数\u003c/th\u003e\n\u003cth\u003eHELLO WORLD的编码\u003c/th\u003e\n\u003cth\u003e结束\u003c/th\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e0010\u003c/td\u003e\n\u003ctd\u003e000001011\u003c/td\u003e\n\u003ctd\u003e01100001011 01111000110 10001011100 10110111000 10011010100 001101\u003c/td\u003e\n\u003ctd\u003e0000\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%8C%898bits%E9%87%8D%E6%8E%92\"\u003e\u003c/span\u003e按8bits重排\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组：\u003c/p\u003e\n\u003cp\u003e00100000   01011011   00001011   01111000   11010001   01110010   11011100   01001101   01000011   010000\u003cspan style=\"color: #ff0000;\"\u003e\u003cstrong\u003e00\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E8%A1%A5%E9%BD%90%E7%A0%81%EF%BC%88Padding_Bytes%EF%BC%89\"\u003e\u003c/span\u003e补齐码（Padding Bytes）\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 （这两个二进制转成十进制是236和17，我也不知道为什么，只知道Spec上是这么写的）关于每一个Version的每一种纠错级别的最大Bits限制，可以参看\u003ca href=\"http://raidenii.net/files/datasheets/misc/qr_code.pdf\" target=\"_blank\"\u003eQR Code Spec\u003c/a\u003e的第28页到32页的Table-7一表。\u003c/p\u003e\n\u003cp\u003e假设我们需要编码的是Version 1的Q纠错级，那么，其最大需要104个bits，而我们上面只有80个bits，所以，还需要补24个bits，也就是需要3个Padding Bytes，我们就添加三个，于是得到下面的编码：\u003c/p\u003e\n\u003cp\u003e00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 \u003cspan style=\"color: #ff0000;\"\u003e\u003cstrong\u003e11101100 00010001 11101100\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%BA%A0%E9%94%99%E7%A0%81\"\u003e\u003c/span\u003e纠错码\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e上面我们说到了一些纠错级别，Error Correction Code Level，二维码中有四种级别的纠错，这就是为什么二维码有残缺还能扫出来，也就是为什么有人在二维码的中心位置加入图标。\u003c/p\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003cth colspan=\"2\"\u003e错误修正容量\u003c/th\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eL水平\u003c/td\u003e\n\u003ctd\u003e7%的字码可被修正\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eM水平\u003c/td\u003e\n\u003ctd\u003e15%的字码可被修正\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eQ水平\u003c/td\u003e\n\u003ctd\u003e25%的字码可被修正\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eH水平\u003c/td\u003e\n\u003ctd\u003e30%的字码可被修正\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e那么，QR是怎么对数据码加上纠错码的？首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看\u003ca href=\"http://raidenii.net/files/datasheets/misc/qr_code.pdf\" target=\"_blank\"\u003eQR Code Spec\u003c/a\u003e的第33页到44页的Table-13到Table-22的定义表。注意最后两列：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eNumber of Error Code Correction Blocks\u003c/strong\u003e ：需要分多少个块。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eError Correction Code Per Blocks\u003c/strong\u003e：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-10600\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Blocks.png\" width=\"576\" height=\"308\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Blocks.png 576w, https://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Blocks-300x160.png 300w\" sizes=\"(max-width: 576px) 100vw, 576px\"/\u003e\u003c/p\u003e\n\u003cp\u003e举个例子：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）（再注：最后一例中的（c, k, r ）的公式为：c = k + 2 * r，因为后脚注解释了：纠错码的容量小于纠错码的一半）\u003c/p\u003e\n\u003cp\u003e下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）\u003c/p\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003cth\u003e组\u003c/th\u003e\n\u003cth\u003e块\u003c/th\u003e\n\u003cth\u003e数据\u003c/th\u003e\n\u003cth\u003e对每个块的纠错码\u003c/th\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\" rowspan=\"2\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003e1\u003c/td\u003e\n\u003ctd\u003e67 85 70 134 87 38 85 194 119 50 6 18 6 103 38\u003c/td\u003e\n\u003ctd\u003e213 199 11 45 115 247 241 223 229 248 154 117 154 111 86 161 111 39\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e2\u003c/td\u003e\n\u003ctd\u003e246 246 66 7 118 134 242 7 38 86 22 198 199 146 6\u003c/td\u003e\n\u003ctd\u003e87 204 96 60 202 182 124 157 200 134 27 129 209 17 163 163 120 133\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\" rowspan=\"2\"\u003e2\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003e1\u003c/td\u003e\n\u003ctd\u003e182 230 247 119 50 7 118 134 87 38 82 6 134 151 50 7\u003c/td\u003e\n\u003ctd\u003e148 116 177 212 76 133 75 242 238 76 195 230 189 10 108 240 192 141\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e2\u003c/td\u003e\n\u003ctd\u003e70 247 118 86 194 6 151 50 16 236 17 236 17 236 17 236\u003c/td\u003e\n\u003ctd\u003e235 159 5 173 24 147 59 33 106 40 255 172 82 2 131 32 178 236\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e注：二维码的纠错码主要是通过\u003ca href=\"https://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction\"\u003eReed-Solomon error correction\u003c/a\u003e（里德-所罗门纠错算法）来实现的。对于这个算法，对于我来说是相当的复杂，里面有很多的数学计算，比如：多项式除法，把1-255的数映射成2的n次方（0\u0026lt;=n\u0026lt;=255）的伽罗瓦域Galois Field之类的神一样的东西，以及基于这些基础的纠错数学公式，因为我的数据基础差，对于我来说太过复杂，所以我一时半会儿还有点没搞明白，还在学习中，所以，我在这里就不展开说这些东西了。还请大家见谅了。（当然，如果有朋友很明白，也繁请教教我）\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%9C%80%E7%BB%88%E7%BC%96%E7%A0%81\"\u003e\u003c/span\u003e最终编码\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%A9%BF%E6%8F%92%E6%94%BE%E7%BD%AE\"\u003e\u003c/span\u003e穿插放置\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e如果你以为我们可以开始画图，你就错了。二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：\u003c/p\u003e\n\u003cp\u003e对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。如：上述示例中的Data Codewords如下：\u003c/p\u003e\n\u003ctable class=\"coolshell\"\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd class=\"head\"\u003e块 1\u003c/td\u003e\n\u003ctd\u003e67\u003c/td\u003e\n\u003ctd\u003e85\u003c/td\u003e\n\u003ctd\u003e70\u003c/td\u003e\n\u003ctd\u003e134\u003c/td\u003e\n\u003ctd\u003e87\u003c/td\u003e\n\u003ctd\u003e38\u003c/td\u003e\n\u003ctd\u003e85\u003c/td\u003e\n\u003ctd\u003e194\u003c/td\u003e\n\u003ctd\u003e119\u003c/td\u003e\n\u003ctd\u003e50\u003c/td\u003e\n\u003ctd\u003e6\u003c/td\u003e\n\u003ctd\u003e18\u003c/td\u003e\n\u003ctd\u003e6\u003c/td\u003e\n\u003ctd\u003e103\u003c/td\u003e\n\u003ctd\u003e38\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"head\"\u003e块 2\u003c/td\u003e\n\u003ctd\u003e246\u003c/td\u003e\n\u003ctd\u003e246\u003c/td\u003e\n\u003ctd\u003e66\u003c/td\u003e\n\u003ctd\u003e7\u003c/td\u003e\n\u003ctd\u003e118\u003c/td\u003e\n\u003ctd\u003e134\u003c/td\u003e\n\u003ctd\u003e242\u003c/td\u003e\n\u003ctd\u003e7\u003c/td\u003e\n\u003ctd\u003e38\u003c/td\u003e\n\u003ctd\u003e86\u003c/td\u003e\n\u003ctd\u003e22\u003c/td\u003e\n\u003ctd\u003e198\u003c/td\u003e\n\u003ctd\u003e199\u003c/td\u003e\n\u003ctd\u003e146\u003c/td\u003e\n\u003ctd\u003e6\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"head\"\u003e块 3\u003c/td\u003e\n\u003ctd\u003e182\u003c/td\u003e\n\u003ctd\u003e230\u003c/td\u003e\n\u003ctd\u003e247\u003c/td\u003e\n\u003ctd\u003e119\u003c/td\u003e\n\u003ctd\u003e50\u003c/td\u003e\n\u003ctd\u003e7\u003c/td\u003e\n\u003ctd\u003e118\u003c/td\u003e\n\u003ctd\u003e134\u003c/td\u003e\n\u003ctd\u003e87\u003c/td\u003e\n\u003ctd\u003e38\u003c/td\u003e\n\u003ctd\u003e82\u003c/td\u003e\n\u003ctd\u003e6\u003c/td\u003e\n\u003ctd\u003e134\u003c/td\u003e\n\u003ctd\u003e151\u003c/td\u003e\n\u003ctd\u003e50\u003c/td\u003e\n\u003ctd\u003e7\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"head\"\u003e块 4\u003c/td\u003e\n\u003ctd\u003e70\u003c/td\u003e\n\u003ctd\u003e247\u003c/td\u003e\n\u003ctd\u003e118\u003c/td\u003e\n\u003ctd\u003e86\u003c/td\u003e\n\u003ctd\u003e194\u003c/td\u003e\n\u003ctd\u003e6\u003c/td\u003e\n\u003ctd\u003e151\u003c/td\u003e\n\u003ctd\u003e50\u003c/td\u003e\n\u003ctd\u003e16\u003c/td\u003e\n\u003ctd\u003e236\u003c/td\u003e\n\u003ctd\u003e17\u003c/td\u003e\n\u003ctd\u003e236\u003c/td\u003e\n\u003ctd\u003e17\u003c/td\u003e\n\u003ctd\u003e236\u003c/td\u003e\n\u003ctd\u003e17\u003c/td\u003e\n\u003ctd\u003e236\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e我们先取第一列的：67， 246， 182， 70\u003c/p\u003e\n\u003cp\u003e然后再取第二列的：67， 246， 182， 70， 85，246，230 ，247\u003c/p\u003e\n\u003cp\u003e如此类推：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236\u003c/p\u003e\n\u003cp\u003e对于纠错码，也是一样：\u003c/p\u003e\n\u003ctable class=\"coolshell\"\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd class=\"head\"\u003e块 1\u003c/td\u003e\n\u003ctd\u003e213\u003c/td\u003e\n\u003ctd\u003e199\u003c/td\u003e\n\u003ctd\u003e11\u003c/td\u003e\n\u003ctd\u003e45\u003c/td\u003e\n\u003ctd\u003e115\u003c/td\u003e\n\u003ctd\u003e247\u003c/td\u003e\n\u003ctd\u003e241\u003c/td\u003e\n\u003ctd\u003e223\u003c/td\u003e\n\u003ctd\u003e229\u003c/td\u003e\n\u003ctd\u003e248\u003c/td\u003e\n\u003ctd\u003e154\u003c/td\u003e\n\u003ctd\u003e117\u003c/td\u003e\n\u003ctd\u003e154\u003c/td\u003e\n\u003ctd\u003e111\u003c/td\u003e\n\u003ctd\u003e86\u003c/td\u003e\n\u003ctd\u003e161\u003c/td\u003e\n\u003ctd\u003e111\u003c/td\u003e\n\u003ctd\u003e39\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"head\"\u003e块 2\u003c/td\u003e\n\u003ctd\u003e87\u003c/td\u003e\n\u003ctd\u003e204\u003c/td\u003e\n\u003ctd\u003e96\u003c/td\u003e\n\u003ctd\u003e60\u003c/td\u003e\n\u003ctd\u003e202\u003c/td\u003e\n\u003ctd\u003e182\u003c/td\u003e\n\u003ctd\u003e124\u003c/td\u003e\n\u003ctd\u003e157\u003c/td\u003e\n\u003ctd\u003e200\u003c/td\u003e\n\u003ctd\u003e134\u003c/td\u003e\n\u003ctd\u003e27\u003c/td\u003e\n\u003ctd\u003e129\u003c/td\u003e\n\u003ctd\u003e209\u003c/td\u003e\n\u003ctd\u003e17\u003c/td\u003e\n\u003ctd\u003e163\u003c/td\u003e\n\u003ctd\u003e163\u003c/td\u003e\n\u003ctd\u003e120\u003c/td\u003e\n\u003ctd\u003e133\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"head\"\u003e块 3\u003c/td\u003e\n\u003ctd\u003e148\u003c/td\u003e\n\u003ctd\u003e116\u003c/td\u003e\n\u003ctd\u003e177\u003c/td\u003e\n\u003ctd\u003e212\u003c/td\u003e\n\u003ctd\u003e76\u003c/td\u003e\n\u003ctd\u003e133\u003c/td\u003e\n\u003ctd\u003e75\u003c/td\u003e\n\u003ctd\u003e242\u003c/td\u003e\n\u003ctd\u003e238\u003c/td\u003e\n\u003ctd\u003e76\u003c/td\u003e\n\u003ctd\u003e195\u003c/td\u003e\n\u003ctd\u003e230\u003c/td\u003e\n\u003ctd\u003e189\u003c/td\u003e\n\u003ctd\u003e10\u003c/td\u003e\n\u003ctd\u003e108\u003c/td\u003e\n\u003ctd\u003e240\u003c/td\u003e\n\u003ctd\u003e192\u003c/td\u003e\n\u003ctd\u003e141\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"head\"\u003e块 4\u003c/td\u003e\n\u003ctd\u003e235\u003c/td\u003e\n\u003ctd\u003e159\u003c/td\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003ctd\u003e173\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e147\u003c/td\u003e\n\u003ctd\u003e59\u003c/td\u003e\n\u003ctd\u003e33\u003c/td\u003e\n\u003ctd\u003e106\u003c/td\u003e\n\u003ctd\u003e40\u003c/td\u003e\n\u003ctd\u003e255\u003c/td\u003e\n\u003ctd\u003e172\u003c/td\u003e\n\u003ctd\u003e82\u003c/td\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e131\u003c/td\u003e\n\u003ctd\u003e32\u003c/td\u003e\n\u003ctd\u003e178\u003c/td\u003e\n\u003ctd\u003e236\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236\u003c/p\u003e\n\u003cp\u003e然后，再把这两组放在一起（纠错码放在数据码之后）得到：\u003c/p\u003e\n\u003cp\u003e67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236\u003c/p\u003e\n\u003cp\u003e这就是我们的数据区。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"Remainder_Bits\"\u003e\u003c/span\u003eRemainder Bits\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e最后再加上Reminder Bits，对于某些Version的QR，上面的还不够长度，还要加上Remainder Bits，比如：上述的5Q版的二维码，还要加上7个bits，Remainder Bits加零就好了。关于哪些Version需要多少个Remainder bit，可以参看\u003ca href=\"http://raidenii.net/files/datasheets/misc/qr_code.pdf\" target=\"_blank\"\u003eQR Code Spec\u003c/a\u003e的第15页的Table-1的定义表。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%94%BB%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%9B%BE\"\u003e\u003c/span\u003e画二维码图\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"Position_Detection_Pattern\"\u003e\u003c/span\u003ePosition Detection Pattern\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e首先，先把Position Detection图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大）\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/finder.png\" width=\"99\" height=\"141\"/\u003e\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"Alignment_Pattern\"\u003e\u003c/span\u003eAlignment Pattern\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e然后，再把Alignment图案画上（无论Version如何，这个图案的尺寸就是这么大）\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/alignment-pattern.png\" width=\"68\" height=\"91\"/\u003e\u003c/p\u003e\n\u003cp\u003e关于Alignment的位置，可以查看\u003ca href=\"http://raidenii.net/files/datasheets/misc/qr_code.pdf\" target=\"_blank\"\u003eQR Code Spec\u003c/a\u003e的第81页的Table-E.1的定义表（下表是不完全表格）\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-10613\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/Alignment-Position.png\" width=\"582\" height=\"239\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/10/Alignment-Position.png 582w, https://coolshell.cn/wp-content/uploads/2013/10/Alignment-Position-300x123.png 300w\" sizes=\"(max-width: 582px) 100vw, 582px\"/\u003e\u003c/p\u003e\n\u003cp\u003e下图是根据上述表格中的Version8的一个例子（6，24，42）\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-10606\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/alignment-example.png\" width=\"241\" height=\"288\"/\u003e\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"Timing_Pattern\"\u003e\u003c/span\u003eTiming Pattern\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e接下来是Timing Pattern的线（这个不用多说了）\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003cstrong\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/Timing-Pattern.png\" width=\"596\" height=\"258\"/\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"Format_Information\"\u003e\u003c/span\u003eFormat Information\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e再接下来是Formation Information，下图中的蓝色部分。\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter  wp-image-10610\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/Format-Information.png\" width=\"352\" height=\"199\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/10/Format-Information.png 391w, https://coolshell.cn/wp-content/uploads/2013/10/Format-Information-300x169.png 300w\" sizes=\"(max-width: 352px) 100vw, 352px\"/\u003e\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003eFormat Information是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，那是永远出现的）\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-10630\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/Format-Info-bits-postion.png\" width=\"363\" height=\"381\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/10/Format-Info-bits-postion.png 363w, https://coolshell.cn/wp-content/uploads/2013/10/Format-Info-bits-postion-285x300.png 285w\" sizes=\"(max-width: 363px) 100vw, 363px\"/\u003e\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e这15个bits中包括：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask\u003c/li\u003e\n\u003cli\u003e10个纠错bits。主要通过BCH Code来计算\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。\u003c/p\u003e\n\u003cp\u003e下面是一个示例：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-10631\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/Format-Information-Example.png\" width=\"376\" height=\"116\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/10/Format-Information-Example.png 376w, https://coolshell.cn/wp-content/uploads/2013/10/Format-Information-Example-300x92.png 300w\" sizes=\"(max-width: 376px) 100vw, 376px\"/\u003e\u003c/p\u003e\n\u003cp\u003e关于Error Correction Level如下表所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-10632\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Indicator-Code.png\" width=\"253\" height=\"114\"/\u003e\u003c/p\u003e\n\u003cp\u003e关于Mask图案如后面的Table 23所示。\u003c/p\u003e\n\u003ch5 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"Version_Information\"\u003e\u003c/span\u003eVersion Information\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: left;\"\u003e再接下来是Version Information（版本7以后需要这个编码），下图中的蓝色部分。\u003cbr/\u003e\n\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter  wp-image-10612\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/Version-Information.png\" width=\"508\" height=\"254\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/10/Version-Information.png 635w, https://coolshell.cn/wp-content/uploads/2013/10/Version-Information-300x149.png 300w\" sizes=\"(max-width: 508px) 100vw, 508px\"/\u003e\u003c/p\u003e\n\u003cp\u003eVersion Information一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-10634\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Example.png\" width=\"405\" height=\"63\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Example.png 405w, https://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Example-300x46.png 300w\" sizes=\"(max-width: 405px) 100vw, 405px\"/\u003e\u003c/p\u003e\n\u003cp\u003e而其填充位置如下：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-10635\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Position.png\" width=\"425\" height=\"149\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Position.png 425w, https://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Position-300x105.png 300w\" sizes=\"(max-width: 425px) 100vw, 425px\"/\u003e\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%95%B0%E6%8D%AE%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BA%A0%E9%94%99%E7%A0%81\"\u003e\u003c/span\u003e数据和数据纠错码\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/Data-Placement.png\" width=\"348\" height=\"372\"/\u003e\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%8E%A9%E7%A0%81%E5%9B%BE%E6%A1%88\"\u003e\u003c/span\u003e掩码图案\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作（靠，还嫌不复杂）QR的Spec中说了，QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，说白了，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（\u003cstrong\u003e注：选择一个合适的Mask也是有算法的\u003c/strong\u003e）\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-10614\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/masking-pattern.png\" width=\"494\" height=\"274\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/10/masking-pattern.png 494w, https://coolshell.cn/wp-content/uploads/2013/10/masking-pattern-300x166.png 300w\" sizes=\"(max-width: 494px) 100vw, 494px\"/\u003e\u003c/p\u003e\n\u003cp\u003e其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-10633\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/Mask-Pattern-Code.png\" width=\"416\" height=\"181\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/10/Mask-Pattern-Code.png 416w, https://coolshell.cn/wp-content/uploads/2013/10/Mask-Pattern-Code-300x130.png 300w\" sizes=\"(max-width: 416px) 100vw, 416px\"/\u003e\u003c/p\u003e\n\u003cp\u003e下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-10615\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/Masking-Examples.png\" width=\"616\" height=\"446\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/10/Masking-Examples.png 616w, https://coolshell.cn/wp-content/uploads/2013/10/Masking-Examples-300x217.png 300w\" sizes=\"(max-width: 616px) 100vw, 616px\"/\u003e\u003c/p\u003e\n\u003cp\u003eMask过后的二维码就成最终的图了。\u003c/p\u003e\n\u003cp\u003e好了，大家可以去尝试去写一下QR的编码程序，当然，你可以用网上找个Reed Soloman的纠错算法的库，或是看看别人的源代码是怎么实现这个繁锁的编码。\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17225.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2015/08/cuckoo-150x150.jpg\" alt=\"Cuckoo Filter：设计与实现\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17225.html\" class=\"wp_rp_title\"\u003eCuckoo Filter：设计与实现\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"Leetcode 编程训练\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_title\"\u003eLeetcode 编程训练\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11847.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/08/puzzle-150x150.png\" alt=\"谜题的答案和活动的心得体会\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11847.html\" class=\"wp_rp_title\"\u003e谜题的答案和活动的心得体会\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11832.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/08/538efefbgw1eiz9cvx78fj20rm0fmdi8-150x150.jpg\" alt=\"【活动】解迷题送礼物\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11832.html\" class=\"wp_rp_title\"\u003e【活动】解迷题送礼物\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/10427.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/10/buddy-memory-allocation-150x150.jpg\" alt=\"伙伴分配器的一个极简实现\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/10427.html\" class=\"wp_rp_title\"\u003e伙伴分配器的一个极简实现\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/9886.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/8.jpg\" alt=\"二叉树迭代器算法\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/9886.html\" class=\"wp_rp_title\"\u003e二叉树迭代器算法\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-10590\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"8240291cfd\"\u003e\u003cimg id=\"rating_10590_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10590, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-9a02f259f22e89bf69cc4b98-=\"\"/\u003e\u003cimg id=\"rating_10590_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10590, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-9a02f259f22e89bf69cc4b98-=\"\"/\u003e\u003cimg id=\"rating_10590_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10590, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-9a02f259f22e89bf69cc4b98-=\"\"/\u003e\u003cimg id=\"rating_10590_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10590, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-9a02f259f22e89bf69cc4b98-=\"\"/\u003e\u003cimg id=\"rating_10590_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10590, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-9a02f259f22e89bf69cc4b98-=\"\"/\u003e (\u003cstrong\u003e103\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.40\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_10590_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"二维码的生成细节和原理\"/\u003e\u003cmeta itemprop=\"headline\" content=\"二维码的生成细节和原理\"/\u003e\u003cmeta itemprop=\"description\" content=\"二维码又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型：比如：字符，数字，日文，中文等等。这两天学习了一下二维码图片生成的相关细节，觉得这个玩意就是一个密码算法，在此写一这篇文章 ，揭露一下。供好学的人一同学习之。\n\n关于QR Code Specification，可参...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2013-10-29T08:32:35+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2013-10-29T12:01:02+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/10590.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/10590.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.4\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"103\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-10590-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2013-10-29T08:32:35+08:00",
  "Author": "陈皓"
}