{
  "Source": "coolshell.cn",
  "Title": "对象的消息模型",
  "Link": "https://coolshell.cn/articles/5202.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"428833ffa098c1b80de8cfd6-text/javascript\"\u003e\u003c/script\u003e\u003cstrong\u003e\u003cspan style=\"color: #cc0000;\"\u003e[ ———— 感谢\u003c/span\u003e \u003ca href=\"http://www.cnblogs.com/weidagang2046/\" target=\"_blank\"\u003eTodd 同学\u003c/a\u003e \u003cspan style=\"color: #cc0000;\"\u003e投递本文，\u003ca href=\"http://www.cnblogs.com/weidagang2046/archive/2011/08/14/2138059.html\" target=\"_blank\"\u003e原文链接\u003c/a\u003e ———— ]\u003c/span\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#C%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B\" title=\"C++对象模型\"\u003eC++对象模型\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B6%88%E6%81%AF%E6%A8%A1%E5%9E%8B\" title=\"对象的消息模型\"\u003e对象的消息模型\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#Method_Missing\" title=\"Method Missing\"\u003eMethod Missing\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E6%80%BB%E7%BB%93\" title=\"总结\"\u003e总结\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E5%8F%82%E8%80%83\" title=\"参考\"\u003e参考\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"C%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B\"\u003e\u003c/span\u003e\u003cstrong\u003eC++对象模型\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e话题从下面这段C++程序说起，你认为它可以顺利执行吗？\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e//C++\nclass A {\n    public:\n        void Hello(const std::string\u0026amp; name) {\n           std::cout \u0026lt;\u0026lt; \u0026#34;hello \u0026#34; \u0026lt;\u0026lt; name;\n         }\n};\nint main(int argc, char** argv)\n{\n    A* pa = NULL; //!!\n    pa-\u0026gt;Hello(\u0026#34;world\u0026#34;);\n    return 0;\n}\u003c/pre\u003e\n\u003cp\u003e试试的确可以顺利运行输出hello world，奇怪吗？其实并不奇怪，根据C++对象模型，类的非虚方法并不会存在于对象内存布局中，实际上编译器是把Hello方法转化成了类似这样的全局函数：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003evoid A_Hello_xxx(A * const this, const std::string\u0026amp; name) {\n    std::cout \u0026lt;\u0026lt; “hello “ \u0026lt;\u0026lt; name;\n}\u003c/pre\u003e\n\u003cp\u003e对象指针其实是作为第一个参数被隐式传递的，pa-\u0026gt;Hello(“world”)实际上是调用的A_Hello_xxx(pa, “world”)，而恰好A_Hello_xxx内部没有使用pa，所以这段代码得以顺利运行。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B6%88%E6%81%AF%E6%A8%A1%E5%9E%8B\"\u003e\u003c/span\u003e\u003cstrong\u003e对象的消息模型\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e如果是研究C++对象模型，上面的讨论可以到此为止，不过这里我想从另一个层面来继续探讨这个问题。OOP的先驱人物Alan Kay在总结Smalltalk的OO特征时强调：\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-5202\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003eSmalltalk is not only NOT its syntax or the class library, it is not even about classes. I’m sorry that I long ago coined the term “objects” for this topic because it gets many people to focus on the lesser idea. The big idea is “messaging”.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e也就是说相比类和对象的概念来讲，他认为对象交互的消息模型是OOP更为本质的特征，因为消息关注的是对象间的接口和交互，在构建大的系统的时候重要的不是对象/模块的内部状态，而是它们的交互。根据消息模型，牛.吃(草) 的语义是发送一条消息给“牛”，消息的类型是“吃”，消息的内容是“草”。如果按照严格的消息模型，那么上面那段C++代码应解释为向一个NULL对象发送Hello消息，这显然是不应该顺利执行的。类似的代码如果是在Java或C#中则会抛出空引用异常，所以Java和C#的设计更符合消息模型。\u003c/p\u003e\n\u003cp\u003e不过，Java和C#中也并非完全符合消息模型，来看一个经典的封装问题：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"csharp\" class=\"EnlighterJSRAW\"\u003e//C#\n\npublic class Account {\n    private int _amount;\n\n    public void Transfer(Account acc, int delta) {\n        acc._amount += delta;\n        this._amount -= delta;\n    }\n    …\n}\u003c/pre\u003e\n\u003cp\u003e上面定义了一个Account类，问题在于为什么在这个类的Transfer方法中可以直接访问另一个对象acc的私有成员_amount呢？这是不是有破坏封装的嫌疑呢？这个问题经典的答案是：并不破坏封装，封装是划分了基于类的静态的代码边界，使得类的private代码修改不影响外界，而不是对于动态对象的保护。这个解释当然是合理的，不过正如上面C++代码的解释属于C++对象模型范畴，这个解释则属于基于类的静态类型OOP语言的范畴。消息模型强调了对象内部状态的保护，只能通过消息改变其状态，而对象内部是否真的具有_amout这样一个私有成员对其他任何对象（即使同类对象）都是未知的。\u003c/p\u003e\n\u003cp\u003e如果要严格遵守消息模型实现对象内部状态的保护应该怎么做呢？我们来看一个例子，定义一个集合类，包括：1.集合对象的构造函数；2.In方法：判断元素是否存在；3.Join方法：对两个集合做交集；4.Union方法：对两个集合做并集。下面是一种Javascript实现：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003e//Javascript\n\n//集合类Set的构造函数\nfunction Set() {\n    var _elements = arguments;\n    //In方法：判断元素e是否在集合中\n    this.In = function(e) {\n        for (var i = 0; i \u0026lt; _elements.length; ++i) {\n            if (_elements[i] == e) return true;\n        }\n        return false;\n    };\n}\n\n//Join方法：对两个集合求交集\nSet.prototype.Join = function(s2) {\n    var s1 = this;\n    var s = new Set();\n    s.In = function(e) { return s1.In(e) \u0026amp;\u0026amp; s2.In(e); }\n    return s;\n};\n\n//Union方法：对两个集合求并集\nSet.prototype.Union = function(s2) {\n    var s1 = this;\n    var s = new Set();\n    s.In = function(e) { return s1.In(e) || s2.In(e); }\n    return s;\n};\n\nvar s1 = new Set(1, 2, 3, 4, 5);\nvar s2 = new Set(2, 3, 4, 5, 6);\nvar s3 = new Set(3, 4, 5, 6, 7);\nassert(false == s1.Join(s2).Join(s3).In(2));\nassert(true == s1.Join(s2).Uion(s3).In(7));\u003c/pre\u003e\n\u003cp\u003e如果是在静态类型OOP语言中，要实现集合类的Join或Union，我们多半会像上面Account的例子一样直接对s2内部的_elements进行操作，而上面这段Javascript定义的Set关于对象s2的访问完全是符合消息模型的基于接口的访问。要实现消息模型Javascript的prototype机制并非必须的，真正的关键在于函数式的高级函数和闭包特性。从这个例子我们也可以体会到函数式的优点不仅在于无副作用，函数的可组合性也是函数式编程强大的原因。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Method_Missing\"\u003e\u003c/span\u003e\u003cstrong\u003eMethod Missing\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e接下来我们还要进行深度历险，让我们思考一下如果发送一条对象不能识别的消息会怎样？这种情况在C++、Java、C#等静态类型语言中会得到一个方法未定义的编译错误，如果是在Javascript中则会产生运行时异常。比如，s1.count()会产生一个运行时异常：Object #\u0026lt;Set\u0026gt; has no method ‘count’。\u003c/p\u003e\n\u003cp\u003e在静态类型语言这个问题很少受到重视，但在动态类型语言中却大有文章，来看下面的例子：\u003cbr/\u003e\n//Ruby\u003c/p\u003e\n\u003cpre data-enlighter-language=\"ruby\" class=\"EnlighterJSRAW\"\u003ebuilder = Builder::XmlMarkup.new\nxml = builder.books {|b|\n    b.book :isbn =\u0026gt; \u0026#34;14134\u0026#34; do\n        b.title \u0026#34;Revelation Space\u0026#34;\n        b.author \u0026#34;Alastair Reynolds\u0026#34;\n    end\n    b.book :isbn =\u0026gt; \u0026#34;53534\u0026#34; do\n        b.title \u0026#34;Accelerando\u0026#34;\n        b.author \u0026#34;Charles Stross\u0026#34;\n    end\n}\u003c/pre\u003e\n\u003cp\u003e上面这段很DSL的Ruby代码创建了这样一个XML文件对象：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"xml\" class=\"EnlighterJSRAW\"\u003e\n\n\u0026lt;books\u0026gt;\n    \u0026lt;book isbn=\u0026#34;14134\u0026#34;\u0026gt;\n        \u0026lt;title\u0026gt;Revelation Space\u0026lt;/title\u0026gt;\n        \u0026lt;author\u0026gt;Alastair Reynolds\u0026lt;/author\u0026gt;\n    \u0026lt;/book\u0026gt;\n    \u0026lt;book isbn=\u0026#34;53534\u0026#34;\u0026gt;\n        \u0026lt;title\u0026gt;Accelerando\u0026lt;/title\u0026gt;\n        \u0026lt;author\u0026gt;Charles Stross\u0026lt;/author\u0026gt;\n    \u0026lt;/book\u0026gt;\n\u0026lt;/books\u0026gt;\n\n\u003c/pre\u003e\n\u003cp\u003ebuilder.books, b.book, b.title都是对象方法调用，由于XML的元素名是任意的，所以不可能事先定义这些方法，类似的代码如果是在Javascript中就是no method异常。那为什么上面的Ruby代码可以正确执行呢？其实只要理解了消息模型就很容易想明白，只需要定义一个通用的消息处理方法，所有未明确定义的消息都交给它来处理就行了，这就是所谓的Method Missing模式：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"ruby\" class=\"EnlighterJSRAW\"\u003eclass Foo\n    def method_missing(method, *args, \u0026amp;block)\n        …\n    end\nend\n\u003c/pre\u003e\n\u003cp\u003eMethod Missing除了对实现DSL很重要外，还可用于产生更好地调试和错误信息，把参数嵌入到方法名中等场合。目前，Ruby、Python、Groovy几种语言对Method Missing都有很好的支持，甚至在C# 4.0中也可以利用动态特性实现。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%80%BB%E7%BB%93\"\u003e\u003c/span\u003e总结\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e本文主要介绍了对象的消息模型的特征，并比较了C++对象模型，Java、C#等基于类的静态类型语言中的对象模型与严格消息模型的差异，最后探讨了Method Missing相关话题。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%8F%82%E8%80%83\"\u003e\u003c/span\u003e参考\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://book.douban.com/subject/1484262/\" target=\"_blank\"\u003eInside the C++ Object Model\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://book.douban.com/subject/4031906/\" target=\"_blank\"\u003e冒号课堂 – 编程范式与OOP思想\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://c2.com/cgi/wiki?AlanKaysDefinitionOfObjectOriented\" target=\"_blank\"\u003eAlan Kays Definition Of Object Oriented\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://fitzgeraldnick.com/weblog/39/\" target=\"_blank\"\u003eOOP The Good Parts: Message Passing, Duck Typing, Object Composition, and not Inheritance\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://olabini.com/blog/2010/04/patterns-of-method-missing/\"\u003ePatterns of Method Missing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://haacked.com/archive/2009/08/26/method-missing-csharp-4.aspx\"\u003eFun With Method Missing and C# 4\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/10337.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/24.jpg\" alt=\"数据即代码：元驱动编程\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/10337.html\" class=\"wp_rp_title\"\u003e数据即代码：元驱动编程\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/10739.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/12/lua-150x150.gif\" alt=\"Lua简明教程\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/10739.html\" class=\"wp_rp_title\"\u003eLua简明教程\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/10169.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/5.jpg\" alt=\"类型的本质和函数式实现\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/10169.html\" class=\"wp_rp_title\"\u003e类型的本质和函数式实现\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/6731.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/03/closure-150x150.png\" alt=\"理解Javascript的闭包\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/6731.html\" class=\"wp_rp_title\"\u003e理解Javascript的闭包\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/6668.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/02/joo_1-150x150.png\" alt=\"再谈javascript面向对象编程 \" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/6668.html\" class=\"wp_rp_title\"\u003e再谈javascript面向对象编程 \u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-5202\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"8494d982df\"\u003e\u003cimg id=\"rating_5202_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(5202, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-428833ffa098c1b80de8cfd6-=\"\"/\u003e\u003cimg id=\"rating_5202_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(5202, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-428833ffa098c1b80de8cfd6-=\"\"/\u003e\u003cimg id=\"rating_5202_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(5202, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-428833ffa098c1b80de8cfd6-=\"\"/\u003e\u003cimg id=\"rating_5202_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(5202, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-428833ffa098c1b80de8cfd6-=\"\"/\u003e\u003cimg id=\"rating_5202_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(5202, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-428833ffa098c1b80de8cfd6-=\"\"/\u003e (\u003cstrong\u003e13\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e3.92\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_5202_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"对象的消息模型\"/\u003e\u003cmeta itemprop=\"headline\" content=\"对象的消息模型\"/\u003e\u003cmeta itemprop=\"description\" content=\"[ ———— 感谢 Todd 同学 投递本文，原文链接 ———— ]\nC++对象模型\n话题从下面这段C++程序说起，你认为它可以顺利执行吗？\n\n[c]//C++\nclass A {\n    public:\n        void Hello(const std::string\u0026amp; name) {\n           std::cout \u0026lt;\u0026lt; \u0026#34;hello \u0026#34; \u0026lt;\u0026lt; name;\n...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2011-08-15T10:37:13+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2011-08-15T18:01:47+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/5202.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"Todd\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/5202.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"3.92\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"13\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-5202-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2011-08-15T10:37:13+08:00",
  "Author": "Todd"
}