{
  "Source": "coolshell.cn",
  "Title": "为什么我反对纯算法面试题",
  "Link": "https://coolshell.cn/articles/8138.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"08e798d944b00462fa151a77-text/javascript\"\u003e\u003c/script\u003e算法面试可能是微软搞出来的面试方法，现在很多公司都在效仿，而且我们的程序员也乐于解算法题，我个人以为，这是应试教育的毒瘤！我在《\u003ca title=\"再谈“我是怎么招聘程序员的”（上）\" href=\"https://coolshell.cn/articles/4506.html\"\u003e再谈“我是怎么招程序员”\u003c/a\u003e》中比较保守地说过，“\u003cstrong\u003e问难的算法题并没有错，错的很多面试官只是在肤浅甚至错误地理解着面试算法题的目的\u003c/strong\u003e。”，今天，我想加强一下这个观点——\u003cstrong\u003e我反对纯算法题面试\u003c/strong\u003e！（注意，我说的是纯算法题）\u003c/p\u003e\n\u003cfigure id=\"attachment_8140\" aria-describedby=\"caption-attachment-8140\" style=\"width: 250px\" class=\"wp-caption alignright\"\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Sheldon_Cooper\"\u003e\u003cimg decoding=\"async\" class=\"size-full wp-image-8140\" title=\"Sheldon_Cooper\" src=\"https://coolshell.cn/wp-content/uploads/2012/08/250px-Sheldon_Cooper.jpg\" alt=\"\" width=\"250\" height=\"333\" srcset=\"https://coolshell.cn/wp-content/uploads/2012/08/250px-Sheldon_Cooper.jpg 250w, https://coolshell.cn/wp-content/uploads/2012/08/250px-Sheldon_Cooper-225x300.jpg 225w, https://coolshell.cn/wp-content/uploads/2012/08/250px-Sheldon_Cooper-203x270.jpg 203w\" sizes=\"(max-width: 250px) 100vw, 250px\"/\u003e\u003c/a\u003e\u003cfigcaption id=\"caption-attachment-8140\" class=\"wp-caption-text\"\u003e图片源Wikipedia（点击图片查看词条）\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cp\u003e我再次引用我以前的一个观点——\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e能解算法题并不意味着这个人就有能力就能在工作中解决问题，你可以想想，小学奥数题可能比这些题更难，但并不意味着那些奥数能手就能解决实际问题。\u003c/p\u003e\n\u003cp\u003e好了，让我们来看一个示例（这个示例是昨天在\u003ca href=\"http://weibo.com/1401880315/yy9pvgNi2\" target=\"_blank\"\u003e微博上的一个讨论\u003c/a\u003e），这个题是——“\u003cstrong\u003e找出无序数组中第2大的数\u003c/strong\u003e”，几乎所有的人都用了O(n)的算法，我相信对于我们这些应试教育出来的人来说，不用排序用O(n)算法是很正常的事，连我都不由自主地认为O(n)算法是这个题的标准答案。\u003cstrong\u003e我们太习惯于标准答案了，这是我国教育最悲哀的地方\u003c/strong\u003e。（广义的洗脑就是让你的意识依赖于某个标准答案，然后通过给你标准答案让你不会思考而控制你）\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E5%8A%9F%E8%83%BD%E6%80%A7%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90\" title=\"功能性需求分析\"\u003e功能性需求分析\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E9%9D%9E%E5%8A%9F%E8%83%BD%E6%80%A7%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90\" title=\"非功能性需求分析\"\u003e非功能性需求分析\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E5%B7%A5%E7%A8%8B%E5%BC%8F%E7%9A%84%E8%A7%A3%E6%B3%95\" title=\"工程式的解法\"\u003e工程式的解法\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E4%BA%89%E8%AE%BA\" title=\"争论\"\u003e争论\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E5%B0%8F%E7%BB%93\" title=\"小结\"\u003e小结\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%8A%9F%E8%83%BD%E6%80%A7%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90\"\u003e\u003c/span\u003e功能性需求分析\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e试想，如果我们在实际工作中得到这样一个题 我们会怎么做？我一定会分析这个需求，因为我害怕需求未来会改变，今天你叫我找一个第2大的数，明天你找我找一个第4大的数，后天叫我找一个第100大的数，我不搞死了。需求变化是很正常的事。分析完这个需求后，我会很自然地去写找第K大数的算法——难度一下子就增大了。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-8138\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e很多人会以为找第K大的需求是一种“过早扩展”的思路，不是这样的，我相信我们在实际编码中写过太多这样的程序了，你一定不会设计出这样的函数接口—— Find2ndMaxNum(int* array, int len)，就好像你不会设计出 DestroyBaghdad(); 这样的接口，而是设计一个DestoryCity( City\u0026amp; ); 的接口，而把Baghdad当成参数传进去！所以，你应该是声明一个叫FindKthMaxNum(int* array, int len, int kth)，把2当成参数传进去。\u003cstrong\u003e这是最基本的编程方法，用数学的话来说，叫代数\u003c/strong\u003e！最简单的需求分析方法就是把需求翻译成函数名，然后看看是这个接口不是很二？！\u003c/p\u003e\n\u003cp\u003e（注：不要纠结于FindMaxNum()或FindMinNum()，因为这两个函数名的业务意义很清楚了，不像Find2ndMaxNum()那么二）\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%9D%9E%E5%8A%9F%E8%83%BD%E6%80%A7%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90\"\u003e\u003c/span\u003e非功能性需求分析\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e性能之类的东西从来都是非功能性需求，对于算法题，我们太喜欢研究算法题的空间和时间复杂度了。我们希望做到空间和时间双丰收，这是算法学术界的风格。所以，\u003cstrong\u003e习惯于标准答案的我们已经失去思考的能力，只会机械地思考算法之内的性能，而忽略了算法之外的性能\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e如果题目是——“从无序数组中找到第K个最大的数”，那么，我们一定会去思考用O(n)的线性算法找出第K个数。事实上，也有线性算法——STL中可以用nth_element求得类似的第n大的数，其利用快速排序的思想，从数组S中随机找出一个元素X，把数组分为两部分Sa和Sb。Sa中的元素大于等于X，Sb中元素小于X。这时有两种情况：1）Sa中元素的个数小于k，则Sb中的第k-|Sa|个元素即为第k大数；2） Sa中元素的个数大于等于k，则返回Sa中的第k大数。时间复杂度近似为O(n)。\u003c/p\u003e\n\u003cp\u003e搞学术的nuts们到了这一步一定会欢呼胜利！但是他们哪里能想得到性能的需求分析也是来源自业务的！\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e我们一说性能，基本上是个人都会问，请求量有多大？如果我们的FindKthMaxNum()的请求量是m次，那么你的这个每次都要O(n)复杂度的算法得到的效果就是O(n*m)，这一点，是书呆子式的学院派人永远想不到的。\u003c/strong\u003e因为应试教育让我们不会从实际思考了。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%B7%A5%E7%A8%8B%E5%BC%8F%E7%9A%84%E8%A7%A3%E6%B3%95\"\u003e\u003c/span\u003e工程式的解法\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e根据上面的需求分析，有软件工程经验的人的解法通常会这样：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）把数组排序，从大到小。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）于是你要第k大的数，就直接访问 array[k]。\u003c/p\u003e\n\u003cp\u003e排序只需要一次，O(n*log(n))，然后，接下来的m次对FindKthMaxNum()的调用全是O(1)的，整体复杂度反而成了线性的。\u003c/p\u003e\n\u003cp\u003e其实，上述的还不是工程式的最好的解法，因为，在业务中，那数组中的数据可能会是会变化的，所以，如果是用数组排序的话，有数据的改动会让我重新排序，这个太耗性能了，如果实际情况中会有很多的插入或删除操作，那么可以考虑使用B+树。\u003c/p\u003e\n\u003cp\u003e工程式的解法有以下特点：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）很方便扩展，因为数据排好序了，你还可以方便地支持各种需求，如从第k1大到k2大的数据（那些学院派写出来的代码在拿到这个需求时又开始挠头苦想了）\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）规整的数据会简化整体的算法复杂度，从而整体性能会更好。（公欲善其事，必先利其器）\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e3）代码变得清晰，易懂，易维护！（学院派的和STL一样的近似O(n)复杂度的算法没人敢动）\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%BA%89%E8%AE%BA\"\u003e\u003c/span\u003e争论\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e你可能会和我有以下争论，\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e如果程序员做这个算法题用排序的方式，他一定不会像你想那么多\u003c/strong\u003e。是的，你说得对。但是我想说，很多时候，我们直觉地思考，恰恰是正确的路。因为“排序”这个思路符合人类大脑处理问题的方式，而使用学院派的方式是反大脑直觉的。反大脑直觉的，通常意味着晦涩难懂，维护成本上升。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e就是一道面试题，我就是想测试一下你的算法技能，这也扯太多了\u003c/strong\u003e。没问题，不过，我们要清楚我们是在招什么人？是一个只会写算法的人，还是一个会做软件的人？这个只有你自己最清楚。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e这个算法题太容易诱导到学院派的思路了\u003c/strong\u003e。是的这道“找出第K大的数”，其实可以变换为更为业务一点的题目——“\u003cstrong\u003e我要和别的商户竞价，我想排在所有竞争对手报价的第K名，请写一个程序，我输入K，和一个商品名，系统告诉我应该订多少价？\u003c/strong\u003e（商家的所有商品的报价在一数组中）”——业务分析，整体性能，算法，数据结构，增加需求让应聘者重构，这一个问题就全考了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003cspan style=\"color: #ff0000;\"\u003e你是不是在说算法不重要，不用学？\u003c/span\u003e\u003c/strong\u003e千万别这样理解我，搞得好像如果面试不面，我就可以不学。\u003cstrong\u003e算法很重要，算法题能锻炼我们的思维，而且也有很多实际用处\u003c/strong\u003e。我这篇文章不是让大家不要去学算法，这是完全错误的，我是让大家带着业务问题去使用算法。问你业务问题，一样会问到算法题上来。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%B0%8F%E7%BB%93\"\u003e\u003c/span\u003e小结\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e看过这上面的分析，我相信你明白我为什么反对纯算法面试题了。原因就是\u003cstrong\u003e纯算法的面试题根本不能反应一个程序的综合素质\u003c/strong\u003e！\u003c/p\u003e\n\u003cp\u003e那么，在面试中，我们应该要考量程序员的那些综合素质呢？我以为有下面这些东西：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e会不会做需求分析？怎么理解问题的？\u003c/li\u003e\n\u003cli\u003e解决问题的思路是什么？想法如何？\u003c/li\u003e\n\u003cli\u003e会不会对基础的算法和数据结构灵活运用？\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e另外，我们知道，对于软件开发来说，在工程上，难是的下面是这些挑战：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e软件的维护成本远远大于软件的开发成本。\u003c/li\u003e\n\u003cli\u003e软件的质量变得越来越重要，所以，测试工作也变得越来越重要。\u003c/li\u003e\n\u003cli\u003e软件的需求总是在变的，软件的需求总是一点一点往上加的。\u003c/li\u003e\n\u003cli\u003e程序中大量的代码都是在处理一些错误的或是不正常的流程。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以，对于编程能力上，我们应该主要考量程序员的如下能力：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e设计是否满足对需求的理解，并可以应对可能出现的需求变化。\u003c/li\u003e\n\u003cli\u003e程序是否易读，易维护？\u003c/li\u003e\n\u003cli\u003e重构代码的能力如何？\u003c/li\u003e\n\u003cli\u003e会不会测试自己写好的程序？\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e所以，这段时间，我越来越倾向于问应聘者一些有业务意义的题，而且应增加或更改需求来看程序员的重构代码的能力，写完程序后，让应聘者设计测试案例。\u003c/p\u003e\n\u003cp\u003e比如：解析加减乘除表达式，字符串转数字，洗牌程序，口令生成器，通过ip地址找地点，英汉词典双向检索……\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e总之，我反对纯算法面试题！\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"Leetcode 编程训练\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_title\"\u003eLeetcode 编程训练\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8790.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/12/choice-150x150.jpg\" alt=\"程序算法与人生选择\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8790.html\" class=\"wp_rp_title\"\u003e程序算法与人生选择\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/4976.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/5.jpg\" alt=\"给程序员新手的一些建议\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/4976.html\" class=\"wp_rp_title\"\u003e给程序员新手的一些建议\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/4506.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/0.jpg\" alt=\"再谈“我是怎么招聘程序员的”（上）\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/4506.html\" class=\"wp_rp_title\"\u003e再谈“我是怎么招聘程序员的”（上）\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/4490.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/2.jpg\" alt=\"再谈“我是怎么招聘程序员的”（下）\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/4490.html\" class=\"wp_rp_title\"\u003e再谈“我是怎么招聘程序员的”（下）\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/3345.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2010/12/googlequestion-150x150.jpg\" alt=\"140个Google的面试题\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/3345.html\" class=\"wp_rp_title\"\u003e140个Google的面试题\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-8138\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"065b195b81\"\u003e\u003cimg id=\"rating_8138_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8138, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-08e798d944b00462fa151a77-=\"\"/\u003e\u003cimg id=\"rating_8138_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8138, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-08e798d944b00462fa151a77-=\"\"/\u003e\u003cimg id=\"rating_8138_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8138, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-08e798d944b00462fa151a77-=\"\"/\u003e\u003cimg id=\"rating_8138_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8138, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-08e798d944b00462fa151a77-=\"\"/\u003e\u003cimg id=\"rating_8138_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8138, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-08e798d944b00462fa151a77-=\"\"/\u003e (\u003cstrong\u003e55\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.44\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_8138_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"为什么我反对纯算法面试题\"/\u003e\u003cmeta itemprop=\"headline\" content=\"为什么我反对纯算法面试题\"/\u003e\u003cmeta itemprop=\"description\" content=\"算法面试可能是微软搞出来的面试方法，现在很多公司都在效仿，而且我们的程序员也乐于解算法题，我个人以为，这是应试教育的毒瘤！我在《再谈“我是怎么招程序员”》中比较保守地说过，“问难的算法题并没有错，错的很多面试官只是在肤浅甚至错误地理解着面试算法题的目的。”，今天，我想加强一下这个观点——我反对纯算法题面试！（注意，我说的是纯算法题）\n\n\n\n我再次引用我以前的一个观点——\n能解算法题并不意...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2012-08-22T08:20:18+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2012-08-22T09:11:30+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/8138.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/8138.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.44\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"55\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-8138-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2012-08-22T08:20:18+08:00",
  "Author": "陈皓"
}