{
  "Source": "coolshell.cn",
  "Title": "数据即代码：元驱动编程",
  "Link": "https://coolshell.cn/articles/10337.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"59548ab8979079f6d79ff910-text/javascript\"\u003e\u003c/script\u003e\u003cstrong\u003e（感谢 \u003ca href=\"http://weibo.com/weidagang\" target=\"_blank\"\u003e@文艺复兴记\u003c/a\u003e（todd） 投递此文）\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e几个小伙伴在考虑下面这个各个语言都会遇到的问题：\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e问题：设计一个命令行参数解析API\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e一个好的命令行参数解析库一般涉及到这几个常见的方面：\u003c/p\u003e\n\u003cp\u003e1) 支持方便地生成帮助信息\u003c/p\u003e\n\u003cp\u003e2) 支持子命令，比如：git包含了push, pull, commit等多种子命令\u003c/p\u003e\n\u003cp\u003e3) 支持单字符选项、多字符选项、标志选项、参数选项等多种选项和位置参数\u003c/p\u003e\n\u003cp\u003e4) 支持选项默认值，比如：–port选项若未指定认为5037\u003c/p\u003e\n\u003cp\u003e5) 支持使用模式，比如：tar命令的-c和-x是互斥选项，属于不同的使用模式\u003c/p\u003e\n\u003cp\u003e经过一番考察，小伙伴们发现了这个几个有代表性的API设计：\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e1. getopt()：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://www.gnu.org/software/libc/manual/html_node/Getopt.html\"\u003egetopt()\u003c/a\u003e是libc的标准函数，很多语言中都能找到它的移植版本。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-10337\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e//C\nwhile ((c = getopt(argc, argv, \u0026#34;ac:d:\u0026#34;)) != -1) {\n    int this_option_optind = optind ? optind : 1;\n    switch (c) {\n    case \u0026#39;a\u0026#39;:\n        printf (\u0026#34;option a\u0026#34;);\n        aopt = 1;\n        break;\n    case \u0026#39;c\u0026#39;:\n        printf (\u0026#34;option c with value \u0026#39;%s\u0026#39;\u0026#34;, optarg);\n        copt = optarg;\n        break;\n    case \u0026#39;d\u0026#39;:\n        printf (\u0026#34;option d with value \u0026#39;%s\u0026#39;\u0026#34;, optarg);\n        dopt = optarg;\n        break;\n    case \u0026#39;?\u0026#39;:\n        break;\n    default:\n        printf (\u0026#34;?? getopt returned character code 0%o ??\u0026#34;, c);\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003egetopt()的核心是一个类似printf的格式字符串的命令行参数描述串，如上面的”ac:d:”定义了”a”, “c”，”d”3个命令行参数，其中，a是一个标志符不需要参数，”c”和”d”需要跟参数。getopt()功能非常弱，只支持单个字符的标志选项和参数选项。如果按上面的5点来比对，基本上只能说是勉强支持第3点，其他几项只能靠程序自己来实现了，所以，想直接基于getopt()实现一个像git这样复杂的命令行参数是不可能的，只有自己来做很多的解析工作。小伙伴们看过getopt()之后一致的评价是:图样图森破。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e2. Google gflags\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e接着，小伙伴们又发现了\u003ca href=\"https://code.google.com/p/gflags/\"\u003egflags\u003c/a\u003e这个Google出品C++命令行参数解析库。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"cpp\" class=\"EnlighterJSRAW\"\u003e//C++\nDEFINE_bool(memory_pool, false, \u0026#34;If use memory pool\u0026#34;);\nDEFINE_bool(daemon, true, \u0026#34;If started as daemon\u0026#34;);\nDEFINE_string(module_id, \u0026#34;\u0026#34;, \u0026#34;Server module id\u0026#34;);\nDEFINE_int32(http_port, 80, \u0026#34;HTTP listen port\u0026#34;);\nDEFINE_int32(https_port, 443, \u0026#34;HTTPS listen port\u0026#34;);\n\nint main(int argc, char** argv) {\n    ::google::ParseCommandLineFlags(\u0026amp;argc, \u0026amp;argv, true);\n\n    printf(\u0026#34;Server module id: %s\u0026#34;, FLAGS_module_id.c_str());\n\n    if (FLAGS_daemon) {\n      printf(\u0026#34;Run as daemon: %d\u0026#34;, FLAGS_daemon);\n    }\n    if (FLAGS_memory_pool) {\n      printf(\u0026#34;Use memory pool: %d\u0026#34;, FLAGS_daemon);\n    }\n\n    Server server;\n\n    return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e小伙伴们看了后不由得感叹“真心好用啊”！的确，gflags简单地通过几个宏就定义了命令行选项，基本上很好的支持了上面提到的1，3，4这几项，比起getopt()来强多了。对于类似cp这样的小命令，gflags应该是够用了，但要达到git这种级别就显得有些单薄了。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e3. Ruby Commander\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e接下来小伙伴们又发现了Ruby Commander库：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"ruby\" class=\"EnlighterJSRAW\"\u003e//Ruby\n# :name is optional, otherwise uses the basename of this executable\nprogram :name, \u0026#39;Foo Bar\u0026#39;\nprogram :version, \u0026#39;1.0.0\u0026#39;\nprogram :description, \u0026#39;Stupid command that prints foo or bar.\u0026#39;\ncommand :bar do |c|\n  c.syntax = \u0026#39;foobar bar [options]\u0026#39;\n  c.description = \u0026#39;Display bar with optional prefix and suffix\u0026#39;\n  c.option \u0026#39;--prefix STRING\u0026#39;, String, \u0026#39;Adds a prefix to bar\u0026#39;\n  c.option \u0026#39;--suffix STRING\u0026#39;, String, \u0026#39;Adds a suffix to bar\u0026#39;\n  c.action do |args, options|\n    options.default :prefix =\u0026gt; \u0026#39;(\u0026#39;, :suffix =\u0026gt; \u0026#39;)\u0026#39;\n    say \u0026#34;#{options.prefix}bar#{options.suffix}\u0026#34;\n  end\nend\n$ foobar bar\n# =\u0026gt; (bar)\n$ foobar bar --suffix \u0026#39;}\u0026#39; --prefix \u0026#39;{\u0026#39;\n# =\u0026gt; {bar}\n\u003c/pre\u003e\n\u003cp\u003eCommander库利用Ruby酷炫的语法定义了一种描述命令行参数的内部DSL，看起来相当高端大气上档次。除了上面的第5项之外，其他几项都有很好的支持，可以说Commander库的设计基本达到了git这种级别命令行参数解析的要求。只是，要搞懂Ruby这么炫的语法和这个库的使用方法恐怕就不如getopt()和gflags容易了。有小伙伴当场表示想要学习Ruby，但是也有小伙伴表示再看看其他库再说。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e4. Lisp cmdline库\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e接下来，小伙伴们发现了Lisp方言Racket的\u003ca href=\"http://docs.racket-lang.org/reference/Command-Line_Parsing.html\"\u003ecmdline库\u003c/a\u003e。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"ruby\" class=\"EnlighterJSRAW\"\u003e//Lisp\n(parse-command-line \u0026#34;compile\u0026#34; (current-command-line-arguments)\n  `((once-each\n     [(\u0026#34;-v\u0026#34; \u0026#34;--verbose\u0026#34;)\n      ,(lambda (flag) (verbose-mode #t))\n      (\u0026#34;Compile with verbose messages\u0026#34;)]\n     [(\u0026#34;-p\u0026#34; \u0026#34;--profile\u0026#34;)\n      ,(lambda (flag) (profiling-on #t))\n      (\u0026#34;Compile with profiling\u0026#34;)])\n    (once-any\n     [(\u0026#34;-o\u0026#34; \u0026#34;--optimize-1\u0026#34;)\n      ,(lambda (flag) (optimize-level 1))\n      (\u0026#34;Compile with optimization level 1\u0026#34;)]\n     [(\u0026#34;--optimize-2\u0026#34;)\n      ,(lambda (flag) (optimize-level 2))\n      ((\u0026#34;Compile with optimization level 2,\u0026#34;\n        \u0026#34;which implies all optimizations of level 1\u0026#34;))])\n    (multi\n     [(\u0026#34;-l\u0026#34; \u0026#34;--link-flags\u0026#34;)\n      ,(lambda (flag lf) (link-flags (cons lf (link-flags))))\n      (\u0026#34;Add a flag \u0026lt;lf\u0026gt; for the linker\u0026#34; \u0026#34;lf\u0026#34;)]))\n   (lambda (flag-accum file) file)\n   \u0026#39;(\u0026#34;filename\u0026#34;))\n\u003c/pre\u003e\n\u003cp\u003e这是神马浮云啊?括号套括号，看起来很厉害的样子，但又不是很明白。看到这样的设计，有的小伙伴连评价都懒得评价了，但也有的小伙伴对Lisp越发崇拜，表示Lisp就是所谓的终极语言了，没有哪门语言能写出这么不明觉历的代码来！小伙伴们正准备打完收工，突然…\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e5. Node.js的LineParser库\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e发现了Node.js的\u003ca href=\"https://github.com/weidagang/line-parser-js\"\u003eLineParser库\u003c/a\u003e:\u003c/p\u003e\n\u003cp\u003e[javascript]\u003cbr/\u003e\n//JavaScript\u003cbr/\u003e\nvar meta = {\u003cbr/\u003e\nprogram : ‘adb’,\u003cbr/\u003e\nname : ‘Android Debug Bridge’,\u003cbr/\u003e\nversion : ‘1.0.3’,\u003cbr/\u003e\nsubcommands : [ ‘connect’, ‘disconnect’, ‘install’ ],\u003cbr/\u003e\noptions : {\u003cbr/\u003e\nflags : [\u003cbr/\u003e\n[ ‘h’, ‘help’, ‘print program usage’ ],\u003cbr/\u003e\n[ ‘r’, ‘reinstall’, ‘reinstall package’ ],\u003cbr/\u003e\n[ ‘l’, ‘localhost’, ‘localhost’ ]\u003cbr/\u003e\n],\u003cbr/\u003e\nparameters : [\u003cbr/\u003e\n[ null, ‘host’, ‘adb server hostname or IP address’, null ],\u003cbr/\u003e\n[ ‘p’, ‘port’, ‘adb server port’, 5037 ]\u003cbr/\u003e\n]\u003cbr/\u003e\n},\u003cbr/\u003e\nusages : [\u003cbr/\u003e\n[ ‘connect’, [‘host’, ‘[port]’], null, ‘connect to adb server’, adb_connect ],\u003cbr/\u003e\n[ ‘connect’, [ ‘l’ ], null, ‘connect to the local adb server’, adb_connect ],\u003cbr/\u003e\n[ ‘disconnect’, null, null, ‘disconnect from adb server’, adb_disconnect ],\u003cbr/\u003e\n[ ‘install’, [‘r’], [‘package’], ‘install package’, adb_install ],\u003cbr/\u003e\n[ null, [‘h’], null, ‘help’, adb_help ],\u003cbr/\u003e\n]\u003cbr/\u003e\n};\u003c/p\u003e\n\u003cp\u003etry {\u003cbr/\u003e\nvar lineparser = require(‘lineparser’);\u003cbr/\u003e\nvar parser = lineparser.init(meta);\u003cbr/\u003e\n// adb_install will be invoked\u003cbr/\u003e\nparser.parse([‘install’, ‘-r’, ‘/pkgs/bird.apk’]);\u003cbr/\u003e\n}\u003cbr/\u003e\ncatch (e) {\u003cbr/\u003e\nconsole.error(e);\u003cbr/\u003e\n}\u003cbr/\u003e\n[/javascript]\u003c/p\u003e\n\u003cp\u003e天啊！？这是什么？我和小伙伴们彻底惊呆了！短短十几行代码就获得了上面5点的全面支持，重要的是小伙伴们居然一下子就看懂了，没有任何的遮遮掩掩和故弄玄虚。本来以为Ruby和Lisp很酷，小伙伴们都想马上去学Ruby和Lisp了，看到这个代码之后怎么感觉前面全是在装呢？有个小伙伴居然激动得哭着表示：我写代码多年，以为再也没有什么代码可以让我感动，没想到这段代码如此精妙，我不由得要赞叹了，实在是太漂亮了！\u003c/p\u003e\n\u003cp\u003e小伙伴们的故事讲完了，您看懂了吗？如果没有看懂的话，正题开始了：\u003c/p\u003e\n\u003cp\u003e在绝大多数语言中数据和代码可以说是泾渭分明，习惯C++、Java等主流语言的程序员很少去思考数据和代码之间的关系。与多数语言不同的是Lisp以“数据即代码，代码即数据”著称，Lisp用S表达式统一了数据和代码的形式而独树一帜。Lisp奇怪的S表达式和复杂的宏系统让许多人都感到Lisp很神秘，而多数Lisp教程要么强调函数式编程，要么鼓吹宏如何强大，反而掩盖了Lisp真正本质的东西，为此我曾写过一篇\u003ca href=\"http://www.cnblogs.com/weidagang2046/archive/2012/06/03/tao_of_lisp.html\"\u003e《Lisp的永恒之道》\u003c/a\u003e介绍Lisp思想。\u003c/p\u003e\n\u003cp\u003e设计思想和具体技术的区别在于前者往往可以在不同的环境中以不同的形式展现出来。比如，熟悉函数式编程的程序员在理解了纯函数的优点后即使是用C语言也会更倾向于写出无副作用的函数来，这就是函数式思想在命令式环境的应用。所以，理解Lisp思想一定要能在非Lisp环境应用，才算是融汇贯通。\u003c/p\u003e\n\u003cp\u003e如果真正理解了Lisp的本质，那所谓的“数据即代码，代码即数据”一点儿也不神秘，这不就是我们每天打交道的配置文件吗！？如果你还不是很理解的话，我们通过下面几个问题慢慢分析：\u003c/p\u003e\n\u003cp\u003e1) 配置的本质是什么？为什么要在程序中使用配置文件？\u003c/p\u003e\n\u003cp\u003e不知道你是否意识到了，我们每天都在使用的各种各样的\u003cstrong\u003e配置本质上是一种元数据也是一种DSL\u003c/strong\u003e，这和Lisp基于S表达式的“数据即代码，代码即数据”没有本质区别。在C++、Java等程序中引入配置文件的目的正是用DSL弥补通用语言表达能力和灵活性的不足。我知道不少人喜欢从计算的角度来看到程序和语言，似乎只有图灵完备的语言如C++、Java、Python等才叫程序设计语言，而类似CSS和HTML这样的东西根本不能叫做程序设计语言。其实，在我看来这种观点过于狭隘，\u003cstrong\u003e程序的本质是语义的表达\u003c/strong\u003e，而语义表达不一定要是计算。\u003c/p\u003e\n\u003cp\u003e2) 配置是数据还是代码？\u003c/p\u003e\n\u003cp\u003e很明显，Both!说配置是数据，因为它是声明式的描述，能方便地修改和传输；说配置是代码，因为它在表达逻辑，你的程序实际上就是配置的解释器。\u003c/p\u003e\n\u003cp\u003e3) 配置的格式是什么？\u003c/p\u003e\n\u003cp\u003e配置的格式是任意的，可以自己定义语法，只要配以相应的解释器就行。不过更简单通用的做法是基于XML、JSON、或S表达式等标准结构，在此之上进一步定义schema。甚至完全不必是文件，在我们的项目中配置经常是放到用关系数据库中的。另外，下面我们还会看到用语言的Literal数据作为配置。\u003c/p\u003e\n\u003cp\u003e4) 业务逻辑都可以放到配置中吗？\u003c/p\u003e\n\u003cp\u003e这个问题的答案显然是：Yes！我没有遇到过不可以放入配置的逻辑，只是问题在于这样做是否值得，能达到什么效果。对于需要灵活变化，重复出现，有复用价值的东西放入作为配置是明智的选择。这篇文章的主要目的就在于介绍把\u003cstrong\u003e主要业务逻辑都放到配置中，再通过程序解释执行配置的设计方法，我称之为：元驱动编程(Meta Driven Programming)\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/5202.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/14.jpg\" alt=\"对象的消息模型\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/5202.html\" class=\"wp_rp_title\"\u003e对象的消息模型\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/1839.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2009/11/oscar-meyer-wienermobile-150x150.jpg\" alt=\"编程语言汽车\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/1839.html\" class=\"wp_rp_title\"\u003e编程语言汽车\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/10739.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/12/lua-150x150.gif\" alt=\"Lua简明教程\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/10739.html\" class=\"wp_rp_title\"\u003eLua简明教程\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/10169.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/5.jpg\" alt=\"类型的本质和函数式实现\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/10169.html\" class=\"wp_rp_title\"\u003e类型的本质和函数式实现\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/5709.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"API设计：用流畅接口构造内部DSL\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/5709.html\" class=\"wp_rp_title\"\u003eAPI设计：用流畅接口构造内部DSL\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-10337\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"6e90779d3f\"\u003e\u003cimg id=\"rating_10337_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10337, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-59548ab8979079f6d79ff910-=\"\"/\u003e\u003cimg id=\"rating_10337_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10337, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-59548ab8979079f6d79ff910-=\"\"/\u003e\u003cimg id=\"rating_10337_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10337, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-59548ab8979079f6d79ff910-=\"\"/\u003e\u003cimg id=\"rating_10337_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10337, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-59548ab8979079f6d79ff910-=\"\"/\u003e\u003cimg id=\"rating_10337_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10337, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-59548ab8979079f6d79ff910-=\"\"/\u003e (\u003cstrong\u003e58\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.03\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_10337_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"数据即代码：元驱动编程\"/\u003e\u003cmeta itemprop=\"headline\" content=\"数据即代码：元驱动编程\"/\u003e\u003cmeta itemprop=\"description\" content=\"（感谢 @文艺复兴记（todd） 投递此文）\n\n几个小伙伴在考虑下面这个各个语言都会遇到的问题：\n\n问题：设计一个命令行参数解析API\n\n一个好的命令行参数解析库一般涉及到这几个常见的方面：\n\n1) 支持方便地生成帮助信息\n\n2) 支持子命令，比如：git包含了push, pull, commit等多种子命令\n\n3) 支持单字符选项、多字符选项、标志选项、参数选项等多种选项...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2013-08-09T10:18:31+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2013-08-09T19:53:38+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/10337.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"Todd\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/10337.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.03\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"58\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-10337-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2013-08-09T10:18:31+08:00",
  "Author": "Todd"
}