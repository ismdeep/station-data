{
  "Source": "coolshell.cn",
  "Title": "Linus：利用二级指针删除单向链表",
  "Link": "https://coolshell.cn/articles/8990.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"8dbe2257a3a4123fe5ced047-text/javascript\"\u003e\u003c/script\u003e\u003cstrong\u003e感谢网友full_of_bull投递此文\u003c/strong\u003e（注：此文最初发表在这个\u003ca href=\"http://www.oldlinux.org/oldlinux/viewthread.php?tid=14575\u0026amp;extra=page%3D1\" target=\"_blank\"\u003e这里\u003c/a\u003e，我对原文后半段修改了许多，并加入了插图）\u003c/p\u003e\n\u003cp\u003eLinus大婶在\u003ca href=\"http://meta.slashdot.org/story/12/10/11/0030249/linus-torvalds-answers-your-questions\" target=\"_blank\"\u003eslashdot\u003c/a\u003e上回答一些编程爱好者的提问，其中一个人问他什么样的代码是他所喜好的，大婶表述了自己一些观点之后，举了一个指针的例子，解释了什么才是\u003cstrong\u003ecore low-level coding\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e下面是Linus的教学原文及翻译——\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e“At the opposite end of the spectrum, I actually wish more people understood the really core low-level kind of coding. Not big, complex stuff like the lockless name lookup, but simply good use of pointers-to-pointers etc. For example, I’ve seen too many people who delete a singly-linked list entry by keeping track of the “prev” entry, and then to delete the entry, doing something like。（在这段话的最后，我实际上希望更多的人了解什么是真正的核心底层代码。这并不像无锁文件名查询（注：可能是git源码里的设计）那样庞大、复杂，只是仅仅像诸如使用二级指针那样简单的技术。例如，我见过很多人在删除一个单项链表的时候，维护了一个”prev”表项指针，然后删除当前表项，就像这样）”\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eif (prev)\n    prev-\u0026gt;next = entry-\u0026gt;next;\nelse\n    list_head = entry-\u0026gt;next;\u003c/pre\u003e\n\u003cp style=\"padding-left: 30px;\"\u003eand whenever I see code like that, I just go “This person doesn’t understand pointers”. And it’s sadly quite common.（当我看到这样的代码时，我就会想“这个人不了解指针”。令人难过的是这太常见了。）\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-8990\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003ePeople who understand pointers just use a “pointer to the entry pointer”, and initialize that with the address of the list_head. And then as they traverse the list, they can remove the entry without using any conditionals, by just doing a “*pp = entry-\u0026gt;next”. （了解指针的人会使用链表头的地址来初始化一个“指向节点指针的指针”。当遍历链表的时候，可以不用任何条件判断（注：指prev是否为链表头）就能移除某个节点，只要写)\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e*pp = entry-\u0026gt;next\u003c/code\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003eSo there’s lots of pride in doing the small details right. It may not be big and important code, but I do like seeing code where people really thought about the details, and clearly also were thinking about the compiler being able to generate efficient code (rather than hoping that the compiler is so smart that it can make efficient code *despite* the state of the original source code). （纠正细节是令人自豪的事。也许这段代码并非庞大和重要，\u003cstrong\u003e但我喜欢看那些注重代码细节的人写的代码，也就是清楚地了解如何才能编译出有效代码\u003c/strong\u003e（而不是寄望于聪明的编译器来产生有效代码，即使是那些原始的汇编代码））。\u003c/p\u003e\n\u003cp\u003eLinus举了一个单向链表的例子，但给出的代码太短了，一般的人很难搞明白这两个代码后面的含义。正好，有个编程爱好者阅读了这段话，并给出了一个\u003ca href=\"http://wordaligned.org/articles/two-star-programming\" target=\"_blank\"\u003e比较完整的代码\u003c/a\u003e。他的话我就不翻译了，下面给出代码说明。\u003c/p\u003e\n\u003cp\u003e如果我们需要写一个remove_if(link*, rm_cond_func*)的函数，也就是传入一个单向链表，和一个自定义的是否删除的函数，然后返回处理后的链接。\u003c/p\u003e\n\u003cp\u003e这个代码不难，基本上所有的教科书都会提供下面的代码示例，而这种写法也是大公司的面试题\u003cstrong\u003e标准\u003c/strong\u003e模板：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003etypedef struct node\n{\n    struct node * next;\n    ....\n} node;\n\ntypedef bool (* remove_fn)(node const * v);\n\n// Remove all nodes from the supplied list for which the\n// supplied remove function returns true.\n// Returns the new head of the list.\nnode * remove_if(node * head, remove_fn rm)\n{\n    for (node * prev = NULL, * curr = head; curr != NULL; )\n    {\n        node * const next = curr-\u0026gt;next;\n        if (rm(curr))\n        {\n            if (prev)\n                prev-\u0026gt;next = next;\n            else\n                head = next;\n            free(curr);\n        }\n        else\n            prev = curr;\n        curr = next;\n    }\n    return head;\n}\u003c/pre\u003e\n\u003cp\u003e这里remove_fn由调用查提供的一个是否删除当前实体结点的函数指针，其会判断删除条件是否成立。这段代码维护了两个节点指针prev和curr，\u003cstrong\u003e标准的教科书写法——删除当前结点时，需要一个previous的指针，并且还要这里还需要做一个边界条件的判断——curr是否为链表头\u003c/strong\u003e。于是，要删除一个节点（不是表头），只要将前一个节点的next指向当前节点的next指向的对象，即下一个节点（即：prev-\u0026gt;next = curr-\u0026gt;next），然后释放当前节点。\u003c/p\u003e\n\u003cp\u003e但在Linus看来，这是不懂指针的人的做法。那么，什么是core low-level coding呢？那就是\u003cstrong\u003e有效地利用二级指针，将其作为管理和操作链表的首要选项。\u003c/strong\u003e代码如下：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"5,8,12\"\u003evoid remove_if(node ** head, remove_fn rm)\n{\n    for (node** curr = head; *curr; )\n    {\n        node * entry = *curr;\n        if (rm(entry))\n        {\n            *curr = entry-\u0026gt;next;\n            free(entry);\n        }\n        else\n            curr = \u0026amp;entry-\u0026gt;next;\n    }\n}\u003c/pre\u003e\n\u003cp\u003e同上一段代码有何改进呢？我们看到：\u003cstrong\u003e不需要prev指针了，也不需要再去判断是否为链表头了，但是，\u003cspan style=\"color: #cc0000;\"\u003ecurr变成了一个指向指针的指针\u003c/span\u003e\u003c/strong\u003e。这正是这段程序的精妙之处。（注意，我所highlight的那三行代码）\u003c/p\u003e\n\u003cp\u003e让我们来人肉跑一下这个代码，对于——\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e删除节点是表头\u003c/strong\u003e的情况，输入参数中传入head的二级指针，在for循环里将其初始化curr，然后entry就是*head(*curr)，我们马上删除它，那么第8行就等效于*head = (*head)-\u0026gt;next，就是删除表头的实现。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e删除节点不是表头\u003c/strong\u003e的情况，对于上面的代码，我们可以看到——\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003e1）\u003cstrong\u003e（第12行）\u003c/strong\u003e如果不删除当前结点 —— curr保存的是当前结点next指针的地址\u003c/strong\u003e。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003e2）（第5行） entry 保存了 *curr \u003cstrong\u003e—— \u003c/strong\u003e这意味着在下一次循环：entry就是prev-\u0026gt;next指针所指向的内存。\u003c/strong\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003e\u003c/strong\u003e\u003cstrong\u003e3）（第8行）删除结点：*curr = entry-\u0026gt;next; —— 于是：prev-\u0026gt;next 指向了 entry -\u0026gt; next;\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e是不是很巧妙？我们可以只用一个二级指针来操作链表，对所有节点都一样。\u003c/p\u003e\n\u003cp\u003e如果你对上面的代码和描述理解上有困难的话，你可以看看下图的示意：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" class=\"aligncenter size-full wp-image-9018\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/02/linus_pointer_to_pointer.jpg\" width=\"479\" height=\"470\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/02/linus_pointer_to_pointer.jpg 479w, https://coolshell.cn/wp-content/uploads/2013/02/linus_pointer_to_pointer-300x294.jpg 300w, https://coolshell.cn/wp-content/uploads/2013/02/linus_pointer_to_pointer-275x270.jpg 275w\" sizes=\"(max-width: 479px) 100vw, 479px\"/\u003e\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/9859.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/06/Alan-Cox-150x150.jpg\" alt=\"Alan Cox：单向链表中prev指针的妙用\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/9859.html\" class=\"wp_rp_title\"\u003eAlan Cox：单向链表中prev指针的妙用\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/07/api-design-300x278-2-150x150.jpg\" alt=\"API设计原则 – Qt官网的设计实践总结\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_title\"\u003eAPI设计原则 – Qt官网的设计实践总结\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/9917.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/10.jpg\" alt=\"Alan Cox：大教堂、市集与市议会\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/9917.html\" class=\"wp_rp_title\"\u003eAlan Cox：大教堂、市集与市议会\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8088.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/7.jpg\" alt=\"对技术的态度\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8088.html\" class=\"wp_rp_title\"\u003e对技术的态度\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/7886.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/07/muxnt-150x150.jpg\" alt=\"代码执行的效率\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/7886.html\" class=\"wp_rp_title\"\u003e代码执行的效率\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-8990\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"4487f96d01\"\u003e\u003cimg id=\"rating_8990_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8990, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8dbe2257a3a4123fe5ced047-=\"\"/\u003e\u003cimg id=\"rating_8990_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8990, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8dbe2257a3a4123fe5ced047-=\"\"/\u003e\u003cimg id=\"rating_8990_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8990, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8dbe2257a3a4123fe5ced047-=\"\"/\u003e\u003cimg id=\"rating_8990_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8990, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8dbe2257a3a4123fe5ced047-=\"\"/\u003e\u003cimg id=\"rating_8990_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8990, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8dbe2257a3a4123fe5ced047-=\"\"/\u003e (\u003cstrong\u003e57\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.25\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_8990_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"Linus：利用二级指针删除单向链表\"/\u003e\u003cmeta itemprop=\"headline\" content=\"Linus：利用二级指针删除单向链表\"/\u003e\u003cmeta itemprop=\"description\" content=\"感谢网友full_of_bull投递此文（注：此文最初发表在这个这里，我对原文后半段修改了许多，并加入了插图）\n\nLinus大婶在slashdot上回答一些编程爱好者的提问，其中一个人问他什么样的代码是他所喜好的，大婶表述了自己一些观点之后，举了一个指针的例子，解释了什么才是core low-level coding。\n\n下面是Linus的教学原文及翻译——\n“At the opposi...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2013-02-04T08:33:20+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2013-02-04T15:12:58+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/8990.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"Leo\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/8990.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.25\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"57\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-8990-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2013-02-04T08:33:20+08:00",
  "Author": "Leo"
}