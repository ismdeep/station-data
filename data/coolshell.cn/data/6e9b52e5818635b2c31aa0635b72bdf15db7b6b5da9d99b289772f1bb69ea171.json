{
  "Source": "coolshell.cn",
  "Title": "二叉树迭代器算法",
  "Link": "https://coolshell.cn/articles/9886.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"27155ecdfdd8d5aa8138665b-text/javascript\"\u003e\u003c/script\u003e\u003cstrong\u003e（感谢 \u003c/strong\u003e\u003ca href=\"http://weibo.com/weidagang\" target=\"_blank\"\u003e@文艺复兴记\u003c/a\u003e\u003cstrong\u003e（todd） 投递此文）\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e二叉树(Binary Tree)的前序、中序和后续遍历是算法和数据结构中的基本问题，基于递归的二叉树遍历算法更是递归的经典应用。\u003c/p\u003e\n\u003cp\u003e假设二叉树结点定义如下：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"cpp\" class=\"EnlighterJSRAW\"\u003e// C++\nstruct Node {\n    int value;\n    Node *left;\n    Node *right;\n}\n\u003c/pre\u003e\n\u003cp\u003e中序递归遍历算法：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"cpp\" class=\"EnlighterJSRAW\"\u003e// C++\nvoid inorder_traverse(Node *node) {\n    if (NULL != node-\u0026gt;left) {\n        inorder_traverse(node-\u0026gt;left);\n    }\n    do_something(node);\n    if (NULL != node-\u0026gt;right) {\n        inorder_traverse(node-\u0026gt;right);\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003e前序和后序遍历算法类似。\u003c/p\u003e\n\u003cp\u003e但是，仅有遍历算法是不够的，在许多应用中，我们还需要对遍历本身进行抽象。假如有一个求和的函数sum，我们希望它能应用于链表，数组，二叉树等等不同的数据结构。这时，我们可以抽象出迭代器(Iterator)的概念，通过\u003cstrong\u003e迭代器把算法和数据结构解耦了\u003c/strong\u003e，使得通用算法能应用于不同类型的数据结构。我们可以把sum函数定义为：\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-9886\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"cpp\" class=\"EnlighterJSRAW\"\u003eint sum(Iterator it)\n\u003c/pre\u003e\n\u003cp\u003e链表作为一种线性结构，它的迭代器实现非常简单和直观，而二叉树的迭代器实现则不那么容易，我们不能直接将递归遍历转换为迭代器。究其原因，这是因为二叉树递归遍历过程是编译器在调用栈上自动进行的，程序员对这个过程缺乏足够的控制。既然如此，那么我们如果可以自己来控制整个调用栈的进栈和出栈不是就达到控制的目的了吗？我们先来看看二叉树遍历的非递归算法：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"cpp\" class=\"EnlighterJSRAW\"\u003e// C++\nvoid inorder_traverse_nonrecursive(Node *node) {\n    Stack stack;\n    do {\n        // node代表当前准备处理的子树，层层向下把左孩子压栈，对应递归算法的左子树递归\n        while (NULL != node) {\n            stack.push(node);\n            node = node-\u0026gt;left;\n        }\n        do {\n            Node *top = stack.top();\n            stack.pop(); //弹出栈顶，对应递归算法的函数返回\n            do_something(top);\n            if (NULL != top-\u0026gt;right) {\n                node = top-\u0026gt;right; //将当前子树置为刚刚遍历过的结点的右孩子，对应递归算法的右子树递归\n                break;\n            }\n        }\n        while (!stack.empty());\n    }\n    while (!stack.empty());\n}\n\u003c/pre\u003e\n\u003cp\u003e通过基于栈的非递归算法我们获得了对于遍历过程的控制，下面我们考虑如何将其封装为迭代器呢？ 这里关键在于理解遍历的过程是由栈的状态来表示的，所以显然迭代器内部应该包含一个栈结构，每次迭代的过程就是对栈的操作。假设迭代器的接口为：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"cpp\" class=\"EnlighterJSRAW\"\u003e// C++\nclass Iterator {\n    public:\n        virtual Node* next() = 0;\n};\n\u003c/pre\u003e\n\u003cp\u003e下面是一个二叉树中序遍历迭代器的实现：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"cpp\" class=\"EnlighterJSRAW\"\u003e//C++\nclass InorderIterator : public Iterator {\n    public:\n        InorderIterator(Node *node) {\n            Node *current = node;\n            while (NULL != current) {\n                mStack.push(current);\n                current = current-\u0026gt;left;\n            }\n        }\n        virtual Node* next() {\n            if (mStack.empty()) {\n                return NULL;\n            }\n            Node *top = mStack.top();\n            mStack.pop();\n            if (NULL != top-\u0026gt;right) {\n                Node *current = top-\u0026gt;right;\n                while (NULL != current) {\n                    mStack.push(current);\n                    current = current-\u0026gt;left;\n                }\n            }\n            return top;\n         }\n    private:\n        std::stack\u0026lt;Node*\u0026gt; mStack;\n};\n\u003c/pre\u003e\n\u003cp\u003e下面我们再来考察一下这个迭代器实现的时间和空间复杂度。很显然，由于栈中最多需要保存所有的结点，所以其空间复杂度是O(n)的。那么时间复杂度呢？一次next()调用也最多会进行n次栈操作，而整个遍历过程需要调用n次next()，那么是不是整个迭代器的时间复杂度就是O(n^2)呢？答案是否定的！因为每个结点只会进栈和出栈一次，所以整个迭代过程的时间复杂度依然为O(n)。其实，这和递归遍历的时空复杂度完全一样。\u003c/p\u003e\n\u003cp\u003e除了上面显式利用栈控制代码执行顺序外，在支持yield语义的语言（C#, Python等)中，还有更为直接的做法。下面基于yield的二叉树中序遍历的Python实现：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"python\" class=\"EnlighterJSRAW\"\u003e// Python\ndef inorder(t):\n    if t:\n        for x in inorder(t.left):\n            yield x\n        yield t.label\n        for x in inorder(t.right):\n            yield x\n\u003c/pre\u003e\n\u003cp\u003eyield与return区别的一种通俗解释是yield返回时系统会保留函数调用的状态，下次该函数被调用时会接着从上次的执行点继续执行，这是一种与栈语义所完全不同的流程控制语义。我们知道Python的解释器是C写的，但是C并不支持yield语义，那么解释器是如何做到对yield的支持的呢？ 有了上面把递归遍历变换为迭代遍历的经验，相信你已经猜到Python解释器一定是对yield代码进行了某种变换。如果你已经能够实现递归变非递归，不妨尝试一下能否写一段编译程序将yield代码变换为非yield代码。\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"Leetcode 编程训练\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_title\"\u003eLeetcode 编程训练\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8239.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/09/lock_free_bicycle-150x150.jpg\" alt=\"无锁队列的实现\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8239.html\" class=\"wp_rp_title\"\u003e无锁队列的实现\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/6010.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/23.jpg\" alt=\"一些有意思的算法代码\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/6010.html\" class=\"wp_rp_title\"\u003e一些有意思的算法代码\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/4220.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/0.jpg\" alt=\"一些有意思的文章和资源\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/4220.html\" class=\"wp_rp_title\"\u003e一些有意思的文章和资源\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/3738.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/26.jpg\" alt=\"打印质数的各种算法\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/3738.html\" class=\"wp_rp_title\"\u003e打印质数的各种算法\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/03/rust-social-wide-150x150.jpg\" alt=\"Rust语言的编程范式\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_title\"\u003eRust语言的编程范式\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-9886\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"0da94b6504\"\u003e\u003cimg id=\"rating_9886_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9886, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-27155ecdfdd8d5aa8138665b-=\"\"/\u003e\u003cimg id=\"rating_9886_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9886, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-27155ecdfdd8d5aa8138665b-=\"\"/\u003e\u003cimg id=\"rating_9886_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9886, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-27155ecdfdd8d5aa8138665b-=\"\"/\u003e\u003cimg id=\"rating_9886_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9886, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-27155ecdfdd8d5aa8138665b-=\"\"/\u003e\u003cimg id=\"rating_9886_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9886, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-27155ecdfdd8d5aa8138665b-=\"\"/\u003e (\u003cstrong\u003e25\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e3.04\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_9886_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"二叉树迭代器算法\"/\u003e\u003cmeta itemprop=\"headline\" content=\"二叉树迭代器算法\"/\u003e\u003cmeta itemprop=\"description\" content=\"（感谢 @文艺复兴记（todd） 投递此文）\n\n二叉树(Binary Tree)的前序、中序和后续遍历是算法和数据结构中的基本问题，基于递归的二叉树遍历算法更是递归的经典应用。\n\n假设二叉树结点定义如下：\n\n[cpp]\n// C++\nstruct Node {\n    int value;\n    Node *left;\n    Node *right;\n}\n[/cpp]...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2013-07-14T11:08:23+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2013-07-15T10:21:09+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/9886.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"Todd\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/9886.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"3.04\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"25\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-9886-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2013-07-14T11:08:23+08:00",
  "Author": "Todd"
}