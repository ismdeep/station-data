{
  "Source": "coolshell.cn",
  "Title": "如何读懂并写出装逼的函数式代码",
  "Link": "https://coolshell.cn/articles/17524.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"b451009318de108119a15229-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" src=\"https://coolshell.cn/wp-content/uploads/2016/10/drawing-recursive-300x204.jpg\" alt=\"drawing-recursive\" width=\"300\" height=\"204\" class=\"alignright size-medium wp-image-17535\" srcset=\"https://coolshell.cn/wp-content/uploads/2016/10/drawing-recursive-300x204.jpg 300w, https://coolshell.cn/wp-content/uploads/2016/10/drawing-recursive-768x522.jpg 768w, https://coolshell.cn/wp-content/uploads/2016/10/drawing-recursive-1024x696.jpg 1024w, https://coolshell.cn/wp-content/uploads/2016/10/drawing-recursive-397x270.jpg 397w, https://coolshell.cn/wp-content/uploads/2016/10/drawing-recursive.jpg 1100w\" sizes=\"(max-width: 300px) 100vw, 300px\"/\u003e今天在微博上看到了 有人\u003ca href=\"http://weibo.com/1655747731/Ee4gU0qNn\" target=\"_blank\"\u003e分享了下面的这段函数式代码\u003c/a\u003e，我把代码贴到下面，不过我对原来的代码略有改动，对于函数式的版本，咋一看，的确令人非常费解，仔细看一下，你可能就晕掉了，似乎完全就是天书，看上去非常装逼，哈哈。不过，我感觉解析那段函数式的代码可能会一个比较有趣过程，而且，我以前写过一篇《\u003ca href=\"https://coolshell.cn/articles/10822.html\" target=\"_blank\"\u003e函数式编程\u003c/a\u003e》的入门式的文章，正好可以用这个例子，再升华一下原来的那篇文章，顺便可以向大家更好的介绍很多基础知识，所以写下这篇文章。\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E5%85%88%E7%9C%8B%E4%BB%A3%E7%A0%81\" title=\"先看代码\"\u003e先看代码\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#Javascript%E7%9A%84%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\" title=\"Javascript的箭头函数\"\u003eJavascript的箭头函数\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E7%9A%84%E9%80%92%E5%BD%92\" title=\"匿名函数的递归\"\u003e匿名函数的递归\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E5%8A%A8%E7%94%A8%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E7%9A%84%E9%80%92%E5%BD%92\" title=\"动用高阶函数的递归\"\u003e动用高阶函数的递归\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E5%9B%9E%E9%A1%BE%E4%B9%8B%E5%89%8D%E7%9A%84%E7%A8%8B%E5%BA%8F\" title=\"回顾之前的程序\"\u003e回顾之前的程序\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#%E5%85%B6%E5%AE%83\" title=\"其它\"\u003e其它\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%85%88%E7%9C%8B%E4%BB%A3%E7%A0%81\"\u003e\u003c/span\u003e先看代码\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e这个代码平淡无奇，就是从一个数组中找到一个数，O(n)的算法，找不到就返回 null。\u003c/p\u003e\n\u003cp\u003e下面是正常的 old-school 的方式。不用多说。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003e//正常的版本\nfunction find (x, y) {\n  for ( let i = 0; i \u0026lt; x.length; i++ ) {\n    if ( x[i] == y ) return i;\n  }\n  return null;\n}\n\nlet arr = [0,1,2,3,4,5]\nconsole.log(find(arr, 2))\nconsole.log(find(arr, 8))\u003c/pre\u003e\n\u003cp\u003e结果到了函数式成了下面这个样子（好像上面的那些代码在下面若影若现，不过又有点不太一样，为了消掉if语言，让其看上去更像一个表达式，动用了 ? 号表达式）：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003e//函数式的版本\nconst find = ( f =\u0026gt; f(f) ) ( f =\u0026gt;\n  (next =\u0026gt; (x, y, i = 0) =\u0026gt;\n    ( i \u0026gt;= x.length) ?  null :\n      ( x[i] == y ) ? i :\n        next(x, y, i+1))((...args) =\u0026gt;\n          (f(f))(...args)))\n\nlet arr = [0,1,2,3,4,5]\nconsole.log(find(arr, 2))\nconsole.log(find(arr, 8))\u003c/pre\u003e\n\u003cp\u003e为了讲清这个代码，需要先补充一些知识。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-17524\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Javascript%E7%9A%84%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\"\u003e\u003c/span\u003eJavascript的箭头函数\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e首先先简单说明一下，ECMAScript2015 引入的箭头表达式。箭头函数其实都是匿名函数，其基本语法如下：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003e(param1, param2, …, paramN) =\u0026gt; { statements } \n(param1, param2, …, paramN) =\u0026gt; expression\n     // 等于 :  =\u0026gt; { return expression; } \n\n// 只有一个参数时,括号才可以不加:\n(singleParam) =\u0026gt; { statements }\nsingleParam =\u0026gt; { statements }\n\n//如果没有参数,就一定要加括号:\n() =\u0026gt; { statements }\u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e下面是一些示例：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003evar simple = a =\u0026gt; a \u0026gt; 15 ? 15 : a; \nsimple(16); // 15\nsimple(10); // 10\n\nlet max = (a, b) =\u0026gt; a \u0026gt; b ? a : b;\n\n// Easy array filtering, mapping, ...\n\nvar arr = [5, 6, 13, 0, 1, 18, 23];\nvar sum = arr.reduce((a, b) =\u0026gt; a + b);  // 66\nvar even = arr.filter(v =\u0026gt; v % 2 == 0); // [6, 0, 18]\nvar double = arr.map(v =\u0026gt; v * 2);       // [10, 12, 26, 0, 2, 36, 46]\u003c/pre\u003e\n\u003cp\u003e看上去不复杂吧。不过，上面前两个 simple 和 max 的例子都把这箭头函数赋值给了一个变量，于是它就有了一个名字。有时候，某些函数在声明的时候就是调用的时候，尤其是函数式编程中，一个函数还对外返回函数的时候。比如下在这个例子：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003efunction MakePowerFn(power) {\n  return function PowerFn(base) {\n    return Math.pow(base, power);\n  } \n}\n\npower3 = MakePowerFn(3); //制造一个X的3次方的函数\npower2 = MakePowerFn(2); //制造一个X的2次方的函数\n\nconsole.log(power3(10)); //10的3次方 = 1000\nconsole.log(power2(10)); //10的2次方 = 100\u003c/pre\u003e\n\u003cp\u003e其实，在 MakePowerFn 函数里的那个 PowerFn 根本不需要命名，完全可以写成：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003efunction MakePowerFn(power) {\n  return function(base) {\n    return Math.pow(base, power);\n  } \n}\u003c/pre\u003e\n\u003cp\u003e如果用箭头函数，可以写成：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003eMakePowerFn = power  =\u0026gt; {\n  return base =\u0026gt; {\n    return Math.pow(base, power);\n  } \n}\u003c/pre\u003e\n\u003cp\u003e我们还可以写得更简洁（如果用表达式的话，就不需要 { 和 }， 以及 return 语句 ）：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003eMakePowerFn = power =\u0026gt; base =\u0026gt; Math.pow(base, power)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e我还是加上括号，和换行可能会更清楚一些：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003eMakePowerFn = (power) =\u0026gt; (\n  (base) =\u0026gt; (Math.pow(base, power))\n)\u003c/pre\u003e\n\u003cp\u003e好了，有了上面的知识，我们就可以进入一个更高级的话题——匿名函数的递归。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E7%9A%84%E9%80%92%E5%BD%92\"\u003e\u003c/span\u003e匿名函数的递归\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e函数式编程立志于用函数表达式消除有状态的函数，以及for/while循环，所以，在函数式编程的世界里是不应该用for/while循环的，而要改用递归（递归的性能很差，所以，一般是用尾递归来做优化，也就是把函数的计算的状态当成参数一层一层的往下传递，这样语言的编译器或解释器就不需要用函数栈来帮你保存函数的内部变量的状态了）。\u003c/p\u003e\n\u003cp\u003e好了，那么，匿名函数的递归该怎么做？\u003c/p\u003e\n\u003cp\u003e一般来说，递归的代码就是函数自己调用自己，比如我们求阶乘的代码：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003efunction fact(n){\n  return n==0 ? 1 :  n * fact(n-1);\n};\nresult = fact(5);\n\u003c/pre\u003e\n\u003cp\u003e在匿名函数下，这个递归该怎么写呢？对于匿名函数来说，\u003cb\u003e我们可以把匿名函数当成一个参数传给另外一个函数，因为函数的参数有名字，所以就可以调用自己了\u003c/b\u003e。 如下所示：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003efunction combinator(func) {\n  func(func);\n}\u003c/pre\u003e\n\u003cp\u003e这个是不是有点作弊的嫌疑？Anyway，我们再往下，把上面这个函数整成箭头函数式的匿名函数的样子。\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003e（func) =\u0026gt; (func(func)) \u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e现在你似乎就不像作弊了吧。把上面那个求阶乘的函数套进来是这个样子：\u003c/p\u003e\n\u003cp\u003e首先，先重构一下fact，把fact中自己调用自己的名字去掉：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003efunction fact(func, n) {\n  return n==0 ? 1 :  n * func(func, n-1);\n}\n\nfact(fact, 5); //输出120\n\u003c/pre\u003e\n\u003cp\u003e然后，我们再把上面这个版本变成箭头函数的匿名函数版：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003evar fact = (func, n) =\u0026gt; ( n==0 ? 1 :  n * func(func, n-1) )\nfact(fact, 5)\n\u003c/pre\u003e\n\u003cp\u003e这里，我们依然还要用一个fact来保存这个匿名函数，我们继续，我们要让匿名函数声明的时候，就自己调用自己。\u003c/p\u003e\n\u003cp\u003e也就是说，我们要把 \u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003e(func, n) =\u0026gt; ( n==0 ? 1 : n * func(func, n-1) )\u003c/code\u003e \u003c/p\u003e\n\u003cp\u003e这个函数当成调用参数，传给下面这个函数：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003e(func, x) =\u0026gt; func(func, x) \u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e最终我们得到下面的代码：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003e \n( (func, x) =\u0026gt; func(func, x) ) (  //函数体\n  (func, n) =\u0026gt; ( n==0 ? 1 :  n * func(func, n-1) ), //第一个调用参数\n  5 //第二调用参数\n); \u003c/pre\u003e\n\u003cp\u003e好像有点绕，anyway, 你看懂了吗？没事，我们继续。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%8A%A8%E7%94%A8%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E7%9A%84%E9%80%92%E5%BD%92\"\u003e\u003c/span\u003e动用高阶函数的递归\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e但是上面这个递归的匿名函数在自己调用自己，所以，代码中有hard code的实参。我们想实参去掉，如何去掉呢？我们可以参考前面说过的那个 MakePowerFn 的例子，不过这回是递归版的高阶函数了。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003eHighOrderFact = function(func){\n  return function(n){\n    return n==0 ? 1 : n * func(func)(n-1);\n  };\n};\u003c/pre\u003e\n\u003cp\u003e我们可以看，上面的代码简单说来就是，\u003cb\u003e需要一个函数做参数，然后返回这个函数的递归版本\u003c/b\u003e。那么，我们怎么调用呢？\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003efact = HighOrderFact(HighOrderFact);\nfact(5); \u003c/pre\u003e\n\u003cp\u003e连起来写就是：\u003cbr/\u003e\n\u003ccode data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003eHighOrderFact ( HighOrderFact ) ( 5 )\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e但是，这样让用户来调用很不爽，所以，以我们一个函数把 \u003cb\u003e HighOrderFact ( HighOrderFact ) \u003c/b\u003e 给代理一下：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003efact = function ( hifunc ) {\n  return hifunc ( hifunc );\n} (\n  //调用参数是一个函数\n  function (func) { \n    return function(n){\n      return n==0 ? 1 : n * func(func)(n-1);\n    };\n  }\n);\n\nfact(5); //于是我们就可以直接使用了\u003c/pre\u003e\n\u003cp\u003e用箭头函数重构一下，是不是简洁了一些？\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003efact = (highfunc =\u0026gt; highfunc ( highfunc ) ) (\n  func =\u0026gt; n =\u0026gt;  n==0 ? 1 : n * func(func)(n-1)\n);\u003c/pre\u003e\n\u003cp\u003e上面就是我们最终版的阶乘的函数式代码。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%9B%9E%E9%A1%BE%E4%B9%8B%E5%89%8D%E7%9A%84%E7%A8%8B%E5%BA%8F\"\u003e\u003c/span\u003e回顾之前的程序\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e我们再来看那个查找数组的正常程序：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003e//正常的版本\nfunction find (x, y) {\n  for ( let i = 0; i \u0026lt; x.length; i++ ) {\n    if ( x[i] == y ) return i;\n  }\n  return null;\n}\u003c/pre\u003e\n\u003cp\u003e先把for干掉，搞成递归版本：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003efunction find (x, y, i=0) {\n  if ( i \u0026gt;= x.length ) return null;\n  if ( x[i] == y ) return i;\n  return find(x, y, i+1);\n}\u003c/pre\u003e\n\u003cp\u003e然后，写出带实参的匿名函数的版本（注：其中的if代码被重构成了 ？号表达式）：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003e( (func, x, y, i) =\u0026gt; func(func, x, y, i) ) (  //函数体\n  (func, x, y, i=0) =\u0026gt; (\n      i \u0026gt;= x.length ?  null :\n         x[i] == y  ?  i : func (func, x, y, i+1)\n  ), //第一个调用参数\n  arr, //第二调用参数\n  2 //第三调用参数\n)\u003c/pre\u003e\n\u003cp\u003e最后，引入高阶函数，去除实参：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003econst find = ( highfunc =\u0026gt; highfunc( highfunc ) ) (\n   func =\u0026gt; (x, y, i = 0) =\u0026gt; (\n     i \u0026gt;= x.length ?  null :\n           x[i] == y  ?  i : func (func) (x, y, i+1)\n   )\n);\u003c/pre\u003e\n\u003cp\u003e注：函数式编程装逼时一定要用const字符，这表示我写的函数里的状态是 immutable 的，天生骄傲！\u003c/p\u003e\n\u003cp\u003e再注：我写的这个比原来版的那个简单了很多，原来版本的那个又在函数中套了一套 next， 而且还动用了不定参数，当然，如果你想装逼装到天上的，理论上来说，你可以套N层，呵呵。\u003c/p\u003e\n\u003cp\u003e\u003cb\u003e现在，你可以体会到，如此逼装的是怎么来的了吧？\u003c/b\u003e。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%85%B6%E5%AE%83\"\u003e\u003c/span\u003e其它\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e你还别说这就是装逼，简单来说，我们可以使用数学的方式来完成对复杂问题的描述，那怕是递归。其实，这并不是新鲜的东西，这是Alonzo Church 和 Haskell Curry 上世纪30年代提出来的东西，这个就是 Y Combinator 的玩法，关于这个东西，你可以看看下面两篇文章：\u003c/p\u003e\n\u003cp\u003e《\u003ca href=\"http://mvanier.livejournal.com/2897.html\" target=\"_blank\"\u003eThe Y Combinator (Slight Return)\u003c/a\u003e》，\u003c/p\u003e\n\u003cp\u003e《\u003ca href=\"https://en.wikipedia.org/wiki/Fixed-point_combinator\" target=\"_blank\"\u003eWikipedia: Fixed-point combinator\u003c/a\u003e》\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/10822.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/12/yoda-lambda-150x150.png\" alt=\"函数式编程\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/10822.html\" class=\"wp_rp_title\"\u003e函数式编程\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21164.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.map_.reduce-150x150.png\" alt=\"Go编程模式：Map-Reduce\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21164.html\" class=\"wp_rp_title\"\u003eGo编程模式：Map-Reduce\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21146.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.options-150x150.png\" alt=\"Go 编程模式：Functional Options\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21146.html\" class=\"wp_rp_title\"\u003eGo 编程模式：Functional Options\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17929.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/06/go-hardhat-150x150.png\" alt=\"Go编程模式：修饰器\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17929.html\" class=\"wp_rp_title\"\u003eGo编程模式：修饰器\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17634.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/01/pretty-code-150x150.gif\" alt=\"Chrome开发者工具的小技巧\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17634.html\" class=\"wp_rp_title\"\u003eChrome开发者工具的小技巧\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-17524\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"c865b9d7fa\"\u003e\u003cimg id=\"rating_17524_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17524, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b451009318de108119a15229-=\"\"/\u003e\u003cimg id=\"rating_17524_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17524, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b451009318de108119a15229-=\"\"/\u003e\u003cimg id=\"rating_17524_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17524, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b451009318de108119a15229-=\"\"/\u003e\u003cimg id=\"rating_17524_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17524, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b451009318de108119a15229-=\"\"/\u003e\u003cimg id=\"rating_17524_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17524, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b451009318de108119a15229-=\"\"/\u003e (\u003cstrong\u003e43\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.02\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_17524_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"如何读懂并写出装逼的函数式代码\"/\u003e\u003cmeta itemprop=\"headline\" content=\"如何读懂并写出装逼的函数式代码\"/\u003e\u003cmeta itemprop=\"description\" content=\"今天在微博上看到了 有人分享了下面的这段函数式代码，我把代码贴到下面，不过我对原来的代码略有改动，对于函数式的版本，咋一看，的确令人非常费解，仔细看一下，你可能就晕掉了，似乎完全就是天书，看上去非常装逼，哈哈。不过，我感觉解析那段函数式的代码可能会一个比较有趣过程，而且，我以前写过一篇《函数式编程》的入门式的文章，正好可以用这个例子，再升华一下原来的那篇文章，顺便可以向大家更好的介绍很多基础知识，...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2016-10-23T17:56:29+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2016-10-23T21:58:27+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/17524.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/17524.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.02\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"43\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-17524-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2016-10-23T17:56:29+08:00",
  "Author": "陈皓"
}