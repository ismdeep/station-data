{
  "Source": "coolshell.cn",
  "Title": "语言的数据亲和力",
  "Link": "https://coolshell.cn/articles/4905.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"81ebe270df45326e30323067-text/javascript\"\u003e\u003c/script\u003e\u003cstrong\u003e[ 感谢 \u003ca href=\"http://www.cnblogs.com/weidagang2046/\" target=\"_blank\"\u003eTodd 同学\u003c/a\u003e投递本文 ]\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e目前，程序设计语言似乎进入了一个蓬勃发展的时期，Javascript、Perl、Python、Ruby、Groovy等一批较新的语言正越来越多地被熟悉和使用，而C++、C#、Java等主流语言也在不断地融入函数式和动态性特征。程序员的百宝箱中可供选择的宝贝是越来多了，而社区中关于语言间的比较和争论也更为热烈，我们常常见到关于“面向过程和面向对象的比较”、“动态语言和静态语言的比较”、“命令式和函数式范式的比较”等比较。我注意到这类讨论的关注点多集中于设计相关话题，如“动态语言的Duck typing多态和静态语言的继承多态的比较”，“Prototype based和Class based的比较”等。但我认为还有一个十分重要的方面值得关注，这就是数据处理。\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e数据处理之所以重要是因为不论是本地信息存储还是系统间信息交换都需要建立在一定的数据格式基础上。另外，不管语言属于那种范式，设计上采用什么模式，在微观层次上程序很大一部分工作都是在做数据处理。所以，从数据处理角度比较和理解语言间的差异有重要的现实意义。虽然数据通常是平台和语言无关的，但不同的语言在处理某种格式的数据时会表现出不同的难度，甚至某些数据格式只能采用特定的语言才能实现，这就是数据亲和力的不同。\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e语言的数据亲和力(Data Affinity)指的是语言的数据模型与某种数据格式之间的匹配程度。语言对某种数据格式亲和力越强，则操作某类数据越容易。\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E8%8A%82%E5%9D%97%E6%A0%BC%E5%BC%8F\" title=\"二进制字节块格式\"\u003e二进制字节块格式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F\" title=\"文本格式 \"\u003e文本格式 \u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E7%BB%93%E6%9E%84%E5%8C%96%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F\" title=\"结构化文本格式\"\u003e结构化文本格式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E6%80%BB%E7%BB%93\" title=\"总结\"\u003e总结\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E8%8A%82%E5%9D%97%E6%A0%BC%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e二进制字节块格式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e在偏底层的操作系统、嵌入式和通信系统中，二进制的字节块是最常见的一种数据格式。二进制数据布局紧凑和接近机器的特点使得它常常作为系统间通信或系统文件的数据格式，但一般高级语言都不方便直接和0101打交道，而是基于记录、结构体和类等结构化表示操作数据，这就存在着在底层的二进制字节块和高层的结构化数据直接的转换问题。\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e\u003cspan id=\"more-4905\"\u003e\u003c/span\u003e\u003cbr/\u003e\n\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003eC语言作为最主要的系统语言具有很高的字节块数据亲和力。这不仅因为C语言具有指针可以直接访问内存以外，还因为C的结构体(struct)可以和字节块建立起直接的映射关系。例如，在基于Socket连接的分布式系统中服务器端和客户端通过二进制的字节数据进行通信，通信双方只要事先定义共用的结构体，发送方先创建相应的结构体变量并填充字段，然后把变量对应的内存块copy到Socket，接收方从Socket读取字节块，然后把字节块强制类型转换为相应的结构体指针即可读取个字段信息。整个过程中通信的双方都没有复杂的信息编码和解码的过程。示例代码如下：\u003c/span\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estruct t_data {\n    int version;\n    char type[10];\n    float value;\n};\n\n//发送方\nstruct t_data data;\ndata.version = 1;\nstrcpy(data.type,  “degree”);\ndata.value = 189.0;\nsend(socket,  \u0026amp;data,  sizeof(data));\n\n//接收方\nstruct t_data data;\nread(socket,  \u0026amp;data,  sizeof(data));\nprintf(“%d, %s, %f”, data.version,  data.type, data.value);\u003c/pre\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e上面的方法在实际应用中还需要注意内存对齐问题和大小端问题。内存对齐问题可以通过编译器预处理命令来进行控制，保证内存中struct结构与传输的字节块具有相同的对齐方式；大小端问题需要通信的双方采用同样的大小端方式，否则就需要进行转换。\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003eC++可以完全兼容C的结构体，但C++的类(包括class和struct)中如果定义了虚函数，则会丧失结构的字节块数据亲和力，这是C++编程时需要权衡的一个因素。而除了C/C++，其他语言中则难以见到字节块数据亲和力，其原因在于C/C++允许控制结构体/对象的内存布局，并允许对指针进行非类型安全的强制类型转换，这都是在Java，C#等语言中不允许的。所以，在Java、C#中进行字节块的编码解码就只能按照协议一个字段一个字段地按偏移量和长度进行解析。C/C++的指针以及结构体和内存的直接映射带来了对字节块数据的亲和力，但同时也留下了内存访问和类型安全的隐患；而Java、C#在拥有引用安全和类型安全的同时也失去了对字节块数据的亲和力。\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F\"\u003e\u003c/span\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e\u003cstrong\u003e文本格式\u003c/strong\u003e \u003c/span\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e文本格式是另一种十分常见的数据格式。《Unix编程艺术》中是这样描述文本格式的：”Text streams are a valuable universal format because they’re easy for human beings to read, write, and edit without specialized tools ”。基于文本流的管道处理是一种备受赞誉的Unix风格。Shell可以通过管道把各种功能单一的命令串联起来，让文本流在管道上流动，因而Shell语言具有很好的文本数据亲和力。许多文本数据处理任务Bash都可以一行搞定，这就是Hacker们酷爱的One Liner风格。\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e下面我们来看两个用Bash进行文本处理的例子：\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e1. 统计当前目录下的gz文件数目：\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003els –l *.gz | wc –l\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e2. 在Web服务器日子service.log中统计2011年6月26和27两天中每天中各页面的PV\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003ecat service.log | grep ^2011-06-2[6-7] | cut –d ‘ ‘ –f 1, 3 | sort | uniq –c\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003eservice.log:\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e2011-06-25 13:00:55 /music/c.htm Safari\u003cbr/\u003e\n…\u003cbr/\u003e\n2011-06-26 08:01:23 /main.htm IE\u003cbr/\u003e\n2011-06-26 08:03:01 /sports/b.htm Chrome\u003cbr/\u003e\n…\u003cbr/\u003e\n2011-06-27 11:41:06 /main.htm IE\u003cbr/\u003e\n2011-06-27 11:52:41 /news/a.htm Firefox\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e输出:\u003c/span\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e210 2011-06-26 /main.htm\u003cbr/\u003e\n231 2011-06-26 /news/a.htm\u003cbr/\u003e\n155 2011-06-26 /sports/b.htm\u003cbr/\u003e\n288 2011-06-27 /main.htm\u003cbr/\u003e\n292 2011-06-27 /news/a.htm\u003cbr/\u003e\n161 2011-06-27 /sports/b.htm\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e上面的两个简单文本数据处理任务如果是在C或C++下实现则要麻烦得多，代码量至少是十几行或者数十行，加上编译调试，整个开发效率可能比Shell低一个数量级。除了Shell外，Perl也是以强大的文本数据处理而闻名的。我们来看一个Perl正则表达式的例子：\u003c/span\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003ewhile (\u0026lt;STDIN\u0026gt;) {\n    if (/hello\\s(\\w+)/i)  {\n        print “say hello to $1“\n     }\n     elsif (/goodbye\\s(\\w+)/i)  {\n         print “say goodbye to  $1”\n    }\n}\u003c/pre\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e输入：\u003c/span\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003eHeLLo world\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003eGoodbye bug\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e输出：\u003c/span\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003esay hello to world\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003esay goodbye to bug\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e上面的例子中我们看到Perl直接进行字符串匹配并进行数据提取的强大威力。Perl基于正则表达式的字符串处理不仅比C/C++等系统语言更强大，甚至比Python这样的动态语言也更强大和更方便，这是因为正则表达式是Perl语言的“一等公民”，这就使得Perl比其他以库的方式支持正则表达式功能的语言具有更好的文本数据亲和力。后来的Ruby也学习Perl把直接在语言上支持正则表达式。\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%BB%93%E6%9E%84%E5%8C%96%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e结构化文本格式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003eXML是最近十几年来流行起来的一种通用（半）结构化的文本数据交换格式。XML除具有一般文本格式的优点外，还具有表达复杂的层次信息的优势，所以它至诞生以来就被大量用于配置文件和各种Web Service中。现代程序设计基本都少不了了XML打交道，不过在C++、Java和C#集中静态类型语言中处理XML却并不是一件十分轻松的事情。我们先来看一个Java解析和构建下面这个XML的例子：\u003c/span\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"xml\" class=\"EnlighterJSRAW\"\u003e\u0026lt;langs type=\u0026#34;current\u0026#34;\u0026gt;\n  \u0026lt;language\u0026gt;Java\u0026lt;/language\u0026gt;\n  \u0026lt;language\u0026gt;Groovy\u0026lt;/language\u0026gt;\n  \u0026lt;language\u0026gt;JavaScript\u0026lt;/language\u0026gt;\n\u0026lt;/langs\u0026gt;\u003c/pre\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cpre data-enlighter-language=\"java\" class=\"EnlighterJSRAW\"\u003e//Java解析XML\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\ntry {\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    Document doc = db.parse(\u0026#34;src/languages.xml\u0026#34;);\n    Element langs = doc.getDocumentElement();\n    System.out.println(\u0026#34;type = \u0026#34; + langs.getAttribute(\u0026#34;type\u0026#34;));\n    NodeList list = langs.getElementsByTagName(\u0026#34;language\u0026#34;);\n    for(int i = 0 ; i \u0026amp;lt; list.getLength();i++) {\n        Element language = (Element) list.item(i);\n        System.out.println(language.getTextContent());\n    }\n}catch(Exception e) {\n    e.printStackTrace();\n}\n\n//Java创建XML\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\ntry {\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    Document doc = db.newDocument();\n    Element langs = doc.createElement(\u0026#34;langs\u0026#34;);\n    langs.setAttribute(\u0026#34;type\u0026#34;, \u0026#34;current\u0026#34;);\n    doc.appendChild(langs);\n\n    Element language1 = doc.createElement(\u0026#34;language\u0026#34;);\n    Text text1 = doc.createTextNode(\u0026#34;Java\u0026#34;);\n    language1.appendChild(text1);\n    langs.appendChild(language1);\n\n    Element language2 = doc.createElement(\u0026#34;language\u0026#34;);\n    Text text2 = doc.createTextNode(\u0026#34;Groovy\u0026#34;);\n    language2.appendChild(text2);\n    langs.appendChild(language2);\n    Element language3 = doc.createElement(\u0026#34;language\u0026#34;);\n    Text text3 = doc.createTextNode(\u0026#34;JavaScript\u0026#34;);\n    language3.appendChild(text3);\n    langs.appendChild(language3);\n} catch (Exception e) {\n    e.printStackTrace();\n}\u003c/pre\u003e\n\u003cp\u003e\u003cspan style=\"color: #800040; font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e\u003cbr/\u003e\n\u003c/span\u003e 为了解析和创建小小的一段XML代码需要编写如此冗长的Java代码，而实现同样的功能动态语言Groovy则十分简洁：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"groovy\" class=\"EnlighterJSRAW\"\u003e//Groovy解析XML\ndef langs = new XmlParser().parse(\u0026#34;languages.xml\u0026#34;)\nprintln \u0026#34;type = ${langs.attribute(\u0026#34;type\u0026#34;)}\u0026#34;\nlangs.language.each{\n    println it.text()\n}\n//Groovy创建XML\ndef xml = new groovy.xml.MarkupBuilder()\nxml.langs(type:\u0026#34;current\u0026#34;){\n   language(\u0026#34;Java\u0026#34;)\n   language(\u0026#34;Groovy\u0026#34;)\n   language(\u0026#34;JavaScript\u0026#34;)\n}\u003c/pre\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e上面Groovy操作XML的代码简洁而富有表达力，代码与XML几乎是一一对应的，如同直接在XML上进行操作的DSL一样，而相应的Java代码则看不到XML的影子。这说明Groovy具有很高的XML数据的亲和力。为什么Java和Groovy在XML亲和力方面有这样的差异呢？原因在于Java要求所有的方法和属性都必须先定义再调用，严格的静态类型检查使得Java只能把XML元素作为“二等公民”来表达；而Groovy则没有静态类型检查的限制，可以自由地使用方法和属性来表达XML结构。上面用Groovy创建XML的例子中，groovy.xml.MarkupBuilder类中实际上并没有langs, language这些方法，但会在调用的时候自动创建相应的XML结构。\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e除了XML外，JSON是另一种通用的半结构化的纯文本数据交换格式，它常被视为轻量级的XML。JSON的本意是Javascript的对象表示(Javascript Object Notation)，它属于Javascript的语法子集，所以Javascript对JSON有原生的支持。下面就是一个在Javascript中创建JSON对象的例子：\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e[javascript]var json = { “langs” :\u003cbr/\u003e\n{\u003cbr/\u003e\n\u0026#34;type” : \u0026#34;current”,\u003cbr/\u003e\n\u0026#34;language” : [\u0026#34;Java”, \u0026#34;Groovy”, \u0026#34;Javascript”]\u003cbr/\u003e\n}\u003cbr/\u003e\n}[/javascript]\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e许多Javascript程序都会通过AJAX都从服务器获取JSON字符串，然后把字符串解析为JSON对象。由于Javascript对JSON的原生支持，所以，在Javascript中解析JSON字符串可以采用通用的eval方式，如：\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e[javascript]var json = eval(“(\u0026#34; + jsonStr + “)\u0026#34;);\u003c/p\u003e\n\u003cp\u003ealert(json.langs.type);[/javascript]\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e甚至可以：\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e[javascript]eval(“var json = ” + jsonStr);\u003c/p\u003e\n\u003cp\u003ealert(json.langs.type);[/javascript]\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e不过eval的通用性带来了一定的安全隐患，所以一般只建议对受信任的数据源采用eval方式解析JSON，对于不受信任的数据源可以采用专门的JSON解析库。无论如何Javascript对JSON的原生支持都使得Javascript创建和解析JSON数据十分的简单，也就是说Javascript具有很高的JSON数据亲和力。另外，Groovy 1.8也加入了对JSON的原生支持，操作JSON与Javascript一样方便。\u003c/span\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%80%BB%E7%BB%93\"\u003e\u003c/span\u003e\u003cstrong\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e总结\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style=\"font-family: \u0026#39;Lucida Console\u0026#39;;\"\u003e到这里为止本文篇幅已经很长了，只能列举二进制字节块格式、文本格式和结构化文本格式3种典型的数据格式。实际上，数据亲和力的话题还有很多值得探讨的，比如C#的Linq。本文的探讨算是抛砖引玉，目的在于引起大家注意在比较语言的时候不要忽略了数据亲和力这样一个重要方面。本文的错误或不足，敬请指正，谢谢！\u003c/span\u003e\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/03/rust-social-wide-150x150.jpg\" alt=\"Rust语言的编程范式\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_title\"\u003eRust语言的编程范式\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8088.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/7.jpg\" alt=\"对技术的态度\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8088.html\" class=\"wp_rp_title\"\u003e对技术的态度\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/7992.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/08/cpp_small-150x150.jpg\" alt=\"C++的坑真的多吗？\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/7992.html\" class=\"wp_rp_title\"\u003eC++的坑真的多吗？\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/5576.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2011/10/00.QuickBasic_PDS_IDE-150x150.png\" alt=\"那些曾伴我走过编程之路的软件\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/5576.html\" class=\"wp_rp_title\"\u003e那些曾伴我走过编程之路的软件\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/4990.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2011/07/programmer-150x150.png\" alt=\"程序员技术练级攻略\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/4990.html\" class=\"wp_rp_title\"\u003e程序员技术练级攻略\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-4905\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"7d05e016e9\"\u003e\u003cimg id=\"rating_4905_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4905, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-81ebe270df45326e30323067-=\"\"/\u003e\u003cimg id=\"rating_4905_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4905, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-81ebe270df45326e30323067-=\"\"/\u003e\u003cimg id=\"rating_4905_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4905, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-81ebe270df45326e30323067-=\"\"/\u003e\u003cimg id=\"rating_4905_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4905, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-81ebe270df45326e30323067-=\"\"/\u003e\u003cimg id=\"rating_4905_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4905, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-81ebe270df45326e30323067-=\"\"/\u003e (\u003cstrong\u003e22\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.45\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_4905_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"语言的数据亲和力\"/\u003e\u003cmeta itemprop=\"headline\" content=\"语言的数据亲和力\"/\u003e\u003cmeta itemprop=\"description\" content=\"[ 感谢 Todd 同学投递本文 ]\n\n目前，程序设计语言似乎进入了一个蓬勃发展的时期，Javascript、Perl、Python、Ruby、Groovy等一批较新的语言正越来越多地被熟悉和使用，而C++、C#、Java等主流语言也在不断地融入函数式和动态性特征。程序员的百宝箱中可供选择的宝贝是越来多了，而社区中关于语言间的比较和争论也更为热烈，我们常常见到关于“面向过程和面向对象的比较”、...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2011-06-29T08:10:44+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2011-08-15T16:24:10+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/4905.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"Todd\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/4905.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.45\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"22\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-4905-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2011-06-29T08:10:44+08:00",
  "Author": "Todd"
}