{
  "Source": "coolshell.cn",
  "Title": "Linux PID 1 和 Systemd",
  "Link": "https://coolshell.cn/articles/17998.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"8ed34d7fd69aeda93916741c-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright size-full\" src=\"https://coolshell.cn/wp-content/uploads/2017/07/systemd.jpeg\" alt=\"\" width=\"275\" height=\"183\"/\u003e要说清 Systemd，得先从Linux操作系统的启动说起。Linux 操作系统的启动首先从 BIOS 开始，然后由 Boot Loader 载入内核，并初始化内核。内核初始化的最后一步就是启动 init 进程。这个进程是系统的第一个进程，PID 为 1，又叫超级进程，也叫根进程。它负责产生其他所有用户进程。所有的进程都会被挂在这个进程下，如果这个进程退出了，那么所有的进程都被 kill 。如果一个子进程的父进程退了，那么这个子进程会被挂到 PID 1 下面。（注：PID 0 是内核的一部分，主要用于内进换页，参看：\u003ca href=\"https://en.wikipedia.org/wiki/Process_identifier\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eProcess identifier\u003c/a\u003e）\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#SysV_Init\" title=\"SysV Init\"\u003eSysV Init\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#UpStart\" title=\"UpStart\"\u003eUpStart\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#Systemd\" title=\"Systemd\"\u003eSystemd\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#Systemd_%E4%BA%89%E8%AE%BA%E5%92%8C%E5%85%AB%E5%8D%A6\" title=\"Systemd 争论和八卦\"\u003eSystemd 争论和八卦\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E5%85%B6%E5%AE%83\" title=\"其它\"\u003e其它\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#%E5%BB%B6%E4%BC%B8%E9%98%85%E8%AF%BB\" title=\"延伸阅读\"\u003e延伸阅读\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"SysV_Init\"\u003e\u003c/span\u003eSysV Init\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003ePID 1 这个进程非常特殊，其主要就任务是把整个操作系统带入可操作的状态。比如：启动 UI – Shell 以便进行人机交互，或者进入 X 图形窗口。传统上，PID 1 和传统的 Unix System V 相兼容的，所以也叫 \u003ccode\u003esysvinit\u003c/code\u003e，这是使用得最悠久的 init 实现。Unix System V 于1983年 release。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003esysvint\u003c/code\u003e 下，有好几个运行模式，又叫 \u003ccode\u003erunlevel\u003c/code\u003e。比如：常见的 3 级别指定启动到多用户的字符命令行界面，5 级别指定启起到图形界面，0 表示关机，6 表示重启。其配置在 \u003ccode\u003e/etc/inittab\u003c/code\u003e 文件中。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-17998\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e与此配套的还有 \u003ccode\u003e/etc/init.d/\u003c/code\u003e 和 \u003ccode\u003e/etc/rc[X].d\u003c/code\u003e，前者存放各种进程的启停脚本（需要按照规范支持 \u003ccode\u003estart\u003c/code\u003e，\u003ccode\u003estop\u003c/code\u003e子命令），后者的 X 表示不同的 runlevel 下相应的后台进程服务，如：\u003ccode\u003e/etc/rc3.d\u003c/code\u003e 是 runlevel=3 的。 里面的文件主要是 link 到  \u003ccode\u003e/etc/init.d/\u003c/code\u003e 里的启停脚本。其中也有一定的命名规范：S 或 K 打头的，后面跟一个数字，然后再跟一个自定义的名字，如：\u003ccode\u003eS01rsyslog\u003c/code\u003e，\u003ccode\u003eS02ssh\u003c/code\u003e。S 表示启动，K表示停止，数字表示执行的顺序。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"UpStart\"\u003e\u003c/span\u003eUpStart\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003eUnix 和 Linux 在 \u003ccode\u003esysvint\u003c/code\u003e 运作多年后，大约到了2006年的时候，Linux内核进入2.6时代，Linux有了很多更新。并且，Linux开始进入桌面系统，而桌面系统和服务器系统不一样的是，桌面系统面临频繁重启，而且，用户会非常频繁的使用硬件的热插拔技术。于是，这些新的场景，让 \u003ccode\u003esysvint\u003c/code\u003e 受到了很多挑战。\u003c/p\u003e\n\u003cp\u003e比如，打印机需要CUPS等服务进程，但是如果用户没有打机印，启动这个服务完全是一种浪费，而如果不启动，如果要用打印机了，就无法使用，因为\u003ccode\u003esysvint\u003c/code\u003e 没有自动检测的机制，它只能一次性启动所有的服务。另外，还有网络盘挂载的问题。在 \u003ccode\u003e/etc/fstab\u003c/code\u003e 中，负责硬盘挂载，有时候还有网络硬盘（NFS 或 iSCSI）在其中，但是在桌面机上，有很可能开机的时候是没有网络的， 于是网络硬盘都不可以访问，也无法挂载，这会极大的影响启动速度。\u003ccode\u003esysvinit\u003c/code\u003e 采用 \u003ccode\u003enetdev\u003c/code\u003e 的方式来解决这个问题，也就是说，需要用户自己在 \u003ccode\u003e/etc/fstab\u003c/code\u003e 中给相应的硬盘配置上 \u003ccode\u003enetdev\u003c/code\u003e 属性，于是 \u003ccode\u003esysvint\u003c/code\u003e 启动时不会挂载它，只有在网络可用后，由专门的 \u003ccode\u003enetfs\u003c/code\u003e 服务进程来挂载。这种管理方式比较难以管理，也很容易让人掉坑。\u003c/p\u003e\n\u003cp\u003e所以，Ubuntu 开发人员在评估了当时几个可选的 init 系统后，决定重新设计这个系统，于是，这就是我们后面看到的 \u003ccode\u003eupstart\u003c/code\u003e 。 \u003ccode\u003eupstart\u003c/code\u003e 基于事件驱动的机制，把之前的完全串行的同步启动服务的方式改成了由事件驱动的异步的方式。比如：如果有U盘插入，\u003ccode\u003eudev\u003c/code\u003e 得到通知，\u003ccode\u003eupstart\u003c/code\u003e 感知到这个事件后触发相应的服务程序，比如挂载文件系统等等。因为使用一个事件驱动的玩法，所以，启动操作系统时，很多不必要的服务可以不用启动，而是等待通知，lazy 启动。而且事件驱动的好处是，可以并行启动服务，他们之间的依赖关系，由相应的事件通知完成。\u003c/p\u003e\n\u003cp\u003eupstart 有着很不错的设计，其中最重要的两个概念是 Job 和 Event。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eJob\u003c/strong\u003e 有一般的Job，也有service的Job，并且，\u003ccode\u003eupstart\u003c/code\u003e 管理了整个 Job 的生命周期，比如：Waiting, Starting, pre-Start, Spawned, post-Start, Running, pre-Stop, Stopping, Killed, post-Stop等等，并维护着这个生命周期的状态机。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEvent\u003c/strong\u003e 分成三类，\u003ccode\u003esignal\u003c/code\u003e, \u003ccode\u003emethod\u003c/code\u003e 和 \u003ccode\u003ehooks\u003c/code\u003e。\u003ccode\u003esignal\u003c/code\u003e 就是异步消息，\u003ccode\u003emethod\u003c/code\u003e 是同步阻塞的。\u003ccode\u003ehooks\u003c/code\u003e 也是同步的，但介于前面两者之间，发出hook事件的进程必须等到事件完成，但不检查是否成功。\u003c/p\u003e\n\u003cp\u003e但是，\u003ccode\u003eupstart\u003c/code\u003e 的事件非常复杂，也非常纷乱，各种各样的事件（事件没有归好类）导致有点凌乱。不过因为整个事件驱动的设计比之前的 \u003ccode\u003esysvinit\u003c/code\u003e 来说好太多，所以，也深得欢迎。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Systemd\"\u003e\u003c/span\u003eSystemd\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e直到2010的有一天，一个在 RedHat工作的工程师 \u003ca title=\"Lennart Poettering\" href=\"https://en.wikipedia.org/wiki/Lennart_Poettering\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eLennart Poettering\u003c/a\u003e 和 \u003ca title=\"Kay Sievers\" href=\"https://en.wikipedia.org/wiki/Kay_Sievers\"\u003eKay Sievers\u003c/a\u003e ，开始引入了一个新的 \u003ccode\u003einit\u003c/code\u003e 系统—— \u003ccode\u003esystemd\u003c/code\u003e。这是一个非常非常有野心的项目，这个项目几乎改变了所有的东西，\u003ccode\u003esystemd\u003c/code\u003e 不但想取代已有的 init 系统，而且还想干更多的东西。\u003c/p\u003e\n\u003cp\u003eLennart 同意 \u003ccode\u003eupstart\u003c/code\u003e 干的不错，代码质量很好，基于事件的设计也很好。但是他觉得 \u003ccode\u003eupstart\u003c/code\u003e 也有问题，其中最大的问题还是不够快，虽然 \u003ccode\u003eupstart\u003c/code\u003e 用事件可以达到一定的启动并行度，但是，本质上来说，这些事件还是会让启动过程串行在一起。  如：\u003ccode\u003eNetworkManager\u003c/code\u003e 在等 \u003ccode\u003eD-Bus\u003c/code\u003e 的启动事件，而 \u003ccode\u003eD-Bus\u003c/code\u003e 在等 \u003ccode\u003esyslog\u003c/code\u003e 的启动事件。\u003c/p\u003e\n\u003cp\u003eLennart 认为，实现上来说，\u003ccode\u003eupstart\u003c/code\u003e 其实是在管理一个逻辑上的服务依赖树，但是这个服务依赖树在表现形式上比较简单，你只需要配置——“启动 B好了就启动A”或是“停止了A后就停止B”这样的规则。但是，Lennart 说，这种简单其实是有害的（this simplification is actually detrimental）。他认为，\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e从一个系统管理的角度出来，他一开始会设定好整个系统启动的服务依赖树，但是这个系统管理员要人肉的把这个本来就非常干净的服务依整树给翻译成计算机看的懂的 Event/Action 形式，而且 Event/Action 这种配置方式是运行时的，所以，你需要运行起来才知道是什么样的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003eEvent逻辑从头到脚到处都是，这个事件扩大了运维的复杂度，还不如之前的 \u003ccode\u003esysvint\u003c/code\u003e。 也就是说，当用户配置了 “启动 \u003ccode\u003eD-Bus\u003c/code\u003e 后请启动 \u003ccode\u003eNetworkManager\u003c/code\u003e”， 这个 \u003ccode\u003eupstart\u003c/code\u003e 可以干，但是反过来，如果，用户启动 \u003ccode\u003eNetworkManager\u003c/code\u003e，我们应该先去启动他的前置依赖 \u003ccode\u003eD-Bus\u003c/code\u003e，然而你还要配置相应的反向 Event。本来，我只需要配置一条依赖的，结果现在我要配置很多很多情况下的Event。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e最后，\u003ccode\u003eupstart\u003c/code\u003e 里的 Event 的并不标准，很混乱，没有良好的定义。比如：既有，进程启动，运行，停止的事件，也有USB设备插入、可用、拔出的事件，还有文件系统设备being mounted、 mounted 和 umounted 的事件，还有AC电源线连接和断开的事件。你会发现，这进程启停的、USB的、文件系统的、电源线的事件，看上去长得很像， 但是没有被标准化抽像出来掉，因为绝大多数的事件都是三元组：start, condition, stop 。这种概念设计模型并没有在 \u003ccode\u003eupstart\u003c/code\u003e 中出现。因为 \u003ccode\u003eupstart\u003c/code\u003e 被设计为单一的事件，而忽略了逻辑依赖。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e当然，如果 \u003ccode\u003esystemd\u003c/code\u003e 只是解决 \u003ccode\u003eupstart\u003c/code\u003e 的问题，他就改造 \u003ccode\u003eupstart\u003c/code\u003e 就好了，但是 Lennart 的野心不只是想干个这样的事，他想干的更多。\u003c/p\u003e\n\u003cp\u003e首先，\u003ccode\u003esystemd\u003c/code\u003e 清醒的认识到了 init 进程的首要目标是要让用户快速的进入可以操作OS的环境，所以，这个速度一定要快，越快越好，所以，\u003ccode\u003esystemd\u003c/code\u003e 的设计理念就是两条：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTo start \u003cb\u003eless\u003c/b\u003e.\u003c/li\u003e\n\u003cli\u003eAnd to start \u003cb\u003emore\u003c/b\u003e in \u003ci\u003eparallel\u003c/i\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e也就是说，按需启动，能不启动就不启动，如果要启动，能并行启动就并行启动，包括你们之间有依赖，我也并行启动。按需启动还好理解，那么，有依赖关系的并行启动，它是怎么做到的？这里，\u003ccode\u003esystemd\u003c/code\u003e 借鉴了 MacOS 的 \u003ccode\u003eLaunchd\u003c/code\u003e 的玩法（在Youtube上有一个分享——\u003ca href=\"https://www.youtube.com/watch?v=SjrtySM9Dns\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eLaunchd: One Program to Rule them All\u003c/a\u003e，在苹果的开源网站上也有相关的设计文档——\u003ca href=\"https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/Introduction.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eAbout Daemons and Services\u003c/a\u003e）\u003c/p\u003e\n\u003cp\u003e要解决这些依赖性，systemd 需要解决好三种底层依赖—— Socket， D-Bus ，文件系统。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSocket依赖\u003c/strong\u003e。如果服务C依赖于服务S的socket，那么就要先启动S，然后再启动C，因为如果C启动时找不到S的Socket，那么C就会失败。\u003ccode\u003esystemd\u003c/code\u003e 可以帮你在S还没有启动好的时候，建立一个socket，用来接收所有的C的请求和数据，并缓存之，一旦S全部启动完成，把systemd替换好的这个缓存的数据和Socket描述符替换过去。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eD-Bus依赖\u003c/strong\u003e。\u003ccode\u003eD-Bus\u003c/code\u003e 全称 Desktop Bus，是一个用来在进程间通信的服务。除了用于用户态进程和内核态进程通信，也用于用户态的进程之前。现在，很多的现在的服务进程都用 \u003ccode\u003eD-Bus\u003c/code\u003e 而不是Socket来通信。比如：\u003ccode\u003eNetworkManager\u003c/code\u003e 就是通过 \u003ccode\u003eD-Bus\u003c/code\u003e 和其它服务进程通讯的，也就是说，如果一个进程需要知道网络的状态，那么就必需要通过 \u003ccode\u003eD-Bus\u003c/code\u003e 通信。\u003ccode\u003eD-Bus\u003c/code\u003e 支持 “Bus Activation”的特性。也就是说，A要通过 \u003ccode\u003eD-Bus\u003c/code\u003e 服务和B通讯，但是B没有启动，那么 \u003ccode\u003eD-Bus\u003c/code\u003e 可以把B起来，在B启动的过程中，\u003ccode\u003eD-Bus\u003c/code\u003e 帮你缓存数据。\u003ccode\u003esystemd\u003c/code\u003e 可以帮你利用好这个特性来并行启动 A 和 B。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e文件系统依赖\u003c/strong\u003e。系统启动过程中，文件系统相关的活动是最耗时的，比如挂载文件系统，对文件系统进行磁盘检查（fsck），磁盘配额检查等都是非常耗时的操作。在等待这些工作完成的同时，系统处于空闲状态。那些想使用文件系统的服务似乎必须等待文件系统初始化完成才可以启动。\u003ccode\u003esystemd\u003c/code\u003e 参考了 \u003ccode\u003eautofs\u003c/code\u003e 的设计思路，使得依赖文件系统的服务和文件系统本身初始化两者可以并发工作。\u003ccode\u003eautofs\u003c/code\u003e 可以监测到某个文件系统挂载点真正被访问到的时候才触发挂载操作，这是通过内核 \u003ccode\u003eautomounter\u003c/code\u003e 模块的支持而实现的。比如一个 \u003ccode\u003eopen()\u003c/code\u003e 系统调用作用在某个文件系统上的时候，而这个文件系统尚未执行挂载，此时 \u003ccode\u003eopen()\u003c/code\u003e 调用被内核挂起等待，等到挂载完成后，控制权返回给 \u003ccode\u003eopen()\u003c/code\u003e 系统调用，并正常打开文件。这个过程和 \u003ccode\u003eautofs\u003c/code\u003e 是相似的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e下图来自 Lennart 的演讲里的一页PPT，展示了不同 init 系统的启动。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full\" src=\"https://coolshell.cn/wp-content/uploads/2017/07/boot.png\" alt=\"\" width=\"467\" height=\"308\"/\u003e\u003c/p\u003e\n\u003cp\u003e除此之外，systemd 还在启动时管理好了一些下面的事。\u003c/p\u003e\n\u003cp\u003e用C语言取代传统的脚本式的启动。前面说过，\u003ccode\u003esysvint\u003c/code\u003e 用 \u003ccode\u003e/etc/rcX.d\u003c/code\u003e 下的各种脚本启动。然而这些脚本中需要使用 \u003ccode\u003eawk\u003c/code\u003e, \u003ccode\u003esed\u003c/code\u003e, \u003ccode\u003egrep\u003c/code\u003e, \u003ccode\u003efind\u003c/code\u003e, \u003ccode\u003exargs\u003c/code\u003e 等等这些操作系统的命令，这些命令需要生成进程，生成进程的开销很大，关键是生成完这些进程后，这个进程就干了点屁大的事就退了。换句话说就是，我操作系统干了那么多事为你拉个进程起来，结果你就把个字串转成小写就退了，把我操作系统当什么了？\u003c/p\u003e\n\u003cp\u003e在正常的一个 \u003ccode\u003esysvinit\u003c/code\u003e 的脚本里，可能会有成百上千个这样的命令。所以，慢死。因此，\u003ccode\u003esystemd\u003c/code\u003e 全面用 C 语言全部取代了。一般来说，\u003ccode\u003esysvinit\u003c/code\u003e 下，操作系统启动完成后，用 \u003ccode\u003eecho $$\u003c/code\u003e 可以看到，pid 被分配到了上千的样子，而 \u003ccode\u003esystemd\u003c/code\u003e 的系统只是上百。\u003c/p\u003e\n\u003cp\u003e另外，systemd 是真正一个可以管住服务进程的——可以跟踪上服务进程所fork/exec出来的所有进程。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e我们知道， 传统 Unix/Linux 的 Daemon 服务进程的最佳实践基本上是这个样子的 （具体过程可参看这篇文章“\u003ca href=\"http://0pointer.de/public/systemd-man/daemon.html#SysV%20Daemons\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eSysV Daemon\u003c/a\u003e”）——\n\u003col\u003e\n\u003cli\u003e进程启动时，关闭所有的打开的文件描述符（除了标准描述符0,1,2），然后重置所有的信号处理。\u003c/li\u003e\n\u003cli\u003e调用 \u003ccode\u003efork()\u003c/code\u003e 创建子进程，在子进程中 \u003ccode\u003esetsid()\u003c/code\u003e，然后父进程退出（为了后台执行）\u003c/li\u003e\n\u003cli\u003e在子进程中，再调用一次 \u003ccode\u003efork()\u003c/code\u003e，创建孙子进程，确定没有交互终端。然后子进程退出。\u003c/li\u003e\n\u003cli\u003e在孙子进程中，把标准输入标准输出标准错误都连到 \u003ccode\u003e/dev/null\u003c/code\u003e 上，还要创建 pid 文件，日志文件，处理相关信号 ……\u003c/li\u003e\n\u003cli\u003e最后才是真正开始提供服务。\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在上面的这个过程中，服务进程除了两次 \u003ccode\u003efork\u003c/code\u003e 外还会 \u003ccode\u003efork\u003c/code\u003e 出很多很多的子进程（比如说一些Web服务进程，会根据用户的请求链接来 \u003ccode\u003efork\u003c/code\u003e 子进程），这个进程树是相当难以管理的，因为，一旦父进程退出来了，子进程就会被挂到 PID 1下，所以，基本上来说，你无法通过服务进程自已给定的一个pid文件来找到所有的相关进程（这个对开发者的要求太高了），所以，在传统的方式下用脚本启停服务是相当相当的 Buggy 的，因为无法做对所有的服务生出来的子子孙孙做到监控。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e为了解决这个问题，\u003ccode\u003eupstart\u003c/code\u003e 通过变态的 \u003ccode\u003estrace\u003c/code\u003e 来跟踪进程中的 \u003ccode\u003efork()\u003c/code\u003e 和 \u003ccode\u003eexec()\u003c/code\u003e 或 \u003ccode\u003eexit()\u003c/code\u003e 等相关的系统调用。这种方法相当笨拙。 \u003ccode\u003esystemd\u003c/code\u003e 使用了一个非常有意思的玩法来 tracking 服务进程生出来的所有进程，那就是用 \u003ccode\u003ecgroup\u003c/code\u003e （我在 \u003ca href=\"https://coolshell.cn/articles/17049.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eDocker 的基础技术“cgroup篇”\u003c/a\u003e中讲过这个东西）。cgroup主要是用来管理进程组资源配额的事，所以，无论服务如何启动新的子进程，所有的这些相关进程都会同属于一个 \u003ccode\u003ecgroup\u003c/code\u003e，所以，\u003ccode\u003esystemd\u003c/code\u003e 只需要简单的去遍历一下相应的 \u003ccode\u003ecgroup\u003c/code\u003e 的那个虚文件系统目录下的文件，就可以正确的找到所有的相关进程，并将他们一一停止。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e另外，\u003ccode\u003esystemd\u003c/code\u003e 简化了整个 daemon 开发的过程：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e不需要两次 \u003ccode\u003efork()\u003c/code\u003e，只需要实现服务本身的主逻辑就可以了。\u003c/li\u003e\n\u003cli\u003e不需要 \u003ccode\u003esetsid()\u003c/code\u003e，\u003ccode\u003esystemd\u003c/code\u003e 会帮你干\u003c/li\u003e\n\u003cli\u003e不需要维护 \u003ccode\u003epid文件\u003c/code\u003e，\u003ccode\u003esystemd\u003c/code\u003e 会帮处理。\u003c/li\u003e\n\u003cli\u003e不需要管理日志文件或是使用\u003ccode\u003esyslog\u003c/code\u003e，或是处理\u003ccode\u003eHUP\u003c/code\u003e的日志reload信号。把日志打到 \u003ccode\u003estderr\u003c/code\u003e 上，\u003ccode\u003esystemd\u003c/code\u003e 帮你管理。\u003c/li\u003e\n\u003cli\u003e处理 \u003ccode\u003eSIGTERM\u003c/code\u003e 信号，这个信号就是正确退出当前服务，不要做其他的事。\u003c/li\u003e\n\u003cli\u003e……\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e除此之外，\u003ccode\u003esystemd\u003c/code\u003e 还能——\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e自动检测启动的服务间有没有环形依赖。\u003c/li\u003e\n\u003cli\u003e内建 autofs 自动挂载管理功能。\u003c/li\u003e\n\u003cli\u003e日志服务。\u003ccode\u003esystemd\u003c/code\u003e 改造了传统的 syslog 的问题，采用二进制格式保存日志，日志索引更快。\u003c/li\u003e\n\u003cli\u003e快照和恢复。对当前的系统运行的服务集合做快照，并可以恢复。\u003c/li\u003e\n\u003cli\u003e……\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e还有好多好多，他接管很多很多东西，于是就让很多人不爽了，因为他在干了很多本不属于 PID 1 的事。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Systemd_%E4%BA%89%E8%AE%BA%E5%92%8C%E5%85%AB%E5%8D%A6\"\u003e\u003c/span\u003eSystemd 争论和八卦\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e于是 \u003ccode\u003esystemd\u003c/code\u003e 这个东西成了可能是有史以来口水战最多的一个开源软件了。\u003ccode\u003esystemd\u003c/code\u003e 饱受各种争议，最大的争议就是他破坏了 Unix 的设计哲学（相关的哲学可以读一下《\u003ca href=\"https://book.douban.com/subject/1467587/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eUnix编程艺术\u003c/a\u003e》），干了一个大而全而且相当复杂的东西。当然，Lennart 并不同意这样的说法，他后来又写一篇blog “\u003ca href=\"http://0pointer.de/blog/projects/the-biggest-myths.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eThe Biggest Myths\u003c/a\u003e”来解释 \u003ccode\u003esystemd\u003c/code\u003e 并不是这样的，大家可以前往一读。\u003c/p\u003e\n\u003cp\u003e这个争议大到什么样子呢？2014 年，Debian Linux 因为想准备使用 \u003ccode\u003esystemd\u003c/code\u003e 来作为标准的 init 守护进程来替换 \u003ccode\u003esysvinit\u003c/code\u003e 。而围绕这个事的争论达到了空前的热度，争论中充满着仇恨，\u003ccode\u003esystemd\u003c/code\u003e 的支持者和反对者都在互相辱骂，导致当时 Debian 阵营开始分裂。还有人给 Lennart 发了死亡威胁的邮件，用比特币雇凶买杀手，扬言要取他的性命，在Youbute上传了侮辱他的歌曲，在IRC和各种社交渠道上给他发下流和侮辱性的消息。这已经不是争议了，而是一种不折不扣的仇恨！\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full\" src=\"https://coolshell.cn/wp-content/uploads/2017/07/systemd_shewantsit.jpg\" alt=\"\" width=\"1000\" height=\"421\"/\u003e\u003c/p\u003e\n\u003cp\u003e于是，Lennart 在 \u003ca href=\"https://plus.google.com/+LennartPoetteringTheOneAndOnly/posts/J2TZrTvu7vd\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eGoogle Plus 上发了贴子\u003c/a\u003e，批评整个 Linux 开源社区和 Linus 本人。他大意说，\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e这个社区太病态了，全是 ass holes，你们不停用各种手段在各种地方用不同的语言和方式来侮辱和漫骂我。我还是一个年轻人，我从来没有经历过这样的场面，但是今天我已经对这种场面很熟悉了。我有时候说话可能不准确，但是我不会像他样那样说出那样的话，我也没有被这些事影响，因为我脸皮够厚，所以，为什么我可以在如何大的反对声面前让 \u003ccode\u003esystemd\u003c/code\u003e 成功，但是，你们 Linux 社区太可怕了。你们里面的有精神病的人太多了。另外，对于Linus Torvalds，你是这个社区的 Role Model，但可惜你是一个 Bad Role Model，你在社区里的刻薄和侮辱性的言行，基本从一定程度上鼓励了其它人跟你一样，当然，并不只是你一个人的问题，而是在你周围聚集了一群和你一样的这样干的人。送你一句话—— A fish rots from the head down ！一条鱼是从头往下腐烂的……\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e这篇契文很长，喜欢八卦的同学可以前往一读。感受一下 Lennart 当时的心态（我觉得能算上是非常平稳了）。\u003c/p\u003e\n\u003cp\u003eLinus也在被一媒体问起 \u003ccode\u003esystemd\u003c/code\u003e 这个事来（参看“\u003ca href=\"https://www.itwire.com/business-it-news/open-source/65402-torvalds-says-he-has-no-strong-opinions-on-systemd\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eTorvalds says he has no strong opinions on systemd\u003c/a\u003e”），Linus在采访里说，\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e我对 \u003ccode\u003esystemd\u003c/code\u003e 和 Lennart 的贴子没有什么强烈的想法。虽然，传统的 Unix 设计哲学—— “Do one thing and Do it well”，很不错，而且我们大多数人也实践了这么多年，但是这并不代表所有的真实世界。在历史上，也不只有\u003ccode\u003esystemd\u003c/code\u003e 这么干过。但是，我个人还是 old-fashioned 的人，至少我喜欢文本式的日志，而不是二进制的日志。但是 \u003ccode\u003esystemd\u003c/code\u003e 没有必要一定要有这样的品味。哦，我说细节了……\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e今天，\u003ccode\u003esystemd\u003c/code\u003e 占据了几乎所有的主流的 Linux 发行版的默认配置，包括：Arch Linux、CentOS、CoreOS、Debian、Fedora、Megeia、OpenSUSE、RHEL、SUSE企业版和 Ubuntu。而且，对于 CentOS, CoreOS, Fedora, RHEL, SUSE这些发行版来说，不能没有 \u003ccode\u003esystemd\u003c/code\u003e。（Ubuntu 还有一个不错的wiki – \u003ca href=\"https://wiki.ubuntu.com/SystemdForUpstartUsers\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eSystemd for Upstart Users\u003c/a\u003e 阐述了如何在两者间切换）\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%85%B6%E5%AE%83\"\u003e\u003c/span\u003e其它\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e还记得在《\u003ca href=\"https://coolshell.cn/articles/17416.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e缓存更新的套路\u003c/a\u003e》一文中，我说过，\u003cstrong\u003e如果你要做好架构，首先你得把计算机体系结构以及很多老古董的基础技术吃透了\u003c/strong\u003e。因为里面会有很多可以借鉴和相通的东西。那么，你是否从这篇文章里看到了一些有分布式架构相似的东西？\u003c/p\u003e\n\u003cp\u003e比如：从 \u003ccode\u003esysvinit\u003c/code\u003e 到 \u003ccode\u003eupstart\u003c/code\u003e 再到 \u003ccode\u003esystemd\u003c/code\u003e，像不像是服务治理？Linux系统下的这些服务进程，是不是很像分布式架构中的微服务？还有那个D-Bus，是不是很像SOA里的ESB？而 init 系统是不是很像一个控制系统？甚至像一个服务编排（Service Orchestration）系统？\u003c/p\u003e\n\u003cp\u003e分布式系统中的服务之间也有很多依赖，所以，在启动一个架构的时候，如果我们可以做到像 systemd 那样并行启动的话，那么是不是就像是一个微服务的玩法了？\u003c/p\u003e\n\u003cp\u003e嗯，你会发现，技术上的很多东西是相通的，也是互相有对方的影子，所以，其实技术并不多。关键是我们学在了表面还是看到了本质。\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%BB%B6%E4%BC%B8%E9%98%85%E8%AF%BB\"\u003e\u003c/span\u003e延伸阅读\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eLennert 的博文：\u003ca href=\"http://0pointer.de/blog/projects/systemd.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eRethinking PID 1\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLennert 的演讲：\u003ca href=\"https://www.youtube.com/watch?v=TyMLi8QF6sw\" target=\"_blank\" rel=\"noopener noreferrer\"\u003esystemd, beyond init\u003c/a\u003e （ \u003ca href=\"http://www.linux-kongress.org/2010/slides/systemd-poettering.pdf\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ePPT\u003c/a\u003e ）\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Systemd\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eWikipedia：Systemd\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLinuxVoice：\u003ca href=\"https://www.linuxvoice.com/interview-lennart-poettering/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eLennart Poettering 专访\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12103.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/11/tux-fork-150x150.gif\" alt=\"vfork 挂掉的一个问题\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12103.html\" class=\"wp_rp_title\"\u003evfork 挂掉的一个问题\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17061.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2015/08/docker-filesystems-busyboxrw-150x150.png\" alt=\"Docker基础技术：AUFS\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17061.html\" class=\"wp_rp_title\"\u003eDocker基础技术：AUFS\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17010.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2015/04/isolation-150x150.jpg\" alt=\"Docker基础技术：Linux Namespace（上）\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17010.html\" class=\"wp_rp_title\"\u003eDocker基础技术：Linux Namespace（上）\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/2322.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2010/04/o_unixrichiethompson-150x150.jpg\" alt=\"Unix传奇(上篇)\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/2322.html\" class=\"wp_rp_title\"\u003eUnix传奇(上篇)\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17029.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2015/04/jail_cell-150x150.jpg\" alt=\"Docker基础技术：Linux Namespace（下）\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17029.html\" class=\"wp_rp_title\"\u003eDocker基础技术：Linux Namespace（下）\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17049.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2015/04/filter-150x150.png\" alt=\"Docker基础技术：Linux CGroup\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17049.html\" class=\"wp_rp_title\"\u003eDocker基础技术：Linux CGroup\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-17998\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"5d23e2ceb5\"\u003e\u003cimg id=\"rating_17998_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17998, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8ed34d7fd69aeda93916741c-=\"\"/\u003e\u003cimg id=\"rating_17998_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17998, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8ed34d7fd69aeda93916741c-=\"\"/\u003e\u003cimg id=\"rating_17998_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17998, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8ed34d7fd69aeda93916741c-=\"\"/\u003e\u003cimg id=\"rating_17998_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17998, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8ed34d7fd69aeda93916741c-=\"\"/\u003e\u003cimg id=\"rating_17998_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17998, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8ed34d7fd69aeda93916741c-=\"\"/\u003e (\u003cstrong\u003e101\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.53\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_17998_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"Linux PID 1 和 Systemd\"/\u003e\u003cmeta itemprop=\"headline\" content=\"Linux PID 1 和 Systemd\"/\u003e\u003cmeta itemprop=\"description\" content=\"要说清 Systemd，得先从Linux操作系统的启动说起。Linux 操作系统的启动首先从 BIOS 开始，然后由 Boot Loader 载入内核，并初始化内核。内核初始化的最后一步就是启动 init 进程。这个进程是系统的第一个进程，PID 为 1，又叫超级进程，也叫根进程。它负责产生其他所有用户进程。所有的进程都会被挂在这个进程下，如果这个进程退出了，那么所有的进程都被 kill 。如果一...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2017-07-16T21:40:55+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2019-04-21T16:50:06+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/17998.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/17998.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.53\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"101\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-17998-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2017-07-16T21:40:55+08:00",
  "Author": "陈皓"
}