{
  "Source": "coolshell.cn",
  "Title": "如何重构“箭头型”代码",
  "Link": "https://coolshell.cn/articles/17757.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"3621cfeeeb9d0d8ef3a0c630-text/javascript\"\u003e\u003c/script\u003e本文主要起因是，一次在微博上和朋友关于嵌套好几层的if-else语句的代码重构的讨论（\u003ca href=\"http://weibo.com/1401880315/ECmCW0oy2\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e微博原文\u003c/a\u003e），在微博上大家有各式各样的问题和想法。按道理来说这些都是编程的基本功，似乎不太值得写一篇文章，不过我觉得很多东西可以从一个简单的东西出发，到达本质，所以，我觉得有必要在这里写一篇的文章。不一定全对，只希望得到更多的讨论，因为有了更深入的讨论才能进步。\u003c/p\u003e\n\u003cp\u003e文章有点长，我在文章最后会给出相关的思考和总结陈词，你可以跳到结尾。\u003c/p\u003e\n\u003cp\u003e所谓箭头型代码，基本上来说就是下面这个图片所示的情况。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" class=\"aligncenter wp-image-17758 size-full\" src=\"https://coolshell.cn/wp-content/uploads/2017/04/IMG_7411.jpg\" alt=\"\" width=\"720\" height=\"511\" srcset=\"https://coolshell.cn/wp-content/uploads/2017/04/IMG_7411.jpg 720w, https://coolshell.cn/wp-content/uploads/2017/04/IMG_7411-300x213.jpg 300w, https://coolshell.cn/wp-content/uploads/2017/04/IMG_7411-380x270.jpg 380w\" sizes=\"(max-width: 720px) 100vw, 720px\"/\u003e\u003c/p\u003e\n\u003cp\u003e那么，这样“箭头型”的代码有什么问题呢？看上去也挺好看的，有对称美。但是……\u003c/p\u003e\n\u003cp\u003e关于箭头型代码的问题有如下几个：\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-17757\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e1）我的显示器不够宽，箭头型代码缩进太狠了，需要我来回拉水平滚动条，这让我在读代码的时候，相当的不舒服。\u003c/p\u003e\n\u003cp\u003e2）除了宽度外还有长度，有的代码的\u003ccode\u003eif-else\u003c/code\u003e里的\u003ccode\u003eif-else\u003c/code\u003e里的\u003ccode\u003eif-else\u003c/code\u003e的代码太多，读到中间你都不知道中间的代码是经过了什么样的层层检查才来到这里的。\u003c/p\u003e\n\u003cp\u003e总而言之，\u003cstrong\u003e“箭头型代码”如果嵌套太多，代码太长的话，会相当容易让维护代码的人（包括自己）迷失在代码中，因为看到最内层的代码时，你已经不知道前面的那一层一层的条件判断是什么样的，代码是怎么运行到这里的，所以，箭头型代码是非常难以维护和Debug的\u003c/strong\u003e。\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E5%BE%AE%E5%8D%9A%E4%B8%8A%E7%9A%84%E6%A1%88%E4%BE%8B_%E4%B8%8E_Guard_Clauses\" title=\"微博上的案例 与 Guard Clauses\"\u003e微博上的案例 与 Guard Clauses\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E6%8A%BD%E5%8F%96%E6%88%90%E5%87%BD%E6%95%B0\" title=\"抽取成函数\"\u003e抽取成函数\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E5%B5%8C%E5%A5%97%E7%9A%84_if_%E5%A4%96%E7%9A%84%E4%BB%A3%E7%A0%81\" title=\"嵌套的 if 外的代码\"\u003e嵌套的 if 外的代码\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E7%8A%B6%E6%80%81%E6%A3%80%E6%9F%A5%E5%B5%8C%E5%A5%97\" title=\"状态检查嵌套\"\u003e状态检查嵌套\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E5%BB%B6%E4%BC%B8%E6%80%9D%E8%80%83\" title=\"延伸思考\"\u003e延伸思考\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#%E6%A3%80%E6%9F%A5%E9%94%99%E8%AF%AF\" title=\"检查错误\"\u003e检查错误\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#%E6%A3%80%E6%9F%A5%E7%8A%B6%E6%80%81\" title=\"检查状态\"\u003e检查状态\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#%E6%80%BB%E7%BB%93\" title=\"总结\"\u003e总结\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%BE%AE%E5%8D%9A%E4%B8%8A%E7%9A%84%E6%A1%88%E4%BE%8B_%E4%B8%8E_Guard_Clauses\"\u003e\u003c/span\u003e微博上的案例 与 Guard Clauses\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003eOK，我们先来看一下微博上的那个示例，代码量如果再大一点，嵌套再多一点，你很容易会在条件中迷失掉（下面这个示例只是那个“大箭头”下的一个小箭头）\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\"\u003eFOREACH(Ptr\u0026lt;WfExpression\u0026gt;, argument, node-\u0026gt;arguments) {\n    int index = manager-\u0026gt;expressionResolvings.Keys().IndexOf(argument.Obj());\n    if (index != -1) {\n        auto type = manager-\u0026gt;expressionResolvings.Values()[index].type;\n        if (! types.Contains(type.Obj())) {\n            types.Add(type.Obj());\n            if (auto group = type-\u0026gt;GetTypeDescriptor()-\u0026gt;GetMethodGroupByName(L\u0026#34;CastResult\u0026#34;, true)) {\n                int count = group-\u0026gt;GetMethodCount();\n                for (int i = 0; i \u0026lt; count; i++) { auto method = group-\u0026gt;GetMethod(i);\n                    if (method-\u0026gt;IsStatic()) {\n                        if (method-\u0026gt;GetParameterCount() == 1 \u0026amp;\u0026amp;\n                            method-\u0026gt;GetParameter(0)-\u0026gt;GetType()-\u0026gt;GetTypeDescriptor() == description::GetTypeDescriptor\u0026lt;DescriptableObject\u0026gt;() \u0026amp;\u0026amp;\n                            method-\u0026gt;GetReturn()-\u0026gt;GetTypeDescriptor() != description::GetTypeDescriptor\u0026lt;void\u0026gt;() ) {\n                            symbol-\u0026gt;typeInfo = CopyTypeInfo(method-\u0026gt;GetReturn());\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003e上面这段代码，可以把条件反过来写，然后就可以把箭头型的代码解掉了，重构的代码如下所示：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\"\u003eFOREACH(Ptr\u0026lt;WfExpression\u0026gt;, argument, node-\u0026gt;arguments) {\n    int index = manager-\u0026gt;expressionResolvings.Keys().IndexOf(argument.Obj());\n    if (index == -1)  continue;\n    \n    auto type = manager-\u0026gt;expressionResolvings.Values()[index].type;\n    if ( types.Contains(type.Obj()))  continue;\n    \n    types.Add(type.Obj());\n\n    auto group = type-\u0026gt;GetTypeDescriptor()-\u0026gt;GetMethodGroupByName(L\u0026#34;CastResult\u0026#34;, true);\n    if  ( ! group ) continue;\n \n    int count = group-\u0026gt;GetMethodCount();\n    for (int i = 0; i \u0026lt; count; i++) { auto method = group-\u0026gt;GetMethod(i);\n        if (! method-\u0026gt;IsStatic()) continue;\n       \n        if ( method-\u0026gt;GetParameterCount() == 1 \u0026amp;\u0026amp;\n               method-\u0026gt;GetParameter(0)-\u0026gt;GetType()-\u0026gt;GetTypeDescriptor() == description::GetTypeDescriptor\u0026lt;DescriptableObject\u0026gt;() \u0026amp;\u0026amp;\n               method-\u0026gt;GetReturn()-\u0026gt;GetTypeDescriptor() != description::GetTypeDescriptor\u0026lt;void\u0026gt;() ) {\n            symbol-\u0026gt;typeInfo = CopyTypeInfo(method-\u0026gt;GetReturn());\n            break;\n        }\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003e这种代码的重构方式叫 \u003cstrong\u003eGuard Clauses\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://martinfowler.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eMartin Fowler\u003c/a\u003e 的 Refactoring 的网站上有相应的说明《\u003ca href=\"https://refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eReplace Nested Conditional with Guard Clauses\u003c/a\u003e》。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://blog.codinghorror.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eCoding Horror\u003c/a\u003e 上也有一篇文章讲了这种重构的方式 —— 《\u003ca href=\"https://blog.codinghorror.com/flattening-arrow-code/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eFlattening Arrow Code\u003c/a\u003e》\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://stackoverflow.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eStackOverflow\u003c/a\u003e 上也有相关的问题说了这种方式 —— 《\u003ca href=\"http://stackoverflow.com/questions/356121/refactor-nested-if-statement-for-clarity\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eRefactor nested IF statement for clarity\u003c/a\u003e》\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这里的思路其实就是，\u003cstrong\u003e让出错的代码先返回，前面把所有的错误判断全判断掉，然后就剩下的就是正常的代码了\u003c/strong\u003e。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%8A%BD%E5%8F%96%E6%88%90%E5%87%BD%E6%95%B0\"\u003e\u003c/span\u003e抽取成函数\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e微博上有些人说，continue 语句破坏了阅读代码的通畅，我觉得他们一定没有好好读这里面的代码，其实，我们可以看到，所有的 if 语句都是在判断是否出错的情况，所以，在维护代码的时候，你可以完全不理会这些 if 语句，因为都是出错处理的，而剩下的代码都是正常的功能代码，反而更容易阅读了。当然，一定有不是上面代码里的这种情况，那么，不用continue ，我们还能不能重构呢？\u003c/p\u003e\n\u003cp\u003e当然可以，抽成函数：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\"\u003ebool CopyMethodTypeInfo(auto \u0026amp;method, auto \u0026amp;group, auto \u0026amp;symbol) \n{\n    if (! method-\u0026gt;IsStatic()) {\n        return true;\n    }\n    if ( method-\u0026gt;GetParameterCount() == 1 \u0026amp;\u0026amp;\n           method-\u0026gt;GetParameter(0)-\u0026gt;GetType()-\u0026gt;GetTypeDescriptor() == description::GetTypeDescriptor\u0026lt;DescriptableObject\u0026gt;() \u0026amp;\u0026amp;\n           method-\u0026gt;GetReturn()-\u0026gt;GetTypeDescriptor() != description::GetTypeDescriptor\u0026lt;void\u0026gt;() ) {\n        symbol-\u0026gt;typeInfo = CopyTypeInfo(method-\u0026gt;GetReturn());\n        return false;\n    }\n    return true;\n}\n\nvoid ExpressionResolvings(auto \u0026amp;manager, auto \u0026amp;argument, auto \u0026amp;symbol) \n{\n    int index = manager-\u0026gt;expressionResolvings.Keys().IndexOf(argument.Obj());\n    if (index == -1) return;\n    \n    auto type = manager-\u0026gt;expressionResolvings.Values()[index].type;\n    if ( types.Contains(type.Obj())) return;\n\n    types.Add(type.Obj());\n    auto group = type-\u0026gt;GetTypeDescriptor()-\u0026gt;GetMethodGroupByName(L\u0026#34;CastResult\u0026#34;, true);\n    if  ( ! group ) return;\n\n    int count = group-\u0026gt;GetMethodCount();\n    for (int i = 0; i \u0026lt; count; i++) { auto method = group-\u0026gt;GetMethod(i);\n        if ( ! CopyMethodTypeInfo(method, group, symbol) ) break;\n    }\n}\n\n...\n...\nFOREACH(Ptr\u0026lt;WfExpression\u0026gt;, argument, node-\u0026gt;arguments) {\n    ExpressionResolvings(manager, arguments, symbol)\n}\n...\n...\n\u003c/pre\u003e\n\u003cp\u003e你发出现，抽成函数后，代码比之前变得更容易读和更容易维护了。不是吗？\u003c/p\u003e\n\u003cp\u003e有人说：“如果代码不共享，就不要抽取成函数！”，持有这个观点的人太死读书了。函数是代码的封装或是抽象，并不一定用来作代码共享使用，函数用于屏蔽细节，让其它代码耦合于接口而不是细节实现，这会让我们的代码更为简单，简单的东西都能让人易读也易维护。这才是函数的作用。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%B5%8C%E5%A5%97%E7%9A%84_if_%E5%A4%96%E7%9A%84%E4%BB%A3%E7%A0%81\"\u003e\u003c/span\u003e嵌套的 if 外的代码\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e微博上还有人问，原来的代码如果在各个 if 语句后还有要执行的代码，那么应该如何重构。比如下面这样的代码。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\"\u003e//原版\nfor(....) {\n    do_before_cond1()\n    if (cond1) {\n        do_before_cond2();\n        if (cond2) {\n            do_before_cond3();\n            if (cond3) {\n                do_something();\n            }\n            do_after_cond3();\n        }\n        do_after_cond2();\n    }\n    do_after_cond1();\n}\u003c/pre\u003e\n\u003cp\u003e上面这段代码中的那些 \u003ccode\u003edo_after_condX()\u003c/code\u003e 是无论条件成功与否都要执行的。所以，我们拉平后的代码如下所示：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\"\u003e//重构第一版\nfor(....) {\n    do_before_cond1();\n    if ( !cond1 ) {\n        do_after_cond1();\n        continue\n    } \n    do_after_cond1();\n\n    do_before_cond2();\n    if ( !cond2 ) { \n        do_after_cond2();\n        continue;\n    }\n    do_after_cond2();\n\n    do_before_cond3();\n    if ( !cond3 ) {\n        do_after_cond3();\n        continue;\n    }\n    do_after_cond3();\n\n    do_something();  \n}\u003c/pre\u003e\n\u003cp\u003e你会发现，上面的 \u003ccode\u003edo_after_condX\u003c/code\u003e 出现了两份。\u003cstrong\u003e如果 if 语句块中的代码改变了某些\u003ccode\u003edo_after_condX\u003c/code\u003e依赖的状态，那么这是最终版本。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e但是，如果它们之前没有依赖关系的话，根据 DRY 原则，我们就可以只保留一份，那么直接掉到 if 条件前就好了，如下所示：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\"\u003e//重构第二版\nfor(....) {\n    do_before_cond1();\n    do_after_cond1();\n    if ( !cond1 ) continue;\n \n    do_before_cond2();\n    do_after_cond2();\n    if ( !cond2 ) continue;\n\n    do_before_cond3();\n    do_after_cond3();\n    if ( !cond3 ) continue;\n\n    do_something();  \n}\u003c/pre\u003e\n\u003cp\u003e此时，你会说，我靠，居然，改变了执行的顺序，把条件放到 \u003ccode\u003edo_after_condX()\u003c/code\u003e 后面去了。这会不会有问题啊？\u003c/p\u003e\n\u003cp\u003e其实，你再分析一下之前的代码，你会发现，本来，cond1 是判断 do_before_cond1() 是否出错的，如果有成功了，才会往下执行。而 do_after_cond1() 是无论如何都要执行的。从逻辑上来说，do_after_cond1()其实和do_before_cond1()的执行结果无关，而 cond1 却和是否去执行 do_before_cond2() 相关了。如果我把断行变成下面这样，反而代码逻辑更清楚了。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\"\u003e//重构第三版\nfor(....) {\n\n    do_before_cond1();\n    do_after_cond1();\n\n\n    if ( !cond1 ) continue;  // \u0026lt;-- cond1 成了是否做第二个语句块的条件\n    do_before_cond2();\n    do_after_cond2();\n\n    if ( !cond2 ) continue; // \u0026lt;-- cond2 成了是否做第三个语句块的条件\n    do_before_cond3();\n    do_after_cond3();\n\n    if ( !cond3 ) continue; //\u0026lt;-- cond3 成了是否做第四个语句块的条件\n    do_something(); \n \n}\n\u003c/pre\u003e\n\u003cp\u003e于是乎，在未来维护代码的时候，维护人一眼看上去就明白，代码在什么时候会执行到哪里。 这个时候，你会发现，把这些语句块抽成函数，代码会干净的更多，再重构一版：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\"\u003e//重构第四版\nbool do_func3() {\n   do_before_cond2();\n   do_after_cond2();\n   return cond3;\n}\n\nbool do_func2() {\n   do_before_cond2();\n   do_after_cond2();\n   return cond2;\n}\n\nbool do_func1() {\n   do_before_cond1();\n   do_after_cond1();\n   return cond1;\n}\n\n// for-loop 你可以重构成这样\nfor (...) {\n    bool cond = do_func1();\n    if (cond) cond = do_func2();\n    if (cond) cond = do_func3();\n    if (cond) do_something();\n}\n\n// for-loop 也可以重构成这样\nfor (...) {\n    if ( ! do_func1() ) continue;\n    if ( ! do_func2() ) continue;\n    if ( ! do_func3() ) continue;\n    do_something();\n}\n\u003c/pre\u003e\n\u003cp\u003e上面，我给出了两个版本的for-loop，你喜欢哪个？我喜欢第二个。这个时候，因为for-loop里的代码非常简单，就算你不喜欢 continue ，这样的代码阅读成本已经很低了。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%8A%B6%E6%80%81%E6%A3%80%E6%9F%A5%E5%B5%8C%E5%A5%97\"\u003e\u003c/span\u003e状态检查嵌套\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e接下来，我们再来看另一个示例。下面的代码的伪造了一个场景——把两个人拉到一个一对一的聊天室中，因为要检查双方的状态，所以，代码可能会写成了“箭头型”。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\"\u003eint ConnectPeer2Peer(Conn *pA, Conn* pB, Manager *manager)\n{\n    if ( pA-\u0026gt;isConnected() ) {\n        manager-\u0026gt;Prepare(pA);\n        if ( pB-\u0026gt;isConnected() ) {\n            manager-\u0026gt;Prepare(pB);\n            if ( manager-\u0026gt;ConnectTogther(pA, pB) ) {\n                pA-\u0026gt;Write(\u0026#34;connected\u0026#34;);\n                pB-\u0026gt;Write(\u0026#34;connected\u0026#34;);\n                return S_OK;\n            }else{\n                return S_ERROR;\n            }\n\n        }else {\n            pA-\u0026gt;Write(\u0026#34;Peer is not Ready, waiting...\u0026#34;);\n            return S_RETRY;\n        }\n    }else{\n        if ( pB-\u0026gt;isConnected() ) {\n            manager-\u0026gt;Prepare();\n            pB-\u0026gt;Write(\u0026#34;Peer is not Ready, waiting...\u0026#34;);\n            return S_RETRY;\n        }else{\n            pA-\u0026gt;Close();\n            pB-\u0026gt;Close();\n            return S_ERROR;\n        }\n    }\n    //Shouldn\u0026#39;t be here!\n    return S_ERROR;\n}\u003c/pre\u003e\n\u003cp\u003e重构上面的代码，我们可以先分析一下上面的代码，说明了，上面的代码就是对 PeerA 和 PeerB 的两个状态 “连上”， “未连上” 做组合 “状态” （注：实际中的状态应该比这个还要复杂，可能还会有“断开”、“错误”……等等状态）， 于是，我们可以把代码写成下面这样，合并上面的嵌套条件，对于每一种组合都做出判断。这样一来，逻辑就会非常的干净和清楚。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\"\u003eint ConnectPeer2Peer(Conn *pA, Conn* pB, Manager *manager)\n{\n    if ( pA-\u0026gt;isConnected() ) {\n        manager-\u0026gt;Prepare(pA);\n    }\n\n    if ( pB-\u0026gt;isConnected() ) {\n        manager-\u0026gt;Prepare(pB);\n    }\n\n    // pA = YES \u0026amp;\u0026amp; pB = NO\n    if (pA-\u0026gt;isConnected() \u0026amp;\u0026amp; ! pB-\u0026gt;isConnected()  ) {\n        pA-\u0026gt;Write(\u0026#34;Peer is not Ready, waiting\u0026#34;);\n        return S_RETRY;\n    // pA = NO \u0026amp;\u0026amp; pB = YES\n    }else if ( !pA-\u0026gt;isConnected() \u0026amp;\u0026amp; pB-\u0026gt;isConnected() ) {\n        pB-\u0026gt;Write(\u0026#34;Peer is not Ready, waiting\u0026#34;);\n        return S_RETRY;\n    // pA = YES \u0026amp;\u0026amp; pB = YES\n    }else if (pA-\u0026gt;isConnected() \u0026amp;\u0026amp; pB-\u0026gt;isConnected()  ) {\n        if ( ! manager-\u0026gt;ConnectTogther(pA, pB) ) {\n            return S_ERROR;\n        }\n        pA-\u0026gt;Write(\u0026#34;connected\u0026#34;);\n        pB-\u0026gt;Write(\u0026#34;connected\u0026#34;);\n        return S_OK;\n    }\n\n    // pA = NO, pB = NO\n    pA-\u0026gt;Close();\n    pB-\u0026gt;Close();\n    return S_ERROR;\n}\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%BB%B6%E4%BC%B8%E6%80%9D%E8%80%83\"\u003e\u003c/span\u003e延伸思考\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e对于 \u003ccode\u003eif-else\u003c/code\u003e 语句来说，一般来说，就是检查两件事：\u003cstrong\u003e错误\u003c/strong\u003e 和 \u003cstrong\u003e状态\u003c/strong\u003e。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%A3%80%E6%9F%A5%E9%94%99%E8%AF%AF\"\u003e\u003c/span\u003e检查错误\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e对于检查错误来说，使用 Guard Clauses 会是一种标准解，但我们还需要注意下面几件事：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）当然，出现错误的时候，还会出现需要释放资源的情况。你可以使用 \u003ccode\u003egoto fail;\u003c/code\u003e 这样的方式，但是最优雅的方式应该是C++面向对象式的 RAII 方式。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）以错误码返回是一种比较简单的方式，这种方式有很一些问题，比如，如果错误码太多，判断出错的代码会非常复杂，另外，正常的代码和错误的代码会混在一起，影响可读性。所以，在更为高组的语言中，使用 \u003ccode\u003etry-catch\u003c/code\u003e 异常捕捉的方式，会让代码更为易读一些。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%A3%80%E6%9F%A5%E7%8A%B6%E6%80%81\"\u003e\u003c/span\u003e检查状态\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e对于检查状态来说，实际中一定有更为复杂的情况，比如下面几种情况：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）像TCP协议中的两端的状态变化。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）像shell各个命令的命令选项的各种组合。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e3）像游戏中的状态变化（一棵非常复杂的状态树）。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e4）像语法分析那样的状态变化。\u003c/p\u003e\n\u003cp\u003e对于这些复杂的状态变化，其本上来说，你需要先定义一个状态机，或是一个子状态的组合状态的查询表，或是一个状态查询分析树。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e写代码时，代码的运行中的控制状态或业务状态是会让你的代码流程变得混乱的一个重要原因，重构“箭头型”代码的一个很重要的工作就是重新梳理和描述这些状态的变迁关系\u003c/strong\u003e。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%80%BB%E7%BB%93\"\u003e\u003c/span\u003e总结\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e好了，下面总结一下，把“箭头型”代码重构掉的几个手段如下：\u003c/p\u003e\n\u003cp\u003e1）\u003cstrong\u003e使用 Guard Clauses \u003c/strong\u003e。 尽可能的让出错的先返回， 这样后面就会得到干净的代码。\u003c/p\u003e\n\u003cp\u003e2）\u003cstrong\u003e把条件中的语句块抽取成函数\u003c/strong\u003e。 有人说：“如果代码不共享，就不要抽取成函数！”，持有这个观点的人太死读书了。函数是代码的封装或是抽象，并不一定用来作代码共享使用，函数用于屏蔽细节，让其它代码耦合于接口而不是细节实现，这会让我们的代码更为简单，简单的东西都能让人易读也易维护，\u003cstrong\u003e写出让人易读易维护的代码才是重构代码的初衷\u003c/strong\u003e！\u003c/p\u003e\n\u003cp\u003e3）\u003cstrong\u003e对于出错处理，使用try-catch异常处理和\u003ca href=\"http://stackoverflow.com/questions/2321511/what-is-meant-by-resource-acquisition-is-initialization-raii\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eRAII机制\u003c/a\u003e\u003c/strong\u003e。返回码的出错处理有很多问题，比如：A) 返回码可以被忽略，B) 出错处理的代码和正常处理的代码混在一起，C) 造成函数接口污染，比如像atoi()这种错误码和返回值共用的糟糕的函数。\u003c/p\u003e\n\u003cp\u003e4）\u003cstrong\u003e对于多个状态的判断和组合，如果复杂了，可以使用“组合状态表”，或是状态机加Observer的状态订阅的设计模式\u003c/strong\u003e。这样的代码即解了耦，也干净简单，同样有很强的扩展性。\u003c/p\u003e\n\u003cp\u003e5） \u003cstrong\u003e重构“箭头型”代码其实是在帮你重新梳理所有的代码和逻辑，这个过程非常值得为之付出\u003c/strong\u003e。重新整思路去想尽一切办法简化代码的过程本身就可以让人成长。\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/19612.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2019/07/1920px-Margaret_Hamilton_-_restoration-e1563697198766-1-150x150.jpg\" alt=\"50年前的登月程序和程序员有多硬核\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/19612.html\" class=\"wp_rp_title\"\u003e50年前的登月程序和程序员有多硬核\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17929.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/06/go-hardhat-150x150.png\" alt=\"Go编程模式：修饰器\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17929.html\" class=\"wp_rp_title\"\u003eGo编程模式：修饰器\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"Leetcode 编程训练\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_title\"\u003eLeetcode 编程训练\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11656.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/06/software_development-150x150.png\" alt=\"开发团队的效率\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11656.html\" class=\"wp_rp_title\"\u003e开发团队的效率\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11432.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/04/code_review-150x150.jpg\" alt=\"从Code Review 谈如何做技术\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11432.html\" class=\"wp_rp_title\"\u003e从Code Review 谈如何做技术\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11265.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/03/snake-hat-new-year-schedule-800x960-150x150.jpg\" alt=\"Python修饰器的函数式编程\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11265.html\" class=\"wp_rp_title\"\u003ePython修饰器的函数式编程\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-17757\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"2b7c5aa1d9\"\u003e\u003cimg id=\"rating_17757_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17757, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-3621cfeeeb9d0d8ef3a0c630-=\"\"/\u003e\u003cimg id=\"rating_17757_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17757, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-3621cfeeeb9d0d8ef3a0c630-=\"\"/\u003e\u003cimg id=\"rating_17757_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17757, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-3621cfeeeb9d0d8ef3a0c630-=\"\"/\u003e\u003cimg id=\"rating_17757_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17757, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-3621cfeeeb9d0d8ef3a0c630-=\"\"/\u003e\u003cimg id=\"rating_17757_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17757, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-3621cfeeeb9d0d8ef3a0c630-=\"\"/\u003e (\u003cstrong\u003e94\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.43\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_17757_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"如何重构“箭头型”代码\"/\u003e\u003cmeta itemprop=\"headline\" content=\"如何重构“箭头型”代码\"/\u003e\u003cmeta itemprop=\"description\" content=\"本文主要起因是，一次在微博上和朋友关于嵌套好几层的if-else语句的代码重构的讨论（微博原文），在微博上大家有各式各样的问题和想法。按道理来说这些都是编程的基本功，似乎不太值得写一篇文章，不过我觉得很多东西可以从一个简单的东西出发，到达本质，所以，我觉得有必要在这里写一篇的文章。不一定全对，只希望得到更多的讨论，因为有了更深入的讨论才能进步。\n\n文章有点长，我在文章最后会给出相关的思考和总结陈词...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2017-04-05T18:07:14+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2020-07-06T17:36:46+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/17757.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/17757.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.43\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"94\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-17757-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2017-04-05T18:07:14+08:00",
  "Author": "陈皓"
}