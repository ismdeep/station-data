{
  "Source": "coolshell.cn",
  "Title": "Docker基础技术：DeviceMapper",
  "Link": "https://coolshell.cn/articles/17200.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"11c0091b17b54cba7ed1075b-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright size-medium wp-image-17217\" src=\"https://coolshell.cn/wp-content/uploads/2015/08/how_to_set_up_an_iSCSI_LUN_with_thin-300x150.jpg\" alt=\"how_to_set_up_an_iSCSI_LUN_with_thin\" width=\"300\" height=\"150\" srcset=\"https://coolshell.cn/wp-content/uploads/2015/08/how_to_set_up_an_iSCSI_LUN_with_thin-300x150.jpg 300w, https://coolshell.cn/wp-content/uploads/2015/08/how_to_set_up_an_iSCSI_LUN_with_thin-540x270.jpg 540w, https://coolshell.cn/wp-content/uploads/2015/08/how_to_set_up_an_iSCSI_LUN_with_thin.jpg 600w\" sizes=\"(max-width: 300px) 100vw, 300px\"/\u003e在上一篇\u003ca href=\"https://coolshell.cn/articles/17061.html\" target=\"_blank\"\u003e介绍AUFS的文章\u003c/a\u003e中，大家可以看到，Docker的分层镜像是怎么通过UnionFS这种文件系统做到的，但是，因为Docker首选的AUFS并不在Linux的内核主干里，所以，对于非Ubuntu的Linux分发包，比如CentOS，就无法使用AUFS作为Docker的文件系统了。于是作为第二优先级的DeviceMapper就被拿出来做分层镜像的一个实现。\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#Device_Mapper_%E7%AE%80%E4%BB%8B\" title=\"Device Mapper 简介\"\u003eDevice Mapper 简介\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#Thin_Provisioning_%E7%AE%80%E4%BB%8B\" title=\"Thin Provisioning 简介\"\u003eThin Provisioning 简介\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#Thin_Provisioning_Snapshot_%E6%BC%94%E7%A4%BA\" title=\"Thin Provisioning Snapshot 演示\"\u003eThin Provisioning Snapshot 演示\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#Docker%E7%9A%84DeviceMapper\" title=\"Docker的DeviceMapper\"\u003eDocker的DeviceMapper\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#Device_Mapper_%E8%A1%8C%E4%B8%8D%E8%A1%8C%EF%BC%9F\" title=\"Device Mapper 行不行？\"\u003eDevice Mapper 行不行？\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Device_Mapper_%E7%AE%80%E4%BB%8B\"\u003e\u003c/span\u003eDevice Mapper 简介\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003eDeviceMapper自Linux 2.6被引入成为了Linux最重要的一个技术。它在内核中支持逻辑卷管理的通用设备映射机制，它为实现用于存储资源管理的块设备驱动提供了一个高度模块化的内核架构，它包含三个重要的对象概念，Mapped Device、Mapping Table、Target device。\u003c/p\u003e\n\u003cp\u003eMapped Device 是一个逻辑抽象，可以理解成为内核向外提供的逻辑设备，它通过Mapping Table描述的映射关系和 Target Device 建立映射。Target device 表示的是 Mapped Device 所映射的物理空间段，对 Mapped Device 所表示的逻辑设备来说，就是该逻辑设备映射到的一个物理设备。\u003c/p\u003e\n\u003cp\u003eMapping Table里有 Mapped Device 逻辑的起始地址、范围、和表示在 Target Device 所在物理设备的地址偏移量以及Target 类型等信息（注：这些地址和偏移量都是以磁盘的扇区为单位的，即 512 个字节大小，所以，当你看到128的时候，其实表示的是128*512=64K）。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-17200\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eDeviceMapper 中的逻辑设备Mapped Device不但可以映射一个或多个物理设备Target Device，还可以映射另一个Mapped Device，于是，就是构成了一个迭代或递归的情况，就像文件系统中的目录里除了文件还可以有目录，理论上可以无限嵌套下去。\u003c/p\u003e\n\u003cp\u003eDeviceMapper在内核中通过一个一个模块化的 Target Driver 插件实现对 IO 请求的过滤或者重新定向等工作，当前已经实现的插件包括软 Raid、加密、多路径、镜像、快照等，这体现了在 Linux 内核设计中策略和机制分离的原则。如下图所示。从图中，我们可以\u003cstrong\u003e看到DeviceMapper只是一个框架，在这个框架上，我们可以插入各种各样的策略\u003c/strong\u003e（让我不自然地想到了面向对象中的策略模式），在这诸多“插件”中，\u003cstrong\u003e有一个东西叫Thin Provisioning Snapshot，这是Docker使用DeviceMapper中最重要的模块\u003c/strong\u003e。\u003c/p\u003e\n\u003cfigure id=\"attachment_17204\" aria-describedby=\"caption-attachment-17204\" style=\"width: 640px\" class=\"wp-caption aligncenter\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-17204\" src=\"https://coolshell.cn/wp-content/uploads/2015/08/device.mapper.2.gif\" alt=\"图片来源：http://people.redhat.com/agk/talks/FOSDEM_2005/\" width=\"640\" height=\"494\"/\u003e\u003cfigcaption id=\"caption-attachment-17204\" class=\"wp-caption-text\"\u003e图片来源：\u003ca href=\"http://people.redhat.com/agk/talks/FOSDEM_2005/\" target=\"_blank\"\u003ehttp://people.redhat.com/agk/talks/FOSDEM_2005/\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Thin_Provisioning_%E7%AE%80%E4%BB%8B\"\u003e\u003c/span\u003e\u003cstrong\u003eThin Provisioning 简介\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003eThin Provisioning要怎么翻译成中文，真是一件令人头痛的事，我就不翻译了。这个技术是虚拟化技术中的一种。它是什么意思呢？\u003cstrong\u003e你可以联想一下我们计算机中的内存管理中用到的——“虚拟内存技术”\u003c/strong\u003e——操作系统给每个进程N多N多用不完的内址地址（32位下，每个进程可以有最多2GB的内存空间），但是呢，我们知道，物理内存是没有那么多的，如果按照进程内存和物理内存一一映射来玩的话，那么，我们得要多少的物理内存啊。所以，操作系统引入了虚拟内存的设计，\u003cstrong\u003e意思是，我逻辑上给你无限多的内存，但是实际上是实报实销\u003c/strong\u003e，因为我知道你一定用不了那么多，于是，达到了内存使用率提高的效果。（今天云计算中很多所谓的虚拟化其实完全都是在用和“虚拟内存”相似的Thin Provisioning的技术，所谓的超配，或是超卖）\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e好了，话题拉回来，我们这里说的是存储。看下面两个图（\u003ca href=\"http://www.architecting.it/2009/06/04/enterprise-computing-why-thin-provisioning-is-not-the-holy-grail-for-utilisation/\" target=\"_blank\"\u003e图片来源\u003c/a\u003e），第一个是Fat Provisioning，第二个是Thin Provisioning，其很好的说明了是个怎么一回事（和虚拟内存是一个概念）\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-17206\" src=\"https://coolshell.cn/wp-content/uploads/2015/08/thin-provisioning-1.jpg\" alt=\"thin-provisioning-1\" width=\"606\" height=\"399\" srcset=\"https://coolshell.cn/wp-content/uploads/2015/08/thin-provisioning-1.jpg 606w, https://coolshell.cn/wp-content/uploads/2015/08/thin-provisioning-1-300x198.jpg 300w\" sizes=\"(max-width: 606px) 100vw, 606px\"/\u003e \u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-17207\" src=\"https://coolshell.cn/wp-content/uploads/2015/08/thin-provisioning-2.jpg\" alt=\"thin-provisioning-2\" width=\"606\" height=\"389\" srcset=\"https://coolshell.cn/wp-content/uploads/2015/08/thin-provisioning-2.jpg 606w, https://coolshell.cn/wp-content/uploads/2015/08/thin-provisioning-2-300x193.jpg 300w\" sizes=\"(max-width: 606px) 100vw, 606px\"/\u003e\u003c/p\u003e\n\u003cp\u003e那么，Docker是怎么使用Thin Provisioning这个技术做到像UnionFS那样的分层镜像的呢？答案是，Docker使用了Thin Provisioning的Snapshot的技术。下面我们来介绍一下Thin Provisioning的Snapshot。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Thin_Provisioning_Snapshot_%E6%BC%94%E7%A4%BA\"\u003e\u003c/span\u003eThin Provisioning Snapshot 演示\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e下面，我们用一系列的命令来演示一下Device Mapper的Thin Provisioning Snapshot是怎么玩的。\u003c/p\u003e\n\u003cp\u003e首先，我们需要先建两个文件，一个是data.img，一个是meta.data.img：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e~hchen$ sudo dd if=/dev/zero of=/tmp/data.img bs=1K count=1 seek=10M\n1+0 records in\n1+0 records out\n1024 bytes (1.0 kB) copied, 0.000621428 s, 1.6 MB/s\n\n~hchen$ sudo dd if=/dev/zero of=/tmp/meta.data.img bs=1K count=1 seek=1G\n1+0 records in\n1+0 records out\n1024 bytes (1.0 kB) copied, 0.000140858 s, 7.3 MB/s\u003c/pre\u003e\n\u003cp\u003e注意命令中\u003ccode\u003eseek\u003c/code\u003e选项，其表示为略过\u003ccode\u003eof\u003c/code\u003e选项指定的输出文件的前10G个output的bloksize的空间后再写入内容。因为bs是1个字节，所以也就是10G的尺寸，但其实在硬盘上是没有占有空间的，占有空间只有1k的内容。当向其写入内容时，才会在硬盘上为其分配空间。我们可以用ls命令看一下，实际分配了12K和4K。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e~hchen$ sudo ls -lsh /tmp/data.img\n12K -rw-r--r--. 1 root root 11G Aug 25 23:01 /tmp/data.img\n\n~hchen$ sudo ls -slh /tmp/meta.data.img\n4.0K -rw-r--r--. 1 root root 101M Aug 25 23:17 /tmp/meta.data.img\u003c/pre\u003e\n\u003cp\u003e然后，我们为这个文件创建一个loopback设备。（loop2015和loop2016是我乱取的两个名字）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e~hchen$ sudo losetup /dev/loop2015 /tmp/data.img\n~hchen$ sudo losetup /dev/loop2016 /tmp/meta.data.img\n\n~hchen$ sudo losetup -a\n/dev/loop2015: [64768]:103991768 (/tmp/data.img)\n/dev/loop2016: [64768]:103991765 (/tmp/meta.data.img)\u003c/pre\u003e\n\u003cp\u003e现在，我们为这个设备建一个Thin Provisioning的Pool，用dmsetup命令：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e~hchen$ sudo dmsetup create hchen-thin-pool \\\n                  --table \u0026#34;0 20971522 thin-pool /dev/loop2016 /dev/loop2015 \\\n                           128 65536 1 skip_block_zeroing\u0026#34;\u003c/pre\u003e\n\u003cp\u003e其中的参数解释如下（更多信息可参看\u003ca href=\"https://github.com/torvalds/linux/blob/master/Documentation/device-mapper/thin-provisioning.txt\" target=\"_blank\"\u003eThin Provisioning的man page\u003c/a\u003e）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003edmsetup create是用来创建thin pool的命令\u003c/li\u003e\n\u003cli\u003ehchen-thin-pool 是自定义的一个pool名，不冲突就好。\u003c/li\u003e\n\u003cli\u003e–table是这个pool的参数设置\n\u003cul\u003e\n\u003cli\u003e0代表起的sector位置\u003c/li\u003e\n\u003cli\u003e20971522代码结句的sector号，前面说过，一个sector是512字节，所以，20971522个正好是10GB\u003c/li\u003e\n\u003cli\u003e/dev/loop2016是meta文件的设备（前面我们建好了）\u003c/li\u003e\n\u003cli\u003e/dev/loop2015是data文件的设备（前面我们建好了）\u003c/li\u003e\n\u003cli\u003e128是最小的可分配的sector数\u003c/li\u003e\n\u003cli\u003e65536是最少可用sector的water mark，也就是一个threshold\u003c/li\u003e\n\u003cli\u003e1 代表有一个附加参数\u003c/li\u003e\n\u003cli\u003eskip_block_zeroing是个附加参数，表示略过用0填充的块\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e然后，我们就可以看到一个Device Mapper的设备了：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e~hchen$ sudo ll /dev/mapper/hchen-thin-pool\nlrwxrwxrwx. 1 root root 7 Aug 25 23:24 /dev/mapper/hchen-thin-pool -\u0026gt; ../dm-4\u003c/pre\u003e\n\u003cp\u003e接下来，我们的初始还没有完成，还要创建一个Thin Provisioning 的 Volume：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e~hchen$ sudo dmsetup message /dev/mapper/hchen-thin-pool 0 \u0026#34;create_thin 0\u0026#34;\n~hchen$ sudo dmsetup create hchen-thin-volumn-001 \\\n            --table \u0026#34;0 2097152 thin /dev/mapper/hchen-thin-pool 0\u0026#34;\u003c/pre\u003e\n\u003cp\u003e其中：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第一个命令中的create_thin是关键字，后面的0表示这个Volume的device 的 id\u003c/li\u003e\n\u003cli\u003e第二个命令，是真正的为这个Volumn创建一个可以mount的设备，名字叫hchen-thin-volumn-001。2097152只有1GB\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e好了，在mount前，我们还要格式化一下：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e~hchen$ sudo mkfs.ext4 /dev/mapper/hchen-thin-volumn-001\nmke2fs 1.42.9 (28-Dec-2013)\nDiscarding device blocks: done\nFilesystem label=\nOS type: Linux\nBlock size=4096 (log=2)\nFragment size=4096 (log=2)\nStride=16 blocks, Stripe width=16 blocks\n65536 inodes, 262144 blocks\n13107 blocks (5.00%) reserved for the super user\nFirst data block=0\nMaximum filesystem blocks=268435456\n8 block groups\n32768 blocks per group, 32768 fragments per group\n8192 inodes per group\nSuperblock backups stored on blocks:\n32768, 98304, 163840, 229376\n\nAllocating group tables: done\nWriting inode tables: done\nCreating journal (8192 blocks): done\nWriting superblocks and filesystem accounting information: done\u003c/pre\u003e\n\u003cp\u003e好了，我们可以mount了（下面的命令中，我还创建了一个文件）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e~hchen$ sudo mkdir -p /mnt/base\n~hchen$ sudo mount /dev/mapper/hchen-thin-volumn-001 /mnt/base\n~hchen$ sudo echo \u0026#34;hello world, I am a base\u0026#34; \u0026gt; /mnt/base/id.txt\n~hchen$ sudo cat /mnt/base/id.txt\nhello world, I am a base\u003c/pre\u003e\n\u003cp\u003e好了，接下来，我们来看看snapshot怎么搞：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e~hchen$ sudo dmsetup message /dev/mapper/hchen-thin-pool 0 \u0026#34;create_snap 1 0\u0026#34;\n~hchen$ sudo dmsetup create mysnap1 \\\n                   --table \u0026#34;0 2097152 thin /dev/mapper/hchen-thin-pool 1\u0026#34;\n\n~hchen$ sudo ll /dev/mapper/mysnap1\nlrwxrwxrwx. 1 root root 7 Aug 25 23:49 /dev/mapper/mysnap1 -\u0026gt; ../dm-5\u003c/pre\u003e\n\u003cp\u003e上面的命令中：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第一条命令是向hchen-thin-pool发一个create_snap的消息，后面跟两个id，第一个是新的dev id，第二个是要从哪个已有的dev id上做snapshot（0这个dev id是我们前面就创建了了）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e第二条命令是创建一个mysnap1的device，并可以被mount。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e下面我们来看看：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e~hchen$ sudo mkdir -p /mnt/mysnap1\n~hchen$ sudo mount /dev/mapper/mysnap1 /mnt/mysnap1\n\n~hchen$ sudo ll /mnt/mysnap1/\ntotal 20\n-rw-r--r--. 1 root root 25 Aug 25 23:46 id.txt\ndrwx------. 2 root root 16384 Aug 25 23:43 lost+found\n\n~hchen$ sudo cat /mnt/mysnap1/id.txt\nhello world, I am a base\u003c/pre\u003e\n\u003cp\u003e我们来修改一下/mnt/mysnap1/id.txt，并加上一个snap1.txt的文件：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e~hchen$ sudo echo \u0026#34;I am snap1\u0026#34; \u0026gt;\u0026gt; /mnt/mysnap1/id.txt\n~hchen$ sudo echo \u0026#34;I am snap1\u0026#34; \u0026gt; /mnt/mysnap1/snap1.txt\n\n~hchen$ sudo cat /mnt/mysnap1/id.txt\nhello world, I am a base\nI am snap1\n\n~hchen$ sudo cat /mnt/mysnap1/snap1.txt\nI am snap1\u003c/pre\u003e\n\u003cp\u003e我们再看一下/mnt/base，你会发现没有什么变化：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e~hchen$ sudo ls /mnt/base\nid.txt      lost+found\n~hchen$ sudo cat /mnt/base/id.txt\nhello world, I am a base\u003c/pre\u003e\n\u003cp\u003e你是不是已经看到了分层镜像的样子了？\u003c/p\u003e\n\u003cp\u003e你还要吧继续在刚才的snapshot上再建一个snapshot\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e~hchen$ sudo dmsetup message /dev/mapper/hchen-thin-pool 0 \u0026#34;create_snap 2 1\u0026#34;\n~hchen$ sudo dmsetup create mysnap2 \\\n                   --table \u0026#34;0 2097152 thin /dev/mapper/hchen-thin-pool 2\u0026#34;\n\n~hchen$ sudo ll /dev/mapper/mysnap2\nlrwxrwxrwx. 1 root root 7 Aug 25 23:52 /dev/mapper/mysnap1 -\u0026gt; ../dm-7\n\n~hchen$ sudo mkdir -p /mnt/mysnap2\n~hchen$ sudo mount /dev/mapper/mysnap2 /mnt/mysnap2\n~hchen$ sudo  ls /mnt/mysnap2\nid.txt  lost+found  snap1.txt \u003c/pre\u003e\n\u003cp\u003e好了，我相信你看到了分层镜像的样子了。\u003c/p\u003e\n\u003cp\u003e看完演示，我们再来补点理论知识吧：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSnapshot来自LVM（Logic Volumn Manager），它可以在不中断服务的情况下为某个device打一个快照。\u003c/li\u003e\n\u003cli\u003eSnapshot是Copy-On-Write的，也就是说，只有发生了修改，才会对对应的内存进行拷贝。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e另外，这里有篇文章\u003ca href=\"http://searchstorage.techtarget.com/tip/Storage-thin-provisioning-benefits-and-challenges\" target=\"_blank\"\u003eStorage thin provisioning benefits and challenges\u003c/a\u003e可以前往一读。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Docker%E7%9A%84DeviceMapper\"\u003e\u003c/span\u003eDocker的DeviceMapper\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e上面基本上就是Docker的玩法了，我们可以看一下docker的loopback设备：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e~hchen $ sudo losetup -a\n/dev/loop0: [64768]:38050288 (/var/lib/docker/devicemapper/devicemapper/data)\n/dev/loop1: [64768]:38050289 (/var/lib/docker/devicemapper/devicemapper/metadata)\u003c/pre\u003e\n\u003cp\u003e其中data 100GB，metadata 2.0GB\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e~hchen $ sudo ls -alhs /var/lib/docker/devicemapper/devicemapper\n506M -rw-------. 1 root root 100G Sep 10 20:15 data\n1.1M -rw-------. 1 root root 2.0G Sep 10 20:15 metadata \u003c/pre\u003e\n\u003cp\u003e下面是相关的thin-pool。其中，有个当一大串hash串的device是正在启动的容器：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e~hchen $ sudo ll /dev/mapper/dock*\nlrwxrwxrwx. 1 root root 7 Aug 25 07:57 /dev/mapper/docker-253:0-104108535-pool -\u0026gt; ../dm-2\nlrwxrwxrwx. 1 root root 7 Aug 25 11:13 /dev/mapper/docker-253:0-104108535-deefcd630a60aa5ad3e69249f58a68e717324be4258296653406ff062f605edf -\u0026gt; ../dm-3\u003c/pre\u003e\n\u003cp\u003e我们可以看一下它的device id（Docker都把它们记下来了）：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e~hchen $ sudo cat /var/lib/docker/devicemapper/metadata/deefcd630a60aa5ad3e69249f58a68e717324be4258296653406ff062f605edf\n{\u0026#34;device_id\u0026#34;:24,\u0026#34;size\u0026#34;:10737418240,\u0026#34;transaction_id\u0026#34;:26,\u0026#34;initialized\u0026#34;:false}\u003c/pre\u003e\n\u003cp\u003edevice_id是24，size是10737418240，除以512，就是20971520 个 sector，我们用这些信息来做个snapshot看看（注：我用了一个比较大的dev id – 1024）：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e~hchen$ sudo dmsetup message \u0026#34;/dev/mapper/docker-253:0-104108535-pool\u0026#34; 0 \\\n                                    \u0026#34;create_snap 1024 24\u0026#34;\n~hchen$ sudo dmsetup create dockersnap --table \\\n                    \u0026#34;0 20971520 thin /dev/mapper/docker-253:0-104108535-pool 1024\u0026#34;\n~hchen$ sudo mkdir /mnt/docker\n~hchen$ sudo mount /dev/mapper/dockersnap /mnt/docker/\n~hchen$ sudo ls /mnt/docker/\nid lost+found rootfs\n~hchen$ sudo ls /mnt/docker/rootfs/\nbin dev etc home lib lib64 lost+found media mnt opt proc root run sbin srv sys tmp usr var\u003c/pre\u003e\n\u003cp\u003e我们在docker的容器里用findmnt命令也可以看到相关的mount的情况（因为太长，下面只是摘要）：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e# findmnt\nTARGET                SOURCE               \n/                 /dev/mapper/docker-253:0-104108535-deefcd630a60[/rootfs]\n/etc/resolv.conf  /dev/mapper/centos-root[/var/lib/docker/containers/deefcd630a60/resolv.conf]\n/etc/hostname     /dev/mapper/centos-root[/var/lib/docker/containers/deefcd630a60/hostname]\n/etc/hosts        /dev/mapper/centos-root[/var/lib/docker/containers/deefcd630a60/hosts]\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Device_Mapper_%E8%A1%8C%E4%B8%8D%E8%A1%8C%EF%BC%9F\"\u003e\u003c/span\u003eDevice Mapper 行不行？\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003eThin Provisioning的文档中说，这还处理实验阶段，不要上Production.\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003eThese targets are very much still in the EXPERIMENTAL state. Please do not yet rely on them in production.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e另外，Jeff Atwood在Twitter上发过这样的一推\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/codinghorror/status/604096348682485760\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-17214\" src=\"https://coolshell.cn/wp-content/uploads/2015/08/Jeff.Atwood.DeviceMapper.png\" alt=\"Jeff.Atwood.DeviceMapper\" width=\"607\" height=\"311\" srcset=\"https://coolshell.cn/wp-content/uploads/2015/08/Jeff.Atwood.DeviceMapper.png 607w, https://coolshell.cn/wp-content/uploads/2015/08/Jeff.Atwood.DeviceMapper-300x154.png 300w\" sizes=\"(max-width: 607px) 100vw, 607px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e这个推指向的\u003ca href=\"https://forums.docker.com/t/rmi-not-freeing-disk-space-in-devicemapper-sparse-file-centos-6-6/1640/3\" target=\"_blank\"\u003e这个讨论\u003c/a\u003e中，其中指向了这个\u003ca href=\"https://github.com/discourse/discourse_docker/commit/48f22d14f39496c8df446cbc65ee04b258c5a1a0\" target=\"_blank\"\u003ecode diff\u003c/a\u003e，基本上就是说，DeviceMapper这种东西问题太多了，我们应该把其加入黑名单。Doker的Founder也这样回复到：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/solomonstre/status/604055267303636992\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-17215\" src=\"https://coolshell.cn/wp-content/uploads/2015/08/Solomon.Hykeys.DeviceMapper.png\" alt=\"\" width=\"620\" height=\"229\" srcset=\"https://coolshell.cn/wp-content/uploads/2015/08/Solomon.Hykeys.DeviceMapper.png 620w, https://coolshell.cn/wp-content/uploads/2015/08/Solomon.Hykeys.DeviceMapper-300x111.png 300w\" sizes=\"(max-width: 620px) 100vw, 620px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e所以，如果你在使用loopback的devicemapper的话，当你的存储出现了问题后，正确的解决方案是：\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003erm -rf /var/lib/docker\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18654.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/12/docker-networking-1-150x150.png\" alt=\"记一次Kubernetes/Docker网络排障\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18654.html\" class=\"wp_rp_title\"\u003e记一次Kubernetes/Docker网络排障\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17061.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2015/08/docker-filesystems-busyboxrw-150x150.png\" alt=\"Docker基础技术：AUFS\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17061.html\" class=\"wp_rp_title\"\u003eDocker基础技术：AUFS\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17049.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2015/04/filter-150x150.png\" alt=\"Docker基础技术：Linux CGroup\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17049.html\" class=\"wp_rp_title\"\u003eDocker基础技术：Linux CGroup\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17010.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2015/04/isolation-150x150.jpg\" alt=\"Docker基础技术：Linux Namespace（上）\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17010.html\" class=\"wp_rp_title\"\u003eDocker基础技术：Linux Namespace（上）\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17029.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2015/04/jail_cell-150x150.jpg\" alt=\"Docker基础技术：Linux Namespace（下）\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17029.html\" class=\"wp_rp_title\"\u003eDocker基础技术：Linux Namespace（下）\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/22320.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2022/12/eBPF-150x150.jpeg\" alt=\"eBPF 介绍\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/22320.html\" class=\"wp_rp_title\"\u003eeBPF 介绍\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-17200\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"26cc046931\"\u003e\u003cimg id=\"rating_17200_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17200, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-11c0091b17b54cba7ed1075b-=\"\"/\u003e\u003cimg id=\"rating_17200_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17200, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-11c0091b17b54cba7ed1075b-=\"\"/\u003e\u003cimg id=\"rating_17200_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17200, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-11c0091b17b54cba7ed1075b-=\"\"/\u003e\u003cimg id=\"rating_17200_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17200, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-11c0091b17b54cba7ed1075b-=\"\"/\u003e\u003cimg id=\"rating_17200_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17200, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-11c0091b17b54cba7ed1075b-=\"\"/\u003e (\u003cstrong\u003e41\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e3.88\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_17200_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"Docker基础技术：DeviceMapper\"/\u003e\u003cmeta itemprop=\"headline\" content=\"Docker基础技术：DeviceMapper\"/\u003e\u003cmeta itemprop=\"description\" content=\"在上一篇介绍AUFS的文章中，大家可以看到，Docker的分层镜像是怎么通过UnionFS这种文件系统做到的，但是，因为Docker首选的AUFS并不在Linux的内核主干里，所以，对于非Ubuntu的Linux分发包，比如CentOS，就无法使用AUFS作为Docker的文件系统了。于是作为第二优先级的DeviceMapper就被拿出来做分层镜像的一个实现。\nDevice Mapper 简介\n...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2015-08-26T08:21:09+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2015-08-27T09:21:11+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/17200.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/17200.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"3.88\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"41\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-17200-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2015-08-26T08:21:09+08:00",
  "Author": "陈皓"
}