{
  "Source": "coolshell.cn",
  "Title": "“C++的数组不支持多态”？",
  "Link": "https://coolshell.cn/articles/9543.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"97ad6557e6d0a4f5d01caa4d-text/javascript\"\u003e\u003c/script\u003e先是在微博上看到了个\u003ca href=\"http://weibo.com/1876004965/zueproucp\" target=\"_blank\"\u003e微博\u003c/a\u003e和云风的评论，然后我回了“楼主对C的内存管理不了解”。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://coolshell.cn/wp-content/uploads/2013/04/weibo.jpg\"\u003e\u003cimg decoding=\"async\" class=\"aligncenter size-full wp-image-9544\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/04/weibo.jpg\" width=\"580\" height=\"211\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/04/weibo.jpg 580w, https://coolshell.cn/wp-content/uploads/2013/04/weibo-300x109.jpg 300w\" sizes=\"(max-width: 580px) 100vw, 580px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e后来引发了很多人的讨论，大量的人又借机来黑C++，比如：\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e//\u003ca href=\"http://weibo.com/n/Baidu-ThursdayWang\"\u003e@Baidu-ThursdayWang\u003c/a\u003e:这不就c++弱爆了的地方吗，需要记忆太多东西\u003c/p\u003e\n\u003cp\u003e//\u003ca href=\"http://weibo.com/n/%E7%BC%96%E7%A8%8B%E6%B5%AA%E5%AD%90%E5%BC%A0%E5%8F%91%E8%B4%A2\"\u003e@编程浪子张发财\u003c/a\u003e:这个跟C关系真不大。不过我得验证一下，感觉真的不应该是这样的。如果基类的析构这种情况不能 调用，就太弱了。\u003c/p\u003e\n\u003cp\u003e//\u003ca href=\"http://weibo.com/1401324585\" target=\"_blank\"\u003e@程序元\u003c/a\u003e：现在看来，当初由于毅力不够而没有深入纠缠c++语言特性的各种犄角旮旯的坑爹细枝末节，实是幸事。为现在还沉浸于这些诡异特性并乐此不疲的同志们感到忧伤。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e然后，也出现了一些乱七八糟的理解：\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-9543\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e//\u003ca href=\"http://weibo.com/n/BA5BO\"\u003e@BA5BO\u003c/a\u003e: 数组是基于拷贝的，而多态是基于指针的，派生类赋值给基类数组只是拷贝复制了一个基类新对象，当然不需要派生类析构函数\u003c/p\u003e\n\u003cp\u003e//\u003ca href=\"http://weibo.com/n/%E7%BC%96%E7%A8%8B%E6%B5%AA%E5%AD%90%E5%BC%A0%E5%8F%91%E8%B4%A2\"\u003e@编程浪子张发财\u003c/a\u003e:我突然理解是怎么回事了，这种情况下数组中各元素都是等长结构体，类型必须一致，的确没法多态。这跟C#和java不同。后两者对于引用类型存放的是对象指针。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e等等，看来我必需要写一篇博客以正视听了。\u003c/p\u003e\n\u003cp\u003e因为没有看到上下文，我就猜测讨论的可能会是下面这两种情况之一：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1) 一个Base*[]的指针数组中，存放了一堆派生类的指针，这样，你delete [] pBase; 只是把指针数组给删除了，并没有删除指针所指向的对象。这个是最基础的C的问题。你先得for这个指针数组，把数据里的对象都delete掉，然后再删除数组。很明显，这和C++没有什么关系。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）第二种可能是：Base *pBase = new Derived[n] 这样的情况。这种情况下，delete[] pBase 明显不会调用虚析构函数（当然，这并不一定，我后面会说） ，这就是上面云风回的微博。对此，我觉得如果是这个样子，这个程序员\u003cstrong\u003e完全没有搞懂C语言中的指针和数组是怎么一回事\u003c/strong\u003e，也没有搞清楚， 什么是对象，什么是对象的指针和引用，这完全就是C语言没有学好。\u003c/p\u003e\n\u003cp\u003e后来，在看到了 \u003ca href=\"http://weibo.com/n/GeniusVczh\"\u003e@GeniusVczh\u003c/a\u003e 的原文 《\u003ca id=\"viewpost1_TitleUrl\" href=\"http://www.cppblog.com/vczh/archive/2013/04/27/199765.html\"\u003e如何设计一门语言（一）——什么是坑(a)\u003c/a\u003e》最后时，才知道了说的是第二种情况。也就是下面的这个示例（我加了虚的析构函数这样方便编译）：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eclass Base\n{\n  public:\n    virtual ~B(){ cout \u0026lt;\u0026lt;\u0026#34;B::~B()\u0026#34;\u0026lt;\u0026lt;endl; }\n};\n\nclass Derived : public Base\n{\n  public:\n    virtual ~D() { cout \u0026lt;\u0026lt;\u0026#34;D::D~()\u0026#34;\u0026lt;\u0026lt;endl; }\n};\n\nBase* pBase = new Derived[10];\ndelete[] pBase;\u003c/pre\u003e\n\u003ch4\u003eC语言补课\u003c/h4\u003e\n\u003cp\u003e我先不说这段C++的程序在什么情况下能正确调用派生类的析构函数，我还是先来说说C语言，这样我在后面说这段代码时你就明白了。\u003c/p\u003e\n\u003cp\u003e对于上面的：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eBase* pBase = new Derived[10];\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e这个语言和下面的有什么不同吗？\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eDerived d[10];\n\nBase* pBase = d;\u003c/pre\u003e\n\u003cp\u003e一个是堆内存动态分配，一个是栈内存静态分配。只是内存的位置和类型不一样，在语法和使用上没有什么不一样的。（如果你把Base 和 Derived想成struct，把new想成malloc() ，你还觉得这和C++有什么关系吗？）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e那么，你觉得pBase这个指针是指向对象的，是对象的引用，还是指向一个数组的，是数组的引用？\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e于是乎，你可以想像一下下面的场景：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eint *pInt; char* pChar;\n\npInt = (int*)malloc(10*sizeof(int));\n\npChar = (char*)pInt;\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e对上面的pInt和pChar指针来说，pInt[3]和pChar[3]所指向的内容是否一样呢？当然不一样，因为int是4个字节，char是1个字节，步长不一样，所以当然不一样。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e那么再回到那个把Derived[]数组的指针转成Base类型的指针pBase，那么pBase[3]是否会指向正确的Derrived[3]呢？\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e我们来看个纯C语言的例程，下面有两个结构体，就像继承一样，我还别有用心地加了一个void *vptr，好像虚函数表一样：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e    struct A {\n        void *vptr;\n        int i;\n    };\n\n    struct B{\n        void *vptr;\n        int i;\n        char c;\n        int j;\n    }b[2] ={\n        {(void*)0x01, 100, \u0026#39;a\u0026#39;, -1},\n        {(void*)0x02, 200, \u0026#39;A\u0026#39;, -2}\n    };\n\u003c/pre\u003e\n\u003cp\u003e注意：我用的是G++编译的，在64bits平台上编译的，其中的sizeof(void*)的值是8。\u003c/p\u003e\n\u003cp\u003e我们看一下栈上内存分配：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e    struct A *pa1 = (struct A*)(b);\n\u003c/pre\u003e\n\u003cp\u003e用gdb我们可以看到下面的情况：(pa1[1]的成员的值完全乱掉了)\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"6\"\u003e(gdb) p b\n$7 = {{vptr = 0x1, i = 100, c = 97 \u0026#39;a\u0026#39;, j = -1}, {vptr = 0x2, i = 200, c = 65 \u0026#39;A\u0026#39;, j = -2}}\n(gdb) p pa1[0]\n$8 = {vptr = 0x1, i = 100}\n(gdb) p pa1[1]\n$9 = {vptr = 0x7fffffffffff, i = 2}\n\u003c/pre\u003e\n\u003cp\u003e我们再来看一下堆上的情况：（我们动态了struct B [2]，然后转成struct A *，然后对其成员操作）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e    struct A *pa = (struct A*)malloc(2*sizeof(struct B));\n    struct B *pb = (struct B*)pa；\n\n    pa[0].vptr = (void*) 0x01;\n    pa[1].vptr = (void*) 0x02;\n\n    pa[0].i = 100;\n    pa[1].i = 200;\n\u003c/pre\u003e\n\u003cp\u003e用gdb来查看一下变量，我们可以看到下面的情况：（pa没问题，但是pb[1]的内存乱掉了）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"8\"\u003e(gdb) p pa[0]\n$1 = {vptr = 0x1, i = 100}\n(gdb) p pa[1]\n$2 = {vptr = 0x2, i = 200}\n(gdb) p pb[0]\n$3 = {vptr = 0x1, i = 100, c = 0 \u0026#39;\\000\u0026#39;, j = 2}\n(gdb) p pb[1]\n$4 = {vptr = 0xc8, i = 0, c = 0 \u0026#39;\\000\u0026#39;, j = 0}\n\u003c/pre\u003e\n\u003cp\u003e可见，这完全就是C语言里乱转型造成了内存的混乱，这和C++一点关系都没有。而且，C++的任何一本书都说过，父类对象和子类对象的转型会带来严重的内存问题。\u003c/p\u003e\n\u003cp\u003e但是，如果在64bits平台下，如果把我们的structB改一下，改成如下（把struct B中的int j给注释掉）：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e    struct A {\n        void *vptr;\n        int i;\n    };\n\n    struct B{\n        void *vptr;\n        int i;\n        char c;\n        //int j; \u0026lt;---注释掉int j\n    }b[2] ={\n        {(void*)0x01, 100, \u0026#39;a\u0026#39;},\n        {(void*)0x02, 200, \u0026#39;A\u0026#39;}\n    };\n\u003c/pre\u003e\n\u003cp\u003e你就会发现，上面的内存混乱的问题都没有了，因为struct A和struct B的size是一样的：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e(gdb) p sizeof(struct A)\n$6 = 16\n(gdb) p sizeof(struct B)\n$7 = 16\u003c/pre\u003e\n\u003cp\u003e注：如果不注释int j，那么sizeof(struct B)的值是24。\u003c/p\u003e\n\u003cp\u003e这就是C语言中的内存对齐，内存对齐的原因就是为了更快的存取内存（详见《\u003ca title=\"深入理解C语言\" href=\"https://coolshell.cn/articles/5761.html\" target=\"_blank\"\u003e深入理解C语言\u003c/a\u003e》）\u003c/p\u003e\n\u003cp\u003e如果内存对齐了，而且struct A中的成员的顺序在struct B中是一样的而且在最前面话，那么就没有问题。\u003c/p\u003e\n\u003ch4\u003e再来看C++的程序\u003c/h4\u003e\n\u003cp\u003e如果你看过我5年前写的《\u003cstrong\u003e\u003ca href=\"http://blog.csdn.net/haoel/article/details/1948051\" target=\"_blank\"\u003eC++虚函数表解析\u003c/a\u003e\u003c/strong\u003e》以及《\u003cstrong\u003eC++内存对象布局 \u003ca href=\"http://blog.csdn.net/haoel/article/details/3081328\" target=\"_blank\"\u003e上篇\u003c/a\u003e、\u003ca href=\"http://blog.csdn.net/haoel/article/details/3081385\" target=\"_blank\"\u003e下篇\u003c/a\u003e\u003c/strong\u003e》，你就知道C++的标准会把虚函数表的指针放在类实例的最前面，你也就知道为什么我别有用心地在struct A和struct B前加了一个 void *vptr。C++之所以要加在最前面就是为了转型后，不会找不到虚表了。\u003c/p\u003e\n\u003cp\u003e好了，到这里，我们再来看C++，看下面的代码：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include\nusing namespace std;\n\nclass B\n{\n  int b;\n  public:\n    virtual ~B(){ cout \u0026lt;\u0026lt;\u0026#34;B::~B()\u0026#34;\u0026lt;\u0026lt;endl; }\n};\n\nclass D: public B\n{\n  int i;\n  public:\n    virtual ~D() { cout \u0026lt;\u0026lt;\u0026#34;D::~D()\u0026#34;\u0026lt;\u0026lt;endl; }\n};\n\nint main(void)\n{\n    cout \u0026lt;\u0026lt; \u0026#34;sizeB:\u0026#34; \u0026lt;\u0026lt; sizeof(B) \u0026lt;\u0026lt; \u0026#34; sizeD:\u0026#34;\u0026lt;\u0026lt; sizeof(D) \u0026lt;\u0026lt;endl;\n    B *pb = new D[2];\n\n    delete [] pb;\n\n    return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e上面的代码可以正确执行，包括调用子类的虚函数！因为内存对齐了\u003c/strong\u003e。在我的64bits的CentOS上——sizeof(B):16 ，sizeof(D):16\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e但是，如果你在class D中再加一个int成员的问题，这个程序就Segmentation fault了\u003c/strong\u003e。因为—— sizeof(B):16 ，sizeof(D):24。pb[1]的虚表找到了一个错误的内存上，内存乱掉了。\u003c/p\u003e\n\u003cp\u003e再注：我在Visual Studio 2010上做了一下测试，对于 struct 来说，其表现和gcc的是一样的，但对于class的代码来说，其可以“正确调用到虚函数”无论父类和子类有没有一样的size。\u003c/p\u003e\n\u003cp\u003e然而，在C++的标准中，下面这样的用法是undefined! 你可以看看StackOverflow上的相关问题讨论：《\u003ca title=\"Why is it undefined behavior to delete[] an array of derived objects via a base pointer?\" href=\"http://stackoverflow.com/questions/6171814/why-is-it-undefined-behavior-to-delete-an-array-of-derived-objects-via-a-base\" target=\"_blank\"\u003eWhy is it undefined behavior to delete[] an array of derived objects via a base pointer?\u003c/a\u003e》（同样，你也可以看看《More Effective C++》中的条款三）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eBase* pBase = new Derived[10];\n\ndelete[] pBase;\u003c/pre\u003e\n\u003cp\u003e所以，微软C++编程译器define这个事让我非常不解，对微软的C++编译器再度失望，看似默默地把其编译对了很漂亮，实则误导了好多人把这种undefined的东西当成defined来用，还赞扬做得好，真是令人无语。\u003cstrong\u003e（\u003c/strong\u003e\u003ca href=\"http://weibo.com/2087077260/zup0V7LLM\" target=\"_blank\"\u003e就像微博上的这个贴一样\u003c/a\u003e，说VC多么牛，还说这是OO的特性。我勒个去！\u003cstrong\u003e）\u003c/strong\u003e\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003ca href=\"https://coolshell.cn/wp-content/uploads/2013/04/hehe.png\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/04/hehe.png\" width=\"530\" height=\"173\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e现在，你终于知道Base* pBase = new Derived[10];这个问题是C语言的转型的问题，你也应该知道用于数组的指针是怎么回事了吧？\u003cstrong\u003e这是一个很奇葩的代码！请你不要像那些人一样在微博上和这里的评论里高呼并和我理论到：“微软的C++编译器支持这个事！”。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e最后，我越来越发现，\u003cspan style=\"color: #cc0000; font-size: 14px;\"\u003e\u003cstrong\u003e很多说C++难用的人，其实是不懂C语言\u003c/strong\u003e\u003c/span\u003e。\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/07/api-design-300x278-2-150x150.jpg\" alt=\"API设计原则 – Qt官网的设计实践总结\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_title\"\u003eAPI设计原则 – Qt官网的设计实践总结\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"Leetcode 编程训练\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_title\"\u003eLeetcode 编程训练\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8088.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/7.jpg\" alt=\"对技术的态度\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8088.html\" class=\"wp_rp_title\"\u003e对技术的态度\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/5388.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/15.jpg\" alt=\"C语言中史上最愚蠢的Bug\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/5388.html\" class=\"wp_rp_title\"\u003eC语言中史上最愚蠢的Bug\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/4990.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2011/07/programmer-150x150.png\" alt=\"程序员技术练级攻略\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/4990.html\" class=\"wp_rp_title\"\u003e程序员技术练级攻略\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-9543\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"04111491c3\"\u003e\u003cimg id=\"rating_9543_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9543, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-97ad6557e6d0a4f5d01caa4d-=\"\"/\u003e\u003cimg id=\"rating_9543_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9543, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-97ad6557e6d0a4f5d01caa4d-=\"\"/\u003e\u003cimg id=\"rating_9543_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9543, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-97ad6557e6d0a4f5d01caa4d-=\"\"/\u003e\u003cimg id=\"rating_9543_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9543, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-97ad6557e6d0a4f5d01caa4d-=\"\"/\u003e\u003cimg id=\"rating_9543_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9543, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-97ad6557e6d0a4f5d01caa4d-=\"\"/\u003e (\u003cstrong\u003e52\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.25\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_9543_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"“C++的数组不支持多态”？\"/\u003e\u003cmeta itemprop=\"headline\" content=\"“C++的数组不支持多态”？\"/\u003e\u003cmeta itemprop=\"description\" content=\"先是在微博上看到了个微博和云风的评论，然后我回了“楼主对C的内存管理不了解”。\n\n\n\n后来引发了很多人的讨论，大量的人又借机来黑C++，比如：\n//@Baidu-ThursdayWang:这不就c++弱爆了的地方吗，需要记忆太多东西\n\n//@编程浪子张发财:这个跟C关系真不大。不过我得验证一下，感觉真的不应该是这样的。如果基类的析构这种情况不能 调用，就太弱了。\n\n//@程序元：...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2013-04-29T16:17:40+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2013-05-10T05:01:30+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/9543.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/9543.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.25\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"52\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-9543-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2013-04-29T16:17:40+08:00",
  "Author": "陈皓"
}