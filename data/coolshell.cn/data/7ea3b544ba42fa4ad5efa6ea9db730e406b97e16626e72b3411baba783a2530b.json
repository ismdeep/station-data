{
  "Source": "coolshell.cn",
  "Title": "少即是极多",
  "Link": "https://coolshell.cn/articles/7771.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"b4fa001b9c66a5c04c8ee77c-text/javascript\"\u003e\u003c/script\u003e【\u003cspan style=\"color: #cc0000;\"\u003e\u003cstrong\u003e感谢网友 \u003ca href=\"https://twitter.com/#!/innocentim\" target=\"_blank\"\u003e@innocentim\u003c/a\u003e\u003c/strong\u003e (Twitter)\u003cstrong\u003e 投稿\u003c/strong\u003e\u003c/span\u003e】\u003c/p\u003e\n\u003cp\u003e这是一篇翻译练习。力图保留原意。若有不准确处，求速速指出。\u003ca href=\"https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html\" target=\"_blank\"\u003e猛击此处\u003c/a\u003e（墙）看原文。作者为Rob Pike，贝尔实验室来的大牛，现在就职于Google。他主导了Go语言的创建工作。下面是正文——\u003c/p\u003e\n\u003cp style=\"text-align: center; font-size: 9pt;\"\u003e\u003cspan style=\"color: #999999;\"\u003e——————————————正文分隔线——————————————\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" class=\"alignright size-full wp-image-7818\" title=\"Less is More\" src=\"https://coolshell.cn/wp-content/uploads/2012/06/Less-is-More-Box-ShopTab-300x282.jpg\" alt=\"\" width=\"300\" height=\"282\" srcset=\"https://coolshell.cn/wp-content/uploads/2012/06/Less-is-More-Box-ShopTab-300x282.jpg 300w, https://coolshell.cn/wp-content/uploads/2012/06/Less-is-More-Box-ShopTab-300x282-287x270.jpg 287w\" sizes=\"(max-width: 300px) 100vw, 300px\"/\u003e这是我在2012年6月的Go SF上演讲的文本。\u003c/p\u003e\n\u003cp\u003e这是一个个人演讲。 我承认，虽然面前的团队让Go诞生并延续，但是我的观点并不代表任何其他Go语言小组成员的意见。 我也想感谢Go SF的组织者提供这个和你们交流的机会。\u003c/p\u003e\n\u003cp\u003e几星期前我被问起:“你在推出Go的过程中遇到的最大的惊奇是什么？”我立即意识到了答案: 虽然我们希望C++程序员意识到Go是个较好的选择，但是令人意外的是，大多数Go程序员来自Python和Ruby这样的动态语言，而很少有来自C++的。\u003c/p\u003e\n\u003cp\u003e我们——Ken，Robert和我——是C++程序员(译者: Ken也用C++？)，当时在为解决我们所写的这类软件产生的问题设计一个新的语言。 这似乎有点自相矛盾，因为别的C++程序员根本不关心这些问题，更不会去设计一个语言。\u003c/p\u003e\n\u003cp\u003e我今天想说的是关于那些激发我们创造Go的事情，和为什么它本不应令我们如此惊讶。 我保证这些内容更多与Go相关而不是C++，所以即使你不很了解C++你也能跟得上。\u003c/p\u003e\n\u003cp\u003e回答可以这样归结: 你认为”少即是多”呢，还是”少就是少”？\u003c/p\u003e\n\u003cp\u003e这里有个比喻，将以真实故事的形式给出。 贝尔实验室中心原来发放3位数号码: 物理研究是111，计算科学研究是127，如此这般。 1980年代早期，一个便笺飞过来说”鉴于你们对研究的理解有所加深，将为你们的号码多加上一位，以便更好地体现你们的工作”。 所以我们中心的号码变成了1127。 Ron Hardin半当真地开玩笑说如果我们真的理解我们的世界更好一点的话，我们将丢掉一位数字，将127变成27。 当然主管没听到这个笑话(这也不是我们希望的)，但是我想这里面有点值得思考的东西。 少即是多。 你理解得越好，你将变得越简洁。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-7771\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e先记住这句话。\u003c/p\u003e\n\u003cp\u003e回到2007年9月，我在做一个庞大的Google C++项目的细微但核心的部分。 开发必须交互进行，但是我这部分在我们的Google编译集群上要编译45分钟。 同时，有个消息传过来说一群在C++社区的Google员工将开一场讲座，介绍即将到来的C++0x(现在称为C++11)。\u003c/p\u003e\n\u003cp\u003e在那场持续一小时的讲座中，我们听说了诸如计划中的35个新特性的说法——事实上还有更多，但是那场讲座只说有35个。 有些特性当然是细微的，但是讲座中谈到的至少是足够重要的。 提到的特性中，有些十分微妙并难以理解，比如右值引用(rvalue references); 有些特别符合C++范儿，比如可变参数模板(variadic templates); 还有些十分疯狂，比如用户定义的字面量(user-defined literals)。\u003c/p\u003e\n\u003cp\u003e那时候我问了自己一个问题: C++社区真的觉得C++错在没有足够多的特性么？ 显然，从Ron Hardin的笑话的角度看，简化语言将比添加新特性取得更好的效果。 当然，对C++来说这很不靠谱，但是先记住这点。\u003c/p\u003e\n\u003cp\u003e在这场讲座的几个月之前我做了一场讲座(你可以通过\u003ca href=\"https://video.google.com/videoplay？docid=810232012617965344\" target=\"_blank\"\u003eYouTube\u003c/a\u003e看到)，讲的是一个我1980年代做的一个玩具并发编程语言。 这个语言叫\u003ca href=\"ftp://cs.bell-labs.com/cm/cs/who/rsc/thread/newsqueak.pdf\" target=\"_blank\"\u003eNewsqueak\u003c/a\u003e，而且显然地，它成为了Go的前身。\u003c/p\u003e\n\u003cp\u003e在我在Google工作的过程中，我发现我丢掉了Newsqueak中的一些点子。 现在我将重新思考它们，所以我才做了那场讲座。 我相信它们会让服务器端编程变得更容易，而且Google能真正从中获益。\u003c/p\u003e\n\u003cp\u003e我真的尝试将这些点子加入到C++中，可惜失败了。 我实在难以将一组并发操作融入到C++的控制流程中去——当真融进去的话，它们将变得十分丑陋，从而难以看到优越性。 另外，C++将它变得十分臃肿(虽然我从来没真正发现C++苗条过)。 所以我放弃了这个想法。\u003c/p\u003e\n\u003cp\u003e但是C++0x的讲座使我再次思考。 一件事十分困扰我——我相信也困扰着Ken和Robert——C++的新内存模型居然新增了原子类型。 为这个不堪重负的类型系统加上这么个细致精巧到极致类型机制十分的不靠谱，不是么？ 将语言和今日的硬件绑在一起似乎有点目光短浅并且不明智，因为硬件过几年就有大变。\u003c/p\u003e\n\u003cp\u003e那场C++0x讲座结束之后，我们回到办公室。 我开始了另一个编译(译者笑)，转过转过我的椅子，面对Robert，然后开始问一些尖锐的问题。 在编译完成之前，我们拉拢了Ken，并决定做些什么。 我们再也不想写C++了，并且我们——尤其是我——在写Google代码时，想让并发拿来就用。 同时我们也想解决”大系统编程”的问题，容后细说。\u003c/p\u003e\n\u003cp\u003e我们在白板上写下一组我们需要的东西——迫切需要的那种。 我们规划出大体的轮廓，忽略了语法细节和语义。\u003c/p\u003e\n\u003cp\u003e我仍然有一条碉堡了的那周的邮件线索。 这是一些摘录:\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eRobert\u003c/strong\u003e: 起点: C，修补一些显而易见的瑕疵，去除繁杂的东西。 新增一些特性。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRob\u003c/strong\u003e: 命名为’go’。 你可以为这个名字编造各种理由，但是它确实拥有很多好的特性。 它短小，易于打出。 工具么: goc，gol，goa。 如果有个交互式调试器/解释器，可以直接叫’go’。 代码后缀是。go。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRobert\u003c/strong\u003e: 空接口: interface {}。 将被所有接口实现(译者: 原文如此)，并且可以取代void*。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e我们并没有立即全部设计出来。 比如我们花了一年多才设计出了数组(array)和切片(slice)。 不过相当一部分重要的设计在最初的几天中浮现。\u003c/p\u003e\n\u003cp\u003e注意到Robert说C是起点，并非C++。 对于这点我不是很确定，不过我相信他说的是C，因为Ken在场(译者笑)。 但是最后我们并没有从C开始，这倒是真的。 我们从最初的草稿开始，仅仅从其它语言中借鉴琐碎的东西，比如运算符，各种括号和一些常见的关键字。(当然我们也借鉴了我们所知道的语言中的思想。)不管怎么说，我们破而后立，从头做起，以此来响应C++。 我们并非想做一个更好的C++，甚至不是一个更好的C。 它仅仅是一个对我们所关心的软件来说更好的语言。\u003c/p\u003e\n\u003cp\u003e最后，我们得到了既不同于C也不同于C++的东西，甚至比许多人意识到的还要不同。 我列了一个对于C和C++的Go的重要的简化的列表:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e常规的语法(不需要一个符号表来辅助解析)\u003c/li\u003e\n\u003cli\u003eGC机制(仅仅是GC)\u003c/li\u003e\n\u003cli\u003e没有头文件\u003c/li\u003e\n\u003cli\u003e显式依赖关系\u003c/li\u003e\n\u003cli\u003e没有循环依赖\u003c/li\u003e\n\u003cli\u003e数字常量仅仅是数字(译者: 没有类型)\u003c/li\u003e\n\u003cli\u003eint和int32不是同种类型\u003c/li\u003e\n\u003cli\u003e字母大小写将确定可见性\u003c/li\u003e\n\u003cli\u003e任何类型都可以有方法(没有类)\u003c/li\u003e\n\u003cli\u003e没有子类型继承(没有子类)\u003c/li\u003e\n\u003cli\u003e包级别的初始化和良好定义的初始化顺序\u003c/li\u003e\n\u003cli\u003e同一个包的文件一起编译\u003c/li\u003e\n\u003cli\u003e包级别的全局定义可以以任意顺序进行\u003c/li\u003e\n\u003cli\u003e没有算术类型转换(常量可以弥补)\u003c/li\u003e\n\u003cli\u003e接口是隐式实现的(没有”implements”声明)\u003c/li\u003e\n\u003cli\u003e嵌入的结构体(没有类型提升和子类)\u003c/li\u003e\n\u003cli\u003e方法像函数一样定义(不必定义在特殊的地方)\u003c/li\u003e\n\u003cli\u003e方法就是函数\u003c/li\u003e\n\u003cli\u003e接口就是方法(没有数据)\u003c/li\u003e\n\u003cli\u003e方法仅仅靠名字匹配(不是靠类型)\u003c/li\u003e\n\u003cli\u003e没有构造函数和析构函数\u003c/li\u003e\n\u003cli\u003e后置增量/减量运算符仅仅是语句，而不是表达式\u003c/li\u003e\n\u003cli\u003e没有前置增量/减量运算符\u003c/li\u003e\n\u003cli\u003e赋值号是语句，不是表达式\u003c/li\u003e\n\u003cli\u003e表达式求值顺序在赋值和函数调用时确定(没有所谓的”sequence point”)\u003c/li\u003e\n\u003cli\u003e没有指针算术\u003c/li\u003e\n\u003cli\u003e内存总是初始化为0\u003c/li\u003e\n\u003cli\u003e对本地变量取地址是合法的\u003c/li\u003e\n\u003cli\u003e方法中没有叫this的指针\u003c/li\u003e\n\u003cli\u003e分段式栈\u003c/li\u003e\n\u003cli\u003e没有常量或其它类型的注记\u003c/li\u003e\n\u003cli\u003e没有模板\u003c/li\u003e\n\u003cli\u003e没有异常\u003c/li\u003e\n\u003cli\u003e内建字符串，切片和映射(map)\u003c/li\u003e\n\u003cli\u003e数组边界检查\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e并且，我相信通过这一系列的简化，Go将比C或C++更具有表现力。 少即是多。\u003c/p\u003e\n\u003cp\u003e但是我们没法一下子把所有部分都做出来。 我们需要构建最基础的部分，比如说类型系统的表示，能良好应用于实际的语法，和一些无法形容的但能让库更容易相互操作的东西。\u003c/p\u003e\n\u003cp\u003e我们同样增加了C或C++中没有的东西，比如切片和映射，组合字面量(？)，文件顶层的表达式(这虽是件大事，但是几乎不为人知)，反射机制，GC等等。 自然，还有并发。\u003c/p\u003e\n\u003cp\u003e一个显眼的缺少的东西是类型的继承。 请允许我粗暴地对待它一分钟。\u003c/p\u003e\n\u003cp\u003e早先构建Go的时候有人跟我说，他无法想象用一门没有泛型的语言工作。 正如我在别处说明的那样，我觉得这是个很诡异的言论。\u003c/p\u003e\n\u003cp\u003e公平起见，他用自己的话说可能是他真的很喜欢C++中STL的那些容器。 以辩论为目的的话，我们来正面看看他的言论。\u003c/p\u003e\n\u003cp\u003e他说的意味着: 他发现写一个容器，比如以int为元素类型的链表，或字符串映射是一种不能忍的重负。 我发现这是个很诡异的言论，因为我几乎没把时间花在那些个问题上，即使我在用没有泛型的语言。\u003c/p\u003e\n\u003cp\u003e但是，更重要的是，他说的那些表示\u003cem\u003e类型系统\u003c/em\u003e将会解除这种负担。 \u003cem\u003e类型系统\u003c/em\u003e。 不是多态函数，或语言级原语，或其它类型的辅助手段(helpers)，而仅仅是\u003cem\u003e类型系统\u003c/em\u003e。\u003c/p\u003e\n\u003cp\u003e这就是粘住我的那个细节。\u003c/p\u003e\n\u003cp\u003e从C++或Java来Go的程序员怀念和类型系统在一起的日子，特别是带继承和子类的那部分。 也许我在类型系统方面是粗暴了些，但是我绝不觉得那套玩意非常具有表现力。\u003c/p\u003e\n\u003cp\u003e我已故的朋友Alain Fournier一次告诉我说他认为学术工作的最底层是分类学。 然后信不信由你，类型继承正是分类学。 你必须决定哪个萝卜扔哪个坑里，每个类型的父类型，A是否继承B或者B是否继承A。 一个可排序的数组是一个带有sort方法的数组呢，还是一个长得像数组的排序器呢？ 如果你觉得类型系统能解决所有设计上的问题，你必须做出这个无意义的选择。\u003c/p\u003e\n\u003cp\u003e我相信对编程来说那是个荒诞的思路。 真正的重点不在于事物之间的继承关系，而在于它们能提供些什么。\u003c/p\u003e\n\u003cp\u003e因此，接口这个概念进入了Go。 但是它们都是主要部分——真正的Go之道——的一部分。\u003c/p\u003e\n\u003cp\u003e如果C++和Java注重类型继承和类型系统的分类学，那末Go就注重组合。\u003c/p\u003e\n\u003cp\u003eDoug Mcilroy，Unix管道的最终发明人，在1964年(!)写道:\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e我们应该有一些机制能将程序耦合(串)起来，像花园软管那样——当我们需要另一种方式传送数据时，拧紧另外一段即可。 I/O也可以这么做。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e这也是Go所提倡的道路。 Go吸收这个观点，然后把它推进得十分远。 这是一门关于(功能上的)组合和(调用上的)耦合的语言。\u003c/p\u003e\n\u003cp\u003e一个显然的例子是接口是组合各部分的途径。 关键是，那些部分是什么并不重要，如果某类型实现了M方法我就可以把这个方法填到接口里去。\u003c/p\u003e\n\u003cp\u003e另一个重要的例子是如何让并发性提供给我们不同的独立计算部分的组合。\u003c/p\u003e\n\u003cp\u003e并且还有一种不同寻常(但十分简单)的类型组合形式: 嵌入。\u003c/p\u003e\n\u003cp\u003e————————————————————————\u003c/p\u003e\n\u003cp\u003e我想提一个和之前不太相关的Go设计: Go被设计为大型团队用来写大型程序的语言。\u003c/p\u003e\n\u003cp\u003e这里有个概念是”大型编程”，并且不知何故C++和Java主宰了这个领域。 我相信这只是因为其历史巧合，或者是工业上的巧合。 但是被广泛接纳的观点是他们和面向对象设计有关。\u003c/p\u003e\n\u003cp\u003e我压根不相信这点。 大型软件需要确定的方法，但是更重要的是它需要强依赖性管理，干净的接口抽象和优越的文档工具。 C++没一点做得好的(虽然Java明显要好很多)。\u003c/p\u003e\n\u003cp\u003e我们还不知道Go语言能做到何种程度，因为现在还没有足够的软件是用Go写的。 但是我非常有信心于Go将会成为一个优越的大型编程语言。 时间会说明一切的。\u003c/p\u003e\n\u003cp\u003e————————————————————————\u003c/p\u003e\n\u003cp\u003e现在，回到我们演讲开始提的那个问题:\u003c/p\u003e\n\u003cp\u003e为什么Go，作为从头被设计为符合C++使用者习惯的语言，没有吸引很多C++程序员？\u003c/p\u003e\n\u003cp\u003e严肃点说，我觉得是因为Go和C++在哲学方面有着巨大的不同。\u003c/p\u003e\n\u003cp\u003eC++是将所有东西提到你指尖上(译者: 即多范式)。 我在C++11的FAQ上找到了这段引用:\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003eC++能优雅地，灵活地，零损耗地(相比于手工操纵代码)表达抽象的能力大幅提升了。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eGo并非这种”围绕式”的。 你并不需要所有的东西都内建好。 你不需要对每个执行细节进行精细的控制。 比如，你不需要RAII，但你拥有一个垃圾回收器，也意味着你不需要执行释放内存的操作。\u003c/p\u003e\n\u003cp\u003e你得到的是一组非常强有力但易于理解，易于用来构建积木的功能，这些积木可以用来组合出一个你需要的问题的解法。 这并不意味着它能像别的一些语言创造的解法一样快速，复杂，或带来思想上的激励，但是它总能保证易于书写，易于阅读，易于理解，易于维护，而且可能更安全。\u003c/p\u003e\n\u003cp\u003e从另一个角度说，这当然算作过度简化:\u003c/p\u003e\n\u003cp\u003ePython和Ruby程序员转到Go，因为他们不需要牺牲表达能力，却获得了性能的提升，并且能好好玩并发系统了。\u003c/p\u003e\n\u003cp\u003eC++程序员\u003cem\u003e并没有\u003c/em\u003e转到Go是因为他们好不容易获得了对程序的精细控制，并且不想牺牲它们的任何一部分。 对他们而言，写软件不仅包括把事情做完，而且包括用特定的方式完成。\u003c/p\u003e\n\u003cp\u003e关键是，在将来，Go的成功将会颠覆他们的世界观。\u003c/p\u003e\n\u003cp\u003e并且从一开始我们就应该意识到这点。 对于C++11的新特性很兴奋的人们并不关心一个拥有如此少特性的语言。 即使最后他提供了如此多。\u003c/p\u003e\n\u003cp\u003e谢谢。\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8088.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/7.jpg\" alt=\"对技术的态度\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8088.html\" class=\"wp_rp_title\"\u003e对技术的态度\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/7965.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/07/fork01jpg-150x150.jpg\" alt=\"一个fork的面试题\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/7965.html\" class=\"wp_rp_title\"\u003e一个fork的面试题\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/4990.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2011/07/programmer-150x150.png\" alt=\"程序员技术练级攻略\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/4990.html\" class=\"wp_rp_title\"\u003e程序员技术练级攻略\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/4102.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/25.jpg\" alt=\"如何学好C语言\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/4102.html\" class=\"wp_rp_title\"\u003e如何学好C语言\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/1761.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2009/11/spell_it_with_e-150x150.jpg\" alt=\"Go语言源码的一个改动\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/1761.html\" class=\"wp_rp_title\"\u003eGo语言源码的一个改动\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-7771\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"01fc9efbfe\"\u003e\u003cimg id=\"rating_7771_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(7771, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b4fa001b9c66a5c04c8ee77c-=\"\"/\u003e\u003cimg id=\"rating_7771_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(7771, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b4fa001b9c66a5c04c8ee77c-=\"\"/\u003e\u003cimg id=\"rating_7771_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(7771, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b4fa001b9c66a5c04c8ee77c-=\"\"/\u003e\u003cimg id=\"rating_7771_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(7771, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b4fa001b9c66a5c04c8ee77c-=\"\"/\u003e\u003cimg id=\"rating_7771_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(7771, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b4fa001b9c66a5c04c8ee77c-=\"\"/\u003e (\u003cstrong\u003e31\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.29\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_7771_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"少即是极多\"/\u003e\u003cmeta itemprop=\"headline\" content=\"少即是极多\"/\u003e\u003cmeta itemprop=\"description\" content=\"【感谢网友 @innocentim (Twitter) 投稿】\n\n这是一篇翻译练习。力图保留原意。若有不准确处，求速速指出。猛击此处（墙）看原文。作者为Rob Pike，贝尔实验室来的大牛，现在就职于Google。他主导了Go语言的创建工作。下面是正文——\n——————————————正文分隔线——————————————\n这是我在2012年6月的Go SF上演讲的文本。\n\n这是一个个...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2012-07-05T08:12:25+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2012-07-05T09:32:29+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/7771.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"Tim Shen\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/7771.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.29\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"31\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-7771-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2012-07-05T08:12:25+08:00",
  "Author": "Tim Shen"
}