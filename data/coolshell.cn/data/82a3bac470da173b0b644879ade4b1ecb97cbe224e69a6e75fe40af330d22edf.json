{
  "Source": "coolshell.cn",
  "Title": "C语言的谜题",
  "Link": "https://coolshell.cn/articles/945.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"173ccb29d738596ed2a5143a-text/javascript\"\u003e\u003c/script\u003e这几天，本站推出了几篇关于C语言的很多文章如下所示：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e语言的歧义\u003c/strong\u003e [\u003ca href=\"https://coolshell.cn/articles/830.html\" target=\"_blank\"\u003e酷壳链接\u003c/a\u003e] [\u003ca href=\"http://blog.csdn.net/haoel/archive/2009/05/18/4197010.aspx\" target=\"_blank\"\u003eCSDN链接\u003c/a\u003e]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e谁说C语言很简单？\u003c/strong\u003e [\u003ca href=\"https://coolshell.cn/articles/873.html\" target=\"_blank\"\u003e酷壳链接\u003c/a\u003e] [\u003ca href=\"http://blog.csdn.net/haoel/archive/2009/05/26/4217950.aspx\" target=\"_blank\"\u003eCSDN链接\u003c/a\u003e]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e6个变态的C语言Hello World程序\u003c/strong\u003e [\u003ca href=\"https://coolshell.cn/articles/914.html\" target=\"_blank\"\u003e酷壳链接\u003c/a\u003e] [\u003ca href=\"http://blog.csdn.net/haoel/archive/2009/05/26/4217565.aspx\" target=\"_blank\"\u003eCSDN链接\u003c/a\u003e]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e如何加密/弄乱C源代码\u003c/strong\u003e [\u003ca href=\"https://coolshell.cn/articles/933.html\" target=\"_blank\"\u003e酷壳链接\u003c/a\u003e] [\u003ca href=\"http://blog.csdn.net/haoel/archive/2009/05/30/4225974.aspx\" target=\"_blank\"\u003eCSDN链接\u003c/a\u003e]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eC语言的谜题\u003c/strong\u003e [\u003ca href=\"https://coolshell.cn/articles/945.html\" target=\"_blank\"\u003e酷壳链接\u003c/a\u003e] [\u003ca href=\"http://blog.csdn.net/haoel/archive/2009/06/01/4231029.aspx\" target=\"_blank\"\u003eCSDN链接\u003c/a\u003e]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e我们可以看到很多C语言相关的一些东西。比如《语言的歧义》主要告诉了大家C语言中你意想不到的错误以及一些歧义上的东西。而《谁说C语言很简单》则通过一些看似你从来不可能写出的代码来告诉大家C语言并不是一件容易事情。《6个变态的hello world》和《如何弄乱C的源代码》则以一种极端的方式告诉大家，不要以为咱们自己写不出混乱的代码，每个程序员其实都有把代码搞得一团乱的潜质。通过这些文章，相信你对编程或是你觉得很简单的C语言有了一些了解。是的，很不容易吧，以前是不是低估了编程和C语言？今天是否我们又在低估C++和Java呢？\u003c/p\u003e\n\u003cp\u003e本篇文章《C语言的谜题》展示了14个C语言的迷题以及答案，代码应该是足够清楚的，而且我也相信有相当的一些例子可能是我们日常工作可能会见得到的。通过这些迷题，希望你能更了解C语言。如果你不看答案，不知道是否有把握回答各个谜题？让我们来试试。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-945\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e1、下面的程序并不见得会输出 hello-std-out，你知道为什么吗？\u003c/strong\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\n#include \u0026lt;unistd.h\u0026gt;\nint main()  \n{\n    while(1)\n    {\n        fprintf(stdout,\u0026#34;hello-std-out\u0026#34;);\n        fprintf(stderr,\u0026#34;hello-std-err\u0026#34;);\n        sleep(1);\n    }\n    return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e参考答案\u003c/strong\u003e：stdout和stderr是不是同设备描述符。stdout是块设备，stderr则不是。对于块设备，只有当下面几种情况下才会被输入，1）遇到回车，2）缓冲区满，3）flush被调用。而stderr则不会。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e2、下面的程序看起来是正常的，使用了一个逗号表达式来做初始化。\u003c/strong\u003e可惜这段程序是有问题的。你知道为什么呢？\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\n\nint main()\n{\n    int a = 1,2;\n    printf(\u0026#34;a : %d\\n\u0026#34;,a);\n    return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e参考答案\u003c/strong\u003e：这个程序会得到编译出错（语法出错），逗号表达式是没错，可是在初始化和变量声明时，逗号并不是逗号表达式的意义。这点要区分，要修改上面这个程序，你需要加上括号： int a = (1,2);\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e3、下面的程序会有什么样的输出呢？\u003c/strong\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\nint main()\n{\n    int i=43;\n    printf(\u0026#34;%d\\n\u0026#34;,printf(\u0026#34;%d\u0026#34;,printf(\u0026#34;%d\u0026#34;,i)));\n    return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e参考答案\u003c/strong\u003e：程序会输出4321，你知道为什么吗？要知道为什么，你需要知道printf的返回值是什么。printf返回值是输出的字符个数。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e4、下面的程序会输出什么？\u003c/strong\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\nint main()  \n{\n    float a = 12.5;\n    printf(\u0026#34;%d\\n\u0026#34;, a);\n    printf(\u0026#34;%d\\n\u0026#34;, (int)a);\n    printf(\u0026#34;%d\\n\u0026#34;, *(int *)\u0026amp;a);\n    return 0;  \n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e参考答案\u003c/strong\u003e：\u003cbr/\u003e\n该项程序输出如下所示，\u003cbr/\u003e\n0\u003cbr/\u003e\n12\u003cbr/\u003e\n1095237632\u003cbr/\u003e\n原因是：浮点数是4个字节，12.5f 转成二进制是：01000001010010000000000000000000，十六进制是：0x41480000，十进制是：1095237632。所以，第二和第三个输出相信大家也知道是为什么了。而对于第一个，为什么会输出0，我们需要了解一下float和double的内存布局，如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003efloat\u003c/strong\u003e: 1位符号位(s)、8位指数(e)，23位尾数(m,共32位) \u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003edouble\u003c/strong\u003e: 1位符号位(s)、11位指数(e)，52位尾数(m,共64位)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e然后，我们还需要了解一下printf由于类型不匹配，所以，会把float直接转成double，注意，12.5的float和double的内存二进制完全不一样。别忘了在x86芯片下使用是的反字节序，高位字节和低位字位要反过来。所以：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003efloat版\u003c/strong\u003e：0x41480000 (在内存中是：00 00 48 41)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003edouble版\u003c/strong\u003e：0x4029000000000000 (在内存中是：00 00 00 00 00 00 29 40)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e而我们的%d要求是一个4字节的int，对于double的内存布局，我们可以看到前四个字节是00，所以输出自然是0了。\u003c/p\u003e\n\u003cp\u003e这个示例向我们说明printf并不是类型安全的，这就是为什么C++要引如cout的原因了。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e5、下面，我们再来看一个交叉编译的事情，下面的两个文件可以编译通过吗？如果可以通过，结果是什么？\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003efile1.c \u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e  int arr[80];\n\u003c/pre\u003e\n\u003cp\u003efile2.c \u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eextern int *arr;\nint main()  \n{      \n    arr[1] = 100;\n    printf(\u0026#34;%d\\n\u0026#34;, arr[1]);\n    return 0;  \n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e参考答案\u003c/strong\u003e：该程序可以编译通过，但运行时会出错。为什么呢？原因是，在另一个文件中用 extern int *arr来外部声明一个数组并不能得到实际的期望值，因为他们的类型并不匹配。所以导致指针实际并没有指向那个数组。注意：一个指向数组的指针，并不等于一个数组。修改：extern int arr[]。（参考：ISO C语言 6.5.4.2 节）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e6、请说出下面的程序输出是多少？并解释为什么？\u003c/strong\u003e（注意，该程序并不会输出 “b is 20″）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\nint main()  \n{      \n    int a=1;      \n    switch(a)      \n    {   \n        int b=20;          \n        case 1: \n            printf(\u0026#34;b is %d\\n\u0026#34;,b);\n            break;\n        default:\n            printf(\u0026#34;b is %d\\n\u0026#34;,b);\n            break;\n    }\n    return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e参考答案\u003c/strong\u003e：该程序在编译时，可能会出现一条warning: unreachable code at beginning of switch statement。我们以为进入switch后，变量b会被初始化，其实并不然，因为switch-case语句会把变量b的初始化直接就跳过了。所以，程序会输出一个随机的内存值。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e7、请问下面的程序会有什么潜在的危险？\u003c/strong\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\nint main()  \n{      \n    char str[80];\n    printf(\u0026#34;Enter the string:\u0026#34;);\n    scanf(\u0026#34;%s\u0026#34;,str);\n    printf(\u0026#34;You entered:%s\\n\u0026#34;,str);\n    return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e参考答案\u003c/strong\u003e：本题很简单了。这个程序的潜在问题是，如果用户输入了超过80个长度的字符，那么就会有数组越界的问题了，你的程序很有可以及会crash了。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e8、请问下面的程序输出什么？\u003c/strong\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\nint main()  \n{\n    int i;\n    i = 10;\n    printf(\u0026#34;i : %d\\n\u0026#34;,i);\n    printf(\u0026#34;sizeof(i++) is: %d\\n\u0026#34;,sizeof(i++));\n    printf(\u0026#34;i : %d\\n\u0026#34;,i);\n    return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e参考答案\u003c/strong\u003e：如果你觉得输出分别是，10，4，11，那么你就错了，错在了第三个，第一个是10没有什么问题，第二个是4，也没有什么问题，因为是32位机上一个int有4个字节。但是第三个为什么输出的不是11呢？居然还是10？原因是，sizeof不是一个函数，是一个操作符，其求i++的类型的size，这是一件可以在程序运行前（编译时）完全的事情，所以，sizeof(i++)直接就被4给取代了，在运行时也就不会有了i++这个表达式。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e9、请问下面的程序的输出值是什么？\u003c/strong\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\n#include \u0026lt;stdlib.h\u0026gt;\n\n#define SIZEOF(arr) (sizeof(arr)/sizeof(arr[0]))\n#define PrintInt(expr) printf(\u0026#34;%s:%d\\n\u0026#34;,#expr,(expr))\n\nint main()\n{\n    /* The powers of 10 */\n    int pot[] = {\n                    0001,\n                    0010,\n                    0100,\n                    1000\n                };\n\n    int i;\n    for(i=0;i\u0026lt;SIZEOF(pot);i++)\n        PrintInt(pot[i]);\n        \n    return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e参考答案\u003c/strong\u003e：好吧，如果你对于PrintInt这个宏有问题的话，你可以去看一看《\u003ca href=\"https://coolshell.cn/articles/830.html\"\u003e语言的歧义\u003c/a\u003e》中的第四个示例。不过，本例的问题不在这里，本例的输出会是：1，8，64，1000，其实很简单了，以C/C++中，以0开头的数字都是八进制的。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e10、请问下面的程序输出是什么？（绝对不是10）\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e#include \u003cstdio.h\u003e\n#define PrintInt(expr) printf(\u0026#34;%s : %dn\u0026#34;,#expr,(expr))\n\nint main()  \n{\n    int y = 100;\n    int *p;\n    p = malloc(sizeof(int));\n    *p = 10;\n    y = y/*p; /*dividing y by *p */;\n    PrintInt(y);\n    return 0;\n}\n\u003c/stdio.h\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e参考答案\u003c/strong\u003e：本题输出的是100。为什么呢？问题就出在 y = y/*p;上了，我们本来想的是 y / (*p) ，然而，我们没有加入空格和括号，结果y/*p中的 /*被解释成了注释的开始。于是，这也是整个恶梦的开始。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e11、下面的输出是什么？\u003c/strong\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\nint main()  \n{\n    int i = 6;\n    if( ((++i \u0026lt; 7) \u0026amp;\u0026amp; ( i++/6)) || (++i \u0026lt;= 9))\n        ;\n\n    printf(\u0026#34;%d\\n\u0026#34;,i);\n    return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e参考答案\u003c/strong\u003e：本题并不简单的是考前缀++或反缀++，本题主要考的是\u0026amp;\u0026amp;和||的短路求值的问题。所为短路求值：对于（条件1 \u0026amp;\u0026amp; 条件2），如果“条件1”是false，那“条件2”的表达式会被忽略了。对于（条件1 || 条件2），如果“条件1”为true，而“条件2”的表达式则被忽略了。所以，我相信你会知道本题的答案是什么了。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e12、下面的C程序是合法的吗？如果是，那么输出是什么？\u003c/strong\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\nint main()  \n{ \n    int a=3, b = 5;\n\n    printf(\u0026amp;a[\u0026#34;Ya!Hello! how is this? %s\\n\u0026#34;], \u0026amp;b[\u0026#34;junk/super\u0026#34;]);\n    \n    printf(\u0026amp;a[\u0026#34;WHAT%c%c%c  %c%c  %c !\\n\u0026#34;], 1[\u0026#34;this\u0026#34;],\n        2[\u0026#34;beauty\u0026#34;],0[\u0026#34;tool\u0026#34;],0[\u0026#34;is\u0026#34;],3[\u0026#34;sensitive\u0026#34;],4[\u0026#34;CCCCCC\u0026#34;]);\n        \n    return 0;  \n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e参考答案\u003c/strong\u003e：\u003cbr/\u003e\n本例是合法的，输出如下：\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e Hello! how is this? super\u003cbr/\u003e\nThat is C !\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e本例主要展示了一种另类的用法。下面的两种用法是相同的：\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e “hello”[2]\u003cbr/\u003e\n2[“hello”]\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e如果你知道：a[i] 其实就是 *(a+i)也就是 *(i+a)，所以如果写成 i[a] 应该也不难理解了。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e13、请问下面的程序输出什么？\u003c/strong\u003e（假设：输入 Hello, World）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\nint main()  \n{ \n    char dummy[80];\n    printf(\u0026#34;Enter a string:\\n\u0026#34;);\n    scanf(\u0026#34;%[^r]\u0026#34;,dummy);\n    printf(\u0026#34;%s\\n\u0026#34;,dummy);\n    return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e参考答案\u003c/strong\u003e：本例的输出是“Hello, Wo”，scanf中的”%[^r]”是从中作梗的东西。意思是遇到字符r就结束了。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e14、下面的程序试图使用“位操作”来完成“乘5”的操作，不过这个程序中有个BUG，你知道是什么吗？\u003c/strong\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\n#define PrintInt(expr) printf(\u0026#34;%s : %d\\n\u0026#34;,#expr,(expr))\nint FiveTimes(int a)  \n{\n    int t;\n    t = a\u0026lt;\u0026lt;2 + a;\n    return t;\n}\n\nint main()  \n{\n    int a = 1, b = 2,c = 3;\n    PrintInt(FiveTimes(a));\n    PrintInt(FiveTimes(b));\n    PrintInt(FiveTimes(c));\n    return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e参考答案\u003c/strong\u003e：本题的问题在于函数FiveTimes中的表达式“t = a\u0026lt;\u0026lt;2 + a;”，对于a\u0026lt;\u0026lt;2这个位操作，优先级要比加法要低，所以这个表达式就成了“t = a \u0026lt;\u0026lt; (2+a)”，于是我们就得不到我们想要的值。该程序修正如下：\n\u003c/p\u003e\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eint FiveTimes(int a)  \n{\n    int t;\n    t = (a\u0026lt;\u0026lt;2) + a;\n    return t;\n}\n\u003c/pre\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/03/rust-social-wide-150x150.jpg\" alt=\"Rust语言的编程范式\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_title\"\u003eRust语言的编程范式\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/07/api-design-300x278-2-150x150.jpg\" alt=\"API设计原则 – Qt官网的设计实践总结\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_title\"\u003eAPI设计原则 – Qt官网的设计实践总结\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"Leetcode 编程训练\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_title\"\u003eLeetcode 编程训练\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12012.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/10/edsm-150x150.gif\" alt=\"State Threads 回调终结者\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12012.html\" class=\"wp_rp_title\"\u003eState Threads 回调终结者\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11466.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/04/c99-150x150.jpg\" alt=\"C语言的整型溢出问题\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11466.html\" class=\"wp_rp_title\"\u003eC语言的整型溢出问题\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-945\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"d68f70e85e\"\u003e\u003cimg id=\"rating_945_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(945, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.7, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-173ccb29d738596ed2a5143a-=\"\"/\u003e\u003cimg id=\"rating_945_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(945, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.7, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-173ccb29d738596ed2a5143a-=\"\"/\u003e\u003cimg id=\"rating_945_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(945, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.7, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-173ccb29d738596ed2a5143a-=\"\"/\u003e\u003cimg id=\"rating_945_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(945, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.7, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-173ccb29d738596ed2a5143a-=\"\"/\u003e\u003cimg id=\"rating_945_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(945, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.7, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-173ccb29d738596ed2a5143a-=\"\"/\u003e (\u003cstrong\u003e83\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.71\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_945_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"C语言的谜题\"/\u003e\u003cmeta itemprop=\"headline\" content=\"C语言的谜题\"/\u003e\u003cmeta itemprop=\"description\" content=\"这几天，本站推出了几篇关于C语言的很多文章如下所示：\n\n\t语言的歧义  [酷壳链接]  [CSDN链接]\n\t谁说C语言很简单？ [酷壳链接]  [CSDN链接]\n\t6个变态的C语言Hello World程序 [酷壳链接]  [CSDN链接]\n\t如何加密/弄乱C源代码  [酷壳链接]  [CSDN链接]\n\tC语言的谜题  [酷壳链接]  [CSDN链接]\n\n我们可以看到很多C语言相关...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2009-05-31T17:39:58+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2009-06-01T10:22:05+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/945.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/945.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.71\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"83\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-945-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2009-05-31T17:39:58+08:00",
  "Author": "陈皓"
}