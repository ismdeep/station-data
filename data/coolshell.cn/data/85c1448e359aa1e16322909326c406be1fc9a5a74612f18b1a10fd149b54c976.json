{
  "Source": "coolshell.cn",
  "Title": "JDK里的设计模式",
  "Link": "https://coolshell.cn/articles/3320.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"198d33b488ec38bdca33d58b-text/javascript\"\u003e\u003c/script\u003e下面是JDK中有关23个经典设计模式的示例，在stakeoverflow也有相应的讨论：\u003cbr/\u003e\n\u003ca href=\"http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns\" target=\"_blank\"\u003ehttp://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns\u003c/a\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cstrong\u003e\u003cspan style=\"text-decoration: underline;\"\u003eStructural（结构模式）\u003c/span\u003e\u003c/strong\u003e\u003c/h4\u003e\n\u003cdiv\u003e\u003cstrong\u003eAdapter:\u003c/strong\u003e\u003cbr/\u003e\n把一个接口或是类变成另外一种。\u003cp\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.util.Arrays#asList()\u003c/li\u003e\n\u003cli\u003ejavax.swing.JTable(TableModel)\u003c/li\u003e\n\u003cli\u003ejava.io.InputStreamReader(InputStream)\u003c/li\u003e\n\u003cli\u003ejava.io.OutputStreamWriter(OutputStream)\u003c/li\u003e\n\u003cli\u003ejavax.xml.bind.annotation.adapters.XmlAdapter#marshal()\u003c/li\u003e\n\u003cli\u003ejavax.xml.bind.annotation.adapters.XmlAdapter#unmarshal()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eBridge:\u003c/strong\u003e\u003cbr/\u003e\n把抽象和实现解藕，于是接口和实现可在完全独立开来。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAWT (提供了抽象层映射于实际的操作系统)\u003c/li\u003e\n\u003cli\u003eJDBC\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eComposite:\u003c/strong\u003e\u003cbr/\u003e\n让使用者把单独的对象和组合对象混用。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejavax.swing.JComponent#add(Component)\u003c/li\u003e\n\u003cli\u003ejava.awt.Container#add(Component)\u003c/li\u003e\n\u003cli\u003ejava.util.Map#putAll(Map)\u003c/li\u003e\n\u003cli\u003ejava.util.List#addAll(Collection)\u003c/li\u003e\n\u003cli\u003ejava.util.Set#addAll(Collection)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cp\u003e\u003cspan id=\"more-3320\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cdiv\u003e\n\u003cp\u003e\u003cstrong\u003eDecorator:\u003c/strong\u003e\u003cbr/\u003e\n为一个对象动态的加上一系列的动作，而不需要因为这些动作的不同而产生大量的继承类。这个模式在JDK中几乎无处不在，所以，下面的列表只是一些典型的。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.io.BufferedInputStream(InputStream)\u003c/li\u003e\n\u003cli\u003ejava.io.DataInputStream(InputStream)\u003c/li\u003e\n\u003cli\u003ejava.io.BufferedOutputStream(OutputStream)\u003c/li\u003e\n\u003cli\u003ejava.util.zip.ZipOutputStream(OutputStream)\u003c/li\u003e\n\u003cli\u003ejava.util.Collections#checked[List|Map|Set|SortedSet|SortedMap]()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eFacade:\u003c/strong\u003e\u003cbr/\u003e\n用一个简单的接口包状一组组件，接口，抽象或是子系统。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.lang.Class\u003c/li\u003e\n\u003cli\u003ejavax.faces.webapp.FacesServlet\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eFlyweight:\u003c/strong\u003e\u003cbr/\u003e\n有效率地存储大量的小的对象。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.lang.Integer#valueOf(int)\u003c/li\u003e\n\u003cli\u003ejava.lang.Boolean#valueOf(boolean)\u003c/li\u003e\n\u003cli\u003ejava.lang.Byte#valueOf(byte)\u003c/li\u003e\n\u003cli\u003ejava.lang.Character#valueOf(char)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eProxy:\u003c/strong\u003e\u003cbr/\u003e\n用一个简单的对象来代替一个复杂的对象。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.lang.reflect.Proxy\u003c/li\u003e\n\u003cli\u003eRMI\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv\u003e\n\u003ch4\u003e\u003cstrong\u003e\u003cspan style=\"text-decoration: underline;\"\u003eCreational（创建模式）\u003c/span\u003e\u003c/strong\u003e\u003c/h4\u003e\n\u003c/div\u003e\n\u003cdiv\u003e\u003cstrong\u003e \u003c/strong\u003e\u003cstrong\u003eAbstract factory:\u003c/strong\u003e\u003cbr/\u003e\n创建一组有关联的对象实例。这个模式在JDK中也是相当的常见，还有很多的framework例如Spring。我们很容易找到这样的实例。\u003cp\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.util.Calendar#getInstance()\u003c/li\u003e\n\u003cli\u003ejava.util.Arrays#asList()\u003c/li\u003e\n\u003cli\u003ejava.util.ResourceBundle#getBundle()\u003c/li\u003e\n\u003cli\u003ejava.sql.DriverManager#getConnection()\u003c/li\u003e\n\u003cli\u003ejava.sql.Connection#createStatement()\u003c/li\u003e\n\u003cli\u003ejava.sql.Statement#executeQuery()\u003c/li\u003e\n\u003cli\u003ejava.text.NumberFormat#getInstance()\u003c/li\u003e\n\u003cli\u003ejavax.xml.transform.TransformerFactory#newInstance()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eBuilder:\u003c/strong\u003e\u003cbr/\u003e\n主要用来简化一个复杂的对象的创建。这个模式也可以用来实现一个 \u003ca href=\"https://en.wikipedia.org/wiki/Fluent_interface\" target=\"_blank\"\u003eFluent Interface\u003c/a\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.lang.StringBuilder#append()\u003c/li\u003e\n\u003cli\u003ejava.lang.StringBuffer#append()\u003c/li\u003e\n\u003cli\u003ejava.sql.PreparedStatement\u003c/li\u003e\n\u003cli\u003ejavax.swing.GroupLayout.Group#addComponent()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eFactory:\u003c/strong\u003e\u003cbr/\u003e\n简单来说，按照需求返回一个类型的实例。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.lang.Proxy#newProxyInstance()\u003c/li\u003e\n\u003cli\u003ejava.lang.Object#toString()\u003c/li\u003e\n\u003cli\u003ejava.lang.Class#newInstance()\u003c/li\u003e\n\u003cli\u003ejava.lang.reflect.Array#newInstance()\u003c/li\u003e\n\u003cli\u003ejava.lang.reflect.Constructor#newInstance()\u003c/li\u003e\n\u003cli\u003ejava.lang.Boolean#valueOf(String)\u003c/li\u003e\n\u003cli\u003ejava.lang.Class#forName()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003ePrototype:\u003c/strong\u003e\u003cbr/\u003e\n使用自己的实例创建另一个实例。有时候，创建一个实例然后再把已有实例的值拷贝过去，是一个很复杂的动作。所以，使用这个模式可以避免这样的复杂性。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.lang.Object#clone()\u003c/li\u003e\n\u003cli\u003ejava.lang.Cloneable\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSingleton:\u003c/strong\u003e\u003cbr/\u003e\n只允许一个实例。在 Effective Java中建议使用Emun.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.lang.Runtime#getRuntime()\u003c/li\u003e\n\u003cli\u003ejava.awt.Toolkit#getDefaultToolkit()\u003c/li\u003e\n\u003cli\u003ejava.awt.GraphicsEnvironment#getLocalGraphicsEnvironment()\u003c/li\u003e\n\u003cli\u003ejava.awt.Desktop#getDesktop()\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e\u003cstrong\u003e\u003cspan style=\"text-decoration: underline;\"\u003eBehavioral(行为模式)\u003c/span\u003e\u003c/strong\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003eChain of responsibility:\u003c/strong\u003e\u003cbr/\u003e\n把一个对象在一个链接传递直到被处理。在这个链上的所有的对象有相同的接口（抽象类）但却有不同的实现。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.util.logging.Logger#log()\u003c/li\u003e\n\u003cli\u003ejavax.servlet.Filter#doFilter()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eCommand:\u003c/strong\u003e\u003cbr/\u003e\n把一个或一些命令封装到一个对象中。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.lang.Runnable\u003c/li\u003e\n\u003cli\u003ejavax.swing.Action\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eInterpreter:\u003c/strong\u003e\u003cbr/\u003e\n一个语法解释器的模式。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.util.Pattern\u003c/li\u003e\n\u003cli\u003ejava.text.Normalizer\u003c/li\u003e\n\u003cli\u003ejava.text.Format\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eIterator:\u003c/strong\u003e\u003cbr/\u003e\n提供一种一致的方法来顺序遍历一个容器中的所有元素。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.util.Iterator\u003c/li\u003e\n\u003cli\u003ejava.util.Enumeration\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eMediator:\u003c/strong\u003e\u003cbr/\u003e\n用来减少对象单的直接通讯的依赖关系。使用一个中间类来管理消息的方向。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.util.Timer\u003c/li\u003e\n\u003cli\u003ejava.util.concurrent.Executor#execute()\u003c/li\u003e\n\u003cli\u003ejava.util.concurrent.ExecutorService#submit()\u003c/li\u003e\n\u003cli\u003ejava.lang.reflect.Method#invoke()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eMemento:\u003c/strong\u003e\u003cbr/\u003e\n给一个对象的状态做一个快照。Date类在内部使用了一个long型来做这个快照。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.util.Date\u003c/li\u003e\n\u003cli\u003ejava.io.Serializable\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eNull Object:\u003c/strong\u003e\u003cbr/\u003e\n这个模式用来解决如果一个Collection中没有元素的情况。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.util.Collections#emptyList()\u003c/li\u003e\n\u003cli\u003ejava.util.Collections#emptyMap()\u003c/li\u003e\n\u003cli\u003ejava.util.Collections#emptySet()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eObserver:\u003c/strong\u003e\u003cbr/\u003e\n允许一个对象向所有的侦听的对象广播自己的消息或事件。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.util.EventListener\u003c/li\u003e\n\u003cli\u003ejavax.servlet.http.HttpSessionBindingListener\u003c/li\u003e\n\u003cli\u003ejavax.servlet.http.HttpSessionAttributeListener\u003c/li\u003e\n\u003cli\u003ejavax.faces.event.PhaseListener\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eState:\u003c/strong\u003e\u003cbr/\u003e\n这个模式允许你可以在运行时很容易地根据自身内部的状态改变对象的行为。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.util.Iterator\u003c/li\u003e\n\u003cli\u003ejavax.faces.lifecycle.LifeCycle#execute()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eStrategy:\u003c/strong\u003e\u003cbr/\u003e\n定义一组算法，并把其封装到一个对象中。然后在运行时，可以灵活的使用其中的一个算法。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.util.Comparator#compare()\u003c/li\u003e\n\u003cli\u003ejavax.servlet.http.HttpServlet\u003c/li\u003e\n\u003cli\u003ejavax.servlet.Filter#doFilter()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eTemplate method:\u003c/strong\u003e\u003cbr/\u003e\n允许子类重载部分父类而不需要完全重写。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejava.util.Collections#sort()\u003c/li\u003e\n\u003cli\u003ejava.io.InputStream#skip()\u003c/li\u003e\n\u003cli\u003ejava.io.InputStream#read()\u003c/li\u003e\n\u003cli\u003ejava.util.AbstractList#indexOf()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eVisitor:\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e作用于某个对象群中各个对象的操作. 它可以使你在不改变这些对象本身的情况下,定义作用于这些对象的新操作.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejavax.lang.model.element.Element 和javax.lang.model.element.ElementVisitor\u003c/li\u003e\n\u003cli\u003ejavax.lang.model.type.TypeMirror 和javax.lang.model.type.TypeVisitor\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003c/div\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21263.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.k8s-150x150.png\" alt=\"Go 编程模式：k8s Visitor 模式\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21263.html\" class=\"wp_rp_title\"\u003eGo 编程模式：k8s Visitor 模式\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/03/rust-social-wide-150x150.jpg\" alt=\"Rust语言的编程范式\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_title\"\u003eRust语言的编程范式\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17416.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2016/07/cache-150x150.png\" alt=\"缓存更新的套路\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17416.html\" class=\"wp_rp_title\"\u003e缓存更新的套路\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11541.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/24.jpg\" alt=\"面向GC的Java编程\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11541.html\" class=\"wp_rp_title\"\u003e面向GC的Java编程\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11454.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/17.jpg\" alt=\"从LongAdder看更高效的无锁实现\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11454.html\" class=\"wp_rp_title\"\u003e从LongAdder看更高效的无锁实现\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-3320\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"bc5920b9e2\"\u003e\u003cimg id=\"rating_3320_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(3320, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.5, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-198d33b488ec38bdca33d58b-=\"\"/\u003e\u003cimg id=\"rating_3320_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(3320, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.5, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-198d33b488ec38bdca33d58b-=\"\"/\u003e\u003cimg id=\"rating_3320_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(3320, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.5, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-198d33b488ec38bdca33d58b-=\"\"/\u003e\u003cimg id=\"rating_3320_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(3320, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.5, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-198d33b488ec38bdca33d58b-=\"\"/\u003e\u003cimg id=\"rating_3320_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(3320, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.5, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-198d33b488ec38bdca33d58b-=\"\"/\u003e (\u003cstrong\u003e14\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e3.50\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_3320_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"JDK里的设计模式\"/\u003e\u003cmeta itemprop=\"headline\" content=\"JDK里的设计模式\"/\u003e\u003cmeta itemprop=\"description\" content=\"下面是JDK中有关23个经典设计模式的示例，在stakeoverflow也有相应的讨论：\nhttp://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns\nStructural（结构模式）\nAdapter:\n把一个接口或是类变成另外一种。\n\n\tjava.util.Arrays#asList()\n\tja...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2010-11-26T08:44:37+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2010-11-24T17:55:55+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/3320.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/3320.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"3.5\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"14\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-3320-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2010-11-26T08:44:37+08:00",
  "Author": "陈皓"
}