{
  "Source": "coolshell.cn",
  "Title": "rsync 的核心算法",
  "Link": "https://coolshell.cn/articles/7425.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"f5ccee3b2619128d77ff3ef7-text/javascript\"\u003e\u003c/script\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Rsync\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ersync\u003c/a\u003e是unix/linux下同步文件的一个高效算法，它能同步更新两处计算机的文件与目录，并适当利用查找文件中的不同块以减少数据传输。rsync中一项与其他大部分类似程序或协定中所未见的重要特性是镜像是只对有变更的部分进行传送。rsync可拷贝／显示目录属性，以及拷贝文件，并可选择性的压缩以及递归拷贝。rsync利用由\u003ca href=\"https://en.wikipedia.org/wiki/Andrew_Tridgell\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eAndrew Tridgell\u003c/a\u003e发明的算法。这里不介绍其使用方法，只介绍其核心算法。我们可以看到，Unix下的东西，一个命令，一个工具都有很多很精妙的东西，怎么学也学不完，这就是\u003ca title=\"Unix传奇(上篇)\" href=\"https://coolshell.cn/articles/2322.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eUnix的文化\u003c/a\u003e啊。\u003c/p\u003e\n\u003cp\u003e本来不想写这篇文章的，因为原先发现有很多中文blog都说了这个算法，但是看了一下，发现这些中文blog要么翻译国外文章翻译地非常烂，要么就是介绍这个算法介绍得很乱让人看不懂，还有错误，误人不浅，所以让我觉得有必要写篇rsync算法介绍的文章。（当然，我成文比较仓促，可能会有一些错误，请指正）\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E9%97%AE%E9%A2%98\" title=\"问题\"\u003e问题\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E7%AE%97%E6%B3%95\" title=\"算法\"\u003e算法\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#rolling_checksum%E7%AE%97%E6%B3%95\" title=\"rolling checksum算法\"\u003erolling checksum算法\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E5%9B%BE%E7%A4%BA\" title=\"图示\"\u003e图示\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%97%AE%E9%A2%98\"\u003e\u003c/span\u003e问题\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e首先， 我们先来想一下rsync要解决的问题，如果我们要同步的文件只想传不同的部分，我们就需要对两边的文件做diff，但是这两个问题在两台不同的机器上，无法做diff。如果我们做diff，就要把一个文件传到另一台机器上做diff，但这样一来，我们就传了整个文件，这与我们只想传输不同部的初衷相背。\u003c/p\u003e\n\u003cp\u003e于是我们就要想一个办法，让这两边的文件见不到面，但还能知道它们间有什么不同。这就出现了rsync的算法。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%AE%97%E6%B3%95\"\u003e\u003c/span\u003e算法\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003ersync的算法如下：（\u003cstrong\u003e假设我们同步源文件名为fileSrc，同步目的文件叫fileDst\u003c/strong\u003e）\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-7425\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e1）\u003cstrong\u003e分块Checksum算法\u003c/strong\u003e。首先，我们会把fileDst的文件平均切分成若干个小块，比如每块512个字节（最后一块会小于这个数），然后对每块计算两个checksum，\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一个叫\u003ca href=\"https://en.wikipedia.org/wiki/Rolling_hash\" target=\"_blank\" rel=\"noopener noreferrer\"\u003erolling checksum\u003c/a\u003e，是弱checksum，32位的checksum，其使用的是Mark Adler发明的\u003ca title=\"Adler-32\" href=\"https://en.wikipedia.org/wiki/Adler-32\"\u003eadler-32\u003c/a\u003e算法，\u003c/li\u003e\n\u003cli\u003e另一个是强checksum，128位的，以前用md4，现在用md5 hash算法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e为什么要这样？因为若干年前的硬件上跑md4的算法太慢了，所以，我们需要一个快算法来鉴别文件块的不同，但是弱的adler32算法碰撞概率太高了，所以我们还要引入强的checksum算法以保证两文件块是相同的。\u003cstrong\u003e也就是说，弱的checksum是用来区别不同，而强的是用来确认相同\u003c/strong\u003e。（checksum的具体公式可以参看\u003ca href=\"https://rsync.samba.org/tech_report/node3.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e这篇文章\u003c/a\u003e）\u003c/p\u003e\n\u003cp\u003e2）\u003cstrong\u003e传输算法。\u003c/strong\u003e同步目标端会把fileDst的一个checksum列表传给同步源，这个列表里包括了三个东西，\u003cstrong\u003erolling checksum(32bits)\u003c/strong\u003e，\u003cstrong\u003emd5 checksume(128bits)\u003c/strong\u003e，\u003cstrong\u003e文件块编号\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e我估计你猜到了同步源机器拿到了这个列表后，会对fileSrc做同样的checksum，然后和fileDst的checksum做对比，这样就知道哪些文件块改变了。\u003c/p\u003e\n\u003cp\u003e但是，聪明的你一定会有以下两个疑问：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果我fileSrc这边在文件中间加了一个字符，这样后面的文件块都会位移一个字符，这样就完全和fileDst这边的不一样了，但理论上来说，我应该只需要传一个字符就好了。这个怎么解决？\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e如果这个checksum列表特别长，而我的两边的相同的文件块可能并不是一样的顺序，那就需要查找，线性的查找起来应该特别慢吧。这个怎么解决？\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e很好，让我们来看一下同步源端的算法。\u003c/p\u003e\n\u003cp\u003e3）\u003cstrong\u003echecksum查找算法\u003c/strong\u003e。同步源端拿到fileDst的checksum数组后，会把这个数据存到一个hash table中，用rolling checksum做hash，以便获得O(1)时间复杂度的查找性能。这个hash table是16bits的，所以，hash table的尺寸是2的16次方，对rolling checksum的hash会被散列到0 到 2^16 – 1中的某个整数值。（对于hash table，如果你不清楚，建议回去看大学时的数据结构教科书）\u003c/p\u003e\n\u003cp\u003e顺便说一下，我在网上看到很多文章说，“要对rolling checksum做排序”（比如\u003ca href=\"http://www.yejun.cn/?p=472\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e这篇\u003c/a\u003e和\u003ca href=\"http://blog.csdn.net/tobeandnottobe/article/details/6719848\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e这篇\u003c/a\u003e），这两篇文章都引用并翻译了\u003ca href=\"https://rsync.samba.org/tech_report/node4.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e原作者的这篇文章\u003c/a\u003e，但是他们都理解错了，不是排序，就只是把fileDst的checksum数据，按rolling checksum做存到2^16的hash table中，当然会发生碰撞，把碰撞的做成一个链表就好了。这就是\u003ca href=\"https://rsync.samba.org/tech_report/node4.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e原文\u003c/a\u003e中所说的第二步——搜索有碰撞的情况。\u003c/p\u003e\n\u003cp\u003e4）\u003cstrong\u003e比对算法\u003c/strong\u003e。这是最关键的算法，细节如下：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e4.1）取fileSrc的第一个文件块（我们假设的是512个长度），也就是从fileSrc的第1个字节到第512个字节，取出来后做rolling checksum计算。计算好的值到hash表中查。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e4.2）如果查到了，说明发现在fileDst中有潜在相同的文件块，于是就再比较md5的checksum，因为rolling checksume太弱了，可能发生碰撞。于是还要算md5的128bits的checksum，这样一来，我们就有 2^-(32+128) = 2^-160的概率发生碰撞，这太小了可以忽略。\u003cstrong\u003e如果rolling checksum和md5 checksum都相同，这说明在fileDst中有相同的块，我们需要记下这一块在fileDst下的文件编号\u003c/strong\u003e。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e4.3）如果fileSrc的rolling checksum 没有在hash table中找到，那就不用算md5 checksum了。表示这一块中有不同的信息。总之，只要rolling checksum 或 md5 checksum 其中有一个在fileDst的checksum hash表中找不到匹配项，那么就会触发算法对fileSrc的rolling动作。于是，\u003cstrong\u003e算法会住后step 1个字节，取fileSrc中字节2-513的文件块要做checksum，go to (4.1) \u003c/strong\u003e– 现在你明白什么叫rolling checksum了吧。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e4.4）这样，我们就可以找出fileSrc相邻两次匹配中的那些文本字符，这些就是我们要往同步目标端传的文件内容了。\u003c/p\u003e\n\u003ch4 class=\"p1\"\u003e\u003cspan class=\"ez-toc-section\" id=\"rolling_checksum%E7%AE%97%E6%B3%95\"\u003e\u003c/span\u003e\u003cb\u003erolling checksum算法\u003c/b\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp class=\"p1\"\u003e这个算法很简单，也叫\u003ca href=\"https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_string_search_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eRabin-Karp 算法\u003c/a\u003e，由 Richard M. Karp 和 Michael O. Rabin 在 1987 年发表，它也是用来解决多模式串匹配问题的。其最大的精髓是，当我们往后面step 1个字符的时候，不用全部重新计算所有的checksum，也就是说，我们从 [0, 512] rolling 到 [1, 513] 时，我们不需要重新计算从1到513的checksum，而是重用 [0，512]的checksum直接算出来。\u003c/p\u003e\n\u003cp class=\"p1\"\u003e这个算法比较简单，我举个例子，我们有一个数字：12345678，假设我们以5个长度作为一个块，那么，第一个块就是 12345 ，12345可以表示为：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e 1 * 10^4 + 2 * 10^3 + 3 * 10^2 + 4 * 10^1 + 5 * 10^0 = 12345 \u003c/code\u003e\u003c/p\u003e\n\u003cp class=\"p1\"\u003e如果我们要step 1步，也就是要得到 23456， 我们不必计算：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e2 * 10^4 + 3 * 10^3 + 4 * 10^2 + 5 * 10^1 + 6 * 10^0\u003c/code\u003e\u003c/p\u003e\n\u003cp class=\"p1\"\u003e而是直接计算：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e(12345 - 1 * 10^4) * 10 + 6 * 10 ^0\u003c/code\u003e\u003c/p\u003e\n\u003cp class=\"p1\"\u003e我们可以看到，其中，我们把12345最左边第一位去掉，然后，再加上最右边的一位。这就是Rolling checksum的算法。\u003c/p\u003e\n\u003cp class=\"p1\"\u003e实际的公式是：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003ehash ( t[0, m-1] ) = t[0] * b^(m-1) + t[1] * b^[m-2] ..... t[m-1] * b^0\u003c/code\u003e\u003c/p\u003e\n\u003cp class=\"p1\"\u003e其中的 b是一个常数基数，在 Rabin-Karp 算法中，我们一般取值为  256。\u003c/p\u003e\n\u003cp class=\"p1\"\u003e于是，在计算 hash ( t[1, m] ) 时，只需要下面这样就可以了：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003ehash( t[1, m] ) = hash ( t[0, m-1] ) - t[0] * b^(m-1) + t[m] * b ^0\u003c/code\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%9B%BE%E7%A4%BA\"\u003e\u003c/span\u003e图示\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e怎么，你没看懂？ 好吧，我送佛送上西，画个示意图给你看看（对图中的东西我就不再解释了）。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" class=\"aligncenter size-full wp-image-7428\" title=\"rsync algorithm\" src=\"https://coolshell.cn/wp-content/uploads/2012/05/rsync-algorithm.jpg\" alt=\"\" width=\"650\" height=\"463\" srcset=\"https://coolshell.cn/wp-content/uploads/2012/05/rsync-algorithm.jpg 650w, https://coolshell.cn/wp-content/uploads/2012/05/rsync-algorithm-300x214.jpg 300w, https://coolshell.cn/wp-content/uploads/2012/05/rsync-algorithm-379x270.jpg 379w\" sizes=\"(max-width: 650px) 100vw, 650px\"/\u003e\u003c/p\u003e\n\u003cp\u003e这样，最终，在同步源这端，我们的rsync算法可能会得到下面这个样子的一个数据数组，图中，红色块表示在目标端已匹配上，不用传输（注：我专门在其中显示了两块chunk #5，相信你会懂的），而白色的地方就是需要传输的内容（注意：这些白色的块是不定长的），这样，同步源这端把这个数组（白色的就是实际内容，红色的就放一个标号）压缩传到目的端，在目的端的rsync会根据这个表重新生成文件，这样，同步完成。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-7427\" title=\"rsync algorithm result\" src=\"https://coolshell.cn/wp-content/uploads/2012/05/rsync-algorithm-result.jpg\" alt=\"\" width=\"606\" height=\"82\" srcset=\"https://coolshell.cn/wp-content/uploads/2012/05/rsync-algorithm-result.jpg 606w, https://coolshell.cn/wp-content/uploads/2012/05/rsync-algorithm-result-300x40.jpg 300w\" sizes=\"(max-width: 606px) 100vw, 606px\"/\u003e\u003c/p\u003e\n\u003cp\u003e最后想说一下，对于某些压缩文件使用rsync传输可能会传得更多，因为被压缩后的文件可能会非常的不同。对此，对于gzip和bzip2这样的命令，记得开启 “rsyncalbe” 模式。\u003c/p\u003e\n\u003cp\u003e（全文完，\u003cstrong\u003e转载时请注明作者和出处\u003c/strong\u003e）\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11847.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/08/puzzle-150x150.png\" alt=\"谜题的答案和活动的心得体会\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11847.html\" class=\"wp_rp_title\"\u003e谜题的答案和活动的心得体会\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/7829.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/07/dstat_screenshot-150x150.png\" alt=\"28个Unix/Linux的命令行神器\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/7829.html\" class=\"wp_rp_title\"\u003e28个Unix/Linux的命令行神器\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/22320.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2022/12/eBPF-150x150.jpeg\" alt=\"eBPF 介绍\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/22320.html\" class=\"wp_rp_title\"\u003eeBPF 介绍\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/19219.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2019/03/linux.ninja_-150x150.png\" alt=\"打造高效的工作环境 – Shell 篇\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/19219.html\" class=\"wp_rp_title\"\u003e打造高效的工作环境 – Shell 篇\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18654.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/12/docker-networking-1-150x150.png\" alt=\"记一次Kubernetes/Docker网络排障\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18654.html\" class=\"wp_rp_title\"\u003e记一次Kubernetes/Docker网络排障\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-7425\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"d9fcb142a4\"\u003e\u003cimg id=\"rating_7425_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(7425, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-f5ccee3b2619128d77ff3ef7-=\"\"/\u003e\u003cimg id=\"rating_7425_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(7425, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-f5ccee3b2619128d77ff3ef7-=\"\"/\u003e\u003cimg id=\"rating_7425_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(7425, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-f5ccee3b2619128d77ff3ef7-=\"\"/\u003e\u003cimg id=\"rating_7425_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(7425, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-f5ccee3b2619128d77ff3ef7-=\"\"/\u003e\u003cimg id=\"rating_7425_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(7425, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-f5ccee3b2619128d77ff3ef7-=\"\"/\u003e (\u003cstrong\u003e39\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.51\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_7425_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"rsync 的核心算法\"/\u003e\u003cmeta itemprop=\"headline\" content=\"rsync 的核心算法\"/\u003e\u003cmeta itemprop=\"description\" content=\"rsync是unix/linux下同步文件的一个高效算法，它能同步更新两处计算机的文件与目录，并适当利用查找文件中的不同块以减少数据传输。rsync中一项与其他大部分类似程序或协定中所未见的重要特性是镜像是只对有变更的部分进行传送。rsync可拷贝／显示目录属性，以及拷贝文件，并可选择性的压缩以及递归拷贝。rsync利用由Andrew Tridgell发明的算法。这里不介绍其使用方法，只介绍其核心...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2012-05-17T08:25:38+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2019-12-04T17:10:36+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/7425.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/7425.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.51\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"39\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-7425-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2012-05-17T08:25:38+08:00",
  "Author": "陈皓"
}