{
  "Source": "coolshell.cn",
  "Title": "如何写出无法维护的代码",
  "Link": "https://coolshell.cn/articles/4758.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"8469d8ec4609f15b49424451-text/javascript\"\u003e\u003c/script\u003e酷壳里有很多我觉得很不错的文章，但是访问量最大的却是那篇《\u003ca title=\"6个变态的C语言Hello World程序\" href=\"https://coolshell.cn/articles/914.html\" target=\"_blank\"\u003e6个变态的Hello World\u003c/a\u003e》，和它能在本站右边栏“\u003cstrong\u003e全站热门\u003c/strong\u003e”中出现的还有“\u003ca title=\"如何加密/混乱C源代码\" href=\"https://coolshell.cn/articles/933.html\" target=\"_blank\"\u003e如何加密源代码\u003c/a\u003e”，以及\u003ca title=\"编程真难啊\" href=\"https://coolshell.cn/articles/1391.html\" target=\"_blank\"\u003e编程真难啊\u003c/a\u003e等这样的文章。可见本站的读者们的偏好，我也相信你们都是“身怀绝技”的程序员。所以，今天给大家推荐这篇文章，相信一定能触动大家的兴奋点。\u003c/p\u003e\n\u003cp\u003e这篇文章的原文在这里（\u003ca href=\"http://mindprod.com/jgloss/unmain.html\" target=\"_blank\"\u003ehttp://mindprod.com/jgloss/unmain.html\u003c/a\u003e），我看完后我想说——\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e什么叫“创造力”，创造力就是——就算是要干一件烂事都能干得那么漂亮那么有创意的能力。\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e什么叫“抓狂”，抓狂就是——以一种沉着老练的不屈不挠的一本正经的精神一点一点把你推向崩溃的边缘\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e我把文章节选了一些，也并没有完全翻译，简译一下，也加入了一些自己的调侃。对于有下面这些编程习惯的朋友，请大家对号入座。另外，维护程序的朋友们，你们死定了！！\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e\u003cimg decoding=\"async\" src=\"http://mindprod.com/image/icon64/woodpecker.png\" alt=\"woodpecker\" width=\"64\" height=\"64\" align=\"left\" border=\"0\"/\u003eIf builders built buildings the way programmers write programs, then the first woodpecker that came along would destroy civilization. （如果建筑师盖房子就像程序员写程序一样，那么，第一只到来的啄木鸟就能毁掉我们的文明）\u003c/p\u003e\n\u003cp\u003e~ Gerald Weinberg (born: 1933-10-27 age: 77) \u003ca href=\"http://www.geraldmweinberg.com/Site/Home.html\"\u003eWeinberg’s Second Law\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E7%A8%8B%E5%BA%8F%E5%91%BD%E5%90%8D\" title=\"程序命名\"\u003e程序命名\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E4%BC%AA%E8%A3%85%E6%AC%BA%E8%AF%88\" title=\"伪装欺诈\"\u003e伪装欺诈\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E6%96%87%E6%A1%A3%E5%92%8C%E6%B3%A8%E9%87%8A\" title=\"文档和注释\"\u003e文档和注释\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\" title=\"程序设计\"\u003e程序设计\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E6%B7%B7%E4%B9%B1%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81\" title=\"混乱你的代码\"\u003e混乱你的代码\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#%E6%B5%8B%E8%AF%95\" title=\"测试\"\u003e测试\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#%E5%85%B6%E5%AE%83\" title=\"其它\"\u003e其它\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#Write_Everywhere_Read_Nowhere\" title=\"Write Everywhere, Read Nowhere\"\u003eWrite Everywhere, Read Nowhere\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%A8%8B%E5%BA%8F%E5%91%BD%E5%90%8D\"\u003e\u003c/span\u003e程序命名\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e容易输入的名字\u003c/strong\u003e。比如：Fred，asdf\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e单字母的变量名\u003c/strong\u003e。比如：a,b,c, x,y,z（陈皓注：如果不够用，可以考虑a1,a2,a3,a4,….）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e有创意地拼写错误\u003c/strong\u003e。比如：SetPintleOpening， SetPintalClosing。这样可以让人很难搜索代码。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e抽象\u003c/strong\u003e。比如：ProcessData, DoIt, GetData… 抽象到就跟什么都没说一样。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e缩写\u003c/strong\u003e。比如：WTF，RTFSC …… （陈皓注：使用拼音缩写也同样给力，比如： BT，TMD，TJJTDS）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e随机大写字母\u003c/strong\u003e。比如：gEtnuMbER..\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e重用命名\u003c/strong\u003e。在内嵌的语句块中使用相同的变量名有奇效。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e使用重音字母\u003c/strong\u003e。比如：int  ínt（注：第二个 ínt不是int）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e使用下划线\u003c/strong\u003e。比如：_, __, ___。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e使用不同的语言\u003c/strong\u003e。比如混用英语，德语，或是中文拼音。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e使用字符命名\u003c/strong\u003e。比如：slash, asterix, comma…\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e使用无关的单词\u003c/strong\u003e。比如：god, superman, iloveu….\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e混淆l和1\u003c/strong\u003e。字母l和数字1有时候是看不出来的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e\u003cspan id=\"more-4758\"\u003e\u003c/span\u003e伪装欺诈\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e把注释和代码交织在一起\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003efor(j=0; j\u0026lt;array_len; j+ =8)\n{\n    total += array[j+0 ];\n    total += array[j+1 ];\n    total += array[j+2 ]; /* Main body of\n    total += array[j+3]; * loop is unrolled\n    total += array[j+4]; * for greater speed.\n    total += array[j+5]; */\n    total += array[j+6 ];\n    total += array[j+7 ];\n}\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e隐藏宏定义\u003c/strong\u003e。如：#define a=b a=0-b，当人们看到a=b时，谁也想不到那是一个宏。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e换行\u003c/strong\u003e。如下所示，下面的示例使用搜索xy_z变得困难。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#define local_var xy\\\n_z // local_var OK\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e代码和显示不一致\u003c/strong\u003e。比如，你的界面显示叫postal code，但是代码里确叫 zipcode.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e隐藏全局变量\u003c/strong\u003e。把使用全局变量以函数参数的方式传递给函数，这样可以让人觉得那个变量不是全局变量。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e使用同意词\u003c/strong\u003e。如：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#define xxx global_var // in file std.h\u0026amp;nbsp;\n#define xy_z xxx // in file ..\\other\\substd.h\u0026amp;nbsp;\n#define local_var xy_z // in file ..\\codestd\\inst.h\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e使用相似的变量名\u003c/strong\u003e。如：单词相似，swimmer 和 swimner，字母相似：ilI1| 或 oO08。parselnt 和 parseInt， D0Calc 和 DOCalc。还有这一组：xy_Z, xy__z, _xy_z, _xyz, XY_Z, xY_z, Xy_z。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e重载函数\u003c/strong\u003e。使用相同的函数名，但是其功能和具体实现完全没有关系。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e操作符重载\u003c/strong\u003e。重载操作符可以让你的代码变得诡异，感谢CCTV，感谢C++。这个东西是可以把混乱代码提高到一种艺术的形式。比如：重载一个类的 ! 操作符，但实际功能并不是取反，让其返回一个整数。于是，如果你使用 ! ! 操作符，那么，有意思的事就发生了—— 先是调用类的重载 ! 操作符，然后把其返回的整数给 ! 成了 布尔变量，如果是 !!! 呢？呵呵。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e#define\u003c/strong\u003e。看过本站那些混乱代码的文章，你都会知道宏定义和预编译对于写出不可读的代码的重大意义。不过，一个具有想像力的东西是——在头文件中使用预编译来查看这个头文件被include了几次，而被include不同的次数时，其中的函数定义完全不一样。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#ifndef DONE\n#ifdef TWICE\n// put stuff here to declare 3rd time around\nvoid g(char* str);\n#define DONE\n#else // TWICE\n#ifdef ONCE\n// put stuff here to declare 2nd time around\u0026lt;\nvoid g(void* str);\n#define TWICE\n#else // ONCE\n// put stuff here to declare 1st time around\nvoid g(std::string str);\n#define ONCE\n#endif // ONCE\n#endif // TWICE\n#endif // DONE\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%96%87%E6%A1%A3%E5%92%8C%E6%B3%A8%E9%87%8A\"\u003e\u003c/span\u003e文档和注释\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e在注释中撒谎\u003c/strong\u003e。你不用真的去撒谎，只需在改代码的时候不要更新注释就可以了。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e注释明显的东西\u003c/strong\u003e。比如：/* add 1 to i */。（参看本站的“\u003ca title=\"五种应该避免的代码注释\" href=\"https://coolshell.cn/articles/2746.html\" target=\"_blank\"\u003e五种应该避免的注释\u003c/a\u003e”）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e只注释是什么，而不是为什么\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e不要注释秘密\u003c/strong\u003e。如果你开发一个航班系统，请你一定要保证每有一个新的航班被加入，就得要修改25个以上的位置的程序。千万别把这个事写在文档中。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e注重细节\u003c/strong\u003e。当你设计一个很复杂的算法的时候，你一定要把所有的详细细设计都写下来，没有100页不能罢休，段落要有5级以上，段落编号要有500个以上，例如：1.2.4.6.3.13 – Display all impacts for activity where selected mitigations can apply (short pseudocode omitted). 这样，当你写代码的时候，你就可以让你的代码和文档一致，如：Act1_2_4_6_3_13()\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e千万不要注释度衡单位\u003c/strong\u003e。比如时间用的是秒还是毫秒，尺寸用的是像素还是英寸，大小是MB还是KB。等等。另外，在你的代码里，你可以混用不同的度衡单位，但也不要注释。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGotchas\u003c/strong\u003e。陷阱，千万不要注释代码中的陷阱。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e在注释和文档中发泄不满\u003c/strong\u003e。（参看本站的“\u003ca title=\"五种应该避免的代码注释\" href=\"https://coolshell.cn/articles/2746.html\" target=\"_blank\"\u003e五种应该避免的注释\u003c/a\u003e”）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\"\u003e\u003c/span\u003e程序设计\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eJava Casts\u003c/strong\u003e。Java的类型转型是天赐之物。每一次当你从Collection里取到一个object的时候，你都需要把其转回原来的类型。因些，这些转型操作会出现在N多的地方。如果你改变了类型，那么你不一定能改变所有的地方。而编译器可能能检查到，也可能检查不到。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e利用Java的冗余\u003c/strong\u003e。比如：Bubblegum b = new Bubblegom(); 和 swimmer = swimner + 1; 注意变量间的细微差别。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e从不验证\u003c/strong\u003e。从不验证输入的数据，从不验证函数的返回值。这样做可以向大家展示你是多么的信任公司的设备和其它程序员。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e不要封装\u003c/strong\u003e。调用者需要知道被调用的所有的细节。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e克隆和拷贝\u003c/strong\u003e。为了效率，你要学会使用copy + paste。你几乎都不用理解别人的代码，你就可以高效地编程了。（陈皓注：Copy + Paste出来的代码bug多得不能再多）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e巨大的listener\u003c/strong\u003e。写一个listener，然后让你的所有的button类都使用这个listener，这样你可以在这个listener中整出一大堆if…else…语句，相当的刺激。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e使用三维数组\u003c/strong\u003e。如果你觉得三维还不足够，你可以试试四维。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e混用\u003c/strong\u003e。同时使用类的get/set方法和直接访问那个public变量。这样做的好处是可以极大的挫败维护人员。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e包装，包装，包装\u003c/strong\u003e。把你所有的API都包装上6到8遍，包装深度多达4层以上。然后包装出相似的功能。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e没有秘密\u003c/strong\u003e。把所有的成员都声明成public的。这样，你以后就很难限制其被人使用，而且这样可以和别的代码造成更多的耦合度，可以让你的代码存活得更久。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e排列和阻碍\u003c/strong\u003e。把drawRectangle(height, width) 改成 drawRectangle(width, height)，等release了几个版本后，再把其改回去。这样维护程序的程序员们将不能很快地明白哪一个是对的。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e把变量改在名字上\u003c/strong\u003e。例如，把setAlignment(int alignment)改成，setLeftAlignment, setRightAlignment, setCenterAlignment。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePackratting\u003c/strong\u003e。保留你所有的没有使用的和陈旧的变量，方法和代码。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eThat’s Fina\u003c/strong\u003el。Final你所有的子结点的类，这样，当你做完这个项目后，没有人可以通过继承来扩展你的类。java.lang.String不也是这样吗？\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e避免使用接口\u003c/strong\u003e。在java中，BS接口，在C++中BS使用虚函数。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e避免使用layout\u003c/strong\u003e。这样就使得我们只能使用绝对坐标。如果你的老大强制你使用layout，你可以考虑使用GridBagLayout，然后把grid坐标hard code.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e环境变量\u003c/strong\u003e。如果你的代码需要使用环境变量。(getenv() – C++ / System.getProperty() – Java )，那么，你应该把你的类的成员的初始化使用环境变量，而不是构造函数。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e使用Magic numbe\u003c/strong\u003er。参看《\u003ca title=\"Linux 2.6.39-rc3的一个插曲\" href=\"https://coolshell.cn/articles/4576.html\" target=\"_blank\"\u003eLinux一个插曲\u003c/a\u003e》。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e使用全局变量\u003c/strong\u003e。1）把全局变量的初始化放在不同的函数中，就算这个函数和这个变量没有任何关系，这样能够让我们的维护人员就像做侦探工作一样。2）使用全局变量可以让你的函数的参数变得少一些。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e配置文件\u003c/strong\u003e。配置文件主要用于一些参数的初始化。在编程中，我们可以让配置文件中的参数名和实际程序中的名字不一样。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e膨胀你的类\u003c/strong\u003e。让你的类尽可能地拥有各种臃肿和晦涩的方法。比如，你的类只实现一种可能性，但是你要提供所有可能性的方法。不要定义其它的类，把所有的功能都放在一个类中。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e使用子类\u003c/strong\u003e。面向对象是写出无法维护代码的天赐之物。如果你有一个类有十个成为（变量和方法）你可以考虑写10个层次的继承，然后把这十个属性分别放在这十个层次中。如果可能的话，把这十个类分别放在十个不同的文件中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%B7%B7%E4%B9%B1%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81\"\u003e\u003c/span\u003e混乱你的代码\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e使用XML\u003c/strong\u003e。XML的强大是无人能及的。使用XML你可以把本来只要10行的代码变成100行。而且，还要逼着别人也有XML。（参看，\u003ca title=\"信XML，得永生！\" href=\"https://coolshell.cn/articles/2504.html\" target=\"_blank\"\u003e信XML得永生\u003c/a\u003e，\u003ca title=\"信XML，得自信\" href=\"https://coolshell.cn/articles/3498.html\" target=\"_blank\"\u003e信XML得自信\u003c/a\u003e）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e混乱C代码\u003c/strong\u003e。在《\u003ca title=\"如何加密/混乱C源代码\" href=\"https://coolshell.cn/articles/933.html\" target=\"_blank\"\u003e如何加密源代码\u003c/a\u003e》中已经说过一些方法了，这里再补充一些。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e使用不同的进制\u003c/strong\u003e。比如：10 和010不是一样的。再比如：array = new int[]{   111,   120,   013,   121,};\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e尽量使用void*\u003c/strong\u003e。然后把其转成各种类型\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e使用隐式的转型\u003c/strong\u003e。C++的构造函数可以让你神不知鬼不觉得完成转型。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e分解条件表达式\u003c/strong\u003e。如：把 a==100分解成，a\u0026gt;99 \u0026amp;\u0026amp; a\u0026lt;101\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e学会利用分号\u003c/strong\u003e。如：if ( a );else;{   int d;   d = c;}\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e间接转型\u003c/strong\u003e。如：把double转string，写成new Double(d).toString() 而不是 Double.toString(d)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e大量使用嵌套\u003c/strong\u003e。一个NB的程序员可以在一行代码上使用超过10层的小括号（），或是在一个函数里使用超过20层的语句嵌套{}，把嵌套的if else 转成 [? :] 也是一件很NB的事。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e使用C的变种数组\u003c/strong\u003e。myArray[i] 可以变成*(myArray + i) 也可以变成 *(i + myArray) 其等价于 i[myArray]。再看一个函数调用的示例，函数声明：int myfunc(int q, int p) { return p%q; } 函数调用myfunc(6291, 8)[Array];\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e长代码行\u003c/strong\u003e。一行的代码越长越好。这样别人阅读时就需要来来回回的\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e不要较早的return\u003c/strong\u003e。不要使用goto，不要使用break，这样，你就需要至少5层以上的if-else来处理错误。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e不要使用{}\u003c/strong\u003e。不要在if else使用{}，尤其是在你重量地使用if-else嵌套时，你甚至可以在其中乱缩进代码，这样一来，就算是最有经验的程序员也会踩上陷阱。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e使用宏定义\u003c/strong\u003e。宏定义绝对是混乱C/C++代码的最佳利器。参看 \u003ca title=\"老手是这样教新手编程的\" href=\"https://coolshell.cn/articles/2420.html\" target=\"_blank\"\u003e老手是这样教新手编程的\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e琐碎的封装\u003c/strong\u003e。比较封装一个bool类，类里面什么都做，就是一个bool.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e循环\u003c/strong\u003e。千万不可用for(int i=0; i\u0026lt;n; i++)使用while代替for，交换n和i，把\u0026lt;改成\u0026lt;=，使用 i–调整步伐 。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%B5%8B%E8%AF%95\"\u003e\u003c/span\u003e测试\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e从不测试\u003c/strong\u003e。千万不要测试任何的出错处理，从来也不检测系统调用的返回值。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e永远不做性能测试\u003c/strong\u003e。如果不够快就告诉用户换一个更快的机器。如果你一做测试，那么就可能会要改你的算法，甚至重设计，重新架构。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e不要写测试案例\u003c/strong\u003e。不要做什么代码覆盖率测试，自动化测试。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e测试是懦夫行为\u003c/strong\u003e。一个勇敢的程序员是根本不需要这一步的。太多的程序太害怕他们的老板，害怕失去工作，害怕用户抱怨，甚至被起诉。这种担心害怕直接影响了生产力。如果你对你的代码有强大的信心，那还要什么测试呢？真正的程序员是不需要测试自己的代码的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%85%B6%E5%AE%83\"\u003e\u003c/span\u003e其它\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e你的老板什么都知道\u003c/strong\u003e。无论你的老板有多SB，你都要严格地遵照他的旨意办事，这样一来，你会学到更多的知识如何写出无法维护的代码来的。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e颠覆Help Desk\u003c/strong\u003e。你要确保你那满是bug的程序永远不要被维护团队知道。当用户打电话和写邮件给你的时候，你就不要理会，就算要理会，让用户重做系统或是告诉用户其帐号有问题，是标准的回答。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e闭嘴\u003c/strong\u003e。对于一些像y2k这样的大bug，你要学会守口如瓶，不要告诉任何人，包括你的亲人好友以及公司的同事和管理层，这样当到那一天的时候，你就可以用这个bug挣钱了。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e忽悠\u003c/strong\u003e。你会学会忽悠，就算你的代码写得很烂，你也要为其挂上GoF设计模式的标签，就算你的项目做得再烂，你也要为其挂上敏捷的标签，只有学会\u003ca title=\"再谈敏捷和ThoughtWorks中国咨询师\" href=\"https://coolshell.cn/articles/3745.html\" target=\"_blank\"\u003e像中国Thoughtworks的咨询师那样去忽悠\u003c/a\u003e，你才能学会更炫更酷的方法，让整个团队和公司，甚至整个业界都开始躁动，这样才能真正为难维护的代码铺平道路。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这个文档中还有很多很多，实在是太TMD强大了，大家自己去看看吧。有精力有能力的朋友不妨把其翻译成中文。\u003c/p\u003e\n\u003cp\u003e总之，我们的口号是——\u003c/p\u003e\n\u003ch4 style=\"text-align: center;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"Write_Everywhere_Read_Nowhere\"\u003e\u003c/span\u003eWrite Everywhere, Read Nowhere\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/07/api-design-300x278-2-150x150.jpg\" alt=\"API设计原则 – Qt官网的设计实践总结\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_title\"\u003eAPI设计原则 – Qt官网的设计实践总结\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8088.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/7.jpg\" alt=\"对技术的态度\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8088.html\" class=\"wp_rp_title\"\u003e对技术的态度\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/4990.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2011/07/programmer-150x150.png\" alt=\"程序员技术练级攻略\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/4990.html\" class=\"wp_rp_title\"\u003e程序员技术练级攻略\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/4102.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/25.jpg\" alt=\"如何学好C语言\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/4102.html\" class=\"wp_rp_title\"\u003e如何学好C语言\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/1992.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2009/12/language-fanboys-150x150.jpg\" alt=\"程序员眼中的编程语言\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/1992.html\" class=\"wp_rp_title\"\u003e程序员眼中的编程语言\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-4758\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"1dd67d4cad\"\u003e\u003cimg id=\"rating_4758_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4758, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8469d8ec4609f15b49424451-=\"\"/\u003e\u003cimg id=\"rating_4758_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4758, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8469d8ec4609f15b49424451-=\"\"/\u003e\u003cimg id=\"rating_4758_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4758, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8469d8ec4609f15b49424451-=\"\"/\u003e\u003cimg id=\"rating_4758_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4758, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8469d8ec4609f15b49424451-=\"\"/\u003e\u003cimg id=\"rating_4758_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4758, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.4, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8469d8ec4609f15b49424451-=\"\"/\u003e (\u003cstrong\u003e70\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.39\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_4758_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"如何写出无法维护的代码\"/\u003e\u003cmeta itemprop=\"headline\" content=\"如何写出无法维护的代码\"/\u003e\u003cmeta itemprop=\"description\" content=\"酷壳里有很多我觉得很不错的文章，但是访问量最大的却是那篇《6个变态的Hello World》，和它能在本站右边栏“全站热门”中出现的还有“如何加密源代码”，以及编程真难啊等这样的文章。可见本站的读者们的偏好，我也相信你们都是“身怀绝技”的程序员。所以，今天给大家推荐这篇文章，相信一定能触动大家的兴奋点。\n\n这篇文章的原文在这里（http://mindprod.com/jgloss/unmain...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2011-06-03T08:52:42+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2011-09-08T15:28:14+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/4758.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/4758.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.39\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"70\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-4758-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2011-06-03T08:52:42+08:00",
  "Author": "陈皓"
}