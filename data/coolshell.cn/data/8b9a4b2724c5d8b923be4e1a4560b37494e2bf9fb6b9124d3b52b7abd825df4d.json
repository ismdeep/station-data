{
  "Source": "coolshell.cn",
  "Title": "AWK 简明教程",
  "Link": "https://coolshell.cn/articles/9070.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"abbf97fbfb7a0b209e53dd0d-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright size-full wp-image-9093\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/02/awk.jpg\" width=\"350\" height=\"279\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/02/awk.jpg 350w, https://coolshell.cn/wp-content/uploads/2013/02/awk-300x239.jpg 300w, https://coolshell.cn/wp-content/uploads/2013/02/awk-339x270.jpg 339w\" sizes=\"(max-width: 350px) 100vw, 350px\"/\u003e有一些网友看了前两天的《\u003ca title=\"应该知道的Linux技巧\" href=\"https://coolshell.cn/articles/8883.html\" target=\"_blank\"\u003eLinux下应该知道的技巧\u003c/a\u003e》希望我能教教他们用awk和sed，所以，出现了这篇文章。我估计这些80后的年轻朋友可能对awk/sed这类上古神器有点陌生了，所以需要我这个老家伙来炒炒冷饭。\u003cstrong\u003e况且，AWK是贝尔实验室1977年搞出来的文本出现神器，今年是蛇年，是AWK的本命年，而且年纪和我相仿，所以非常有必要为他写篇文章\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e之所以叫AWK是因为其取了三位创始人 \u003ca title=\"Alfred Aho\" href=\"https://en.wikipedia.org/wiki/Alfred_Aho\"\u003eAlfred Aho\u003c/a\u003e，\u003ca title=\"Peter J. Weinberger\" href=\"https://en.wikipedia.org/wiki/Peter_J._Weinberger\"\u003ePeter Weinberger\u003c/a\u003e, 和 \u003ca title=\"Brian Kernighan\" href=\"https://en.wikipedia.org/wiki/Brian_Kernighan\"\u003eBrian Kernighan\u003c/a\u003e 的Family Name的首字符。要学AWK，就得提一提AWK的一本相当经典的书《\u003ca href=\"http://plan9.bell-labs.com/cm/cs/awkbook/\" rel=\"nofollow\"\u003eThe AWK Programming Language\u003c/a\u003e》，它在\u003ca href=\"http://book.douban.com/subject/1876898/\" target=\"_blank\"\u003e豆瓣上的评分\u003c/a\u003e是9.4分！在\u003ca href=\"https://www.amazon.cn/mn/detailApp/?asin=020107981X\" target=\"_blank\"\u003e亚马逊上居然卖1022.30元\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e我在这里的教程并不想面面俱到，本文和我之前的\u003ca title=\"Go 语言简介（上）— 语法\" href=\"https://coolshell.cn/articles/8460.html\" target=\"_blank\"\u003eGo语言简介\u003c/a\u003e一样，全是示例，基本无废话。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e我只想达到两个目的：\u003c/strong\u003e\u003c/p\u003e\n\u003cp style=\"text-align: left; padding-left: 30px;\"\u003e\u003cstrong\u003e1）你可以在乘坐公交地铁上下班，或是在坐马桶拉大便时读完（保证是一泡大便的工夫）。\u003c/strong\u003e\u003c/p\u003e\n\u003cp style=\"text-align: left; padding-left: 30px;\"\u003e\u003cstrong\u003e2）我只想让这篇博文像一个火辣的脱衣舞女挑起你的兴趣，然后还要你自己去下工夫去撸。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e废话少说，我们开始脱吧（注：这里只是topless）。\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E8%B5%B7%E6%AD%A5%E4%B8%8A%E5%8F%B0\" title=\"起步上台\"\u003e起步上台\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E8%84%B1%E6%8E%89%E5%A4%96%E5%A5%97\" title=\"脱掉外套\"\u003e脱掉外套\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E8%BF%87%E6%BB%A4%E8%AE%B0%E5%BD%95\" title=\"过滤记录\"\u003e过滤记录\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E5%86%85%E5%BB%BA%E5%8F%98%E9%87%8F\" title=\"内建变量\"\u003e内建变量\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E6%8C%87%E5%AE%9A%E5%88%86%E9%9A%94%E7%AC%A6\" title=\"指定分隔符\"\u003e指定分隔符\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#%E8%84%B1%E6%8E%89%E8%A1%AC%E8%A1%AB\" title=\"脱掉衬衫\"\u003e脱掉衬衫\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D\" title=\"字符串匹配\"\u003e字符串匹配\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#%E7%BB%9F%E8%AE%A1\" title=\"统计\"\u003e统计\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-9\" href=\"#%E8%84%B1%E6%8E%89%E5%86%85%E8%A1%A3\" title=\"脱掉内衣\"\u003e脱掉内衣\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-10\" href=\"#awk%E8%84%9A%E6%9C%AC\" title=\"awk脚本\"\u003eawk脚本\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-11\" href=\"#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\" title=\"环境变量\"\u003e环境变量\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-12\" href=\"#%E5%87%A0%E4%B8%AA%E8%8A%B1%E6%B4%BB\" title=\"几个花活\"\u003e几个花活\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-13\" href=\"#%E8%87%AA%E5%B7%B1%E6%92%B8%E5%90%A7\" title=\"自己撸吧\"\u003e自己撸吧\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E8%B5%B7%E6%AD%A5%E4%B8%8A%E5%8F%B0\"\u003e\u003c/span\u003e起步上台\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e我从netstat命令中提取了如下信息作为用例：\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-9070\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ cat netstat.txt\nProto Recv-Q Send-Q Local-Address          Foreign-Address             State\ntcp        0      0 0.0.0.0:3306           0.0.0.0:*                   LISTEN\ntcp        0      0 0.0.0.0:80             0.0.0.0:*                   LISTEN\ntcp        0      0 127.0.0.1:9000         0.0.0.0:*                   LISTEN\ntcp        0      0 coolshell.cn:80        124.205.5.146:18245         TIME_WAIT\ntcp        0      0 coolshell.cn:80        61.140.101.185:37538        FIN_WAIT2\ntcp        0      0 coolshell.cn:80        110.194.134.189:1032        ESTABLISHED\ntcp        0      0 coolshell.cn:80        123.169.124.111:49809       ESTABLISHED\ntcp        0      0 coolshell.cn:80        116.234.127.77:11502        FIN_WAIT2\ntcp        0      0 coolshell.cn:80        123.169.124.111:49829       ESTABLISHED\ntcp        0      0 coolshell.cn:80        183.60.215.36:36970         TIME_WAIT\ntcp        0   4166 coolshell.cn:80        61.148.242.38:30901         ESTABLISHED\ntcp        0      1 coolshell.cn:80        124.152.181.209:26825       FIN_WAIT1\ntcp        0      0 coolshell.cn:80        110.194.134.189:4796        ESTABLISHED\ntcp        0      0 coolshell.cn:80        183.60.212.163:51082        TIME_WAIT\ntcp        0      1 coolshell.cn:80        208.115.113.92:50601        LAST_ACK\ntcp        0      0 coolshell.cn:80        123.169.124.111:49840       ESTABLISHED\ntcp        0      0 coolshell.cn:80        117.136.20.85:50025         FIN_WAIT2\ntcp        0      0 :::22                  :::*                        LISTEN\n\u003c/pre\u003e\n\u003cp\u003e下面是最简单最常用的awk示例，其输出第1列和第4例，\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e其中单引号中的被大括号括着的就是awk的语句，注意，其只能被单引号包含。\u003c/li\u003e\n\u003cli\u003e其中的$1..$n表示第几例。注：$0表示整个行。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"1\"\u003e$ awk \u0026#39;{print $1, $4}\u0026#39; netstat.txt\nProto Local-Address\ntcp 0.0.0.0:3306\ntcp 0.0.0.0:80\ntcp 127.0.0.1:9000\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp :::22\u003c/pre\u003e\n\u003cp\u003e我们再来看看awk的格式化输出，和C语言的printf没什么两样：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"1\"\u003e$ awk \u0026#39;{printf \u0026#34;%-8s %-8s %-8s %-18s %-22s %-15s\\n\u0026#34;,$1,$2,$3,$4,$5,$6}\u0026#39; netstat.txt\nProto    Recv-Q   Send-Q   Local-Address      Foreign-Address        State\ntcp      0        0        0.0.0.0:3306       0.0.0.0:*              LISTEN\ntcp      0        0        0.0.0.0:80         0.0.0.0:*              LISTEN\ntcp      0        0        127.0.0.1:9000     0.0.0.0:*              LISTEN\ntcp      0        0        coolshell.cn:80    124.205.5.146:18245    TIME_WAIT\ntcp      0        0        coolshell.cn:80    61.140.101.185:37538   FIN_WAIT2\ntcp      0        0        coolshell.cn:80    110.194.134.189:1032   ESTABLISHED\ntcp      0        0        coolshell.cn:80    123.169.124.111:49809  ESTABLISHED\ntcp      0        0        coolshell.cn:80    116.234.127.77:11502   FIN_WAIT2\ntcp      0        0        coolshell.cn:80    123.169.124.111:49829  ESTABLISHED\ntcp      0        0        coolshell.cn:80    183.60.215.36:36970    TIME_WAIT\ntcp      0        4166     coolshell.cn:80    61.148.242.38:30901    ESTABLISHED\ntcp      0        1        coolshell.cn:80    124.152.181.209:26825  FIN_WAIT1\ntcp      0        0        coolshell.cn:80    110.194.134.189:4796   ESTABLISHED\ntcp      0        0        coolshell.cn:80    183.60.212.163:51082   TIME_WAIT\ntcp      0        1        coolshell.cn:80    208.115.113.92:50601   LAST_ACK\ntcp      0        0        coolshell.cn:80    123.169.124.111:49840  ESTABLISHED\ntcp      0        0        coolshell.cn:80    117.136.20.85:50025    FIN_WAIT2\ntcp      0        0        :::22              :::*                   LISTEN\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E8%84%B1%E6%8E%89%E5%A4%96%E5%A5%97\"\u003e\u003c/span\u003e脱掉外套\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E8%BF%87%E6%BB%A4%E8%AE%B0%E5%BD%95\"\u003e\u003c/span\u003e过滤记录\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e我们再来看看如何过滤记录（下面过滤条件为：第三列的值为0 \u0026amp;\u0026amp; 第6列的值为LISTEN）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"1\"\u003e$ awk \u0026#39;$3==0 \u0026amp;\u0026amp; $6==\u0026#34;LISTEN\u0026#34; \u0026#39; netstat.txt\ntcp        0      0 0.0.0.0:3306               0.0.0.0:*              LISTEN\ntcp        0      0 0.0.0.0:80                 0.0.0.0:*              LISTEN\ntcp        0      0 127.0.0.1:9000             0.0.0.0:*              LISTEN\ntcp        0      0 :::22                      :::*                   LISTEN\u003c/pre\u003e\n\u003cp\u003e其中的“==”为比较运算符。其他比较运算符：!=, \u0026gt;, \u0026lt;, \u0026gt;=, \u0026lt;=\u003c/p\u003e\n\u003cp\u003e我们来看看各种过滤记录的方式：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"1\"\u003e$ awk \u0026#39; $3\u0026gt;0 {print $0}\u0026#39; netstat.txt\nProto Recv-Q Send-Q Local-Address          Foreign-Address             State\ntcp        0   4166 coolshell.cn:80        61.148.242.38:30901         ESTABLISHED\ntcp        0      1 coolshell.cn:80        124.152.181.209:26825       FIN_WAIT1\ntcp        0      1 coolshell.cn:80        208.115.113.92:50601        LAST_ACK\u003c/pre\u003e\n\u003cp\u003e如果我们需要表头的话，我们可以引入内建变量NR：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"1\"\u003e$ awk \u0026#39;$3==0 \u0026amp;\u0026amp; $6==\u0026#34;LISTEN\u0026#34; || NR==1 \u0026#39; netstat.txt\nProto Recv-Q Send-Q Local-Address          Foreign-Address             State\ntcp        0      0 0.0.0.0:3306           0.0.0.0:*                   LISTEN\ntcp        0      0 0.0.0.0:80             0.0.0.0:*                   LISTEN\ntcp        0      0 127.0.0.1:9000         0.0.0.0:*                   LISTEN\ntcp        0      0 :::22                  :::*                        LISTEN\u003c/pre\u003e\n\u003cp\u003e再加上格式化输出：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"1\"\u003e$ awk \u0026#39;$3==0 \u0026amp;\u0026amp; $6==\u0026#34;LISTEN\u0026#34; || NR==1 {printf \u0026#34;%-20s %-20s %s\\n\u0026#34;,$4,$5,$6}\u0026#39; netstat.txt\nLocal-Address        Foreign-Address      State\n0.0.0.0:3306         0.0.0.0:*            LISTEN\n0.0.0.0:80           0.0.0.0:*            LISTEN\n127.0.0.1:9000       0.0.0.0:*            LISTEN\n:::22                :::*                 LISTEN\u003c/pre\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%86%85%E5%BB%BA%E5%8F%98%E9%87%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e内建变量\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e说到了内建变量，我们可以来看看awk的一些内建变量：\u003c/p\u003e\n\u003ctable border=\"0\" cellspacing=\"1\" cellpadding=\"4\"\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003e$0\u003c/td\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003e当前记录（这个变量中存放着整个行的内容）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003e$1~$n\u003c/td\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003e当前记录的第n个字段，字段间由FS分隔\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003eFS\u003c/td\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003e输入字段分隔符 默认是空格或Tab\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003eNF\u003c/td\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003e当前记录中的字段个数，就是有多少列\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003eNR\u003c/td\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003e已经读出的记录数，就是行号，从1开始，如果有多个文件话，这个值也是不断累加中。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003eFNR\u003c/td\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003e当前记录数，与NR不同的是，这个值会是各个文件自己的行号\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003eRS\u003c/td\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003e输入的记录分隔符， 默认为换行符\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003eOFS\u003c/td\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003e输出字段分隔符， 默认也是空格\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003eORS\u003c/td\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003e输出的记录分隔符，默认为换行符\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003eFILENAME\u003c/td\u003e\n\u003ctd bgcolor=\"#ffffff\"\u003e当前输入文件的名字\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e怎么使用呢，比如：我们如果要输出行号：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"1\"\u003e$ awk \u0026#39;$3==0 \u0026amp;\u0026amp; $6==\u0026#34;ESTABLISHED\u0026#34; || NR==1 {printf \u0026#34;%02s %s %-20s %-20s %s\\n\u0026#34;,NR, FNR, $4,$5,$6}\u0026#39; netstat.txt\n01 1 Local-Address        Foreign-Address      State\n07 7 coolshell.cn:80      110.194.134.189:1032 ESTABLISHED\n08 8 coolshell.cn:80      123.169.124.111:49809 ESTABLISHED\n10 10 coolshell.cn:80      123.169.124.111:49829 ESTABLISHED\n14 14 coolshell.cn:80      110.194.134.189:4796 ESTABLISHED\n17 17 coolshell.cn:80      123.169.124.111:49840 ESTABLISHED\u003c/pre\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%8C%87%E5%AE%9A%E5%88%86%E9%9A%94%E7%AC%A6\"\u003e\u003c/span\u003e\u003cstrong\u003e指定分隔符\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"1\"\u003e$  awk  \u0026#39;BEGIN{FS=\u0026#34;:\u0026#34;} {print $1,$3,$6}\u0026#39; /etc/passwd\nroot 0 /root\nbin 1 /bin\ndaemon 2 /sbin\nadm 3 /var/adm\nlp 4 /var/spool/lpd\nsync 5 /sbin\nshutdown 6 /sbin\nhalt 7 /sbin\u003c/pre\u003e\n\u003cp\u003e上面的命令也等价于：（-F的意思就是指定分隔符）\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ awk -F: \u0026#39;{print $1,$3,$6}\u0026#39; /etc/passwd\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e注：如果你要指定多个分隔符，你可以这样来：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003eawk -F \u0026#39;[;:]\u0026#39;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e再来看一个以\\t作为分隔符输出的例子（下面使用了/etc/passwd文件，这个文件是以:分隔的）：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"1\"\u003e$ awk  -F: \u0026#39;{print $1,$3,$6}\u0026#39; OFS=\u0026#34;\\t\u0026#34; /etc/passwd\nroot    0       /root\nbin     1       /bin\ndaemon  2       /sbin\nadm     3       /var/adm\nlp      4       /var/spool/lpd\nsync    5       /sbin\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E8%84%B1%E6%8E%89%E8%A1%AC%E8%A1%AB\"\u003e\u003c/span\u003e脱掉衬衫\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D\"\u003e\u003c/span\u003e字符串匹配\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e我们再来看几个字符串匹配的示例：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"1,8\"\u003e$ awk \u0026#39;$6 ~ /FIN/ || NR==1 {print NR,$4,$5,$6}\u0026#39; OFS=\u0026#34;\\t\u0026#34; netstat.txt\n1       Local-Address   Foreign-Address State\n6       coolshell.cn:80 61.140.101.185:37538    FIN_WAIT2\n9       coolshell.cn:80 116.234.127.77:11502    FIN_WAIT2\n13      coolshell.cn:80 124.152.181.209:26825   FIN_WAIT1\n18      coolshell.cn:80 117.136.20.85:50025     FIN_WAIT2\n\n$ $ awk \u0026#39;$6 ~ /WAIT/ || NR==1 {print NR,$4,$5,$6}\u0026#39; OFS=\u0026#34;\\t\u0026#34; netstat.txt\n1       Local-Address   Foreign-Address State\n5       coolshell.cn:80 124.205.5.146:18245     TIME_WAIT\n6       coolshell.cn:80 61.140.101.185:37538    FIN_WAIT2\n9       coolshell.cn:80 116.234.127.77:11502    FIN_WAIT2\n11      coolshell.cn:80 183.60.215.36:36970     TIME_WAIT\n13      coolshell.cn:80 124.152.181.209:26825   FIN_WAIT1\n15      coolshell.cn:80 183.60.212.163:51082    TIME_WAIT\n18      coolshell.cn:80 117.136.20.85:50025     FIN_WAIT2\u003c/pre\u003e\n\u003cp\u003e上面的第一个示例匹配FIN状态， 第二个示例匹配WAIT字样的状态。其实 ~ 表示模式开始。/ /中是模式。这就是一个正则表达式的匹配。\u003c/p\u003e\n\u003cp\u003e其实awk可以像grep一样的去匹配第一行，就像这样：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"1\"\u003e$ awk \u0026#39;/LISTEN/\u0026#39; netstat.txt\ntcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN\ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN\ntcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN\ntcp        0      0 :::22                   :::*                    LISTEN\u003c/pre\u003e\n\u003cp\u003e我们可以使用 “/FIN|TIME/” 来匹配 FIN 或者 TIME :\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"1\"\u003e$ awk \u0026#39;$6 ~ /FIN|TIME/ || NR==1 {print NR,$4,$5,$6}\u0026#39; OFS=\u0026#34;\\t\u0026#34; netstat.txt\n1       Local-Address   Foreign-Address State\n5       coolshell.cn:80 124.205.5.146:18245     TIME_WAIT\n6       coolshell.cn:80 61.140.101.185:37538    FIN_WAIT2\n9       coolshell.cn:80 116.234.127.77:11502    FIN_WAIT2\n11      coolshell.cn:80 183.60.215.36:36970     TIME_WAIT\n13      coolshell.cn:80 124.152.181.209:26825   FIN_WAIT1\n15      coolshell.cn:80 183.60.212.163:51082    TIME_WAIT\n18      coolshell.cn:80 117.136.20.85:50025     FIN_WAIT2\u003c/pre\u003e\n\u003cp\u003e再来看看模式取反的例子：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"1\"\u003e$ awk \u0026#39;$6 !~ /WAIT/ || NR==1 {print NR,$4,$5,$6}\u0026#39; OFS=\u0026#34;\\t\u0026#34; netstat.txt\n1       Local-Address   Foreign-Address State\n2       0.0.0.0:3306    0.0.0.0:*       LISTEN\n3       0.0.0.0:80      0.0.0.0:*       LISTEN\n4       127.0.0.1:9000  0.0.0.0:*       LISTEN\n7       coolshell.cn:80 110.194.134.189:1032    ESTABLISHED\n8       coolshell.cn:80 123.169.124.111:49809   ESTABLISHED\n10      coolshell.cn:80 123.169.124.111:49829   ESTABLISHED\n12      coolshell.cn:80 61.148.242.38:30901     ESTABLISHED\n14      coolshell.cn:80 110.194.134.189:4796    ESTABLISHED\n16      coolshell.cn:80 208.115.113.92:50601    LAST_ACK\n17      coolshell.cn:80 123.169.124.111:49840   ESTABLISHED\n19      :::22   :::*    LISTEN\u003c/pre\u003e\n\u003cp\u003e或是：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003eawk \u0026#39;!/WAIT/\u0026#39; netstat.txt\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e折分文件\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eawk拆分文件很简单，使用重定向就好了。下面这个例子，是按第6例分隔文件，相当的简单（其中的NR!=1表示不处理表头）。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"1\"\u003e$ awk \u0026#39;NR!=1{print \u0026gt; $6}\u0026#39; netstat.txt\n\n$ ls\nESTABLISHED  FIN_WAIT1  FIN_WAIT2  LAST_ACK  LISTEN  netstat.txt  TIME_WAIT\n\n$ cat ESTABLISHED\ntcp        0      0 coolshell.cn:80        110.194.134.189:1032        ESTABLISHED\ntcp        0      0 coolshell.cn:80        123.169.124.111:49809       ESTABLISHED\ntcp        0      0 coolshell.cn:80        123.169.124.111:49829       ESTABLISHED\ntcp        0   4166 coolshell.cn:80        61.148.242.38:30901         ESTABLISHED\ntcp        0      0 coolshell.cn:80        110.194.134.189:4796        ESTABLISHED\ntcp        0      0 coolshell.cn:80        123.169.124.111:49840       ESTABLISHED\n\n$ cat FIN_WAIT1\ntcp        0      1 coolshell.cn:80        124.152.181.209:26825       FIN_WAIT1\n\n$ cat FIN_WAIT2\ntcp        0      0 coolshell.cn:80        61.140.101.185:37538        FIN_WAIT2\ntcp        0      0 coolshell.cn:80        116.234.127.77:11502        FIN_WAIT2\ntcp        0      0 coolshell.cn:80        117.136.20.85:50025         FIN_WAIT2\n\n$ cat LAST_ACK\ntcp        0      1 coolshell.cn:80        208.115.113.92:50601        LAST_ACK\n\n$ cat LISTEN\ntcp        0      0 0.0.0.0:3306           0.0.0.0:*                   LISTEN\ntcp        0      0 0.0.0.0:80             0.0.0.0:*                   LISTEN\ntcp        0      0 127.0.0.1:9000         0.0.0.0:*                   LISTEN\ntcp        0      0 :::22                  :::*                        LISTEN\n\n$ cat TIME_WAIT\ntcp        0      0 coolshell.cn:80        124.205.5.146:18245         TIME_WAIT\ntcp        0      0 coolshell.cn:80        183.60.215.36:36970         TIME_WAIT\ntcp        0      0 coolshell.cn:80        183.60.212.163:51082        TIME_WAIT\u003c/pre\u003e\n\u003cp\u003e你也可以把指定的列输出到文件：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003eawk \u0026#39;NR!=1{print $4,$5 \u0026gt; $6}\u0026#39; netstat.txt\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e再复杂一点：（注意其中的if-else-if语句，可见awk其实是个脚本解释器）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"1,2,3\"\u003e$ awk \u0026#39;NR!=1{if($6 ~ /TIME|ESTABLISHED/) print \u0026gt; \u0026#34;1.txt\u0026#34;;\nelse if($6 ~ /LISTEN/) print \u0026gt; \u0026#34;2.txt\u0026#34;;\nelse print \u0026gt; \u0026#34;3.txt\u0026#34; }\u0026#39; netstat.txt\n\n$ ls ?.txt\n1.txt  2.txt  3.txt\n\n$ cat 1.txt\ntcp        0      0 coolshell.cn:80        124.205.5.146:18245         TIME_WAIT\ntcp        0      0 coolshell.cn:80        110.194.134.189:1032        ESTABLISHED\ntcp        0      0 coolshell.cn:80        123.169.124.111:49809       ESTABLISHED\ntcp        0      0 coolshell.cn:80        123.169.124.111:49829       ESTABLISHED\ntcp        0      0 coolshell.cn:80        183.60.215.36:36970         TIME_WAIT\ntcp        0   4166 coolshell.cn:80        61.148.242.38:30901         ESTABLISHED\ntcp        0      0 coolshell.cn:80        110.194.134.189:4796        ESTABLISHED\ntcp        0      0 coolshell.cn:80        183.60.212.163:51082        TIME_WAIT\ntcp        0      0 coolshell.cn:80        123.169.124.111:49840       ESTABLISHED\n\n$ cat 2.txt\ntcp        0      0 0.0.0.0:3306           0.0.0.0:*                   LISTEN\ntcp        0      0 0.0.0.0:80             0.0.0.0:*                   LISTEN\ntcp        0      0 127.0.0.1:9000         0.0.0.0:*                   LISTEN\ntcp        0      0 :::22                  :::*                        LISTEN\n\n$ cat 3.txt\ntcp        0      0 coolshell.cn:80        61.140.101.185:37538        FIN_WAIT2\ntcp        0      0 coolshell.cn:80        116.234.127.77:11502        FIN_WAIT2\ntcp        0      1 coolshell.cn:80        124.152.181.209:26825       FIN_WAIT1\ntcp        0      1 coolshell.cn:80        208.115.113.92:50601        LAST_ACK\ntcp        0      0 coolshell.cn:80        117.136.20.85:50025         FIN_WAIT2\u003c/pre\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%BB%9F%E8%AE%A1\"\u003e\u003c/span\u003e统计\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e下面的命令计算所有的C文件，CPP文件和H文件的文件大小总和。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ ls -l  *.cpp *.c *.h | awk \u0026#39;{sum+=$5} END {print sum}\u0026#39;\n2511401\u003c/pre\u003e\n\u003cp\u003e我们再来看一个统计各个connection状态的用法：（我们可以看到一些编程的影子了，大家都是程序员我就不解释了。注意其中的数组的用法）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"1\"\u003e$ awk \u0026#39;NR!=1{a[$6]++;} END {for (i in a) print i \u0026#34;, \u0026#34; a[i];}\u0026#39; netstat.txt\nTIME_WAIT, 3\nFIN_WAIT1, 1\nESTABLISHED, 6\nFIN_WAIT2, 3\nLAST_ACK, 1\nLISTEN, 4\u003c/pre\u003e\n\u003cp\u003e再来看看统计每个用户的进程的占了多少内存（注：sum的RSS那一列）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"1\"\u003e$ ps aux | awk \u0026#39;NR!=1{a[$1]+=$6;} END { for(i in a) print i \u0026#34;, \u0026#34; a[i]\u0026#34;KB\u0026#34;;}\u0026#39;\ndbus, 540KB\nmysql, 99928KB\nwww, 3264924KB\nroot, 63644KB\nhchen, 6020KB\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E8%84%B1%E6%8E%89%E5%86%85%E8%A1%A3\"\u003e\u003c/span\u003e脱掉内衣\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"awk%E8%84%9A%E6%9C%AC\"\u003e\u003c/span\u003eawk脚本\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e在上面我们可以看到一个END关键字。END的意思是“处理完所有的行的标识”，即然说到了END就有必要介绍一下BEGIN，这两个关键字意味着执行前和执行后的意思，语法如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBEGIN{ 这里面放的是执行前的语句 }\u003c/li\u003e\n\u003cli\u003eEND {这里面放的是处理完所有的行后要执行的语句 }\u003c/li\u003e\n\u003cli\u003e{这里面放的是处理每一行时要执行的语句}\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e为了说清楚这个事，我们来看看下面的示例：\u003c/p\u003e\n\u003cp\u003e假设有这么一个文件（学生成绩表）：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ cat score.txt\nMarry   2143 78 84 77\nJack    2321 66 78 45\nTom     2122 48 77 71\nMike    2537 87 97 95\nBob     2415 40 57 62\u003c/pre\u003e\n\u003cp\u003e我们的awk脚本如下（我没有写有命令行上是因为命令行上不易读，另外也在介绍另一种用法）：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ cat cal.awk\n#!/bin/awk -f\n#运行前\nBEGIN {\n    math = 0\n    english = 0\n    computer = 0\n\n    printf \u0026#34;NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\\n\u0026#34;\n    printf \u0026#34;---------------------------------------------\\n\u0026#34;\n}\n#运行中\n{\n    math+=$3\n    english+=$4\n    computer+=$5\n    printf \u0026#34;%-6s %-6s %4d %8d %8d %8d\\n\u0026#34;, $1, $2, $3,$4,$5, $3+$4+$5\n}\n#运行后\nEND {\n    printf \u0026#34;---------------------------------------------\\n\u0026#34;\n    printf \u0026#34;  TOTAL:%10d %8d %8d \\n\u0026#34;, math, english, computer\n    printf \u0026#34;AVERAGE:%10.2f %8.2f %8.2f\\n\u0026#34;, math/NR, english/NR, computer/NR\n}\u003c/pre\u003e\n\u003cp\u003e我们来看一下执行结果：（也可以这样运行 ./cal.awk score.txt）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ awk -f cal.awk score.txt\nNAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\n---------------------------------------------\nMarry  2143     78       84       77      239\nJack   2321     66       78       45      189\nTom    2122     48       77       71      196\nMike   2537     87       97       95      279\nBob    2415     40       57       62      159\n---------------------------------------------\n  TOTAL:       319      393      350\nAVERAGE:     63.80    78.60    70.00\u003c/pre\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\"\u003e\u003c/span\u003e环境变量\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e即然说到了脚本，我们来看看怎么和环境变量交互：（使用-v参数和ENVIRON，使用ENVIRON的环境变量需要export）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"9\"\u003e$ x=5\n\n$ y=10\n$ export y\n\n$ echo $x $y\n5 10\n\n$ awk -v val=$x \u0026#39;{print $1, $2, $3, $4+val, $5+ENVIRON[\u0026#34;y\u0026#34;]}\u0026#39; OFS=\u0026#34;\\t\u0026#34; score.txt\nMarry   2143    78      89      87\nJack    2321    66      83      55\nTom     2122    48      82      81\nMike    2537    87      102     105\nBob     2415    40      62      72\n\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%87%A0%E4%B8%AA%E8%8A%B1%E6%B4%BB\"\u003e\u003c/span\u003e几个花活\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e最后，我们再来看几个小例子：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e#从file文件中找出长度大于80的行\nawk \u0026#39;length\u0026gt;80\u0026#39; file\n\n#按连接数查看客户端IP\nnetstat -ntu | awk \u0026#39;{print $5}\u0026#39; | cut -d: -f1 | sort | uniq -c | sort -nr\n\n#打印99乘法表\nseq 9 | sed \u0026#39;H;g\u0026#39; | awk -v RS=\u0026#39;\u0026#39; \u0026#39;{for(i=1;i\u0026lt;=NF;i++)printf(\u0026#34;%dx%d=%d%s\u0026#34;, i, NR, i*NR, i==NR?\u0026#34;\\n\u0026#34;:\u0026#34;\\t\u0026#34;)}\u0026#39; \u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E8%87%AA%E5%B7%B1%E6%92%B8%E5%90%A7\"\u003e\u003c/span\u003e自己撸吧\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e关于其中的一些知识点可以参看\u003ca href=\"http://www.gnu.org/software/gawk/manual/gawk.html\" target=\"_blank\"\u003egawk的手册\u003c/a\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e内建变量，参看：\u003ca href=\"http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din-Variables\" target=\"_blank\"\u003ehttp://www.gnu.org/software/gawk/manual/gawk.html#Built_002din-Variables\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e流控方面，参看：\u003ca href=\"http://www.gnu.org/software/gawk/manual/gawk.html#Statements\" target=\"_blank\"\u003ehttp://www.gnu.org/software/gawk/manual/gawk.html#Statements\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e内建函数，参看：\u003ca href=\"http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din\" target=\"_blank\"\u003ehttp://www.gnu.org/software/gawk/manual/gawk.html#Built_002din\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e正则表达式，参看：\u003ca href=\"http://www.gnu.org/software/gawk/manual/gawk.html#Regexp\" target=\"_blank\"\u003ehttp://www.gnu.org/software/gawk/manual/gawk.html#Regexp\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8883.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/01/linux-bash-300x225-150x150.jpg\" alt=\"应该知道的Linux技巧\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8883.html\" class=\"wp_rp_title\"\u003e应该知道的Linux技巧\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8619.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/11/shell.01-150x150.png\" alt=\"你可能不知道的Shell\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8619.html\" class=\"wp_rp_title\"\u003e你可能不知道的Shell\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/19219.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2019/03/linux.ninja_-150x150.png\" alt=\"打造高效的工作环境 – Shell 篇\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/19219.html\" class=\"wp_rp_title\"\u003e打造高效的工作环境 – Shell 篇\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17998.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/07/systemd-1-150x150.jpeg\" alt=\"Linux PID 1 和 Systemd\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17998.html\" class=\"wp_rp_title\"\u003eLinux PID 1 和 Systemd\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12103.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/11/tux-fork-150x150.gif\" alt=\"vfork 挂掉的一个问题\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12103.html\" class=\"wp_rp_title\"\u003evfork 挂掉的一个问题\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-9070\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"d2cafe07dd\"\u003e\u003cimg id=\"rating_9070_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9070, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-abbf97fbfb7a0b209e53dd0d-=\"\"/\u003e\u003cimg id=\"rating_9070_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9070, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-abbf97fbfb7a0b209e53dd0d-=\"\"/\u003e\u003cimg id=\"rating_9070_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9070, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-abbf97fbfb7a0b209e53dd0d-=\"\"/\u003e\u003cimg id=\"rating_9070_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9070, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-abbf97fbfb7a0b209e53dd0d-=\"\"/\u003e\u003cimg id=\"rating_9070_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9070, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-abbf97fbfb7a0b209e53dd0d-=\"\"/\u003e (\u003cstrong\u003e130\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.57\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_9070_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"AWK 简明教程\"/\u003e\u003cmeta itemprop=\"headline\" content=\"AWK 简明教程\"/\u003e\u003cmeta itemprop=\"description\" content=\"有一些网友看了前两天的《Linux下应该知道的技巧》希望我能教教他们用awk和sed，所以，出现了这篇文章。我估计这些80后的年轻朋友可能对awk/sed这类上古神器有点陌生了，所以需要我这个老家伙来炒炒冷饭。况且，AWK是贝尔实验室1977年搞出来的文本出现神器，今年是蛇年，是AWK的本命年，而且年纪和我相仿，所以非常有必要为他写篇文章。\n\n之所以叫AWK是因为其取了三位创始人 Alfred...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2013-02-17T08:38:29+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2013-02-17T22:12:39+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/9070.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/9070.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.57\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"130\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-9070-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2013-02-17T08:38:29+08:00",
  "Author": "陈皓"
}