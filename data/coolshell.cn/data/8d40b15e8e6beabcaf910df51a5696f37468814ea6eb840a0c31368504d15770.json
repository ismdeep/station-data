{
  "Source": "coolshell.cn",
  "Title": "Linux设备驱动Hello World程序介绍",
  "Link": "https://coolshell.cn/articles/566.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"6794934b766fb0d13b556693-text/javascript\"\u003e\u003c/script\u003eby Valerie Henson\u003cbr/\u003e\n07/05/2007\u003c/p\u003e\n\u003cp\u003e(\u003cstrong\u003e译者注：本文的例子是只能在linux的2.6内核下使用的，2.6以上的内核，译者没有做过实验，2.4是要修改make文件才能运行\u003c/strong\u003e。)\u003c/p\u003e\n\u003cp\u003e本文的出处：\u003ca href=\"http://www.linuxdevcenter.com/pub/a/linux/2007/07/05/devhelloworld-a-simple-introduction-to-device-drivers-under-linux.html?page=1\"\u003e这里\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e自古以来，学习一门新编程语言的第一步就是写一个打印“hello world”的程序（可以看\u003ca href=\"https://coolshell.cn/articles/169.html\"\u003e《hello world 集中营》\u003c/a\u003e这个帖子供罗列了300个“hello world”程序例子）在本文中，我们将用同样的方式学习如何编写一个简单的linux内核模块和设备驱动程序。我将学习到如何在内核模式下以三种不同的方式来打印hello world，这三种方式分别是： printk()，/proc文件，/dev下的设备文件。\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E5%87%86%E5%A4%87%EF%BC%9A%E5%AE%89%E8%A3%85%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E7%9A%84%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83\" title=\"准备：安装内核模块的编译环境\"\u003e准备：安装内核模块的编译环境\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E4%BD%BF%E7%94%A8printk%E5%87%BD%E6%95%B0%E6%89%93%E5%8D%B0%E2%80%9DHello_World%E2%80%9D\" title=\"使用printk()函数打印”Hello World”\"\u003e使用printk()函数打印”Hello World”\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E4%BD%BF%E7%94%A8proc%E7%9A%84Hello_World\" title=\"使用/proc的Hello, World!\"\u003e使用/proc的Hello, World!\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#Hello_World_%E4%BD%BF%E7%94%A8_devhello_world\" title=\"Hello, World! 使用 /dev/hello_world\"\u003eHello, World! 使用 /dev/hello_world\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%87%86%E5%A4%87%EF%BC%9A%E5%AE%89%E8%A3%85%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E7%9A%84%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83\"\u003e\u003c/span\u003e准备：安装内核模块的编译环境\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e一个内核模块kernel module是一段能被内核动态加载和卸载的内核代码，因为内核模块程序是内核的一个部分，并且和内核紧密的交互，所以内核模块不可能脱离内核编译环境，至少，它需要内核的头文件和用于加载的配置信息。编译内核模块同样需要相关的开发工具，比如说编译器。为了简化，本文只简要讨论如何在Debian、Fedora和其他以.tar.gz形式提供的原版linux内核下进行核模块的编译。在这种情况下，你必须根据你正在运行内核相对应的内核源代码来编译你的内核模块kernel module(当你的内核模块一旦被装载到你内核中时，内核就将执行该模块的代码)\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-566\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e必须要注意内核源代码的位置，权限：内核程序通常在/usr/src/linux目录下，并且属主是root。如今，推荐的方式是将内核程序放在一个非root用户的home目录下。本文中所有命令都运行在非root的用户下，只有在必要的时候，才使用sudo来获得临时的root权限。配置和使用sudo可以man sudo(8) visudo(8) 和sudoers(5)。或者切换到root用户下执行相关的命令。不管什么方式，你都需要root权限才能执行本文中的一些命令。\u003c/p\u003e\n\u003cp\u003e在Debian下编译内核模块的准备\u003c/p\u003e\n\u003cp\u003e使用如下的命令安装和配置用于在Debian编译内核模块的module-assitant包\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ sudo apt-get install module-assistant\n\u003c/pre\u003e\n\u003cp\u003e以此你就可以开始编译内核模块，你可以在\u003ca href=\"http://kernel-handbook.alioth.debian.org/\"\u003e《Debian Linux Kernel Handbook》\u003c/a\u003e这本书中找到对Debian内核相关任务的更深度的讨论。\u003c/p\u003e\n\u003cp\u003eFedora的kernel-devel包包含了你编译Fedora内核模块的所有必要内核头文件和工具。你可以通过如下命令得到这个包。\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ sudo yum install kernel-devel\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e有了这个包，你就可以编译你的内核模块kernel modules。关于Fedora编译内核模块的相关文档你可以从\u003ca href=\"https://docs.fedoraproject.org/release-notes/fc6/en_US/sn-Kernel.html#id2950723\"\u003eFedora release notes\u003c/a\u003e中找到。\u003c/p\u003e\n\u003cp\u003e一般Linux 内核源代码和配置\u003c/p\u003e\n\u003cp\u003e(译者注，下面的编译很复杂，如果你的Linux不是上面的系统，你可以使用REHL AS4系统，这个系统的内核就是2.6的内核，并且可以通过安装直接安装内核编译支持环境，从而就省下了如下的步骤。而且下面的步骤比较复杂，建议在虚拟机安装Linux进行实验。)\u003c/p\u003e\n\u003cp\u003e如果你选择使用一般的Linux内核源代吗，你必须，配置，编译，安装和重启的你编译内核。这个过程非常复杂，并且本文只会讨论使用一般内核源代码的基本概念。\u003c/p\u003e\n\u003cp\u003elinux的著名的内核源代码在http://kernel.org上都可以找到。最近新发布的稳定版本的代码在首页上。下载全版本的源代码，不要下载补丁代码。例如，当前发布稳定版本在url: http://kernel.org/pub/linux/kernel/v2.6/linux-2.6.21.5.tar.bz2上。如果需要更快速的下载，从htpp://kernel.org/mirrors上找到最近的镜像进行下载。最简单获得源代码的方式是以断点续传的方式使用wget。如今的http很少发生中断，但是如果你在下载过程中发生了中断，这个命令将帮助你继续下载剩下的部分。\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ wget -c http://kernel.org/pub/linux/kernel/v2.6/linux-2.6.21.5.tar.bz2 \u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e解包内核源代码\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ tar xjvf linux-\u0026lt;version\u0026gt;.tar.bz2\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e现在你的内核源代码位于linux-/目录下。转到这个目录下，并配置它：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ cd linux-\u0026lt;version\u0026gt;\n$ make menuconfig\u003c/pre\u003e\n\u003cp\u003e一些非常易用的编译目标make targets提供了多种编译安装内核的形式：Debian 包，RPM包，gzip后的tar文件 等等，使用如下命令查看所有可以编译的目标形式\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ make help\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e一个可以工作在任何linux的目标是：(译者注：REHL AS4上没有tar-pkg这个目标，你可以任选一个rpm编译，编译完后再上层目录可以看到有一个linux-.tar.gz可以使用)\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ make tar-pkg\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e当编译完成后，可以调用如下命令安装你的内核\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ sudo tar -C / -xvf linux-\u0026lt;version\u0026gt;.tar\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e在标准位置建立的到内核源代码的链接\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ sudo ln -s \u0026lt;location of top-level source directory\u0026gt; /lib/modules/\u0026#39;uname -r\u0026#39;/build\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e现在已经内核源代码已经可以用于编译内核模块了，重启你的机器以使得你根据新内核程序编译的内核可以被装载。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%BD%BF%E7%94%A8printk%E5%87%BD%E6%95%B0%E6%89%93%E5%8D%B0%E2%80%9DHello_World%E2%80%9D\"\u003e\u003c/span\u003e使用printk()函数打印”Hello World”\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e我们的第一个内核模块，我们将以一个在内核中使用函数printk()打印”Hello world”的内核模块为开始。printk是内核中的printf函数。printk的输出打印在内核的消息缓存kernel message buffer并拷贝到/var/log/messages(关于拷贝的变化依赖于如何配置syslogd)\u003c/p\u003e\n\u003cp\u003e下载\u003ca href=\"http://www.linuxdevcenter.com/linux/2007/07/05/examples/hello_printk.tar.gz\"\u003ehello_printk\u003c/a\u003e 模块的tar包 并解包：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ tar xzvf hello_printk.tar.gz\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e这个包中包含两个文件:Makefile，里面包含如何创建内核模块的指令和一个包含内核模块源代码的hello_printk.c文件。首先，我们将简要的过一下这个Makefile 文件。\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003eobj-m := hello_printk.o\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eobj-m指出将要编译成的内核模块列表。.o格式文件会自动地有相应的.c文件生成(不需要显示的罗列所有源代码文件)\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003eKDIR  := /lib/modules/$(shell uname -r)/build\n\u003c/pre\u003e\n\u003cp\u003eKDIR表示是内核源代码的位置。在当前标准情况是链接到包含着正在使用内核对应源代码的目录树位置。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003ePWD := $(shell pwd)\n\u003c/pre\u003e\n\u003cp\u003ePWD指示了当前工作目录并且是我们自己内核模块的源代码位置\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003edefault:\n     $(MAKE) -C $(KDIR) M=$(PWD) modules\n\u003c/pre\u003e\n\u003cp\u003edefault是默认的编译连接目标；即，make将默认执行本条规则编译目标，除非程序员显示的指明编译其他目标。这里的的编译规则的意思是，在包含内核源代码位置的地方进行make,然后之编译$(PWD)(当前)目录下的modules。这里允许我们使用所有定义在内核源代码树下的所有规则来编译我们的内核模块。\u003c/p\u003e\n\u003cp\u003e现在我们来看看hello_printk.c这个文件\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include\n\t\u0026lt;linux/init.h\u0026gt;\n#include\n\t\u0026lt;linux/module.h\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003e这里包含了内核提供的所有内核模块都需要的头文件。这个文件中包含了类似module_init()宏的定义，这个宏稍后我们将用到\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estatic int __init\nhello_init(void){\n    printk(\u0026#34;Hello, world!n\u0026#34;);\n    return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e这是内核模块的初始化函数，这个函数在内核模块初始化被装载的时候调用。__init关键字告诉内核这个代码只会被运行一次，而且是在内核装载的时候。printk()函数这一行将打印一个”Hello, world”到内核消息缓存。printk参数的形式在大多数情况和printf(3)一模一样。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003emodule_init(hello_init); \nmodule_init()\n\u003c/pre\u003e\n\u003cp\u003e宏告诉内核当内核模块第一次运行时哪一个函数将被运行。任何在内核模块中其他部分都会受到内核模块初始化函数的影响。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estatic void __exit\nhello_exit(void){\n    printk(\u0026#34;Goodbye, world!n\u0026#34;);\n}\nmodule_exit(hello_exit);\n\u003c/pre\u003e\n\u003cp\u003e同样地，退出函数也只在内核模块被卸载的时候会运行一次，module_exit()宏标示了退出函数。__exit关键字告诉内核这段代码只在内核模块被卸载的时候运行一次。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eMODULE_LICENSE(\u0026#34;GPL\u0026#34;);\nMODULE_AUTHOR(\u0026#34;Valerie Henson \u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"5a2c3b361a34372e743f3e2f\"\u003e[email protected]\u003c/a\u003e\u0026#34;);\nMODULE_DESCRIPTION(\u0026#34;Hello, world!\u0026#34; minimal module\u0026#34;);\nMODULE_VERSION(\u0026#34;printk\u0026#34;);\nMODULE_LICENSE()\n\u003c/pre\u003e\n\u003cp\u003e宏告诉内核，内核模块代码在什么样的license之下，这将影响主那些符号(函数和变量，等等)可以访问主内核。GPLv2 下的模块(如同本例子中)能访问所有的符号。某些内核模块license将会损害内核开源的特性，这些license指示内核将装载一些非公开或不受信的代码。如果内核模块不使用MODULE_LICENSE()宏，就被假定为非GPLv2的，这会损害内核的开源特性，并且大部分Linux内核开发人员都会忽略来自受损内核的bug报告，因为他们无法访问所有的源代码，这使得调试变得更加困难。剩下的MODULE_*()这些宏以标准格式提供有用的标示该内核模块的信息(译者注：这里意思是，你必须使用GPLv2的license，否则你的驱动程序很有可能得不到Linux社区的开发者的支持 ：）)\u003c/p\u003e\n\u003cp\u003e现在，开始编译和运行代码。转到相应的目录下，编译内核模块\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ cd hello_printk  \n$ make\n\u003c/pre\u003e\n\u003cp\u003e接着，装载内核模块，使用insmod指令，并且通过dmesg来检查打印出的信息，dmesg是打印内核消息缓存的程序。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ sudo insmod ./hello_printk.ko  \n$ dmesg | tail\n\u003c/pre\u003e\n\u003cp\u003e你将从dmesg的屏幕输出中看见”Hello world!”信息。现在卸载使用rmmod卸载内核模块，并检查退出信息。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ sudo rmmod hello_printk  \n$ dmesg | tail\n\u003c/pre\u003e\n\u003cp\u003e到此，你就成功地完成了对内核模块的编译和安装！\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%BD%BF%E7%94%A8proc%E7%9A%84Hello_World\"\u003e\u003c/span\u003e使用/proc的Hello, World!\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e一种用户程序和内核通讯最简单和流行的方式是通过使用/proc下文件系统进行通讯。/proc是一个伪文件系统，从这里的文件读取的数据是由内核返回的数据，并且写入到这里面的数据将会被内核读取和处理。在使用/proc方式之前，所用用户和内核之间的通讯都不得不使用系统调用来完成。使用系统调用意味着你将在要在查找已经具有你需要的行为方式的系统调用(一般不会出现这种情况)，或者创建一种新的系统调用来满足你的需求(这样就要求对内核全局做修改，并增加系统调用的数量，这是通常是非常不好的做法)，或者使用ioctl这个万能系统调用，这就要求要创建一个新文件类型供ioctl操作(这也是非常复杂而且bug比较多的方式，同样是非常繁琐的)。/proc提供了一个简单的，无需定义的方式在用户空间和内核之间传递数据，这种方式不仅可以满足内核使用，同样也提供足够的自由度给内核模块做他们需要做的事情。\u003c/p\u003e\n\u003cp\u003e为了满足我们的要求，我们需要当我们读在/proc下的某一个文件时将会返回一个“Hello world!”。我们将使用/proc/hello_world这个文件。下载并解开\u003ca href=\"http://www.linuxdevcenter.com/linux/2007/07/05/examples/hello_proc.tar.gz\"\u003ehello proc\u003c/a\u003e这个gzip的tar包后，我们将首先来看一下\u003ca href=\"http://www.linuxdevcenter.com/linux/2007/07/05/examples/hello_proc.c\"\u003ehello_proc.c\u003c/a\u003e这个文件\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;linux/init.h\u0026gt;\n#include \u0026lt;linux/module.h\u0026gt;\n#include \u0026lt;linux/proc_fs.h\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003e这次，我们将增加一个proc_fs头文件，这个头文件包括驱动注册到/proc文件系统的支持。当另外一个进程调用read()时，下一个函数将会被调用。这个函数的实现比一个完整的普通内核驱动的read系统调用实现要简单的多，因为我们仅做了让”Hello world”这个字符串缓存被一次读完。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estatic int\nhello_read_proc(char *buffer, char **start,off_t offset,\n                int size, int *eof, void *data)\n{\n\u003c/pre\u003e\n\u003cp\u003e这个函数的参数值得明确的解释一下。buffer是指向内核缓存的指针，我们将把read输出的内容写到这个buffer中。start参数多用更复杂的/proc文件；我们在这里将忽略这个参数；并且我只明确的允许offset这个的值为0。size是指buffer中包含多字节数；我们必须检查这个参数已避免出现内存越界的情况，eof参数一个EOF的简写，用于返回文件是否已经读到结束，而不需要通过调用read返回0来判断文件是否结束。这里我们不讨论依靠更复杂的/proc文件传输数据的方法。这个函数方法体罗列如下：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e    char *hello_str = \u0026#34;Hello, world!\\n\u0026#34;;\n    int len = strlen(hello_str); /* Don\u0026#39;t include the null byte. */\n    /*     * We only support reading the whole string at once.     */\n    if (size \u0026lt; len)\n        return\u0026lt; -EINVAL;\n    /*     * If file position is non-zero, then assume the string has\n    * been read and indicate there is no more data to be read.\n    */\n    if (offset != 0)\n        return 0;\n    /*     * We know the buffer is big enough to hold the string.     */\n    strcpy(buffer, hello_str);\n    /*     * Signal EOF.     */\n    *eof = 1;\n    return len;\n}\n\u003c/pre\u003e\n\u003cp\u003e下面，我们需将内核模块在初始化函数注册在/proc 子系统中。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estatic int __init\nhello_init(void){\n    /*\n    * Create an entry in /proc named \u0026#34;hello_world\u0026#34; that calls\n    * hello_read_proc() when the file is read.\n    */\n    if (create_proc_read_entry(\u0026#34;hello_world\u0026#34;, 0, \n                        NULL, hello_read_proc, NULL) == 0) {\n        printk(KERN_ERR\n        \u0026#34;Unable to register \u0026#34;Hello, world!\u0026#34; proc filen\u0026#34;);\n        return -ENOMEM;\n    }\n    return 0;\n}\nmodule_init(hello_init);\n\u003c/pre\u003e\n\u003cp\u003e当内核模块卸载时，需要在/proc移出注册的信息(如果我们不这样做的，当一个进程试图去访问/proc/hello_world，/proc文件系统将会试着执行一个已经不存在的功能，这样将会导致内核崩溃)\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estatic void __exit\nhello_exit(void){\n    remove_proc_entry(\u0026#34;hello_world\u0026#34;, NULL);\n}\nmodule_exit(hello_exit);\nMODULE_LICENSE(\u0026#34;GPL\u0026#34;);\nMODULE_AUTHOR(\u0026#34;Valerie Henson \u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"6016010c200e0d144e050415\"\u003e[email protected]\u003c/a\u003e\u0026#34;);\nMODULE_DESCRIPTION(\u0026#34;\u0026#34;Hello, world!\u0026#34; minimal module\u0026#34;);\nMODULE_VERSION(\u0026#34;proc\u0026#34;);\n\u003c/pre\u003e\n\u003cp\u003e下面我们将准备编译和装载模组\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ cd hello_proc  \n$ make  \n$ sudo insmod ./hello_proc.ko\n\u003c/pre\u003e\n\u003cp\u003e现在，将会有一个称为/proc/hello_world的文件，并且读这个文件的，将会返回一个”Hello world”字符串。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ cat /proc/hello_world\nHello, world!\n\u003c/pre\u003e\n\u003cp\u003e你可以为为同一个驱动程序创建多个/proc文件，并增加相应写/proc文件的函数，创建包含多个/proc文件的目录，或者更多的其他操作。如果要写比这个更复杂的驱动程序，可以使用seq_file函数集来编写是更安全和容易的。关于这些更多的信息可以看\u003ca href=\"http://lwn.net/Articles/22355/\"\u003e《Driver porting: The seq_file interface》\u003c/a\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Hello_World_%E4%BD%BF%E7%94%A8_devhello_world\"\u003e\u003c/span\u003eHello, World! 使用 /dev/hello_world\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e现在我们将使用在/dev目录下的一个设备文件/dev/hello_world实现”Hello,world!” 。追述以前的日子，设备文件是通过MAKEDEV脚本调用mknod命令在/dev目录下产生的一个特定的文件，这个文件和设备是否运行在改机器上无关。到后来设备文件使用了devfs，devfs在设备第一被访问的时候创建/dev文件，这样将会导致很多有趣的加锁问题和多次打开设备文件的检查设备是否存在的重试问题。当前的/dev版本支持被称为udev，因为他将在用户程序空间创建到/dev的符号连接。当内核模块注册设备时，他们将出现在sysfs文件系统中，并mount在/sys下。一个用户空间的程序，udev,注意到/sys下的改变将会根据在/etc/udev/下的一些规则在/dev下创建相关的文件项。\u003c/p\u003e\n\u003cp\u003e下载\u003ca href=\"http://www.linuxdevcenter.com/linux/2007/07/05/examples/hello_dev.tar.gz\"\u003ehello world\u003c/a\u003e内核模块的gzip的tar包，我们将开始先看一下hello_dev.c这个源文件。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;linux/fs.h\u0026gt;\n#include \u0026lt;linux/init.h\u0026gt;\n#include \u0026lt;linux/miscdevice.h\u0026gt;\n#include \u0026lt;linux/module.h\u0026gt;\n#include \u0026lt;asm/uaccess.h\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003e正如我们看到的必须的头文件外，创建一个新设备还需要更多的内核头文件支持。fs.sh包含所有文件操作的结构，这些结构将由设备驱动程序来填值，并关联到我们相关的/dev文件。miscdevice.h头文件包含了对通用miscellaneous设备文件注册的支持。 asm/uaccess.h包含了测试我们是否违背访问权限读写用户内存空间的函数。hello_read将在其他进程在/dev/hello调用read()函数被调用的是一个函数。他将输出”Hello world!”到由read()传入的缓存。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estatic ssize_t hello_read(struct file * file, char * buf, size_t count, loff_t *ppos)\n{\n    char *hello_str = \u0026#34;Hello, world!n\u0026#34;;\n    int len = strlen(hello_str); /* Don\u0026#39;t include the null byte. */\n    /*     * We only support reading the whole string at once.     */\n    if (count \u0026lt; len)\n        return -EINVAL;\n    /*\n    * If file position is non-zero, then assume the string has\n    * been read and indicate there is no more data to be read.\n    */\n    if (*ppos != 0)\n        return 0;\n    /*\n    * Besides copying the string to the user provided buffer,\n    * this function also checks that the user has permission to\n    * write to the buffer, that it is mapped, etc.\n    */\n    if (copy_to_user(buf, hello_str, len))\n        return -EINVAL;\n    /*\n    * Tell the user how much data we wrote.\n    */\n    *ppos = len;\n    return len;\n}\n\u003c/pre\u003e\n\u003cp\u003e下一步，我们创建一个文件操作结构file operations struct，并用这个结构来定义当文件被访问时执行什么动作。在我们的例子中我们唯一关注的文件操作就是read。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estatic const struct file_operations hello_fops = {\n    .owner        = THIS_MODULE,\n    .read        = hello_read,\n};\n\u003c/pre\u003e\n\u003cp\u003e现在，我们将创建一个结构，这个结构包含有用于在内核注册一个通用miscellaneous驱动程序的信息。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estatic struct miscdevice hello_dev = {\n    /*\n    * We don\u0026#39;t care what minor number we end up with, so tell the\n    * kernel to just pick one.\n    */\n    MISC_DYNAMIC_MINOR,\n    /*     \n    * Name ourselves /dev/hello.     \n    */\n    \u0026#34;hello\u0026#34;,\n    /*     \n    * What functions to call when a program performs file\n    * operations on the device.\n    */\n    \u0026amp;hello_fops\n};\n\u003c/pre\u003e\n\u003cp\u003e在通常情况下，我们在init中注册设备\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estatic int __init\nhello_init(void){\n    int ret;\n    /*\n    * Create the \u0026#34;hello\u0026#34; device in the /sys/class/misc directory.\n    * Udev will automatically create the /dev/hello device using\n    * the default rules.\n    */\n    ret = misc_register(\u0026amp;hello_dev);\n    if (ret)\n        printk(KERN_ERR\n            \u0026#34;Unable to register \u0026#34;Hello, world!\u0026#34; misc devicen\u0026#34;);\n    return ret;\n}\nmodule_init(hello_init);\n\u003c/pre\u003e\n\u003cp\u003e接下是在卸载时的退出函数\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estatic void __exit\nhello_exit(void){\n    misc_deregister(\u0026amp;hello_dev);\n}\nmodule_exit(hello_exit);\nMODULE_LICENSE(\u0026#34;GPL\u0026#34;);\nMODULE_AUTHOR(\u0026#34;Valerie Henson \u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"bec8dfd2fed0d3ca90dbdacb\"\u003e[email protected]\u003c/a\u003e\u0026gt;\u0026#34;);\nMODULE_DESCRIPTION(\u0026#34;\u0026#34;Hello, world!\u0026#34; minimal module\u0026#34;);\nMODULE_VERSION(\u0026#34;dev\u0026#34;);\n\u003c/pre\u003e\n\u003cp\u003e编译并加载模块:\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ cd hello_dev  \n$ make  \n$ sudo insmod ./hello_dev.ko\n\u003c/pre\u003e\n\u003cp\u003e现在我们将有一个称为/dev/hello的设备文件，并且这个设备文件被root访问时将会产生一个”Hello, world!”\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ sudo cat /dev/hello\n Hello, world!\n \u003c/pre\u003e\n\u003cp\u003e但是我们不能使用普通用户访问他:\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ cat /dev/hello \ncat:/dev/hello: Permission denied  \n\n$ ls -l \n/dev/hello crw-rw---- 1 root root 10, 61 2007-06-20 14:31 /dev/hello\n\n\u003c/pre\u003e\n\u003cp\u003e这是有默认的udev规则导致的，这个条规将标明当一个普通设备出现时，他的名字将会是/dev/，并且默认的访问权限是0660(用户和组读写访问，其他用户无法访问)。我们在真实情况中可能会希望创建一个被普通用户访问的设备驱动程序，并且给这个设备起一个相应的连接名。为达到这个目的，我们将编写一条udev规则。\u003c/p\u003e\n\u003cp\u003eudev规则必须做两件事情：第一创建一个符号连接，第二修改设备的访问权限。\u003c/p\u003e\n\u003cp\u003e下面这条规则可以达到这个目的：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003eKERNEL==\u0026#34;hello\u0026#34;, SYMLINK+=\u0026#34;hello_world\u0026#34;, MODE=\u0026#34;0444\u0026#34;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e我们将详细的分解这条规则，并解释每一个部分。KERNEL==”hello” 标示下面的的规则将作用于/sys中设备名字”hello”的设备(==是比较符)。hello 设备是我们通过调用misc_register()并传递了一个包含设备名为”hello”的文件操作结构file_operations为参数而达到的。你可以自己通过如下的命令在/sys下查看\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ ls -d /sys/class/misc/hello//sys/class/misc/hello/\n\u003c/pre\u003e\n\u003cp\u003eSYMLINK+=”hello_world” 的意思是在符号链接列表中增加 (+= 符号的意思着追加)一个hello_world ，这个符号连接在设备出现时创建。在我们场景下，我们知道我们的列表的中的只有这个符号连接，但是其他设备驱动程序可能会存在多个不同的符号连接，因此使用将设备追加入到符号列表中，而不是覆盖列表将会是更好的实践中的做法。\u003c/p\u003e\n\u003cp\u003eMODE=”0444″的意思是原始的设备的访问权限是0444,这个权限允许用户，组，和其他用户可以访问。\u003c/p\u003e\n\u003cp\u003e通常，使用正确的操作符号(==, +=, or =)是非常重要的，否则将会出现不可预知的情况。\u003c/p\u003e\n\u003cp\u003e现在我们理解这个规则是怎么工作的，让我们将其安装在/etc/udev目录下。udev规则文件以和System V初始脚本目录命名的同种方式的目录下，/etc/udeve/rules.d这个目录，并以字母/数字的顺序。和System V的初始化脚本一样，/etc/udev/rules.d下的目录通常符号连接到真正的文件，通过使用符号连接名，将使得规则文件已正确的次序得到执行。\u003cbr/\u003e\n使用如下的命令，拷贝hello.rules文件从/hello_dev目录到/etc/udev目录下，并创建一一个最先被执行的规则文件链接在/etc/udev/rules.d目录下。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ sudo cp hello.rules /etc/udev/  \n$ sudo ln -s ../hello.rules /etc/udev/rules.d/010_hello.rules\n\u003c/pre\u003e\n\u003cp\u003e现在我们重新装载驱动程序，并观察新的驱动程序项\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ sudo rmmod hello_dev  \n$ sudo insmod ./hello_dev.ko  \n$ ls -l /dev/hello*  \ncr--r--r-- 1 root root 10, 61 2007-06-19 21:21 /dev/hello  \nlrwxrwxrwx 1 root root      5 2007-06-19 21:21 /dev/hello_world -\u0026gt; hello\n\u003c/pre\u003e\n\u003cp\u003e最后，检查你可以使用普通用户访问/dev/hello_world设备.\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e$ cat /dev/hello_world\nHello, world!  \n\n$ cat /dev/hello\nHello, world!\n\u003c/pre\u003e\n\u003cp\u003e更多编写udev规则的信息可以在Daniel Drake的文章\u003ca href=\"http://www.reactivated.net/writing_udev_rules.html\"\u003eWriting udev rules\u003c/a\u003e中找到。\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/22320.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2022/12/eBPF-150x150.jpeg\" alt=\"eBPF 介绍\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/22320.html\" class=\"wp_rp_title\"\u003eeBPF 介绍\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/19219.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2019/03/linux.ninja_-150x150.png\" alt=\"打造高效的工作环境 – Shell 篇\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/19219.html\" class=\"wp_rp_title\"\u003e打造高效的工作环境 – Shell 篇\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18654.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/12/docker-networking-1-150x150.png\" alt=\"记一次Kubernetes/Docker网络排障\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18654.html\" class=\"wp_rp_title\"\u003e记一次Kubernetes/Docker网络排障\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17998.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/07/systemd-1-150x150.jpeg\" alt=\"Linux PID 1 和 Systemd\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17998.html\" class=\"wp_rp_title\"\u003eLinux PID 1 和 Systemd\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17416.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2016/07/cache-150x150.png\" alt=\"缓存更新的套路\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17416.html\" class=\"wp_rp_title\"\u003e缓存更新的套路\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-566\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"85e97ae336\"\u003e\u003cimg id=\"rating_566_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(566, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.8, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-6794934b766fb0d13b556693-=\"\"/\u003e\u003cimg id=\"rating_566_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(566, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.8, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-6794934b766fb0d13b556693-=\"\"/\u003e\u003cimg id=\"rating_566_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(566, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.8, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-6794934b766fb0d13b556693-=\"\"/\u003e\u003cimg id=\"rating_566_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(566, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.8, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-6794934b766fb0d13b556693-=\"\"/\u003e\u003cimg id=\"rating_566_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(566, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.8, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-6794934b766fb0d13b556693-=\"\"/\u003e (\u003cstrong\u003e10\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e3.80\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_566_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"Linux设备驱动Hello World程序介绍\"/\u003e\u003cmeta itemprop=\"headline\" content=\"Linux设备驱动Hello World程序介绍\"/\u003e\u003cmeta itemprop=\"description\" content=\"by Valerie Henson\n07/05/2007\n\n(译者注：本文的例子是只能在linux的2.6内核下使用的，2.6以上的内核，译者没有做过实验，2.4是要修改make文件才能运行。)\n\n本文的出处：这里\n\n自古以来，学习一门新编程语言的第一步就是写一个打印“hello world”的程序（可以看《hello world 集中营》这个帖子供罗列了300个“hello wor...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2009-04-18T01:19:52+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2009-04-23T14:37:41+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/566.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"Neo\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/566.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"3.8\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"10\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-566-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2009-04-18T01:19:52+08:00",
  "Author": "Neo"
}