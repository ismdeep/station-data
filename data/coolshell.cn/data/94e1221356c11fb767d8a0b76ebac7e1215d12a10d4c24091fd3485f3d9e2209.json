{
  "Source": "coolshell.cn",
  "Title": "如何测试洗牌程序",
  "Link": "https://coolshell.cn/articles/8593.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"8d26d71003ed10ab34b17d92-text/javascript\"\u003e\u003c/script\u003e我希望本文有助于你了解测试软件是一件很重要也是一件不简单的事。\u003c/p\u003e\n\u003cp\u003e我们有一个程序，叫ShuffleArray()，是用来洗牌的，我见过N多千变万化的ShuffleArray()，但是似乎从来没人去想过怎么去测试这个算法。所以，我在面试中我经常会问应聘者如何测试ShuffleArray()，没想到这个问题居然难倒了很多有多年编程经验的人。对于这类的问题，其实，测试程序可能比算法更难写，代码更多。而这个问题正好可以加强一下我在《\u003ca title=\"我们需要专职的QA吗？\" href=\"https://coolshell.cn/articles/6994.html\" target=\"_blank\"\u003e我们需要专职的QA吗？\u003c/a\u003e》中我所推崇的——开发人员更适合做测试的观点。\u003c/p\u003e\n\u003cp\u003e我们先来看几个算法（\u003cstrong\u003e第一个用递归二分随机抽牌，第二个比较偷机取巧，第三个比较通俗易懂\u003c/strong\u003e）\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E9%80%92%E5%BD%92%E4%BA%8C%E5%88%86%E9%9A%8F%E6%9C%BA%E6%8A%BD%E7%89%8C\" title=\"递归二分随机抽牌\"\u003e递归二分随机抽牌\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E5%BF%AB%E6%8E%92Hack%E6%B3%95\" title=\"快排Hack法\"\u003e快排Hack法\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E5%A4%A7%E5%A4%9A%E6%95%B0%E4%BA%BA%E7%9A%84%E5%AE%9E%E7%8E%B0\" title=\"大多数人的实现\"\u003e大多数人的实现\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E5%A6%82%E4%BD%95%E6%B5%8B%E8%AF%95\" title=\"如何测试\"\u003e如何测试\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E6%AD%A3%E7%A1%AE%E7%9A%84%E7%AE%97%E6%B3%95\" title=\"正确的算法\"\u003e正确的算法\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#%E5%A6%82%E4%BD%95%E5%86%99%E6%B5%8B%E8%AF%95%E6%A1%88%E4%BE%8B\" title=\"如何写测试案例\"\u003e如何写测试案例\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#%E6%B3%A8%E6%84%8F\" title=\"注意\"\u003e注意\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#%E9%99%84%E5%BD%95\" title=\"附录\"\u003e附录\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%80%92%E5%BD%92%E4%BA%8C%E5%88%86%E9%9A%8F%E6%9C%BA%E6%8A%BD%E7%89%8C\"\u003e\u003c/span\u003e递归二分随机抽牌\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e有一次是有一个朋友做了一个网页版的扑克游戏，他用到的算法就是想模拟平时我们玩牌时用手洗牌的方式，是用递归+二分法，我说这个程序恐怕不对吧。他觉得挺对的，说测试了没有问题。他的程序大致如下（原来的是用Javascript写的，我在这里凭记忆用C复现一下）：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e//递归二分方法\nconst size_t MAXLEN = 10;\nconst char TestArr[MAXLEN] = {\u0026#39;A\u0026#39;,\u0026#39;B\u0026#39;,\u0026#39;C\u0026#39;,\u0026#39;D\u0026#39;,\u0026#39;E\u0026#39;,\u0026#39;F\u0026#39;,\u0026#39;G\u0026#39;,\u0026#39;H\u0026#39;,\u0026#39;I\u0026#39;,\u0026#39;J\u0026#39;};\n\nstatic char RecurArr[MAXLEN]={0};\nstatic int cnt = 0;\nvoid ShuffleArray_Recursive_Tmp(char* arr, int len)\n{\n    if(cnt \u0026gt; MAXLEN || len \u0026lt;=0){\n        return;\n    }\n\n    int pos = rand() % len;\n    RecurArr[cnt++] = arr[pos];\n    if (len==1) return;\n    ShuffleArray_Recursive_Tmp(arr, pos);\n    ShuffleArray_Recursive_Tmp(arr+pos+1, len-pos-1);\n}\n\nvoid ShuffleArray_Recursive(char* arr, int len)\n{\n    memset(RecurArr, 0, sizeof(RecurArr));\n    cnt=0;\n    ShuffleArray_Recursive_Tmp(arr, len);\n    memcpy(arr, RecurArr, len);\n}\n\nvoid main()\n{\n    char temp[MAXLEN]={0};\n    for(int i=0; i\u0026lt;5; i++) {\n        strncpy(temp, TestArr, MAXLEN);\n        ShuffleArray_Recursive((char*)temp, MAXLEN);\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cspan id=\"more-8593\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e随便测试几次，还真像那么回事：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e第一次：D C A B H E G F I J\n第二次：A G D B C E F J H I\n第三次：A B H F C E D G I J\n第四次：J I F B A D C E H G\n第五次：F B A D C E H G I J\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%BF%AB%E6%8E%92Hack%E6%B3%95\"\u003e\u003c/span\u003e快排Hack法\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e让我们再看一个hack 快排的洗牌程序（只看算法，省去别的代码）：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eint compare( const void *a, const void *b )\n{\n    return rand()%3-1;\n}\n\nvoid ShuffleArray_Sort(char* arr, int len)\n{\n    qsort( (void *)arr, (size_t)len, sizeof(char), compare );\n}\n\u003c/pre\u003e\n\u003cp\u003e运行个几次，感觉得还像那么回事：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e第一次：H C D J F E A G B I\n第二次：B F J D C E I H G A\n第三次：C G D E J F B I A H\n第四次：H C B J D F G E I A\n第五次：D B C F E A I H G J\u003c/pre\u003e\n\u003cp\u003e看不出有什么破绽。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%A4%A7%E5%A4%9A%E6%95%B0%E4%BA%BA%E7%9A%84%E5%AE%9E%E7%8E%B0\"\u003e\u003c/span\u003e大多数人的实现\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e下面这个算法是大多数人的实现，就是for循环一次，然后随机交换两个数\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003evoid ShuffleArray_General(char* arr, int len)\n{\n    const int suff_time = len;\n    for(int idx=0; idx\u0026lt;suff_time; idx++) {\n        int i = rand() % len;\n        int j = rand() % len;\n        char temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}\u003c/pre\u003e\n\u003cp\u003e跑起来也还不错，洗得挺好的。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e第一次：G F C D A J B I H E\n第二次：D G J F E I A H C B\n第三次：C J E F A D G B H I\n第四次：H D C F A E B J I G\n第五次：E A J F B I H G D C\u003c/pre\u003e\n\u003cp\u003e但是上述三个算法哪个的效果更好？好像都是对的。\u003cstrong\u003e一般的QA或是程序员很有可能就这样把这个功能Pass了\u003c/strong\u003e。但是事情并没有那么简单……\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%A6%82%E4%BD%95%E6%B5%8B%E8%AF%95\"\u003e\u003c/span\u003e如何测试\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e在做测试之前，我们还需要了解一下一个基本知识——\u003cstrong\u003ePC机上是做不出真随机数的，只能做出伪随机数。真随机数需要硬件支持\u003c/strong\u003e。但是不是这样我们就无法测试了呢，不是的。我们依然可以测试。\u003c/p\u003e\n\u003cp\u003e我们知道，洗牌洗得好不好，主要是看是不是够随机。那么如何测试随机性呢？\u003c/p\u003e\n\u003cp\u003e试想，我们有个随机函数rand()返回1到10中的一个数，如果够随机的话，每个数返回的概率都应该是一样的，也就是说每个数都应该有10分之1的概率会被返回。\u003c/p\u003e\n\u003cp\u003e一到概率问题，我们只有一个方法来做测试，那就是用统计的方式。也就是说，你调用rand()函数100次，其中，每个数出现的次数大约都在10次左右。（注意：我用了左右，这说明概率并不是很准确的）不应该有一个数出现了15次以上，另一个在5次以下，要是这样的话，这个函数就是错的。\u003c/p\u003e\n\u003cp\u003e举一反三，测试洗牌程序也一样，需要通过概率的方式来做统计，是不是每张牌出现在第一个位置的次数都是差不多的。\u003c/p\u003e\n\u003cp\u003e于是，这样一来上面的程序就可以很容易做测试了。\u003c/p\u003e\n\u003cp\u003e下面是测试结果（\u003cstrong\u003e测试样本1000次——列是每个位置出现的次数，行是各个字符的统计\u003c/strong\u003e，出现概率应该是1/10，也就是100次）：\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e递归随机抽牌的方法\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e很明显，这个洗牌程序太有问题。算法是错的！\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e     1    2    3    4    5    6    7    8    9    10\n----------------------------------------------------\nA | 101  283  317  208   65   23    3    0    0    0\nB | 101  191  273  239  127   54   12    2    1    0\nC | 103  167  141  204  229  115   32    7    2    0\nD | 103  103   87  128  242  195  112   26    3    1\nE | 104   83   62   67  116  222  228   93   22    3\nF |  91   58   34   60   69  141  234  241   65    7\nG |  93   43   35   19   44  102  174  274  185   31\nH |  94   28   27   27   46   68   94  173  310  133\nI | 119   27   11   30   28   49   64   96  262  314\nJ |  91   17   13   18   34   31   47   88  150  511\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e快排Hack法\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e看看对角线（从左上到右下）上的数据，很离谱！所以，这个算法也是错的。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e      1    2    3    4    5    6    7    8    9    10\n-----------------------------------------------------\nA |   74  108  123  102   93  198   40   37   52  173\nB |  261  170  114   70   49   28   37   76  116   79\nC |  112  164  168  117   71   37   62   96  116   57\nD |   93   91  119  221  103   66   91   98   78   40\nE |   62   60   82   90  290  112   95   98   71   40\nF |   46   60   63   76   81  318   56   42   70  188\nG |   72   57   68   77   83   39  400  105   55   44\nH |   99   79   70   73   87   34  124  317   78   39\nI |  127  112  102   90   81   24   57   83  248   76\nJ |   54   99   91   84   62  144   38   48  116  264\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e大多数人的算法\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e我们再来看看大多数人的算法。还是对角线上的数据有问题，所以，还是错的。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e      1    2    3    4    5    6    7    8    9    10\n-----------------------------------------------------\nA |  178   98   92   82  101   85   79  105   87   93\nB |   88  205   90   94   77   84   93   86  106   77\nC |   93   99  185   96   83   87   98   88   82   89\nD |  105   85   89  190   92   94  105   73   80   87\nE |   97   74   85   88  204   91   80   90  100   91\nF |   85   84   90   91   96  178   90   91  105   90\nG |   81   84   84  104  102  105  197   75   79   89\nH |   84   99  107   86   82   78   92  205   79   88\nI |  102   72   88   94   87  103   94   92  187   81\nJ |   87  100   90   75   76   95   72   95   95  215\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%AD%A3%E7%A1%AE%E7%9A%84%E7%AE%97%E6%B3%95\"\u003e\u003c/span\u003e正确的算法\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e下面，我们来看看性能高且正确的算法—— \u003ca href=\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\" target=\"_blank\"\u003eFisher_Yates算法\u003c/a\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003evoid ShuffleArray_Fisher_Yates(char* arr, int len)\n{\n    int i = len, j;\n    char temp;\n\n    if ( i == 0 ) return;\n    while ( --i ) {\n        j = rand() % (i+1);\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}\u003c/pre\u003e\n\u003cp\u003e这个算法不难理解，看看测试效果（效果明显比前面的要好）：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e      1    2    3    4    5    6    7    8    9    10\n-----------------------------------------------------\nA |  107   98   83  115   89  103  105   99   94  107\nB |   91  106   90  102   88  100  102   97  112  112\nC |  100  107   99  108  101   99   86   99  101  100\nD |   96   85  108  101  117  103  102   96  108   84\nE |  106   89  102   86   88  107  114  109  100   99\nF |  109   96   87   94   98  102  109  101   92  102\nG |   94   95  119  110   97  112   89  101   89   94\nH |   93  102  102  103  100   89  107  105  101   98\nI |   99  110  111  101  102   79  103   89  104  102\nJ |  105  112   99   99  108  106   95   95   99   82\u003c/pre\u003e\n\u003cp\u003e但是我们可以看到还是不完美。因为我们使用的rand()是伪随机数，不过已经很不错的。最大的误差在20%左右。\u003c/p\u003e\n\u003cp\u003e我们再来看看洗牌100万次的统计值，你会看到误差在6%以内了。这个对于伪随机数生成的程序已经很不错了。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e      1       2     3       4      5      6      7      8     9      10\n-------------------------------------------------------------------------\nA | 100095  99939 100451  99647  99321 100189 100284  99565 100525  99984\nB |  99659 100394  99699 100436  99989 100401  99502 100125 100082  99713\nC |  99938  99978 100384 100413 100045  99866  99945 100025  99388 100018\nD |  99972  99954  99751 100112 100503  99461  99932  99881 100223 100211\nE | 100041 100086  99966  99441 100401  99958  99997 100159  99884 100067\nF | 100491 100294 100164 100321  99902  99819  99449 100130  99623  99807\nG |  99822  99636  99924 100172  99738 100567 100427  99871 100125  99718\nH |  99445 100328  99720  99922 100075  99804 100127  99851 100526 100202\nI | 100269 100001  99542  99835 100070  99894 100229 100181  99718 100261\nJ | 100268  99390 100399  99701  99956 100041 100108 100212  99906 100019\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%A6%82%E4%BD%95%E5%86%99%E6%B5%8B%E8%AF%95%E6%A1%88%E4%BE%8B\"\u003e\u003c/span\u003e如何写测试案例\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e测试程序其实很容易写了。就是，设置一个样本大小，做一下统计，然后计算一下误差值是否在可以容忍的范围内。比如：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e样本：100万次\u003c/li\u003e\n\u003cli\u003e最大误差：10%以内\u003c/li\u003e\n\u003cli\u003e平均误差：5%以内 （或者：90%以上的误差要小于5%）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%B3%A8%E6%84%8F\"\u003e\u003c/span\u003e注意\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e其实，以上的测试只是测试了牌在各个位置的概率。这个还不足够好。因为还可能会现在有Patten的情况。如：每次洗牌出来的都是一个循环顺序数组。这完全可以满足我上面的测试条件。但是那明显是错的。\u003cstrong\u003e所以，还需要统计每种排列的出现的次数\u003c/strong\u003e，看看是不是均匀。但是，\u003cstrong\u003e如果这些排列又是以某种规律出现的呢\u003c/strong\u003e？看来，这没完没了了。\u003c/p\u003e\n\u003cp\u003e测试的确是一个很重要，并不简单的事情。谢谢所有参与讨论的人。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%99%84%E5%BD%95\"\u003e\u003c/span\u003e附录\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e之前忘贴了一个模拟我们玩牌洗牌的算法，现补充如下：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003evoid ShuffleArray_Manual(char* arr, int len)\n{\n    int mid = len / 2;\n\n    for (int n=0; n\u0026lt;5; n++){\n\n        //两手洗牌\n        for (int i=1; i\u0026lt;mid; i+=2){\n            char tmp = arr[i];\n            arr[i] = arr[mid+i];\n            arr[mid+i] = tmp;\n        }\n\n        //随机切牌\n        char *buf = (char*)malloc(sizeof(char)*len);\n\n        for(int j=0; j\u0026lt;5; j++) {\n            int start= rand() % (len-1) + 1;\n            int numCards= rand()% (len/2) + 1;\n\n            if (start + numCards \u0026gt; len ){\n                numCards = len - start;\n            }\n\n            memset(buf, 0, len);\n            strncpy(buf, arr, start);\n            strncpy(arr, arr+start, numCards);\n            strncpy(arr+numCards, buf, start);\n        }\n        free(buf);\n\n    }\n}\u003c/pre\u003e\n\u003cp\u003e我们来看看测试结果：（10万次）效果更好一些，误差在2%以内了。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e      1       2     3       4      5      6      7      8     9      10\n-------------------------------------------------------------------------\nA |  10002   9998   9924  10006  10048  10200   9939   9812  10080   9991\nB |   9939   9962  10118  10007   9974  10037  10149  10052   9761  10001\nC |  10054  10100  10050   9961   9856   9996   9853  10016   9928  10186\nD |   9851   9939   9852  10076  10208  10003   9974  10052   9992  10053\nE |  10009   9915  10050  10037   9923  10094  10078  10059   9880   9955\nF |  10151  10115  10113   9919   9844   9896   9891   9904  10225   9942\nG |  10001  10116  10097  10030  10061   9993   9891   9922   9889  10000\nH |  10075  10033   9866   9857  10170   9854  10062  10078  10056   9949\nI |  10045   9864   9879  10066   9930   9919  10085  10104  10095  10013\nJ |   9873   9958  10051  10041   9986  10008  10078  10001  10094   9910\u003c/pre\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17381.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2016/07/PerfTest-150x150.png\" alt=\"性能测试应该怎么做？\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17381.html\" class=\"wp_rp_title\"\u003e性能测试应该怎么做？\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17225.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2015/08/cuckoo-150x150.jpg\" alt=\"Cuckoo Filter：设计与实现\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17225.html\" class=\"wp_rp_title\"\u003eCuckoo Filter：设计与实现\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"Leetcode 编程训练\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_title\"\u003eLeetcode 编程训练\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11847.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/08/puzzle-150x150.png\" alt=\"谜题的答案和活动的心得体会\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11847.html\" class=\"wp_rp_title\"\u003e谜题的答案和活动的心得体会\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11832.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/08/538efefbgw1eiz9cvx78fj20rm0fmdi8-150x150.jpg\" alt=\"【活动】解迷题送礼物\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11832.html\" class=\"wp_rp_title\"\u003e【活动】解迷题送礼物\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/10590.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview-150x150.jpeg\" alt=\"二维码的生成细节和原理\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/10590.html\" class=\"wp_rp_title\"\u003e二维码的生成细节和原理\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-8593\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"c37e13af3f\"\u003e\u003cimg id=\"rating_8593_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8593, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8d26d71003ed10ab34b17d92-=\"\"/\u003e\u003cimg id=\"rating_8593_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8593, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8d26d71003ed10ab34b17d92-=\"\"/\u003e\u003cimg id=\"rating_8593_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8593, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8d26d71003ed10ab34b17d92-=\"\"/\u003e\u003cimg id=\"rating_8593_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8593, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8d26d71003ed10ab34b17d92-=\"\"/\u003e\u003cimg id=\"rating_8593_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8593, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-8d26d71003ed10ab34b17d92-=\"\"/\u003e (\u003cstrong\u003e31\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.00\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_8593_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"如何测试洗牌程序\"/\u003e\u003cmeta itemprop=\"headline\" content=\"如何测试洗牌程序\"/\u003e\u003cmeta itemprop=\"description\" content=\"我希望本文有助于你了解测试软件是一件很重要也是一件不简单的事。\n\n我们有一个程序，叫ShuffleArray()，是用来洗牌的，我见过N多千变万化的ShuffleArray()，但是似乎从来没人去想过怎么去测试这个算法。所以，我在面试中我经常会问应聘者如何测试ShuffleArray()，没想到这个问题居然难倒了很多有多年编程经验的人。对于这类的问题，其实，测试程序可能比算法更难写，代码更多。...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2012-11-20T08:22:07+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2012-11-27T16:49:26+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/8593.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/8593.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"31\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-8593-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2012-11-20T08:22:07+08:00",
  "Author": "陈皓"
}