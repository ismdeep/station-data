{
  "Source": "coolshell.cn",
  "Title": "C语言全局变量那些事儿",
  "Link": "https://coolshell.cn/articles/10115.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"f290ecc2bddcc4748373e64d-text/javascript\"\u003e\u003c/script\u003e\u003cstrong\u003e（感谢网友 \u003c/strong\u003e\u003ca href=\"http://weibo.com/fullofbull\" target=\"_blank\"\u003e\u003cstrong\u003e@我的上铺叫路遥\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e 投稿）\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e作为一名程序员，如果说沉迷一门编程语言算作一种乐趣的话，那么与此同时反过来去黑一门编程语言就是这种乐趣的升华。今天我们就来黑一把C语言，好好展示一下这门经典语言令人抓狂的一面。\u003c/p\u003e\n\u003cp\u003e我们知道，全局变量是C语言语法和语义中一个很重要的知识点，首先它的存在意义需要从三个不同角度去理解：对于程序员来说，它是一个记录内容的\u003cstrong\u003e变量(variable)\u003c/strong\u003e；对于编译/链接器来说，它是一个需要解析的\u003cstrong\u003e符号(symbol)\u003c/strong\u003e；对于计算机来说，它可能是具有地址的一块\u003cstrong\u003e内存(memory)\u003c/strong\u003e。其次是语法/语义：从作用域上看，带static关键字的全局变量范围只能限定在文件里，否则会外联到整个模块和项目中；从生存期来看，它是静态的，贯穿整个程序或模块运行期间（\u003cspan style=\"color: #ff0000;\"\u003e\u003cstrong\u003e注意，正是跨单元访问和持续生存周期这两个特点使得全局变量往往成为一段受攻击代码的突破口，了解这一点十分重要\u003c/strong\u003e\u003c/span\u003e）；从空间分配上看，定义且初始化的全局变量在编译时在数据段(.data)分配空间，定义但未初始化的全局变量\u003cstrong\u003e暂存(tentative definition)\u003c/strong\u003e在.bss段，编译时自动清零，而仅仅是声明的全局变量只能算个符号，寄存在编译器的符号表内，不会分配空间，直到链接或者运行时再重定向到相应的地址上。\u003c/p\u003e\n\u003cp\u003e我们将向您展现一下，\u003cstrong\u003e非static限定全局变量\u003c/strong\u003e在编译/链接以及程序运行时会发生哪些有趣的事情，顺便可以对C编译器/链接器的解析原理管中窥豹。以下示例对ANSI C和GNU C标准都有效，笔者的编译环境是Ubuntu下的GCC-4.4.3。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-10115\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90\" title=\"第一个例子\"\u003e第一个例子\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E7%AC%AC%E4%BA%8C%E4%B8%AA%E4%BE%8B%E5%AD%90\" title=\"第二个例子\"\u003e第二个例子\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E7%AC%AC%E4%B8%89%E4%B8%AA%E4%BE%8B%E5%AD%90\" title=\"第三个例子\"\u003e第三个例子\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E7%AC%AC%E5%9B%9B%E4%B8%AA%E4%BE%8B%E5%AD%90\" title=\"第四个例子\"\u003e第四个例子\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90\"\u003e\u003c/span\u003e第一个例子\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e/* t.h */\n#ifndef _H_\n#define _H_\nint a;\n#endif\n\n/* foo.c */\n#include \u0026lt;stdio.h\u0026gt;\n#include \u0026#34;t.h\u0026#34;\n\nstruct {\n   char a;\n   int b;\n} b = { 2, 4 };\n\nint main();\n\nvoid foo()\n{\n    printf(\u0026#34;foo:\\t(\u0026amp;a)=0x%08x\\n\\t(\u0026amp;b)=0x%08x\\n\n        \\tsizeof(b)=%d\\n\\tb.a=%d\\n\\tb.b=%d\\n\\tmain:0x%08x\\n\u0026#34;,\n        \u0026amp;a, \u0026amp;b, sizeof b, b.a, b.b, main);\n}\n\n/* main.c */\n#include \u0026lt;stdio.h\u0026gt;\n#include \u0026#34;t.h\u0026#34;\n\nint b;\nint c;\n\nint main()\n{\n    foo();\n    printf(\u0026#34;main:\\t(\u0026amp;a)=0x%08x\\n\\t(\u0026amp;b)=0x%08x\\n\n        \\t(\u0026amp;c)=0x%08x\\n\\tsize(b)=%d\\n\\tb=%d\\n\\tc=%d\\n\u0026#34;,\n        \u0026amp;a, \u0026amp;b, \u0026amp;c, sizeof b, b, c);\n\treturn 0;\n}\n\u003c/pre\u003e\n\u003cp\u003eMakefile如下：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003etest: main.o foo.o\n\tgcc -o test main.o foo.o\n\nmain.o: main.c\nfoo.o: foo.c\n\nclean:\n\trm *.o test\n\u003c/pre\u003e\n\u003cp\u003e运行情况：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003efoo:\t(\u0026amp;a)=0x0804a024\n\t(\u0026amp;b)=0x0804a014\n\tsizeof(b)=8\n\tb.a=2\n\tb.b=4\n\tmain:0x080483e4\nmain:\t(\u0026amp;a)=0x0804a024\n\t(\u0026amp;b)=0x0804a014\n\t(\u0026amp;c)=0x0804a028\n\tsize(b)=4\n\tb=2\n\tc=0\n\u003c/pre\u003e\n\u003cp\u003e这个项目里我们定义了四个全局变量，t.h头文件定义了一个整型a，main.c里定义了两个整型b和c并且未初始化，foo.c里定义了一个初始化了的结构体，还定义了一个main的函数指针变量。由于C语言每个源文件单独编译，所以t.h分别包含了两次，所以int a就被定义了两次。两个源文件里变量b和函数指针变量main被重复定义了，实际上可以看做代码段的地址。但编译器并未报错，只给出一条警告：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e/usr/bin/ld: Warning: size of symbol \u0026#39;b\u0026#39; changed from 4 in main.o to 8 in foo.o\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e运行程序发现，main.c打印中b大小是4个字节，而foo.c是8个字节，因为sizeof关键字是编译时决议，而源文件中对b类型定义不一样。但令人惊奇的是无论是在main.c还是foo.c中，a和b都是相同的地址，也就是说，a和b被定义了两次，b还是不同类型，但内存映像中只有一份拷贝。我们还看到，main.c中b的值居然就是foo.c中结构体第一个成员变量b.a的值，这证实了前面的推断——\u003cstrong\u003e即便存在多次定义，内存中只有一份初始化的拷贝。\u003c/strong\u003e另外在这里c是置身事外的一个独立变量。\u003c/p\u003e\n\u003cp\u003e为何会这样呢？这涉及到\u003cstrong\u003eC编译器对多重定义的全局符号的解析和链接。\u003c/strong\u003e在编译阶段，编译器将全局符号信息隐含地编码在可重定位目标文件的符号表里。这里有个\u003cstrong\u003e“强符号(strong)”\u003c/strong\u003e和\u003cstrong\u003e“弱符号(weak)”\u003c/strong\u003e的概念——前者指的是定义并且初始化了的变量，比如foo.c里的结构体b，后者指的是未定义或者定义但未初始化的变量，比如main.c里的整型b和c，还有两个源文件都包含头文件里的a。当符号被多重定义时，GNU链接器(ld)使用以下规则决议：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e不允许出现多个相同强符号。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e如果有一个强符号和多个弱符号，则选择强符号。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e如果有多个弱符号，那么先决议到size最大的那个，如果同样大小，则按照链接顺序选择第一个。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e像上面这个例子中，全局变量a和b存在重复定义。如果我们将main.c中的b初始化赋值，那么就存在两个强符号而违反了规则一，编译器报错。如果满足规则二，则仅仅提出警告，实际运行时决议的是foo.c中的强符号。而变量a都是弱符号，所以只选择一个（按照目标文件链接时的顺序）。\u003c/p\u003e\n\u003cp\u003e事实上，这种规则是C语言里的一个大坑，编译器对这种全局变量多重定义的“纵容”很可能会无端修改某个变量，导致程序不确定行为。如果你还没有意识到事态严重性，我再举个例子。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%AC%AC%E4%BA%8C%E4%B8%AA%E4%BE%8B%E5%AD%90\"\u003e\u003c/span\u003e第二个例子\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e/* foo.c */\n#include \u0026lt;stdio.h\u0026gt;;\n\nstruct {\n    int a;\n    int b;\n} b = { 2, 4 };\n\nint main();\n\nvoid foo()\n{\n    printf(\u0026#34;foo:\\t(\u0026amp;b)=0x%08x\\n\\tsizeof(b)=%d\\n\n        \\tb.a=%d\\n\\tb.b=%d\\n\\tmain:0x%08x\\n\u0026#34;,\n        \u0026amp;b, sizeof b, b.a, b.b, main);\n}\n\n/* main.c */\n#include \u0026lt;stdio.h\u0026gt;\n\nint b;\nint c;\n\nint main()\n{\n    if (0 == fork()) {\n        sleep(1);\n        b = 1;\n        printf(\u0026#34;child:\\tsleep(1)\\n\\t(\u0026amp;b):0x%08x\\n\n            \\t(\u0026amp;c)=0x%08x\\n\\tsizeof(b)=%d\\n\\tset b=%d\\n\\tc=%d\\n\u0026#34;,\n            \u0026amp;b, \u0026amp;c, sizeof b, b, c);\n        foo();\n    } else {\n        foo();\n        printf(\u0026#34;parent:\\t(\u0026amp;b)=0x%08x\\n\\t(\u0026amp;c)=0x%08x\\n\n            \\tsizeof(b)=%d\\n\\tb=%d\\n\\tc=%d\\n\\twait child...\\n\u0026#34;,\n            \u0026amp;b, \u0026amp;c, sizeof b, b, c);\n        wait(-1);\n        printf(\u0026#34;parent:\\tchild over\\n\\t(\u0026amp;b)=0x%08x\\n\n            \\t(\u0026amp;c)=0x%08x\\n\\tsizeof(b)=%d\\n\\tb=%d\\n\\tc=%d\\n\u0026#34;,\n            \u0026amp;b, \u0026amp;c, sizeof b, b, c);\n    }\n    return 0;\n}\u003c/pre\u003e\n\u003cp\u003e运行情况如下：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003efoo:\t(\u0026amp;b)=0x0804a020\n\tsizeof(b)=8\n\tb.a=2\n\tb.b=4\n\tmain:0x080484c8\nparent:\t(\u0026amp;b)=0x0804a020\n\t(\u0026amp;c)=0x0804a034\n\tsizeof(b)=4\n\tb=2\n\tc=0\n\twait child...\nchild:\tsleep(1)\n\t(\u0026amp;b):0x0804a020\n\t(\u0026amp;c)=0x0804a034\n\tsizeof(b)=4\n\tset b=1\n\tc=0\nfoo:\t(\u0026amp;b)=0x0804a020\n\tsizeof(b)=8\n\tb.a=1\n\tb.b=4\n\tmain:0x080484c8\nparent:\tchild over\n\t(\u0026amp;b)=0x0804a020\n\t(\u0026amp;c)=0x0804a034\n\tsizeof(b)=4\n\tb=2\n\tc=0\n\u003c/pre\u003e\n\u003cp\u003e（说明一点，运行情况是直接输出到stdout的打印，笔者曾经将./test输出重定向到log中，结果发现打印的执行序列不一致，所以采用默认输出。）\u003c/p\u003e\n\u003cp\u003e这是一个\u003cstrong\u003e多进程环境\u003c/strong\u003e，首先我们看到无论父进程还是子进程，main.c还是foo.c，全局变量b和c的地址仍然是一致的（当然只是个\u003cstrong\u003e逻辑地址\u003c/strong\u003e），而且对b的大小不同模块仍然有不同的决议。这里值得注意的是，我们在子进程中对变量b进行赋值动作，从此子进程本身包括foo()调用中，整型b以及结构体成员b.a的值都是1，而父进程中整型b和结构体成员b.a的值仍是2，但它们显示的逻辑地址仍是一致的。\u003c/p\u003e\n\u003cp\u003e个人认为可以这样解释，fork创建新进程时，子进程获得了父进程上下文“镜像”（自然包括全局变量），虚拟地址相同但属于不同的进程空间，而且此时真正映射的物理地址中只有一份拷贝，所以b的值是相同的（都是2）。随后子进程对b改写，触发了操作系统的\u003cstrong\u003e写时拷贝(copy on write)\u003c/strong\u003e机制，这时物理内存中才产生真正的两份拷贝，分别映射到不同进程空间的虚拟地址上，但虚拟地址的值本身仍然不变，这对于应用程序来说是透明的，具有隐瞒性。\u003c/p\u003e\n\u003cp\u003e还有一点值得注意，这个示例编译时没有出现第一个示例的警告，即对变量b的sizeof决议，笔者也不知道为什么，或许是GCC的一个bug？\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%AC%AC%E4%B8%89%E4%B8%AA%E4%BE%8B%E5%AD%90\"\u003e\u003c/span\u003e第三个例子\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e这个例子代码同上一个一致，只不过我们将foo.c做成一个静态链接库libfoo.a进行链接，这里只给出Makefile的改动。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003etest: main.o foo.o\n\tar rcs libfoo.a foo.o\n\tgcc -static -o test main.o libfoo.a\n\nmain.o: main.c\nfoo.o: foo.c\n\nclean:\n\trm -f *.o test\n\u003c/pre\u003e\n\u003cp\u003e运行情况如下：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003efoo:\t(\u0026amp;b)=0x080ca008\n\tsizeof(b)=8\n\tb.a=2\n\tb.b=4\n\tmain:0x08048250\nparent:\t(\u0026amp;b)=0x080ca008\n\t(\u0026amp;c)=0x080cc084\n\tsizeof(b)=4\n\tb=2\n\tc=0\n\twait child...\nchild:\tsleep(1)\n\t(\u0026amp;b):0x080ca008\n\t(\u0026amp;c)=0x080cc084\n\tsizeof(b)=4\n\tset b=1\n\tc=0\nfoo:\t(\u0026amp;b)=0x080ca008\n\tsizeof(b)=8\n\tb.a=1\n\tb.b=4\n\tmain:0x08048250\nparent:\tchild over\n\t(\u0026amp;b)=0x080ca008\n\t(\u0026amp;c)=0x080cc084\n\tsizeof(b)=4\n\tb=2\n\tc=0\n\u003c/pre\u003e\n\u003cp\u003e从这个例子看不出有啥差别，只不过使用\u003cstrong\u003e静态链接\u003c/strong\u003e后，全局变量加载的地址有所改变，b和c的地址之间似乎相隔更远了些。不过这次编译器倒是给出了变量b的sizeof决议警告。\u003c/p\u003e\n\u003cp\u003e到此为止，有些人可能会对上面的例子嗤之以鼻，觉得这不过是列举了C语言的某些特性而已，算不上黑。有些人认为既然如此，对于一切全局变量要么用static限死，要么定义同时初始化，杜绝弱符号，以便在编译时报错检测出来。只要小心地使用，C语言还是很完美的嘛~对于抱这样想法的人，我只想说，请你在夜深人静的时候竖起耳朵仔细聆听，你很可能听到Dennis Richie在九泉之下邪恶的笑声——不，与其说是嘲笑，不如说是诅咒……\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%AC%AC%E5%9B%9B%E4%B8%AA%E4%BE%8B%E5%AD%90\"\u003e\u003c/span\u003e第四个例子\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e/* foo.c */\n#include \u0026lt;stdio.h\u0026gt;\n\nconst struct {\n    int a;\n    int b;\n} b = { 3, 3 };\n\nint main();\n\nvoid foo()\n{\n    b.a = 4;\n    b.b = 4;\n    printf(\u0026#34;foo:\\t(\u0026amp;b)=0x%08x\\n\\tsizeof(b)=%d\\n\n        \\tb.a=%d\\n\\tb.b=%d\\n\\tmain:0x%08x\\n\u0026#34;,\n        \u0026amp;b, sizeof b, b.a, b.b, main);\n}\n\n/* t1.c */\n#include \u0026lt;stdio.h\u0026gt;\n\nint b = 1;\nint c = 1;\n\nint main()\n{\n    int count = 5;\n    while (count-- \u0026gt; 0) {\n        t2();\n        foo();\n        printf(\u0026#34;t1:\\t(\u0026amp;b)=0x%08x\\n\\t(\u0026amp;c)=0x%08x\\n\n            \\tsizeof(b)=%d\\n\\tb=%d\\n\\tc=%d\\n\u0026#34;,\n            \u0026amp;b, \u0026amp;c, sizeof b, b, c);\n        sleep(1);\n    }\n    return 0;\n}\n\n/* t2.c */\n#include \u0026lt;stdio.h\u0026gt;\n\nint b;\nint c;\n\nint t2()\n{\n    printf(\u0026#34;t2:\\t(\u0026amp;b)=0x%08x\\n\\t(\u0026amp;c)=0x%08x\\n\n        \\tsizeof(b)=%d\\n\\tb=%d\\n\\tc=%d\\n\u0026#34;,\n        \u0026amp;b, \u0026amp;c, sizeof b, b, c);\n    return 0;\n}\u003c/pre\u003e\n\u003cp\u003eMakefile脚本：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003eexport LD_LIBRARY_PATH:=.\n\nall: test\n\t./test\n\ntest: t1.o t2.o\n\tgcc -shared -fPIC -o libfoo.so foo.c\n\tgcc -o test t1.o t2.o -L. -lfoo\n\nt1.o: t1.c\nt2.o: t2.c\n\n.PHONY:clean\nclean:\n\trm -f *.o *.so test*\n\u003c/pre\u003e\n\u003cp\u003e执行结果：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e./test\nt2:\t(\u0026amp;b)=0x0804a01c\n\t(\u0026amp;c)=0x0804a020\n\tsizeof(b)=4\n\tb=1\n\tc=1\nfoo:\t(\u0026amp;b)=0x0804a01c\n\tsizeof(b)=8\n\tb.a=4\n\tb.b=4\n\tmain:0x08048564\nt1:\t(\u0026amp;b)=0x0804a01c\n\t(\u0026amp;c)=0x0804a020\n\tsizeof(b)=4\n\tb=4\n\tc=4\nt2:\t(\u0026amp;b)=0x0804a01c\n\t(\u0026amp;c)=0x0804a020\n\tsizeof(b)=4\n\tb=4\n\tc=4\nfoo:\t(\u0026amp;b)=0x0804a01c\n\tsizeof(b)=8\n\tb.a=4\n\tb.b=4\n\tmain:0x08048564\nt1:\t(\u0026amp;b)=0x0804a01c\n\t(\u0026amp;c)=0x0804a020\n\tsizeof(b)=4\n\tb=4\n\tc=4\n\t...\u003c/pre\u003e\n\u003cp\u003e其实前面几个例子只是开胃小菜而已，真正的大坑终于出现了！而且这次编译器既没报错也没警告，但我们确实眼睁睁地看到作为main()中强符号的b被改写了，而且一旁的c也“躺枪”了。眼尖的读者发现，这次foo.c是作为动态链接库运行时加载的，当t1第一次调用t2时，libfoo.so还未加载，一旦调用了foo函数，b立马中弹，而且\u003cstrong\u003ec的地址居然还相邻着b，这使得c一同中弹了。\u003c/strong\u003e不过笔者有些无法解释这种行为的原因，有种说法是强符号的全局变量在数据段中是连续分布的（相应地弱符号暂存在.bss段或者符号表里），或许可以上报GNU的编译器开发小组。\u003c/p\u003e\n\u003cp\u003e另外笔者尝试过将t1.c中的b和c定义前面加上\u003cstrong\u003econst限定词\u003c/strong\u003e，编译器仍然默认通过，但程序在main()中第一次调用foo()时触发了Segment fault异常导致奔溃，在foo.c里使用指针改写它也一样。\u003cstrong\u003e推断这是GCC对const常量所在地址启用了类似操作系统写保护机制，但我无法确定早期版本的GCC是否会让这个const常量被改写而程序不会奔溃。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e至于\u003cstrong\u003evolatile关键词\u003c/strong\u003e之于全局变量，自测似乎没有影响。\u003c/p\u003e\n\u003cp\u003e怎么样？看了最后一个例子是否有点“不明觉厉”呢？C语言在你心目中是否还是当初那个“纯洁”、“干净”、“行为一致”的姑娘呢？也许趁着你不注意的时候她会偷偷给你戴顶绿帽，这一切都是通过全局变量，特别在动态链接的环境下，就算全部定义成强符号仍然无法为编译器所察觉。而一些IT界“恐怖分子”也经常\u003cstrong\u003e将恶意代码包装成全局变量注入到root权限下存在漏洞的操作序列中，\u003c/strong\u003e就像著名的栈溢出攻击那样。某一天当你傻傻地看着一个程序出现未定义的行为却无法定位原因的时候，请不要忘记Richie大爷那来自九泉之下最深沉的“问候”~\u003c/p\u003e\n\u003cp\u003e或许有些人会偷换概念，把这一切归咎于编译器和链接器身上，认为这同语言无关，但我要提醒你，正是编译/链接器的行为支撑了整个语言的语法和语义。你可以反过来思考一下为何C的胞弟C++推出\u003cstrong\u003e“命名空间(namespace)”\u003c/strong\u003e的概念，或者你可以使用其它高级语言，对于重定义的全局变量是否能通过编译这一关。\u003c/p\u003e\n\u003cp\u003e所以请时刻谨记，\u003cspan style=\"color: #ff0000;\"\u003e\u003cstrong\u003eC是一门很恐怖的语言！\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eP.S.题外话写在最后。我无意挑起语言之争，只是就事论事地去\u003cstrong\u003e“黑(hack)\u003c/strong\u003e\u003cstrong\u003e”\u003c/strong\u003e一门语言而已，而且要黑就要黑得有理有力有层次，还要带点娱乐精神。其实黑一门语言并非什么尖端复杂的技术，个人觉得起码要做到两点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e亲自动手写测试程序。\u003c/strong\u003e动手写测试程序是开发人员必备的基础技能，只有现成的代码才能让人心服口服，那些只会停留在口头上的争论只能算作cheap hack。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e测试程序不能依赖于不成熟的代码。\u003c/strong\u003e软件开发99%以上的bug都是基于不合格(substandard)开发人员导致，这并不能怪罪于语言以及编译器本身。使用诸如#define TRUE FALSE或者#define NULL 1之类的trick来黑C语言只能证明此人很有娱乐精神而不是真正的”hack value”，拿老北京梨园行当里的一句话——“那是下三滥的玩意儿”。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/03/rust-social-wide-150x150.jpg\" alt=\"Rust语言的编程范式\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_title\"\u003eRust语言的编程范式\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/07/api-design-300x278-2-150x150.jpg\" alt=\"API设计原则 – Qt官网的设计实践总结\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_title\"\u003eAPI设计原则 – Qt官网的设计实践总结\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"Leetcode 编程训练\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_title\"\u003eLeetcode 编程训练\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12012.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/10/edsm-150x150.gif\" alt=\"State Threads 回调终结者\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12012.html\" class=\"wp_rp_title\"\u003eState Threads 回调终结者\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11466.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/04/c99-150x150.jpg\" alt=\"C语言的整型溢出问题\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11466.html\" class=\"wp_rp_title\"\u003eC语言的整型溢出问题\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-10115\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"ad58e11814\"\u003e\u003cimg id=\"rating_10115_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10115, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-f290ecc2bddcc4748373e64d-=\"\"/\u003e\u003cimg id=\"rating_10115_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10115, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-f290ecc2bddcc4748373e64d-=\"\"/\u003e\u003cimg id=\"rating_10115_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10115, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-f290ecc2bddcc4748373e64d-=\"\"/\u003e\u003cimg id=\"rating_10115_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10115, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-f290ecc2bddcc4748373e64d-=\"\"/\u003e\u003cimg id=\"rating_10115_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10115, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-f290ecc2bddcc4748373e64d-=\"\"/\u003e (\u003cstrong\u003e29\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e3.86\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_10115_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"C语言全局变量那些事儿\"/\u003e\u003cmeta itemprop=\"headline\" content=\"C语言全局变量那些事儿\"/\u003e\u003cmeta itemprop=\"description\" content=\"（感谢网友 @我的上铺叫路遥 投稿）\n\n作为一名程序员，如果说沉迷一门编程语言算作一种乐趣的话，那么与此同时反过来去黑一门编程语言就是这种乐趣的升华。今天我们就来黑一把C语言，好好展示一下这门经典语言令人抓狂的一面。\n\n我们知道，全局变量是C语言语法和语义中一个很重要的知识点，首先它的存在意义需要从三个不同角度去理解：对于程序员来说，它是一个记录内容的变量(variable)；对于编译/链...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2013-07-21T21:16:33+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2013-07-21T23:35:51+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/10115.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"Leo\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/10115.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"3.86\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"29\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-10115-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2013-07-21T21:16:33+08:00",
  "Author": "Leo"
}