{
  "Source": "coolshell.cn",
  "Title": "Javascript 装载和执行",
  "Link": "https://coolshell.cn/articles/9749.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"0cd2a035713502ac87895259-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright  wp-image-9778\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/06/javascript.jpg\" width=\"300\" height=\"225\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/06/javascript.jpg 500w, https://coolshell.cn/wp-content/uploads/2013/06/javascript-300x225.jpg 300w, https://coolshell.cn/wp-content/uploads/2013/06/javascript-360x270.jpg 360w\" sizes=\"(max-width: 300px) 100vw, 300px\"/\u003e一两个月前在淘宝内网里看到一个优化Javascript代码的竞赛，发现有不少的人对Javascript的执行和装载的基础并不懂，所以，从那天起我就想写一篇文章，但一直耽搁了。自上篇《\u003ca title=\"浏览器的渲染原理简介\" href=\"https://coolshell.cn/articles/9666.html\" target=\"_blank\"\u003e浏览器渲染原理简介\u003c/a\u003e》，正好也可以承前启后。\u003c/p\u003e\n\u003cp\u003e首先，我想说一下Javascript的装载和执行。通常来说，浏览器对于Javascript的运行有两大特性：\u003cstrong\u003e1）载入后马上执行，2）执行时会阻塞页面后续的内容（包括页面的渲染、其它资源的下载）\u003c/strong\u003e。于是，如果有多个js文件被引入，那么对于浏览器来说，这些js文件被被串行地载入，并依次执行。\u003c/p\u003e\n\u003cp\u003e因为javascript可能会来操作HTML文档的DOM树，所以，浏览器一般都不会像并行下载css文件并行下载js文件，因为这是js文件的特殊性造成的。所以，如果你的javascript想操作后面的DOM元素，基本上来说，浏览器都会报错说对象找不到。因为Javascript执行时，后面的HTML被阻塞住了，DOM树时还没有后面的DOM结点。所以程序也就报错了。\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E4%BC%A0%E7%BB%9F%E7%9A%84%E6%96%B9%E5%BC%8F\" title=\"传统的方式\"\u003e传统的方式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#documentwrite%E6%96%B9%E5%BC%8F\" title=\"document.write方式\"\u003edocument.write方式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#script%E7%9A%84defer%E5%92%8Casync%E5%B1%9E%E6%80%A7\" title=\"script的defer和async属性\"\u003escript的defer和async属性\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BADOM%E6%96%B9%E5%BC%8F\" title=\"动态创建DOM方式\"\u003e动态创建DOM方式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E6%8C%89%E9%9C%80%E5%BC%82%E6%AD%A5%E8%BD%BD%E5%85%A5js\" title=\"按需异步载入js\"\u003e按需异步载入js\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#%E6%9B%B4%E5%A4%9A\" title=\"更多\"\u003e更多\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%BC%A0%E7%BB%9F%E7%9A%84%E6%96%B9%E5%BC%8F\"\u003e\u003c/span\u003e传统的方式\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e所以，当你写在代码中写下如下的代码：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"html\" class=\"EnlighterJSRAW\"\u003e\u0026lt;script type=\u0026#34;text/javascript\u0026#34;\n        src=\u0026#34;https://coolshell.cn/asyncjs/alert.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u003c/pre\u003e\n\u003cp\u003e\u003cspan id=\"more-9749\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e基本上来说，head里的 \u0026lt;script\u0026gt;标签会阻塞后续资源的载入以及整个页面的生成。我专门做了一个示例你可以看看：\u003cstrong\u003e\u003ca href=\"https://coolshell.cn/asyncjs/async_test01.html\" target=\"_blank\"\u003e示例一\u003c/a\u003e\u003c/strong\u003e。 注意：我的alert.js中只有一句话：alert(“hello world”) ，这更容易让你看到javascript是怎么阻塞后面的东西的。\u003c/p\u003e\n\u003cp\u003e所以，你知道为什么有很多网站把javascript放在网页的最后面了，要么就是动用了window.onload或是docmuemt ready之类的事件。\u003c/p\u003e\n\u003cp\u003e另外，因为绝大多数的Javascript代码并不需要等页面，所以，我们异步载入的功能。那么我们怎么异步载入呢？\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"documentwrite%E6%96%B9%E5%BC%8F\"\u003e\u003c/span\u003edocument.write方式\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e于是，你可能以为document.write()这种方式能够解决不阻塞的方式。你当然会觉得，document.write了的\u0026lt;script\u0026gt;标签后就可以执行后面的东西去了，这没错。对于在同一个script标签里的Javascript的代码来说，是这样的，但是对于整个页面来说，这个还是会阻塞。 下面是一段测试代码：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"html\" class=\"EnlighterJSRAW\"\u003e\u0026lt;script type=\u0026#34;text/javascript\u0026#34; language=\u0026#34;javascript\u0026#34;\u0026gt;\n    function loadjs(script_filename) {\n        document.write(\u0026#39;\u0026lt;\u0026#39; + \u0026#39;script language=\u0026#34;javascript\u0026#34; type=\u0026#34;text/javascript\u0026#34;\u0026#39;);\n        document.write(\u0026#39; src=\u0026#34;\u0026#39; + script_filename + \u0026#39;\u0026#34;\u0026gt;\u0026#39;);\n        document.write(\u0026#39;\u0026lt;\u0026#39;+\u0026#39;/script\u0026#39;+\u0026#39;\u0026gt;\u0026#39;);\n        alert(\u0026#34;loadjs() exit...\u0026#34;);\n    }\n\n    var script = \u0026#39;https://coolshell.cn/asyncjs/alert.js\u0026#39;;\n\n    loadjs(script);\n    alert(\u0026#34;loadjs() finished!\u0026#34;);\n\u0026lt;/script\u0026gt;\n\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34; language=\u0026#34;javascript\u0026#34;\u0026gt;\n   alert(\u0026#34;another block\u0026#34;);\n\u0026lt;/script\u0026gt;\u003c/pre\u003e\n\u003cp\u003e你觉得alert的顺序是什么？你可以在不同的浏览器里试一试。这里的想关的测试页面：\u003cstrong\u003e\u003ca href=\"https://coolshell.cn/asyncjs/async_test02.html\" target=\"_blank\"\u003e示例二\u003c/a\u003e\u003c/strong\u003e。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"script%E7%9A%84defer%E5%92%8Casync%E5%B1%9E%E6%80%A7\"\u003e\u003c/span\u003escript的defer和async属性\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003eIE自从IE6就支持defer标签，如：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"html\" class=\"EnlighterJSRAW\"\u003e\u0026lt;script defer type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;./alert.js\u0026#34; \u0026gt;\n\u0026lt;/script\u0026gt;\u003c/pre\u003e\n\u003cp\u003e对于IE来说，这个标签会让IE并行下载js文件，并且把其执行hold到了整个DOM装载完毕（DOMContentLoaded），多个defer的\u0026lt;script\u0026gt;在执行时也会按照其出现的顺序来运行。最重要的是\u0026lt;script\u0026gt;被加上defer后，其不会阻塞后续DOM的的渲染。但是因为这个defer只是IE专用，所以一般用得比较少。\u003c/p\u003e\n\u003cp\u003e而我们标准的的HTML5也加入了一个异步载入javascript的属性：async，无论你对它赋什么样的值，只要它出现，它就开始异步加载js文件。但是， async的异步加载会有一个比较严重的问题，那就是它忠实地践行着“载入后马上执行”这条军规，所以，虽然它并不阻塞页面的渲染，但是你也无法控制他执行的次序和时机。你可以\u003ca href=\"https://coolshell.cn/asyncjs/async_test01.async.html\" target=\"_blank\"\u003e看看这个示例去感受一下\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e支持 async标签的浏览器是：Firefox3.6+，Chrome 8.0+，Safari 5.0+，IE 10+，Opera还不支持（\u003ca href=\"http://caniuse.com/#feat=script-async\" target=\"_blank\"\u003e来自这里\u003c/a\u003e）所以这个方法也不是太好。因为并不是所有的浏览器你都能行。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BADOM%E6%96%B9%E5%BC%8F\"\u003e\u003c/span\u003e动态创建DOM方式\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e这种方式可能是用得最多的了。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003efunction loadjs(script_filename) {\n    var script = document.createElement(\u0026#39;script\u0026#39;);\n    script.setAttribute(\u0026#39;type\u0026#39;, \u0026#39;text/javascript\u0026#39;);\n    script.setAttribute(\u0026#39;src\u0026#39;, script_filename);\n    script.setAttribute(\u0026#39;id\u0026#39;, \u0026#39;coolshell_script_id\u0026#39;);\n\n    script_id = document.getElementById(\u0026#39;coolshell_script_id\u0026#39;);\n    if(script_id){\n        document.getElementsByTagName(\u0026#39;head\u0026#39;)[0].removeChild(script_id);\n    }\n    document.getElementsByTagName(\u0026#39;head\u0026#39;)[0].appendChild(script);\n}\n\nvar script = \u0026#39;https://coolshell.cn/asyncjs/alert.js\u0026#39;;\nloadjs(script);\n\u003c/pre\u003e\n\u003cp\u003e这个方式几乎成了标准的异步载入js文件的方式，这个方式的演示请参看：\u003cstrong\u003e\u003ca href=\"https://coolshell.cn/asyncjs/async_test03.html\" target=\"_blank\"\u003e示例三\u003c/a\u003e\u003c/strong\u003e。这方式还被玩出了JSONP的东东，也就是我可以为script的src指定某个后台的脚本（如PHP），而这个PHP返回一个javascript函数，其参数是一个json的字符串，返回来调用我们的预先定义好的javascript的函数。你可以看一下这个示例：\u003ca href=\"https://coolshell.cn/t.js\" target=\"_blank\"\u003et.js\u003c/a\u003e （这个示例是我之前在微博征集的\u003ca href=\"https://coolshell.cn/t.html\" target=\"_blank\"\u003e一个异步ajax调用的小例子\u003c/a\u003e）\u003cstrong\u003e\u003cbr/\u003e\n\u003c/strong\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%8C%89%E9%9C%80%E5%BC%82%E6%AD%A5%E8%BD%BD%E5%85%A5js\"\u003e\u003c/span\u003e按需异步载入js\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e上面那个DOM方式的例子解决了异步载入Javascript的问题，但是没有解决我们想让他按我们指定的时机运行的问题。所以，我们只需要把上面那个DOM方式绑到某个事件上来就可以了。\u003c/p\u003e\n\u003cp\u003e比如：\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e绑在window.load事件上\u003c/strong\u003e——\u003cstrong\u003e\u003ca href=\"https://coolshell.cn/asyncjs/async_test04.html\" target=\"_blank\"\u003e示例四\u003c/a\u003e \u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003c/strong\u003e你一定要比较一下示例四和示例三在执行上有什么不同，我在这两个示例中都专门用了个代码高亮的javascript，看看那个代码高亮的的脚本的执行和我的alert.js的执行的情况，你就知道不同了）\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003ewindow.load = loadjs(\u0026#34;https://coolshell.cn/asyncjs/alert.js\u0026#34;)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e绑在特定的事件上\u003c/strong\u003e——\u003cstrong\u003e\u003ca href=\"https://coolshell.cn/asyncjs/async_test05.html\" target=\"_blank\"\u003e示例五\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"html\" class=\"EnlighterJSRAW\"\u003e\u0026lt;p style=\u0026#34;cursor: pointer\u0026#34; onclick=\u0026#34;LoadJS()\u0026#34;\u0026gt;Click to load alert.js \u0026lt;/p\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e这个示例很简单了。当你点击某个DOM元素，才会真正载入我们的alert.js。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%9B%B4%E5%A4%9A\"\u003e\u003c/span\u003e更多\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e但是，绑定在某个特定事件上这个事似乎又过了一点，因为只有在点击的时候才会去真正的下载js，这又会太慢了了。好了，到这里，要抛出我们的终极问题——\u003cstrong\u003e我们想要异步地把js文件下载到用户的本地，但是不执行，仅当在我们想要执行的时候去执行\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e要是我们有下面这样的方式就好了：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003evar script = document.createElement(\u0026#34;script\u0026#34;);\nscript.noexecute = true;\nscript.src = \u0026#34;alert.js\u0026#34;;\ndocument.body.appendChild(script);\n\n//后面我们可以这么干\nscript.execute();\u003c/pre\u003e\n\u003cp\u003e可惜的是，这只是一个美丽的梦想，今天我们的Javascript还比较原始，这个“JS梦”还没有实现呢。\u003c/p\u003e\n\u003cp\u003e所以，我们的程序员只能使用hack的方式来搞。\u003c/p\u003e\n\u003cp\u003e有的程序员使用了非标准的script的type来cache javascript。如：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"html\" class=\"EnlighterJSRAW\"\u003e\u0026lt;script type=cache/script src=\u0026#34;./alert.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e因为”cache/script”，这个东西根本就不能被浏览器解析，所以浏览器也就不能把alert.js当javascript去执行，但是他又要去下载js文件，所以就可以搞定了。可惜的是，webkit严格符从了HTML的标准——对于这种不认识的东西，直接删除，什么也不干。于是，我们的梦又破了。\u003c/p\u003e\n\u003cp\u003e所以，我们需要再hack一下，就像N多年前玩preload图片那样，我们可以动用object标签（也可以动用iframe标签），于是我们有下面这样的代码：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003e    function cachejs(script_filename){\n        var cache = document.createElement(\u0026#39;object\u0026#39;);\n        cache.data = script_filename;\n        cache.id = \u0026#34;coolshell_script_cache_id\u0026#34;;\n        cache.width = 0;\n        cache.height = 0;\n        document.body.appendChild(cache);\n    }\u003c/pre\u003e\n\u003cp\u003e然后，我们在的最后调用一下这个函数。请参看一下相关的示例：\u003cstrong\u003e\u003ca href=\"https://coolshell.cn/asyncjs/async_test06.html\" target=\"_blank\"\u003e示例六\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e在Chrome下按 Ctrl+Shit+I，切换到network页，你就可以看到下载了alert.js但是没有执行，然后我们再用示例五的方式，因为浏览器端有缓存了，不会再从服务器上下载alert.js了。所以，就能保证执行速度了。\u003c/p\u003e\n\u003cp\u003e关于这种preload这种东西你应该不会陌生了。你还可以使用Ajax的方式，如：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"js\" class=\"EnlighterJSRAW\"\u003evar xhr = new XMLHttpRequest();\nxhr.open(\u0026#39;GET\u0026#39;, \u0026#39;new.js\u0026#39;);\nxhr.send(\u0026#39;\u0026#39;);\u003c/pre\u003e\n\u003cp\u003e到这里我就不再多说了，也不给示例了，大家可以自己试试去。\u003c/p\u003e\n\u003cp\u003e最后再提两个js，一个是\u003ca href=\"http://stevesouders.com/controljs/\" target=\"_blank\"\u003eControlJS\u003c/a\u003e，一个叫\u003ca href=\"http://headjs.com/\" target=\"_blank\"\u003eHeadJS\u003c/a\u003e，专门用来做异步load javascript文件的。\u003c/p\u003e\n\u003cp\u003e好了，这是所有的内容了，希望大家看过后能对Javascript的载入和执行，以及相关的技术有个了解。\u003cstrong\u003e同时，也希望各前端高手不吝赐教！\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/9666.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/05/Render-Process-150x150.jpg\" alt=\"浏览器的渲染原理简介\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/9666.html\" class=\"wp_rp_title\"\u003e浏览器的渲染原理简介\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8170.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/08/ajax_error-150x150.jpg\" alt=\"一次Ajax查错的经历\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8170.html\" class=\"wp_rp_title\"\u003e一次Ajax查错的经历\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/6043.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/30.jpg\" alt=\"Web开发中需要了解的东西\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/6043.html\" class=\"wp_rp_title\"\u003eWeb开发中需要了解的东西\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/5537.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2011/11/stackparts.com_-150x150.png\" alt=\"一些文章资源和趣闻\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/5537.html\" class=\"wp_rp_title\"\u003e一些文章资源和趣闻\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/4795.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/7.jpg\" alt=\"开源中最好的Web开发的资源\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/4795.html\" class=\"wp_rp_title\"\u003e开源中最好的Web开发的资源\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-9749\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"08e5820a2f\"\u003e\u003cimg id=\"rating_9749_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9749, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-0cd2a035713502ac87895259-=\"\"/\u003e\u003cimg id=\"rating_9749_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9749, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-0cd2a035713502ac87895259-=\"\"/\u003e\u003cimg id=\"rating_9749_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9749, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-0cd2a035713502ac87895259-=\"\"/\u003e\u003cimg id=\"rating_9749_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9749, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-0cd2a035713502ac87895259-=\"\"/\u003e\u003cimg id=\"rating_9749_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(9749, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-0cd2a035713502ac87895259-=\"\"/\u003e (\u003cstrong\u003e66\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.27\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_9749_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"Javascript 装载和执行\"/\u003e\u003cmeta itemprop=\"headline\" content=\"Javascript 装载和执行\"/\u003e\u003cmeta itemprop=\"description\" content=\"一两个月前在淘宝内网里看到一个优化Javascript代码的竞赛，发现有不少的人对Javascript的执行和装载的基础并不懂，所以，从那天起我就想写一篇文章，但一直耽搁了。自上篇《浏览器渲染原理简介》，正好也可以承前启后。\n\n首先，我想说一下Javascript的装载和执行。通常来说，浏览器对于Javascript的运行有两大特性：1）载入后马上执行，2）执行时会阻塞页面后续的内容（包括页面...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2013-06-05T08:31:06+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2013-06-05T23:26:16+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/9749.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/9749.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.27\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"66\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-9749-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2013-06-05T08:31:06+08:00",
  "Author": "陈皓"
}