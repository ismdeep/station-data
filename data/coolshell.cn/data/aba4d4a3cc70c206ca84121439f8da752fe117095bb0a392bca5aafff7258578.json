{
  "Source": "coolshell.cn",
  "Title": "性能测试应该怎么做？",
  "Link": "https://coolshell.cn/articles/17381.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"95acca502e2fff82dbdd083e-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright size-full wp-image-17383\" src=\"https://coolshell.cn/wp-content/uploads/2016/07/PerfTest.png\" alt=\"PerfTest\" width=\"300\" height=\"277\" srcset=\"https://coolshell.cn/wp-content/uploads/2016/07/PerfTest.png 300w, https://coolshell.cn/wp-content/uploads/2016/07/PerfTest-292x270.png 292w\" sizes=\"(max-width: 300px) 100vw, 300px\"/\u003e偶然间看到了阿里中间件\u003ca href=\"http://dubbo.io/User+Guide-zh.htm#UserGuide-zh-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A\" target=\"_blank\"\u003eDubbo的性能测试报告\u003c/a\u003e，我觉得这份性能测试报告让人觉得做这性能测试的人根本不懂性能测试，我觉得这份报告会把大众带沟里去，所以，想写下这篇文章，做一点科普。\u003c/p\u003e\n\u003cp\u003e首先，这份测试报告里的主要问题如下：\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e1）用的全是平均值\u003c/strong\u003e。老实说，平均值是非常不靠谱的。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e2）响应时间没有和吞吐量TPS/QPS挂钩\u003c/strong\u003e。而只是测试了低速率的情况，这是完全错误的。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e3）响应时间和吞吐量没有和成功率挂钩。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-17381\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%B9%B3%E5%9D%87%E5%80%BC%E4%B8%8D%E9%9D%A0%E8%B0%B1\" title=\"为什么平均值不靠谱\"\u003e为什么平均值不靠谱\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%EF%BC%88latency%EF%BC%89%E8%A6%81%E5%92%8C%E5%90%9E%E5%90%90%E9%87%8F%EF%BC%88Thoughput%EF%BC%89%E6%8C%82%E9%92%A9\" title=\"为什么响应时间（latency）要和吞吐量（Thoughput）挂钩\"\u003e为什么响应时间（latency）要和吞吐量（Thoughput）挂钩\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E5%90%9E%E5%90%90%E9%87%8F%E5%92%8C%E6%88%90%E5%8A%9F%E7%8E%87%E8%A6%81%E6%8C%82%E9%92%A9\" title=\"为什么响应时间吞吐量和成功率要挂钩\"\u003e为什么响应时间吞吐量和成功率要挂钩\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E5%A6%82%E4%BD%95%E4%B8%A5%E8%B0%A8%E5%9C%B0%E5%81%9A%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95\" title=\"如何严谨地做性能测试\"\u003e如何严谨地做性能测试\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%B8%BA%E4%BB%80%E4%B9%88%E5%B9%B3%E5%9D%87%E5%80%BC%E4%B8%8D%E9%9D%A0%E8%B0%B1\"\u003e\u003c/span\u003e为什么平均值不靠谱\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e关于平均值为什么不靠谱，我相信大家读新闻的时候经常可以看到，\u003cstrong\u003e平均工资\u003c/strong\u003e，\u003cstrong\u003e平均房价\u003c/strong\u003e，\u003cstrong\u003e平均支出\u003c/strong\u003e，等等这样的字眼，\u003cspan id=\"zoom\" class=\"show_c\"\u003e你就知道为什么平均值不靠谱了。（这些都是数学游戏，对于理工科的同学来说，天生应该有免疫力）\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e软件的性能测试也一样，平均数也是不靠谱的，这里可以参看这篇详细的文章《\u003ca href=\"http://apmblog.dynatrace.com/2012/11/14/why-averages-suck-and-percentiles-are-great/\" target=\"_blank\"\u003eWhy Averages Suck and Percentiles are Great\u003c/a\u003e》，我在这里简单说一下。\u003c/p\u003e\n\u003cp\u003e我们知道，性能测试时，测试得到的结果数据不总是一样的，而是有高有低的，如果算平均值就会出现这样的情况，假如，测试了10次，有9次是1ms，而有1次是1s，那么平均数据就是100ms，很明显，这完全不能反应性能测试的情况，也许那1s的请求就是一个不正常的值，是个噪点，应该去掉。所以，我们会在一些评委打分中看到要去掉一个最高分一个最低分，然后再算平均值。\u003c/p\u003e\n\u003cp\u003e另外，中位数（Mean）可能会比平均数要稍微靠谱一些，所谓中位数的意就是把将一组数据按大小顺序排列，处在最中间位置的一个数叫做这组数据的中位数 ，这意味着至少有50%的数据低于或高于这个中位数。\u003c/p\u003e\n\u003cp\u003e当然，最为正确的统计做法是用百分比分布统计。也就是英文中的TP – Top Percentile ，TP50的意思在，50%的请求都小于某个值，TP90表示90%的请求小于某个时间。\u003c/p\u003e\n\u003cp\u003e比如：我们有一组数据：[ 10ms,  1s, 200ms, 100ms]，我们把其从小到大排个序：[10ms, 100ms, 200ms, 1s]，于是我们知道，TP50，就是50%的请求ceil(4*0.5)=2时间是小于100ms的，TP90就是90%的请求ceil(4*0.9)=4时间小于1s。于是：TP50就是100ms，TP90就是1s。\u003c/p\u003e\n\u003cp\u003e我以前在路透做的金融系统响应时间的性能测试的要求是这样的，\u003cstrong\u003e99.9%的请求必须小于1ms，所有的平均时间必须小于1ms。两个条件的限制。\u003c/strong\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%B8%BA%E4%BB%80%E4%B9%88%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%EF%BC%88latency%EF%BC%89%E8%A6%81%E5%92%8C%E5%90%9E%E5%90%90%E9%87%8F%EF%BC%88Thoughput%EF%BC%89%E6%8C%82%E9%92%A9\"\u003e\u003c/span\u003e为什么响应时间（latency）要和吞吐量（Thoughput）挂钩\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e系统的性能如果只看吞吐量，不看响应时间是没有意义的。我的系统可以顶10万请求，但是响应时间已经到了5秒钟，这样的系统已经不可用了，这样的吞吐量也是没有意义的。\u003c/p\u003e\n\u003cp\u003e我们知道，当并发量（吞吐量）上涨的时候，系统会变得越来越不稳定，响应时间的波动也会越来越大，响应时间也会变得越来越慢，而吞吐率也越来越上不去（如下图所示），包括CPU的使用率情况也会如此。所以，当系统变得不稳定的时候，吞吐量已经没有意义了。吞吐量有意义的时候仅当系统稳定的时候。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-17382\" src=\"https://coolshell.cn/wp-content/uploads/2016/07/BenchmarkOptimalRate.png\" alt=\"BenchmarkOptimalRate\" width=\"535\" height=\"343\" srcset=\"https://coolshell.cn/wp-content/uploads/2016/07/BenchmarkOptimalRate.png 535w, https://coolshell.cn/wp-content/uploads/2016/07/BenchmarkOptimalRate-300x192.png 300w\" sizes=\"(max-width: 535px) 100vw, 535px\"/\u003e\u003c/p\u003e\n\u003cp\u003e所以，\u003cstrong\u003e吞吐量的值必需有响应时间来卡。\u003c/strong\u003e比如：\u003cstrong\u003eTP99小于100ms的时候，系统可以承载的最大并发数是1000qps\u003c/strong\u003e。这意味着，我们要不断的在不同的并发数上测试，以找到软件的最稳定时的最大吞吐量。\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%B8%BA%E4%BB%80%E4%B9%88%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E5%90%9E%E5%90%90%E9%87%8F%E5%92%8C%E6%88%90%E5%8A%9F%E7%8E%87%E8%A6%81%E6%8C%82%E9%92%A9\"\u003e\u003c/span\u003e为什么响应时间吞吐量和成功率要挂钩\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e我们这应该不难理解了，如果请求不成功的话，都还做毛的性能测试。比如，我说我的系统并发可以达到10万，但是失败率是\u003c/p\u003e\n\u003cp\u003e40%，那么，这10万的并发完全就是一个笑话了。\u003c/p\u003e\n\u003cp\u003e性能测试的失败率的容忍应该是非常低的。对于一些关键系统，成功请求数必须在100%，一点都不能含糊。\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%A6%82%E4%BD%95%E4%B8%A5%E8%B0%A8%E5%9C%B0%E5%81%9A%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95\"\u003e\u003c/span\u003e如何严谨地做性能测试\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e一般来说，性能测试要统一考虑这么几个因素：\u003cstrong\u003eThoughput吞吐量\u003c/strong\u003e，\u003cstrong\u003eLatency响应时间\u003c/strong\u003e，\u003cstrong\u003e资源利用\u003c/strong\u003e（CPU/MEM/IO/Bandwidth…），\u003cstrong\u003e成功率\u003c/strong\u003e，\u003cstrong\u003e系统稳定性\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e下面的这些性能测试的方式基本上来源自我的老老东家汤森路透，一家做real-time的金融数据系统的公司。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003e一，你得定义一个系统的响应时间latency，建议是TP99，以及成功率\u003c/strong\u003e。比如路透的定义：99.9%的响应时间必需在1ms之内，平均响应时间在1ms以内，100%的请求成功。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003e二，在这个响应时间的限制下，找到最高的吞吐量\u003c/strong\u003e。测试用的数据，需要有大中小各种尺寸的数据，并可以混合。最好使用生产线上的测试数据。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003e三，在这个吞吐量做Soak Test，比如：使用第二步测试得到的吞吐量连续7天的不间断的压测系统。\u003c/strong\u003e然后收集CPU，内存，硬盘/网络IO，等指标，查看系统是否稳定，比如，CPU是平稳的，内存使用也是平稳的。那么，这个值就是系统的性能\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003e四，找到系统的极限值。比如：在成功率100%的情况下（不考虑响应时间的长短），系统能坚持10分钟的吞吐量。\u003c/strong\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003e五，做Burst Test。用第二步得到的吞吐量执行5分钟，然后在第四步得到的极限值执行1分钟，再回到第二步的吞吐量执行5钟，再到第四步的权限值执行1分钟，如此往复个一段时间，比如2天。\u003c/strong\u003e收集系统数据：CPU、内存、硬盘/网络IO等，观察他们的曲线，以及相应的响应时间，确保系统是稳定的。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003e六、低吞吐量和网络小包的测试。\u003c/strong\u003e有时候，在低吞吐量的时候，可能会导致latency上升，比如TCP_NODELAY的参数没有开启会导致latency上升（详见\u003ca href=\"https://coolshell.cn/articles/11564.html\" target=\"_blank\"\u003eTCP的那些事\u003c/a\u003e），而网络小包会导致带宽用不满也会导致性能上不去，所以，性能测试还需要根据实际情况有选择的测试一下这两咱场景。\u003c/p\u003e\n\u003cp\u003e（注：在路透，路透会用第二步得到的吞吐量乘以66.7%来做为系统的软报警线，80%做为系统的硬报警线，而极限值仅仅用来扛突发的peak）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e是不是很繁锁？是的，只因为，这是工程，工程是一门科学，科学是严谨的。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e欢迎大家也分享一下你们性能测试的经验和方法。\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/22242.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2022/05/etcd-150x150.png\" alt=\"ETCD的内存问题\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/22242.html\" class=\"wp_rp_title\"\u003eETCD的内存问题\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11454.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/17.jpg\" alt=\"从LongAdder看更高效的无锁实现\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11454.html\" class=\"wp_rp_title\"\u003e从LongAdder看更高效的无锁实现\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/10910.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/01/trade-off-150x150.jpg\" alt=\"分布式系统的事务处理\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/10910.html\" class=\"wp_rp_title\"\u003e分布式系统的事务处理\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/9703.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/05/图1-3-150x150.jpg\" alt=\"无锁HashMap的原理与实现\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/9703.html\" class=\"wp_rp_title\"\u003e无锁HashMap的原理与实现\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/9169.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/02/Disruptor-150x150.png\" alt=\"并发框架Disruptor译文\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/9169.html\" class=\"wp_rp_title\"\u003e并发框架Disruptor译文\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8883.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/01/linux-bash-300x225-150x150.jpg\" alt=\"应该知道的Linux技巧\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8883.html\" class=\"wp_rp_title\"\u003e应该知道的Linux技巧\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-17381\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"5f7750d007\"\u003e\u003cimg id=\"rating_17381_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17381, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-95acca502e2fff82dbdd083e-=\"\"/\u003e\u003cimg id=\"rating_17381_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17381, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-95acca502e2fff82dbdd083e-=\"\"/\u003e\u003cimg id=\"rating_17381_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17381, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-95acca502e2fff82dbdd083e-=\"\"/\u003e\u003cimg id=\"rating_17381_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17381, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-95acca502e2fff82dbdd083e-=\"\"/\u003e\u003cimg id=\"rating_17381_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17381, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-95acca502e2fff82dbdd083e-=\"\"/\u003e (\u003cstrong\u003e74\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.54\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_17381_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"性能测试应该怎么做？\"/\u003e\u003cmeta itemprop=\"headline\" content=\"性能测试应该怎么做？\"/\u003e\u003cmeta itemprop=\"description\" content=\"偶然间看到了阿里中间件Dubbo的性能测试报告，我觉得这份性能测试报告让人觉得做这性能测试的人根本不懂性能测试，我觉得这份报告会把大众带沟里去，所以，想写下这篇文章，做一点科普。\n\n首先，这份测试报告里的主要问题如下：\n\n1）用的全是平均值。老实说，平均值是非常不靠谱的。\n\n2）响应时间没有和吞吐量TPS/QPS挂钩。而只是测试了低速率的情况，这是完全错误的。\n\n3）响应时间和吞吐...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2016-07-06T01:03:26+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2016-07-10T15:39:10+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/17381.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/17381.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.54\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"74\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-17381-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2016-07-06T01:03:26+08:00",
  "Author": "陈皓"
}