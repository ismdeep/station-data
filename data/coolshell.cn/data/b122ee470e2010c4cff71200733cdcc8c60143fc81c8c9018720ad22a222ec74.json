{
  "Source": "coolshell.cn",
  "Title": "“另类” 设计模式",
  "Link": "https://coolshell.cn/articles/4844.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"b9855d275961e228b7888e84-text/javascript\"\u003e\u003c/script\u003e下面这篇文章来自这里：\u003ca href=\"http://www.lsd.ic.unicamp.br/~oliva/fun/prog/resign-patterns\" target=\"_blank\"\u003ehttp://www.lsd.ic.unicamp.br/~oliva/fun/prog/resign-patterns\u003c/a\u003e，这篇文章有点意思了，山寨了我们著名的Design Pattern。这篇文章并不是很容易翻译，也许我翻译的不好，大家多指正。另外，这篇文章将失去原有的趣味在于其使用了经典设计模式的单词很相似的单词，一走眼你还以为是正二八经的设计模式。呵呵。所以，我在下文中，我会保留原有的英文单词，并把真正的23个经典设计模式的英文名放在旁边（灰色）。这篇文章和之前的\u003ca title=\"如何写出无法维护的代码\" href=\"https://coolshell.cn/articles/4758.html\" target=\"_blank\"\u003e如何写出无法维护的代码\u003c/a\u003e有异曲同工，个人感觉都是比较欢乐的。\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e \u003c/p\u003e\n\u003cp style=\"text-align: center; font-size: 14pt;\"\u003e\u003cstrong\u003e辞职模式\u003cbr/\u003e\n\u003c/strong\u003e\u003cstrong\u003eResign Patterns\u003cbr/\u003e\n\u003c/strong\u003e\u003cstrong\u003e\u003cspan style=\"color: #cccccc;\"\u003eDesign Patterns\u003c/span\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv style=\"text-align: center;\"\u003e不合式的非面向项目软件开发病症\u003cbr/\u003e\nAilments of Unsuitable Project-Disoriented Software\u003cbr/\u003e\n\u003cspan style=\"color: #cccccc;\"\u003eElements of Reusable Object-Oriented Software\u003c/span\u003e\u003c/div\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\u003cstrong\u003e作者\u003c/strong\u003e：\u003ca href=\"/cdn-cgi/l/email-protection#87eaeef3e2f0e8f5ecc7fee2f5e4e8eaf7e6e9fea9e4e8ea\"\u003eMichael Duell\u003c/a\u003e\u003c/div\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E6%A6%82%E8%A6%81\" title=\"概要\"\u003e概要\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#1_Cremational_Patterns_%E7%81%AB%E8%91%AC%E6%A8%A1%E5%BC%8F_Creational_patterns_%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F\" title=\"1. Cremational Patterns 火葬模式 | Creational patterns 创建模式\"\u003e1. Cremational Patterns 火葬模式 | Creational patterns 创建模式\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#11_Abject_Poverty_%E4%B8%80%E8%B4%AB%E5%A6%82%E6%B4%97_Abstract_Factory_%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82\" title=\"1.1 Abject Poverty  一贫如洗 | Abstract Factory 抽象工厂\"\u003e1.1 Abject Poverty  一贫如洗 | Abstract Factory 抽象工厂\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#12_Blinder_%E7%9C%BC%E7%BD%A9%E6%A8%A1%E5%BC%8F_Builder_%E5%BB%BA%E9%80%A0%E6%A8%A1%E5%BC%8F\" title=\"1.2 Blinder 眼罩模式 | Builder 建造模式\"\u003e1.2 Blinder 眼罩模式 | Builder 建造模式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#13_Fallacy_Method_%E9%94%99%E8%AF%AF%E6%96%B9%E6%B3%95_Factory_method_%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95\" title=\"1.3 Fallacy Method 错误方法 | Factory method 工厂方法\"\u003e1.3 Fallacy Method 错误方法 | Factory method 工厂方法\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#14_ProtoTry_%E5%B0%9D%E8%AF%95%E6%A8%A1%E5%BC%8F_Prototype_%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F\" title=\"1.4 ProtoTry   尝试模式| Prototype 原型模式\"\u003e1.4 ProtoTry   尝试模式| Prototype 原型模式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#15_Simpleton_%E5%82%BB%E7%93%9C%E6%A8%A1%E5%BC%8F_Singleton_%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F\" title=\"1.5 Simpleton 傻瓜模式 | Singleton 单例模式\"\u003e1.5 Simpleton 傻瓜模式 | Singleton 单例模式\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#2_Destructural_Patterns_%E6%97%A0%E7%BB%93%E6%9E%84%E6%A8%A1%E5%BC%8F_Structural_patterns_%E7%BB%93%E6%9E%84%E6%A8%A1%E5%BC%8F\" title=\"2. Destructural Patterns 无结构模式 | Structural patterns  结构模式\"\u003e2. Destructural Patterns 无结构模式 | Structural patterns  结构模式\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-9\" href=\"#21_Adopter_%E9%A2%86%E5%85%BB%E8%80%85%E6%A8%A1%E5%BC%8F_Adapter_%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F\" title=\"2.1 Adopter 领养者模式 | Adapter 适配器模式\"\u003e2.1 Adopter 领养者模式 | Adapter 适配器模式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-10\" href=\"#22_Brig_%E7%9B%91%E7%8B%B1%E6%A8%A1%E5%BC%8F_Bridge_%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F\" title=\"2.2 Brig 监狱模式 | Bridge 桥接模式\"\u003e2.2 Brig 监狱模式 | Bridge 桥接模式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-11\" href=\"#23_Compromise_%E5%A6%A5%E5%8D%8F%E6%A8%A1%E5%BC%8F_Composite_%E5%90%88%E6%88%90%E6%A8%A1%E5%BC%8F\" title=\"2.3 Compromise 妥协模式 | Composite 合成模式\"\u003e2.3 Compromise 妥协模式 | Composite 合成模式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-12\" href=\"#24_Detonator_%E5%9C%B0%E9%9B%B7%E6%A8%A1%E5%BC%8F_Decorator_%E4%BF%AE%E9%A5%B0%E6%A8%A1%E5%BC%8F\" title=\"2.4 Detonator 地雷模式 | Decorator 修饰模式\"\u003e2.4 Detonator 地雷模式 | Decorator 修饰模式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-13\" href=\"#25_Fromage_%E5%B9%B2%E9%85%AA%E6%A8%A1%E5%BC%8F_Facade_%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F\" title=\"2.5 Fromage 干酪模式 | Facade 外观模式\"\u003e2.5 Fromage 干酪模式 | Facade 外观模式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-14\" href=\"#26_Flypaper_%E6%8D%95%E8%9D%87%E7%BA%B8%E6%A8%A1%E5%BC%8F_Flyweight_%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F\" title=\"2.6 Flypaper 捕蝇纸模式 | Flyweight 享元模式\"\u003e2.6 Flypaper 捕蝇纸模式 | Flyweight 享元模式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-15\" href=\"#27_ePoxy_%E6%B2%A5%E6%B8%85%E6%A8%A1%E5%BC%8F_Proxy_%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F\" title=\"2.7 ePoxy 沥清模式 | Proxy 代理模式\"\u003e2.7 ePoxy 沥清模式 | Proxy 代理模式\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-16\" href=\"#3_Misbehavioral_Patterns_%E8%A1%8C%E4%B8%BA%E4%B8%8D%E6%A3%80%E6%A8%A1%E5%BC%8F_Behavioral_Patterns_%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F\" title=\"3. Misbehavioral Patterns 行为不检模式| Behavioral Patterns 行为模式\"\u003e3. Misbehavioral Patterns 行为不检模式| Behavioral Patterns 行为模式\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-17\" href=\"#31_Chain_of_Possibilities_%E5%8F%AF%E8%83%BD%E6%80%A7%E9%93%BE%E6%A8%A1%E5%BC%8F_Chain_of_responsibility_%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F\" title=\"3.1 Chain of Possibilities 可能性链模式 | Chain of responsibility 责任链模式\"\u003e3.1 Chain of Possibilities 可能性链模式 | Chain of responsibility 责任链模式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-18\" href=\"#32_Commando_%E7%AA%81%E5%87%BB%E9%98%9F%E6%A8%A1%E5%BC%8F_Command_%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F\" title=\"3.2 Commando 突击队模式 | Command 命令模式\"\u003e3.2 Commando 突击队模式 | Command 命令模式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-19\" href=\"#33_Intersperser_%E6%95%A3%E5%B8%83%E6%A8%A1%E5%BC%8F_Interpreter_%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F\" title=\"3.3 Intersperser 散布模式| Interpreter 解释器模式\"\u003e3.3 Intersperser 散布模式| Interpreter 解释器模式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-20\" href=\"#34_Instigator_%E7%85%BD%E5%8A%A8%E6%A8%A1%E5%BC%8F_Iterator_%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F\" title=\"3.4 Instigator 煽动模式| Iterator 迭代器模式\"\u003e3.4 Instigator 煽动模式| Iterator 迭代器模式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-21\" href=\"#35_Momentum_%E5%86%B2%E5%87%BB%E6%A8%A1%E5%BC%8F_Memento_%E5%A4%87%E5%BF%98%E6%A8%A1%E5%BC%8F\" title=\"3.5 Momentum 冲击模式| Memento 备忘模式\"\u003e3.5 Momentum 冲击模式| Memento 备忘模式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-22\" href=\"#36_Medicator_%E7%94%A8%E8%8D%AF%E6%A8%A1%E5%BC%8F_Mediator_%E5%AA%92%E4%BB%8B%E6%A8%A1%E5%BC%8F\" title=\"3.6 Medicator 用药模式| Mediator 媒介模式\"\u003e3.6 Medicator 用药模式| Mediator 媒介模式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-23\" href=\"#37_Absolver_%E5%85%8D%E8%B4%A3%E6%A8%A1%E5%BC%8F_Observer_%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\" title=\"3.7 Absolver 免责模式| Observer 观察者模式\"\u003e3.7 Absolver 免责模式| Observer 观察者模式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-24\" href=\"#38_Stake_%E5%88%A9%E5%AE%B3%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F_State_%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F\" title=\"3.8 Stake 利害关系模式 | State 状态模式\"\u003e3.8 Stake 利害关系模式 | State 状态模式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-25\" href=\"#39_Eulogy_%E9%A2%82%E6%AD%8C%E6%A8%A1%E5%BC%8F_Strategy%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F\" title=\"3.9 Eulogy 颂歌模式 | Strategy策略模式\"\u003e3.9 Eulogy 颂歌模式 | Strategy策略模式\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-26\" href=\"#310_Tempest_Method_%E6%9A%B4%E9%A3%8E%E9%9B%A8%E6%A8%A1%E5%BC%8F_Template_Method_%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95\" title=\"3.10 Tempest Method 暴风雨模式| Template Method 模板方法\"\u003e3.10 Tempest Method 暴风雨模式| Template Method 模板方法\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-27\" href=\"#311_Visitor_From_Hell_%E5%9C%B0%E7%8B%B1%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F_Visitor_%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F\" title=\"3.11 Visitor From Hell 地狱访问者模式 | Visitor 访问者模式\"\u003e3.11 Visitor From Hell 地狱访问者模式 | Visitor 访问者模式\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-28\" href=\"#%E5%8F%82%E8%80%83\" title=\"参考\"\u003e参考\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%A6%82%E8%A6%81\"\u003e\u003c/span\u003e\u003cstrong\u003e概要\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cdiv style=\"text-align: justify;\"\u003e任何一个熟悉那本由四个人写的经典的设计模式书的朋友，应该知道那本书里的模式都是非常优雅和划时代的。然而，不幸的是，从那些老代码中无法提练出这些模式，因为，在出现这些模式前，大家都不会使用模式。因此，这项工作是从大量的代码中提练出一个模式的目录。这些模式都有充足和永恒的示例。希望你能享受阅读这些模式，但千万不要模仿并使用他们！\u003c/div\u003e\n\u003ch4 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"1_Cremational_Patterns_%E7%81%AB%E8%91%AC%E6%A8%A1%E5%BC%8F_Creational_patterns_%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e1. Cremational Patterns 火葬模式 | \u003cspan style=\"color: #999999;\"\u003eCreational patterns 创建模式\u003c/span\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cdiv style=\"text-align: left;\"\u003e下面是五个 cremational patterns.\u003c/div\u003e\n\u003ch5 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"11_Abject_Poverty_%E4%B8%80%E8%B4%AB%E5%A6%82%E6%B4%97_Abstract_Factory_%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82\"\u003e\u003c/span\u003e\u003cstrong\u003e1.1 Abject Poverty  一贫如洗 | \u003cspan style=\"color: #999999;\"\u003eAbstract Factory 抽象工厂\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eAbject Poverty 模式能让你的软件相当难测试和维护， 并且需要巨大的财政支出，预算已经完全赤字。\u003c/p\u003e\n\u003ch5 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"12_Blinder_%E7%9C%BC%E7%BD%A9%E6%A8%A1%E5%BC%8F_Builder_%E5%BB%BA%E9%80%A0%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e1.2 Blinder 眼罩模式 | \u003cspan style=\"color: #999999;\"\u003eBuilder 建造模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eBlinder 模式是一个应急有效的解决方案，其不需要考虑需求在未来的变化。目前，我们还不太清楚我们为什么叫Blinder模式，一种说法是他们会在写代码的时候被设计人员戴上眼罩，另一种说法是他们希望在维护代码的时候挖出双眼。\u003c/p\u003e\n\u003ch5 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"13_Fallacy_Method_%E9%94%99%E8%AF%AF%E6%96%B9%E6%B3%95_Factory_method_%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95\"\u003e\u003c/span\u003e\u003cstrong\u003e1.3 Fallacy Method 错误方法 | \u003cspan style=\"color: #999999;\"\u003eFactory method 工厂方法\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eFallacy方法主要是在于处理一些不明显的案例。代码逻辑看上去是正确的，当只要某想要去测试一下，或是某个不明显的案例发生了，那些代码中的错误也就出现了。\u003c/p\u003e\n\u003cp style=\"text-align: justify;\"\u003e\u003cspan id=\"more-4844\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003ch5 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"14_ProtoTry_%E5%B0%9D%E8%AF%95%E6%A8%A1%E5%BC%8F_Prototype_%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e1.4 ProtoTry   尝试模式| \u003cspan style=\"color: #999999;\"\u003ePrototype 原型模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eProtoTry 模式一个快速而肮脏的软件开发工作模型的尝试。这个模式的原意本来是想在后面有时间总结一下教训并改进或重写这些代码，但是可惜的是没有时间。所以，这些代码也就成了众所周知的 legacy code – 旧代码。\u003c/p\u003e\n\u003ch5 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"15_Simpleton_%E5%82%BB%E7%93%9C%E6%A8%A1%E5%BC%8F_Singleton_%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e1.5 Simpleton 傻瓜模式 |\u003cspan style=\"color: #999999;\"\u003e Singleton 单例模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eSimpleton 模式，是把一个终极复杂的模式用于那些最最没有价值的工作上。这个模式精确地指出了人员的能力程度。\u003c/p\u003e\n\u003cp style=\"text-align: justify;\"\u003e \u003c/p\u003e\n\u003ch4 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"2_Destructural_Patterns_%E6%97%A0%E7%BB%93%E6%9E%84%E6%A8%A1%E5%BC%8F_Structural_patterns_%E7%BB%93%E6%9E%84%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e2. Destructural Patterns 无结构模式 | \u003c/strong\u003e\u003cspan style=\"color: #999999;\"\u003eStructural patterns  结构模式\u003c/span\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp style=\"text-align: left;\"\u003e下面是七个经典的变性模式\u003c/p\u003e\n\u003ch5 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"21_Adopter_%E9%A2%86%E5%85%BB%E8%80%85%E6%A8%A1%E5%BC%8F_Adapter_%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e2.1 Adopter 领养者模式 |\u003cspan style=\"color: #999999;\"\u003e Adapter 适配器模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eAdopter模式提供了一个给那些“孤儿函数”的家。这这些函数和整个大家族别的函数看上去一点也不一样，他们和整个家族的唯一联系就是通过我们的Adopter。\u003c/p\u003e\n\u003ch5 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"22_Brig_%E7%9B%91%E7%8B%B1%E6%A8%A1%E5%BC%8F_Bridge_%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e2.2 Brig 监狱模式 | \u003cspan style=\"color: #999999;\"\u003eBridge 桥接模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: left;\"\u003eBrig 模式也就是那些坏代码的容器类。这就是众所周知的软件模块。\u003c/p\u003e\n\u003ch5 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"23_Compromise_%E5%A6%A5%E5%8D%8F%E6%A8%A1%E5%BC%8F_Composite_%E5%90%88%E6%88%90%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e2.3 Compromise 妥协模式 | \u003cspan style=\"color: #999999;\"\u003eComposite 合成模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eCompromise 模式主要用来平衡软件开发的工期和质量。 使用这个模式的结果是——劣质的软件 + 延误的工期。\u003c/p\u003e\n\u003ch5 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"24_Detonator_%E5%9C%B0%E9%9B%B7%E6%A8%A1%E5%BC%8F_Decorator_%E4%BF%AE%E9%A5%B0%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e2.4 Detonator 地雷模式 | \u003cspan style=\"color: #999999;\"\u003eDecorator 修饰模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eDetonator 模式是极其普通的，在程序中放置一些不易查觉的地雷。一个常见的经典示例是只用两位数来表示年份。这个炸弹已经暴露出来了，并在那等着爆炸！（陈皓注：作者这里说的是千年虫问题，本文写在1997年）\u003c/p\u003e\n\u003ch5 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"25_Fromage_%E5%B9%B2%E9%85%AA%E6%A8%A1%E5%BC%8F_Facade_%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e2.5 Fromage 干酪模式 | \u003cspan style=\"color: #999999;\"\u003eFacade 外观模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eFromage 模式让软件看上去满是漏洞。 Fromage 模式让我们的软件像Cheesy（芝士，也有劣质的意思）一样，有大量的奇淫巧技让你的软件没有任何一点可移值性。这个模式和奶酪一样，越是老越是香啊。\u003c/p\u003e\n\u003ch5 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"26_Flypaper_%E6%8D%95%E8%9D%87%E7%BA%B8%E6%A8%A1%E5%BC%8F_Flyweight_%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e2.6 Flypaper 捕蝇纸模式 | \u003cspan style=\"color: #999999;\"\u003eFlyweight 享元模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eFlypaper 模式的意思是，代码是由设计的人完成，而由另一个人维护。维护着这个模式的那个写代码的人发现自己被粘住了，而且很有可能在软件失支控制前夭折。\u003c/p\u003e\n\u003ch5 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"27_ePoxy_%E6%B2%A5%E6%B8%85%E6%A8%A1%E5%BC%8F_Proxy_%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e2.7 ePoxy 沥清模式 |\u003cspan style=\"color: #999999;\"\u003e Proxy 代理模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eePoxy 模式主旨把软件的模式紧密地耦合在一起。随着耦合模块的增加，我们就可以看到沾粘它们的沥清。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"3_Misbehavioral_Patterns_%E8%A1%8C%E4%B8%BA%E4%B8%8D%E6%A3%80%E6%A8%A1%E5%BC%8F_Behavioral_Patterns_%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e3. Misbehavioral Patterns 行为不检模式| Behavioral Patterns 行为模式\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e下面是11个行为不检点模式\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"31_Chain_of_Possibilities_%E5%8F%AF%E8%83%BD%E6%80%A7%E9%93%BE%E6%A8%A1%E5%BC%8F_Chain_of_responsibility_%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e3.1 Chain of Possibilities 可能性链模式 | \u003cspan style=\"color: #999999;\"\u003eChain of responsibility 责任链模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eChain of Possibilities 模式主旨是创造肥大的，拙劣文档的软件模块。没有人知道其功能有多宽泛，其可能性永无止境。也就是我们所说的——无确定性。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"32_Commando_%E7%AA%81%E5%87%BB%E9%98%9F%E6%A8%A1%E5%BC%8F_Command_%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e3.2 Commando 突击队模式 | \u003cspan style=\"color: #999999;\"\u003eCommand 命令模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eCommando 模式主旨是用来应付工作，让事情快点完成。这个模式不管封装，只图快快把代码写完。反正不犯法。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"33_Intersperser_%E6%95%A3%E5%B8%83%E6%A8%A1%E5%BC%8F_Interpreter_%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e3.3 Intersperser 散布模式| \u003cspan style=\"color: #999999;\"\u003eInterpreter 解释器模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eIntersperser 模式把一个功能的代码散布在系统的各个地方，其可以让功能无法被测试，修改，以及让人读懂。(陈皓注：这让我想起了以前VB，PB和Delphi的开发，功能的逻辑代码散步在各个组件的不同事件中)\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"34_Instigator_%E7%85%BD%E5%8A%A8%E6%A8%A1%E5%BC%8F_Iterator_%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e3.4 Instigator 煽动模式| \u003cspan style=\"color: #999999;\"\u003eIterator 迭代器模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003eInstigator 模式看上去是良性的，但是其却大规模的以暴力的方式在破坏软件系统。（陈皓注：作者没有做过多的解释，不过，我想到了\u003ca title=\"Windows编程革命简史\" href=\"https://coolshell.cn/articles/3008.html\" target=\"_blank\"\u003eWindows编程革命史\u003c/a\u003e，应该说的就是这个吧）\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"35_Momentum_%E5%86%B2%E5%87%BB%E6%A8%A1%E5%BC%8F_Memento_%E5%A4%87%E5%BF%98%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e3.5 Momentum 冲击模式| \u003cspan style=\"color: #999999;\"\u003eMemento 备忘模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eMomentum模式让软件大小，内存，CPU，和复杂度成极数级成长。（陈皓注：作者对此没做过多解释，这个特性很像Windows操作系统，每个Windows 的新版本，无论是在尺寸，内存和CPU要求上，和复杂度上都会比上一版有极数级的提高）\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"36_Medicator_%E7%94%A8%E8%8D%AF%E6%A8%A1%E5%BC%8F_Mediator_%E5%AA%92%E4%BB%8B%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e3.6 Medicator 用药模式|\u003cspan style=\"color: #999999;\"\u003e Mediator 媒介模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003eMedicator 模式是一个实时的屠夫一样，其把其它的系统搞得就像被打过强力镇静剂一样没有反应。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"37_Absolver_%E5%85%8D%E8%B4%A3%E6%A8%A1%E5%BC%8F_Observer_%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e3.7 Absolver 免责模式| \u003cspan style=\"color: #999999;\"\u003eObserver 观察者模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eAbsolver模式表现于那些被以前员工开发的代码的问题。对于现任员工，其可以因为很多代码里历史上的问题而免除被批评，其声称其对软件中的任何问题都不负责。这也是我们从所周知的——“这不是我的代码”。（参看：\u003ca title=\"程序员惯用的解释(Top 25)\" href=\"https://coolshell.cn/articles/1174.html\" target=\"_blank\"\u003e程序员的借口\u003c/a\u003e）\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"38_Stake_%E5%88%A9%E5%AE%B3%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F_State_%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e3.8 Stake 利害关系模式 | \u003cspan style=\"color: #999999;\"\u003eState 状态模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eStake 模式表现于那些被现已成为经理的人写的代码中的各种问题。虽然这些问题很不爽，但是经理们在这个软件里的利害关系太高了，所以，不能让任何人重写，因为这代表着我们经理的技术成就。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"39_Eulogy_%E9%A2%82%E6%AD%8C%E6%A8%A1%E5%BC%8F_Strategy%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e3.9 Eulogy 颂歌模式 | \u003cspan style=\"color: #999999;\"\u003eStrategy策略模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eEulogy 模式存在于所有的项目中，也就是 Post-Mortem(事后总结分析会)。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"310_Tempest_Method_%E6%9A%B4%E9%A3%8E%E9%9B%A8%E6%A8%A1%E5%BC%8F_Template_Method_%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95\"\u003e\u003c/span\u003e\u003cstrong\u003e3.10 Tempest Method 暴风雨模式| \u003cspan style=\"color: #999999;\"\u003eTemplate Method 模板方法\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eTempest Method 主要用在软件快要发布的最后几天。这个模式的物征是，代码中没有注释，并有使用了好几个Detonator Pattern 地雷模式。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"311_Visitor_From_Hell_%E5%9C%B0%E7%8B%B1%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F_Visitor_%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F\"\u003e\u003c/span\u003e\u003cstrong\u003e3.11 Visitor From Hell 地狱访问者模式 | \u003cspan style=\"color: #999999;\"\u003eVisitor 访问者模式\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp style=\"text-align: justify;\"\u003eVisitor From Hell 模式一般是在运行时没有检查数组越界的一个巧合。这样一来，我们系统就可以实现Visitor From Hell 模式，因为这样可以造成重要数据的重写。\u003c/p\u003e\n\u003ch4 style=\"text-align: left;\"\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%8F%82%E8%80%83\"\u003e\u003c/span\u003e\u003cspan style=\"font-size: x-small;\"\u003e参考\u003c/span\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style=\"font-size: x-small;\"\u003e[1] Gamma, E., Helm, R., Johnson, R., Vlissides, J., Design Patterns – \u003c/span\u003e\u003cspan style=\"font-size: x-small;\"\u003eElements of Reusable Object-Oriented Software. Addison-Wesley, 1995.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style=\"font-size: x-small;\"\u003e[2] Michael Duell is an Engineer at AG Communication Systems, where his \u003c/span\u003e\u003cspan style=\"font-size: x-small;\"\u003eResign Patterns have been rejected in favor of the Gang \u003c/span\u003e\u003cspan style=\"font-size: x-small;\"\u003eof Four Design Patterns.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style=\"font-size: x-small;\"\u003e[3] “Resign Patterns: Ailments of Unsuitable Project-Disoriented Software,” \u003c/span\u003e\u003cspan style=\"font-size: x-small;\"\u003eThe Software Practitioner, Vol. 7, No. 3, May-June 1997, p. 14.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp style=\"text-align: left;\"\u003e\u003cspan style=\"font-size: x-small;\"\u003e \u003c/span\u003e\u003c/p\u003e\n\u003cp style=\"text-align: left;\"\u003e\u003cspan style=\"font-size: x-small;\"\u003e \u003c/span\u003e\u003c/p\u003e\n\u003cdiv style=\"text-align: left;\"\u003e\u003cspan style=\"font-size: x-small;\"\u003e（全文完）\u003c/span\u003e\u003c/div\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/9949.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/07/inverted-bookshelf_thumb-150x150.jpg\" alt=\"IoC/DIP其实是一种管理思想\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/9949.html\" class=\"wp_rp_title\"\u003eIoC/DIP其实是一种管理思想\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/22298.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2022/10/communication-150x150.png\" alt=\"聊聊团队协同和协同工具\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/22298.html\" class=\"wp_rp_title\"\u003e聊聊团队协同和协同工具\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/22173.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2022/02/http_method-150x150.png\" alt=\"“一把梭：REST API 全用 POST”\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/22173.html\" class=\"wp_rp_title\"\u003e“一把梭：REST API 全用 POST”\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/22157.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2022/02/monitoring-150x150.jpeg\" alt=\"谈谈公司对员工的监控\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/22157.html\" class=\"wp_rp_title\"\u003e谈谈公司对员工的监控\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21589.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2021/07/knowledge_sharing-300x169-1-150x150.jpeg\" alt=\"如何做一个有质量的技术分享\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21589.html\" class=\"wp_rp_title\"\u003e如何做一个有质量的技术分享\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/20977.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/08/programmer.01-e1596792460687-150x150.png\" alt=\"程序员如何把控自己的职业\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/20977.html\" class=\"wp_rp_title\"\u003e程序员如何把控自己的职业\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-4844\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"a7c94a9f8d\"\u003e\u003cimg id=\"rating_4844_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4844, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.8, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b9855d275961e228b7888e84-=\"\"/\u003e\u003cimg id=\"rating_4844_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4844, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.8, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b9855d275961e228b7888e84-=\"\"/\u003e\u003cimg id=\"rating_4844_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4844, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.8, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b9855d275961e228b7888e84-=\"\"/\u003e\u003cimg id=\"rating_4844_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4844, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.8, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b9855d275961e228b7888e84-=\"\"/\u003e\u003cimg id=\"rating_4844_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(4844, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.8, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-b9855d275961e228b7888e84-=\"\"/\u003e (\u003cstrong\u003e19\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e3.84\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_4844_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"“另类” 设计模式\"/\u003e\u003cmeta itemprop=\"headline\" content=\"“另类” 设计模式\"/\u003e\u003cmeta itemprop=\"description\" content=\"下面这篇文章来自这里：http://www.lsd.ic.unicamp.br/~oliva/fun/prog/resign-patterns，这篇文章有点意思了，山寨了我们著名的Design Pattern。这篇文章并不是很容易翻译，也许我翻译的不好，大家多指正。另外，这篇文章将失去原有的趣味在于其使用了经典设计模式的单词很相似的单词，一走眼你还以为是正二八经的设计模式。呵呵。所以，我在下文中，...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2011-06-16T08:46:28+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2011-06-16T01:22:24+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/4844.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/4844.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"3.84\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"19\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-4844-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2011-06-16T08:46:28+08:00",
  "Author": "陈皓"
}