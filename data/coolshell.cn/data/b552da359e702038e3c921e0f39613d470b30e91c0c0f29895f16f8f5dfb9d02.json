{
  "Source": "coolshell.cn",
  "Title": "C++11的Lambda使用一例：华容道求解",
  "Link": "https://coolshell.cn/articles/10476.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"be02d5deae83d8ac3a124875-text/javascript\"\u003e\u003c/script\u003e\u003cstrong\u003e（感谢网友 \u003ca href=\"http://weibo.com/u/1701018393?source=webim\" target=\"_blank\"\u003e\u003cimg decoding=\"async\" alt=\"\" src=\"http://tp2.sinaimg.cn/1701018393/50/1297990315/1\"/\u003e\u003c/a\u003e\u003ca title=\"bnu_chenshuo\" href=\"http://weibo.com/u/1701018393?source=webim\" target=\"_blank\"\u003e @bnu_chenshuo \u003c/a\u003e投稿）\u003c/strong\u003e\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"wp-image-10490 alignright\" alt=\"\" src=\"https://coolshell.cn/wp-content/uploads/2013/10/huarong.png\" width=\"365\" height=\"227\" srcset=\"https://coolshell.cn/wp-content/uploads/2013/10/huarong.png 522w, https://coolshell.cn/wp-content/uploads/2013/10/huarong-300x186.png 300w, https://coolshell.cn/wp-content/uploads/2013/10/huarong-435x270.png 435w\" sizes=\"(max-width: 365px) 100vw, 365px\"/\u003e\u003c/p\u003e\n\u003cp\u003e华容道是一个有益的智力游戏，游戏规则不再赘述。用计算机求解华容道也是一道不错的编程练习题，为了寻求最少步数，求解程序一般用广度优先搜索算法。华容道的一种常见开局如图 1 所示。\u003c/p\u003e\n\u003cp\u003e广度优先搜索算法求解华容道的基本步骤：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e准备两个“全局变量”，队列 Q 和和集合 S，S 代表“已知局面”。初时 Q 和 S 皆为空。\u003c/li\u003e\n\u003cli\u003e将初始局面加入队列 Q 的末尾，并将初始局面设为已知。\u003c/li\u003e\n\u003cli\u003e当队列不为空时，从 Q 的队首取出当前局面 \u003ccode\u003ecurr\u003c/code\u003e。如果队列为空则结束搜索，表明无解。\u003c/li\u003e\n\u003cli\u003e如果 \u003ccode\u003ecurr\u003c/code\u003e 是最终局面（曹操位于门口，图 2），则结束搜索，否则继续到第 5 步。\u003c/li\u003e\n\u003cli\u003e考虑 \u003ccode\u003ecurr\u003c/code\u003e 中每个可以移动的棋子，试着上下左右移动一步，得到新局面 \u003ccode\u003enext\u003c/code\u003e，如果新局面未知（\u003ccode\u003enext\u003c/code\u003e ∉ S），则把它加入队列 Q，并设为已知。这一步可能产生多个新局面。\u003c/li\u003e\n\u003cli\u003e回到第2步。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e其中“局面已知”并不要求每个棋子的位置相同，而是指棋子的投影的形状相同（代码中用 mask 表示），例如交换图 1 中的张飞和赵云并不产生新局面，这一规定可以大大缩小搜索空间。\u003c/p\u003e\n\u003cp\u003e以上步骤很容易转换为 C++ 代码，这篇文章重点关注的是第 5 步的实现。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-10476\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"cpp\" class=\"EnlighterJSRAW\"\u003e// 第 1 步\nstd::unordered_set\u0026lt;Mask\u0026gt; seen;\nstd::deque\u0026lt;State\u0026gt; queue;\n\n// 第 2 步\nState initial;\n// 填入 initial，略。\nqueue.push_back(initial);\nseen.insert(initial.toMask());\n\n// 第 3 步\nwhile (!queue.empty())\n{\n  const State curr = queue.front();\n  queue.pop_front();\n\n  // 第 4 步\n  if (curr.isSolved())\n    break;\n\n  // 第 5 步\n  for (const State\u0026amp; next : curr.moves())\n  {\n    auto result = seen.insert(next.toMask());\n    if (result.second)\n      queue.push_back(next);\n  }\n}\u003c/pre\u003e\n\u003cp\u003e在以上原始实现中，\u003ccode\u003ecurr.move()\u003c/code\u003e 将返回一个 \u003ccode\u003estd::vector\u0026lt;State\u0026gt;\u003c/code\u003e 临时对象。一种节省开销的办法是准备一个 \u003ccode\u003estd::vector\u0026lt;State\u0026gt;\u003c/code\u003e “涂改变量”，让 \u003ccode\u003ecurr.move()\u003c/code\u003e 反复修改它，比如改成：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"cpp\" class=\"EnlighterJSRAW\"\u003e// 第 1 步新增一个 scratch 变量\nstd::vector\u0026lt;State\u0026gt; nextMoves;\n\n// 第 3 步\nwhile (!queue.empty())\n{\n  // ...\n  // 第 5 步\n  curr.fillMoves(\u0026amp;nextMoves);\n  for (const State\u0026amp; next : nextMoves)\n  { /* 略 */ }\n}\u003c/pre\u003e\n\u003cp\u003e还有一种彻底不用这个 \u003ccode\u003estd::vector\u0026lt;State\u0026gt;\u003c/code\u003e 的办法，把一部分逻辑以 lambda 的形式传给 \u003ccode\u003ecurr.move()\u003c/code\u003e，代码的结构基本不变：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"cpp\" class=\"EnlighterJSRAW\"\u003e// 第 3 步\nwhile (!queue.empty())\n{\n  // ...\n  // 第 5 步\n  curr.move([\u0026amp;seen, \u0026amp;queue](const State\u0026amp; next) {\n    auto result = seen.insert(next.toMask());\n    if (result.second)\n      queue.push_back(next);\n  });\n}\u003c/pre\u003e\n\u003cp\u003e这样一来，主程序的逻辑依然清晰，不必要的开销也降到了最小。\u003c/p\u003e\n\u003cp\u003e在我最早的实现中，\u003ccode\u003ecurr.move()\u003c/code\u003e 的参数是 \u003ccode\u003econst std::function\u0026lt;void(const State\u0026amp;)\u0026gt; \u0026amp;\u003c/code\u003e，但是我发现这里每次构造 \u003ccode\u003estd::function\u0026lt;void(const State\u0026amp;)\u0026gt;\u003c/code\u003e 对象都会分配一次内存，似乎有些不值。因此在现在的实现中 \u003ccode\u003ecurr.move()\u003c/code\u003e 是个函数模板，这样就能自动匹配lambda参数（通常是个 struct 对象），省去了 \u003ccode\u003estd::function\u003c/code\u003e的内存分配。\u003c/p\u003e\n\u003cp\u003e本文完整的代码见 \u003ca href=\"https://github.com/chenshuo/recipes/blob/master/puzzle/huarong.cc\"\u003ehttps://github.com/chenshuo/recipes/…/puzzle/huarong.cc\u003c/a\u003e，需用 GCC 4.7 编译，求解图 1 的题目的耗时约几十毫秒。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e练习：\u003c/strong\u003e修改程序，打印每一步移动棋子的情况。\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/22422.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2023/05/monolith.microservices-150x150.png\" alt=\"是微服务架构不香还是云不香？\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/22422.html\" class=\"wp_rp_title\"\u003e是微服务架构不香还是云不香？\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/03/rust-social-wide-150x150.jpg\" alt=\"Rust语言的编程范式\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_title\"\u003eRust语言的编程范式\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/07/api-design-300x278-2-150x150.jpg\" alt=\"API设计原则 – Qt官网的设计实践总结\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_title\"\u003eAPI设计原则 – Qt官网的设计实践总结\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"Leetcode 编程训练\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_title\"\u003eLeetcode 编程训练\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12012.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/10/edsm-150x150.gif\" alt=\"State Threads 回调终结者\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12012.html\" class=\"wp_rp_title\"\u003eState Threads 回调终结者\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-10476\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"e67ae982b0\"\u003e\u003cimg id=\"rating_10476_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10476, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3, 3, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-be02d5deae83d8ac3a124875-=\"\"/\u003e\u003cimg id=\"rating_10476_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10476, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3, 3, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-be02d5deae83d8ac3a124875-=\"\"/\u003e\u003cimg id=\"rating_10476_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10476, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3, 3, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-be02d5deae83d8ac3a124875-=\"\"/\u003e\u003cimg id=\"rating_10476_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10476, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3, 3, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-be02d5deae83d8ac3a124875-=\"\"/\u003e\u003cimg id=\"rating_10476_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10476, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3, 3, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-be02d5deae83d8ac3a124875-=\"\"/\u003e (\u003cstrong\u003e20\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e2.95\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_10476_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"C++11的Lambda使用一例：华容道求解\"/\u003e\u003cmeta itemprop=\"headline\" content=\"C++11的Lambda使用一例：华容道求解\"/\u003e\u003cmeta itemprop=\"description\" content=\"（感谢网友  @bnu_chenshuo 投稿）\n\n华容道是一个有益的智力游戏，游戏规则不再赘述。用计算机求解华容道也是一道不错的编程练习题，为了寻求最少步数，求解程序一般用广度优先搜索算法。华容道的一种常见开局如图 1 所示。\n\n广度优先搜索算法求解华容道的基本步骤：\n\n\t准备两个“全局变量”，队列 Q 和和集合 S，S 代表“已知局面”。初时 Q 和 S 皆为空。\n\t将初始局面加...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2013-10-09T15:50:21+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2013-10-09T15:50:31+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/10476.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"Solstice\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/10476.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"2.95\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"20\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-10476-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2013-10-09T15:50:21+08:00",
  "Author": "Solstice"
}