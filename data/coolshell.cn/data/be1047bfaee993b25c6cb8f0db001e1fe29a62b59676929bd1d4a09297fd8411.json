{
  "Source": "coolshell.cn",
  "Title": "从Gitlab误删除数据库想到的",
  "Link": "https://coolshell.cn/articles/17680.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"a1b5a6f1dae52112a477b034-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright wp-image-17685\" src=\"https://coolshell.cn/wp-content/uploads/2017/02/gitlab-600.jpg\" width=\"300\" height=\"215\" srcset=\"https://coolshell.cn/wp-content/uploads/2017/02/gitlab-600.jpg 439w, https://coolshell.cn/wp-content/uploads/2017/02/gitlab-600-300x215.jpg 300w, https://coolshell.cn/wp-content/uploads/2017/02/gitlab-600-377x270.jpg 377w\" sizes=\"(max-width: 300px) 100vw, 300px\"/\u003e昨天，Gitlab.com发生了一个大事，某同学误删了数据库，这个事看似是个低级错误，不过，因为Gitlab把整个过程的细节都全部暴露出来了，所以，可以看到很多东西，而对于类似这样的事情，我自己以前也干过，而在最近的两公司中我也见过（Amazon中见过一次，阿里中见过至少四次），正好通过这个事来说说一下自己的一些感想和观点吧。\u003cstrong\u003e我先放个观点：你觉得有备份系统就不会丢数据了吗？\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E4%BA%8B%E4%BB%B6%E5%9B%9E%E9%A1%BE\" title=\"事件回顾\"\u003e事件回顾\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E7%9B%B8%E5%85%B3%E7%9A%84%E6%80%9D%E8%80%83\" title=\"相关的思考\"\u003e相关的思考\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E6%8A%80%E6%9C%AF%E6%96%B9%E9%9D%A2\" title=\"技术方面\"\u003e技术方面\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E5%85%B3%E4%BA%8E%E5%A4%87%E4%BB%BD\" title=\"关于备份\"\u003e关于备份\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E9%9D%9E%E6%8A%80%E6%9C%AF%E6%96%B9%E9%9D%A2\" title=\"非技术方面\"\u003e非技术方面\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%BA%8B%E4%BB%B6%E5%9B%9E%E9%A1%BE\"\u003e\u003c/span\u003e事件回顾\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e整个事件的回顾Gitlab.com在第一时间就放到了\u003ca href=\"https://docs.google.com/document/d/1GCK53YDcBWQveod9kfzW-VCxIABGiryG7_z_6jHdVik/pub\" target=\"_blank\"\u003eGoogle Doc上\u003c/a\u003e，事后，又发了\u003ca href=\"https://about.gitlab.com/2017/02/01/gitlab-dot-com-database-incident/\" target=\"_blank\"\u003e一篇Blog\u003c/a\u003e来说明这个事，在这里，我简单的回顾一下这个事件的过程。\u003c/p\u003e\n\u003cp\u003e首先，一个叫YP的同学在给gitlab的线上数据库做一些负载均衡的工作，在做这个工作时的时候突发了一个情况，Gitlab被DDoS攻击，数据库的使用飙高，在block完攻击者的IP后，发现有个staging的数据库(db2.staging)已经落后生产库4GB的数据，于是YP同学在Fix这个staging库的同步问题的时候，发现db2.staging有各种问题都和主库无法同步，在这个时候，YP同学已经工作的很晚了，在尝试过多个方法后，发现db2.staging都hang在那里，无法同步，于是他想把db2.staging的数据库删除了，这样全新启动一个新的复制，结果呢，删除数据库的命令错误的敲在了生产环境上（db1.cluster），结果导致整个生产数据库被误删除。（\u003cstrong\u003e陈皓注：这个失败基本上就是 “工作时间过长” + “在多数终端窗口中切换中迷失掉了”\u003c/strong\u003e）\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-17680\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e在恢复的过程中，他们发现只有db1.staging的数据库可以用于恢复，而其它的5种备份机制都不可用，第一个是数据库的同步，没有同步webhook，第二个是对硬盘的快照，没有对数据库做，第三个是用pg_dump的备份，发现版本不对（用9.2的版本去dump 9.6的数据）导致没有dump出数据，第四个S3的备份，完全没有备份上，第五个是相关的备份流程是问题百出的，只有几个粗糙的人肉的脚本和糟糕的文档，也就是说，不但是是人肉的，而且还是完全不可执行的。（\u003cstrong\u003e陈皓注：就算是这些备份机制都work，其实也有问题，因为这些备份大多数基本上都是24小时干一次，所以，要从这些备份恢复也一定是是要丢数据的了，只有第一个数据库同步才会实时一些\u003c/strong\u003e）\u003c/p\u003e\n\u003cp\u003e最终，gitlab从db1.staging上把6个小时前的数据copy回来，结果发现速度非常的慢，备份结点只有60Mbits/S，拷了很长时间（\u003cstrong\u003e陈皓注：为什么不把db1.staging给直接变成生产机？因为那台机器的性能很差\u003c/strong\u003e）。数据现在的恢复了，不过，因为恢复的数据是6小时前的，所以，有如下的数据丢失掉了：\u003c/p\u003e\n\u003cul class=\"ul1\"\u003e\n\u003cli class=\"li1\"\u003e\u003cspan class=\"s2\"\u003e粗略估计，有4613 的项目， 74 forks,  和 350 imports 丢失了；但是，因为Git仓库还在，所以，可以从Git仓库反向推导数据库中的数据，但是，项目中的issues等就完全丢失了。\u003c/span\u003e\u003c/li\u003e\n\u003cli class=\"li1\"\u003e\u003cspan class=\"s2\"\u003e大约有±4979 提交记录丢失了（陈皓注：估计也可以用git仓库中反向恢复）。\u003c/span\u003e\u003c/li\u003e\n\u003cli class=\"li1\"\u003e\u003cspan class=\"s2\"\u003e可能有 707  用户丢失了，这个数据来自Kibana的日志。\u003c/span\u003e\u003c/li\u003e\n\u003cli class=\"li2\"\u003e\u003cspan class=\"s4\"\u003e在1月31日17:20 后的Webhooks 丢失了。\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e因为Gitlab把整个事件的细节公开了出来，所以，也得到了很多外部的帮助，2nd Quadrant的CTO – \u003cspan class=\"s1\"\u003e\u003ca href=\"https://www.linkedin.com/in/simonat2ndquadrantdotcom\" target=\"_blank\"\u003eSimon Riggs\u003c/a\u003e 在他的blog上也发布文章 \u003ca href=\"http://blog.2ndquadrant.com/dataloss-at-gitlab/\" target=\"_blank\"\u003eDataloss at Gitlab \u003c/a\u003e给了一些非常不错的建议：\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e关于PostgreSQL 9.6的数据同步hang住的问题，可能有一些Bug，正在fix中。\u003c/li\u003e\n\u003cli\u003ePostgreSQL有4GB的同步滞后是正常的，这不是什么问题。\u003c/li\u003e\n\u003cli\u003e正常的停止从结点，会让主结点自动释放WALSender的链接数，所以，不应该重新配置主结点的 max_wal_senders 参数。但是，停止从结点时，主结点的复数连接数不会很快的被释放，而新启动的从结点又会消耗更多的链接数。他认为，Gitlab配置的32个链接数太高了，通常来说，2到4个就足够了。\u003c/li\u003e\n\u003cli\u003e另外，之前gitlab配置的max_connections=8000太高了，现在降到2000个是合理的。\u003c/li\u003e\n\u003cli\u003epg_basebackup 会先在主结点上建一个checkpoint，然后再开始同步，这个过程大约需要4分钟。\u003c/li\u003e\n\u003cli\u003e手动的删除数据库目录是非常危险的操作，这个事应该交给程序来做。推荐使用刚release 的 \u003ca href=\"https://www.2ndquadrant.com/en/resources/repmgr/\" target=\"_blank\"\u003erepmgr\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e恢复备份也是非常重要的，所以，也应该用相应的程序来做。推荐使用 \u003ca href=\"https://www.2ndquadrant.com/en/resources/barman/\" target=\"_blank\"\u003ebarman\u003c/a\u003e （其支持S3）\u003c/li\u003e\n\u003cli\u003e测试备份和恢复是一个很重要的过程。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e看这个样子，估计也有一定的原因是——Gitlab的同学对PostgreSQL不是很熟悉。\u003c/p\u003e\n\u003cp\u003e随后，Gitlab在其网站上也开了一系列的issues，其issues列表在这里 \u003ca href=\"https://gitlab.com/gitlab-com/www-gitlab-com/issues/1108\" target=\"_blank\"\u003eWrite post-mortem\u003c/a\u003e (这个列表可能还会在不断更新中)\u003c/p\u003e\n\u003cul class=\"ul1\"\u003e\n\u003cli class=\"li1\"\u003e\u003cspan class=\"s1\"\u003e\u003cspan class=\"s2\"\u003e\u003ca href=\"https://gitlab.com/gitlab-com/infrastructure/issues/1094\"\u003einfrastructure#1094\u003c/a\u003e – Update PS1 across all hosts to more clearly differentiate between hosts and environments\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli class=\"li1\"\u003e\u003cspan class=\"s3\"\u003e\u003cspan class=\"s4\"\u003e\u003ca href=\"https://gitlab.com/gitlab-com/infrastructure/issues/1095\"\u003einfrastructure#1095\u003c/a\u003e – Prometheus monitoring for backups\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli class=\"li1\"\u003e\u003cspan class=\"s3\"\u003e\u003cspan class=\"s4\"\u003e\u003ca href=\"https://gitlab.com/gitlab-com/infrastructure/issues/1096\"\u003einfrastructure#1096\u003c/a\u003e – Set PostgreSQL’s max_connections to a sane value\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli class=\"li1\"\u003e\u003cspan class=\"s3\"\u003e\u003cspan class=\"s4\"\u003e\u003ca href=\"https://gitlab.com/gitlab-com/infrastructure/issues/1097\"\u003einfrastructure#1097\u003c/a\u003e – Investigate Point in time recovery \u0026amp; continuous archiving for PostgreSQL\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli class=\"li1\"\u003e\u003cspan class=\"s3\"\u003e\u003cspan class=\"s4\"\u003e\u003ca href=\"https://gitlab.com/gitlab-com/infrastructure/issues/1098\"\u003einfrastructure#1098\u003c/a\u003e – Hourly LVM snapshots of the production databases\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli class=\"li1\"\u003e\u003cspan class=\"s3\"\u003e\u003cspan class=\"s4\"\u003e\u003ca href=\"https://gitlab.com/gitlab-com/infrastructure/issues/1099\"\u003einfrastructure#1099\u003c/a\u003e – Azure disk snapshots of production databases\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli class=\"li1\"\u003e\u003cspan class=\"s3\"\u003e\u003cspan class=\"s4\"\u003e\u003ca href=\"https://gitlab.com/gitlab-com/infrastructure/issues/1100\"\u003einfrastructure#1100\u003c/a\u003e – Move staging to the ARM environment\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli class=\"li1\"\u003e\u003cspan class=\"s3\"\u003e\u003cspan class=\"s4\"\u003e\u003ca href=\"https://gitlab.com/gitlab-com/infrastructure/issues/1101\"\u003einfrastructure#1101\u003c/a\u003e – Recover production replica(s)\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli class=\"li1\"\u003e\u003cspan class=\"s3\"\u003e\u003cspan class=\"s4\"\u003e\u003ca href=\"https://gitlab.com/gitlab-com/infrastructure/issues/1102\"\u003einfrastructure#1102\u003c/a\u003e – Automated testing of recovering PostgreSQL database backups\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli class=\"li1\"\u003e\u003cspan class=\"s3\"\u003e\u003cspan class=\"s4\"\u003e\u003ca href=\"https://gitlab.com/gitlab-com/infrastructure/issues/1103\"\u003einfrastructure#1103\u003c/a\u003e – Improve PostgreSQL replication documentation/runbooks\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli class=\"li1\"\u003e\u003cspan class=\"s3\"\u003e\u003cspan class=\"s4\"\u003e\u003ca href=\"https://gitlab.com/gitlab-com/infrastructure/issues/1104\"\u003einfrastructure#1104\u003c/a\u003e – Kick out SSH users inactive for N minutes\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli class=\"li2\"\u003e\u003cspan class=\"s5\"\u003e\u003cspan class=\"s4\"\u003e\u003ca href=\"https://gitlab.com/gitlab-com/infrastructure/issues/1105\"\u003einfrastructure#1105\u003c/a\u003e – Investigate pgbarman for creating PostgreSQL backups\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e从上面的这个列表中，我们可以看到一些改进措施了。挺好的，不过我觉得还不是很够。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%9B%B8%E5%85%B3%E7%9A%84%E6%80%9D%E8%80%83\"\u003e\u003c/span\u003e相关的思考\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e因为类似这样的事，我以前也干过（误删除过数据库，在多个终端窗口中迷失掉了自己所操作的机器……），而且我在amazon里也见过一次，在阿里内至少见过四次以上（在阿里人肉运维的误操作的事故是我见过最多的），但是我无法在这里公开分享，私下可以分享。在这里，我只想从非技术和技术两个方面分享一下我的经验和认识。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%8A%80%E6%9C%AF%E6%96%B9%E9%9D%A2\"\u003e\u003c/span\u003e技术方面\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cstrong\u003e人肉运维\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e一直以来，我都觉得直接到生产线上敲命令是一种非常不好的习惯。我认为，\u003cstrong\u003e一个公司的运维能力的强弱和你上线上环境敲命令是有关的，你越是喜欢上线敲命令你的运维能力就越弱，越是通过自动化来处理问题，你的运维能力就越强\u003c/strong\u003e。理由如下：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e其一，如果说对代码的改动都是一次发布的话，那么，对生产环境的任何改动（包括硬件、操作系统、网络、软件配置……），也都算是一次发布。那么这样的发布就应该走发布系统和发布流程，要被很好的测试、上线和回滚计划。关键是，走发布过程是可以被记录、追踪和回溯的，而在线上敲命令是完全无法追踪的。没人知道你敲了什么命令。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e其二，真正良性的运维能力是——人管代码，代码管机器，而不是人管机器。你敲了什么命令没人知道，但是你写个工具做变更线上系统，这个工具干了什么事，看看工具的源码就知道了。\u003c/p\u003e\n\u003cp\u003e另外、有人说，以后不要用rm了，要用mv，还有人说，以后干这样的事时，一个人干，另一个人在旁边看，还有人说，要有一个checklist的强制流程做线上的变更，还有人说要增加一个权限系统。我觉得，这些虽然可以work，但是依然不好，再由如下：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e其一、如果要解决一个事情需要加更多的人来做的事，那这事就做成劳动密集型了。今天我们的科技就是在努力消除人力成本，而不是在增加人力成本。而做为一个技术人员，解决问题的最好方式是努力使用技术手段，而不是使用更多的人肉手段。\u003cstrong\u003e人类区别于动物的差别就是会发明和使用现代化的工具，而不是使用更多的人力\u003c/strong\u003e。另外，\u003cstrong\u003e这不仅仅因为是，人都是会有这样或那样的问题（疲惫、情绪化、急燥、冲动……），而机器是单一无脑不知疲惫的，更是因为，机器干活的效率和速度是比人肉高出N多倍的\u003c/strong\u003e。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e其二、增加一个权限系统或是别的一个watch dog的系统完全是在开倒车，权限系统中的权限谁来维护和审批？不仅仅是因为多出来的系统需要多出来的维护，关键是这个事就没有把问题解决在root上。除了为社会解决就业问题，别无好处，故障依然会发生，有权限的人一样会误操作。对于Gitlab这个问题，正如2nd Quadrant的CTO建议的那样，你需要的是一个自动化的备份和恢复的工具，而不是一个权限系统。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e其三、像使用mv而不rm，搞一个checklist和一个更重的流程，更糟糕。这里的逻辑很简单，因为，1）这些规则需要人去学习和记忆，本质上来说，你本来就不相信人，所以你搞出了一些规则和流程，而这些规则和流程的执行，又依赖于人，换汤不换药，2）另外，\u003cstrong\u003e写在纸面上的东西都是不可执行的，可以执行的就是只有程序，所以，为什么不把checklist和流程写成代码呢\u003c/strong\u003e？（你可能会说程序也会犯错，是的，程序的错误是consistent，而人的错误是inconsistent）\u003c/p\u003e\n\u003cp\u003e最关键的是，\u003cstrong\u003e数据丢失有各种各样的情况，不单单只是人员的误操作，比如，掉电、磁盘损坏、中病毒等等，在这些情况下，你设计的那些想流程、规则、人肉检查、权限系统、checklist等等统统都不管用了，这个时候，你觉得应该怎么做呢？是的，你会发现，你不得不用更好的技术去设计出一个高可用的系统！别无它法。\u003c/strong\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%85%B3%E4%BA%8E%E5%A4%87%E4%BB%BD\"\u003e\u003c/span\u003e关于备份\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e一个系统是需要做数据备份的，但是，你会发现，\u003cstrong\u003eGitlab这个事中，就算所有的备份都可用，也不可避免地会有数据的丢失，或是也会有很多问题\u003c/strong\u003e。理由如下：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）备份通常来说都是周期性的，所以，如果你的数据丢失了，从你最近的备份恢复数据里，从备份时间到故障时间的数据都丢失了。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）备份的数据会有版本不兼容的问题。比如，在你上次备份数据到故障期间，你对数据的scheme做了一次改动，或是你对数据做了一些调整，那么，你备份的数据就会和你线上的程序出现不兼容的情况。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e3）有一些公司或是银行有灾备的数据中心，但是灾备的数据中心没有一天live过。等真正灾难来临需要live的时候，你就会发现，各种问题让你live不起来。你可以读一读几年前的这篇报道好好感受一下《\u003ca href=\"http://finance.sina.com.cn/money/bank/20140804/091219903553.shtml\" target=\"_blank\"\u003e以史为鉴 宁夏银行7月系统瘫痪最新解析\u003c/a\u003e》\u003c/p\u003e\n\u003cp\u003e所以，在灾难来临的时候，你会发现你所设计精良的“备份系统”或是“灾备系统”就算是平时可以工作，但也会导致数据丢失，而且可能长期不用的备份系统很难恢复（比如应用、工具、数据的版本不兼容等问题）。\u003c/p\u003e\n\u003cp\u003e我之前写过一篇《\u003ca href=\"https://coolshell.cn/articles/10910.html\" target=\"_blank\"\u003e分布式系统的事务处理\u003c/a\u003e》，你还记得下面这张图吗？看看 Data Loss 那一行的，在Backups, Master/Slave 和 Master/Master的架构下，都是会丢的。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-10942\" src=\"https://coolshell.cn/wp-content/uploads/2014/01/Transaction-Across-DataCenter.jpg\" alt=\"\" width=\"566\" height=\"255\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/01/Transaction-Across-DataCenter.jpg 566w, https://coolshell.cn/wp-content/uploads/2014/01/Transaction-Across-DataCenter-300x135.jpg 300w\" sizes=\"(max-width: 566px) 100vw, 566px\"/\u003e\u003c/p\u003e\n\u003cp\u003e所以说，\u003cstrong\u003e如果你要让你的备份系统随时都可以用，那么你就要让它随时都Live着\u003c/strong\u003e，而随时都Live着的多结点系统，基本上就是一个分布式的高可用的系统。因为\u003cstrong\u003e，数据丢失的原因有很多种，比如掉电、磁盘损坏、中病毒等等，而那些流程、规则、人肉检查、权限系统、checklist等等都只是让人不要误操作，都不管用，这个时候，你不得不用更好的技术去设计出一个高可用的系统！别无它法。（重要的事，得再说一篇）\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e另外，你可以参看我的另一篇《\u003ca href=\"https://coolshell.cn/articles/17459.html\" target=\"_blank\"\u003e关于高可用系统\u003c/a\u003e》，这篇文章中以MySQL为例，数据库的replication也只能达到 两个9。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAWS 的 S3 的的高可用是4个加11个9的持久性（\u003c/strong\u003e所谓11个9的持久性durability，AWS是这样定义的，如果你存了1万个对象，那么丢一个的时间是1000万年\u003cstrong\u003e），这意味着，不仅仅只是硬盘坏，机器掉电，整个机房挂了，其保证可以承受有两个设施的数据丢失，数据还是可用的。试想，如果你把数据的可用性通过技术做到了这个份上，那么，你还怕被人误删一个结点上的数据吗？\u003c/strong\u003e\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%9D%9E%E6%8A%80%E6%9C%AF%E6%96%B9%E9%9D%A2\"\u003e\u003c/span\u003e非技术方面\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cstrong\u003e故障反思\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e一般说来，故障都需要反思，在Amazon，S2以上的故障都需要写COE（Correction of Errors），其中一节就是需要Ask 5 Whys，我发现在Gitlab的故障回顾的blog中第一段中也有说要在今天写个Ask 5 Whys。关于Ask 5 Whys，其实并不是亚马逊的玩法，这还是算一个业内常用的玩法，也就是说不断的为自己为为什么，直到找到问题的概本原因，这会逼着所有的当事人去学习和深究很多东西。在Wikipedia上有相关的词条 \u003ca href=\"https://en.wikipedia.org/wiki/5_Whys\" target=\"_blank\"\u003e5 Whys\u003c/a\u003e，其中罗列了14条规则：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e你需要找到正确的团队来完成这个故障反思。\u003c/li\u003e\n\u003cli\u003e使用纸或白板而不是电脑。\u003c/li\u003e\n\u003cli\u003e写下整个问题的过程，确保每个人都能看懂。\u003c/li\u003e\n\u003cli\u003e区别原因和症状。\u003c/li\u003e\n\u003cli\u003e特别注意因果关系。\u003c/li\u003e\n\u003cli\u003e说明Root Cause以及相关的证据。\u003c/li\u003e\n\u003cli\u003e5个为什么的答案需要是精确的。\u003c/li\u003e\n\u003cli\u003e寻找问题根源的步骤，而不是直接跳到结论。\u003c/li\u003e\n\u003cli\u003e要基础客观的事实、数据和知识。\u003c/li\u003e\n\u003cli\u003e评估过程而不是人。\u003c/li\u003e\n\u003cli\u003e千万不要把“人为失误”或是“工作不注意”当成问题的根源。\u003c/li\u003e\n\u003cli\u003e培养信任和真诚的气氛和文化。\u003c/li\u003e\n\u003cli\u003e不断的问“为什么”直到问题的根源被找到。这样可以保证同一个坑不会掉进去两次。\u003csup id=\"cite_ref-7\" class=\"reference\"\u003e\u003c/sup\u003e\u003c/li\u003e\n\u003cli\u003e当你给出“为什么”的答案时，你应该从用户的角度来回答。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003e工程师文化\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e上述的这些观点，其实，我在我的以住的博客中都讲过很多遍了，你可以参看《\u003ca href=\"https://coolshell.cn/articles/17497.html\" target=\"_blank\"\u003e什么是工程师文化？\u003c/a\u003e》以及《\u003ca href=\"https://coolshell.cn/articles/11656.html\" target=\"_blank\"\u003e开发团队的效率\u003c/a\u003e》。其实，说白了就是这么一个事——\u003cstrong\u003e如果你是一个技术公司，你就会更多的相信技术而不是管理。相信技术会用技术来解决问题，相信管理，那就只会有制度、流程和价值观来解决问题\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e这个道理很简单，\u003cstrong\u003e数据丢失有各种各样的情况，不单单只是人员的误操作，比如，掉电、磁盘损坏、中病毒等等，在这些情况下，你设计的那些流程、规则、人肉检查、权限系统、checklist等等统统都不管用，这个时候，你觉得应该怎么做呢？是的，你会发现，你不得不用更好的技术去设计出一个高可用的系统！别无它法。（重要的事得说三遍）\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e事件公开\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e很多公司基本上都是这样的套路，首先是极力掩盖，如果掩盖不了了就开始撒谎，撒不了谎了，就“文过饰非”、“避重就轻”、“转移视线”。然而，面对危机的最佳方法就是——“多一些真诚，少一些套路”，\u003cstrong\u003e所谓的“多一些真诚”的最佳实践就是——“透明公开所有的信息”\u003c/strong\u003e，Gitlab此次的这个事给大家树立了非常好的榜样。AWS也会把自己所有的故障和细节都批露出来。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e事情本来就做错了，而公开所有的细节，会让大众少很多猜测的空间，有利于抵制流言和黑公关，同时，还会赢得大众的理解和支持\u003c/strong\u003e。看看Gitlab这次还去YouTube上直播整个修复过程，是件很了不起的事，大家可以到他们的blog上看看，对于这样的透明和公开，一片好评。\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17459.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2016/08/HighAvailability-BK-150x150.png\" alt=\"关于高可用的系统\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17459.html\" class=\"wp_rp_title\"\u003e关于高可用的系统\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/07/api-design-300x278-2-150x150.jpg\" alt=\"API设计原则 – Qt官网的设计实践总结\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_title\"\u003eAPI设计原则 – Qt官网的设计实践总结\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/9949.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2013/07/inverted-bookshelf_thumb-150x150.jpg\" alt=\"IoC/DIP其实是一种管理思想\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/9949.html\" class=\"wp_rp_title\"\u003eIoC/DIP其实是一种管理思想\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/6775.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/24.jpg\" alt=\"Bret Victor – Inventing on Principle\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/6775.html\" class=\"wp_rp_title\"\u003eBret Victor – Inventing on Principle\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/5686.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/15.jpg\" alt=\"多些时间能少写些代码\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/5686.html\" class=\"wp_rp_title\"\u003e多些时间能少写些代码\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-17680\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"92b30e9ad0\"\u003e\u003cimg id=\"rating_17680_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17680, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a1b5a6f1dae52112a477b034-=\"\"/\u003e\u003cimg id=\"rating_17680_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17680, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a1b5a6f1dae52112a477b034-=\"\"/\u003e\u003cimg id=\"rating_17680_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17680, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a1b5a6f1dae52112a477b034-=\"\"/\u003e\u003cimg id=\"rating_17680_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17680, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a1b5a6f1dae52112a477b034-=\"\"/\u003e\u003cimg id=\"rating_17680_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(17680, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a1b5a6f1dae52112a477b034-=\"\"/\u003e (\u003cstrong\u003e89\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.34\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_17680_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"从Gitlab误删除数据库想到的\"/\u003e\u003cmeta itemprop=\"headline\" content=\"从Gitlab误删除数据库想到的\"/\u003e\u003cmeta itemprop=\"description\" content=\"昨天，Gitlab.com发生了一个大事，某同学误删了数据库，这个事看似是个低级错误，不过，因为Gitlab把整个过程的细节都全部暴露出来了，所以，可以看到很多东西，而对于类似这样的事情，我自己以前也干过，而在最近的两公司中我也见过（Amazon中见过一次，阿里中见过至少四次），正好通过这个事来说说一下自己的一些感想和观点吧。我先放个观点：你觉得有备份系统就不会丢数据了吗？\n事件回顾\n整个事件...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2017-02-02T16:11:28+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2017-02-03T11:50:30+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/17680.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/17680.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.34\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"89\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-17680-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2017-02-02T16:11:28+08:00",
  "Author": "陈皓"
}