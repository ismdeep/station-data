{
  "Source": "coolshell.cn",
  "Title": "打造高效的工作环境 – Shell 篇",
  "Link": "https://coolshell.cn/articles/19219.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"d2f5e42eddde85e4a1ed2ee1-text/javascript\"\u003e\u003c/script\u003e\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003e注：本文由\u003ca href=\"https://github.com/rayjun\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e雷俊\u003c/a\u003e(Javaer/Emacser)和我一起编辑，所以文章版权归雷俊与我共同所有，转载者必需注明出处和我们两位作者。原文最早发于酷壳微信公众号，后来我又做了一些修改，再发到博客这边。\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" class=\"alignright size-full wp-image-19230\" src=\"https://coolshell.cn/wp-content/uploads/2019/03/linux.ninja_.png\" alt=\"\" width=\"255\" height=\"220\"/\u003e程序员是一个很懒的群体，总想着能够让代码为自己干活，他们不断地把工作生活中的一些事情用代码自动化了，从而让整个社会的效率运作地越来越高。所以，程序员在准备去优化这个世界的时候，都会先要优化自己的工作环境，是所谓“工欲善其事，必先利其器”。\u003c/p\u003e\n\u003cp\u003e我们每个程序员都应该打造一套让自己更为高效的工作环境。那怕就是让你少输入一次命令，少按一次键，少在鼠标和键盘间切换一次，都会让程序员的工作变得更为的高效。所以，程序员一般需要一台性能比较好，不会因为开了太多的网页或程序就卡得不行的电脑，还要配备多个显示器，一个显示器写代码，一个查文档，一个测试运行结果，而不必在各种窗口来来回回的切换……在大量的窗口间切换经常会迷路，而且也容易出错（分不清线上或测试环境）……\u003c/p\u003e\n\u003cp\u003e除了硬件上的装备，软件上也是能够提升程序员生产力的地方，\u003cstrong\u003e在软件层面提升程序员生产力的东西有一个很重要的事就是命令行和脚本\u003c/strong\u003e，使用鼠标和图形界面则会大大降低程序员的生产力。酷壳以前也写过一些，如《\u003ca href=\"https://coolshell.cn/articles/8619.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e你可能不知道的Shell\u003c/a\u003e》和《 \u003ca href=\"https://coolshell.cn/articles/8883.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e应该知道的Linux技巧\u003c/a\u003e》，但是Unix/Linux Shell就是一个大宝库，怎么写也写不完，不然，怎么会有“Where is the Shell, there is a way”。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-19219\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003ch4\u003e命令行\u003c/h4\u003e\n\u003cp\u003e在不同的操作系统下，都有着很不错的命令行工具，比如 Mac 下的 \u003cstrong\u003eIterm2\u003c/strong\u003e，Linux 下的原生命令行，如果你是在 Windows 下工作，问题也不大，因为 Windows 下现在有了 \u003cstrong\u003eWSL\u003c/strong\u003e。WSL 提供了一个由微软开发的Linux兼容的内核接口（不包含Linux内核代码），然后可以在其上运行GNU用户空间，例如 Ubuntu，openSUSE，SUSE Linux Enterprise Server，Debian和Kali Linux。这样的用户空间可能包含 Bash shell 和命令语言，使用本机 GNU/Linux 命令行工具（sed，awk 等），编程语言解释器（Ruby，Python 等），甚至是图形应用程序（使用主机端的X窗口系统）。\u003c/p\u003e\n\u003cp\u003e使用命令行可以完成所有日常的操作，新建文件夹（mkdir）、新建文件（touch）、移动（mv）、复制（cp）、删除（rm）等等。而且使用 Linux/Unix 命令行最好的方式是可以用 \u003ccode\u003eawk\u003c/code\u003e、\u003ccode\u003esed\u003c/code\u003e、\u003ccode\u003egrep\u003c/code\u003e、\u003ccode\u003exargs\u003c/code\u003e、\u003ccode\u003efind\u003c/code\u003e、\u003ccode\u003esort\u003c/code\u003e 等等这样的命令，然后用管道把其串起来，就可以完成一个你想要的功能，尤其是一些简单的数据统计功能。这是Linux命令行不可比拟的优势。比如：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e查看连接你服务器 top10 用户端的 IP 地址：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003enetstat -nat | awk \u0026#39;{print $5}\u0026#39; | awk -F \u0026#39;:\u0026#39; \u0026#39;{print $1}\u0026#39; | sort | uniq -c | sort -rn | head -n 10\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e查看一下你最常用的10个命令：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003ecat .bash_history | sort | uniq -c | sort -rn | head -n 10 (or cat .zhistory | sort | uniq -c | sort -rn | head -n 10\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e（注：\u003ccode\u003eawk\u003c/code\u003e 和 \u003ccode\u003esed\u003c/code\u003e 是两大神器，所以，我以前的也有两篇文章来介绍它们——《\u003ca href=\"https://coolshell.cn/articles/9070.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eawk简明教程\u003c/a\u003e》和《\u003ca href=\"https://coolshell.cn/articles/9104.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003esed简明教程\u003c/a\u003e》，你可以前往一读）\u003c/p\u003e\n\u003cp\u003e在命令行中使用 \u003cstrong\u003ealias\u003c/strong\u003e 可以将使用频率很高命令或者比较复杂的命令合并成一个命令，或者修改原生的命令。\u003c/p\u003e\n\u003cp\u003e下面这几个命令，可能是你天天都在敲的。所以，你应该设置成 alias 来提高效率\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003ealias nis=\u0026#34;npm install --save \u0026#34;\nalias svim=\u0026#39;sudo vim\u0026#39;\nalias mkcd=\u0026#39;foo(){ mkdir -p \u0026#34;$1\u0026#34;; cd \u0026#34;$1\u0026#34; }; foo \u0026#39;\nalias install=\u0026#39;sudo apt get install\u0026#39;\nalias update=\u0026#39;sudo apt-get update; sudo apt-get upgrade\u0026#39;\nalias ..=\u0026#34;cd ..\u0026#34;\nalias ...=\u0026#34;cd ..; cd ..\u0026#34;\nalias www=\u0026#39;python -m SimpleHTTPServer 8000\u0026#39;\nalias sock5=\u0026#39;ssh -D 8080 -q -C -N -f \u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"c3b6b0a6b183baacb6b1edb0a6b1b5a6b1\"\u003e[email protected]\u003c/a\u003e\u0026#39;\n\u003c/pre\u003e\n\u003cp\u003e你还可以参考如下的一些文章，看看别人是怎么用好 \u003ccode\u003ealias\u003c/code\u003e 的\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.cyberciti.biz/tips/bash-aliases-mac-centos-linux-unix.html\" rel=\"nofollow\"\u003e30 Handy Bash Shell Aliases For Linux / Unix / Mac OS X\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.digitalocean.com/community/questions/what-are-your-favorite-bash-aliases\" rel=\"nofollow\"\u003eWhat are your favorite bash aliases?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linuxtrainingacademy.com/23-handy-bash-shell-aliases-for-unix-linux-and-mac-os-x/\" rel=\"nofollow\"\u003e23 Handy Bash Shell Aliases For Unix, Linux, and Mac OS X\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://brettterpstra.com/2013/03/31/a-few-more-of-my-favorite-shell-aliases/\" rel=\"nofollow\"\u003eA few more of my favorite Bash aliases\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e命令行中除了原生的命令之外，还有很多可以提升使用体验的工具。下面罗列一些很不错的命令，把原生的命令增强地很厉害:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/clvv/fasd\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003efasd\u003c/strong\u003e\u003c/a\u003e 增强了 \u003ccode\u003ecd\u003c/code\u003e 命令 。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/sharkdp/bat\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003ebat\u003c/strong\u003e\u003c/a\u003e 增强了 \u003ccode\u003ecat\u003c/code\u003e 命令 。如果你想要有语法高亮的 \u003ccode\u003ecat\u003c/code\u003e，可以试试 \u003ca href=\"https://github.com/jingweno/ccat\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003eccat\u003c/strong\u003e\u003c/a\u003e 命令。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/ogham/exa\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003eexa\u003c/strong\u003e\u003c/a\u003e 增强了 \u003ccode\u003els\u003c/code\u003e 命令，如果你需要在很多目录上浏览各种文件 ，\u003ca href=\"https://github.com/ranger/ranger\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003eranger\u003c/strong\u003e\u003c/a\u003e 命令可以比 \u003ccode\u003ecd\u003c/code\u003e 和 \u003ccode\u003ecat\u003c/code\u003e 更有效率，甚至可以在你的终端预览图片。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/sharkdp/fd\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003efd\u003c/strong\u003e\u003c/a\u003e 是一个比 \u003ccode\u003efind\u003c/code\u003e 更简单更快的命令，他还会自动地忽略掉一些你配置在 \u003ccode\u003e.gitignore\u003c/code\u003e 中的文件，以及 \u003ccode\u003e.git\u003c/code\u003e 下的文件。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/junegunn/fzf\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003efzf\u003c/strong\u003e\u003c/a\u003e 会是一个很好用的文件搜索神器，其主要是搜索当前目录以下的文件，还可以使用 \u003ccode\u003efzf --preview \u0026#39;cat {}\u0026#39;\u003c/code\u003e边搜索文件边浏览内容。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egrep\u003c/code\u003e 是一个上古神器，然而，\u003ca href=\"https://beyondgrep.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003eack\u003c/strong\u003e\u003c/a\u003e、\u003ca href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003eag\u003c/strong\u003e\u003c/a\u003e 和 \u003ca href=\"https://github.com/BurntSushi/ripgrep\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003erg\u003c/strong\u003e\u003c/a\u003e 是更好的grep，和上面的 \u003ccode\u003efd\u003c/code\u003e一样，在递归目录匹配的时候，会使用你配置在 \u003ccode\u003e.gitignore\u003c/code\u003e 中的规则。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erm\u003c/code\u003e 是一个危险的命令，尤其是各种 \u003ccode\u003erm -rf …\u003c/code\u003e，所以，\u003ca href=\"https://github.com/andreafrancia/trash-cli/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003etrash\u003c/strong\u003e\u003c/a\u003e 是一个更好的删除命令。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eman\u003c/code\u003e 命令是好读文档的命令，但是man的文档有时候太长了，所以，你可以试试 \u003ca href=\"https://github.com/tldr-pages/tldr\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003etldr\u003c/strong\u003e\u003c/a\u003e 命令，把文档上的一些示例整出来给你看。\u003c/li\u003e\n\u003cli\u003e如果你想要一个图示化的\u003ccode\u003eping\u003c/code\u003e，你可以试试 \u003ca href=\"https://github.com/denilsonsa/prettyping\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003eprettyping\u003c/strong\u003e\u003c/a\u003e 。\u003c/li\u003e\n\u003cli\u003e如果你想搜索以前打过的命令，不要再用 Ctrl +R 了，你可以使用加强版的 \u003ca href=\"https://github.com/dvorka/hstr\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003ehstr\u003c/strong\u003e\u003c/a\u003e  。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://hisham.hm/htop/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003ehtop\u003c/strong\u003e\u003c/a\u003e  是 top 的一个加强版。然而，还有很多的各式各样的top，比如：用于看IO负载的 \u003ca href=\"http://guichaz.free.fr/iotop/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003eiotop\u003c/strong\u003e\u003c/a\u003e，网络负载的 \u003ca href=\"http://www.ex-parrot.com/~pdw/iftop/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003eiftop\u003c/strong\u003e\u003c/a\u003e, 以及把这些top都集成在一起的 \u003ca href=\"https://github.com/Atoptool/atop\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003eatop\u003c/strong\u003e\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dev.yorhel.nl/ncdu\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003encdu\u003c/strong\u003e\u003c/a\u003e  比 du 好用多了用。另一个选择是 \u003ca href=\"https://github.com/jarun/nnn\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ennn\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e如果你想把你的命令行操作建录制成一个 SVG 动图，那么你可以尝试使用 \u003ca href=\"https://asciinema.org/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003easciinema\u003c/strong\u003e\u003c/a\u003e 和 \u003ca href=\"https://github.com/marionebl/svg-term-cli\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003esvg-trem\u003c/strong\u003e\u003c/a\u003e 。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/jakubroztocil/httpie\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003ehttpie\u003c/strong\u003e\u003c/a\u003e 是一个可以用来替代 \u003ccode\u003ecurl\u003c/code\u003e 和 \u003ccode\u003ewget\u003c/code\u003e 的 http 客户端，\u003ccode\u003ehttpie\u003c/code\u003e 支持 json 和语法高亮，可以使用简单的语法进行 http 访问: \u003ccode\u003ehttp -v github.com\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/tmux/tmux\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003etmux\u003c/strong\u003e\u003c/a\u003e 在需要经常登录远程服务器工作的时候会很有用，可以保持远程登录的会话，还可以在一个窗口中查看多个 shell 的状态。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/klaussinani/taskbook\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003eTaskbook\u003c/strong\u003e\u003c/a\u003e 是可以完全在命令行中使用的任务管理器 ，支持 ToDo 管理，还可以为每个任务加上优先级。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Russell91/sshrc\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003esshrc\u003c/strong\u003e\u003c/a\u003e 是个神器，在你登录远程服务器的时候也能使用本机的 shell 的 rc 文件中的配置。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/allinurl/goaccess\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003egoaccess\u003c/strong\u003e\u003c/a\u003e  这个是一个轻量级的分析统计日志文件的工具，主要是分析各种各样的 access log。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e关于这些增加命令，主要是参考自下面的这些文章\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://dev.to/_darrenburns/10-tools-to-power-up-your-command-line-4id4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e10 Tools To Power Up Your Command Line\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dev.to/_darrenburns/tools-to-power-up-your-command-line-part-2-2737\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e5 More Tools To Power Up Your Command Line (Part 2 Of Series)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dev.to/_darrenburns/power-up-your-command-line-part-3-4o53\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003ePower Up Your Command Line, Part 3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://darrenburns.net/posts/tools/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003ePower Up Your Command Line\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://hacker-tools.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003eHacker Tools\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4\u003eShell 和脚本\u003c/h4\u003e\n\u003cp\u003eshell 是可以与计算机进行高效交互的文本接口。shell 提供了一套交互式的编程语言（脚本），shell的种类很多，比如 \u003cstrong\u003esh\u003c/strong\u003e、\u003cstrong\u003ebash\u003c/strong\u003e、\u003cstrong\u003ezsh\u003c/strong\u003e 等。\u003c/p\u003e\n\u003cp\u003eshell 的生命力很强，在各种高级编程语言大行其道的今天，很多的任务依然离不开 shell。比如可以使用 shell 来执行一些编译任务，或者做一些批处理任务，初始化数据、打包程序等等。\u003c/p\u003e\n\u003cp\u003e现在比较流行的是 \u003cstrong\u003ezsh\u003c/strong\u003e + \u003ca href=\"https://ohmyz.sh/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003eoh-my-zsh\u003c/strong\u003e\u003c/a\u003e + \u003ca href=\"https://github.com/zsh-users/zsh-autosuggestions\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cstrong\u003ezsh-autosuggestions\u003c/strong\u003e\u003c/a\u003e 的组合，你也可以试试看。其中 zsh 和 oh-my-zsh 算是常规操作了，但是 zsh-autosuggestions 特别有用，可以超级快速的帮你补全你输入过的命令，让命令行的操作更加高效。\u003c/p\u003e\n\u003cp\u003e另外，\u003cstrong\u003e\u003ca href=\"https://fishshell.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003efish\u003c/a\u003e \u003c/strong\u003e也是另外一个牛逼的shell，比如：命令行自动完成（根据历史记录），命令行命令高亮，当你要输入命令行参数的时候，自动提示有哪些参数…… fish在很多地方也是用起来很爽的。和上面的 oh-my-zsh 有点不分伯仲了。\u003c/p\u003e\n\u003cp\u003e你也许会说，用 Python 脚本或 PHP 来写脚本会比 Shell 更好更没有 bug，但我要申辩一下:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e其一，如果你有一天要维护线上机器的时候，或是到了银行用户的系统（与外网完全隔离，而且服务器上没有安装 Python/PHP 或是他们的的高级库，那么，你只有 Shell 可以用了）。\u003c/li\u003e\n\u003cli\u003e其二，而且，如果要跟命令行交互很多的话，Shell 是不二之选，试想一下，如果你要去 100 台远程的机器上查access.log 日志中有没有某个错误，完成这个工作你是用 PHP/Python 写脚本快还是用 Shell 写脚本快呢？\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以，\u003cstrong\u003e我们还要学会只使用传统的grep/awk/sed等等这些POSIX的原生的系统默认安装的命令\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e当然，要写好一个脚本并不容易，下面有一些小模板供你参考：\u003c/p\u003e\n\u003cp\u003e处理命令行参数的一个样例\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003ewhile [ \u0026#34;$1\u0026#34; != \u0026#34;\u0026#34; ]; do\n    case $1 in\n        -s  )   shift\t\n\t\tSERVER=$1 ;;  \n        -d  )   shift\n\t\tDATE=$1 ;;\n\t--paramter|p ) shift\n\t\tPARAMETER=$1;;\n        -h|help  )   usage # function call\n                exit ;;\n        * )     usage # All other parameters\n                exit 1\n    esac\n    shift\ndone \u003c/pre\u003e\n\u003cp\u003e命令行菜单的一个样例\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e#!/bin/bash\n# Bash Menu Script Example\n\nPS3=\u0026#39;Please enter your choice: \u0026#39;\noptions=(\u0026#34;Option 1\u0026#34; \u0026#34;Option 2\u0026#34; \u0026#34;Option 3\u0026#34; \u0026#34;Quit\u0026#34;)\nselect opt in \u0026#34;${options[@]}\u0026#34;\ndo\n    case $opt in\n        \u0026#34;Option 1\u0026#34;)\n            echo \u0026#34;you chose choice 1\u0026#34;\n            ;;\n        \u0026#34;Option 2\u0026#34;)\n            echo \u0026#34;you chose choice 2\u0026#34;\n            ;;\n        \u0026#34;Option 3\u0026#34;)\n            echo \u0026#34;you chose choice $REPLY which is $opt\u0026#34;\n            ;;\n        \u0026#34;Quit\u0026#34;)\n            break\n            ;;\n        *) echo \u0026#34;invalid option $REPLY\u0026#34;;;\n    esac\ndone\n\u003c/pre\u003e\n\u003cp\u003e颜色定义，你可以使用 \u003ccode\u003eecho -e \u0026#34;${Blu}blue ${Red}red ${RCol}etc....\u0026#34;\u003c/code\u003e 进行有颜色文本的输出\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003eRCol=\u0026#39;\\e[0m\u0026#39;    # Text Reset\n\n# Regular           Bold                Underline           High Intensity      BoldHigh Intens     Background          High Intensity Backgrounds\nBla=\u0026#39;\\e[0;30m\u0026#39;;     BBla=\u0026#39;\\e[1;30m\u0026#39;;    UBla=\u0026#39;\\e[4;30m\u0026#39;;    IBla=\u0026#39;\\e[0;90m\u0026#39;;    BIBla=\u0026#39;\\e[1;90m\u0026#39;;   On_Bla=\u0026#39;\\e[40m\u0026#39;;    On_IBla=\u0026#39;\\e[0;100m\u0026#39;;\nRed=\u0026#39;\\e[0;31m\u0026#39;;     BRed=\u0026#39;\\e[1;31m\u0026#39;;    URed=\u0026#39;\\e[4;31m\u0026#39;;    IRed=\u0026#39;\\e[0;91m\u0026#39;;    BIRed=\u0026#39;\\e[1;91m\u0026#39;;   On_Red=\u0026#39;\\e[41m\u0026#39;;    On_IRed=\u0026#39;\\e[0;101m\u0026#39;;\nGre=\u0026#39;\\e[0;32m\u0026#39;;     BGre=\u0026#39;\\e[1;32m\u0026#39;;    UGre=\u0026#39;\\e[4;32m\u0026#39;;    IGre=\u0026#39;\\e[0;92m\u0026#39;;    BIGre=\u0026#39;\\e[1;92m\u0026#39;;   On_Gre=\u0026#39;\\e[42m\u0026#39;;    On_IGre=\u0026#39;\\e[0;102m\u0026#39;;\nYel=\u0026#39;\\e[0;33m\u0026#39;;     BYel=\u0026#39;\\e[1;33m\u0026#39;;    UYel=\u0026#39;\\e[4;33m\u0026#39;;    IYel=\u0026#39;\\e[0;93m\u0026#39;;    BIYel=\u0026#39;\\e[1;93m\u0026#39;;   On_Yel=\u0026#39;\\e[43m\u0026#39;;    On_IYel=\u0026#39;\\e[0;103m\u0026#39;;\nBlu=\u0026#39;\\e[0;34m\u0026#39;;     BBlu=\u0026#39;\\e[1;34m\u0026#39;;    UBlu=\u0026#39;\\e[4;34m\u0026#39;;    IBlu=\u0026#39;\\e[0;94m\u0026#39;;    BIBlu=\u0026#39;\\e[1;94m\u0026#39;;   On_Blu=\u0026#39;\\e[44m\u0026#39;;    On_IBlu=\u0026#39;\\e[0;104m\u0026#39;;\nPur=\u0026#39;\\e[0;35m\u0026#39;;     BPur=\u0026#39;\\e[1;35m\u0026#39;;    UPur=\u0026#39;\\e[4;35m\u0026#39;;    IPur=\u0026#39;\\e[0;95m\u0026#39;;    BIPur=\u0026#39;\\e[1;95m\u0026#39;;   On_Pur=\u0026#39;\\e[45m\u0026#39;;    On_IPur=\u0026#39;\\e[0;105m\u0026#39;;\nCya=\u0026#39;\\e[0;36m\u0026#39;;     BCya=\u0026#39;\\e[1;36m\u0026#39;;    UCya=\u0026#39;\\e[4;36m\u0026#39;;    ICya=\u0026#39;\\e[0;96m\u0026#39;;    BICya=\u0026#39;\\e[1;96m\u0026#39;;   On_Cya=\u0026#39;\\e[46m\u0026#39;;    On_ICya=\u0026#39;\\e[0;106m\u0026#39;;\nWhi=\u0026#39;\\e[0;37m\u0026#39;;     BWhi=\u0026#39;\\e[1;37m\u0026#39;;    UWhi=\u0026#39;\\e[4;37m\u0026#39;;    IWhi=\u0026#39;\\e[0;97m\u0026#39;;    BIWhi=\u0026#39;\\e[1;97m\u0026#39;;   On_Whi=\u0026#39;\\e[47m\u0026#39;;    On_IWhi=\u0026#39;\\e[0;107m\u0026#39;;\n\u003c/pre\u003e\n\u003cp\u003e取当前运行脚本绝对路径的示例：（注：Linux下可以用 \u003ccode\u003edirname $(readlink -f $0)\u003c/code\u003e ）\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003eFILE=\u0026#34;$0\u0026#34;\nwhile [[ -h ${FILE} ]]; do\n    FILE=\u0026#34;`readlink \u0026#34;${FILE}\u0026#34;`\u0026#34;\ndone\npushd \u0026#34;`dirname \u0026#34;${FILE}\u0026#34;`\u0026#34; \u0026gt; /dev/null\nDIR=`pwd -P`\npopd \u0026gt; /dev/null\n\u003c/pre\u003e\n\u003cp\u003e如何在远程服务器运行一个本地脚本\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e#无参数\nssh user@server \u0026#39;bash -s\u0026#39; \u0026lt; local.script.sh\n\n#有参数\nssh user@server ARG1=\u0026#34;arg1\u0026#34; ARG2=\u0026#34;arg2\u0026#34; \u0026#39;bash -s\u0026#39; \u0026lt; local_script.sh\n\u003c/pre\u003e\n\u003cp\u003e如何检查一个命令是否存在，用 \u003ccode\u003ewhich\u003c/code\u003e 吗？最好不要用，因为很多操作系统的 \u003ccode\u003ewhich\u003c/code\u003e 命令没有设置退出状态码，这样你不知道是否是有那个命令。所以，你应该使用下面的方式。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e# POSIX 兼容:\ncommand -v [the_command]\n\n# bash 环境:\nhash [the_command]\ntype [the_command]\n\n# 示例：\ngnudate() {\n    if hash gdate 2\u0026gt; /dev/null; then\n        gdate \u0026#34;$@\u0026#34;\n    else\n        date \u0026#34;$@\u0026#34;\n    fi\n}\n\u003c/pre\u003e\n\u003cp\u003e然后，如果要写出健壮性更好的脚本，下面是一些相关的技巧：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用 \u003ccode\u003e-e\u003c/code\u003e 参数，如：\u003ccode\u003eset -e\u003c/code\u003e 或是 \u003ccode\u003e#!/bin/sh -e\u003c/code\u003e，这样设置会让你的脚本出错就会停止运行，这样一来可以防止你的脚本在出错的情况下还在拼拿地干活停不下来。\u003c/li\u003e\n\u003cli\u003e使用 \u003ccode\u003e-u\u003c/code\u003e 参数，如： \u003ccode\u003eset -eu\u003c/code\u003e，这意味着，如果你代码中有变量没有定义，就会退出。\u003c/li\u003e\n\u003cli\u003e对一些变理，你可以使用默认值。如：\u003ccode\u003e${FOO:-\u0026#39;default\u0026#39;}\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e处理你代码的退出码。这样方便你的脚本跟别的命令行或脚本集成。\u003c/li\u003e\n\u003cli\u003e尽量不要使用 \u003ccode\u003e;\u003c/code\u003e 来执行多个命令，而是使用 \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e，这样会在出错的时候停止运行后续的命令。\u003c/li\u003e\n\u003cli\u003e对于一些字符串变量，使用引号括起，避免其中有空格或是别的什么诡异字符。\u003c/li\u003e\n\u003cli\u003e如果你的脚有参数，你需要检查脚本运行是否带了你想要的参数，或是，你的脚本可以在没有参数的情况下安全的运行。\u003c/li\u003e\n\u003cli\u003e为你的脚本设置 \u003ccode\u003e-h\u003c/code\u003e 和 \u003ccode\u003e--help\u003c/code\u003e 来显示帮助信息。千万不要把这两个参数用做为的功能。\u003c/li\u003e\n\u003cli\u003e使用 \u003ccode\u003e$()\u003c/code\u003e 而不是 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003e\u003c/code\u003e 来获得命令行的输出，主要原因是易读。\u003c/li\u003e\n\u003cli\u003e小心不同的平台，尤其是 MacOS 和 Linux 的跨平台。\u003c/li\u003e\n\u003cli\u003e对于 \u003ccode\u003erm -rf\u003c/code\u003e 这样的高危操作，需要检查后面的变量名是否为空，比如：\u003ccode\u003erm -rf $MYDIDR/*\u003c/code\u003e 如果 \u003ccode\u003e$MYDIR\u003c/code\u003e为空，结果是灾难性的。\u003c/li\u003e\n\u003cli\u003e考虑使用 “find/while” 而不是 “for/find”。如：\u003ccode\u003efor F in $(find . -type f) ; do echo $F; done\u003c/code\u003e 写成 \u003ccode\u003efind . -type f | while read F ; do echo $F ; done\u003c/code\u003e 不但可以容忍空格，而且还更快。\u003c/li\u003e\n\u003cli\u003e防御式编程，在正式执行命令前，把相关的东西都检查好，比如，文件目录有没有存在。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e你还可以使用ShellCheck 来帮助你检查你的脚本。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.shellcheck.net/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://www.shellcheck.net/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e最后推荐一些 Shell 和脚本的参考资料。\u003c/p\u003e\n\u003cp\u003e各种有意思的命令拼装，一行命令走天涯:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.bashoneliners.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003ehttp://www.bashoneliners.com/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.shell-fu.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003ehttp://www.shell-fu.org/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.commandlinefu.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003ehttp://www.commandlinefu.com/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e下面是一些脚本集中营，你可以在里面淘到各种牛X的脚本：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.shelldorado.com/scripts/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003ehttp://www.shelldorado.com/scripts/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://snippets.siftie.com/public/tag/bash/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003ehttps://snippets.siftie.com/public/tag/bash/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://bash.cyberciti.biz/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003ehttps://bash.cyberciti.biz/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/alexanderepstein/Bash-Snippets\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://github.com/alexanderepstein/Bash-Snippets\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/miguelgfierro/scripts\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://github.com/miguelgfierro/scripts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/epety/100-shell-script-examples\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://github.com/epety/100-shell-script-examples\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/ruanyf/simple-bash-scripts\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://github.com/ruanyf/simple-bash-scripts\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e甚至写脚本都可以使用框架:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e写bash脚本的框架 \u003ca href=\"https://github.com/Bash-it/bash-it\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://github.com/Bash-it/bash-it\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGoogle的Shell脚本的代码规范：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://google.github.io/styleguide/shell.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003ehttps://google.github.io/styleguide/shell.xml\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e最后，别忘了几个和shell有关的索引资源：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/alebcay/awesome-shell\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://github.com/alebcay/awesome-shell\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/awesome-lists/awesome-bash\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://github.com/awesome-lists/awesome-bash\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://terminalsare.sexy/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003ehttps://terminalsare.sexy/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e最后，如果你还有什么别的更好的玩的东西，欢迎在评论区留言，或是到 \u003ca href=\"https://github.com/coolshellx/articles\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ecoolshellx/ariticles @ github\u003c/a\u003e 修改本文。\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8088.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/7.jpg\" alt=\"对技术的态度\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8088.html\" class=\"wp_rp_title\"\u003e对技术的态度\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/4990.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2011/07/programmer-150x150.png\" alt=\"程序员技术练级攻略\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/4990.html\" class=\"wp_rp_title\"\u003e程序员技术练级攻略\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/4102.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/25.jpg\" alt=\"如何学好C语言\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/4102.html\" class=\"wp_rp_title\"\u003e如何学好C语言\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/22298.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2022/10/communication-150x150.png\" alt=\"聊聊团队协同和协同工具\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/22298.html\" class=\"wp_rp_title\"\u003e聊聊团队协同和协同工具\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/22173.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2022/02/http_method-150x150.png\" alt=\"“一把梭：REST API 全用 POST”\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/22173.html\" class=\"wp_rp_title\"\u003e“一把梭：REST API 全用 POST”\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-19219\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"fe87a7851a\"\u003e\u003cimg id=\"rating_19219_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(19219, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-d2f5e42eddde85e4a1ed2ee1-=\"\"/\u003e\u003cimg id=\"rating_19219_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(19219, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-d2f5e42eddde85e4a1ed2ee1-=\"\"/\u003e\u003cimg id=\"rating_19219_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(19219, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-d2f5e42eddde85e4a1ed2ee1-=\"\"/\u003e\u003cimg id=\"rating_19219_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(19219, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-d2f5e42eddde85e4a1ed2ee1-=\"\"/\u003e\u003cimg id=\"rating_19219_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(19219, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-d2f5e42eddde85e4a1ed2ee1-=\"\"/\u003e (\u003cstrong\u003e77\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.34\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_19219_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"打造高效的工作环境 – Shell 篇\"/\u003e\u003cmeta itemprop=\"headline\" content=\"打造高效的工作环境 – Shell 篇\"/\u003e\u003cmeta itemprop=\"description\" content=\"注：本文由雷俊(Javaer/Emacser)和我一起编辑，所以文章版权归雷俊与我共同所有，转载者必需注明出处和我们两位作者。原文最早发于酷壳微信公众号，后来我又做了一些修改，再发到博客这边。\n\n程序员是一个很懒的群体，总想着能够让代码为自己干活，他们不断地把工作生活中的一些事情用代码自动化了，从而让整个社会的效率运作地越来越高。所以，程序员在准备去优化这个世界的时候，都会先要优化自己的工作环境，...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2019-03-17T13:53:01+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2019-04-21T16:34:43+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/19219.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/19219.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.34\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"77\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-19219-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2019-03-17T13:53:01+08:00",
  "Author": "陈皓"
}