{
  "Source": "coolshell.cn",
  "Title": "网络数字身份认证术",
  "Link": "https://coolshell.cn/articles/21708.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"32a7b5e178c6e77a1acf68e5-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright size-medium wp-image-21716\" src=\"https://coolshell.cn/wp-content/uploads/2022/01/iStock-1175502114-300x201.png\" alt=\"\" width=\"300\" height=\"201\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/01/iStock-1175502114-300x201.png 300w, https://coolshell.cn/wp-content/uploads/2022/01/iStock-1175502114-768x514.png 768w, https://coolshell.cn/wp-content/uploads/2022/01/iStock-1175502114-404x270.png 404w, https://coolshell.cn/wp-content/uploads/2022/01/iStock-1175502114.png 800w\" sizes=\"(max-width: 300px) 100vw, 300px\"/\u003e这篇文章是《\u003ca title=\"HTTP API 认证授权术\" href=\"https://coolshell.cn/articles/19395.html\" target=\"_blank\" rel=\"noopener\"\u003eHTTP API 认证授权术\u003c/a\u003e》的姊妹篇，在那篇文章中，主要介绍了 HTTP API 认证和授权技术中用到的 HTTP Basic, Digest Access, HMAC, OAuth, JWT 等各种方式，主要是 API 上用到的一些技术，这篇文章主要想说的是另一个话题——身份认证。也就是说，怎么确认这个数据就是这个人发出来的？\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81\" title=\"用户密码\"\u003e用户密码\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E5%AF%86%E9%92%A5%E5%AF%B9%E5%92%8C%E8%AF%81%E4%B9%A6\" title=\"密钥对和证书\"\u003e密钥对和证书\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E8%AF%81%E4%B9%A6%E7%94%9F%E6%88%90%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA\" title=\"证书生成过程演示\"\u003e证书生成过程演示\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81_mTLS\" title=\"双向认证 mTLS\"\u003e双向认证 mTLS\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81\"\u003e\u003c/span\u003e用户密码\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e要解决这个问题，我们先来看一个最简单的解——使用密码，通常来说，在网络上要证明一个人的身份的话，都需要这个人的一些私密而唯一的东西。比如，像密码这样的东西，很多地方，只要你提供了你的用户名+密码，就可以确定这个人是你（注明：关于密码管理，强密码设定，密码泄漏，密码破解以及密码哄骗不在这篇文章的话题中），也就是说，这个密码是非常私密的事，我们可以假设，这个事全世界只能有当事人一个人知道，所以，当事人得供正确的密码，我们就可以认证这个人了。\u003c/p\u003e\n\u003cp\u003e为了加强密码的安全程度，一般会使用 2FA（Two-factor authentication）或 MFA（Multi-factor authentication），双因认证或多因认证，这需要用户提供一个唯一的可信设备，比如用户的手机，然后通过验证手机短信，或是像 \u003ca href=\"https://en.wikipedia.org/wiki/Google_Authenticator\" target=\"_blank\" rel=\"noopener\"\u003eGoogle Authenticator\u003c/a\u003e  这样的动态口令来完成。这样的安全级别已经算是比较高了。如果能够再加上经常性的变更密码，那么安全级别就更好了。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-21708\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e另外，一些公司还使用了生物密码来进行用户的身份验证，比如人脸识别。但是，我个人觉得人脸识别或是生物识别是比较糟糕的方式，因为：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e目前能被验证的生物信息（如人脸和指纹）太容易被别人获得和伪造了。\u003c/li\u003e\n\u003cli\u003e这样东西不能被变更和吊销，密码可以被吊销和重置，人脸则不能。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%AF%86%E9%92%A5%E5%AF%B9%E5%92%8C%E8%AF%81%E4%B9%A6\"\u003e\u003c/span\u003e密钥对和证书\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e密码可以解决身证认证的问题有很多问题，最重要的一个问题就是，你要把你的密码提供给对方，对方才能验证你的身份。你不可能把你的密码提供给全世界的人吧，这样的话，全世界的人都有你的密码了，那么任何人都能变成你了。所以，用户密码这个事只能存在于权威机构和普通用户之间，不能存在于普遍应用中。所以，这里需要使用更好的解决方案。\u003c/p\u003e\n\u003cp\u003e使用 ECC（\u003ca title=\"Elliptic-Curve Cryptography\" href=\"https://en.wikipedia.org/wiki/Elliptic-curve_cryptography\" target=\"_blank\" rel=\"noopener\"\u003eElliptic-Curve Cryptography\u003c/a\u003e）椭圆曲线密码术，可以通过一个“密钥对”进行非对称加密。这种技术，在对信息进行加密和解密时，使用两个不同的密钥，其中一个用来做加密，另一个做解密。这样一来，我们就可以把其中一个密钥公布出去，称之为公钥，另一个密钥私密地保管好，称之为私钥。\u003c/p\u003e\n\u003cp\u003e比如，我用我的私钥加密信息，然后，我把这个私钥所配对的公钥发布给所有人，大家都用公钥解密信息，不用我的公钥你解密不了这个信息。这样一来，就可以保证这个信息是我发出来的，不但保证了信息安全，还完成了身份认证。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-large wp-image-21710\" src=\"https://coolshell.cn/wp-content/uploads/2022/01/key.pair_-1024x390.png\" alt=\"\" width=\"640\" height=\"244\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/01/key.pair_-1024x390.png 1024w, https://coolshell.cn/wp-content/uploads/2022/01/key.pair_-300x114.png 300w, https://coolshell.cn/wp-content/uploads/2022/01/key.pair_-768x293.png 768w, https://coolshell.cn/wp-content/uploads/2022/01/key.pair_-604x230.png 604w, https://coolshell.cn/wp-content/uploads/2022/01/key.pair_.png 1304w\" sizes=\"(max-width: 640px) 100vw, 640px\"/\u003e\u003c/p\u003e\n\u003cp\u003e这样的现实案例一般用于网站，也就是用户得要知道我访问的这个网站是真实的，不是别人做的。因为 DNS 很容易被 hack，你连上一个不可信的网络，这个网络里的 DNS 把这个网站的 IP 地址解析成什么 就是什么了。但是有了这个加密的机制后，网站把自己的信息加密后连同公钥给到访问者，访问解密后就知道是不是这个网站了。\u003c/p\u003e\n\u003cp\u003e但是，这里还是会有一个很严重的问题，那就是中间人攻击。如下图所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter wp-image-21712 size-full\" src=\"https://coolshell.cn/wp-content/uploads/2022/01/middle.man_-e1641105543137.png\" alt=\"\" width=\"600\" height=\"252\"/\u003e\u003c/p\u003e\n\u003cp\u003e中间人 Chad 把自己伪装成 Bob 向 Alice 要信息，然后，再伪装成 Alice 对 Bob 说，这就是 Alice 的公钥，于是 Bob 也无法验证是不是 Alice 的公钥，因为公钥里就是一堆乱七八糟的数据，我们完全不能分辨哪个公钥属于 Alice 的。试想，如果我们收到声称属于银行的密钥。我们怎么知道它确实属于你的银行？\u003c/p\u003e\n\u003cp\u003e这里的答案就是\u003cstrong\u003e使用数字证书\u003c/strong\u003e。证书跟我们的身份证非常类似，其需要一个可信机构来颁发和验证的。这个证书机构 CA（Certificate Authority）是一个是大家都相信的权威机构，他用他的人品保证（当然一般会被严格管理和审计），CA 机构同样使用这样的非对称加密的技术来完成颁发和验证的事。下图展示了这一过程。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-large wp-image-21713\" src=\"https://coolshell.cn/wp-content/uploads/2022/01/certificate-1024x532.png\" alt=\"\" width=\"640\" height=\"333\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/01/certificate-1024x532.png 1024w, https://coolshell.cn/wp-content/uploads/2022/01/certificate-300x156.png 300w, https://coolshell.cn/wp-content/uploads/2022/01/certificate-768x399.png 768w, https://coolshell.cn/wp-content/uploads/2022/01/certificate-519x270.png 519w, https://coolshell.cn/wp-content/uploads/2022/01/certificate.png 1362w\" sizes=\"(max-width: 640px) 100vw, 640px\"/\u003e\u003c/p\u003e\n\u003cp\u003e说明一下上面这个图：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e为了解决公钥认证的问题的，我们需要一个权威的CA 机构。\u003c/li\u003e\n\u003cli\u003eAlice 把自己的信息（姓名、组织，地址，电邮，网址等）和自己的公钥打包成一个 CSR 的文件，发给 CA 机构，\u003c/li\u003e\n\u003cli\u003eCA 机构会来找 Alice 做物理世界的认证，如果通过后，就会用自己的机构私钥，把CSR 变成一个签名证书。\u003c/li\u003e\n\u003cli\u003eBob 同学拿到 Alice 的证书，用 CA 机构的公钥解密后，得到 Alice 的公钥\u003c/li\u003e\n\u003cli\u003e后面就可以签证 信息是否来自 Alice 了。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e是的，这个过程就是在“套娃”，这种证书机构还可以给下级的证书机构发证，于是就会一层套一层地，形成一个证书链，顶层的叫根证书，你得绝对信任之。对于验证证书真实性的客户端，它需要能够验证链中所有 CA 的签名，这意味着客户端需要访问链中所有 CA 的证书。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E8%AF%81%E4%B9%A6%E7%94%9F%E6%88%90%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA\"\u003e\u003c/span\u003e证书生成过程演示\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e并不是所有的场景都需要向这些大型的 CA 机构申请公钥证书，在任何一个企业，组织或是团体内都可以自己形这样的“小王国”，也就是说，你可以自行生成这样的证书，只需要你自己保证自己的生成证书的私钥的安全，以及不需要扩散到整个互联网。下面，我们用 \u003ccode\u003eopenssl\u003c/code\u003e命令来演示这个过程。\u003c/p\u003e\n\u003cp\u003e1）生成 CA 的证书（公钥） \u003ccode\u003eca.crt\u003c/code\u003e 和私钥 \u003ccode\u003eca.key\u003c/code\u003e\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\"\u003eopenssl req -newkey rsa:2048 \\\n    -new -nodes -x509 \\\n    -days 365 \\\n    -out ca.crt \\\n    -keyout ca.key \\\n    -subj \u0026#34;/C=SO/ST=Earth/L=Mountain/O=CoolShell/OU=HQ/CN=localhost\u0026#34;\u003c/pre\u003e\n\u003cp\u003e2)  生成 alice 的私钥\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\"\u003eopenssl genrsa -out alice.key 2048\u003c/pre\u003e\n\u003cp\u003e3）生成 Alice 的 CSR – Certificate Signing Request\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\"\u003eopenssl req -new -key alice.key 365 -out alice.csr \\\n    -subj \u0026#34;/C=CN/ST=Beijing/L=Haidian/O=CoolShell/OU=Test/CN=localhost.alice\u0026#34;\u003c/pre\u003e\n\u003cp\u003e4）使用 CA 给 Alice 签名证书\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\"\u003eopenssl x509  -req -in alice.csr \\\n    -extfile \u0026lt;(printf \u0026#34;subjectAltName=DNS:localhost.alice\u0026#34;) \\ \n    -CA ca.crt -CAkey ca.key  \\\n    -days 365 -sha256 -CAcreateserial \\\n    -out alice.crt\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81_mTLS\"\u003e\u003c/span\u003e双向认证 mTLS\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e上面，我们说的基本上都是单向认证，大量的场景都是确保用户方访问的是真正的服务方，如：银行，电商网站，等。这样可以保证用户不会被钓鱼网站或是中间人攻击。但是，很多时候，我们也是需要双向认证的。下面是一个典型的场景——微信支付和商户间交互\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e用户到商家那边买东西，商家要求用户进行支付。\u003c/li\u003e\n\u003cli\u003e用户选择了微信支付，于是，界面从商户侧切到了微信侧\u003c/li\u003e\n\u003cli\u003e微信那边支付完成后，商户这边收到微信那边支付完成的通知，于是开始发货。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这个过程中有件事非常重要——就是微信通知商户支付完成的时候。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e微信得确保通知到的就是用户所支付商户，而不是别个。\u003c/li\u003e\n\u003cli\u003e商户也得要能确认，来通知我的就是微信，不是别人。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e一般来说，微信会给商户一个 AppID和一个 AppSerct，用这个来确保是我认证过的商户来调用我，然后，需要商户在自己的系统里填一个回调的 URL，并通过平台设置的 key来做 MD5/HMAC的签名来确保是官方的回调。这都是在《\u003ca title=\"HTTP API 认证授权术\" href=\"https://coolshell.cn/articles/19395.html\" target=\"_blank\" rel=\"noopener\"\u003eHTTP API 认证授权术\u003c/a\u003e》中提到过的技术，是相对传统的技术。\u003c/p\u003e\n\u003cp\u003e如今，\u003cb\u003emTLS是\u003c/b\u003e确保云原生应用程序中服务之间的通信安全的首选协议。 也就是双向认证。\u003c/p\u003e\n\u003cp\u003e传统的 TLS 认证过程是：\u003c/p\u003e\n\u003col dir=\"auto\"\u003e\n\u003cli\u003e客户端连接到服务器\u003c/li\u003e\n\u003cli\u003e服务器提供其 TLS 证书\u003c/li\u003e\n\u003cli\u003e客户端验证服务器的证书\u003c/li\u003e\n\u003cli\u003e客户端和服务器通过加密的 TLS 连接交换信息\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp dir=\"auto\"\u003e在 mTLS 中，客户端和服务器都有一个证书，双方都使用他们的公钥/私钥对进行身份验证。与常规 TLS 相比，mTLS 中有额外的步骤来验证双方（以\u003cstrong\u003e粗体显示的\u003c/strong\u003e额外步骤）：\u003c/p\u003e\n\u003col dir=\"auto\"\u003e\n\u003cli\u003e客户端连接到服务器\u003c/li\u003e\n\u003cli\u003e服务器提供其 TLS 证书\u003c/li\u003e\n\u003cli\u003e客户端验证服务器的证书\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e客户端出示其 TLS 证书\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e服务器验证客户端的证书\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e服务器授予访问权限\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e客户端和服务器通过加密的 TLS 连接交换信息\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003emTLS 需要“根”TLS 证书；这我们自己来完成证书颁发机构的职责。授权客户端和服务器使用的证书必须与此根证书相对应。根证书是自签名的，这意味着我们需要自己创建它。（注：此方法不适用于公共 Internet 上的单向 TLS，因为外部证书颁发机构必须颁发这些证书）\u003c/p\u003e\n\u003cp\u003e那么，为什么整个互联网上都用了 TLS 了，为什么 不升级一下使用 mTLS？这里有两方面的原因：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e公共互联网上要解决的问题是：A) 确保用户访问到的是正确的网站，而不是钓鱼网站。B）网站传输的内容是安全和私密且不会被篡改的。\u003c/li\u003e\n\u003cli\u003e将 TLS 证书分发到所有最终用户设备将非常困难。生成、管理和验证为此所需的数十亿个证书几乎是不可能的任务。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在较小的范围内，mTLS 对于单个组织非常有用且非常实用，尤其是当这些组织采用零信任方法来确保网络安全时。由于默认情况下零信任方法不信任任何用户、设备或请求，因此组织必须能够在每次尝试访问网络中的任何点时对每个用户、设备和请求进行身份验证。mTLS 通过对用户进行身份验证和设备验证来帮助实现这一目标。\u003c/p\u003e\n\u003cp\u003e关于 mTLS，这里有一个我用 Golang 写的示例 – \u003ca href=\"https://github.com/haoel/mTLS\" target=\"_blank\" rel=\"noopener\"\u003ehttps://github.com/haoel/mTLS\u003c/a\u003e，大家可以参考一下。\u003c/p\u003e\n\u003cp\u003eP.S. 本文图版中的卡司来自安全圈的标准 Cast，参看\u003ca href=\"https://en.wikipedia.org/wiki/Alice_and_Bob\" target=\"_blank\" rel=\"noopener\"\u003e Alice and Bob\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/19395.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2019/05/Authorization-360x200-1-150x150.png\" alt=\"HTTP API 认证授权术\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/19395.html\" class=\"wp_rp_title\"\u003eHTTP API 认证授权术\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21003.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/06/time-bomb-150x150.png\" alt=\"计时攻击 Timing Attacks\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21003.html\" class=\"wp_rp_title\"\u003e计时攻击 Timing Attacks\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/19840.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2019/10/HTTP-770x513-300x200-1-150x150.jpg\" alt=\"HTTP的前世今生\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/19840.html\" class=\"wp_rp_title\"\u003eHTTP的前世今生\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18094.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/08/enable-https-banner-150x150.png\" alt=\"如何免费的让网站启用HTTPS\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18094.html\" class=\"wp_rp_title\"\u003e如何免费的让网站启用HTTPS\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17607.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/01/MongoDB-150x150.jpg\" alt=\"从 MongoDB “赎金事件” 看安全问题\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17607.html\" class=\"wp_rp_title\"\u003e从 MongoDB “赎金事件” 看安全问题\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17066.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2015/04/phishing-1-150x150.jpg\" alt=\"关于移动端的钓鱼式攻击\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17066.html\" class=\"wp_rp_title\"\u003e关于移动端的钓鱼式攻击\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-21708\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"e5951c7854\"\u003e\u003cimg id=\"rating_21708_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(21708, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.1, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-32a7b5e178c6e77a1acf68e5-=\"\"/\u003e\u003cimg id=\"rating_21708_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(21708, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.1, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-32a7b5e178c6e77a1acf68e5-=\"\"/\u003e\u003cimg id=\"rating_21708_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(21708, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.1, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-32a7b5e178c6e77a1acf68e5-=\"\"/\u003e\u003cimg id=\"rating_21708_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(21708, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.1, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-32a7b5e178c6e77a1acf68e5-=\"\"/\u003e\u003cimg id=\"rating_21708_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(21708, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.1, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-32a7b5e178c6e77a1acf68e5-=\"\"/\u003e (\u003cstrong\u003e32\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.13\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_21708_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"网络数字身份认证术\"/\u003e\u003cmeta itemprop=\"headline\" content=\"网络数字身份认证术\"/\u003e\u003cmeta itemprop=\"description\" content=\"这篇文章是《HTTP API 认证授权术》的姊妹篇，在那篇文章中，主要介绍了 HTTP API 认证和授权技术中用到的 HTTP Basic, Digest Access, HMAC, OAuth, JWT 等各种方式，主要是 API 上用到的一些技术，这篇文章主要想说的是另一个话题——身份认证。也就是说，怎么确认这个数据就是这个人发出来的？\n\n用户密码\n\n要解决这个问题，我们先来看一个最简单的解...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2022-01-02T16:38:13+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2022-02-12T13:10:15+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/21708.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/21708.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.13\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"32\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-21708-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2022-01-02T16:38:13+08:00",
  "Author": "陈皓"
}