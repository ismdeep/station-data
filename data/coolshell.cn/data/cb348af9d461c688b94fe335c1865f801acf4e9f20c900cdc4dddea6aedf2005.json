{
  "Source": "coolshell.cn",
  "Title": "由苹果的低级Bug想到的",
  "Link": "https://coolshell.cn/articles/11112.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"ab249851c049b98db95d2958-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright size-full wp-image-11123\" src=\"https://coolshell.cn/wp-content/uploads/2014/02/apple_goto_fail.png\" alt=\"\" width=\"260\" height=\"158\"/\u003e 2014年2月22日，在这个“这么二”的日子里，苹果公司推送了 iOS 7.0.6（版本号11B651）修复了 SSL 连接验证的一个 bug。官方网页在这里：\u003ca href=\"http://support.apple.com/kb/HT6147\" target=\"_blank\"\u003ehttp://support.apple.com/kb/HT6147\u003c/a\u003e，网页中如下描述：\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eImpact\u003c/strong\u003e: An attacker with a privileged network position may capture or modify data in sessions protected by SSL/TLS\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDescription\u003c/strong\u003e: Secure Transport failed to validate the authenticity of the connection. This issue was addressed by restoring missing validation steps.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e也就是说，这个bug会引起中间人攻击，bug的描述中说，这个问题是因为miss了对连接认证的合法性检查的步骤。\u003c/p\u003e\n\u003cp\u003e这里多说一句，\u003cstrong\u003e一旦网上发生任何的和SSL/TL相关的bug或安全问题，不管是做为用户，还是做为程序员的你，你一定要高度重视起来\u003c/strong\u003e。因为这个网络通信的加密协议被广泛的应用在很多很多最最需要安全的地方，如果SSL/TLS有问题的话，意味着这个世界的计算机安全体系的崩溃。\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#Bug%E7%9A%84%E4%BB%A3%E7%A0%81%E5%8E%9F%E5%9B%A0\" title=\"Bug的代码原因\"\u003eBug的代码原因\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83\" title=\"一些思考\"\u003e一些思考\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#0%EF%BC%89%E5%85%B3%E4%BA%8E%E7%BC%96%E8%AF%91%E6%8A%A5%E8%AD%A6\" title=\"0）关于编译报警\"\u003e0）关于编译报警\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#1%EF%BC%89%E5%85%B3%E4%BA%8ECode_Merge_%E5%92%8C_Code_Review\" title=\"1）关于Code Merge 和 Code Review\"\u003e1）关于Code Merge 和 Code Review\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#2%EF%BC%89%E5%85%B3%E4%BA%8E%E6%B5%8B%E8%AF%95\" title=\"2）关于测试\"\u003e2）关于测试\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#3%EF%BC%89%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC\" title=\"3）关于编码风格\"\u003e3）关于编码风格\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#4%EF%BC%89%E5%85%B3%E4%BA%8Egoto%E8%AF%AD%E5%8F%A5\" title=\"4）关于goto语句\"\u003e4）关于goto语句\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#%E6%80%BB%E7%BB%93\" title=\"总结\"\u003e总结\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Bug%E7%9A%84%E4%BB%A3%E7%A0%81%E5%8E%9F%E5%9B%A0\"\u003e\u003c/span\u003eBug的代码原因\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003eAdam Langley的《\u003ca href=\"https://www.imperialviolet.org/2014/02/22/applebug.html\"\u003eApple’s SSL/TLS bug\u003c/a\u003e 》的博文暴出了这个bug的细节。（在苹果的开源网站上，通过查看苹果的和SSL/TLS有关的代码变更，我们可以在文件\u003ca href=\"http://opensource.apple.com/source/Security/Security-55471/libsecurity_ssl/lib/sslKeyExchange.c\" target=\"_blank\"\u003esslKeyExchange.c\u003c/a\u003e中找到下面的代码）\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-11112\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"12\"\u003estatic OSStatus\nSSLVerifySignedServerKeyExchange(SSLContext *ctx, bool isRsa, SSLBuffer signedParams,\n                                 uint8_t *signature, UInt16 signatureLen)\n{\n\tOSStatus        err;\n\t...\n\n\tif ((err = SSLHashSHA1.update(\u0026amp;hashCtx, \u0026amp;serverRandom)) != 0)\n\t\tgoto fail;\n\tif ((err = SSLHashSHA1.update(\u0026amp;hashCtx, \u0026amp;signedParams)) != 0)\n\t\tgoto fail;\n\t\tgoto fail;\n\tif ((err = SSLHashSHA1.final(\u0026amp;hashCtx, \u0026amp;hashOut)) != 0)\n\t\tgoto fail;\n\terr = sslRawVerify(ctx,\n                       ctx-\u0026gt;peerPubKey,\n                       dataToSign,\t\t\t\t/* plaintext */\n                       dataToSignLen,\t\t\t/* plaintext length */\n                       signature,\n                       signatureLen);\n\tif(err) {\n\t\tsslErrorLog(\u0026#34;SSLDecodeSignedServerKeyExchange: sslRawVerify \u0026#34;\n                    \u0026#34;returned %d\\n\u0026#34;, (int)err);\n\t\tgoto fail;\n\t}\n\nfail:\n    SSLFreeBuffer(\u0026amp;signedHashes);\n    SSLFreeBuffer(\u0026amp;hashCtx);\n    return err;\n}\u003c/pre\u003e\n\u003cp\u003e注意，我高亮的地方，也就是那里有两个goto fail; 因为if语句没有加大括号，所以，只有第一个goto是属于if的，而第二个goto则是永远都会被执行到的（注：这里不是Python是C语言，缩进不代表这个语句属于同一个语句块）。也就是说，就算是前面的if检查都失败了（err  == 0），也会goto fail。我们可以看到fail标签中释放完内存后就会return err;\u003c/p\u003e\n\u003cp\u003e你想一下，\u003cstrong\u003e这段程序在SSLHashSHA1.update()  返回成功，也就是返回0 的时候会发生什么样的事？是的，真正干活的 sslRawVerify()被bypass了。而且这个函数SSLVerifySignedServerKeyExchange() 还返回了0，也就是成功了！\u003c/strong\u003e尼玛！你可能想到酷壳网上之前《\u003ca title=\"一个空格引发的惨剧\" href=\"https://coolshell.cn/articles/4875.html\" target=\"_blank\"\u003e一个空格引发的惨剧\u003c/a\u003e》的文章。都是低级bug。\u003c/p\u003e\n\u003cp\u003e这个低级bug在这个周末在网上被炒翻了天，你可以\u003cstrong\u003e\u003ca href=\"https://twitter.com/search?q=%23gotofail\" target=\"_blank\"\u003e上Twiter上看看#gotofail的标签的盛况\u003c/a\u003e\u003c/strong\u003e。\u003cstrong\u003eGoto Fail必然会成为历史上的一个经典事件\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e如果你喜欢XKCD，你一定会想到这个漫画：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter\" src=\"https://sslimgs.xkcd.com/comics/goto.png\" alt=\"\" width=\"740\" height=\"201\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"line-height: 1.5em;\"\u003e\u003cstrong\u003e注意\u003c/strong\u003e：这个bug不会影响TLS 1.2版本，因为1.2版本不会用这个函数，走的是另一套机制。但是别忘了client端是可以选择版本的。\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e如果你想测试一下你的浏览器是否会有问题，\u003cstrong\u003e你可以上一下当天就上线的\u003ca href=\"https://gotofail.com/\" target=\"_blank\"\u003e https://gotofail.com\u003c/a\u003e 网站\u003c/strong\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83\"\u003e\u003c/span\u003e一些思考\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e下面是我对这个问题的一些思考。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"0%EF%BC%89%E5%85%B3%E4%BA%8E%E7%BC%96%E8%AF%91%E6%8A%A5%E8%AD%A6\"\u003e\u003c/span\u003e0）关于编译报警\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e有人在说苹果的这个代码中的goto语句会产生死代码——dead code，也就是永远都不会执行到的代码，C/C++的编程器是会报警的。但，实际上，dead code在默认上的不会报警的。即使你加上-Wall，GCC 4.8.2 或 Clang 3.3 都不会报警，包括Visual Studio 2012在默认的报警级别也不会（默认是/W3级，需要上升到/W4级以上，但是升级到/W4上，你的工程可能会有N多的Warning，你不一定能看得过来）。gcc和Clang有一个参数叫：-Wunreachable-code，是可以对这种情况报警的，但即没有被包括在-Wall里。原因是，这个参数有很多的问题，因为编译器的优化代码的行为，这个参数并不能对每种情况都准确地报告。另请注意，GCC的新版本中剔除了这个参数。当然，其它一些静态的代码检查工具也可以检查这个低级的问题。\u003c/p\u003e\n\u003cp\u003e另外，是不是用IDE的代码自动化格式工具也可以帮上一点忙呢？至少可以把那个缩进变成让人一看就觉得有问题。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"1%EF%BC%89%E5%85%B3%E4%BA%8ECode_Merge_%E5%92%8C_Code_Review\"\u003e\u003c/span\u003e1）关于Code Merge 和 Code Review\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e你可以通过这里的代码比较看到这个bug的diff，也可以到\u003ca href=\"https://gist.github.com/alexyakoubian/9151610/revisions\" target=\"_blank\"\u003e这里看看\u003c/a\u003e（631行）。\u003c/p\u003e\n\u003cblockquote style=\"font-size: 11px;\"\u003e\u003cp\u003ediff -urN \u0026lt;(curl -s http://opensource.apple.com/source/Security/Security-55179.13/libsecurity_ssl/lib/sslKeyExchange.c\\?txt) \\ \u0026lt;(curl -s http://opensource.apple.com/source/Security/Security-55471/libsecurity_ssl/lib/sslKeyExchange.c\\?txt) \\\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e通过code diff你可以看到，\u003cstrong\u003e苹果公司是在重构代码——为很多函数去掉了ctx的参数\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e所以，我们可以猜测，两个goto fail语句，可能是因为对code在不同branch上做merge发生的。版本工具merge代码的时候，经常性的会出现这样的问题。如果代码的diff很多，这个问题会很容易就没有注意到。就算有code review，这个有问题的代码也很难被找出来的。\u003cstrong\u003e如果你来review下面的diff，你会注意到这个错误吗？\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter\" src=\"https://coolshell.cn/wp-content/uploads/2014/02/gotofail.jpg\" alt=\"\" width=\"560\" height=\"275\"/\u003e\u003c/p\u003e\n\u003cp\u003e也就是说，在重构分支上的代码是对的，但是在分支merge的时候，被merge工具搞乱了。所以说，\u003cstrong\u003e我们在做code merge的时候，一定要小心小心再小心，不能完全相信merge工具\u003c/strong\u003e。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"2%EF%BC%89%E5%85%B3%E4%BA%8E%E6%B5%8B%E8%AF%95\"\u003e\u003c/span\u003e2）关于测试\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e很明显，这个bug很难被code review发现。对于重构代码和代码merge里众多的diff，是很难被review的。\u003c/p\u003e\n\u003cp\u003e当然，“事后诸葛亮”的人们总是很容易地说这个问题可以被测试发现，但是实际情况是这样的吗？\u003c/p\u003e\n\u003cp\u003e这个问题也很难被功能测试发现，因为这个函数在是在网络握手里很深的地方，功能 测试不一定能覆盖得那么深，你要写这样的case，必需对TLS的协议栈非常熟悉，熟悉到对他所有的参数都很熟悉，并能写出针对每一个参数以及这些参数的组合做一堆test case，这个事情也是一件很复杂的事。要写出所有的case本身就是一件很难很难的事情。关于这个叫SSLVerifySignedServerKeyExchange()函数的细节，你可以看看相关的\u003ca href=\"https://tools.ietf.org/html/rfc5246#section-7.4.3\"\u003eServerKeyExchange\u003c/a\u003e RFC文档。\u003c/p\u003e\n\u003cp\u003e如果只看这个问题的话，你会说对这个函数做的 Unit Test 可以发现这个问题，是的。但是，别忘了SSL/TLS这么多年了，这些基础函数都应该是很稳定的了， 在事前，我们可能不会想到要去为这些稳定了多少年的函数写几个Unit Test。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e只要有足够多的时间，我们是可以对所有的功能点，所有的函数都做UT，也可以去追求做代码覆盖和分支覆盖一样。但有一点我们却永远无法做到，那就是——穷举所有的负面案例\u003c/strong\u003e。所以，对于测试来说，我们不能走极端，需要更聪明的测试。就像我在《\u003ca title=\"我们需要专职的QA吗？\" href=\"https://coolshell.cn/articles/6994.html\" target=\"_blank\"\u003e我们需要专职的QA\u003c/a\u003e》文章里的说过的——\u003cstrong\u003e测试比coding难度大多了，测试这个工作只有高级的开发人员才做得好。我从来不相信不写代码的人能做好测试。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e这里，\u003cstrong\u003e我并不是说通过测试来发现这个问题的可能性不大，我想说的是，测试很重要，单测更重要。但是，我们无法面面俱到\u003c/strong\u003e。在我们没有关注到的地方，总会发生愚蠢的错误。\u003c/p\u003e\n\u003cp\u003eP.S.，在各大网站对这个事的讨论中，我们可以看到OS X下的curl命令居然可以接受一个没有验证过的IP地址的https的请求，虽然现在还没有人知道这事的原因，但是，这可能是没有在测试中查到的一个原因。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"3%EF%BC%89%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC\"\u003e\u003c/span\u003e3）关于编码风格\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cspan style=\"line-height: 1.5em;\"\u003e对于程序员来说，在C语言中，省掉语句大括号是一件非常不明智 的事情。如我们强制使用语句块括号，那么，这两个goto fail都会在一个if的语句块里，而且也容易维护并且易读。（另外，通过这个bug，我们可以感受到，像Python那样，用缩进来表示语句块，的确是挺好的一件事）\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e也有人说，如果你硬要用只有单条语句，且不用语句块括号，那么，这就是一条语句，应该放在同一行上。如下所示：\u003c/p\u003e\n\u003cp\u003e\u003ccode data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eif  (check_something)   do_something(); \u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e但是这样一来，你在单步调试代码的时候，就有点不爽了，当你step over的时候，你完全不知道if的条件是真还是假。所以，还是分多行，加上大括号会好一些。\u003c/p\u003e\n\u003cp\u003e相似的问题，我很十多年前也犯过，而且那次我出的问题也比较大，导致了用户的数据出错。那次就是维护别人的代码，别人的代码就是没有if的语句块括号，就像苹果的代码那样。\u003cspan style=\"line-height: 1.5em;\"\u003e我想在return z之前调用一个函数，结果就杯具了：\u003c/span\u003e\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\" data-enlighter-highlight=\"6\"\u003eif ( ...... )\n    return x;\nif ( ...... )\n    return y;\nif ( ...... )\n    foo();\n    return z;\u003c/pre\u003e\n\u003cp\u003e这个错误一不小心就犯了，因为人的大脑会相当然地认为缩进的都是一个语句块里的。但是如果原来的代码都加上了大括号，然后把缩进做正常，那么对后面维护的人会是一个非常好的事情。就不会犯我这个低级错误了。就像下面的代码一样，虽然写起来有点罗嗦，但利人利己。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eif ( ...... ){\n    return x;\n}\nif ( ...... ){\n    return y;\n}\nif ( ...... ){\n    return z;\n}\u003c/pre\u003e\n\u003cp\u003e与此类似的代码风格还有如下，你觉得哪个更容易阅读呢？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eif (!p)    和  if (p == NULL)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003eif (p)    和  if (p != NULL)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003eif (!bflag)  和 if  (bflag == false)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003eif ( CheckSomthing() )  和 if ( CheckSomething() == true )\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e另外还有很多人在switch 语句里用case来做if，也就是说case后面没有break。就像\u003ca href=\"https://en.wikipedia.org/wiki/Duff\u0026#39;s_device\" target=\"_blank\"\u003eDuff’s Device\u003c/a\u003e一样，再配以goto，代码就写得相当精彩了（这里\u003ca href=\"https://github.com/agentzh/luajit2/blob/master/src/host/buildvm.c#L395\" target=\"_blank\"\u003e有个例子\u003c/a\u003e）\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"line-height: 1.5em;\"\u003e所以说，代码不是炫酷的地方是给别人读的。\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e另外，我在想，为什么苹果的这段代码不写成下面这样的形式？你看，下面这种情况不也很干净吗？\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eif (  ((err = ReadyHash(\u0026amp;SSLHashSHA1, \u0026amp;hashCtx)) != 0 )\n       || ((err = SSLHashSHA1.update(\u0026amp;hashCtx, \u0026amp;clientRandom)) != 0)\n       || ((err = SSLHashSHA1.update(\u0026amp;hashCtx, \u0026amp;serverRandom) != 0)\n       || ((err = SSLHashSHA1.update(\u0026amp;hashCtx, \u0026amp;signedParams) != 0)\n       || ((err = SSLHashSHA1.final(\u0026amp;hashCtx, \u0026amp;hashOut)) != 0)) {\n\n     goto fail;\n}\n\u003c/pre\u003e\n\u003cp\u003e其实，还可以做一些代码上的优化，比如，把fail标签里的那些东西写成一个宏，这样就可以去掉goto语句了。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"4%EF%BC%89%E5%85%B3%E4%BA%8Egoto%E8%AF%AD%E5%8F%A5\"\u003e\u003c/span\u003e4）关于goto语句\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e关于goto语句，1968年，\u003ca href=\"https://en.wikipedia.org/wiki/Edsger_Dijkstra\"\u003eEdsger Dijkstra\u003c/a\u003e 投了一篇文章到Communications of the ACM。原本的标题是《A Case Against the Goto Statement》。CACM编辑\u003ca href=\"https://en.wikipedia.org/wiki/Niklaus_Wirth\"\u003eNiklaus Wirth\u003c/a\u003e灵感来了，把标题改为我们熟知的 《\u003ca href=\"http://www.u.arizona.edu/~rubinson/copyright_violations/Go_To_Considered_Harmful.html\" target=\"_blank\"\u003eGo To Statement Considered Harmful\u003c/a\u003e》Dijkstra写的内容也是其一贯的犀利语气，文中说：“几年前我就观察到，一个程序员的品质是其程序中goto语句的密度成反比的”，他还说，“后来我发现了为什么goto语句的使用有这么严重的后果，并相信所有高级语言都应该把goto废除掉。”  （\u003cstrong\u003e花絮\u003c/strong\u003e：因为，这篇文章的出现，计算学界开始用’ \u003ca href=\"https://en.wikipedia.org/wiki/Considered_harmful\"\u003eX considered harmful\u003c/a\u003e ‘当文章标题的风潮，直到\u003ca href=\"http://meyerweb.com/eric/comment/chech.html\"\u003e有人终于受不了\u003c/a\u003e为止）\u003c/p\u003e\n\u003cp\u003e为什么goto语句不好呢？Dijkstra说，一个变量代表什么意义要看其上下文。一个程序用N\u003ccode\u003e\u003c/code\u003e记录房间里的人数，在大部分时候，N\u003ccode\u003e\u003c/code\u003e代表的是“目前房间里的人”。但在观察到又有一个人进房间后、把N\u003ccode\u003e\u003c/code\u003e递增的指令前的这段程序区块中，N\u003ccode\u003e\u003c/code\u003e的值代表的是“目前房间里的人数加一”。因此，要正确诠释程序的状态，必须知道程序执行的历史，或着说，知道现在“算到哪”了。\u003c/p\u003e\n\u003cp\u003e怎么谈“算到哪了”？如果是一直线执行下来的程序，我们只要指到那条语句，说“就是这里”，就可以了。如果是有循环程序，我们可能得说：“现在在循环的这个地方，循环已经执行了第\u003ccode\u003ei\u003c/code\u003e次”。如果是在函数中，我们可能得说：“现在执行到函数\u003ccode\u003ep\u003c/code\u003e的这一点；\u003ccode\u003ep\u003c/code\u003e刚刚被\u003ccode\u003eq调用\u003c/code\u003e，调用点在一个循环中，这个循环已经执行了\u003ccode\u003ei\u003c/code\u003e次”。\u003c/p\u003e\n\u003cp\u003e如果有goto\u003ccode\u003e语句了\u003c/code\u003e呢？那就麻烦了。因为电脑在执行某个指令前，可能是从程序中许许多多goto\u003ccode\u003e\u003c/code\u003e其中之一跳过来的。要谈某变量的性质也几乎变得不可能了。这就是为什么goto语句问题。\u003c/p\u003e\n\u003cp\u003eDijkstra的这篇文章对后面很多程序员有非常深的影响，包括我在内，都觉得Goto语句能不用就不用，虽然，我在十年前的《\u003ca href=\"http://blog.csdn.net/haoel/article/month/2003/05\" target=\"_blank\"\u003e编程修养\u003c/a\u003e》（这篇文章已经严重过时，某些条目已经漏洞百出）中的\u003ca href=\"http://blog.csdn.net/haoel/article/details/2876\" target=\"_blank\"\u003e第23条\u003c/a\u003e也说过，我只认为在goto语句只有一种情况可以使用，就是苹果这个bug里的用法。但是我也同意Dijkstra，goto语句能不用就不用了。就苹果的这个问题而言，在更为高级的C++中，\u003ca href=\"https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization\" target=\"_blank\"\u003e使用RAII技术\u003c/a\u003e，这样的goto语句已经没有什么存在的意义了。\u003c/p\u003e\n\u003cp\u003eDijkstra这篇文章后来成为结构化程式论战最有名的文章之一。长达19年之后，Frank Rubin投了一篇文章到CACM,标题为《\u003ca href=\"http://www.ecn.purdue.edu/ParaMount/papers/rubin87goto.pdf\"\u003e‘ \u003ccode\u003e\u003c/code\u003eGo To Considered Harmful’ Considered Harmful\u003c/a\u003e 》Rubin说，「虽然Dijkstra的说法既太学术又缺乏说服力」，却似乎烙到每个程序员的心里了。这样，当有人说“用goto语句来解这题可能会比较好”会被严重鄙视。于是Rubin出了一道这样的题：令\u003ccode\u003eX\u003c/code\u003e为\u003ccode\u003eN * N\u003c/code\u003e的整数阵列。如果\u003ccode\u003eX\u003c/code\u003e的第\u003ccode\u003ei\u003c/code\u003e行全都是零，请输出\u003ccode\u003ei\u003c/code\u003e。如果不只一行，输出最小的\u003ccode\u003ei\u003c/code\u003e .\u003c/p\u003e\n\u003cp\u003eRubin找了一些惯用goto和不用goto的程序员来解题，发现用goto的程序又快又清楚。而不用goto通常花了更多的时间，写出很复杂的解答。你觉得呢？ 另外，你会怎么写这题的程序呢？\u003c/p\u003e\n\u003cp\u003e（\u003cstrong\u003e花絮\u003c/strong\u003e：以后几个月的CACM热闹死了。编辑收到许多回应，两个月后刊出了其中五篇。文章也包括了《\u003ca href=\"http://www.ecn.purdue.edu/ParaMount/papers/acm_may87.pdf\"\u003e“‘GOTO Considered Harmful’ Considered Harmful” Considered Harmful?\u003c/a\u003e 》）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e对于我而言，goto语句的弊远远大于利，在99%的情况下，我是站在反goto这边的\u003c/strong\u003e。Java和Python就没有提供Goto语句，原因就是因为goto语句很容易被滥用！\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e更新：2014年3月5日\u003c/strong\u003e – RedHat 近日也发现个GnuTLS安全问题，与苹果的类似：无法正确检验特定的伪造SSL证书，这个总是会将伪造证书识别为有效证书。虽然Redhat的代码为if加上了花括号，但还是因为没有控制好goto，造成了bug。所以说啊，goto语句的坑是很多。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBUG页面：\u003ca href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1069865\" target=\"_blank\"\u003ehttps://bugzilla.redhat.com/show_bug.cgi?id=1069865\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e相关的Diff: \u003ca href=\"https://bugzilla.redhat.com/attachment.cgi?id=867911\u0026amp;action=diff\" target=\"_blank\"\u003ehttps://bugzilla.redhat.com/attachment.cgi?id=867911\u0026amp;action=diff\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003egoto语句在写代码的时候也许你会很爽，但是在维护的时候，绝对是一堆坑！redhat的这个patch为原来本来只有一个label的goto又加了另一个label，现在两个label交差goto，继续挖坑……\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%80%BB%E7%BB%93\"\u003e\u003c/span\u003e总结\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e你看，我们不能完全消灭问题，但是，我们可以用下面几个手段来减少问题：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）\u003cstrong\u003e尽量在编译上发生错误，而不是在运行时\u003c/strong\u003e。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）\u003cstrong\u003e代码是让人读的，顺便让机器运行\u003c/strong\u003e。不要怕麻烦，好的代码风格，易读的代码会减少很多问题。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e3）\u003cstrong\u003eCode Review是一件很严肃的事情\u003c/strong\u003e，但 Code Reivew的前提条件是代码的可读性一定要很好。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e4）\u003cstrong\u003e测试是一件很重要也是很难的事情，尤其是开发人员要非常重视\u003c/strong\u003e。\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e5）\u003cstrong\u003e不要走飞线，用飞线来解决问题是可耻的！\u003c/strong\u003e所以，用goto语句来组织代码的时代过去了，你可以有很多种方式不用goto也可以把代码组织得很好。\u003c/p\u003e\n\u003cp\u003e最后，我在淘宝过去的一年里，经历过一些P1/P2故障，尤其是去年的8-9月份故障频发的月份，我发现其中有70%的P1/P2故障，就是因为没有code review，没有做好测试，大量地用飞线来解决问题，归根结底就是只重业务结果，对技术没有应有的严谨的态度和敬畏之心。\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"color: #cc0000;\"\u003e\u003cstrong\u003e正如苹果的这个“goto fail”事件所暗喻的，如果你对技术没有应有的严谨和敬畏之心，你一定会——\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp style=\"text-align: center; font-size: 36px; color: #cc0000; font-family: Georgia,;\"\u003e\u003cstrong\u003eGo To Fail !!!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e在这里唠叨这么多，与大家共勉！\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/03/rust-social-wide-150x150.jpg\" alt=\"Rust语言的编程范式\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_title\"\u003eRust语言的编程范式\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/07/api-design-300x278-2-150x150.jpg\" alt=\"API设计原则 – Qt官网的设计实践总结\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_title\"\u003eAPI设计原则 – Qt官网的设计实践总结\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"Leetcode 编程训练\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_title\"\u003eLeetcode 编程训练\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12012.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/10/edsm-150x150.gif\" alt=\"State Threads 回调终结者\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12012.html\" class=\"wp_rp_title\"\u003eState Threads 回调终结者\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11466.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/04/c99-150x150.jpg\" alt=\"C语言的整型溢出问题\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11466.html\" class=\"wp_rp_title\"\u003eC语言的整型溢出问题\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-11112\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"fd86dfc4c7\"\u003e\u003cimg id=\"rating_11112_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(11112, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-ab249851c049b98db95d2958-=\"\"/\u003e\u003cimg id=\"rating_11112_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(11112, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-ab249851c049b98db95d2958-=\"\"/\u003e\u003cimg id=\"rating_11112_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(11112, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-ab249851c049b98db95d2958-=\"\"/\u003e\u003cimg id=\"rating_11112_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(11112, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-ab249851c049b98db95d2958-=\"\"/\u003e\u003cimg id=\"rating_11112_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(11112, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.5, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-ab249851c049b98db95d2958-=\"\"/\u003e (\u003cstrong\u003e58\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.47\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_11112_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"由苹果的低级Bug想到的\"/\u003e\u003cmeta itemprop=\"headline\" content=\"由苹果的低级Bug想到的\"/\u003e\u003cmeta itemprop=\"description\" content=\" 2014年2月22日，在这个“这么二”的日子里，苹果公司推送了 iOS 7.0.6（版本号11B651）修复了 SSL 连接验证的一个 bug。官方网页在这里：http://support.apple.com/kb/HT6147，网页中如下描述：\nImpact: An attacker with a privileged network position may capture or modi...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2014-02-24T08:12:11+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2014-08-22T18:16:48+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/11112.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/11112.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.47\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"58\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-11112-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2014-02-24T08:12:11+08:00",
  "Author": "陈皓"
}