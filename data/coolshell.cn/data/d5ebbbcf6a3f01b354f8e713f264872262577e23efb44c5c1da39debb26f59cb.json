{
  "Source": "coolshell.cn",
  "Title": "C++ 虚函数表解析",
  "Link": "https://coolshell.cn/articles/12165.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"a1908e0a485f44423e1896cc-text/javascript\"\u003e\u003c/script\u003eC++中的虚函数的作用主要是实现了多态的机制。关于多态，简而言之就是用父类型别的指针指向其子类的实例，然后通过父类的指针调用实际子类的成员函数。这种技术可以让父类的指针有“多种形态”，这是一种泛型技术。所谓泛型技术，说白了就是试图使用不变的代码来实现可变的算法。比如：模板技术，RTTI技术，虚函数技术，要么是试图做到在编译时决议，要么试图做到运行时决议。\u003c/p\u003e\n\u003cp\u003e关于虚函数的使用方法，我在这里不做过多的阐述。大家可以看看相关的C++的书籍。在这篇文章中，我只想从虚函数的实现机制上面为大家 一个清晰的剖析。\u003c/p\u003e\n\u003cp\u003e当然，相同的文章在网上也出现过一些了，但我总感觉这些文章不是很容易阅读，大段大段的代码，没有图片，没有详细的说明，没有比较，没有举一反三。不利于学习和阅读，所以这是我想写下这篇文章的原因。也希望大家多给我提意见。\u003c/p\u003e\n\u003cp\u003e言归正传，让我们一起进入虚函数的世界。\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E8%99%9A%E5%87%BD%E6%95%B0%E8%A1%A8\" title=\"虚函数表\"\u003e虚函数表\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E4%B8%80%E8%88%AC%E7%BB%A7%E6%89%BF%EF%BC%88%E6%97%A0%E8%99%9A%E5%87%BD%E6%95%B0%E8%A6%86%E7%9B%96%EF%BC%89\" title=\"一般继承（无虚函数覆盖）\"\u003e一般继承（无虚函数覆盖）\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#%E4%B8%80%E8%88%AC%E7%BB%A7%E6%89%BF%EF%BC%88%E6%9C%89%E8%99%9A%E5%87%BD%E6%95%B0%E8%A6%86%E7%9B%96%EF%BC%89\" title=\"一般继承（有虚函数覆盖）\"\u003e一般继承（有虚函数覆盖）\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%EF%BC%88%E6%97%A0%E8%99%9A%E5%87%BD%E6%95%B0%E8%A6%86%E7%9B%96%EF%BC%89\" title=\"多重继承（无虚函数覆盖）\"\u003e多重继承（无虚函数覆盖）\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%EF%BC%88%E6%9C%89%E8%99%9A%E5%87%BD%E6%95%B0%E8%A6%86%E7%9B%96%EF%BC%89\" title=\"多重继承（有虚函数覆盖）\"\u003e多重继承（有虚函数覆盖）\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#%E5%AE%89%E5%85%A8%E6%80%A7\" title=\"安全性\"\u003e安全性\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#%E4%B8%80%E3%80%81%E9%80%9A%E8%BF%87%E7%88%B6%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%8C%87%E9%92%88%E8%AE%BF%E9%97%AE%E5%AD%90%E7%B1%BB%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E5%87%BD%E6%95%B0\" title=\"一、通过父类型的指针访问子类自己的虚函数\"\u003e一、通过父类型的指针访问子类自己的虚函数\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#%E4%BA%8C%E3%80%81%E8%AE%BF%E9%97%AEnon-public%E7%9A%84%E8%99%9A%E5%87%BD%E6%95%B0\" title=\"二、访问non-public的虚函数\"\u003e二、访问non-public的虚函数\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-9\" href=\"#%E7%BB%93%E6%9D%9F%E8%AF%AD\" title=\"结束语\"\u003e结束语\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-10\" href=\"#%E9%99%84%E5%BD%95%E4%B8%80%EF%BC%9AVC%E4%B8%AD%E6%9F%A5%E7%9C%8B%E8%99%9A%E5%87%BD%E6%95%B0%E8%A1%A8\" title=\"附录一：VC中查看虚函数表\"\u003e附录一：VC中查看虚函数表\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-11\" href=\"#%E9%99%84%E5%BD%95_%E4%BA%8C%EF%BC%9A%E4%BE%8B%E7%A8%8B\" title=\"附录 二：例程\"\u003e附录 二：例程\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E8%99%9A%E5%87%BD%E6%95%B0%E8%A1%A8\"\u003e\u003c/span\u003e虚函数表\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e对C++ 了解的人都应该知道虚函数（Virtual Function）是通过一张虚函数表（Virtual Table）来实现的。简称为V-Table。在这个表中，主是要一个类的虚函数的地址表，这张表解决了继承、覆盖的问题，保证其容真实反应实际的函数。这样，在有虚函数的类的实例中这个表被分配在了这个实例的内存中，所以，当我们用父类的指针来操作一个子类的时候，这张虚函数表就显得由为重要了，它就像一个地图一样，指明了实际所应该调用的函数。\u003c/p\u003e\n\u003cp\u003e这里我们着重看一下这张虚函数表。C++的编译器应该是保证虚函数表的指针存在于对象实例中最前面的位置（这是为了保证取到虚函数表的有最高的性能——如果有多层继承或是多重继承的情况下）。 这意味着我们通过对象实例的地址得到这张虚函数表，然后就可以遍历其中函数指针，并调用相应的函数。\u003c/p\u003e\n\u003cp\u003e听我扯了那么多，我可以感觉出来你现在可能比以前更加晕头转向了。 没关系，下面就是实际的例子，相信聪明的你一看就明白了。\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-12165\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e假设我们有这样的一个类：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eclass Base {\n     public:\n            virtual void f() { cout \u0026lt;\u0026lt; \u0026#34;Base::f\u0026#34; \u0026lt;\u0026lt; endl; }\n            virtual void g() { cout \u0026lt;\u0026lt; \u0026#34;Base::g\u0026#34; \u0026lt;\u0026lt; endl; }\n            virtual void h() { cout \u0026lt;\u0026lt; \u0026#34;Base::h\u0026#34; \u0026lt;\u0026lt; endl; }\n\n};\u003c/pre\u003e\n\u003cp\u003e按照上面的说法，我们可以通过Base的实例来得到虚函数表。 下面是实际例程：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003etypedef void(*Fun)(void);\n\nBase b;\n\nFun pFun = NULL;\n\ncout \u0026lt;\u0026lt; \u0026#34;虚函数表地址：\u0026#34; \u0026lt;\u0026lt; (int*)(\u0026amp;b) \u0026lt;\u0026lt; endl;\ncout \u0026lt;\u0026lt; \u0026#34;虚函数表 — 第一个函数地址：\u0026#34; \u0026lt;\u0026lt; (int*)*(int*)(\u0026amp;b) \u0026lt;\u0026lt; endl;\n\n// Invoke the first virtual function\npFun = (Fun)*((int*)*(int*)(\u0026amp;b));\npFun();\u003c/pre\u003e\n\u003cp\u003e实际运行经果如下：(Windows XP+VS2003, Linux 2.6.22 + GCC 4.1.3)\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e虚函数表地址：0012FED4\u003cbr/\u003e\n虚函数表 — 第一个函数地址：0044F148\u003cbr/\u003e\nBase::f\u003c/p\u003e\n\u003cp\u003e通过这个示例，我们可以看到，我们可以通过强行把\u0026amp;b转成int *，取得虚函数表的地址，然后，再次取址就可以得到第一个虚函数的地址了，也就是Base::f()，这在上面的程序中得到了验证（把int* 强制转成了函数指针）。通过这个示例，我们就可以知道如果要调用Base::g()和Base::h()，其代码如下：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e(Fun)*((int*)*(int*)(\u0026amp;b)+0);  // Base::f()\n(Fun)*((int*)*(int*)(\u0026amp;b)+1);  // Base::g()\n(Fun)*((int*)*(int*)(\u0026amp;b)+2);  // Base::h()\u003c/pre\u003e\n\u003cp\u003e这个时候你应该懂了吧。什么？还是有点晕。也是，这样的代码看着太乱了。没问题，让我画个图解释一下。如下所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" class=\"aligncenter size-full wp-image-12166\" src=\"https://coolshell.cn/wp-content/uploads/2014/12/01.jpg\" alt=\"01\" width=\"331\" height=\"129\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/12/01.jpg 331w, https://coolshell.cn/wp-content/uploads/2014/12/01-300x117.jpg 300w\" sizes=\"(max-width: 331px) 100vw, 331px\"/\u003e\u003c/p\u003e\n\u003cp\u003e注意：在上面这个图中，我在虚函数表的最后多加了一个结点，这是虚函数表的结束结点，就像字符串的结束符“/0”一样，其标志了虚函数表的结束。这个结束标志的值在不同的编译器下是不同的。在WinXP+VS2003下，这个值是NULL。而在Ubuntu 7.10 + Linux 2.6.22 + GCC 4.1.3下，这个值是如果1，表示还有下一个虚函数表，如果值是0，表示是最后一个虚函数表。\u003c/p\u003e\n\u003cp\u003e下面，我将分别说明“无覆盖”和“有覆盖”时的虚函数表的样子。没有覆盖父类的虚函数是毫无意义的。我之所以要讲述没有覆盖的情况，主要目的是为了给一个对比。在比较之下，我们可以更加清楚地知道其内部的具体实现。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%B8%80%E8%88%AC%E7%BB%A7%E6%89%BF%EF%BC%88%E6%97%A0%E8%99%9A%E5%87%BD%E6%95%B0%E8%A6%86%E7%9B%96%EF%BC%89\"\u003e\u003c/span\u003e一般继承（无虚函数覆盖）\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e下面，再让我们来看看继承时的虚函数表是什么样的。假设有如下所示的一个继承关系：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-12167\" src=\"https://coolshell.cn/wp-content/uploads/2014/12/02.jpg\" alt=\"02\" width=\"78\" height=\"194\"/\u003e\u003c/p\u003e\n\u003cp\u003e请注意，在这个继承关系中，子类没有重载任何父类的函数。那么，在派生类的实例中，其虚函数表如下所示：\u003c/p\u003e\n\u003cp\u003e对于实例：Derive d; 的虚函数表如下：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-12168\" src=\"https://coolshell.cn/wp-content/uploads/2014/12/03.jpg\" alt=\"03\" width=\"551\" height=\"124\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/12/03.jpg 551w, https://coolshell.cn/wp-content/uploads/2014/12/03-300x67.jpg 300w\" sizes=\"(max-width: 551px) 100vw, 551px\"/\u003e\u003c/p\u003e\n\u003cp\u003e我们可以看到下面几点：\u003cbr/\u003e\n1）虚函数按照其声明顺序放于表中。\u003cbr/\u003e\n2）父类的虚函数在子类的虚函数前面。\u003c/p\u003e\n\u003cp\u003e我相信聪明的你一定可以参考前面的那个程序，来编写一段程序来验证。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%B8%80%E8%88%AC%E7%BB%A7%E6%89%BF%EF%BC%88%E6%9C%89%E8%99%9A%E5%87%BD%E6%95%B0%E8%A6%86%E7%9B%96%EF%BC%89\"\u003e\u003c/span\u003e一般继承（有虚函数覆盖）\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e覆盖父类的虚函数是很显然的事情，不然，虚函数就变得毫无意义。下面，我们来看一下，如果子类中有虚函数重载了父类的虚函数，会是一个什么样子？假设，我们有下面这样的一个继承关系。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-12169\" src=\"https://coolshell.cn/wp-content/uploads/2014/12/04.jpg\" alt=\"04\" width=\"78\" height=\"194\"/\u003e\u003c/p\u003e\n\u003cp\u003e为了让大家看到被继承过后的效果，在这个类的设计中，我只覆盖了父类的一个函数：f()。那么，对于派生类的实例，其虚函数表会是下面的一个样子：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-12170\" src=\"https://coolshell.cn/wp-content/uploads/2014/12/05.jpg\" alt=\"05\" width=\"500\" height=\"124\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/12/05.jpg 500w, https://coolshell.cn/wp-content/uploads/2014/12/05-300x74.jpg 300w\" sizes=\"(max-width: 500px) 100vw, 500px\"/\u003e\u003c/p\u003e\n\u003cp\u003e我们从表中可以看到下面几点，\u003cbr/\u003e\n1）覆盖的f()函数被放到了虚表中原来父类虚函数的位置。\u003cbr/\u003e\n2）没有被覆盖的函数依旧。\u003c/p\u003e\n\u003cp\u003e这样，我们就可以看到对于下面这样的程序，\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eBase *b = new Derive();\n\nb-\u0026gt;f();\u003c/pre\u003e\n\u003cp\u003e由b所指的内存中的虚函数表的f()的位置已经被Derive::f()函数地址所取代，于是在实际调用发生时，是Derive::f()被调用了。这就实现了多态。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%EF%BC%88%E6%97%A0%E8%99%9A%E5%87%BD%E6%95%B0%E8%A6%86%E7%9B%96%EF%BC%89\"\u003e\u003c/span\u003e多重继承（无虚函数覆盖）\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e下面，再让我们来看看多重继承中的情况，假设有下面这样一个类的继承关系。注意：子类并没有覆盖父类的函数。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-12171\" src=\"https://coolshell.cn/wp-content/uploads/2014/12/06.jpg\" alt=\"06\" width=\"282\" height=\"192\"/\u003e\u003c/p\u003e\n\u003cp\u003e对于子类实例中的虚函数表，是下面这个样子：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-12172\" src=\"https://coolshell.cn/wp-content/uploads/2014/12/07.jpg\" alt=\"07\" width=\"493\" height=\"173\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/12/07.jpg 493w, https://coolshell.cn/wp-content/uploads/2014/12/07-300x105.jpg 300w\" sizes=\"(max-width: 493px) 100vw, 493px\"/\u003e\u003c/p\u003e\n\u003cp\u003e我们可以看到：\u003cbr/\u003e\n1） 每个父类都有自己的虚表。\u003cbr/\u003e\n2） 子类的成员函数被放到了第一个父类的表中。（所谓的第一个父类是按照声明顺序来判断的）\u003c/p\u003e\n\u003cp\u003e这样做就是为了解决不同的父类类型的指针指向同一个子类实例，而能够调用到实际的函数。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%EF%BC%88%E6%9C%89%E8%99%9A%E5%87%BD%E6%95%B0%E8%A6%86%E7%9B%96%EF%BC%89\"\u003e\u003c/span\u003e多重继承（有虚函数覆盖）\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e下面我们再来看看，如果发生虚函数覆盖的情况。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-12173\" src=\"https://coolshell.cn/wp-content/uploads/2014/12/08.jpg\" alt=\"08\" width=\"282\" height=\"192\"/\u003e\u003c/p\u003e\n\u003cp\u003e下图中，我们在子类中覆盖了父类的f()函数。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-12174\" src=\"https://coolshell.cn/wp-content/uploads/2014/12/09.jpg\" alt=\"09\" width=\"420\" height=\"173\" srcset=\"https://coolshell.cn/wp-content/uploads/2014/12/09.jpg 420w, https://coolshell.cn/wp-content/uploads/2014/12/09-300x123.jpg 300w\" sizes=\"(max-width: 420px) 100vw, 420px\"/\u003e\u003c/p\u003e\n\u003cp\u003e下面是对于子类实例中的虚函数表的图：\u003c/p\u003e\n\u003cp\u003e我们可以看见，三个父类虚函数表中的f()的位置被替换成了子类的函数指针。这样，我们就可以任一静态类型的父类来指向子类，并调用子类的f()了。如：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eDerive d;\nBase1 *b1 = \u0026amp;d;\nBase2 *b2 = \u0026amp;d;\nBase3 *b3 = \u0026amp;d;\nb1-\u0026gt;f(); //Derive::f()\nb2-\u0026gt;f(); //Derive::f()\nb3-\u0026gt;f(); //Derive::f()\n\nb1-\u0026gt;g(); //Base1::g()\nb2-\u0026gt;g(); //Base2::g()\nb3-\u0026gt;g(); //Base3::g()\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%AE%89%E5%85%A8%E6%80%A7\"\u003e\u003c/span\u003e安全性\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e每次写C++的文章，总免不了要批判一下C++。这篇文章也不例外。通过上面的讲述，相信我们对虚函数表有一个比较细致的了解了。水可载舟，亦可覆舟。下面，让我们来看看我们可以用虚函数表来干点什么坏事吧。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%B8%80%E3%80%81%E9%80%9A%E8%BF%87%E7%88%B6%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%8C%87%E9%92%88%E8%AE%BF%E9%97%AE%E5%AD%90%E7%B1%BB%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E5%87%BD%E6%95%B0\"\u003e\u003c/span\u003e一、通过父类型的指针访问子类自己的虚函数\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e我们知道，子类没有重载父类的虚函数是一件毫无意义的事情。因为多态也是要基于函数重载的。虽然在上面的图中我们可以看到Base1的虚表中有Derive的虚函数，但我们根本不可能使用下面的语句来调用子类的自有虚函数：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eBase1 *b1 = new Derive();\nb1-\u0026gt;f1();  //编译出错\u003c/pre\u003e\n\u003cp\u003e任何妄图使用父类指针想调用子类中的\u003cstrong\u003e未覆盖父类的成员函数\u003c/strong\u003e的行为都会被编译器视为非法，所以，这样的程序根本无法编译通过。但在运行时，我们可以通过指针的方式访问虚函数表来达到违反C++语义的行为。（关于这方面的尝试，通过阅读后面附录的代码，相信你可以做到这一点）\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%BA%8C%E3%80%81%E8%AE%BF%E9%97%AEnon-public%E7%9A%84%E8%99%9A%E5%87%BD%E6%95%B0\"\u003e\u003c/span\u003e二、访问non-public的虚函数\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e另外，如果父类的虚函数是private或是protected的，但这些非public的虚函数同样会存在于虚函数表中，所以，我们同样可以使用访问虚函数表的方式来访问这些non-public的虚函数，这是很容易做到的。\u003c/p\u003e\n\u003cp\u003e如：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eclass Base {\n    private:\n            virtual void f() { cout \u0026lt;\u0026lt; \u0026#34;Base::f\u0026#34; \u0026lt;\u0026lt; endl; }\n\n};\n\nclass Derive : public Base{\n\n};\n\ntypedef void(*Fun)(void);\n\nvoid main() {\n    Derive d;\n    Fun  pFun = (Fun)*((int*)*(int*)(\u0026amp;d)+0);\n    pFun();\n}\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%BB%93%E6%9D%9F%E8%AF%AD\"\u003e\u003c/span\u003e结束语\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003eC++这门语言是一门Magic的语言，对于程序员来说，我们似乎永远摸不清楚这门语言背着我们在干了什么。需要熟悉这门语言，我们就必需要了解C++里面的那些东西，需要去了解C++中那些危险的东西。不然，这是一种搬起石头砸自己脚的编程语言。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%99%84%E5%BD%95%E4%B8%80%EF%BC%9AVC%E4%B8%AD%E6%9F%A5%E7%9C%8B%E8%99%9A%E5%87%BD%E6%95%B0%E8%A1%A8\"\u003e\u003c/span\u003e附录一：VC中查看虚函数表\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e我们可以在VC的IDE环境中的Debug状态下展开类的实例就可以看到虚函数表了（并不是很完整的）\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%99%84%E5%BD%95_%E4%BA%8C%EF%BC%9A%E4%BE%8B%E7%A8%8B\"\u003e\u003c/span\u003e附录 二：例程\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e下面是一个关于多重继承的虚函数表访问的例程：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;iostream\u0026gt;\nusing namespace std;\n\nclass Base1 {\npublic:\n            virtual void f() { cout \u0026lt;\u0026lt; \u0026#34;Base1::f\u0026#34; \u0026lt;\u0026lt; endl; }\n            virtual void g() { cout \u0026lt;\u0026lt; \u0026#34;Base1::g\u0026#34; \u0026lt;\u0026lt; endl; }\n            virtual void h() { cout \u0026lt;\u0026lt; \u0026#34;Base1::h\u0026#34; \u0026lt;\u0026lt; endl; }\n\n};\n\nclass Base2 {\npublic:\n            virtual void f() { cout \u0026lt;\u0026lt; \u0026#34;Base2::f\u0026#34; \u0026lt;\u0026lt; endl; }\n            virtual void g() { cout \u0026lt;\u0026lt; \u0026#34;Base2::g\u0026#34; \u0026lt;\u0026lt; endl; }\n            virtual void h() { cout \u0026lt;\u0026lt; \u0026#34;Base2::h\u0026#34; \u0026lt;\u0026lt; endl; }\n};\n\nclass Base3 {\npublic:\n            virtual void f() { cout \u0026lt;\u0026lt; \u0026#34;Base3::f\u0026#34; \u0026lt;\u0026lt; endl; }\n            virtual void g() { cout \u0026lt;\u0026lt; \u0026#34;Base3::g\u0026#34; \u0026lt;\u0026lt; endl; }\n            virtual void h() { cout \u0026lt;\u0026lt; \u0026#34;Base3::h\u0026#34; \u0026lt;\u0026lt; endl; }\n};\n\nclass Derive : public Base1, public Base2, public Base3 {\npublic:\n            virtual void f() { cout \u0026lt;\u0026lt; \u0026#34;Derive::f\u0026#34; \u0026lt;\u0026lt; endl; }\n            virtual void g1() { cout \u0026lt;\u0026lt; \u0026#34;Derive::g1\u0026#34; \u0026lt;\u0026lt; endl; }\n};\n\ntypedef void(*Fun)(void);\n\nint main()\n{\n            Fun pFun = NULL;\n\n            Derive d;\n            int** pVtab = (int**)\u0026amp;d;\n\n            //Base1\u0026#39;s vtable\n            //pFun = (Fun)*((int*)*(int*)((int*)\u0026amp;d+0)+0);\n            pFun = (Fun)pVtab[0][0];\n            pFun();\n\n            //pFun = (Fun)*((int*)*(int*)((int*)\u0026amp;d+0)+1);\n            pFun = (Fun)pVtab[0][1];\n            pFun();\n\n            //pFun = (Fun)*((int*)*(int*)((int*)\u0026amp;d+0)+2);\n            pFun = (Fun)pVtab[0][2];\n            pFun();\n\n            //Derive\u0026#39;s vtable\n            //pFun = (Fun)*((int*)*(int*)((int*)\u0026amp;d+0)+3);\n            pFun = (Fun)pVtab[0][3];\n            pFun();\n\n            //The tail of the vtable\n            pFun = (Fun)pVtab[0][4];\n            cout\u0026lt;\u0026lt;pFun\u0026lt;\u0026lt;endl;\n\n            //Base2\u0026#39;s vtable\n            //pFun = (Fun)*((int*)*(int*)((int*)\u0026amp;d+1)+0);\n            pFun = (Fun)pVtab[1][0];\n            pFun();\n\n            //pFun = (Fun)*((int*)*(int*)((int*)\u0026amp;d+1)+1);\n            pFun = (Fun)pVtab[1][1];\n            pFun();\n\n            pFun = (Fun)pVtab[1][2];\n            pFun();\n\n            //The tail of the vtable\n            pFun = (Fun)pVtab[1][3];\n            cout\u0026lt;\u0026lt;pFun\u0026lt;\u0026lt;endl;\n\n            //Base3\u0026#39;s vtable\n            //pFun = (Fun)*((int*)*(int*)((int*)\u0026amp;d+1)+0);\n            pFun = (Fun)pVtab[2][0];\n            pFun();\n\n            //pFun = (Fun)*((int*)*(int*)((int*)\u0026amp;d+1)+1);\n            pFun = (Fun)pVtab[2][1];\n            pFun();\n\n            pFun = (Fun)pVtab[2][2];\n            pFun();\n\n            //The tail of the vtable\n            pFun = (Fun)pVtab[2][3];\n            cout\u0026lt;\u0026lt;pFun\u0026lt;\u0026lt;endl;\n\n            return 0;\n}\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e注：本文年代久远，所有的示例都是在32位机上跑的。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e(全文完)\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/03/rust-social-wide-150x150.jpg\" alt=\"Rust语言的编程范式\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_title\"\u003eRust语言的编程范式\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/07/api-design-300x278-2-150x150.jpg\" alt=\"API设计原则 – Qt官网的设计实践总结\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_title\"\u003eAPI设计原则 – Qt官网的设计实践总结\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"Leetcode 编程训练\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_title\"\u003eLeetcode 编程训练\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12012.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/10/edsm-150x150.gif\" alt=\"State Threads 回调终结者\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12012.html\" class=\"wp_rp_title\"\u003eState Threads 回调终结者\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11466.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/04/c99-150x150.jpg\" alt=\"C语言的整型溢出问题\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11466.html\" class=\"wp_rp_title\"\u003eC语言的整型溢出问题\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-12165\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"d2f26b42bb\"\u003e\u003cimg id=\"rating_12165_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(12165, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.1, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a1908e0a485f44423e1896cc-=\"\"/\u003e\u003cimg id=\"rating_12165_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(12165, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.1, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a1908e0a485f44423e1896cc-=\"\"/\u003e\u003cimg id=\"rating_12165_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(12165, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.1, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a1908e0a485f44423e1896cc-=\"\"/\u003e\u003cimg id=\"rating_12165_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(12165, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.1, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a1908e0a485f44423e1896cc-=\"\"/\u003e\u003cimg id=\"rating_12165_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(12165, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.1, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a1908e0a485f44423e1896cc-=\"\"/\u003e (\u003cstrong\u003e37\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.11\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_12165_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"C++ 虚函数表解析\"/\u003e\u003cmeta itemprop=\"headline\" content=\"C++ 虚函数表解析\"/\u003e\u003cmeta itemprop=\"description\" content=\"C++中的虚函数的作用主要是实现了多态的机制。关于多态，简而言之就是用父类型别的指针指向其子类的实例，然后通过父类的指针调用实际子类的成员函数。这种技术可以让父类的指针有“多种形态”，这是一种泛型技术。所谓泛型技术，说白了就是试图使用不变的代码来实现可变的算法。比如：模板技术，RTTI技术，虚函数技术，要么是试图做到在编译时决议，要么试图做到运行时决议。\n\n关于虚函数的使用方法，我在这里不做过...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2007-12-18T09:08:02+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2015-04-01T20:45:26+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/12165.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/12165.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.11\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"37\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-12165-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2007-12-18T09:08:02+08:00",
  "Author": "陈皓"
}