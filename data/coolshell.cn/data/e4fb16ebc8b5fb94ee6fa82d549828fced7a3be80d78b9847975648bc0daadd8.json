{
  "Source": "coolshell.cn",
  "Title": "Rust语言的编程范式",
  "Link": "https://coolshell.cn/articles/20845.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"a0caa24f2369b1c5759ecb39-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright size-sup_wechat_big wp-image-20925\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/rust-social-wide-360x200.jpg\" alt=\"\" width=\"360\" height=\"200\"/\u003e总是有很多很多人来问我对Rust语言怎么看的问题，在各种地方被at，其实，我不是很想表达我的想法。因为在不同的角度，你会看到不同的东西。编程语言这个东西，老实说很难评价，在学术上来说，Lisp就是很好的语言，然而在工程使用的时候，你会发现Lisp没什么人用，而Javascript或是PHP这样在学术很糟糕设计的语言反而成了主流，你觉得C++很反人类，在我看来，C++有很多不错的设计，而且对于了解编程语言和编译器的和原理非常有帮助。\u003cstrong\u003e但是C++也很危险，所以，出现在像Java或Go 语言来改善它，Rust本质上也是在改善C++的。他们各自都有各自的长处和优势\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e因为各个语言都有好有不好，因此，我不想用别的语言来说Rust的问题，或是把Rust吹成朵花以打压别的语言，写成这样的文章，是很没有营养的事。\u003cstrong\u003e本文主要想通过Rust的语言设计来看看编程中的一些挑战，尤其是Rust重要的一些编程范式，这样反而更有意义一些，因为这样你才可能一通百通\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e这篇文章的篇幅比较长，而且有很多代码，信息量可能会非常大，所以，\u003cstrong\u003e在读本文前，你需要有如下的知识准备\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e你对C++语言的一些特性和问题比较熟悉。尤其是：指针、引用、右值move、内存对象管理、泛型编程、智能指针……\u003c/li\u003e\n\u003cli\u003e当然，你还要略懂Rust，不懂也没太大关系，但本文不会是Rust的教程文章，可以参看“\u003ca href=\"https://doc.rust-lang.org/book/title-page.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eRust的官方教程\u003c/a\u003e”（\u003ca href=\"https://kaisery.github.io/trpl-zh-cn/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e中文版\u003c/a\u003e）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e因为本文太长，所以，我有必要写上 TL;DR ——\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-20845\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eJava 与 Rust 在改善C/C++上走了完全不同的两条路，他们主要改善的问题就是C/C++ Safety的问题。所谓C/C++编程安全上的问题，主要是：内存的管理、数据在共享中出现的“野指针”、“野引用”的问题。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e对于这些问题，Java用引用垃圾回收再加上强大的VM字节码技术可以进行各种像反射、字节码修改的黑魔法。\u003c/li\u003e\n\u003cli\u003e而Rust不玩垃圾回收，也不玩VM，所以，作为静态语言的它，只能在编译器上下工夫。如果要让编译器能够在编译时检查出一些安全问题，那么就需要程序员在编程上与Rust语言有一些约定了，其中最大的一个约定规则就是变量的所有权问题，并且还要在代码上“去糖”，比如让程序员说明一些共享引用的生命周期。\u003c/li\u003e\n\u003cli\u003eRust的这些所有权的约定造成了很大的编程上的麻烦，写Rust的程序时，基本上来说，你的程序再也不要想可能轻轻松松能编译通过了。而且，在面对一些场景的代码编写时，如：函数式的闭包，多线程的不变数据的共享，多态……开始变得有些复杂，并会让你有种找不到北的感觉。\u003c/li\u003e\n\u003cli\u003eRust的Trait很像Java的接口，通过Trait可以实现C++的拷贝构造、重载操作符、多态等操作……\u003c/li\u003e\n\u003cli\u003e学习Rust的学习曲线并不平，用Rust写程序，基本上来说，一旦编译通过，代码运行起来是安全的，bug也是很少的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e如果你对Rust的概念认识的不完整，你完全写不出程序，那怕就是很简单的一段代码\u003c/strong\u003e。\u003cstrong\u003e这逼着程序员必需了解所有的概念才能编码。但是，另一方面也表明了这门语言并不适合初学者……\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E5%8F%98%E9%87%8F%E7%9A%84%E5%8F%AF%E5%8F%98%E6%80%A7\" title=\"变量的可变性\"\u003e变量的可变性\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E5%8F%98%E9%87%8F%E7%9A%84%E6%89%80%E6%9C%89%E6%9D%83\" title=\"变量的所有权\"\u003e变量的所有权\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#Owner%E8%AF%AD%E4%B9%89%E5%B8%A6%E6%9D%A5%E7%9A%84%E5%A4%8D%E6%9D%82%E5%BA%A6\" title=\"Owner语义带来的复杂度\"\u003eOwner语义带来的复杂度\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#%E5%BC%95%E7%94%A8%EF%BC%88%E5%80%9F%E7%94%A8%EF%BC%89%E5%92%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\" title=\"引用（借用）和生命周期\"\u003e引用（借用）和生命周期\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#%E5%BC%95%E7%94%A8%EF%BC%88%E5%80%9F%E7%94%A8%EF%BC%89\" title=\"引用（借用）\"\u003e引用（借用）\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\" title=\"生命周期\"\u003e生命周期\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#%E9%97%AD%E5%8C%85%E4%B8%8E%E6%89%80%E6%9C%89%E6%9D%83\" title=\"闭包与所有权\"\u003e闭包与所有权\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#%E5%87%BD%E6%95%B0%E9%97%AD%E5%8C%85\" title=\"函数闭包\"\u003e函数闭包\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-9\" href=\"#%E7%BA%BF%E7%A8%8B%E9%97%AD%E5%8C%85\" title=\"线程闭包\"\u003e线程闭包\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-10\" href=\"#Rust%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88\" title=\"Rust的智能指针\"\u003eRust的智能指针\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-11\" href=\"#%E7%BA%BF%E7%A8%8B%E4%B8%8E%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88\" title=\"线程与智能指针\"\u003e线程与智能指针\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-12\" href=\"#%E5%A4%9A%E6%80%81%E5%92%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E8%AF%86%E5%88%AB\" title=\"多态和运行时识别\"\u003e多态和运行时识别\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-13\" href=\"#%E9%80%9A%E8%BF%87Trait%E5%A4%9A%E6%80%81\" title=\"通过Trait多态\"\u003e通过Trait多态\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-14\" href=\"#%E5%90%91%E4%B8%8B%E8%BD%AC%E5%9E%8B\" title=\"向下转型\"\u003e向下转型\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-15\" href=\"#Trait_%E9%87%8D%E8%BD%BD%E6%93%8D%E4%BD%9C%E7%AC%A6\" title=\"Trait 重载操作符\"\u003eTrait 重载操作符\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-16\" href=\"#%E5%B0%8F%E7%BB%93\" title=\"小结\"\u003e小结\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%8F%98%E9%87%8F%E7%9A%84%E5%8F%AF%E5%8F%98%E6%80%A7\"\u003e\u003c/span\u003e变量的可变性\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e首先，Rust里的变量声明默认是“不可变的”，如果你声明一个变量 \u003ccode\u003elet x = 5;\u003c/code\u003e  变量 \u003ccode\u003ex\u003c/code\u003e 是不可变的，也就是说，\u003ccode\u003ex = y + 10;\u003c/code\u003e 编译器会报错的。如果你要变量的话，你需要使用 \u003ccode\u003emut\u003c/code\u003e 关键词，也就是要声明成 \u003ccode\u003elet mut x = 5;\u003c/code\u003e 表示这是一个可以改变的变量。这个是比较有趣的，因为其它主流语言在声明变量时默认是可变的，而Rust则是要反过来。这可以理解，不可变的通常来说会有更好的稳定性，而可变的会代来不稳定性。所以，Rust应该是想成为更为安全的语言，所以，默认是 immutable 的变量。当然，Rust同样有 \u003ccode\u003econst\u003c/code\u003e 修饰的常量。于是，Rust可以玩出这么些东西来：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e常量：\u003ccode\u003econst LEN:u32 = 1024;\u003c/code\u003e 其中的 \u003ccode\u003eLEN\u003c/code\u003e 就是一个\u003ccode\u003eu32\u003c/code\u003e 的整型常量（无符号32位整型），是编译时用到的。\u003c/li\u003e\n\u003cli\u003e可变的变量： \u003ccode\u003elet mut x = 5;\u003c/code\u003e 这个就跟其它语言的类似， 在运行时用到。\u003c/li\u003e\n\u003cli\u003e不可变的变量：\u003ccode\u003elet x= 5;\u003c/code\u003e 对这种变量，你无论修改它，但是，你可以使用 \u003ccode\u003elet x = x + 10;\u003c/code\u003e 这样的方式来重新定义一个新的 \u003ccode\u003ex\u003c/code\u003e。这个在Rust里叫 Shadowing ，第二个 \u003ccode\u003ex\u003c/code\u003e  把第一个 \u003ccode\u003ex\u003c/code\u003e 给遮蔽了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e不可变的变量对于程序的稳定运行是有帮助的，这是一种编程“契约”，当处理契约为不可变的变量时，程序就可以稳定很多，尤其是多线程的环境下，因为不可变意味着只读不写，其他好处是，与易变对象相比，它们更易于理解和推理，并提供更高的安全性。有了这样的“契约”后，编译器也很容易在编译时查错了。这就是Rust语言的编译器的编译期可以帮你检查很多编程上的问题。\u003c/p\u003e\n\u003cp\u003e对于标识不可变的变量，在 C/C++中我们用\u003ccode\u003econst\u003c/code\u003e ，在Java中使用 \u003ccode\u003efinal\u003c/code\u003e ，在 C#中使用 \u003ccode\u003ereadonly\u003c/code\u003e ，Scala用 \u003ccode\u003eval\u003c/code\u003e ……（在Javascript 和Python这样的动态语言中，原始类型基本都是不可变的，而自定义类型是可变的）。\u003c/p\u003e\n\u003cp\u003e对于Rust的Shadowing，我个人觉得是比较危险的，在我的职业生涯中，这种使用同名变量（在嵌套的scope环境下）带来的bug还是很不好找的。一般来说，每个变量都应该有他最合适的名字，最好不要重名。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%8F%98%E9%87%8F%E7%9A%84%E6%89%80%E6%9C%89%E6%9D%83\"\u003e\u003c/span\u003e变量的所有权\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e这个是Rust这个语言中比较强调的一个概念。其实，在我们的编程中，很多情况下，都是把一个对象（变量）传递过来传递过去，在传递的过程中，传的是一份复本，还是这个对象本身，也就是所谓的“传值还是传引用”的被程序员问得最多的问题。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e传递副本（传值）\u003c/strong\u003e。把一个对象的复本传到一个函数中，或是放到一个数据结构容器中，可能需要出现复制的操作，这个复制对于一个对象来说，需要深度复制才安全，否则就会出现各种问题。而深度复制就会导致性能问题。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e传递对象本身（传引用）\u003c/strong\u003e。传引用也就是不需要考虑对象的复制成本，但是需要考虑对象在传递后，会多个变量所引用的问题。比如：我们把一个对象的引用传给一个List或其它的一个函数，这意味着，大家对同一个对象都有控制权，如果有一个人释放了这个对象，那边其它人就遭殃了，所以，一般会采用引用计数的方式来共享一个对象。引用除了共享的问题外，还有作用域的问题，比如：你从一个函数的栈内存中返回一个对象的引用给调用者，调用者就会收到一个被释放了个引用对象（因为函数结束后栈被清了）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这些东西在任何一个编程语言中都是必需要解决的问题，要足够灵活到让程序员可以根据自己的需要来写程序。\u003c/p\u003e\n\u003cp\u003e在C++中，如果你要传递一个对象，有这么几种方式：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e引用或指针。\u003c/strong\u003e也就是不建复本，完全共享，于是，但是会出现悬挂指针（\u003ca href=\"https://en.wikipedia.org/wiki/Dangling_pointer\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eDangling Pointer\u003c/a\u003e）又叫野指针的问题，也就是一个指针或引用指向一块废弃的内存。为了解决这个问题，C++的解决方案是使用 \u003ccode\u003eshare_ptr\u003c/code\u003e 这样的托管类来管理共享时的引用计数。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e传递复本\u003c/strong\u003e，传递一个拷贝，需要重载对象的“拷贝构造函数”和“赋值构造函数”。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e移动Move\u003c/strong\u003e。C++中，为了解决一些临时对象的构造的开销，可以使用Move操作，把一个对象的所有权移动到给另外一个对象，这个解决了C++中在传递对象时的会产生很多临时对象来影响性能的情况。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eC++的这些个“神操作”，可以让你非常灵活地在各种情况下传递对象，但是也提升整体语言的复杂度。而Java直接把C/C++的指针给废了，用了更为安全的引用 ，然后为了解决多个引用共享同一个内存，内置了引用计数和垃圾回收，于是整个复杂度大大降低。对于Java要传对象的复本的话，需要定义一个通过自己构造自己的构造函数，或是通过prototype设计模式的 \u003ccode\u003eclone()\u003c/code\u003e 方法来进行，如果你要让Java解除引用，需要明显的把引用变量赋成 \u003ccode\u003enull\u003c/code\u003e 。总之，无论什么语言都需要这对象的传递这个事做好，不然，无法提供相对比较灵活编程方法。\u003c/p\u003e\n\u003cp\u003e在Rust中，Rust强化了“所有权”的概念，下面是Rust的所有者的三大铁律：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eRust 中的每一个值都有一个被称为其 \u003cstrong\u003e所有者\u003c/strong\u003e（owner）的变量。\u003c/li\u003e\n\u003cli\u003e值有且只有一个所有者。\u003c/li\u003e\n\u003cli\u003e当所有者（变量）离开作用域，这个值将被丢弃。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e这意味着什么？\u003c/p\u003e\n\u003cp\u003e如果你需要传递一个对象的复本，你需要给这个对象实现 \u003ccode\u003eCopy\u003c/code\u003e trait ，\u003cstrong\u003etrait \u003c/strong\u003e怎么翻译我也不知道，你可以认为是一个对象的一些特别的接口（可以用于一些对像操作上的约定，比如：\u003ccode\u003eCopy\u003c/code\u003e 用于复制（类型于C++的拷贝构造和赋值操作符重载），\u003ccode\u003eDisplay\u003c/code\u003e 用于输出（类似于Java的 \u003ccode\u003etoString()\u003c/code\u003e），还有 \u003ccode\u003eDrop\u003c/code\u003e 和操作符重载等等，当然，也可以是对象的方法，或是用于多态的接口定义，后面会讲）。\u003c/p\u003e\n\u003cp\u003e对于内建的整型、布尔型、浮点型、字符型、多元组都被实现了 \u003ccode\u003eCopy\u003c/code\u003e 所以，在进行传递的时候，会进行\u003ccode\u003ememcpy\u003c/code\u003e 这样的复制（bit-wise式的浅拷贝）。而对于对象来说，则不行，在Rust的编程范式中，需要使用的是 \u003ccode\u003eClone\u003c/code\u003e trait。\u003c/p\u003e\n\u003cp\u003e于是，\u003ccode\u003eCopy\u003c/code\u003e 和 \u003ccode\u003eClone\u003c/code\u003e 这两个相似而又不一样的概念就出来了，\u003ccode\u003eCopy\u003c/code\u003e 主要是给内建类型，或是由内建类型全是支持 \u003ccode\u003eCopy\u003c/code\u003e 的对象，而 \u003ccode\u003eClone\u003c/code\u003e 则是给程序员自己复制对象的。嗯，这就是浅拷贝和深拷贝的差别，\u003ccode\u003eCopy\u003c/code\u003e 告诉编译器，我这个对象可以进行 bit-wise的复制，而 \u003ccode\u003eClone\u003c/code\u003e 则是指深度拷贝。\u003c/p\u003e\n\u003cp\u003e像 \u003ccode\u003eString\u003c/code\u003e 这样的内部需要在堆上分布内存的数据结构，是没有实现\u003ccode\u003eCopy\u003c/code\u003e 的（因为内部是一个指针，所以，语义上是深拷贝，浅拷贝会招至各种bug和crash），需要复制的话，必需手动的调用其 \u003ccode\u003eclone()\u003c/code\u003e 方法，如果不这样的的话，当在进行函数参数传递，或是变量传递的时候，所有权一下就转移了，而之前的变量什么也不是了（这里编译器会帮你做检查有没有使用到所有权被转走的变量）。这个相当于C++的Move语义。\u003c/p\u003e\n\u003cp\u003e参看下面的示例，你可能对Rust自动转移所有权会有更好的了解（代码中有注释了，我就不多说了）。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003e// takes_ownership 取得调用函数传入参数的所有权，因为不返回，所以变量进来了就出不去了\nfn takes_ownership(some_string: String) {\n    println!(\u0026#34;{}\u0026#34;, some_string);\n} // 这里，some_string 移出作用域并调用 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003edrop\u003c/code\u003e 方法。占用的内存被释放\n\n// gives_ownership 将返回值移动给调用它的函数\nfn gives_ownership() -\u0026gt; String {\n    let some_string = String::from(\u0026#34;hello\u0026#34;); // some_string 进入作用域.\n    some_string // 返回 some_string 并移出给调用的函数\n}\n\n// takes_and_gives_back 将传入字符串并返回该值\nfn takes_and_gives_back(mut a_string: String) -\u0026gt; String {\n    a_string.push_str(\u0026#34;, world\u0026#34;);\n    a_string  // 返回 a_string 将所有权移出给调用的函数\n}\n\nfn main()\n{\n    // gives_ownership 将返回值移给 s1\n    let s1 = gives_ownership();\n    // 所有权转给了 takes_ownership 函数, s1 不可用了\n    takes_ownership(s1);\n    // 如果编译下面的代码，会出现s1不可用的错误\n    // println!(\u0026#34;s1= {}\u0026#34;, s1);\n    //                    ^^ value borrowed here after move\n    let s2 = String::from(\u0026#34;hello\u0026#34;);// 声明s2\n    // s2 被移动到 takes_and_gives_back 中, 它也将返回值移给 s3。\n    // 而 s2 则不可用了。\n    let s3 = takes_and_gives_back(s2);\n    //如果编译下面的代码，会出现可不可用的错误\n    //println!(\u0026#34;s2={}, s3={}\u0026#34;, s2, s3);\n    //                         ^^ value borrowed here after move\n    println!(\u0026#34;s3={}\u0026#34;, s3);\n}\n\u003c/pre\u003e\n\u003cp\u003e这样的 Move 的方式，在性能上和安全性上都是非常有效的，而Rust的编译器会帮你检查出使用了所有权被move走的变量的错误。而且，我们还可以从函数栈上返回对象了，如下所示：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003efn new_person() -\u0026gt; Person {\n    let person = Person {\n        name : String::from(\u0026#34;Hao Chen\u0026#34;),\n        age : 44,\n        sex : Sex::Male,\n        email: String::from(\u0026#34;\u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"a2cac3cdc7cee2cacdd6cfc3cbce8cc1cdcf\"\u003e[email protected]\u003c/a\u003e\u0026#34;),\n    };\n    return person;\n}\n\nfn main() {\n   let p  = new_person();\n}\n\u003c/pre\u003e\n\u003cp\u003e因为对象是Move走的，所以，在函数上 \u003ccode\u003enew_person()\u003c/code\u003e 上返回的 \u003ccode\u003ePerson\u003c/code\u003e 对象是Move 语言，被Move到了 \u003ccode\u003emain()\u003c/code\u003e 函数中来，这样就没有性能上的问题了。而在C++中，我们需要把对象的Move函数给写出来才能做到。因为，C++默认是调用拷贝构造函数的，而不是Move的。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Owner%E8%AF%AD%E4%B9%89%E5%B8%A6%E6%9D%A5%E7%9A%84%E5%A4%8D%E6%9D%82%E5%BA%A6\"\u003e\u003c/span\u003eOwner语义带来的复杂度\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003eOwner + Move 的语义也会带来一些复杂度。首先，如果有一个结构体，我们把其中的成员 Move 掉了，会怎么样。参看如下的代码：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003e#[derive(Debug)] // 让结构体可以使用 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003e{:?}\u003c/code\u003e的方式输出\nstruct Person {\n    name :String,\n    email:String,\n}\n\nlet _name = p.name; // 把结构体 Person::name Move掉\nprintln!(\u0026#34;{} {}\u0026#34;, _name, p.email); //其它成员可以正常访问\nprintln!(\u0026#34;{:?}\u0026#34;, p); //编译出错 \u0026#34;value borrowed here after partial move\u0026#34;\np.name = \u0026#34;Hao Chen\u0026#34;.to_string(); // Person::name又有了。\nprintln!(\u0026#34;{:?}\u0026#34;, p); //可以正常的编译了\n\u003c/pre\u003e\n\u003cp\u003e上面这个示例，我们可以看到，结构体中的成员是可以被Move掉的，Move掉的结构实例会成为一个部分的未初始化的结构，如果需要访问整个结构体的成员，会出现编译问题。但是后面把 Person::name补上后，又可以愉快地工作了。\u003c/p\u003e\n\u003cp\u003e下面我们再看一个更复杂的示例——这个示例模拟动画渲染的场景，我们需要有两个buffer，一个是正在显示的，另一个是下一帧要显示的。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003estruct Buffer {\n    buffer : String,\n}\n\nstruct Render {\n    current_buffer : Buffer,\n    next_buffer : Buffer,\n}\n//实现结构体 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eRender\u003c/code\u003e 的方法\nimpl Render { \n    //实现 update_buffer() 方法，\n    //更新buffer，把 next 更新到 current 中，再更新 next\n    fn update_buffer(\u0026amp; mut self, buf : String) {\n        self.current_buffer = self.next_buffer;\n        self.next_buffer = Buffer{ buffer: buf};\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003e上面这段代码，我们写下来没什么问题，但是 Rust 编译不会让我们编译通过。它会告诉我们如下的错误：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"no-highlight\"\u003eerror[E0507]: cannot move out of \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eself.next_buffer\u003c/code\u003e which is behind a mutable reference\n--\u0026gt; /.........../xxx.rs:18:31\n|\n14 | self.current_buffer = self.next_buffer;\n|                          ^^^^^^^^^^^^^^^^ move occurs because \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eself.next_buffer\u003c/code\u003e has type \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eBuffer\u003c/code\u003e,\n                                            which does not implement the \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eCopy\u003c/code\u003e trait\u003c/pre\u003e\n\u003cp\u003e编译器会提示你，\u003ccode\u003eBuffer\u003c/code\u003e 没有 Copy trait 方法。\u003cstrong\u003e但是，如果你实现了 Copy 方法后，你又不能享受 Move 带来的性能上快乐了。于是，到这里，你开始进退两难了，完全不知道取舍了\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRust编译器不让我们在成员方法中把成员Move走，因为 \u003ccode\u003eself\u003c/code\u003e 引用就不完整了。\u003c/li\u003e\n\u003cli\u003eRust要我们实现 \u003ccode\u003eCopy\u003c/code\u003e Trait，但是我们不想要拷贝，因为我们就是想把 \u003ccode\u003enext_buffer\u003c/code\u003e move 到 \u003ccode\u003ecurrent_buffer\u003c/code\u003e 中\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e我们想要同时 Move 两个变量，参数 \u003ccode\u003ebuf\u003c/code\u003e move 到 \u003ccode\u003enext_buffer\u003c/code\u003e 的同时，还要把 \u003ccode\u003enext_buffer\u003c/code\u003e 里的东西 move 到 \u003ccode\u003ecurrent_buffer\u003c/code\u003e 中。 我们需要一个“杂耍”的技能。\u003cbr/\u003e\n\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-20872\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/indy.gif\" alt=\"\" width=\"500\" height=\"264\"/\u003e\u003c/p\u003e\n\u003cp\u003e这个需要动用 \u003ccode\u003estd::mem::replace(\u0026amp;dest, src)\u003c/code\u003e 函数了， 这个函数技把 \u003ccode\u003esrc\u003c/code\u003e 的值 move 到 \u003ccode\u003edest\u003c/code\u003e 中，然后把 \u003ccode\u003edest\u003c/code\u003e 再返回出来（这其中使用了 unsafe 的一些底层骚操作才能完成）。Anyway，最终是这样实现的：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003euse std::mem::replace\nfn update_buffer(\u0026amp; mut self, buf : String) { \n  self.current_buffer = replace(\u0026amp;mut self.next_buffer, Buffer{buffer : buf}); \n}\u003c/pre\u003e\n\u003cp\u003e不知道你觉得这样“杂耍”的代码看上去怎么以样？我觉得可读性下降一个数量级。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%BC%95%E7%94%A8%EF%BC%88%E5%80%9F%E7%94%A8%EF%BC%89%E5%92%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"\u003e\u003c/span\u003e引用（借用）和生命周期\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e下面，我们来讲讲引用，因为把对象的所有权 Move 走了的情况，在一些时候肯定不合适，比如，我有一个 \u003ccode\u003ecompare(s1: Student, s2: Student) -\u0026gt; bool\u003c/code\u003e 我想比较两个学生的平均份成绩， 我不想传复本，因为太慢，我也不想把所有权交进去，因为只是想计算其中的数据。这个时候，传引用就是一个比较好的选择，Rust同样支持传引用。只需要把上面的函数声明改成：\u003ccode\u003ecompare(s1 :\u0026amp;Student, s2 : \u0026amp;Student) -\u0026gt; bool\u003c/code\u003e 就可以了，在调用的时候，\u003ccode\u003ecompare (\u0026amp;s1, \u0026amp;s2);\u003c/code\u003e  与C++一致。在Rust中，这也叫“借用”（嗯，Rust发明出来的这些新术语，在语义上感觉让人更容易理解了，当然，也增加了学习的复杂度了）\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%BC%95%E7%94%A8%EF%BC%88%E5%80%9F%E7%94%A8%EF%BC%89\"\u003e\u003c/span\u003e引用（借用）\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e另外，如果你要修改这个引用对象，就需要使用“可变引用”，如：\u003ccode\u003efoo( s : \u0026amp;mut Student)\u003c/code\u003e 以及 \u003ccode\u003efoo( \u0026amp;mut s);\u003c/code\u003e另外，为了避免一些数据竞争需要进行数据同步的事，Rust严格规定了——\u003cstrong\u003e在任意时刻，要么只能有一个可变引用，要么只能有多个不可变引用\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e这些严格的规定会导致程序员失去编程的灵活性，不熟悉Rust的程序员可能会在一些编译错误下会很崩溃，但是你的代码的稳定性也会提高，bug率也会降低。\u003c/p\u003e\n\u003cp\u003e另外，Rust为了解决“野引用”的问题，也就是说，有多个变量引用到一个对象上，还不能使用额外的引用计数来增加程序运行的复杂度。那么，Rust就要管理程序中引用的生命周期了，而且还是要在编译期管理，如果发现有引用的生命周期有问题的，就要报错。比如：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003elet r;\n{\n    let x = 10;\n    r = \u0026amp;x;\n}\nprintln!(\u0026#34;r = {}\u0026#34;,r );\n\u003c/pre\u003e\n\u003cp\u003e上面的这段代码，程序员肉眼就能看到 \u003ccode\u003ex\u003c/code\u003e 的作用域比 \u003ccode\u003er\u003c/code\u003e  小，所以导致 \u003ccode\u003er\u003c/code\u003e 在 \u003ccode\u003eprintln()\u003c/code\u003e 的时候 \u003ccode\u003er\u003c/code\u003e 引用的 \u003ccode\u003ex\u003c/code\u003e 已经没有了。这个代码在C++中可以正常编译而且可以执行，虽然最后可以打出“内嵌作用域”的 \u003ccode\u003ex\u003c/code\u003e 的值，但其实这个值已经是有问题的了。而在 Rust 语言中，编译器会给出一个编译错误，告诉你，“\u003ccode\u003ex\u003c/code\u003e dropped here while still borrowed”，这个真是太棒了。\u003c/p\u003e\n\u003cp\u003e但是这中编译时检查的技术对于目前的编译器来说，只在程序变得稍微复杂一点，编译器的“失效引用”检查就不那么容易了。比如下面这个代码：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003efn order_string(s1 : \u0026amp;str, s2 : \u0026amp;str) -\u0026gt; (\u0026amp;str, \u0026amp;str) {\n    if s1.len() \u0026lt; s2.len() {\n        return (s1, s2);\n    }\n    return (s2, s1);\n}\n\nlet str1 = String::from(\u0026#34;long long long long string\u0026#34;);\nlet str2 = \u0026#34;short string\u0026#34;;\n\nlet (long_str, short_str) = order_string(str1.as_str(), str2);\n\nprintln!(\u0026#34; long={} nshort={} \u0026#34;, long_str, short_str);\n\u003c/pre\u003e\n\u003cp\u003e我们有两个字符串，\u003ccode\u003estr1\u003c/code\u003e 和 \u003ccode\u003estr2\u003c/code\u003e 我们想通过函数 \u003ccode\u003eorder_string()\u003c/code\u003e 把这两个字串符返回成 \u003ccode\u003elong_str\u003c/code\u003e 和 \u003ccode\u003eshort_str\u003c/code\u003e  这样方便后面的代码进行处理。这是一段很常见的处理代码的示例。然而，你会发现，这段代码编译不过。编译器会告诉你，\u003ccode\u003eorder_string()\u003c/code\u003e 返回的 引用类型 \u003ccode\u003e\u0026amp;str\u003c/code\u003e 需要一个 lifetime的参数 – “ expected lifetime parameter”。这是因为Rust编译无法通过观察静态代码分析返回的两个引用返回值，到底是\u003ccode\u003e(s1, s2)\u003c/code\u003e 还是 \u003ccode\u003e(s2, s1)\u003c/code\u003e ，因为这是运行时决定的。所以，返回值的两个参数的引用没法确定其生命周期到底是跟 \u003ccode\u003es1\u003c/code\u003e 还是跟 \u003ccode\u003es2\u003c/code\u003e，这个时候，编译器就不知道了。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"\u003e\u003c/span\u003e生命周期\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e如果你的代码是下面这个样子，编程器可以自己推导出来，函数 \u003ccode\u003efoo()\u003c/code\u003e 的参数和返回值都是一个引用，他们的生命周期是一样的，所以，也就可以编译通过。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003efn foo (s: \u0026amp;mut String) -\u0026gt; \u0026amp;String {\n    s.push_str(\u0026#34;coolshell\u0026#34;);\n    s\n}\n\nlet mut s = \u0026#34;hello, \u0026#34;.to_string();\nprintln!(\u0026#34;{}\u0026#34;, foo(\u0026amp;mut s))\n\u003c/pre\u003e\n\u003cp\u003e而对于传入多个引用，返回值可能是任一引用，这个时候编译器就犯糊涂了，因为不知道运行时的事，所以，就需要程序员来标注了。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003efn long_string\u0026lt;\u0026#39;c\u0026gt;(s1 : \u0026amp;\u0026#39;c str, s2 : \u0026amp;\u0026#39;c str) -\u0026gt; (\u0026amp;\u0026#39;c str, \u0026amp;\u0026#39;c str) {\n    if s1.len() \u0026gt; s2.len() {\n        return (s1, s2);\n    }\n    return (s2, s1);\n}\n\u003c/pre\u003e\n\u003cp\u003e上述的Rust的标注语法，用个单引号加一个任意字符串来标注（\u003ccode\u003e\u0026#39;static\u003c/code\u003e除外，这是一个关键词，表示生命周期跟整个程序一样长），然后，说明返回的那两个引用的生命周期跟 \u003ccode\u003es1\u003c/code\u003e 和 \u003ccode\u003es2\u003c/code\u003e 的生命周期相同，这个标注的目的就是把运行时的事变成了编译时的事。于是程序就可以编译通过了。（注：你也不要以为你可以用这个技术乱写生命周期，这只是一种“去语法糖操作”，是帮助编译器理解其中的生命周期，如果违反实际生命周期，编译器也是会拒绝编译的）\u003c/p\u003e\n\u003cp\u003e这里有两个说明，\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e只要你玩引用，生命周期标识就会来了。\u003c/li\u003e\n\u003cli\u003eRust编译器不知道运行时会发生什么事，所以，需要你来标注声明\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e我感觉，你现在开始有点头晕了吧？接下来，我们让你再晕一下。比如：如果你要在结构体中玩引用，那必需要为引用声明生命周期，如下所示：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003e// 引用 ref1 和 ref2 的生命周期与结构体一致\nstruct Test \u0026lt;\u0026#39;life\u0026gt; {\n    ref_int : \u0026amp;\u0026#39;life i32,\n    ref_str : \u0026amp;\u0026#39;life str,\n}\n\u003c/pre\u003e\n\u003cp\u003e其中，生命周期标识 \u003ccode\u003e\u0026#39;life\u003c/code\u003e 定义在结构体上，被使用于其成员引用上。意思是声明规则——“\u003cstrong\u003e结构体的生命周期 \u0026lt;= 成员引用的生命周期\u003c/strong\u003e”\u003c/p\u003e\n\u003cp\u003e然后，如果你要给这个结构实现两个 \u003ccode\u003eset\u003c/code\u003e 方法，你也得带上 lifetime 标识。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003eimp\u0026lt;\u0026#39;life\u0026gt; Test\u0026lt;\u0026#39;life\u0026gt; {\n    fn set_string(\u0026amp;mut self, s : \u0026amp;\u0026#39;life str) {\n        self.ref_str = s;\n    }\n    fn set_int(\u0026amp;mut self,  i : \u0026amp;\u0026#39;life i32) {\n        self.ref_int = i;\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003e在上面的这个示例中，生命周期变量 \u003ccode\u003e\u0026#39;life\u003c/code\u003e 声明在 \u003ccode\u003eimpl\u003c/code\u003e 上，用于结构体和其方法的入参上。 意思是声明规则——“\u003cstrong\u003e结构体方法的“引用参数”的生命周期 \u0026gt;= 结构体的生命周期\u003c/strong\u003e”\u003c/p\u003e\n\u003cp\u003e有了这些个生命周期的标识规则后，Rust就可以愉快地检查这些规则说明，并编译代码了。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%97%AD%E5%8C%85%E4%B8%8E%E6%89%80%E6%9C%89%E6%9D%83\"\u003e\u003c/span\u003e闭包与所有权\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e这种所有权和引用的严格区分和管理，会影响到很多地方，下面我们来看一下函数闭包中的这些东西的传递。函数闭包又叫Closure，是函数式编程中一个不可或缺的东西，又被称为lambda表达式，基本上所有的高级语言都会支持。在 Rust 语言中，其闭包函数的表示是用两根竖线（| |）中间加传如参数进行定义。如下所示：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003e// 定义了一个 x + y 操作的 lambda f(x, y) = x + y;\nlet plus = |x: i32, y:i32| x + y; \n// 定义另一个lambda g(x) = f(x, 5)\nlet plus_five = |x| plus(x, 5); \n//输出\nprintln!(\u0026#34;plus_five(10)={}\u0026#34;, plus_five(10) );\u003c/pre\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%87%BD%E6%95%B0%E9%97%AD%E5%8C%85\"\u003e\u003c/span\u003e函数闭包\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e但是一旦加上了上述的所有权这些东西后，问题就会变得复杂开来。参看下面的代码。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003estruct Person {\n    name : String,\n    age : u8,\n}\n\nfn main() {\n    let p = Person{ name: \u0026#34;Hao Chen\u0026#34;.to_string(), age : 44};\n    //可以运行，因为 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eu8\u003c/code\u003e 有 Copy Trait\n    let age = |p : Person| p.age; \n    // String 没有Copy Trait，所以，这里所有权就 Move 走了\n    let name = |p : Person | p.name; \n    println! (\u0026#34;name={}, age={}\u0026#34; , name(p), age(p));\n}\u003c/pre\u003e\n\u003cp\u003e上面的代码无法编译通过，因为Rust编译器发现在调用 \u003ccode\u003ename(p)\u003c/code\u003e 的时候，\u003ccode\u003ep\u003c/code\u003e 的所有权被移走了。然后，我们想想，改成引用的版本，如下所示：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003elet age = |p : \u0026amp;Person| p.age;\nlet name = |p : \u0026amp;Person | \u0026amp;p.name;\n\nprintln! (\u0026#34;name={}, age={}\u0026#34; , name(\u0026amp;p), age(\u0026amp;p));\u003c/pre\u003e\n\u003cp\u003e你会现在还是无法编译，报错中说：\u003cstrong\u003ecannot infer an appropriate lifetime for borrow expression due to conflicting requirements\u003c/strong\u003e\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"null\"\u003eerror[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n  --\u0026gt; src/main.rs:11:31\n   |\n11 |     let name = |p : \u0026amp;Person | \u0026amp;p.name;\n   |                               ^^^^^^^\u003c/pre\u003e\n\u003cp\u003e然后你开始尝试加 lifetime，用尽各种Rust的骚操作（官方Github上的\u003ca href=\"https://github.com/rust-lang/rust/issues/58052\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e #issue 58052\u003c/a\u003e），然后，还是无法让你的程序可以编译通过。最后，上StackOverflow 里寻找帮助，得到下面的正确写法（这个可能跟这个bug有关系：\u003ca href=\"https://github.com/rust-lang/rust/issues/41078\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e#issue 41078\u003c/a\u003e ）。但是这样的写法，已经让简洁的代码变得面目全非。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\" data-enlighter-highlight=\"7\"\u003e//下面的声明可以正确译\nlet name: for\u0026lt;\u0026#39;a\u0026gt; fn(\u0026amp;\u0026#39;a Person) -\u0026gt; \u0026amp;\u0026#39;a String = |p: \u0026amp;Person| \u0026amp;p.name;\u003c/pre\u003e\n\u003cp\u003e上面的这种lifetime的标识也是很奇葩，通过定义一个函数类型来做相关的标注，但是这个函数类型，需要用到 \u003ccode\u003efor\u0026lt;\u0026#39;a\u0026gt;\u003c/code\u003e 关键字。你可能会很confuse这个关键字不是用来做循环的吗？嗯，Rust这种重用关键字的作法，我个人觉得带来了很多不必要的复杂度。总之，这样的声明代码，我觉得基本不会有人能想得到的——“去语法糖操作太严重了，绝大多数人绝对hold不住”！\u003c/p\u003e\n\u003cp\u003e最后，我们再来看另一个问题，下面的代码无法编译通过：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003elet s = String::from(\u0026#34;coolshell\u0026#34;);\nlet take_str = || s;\nprintln!(\u0026#34;{}\u0026#34;, s); //ERROR\nprintln!(\u0026#34;{}\u0026#34;,  take_str()); // OK\u003c/pre\u003e\n\u003cp\u003eRust的编译器会告诉你，\u003ccode\u003etake_str\u003c/code\u003e  把 \u003ccode\u003es\u003c/code\u003e 的所有权给拿走了（因为需要作成返回值）。所以，后面的输出语句就用不到了。这里意味着：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e对于内建的类型，都实现了 \u003ccode\u003eCopy\u003c/code\u003e 的 trait，那么闭包执行的是 “借用”\u003c/li\u003e\n\u003cli\u003e对于没有实现 \u003ccode\u003eCopy\u003c/code\u003e 的trait，在闭包中可以调用其方法，是“借用”，但是不能当成返回值，当成返回值了就是“移动”。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e虽然有了这些“通常情况下是借用的潜规则”，但是还是不能满足一些情况，所以，还要让程序员可以定义 \u003ccode\u003emove\u003c/code\u003e 的“明规则”。下面的代码，一个有 move 一个没有move，他们的差别也不一样。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003e//-----------借用的情况-----------\nlet mut num = 5;\n{\n    let mut add_num = |x: i32| num += x;\n    add_num(5);\n}\nprintln!(\u0026#34;num={}\u0026#34;, num); //输出 10\n\n//-----------Move的情况-----------\nlet mut num = 5;\n{\n    // 把 num（5）所有权给 move 到了 add_num 中，\n    // 使用其成为闭包中的局部变量。\n    let mut add_num = move |x: i32| num += x;\n    add_num(5);\n    println!(\u0026#34;num(move)={}\u0026#34;, num); //输出10\n}\n//因为i32实现了 \u003ccode data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\"\u003eCopy\u003c/code\u003e，所以，这里还可以访问\nprintln!(\u0026#34;num(move)={}\u0026#34;, num); //输出5\u003c/pre\u003e\n\u003cp\u003e真是有点头大了，int这样的类型，因为实现了Copy Trait，所以，所有权被移走后，意味着，在内嵌块中的\u003ccode\u003enum\u003c/code\u003e 和外层的 \u003ccode\u003enum\u003c/code\u003e 是两个完全不相干的变量。\u003cstrong\u003e但是你在读代码的时候，你的大脑可能并不会让你这么想，因为里面的那个num又没有被声明过，应该是外层的\u003c/strong\u003e。我个人觉得这是Rust 各种“按下葫芦起了瓢”的现象。\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%BA%BF%E7%A8%8B%E9%97%AD%E5%8C%85\"\u003e\u003c/span\u003e线程闭包\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e通过上面的示例，我们可以看到， \u003ccode\u003emove\u003c/code\u003e 关键词，可以把闭包外使用到的变量给移动到闭包内，成为闭包内的一个局部变量。这种方式，在多线程的方式下可以让线程运行地更为的安全。参看如下代码：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003elet name = \u0026#34;CoolShell\u0026#34;.to_string();\nlet t = thread::spawn(move || {\n    println!(\u0026#34;Hello, {}\u0026#34;, name);\n});\nprintln!(\u0026#34;wait {:?}\u0026#34;, t.join());\u003c/pre\u003e\n\u003cp\u003e首先，线程 \u003ccode\u003ethread::spawn()\u003c/code\u003e 里的闭包函数是不能带参数的，因为是闭包，所以可以使用这个可见范围内的变量，但是，问题来了，因为是另一个线程，所以，这代表其和其它线程（如：主线程）开始共享数据了，所以，在Rust下，要求把使用到的变量给 Move 到线程内，这就保证了安全的问题—— \u003ccode\u003ename\u003c/code\u003e 在线程中永远不会失效，而且不会被别人改了。\u003c/p\u003e\n\u003cp\u003e你可能会有一些疑问，你会质疑到\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一方面，这个 \u003ccode\u003ename\u003c/code\u003e 变量又没有声明成 \u003ccode\u003emut\u003c/code\u003e 这意味着不变，没必要使用move语义也是安全的。\u003c/li\u003e\n\u003cli\u003e另一方面，如果我想把这个 \u003ccode\u003ename\u003c/code\u003e 传递到多个线程里呢？\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e嗯，是的，但是Rust的线程必需是 move的，不管是不是可变的，不然编译不过去。如果你想把一个变量传到多个线程中，你得创建变量的复本，也就是调用 \u003ccode\u003eclone()\u003c/code\u003e 方法。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\" data-enlighter-highlight=\"2,7\"\u003elet name = \u0026#34;CoolShell\u0026#34;.to_string();\nlet name1 = name.clone();\nlet t1 = thread::spawn(move || {\n    println!(\u0026#34;Hello, {}\u0026#34;, name.clone());\n})\nlet t2 = thread::spawn(move || {\n    println!(\u0026#34;Hello, {}\u0026#34;, name1.clone());\n});\nprintln!(\u0026#34;wait t1={:?}, t2={:?}\u0026#34;, t1.join(), t2.join());\u003c/pre\u003e\n\u003cp\u003e然后，你说，这种clone的方式成本不是很高？设想，如果我要用多线程对一个很大的数组做统计，这种clone的方式完全吃不消。嗯，是的。这个时候，需要使用另一个技术，智能指针了。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Rust%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88\"\u003e\u003c/span\u003eRust的智能指针\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e如果你看到这里还不晕的话，那么，我的文章还算成功（如果晕的话，请告诉我，我会进行改善）。接下来我们来讲讲Rust的智能指针和多态。\u003c/p\u003e\n\u003cp\u003e因为有些内存需要分配在Heap（堆）上，而不是Stack（堆）上，Stack上的内存一般是编译时决定的，所以，编译器需要知道你的数组、结构体、枚举等这些数据类型的长度，没有长度是无法编译的，而且长度也不能太大，Stack上的内存大小是有限，太大的内存会有StackOverflow的错误。所以，对于更大的内存或是动态的内存分配需要分配在Heap上。学过C/C++的同学对于这个概念不会陌生。\u003c/p\u003e\n\u003cp\u003eRust 作为一个内存安全的语言，这个堆上分配的内存也是需要管理的。在C中，需要程序员自己管理，而在C++中，一般使用 \u003ca href=\"https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eRAII 的机制\u003c/a\u003e（面向对象的代理模式），一种通过分配在Stack上的对象来管理Heap上的内存的技术。在C++中，这种技术的实现叫“智能指针”（Smart Pointer）。\u003c/p\u003e\n\u003cp\u003e在C++11中，会有三种智能指针（这三种指针是什么我就不多说了）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eunique_ptr\u003c/code\u003e。独占内存，不共享。在Rust中是：\u003ccode\u003estd::boxed::Box\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eshared_ptr\u003c/code\u003e。以引用计数的方式共享内存。在Rust中是：\u003ccode\u003estd::rc::Rc\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eweak_ptr\u003c/code\u003e。不以引用计数的方式共享内存。在Rust中是：\u003ccode\u003estd::rc::Weak\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e对于独占的 \u003ccode\u003eBox\u003c/code\u003e 不多说了，这里重点说一下共享的 \u003ccode\u003eRc\u003c/code\u003e 和 \u003ccode\u003eWeak\u003c/code\u003e ：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e对于Rust的 Rc 来说，Rc指针内会有一个 \u003ccode\u003estrong_count\u003c/code\u003e 的引用持计数，一旦引用计数为0后，内存就自动释放了。\u003c/li\u003e\n\u003cli\u003e需要共享内存的时候，需要调用实例的 \u003ccode\u003eclone()\u003c/code\u003e 方法。如： \u003ccode\u003elet another = rc.clone()\u003c/code\u003e 克隆的时候，只会增加引用计数，不会作深度复制（个人觉得Clone的语义在这里被践踏了）\u003c/li\u003e\n\u003cli\u003e有这种共享的引用计数，就意味着有多线程的问题，所以，如果需要使用线程安全的智能指针，则需要使用\u003ccode\u003estd::sync::Arc\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e可以使用 \u003ccode\u003eRc::downgrade(\u0026amp;rc)\u003c/code\u003e 后，会变成 Weak 指针，Weak指针增加的是 \u003ccode\u003eweak_count\u003c/code\u003e 的引用计数，内存释放时不会检查它是否为 0。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e我们简单的来看个示例：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003euse std::rc::Rc;\nuse std::rc::Weak\n\n//声明两个未初始化的指针变量\nlet weak : Weak; \nlet strong : Rc;\n{\n    let five = Rc::new(5); //局部变量\n    strong = five.clone(); //进行强引用\n    weak = Rc::downgrade(\u0026amp;five); //对局部变量进行弱引用\n}\n//此时，five已析构，所以 Rc::strong_count(\u0026amp;strong)=1， Rc::weak_count(\u0026amp;strong)=1\n//如果调用 drop(strong)，那个整个内存就释放了\n//drop(strong);\n\n//如果要访问弱引用的值，需要把弱引用 upgrade 成强引用，才能安全的使用\nmatch  weak_five.upgrade() {\n    Some(r) =\u0026gt; println!(\u0026#34;{}\u0026#34;, r),\n    None =\u0026gt; println!(\u0026#34;None\u0026#34;),\n} \n\u003c/pre\u003e\n\u003cp\u003e上面这个示例比较简单，其中主要展示了，指针共享的东西。因为指针是共享的，所以，对于强引用来说，最后的那个人把引用给释放了，是安全的。但是对于弱引用来说，这就是一个坑了，你们强引用的人有Ownership，但是我们弱引用没有，你们把内存释放了，我怎么知道？\u003c/p\u003e\n\u003cp\u003e于是，\u003cstrong\u003e在弱引用需要使用内存的时候需要“升级”成强引用 ，但是这个升级可能会不成功，因为内存可能已经被别人清空了\u003c/strong\u003e。所以，这个操作会返回一个 \u003ccode\u003eOption\u003c/code\u003e 的枚举值，\u003ccode\u003eOption::Some(T)\u003c/code\u003e 表示成功了，而 \u003ccode\u003eOption::None\u003c/code\u003e 则表示失改了。你会说，这么麻烦，我们为什么还要 \u003ccode\u003eWeak\u003c/code\u003e ? 这是因为强引用的 \u003ccode\u003eRc\u003c/code\u003e 会有循环引用的问题……（学过C++的都应该知道）\u003c/p\u003e\n\u003cp\u003e另外，如果你要修改 \u003ccode\u003eRc\u003c/code\u003e 里的值，Rust 会给你两个方法，一个是 \u003ccode\u003eget_mut()\u003c/code\u003e，一个是 \u003ccode\u003emake_mut()\u003c/code\u003e ，这两个方法都有副作用或是限制。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eget_mut()\u003c/code\u003e 需要做一个“唯一引用”的检查，也就是没有任何的共享才能修改\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003e//修改引用的变量 - get_mut 会返回一个Option对象\n//但是需要注意，仅当（只有一个强引用 \u0026amp;\u0026amp; 没有弱引用）为真才能修改\nif let Some(val) = Rc::get_mut(\u0026amp;mut strong) {\n    *val = 555;\n}\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003emake_mut()\u003c/code\u003e 则是会把当前的引用给clone出来，再也不共享了， 是一份全新的。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003e//此处可以修改，但是是以 clone 的方式，也就是让strong这个指针独立出来了。\n*Rc::make_mut(\u0026amp;mut strong) = 555;\n\u003c/pre\u003e\n\u003cp\u003e如果不这样做，就会出现很多内存不安全的情况。\u003cstrong\u003e这些小细节一定要注意，不然你的代码怎么运作的你会一脸蒙逼的\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e嗯，如果你想更快乐地使用智能指针，这里还有个选择 – \u003ccode\u003eCell\u003c/code\u003e 和 \u003ccode\u003eRefCell\u003c/code\u003e，它们弥补了 Rust 所有权机制在灵活性上和某些场景下的不足。他们提供了 \u003ccode\u003eset()\u003c/code\u003e/\u003ccode\u003eget()\u003c/code\u003e 以及 \u003ccode\u003eborrow()\u003c/code\u003e/\u003ccode\u003eborrow_mut()\u003c/code\u003e 的方法，让你的程序更灵活，而不会被限制得死死的。参看下面的示例。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003euse std::cell::Cell;\nuse std::cell::RefCell\n\nlet x = Cell::new(1);\nlet y = \u0026amp;x; //引用（借用）\nlet z = \u0026amp;x; //引用（借用）\nx.set(2); // 可以进行修改，x，y，z全都改了\ny.set(3);\nz.set(4);\nprintln!(\u0026#34;x={} y={} z={}\u0026#34;, x.get(), y.get(), z.get());\n\nlet x = RefCell::new(vec![1,2,3,4]);\n{\n    println!(\u0026#34;{:?}\u0026#34;, *x.borrow())\n}\n\n{\n    let mut my_ref = x.borrow_mut();\n    my_ref.push(1);\n}\nprintln!(\u0026#34;{:?}\u0026#34;, *x.borrow());\u003c/pre\u003e\n\u003cp\u003e通过上面的示例你可以看到你可以比较方便地更为正常的使用智能指针了。然而，需要注意的是 \u003ccode\u003eCell\u003c/code\u003e 和 \u003ccode\u003eRefCell\u003c/code\u003e 不是线程安全的。在多线程下，需要使用Mutex进行互斥。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%BA%BF%E7%A8%8B%E4%B8%8E%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88\"\u003e\u003c/span\u003e线程与智能指针\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e现在，我们回来来解决前面那还没有解决的问题，就是——我想在多个线程中共享一个只读的数据，比如：一个很大的数组，我开多个线程进行并行统计。我们肯定不能对这个大数组进行clone，但也不能把这个大数组move到一个线程中。根据上述的智能指针的逻辑，我们可以通过智指指针来完成这个事，下面是一个例程：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\" data-enlighter-highlight=\"4,5,12,13,27\"\u003econst TOTAL_SIZE:usize = 100 * 1000; //数组长度\nconst NTHREAD:usize = 6; //线程数\n\nlet data : Vec\u0026lt;i32\u0026gt; = (1..(TOTAL_SIZE+1) as i32).collect(); //初始化一个数据从1到n数组\nlet arc_data = Arc::new(data); //data 的所有权转给了 ar_data\nlet result  = Arc::new(AtomicU64::new(0)); //收集结果的数组(原子操作)\n\nlet mut thread_handlers = vec![]; // 用于收集线程句柄\n\nfor i in 0..NTHREAD {\n    // clone Arc 准备move到线程中，只增加引用计数，不会深拷贝内部数据\n    let test_data = arc_data.clone(); \n    let res = result.clone(); \n    thread_handlers.push( \n        thread::spawn(move || {\n            let id = i;\n            //找到自己的分区\n            let chunk_size = TOTAL_SIZE / NTHREAD + 1;\n            let start = id * chunk_size;\n            let end = std::cmp::min(start + chunk_size, TOTAL_SIZE);\n            //进行求和运算\n            let mut sum = 0;\n            for  i in start..end  {\n                sum += test_data[i];\n            }\n            //原子操作\n            res.fetch_add(sum as u64, Ordering::SeqCst);\n            println!(\u0026#34;id={}, sum={}\u0026#34;, id, sum );\n        }\n    ));\n}\n//等所有的线程执行完\nfor th in thread_handlers {\n    th.join().expect(\u0026#34;The sender thread panic!!!\u0026#34;);\n}\n//输出结果\nprintln!(\u0026#34;result = {}\u0026#34;,result.load(Ordering::SeqCst));\u003c/pre\u003e\n\u003cp\u003e上面的这个例程，是用多线程的方式来并行计算一个大的数组的和，每个线程都会计算自己的那一部分。上面的代码中，\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e需要向每个线程传入一个只读的数组，我们用\u003ccode\u003eArc\u003c/code\u003e 智能指针把这个数组包了一层。\u003c/li\u003e\n\u003cli\u003e需要向每个线程传入一个变量用于数据数据，我们用 \u003ccode\u003eArc\u0026lt;AtomicU64\u0026gt;\u003c/code\u003e 包了一层。\u003c/li\u003e\n\u003cli\u003e注意：\u003ccode\u003eArc\u003c/code\u003e 所包的对象是不可变的，所以，如果要可变的，那要么用原子对象，或是用Mutex/Cell对象再包一层。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这一些都是为了要解决“线程的Move语义后还要共享问题”。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%A4%9A%E6%80%81%E5%92%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E8%AF%86%E5%88%AB\"\u003e\u003c/span\u003e多态和运行时识别\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E9%80%9A%E8%BF%87Trait%E5%A4%9A%E6%80%81\"\u003e\u003c/span\u003e通过Trait多态\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e多态是抽象和解耦的关键，所以，一个高级的语言是必需实现多态的。在C++中，多态是通过虚函数表来实现的（参看《\u003ca href=\"https://coolshell.cn/articles/12165.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eC++的虚函数表\u003c/a\u003e》），Rust也很类似，不过，在编程范式上，更像Java的接口的方式。其通过借用于Erlang的Trait对象的方式来完成。参看下面的代码：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003estruct Rectangle {\n    width : u32,\n    height : u32,\n} \n\nstruct Circle {\n    x : u32,\n    y : u32,\n    radius : u32,\n}\n\ntrait  IShape  { \n    fn area(\u0026amp;self) -\u0026gt; f32;\n    fn to_string(\u0026amp;self) -\u0026gt; String;\n}\u003c/pre\u003e\n\u003cp\u003e我们有两个类，一个是“长方形”，一个是“圆形”， 还有一个 \u003ccode\u003eIShape\u003c/code\u003e 的trait 对象（原谅我用了Java的命名方式），其中有两个方法：求面积的 \u003ccode\u003earea()\u003c/code\u003e 和 转字符串的 \u003ccode\u003eto_string()\u003c/code\u003e。下面相关的实现：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003eimpl IShape  for Rectangle {\n    fn area(\u0026amp;self) -\u0026gt; f32 { (self.height * self.width) as f32 }\n    fn to_string(\u0026amp;self) -\u0026gt;String {\n         format!(\u0026#34;Rectangle -\u0026gt; width={} height={} area={}\u0026#34;, \n                  self.width, self.height, self.area())\n    }\n}\n\nuse std::f64::consts::PI;\nimpl IShape  for Circle  {\n    fn area(\u0026amp;self) -\u0026gt; f32 { (self.radius * self.radius) as f32 * PI as f32}\n    fn to_string(\u0026amp;self) -\u0026gt; String {\n        format!(\u0026#34;Circle -\u0026gt; x={}, y={}, area={}\u0026#34;, \n                 self.x, self.y, self.area())\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003e于是，我们就可以有下面的多态的使用方式了（我们使用独占的智能指针类 \u003ccode\u003eBox\u003c/code\u003e）：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003euse std::vec::Vec;\n\nlet rect = Box::new( Rectangle { width: 4, height: 6});\nlet circle = Box::new( Circle { x: 0, y:0, radius: 5});\nlet mut v : Vec\u0026lt;Box\u0026gt; = Vec::new();\nv.push(rect);\nv.push(circle);\n\nfor i in v.iter() {\n   println!(\u0026#34;area={}\u0026#34;, i.area() );\n   println!(\u0026#34;{}\u0026#34;, i.to_string() );\n}\u003c/pre\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%90%91%E4%B8%8B%E8%BD%AC%E5%9E%8B\"\u003e\u003c/span\u003e向下转型\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e但是，在C++中，多态的类型是抽象类型，我们还想把其转成实际的具体类型，在C++中叫运行进实别RTTI，需要使用像 \u003ccode\u003etype_id\u003c/code\u003e 或是 \u003ccode\u003edynamic_cast\u003c/code\u003e 这两个技术。在Rust中，转型是使用 ‘\u003ccode\u003eas\u003c/code\u003e‘ 关键字，然而，这是编译时识别，不是运行时。那么，在Rust中是怎么做呢？\u003c/p\u003e\n\u003cp\u003e嗯，这里需要使用 Rust 的 \u003ccode\u003estd::any::Any\u003c/code\u003e 这个东西，这个东西就可以使用 \u003ccode\u003edowncast_ref\u003c/code\u003e 这个东西来进行具体类型的转换。于是我们要对现有的代码进行改造。\u003c/p\u003e\n\u003cp\u003e首先，先得让 \u003ccode\u003eIShape\u003c/code\u003e 继承于 \u003ccode\u003eAny\u003c/code\u003e ，并增加一个 \u003ccode\u003eas_any()\u003c/code\u003e 的转型接口。\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003euse std::any::Any;\ntrait  IShape : Any + \u0026#39;static  {\n    fn as_any(\u0026amp;self) -\u0026gt; \u0026amp;dyn Any; \n    …… …… …… \n}\u003c/pre\u003e\n\u003cp\u003e然后，在具体类中实现这个接口：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\"\u003eimpl IShape  for Rectangle {\n    fn as_any(\u0026amp;self) -\u0026gt; \u0026amp;dyn Any { self }\n    …… …… …… \n}\nimpl IShape  for Circle  {\n    fn as_any(\u0026amp;self) -\u0026gt; \u0026amp;dyn Any { self }\n    …… …… …… \n}\u003c/pre\u003e\n\u003cp\u003e于是，我们就可以进行运行时的向下转型了：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"rust\" data-enlighter-highlight=\"5,7\"\u003elet mut v : Vec\u0026lt;Box\u0026lt;dyn IShape\u0026gt;\u0026gt; = Vec::new();\nv.push(rect);\nv.push(circle);\nfor i in v.iter() {\n    if let Some(s) = i.as_any().downcast_ref::\u0026lt;Rectangle\u0026gt;() {\n        println!(\u0026#34;downcast - Rectangle w={}, h={}\u0026#34;, s.width, s.height);\n    }else if let Some(s) = i.as_any().downcast_ref::\u0026lt;Circle\u0026gt;() {\n        println!(\u0026#34;downcast - Circle x={}, y={}, r={}\u0026#34;, s.x, s.y, s.radius);\n    }else{\n        println!(\u0026#34;invaild type\u0026#34;);\n    }\n}\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Trait_%E9%87%8D%E8%BD%BD%E6%93%8D%E4%BD%9C%E7%AC%A6\"\u003e\u003c/span\u003eTrait 重载操作符\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e操作符重载对进行泛行编程是非常有帮助的，如果所有的对象都可以进行大于，小于，等于这亲的比较操作，那么就可以直接放到一个标准的数组排序的的算法中去了。在Rust中，在 \u003ccode\u003estd::ops\u003c/code\u003e 下有全载的操作符重载的Trait，在\u003ccode\u003estd::cmp\u003c/code\u003e 下则是比较操作的操作符。我们下面来看一个示例：\u003c/p\u003e\n\u003cp\u003e假如我们有一个“员工”对象，我们想要按员工的薪水排序，如果我们想要使用\u003ccode\u003eVec::sort()\u003c/code\u003e方法，我们就需要实现这个对象的各种“比较”方法。这些方法在 \u003ccode\u003estd::cmp\u003c/code\u003e 内—— 其中有四个Trait : \u003ccode\u003eOrd\u003c/code\u003e、\u003ccode\u003ePartialOrd\u003c/code\u003e 、\u003ccode\u003eEq\u003c/code\u003e 和 \u003ccode\u003ePartialEq\u003c/code\u003e  。其中，\u003ccode\u003eOrd\u003c/code\u003e 依赖于 \u003ccode\u003ePartialOrd\u003c/code\u003e 和 \u003ccode\u003eEq\u003c/code\u003e ，而\u003ccode\u003eEq\u003c/code\u003e 依赖于 \u003ccode\u003ePartialEq\u003c/code\u003e，这意味着你需要实现所有的Trait，而\u003ccode\u003eEq\u003c/code\u003e 这个Trait 是没有方法的，所以，其实现如下：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"null\"\u003euse std::cmp::{Ord, PartialOrd, PartialEq, Ordering};\n\n#[derive(Debug)]\nstruct Employee {\n    name : String,\n    salary : i32,\n}\nimpl Ord for Employee {\n    fn cmp(\u0026amp;self, rhs: \u0026amp;Self) -\u0026gt; Ordering {\n        self.salary.cmp(\u0026amp;rhs.salary)\n    }\n}\nimpl PartialOrd for Employee {\n    fn partial_cmp(\u0026amp;self, rhs: \u0026amp;Self) -\u0026gt; Option\u0026lt;Ordering\u0026gt; {\n        Some(self.cmp(rhs))\n    }\n}\nimpl Eq for Employee {\n}\nimpl PartialEq for Employee {\n    fn eq(\u0026amp;self, rhs: \u0026amp;Self) -\u0026gt; bool {\n        self.salary == rhs.salary\n    }\n}\u003c/pre\u003e\n\u003cp\u003e于是，我们就可以进行如下的操作了：\u003c/p\u003e\n\u003cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"null\"\u003elet mut v = vec![\n    Employee {name : String::from(\u0026#34;Bob\u0026#34;),     salary: 2048},\n    Employee {name : String::from(\u0026#34;Alice\u0026#34;),   salary: 3208},\n    Employee {name : String::from(\u0026#34;Tom\u0026#34;),     salary: 2359},\n    Employee {name : String::from(\u0026#34;Jack\u0026#34;),    salary: 4865},\n    Employee {name : String::from(\u0026#34;Marray\u0026#34;),  salary: 3743},\n    Employee {name : String::from(\u0026#34;Hao\u0026#34;),     salary: 2964},\n    Employee {name : String::from(\u0026#34;Chen\u0026#34;),    salary: 4197},\n];\n\n//用for-loop找出薪水最多的人\nlet mut e = \u0026amp;v[0];\nfor i in 0..v.len() {\n    if *e \u0026lt; v[i] { \n        e = \u0026amp;v[i]; \n    }\n}\nprintln!(\u0026#34;max = {:?}\u0026#34;, e);\n\n//使用标准的方法\nprintln!(\u0026#34;min = {:?}\u0026#34;, v.iter().min().unwrap());\nprintln!(\u0026#34;max = {:?}\u0026#34;, v.iter().max().unwrap());\n\n//使用标准的排序方法\nv.sort();\nprintln!(\u0026#34;{:?}\u0026#34;, v);\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%B0%8F%E7%BB%93\"\u003e\u003c/span\u003e小结\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e现在我们来小结一下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在Rust的中，最重要的概念就是“不可变”和“所有权”以及“Trait”这三个概念。\u003c/li\u003e\n\u003cli\u003e在所有权概念上，Rust喜欢move所有权，如果需要借用则需要使用引用。\u003c/li\u003e\n\u003cli\u003eMove所有权会导致一些编程上的复杂度，尤其是需要同时move两个变量时。\u003c/li\u003e\n\u003cli\u003e引用（借用）的问题是生命周期的问题，一些时候需要程序员来标注生命周期。\u003c/li\u003e\n\u003cli\u003e在函数式的闭包和多线程下，这些所有权又出现了各种麻烦事。\u003c/li\u003e\n\u003cli\u003e使用智能指针可以解决所有权和借用带来的复杂度，但带来其它的问题。\u003c/li\u003e\n\u003cli\u003e最后介绍了Rust的Trait对象完成多态和函数重载的玩法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRust是一个比较严格的编程语言，它会严格检查你程序中的：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e变量是否是可变的\u003c/li\u003e\n\u003cli\u003e变量的所有权是否被移走了\u003c/li\u003e\n\u003cli\u003e引用的生命周期是否完整\u003c/li\u003e\n\u003cli\u003e对象是否需要实现一些Trait\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这些东西都会导致失去编译的灵活性，并在一些时候需要“去糖”，导致，你在使用Rust会有诸多的不适应，程序编译不过的挫败感也是令人沮丧的。在初学Rust的时候，我想自己写一个单向链表，结果，费尽心力，才得以完成。也就是说，\u003cstrong\u003e如果你对Rust的概念认识的不完整，你完全写不出程序，那怕就是很简单的一段代码\u003c/strong\u003e。我觉得，这种挺好的，逼着程序员必需了解所有的概念才能编码。但是，另一方面也表明了这门语言并不适合初学者。\u003c/p\u003e\n\u003cp\u003e没有银弹，任何语言都有些适合的地方和场景。\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cp\u003e\u003caudio style=\"display: none;\" controls=\"controls\"\u003e\u003c/audio\u003e\u003c/p\u003e\n\u003cdiv id=\"gtx-trans\" style=\"position: absolute; left: 36px; top: 17975.6px;\"\u003e\n\u003cdiv class=\"gtx-trans-icon\"\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8088.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/7.jpg\" alt=\"对技术的态度\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8088.html\" class=\"wp_rp_title\"\u003e对技术的态度\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/7992.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/08/cpp_small-150x150.jpg\" alt=\"C++的坑真的多吗？\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/7992.html\" class=\"wp_rp_title\"\u003eC++的坑真的多吗？\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/5576.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2011/10/00.QuickBasic_PDS_IDE-150x150.png\" alt=\"那些曾伴我走过编程之路的软件\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/5576.html\" class=\"wp_rp_title\"\u003e那些曾伴我走过编程之路的软件\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/4990.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2011/07/programmer-150x150.png\" alt=\"程序员技术练级攻略\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/4990.html\" class=\"wp_rp_title\"\u003e程序员技术练级攻略\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/4905.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/3.jpg\" alt=\"语言的数据亲和力\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/4905.html\" class=\"wp_rp_title\"\u003e语言的数据亲和力\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-20845\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"8f43123ebc\"\u003e\u003cimg id=\"rating_20845_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(20845, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a0caa24f2369b1c5759ecb39-=\"\"/\u003e\u003cimg id=\"rating_20845_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(20845, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a0caa24f2369b1c5759ecb39-=\"\"/\u003e\u003cimg id=\"rating_20845_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(20845, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a0caa24f2369b1c5759ecb39-=\"\"/\u003e\u003cimg id=\"rating_20845_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(20845, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a0caa24f2369b1c5759ecb39-=\"\"/\u003e\u003cimg id=\"rating_20845_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(20845, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.6, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-a0caa24f2369b1c5759ecb39-=\"\"/\u003e (\u003cstrong\u003e127\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.57\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_20845_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"Rust语言的编程范式\"/\u003e\u003cmeta itemprop=\"headline\" content=\"Rust语言的编程范式\"/\u003e\u003cmeta itemprop=\"description\" content=\"总是有很多很多人来问我对Rust语言怎么看的问题，在各种地方被at，其实，我不是很想表达我的想法。因为在不同的角度，你会看到不同的东西。编程语言这个东西，老实说很难评价，在学术上来说，Lisp就是很好的语言，然而在工程使用的时候，你会发现Lisp没什么人用，而Javascript或是PHP这样在学术很糟糕设计的语言反而成了主流，你觉得C++很反人类，在我看来，C++有很多不错的设计，而且对于了解编...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2020-04-04T14:48:23+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2022-08-10T16:01:42+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/20845.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/20845.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.57\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"127\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-20845-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2020-04-04T14:48:23+08:00",
  "Author": "陈皓"
}