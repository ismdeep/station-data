{
  "Source": "coolshell.cn",
  "Title": "一个“蝇量级” C 语言协程库",
  "Link": "https://coolshell.cn/articles/10975.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"5a109e631e976fa7b286dd0e-text/javascript\"\u003e\u003c/script\u003e\u003cstrong\u003e（感谢网友 \u003c/strong\u003e\u003ca href=\"http://weibo.com/fullofbull\" target=\"_blank\"\u003e\u003cstrong\u003e@我的上铺叫路遥\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e 投稿）\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e协程(coroutine)顾名思义就是“协作的例程”（co-operative routines）。跟具有操作系统概念的线程不一样，协程是在用户空间利用程序语言的语法语义就能实现逻辑上类似多任务的编程技巧。实际上协程的概念比线程还要早，按照 Knuth 的说法\u003cstrong\u003e“子例程是协程的特例”\u003c/strong\u003e，一个子例程就是一次子函数调用，那么实际上协程就是类函数一样的程序组件，你可以在一个线程里面轻松创建数十万个协程，就像数十万次函数调用一样。只不过子例程只有一个调用入口起始点，返回之后就结束了，而协程入口既可以是起始点，又可以从上一个返回点继续执行，也就是说协程之间可以通过 yield 方式转移执行权，\u003cstrong\u003e对称（symmetric）、平级\u003c/strong\u003e地调用对方，而不是像例程那样上下级调用关系。当然 Knuth 的“特例”指的是协程也可以模拟例程那样实现上下级调用关系，这就叫\u003cstrong\u003e非对称协程\u003c/strong\u003e（asymmetric coroutines）。\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#%E5%9F%BA%E4%BA%8E%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B\" title=\"基于事件驱动模型\"\u003e基于事件驱动模型\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#%E2%80%9C%E8%9D%87%E9%87%8F%E7%BA%A7%E2%80%9D%E7%9A%84%E5%8D%8F%E7%A8%8B%E5%BA%93\" title=\"“蝇量级”的协程库\"\u003e“蝇量级”的协程库\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#C_%E8%AF%AD%E8%A8%80%E7%9A%84%E2%80%9Cyield_%E8%AF%AD%E4%B9%89%E2%80%9D\" title=\"C 语言的“yield 语义”\"\u003eC 语言的“yield 语义”\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#Protothreads%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87\" title=\"Protothreads的上下文\"\u003eProtothreads的上下文\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#Protothreads%E7%9A%84%E5%8E%9F%E8%AF%AD%E5%92%8C%E7%BB%84%E4%BB%B6\" title=\"Protothreads的原语和组件\"\u003eProtothreads的原语和组件\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#Protothreads%E5%AE%9E%E6%88%98\" title=\"Protothreads实战\"\u003eProtothreads实战\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#%E5%8D%8F%E7%A8%8B%E5%BA%93_DIY_%E6%94%BB%E7%95%A5\" title=\"协程库 DIY 攻略\"\u003e协程库 DIY 攻略\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%9F%BA%E4%BA%8E%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B\"\u003e\u003c/span\u003e基于事件驱动模型\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e我们举一个例子来看看一种\u003cstrong\u003e对称协程\u003c/strong\u003e调用场景，大家最熟悉的“生产者-消费者”事件驱动模型，一个协程负责生产产品并将它们加入队列，另一个负责从队列中取出产品并使用它。为了提高效率，你想一次增加或删除多个产品。伪代码可以是这样的：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\"\u003e# producer coroutine\nloop\nwhile queue is not full\n  create some new items\n  add the items to queue\nyield to consumer\n\n# consumer coroutine\nloop\nwhile queue is not empty\n  remove some items from queue\n  use the items\nyield to producer\u003c/pre\u003e\n\u003cp\u003e\u003cspan id=\"more-10975\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e大多数教材上拿这种模型作为多线程的例子，实际上多线程在此的应用还是显得有点“重量级”，由于缺乏 yield 语义，线程之间不得不使用同步机制来避免产生全局资源的竟态，这就不可避免产生了休眠、调度、切换上下文一类的系统开销，而且线程调度还会产生时序上的不确定性。而对于协程来说，“挂起”的概念只不过是转让代码执行权并调用另外的协程，待到转让的协程告一段落后重新得到调用并从挂起点“唤醒”，这种协程间的调用是逻辑上可控的，时序上确定的，可谓一切尽在掌握中。\u003c/p\u003e\n\u003cp\u003e当今一些具备协程语义的语言，比较重量级的如C#、erlang、golang，以及轻量级的python、lua、javascript、ruby，还有函数式的scala、scheme等。相比之下，作为原生态语言的 C 反而处于尴尬的地位，原因在于 C 依赖于一种叫做\u003cstrong\u003e栈帧\u003c/strong\u003e的例程调用，例程内部的状态量和返回值都保留在堆栈上，这意味着生产者和消费者相互之间无法实现平级调用，当然你可以改写成把生产者作为主例程然后将产品作为传递参数调用消费者例程，这样的代码写起来费力不讨好而且看起来会很难受，特别当协程数目达到十万数量级，这种写法就过于僵化了。\u003c/p\u003e\n\u003cp\u003e这就引出了协程的概念，\u003cstrong\u003e如果将每个协程的上下文（比如程序计数器）保存在其它地方而不是堆栈上，协程之间相互调用时，被调用的协程只要从堆栈以外的地方恢复上次出让点之前的上下文即可，这有点类似于 CPU 的上下文切换，\u003c/strong\u003e遗憾的是似乎只有更底层的汇编语言才能做到这一点。\u003c/p\u003e\n\u003cp\u003e难道 C 语言只能用多线程吗？幸运的是，C 标准库给我们提供了两种协程调度原语：一种是\u003ca title=\"http://zh.wikipedia.org/wiki/Setjmp.h\" href=\"https://zh.wikipedia.org/wiki/Setjmp.h\" target=\"_blank\"\u003e setjmp/longjmp\u003c/a\u003e，另一种是\u003ca title=\"http://pubs.opengroup.org/onlinepubs/7990989799/xsh/ucontext.h.html\" href=\"http://pubs.opengroup.org/onlinepubs/7990989799/xsh/ucontext.h.html\" target=\"_blank\"\u003e ucontext 组件\u003c/a\u003e，它们内部（当然是用汇编语言）实现了协程的上下文切换，相较之下前者在应用上会产生相当的不确定性（比如不好封装，具体说明参考联机文档），所以后者应用更广泛一些，网上绝大多数 C 协程库也是基于 ucontext 组件实现的。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E2%80%9C%E8%9D%87%E9%87%8F%E7%BA%A7%E2%80%9D%E7%9A%84%E5%8D%8F%E7%A8%8B%E5%BA%93\"\u003e\u003c/span\u003e“蝇量级”的协程库\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e在此，我来介绍一种“蝇量级”的开源 C 协程库 \u003ca title=\"http://dunkels.com/adam/pt/\" href=\"http://dunkels.com/adam/pt/\" target=\"_blank\"\u003eprotothreads\u003c/a\u003e。这是一个全部用 ANSI C 写成的库，之所以称为“蝇量级”的，就是说，实现已经不能再精简了，几乎就是原语级别。事实上 protothreads 整个库不需要链接加载，因为所有源码都是头文件，类似于 STL 这样不依赖任何第三方库，在任何平台上可移植；总共也就 5 个头文件，有效代码量不足 100 行；API 都是宏定义的，所以不存在调用开销；最后，每个协程的空间开销是 2 个字节（是的，你没有看错，就是一个 short 单位的“栈”！）当然这种精简是要以使用上的局限为代价的，接下来的分析会说明这一点。\u003c/p\u003e\n\u003cp\u003e先来看看 protothreads 作者，\u003ca title=\"http://dunkels.com/adam/\" href=\"http://dunkels.com/adam/\" target=\"_blank\"\u003eAdam Dunkels\u003c/a\u003e，一位来自瑞典皇家理工学院的计算机天才帅哥。话说这哥们挺有意思的，写了好多轻量级的作品，都是 BSD 许可证。顺便说一句，轻量级开源软件全世界多如牛毛，可像这位哥们写得如此出名的并不多。比如嵌入式网络操作系统 \u003ca title=\"http://www.contiki-os.org/\" href=\"http://www.contiki-os.org/\" target=\"_blank\"\u003eContiki\u003c/a\u003e，国人耳熟能详的 TCP/IP 协议栈 \u003ca title=\"http://en.wikipedia.org/wiki/UIP_(micro_IP)\" href=\"https://en.wikipedia.org/wiki/UIP_(micro_IP)\" target=\"_blank\"\u003euIP\u003c/a\u003e 和 \u003ca title=\"http://savannah.nongnu.org/projects/lwip/\" href=\"http://savannah.nongnu.org/projects/lwip/\" target=\"_blank\"\u003elwIP\u003c/a\u003e 也是出自其手。上述这些软件都是经过数十年企业级应用的考验，质量之高可想而知。\u003c/p\u003e\n\u003cp\u003e很多人会好奇如此“蝇量级”的代码究竟是怎么实现的呢？在分析 protothreads 源码之前，我先来给大家补一补 C 语言的基础课;-^)简而言之，这利用了 C 语言特性上的一个“奇技淫巧”，而且这种技巧恐怕连许多具备十年以上经验的 C 程序员老手都不见得知晓。当然这里先要声明我不是推荐大家都这么用，实际上这是以破坏语言的代码规范为代价，在一些严肃的项目工程中需要谨慎对待，除非你想被炒鱿鱼。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"C_%E8%AF%AD%E8%A8%80%E7%9A%84%E2%80%9Cyield_%E8%AF%AD%E4%B9%89%E2%80%9D\"\u003e\u003c/span\u003eC 语言的“yield 语义”\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e下面的教程来自于一位 ARM 工程师、天才黑客 \u003ca title=\"http://www.chiark.greenend.org.uk/~sgtatham/\" href=\"http://www.chiark.greenend.org.uk/~sgtatham/\" target=\"_blank\"\u003eSimon Tatham\u003c/a\u003e（开源 Telnet/SSH 客户端 \u003ca title=\"http://www.chiark.greenend.org.uk/~sgtatham/putty/\" href=\"http://www.chiark.greenend.org.uk/~sgtatham/putty/\" target=\"_blank\"\u003ePuTTY\u003c/a\u003e 和汇编器 \u003ca title=\"http://www.nasm.us/\" href=\"http://www.nasm.us/\" target=\"_blank\"\u003eNASM\u003c/a\u003e 的作者，吐槽一句，PuTTY的源码号称是所有正式项目里最难 hack 的 C，你应该猜到作者是什么语言出身）的博文：\u003ca title=\"http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html\" href=\"http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html\" target=\"_blank\"\u003eCoroutines in C\u003c/a\u003e。中文译文在\u003ca title=\"http://www.oschina.net/translate/coroutines-in-c\" href=\"http://www.oschina.net/translate/coroutines-in-c\" target=\"_blank\"\u003e这里\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e我们知道 python 的 yield 语义功能类似于一种迭代生成器，函数会保留上次的调用状态，并在下次调用时会从上个返回点继续执行。用 C 语言来写就像这样：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eint function(void) {\n  int i;\n  for (i = 0; i \u0026lt; 10; i++)\n    return i;   /* won\u0026#39;t work, but wouldn\u0026#39;t it be nice */\n}\u003c/pre\u003e\n\u003cp\u003e连续对它调用 10 次，它能分别返回 0 到 9。该怎样实现呢？可以利用 goto 语句，如果我们在函数中加入一个状态变量，就可以这样实现：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eint function(void) {\n  static int i, state = 0;\n  switch (state) {\n    case 0: goto LABEL0;\n    case 1: goto LABEL1;\n  }\n  LABEL0: /* start of function */\n  for (i = 0; i \u0026lt; 10; i++) {\n    state = 1; /* so we will come back to LABEL1 */\n    return i;\n    LABEL1:; /* resume control straight after the return */\n  }\n}\u003c/pre\u003e\n\u003cp\u003e这个方法是可行的。我们在所有需要 yield 的位置都加上标签：起始位置加一个，还有所有 return 语句之后都加一个。每个标签用数字编号，我们在状态变量中保存这个编号，这样就能在我们下次调用时告诉我们应该跳到哪个标签上。每次返回前，更新状态变量，指向到正确的标签；不论调用多少次，针对状态变量的 switch 语句都能找到我们要跳转到的位置。\u003c/p\u003e\n\u003cp\u003e但这还是难看得很。最糟糕的部分是所有的标签都需要手工维护，还必须保证函数中的标签和开头 switch 语句中的一致。每次新增一个 return 语句，就必须想一个新的标签名并将其加到 switch 语句中；每次删除 return 语句时，同样也必须删除对应的标签。这使得维护代码的工作量增加了一倍。\u003c/p\u003e\n\u003cp\u003e仔细想想，其实我们可以不用 switch 语句来决定要跳转到哪里去执行，而是\u003cstrong\u003e直接利用 switch 语句本身来实现跳转\u003c/strong\u003e：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eint function(void) {\n  static int i, state = 0;\n  switch (state) {\n    case 0: /* start of function */\n    for (i = 0; i \u0026lt; 10; i++) {\n      state = 1; /* so we will come back to \u0026#34;case 1\u0026#34; */\n      return i;\n      case 1:; /* resume control straight after the return */\n    }\n  }\n}\u003c/pre\u003e\n\u003cp\u003e酷！没想到 switch-case 语句可以这样用，其实说白了 C 语言就是脱胎于汇编语言的，switch-case 跟 if-else 一样，无非就是汇编的条件跳转指令的另类实现而已（这也间接解释了为何汇编程序员经常揶揄 C 语言是“大便一样的代码”）。我们还可以用 __LINE__ 宏使其更加一般化：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eint function(void) {\n  static int i, state = 0;\n  switch (state) {\n    case 0: /* start of function */\n    for (i = 0; i \u0026lt; 10; i++) {\n      state = __LINE__ + 2; /* so we will come back to \u0026#34;case __LINE__\u0026#34; */\n      return i;\n      case __LINE__:; /* resume control straight after the return */\n    }\n  }\n}\u003c/pre\u003e\n\u003cp\u003e这样一来我们可以用宏提炼出一种范式，封装成组件：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#define Begin() static int state=0; switch(state) { case 0:\n#define Yield(x) do { state=__LINE__; return x; case __LINE__:; } while (0)\n#define End() }\nint function(void) {\n  static int i;\n  Begin();\n  for (i = 0; i \u0026lt; 10; i++)\n    Yield(i);\n  End();\n}\u003c/pre\u003e\n\u003cp\u003e怎么样，看起来像不像发明了一种全新的语言？\u003cstrong\u003e实际上我们利用了 switch-case 的分支跳转特性，以及预编译的 __LINE__ 宏，实现了一种隐式状态机，最终实现了“yield 语义”。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e还有一个问题，当你欢天喜地地将这种鲜为人知的技巧运用到你的项目中，并成功地拿去向你的上司邀功问赏的时候，你的上司会怎样看待你的代码呢？你的宏定义中大括号没有匹配完整，在代码块中包含了未用到的 case，Begin 和 Yield 宏里面不完整的七拼八凑……你简直就是公司里不遵守编码规范的反面榜样！\u003c/p\u003e\n\u003cp\u003e别着急，在原文中 Simon Tatham 大牛帮你找到一个坚定的反驳理由，我觉得对程序员来说简直是金玉良言。\u003c/p\u003e\n\u003cp\u003e将编程规范用在这里是不对的。文章里给出的示例代码不是很长，也不很复杂，即便以状态机的方式改写还是能够看懂的。但是随着代码越来越长，改写的难度将越来越大，改写对直观性造成的损失也变得相当相当大。\u003c/p\u003e\n\u003cp\u003e想一想，一个函数如果包含这样的小代码块：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003ecase STATE1:\n/* perform some activity */\nif (condition) state = STATE2; else state = STATE3;\u003c/pre\u003e\n\u003cp\u003e对于看代码的人说，这和包含下面小代码块的函数没有多大区别：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eLABEL1:\n/* perform some activity */\nif (condition) goto LABEL2; else goto LABEL3;\u003c/pre\u003e\n\u003cp\u003e是的，这两个函数的结构在视觉上是一样的，而对于函数中实现的算法，两个函数都一样不利于查看。因为你使用协程的宏而炒你鱿鱼的人，一样会因为你写的函数是由小块的代码和 goto 语句组成而吼着炒了你。只是这次他们没有冤枉你，因为像那样设计的函数会严重扰乱算法的结构。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e编程规范的目标就是为了代码清晰。\u003c/strong\u003e如果将一些重要的东西，像 switch、return 以及 case 语句，隐藏到起“障眼”作用的宏中，从编程规范的角度讲，可以说你扰乱了程序的语法结构，并且违背了代码清晰这一要求。但是我们这样做是为了突出程序的算法结构，而算法结构恰恰是看代码的人更想了解的。\u003c/p\u003e\n\u003cp\u003e\u003cspan style=\"color: #ff0000;\"\u003e\u003cstrong\u003e任何编程规范，坚持牺牲算法清晰度来换取语法清晰度的，都应该重写。\u003c/strong\u003e\u003c/span\u003e如果你的上司因为使用了这一技巧而解雇你，那么在保安把你往外拖的时候要不断告诉他这一点。\u003c/p\u003e\n\u003cp\u003e原文作者最后给出了一个 MIT 许可证的 \u003ca title=\"http://www.chiark.greenend.org.uk/~sgtatham/coroutine.h\" href=\"http://www.chiark.greenend.org.uk/~sgtatham/coroutine.h\" target=\"_blank\"\u003ecoroutine.h\u003c/a\u003e 头文件。值得一提的是，正如文中所说，这种协程实现方法有个使用上的局限，就是\u003cstrong\u003e协程调度状态的保存依赖于 static 变量，而不是堆栈上的局部变量\u003c/strong\u003e，实际上也无法用局部变量（堆栈）来保存状态，这就使得代码不具备可重入性和多线程应用。后来作者补充了一种技巧，就是将局部变量包装成函数参数传入的一个虚构的上下文结构体指针，然后用动态分配的堆来“模拟”堆栈，解决了线程可重入问题。但这样一来反而有损代码清晰，比如所有局部变量都要写成对象成员的引用方式，特别是局部变量很多的时候很麻烦，再比如宏定义 malloc/free 的玩法过于托大，不易控制，搞不好还增加了被炒鱿鱼的风险（只不过这次是你活该）。\u003c/p\u003e\n\u003cp\u003e我个人认为，既然协程本身是一种单线程的方案，那么我们应该假定应用环境是单线程的，不存在代码重入问题，所以我们可以大胆地使用 static 变量，维持代码的简洁和可读性。事实上\u003cstrong\u003e我们也不应该在多线程环境下考虑使用这么简陋的协程\u003c/strong\u003e，非要用的话，前面提到 glibc 的 ucontext 组件也是一种可行的替代方案，它提供了一种协程私有堆栈的上下文，当然这种用法在跨线程上也并非没有限制，请仔细阅读联机文档。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Protothreads%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87\"\u003e\u003c/span\u003eProtothreads的上下文\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e感谢 Simon Tatham 的淳淳教诲，接下来我们可以 hack 一下源码了。先来看看实现 protothreads 的数据结构， 实际上它就是协程的\u003cstrong\u003e上下文结构体\u003c/strong\u003e，用以保存状态变量，相信你很快就明白为何它的“堆栈”只有 2 个字节：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estruct pt {\n  lc_t lc;\n}\u003c/pre\u003e\n\u003cp\u003e里面只有一个 short 类型的变量，实际上它是用来保存上一次出让点的程序计数器。这也映证了协程比线程的灵活之处，就是协程可以是 stackless 的，如果需要实现的功能很单一，比如像生产者-消费者模型那样用来做事件通知，那么实际上协程需要保存的状态变量仅仅是一个程序计数器即可。像 python generator 也是 stackless 的，当然实现一个迭代生成器可能还需要保留上一个迭代值，前面 C 的例子是用 static 变量保存，你也可以设置成员变量添加到上下文结构体里面。如果你真的不确定用协程调度时需要保存多少状态变量，那还是用 ucontext 好了，它的上下文提供了堆栈和信号，但是由用户负责分配资源，详细使用方法见联机文档。。\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003etypedef struct ucontext {\n  struct ucontext_t *uc_link;\n  sigset_t uc_sigmask;\n  stack_t uc_stack;\n  ...\n} ucontext_t;\u003c/pre\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Protothreads%E7%9A%84%E5%8E%9F%E8%AF%AD%E5%92%8C%E7%BB%84%E4%BB%B6\"\u003e\u003c/span\u003eProtothreads的原语和组件\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e有点扯远了，回到 protothreads，看看提供的协程“原语”。有两种实现方法，在 ANSI C 下，就是传统的 switch-case 语句：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#define LC_INIT（s） s = 0;  // 源码中是有分号的，一个低级 bug，啊哈～\n#define LC_RESUME(s) switch (s) { case 0:\n#define LC_SET(s) s = __LINE__; case __LINE__:\n#define LC_END(s) }\n\u003c/pre\u003e\n\u003cp\u003e但这种“原语”有个难以察觉的缺陷：\u003cstrong\u003e就是你无法在 LC_RESUME 和 LC_END （或者包含它们的组件）之间的代码中使用 switch-case语句，因为这会引起外围的 switch 跳转错误！\u003c/strong\u003e为此，protothreads 又实现了基于 GNU C 的调度“原语”。在 GNU C 下还有一种语法糖叫做标签指针，就是在一个 label 前面加 \u0026amp;\u0026amp;（不是地址的地址，是 GNU 自定义的符号），可以用 void 指针类型保存，然后 goto 跳转：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003etypedef void * lc_t；\n#define LC_INIT(s) s = NULL\n#define LC_RESUME(s) \\\n  do { \\\n    if (s != NULL) { \\\n      goto *s; \\\n    }\n  } while (0)\n#define LC_CONCAT2(s1, s2) s1##s2\n#define LC_CONCAT(s1, s2) LC_CONCAT2(s1, s2)\n#define LC_SET(s) \\\n  do { \\\n    LC_CONCAT(LC_LABEL, __LINE__): \\\n    （s） = \u0026amp;\u0026amp;LC_CONCAT(LC_LABEL, __LINE__); \\\n  } while (0)\u003c/pre\u003e\n\u003cp\u003e好了，有了前面的基础知识，理解这些“原语”就是小菜一叠，下面看看如何建立“组件”，同时也是 protothreads API，我们先定义四个退出码作为协程的\u003cstrong\u003e调度状态机\u003c/strong\u003e：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#define PT_WAITING 0\n#define PT_YIELDED 1\n#define PT_EXITED  2\n#define PT_ENDED   3\u003c/pre\u003e\n\u003cp\u003e下面这些 API 可直接在应用程序中调用：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e/* 初始化一个协程，也即初始化状态变量 */\n#define PT_INIT(pt) LC_INIT((pt)-\u0026gt;lc)\n\n/* 声明一个函数，返回值为 char 即退出码，表示函数体内使用了 proto thread，（个人觉得有些多此一举） */\n#define PT_THREAD(name_args) char name_args\n\n/* 协程入口点， PT_YIELD_FLAG=0表示出让，=1表示不出让，放在 switch 语句前面，下次调用的时候可以跳转到上次出让点继续执行 */\n#define PT_BEGIN(pt) { char PT_YIELD_FLAG = 1; LC_RESUME((pt)-\u0026gt;lc)\n\n/* 协程退出点，至此一个协程算是终止了，清空所有上下文和标志 */\n#define PT_END(pt) LC_END((pt)-\u0026gt;lc); PT_YIELD_FLAG = 0; \\\n                   PT_INIT(pt); return PT_ENDED; }\n\n/* 协程出让点，如果此时协程状态变量 lc 已经变为 __LINE__ 跳转过来的，那么 PT_YIELD_FLAG = 1，表示从出让点继续执行。 */\n#define PT_YIELD(pt)        \\\n  do {            \\\n    PT_YIELD_FLAG = 0;        \\\n    LC_SET((pt)-\u0026gt;lc);       \\\n    if(PT_YIELD_FLAG == 0) {      \\\n      return PT_YIELDED;      \\\n    }           \\\n  } while(0)\n\n/* 附加出让条件 */\n#define PT_YIELD_UNTIL(pt, cond)    \\\n  do {            \\\n    PT_YIELD_FLAG = 0;        \\\n    LC_SET((pt)-\u0026gt;lc);       \\\n    if((PT_YIELD_FLAG == 0) || !(cond)) { \\\n      return PT_YIELDED;      \\\n    }           \\\n  } while(0)\n\n/* 协程阻塞点(blocking),本质上等同于 PT_YIELD_UNTIL，只不过退出码是 PT_WAITING，用来模拟信号量同步 */\n#define PT_WAIT_UNTIL(pt, condition)          \\\n  do {            \\\n    LC_SET((pt)-\u0026gt;lc);       \\\n    if(!(condition)) {        \\\n      return PT_WAITING;      \\\n    }           \\\n  } while(0)\n\n/* 同 PT_WAIT_UNTIL 条件反转 */\n#define PT_WAIT_WHILE(pt, cond)  PT_WAIT_UNTIL((pt), !(cond))\n\n/* 协程调度，调用协程 f 并检查它的退出码，直到协程终止返回 0，否则返回 1。 */\n#define PT_SCHEDULE(f) ((f) \u0026lt; PT_EXITED)\n\n/* 这用于非对称协程，调用者是主协程，pt 是和子协程 thread （可以是多个）关联的上下文句柄，主协程阻塞自己调度子协程，直到所有子协程终止 */\n#define PT_WAIT_THREAD(pt, thread) PT_WAIT_WHILE((pt), PT_SCHEDULE(thread))\n\n/* 用于协程嵌套调度，child 是子协程的上下文句柄 */\n#define PT_SPAWN(pt, child, thread)   \\\n  do {            \\\n    PT_INIT((child));       \\\n    PT_WAIT_THREAD((pt), (thread));   \\\n  } while(0)\u003c/pre\u003e\n\u003cp\u003e暂时介绍这么多，用户还可以根据自己的需求随意扩展组件，比如实现信号量，你会发现脱离了操作系统环境下的信号量竟是如此简单：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003estruct pt_sem {\n  unsigned int count;\n};\n\n#define PT_SEM_INIT(s, c) (s)-\u0026gt;count = c\n\n#define PT_SEM_WAIT(pt, s)  \\\n  do {            \\\n    PT_WAIT_UNTIL(pt, (s)-\u0026gt;count \u0026gt; 0);    \\\n    --(s)-\u0026gt;count;       \\\n  } while(0)\n\n#define PT_SEM_SIGNAL(pt, s) ++(s)-\u0026gt;count\u003c/pre\u003e\n\u003cp\u003e这些应该不需要我多说了吧，呵呵，让我们回到最初例举的生产者-消费者模型，看看protothreads表现怎样。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Protothreads%E5%AE%9E%E6%88%98\"\u003e\u003c/span\u003eProtothreads实战\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026#34;pt-sem.h\u0026#34;\n\n#define NUM_ITEMS 32\n#define BUFSIZE 8\n\nstatic struct pt_sem mutex, full, empty;\n\nPT_THREAD(producer(struct pt *pt))\n{\n  static int produced;\n\n  PT_BEGIN(pt);\n  for (produced = 0; produced \u0026lt; NUM_ITEMS; ++produced) {\n    PT_SEM_WAIT(pt, \u0026amp;full);\n    PT_SEM_WAIT(pt, \u0026amp;mutex);\n    add_to_buffer(produce_item());\n    PT_SEM_SIGNAL(pt, \u0026amp;mutex);\n    PT_SEM_SIGNAL(pt, \u0026amp;empty);\n  }\n  PT_END(pt);\n}\n\nPT_THREAD(consumer(struct pt *pt))\n{\n  static int consumed;\n\n  PT_BEGIN(pt);\n  for (consumed = 0; consumed \u0026lt; NUM_ITEMS; ++consumed) {\n    PT_SEM_WAIT(pt, \u0026amp;empty);\n    PT_SEM_WAIT(pt, \u0026amp;mutex);\n    consume_item(get_from_buffer());\n    PT_SEM_SIGNAL(pt, \u0026amp;mutex);\n    PT_SEM_SIGNAL(pt, \u0026amp;full);\n  }\n  PT_END(pt);\n}\n\nPT_THREAD(driver_thread(struct pt *pt))\n{\n  static struct pt pt_producer, pt_consumer;\n\n  PT_BEGIN(pt);\n  PT_SEM_INIT(\u0026amp;empty, 0);\n  PT_SEM_INIT(\u0026amp;full, BUFSIZE);\n  PT_SEM_INIT(\u0026amp;mutex, 1);\n  PT_INIT(\u0026amp;pt_producer);\n  PT_INIT(\u0026amp;pt_consumer);\n  PT_WAIT_THREAD(pt, producer(\u0026amp;pt_producer) \u0026amp; consumer(\u0026amp;pt_consumer));\n  PT_END(pt);\n}\u003c/pre\u003e\n\u003cp\u003e源码包中的 example-buffer.c 包含了可运行的完整示例，我就不全部贴了。整体框架就是一个 asymmetric coroutines，包括一个主协程 driver_thread 和两个子协程 producer 和 consumer ，其实不用多说大家也懂的，代码非常清晰直观。我们完全可以通过单线程实现一个简单的事件处理需求，你可以任意添加数十万个协程，几乎不会引起任何额外的系统开销和资源占用。唯一需要留意的地方就是没有一个局部变量，因为 protothreads 是 stackless 的，但这不是问题，首先我们已经假定运行环境是单线程的，其次在一个简化的需求下也用不了多少“局部变量”。如果在协程出让时需要保存一些额外的状态量，像迭代生成器，只要数目和大小都是确定并且可控的话，自行扩展协程上下文结构体即可。\u003c/p\u003e\n\u003cp\u003e当然这不是说 protothreads 是万能的，它只是贡献了一种模型，你要使用它首先就得学会适应它。下面列举一些 protothreads 的使用限制：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e由于协程是stackless的，尽量不要使用局部变量，除非该变量对于协程状态是无关紧要的，同理可推，协程所在的代码是不可重入的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e如果协程使用 switch-case 原语封装的组件，那么禁止在实际应用中使用 switch-case 语句，除非用 GNU C 语法中的标签指针替代。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e一个协程内部可以调用其它例程，比如库函数或系统调用，但必须保证该例程是非阻塞的，否则所在线程内的所有协程都将被阻塞。毕竟线程才是执行的最小单位，协程不过是按“时间片轮度”的例程而已。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e官网上还例举了更多\u003ca title=\"http://dunkels.com/adam/pt/examples.html\" href=\"http://dunkels.com/adam/pt/examples.html\" target=\"_blank\"\u003e实例\u003c/a\u003e，都非常实用。另外，一个叫 Craig Graham 的工程师扩展了 pt.h，使得 protothreads 支持 sleep/wake/kill 等操作，文件在此 \u003ca title=\"http://dunkels.com/adam/download/graham-pt.h\" href=\"http://dunkels.com/adam/download/graham-pt.h\" target=\"_blank\"\u003egraham-pt.h\u003c/a\u003e。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%8D%8F%E7%A8%8B%E5%BA%93_DIY_%E6%94%BB%E7%95%A5\"\u003e\u003c/span\u003e协程库 DIY 攻略\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e看到这里，手养的你是否想迫不及待地 DIY 一个协程组件呢？哪怕很多动态语言本身已经支持了协程语义，很多 C 程序员仍然倾向于自己实现组件，网上很多开源代码底层用的主要还是 glibc 的 ucontext 组件，毕竟提供堆栈的协程组件使用起来更加通用方便。你可以自己写一个调度器，然后模拟线程上下文，再然后……你就能搞出一个跨平台的COS了（笑）。GNU Pth 线程库就是这么实现的，其原作者德国人 \u003ca title=\"http://engelschall.com/\" href=\"http://engelschall.com/\" target=\"_blank\"\u003eRalf S. Engelschall\u003c/a\u003e （又是个开源大牛，还写了 \u003ca title=\"http://engelschall.com/software-artist.php\" href=\"http://engelschall.com/software-artist.php\" target=\"_blank\"\u003eOpenSSL 等许多作品\u003c/a\u003e）就写了一篇\u003ca title=\"http://xmailserver.org/rse-pmt.pdf\" href=\"http://xmailserver.org/rse-pmt.pdf\" target=\"_blank\"\u003e论文\u003c/a\u003e教大家如何实现一个线程库。另外 protothreads 官网上也有一大堆\u003ca title=\"http://dunkels.com/adam/pt/links.html\" href=\"http://dunkels.com/adam/pt/links.html\" target=\"_blank\"\u003e推荐阅读\u003c/a\u003e。Have fun！\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12012.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/10/edsm-150x150.gif\" alt=\"State Threads 回调终结者\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12012.html\" class=\"wp_rp_title\"\u003eState Threads 回调终结者\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/8239.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2012/09/lock_free_bicycle-150x150.jpg\" alt=\"无锁队列的实现\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/8239.html\" class=\"wp_rp_title\"\u003e无锁队列的实现\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/03/rust-social-wide-150x150.jpg\" alt=\"Rust语言的编程范式\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_title\"\u003eRust语言的编程范式\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/07/api-design-300x278-2-150x150.jpg\" alt=\"API设计原则 – Qt官网的设计实践总结\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_title\"\u003eAPI设计原则 – Qt官网的设计实践总结\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"Leetcode 编程训练\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_title\"\u003eLeetcode 编程训练\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-10975\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"3b5f485397\"\u003e\u003cimg id=\"rating_10975_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10975, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-5a109e631e976fa7b286dd0e-=\"\"/\u003e\u003cimg id=\"rating_10975_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10975, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-5a109e631e976fa7b286dd0e-=\"\"/\u003e\u003cimg id=\"rating_10975_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10975, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-5a109e631e976fa7b286dd0e-=\"\"/\u003e\u003cimg id=\"rating_10975_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10975, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-5a109e631e976fa7b286dd0e-=\"\"/\u003e\u003cimg id=\"rating_10975_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(10975, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.2, 0, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-5a109e631e976fa7b286dd0e-=\"\"/\u003e (\u003cstrong\u003e40\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.18\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_10975_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"一个“蝇量级” C 语言协程库\"/\u003e\u003cmeta itemprop=\"headline\" content=\"一个“蝇量级” C 语言协程库\"/\u003e\u003cmeta itemprop=\"description\" content=\"（感谢网友 @我的上铺叫路遥 投稿）\n\n协程(coroutine)顾名思义就是“协作的例程”（co-operative routines）。跟具有操作系统概念的线程不一样，协程是在用户空间利用程序语言的语法语义就能实现逻辑上类似多任务的编程技巧。实际上协程的概念比线程还要早，按照 Knuth 的说法“子例程是协程的特例”，一个子例程就是一次子函数调用，那么实际上协程就是类函数一样的程序组件，你...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2014-01-28T10:50:41+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2014-01-28T10:50:41+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/10975.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"Leo\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/10975.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.18\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"40\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-10975-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2014-01-28T10:50:41+08:00",
  "Author": "Leo"
}