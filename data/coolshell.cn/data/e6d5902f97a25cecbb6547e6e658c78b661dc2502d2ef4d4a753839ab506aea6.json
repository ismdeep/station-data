{
  "Source": "coolshell.cn",
  "Title": "语言的歧义",
  "Link": "https://coolshell.cn/articles/830.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"c4ebe24cb4710e41467ce71b-text/javascript\"\u003e\u003c/script\u003e语言是人与人相互沟通的途径，而计算机语言则是人和计算机沟通的途径。就算是任何再完美的自然语言都会有歧义，但是又是什么让人和计算计算机间产生了歧义呢？\u003cbr/\u003e\n下面这篇文章来自Gowri Kumar的\u003ca href=\"http://www.gowrikumar.com/c/index.html\"\u003ePuzzle C\u003c/a\u003e一文。我做了一些整理，挑选了其中的一些问题，并在之后配上相应的答案(这些答案是我加的，如果需要原版的答案可以直接和本文作者Gowri Kumar联系，作者的联系方式可以从\u003ca href=\"http://www.gowrikumar.com/contact.html\"\u003e这里\u003c/a\u003e得到)。\u003c/p\u003e\n\u003ch3\u003epuzzle 1\u003c/h3\u003e\n\u003cp\u003e此段程序的作者希望输出数组中的所有元素，但是他却没有得到他想要的结果，是什么让程序员和计算机产生歧义？\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\n#define TOTAL_ELEMENTS (sizeof(array) / sizeof(array[0]))\nint array[] = {23,34,12,17,204,99,16};\nint main()\n{\n    int d;\n\n    for(d=-1;d \u0026lt;= (TOTAL_ELEMENTS-2);d++)\n        printf(\u0026#34;%d\\n\u0026#34;,array[d+1]);\n\n    return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cspan id=\"more-830\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e解答：\u003c/strong\u003e\u003cbr/\u003e\n运行上面的程序，结果是什么都没有输出，导致这个结果的原因是sizeof的返回值是一个unsinged int，为此在比较int d 和TOTAL_ELEMENTS两个值都被转换成了unsigned int来进行比较，这样就导致-1被转换成一个非常大的值，以至于for循环不满足条件。因此，如果程序员不能理解sizeof操作符返回的是一个unsigned int的话，就会产生类似如上的人机歧义。\u003c/p\u003e\n\u003ch3\u003epuzzle 2\u003c/h3\u003e\n\u003cp\u003e看上去非常完美的程序，是什么导致了编程程序不通过？\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\n\nvoid OS_Solaris_print()\n{\n    printf(\u0026#34;Solaris - Sun Microsystems\\n\u0026#34;);\n}\n\nvoid OS_Windows_print()\n{\n    printf(\u0026#34;Windows - Microsoft\\n\u0026#34;);\n}\n\nvoid OS_HP-UX_print()\n{\n    printf(\u0026#34;HP-UX - Hewlett Packard\\n\u0026#34;);\n}\n\nint main()\n{\n    int num;\n    printf(\u0026#34;Enter the number (1-3):\\n\u0026#34;);\n    scanf(\u0026#34;%d\u0026#34;,\u0026amp;num);\n\n    switch(num)\n    {\n        case 1:\n            OS_Solaris_print();\n            break;\n        case 2:\n            OS_Windows_print();\n            break;\n        case 3:\n            OS_HP-UX_print();\n            break;\n        default:\n            printf(\u0026#34;Hmm! only 1-3 :-)\\n\u0026#34;);\n        break;\n    }\n    return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e解答：\u003c/strong\u003e\u003cbr/\u003e\n程序员要以计算机的语言进行思考，不上上面那段程序导致的结果不止是歧义这么简单，而直接的结果是，导致计算机”听不懂”你在说什么。导致计算机听不懂的原因是HP-UX中的’-‘是减号？还是其他什么？\u003c/p\u003e\n\u003ch3\u003epuzzle 3\u003c/h3\u003e\n\u003cp\u003e下面这段程序会输出什么，为什么？\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eenum {false,true};\n\nint main()\n{\n    int i=1;\n    do\n    {\n        printf(\u0026#34;%d\\n\u0026#34;,i);\n        i++;\n\n        if(i \u0026lt; 15)\n            continue;\n    }while(false);\n\n    return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e解答：\u003c/strong\u003e\u003cbr/\u003e\n1到14？不对，结果是1，因为continue的含义是不执行循环体之后语义，而直接到循环点。明显while(false)不属于循环体。导致这段程序的歧义就是：程序员没有完全理解计算机语言中continue的含义。\u003c/p\u003e\n\u003ch3\u003epuzzle 4\u003c/h3\u003e\n\u003cp\u003e下面这段程序的输出结果是：\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\n#define f(a,b) a##b\n#define g(a)   #a\n#define h(a) g(a)\n\nint main()\n{\n        printf(\u0026#34;%s\\n\u0026#34;, h(f(1,2)));\n        printf(\u0026#34;%s\\n\u0026#34;, g(f(1,2)));\n        return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e当然，你首先要了解##和#的用法，如果不懂的话，本题你可以直接跳过。\u003cbr/\u003e\n\u003cstrong\u003e解答：\u003c/strong\u003e\u003cbr/\u003e\n看到这段程序你可能会认为，这两个printf输出的同一个结果，可是答案却非如此，本题的输出是12和f(1,2)，为什么会这样呢？因为这是宏，宏的解开不象函数执行，由里带外。\u003c/p\u003e\n\u003ch3\u003epuzzle 5\u003c/h3\u003e\n\u003cp\u003e下面这段程序的输出是什么\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e#include \u0026lt;stdio.h\u0026gt;\u003cbr/\u003e\nint main()\u003cbr/\u003e\n{\u003cbr/\u003e\nint a=10;\u003cbr/\u003e\nswitch(a)\u003cbr/\u003e\n{\u003cbr/\u003e\ncase ‘1’:\u003cbr/\u003e\nprintf(“ONE\\n”);\u003cbr/\u003e\nbreak;\u003cbr/\u003e\ncase ‘2’:\u003cbr/\u003e\nprintf(“TWO\\n”);\u003cbr/\u003e\nbreak;\u003cbr/\u003e\ndefau1t:\u003cbr/\u003e\nprintf(“NONE\\n”);\u003cbr/\u003e\n｝\u003cbr/\u003e\nreturn 0;\u003cbr/\u003e\n}\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003e解答：\u003c/strong\u003e\u003cbr/\u003e\n本题我故意将语法敏感插件去掉，为了就是能得到更好的效果，这道题又是什么让歧义再次发生，如果不仔细你可能永远都找不到答案，如果真到的到了那个时候，你是否会因为对default语义的怀疑，而不敢再使用default？本题的歧义点就是default，看好了是defau1t而不是default，不是关键字！为什么计算能”听懂”这样的defau1t，算然它听懂了，但它的理解却是标号”defau1t”\u003c/p\u003e\n\u003ch3\u003epuzzle 6\u003c/h3\u003e\n\u003cp\u003e下面这段程序的输出什么？\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\n\nint main()\n{\n    float f=0.0f;\n    int i;\n\n    for(i=0;i\u0026lt;10;i++)\n        f = f + 0.1f;\n\n    if(f == 1.0f)\n        printf(\u0026#34;f is 1.0 \\n\u0026#34;);\n    else\n        printf(\u0026#34;f is NOT 1.0 \\n\u0026#34;);\n\n    return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e解答：\u003c/strong\u003e\u003cbr/\u003e\n你是否似曾相识？不错这个问题在酷壳之前的博文《\u003ca href=\"https://coolshell.cn/articles/688.html\"\u003e你能做对下面这些JavaScript的题吗？\u003c/a\u003e》中曾今提到过，不要让两个浮点数相比较。所以本题的答案是”f is NOT 1.0″，如果你真想比较两个浮点数时，你应该按一定精度来比较，比如你一定要在本题中做比较那么你应该这么做if( (f – 1.0f)\u0026lt;0.1 )\u003c/p\u003e\n\u003ch3\u003epuzzle 7\u003c/h3\u003e\n\u003cp\u003e下面两个函数是否具有相同的原型？\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003eint foobar(void);\nint foobar();\n\u003c/pre\u003e\n\u003cp\u003e下面这两段程序将会帮你找到上题的答案\u003cbr/\u003e\n程序1\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026lt;stdio.h\u0026gt;\nvoid foobar1(void)\n{\n    printf(\u0026#34;In foobar1\\n\u0026#34;);\n}\n\nvoid foobar2()\n{\n    printf(\u0026#34;In foobar2\\n\u0026#34;);\n}\n\nint main()\n{\n    char ch = \u0026#39;a\u0026#39;;\n\n    foobar1();\n    foobar2(33, ch);\n\n     return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e程序2\u003c/p\u003e\n\u003cpre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\"\u003e#include \u0026#34;stdio.h\u0026#34;\nvoid foobar1(void)\n{\n    printf(\u0026#34;In foobar1\\n\u0026#34;);\n}\n\nvoid foobar2()\n{\n    printf(\u0026#34;In foobar2\\n\u0026#34;);\n}\n\nint main()\n{\n    char ch = \u0026#39;a\u0026#39;;\n\n    foobar1(33,ch);\n    foobar2();\n\n    return 0;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e解答\u003c/strong\u003e\u003cbr/\u003e\n程序片段一，没有问题，程序片段二编译报错，这两个程序告诉我们，foobar1(void)和foobar2()是有不同原型的的。我们可以在《ISO/IEC 9899》的C语言规范找到下面两段关于函数声明的描述\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e10.The special case of an unnamed parameter of type void as the only item in the list specifies that the function has no parameters\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\u003cp\u003e14.An identifier list declares only the identifiers of the parameters of the function. An empty list in a function declarator that is part of a definition of that function specifies that the function has no parameters. The empty list in a function declarator that is not part of a definition of that function specifies that no information about the number or types of the parameters is supplied.124)\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e上面两段话的意思就是：foobar1(void)是没有参数，而foobar1()等于forbar1(…)等于参数类型未知。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e总结\u003c/strong\u003e\u003cbr/\u003e\n看到这些C语言的题目，不禁让我想起了巴别塔，计算机语言作为如此严谨的语言都有可能带来如此多的歧义，更何况自然语言，更何况相互不通的自然语言。要杜绝歧义，我们就必须清晰的了解计算机语言每一个指令的语义。就如同人类，人类要和平就要相互了解各自的文化。愿世界上人们清晰了解别人的语言的语义，愿世界不再因为文化的不同而战争，原世界和平。\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/03/rust-social-wide-150x150.jpg\" alt=\"Rust语言的编程范式\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/20845.html\" class=\"wp_rp_title\"\u003eRust语言的编程范式\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\"\u003e程序员练级攻略（2018) 与我的专栏\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/07/api-design-300x278-2-150x150.jpg\" alt=\"API设计原则 – Qt官网的设计实践总结\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_title\"\u003eAPI设计原则 – Qt官网的设计实践总结\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg\" alt=\"Leetcode 编程训练\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12052.html\" class=\"wp_rp_title\"\u003eLeetcode 编程训练\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/12012.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/10/edsm-150x150.gif\" alt=\"State Threads 回调终结者\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/12012.html\" class=\"wp_rp_title\"\u003eState Threads 回调终结者\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11466.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/04/c99-150x150.jpg\" alt=\"C语言的整型溢出问题\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11466.html\" class=\"wp_rp_title\"\u003eC语言的整型溢出问题\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-830\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"36a3ff232e\"\u003e\u003cimg id=\"rating_830_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(830, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-c4ebe24cb4710e41467ce71b-=\"\"/\u003e\u003cimg id=\"rating_830_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(830, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-c4ebe24cb4710e41467ce71b-=\"\"/\u003e\u003cimg id=\"rating_830_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(830, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-c4ebe24cb4710e41467ce71b-=\"\"/\u003e\u003cimg id=\"rating_830_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(830, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-c4ebe24cb4710e41467ce71b-=\"\"/\u003e\u003cimg id=\"rating_830_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(830, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-c4ebe24cb4710e41467ce71b-=\"\"/\u003e (\u003cstrong\u003e27\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.30\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_830_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"语言的歧义\"/\u003e\u003cmeta itemprop=\"headline\" content=\"语言的歧义\"/\u003e\u003cmeta itemprop=\"description\" content=\"语言是人与人相互沟通的途径，而计算机语言则是人和计算机沟通的途径。就算是任何再完美的自然语言都会有歧义，但是又是什么让人和计算计算机间产生了歧义呢？\n下面这篇文章来自Gowri Kumar的Puzzle C一文。我做了一些整理，挑选了其中的一些问题，并在之后配上相应的答案(这些答案是我加的，如果需要原版的答案可以直接和本文作者Gowri Kumar联系，作者的联系方式可以从这里得到)。\npuz...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2009-05-17T15:57:59+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2011-12-06T10:49:01+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/830.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"Neo\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/830.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.3\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"27\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-830-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2009-05-17T15:57:59+08:00",
  "Author": "Neo"
}