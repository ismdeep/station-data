{
  "Source": "coolshell.cn",
  "Title": "“单元测试要做多细？”",
  "Link": "https://coolshell.cn/articles/8209.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"233df79497914c034f29d47b-text/javascript\"\u003e\u003c/script\u003e这篇文章主要来源是StackOverflow上的一个回答——“\u003ca title=\"How deep are your unit tests?\" href=\"http://stackoverflow.com/questions/153234/how-deep-are-your-unit-tests\" target=\"_blank\"\u003eHow deep are your unit tests?\u003c/a\u003e”。一个有13.8K的分的人（\u003ca href=\"http://stackoverflow.com/users/1116/john-nolan\"\u003eJohn Nolan\u003c/a\u003e）问了个关于TDD的问题，这个问题并不新鲜，最亮的是这个问题的Best Answer，这个问题是——\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e“TDD需要花时间写测试，而我们一般多少会写一些代码，而第一个测试是测试我的构造函数有没有把这个类的变量都设置对了，这会不会太过分了？那么，我们写单元测试的这个单元的粒度到底是什么样的？并且，是不是我们的测试测试得多了点？”\u003c/p\u003e\n\u003ch4\u003e答案\u003c/h4\u003e\n\u003cp\u003eStackOverflow上，这个问题的答案是这样的——\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e“I get paid for code that works, not for tests, so my philosophy is to test as little as possible to reach a given level of confidence (I suspect this level of confidence is high compared to industry standards, but that could just be hubris). If I don’t typically make a kind of mistake (like setting the wrong variables in a constructor), I don’t test for it. I do tend to make sense of test errors, so I’m extra careful when I have logic with complicated conditionals. When coding on a team, I modify my strategy to carefully test code that we, collectively, tend to get wrong.”\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e\u003cstrong\u003e老板为我的代码付报酬，而不是测试，所以，我对此的价值观是——测试越少越好，少到你对你的代码质量达到了某种自信\u003c/strong\u003e（我觉得这种的自信标准应该要高于业内的标准，当然，这种自信也可能是种自大）。如果我的编码生涯中不会犯这种典型的错误（如：在构造函数中设了个错误的值），那我就不会测试它。\u003cstrong\u003e我倾向于去对那些有意义的错误做测试，所以，我对一些比较复杂的条件逻辑会异常地小心\u003c/strong\u003e。当在一个团队中，我会非常小心的测试那些会让团队容易出错的代码。\u003c/p\u003e\n\u003cp\u003e这个回答对TDD似乎有一种否定，\u003cstrong\u003e最亮的是这个问题是由\u003ca href=\"https://en.wikipedia.org/wiki/Kent_Beck\" target=\"_blank\"\u003eKent Beck\u003c/a\u003e，Kent是XP和TDD的创造者，是敏捷开发实践方法的奠基人\u003c/strong\u003e。以致于还有人调侃到——\u003c/p\u003e\n\u003cp\u003e\u003cspan id=\"more-8209\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" class=\"alignright size-full wp-image-8212\" title=\"fight club\" src=\"https://coolshell.cn/wp-content/uploads/2012/09/fight.jpg\" alt=\"\" width=\"342\" height=\"195\" srcset=\"https://coolshell.cn/wp-content/uploads/2012/09/fight.jpg 342w, https://coolshell.cn/wp-content/uploads/2012/09/fight-300x171.jpg 300w\" sizes=\"(max-width: 342px) 100vw, 342px\"/\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003eThe world does not think that Kent Beck would say this! There are legions of developers dutifully pursuing 100% coverage because they think it is what Kent Beck would do! I have told many that you said, in your XP book, that you don’t always adhere to Test First religiously. But I’m surprised too.\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e只是要地球人都不会觉得Kent Beck会这么说啊！我们有大堆程序员在忠实的追求着100%的代码测试覆盖率，因为这些程序员觉得Kent Beck也会这么干！我告诉过很多人，你在你的XP的书里说过，你并不总是支持“宗教信仰式的Test First”，但是今天Kent这么说，我还是很惊讶！\u003c/p\u003e\n\u003cp\u003e后面还有一些人不同意Kent， 我一下子从这个事中想到了《\u003ca href=\"http://movie.douban.com/subject/1292000/\" target=\"_blank\"\u003efight club\u003c/a\u003e》里的那个精神分裂者创建了一个连自己都反对的地下组织。呵呵。\u003c/p\u003e\n\u003cp\u003e其实我是非常同意Kent的，怎么合适怎么搞，爱怎么测试就怎么测试，只要自己和团队有信心就可以了。没有必要就一定要写测试，一定要测试先行。\u003c/p\u003e\n\u003ch4\u003e其它答案\u003c/h4\u003e\n\u003cp\u003e八卦完了，我们还是来认认真真地看看这个问题中其它的其它答案，因为这个问题的也是国人爱问题的问题。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e第二个答案：值得借鉴\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e开发过程中，单元测试应该来测试那些可能会出错的地方，或是那些边界情况。\u003c/li\u003e\n\u003cli\u003e维护过程中，单元测试应该跟着我们的bug report来走，每一个bug都应该有个UT。于是程序员就会对自己的代码变更有两个自信，一是bug 被 fixed，二是相同的bug不会再次出现。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e第三个答案：给敏捷咨师看的答案\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e这个答案在说，我们只注意到了TDD中的T，而忽略了第一个D，就是Driven…… bla bla bla… 又这扯这些空洞的东西了，国内的各种不学无术的敏捷咨询师最好这一口了。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e第四个答案：致那些什么都要测试的人\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果我们需要测试一个像 \u003ccode\u003eint square(int x)\u003c/code\u003e 这样的开根函数，我们需要40亿个测试（每个数都要测试）。\u003c/p\u003e\n\u003cp\u003e事实上这种情况可能还更糟糕，如果有这样一个方法 \u003ccode\u003evoid setX(int newX)\u003c/code\u003e 不会更改其它的成员变量，如：obj.z, Obj.y，那么，你是不是还要去测试一下别的变量没有被改变？\u003c/p\u003e\n\u003cp\u003e我们只可能测试那些有意义的，确实要测试的案例。\u003c/p\u003e\n\u003ch4\u003e我的观点\u003c/h4\u003e\n\u003cp\u003e我在《\u003ca title=\"TDD并不是看上去的那么美\" href=\"https://coolshell.cn/articles/3649.html\" target=\"_blank\"\u003eTDD并没有看上去的那么美\u003c/a\u003e》一文中说过我的观点了，我就不再多说了。我还是把下面这些观点列出来，供大家思考和讨论：\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e1）\u003cstrong\u003e我国的教育对我们最大的洗脑不是掩盖事实，而让我们习惯于标准答案，习惯于教条，从而不会思考！敏捷开发中的若干东西似乎都成了软件开发中对某种标准答案的教条，实在是悲哀！\u003c/strong\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e2）\u003cstrong\u003e软件开发是一种脑力劳动，是一种知识密集型的工作，就像艺术作品一样，创作过程和成品是没有标准答案的。\u003c/strong\u003e\u003c/p\u003e\n\u003cp style=\"padding-left: 30px;\"\u003e3）\u003cstrong\u003e软件的质量不是测试出来的，而是设计和维护出来的。就像工匠们在一点一点地雕琢他们的作品一样。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eUT的粒度是多少，这个不重要，重要的是你会不会自己思考你的软件应该怎么做，怎么测试。\u003c/p\u003e\n\u003cp\u003e（全文完）\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/5531.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/14.jpg\" alt=\"Test-Driven Development？别逗了\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/5531.html\" class=\"wp_rp_title\"\u003eTest-Driven Development？别逗了\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/5143.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/10.jpg\" alt=\"在新浪微博上关于敏捷的一些讨论\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/5143.html\" class=\"wp_rp_title\"\u003e在新浪微博上关于敏捷的一些讨论\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/4891.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/17.jpg\" alt=\"Bob大叔和Jim Coplien对TDD的论战\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/4891.html\" class=\"wp_rp_title\"\u003eBob大叔和Jim Coplien对TDD的论战\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/3778.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/30.jpg\" alt=\"敏捷水管工\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/3778.html\" class=\"wp_rp_title\"\u003e敏捷水管工\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/3745.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/26.jpg\" alt=\"再谈敏捷和ThoughtWorks中国咨询师\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/3745.html\" class=\"wp_rp_title\"\u003e再谈敏捷和ThoughtWorks中国咨询师\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/3766.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2011/02/feedback_cycle-150x150.jpg\" alt=\"[转]TDD到底美还是不美？\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/3766.html\" class=\"wp_rp_title\"\u003e[转]TDD到底美还是不美？\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-8209\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"80bda719f2\"\u003e\u003cimg id=\"rating_8209_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8209, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-233df79497914c034f29d47b-=\"\"/\u003e\u003cimg id=\"rating_8209_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8209, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-233df79497914c034f29d47b-=\"\"/\u003e\u003cimg id=\"rating_8209_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8209, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-233df79497914c034f29d47b-=\"\"/\u003e\u003cimg id=\"rating_8209_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8209, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-233df79497914c034f29d47b-=\"\"/\u003e\u003cimg id=\"rating_8209_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_off.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(8209, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(3.9, 4, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-233df79497914c034f29d47b-=\"\"/\u003e (\u003cstrong\u003e30\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e3.90\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_8209_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"“单元测试要做多细？”\"/\u003e\u003cmeta itemprop=\"headline\" content=\"“单元测试要做多细？”\"/\u003e\u003cmeta itemprop=\"description\" content=\"这篇文章主要来源是StackOverflow上的一个回答——“How deep are your unit tests?”。一个有13.8K的分的人（John Nolan）问了个关于TDD的问题，这个问题并不新鲜，最亮的是这个问题的Best Answer，这个问题是——\n“TDD需要花时间写测试，而我们一般多少会写一些代码，而第一个测试是测试我的构造函数有没有把这个类的变量都设置对了，这会不会太...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2012-09-03T08:13:31+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2012-10-30T16:56:58+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/8209.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/8209.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"3.9\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"30\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-8209-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2012-09-03T08:13:31+08:00",
  "Author": "陈皓"
}