{
  "Source": "coolshell.cn",
  "Title": "HTTP API 认证授权术",
  "Link": "https://coolshell.cn/articles/19395.html",
  "Content": "\u003cdiv class=\"entry-content\"\u003e\n\u003cp\u003e\u003cscript async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\" crossorigin=\"anonymous\" type=\"0b839bc5f936a7e3554f493a-text/javascript\"\u003e\u003c/script\u003e\u003cimg decoding=\"async\" class=\"alignright size-sup_wechat_big \" src=\"https://coolshell.cn/wp-content/uploads/2019/05/Authorization-360x200.png\" alt=\"\" width=\"360\" height=\"200\"/\u003e我们知道，HTTP是无状态的，所以，当我们需要获得用户是否在登录的状态时，我们需要检查用户的登录状态，一般来说，用户的登录成功后，服务器会发一个登录凭证（又被叫作Token），就像你去访问某个公司，在前台被认证过合法后，这个公司的前台会给你的一个访客卡一样，之后，你在这个公司内去到哪都用这个访客卡来开门，而不再校验你是哪一个人。在计算机的世界里，这个登录凭证的相关数据会放在两种地方，一个地方在用户端，以Cookie的方式（一般不会放在浏览器的Local Storage，因为这很容易出现登录凭证被XSS攻击），另一个地方是放在服务器端，又叫Session的方式（SessonID存于Cookie）。\u003c/p\u003e\n\u003cp\u003e但是，这个世界还是比较复杂的，除了用户访问，还有用户委托的第三方的应用，还有企业和企业间的调用，这里，我想把业内常用的一些 API认证技术相对系统地总结归纳一下，这样可以让大家更为全面的了解这些技术。\u003cstrong\u003e注意，这是一篇长文！\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e本篇文章会覆盖如下技术：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHTTP Basic\u003c/li\u003e\n\u003cli\u003eDigest Access\u003c/li\u003e\n\u003cli\u003eApp Secret Key + HMAC\u003c/li\u003e\n\u003cli\u003eJWT – JSON Web Tokens\u003c/li\u003e\n\u003cli\u003eOAuth 1.0 – 3 legged \u0026amp; 2 legged\u003c/li\u003e\n\u003cli\u003eOAuth 2.0 – Authentication Code \u0026amp; Client Credential\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan id=\"more-19395\"\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cdiv id=\"ez-toc-container\" class=\"ez-toc-v2_0_48 counter-hierarchy ez-toc-counter ez-toc-grey ez-toc-container-direction\"\u003e\n\u003cdiv class=\"ez-toc-title-container\"\u003e\n\u003cp class=\"ez-toc-title\"\u003e目录\u003c/p\u003e\n\u003cspan class=\"ez-toc-title-toggle\"\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cnav\u003e\u003cul class=\"ez-toc-list ez-toc-list-level-1 \"\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-1\" href=\"#HTTP_Basic\" title=\"HTTP Basic\"\u003eHTTP Basic\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-2\" href=\"#Digest_Access\" title=\"Digest Access\"\u003eDigest Access\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-3\" href=\"#App_Secret_Key_HMAC\" title=\"App Secret Key + HMAC\"\u003eApp Secret Key + HMAC\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-4\" href=\"#JWT_%E2%80%93_JSON_Web_Tokens\" title=\"JWT – JSON Web Tokens\"\u003eJWT – JSON Web Tokens\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-5\" href=\"#OAuth_10\" title=\"OAuth 1.0\"\u003eOAuth 1.0\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-6\" href=\"#OAuth_20\" title=\"OAuth 2.0\"\u003eOAuth 2.0\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-7\" href=\"#Authorization_Code_Flow\" title=\"Authorization Code Flow\"\u003eAuthorization Code Flow\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-8\" href=\"#_Client_Credential_Flow\" title=\" Client Credential Flow\"\u003e Client Credential Flow\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-4\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-9\" href=\"#%E5%B0%8F%E7%BB%93\" title=\"小结\"\u003e小结\u003c/a\u003e\u003cul class=\"ez-toc-list-level-5\"\u003e\u003cli class=\"ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-10\" href=\"#%E4%B8%A4%E4%B8%AA%E6%9C%AF%E8%AF%AD%E5%92%8C%E4%B8%89%E4%B8%AA%E6%A6%82%E5%BF%B5\" title=\"两个术语和三个概念\"\u003e两个术语和三个概念\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-11\" href=\"#%E6%98%8E%E7%99%BD%E4%B8%80%E4%BA%9B%E5%88%9D%E8%A1%B7\" title=\"明白一些初衷\"\u003e明白一些初衷\u003c/a\u003e\u003c/li\u003e\u003cli class=\"ez-toc-page-1 ez-toc-heading-level-5\"\u003e\u003ca class=\"ez-toc-link ez-toc-heading-12\" href=\"#%E7%9B%B8%E5%85%B3%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\" title=\"相关的注意事项\"\u003e相关的注意事项\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"HTTP_Basic\"\u003e\u003c/span\u003eHTTP Basic\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003eHTTP Basic 是一个非常传统的API认证技术，也是一个比较简单的技术。这个技术也就是使用 \u003ccode\u003eusername\u003c/code\u003e和 \u003ccode\u003epassword\u003c/code\u003e 来进行登录。整个过程被定义在了 \u003ca href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eRFC 2617\u003c/a\u003e 中，也被描述在了 \u003ca href=\"https://en.wikipedia.org/wiki/Basic_access_authentication\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eWikipedia: Basic Access Authentication\u003c/a\u003e 词条中，同时也可以参看 \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eMDN HTTP Authentication\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e其技术原理如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e把 \u003ccode\u003eusername\u003c/code\u003e和 \u003ccode\u003epassword\u003c/code\u003e 做成  \u003ccode\u003eusername:password\u003c/code\u003e 的样子（用冒号分隔）\u003c/li\u003e\n\u003cli\u003e进行Base64编码。\u003ccode\u003eBase64(\u0026#34;username:password\u0026#34;)\u003c/code\u003e 得到一个字符串（如：把 \u003ccode\u003ehaoel:coolshell\u003c/code\u003e 进行base64 后可以得到 \u003ccode\u003eaGFvZW86Y29vbHNoZWxsCg\u003c/code\u003e ）\u003c/li\u003e\n\u003cli\u003e把 \u003ccode\u003eaGFvZW86Y29vbHNoZWxsCg\u003c/code\u003e放到HTTP头中 \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003ccode\u003eAuthorization\u003c/code\u003e\u003c/a\u003e 字段中，形成 \u003ccode\u003eAuthorization: Basic aGFvZW86Y29vbHNoZWxsCg\u003c/code\u003e，然后发送到服务端。\u003c/li\u003e\n\u003cli\u003e服务端如果没有在头里看到认证字段，则返回401错，以及一个个\u003ccode\u003e\u003ccode\u003e\u003c/code\u003e\u003c/code\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eWWW-Authenticate\u003c/a\u003e\u003ccode\u003e: Basic Realm=\u0026#39;HelloWorld\u0026#39;\u003c/code\u003e 之类的头要求客户端进行认证。之后如果没有认证通过，则返回一个401错。如果服务端认证通过，那么会返回200。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e我们可以看到，使用Base64的目的无非就是为了把一些特殊的字符给搞掉，这样就可以放在HTTP协议里传输了。而这种方式的问题最大的问题就是把用户名和口令放在网络上传，所以，一般要配合TLS/SSL的安全加密方式来使用。我们可以看到 \u003ca href=\"https://developer.atlassian.com/cloud/jira/platform/jira-rest-api-basic-authentication/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eJIRA Cloud 的API认证\u003c/a\u003e支持HTTP Basic 这样的方式。\u003c/p\u003e\n\u003cp\u003e但我们还是要知道，这种把用户名和密码同时放在公网上传输的方式有点不太好，因为Base64不是加密协议，而是编码协议，所以就算是有HTTPS作为安全保护，给人的感觉还是不放心。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"Digest_Access\"\u003e\u003c/span\u003eDigest Access\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e中文称“HTTP 摘要认证”，最初被定义在了 \u003ca href=\"https://tools.ietf.org/html/rfc2069\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eRFC 2069\u003c/a\u003e 文档中（后来被 \u003ca class=\"external mw-magiclink-rfc\" href=\"https://tools.ietf.org/html/rfc2617\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003eRFC 2617\u003c/a\u003e 引入了一系列安全增强的选项；“保护质量”(qop)、随机数计数器由客户端增加、以及客户生成的随机数）。\u003c/p\u003e\n\u003cp\u003e其基本思路是，请求方把用户名口令和域做一个MD5 –  \u003ccode\u003eMD5(username:realm:password)\u003c/code\u003e 然后传给服务器，这样就不会在网上传用户名和口令了，但是，因为用户名和口令基本不会变，所以，这个MD5的字符串也是比较固定的，因此，这个认证过程在其中加入了两个事，一个是 \u003ccode\u003enonce\u003c/code\u003e 另一个是 \u003ccode\u003eqop\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e首先，调用方发起一个普通的HTTP请求。比如：\u003ccode\u003eGET /coolshell/admin/ HTTP/1.1\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e服务端自然不能认证能过，服务端返回401错误，并且在HTTP头里的 \u003ccode\u003eWWW-Authenticate\u003c/code\u003e 包含如下信息：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre style=\"padding-left: 40px;\"\u003e WWW-Authenticate: Digest realm=\u0026#34;\u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"7a0e1f090e081f1b16173a1215090e54191517\"\u003e[email protected]\u003c/a\u003e\u0026#34;,\n                        qop=\u0026#34;auth,auth-int\u0026#34;,\n                        nonce=\u0026#34;dcd98b7102dd2f0e8b11d0f600bfb0c093\u0026#34;,\n                        opaque=\u0026#34;5ccc069c403ebaf9f0171e9517f40e41\u0026#34;\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e其中的 \u003ccode\u003enonce\u003c/code\u003e 为服务器端生成的随机数，然后，客户端做 \u003ccode\u003eHASH1=MD5(MD5(username:realm:password):nonce:cnonce)\u003c/code\u003e ，其中的 \u003ccode\u003ecnonce\u003c/code\u003e 为客户端生成的随机数，这样就可以使得整个MD5的结果是不一样的。\u003c/li\u003e\n\u003cli\u003e如果 \u003ccode\u003eqop\u003c/code\u003e 中包含了 \u003ccode\u003eauth\u003c/code\u003e ，那么还得做  \u003ccode\u003eHASH2=MD5(method:digestURI)\u003c/code\u003e 其中的 \u003ccode\u003emethod\u003c/code\u003e 就是HTTP的请求方法（GET/POST…），\u003ccode\u003edigestURI\u003c/code\u003e 是请求的URL。\u003c/li\u003e\n\u003cli\u003e如果 \u003ccode\u003eqop\u003c/code\u003e 中包含了 \u003ccode\u003eauth-init\u003c/code\u003e ，那么，得做  \u003ccode\u003eHASH2=MD5(method:digestURI:MD5(entityBody))\u003c/code\u003e 其中的 \u003ccode\u003eentityBody\u003c/code\u003e 就是HTTP请求的整个数据体。\u003c/li\u003e\n\u003cli\u003e然后，得到 \u003ccode\u003eresponse = MD5(HASH1:nonce:nonceCount:cnonce:qop:HASH2)\u003c/code\u003e 如果没有 \u003ccode\u003eqop\u003c/code\u003e则 \u003ccode\u003eresponse = MD5(HA1:nonce:HA2)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e最后，我们的客户端对服务端发起如下请求—— 注意HTTP头的 \u003ccode\u003eAuthorization: Digest ...\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre style=\"padding-left: 40px;\"\u003eGET /dir/index.html HTTP/1.0\nHost: localhost\nAuthorization: Digest username=\u0026#34;Mufasa\u0026#34;,\n                     realm=\u0026#34;\u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"31455442454354505d5c71595e42451f525e5c\"\u003e[email protected]\u003c/a\u003e\u0026#34;,\n                     nonce=\u0026#34;dcd98b7102dd2f0e8b11d0f600bfb0c093\u0026#34;,\n                     uri=\u0026#34;%2Fcoolshell%2Fadmin\u0026#34;,\n                     qop=auth,\n                     nc=00000001,\n                     cnonce=\u0026#34;0a4f113b\u0026#34;,\n                     response=\u0026#34;6629fae49393a05397450978507c4ef1\u0026#34;,\n                     opaque=\u0026#34;5ccc069c403ebaf9f0171e9517f40e41\u0026#34;\u003c/pre\u003e\n\u003cp\u003e维基百科上的 \u003ca href=\"https://en.wikipedia.org/wiki/Digest_access_authentication\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eWikipedia: Digest access authentication\u003c/a\u003e 词条非常详细地描述了这个细节。\u003c/p\u003e\n\u003cp\u003e摘要认证这个方式会比之前的方式要好一些，因为没有在网上传递用户的密码，而只是把密码的MD5传送过去，相对会比较安全，而且，其并不需要是否TLS/SSL的安全链接。但是，\u003cstrong\u003e别看这个算法这么复杂，最后你可以发现，整个过程其实关键是用户的password，这个password如果不够得杂，其实是可以被暴力破解的，而且，整个过程是非常容易受到中间人攻击\u003c/strong\u003e——比如一个中间人告诉客户端需要的 Basic 的认证方式 或是 老旧签名认证方式（RFC2069）。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"App_Secret_Key_HMAC\"\u003e\u003c/span\u003eApp Secret Key + HMAC\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e先说HMAC技术，这个东西来自于MAC – \u003ca href=\"https://en.wikipedia.org/wiki/Message_authentication_code\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eMessage Authentication Code\u003c/a\u003e，是一种用于给消息签名的技术，也就是说，我们怕消息在传递的过程中被人修改，所以，我们需要用对消息进行一个MAC算法，得到一个摘要字串，然后，接收方得到消息后，进行同样的计算，然后比较这个MAC字符串，如果一致，则表明没有被修改过（整个过程参看下图）。而HMAC – \u003ca href=\"https://en.wikipedia.org/wiki/HMAC\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eHash-based Authenticsation Code\u003c/a\u003e，指的是利用Hash技术完成这一工作，比如：SHA-256算法。\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-large\" src=\"https://coolshell.cn/wp-content/uploads/2019/05/MAC-1024x634.png\" alt=\"\" width=\"640\" height=\"396\"/\u003e\u003c/p\u003e\n\u003cp style=\"text-align: center;\"\u003e（图片来自 \u003ca href=\"https://en.wikipedia.org/wiki/Message_authentication_code\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eWikipedia – MAC 词条\u003c/a\u003e ）\u003c/p\u003e\n\u003cp\u003e我们再来说App ID，这个东西跟验证没有关系，只是用来区分，是谁来调用API的，就像我们每个人的身份证一样，只是用来标注不同的人，不是用来做身份认证的。与前面的不同之处是，这里，我们需要用App ID 来映射一个用于加密的密钥，这样一来，我们就可以在服务器端进行相关的管理，我们可以生成若干个密钥对（AppID, AppSecret），并可以有更细粒度的操作权限管理。\u003c/p\u003e\n\u003cp\u003e把AppID和HMAC用于API认证，目前来说，玩得最好最专业的应该是AWS了，我们可以通过\u003ca href=\"https://docs.aws.amazon.com/zh_cn/general/latest/gr/sigv4-create-canonical-request.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eS3的API请求签名文档\u003c/a\u003e看到AWS是怎么玩的。整个过程还是非常复杂的，可以通过下面的图片流程看个大概。基本上来说，分成如下几个步骤：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e把HTTP的请求（方法、URI、查询字串、头、签名头，body）打个包叫 \u003ccode\u003eCanonicalRequest\u003c/code\u003e，作个SHA-256的签名，然后再做一个base16的编码\u003c/li\u003e\n\u003cli\u003e把上面的这个签名和签名算法 \u003ccode\u003eAWS4-HMAC-SHA256\u003c/code\u003e、时间戳、Scop，再打一个包，叫 \u003ccode\u003eStringToSign\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e准备签名，用 \u003ccode\u003eAWSSecretAccessKey\u003c/code\u003e来对日期签一个 \u003ccode\u003eDataKey\u003c/code\u003e，再用 \u003ccode\u003eDataKey\u003c/code\u003e 对要操作的Region签一个 \u003ccode\u003eDataRegionKey\u003c/code\u003e ，再对相关的服务签一个\u003ccode\u003eDataRegionServiceKey\u003c/code\u003e ，最后得到 \u003ccode\u003eSigningKey\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e用第三步的 \u003ccode\u003eSigningKey\u003c/code\u003e来对第二步的 \u003ccode\u003eStringToSign\u003c/code\u003e 签名。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full\" src=\"https://coolshell.cn/wp-content/uploads/2019/05/sigV4-using-query-params.png\" alt=\"\" width=\"653\" height=\"599\"/\u003e\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e最后，发出HTTP Request时，在HTTP头的 \u003ccode\u003eAuthorization\u003c/code\u003e字段中放入如下的信息：\u003c/p\u003e\n\u003cpre class=\"programlisting\" style=\"padding-left: 40px;\"\u003eAuthorization: AWS4-HMAC-SHA256 \n               Credential=AKIDEXAMPLE/20150830/us-east-1/iam/aws4_request, \n               SignedHeaders=content-type;host;x-amz-date, \n               Signature=5d672d79c15b13162d9279b0855cfba6789a8edb4c82c400e06b5924a6f2b5d7\n\u003c/pre\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e其中的  \u003ccode\u003eAKIDEXAMPLE\u003c/code\u003e 是 AWS Access Key ID， 也就是所谓的 AppID，服务器端会根据这个AppID来查相关的 Secret Access Key，然后再验证签名。如果，你对这个过程有点没看懂的话，你可以读一读这篇文章——《\u003ca href=\"https://czak.pl/2015/09/15/s3-rest-api-with-curl.html\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eAmazon S3 Rest API with curl\u003c/a\u003e》这篇文章里有好些代码，代码应该是最有细节也是最准确的了。\u003c/p\u003e\n\u003cp\u003e这种认证的方式好处在于，AppID和AppSecretKey，是由服务器的系统开出的，所以，是可以被管理的，AWS的IAM就是相关的管理，其管理了用户、权限和其对应的AppID和AppSecretKey。但是不好的地方在于，这个东西没有标准 ，所以，各家的实现很不一致。比如： \u003ca href=\"https://github.com/acquia/http-hmac-spec\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eAcquia 的 HMAC\u003c/a\u003e，\u003ca href=\"https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=4_3\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e微信的签名算法\u003c/a\u003e （这里，我们需要说明一下，微信的API没有遵循HTTP协议的标准，把认证信息放在HTTP 头的 \u003ccode\u003eAuthorization\u003c/code\u003e 里，而是放在body里）\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"JWT_%E2%80%93_JSON_Web_Tokens\"\u003e\u003c/span\u003eJWT – JSON Web Tokens\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003eJWT是一个比较标准的认证解决方案，这个技术在Java圈里应该用的是非常普遍的。JWT签名也是一种MAC（\u003ca href=\"https://en.wikipedia.org/wiki/Message_authentication_code\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eMessage Authentication Code\u003c/a\u003e）的方法。JWT的签名流程一般是下面这个样子：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e用户使用用户名和口令到认证服务器上请求认证。\u003c/li\u003e\n\u003cli\u003e认证服务器验证用户名和口令后，以服务器端生成JWT Token，这个token的生成过程如下：\n\u003cul\u003e\n\u003cli\u003e认证服务器还会生成一个 Secret Key（密钥）\u003c/li\u003e\n\u003cli\u003e对JWT Header和 JWT Payload分别求Base64。在Payload可能包括了用户的抽象ID和的过期时间。\u003c/li\u003e\n\u003cli\u003e用密钥对JWT签名 \u003ccode\u003eHMAC-SHA256(SecertKey, Base64UrlEncode(JWT-Header)+\u0026#39;.\u0026#39;+Base64UrlEncode(JWT-Payload));\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e然后把 \u003ccode\u003ebase64(header).base64(payload).signature\u003c/code\u003e 作为 JWT token返回客户端。\u003c/li\u003e\n\u003cli\u003e客户端使用JWT Token向应用服务器发送相关的请求。这个JWT Token就像一个临时用户权证一样。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e当应用服务器收到请求后：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e应用服务会检查 JWT  Token，确认签名是正确的。\u003c/li\u003e\n\u003cli\u003e然而，因为只有认证服务器有这个用户的Secret Key（密钥），所以，应用服务器得把JWT Token传给认证服务器。\u003c/li\u003e\n\u003cli\u003e认证服务器通过JWT Payload 解出用户的抽象ID，然后通过抽象ID查到登录时生成的Secret Key，然后再来检查一下签名。\u003c/li\u003e\n\u003cli\u003e认证服务器检查通过后，应用服务就可以认为这是合法请求了。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e我们可以看以，上面的这个过程，是在认证服务器上为用户动态生成 Secret Key的，应用服务在验签的时候，需要到认证服务器上去签，这个过程增加了一些网络调用，所以，JWT除了支持HMAC-SHA256的算法外，还支持RSA的非对称加密的算法。\u003c/p\u003e\n\u003cp\u003e使用RSA非对称算法，在认证服务器这边放一个私钥，在应用服务器那边放一个公钥，认证服务器使用私钥加密，应用服务器使用公钥解密，这样一来，就不需要应用服务器向认证服务器请求了，但是，RSA是一个很慢的算法，所以，虽然你省了网络调用，但是却费了CPU，尤其是Header和Payload比较长的时候。所以，一种比较好的玩法是，如果我们把header 和 payload简单地做SHA256，这会很快，然后，我们用RSA加密这个SHA256出来的字符串，这样一来，RSA算法就比较快了，而我们也做到了使用RSA签名的目的。\u003c/p\u003e\n\u003cp\u003e最后，我们只需要使用一个机制在认证服务器和应用服务器之间定期地换一下公钥私钥对就好了。\u003c/p\u003e\n\u003cp\u003e这里强烈建议全文阅读 Anglar 大学的 《\u003ca href=\"https://blog.angular-university.io/angular-jwt/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eJSW：The Complete Guide to JSON Web Tokens\u003c/a\u003e》\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"OAuth_10\"\u003e\u003c/span\u003eOAuth 1.0\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003eOAuth也是一个API认证的协议，这个协议最初在2006年由Twitter的工程师在开发OpenID实现的时候和社交书签网站Ma.gnolia时发现，没有一种好的委托授权协议，后来在2007年成立了一个OAuth小组，知道这个消息后，Google员工也加入进来，并完善有善了这个协议，在2007年底发布草案，过一年后，在2008年将OAuth放进了IETF作进一步的标准化工作，最后在2010年4月，正式发布OAuth 1.0，即：\u003ca href=\"https://tools.ietf.org/html/rfc5849\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eRFC 5849\u003c/a\u003e （这个RFC比起TCP的那些来说读起来还是很轻松的），不过，如果你想了解其前身的草案，可以读一下 \u003ca href=\"http://oauth.net/core/1.0a/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eOAuth Core 1.0 Revision A\u003c/a\u003e ，我在下面做个大概的描述。\u003c/p\u003e\n\u003cp\u003e根据RFC 5849，可以看到 OAuth 的出现，目的是为了，用户为了想使用一个第三方的网络打印服务来打印他在某网站上的照片，但是，用户不想把自己的用户名和口令交给那个第三方的网络打印服务，但又想让那个第三方的网络打印服务来访问自己的照片，为了解决这个授权的问题，OAuth这个协议就出来了。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e这个协议有三个角色：\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eUser（照片所有者-用户）\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eConsumer（第三方照片打印服务）\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eService Provider（照片存储服务）\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e这个协义有三个阶段：\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eConsumer获取Request Token\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eService Provider 认证用户并授权Consumer\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eConsumer获取Access Token调用API访问用户的照片\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e整个授权过程是这样的：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eConsumer（第三方照片打印服务）需要先上Service Provider获得开发的 Consumer Key 和 Consumer Secret\u003c/li\u003e\n\u003cli\u003e当 User 访问 Consumer 时，Consumer 向 Service Provide 发起请求请求Request Token （需要对HTTP请求签名）\u003c/li\u003e\n\u003cli\u003eService Provide 验明 Consumer 是注册过的第三方服务商后，返回 Request Token（\u003ccode\u003eoauth_token\u003c/code\u003e）和 Request Token Secret （\u003ccode\u003eoauth_token_secret\u003c/code\u003e）\u003c/li\u003e\n\u003cli\u003eConsumer 收到 Request Token 后，使用HTTP GET 请求把 User 切到 Service Provide 的认证页上（其中带上Request Token），让用户输入他的用户和口令。\u003c/li\u003e\n\u003cli\u003eService Provider 认证 User 成功后，跳回 Consumer，并返回 Request Token （\u003ccode\u003eoauth_token\u003c/code\u003e）和 Verification Code（\u003ccode\u003eoauth_verifier\u003c/code\u003e）\u003c/li\u003e\n\u003cli\u003e接下来就是签名请求，用Request Token 和 Verification Code 换取 Access Token （\u003ccode\u003eoauth_token\u003c/code\u003e）和 Access Token Secret (\u003ccode\u003eoauth_token_secret\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e最后使用Access Token 访问用户授权访问的资源。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e下图附上一个Yahoo!的流程图可以看到整个过程的相关细节。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full\" src=\"https://coolshell.cn/wp-content/uploads/2019/05/oauth_graph.gif\" alt=\"\" width=\"660\" height=\"992\"/\u003e\u003c/p\u003e\n\u003cp\u003e因为上面这个流程有三方：User，Consumer 和 Service Provide，所以，又叫 3-legged flow，三脚流程。OAuth 1.0 也有不需要用户参与的，只有Consumer 和 Service Provider 的， 也就是 2-legged flow 两脚流程，其中省掉了用户认证的事。整个过程如下所示：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eConsumer（第三方照片打印服务）需要先上Service Provider获得开发的 Consumer Key 和 Consumer Secret\u003c/li\u003e\n\u003cli\u003eConsumer 向 Service Provide 发起请求请求Request Token （需要对HTTP请求签名）\u003c/li\u003e\n\u003cli\u003eService Provide 验明 Consumer 是注册过的第三方服务商后，返回 Request Token（\u003ccode\u003eoauth_token\u003c/code\u003e）和 Request Token Secret （\u003ccode\u003eoauth_token_secret\u003c/code\u003e）\u003c/li\u003e\n\u003cli\u003eConsumer 收到 Request Token 后，直接换取 Access Token （\u003ccode\u003eoauth_token\u003c/code\u003e）和 Access Token Secret (\u003ccode\u003eoauth_token_secret\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e最后使用Access Token 访问用户授权访问的资源。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e最后，再来说一说OAuth中的签名。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e我们可以看到，有两个密钥，一个是Consumer注册Service Provider时由Provider颁发的 Consumer Secret，另一个是 Token Secret。\u003c/li\u003e\n\u003cli\u003e签名密钥就是由这两具密钥拼接而成的，其中用 \u003ccode\u003e\u0026amp;\u003c/code\u003e作连接符。假设 Consumer Secret 为 \u003ccode\u003ej49sk3j29djd\u003c/code\u003e 而 Token Secret 为\u003ccode\u003edh893hdasih9\u003c/code\u003e那个，签名密钥为：\u003ccode\u003ej49sk3j29djd\u0026amp;dh893hdasih9\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e在请求Request/Access Token的时候需要对整个HTTP请求进行签名（使用HMAC-SHA1和HMAC-RSA1签名算法），请求头中需要包括一些OAuth需要的字段，如：\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eConsumer Key\u003c/strong\u003e ： 也就是所谓的AppID\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eToken\u003c/strong\u003e： Request Token 或 Access Token\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSignature Method\u003c/strong\u003e ：签名算法比如：HMAC-SHA1\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTimestamp\u003c/strong\u003e：过期时间\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNonce\u003c/strong\u003e：随机字符串\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCall Back\u003c/strong\u003e：回调URL\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e下图是整个签名的示意图：\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full\" src=\"https://coolshell.cn/wp-content/uploads/2019/05/oauth_singature.png\" alt=\"\" width=\"715\" height=\"877\"/\u003e\u003c/p\u003e\n\u003cp\u003e图片还是比较直观的，我就不多解释了。\u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"OAuth_20\"\u003e\u003c/span\u003eOAuth 2.0\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e在前面，我们可以看到，从Digest Access， 到AppID+HMAC，再到JWT，再到OAuth 1.0，这些个API认证都是要向Client发一个密钥（或是用密码）然后用HASH或是RSA来签HTTP的请求，\u003cstrong\u003e这其中有个主要的原因是，以前的HTTP是明文传输，所以，在传输过程中很容易被篡改，于是才搞出来一套的安全签名机制\u003c/strong\u003e，所以，这些个认证的玩法是可以在HTTP明文协议下玩的。\u003c/p\u003e\n\u003cp\u003e这种使用签名方式大家可以看到是比较复杂的，所以，对于开发者来说，也是很不友好的，在组织签名的那些HTTP报文的时候，各种，URLEncode和Base64，还要对Query的参数进行排序，然后有的方法还要层层签名，非常容易出错，另外，这种认证的安全粒度比较粗，授权也比较单一，对于有终端用户参与的移动端来说也有点不够。所以，在2012年的时候，OAuth 2.0 的 \u003ca href=\"https://tools.ietf.org/html/rfc6749\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eRFC 6749\u003c/a\u003e 正式放出。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eOAuth 2.0依赖于TLS/SSL的链路加密技术（HTTPS），完全放弃了签名的方式，认证服务器再也不返回什么 token secret 的密钥了，所以，OAuth 2.0是完全不同于1.0 的，也是不兼容的\u003c/strong\u003e。目前，Facebook 的 Graph API 只支持OAuth 2.0协议，Google 和 Microsoft Azure 也支持Auth 2.0，国内的微信和支付宝也支持使用OAuth 2.0。\u003c/p\u003e\n\u003cp\u003e下面，我们来重点看一下OAuth 2.0的两个主要的Flow：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一个是Authorization Code Flow， 这个是 3 legged 的\u003c/li\u003e\n\u003cli\u003e一个是Client Credential Flow，这个是 2 legged 的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"Authorization_Code_Flow\"\u003e\u003c/span\u003e\u003cstrong\u003eAuthorization Code Flow\u003c/strong\u003e\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003eAuthorization Code 是最常使用的OAuth 2.0的授权许可类型，它适用于用户给第三方应用授权访问自己信息的场景。这个Flow也是OAuth 2.0四个Flow中我个人觉得最完整的一个Flow，其流程图如下所示。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full \" src=\"https://coolshell.cn/wp-content/uploads/2019/05/auth_code_flow.png\" alt=\"\" width=\"621\" height=\"505\"/\u003e\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e下面是对这个流程的一个细节上的解释：\u003c/p\u003e\n\u003cp\u003e1）当用户（Resource Owner）访问第三方应用（Client）的时候，第三方应用会把用户带到认证服务器（Authorization Server）上去，主要请求的是 \u003ccode\u003e/authorize\u003c/code\u003e API，其中的请求方式如下所示。\u003c/p\u003e\n\u003cpre style=\"padding-left: 40px;\"\u003ehttps://login.authorization-server.com/authorize?\n        client_id=6731de76-14a6-49ae-97bc-6eba6914391e\n        \u0026amp;response_type=code\n        \u0026amp;redirect_uri=http%3A%2F%2Fexample-client.com%2Fcallback%2F\n        \u0026amp;scope=read\n        \u0026amp;state=xcoiv98CoolShell3kch\u003c/pre\u003e\n\u003cp style=\"padding-left: 40px;\"\u003e其中：\u003c/p\u003e\n\u003cul\u003e\n\u003cli style=\"list-style-type: none;\"\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eclient_id\u003c/code\u003e为第三方应用的App ID\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eresponse_type=code\u003c/code\u003e为告诉认证服务器，我要走Authorization Code Flow。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eredirect_uri\u003c/code\u003e意思是我跳转回第三方应用的URL\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003escope\u003c/code\u003e意是相关的权限\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estate\u003c/code\u003e 是一个随机的字符串，主要用于防CSRF攻击。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e2）当Authorization Server收到这个URL请求后，其会通过 \u003ccode\u003eclient_id\u003c/code\u003e来检查 \u003ccode\u003eredirect_uri\u003c/code\u003e和 \u003ccode\u003escope\u003c/code\u003e是否合法，如果合法，则弹出一个页面，让用户授权（如果用户没有登录，则先让用户登录，登录完成后，出现授权访问页面）。\u003c/p\u003e\n\u003cp\u003e3）当用户授权同意访问以后，Authorization Server 会跳转回 Client ，并以其中加入一个 Authorization Code。 如下所示：\u003c/p\u003e\n\u003cpre style=\"padding-left: 40px;\"\u003ehttps://example-client.com/callback?\n        code=Yzk5ZDczMzRlNDEwYlrEqdFSBzjqfTG\n        \u0026amp;state=xcoiv98CoolShell3kch\u003c/pre\u003e\n\u003cp style=\"padding-left: 40px;\"\u003e我们可以看到，\u003c/p\u003e\n\u003cul\u003e\n\u003cli style=\"list-style-type: none;\"\u003e\n\u003cul\u003e\n\u003cli\u003e请流动的链接是第 1）步中的 \u003ccode\u003eredirect_uri\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e其中的 \u003ccode\u003estate\u003c/code\u003e 的值也和第 1）步的 \u003ccode\u003estate\u003c/code\u003e一样。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e4）接下来，Client 就可以使用 Authorization Code 获得 Access Token。其需要向 Authorization Server 发出如下请求。\u003c/p\u003e\n\u003cpre style=\"padding-left: 40px;\"\u003ePOST /oauth/token HTTP/1.1\nHost: authorization-server.com\n \ncode=Yzk5ZDczMzRlNDEwYlrEqdFSBzjqfTG\n\u0026amp;grant_type=code\n\u0026amp;redirect_uri=https%3A%2F%2Fexample-client.com%2Fcallback%2F\n\u0026amp;client_id=6731de76-14a6-49ae-97bc-6eba6914391e\n\u0026amp;client_secret=JqQX2PNo9bpM0uEihUPzyrh\u003c/pre\u003e\n\u003cp\u003e5）如果没什么问题，Authorization 会返回如下信息。\u003c/p\u003e\n\u003cpre style=\"padding-left: 40px;\"\u003e{\n  \u0026#34;access_token\u0026#34;: \u0026#34;iJKV1QiLCJhbGciOiJSUzI1NiI\u0026#34;,\n  \u0026#34;refresh_token\u0026#34;: \u0026#34;1KaPlrEqdFSBzjqfTGAMxZGU\u0026#34;,\n  \u0026#34;token_type\u0026#34;: \u0026#34;bearer\u0026#34;,\n  \u0026#34;expires\u0026#34;: 3600,\n  \u0026#34;id_token\u0026#34;: \u0026#34;eyJ0eXAiOiJKV1QiLCJhbGciO.eyJhdWQiOiIyZDRkM...\u0026#34;\n}\u003c/pre\u003e\n\u003cp style=\"padding-left: 40px;\"\u003e其中，\u003c/p\u003e\n\u003cul\u003e\n\u003cli style=\"list-style-type: none;\"\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eaccess_token\u003c/code\u003e就是访问请求令牌了\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erefresh_token\u003c/code\u003e用于刷新 \u003ccode\u003eaccess_token\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eid_token\u003c/code\u003e 是JWT的token，其中一般会包含用户的OpenID\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e6）接下来就是用 Access Token 请求用户的资源了。\u003c/p\u003e\n\u003cpre style=\"padding-left: 40px;\"\u003eGET /v1/user/pictures\nHost: https://example.resource.com\n\nAuthorization: Bearer iJKV1QiLCJhbGciOiJSUzI1NiI\u003c/pre\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"_Client_Credential_Flow\"\u003e\u003c/span\u003e Client Credential Flow\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003eClient Credential 是一个简化版的API认证，主要是用于认证服务器到服务器的调用，也就是没有用户参与的的认证流程。下面是相关的流程图。\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full\" src=\"https://coolshell.cn/wp-content/uploads/2019/05/client_credentials_flow.png\" alt=\"\" width=\"549\" height=\"414\"/\u003e\u003c/p\u003e\n\u003cp\u003e这个过程非常简单，本质上就是Client用自己的 \u003ccode\u003eclient_id\u003c/code\u003e和 \u003ccode\u003eclient_secret\u003c/code\u003e向Authorization Server 要一个 Access Token，然后使用Access Token访问相关的资源。\u003c/p\u003e\n\u003cp\u003e请求示例\u003c/p\u003e\n\u003cpre style=\"padding-left: 40px;\"\u003ePOST /token HTTP/1.1\nHost: server.example.com\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials\n\u0026amp;client_id=czZCaGRSa3F0Mzpn\n\u0026amp;client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\u003c/pre\u003e\n\u003cp\u003e返回示例\u003c/p\u003e\n\u003cpre style=\"padding-left: 40px;\"\u003e{\n  \u0026#34;access_token\u0026#34;:\u0026#34;MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3\u0026#34;,\n  \u0026#34;token_type\u0026#34;:\u0026#34;bearer\u0026#34;,\n  \u0026#34;expires_in\u0026#34;:3600,\n  \u0026#34;refresh_token\u0026#34;:\u0026#34;IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk\u0026#34;,\n  \u0026#34;scope\u0026#34;:\u0026#34;create\u0026#34;\n}\u003c/pre\u003e\n\u003cp\u003e这里，容我多扯一句，微信公从平台的开发文档中，使用了OAuth 2.0 的 Client Credentials的方式（参看文档“\u003ca href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main\u0026amp;id=mp1421140183\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e微信公众号获取access token\u003c/a\u003e”），我截了个图如下所谓。我们可以看到，\u003cstrong\u003e微信公众号使用的是GET方式的请求，把AppID和AppSecret放在了URL中，虽然这也符合OAuth 2.0，但是并不好，因为大多数网关代理会把整个URI请求记到日志中。我们只要脑补一下腾讯的网关的Access Log，里面的日志一定会有很多的各个用户的AppID和AppSecret……\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-large\" src=\"https://coolshell.cn/wp-content/uploads/2019/05/wechat.dev_-1024x876.png\" alt=\"\" width=\"640\" height=\"548\"/\u003e\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003ch4\u003e\u003cspan class=\"ez-toc-section\" id=\"%E5%B0%8F%E7%BB%93\"\u003e\u003c/span\u003e小结\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e讲了这么多，我们来小结一下（下面的小结可能会有点散）\u003c/p\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E4%B8%A4%E4%B8%AA%E6%9C%AF%E8%AF%AD%E5%92%8C%E4%B8%89%E4%B8%AA%E6%A6%82%E5%BF%B5\"\u003e\u003c/span\u003e两个术语和三个概念\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e区分两个术语：Authentication（认证） 和 Authorization （授权），前者是证明请求者是身份，就像身份证一样，后者是为了获得权限。身份是区别于别人的证明，而权限是证明自己的特权。Authentication为了证明操作的这个人就是他本人，需要提供密码、短信验证码，甚至人脸识别。Authorization 则是不需要在所有的请求都需要验人，是在经过Authorization后得到一个Token，这就是Authorization。就像护照和签证一样。\u003c/li\u003e\n\u003cli\u003e区分三个概念：编码Base64Encode、签名HMAC、加密RSA。Base64编码是为了更好的传输（没有怪异的字符，可以传输二进制文件），等同于明文，HMAC签名是为了信息不能被篡改，RSA加密是为了不让别人看到是什么信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E6%98%8E%E7%99%BD%E4%B8%80%E4%BA%9B%E5%88%9D%E8%A1%B7\"\u003e\u003c/span\u003e明白一些初衷\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e使用复杂地HMAC哈希签名方式主要是应对当年没有TLS/SSL加密链路的情况。\u003c/li\u003e\n\u003cli\u003eJWT把 \u003ccode\u003euid\u003c/code\u003e 放在 Token中目的是为了去掉状态，但不能让用户修改，所以需要签名。\u003c/li\u003e\n\u003cli\u003eOAuth 1.0区分了两个事，一个是第三方的Client，一个是真正的用户，其先拿Request Token，再换Access Token的方法主要是为了把第三方应用和用户区分开来。\u003c/li\u003e\n\u003cli\u003e用户的Password是用户自己设置的，复杂度不可控，服务端颁发的Serect会很复杂，但主要目的是为了容易管理，可以随时注销掉。\u003c/li\u003e\n\u003cli\u003eOAuth 协议有比所有认证协议有更为灵活完善的配置，如果使用AppID/AppSecret签名的方式，又需要做到可以有不同的权限和可以随时注销，那么你得开发一个像AWS的IAM这样的账号和密钥对管理的系统。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5\u003e\u003cspan class=\"ez-toc-section\" id=\"%E7%9B%B8%E5%85%B3%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"\u003e\u003c/span\u003e相关的注意事项\u003cspan class=\"ez-toc-section-end\"\u003e\u003c/span\u003e\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e无论是哪种方式，我们都应该遵循HTTP的规范，把认证信息放在 \u003ccode\u003eAuthorization\u003c/code\u003e HTTP 头中。\u003c/li\u003e\n\u003cli\u003e不要使用GET的方式在URL中放入secret之类的东西，因为很多proxy或gateway的软件会把整个URL记在Access Log文件中。\u003c/li\u003e\n\u003cli\u003e密钥Secret相当于Password，但他是用来加密的，最好不要在网络上传输，如果要传输，最好使用TLS/SSL的安全链路。\u003c/li\u003e\n\u003cli\u003eHMAC中无论是MD5还是SHA1/SHA2，其计算都是非常快的，RSA的非对称加密是比较耗CPU的，尤其是要加密的字符串很长的时候。\u003c/li\u003e\n\u003cli\u003e最好不要在程序中hard code 你的 Secret，因为在github上有很多黑客的软件在监视各种Secret，千万小心！这类的东西应该放在你的配置系统或是部署系统中，在程序启动时设置在配置文件或是环境变量中。\u003c/li\u003e\n\u003cli\u003e使用AppID/AppSecret，还是使用OAuth1.0a，还是OAuth2.0，还是使用JWT，我个人建议使用TLS/SSL下的OAuth 2.0。\u003c/li\u003e\n\u003cli\u003e密钥是需要被管理的，管理就是可以新增可以撤销，可以设置账户和相关的权限。最好密钥是可以被自动更换的。\u003c/li\u003e\n\u003cli\u003e认证授权服务器（Authorization Server）和应用服务器（App Server）最好分开。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e(全文完)\u003c/p\u003e\n\u003cdiv style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\"\u003e\n\u003cp align=\"center\"\u003e\u003cstrong\u003e（转载本站文章请注明作者和出处 \u003ca href=\"https://coolshell.cn/\"\u003e酷 壳 – CoolShell\u003c/a\u003e ，请勿用于任何商业用途）\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"\u003e\u003cdiv class=\"wp_rp_content\"\u003e\u003ch3 class=\"related_post_title\"\u003e相关文章\u003c/h3\u003e\u003cul class=\"related_post wp_rp\"\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21708.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2022/01/iStock-1175502114-150x150.png\" alt=\"网络数字身份认证术\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21708.html\" class=\"wp_rp_title\"\u003e网络数字身份认证术\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/18094.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/08/enable-https-banner-150x150.png\" alt=\"如何免费的让网站启用HTTPS\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/18094.html\" class=\"wp_rp_title\"\u003e如何免费的让网站启用HTTPS\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/11021.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2014/02/Github-Security-150x150.png\" alt=\"从“黑掉Github”学Web安全开发\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/11021.html\" class=\"wp_rp_title\"\u003e从“黑掉Github”学Web安全开发\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/21003.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2020/06/time-bomb-150x150.png\" alt=\"计时攻击 Timing Attacks\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/21003.html\" class=\"wp_rp_title\"\u003e计时攻击 Timing Attacks\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17607.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2017/01/MongoDB-150x150.jpg\" alt=\"从 MongoDB “赎金事件” 看安全问题\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17607.html\" class=\"wp_rp_title\"\u003e从 MongoDB “赎金事件” 看安全问题\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://coolshell.cn/articles/17066.html\" class=\"wp_rp_thumbnail\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/uploads/2015/04/phishing-1-150x150.jpg\" alt=\"关于移动端的钓鱼式攻击\" width=\"150\" height=\"150\"/\u003e\u003c/a\u003e\u003ca href=\"https://coolshell.cn/articles/17066.html\" class=\"wp_rp_title\"\u003e关于移动端的钓鱼式攻击\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cdiv id=\"post-ratings-19395\" class=\"post-ratings\" itemscope=\"\" itemtype=\"https://schema.org/Article\" data-nonce=\"d16a5084c8\"\u003e\u003cimg id=\"rating_19395_1\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"好烂啊\" title=\"好烂啊\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(19395, 1, \u0026#39;好烂啊\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-0b839bc5f936a7e3554f493a-=\"\"/\u003e\u003cimg id=\"rating_19395_2\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"有点差\" title=\"有点差\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(19395, 2, \u0026#39;有点差\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-0b839bc5f936a7e3554f493a-=\"\"/\u003e\u003cimg id=\"rating_19395_3\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"凑合看看\" title=\"凑合看看\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(19395, 3, \u0026#39;凑合看看\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-0b839bc5f936a7e3554f493a-=\"\"/\u003e\u003cimg id=\"rating_19395_4\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_on.gif\" alt=\"还不错\" title=\"还不错\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(19395, 4, \u0026#39;还不错\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-0b839bc5f936a7e3554f493a-=\"\"/\u003e\u003cimg id=\"rating_19395_5\" src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/stars_crystal/rating_half.gif\" alt=\"很精彩\" title=\"很精彩\" onmouseover=\"if (!window.__cfRLUnblockHandlers) return false; current_rating(19395, 5, \u0026#39;很精彩\u0026#39;);\" onmouseout=\"if (!window.__cfRLUnblockHandlers) return false; ratings_off(4.3, 5, 0);\" onclick=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" onkeypress=\"if (!window.__cfRLUnblockHandlers) return false; rate_post();\" style=\"cursor: pointer; border: 0px;\" data-cf-modified-0b839bc5f936a7e3554f493a-=\"\"/\u003e (\u003cstrong\u003e92\u003c/strong\u003e 人打了分，平均分： \u003cstrong\u003e4.29\u003c/strong\u003e )\u003cbr/\u003e\u003cspan class=\"post-ratings-text\" id=\"ratings_19395_text\"\u003e\u003c/span\u003e\u003cmeta itemprop=\"name\" content=\"HTTP API 认证授权术\"/\u003e\u003cmeta itemprop=\"headline\" content=\"HTTP API 认证授权术\"/\u003e\u003cmeta itemprop=\"description\" content=\"我们知道，HTTP是无状态的，所以，当我们需要获得用户是否在登录的状态时，我们需要检查用户的登录状态，一般来说，用户的登录成功后，服务器会发一个登录凭证（又被叫作Token），就像你去访问某个公司，在前台被认证过合法后，这个公司的前台会给你的一个访客卡一样，之后，你在这个公司内去到哪都用这个访客卡来开门，而不再校验你是哪一个人。在计算机的世界里，这个登录凭证的相关数据会放在两种地方，一个地方在用户...\"/\u003e\u003cmeta itemprop=\"datePublished\" content=\"2019-05-09T21:37:29+08:00\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2022-09-15T18:15:46+08:00\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn/articles/19395.html\"/\u003e\u003cmeta itemprop=\"author\" content=\"陈皓\"/\u003e\u003cmeta itemprop=\"mainEntityOfPage\" content=\"https://coolshell.cn/articles/19395.html\"/\u003e\u003cdiv style=\"display: none;\" itemprop=\"publisher\" itemscope=\"\" itemtype=\"https://schema.org/Organization\"\u003e\u003cmeta itemprop=\"name\" content=\"酷 壳 - CoolShell\"/\u003e\u003cmeta itemprop=\"url\" content=\"https://coolshell.cn\"/\u003e\u003cdiv itemprop=\"logo\" itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cmeta itemprop=\"url\" content=\"\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv style=\"display: none;\" itemprop=\"aggregateRating\" itemscope=\"\" itemtype=\"https://schema.org/AggregateRating\"\u003e\u003cmeta itemprop=\"bestRating\" content=\"5\"/\u003e\u003cmeta itemprop=\"worstRating\" content=\"1\"/\u003e\u003cmeta itemprop=\"ratingValue\" content=\"4.29\"/\u003e\u003cmeta itemprop=\"ratingCount\" content=\"92\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"post-ratings-19395-loading\" class=\"post-ratings-loading\"\u003e\u003cimg src=\"https://coolshell.cn/wp-content/plugins/wp-postratings/images/loading.gif\" width=\"16\" height=\"16\" class=\"post-ratings-image\"/\u003eLoading...\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2019-05-09T21:37:29+08:00",
  "Author": "陈皓"
}