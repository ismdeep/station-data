{
  "Source": "donaldfeury.xyz",
  "Title": "How I Completely Automated My YouTube Editing Using FFmpeg",
  "Link": "https://donaldfeury.xyz/how-i-completely-automated-my-youtube-editing-using-ffmpeg/",
  "Content": "\u003csection class=\"gh-content gh-canvas\"\u003e\n        \u003cp\u003eIf you\u0026#39;ve been watching my videos from the posts I make on here (thank you if you have), I got a dirty little secret...\u003c/p\u003e\u003cp\u003eI haven\u0026#39;t done any manual editing on the past three videos.\u003c/p\u003e\u003cp\u003eNow, that doesn\u0026#39;t mean there isn\u0026#39;t any editing, there is a little but that will grow in time.\u003c/p\u003e\u003cp\u003eNo, instead a single \u003cstrong\u003eFFmpeg\u003c/strong\u003e command does all the editing for me.\u003c/p\u003e\u003cp\u003eSo what exactly is it doing you ask? So far it does the following:\u003c/p\u003e\u003cul\u003e\u003cli\u003eDelaying and overlaying a sub animation over the main video (usually just a recording)\u003c/li\u003e\u003cli\u003eAdding a fade-in effect to the start of the video\u003c/li\u003e\u003cli\u003eAdding a fade-out effect before the outro\u003c/li\u003e\u003cli\u003eAppends the outro to the end of the video\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eOh, what\u0026#39;s that? Do you want to see the magic? I got you bud.\u003c/p\u003e\u003cfigure class=\"kg-card kg-embed-card\"\u003e\u003ciframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/JbX5vDfiyh0?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/figure\u003e\u003ch2 id=\"script\"\u003eScript\u003c/h2\u003e\u003cpre\u003e\u003ccode class=\"language-sh\"\u003e#!/usr/bin/env sh\n\nIN=$1\nOUT=$2\nOVER=$3\nOVER_START=$4\nOUTRO=$5\nDURATION=$(get_vid_duration $IN)\nFADE_OUT_DURATION=$6\nFADE_IN_DURATION=$7\nFADE_OUT_START=$(bc -l \u0026lt;\u0026lt;\u0026lt; \u0026#34;$DURATION - $FADE_OUT_DURATION\u0026#34;)\nMILLI=${OVER_START}000\n\nffmpeg -i $IN -i $OUTRO -filter_complex \\\n    \u0026#34;[0:v]setpts=PTS-STARTPTS[v0];\n    movie=$OVER:s=dv+da[overv][overa];\n    [overv]setpts=PTS-STARTPTS+$OVER_START/TB[v1];\n    [v0][v1]overlay=-600:0:eof_action=pass,fade=t=in:st=0:d=$FADE_IN_DURATION,fade=t=out:st=$FADE_OUT_START:d=$FADE_OUT_DURATION[mainv];\n    [overa]adelay=$MILLI|$MILLI,volume=0.5[a1];\n    [0:a:0][0:a:1][a1]amix=inputs=3:duration=longest:dropout_transition=0:weights=3 3 1[maina];\n    [mainv][maina][1:v][1:a]concat=n=2:v=1:a=1[outv][outa]\u0026#34; \\\n    -map \u0026#34;[outv]\u0026#34; -map \u0026#34;[outa]\u0026#34; $OUT\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThat\u0026#39;s a chunky boy, so let me break down what exactly is happening.\u003c/p\u003e\u003ch2 id=\"arguments\"\u003eArguments\u003c/h2\u003e\u003cpre\u003e\u003ccode class=\"language-sh\"\u003eIN=$1\nOUT=$2\nOVER=$3\nOVER_START=$4\nOUTRO=$5\nDURATION=$(get_vid_duration $IN)\nFADE_OUT_DURATION=$6\nFADE_IN_DURATION=$7\nFADE_OUT_START=$(bc -l \u0026lt;\u0026lt;\u0026lt; \u0026#34;$DURATION - $FADE_OUT_DURATION\u0026#34;)\nMILLI=${OVER_START}000\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThese are all the arguments I\u0026#39;m passing into the script to build the \u003cstrong\u003eFFmpeg\u003c/strong\u003e command.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eIN=$1\u003c/code\u003e - this is the path to the \u003cstrong\u003emain\u003c/strong\u003e video that I want to use, probably a recording I did earlier in the day.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eOUT=$2\u003c/code\u003e - this is the path I want to save the final video to.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eOVER=$3\u003c/code\u003e - this is the file path to the subscription animation I started using. I thought it better to pass this in, since I may change what animation I\u0026#39;m using at some point.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eOVER_START=$4\u003c/code\u003e - the timestamp, in seconds, to start playing the subscription animation in the main video. It is needed to offset the animation\u0026#39;s video frame timestamps and delay the audio.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eDURATION=$(get_vid_duration $IN)\u003c/code\u003e - I\u0026#39;m using another script to get the duration, in seconds, of the main video. It\u0026#39;s using FF\u003cstrong\u003eprobe\u003c/strong\u003e to grab the metadata in a specific format.\u003c/p\u003e\u003cp\u003eHere is the \u003cstrong\u003eget_vid_duration\u003c/strong\u003e script for reference:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-sh\"\u003e#!/usr/bin/env sh\n\nIN=$1\n\nffprobe -i $IN -show_entries format=duration -v quiet -of csv=\u0026#34;p=0\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eFADE_OUT_DURATION=$6\u003c/code\u003e - the duration in seconds of the fade-out effect. It is also used to calculate the starting time of the fade-out effect.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eFADE_IN_DURATION=$7\u003c/code\u003e - same as last but for the fade-in effect.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eFADE_OUT_START=$(bc -l \u0026lt;\u0026lt;\u0026lt; \u0026#34;$DURATION - $FADE_OUT_DURATION\u0026#34;)\u003c/code\u003e - uses the duration and fade-out duration to calculate the exact second to start the fade-out effect. Passed into a terminal calculator program called \u003cstrong\u003ebc.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003ccode\u003eMILLI=${OVER_START}000\u003c/code\u003e - The millisecond version of the overlay animation duration. One of the filters I use needs milliseconds instead of seconds.\u003c/p\u003e\u003ch2 id=\"filtergraph\"\u003eFiltergraph\u003c/h2\u003e\u003cpre\u003e\u003ccode class=\"language-sh\"\u003e\u0026#34;[0:v]setpts=PTS-STARTPTS[v0];\nmovie=$OVER:s=dv+da[overv][overa];\n[overv]setpts=PTS-STARTPTS+$OVER_START/TB[v1];\n[v0][v1]overlay=-600:0:eof_action=pass,fade=t=in:st=0:d=$FADE_IN_DURATION,fade=t=out:st=$FADE_OUT_START:d=$FADE_OUT_DURATION[mainv];\n[overa]adelay=$MILLI|$MILLI,volume=0.5[a1];\n[0:a:0][0:a:1][a1]amix=inputs=3:duration=longest:dropout_transition=0:weights=3 3 1[maina];\n[mainv][maina][1:v][1:a]concat=n=2:v=1:a=1[outv][outa]\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003e[0:v]setpts=PTS-STARTPTS[v0];\u003c/code\u003e - this is making sure that the main video\u0026#39;s video stream is starting at the same 00:00:00 timestamp as the animation for proper offsetting. This \u003cem\u003emight\u003c/em\u003e not be necessary but I\u0026#39;d rather make sure.\u003c/p\u003e\u003cp\u003e\u003ccode\u003emovie=$OVER:s=dv+da[overv][overa];\u003c/code\u003e - loading in the sub animation\u0026#39;s video and audio stream to be available for use in the rest of the filter graph.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e[overv]setpts=PTS-STARTPTS+$OVER_START/TB[v1];\u003c/code\u003e - offset the sub animation\u0026#39;s timestamps by the \u003cstrong\u003eOVER_START\u003c/strong\u003e argument.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e[v0][v1]overlay=-600:0:eof_action=pass\u003c/code\u003e - overlay the sub animation\u0026#39;s video stream over the main video stream with an offset on the \u003cstrong\u003ex\u003c/strong\u003e position of -600 (bumps it over to the left).\u003c/p\u003e\u003cp\u003e\u003ccode\u003efade=t=in:st=0:d=$FADE_IN_DURATION\u003c/code\u003e - adds a fade-in effect at the start of the video stream, with a duration of \u003cstrong\u003eFADE_IN_DURATION\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003e\u003ccode\u003efade=t=out:st=$FADE_OUT_START:d=$FADE_OUT_DURATION[mainv];\u003c/code\u003e - adds a fade-out effect at the end of the video stream, starting at \u003cstrong\u003eFADE_OUT_START\u003c/strong\u003e and lasting \u003cstrong\u003eFADE_OUT_DURATION\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e[overa]adelay=$MILLI|$MILLI\u003c/code\u003e - adds a delay of \u003cstrong\u003eMILLI\u003c/strong\u003e milliseconds to the audio of the sub animation\u0026#39;s audio, to sync it up with the video stream that was offset.\u003c/p\u003e\u003cp\u003e\u003ccode\u003evolume=0.5[a1];\u003c/code\u003e - the sub animation\u0026#39;s little \u003cem\u003eding\u003c/em\u003e sound is kinda loud, so I cut its volume in half.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e[0:a:0][0:a:1][a1]amix=inputs=3:duration=longest:dropout_transition=0:weights=3 3 1[maina];\u003c/code\u003e - we mix in both audio streams from the main video and the audio stream from the sub animation together into one stream. Duration says to set the combined stream\u0026#39;s length to the length of the stream with the longest input. Dropout transition and weights are used to offset the increase in volume that occurs when the sub animation sound ends. It\u0026#39;s not perfect but it helps.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e[mainv][maina][1:v][1:a]concat=n=2:v=1:a=1[outv][outa]\u003c/code\u003e - finally, we take processed video and audio streams, and concat on the end of them, the video and audio streams of the outro passed into the script. I just use a blank screen with some music playing for now.\u003c/p\u003e\u003ch2 id=\"output\"\u003eOutput\u003c/h2\u003e\u003cpre\u003e\u003ccode class=\"language-sh\"\u003e-map \u0026#34;[outv]\u0026#34; -map \u0026#34;[outa]\u0026#34; $OUT\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFinally, we map the fully processed video and audio stream to the output file. This way, \u003cstrong\u003eFFmpeg\u003c/strong\u003e will write those streams out to the file, instead of the unprocessed streams straight from the input files.\u003c/p\u003e\u003cp\u003eWith that, we have successfully:\u003c/p\u003e\u003cul\u003e\u003cli\u003e Overlaid the sub animation, at the desired time, in the main video.\u003c/li\u003e\u003cli\u003eAdded a fade-in effect to the start of the video.\u003c/li\u003e\u003cli\u003eAdded a fade-out effect to the end of the video.\u003c/li\u003e\u003cli\u003eConcatenated the outro to the end of the video after the fade-out effect.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThings I would like to add:\u003c/p\u003e\u003cul\u003e\u003cli\u003eColor correction - Hard to do right now since I don\u0026#39;t have consistent lighting in my office.\u003c/li\u003e\u003cli\u003eBetter Outro - Something instead of a blank screen with music.\u003c/li\u003e\u003cli\u003eGet an Intro - Get a decent intro to add to the start of the video.\u003c/li\u003e\u003c/ul\u003e\u003chr/\u003e\u003cp\u003eDid you find this information useful? If so, consider heading over to my \u003ca href=\"https://donaldfeury.xyz/donate/\"\u003edonation\u003c/a\u003e page and drop me some support.\u003c/p\u003e\u003cp\u003eWant to ask a question or just chat? Contact me \u003ca href=\"https://donaldfeury.xyz/contact\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n    \u003c/section\u003e",
  "Date": "2021-06-27T01:35:00Z",
  "Author": "Donald Feury"
}