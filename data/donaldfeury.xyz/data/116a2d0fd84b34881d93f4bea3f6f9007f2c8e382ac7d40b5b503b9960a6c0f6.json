{
  "Source": "donaldfeury.xyz",
  "Title": "Combine Videos Using FFmpeg",
  "Link": "https://donaldfeury.xyz/combine-videos-using-ffmpeg/",
  "Content": "\u003csection class=\"gh-content gh-canvas\"\u003e\n        \u003cp\u003eI have found it very useful to concatenate multiple video files together after working on them separately. It turns out, that is rather simple to do with FFmpeg.\u003c/p\u003e\u003cp\u003eHow do we do this?\u003c/p\u003e\u003cfigure class=\"kg-card kg-embed-card\"\u003e\u003ciframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/qjumeCB1iEg?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/figure\u003e\u003cp\u003eThere are three methods I have found thus far:\u003c/p\u003e\u003cp\u003eUsing the concat demuxer approach\u003c/p\u003e\u003cul\u003e\u003cli\u003eThis method is very fast as it avoids transcoding\u003c/li\u003e\u003cli\u003eThis method only works if the files have the same video and audio encoding, otherwise, artifacts will be introduced\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eUsing file-level concatenation approach\u003c/p\u003e\u003cul\u003e\u003cli\u003eThere are some encodings that support file-level concatenation, kinda like just using \u003ccode\u003ecat\u003c/code\u003e on two files in the terminal\u003c/li\u003e\u003cli\u003eThere are very few encodings that can do this, the only one I\u0026#39;ve used is MPEG-2 Transport Stream codec (.ts)\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eUsing a complex filter graph with the concat filter\u003c/p\u003e\u003cul\u003e\u003cli\u003eThis method can concat videos with different encodings\u003c/li\u003e\u003cli\u003eThis will cause transcoding to occur, so it takes time and may degrade the quality\u003c/li\u003e\u003cli\u003eThe syntax is hard to understand if you\u0026#39;ve never written complex filter graphs before for FFmpeg\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eLet\u0026#39;s look at the examples, first the concat demuxer approach:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-sh\"\u003effmpeg -f concat -i list.txt -c copy out.mp4\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUnlike most FFmpeg commands, this one takes in a text file containing the files we want to concatenate, the text file would look something like this:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-sh\"\u003efile \u0026#39;video1.mp4\u0026#39;\nfile \u0026#39;video2.mp4\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe example for the file level concatenation would look like this:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-sh\"\u003effmpeg -i \u0026#34;concat:video1.ts|video2.ts\u0026#34; -c copy out.ts\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eand the last example would be like so:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-sh\"\u003effmpeg -i video1.mp4 -i video2.flv -filter_complex \\\n\u0026#34;[0:v][0:a][1:v][1:a] concat=n=2:v=1:a=1 [outv] [outa]\u0026#34; \\\n-map \u0026#34;[outv]\u0026#34; -map \u0026#34;[outa]\u0026#34; out.mp4\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis one is probably pretty confusing, so let me explain the complex filter graph syntax:\u003c/p\u003e\u003cp\u003eUnlike using filters normally with FFmpeg using \u003cstrong\u003e-vf\u003c/strong\u003e or \u003cstrong\u003e-af\u003c/strong\u003e, when using a complex filter graph, we have to tell FFmpeg what streams of data we are operating on per filter.\u003c/p\u003e\u003cp\u003eAt the start you see:\u003c/p\u003e\u003cblockquote\u003e[0:v][0:a][1:v][1:a]\u003c/blockquote\u003e\u003cp\u003eThis translates in plain English to:\u003c/p\u003e\u003cblockquote\u003eUse the video stream of the first input source, use the audio stream from the first input source, use the video stream from the second input source, and use the audio stream from the second input source.\u003c/blockquote\u003e\u003cp\u003eThe square bracket syntax indicates:\u003c/p\u003e\u003cblockquote\u003e[index_of_input:stream_type]\u003c/blockquote\u003e\u003cp\u003eThose of us with experience in programming will understand why the index starts at 0 and not 1\u003c/p\u003e\u003cp\u003eNow after we declared what streams we are using, we have a normal filter syntax:\u003c/p\u003e\u003cblockquote\u003econcat=n=2:v=1:a=1\u003c/blockquote\u003e\u003cp\u003e\u003ccode\u003econcat\u003c/code\u003e is the name of the filter\u003c/p\u003e\u003cp\u003e\u003ccode\u003en=2\u003c/code\u003e is specifying there are two input sources\u003c/p\u003e\u003cp\u003e\u003ccode\u003ev=1\u003c/code\u003e indicates each input source has only one video stream and to write only one video stream out as output\u003c/p\u003e\u003cp\u003e\u003ccode\u003ea=1\u003c/code\u003e indicates each input source has only one audio stream and to write only one audio stream out as output\u003c/p\u003e\u003cp\u003eNext, we label the streams of data created by the filter using the bracket syntax:\u003c/p\u003e\u003cblockquote\u003e[outv] [outa]\u003c/blockquote\u003e\u003cp\u003eHere, we are calling the newly created video stream \u003ccode\u003eoutv\u003c/code\u003e and the audio stream \u003ccode\u003eouta\u003c/code\u003e, we need these later when using the \u003ccode\u003e-map\u003c/code\u003e flag on the output\u003c/p\u003e\u003cp\u003eLastly, we need to explicitly tell FFmpeg what streams of data to map to the output being written to the file, using the \u003ccode\u003e-map\u003c/code\u003e option\u003c/p\u003e\u003cblockquote\u003e-map \u0026#34;[outv]\u0026#34; -map \u0026#34;[outa]\u0026#34;\u003c/blockquote\u003e\u003cp\u003eDo those names look familiar? It\u0026#39;s what we labeled the streams created from the concat filter. We are telling FFmpeg:\u003c/p\u003e\u003cblockquote\u003eDon\u0026#39;t use the streams directly from the input files, instead use these data streams created by a filtergraph.\u003c/blockquote\u003e\u003cp\u003eAnd with that, ya let it run and tada, you have concatenated two videos with completely different encodings, hurray!\u003c/p\u003e\u003chr/\u003e\u003cp\u003eDid you find this information useful? If so, consider heading over to my \u003ca href=\"https://donaldfeury.xyz/donate/\"\u003edonation\u003c/a\u003e page and drop me some support.\u003c/p\u003e\u003cp\u003eWant to ask a question or just chat? Contact me \u003ca href=\"https://donaldfeury.xyz/contact\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n    \u003c/section\u003e",
  "Date": "2021-06-27T01:28:00Z",
  "Author": "Donald Feury"
}