{
  "Source": "donaldfeury.xyz",
  "Title": "How to perform a JOIN in MongoDB",
  "Link": "https://donaldfeury.xyz/how-to-perform-a-join-in-mongodb/",
  "Content": "\u003csection class=\"gh-content gh-canvas\"\u003e\n        \u003cp\u003eFor a full overview of MongoDB and all my posts on it, check out my \u003ca href=\"https://donaldfeury.xyz/introduction-to-mongodb/\"\u003eoverview\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIf you have relational data in your MongoDB instance, you can perform an operation similar to a JOIN typically done in SQL queries.\u003c/p\u003e\u003cp\u003eConsider the following data set:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003edb.podcasts.insertMany([\n\t{id: 1, name: \u0026#34;Off The Clock\u0026#34;, category: \u0026#34;Technology\u0026#34;, rss: \u0026#34;https://anchor.fm/s/76aafa5c/podcast/rss\u0026#34;},\n\t{id: 2, name: \u0026#34;Tech Over Tea\u0026#34;, category: \u0026#34;Technology\u0026#34;, rss: \u0026#34;https://anchor.fm/s/149fd51c/podcast/rss\u0026#34;}\n]);\n\ndb.episodes.insertMany([\n\t{podcast_id: 1, title: \u0026#34;Resume Tips\u0026#34;, published_on: \u0026#34;2022-01-11\u0026#34;},\n\t{podcast_id: 2, title: \u0026#34;#75 Welcome Our Hacker Neko Waifu | Cyan Nyan\u0026#34;, published_on: \u0026#34;2021-08-04\u0026#34;},\n\t{podcast_id: 2, title: \u0026#34;Square Enix Refuses To Take My Money | Solo\u0026#34;, published_on: \u0026#34;2022-01-26\u0026#34;},\n\t{podcast_id: 1, title: \u0026#34;Find the Right Job\u0026#34;, published_on: \u0026#34;2022-01-25\u0026#34;}\n]);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf you want to get every podcast with all of its associated episodes, you can accomplish this using the \u003ccode\u003e$lookup\u003c/code\u003e aggregation stage.\u003c/p\u003e\u003cp\u003eThe aggregation would look something like this:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003edb.podcasts.aggregate([\n\t{ $lookup: {\n\t\tfrom: \u0026#34;episodes\u0026#34;, // Name of the other collection to \u0026#34;join\u0026#34; from\n\t\tlocalField: \u0026#34;id\u0026#34;, // Name of the field your current documents contain to compare with\n\t\tforeignField: \u0026#34;podcast_id\u0026#34;, // Name of field to compare to in the \u0026#34;from\u0026#34; collection\u0026#39;s documents\n\t\tas: \u0026#34;episodes\u0026#34; // What to call the field that contains the array of sub documents that matched\n\t}}\n]);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAny documents in the \u003ccode\u003eepisodes\u003c/code\u003e collection that had a \u003ccode\u003epodcast_id\u003c/code\u003e that matched one of the \u003ccode\u003epodcasts\u003c/code\u003e documents would have been added to an array of sub-documents called \u003ccode\u003eepisodes\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eThe result would look like this:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-json\"\u003e[\n\t{\n\t\tid: 1,\n\t \tname: \u0026#34;Off The Clock\u0026#34;,\n\t\tcategory: \u0026#34;Technology\u0026#34;,\n\t\trss: \u0026#34;https://anchor.fm/s/76aafa5c/podcast/rss\u0026#34;,\n\t\tepisodes: [\n\t\t\t{podcast_id: 1, title: \u0026#34;Resume Tips\u0026#34;, published_on: \u0026#34;2022-01-11\u0026#34;},\n\t\t\t{podcast_id: 1, title: \u0026#34;Find the Right Job\u0026#34;, published_on: \u0026#34;2022-01-25\u0026#34;}\n\t\t]\n\t},\n\t{\n\t\tid: 2,\n\t\tname: \u0026#34;Tech Over Tea\u0026#34;,\n\t\tcategory: \u0026#34;Technology\u0026#34;,\n\t\trss: \u0026#34;https://anchor.fm/s/149fd51c/podcast/rss\u0026#34;,\n\t\tepisodes: [\n\t\t\t{podcast_id: 2, title: \u0026#34;#75 Welcome Our Hacker Neko Waifu | Cyan Nyan\u0026#34;, published_on: \u0026#34;2021-08-04\u0026#34;},\n\t\t\t{podcast_id: 2, title: \u0026#34;Square Enix Refuses To Take My Money | Solo\u0026#34;, published_on: \u0026#34;2022-01-26\u0026#34;},\n\t\t]\n\t}\n]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis would be the equivalent of the SQL query:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-sql\"\u003eSELECT\n\t*\nFROM\n\tpodcasts\nLEFT JOIN episodes ON episodes.podcast_id = podcasts.id;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI specified \u003ccode\u003eLEFT JOIN\u003c/code\u003e in the SQL example because if no documents match the \u003ccode\u003e$lookup\u003c/code\u003e aggregation stage, the podcasts would still be returned with the \u003ccode\u003eepisodes\u003c/code\u003e field being an empty array.\u003c/p\u003e\u003chr/\u003e\u003cp\u003eDid you find this information useful? If so, consider heading over to my \u003ca href=\"https://donaldfeury.xyz/donate/\"\u003edonation\u003c/a\u003e page and drop me some support.\u003c/p\u003e\u003cp\u003eWant to ask a question or just chat? Contact me \u003ca href=\"https://donaldfeury.xyz/contact\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n    \u003c/section\u003e",
  "Date": "2022-01-31T00:45:32Z",
  "Author": "Donald Feury"
}