{
  "Source": "donaldfeury.xyz",
  "Title": "Handle Argument Flags in Go",
  "Link": "https://donaldfeury.xyz/handle-argument-flags-in-go/",
  "Content": "\u003csection class=\"gh-content gh-canvas\"\u003e\n        \u003cp\u003eI recently started building up a lot of small little go packages that will lead up to a more comprehensive automated video editing tool I want to build.\u003c/p\u003e\u003cp\u003eWhile creating these small packages, I wanted to create a simple CLI program to interact with each and do it more properly than I had with the shell scripts.\u003c/p\u003e\u003cp\u003eI wanted to start by handling arguments in a more proper way, namely, parsing flags passed to the program.\u003c/p\u003e\u003cp\u003eTurns out, go already has a pretty nice package in the standard library for this called \u003ca href=\"https://golang.org/pkg/flag/\"\u003eflag\u003c/a\u003e.\u003c/p\u003e\u003cfigure class=\"kg-card kg-embed-card\"\u003e\u003ciframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/ovwBvYPdKFU?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/figure\u003e\u003ch2 id=\"setup-valid-flags\"\u003eSetup Valid Flags\u003c/h2\u003e\u003cp\u003eSo, how do we go about declaring what flags we want to accept? Well, there are two main approaches you can use.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-go\"\u003emyStrFlag := flag.String(\u0026#34;mystr\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;This is my string flag\u0026#34;)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis approach declares a flag called \u0026#34;mystr\u0026#34; and when your arguments are parsed, will return a pointer to the value the function returned. The second argument is the default value if no value is given for that flag. The final argument is the message displayed when the usage info for the flags is shown. (more on that later)\u003c/p\u003e\u003cp\u003eThere is a similar way to achieve this:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-go\"\u003evar myStrFlag string\nflag.StringVar(\u0026amp;myStrFlag, \u0026#34;mystr\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;This is my string\u0026#34;)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis is almost identical to the first way, except instead of the function returning a pointer, we give it a pointer to an existing variable and the value is stored in that variable using the pointer. I prefer this approach myself.\u003c/p\u003e\u003ch2 id=\"flag-argument-formats\"\u003eFlag Argument Formats\u003c/h2\u003e\u003cp\u003eUsing the previous example, if we declare a valid flag called \u0026#34;mystr\u0026#34;, the flag can be passed in several formats that are valid.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003e-mystr=value\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003e--mystr=value\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003e-mystr value\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003e--mystr value\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIf the flag is a \u003cstrong\u003eboolean\u003c/strong\u003e flag, these are the valid formats:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003e-mybool\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003e--mybool\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003e-mybool=value\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003e--mybool=value\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eYou\u0026#39;ll notice with boolean flags we can\u0026#39;t do the \u003ccode\u003e-flag value\u003c/code\u003e syntax. I already lost about an hour one day not realizing this when the rest of the flags weren\u0026#39;t being parsed. Turns out I was accidentally trying to use a boolean flag like any other flag and passing the value with a space, which causes the flag parsing to stop.\u003c/p\u003e\u003ch2 id=\"flag-usage\"\u003eFlag Usage\u003c/h2\u003e\u003cp\u003eOne of the great advantages of the \u003cstrong\u003eflag\u003c/strong\u003e package is it makes it super easy to print the usage info of your flags!\u003c/p\u003e\u003cp\u003eBy default, if you want to display the usage information, all you have to do is do:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-go\"\u003eflag.PrintDefaults()\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis will print out each flag you\u0026#39;ve defined, along with that help message you pass in as the last argument to each flag definition.\u003c/p\u003e\u003cp\u003eNow, if you want to change what gets printed when printing the usage, you can override it easily.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-go\"\u003eflag.Usage = func() {\n  fmt.Println(\u0026#34;This is my new help message\u0026#34;)\n  fmt.Println(\u0026#34;This will get displayed instead of the default messages\u0026#34;)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"parsing-arguments\"\u003eParsing Arguments\u003c/h2\u003e\u003cp\u003eSo we\u0026#39;ve declared what our flags are and set up our usage message, how do we actually parse the program arguments into our variables? Thankfully, with one function call:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-go\"\u003eflag.Parse()\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThat is it, that is all you had to do and tada, you got values stored in your variables!\u003c/p\u003e\u003cp\u003eNow, you noticed the flags are actually typed as well (StringVar, Intvar, etc), while parsing the arguments, if someone gave a file path for an integer variable, the program will automatically display an error message, print the default usage, and exit! That is a lot of functionality right out of the box for basically free.\u003c/p\u003e\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\u003cp\u003eYou should now be able to:\u003c/p\u003e\u003cul\u003e\u003cli\u003eDefine a set of valid flag arguments for your program\u003c/li\u003e\u003cli\u003eHave default values and usage information for said flags\u003c/li\u003e\u003cli\u003eParse the program arguments into your variables\u003c/li\u003e\u003cli\u003ePrint the usage information if needed\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIf you have any further questions about what you can do with the flag package, just check the \u003ca href=\"https://golang.org/pkg/flag/\"\u003edocs\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThank you for your time!\u003c/p\u003e\u003chr/\u003e\u003cp\u003eDid you find this information useful? If so, consider heading over to my \u003ca href=\"https://donaldfeury.xyz/donate/\"\u003edonation\u003c/a\u003e page and drop me some support.\u003c/p\u003e\u003cp\u003eWant to ask a question or just chat? Contact me \u003ca href=\"https://donaldfeury.xyz/contact\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n    \u003c/section\u003e",
  "Date": "2021-06-27T02:07:31Z",
  "Author": "Donald Feury"
}