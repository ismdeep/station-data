{
  "Source": "donaldfeury.xyz",
  "Title": "Remove the Silent Parts of a Video Using FFmpeg and Python",
  "Link": "https://donaldfeury.xyz/remove-the-silent-parts-of-a-video-using-ffmpeg-and-python/",
  "Content": "\u003csection class=\"gh-content gh-canvas\"\u003e\n        \u003cp\u003eI finally did it, I managed to figure out a little process to automatically remove the silent parts from a video.\u003c/p\u003e\u003cp\u003eLet me show y\u0026#39;all the process and the two main scripts I use to accomplish this.\u003c/p\u003e\u003cfigure class=\"kg-card kg-embed-card\"\u003e\u003ciframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/ak52RXKfDw8?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/figure\u003e\u003ch2 id=\"process\"\u003eProcess\u003c/h2\u003e\u003col\u003e\u003cli\u003eUse FFmpeg filter \u003cstrong\u003esilencedetect\u003c/strong\u003e filter to generate an output of sections of the video\u0026#39;s audio with \u003cem\u003esilence\u003c/em\u003e\u003c/li\u003e\u003cli\u003eNext, we pipe that output through a few programs to get the output in the format that I want\u003c/li\u003e\u003cli\u003eSave the output into a text file\u003c/li\u003e\u003cli\u003eUse that text file in a python script that sections out the parts of the video with audio, and save the new version with the silence removed\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eNow, with the process laid out, lets look at the scripts doing the heavy lifting.\u003c/p\u003e\u003ch2 id=\"scripts\"\u003eScripts\u003c/h2\u003e\u003cp\u003eHere is the script for generating the silence timestamp data:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-sh\"\u003e#!/usr/bin/env sh\n\nIN=$1\nTHRESH=$2\nDURATION=$3\n\nffmpeg -hide_banner -vn -i $IN -af \u0026#34;silencedetect=n=${THRESH}dB:d=${DURATION}\u0026#34; -f null - 2\u0026gt;\u0026amp;1 | grep \u0026#34;silence_end\u0026#34; | awk \u0026#39;{print $5 \u0026#34; \u0026#34; $8}\u0026#39; \u0026gt; silence.txt\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI\u0026#39;m passing in three arguments to this script:\u003c/p\u003e\u003cp\u003e\u003ccode\u003eIN\u003c/code\u003e - the file path to the video I want to analyze\u003c/p\u003e\u003cp\u003e\u003ccode\u003eTHRESH\u003c/code\u003e - the volume threshold the filter uses to determine what counts as silence\u003c/p\u003e\u003cp\u003e\u003ccode\u003eDURATION\u003c/code\u003e - the length of time in seconds the audio needs to stay below the threshold to count as a section of silence\u003c/p\u003e\u003cp\u003eThat leaves us with the actual \u003cstrong\u003effmpeg\u003c/strong\u003e command:\u003c/p\u003e\u003cblockquote\u003effmpeg -hide_banner -vn -i $IN -af \u0026#34;silencedetect=n=${THRESH}dB:d=${DURATION}\u0026#34; -f null - 2\u0026gt;\u0026amp;1 | grep \u0026#34;silence_end\u0026#34; | awk \u0026#39;{print $5 \u0026#34; \u0026#34; $8}\u0026#39; \u0026gt; silence.txt\u003c/blockquote\u003e\u003cp\u003e\u003ccode\u003e-hide_banner\u003c/code\u003e - hides the initial dump of info ffmpeg shows when you run it\u003c/p\u003e\u003cp\u003e\u003ccode\u003e-vn\u003c/code\u003e - ignore the input file\u0026#39;s video stream, we only need the audio and ignoring the video stream speeds up the process alot as it doesn\u0026#39;t need to demux and decode the video stream.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e-af \u0026#34;silencedetect=n=${THRESH}dB:d=${DURATION}\u0026#34;\u003c/code\u003e - detects the silence in the audio and displays the ouput in stdout, which I pipe to other programs\u003c/p\u003e\u003cp\u003eThe output of \u003cstrong\u003esilencedetect\u003c/strong\u003e looks like this:\u003cbr/\u003e\u003c/p\u003e\u003cfigure class=\"kg-card kg-image-card\"\u003e\u003cimg src=\"https://dev-to-uploads.s3.amazonaws.com/i/a8ep48n2qhyikk9rpi1m.png\" class=\"kg-image\" alt=\"Silencedetect Example Output\" loading=\"lazy\"/\u003e\u003c/figure\u003e\u003cp\u003e\u003ccode\u003e-f null - 2\u0026gt;\u0026amp;1\u003c/code\u003e - do not write any streams out and ignore error messages. To keep the output as clean as possible\u003c/p\u003e\u003cp\u003e\u003ccode\u003egrep \u0026#34;silence_end\u0026#34;\u003c/code\u003e - we first pipe the output to grep, I only want the lines that have that part that says \u0026#34;silence_end\u0026#34;\u003c/p\u003e\u003cp\u003e\u003ccode\u003eawk \u0026#39;{print $5 \u0026#34; \u0026#34; $8}\u0026#39; \u0026gt; silence.txt\u003c/code\u003e - Lastly, we pipe that output to awk and print the fifth and eighth values to a text file\u003c/p\u003e\u003cp\u003eThe final output looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e86.7141 5.29422\n108.398 5.57798\n135.61 1.0805\n165.077 1.06485\n251.877 1.11594\n283.377 5.21286\n350.709 1.12472\n362.749 1.24295\n419.726 4.42077\n467.997 5.4622\n476.31 1.02338\n546.918 1.35986\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou might ask, why did I not grab the silence start timestamp? That is because those two numbers I grabbed were the ending timestamp and the duration. If I just subtract the duration from the ending timestamp, I get the starting timestamp!\u003c/p\u003e\u003cp\u003eSo finally we get to the python script that processes the timestamps. The script makes use of a python library called \u003ca href=\"https://github.com/Zulko/moviepy\"\u003emoviepy\u003c/a\u003e, you should check it out!\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-python\"\u003e#!/usr/bin/env python\n\nimport sys\nimport subprocess\nimport os\nimport shutil\nfrom moviepy.editor import VideoFileClip, concatenate_videoclips\n\n# Input file path\nfile_in = sys.argv[1]\n# Output file path\nfile_out = sys.argv[2]\n# Silence timestamps\nsilence_file = sys.argv[3]\n\n# Ease in duration between cuts\ntry:\n    ease = float(sys.argv[4])\nexcept IndexError:\n    ease = 0.0\n\nminimum_duration = 1.0\n\ndef main():\n    # number of clips generated\n    count = 0\n    # start of next clip\n    last = 0\n\n    in_handle = open(silence_file, \u0026#34;r\u0026#34;, errors=\u0026#39;replace\u0026#39;)\n    video = VideoFileClip(file_in)\n    full_duration = video.duration\n    clips = []\n    while True:\n        line = in_handle.readline()\n\n        if not line:\n            break\n\n        end,duration = line.strip().split()\n\n        to = float(end) - float(duration)\n\n        start = float(last)\n        clip_duration = float(to) - start\n        # Clips less than one seconds don\u0026#39;t seem to work\n        print(\u0026#34;Clip Duration: {} seconds\u0026#34;.format(clip_duration))\n\n        if clip_duration \u0026lt; minimum_duration:\n            continue\n\n        if full_duration - to \u0026lt; minimum_duration:\n            continue\n\n        if start \u0026gt; ease:\n            start -= ease\n\n        print(\u0026#34;Clip {} (Start: {}, End: {})\u0026#34;.format(count, start, to))\n        clip = video.subclip(start, to)\n        clips.append(clip)\n        last = end\n        count += 1\n\n    if full_duration - float(last) \u0026gt; minimum_duration:\n        print(\u0026#34;Clip {} (Start: {}, End: {})\u0026#34;.format(count, last, \u0026#39;EOF\u0026#39;))\n        clips.append(video.subclip(float(last)-ease))\n\n    processed_video = concatenate_videoclips(clips)\n    processed_video.write_videofile(\n        file_out,\n        fps=60,\n        preset=\u0026#39;ultrafast\u0026#39;,\n        codec=\u0026#39;libx264\u0026#39;\n    )\n\n    in_handle.close()\n    video.close()\n\nmain()\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere I pass in 3 required and 1 optional argument:\u003c/p\u003e\u003cp\u003e\u003ccode\u003efile_in\u003c/code\u003e - the input file to work on, should be the same as the one passed into the silence detection script\u003c/p\u003e\u003cp\u003e\u003ccode\u003efile_out\u003c/code\u003e - the file path to save the final version to\u003c/p\u003e\u003cp\u003e\u003ccode\u003esilence_file\u003c/code\u003e - the file path to the file generated by the silence detection\u003c/p\u003e\u003cp\u003e\u003ccode\u003eease_in\u003c/code\u003e - a work in progress concept. I noticed the jumps between the clips is kinda sudden and too abrupt. So I want to add about half a second of padding to when the next clip is suppose to start to make it less abrupt.\u003c/p\u003e\u003cp\u003eYou will see there is a minimum_duration, that is because I found in testing that moviepy will crash when trying to write out a clip that is less than a second. There are a few sanity checks using that to determine if a clip should be extracted yet or not. That part is very rough still though.\u003c/p\u003e\u003cp\u003eI track when the next clip to be written out should start in the \u003ccode\u003elast\u003c/code\u003e variable, to track when the last section of silence ended.\u003c/p\u003e\u003cp\u003eThe logic for writing out clips works like so:\u003c/p\u003e\u003cp\u003eGet the starting timestamp of silence\u003c/p\u003e\u003cp\u003eWrite out a clip from the \u003cstrong\u003eend\u003c/strong\u003e of the last section of silence, until the start of the next section of silence, and store it in a list\u003c/p\u003e\u003cp\u003eStore the end of the next section of silence in a variable\u003c/p\u003e\u003cp\u003eRepeat until all sections of silence are exhausted\u003c/p\u003e\u003cp\u003eLast we write the remainder of the video to the last clip, use the \u003cstrong\u003econcatenate_vidoeclips\u003c/strong\u003e function from moviepy to pass in a list of clips and combine them into one video clip, and call the \u003cstrong\u003ewrite_videofile\u003c/strong\u003e method of \u003cstrong\u003eVideoClip\u003c/strong\u003e class to save the final output to the out path I passed into the script.\u003c/p\u003e\u003cp\u003eTada! You got a new version of the video with the silent parts removed!\u003c/p\u003e\u003cp\u003eI will try to show a before and after video of the process soon.\u003c/p\u003e\u003chr/\u003e\u003cp\u003eDid you find this information useful? If so, consider heading over to my \u003ca href=\"https://donaldfeury.xyz/donate/\"\u003edonation\u003c/a\u003e page and drop me some support.\u003c/p\u003e\u003cp\u003eWant to ask a question or just chat? Contact me \u003ca href=\"https://donaldfeury.xyz/contact\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n    \u003c/section\u003e",
  "Date": "2021-06-27T01:52:23Z",
  "Author": "Donald Feury"
}