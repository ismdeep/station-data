{
  "Source": "donaldfeury.xyz",
  "Title": "How to create the content hash for a Dropbox file upload in Elixir",
  "Link": "https://donaldfeury.xyz/how-to-create-the-content-hash-for-a-dropbox-file-upload-in-elixir/",
  "Content": "\u003csection class=\"gh-content gh-canvas\"\u003e\n        \u003cp\u003eDropbox has a specific way they want you to calculate the content hash for a file you are uploading. You can find the instructions \u003ca href=\"https://www.dropbox.com/developers/reference/content-hash\"\u003ehere\u003c/a\u003e but to summarize:\u003c/p\u003e\u003cul\u003e\u003cli\u003eSplit the file into blocks of 4 MB (4,194,304 or 4 * 1024 * 1024 bytes). The last block (if any) may be smaller than 4 MB.\u003c/li\u003e\u003cli\u003eCompute the hash of each block using SHA-256.\u003c/li\u003e\u003cli\u003eConcatenate the hash of all blocks in the binary format to form a single binary string.\u003c/li\u003e\u003cli\u003eCompute the hash of the concatenated string using SHA-256. Output the resulting hash in hexadecimal format.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eWe can convert each of these steps into parts of a pipeline!\u003c/p\u003e\u003cp\u003eFirst we need to start reading in a file, split into chunks of the specified size. \u003ca href=\"https://hexdocs.pm/elixir/File.html#stream!/3\"\u003eFile.stream!\u003c/a\u003e is a good way of achieving this.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-elixir\"\u003echunk_size = 4 * 1024 * 1024\n\nFile.stream!(\u0026#34;my_file.txt\u0026#34;, [], chunk_size)\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext, we need to create a new hash from each chunk. Iterating over the stream chunks with \u003ca href=\"https://hexdocs.pm/elixir/Enum.html#map/2\"\u003eEnum.map\u003c/a\u003e and passing those chunks into the Erlang module \u003ca href=\"https://hexdocs.pm/elixir/Enum.html#map/2\"\u003e:crypto.hash\u003c/a\u003e will get us our chunk hashes.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-elixir\"\u003echunk_size = 4 * 1024 * 1024\n\nFile.stream!(\u0026#34;my_file.txt\u0026#34;, [], chunk_size)\n|\u0026gt; Enum.map(\u0026amp;:crypto.hash(:sha256, \u0026amp;1))\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAfter that, we\u0026#39;ll combine all individual hashes into one big chunky string of hashes. \u003ca href=\"https://hexdocs.pm/elixir/Enum.html#join/2\"\u003eEnum.join\u003c/a\u003e will let us that list of strings and slap them together\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-elixir\"\u003echunk_size = 4 * 1024 * 1024\n\nFile.stream!(\u0026#34;my_file.txt\u0026#34;, [], chunk_size)\n|\u0026gt; Enum.map(\u0026amp;:crypto.hash(:sha256, \u0026amp;1))\n|\u0026gt; Enum.join()\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eGetting warmer, time to take that big boy and get one final hash using \u003ca href=\"https://hexdocs.pm/elixir/Enum.html#map/2\"\u003e:crypto.hash\u003c/a\u003e again. We\u0026#39;ll have to wrap it inside an anonymous function since we need to pass the string in as the second argument.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-elixir\"\u003echunk_size = 4 * 1024 * 1024\n\nFile.stream!(\u0026#34;my_file.txt\u0026#34;, [], chunk_size)\n|\u0026gt; Enum.map(\u0026amp;:crypto.hash(:sha256, \u0026amp;1))\n|\u0026gt; Enum.join()\n|\u0026gt; (\u0026amp;:crypto.hash(:sha256, \u0026amp;1)).()\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHome stretch! Lastily, base 16 encode the final hash using \u003ca href=\"https://hexdocs.pm/elixir/Base.html#encode16/2\"\u003eBase.encode16\u003c/a\u003e. Don\u0026#39;t forget to lowercase it by passing in \u003ccode\u003ecase: :lower\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-elixir\"\u003echunk_size = 4 * 1024 * 1024\n\nFile.stream!(\u0026#34;my_file.txt\u0026#34;, [], chunk_size)\n|\u0026gt; Enum.map(\u0026amp;:crypto.hash(:sha256, \u0026amp;1))\n|\u0026gt; Enum.join()\n|\u0026gt; (\u0026amp;:crypto.hash(:sha256, \u0026amp;1)).()\n|\u0026gt; Base.encode16(case: :lower)\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThere ya go! You should now be able to create the content hash for a file that you intend to upload to Dropbox.\u003c/p\u003e\n    \u003c/section\u003e",
  "Date": "2023-08-05T22:43:01Z",
  "Author": "Donald Feury"
}