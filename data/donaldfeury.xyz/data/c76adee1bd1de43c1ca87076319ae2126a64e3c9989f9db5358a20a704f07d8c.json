{
  "Source": "donaldfeury.xyz",
  "Title": "Code-First ORM For Go: GORM",
  "Link": "https://donaldfeury.xyz/code-first-orm-for-go-gorm/",
  "Content": "\u003csection class=\"gh-content gh-canvas\"\u003e\n        \u003cp\u003eCheck out the video for some more elaboration on the topics below.\u003c/p\u003e\u003cfigure class=\"kg-card kg-embed-card\"\u003e\u003ciframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/9koLNdEcSR0?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/figure\u003e\u003cp\u003eIf you liked it and want to know when I post more videos, be sure to \u003ca href=\"https://www.youtube.com/DonaldFeury?sub_confirmation=1\"\u003esubscribe\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTime to start looking at some ORMs for go, today we\u0026#39;re gonna start with gorm. Gorm is a code-first ORM, meaning we can use go code to define our database scheme, run the migrations, and also interact with the database with the same code.\u003c/p\u003e\u003ch2 id=\"connect-to-the-database\"\u003eConnect to the Database\u003c/h2\u003e\u003cp\u003eIn order to connect to a database using gorm, we simply use the following:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-go\"\u003edb, err := gorm.Open(\u0026#34;sqlite3\u0026#34;, \u0026#34;test.db\u0026#34;)\nif err != nil {\n  // Handle error\n}\ndefer db.Close()\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe are opening a sqlite3 file because I didn\u0026#39;t want to fiddle with something like MySQL for this.\u003c/p\u003e\u003cp\u003eWe handle an error if one occurred, and defer a call to db.Close() to ensure the connection is cleaned up afterward\u003c/p\u003e\u003ch2 id=\"defining-schema-with-structs\"\u003eDefining Schema with Structs\u003c/h2\u003e\u003cp\u003eWe have the following structs:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-go\"\u003etype Channel struct {\n\tgorm.Model\n\tName        string\n\tDescription string\n}\n\ntype User struct {\n\tgorm.Model\n\tEmail    string\n\tUsername string\n}\n\ntype Message struct {\n\tgorm.Model\n\tContent   string\n\tUserID    uint\n\tChannelID uint\n\tUser      User\n\tChannel   Channel\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eEach of these structs will have a corresponding table in our database, with the same columns as the structs have properties.\u003c/p\u003e\u003cp\u003eThe \u003ccode\u003egorm.Model\u003c/code\u003e struct has some standard properties commonly used in SQL database, check out the \u003ca href=\"https://gorm.io/docs/conventions.html\"\u003edocs\u003c/a\u003e to see more about it.\u003c/p\u003e\u003cp\u003eYou\u0026#39;ll notice the Message struct has properties that reference other structs. These are used to map the table relations, read more about how gorm does relationship mapping \u003ca href=\"https://gorm.io/docs/belongs_to.html\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"migrations\"\u003eMigrations\u003c/h2\u003e\u003cp\u003eThe easiest way to sync up our schema to our structs is to use the \u003ccode\u003eAutoMigration\u003c/code\u003e method defined on the db instance:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-go\"\u003edb.AutoMigrate(\u0026amp;Channel{}, \u0026amp;User{}, \u0026amp;Message{})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe pass in an instance of each struct and gorm does some reflection under the hood to make any schema changes, generate the queries, and run them.\u003c/p\u003e\u003cp\u003eKeep in mind, \u003ccode\u003eAutoMigrate\u003c/code\u003e will only add missing tables, columns, and indexes. It will not remove unused ones, read why \u003ca href=\"https://gorm.io/docs/migration.html\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"adding-data\"\u003eAdding Data\u003c/h2\u003e\u003cp\u003eTo create a new row in our database, we simply create an instance of one of our structs, set the values on its properties, and pass it to the \u003ccode\u003eCreate\u003c/code\u003e method on our database connection:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-go\"\u003echannel := Channel{Name: \u0026#34;General\u0026#34;, Description: \u0026#34;General banter\u0026#34;}\n\ndb.Create(\u0026amp;channel)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTada, data has been inserted into our table!\u003c/p\u003e\u003ch2 id=\"finding-data\"\u003eFinding Data\u003c/h2\u003e\u003cp\u003eIf you want to grab something from the database, the \u003ca href=\"https://gorm.io/docs/query.html\"\u003edocs\u003c/a\u003e have a lot of examples but some notable ones are as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-go\"\u003e// give me all the channels and unmarshal them into my variable channels, which is of type []Channel\ndb.Find(\u0026amp;channels)\n\n// give me the first record by primary key, in the channels table and unmarshal it into my variable channel, which is of type Channel\ndb.First(\u0026amp;channel)\n\n// same as db.First() but gets the last record by primary key\ndb.Last(\u0026amp;channel)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can also build where clauses using the \u003ccode\u003eWhere\u003c/code\u003e method:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-go\"\u003e// Adds a \u0026#39;where name = \u0026#34;General\u0026#34;\u0026#39; clause to the select query\ndb.Where(\u0026#34;Name = ?\u0026#34;, \u0026#34;General\u0026#34;).Find(\u0026amp;channels)\n\n// You can pass in structs to act as the where clause source.\n// Here it will take the field \u0026#39;Name\u0026#39; from our channel struct and add it into the where clause\ndb.Where(\u0026amp;Channel{Name: \u0026#34;General\u0026#34;}).First(\u0026amp;channel)\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"error-handling\"\u003eError Handling\u003c/h2\u003e\u003cp\u003eGorm handles errors in a way that is a little different than idiomatic go.\u003c/p\u003e\u003cp\u003eAfter you run a gorm query, it will set a value to the \u003ccode\u003eError\u003c/code\u003e variable in the gorm package, if an error occurred while running the query.\u003c/p\u003e\u003cp\u003eHere is an example of checking if the method ended up returning an error:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-go\"\u003eif err := db.Where(\u0026#34;Name = ?\u0026#34;, \u0026#34;MissingName\u0026#34;).First(\u0026amp;channel).Error; err != nil {\n  // Handle error\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\u003cp\u003eGorm makes it fairly easy to manage your database schema and acts as an abstraction over your database backend.\u003c/p\u003e\u003cp\u003eThank you for reading\u003c/p\u003e\u003chr/\u003e\u003cp\u003eDid you find this information useful? If so, consider heading over to my \u003ca href=\"https://donaldfeury.xyz/donate/\"\u003edonation\u003c/a\u003e page and drop me some support.\u003c/p\u003e\u003cp\u003eWant to ask a question or just chat? Contact me \u003ca href=\"https://donaldfeury.xyz/contact\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n    \u003c/section\u003e",
  "Date": "2021-06-27T19:17:31Z",
  "Author": "Donald Feury"
}