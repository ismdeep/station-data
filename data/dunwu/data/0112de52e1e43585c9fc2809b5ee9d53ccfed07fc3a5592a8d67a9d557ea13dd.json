{
  "Source": "dunwu",
  "Title": "《从 0 开始学微服务》笔记",
  "Link": "https://dunwu.github.io/blog/pages/7bb3ee/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"《从-0-开始学微服务》笔记\"\u003e\u003ca href=\"#《从-0-开始学微服务》笔记\" class=\"headerlink\" title=\"《从 0 开始学微服务》笔记\"\u003e\u003c/a\u003e《从 0 开始学微服务》笔记\u003c/h1\u003e\u003ch2 id=\"到底什么是微服务？\"\u003e\u003ca href=\"#到底什么是微服务？\" class=\"headerlink\" title=\"到底什么是微服务？\"\u003e\u003c/a\u003e到底什么是微服务？\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e微服务定义\u003c/p\u003e\n\u003cp\u003e微服务是由单一应用程序构成的小服务，拥有自己的进程与轻量化处理，服务依业务功能设计，以全自动的方式部署，与其他服务使用 HTTP API 通讯。同时，服务会使用最小规模的集中管理 （例如 Docker）技术，服务可以用不同的编程语言与数据库等。\u003c/p\u003e\n\u003cp\u003e——Martin Fowler 和 James Lewis\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e单体应用的问题\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e部署效率低\u003c/li\u003e\n\u003cli\u003e团队协作开发成本高\u003c/li\u003e\n\u003cli\u003e单点故障问题\u003c/li\u003e\n\u003cli\u003e线上发布变慢\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e服务化：本地方法调用 转为 远程方法调用（RPC）\u003c/p\u003e\n\u003cp\u003e微服务和服务化的差异：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务拆分粒度更细\u003c/li\u003e\n\u003cli\u003e服务独立部署、维护\u003c/li\u003e\n\u003cli\u003e服务治理要求高\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"从单体应用走向服务化\"\u003e\u003ca href=\"#从单体应用走向服务化\" class=\"headerlink\" title=\"从单体应用走向服务化\"\u003e\u003c/a\u003e从单体应用走向服务化\u003c/h2\u003e\u003ch3 id=\"什么时候进行服务化拆分？\"\u003e\u003ca href=\"#什么时候进行服务化拆分？\" class=\"headerlink\" title=\"什么时候进行服务化拆分？\"\u003e\u003c/a\u003e什么时候进行服务化拆分？\u003c/h3\u003e\u003cp\u003e经验：开发人员超过 10 人（沟通成本变高），就可以考虑服务化拆分\u003c/p\u003e\n\u003ch3 id=\"服务化拆分的两种姿势\"\u003e\u003ca href=\"#服务化拆分的两种姿势\" class=\"headerlink\" title=\"服务化拆分的两种姿势\"\u003e\u003c/a\u003e服务化拆分的两种姿势\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e纵向拆分\u003c/strong\u003e，从业务维度进行拆分。标准是按照业务的关联程度来决定，关联比较密切的业务适合拆分为一个微服务，而功能相对比较独立的业务适合单独拆分为一个微服务。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e横向拆分\u003c/strong\u003e，从公共且独立功能维度拆分。标准是按照是否有公共的被多个其他服务调用，且依赖的资源独立不与其他业务耦合。\u003c/p\u003e\n\u003ch3 id=\"服务化拆分的前置条件\"\u003e\u003ca href=\"#服务化拆分的前置条件\" class=\"headerlink\" title=\"服务化拆分的前置条件\"\u003e\u003c/a\u003e服务化拆分的前置条件\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e服务如何定义\u003c/strong\u003e。通过接口来约定。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e服务如何发布和订阅\u003c/strong\u003e。通过服务注册和发现。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e服务如何监控\u003c/strong\u003e。\u003cstrong\u003e故障如何定位\u003c/strong\u003e。服务化需要链路监控。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e服务如何治理\u003c/strong\u003e。超时和重试、流量控制。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"初探微服务架构\"\u003e\u003ca href=\"#初探微服务架构\" class=\"headerlink\" title=\"初探微服务架构\"\u003e\u003c/a\u003e初探微服务架构\u003c/h2\u003e\u003cp\u003e微服务通过注册中心，实现发布订阅模式。\u003c/p\u003e\n\u003cp\u003e服务调用主要依赖几个基本组件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务描述：常用的服务描述方式包括 RESTful API、XML 配置以及 IDL 文件三种。\u003cul\u003e\n\u003cli\u003eRESTful API 代表：Swagger\u003c/li\u003e\n\u003cli\u003eXML 代表：Dubbo\u003c/li\u003e\n\u003cli\u003eIDL 代表：Thrift、gRPC\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e注册中心\u003cul\u003e\n\u003cli\u003e服务提供者在启动时，根据服务发布文件中配置的发布信息向注册中心注册自己的服务。\u003c/li\u003e\n\u003cli\u003e服务消费者在启动时，根据消费者配置文件中配置的服务信息向注册中心订阅自己所需要的服务。\u003c/li\u003e\n\u003cli\u003e注册中心返回服务提供者地址列表给服务消费者。\u003c/li\u003e\n\u003cli\u003e当服务提供者发生变化，比如有节点新增或者销毁，注册中心将变更通知给服务消费者。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e服务框架\u003cul\u003e\n\u003cli\u003e通信协议：选择 TCP、UDP、HTTP，还是其他？\u003c/li\u003e\n\u003cli\u003e数据传输方式：同步、异步、多路复用？\u003c/li\u003e\n\u003cli\u003e序列化方式：JDK 序列化、Json、二进制（Protobuf、Thrift）？\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e服务监控\u003cul\u003e\n\u003cli\u003e数据采集\u003c/li\u003e\n\u003cli\u003e数据处理\u003c/li\u003e\n\u003cli\u003e数据展示\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e服务追踪\u003c/li\u003e\n\u003cli\u003e工作原理：通过 requestId、spanId 分别表示一次请求、请求中的某一环节\u003c/li\u003e\n\u003cli\u003e服务治理：\u003cul\u003e\n\u003cli\u003e超时、重试\u003c/li\u003e\n\u003cli\u003e负载均衡\u003c/li\u003e\n\u003cli\u003e故障转移\u003c/li\u003e\n\u003cli\u003e流量控制\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"如何发布和引用服务？\"\u003e\u003ca href=\"#如何发布和引用服务？\" class=\"headerlink\" title=\"如何发布和引用服务？\"\u003e\u003c/a\u003e如何发布和引用服务？\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eRESTful API\u003c/strong\u003e：主要被\u003cstrong\u003e用作 HTTP 或者 HTTPS 协议的接口定义\u003c/strong\u003e。代表：Eureka\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eXML 配置\u003c/strong\u003e：代表：Dubbo。工作步骤：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务提供者定义接口，并实现接口。\u003c/li\u003e\n\u003cli\u003e服务提供者进程启动时，通过加载 server.xml 配置文件将接口暴露出去。\u003c/li\u003e\n\u003cli\u003e服务消费者进程启动时，通过加载 client.xml 配置文件来引入要调用的接口。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIDL 文件：IDL 就是接口描述语言（interface description language）的缩写。主要\u003cstrong\u003e用作跨语言平台的服务之间的调用\u003c/strong\u003e。有两种最常用的 IDL：Thrift、gRPC。\u003c/p\u003e\n\u003ch2 id=\"如何注册和发现服务？\"\u003e\u003ca href=\"#如何注册和发现服务？\" class=\"headerlink\" title=\"如何注册和发现服务？\"\u003e\u003c/a\u003e如何注册和发现服务？\u003c/h2\u003e\u003cp\u003e微服务架构下，主要有三种角色：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务提供者（RPC Server）\u003c/li\u003e\n\u003cli\u003e服务消费者（RPC Client）\u003c/li\u003e\n\u003cli\u003e服务注册中心（Registry）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"注册中心实现方式\"\u003e\u003ca href=\"#注册中心实现方式\" class=\"headerlink\" title=\"注册中心实现方式\"\u003e\u003c/a\u003e注册中心实现方式\u003c/h3\u003e\u003cp\u003e注册中心必须提供以下最基本的 API，例如：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e服务注册接口\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e服务注销接口\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e心跳汇报接口\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e服务订阅接口：服务消费者通过调用服务订阅接口完成服务订阅，获取可用的服务提供者节点列表。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e服务变更查询接口\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e服务查询接口\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e服务修改接口\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"集群部署\"\u003e\u003ca href=\"#集群部署\" class=\"headerlink\" title=\"集群部署\"\u003e\u003c/a\u003e集群部署\u003c/h3\u003e\u003cp\u003e注册中心一般都是采用集群部署来保证高可用性，并通过分布式一致性协议来确保集群中不同节点之间的数据保持一致。\u003c/p\u003e\n\u003cp\u003e以 ZooKeeper 的工作原理为例：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e每个 Server 在内存中存储了一份数据，Client 的读请求可以请求任意一个 Server。\u003c/li\u003e\n\u003cli\u003eZooKeeper 启动时，将从实例中选举一个 leader（Paxos 协议）。\u003c/li\u003e\n\u003cli\u003eLeader 负责处理数据更新等操作（ZAB 协议）。\u003c/li\u003e\n\u003cli\u003e一个更新操作成功，当且仅当大多数 Server 在内存中成功修改 。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"目录存储\"\u003e\u003ca href=\"#目录存储\" class=\"headerlink\" title=\"目录存储\"\u003e\u003c/a\u003e目录存储\u003c/h3\u003e\u003cp\u003e注册中心存储服务信息一般采用层次化的目录结构：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e每个目录在 ZooKeeper 中叫作 znode，并且其有一个唯一的路径标识。\u003c/li\u003e\n\u003cli\u003eznode 可以包含数据和子 znode。\u003c/li\u003e\n\u003cli\u003eznode 中的数据可以有多个版本，比如某一个 znode 下存有多个数据版本，那么查询这个路径下的数据需带上版本信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"服务健康状态检测\"\u003e\u003ca href=\"#服务健康状态检测\" class=\"headerlink\" title=\"服务健康状态检测\"\u003e\u003c/a\u003e服务健康状态检测\u003c/h3\u003e\u003cp\u003eZooKeeper 客户端和服务端维持的是一个长连接。连接成功后，会生成一个全局唯一的 Session ID，客户端定期发送心跳消息，服务端收到后重置会话超时时间。如果超时，则认为连接结束。\u003c/p\u003e\n\u003cp\u003e如果一个服务将 ZooKeeper 作为服务注册中心，一旦连接超时，ZooKeeper 会认为这个服务节点已经不可用，就会将其信息删除。\u003c/p\u003e\n\u003ch3 id=\"服务状态变更通知\"\u003e\u003ca href=\"#服务状态变更通知\" class=\"headerlink\" title=\"服务状态变更通知\"\u003e\u003c/a\u003e服务状态变更通知\u003c/h3\u003e\u003cp\u003eZooKeeper 支持 Watch 机制。服务消费者可以监听服务提供者的节点信息。一旦服务提供者的节点信息哟变化，就可以获取到变更状态。\u003c/p\u003e\n\u003ch3 id=\"白名单机制\"\u003e\u003ca href=\"#白名单机制\" class=\"headerlink\" title=\"白名单机制\"\u003e\u003c/a\u003e白名单机制\u003c/h3\u003e\u003cp\u003e通常注册中心会有多套环境，区分开发、测试、线上等环境。如果弄错了，会出现意想不到的后果，为此需要引入白名单保护机制。只有添加到注册中心白名单内的 RPC Server，才能够调用注册中心的注册接口，这样的话可以避免测试环境中的节点意外跑到线上环境中去。\u003c/p\u003e\n\u003ch2 id=\"如何实现-RPC-远程服务调用？\"\u003e\u003ca href=\"#如何实现-RPC-远程服务调用？\" class=\"headerlink\" title=\"如何实现 RPC 远程服务调用？\"\u003e\u003c/a\u003e如何实现 RPC 远程服务调用？\u003c/h2\u003e\u003cp\u003e客户端和服务端如何建立网络连接？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHTTP 通信\u003c/strong\u003e：三次握手建立连接；四次挥手断开连接\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSocket 通信\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e服务器监听\u003c/li\u003e\n\u003cli\u003e客户端请求\u003c/li\u003e\n\u003cli\u003e连接确认\u003c/li\u003e\n\u003cli\u003e数据传输\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e服务端如何处理请求？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBIO\u003c/li\u003e\n\u003cli\u003eNIO\u003c/li\u003e\n\u003cli\u003eAIO\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e数据传输采用什么协议？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHttp\u003c/li\u003e\n\u003cli\u003eDubbo\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e数据该如何序列化和反序列化？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJDK\u003c/li\u003e\n\u003cli\u003eJSON\u003c/li\u003e\n\u003cli\u003e二进制（PB、Thrift 等）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"如何监控微服务调用？\"\u003e\u003ca href=\"#如何监控微服务调用？\" class=\"headerlink\" title=\"如何监控微服务调用？\"\u003e\u003c/a\u003e如何监控微服务调用？\u003c/h2\u003e\u003cp\u003e监控对象\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e客户端监控\u003c/li\u003e\n\u003cli\u003e接口监控\u003c/li\u003e\n\u003cli\u003e资源监控\u003c/li\u003e\n\u003cli\u003e基础监控\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e监控指标\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e请求量\u003c/li\u003e\n\u003cli\u003e响应时间\u003c/li\u003e\n\u003cli\u003e错误率\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e监控维度\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e全局维度\u003c/li\u003e\n\u003cli\u003e机房维度\u003c/li\u003e\n\u003cli\u003e单机维度\u003c/li\u003e\n\u003cli\u003e时间维度\u003c/li\u003e\n\u003cli\u003e重要性维度\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e监控关键点\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e数据采集\u003cul\u003e\n\u003cli\u003e主动上报\u003c/li\u003e\n\u003cli\u003e代理收集\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e数据传输\u003cul\u003e\n\u003cli\u003eUDP\u003c/li\u003e\n\u003cli\u003eKafka\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e数据处理\u003cul\u003e\n\u003cli\u003e全文检索：如 Elasticsearch\u003c/li\u003e\n\u003cli\u003e时序数据库：如 InfluxDB、OpenTSDB\u003c/li\u003e\n\u003cli\u003e流计算：如 Spark、Storm、Flink\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e数据展示\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"如何追踪微服务调用？\"\u003e\u003ca href=\"#如何追踪微服务调用？\" class=\"headerlink\" title=\"如何追踪微服务调用？\"\u003e\u003c/a\u003e如何追踪微服务调用？\u003c/h2\u003e\u003ch3 id=\"服务追踪的作用\"\u003e\u003ca href=\"#服务追踪的作用\" class=\"headerlink\" title=\"服务追踪的作用\"\u003e\u003c/a\u003e服务追踪的作用\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e定位整个系统的瓶颈点\u003c/li\u003e\n\u003cli\u003e优化链路调用\u003c/li\u003e\n\u003cli\u003e生成网络拓扑\u003c/li\u003e\n\u003cli\u003e透明传输数据\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"服务追踪系统原理\"\u003e\u003ca href=\"#服务追踪系统原理\" class=\"headerlink\" title=\"服务追踪系统原理\"\u003e\u003c/a\u003e服务追踪系统原理\u003c/h3\u003e\u003cp\u003e经典论文：\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://bigbully.github.io/Dapper-translation/\"\u003e\u003ccode\u003eDapper, a Large-Scale Distributed Systems Tracing Infrastructure\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003etraceId\u003c/strong\u003e，用于标识某一次具体的请求 ID。当用户的请求进入系统后，会在 RPC 调用网络的第一层生成一个全局唯一的 traceId，并且会随着每一层的 RPC 调用，不断往后传递，这样的话通过 traceId 就可以把一次用户请求在系统中调用的路径串联起来。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003espanId\u003c/strong\u003e，用于标识一次 RPC 调用在分布式请求中的位置。当用户的请求进入系统后，处在 RPC 调用网络的第一层 A 时 spanId 初始值是 0，进入下一层 RPC 调用 B 的时候 spanId 是 0.1，继续进入下一层 RPC 调用 C 时 spanId 是 0.1.1，而与 B 处在同一层的 RPC 调用 E 的 spanId 是 0.2，这样的话通过 spanId 就可以定位某一次 RPC 请求在系统调用中所处的位置，以及它的上下游依赖分别是谁。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eannotation\u003c/strong\u003e，用于业务自定义埋点数据，可以是业务感兴趣的想上传到后端的数据，比如一次请求的用户 UID。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"服务追踪系统实现\"\u003e\u003ca href=\"#服务追踪系统实现\" class=\"headerlink\" title=\"服务追踪系统实现\"\u003e\u003c/a\u003e服务追踪系统实现\u003c/h3\u003e\u003cp\u003e服务追踪系统可以分为三层。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e数据采集层，负责数据埋点并上报。\u003c/li\u003e\n\u003cli\u003e数据处理层，负责数据的存储与计算。\u003c/li\u003e\n\u003cli\u003e数据展示层，负责数据的图形化展示。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"微服务治理的手段有哪些？\"\u003e\u003ca href=\"#微服务治理的手段有哪些？\" class=\"headerlink\" title=\"微服务治理的手段有哪些？\"\u003e\u003c/a\u003e微服务治理的手段有哪些？\u003c/h2\u003e\u003cp\u003e服务调用失败原因：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务提供者自身问题，如宕机、进程退出等；\u003c/li\u003e\n\u003cli\u003e网络问题\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"节点管理\"\u003e\u003ca href=\"#节点管理\" class=\"headerlink\" title=\"节点管理\"\u003e\u003c/a\u003e节点管理\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e注册中心主动摘除机制\u003c/strong\u003e：服务提供者定时发送心跳，如果超时，注册中心把节点从服务列表中删除\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e服务消费者摘除机制\u003c/strong\u003e：如果服务消费者调用服务提供者节点失败，就将这个节点从内存中保存的可用服务提供者节点列表中移除。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"负载均衡\"\u003e\u003ca href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"\u003e\u003c/a\u003e负载均衡\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e随机算法\u003c/li\u003e\n\u003cli\u003e轮询算法\u003c/li\u003e\n\u003cli\u003e最少活跃调用算法\u003c/li\u003e\n\u003cli\u003e一致性 Hash 算法\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"服务路由\"\u003e\u003ca href=\"#服务路由\" class=\"headerlink\" title=\"服务路由\"\u003e\u003c/a\u003e服务路由\u003c/h3\u003e\u003cp\u003e为什么要制定路由规则呢？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e业务存在灰度发布的需求\u003c/li\u003e\n\u003cli\u003e多机房就近访问的需求\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如何配置路由规则\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e静态配置：修改服务消费者本地配置，上线后生效\u003c/li\u003e\n\u003cli\u003e动态配置：修改注册中心的配置，服务消费者在下一个同步周期之后，就会动态更新\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"服务容错\"\u003e\u003ca href=\"#服务容错\" class=\"headerlink\" title=\"服务容错\"\u003e\u003c/a\u003e服务容错\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003eFailOver：失败自动切换。\u003c/li\u003e\n\u003cli\u003eFailBack：失败通知。\u003c/li\u003e\n\u003cli\u003eFailCache：失败缓存。\u003c/li\u003e\n\u003cli\u003eFailFast：快速失败。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e一般情况下对于幂等的调用，可以选择 FailOver 或者 FailCache，非幂等的调用可以选择 FailBack 或者 FailFast。\u003c/p\u003e\n\u003ch2 id=\"Dubbo-框架里的微服务组件\"\u003e\u003ca href=\"#Dubbo-框架里的微服务组件\" class=\"headerlink\" title=\"Dubbo 框架里的微服务组件\"\u003e\u003c/a\u003eDubbo 框架里的微服务组件\u003c/h2\u003e\u003ch2 id=\"服务发布和引用的实践\"\u003e\u003ca href=\"#服务发布和引用的实践\" class=\"headerlink\" title=\"服务发布和引用的实践\"\u003e\u003c/a\u003e服务发布和引用的实践\u003c/h2\u003e\u003cp\u003eXML 配置方式的服务发布和引用流程\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务提供者定义接口\u003c/li\u003e\n\u003cli\u003e服务提供者发布接口\u003c/li\u003e\n\u003cli\u003e服务消费者引用接口\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e服务发布和引用的那些坑\u003c/p\u003e\n\u003ch2 id=\"如何将注册中心落地？\"\u003e\u003ca href=\"#如何将注册中心落地？\" class=\"headerlink\" title=\"如何将注册中心落地？\"\u003e\u003c/a\u003e如何将注册中心落地？\u003c/h2\u003e\u003cp\u003e注册中心如何存储服务信息\u003c/p\u003e\n\u003cp\u003e服务一般会分成多个不同的分组\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e核心与非核心，从业务的核心程度来分。\u003c/li\u003e\n\u003cli\u003e机房，从机房的维度来分。\u003c/li\u003e\n\u003cli\u003e线上环境与测试环境，从业务场景维度来区分。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以注册中心存储的服务信息一般包含三部分内容：\u003cstrong\u003e分组\u003c/strong\u003e、\u003cstrong\u003e服务名\u003c/strong\u003e以及\u003cstrong\u003e节点信息\u003c/strong\u003e，节点信息又包括节点地址和节点其他信息。\u003c/p\u003e\n\u003ch3 id=\"注册中心工作流程\"\u003e\u003ca href=\"#注册中心工作流程\" class=\"headerlink\" title=\"注册中心工作流程\"\u003e\u003c/a\u003e注册中心工作流程\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e服务提供者注册流程。\u003c/li\u003e\n\u003cli\u003e服务提供者反注册流程。\u003c/li\u003e\n\u003cli\u003e服务消费者查询流程。\u003c/li\u003e\n\u003cli\u003e服务消费者订阅变更流程。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"如何注册节点\"\u003e\u003ca href=\"#如何注册节点\" class=\"headerlink\" title=\"如何注册节点\"\u003e\u003c/a\u003e如何注册节点\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e首先查看要注册的节点是否在白名单内？如果不在就抛出异常，在的话继续下一步。\u003c/li\u003e\n\u003cli\u003e其次要查看注册的 Cluster（服务的接口名）是否存在？如果不存在就抛出异常，存在的话继续下一步。\u003c/li\u003e\n\u003cli\u003e然后要检查 Service（服务的分组）是否存在？如果不存在则抛出异常，存在的话继续下一步。\u003c/li\u003e\n\u003cli\u003e最后将节点信息添加到对应的 Service 和 Cluster 下面的存储中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"如何反注册\"\u003e\u003ca href=\"#如何反注册\" class=\"headerlink\" title=\"如何反注册\"\u003e\u003c/a\u003e如何反注册\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e查看 Service（服务的分组）是否存在，不存在就抛出异常，存在就继续下一步。\u003c/li\u003e\n\u003cli\u003e查看 Cluster（服务的接口名）是否存在，不存在就抛出异常，存在就继续下一步。\u003c/li\u003e\n\u003cli\u003e删除存储中 Service 和 Cluster 下对应的节点信息。\u003c/li\u003e\n\u003cli\u003e更新 Cluster 的 sign 值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"如何查询节点信息\"\u003e\u003ca href=\"#如何查询节点信息\" class=\"headerlink\" title=\"如何查询节点信息\"\u003e\u003c/a\u003e如何查询节点信息\u003c/h3\u003e\u003cp\u003e首先从 localcache（本机内存）中查找，如果没有就继续下一步。\u003c/p\u003e\n\u003cp\u003e接着从 snapshot（本地快照）中查找，如果没有就继续下一步。\u003c/p\u003e\n\u003ch3 id=\"如何订阅服务变更\"\u003e\u003ca href=\"#如何订阅服务变更\" class=\"headerlink\" title=\"如何订阅服务变更\"\u003e\u003c/a\u003e如何订阅服务变更\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e服务消费者从注册中心获取了服务的信息后，就订阅了服务的变化，会在本地保留 Cluster 的 sign 值。\u003c/li\u003e\n\u003cli\u003e服务消费者每隔一段时间，调用 getSign() 函数，从注册中心获取服务端该 Cluster 的 sign 值，并与本地保留的 sign 值做对比，如果不一致，就从服务端拉取新的节点信息，并更新 localcache 和 snapshot。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"注册与发现的几个问题\"\u003e\u003ca href=\"#注册与发现的几个问题\" class=\"headerlink\" title=\"注册与发现的几个问题\"\u003e\u003c/a\u003e注册与发现的几个问题\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cp\u003e多注册中心\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e并行订阅服务\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e批量反注册服务\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e服务变更信息增量更新\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"开源服务注册中心如何选型？\"\u003e\u003ca href=\"#开源服务注册中心如何选型？\" class=\"headerlink\" title=\"开源服务注册中心如何选型？\"\u003e\u003c/a\u003e开源服务注册中心如何选型？\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e应用内注册与发现\u003c/strong\u003e：注册中心提供服务端和客户端的 SDK，业务应用通过引入注册中心提供的 SDK，通过 SDK 与注册中心交互，来实现服务的注册和发现。典型代表：Eureka\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e应用外注册与发现\u003c/strong\u003e：业务应用本身不需要通过 SDK 与注册中心打交道，而是通过其他方式与注册中心交互，间接完成服务注册与发现。典型代表：Consul\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e二者对比：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e用内的解决方案一般适用于服务提供者和服务消费者同属于一个技术体系；\u003c/li\u003e\n\u003cli\u003e应用外的解决方案一般适合服务提供者和服务消费者采用了不同技术体系的业务场景\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e注册中心选型要考虑的两个问题\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e高可用性\u003c/li\u003e\n\u003cli\u003e数据一致性\u003cul\u003e\n\u003cli\u003eCP 型：牺牲可用性来保证数据强一致性。代表：ZooKeeper、Etcd、Consul\u003c/li\u003e\n\u003cli\u003eAP 型：代表：Eureka、Nacos\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e而对于注册中心来说，最主要的功能是服务的注册和发现，在网络出现问题的时候，可用性的需求要远远高于数据一致性。即使因为数据不一致，注册中心内引入了不可用的服务节点，也可以通过其他措施来避免，比如客户端的快速失败机制等，只要实现最终一致性，对于注册中心来说就足够了。因此，选择 AP 型注册中心，一般更加合适。\u003c/p\u003e\n\u003ch2 id=\"开源-RPC-框架如何选型？\"\u003e\u003ca href=\"#开源-RPC-框架如何选型？\" class=\"headerlink\" title=\"开源 RPC 框架如何选型？\"\u003e\u003c/a\u003e开源 RPC 框架如何选型？\u003c/h2\u003e\u003cp\u003e限定语言 RPC\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDubbo：仅支持 Java\u003c/li\u003e\n\u003cli\u003eMotan：仅支持 Java\u003c/li\u003e\n\u003cli\u003eTars：仅支持 C++\u003c/li\u003e\n\u003cli\u003eSpring Cloud：仅支持 Java\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e跨语言 RPC\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003egRPC：支持 C++、Java、Python、Go、Ruby、PHP、Android Java、Objective-C 等多种语言\u003c/li\u003e\n\u003cli\u003eThrift：支持 C++、Java、PHP、Python、Ruby、Erlang 等多种语言\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"如何搭建一个可靠的监控系统？\"\u003e\u003ca href=\"#如何搭建一个可靠的监控系统？\" class=\"headerlink\" title=\"如何搭建一个可靠的监控系统？\"\u003e\u003c/a\u003e如何搭建一个可靠的监控系统？\u003c/h2\u003e\u003cp\u003e日志解决方案：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/cn/\"\u003eELK\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e时序数据库解决方案：\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://graphite.readthedocs.io/en/latest/index.html\"\u003eGraphite\u003c/a\u003e、\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.influxdata.com/time-series-platform/\"\u003eTICK\u003c/a\u003e和\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://prometheus.io/\"\u003ePrometheus\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"如何搭建一套适合你的服务追踪系统？\"\u003e\u003ca href=\"#如何搭建一套适合你的服务追踪系统？\" class=\"headerlink\" title=\"如何搭建一套适合你的服务追踪系统？\"\u003e\u003c/a\u003e如何搭建一套适合你的服务追踪系统？\u003c/h2\u003e\u003cp\u003e代表：Zipkin、PinPoint\u003c/p\u003e\n\u003ch2 id=\"如何识别服务节点是否存活？\"\u003e\u003ca href=\"#如何识别服务节点是否存活？\" class=\"headerlink\" title=\"如何识别服务节点是否存活？\"\u003e\u003c/a\u003e如何识别服务节点是否存活？\u003c/h2\u003e\u003ch3 id=\"心跳开关保护机制\"\u003e\u003ca href=\"#心跳开关保护机制\" class=\"headerlink\" title=\"心跳开关保护机制\"\u003e\u003c/a\u003e心跳开关保护机制\u003c/h3\u003e\u003cp\u003e问题：服务消费者同时并发访问注册中心获取最新服务信息导致注册中心带宽被打满\u003c/p\u003e\n\u003cp\u003e方案：需要一种保护机制，即使在网络频繁抖动的时候，服务消费者也不至于同时去请求注册中心获取最新的服务节点信息。\u003c/p\u003e\n\u003ch3 id=\"服务节点摘除保护机制\"\u003e\u003ca href=\"#服务节点摘除保护机制\" class=\"headerlink\" title=\"服务节点摘除保护机制\"\u003e\u003c/a\u003e服务节点摘除保护机制\u003c/h3\u003e\u003cp\u003e问题：服务提供者节点被大量摘除导致服务消费者没有足够的节点可以调用\u003c/p\u003e\n\u003cp\u003e方案：需要根据实际业务的情况，设定一个阈值比例，即使遇到刚才说的这种情况，注册中心也不能摘除超过这个阈值比例的节点。\u003c/p\u003e\n\u003cp\u003e静态注册中心\u003c/p\u003e\n\u003ch2 id=\"如何使用负载均衡算法？\"\u003e\u003ca href=\"#如何使用负载均衡算法？\" class=\"headerlink\" title=\"如何使用负载均衡算法？\"\u003e\u003c/a\u003e如何使用负载均衡算法？\u003c/h2\u003e\u003ch3 id=\"负载均衡算法\"\u003e\u003ca href=\"#负载均衡算法\" class=\"headerlink\" title=\"负载均衡算法\"\u003e\u003c/a\u003e负载均衡算法\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e随机算法\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e轮询算法\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e加权轮询算法\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e最少活跃连接算法\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e一致性 hash 算法\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"如何使用服务路由？\"\u003e\u003ca href=\"#如何使用服务路由？\" class=\"headerlink\" title=\"如何使用服务路由？\"\u003e\u003c/a\u003e如何使用服务路由？\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003e服务路由就是服务消费者在发起服务调用时，必须根据特定的规则来选择服务节点，从而满足某些特定的需求\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e服务路由的应用场景\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e分组调用\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e灰度发布\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e流量切换\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e读写分离\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e服务路由的规则\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e条件路由\u003cul\u003e\n\u003cli\u003e排除某个服务节点\u003c/li\u003e\n\u003cli\u003e白名单和黑名单功能\u003c/li\u003e\n\u003cli\u003e机房隔离\u003c/li\u003e\n\u003cli\u003e读写分离\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e脚本路由\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e服务路由的获取方式\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e本地配置\u003c/li\u003e\n\u003cli\u003e配置中心管理\u003c/li\u003e\n\u003cli\u003e动态下发\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"服务端出现故障时该如何应对？\"\u003e\u003ca href=\"#服务端出现故障时该如何应对？\" class=\"headerlink\" title=\"服务端出现故障时该如何应对？\"\u003e\u003c/a\u003e服务端出现故障时该如何应对？\u003c/h2\u003e\u003cp\u003e微服务故障种类\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e集群故障。解决：流量控制\u003cul\u003e\n\u003cli\u003e限流\u003c/li\u003e\n\u003cli\u003e降级\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e单 IDC 故障。解决：多 IDC 部署、流量切换\u003cul\u003e\n\u003cli\u003e多 IDC 部署\u003cul\u003e\n\u003cli\u003e同城多活\u003c/li\u003e\n\u003cli\u003e异地多活\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e流量切换\u003cul\u003e\n\u003cli\u003eDNS 解析流量切换\u003c/li\u003e\n\u003cli\u003eRPC 流量切换\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e单机故障\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"服务调用失败时有哪些处理手段？\"\u003e\u003ca href=\"#服务调用失败时有哪些处理手段？\" class=\"headerlink\" title=\"服务调用失败时有哪些处理手段？\"\u003e\u003c/a\u003e服务调用失败时有哪些处理手段？\u003c/h2\u003e\u003cp\u003e超时\u003c/p\u003e\n\u003cp\u003e重试\u003c/p\u003e\n\u003cp\u003e流量控制\u003c/p\u003e\n\u003ch2 id=\"如何管理服务配置？\"\u003e\u003ca href=\"#如何管理服务配置？\" class=\"headerlink\" title=\"如何管理服务配置？\"\u003e\u003c/a\u003e如何管理服务配置？\u003c/h2\u003e\u003cp\u003e配置类型：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e本地配置\u003c/li\u003e\n\u003cli\u003e配置中心\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e配置中心代表：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/spring-cloud/spring-cloud-config\"\u003eSpring Cloud Config\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/ctripcorp/apollo\"\u003eApollo\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"如何搭建微服务治理平台？\"\u003e\u003ca href=\"#如何搭建微服务治理平台？\" class=\"headerlink\" title=\"如何搭建微服务治理平台？\"\u003e\u003c/a\u003e如何搭建微服务治理平台？\u003c/h2\u003e\u003cp\u003e服务管理\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务上下线\u003c/li\u003e\n\u003cli\u003e节点添加 / 删除\u003c/li\u003e\n\u003cli\u003e服务查询\u003c/li\u003e\n\u003cli\u003e服务节点查询。这个操作会调用注册中心的节点查询接口，来查询某个服务下一共有多少个节点。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e服务治理\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e限流\u003c/li\u003e\n\u003cli\u003e降级\u003c/li\u003e\n\u003cli\u003e切流量\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e服务监控\u003c/p\u003e\n\u003cp\u003e问题定位\u003c/p\u003e\n\u003cp\u003e日志查询\u003c/p\u003e\n\u003cp\u003e服务运维\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e发布部署\u003c/li\u003e\n\u003cli\u003e弹性伸缩\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"微服务架构该如何落地？\"\u003e\u003ca href=\"#微服务架构该如何落地？\" class=\"headerlink\" title=\"微服务架构该如何落地？\"\u003e\u003c/a\u003e微服务架构该如何落地？\u003c/h2\u003e\u003cp\u003e（略）\u003c/p\u003e\n\u003ch2 id=\"微服务为什么要容器化？\"\u003e\u003ca href=\"#微服务为什么要容器化？\" class=\"headerlink\" title=\"微服务为什么要容器化？\"\u003e\u003c/a\u003e微服务为什么要容器化？\u003c/h2\u003e\u003cp\u003e微服务引入的问题\u003c/p\u003e\n\u003cp\u003e设计复杂\u003c/p\u003e\n\u003cp\u003e测试复杂\u003c/p\u003e\n\u003cp\u003e运维困难\u003c/p\u003e\n\u003ch2 id=\"微服务容器化运维：镜像仓库和资源调度\"\u003e\u003ca href=\"#微服务容器化运维：镜像仓库和资源调度\" class=\"headerlink\" title=\"微服务容器化运维：镜像仓库和资源调度\"\u003e\u003c/a\u003e微服务容器化运维：镜像仓库和资源调度\u003c/h2\u003e\u003cp\u003e容器运维平台的组成部分\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e镜像仓库\u003c/li\u003e\n\u003cli\u003e资源调度\u003c/li\u003e\n\u003cli\u003e容器调度\u003c/li\u003e\n\u003cli\u003e服务编排\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"微服务容器化运维：容器调度和服务编排\"\u003e\u003ca href=\"#微服务容器化运维：容器调度和服务编排\" class=\"headerlink\" title=\"微服务容器化运维：容器调度和服务编排\"\u003e\u003c/a\u003e微服务容器化运维：容器调度和服务编排\u003c/h2\u003e\u003cp\u003e容器调度系统代表：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.docker.com/engine/swarm/\"\u003eSwarm\u003c/a\u003e、\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://mesos.apache.org/\"\u003eMesos\u003c/a\u003e，\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kubernetes.io/\"\u003eKubernetes\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e容器调度要解决的问题\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e主机过滤\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e存活过滤\u003c/li\u003e\n\u003cli\u003e硬件过滤\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e调度策略\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e服务编排\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e服务依赖\u003c/strong\u003e：代表方案：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/docker/compose\"\u003eDocker Compose\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e服务发现\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e基于 Nginx 的服务发现\u003c/li\u003e\n\u003cli\u003e基于注册中心的服务发现\u003c/li\u003e\n\u003cli\u003e弹性伸缩\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"微服务容器化运维：微博容器运维平台-DCP\"\u003e\u003ca href=\"#微服务容器化运维：微博容器运维平台-DCP\" class=\"headerlink\" title=\"微服务容器化运维：微博容器运维平台 DCP\"\u003e\u003c/a\u003e微服务容器化运维：微博容器运维平台 DCP\u003c/h2\u003e\u003ch2 id=\"微服务如何实现-DevOps？\"\u003e\u003ca href=\"#微服务如何实现-DevOps？\" class=\"headerlink\" title=\"微服务如何实现 DevOps？\"\u003e\u003c/a\u003e微服务如何实现 DevOps？\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCI（Continuous Integration）\u003c/strong\u003e，持续集成。开发完成代码开发后，能自动地进行代码检查、单元测试、打包部署到测试环境，进行集成测试，跑自动化测试用例。\u003cul\u003e\n\u003cli\u003e代码检查\u003c/li\u003e\n\u003cli\u003e单元测试\u003c/li\u003e\n\u003cli\u003e集成测试\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCD（Continuous Deploy）\u003c/strong\u003e，持续部署。代码测试通过后，能自动部署到类生产环境中进行集成测试，测试通过后再进行小流量的灰度验证，验证通过后代码就达到线上发布的要求了，就可以把代码自动部署到线上。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"如何做好微服务容量规划？\"\u003e\u003ca href=\"#如何做好微服务容量规划？\" class=\"headerlink\" title=\"如何做好微服务容量规划？\"\u003e\u003c/a\u003e如何做好微服务容量规划？\u003c/h2\u003e\u003cp\u003e微服务容量规划的问题\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务数量众多\u003c/li\u003e\n\u003cli\u003e服务的接口表现差异巨大\u003c/li\u003e\n\u003cli\u003e服务部署的集群规模大小不同\u003c/li\u003e\n\u003cli\u003e服务之间还存在依赖关系\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e容量规划系统的作用是\u003cstrong\u003e根据各个微服务部署集群的最大容量和线上实际运行的负荷，来决定各个微服务是否需要弹性扩缩容，以及需要扩缩容多少台机器\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e容量规划系统实施的关键在于两点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e容量评估\u003cul\u003e\n\u003cli\u003e选择合适的压测指标\u003cul\u003e\n\u003cli\u003e系统类指标：CPU、内存、I/O、带宽等\u003c/li\u003e\n\u003cli\u003e服务类指标：响应时间、P999 耗时、错误率等\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e压测获取单机的最大容量\u003cul\u003e\n\u003cli\u003e单机压测\u003cul\u003e\n\u003cli\u003e通过日志回放等手段，模拟线上流量来对单机进行压测；\u003c/li\u003e\n\u003cli\u003e通过 TCP-Copy 的方式，把线上机器的流量拷贝过来对单机进行压测。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e集群压测\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e实时和获取集群的运行负荷\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e调度决策\u003cul\u003e\n\u003cli\u003e可以使用\u003cstrong\u003e水位线\u003c/strong\u003e来进行调度决策：当集群的水位线位于致命线以下时，就需要立即扩容，在扩容一定数量的机器后，水位线回到安全线以上并保持一段时间后，就可以进行缩容了。\u003c/li\u003e\n\u003cli\u003e扩容\u003cul\u003e\n\u003cli\u003e按数量\u003c/li\u003e\n\u003cli\u003e按比例\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e缩容\u003c/li\u003e\n\u003cli\u003e逐步缩容\u003c/li\u003e\n\u003cli\u003e为了避免因扩容、缩容导致的水位线抖动，可以多次采集水位线数据，超过 60% 数据满足库哦哦让条件，才真正触发扩容。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"微服务多机房部署实践\"\u003e\u003ca href=\"#微服务多机房部署实践\" class=\"headerlink\" title=\"微服务多机房部署实践\"\u003e\u003c/a\u003e微服务多机房部署实践\u003c/h2\u003e\u003cp\u003e多机房负载均衡：利用七层负载均衡和四层负载均衡，将流量根据用户就近访问的原则切分流量。\u003c/p\u003e\n\u003ch2 id=\"多机房数据同步\"\u003e\u003ca href=\"#多机房数据同步\" class=\"headerlink\" title=\"多机房数据同步\"\u003e\u003c/a\u003e多机房数据同步\u003c/h2\u003e\u003ch4 id=\"主从机房架构\"\u003e\u003ca href=\"#主从机房架构\" class=\"headerlink\" title=\"主从机房架构\"\u003e\u003c/a\u003e主从机房架构\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e由主机房的处理机来更新本机房的缓存和数据库\u003c/li\u003e\n\u003cli\u003e其他机房的缓存也通过主机房的处理机来更新\u003c/li\u003e\n\u003cli\u003e从机房的数据库则通过 MySQL 的 binlog 同步主机房的数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"独立机房架构\"\u003e\u003ca href=\"#独立机房架构\" class=\"headerlink\" title=\"独立机房架构\"\u003e\u003c/a\u003e独立机房架构\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e每个机房的处理机接收到写请求后更新各自机房的缓存\u003c/li\u003e\n\u003cli\u003e只有主机房会更新数据库\u003c/li\u003e\n\u003cli\u003e从机房的数据库则通过 MySQL 的 binlog 同步主机房的数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWMB 消息同步组件的功能就是把一个机房的写请求发给另外一个机房\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ereship，负责把本机房的写请求分发一份给别的机房。\u003c/li\u003e\n\u003cli\u003ecollector，负责从别的机房读取写请求，然后再把请求转发给本机房的处理机。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e实现 WMB 的消息同步功能有两种方案：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMQ：两个机房的 MQ 通过维护状态机来读写请求\u003c/li\u003e\n\u003cli\u003eRPC\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"多机房数据一致性\"\u003e\u003ca href=\"#多机房数据一致性\" class=\"headerlink\" title=\"多机房数据一致性\"\u003e\u003c/a\u003e多机房数据一致性\u003c/h4\u003e\u003ch2 id=\"微服务混合云部署实践\"\u003e\u003ca href=\"#微服务混合云部署实践\" class=\"headerlink\" title=\"微服务混合云部署实践\"\u003e\u003c/a\u003e微服务混合云部署实践\u003c/h2\u003e\u003ch3 id=\"跨云服务的负载均衡\"\u003e\u003ca href=\"#跨云服务的负载均衡\" class=\"headerlink\" title=\"跨云服务的负载均衡\"\u003e\u003c/a\u003e跨云服务的负载均衡\u003c/h3\u003e\u003cp\u003e当服务上云后还需要考虑把一定比例的用户请求路由到云上部署的服务\u003c/p\u003e\n\u003ch3 id=\"跨云服务的数据同步\"\u003e\u003ca href=\"#跨云服务的数据同步\" class=\"headerlink\" title=\"跨云服务的数据同步\"\u003e\u003c/a\u003e跨云服务的数据同步\u003c/h3\u003e\u003cp\u003e私有云与公有云之间的网络隔离\u003c/p\u003e\n\u003cp\u003e一般来讲，出于安全的需要，企业内部机房同公有云机房之间的网络是隔离的，为了实现互通，需要架设专门的 VPN 网络或者专线。\u003c/p\u003e\n\u003cp\u003e数据库能否上云\u003c/p\u003e\n\u003cp\u003e数据库能否上云的关键取决于数据的隐私性。\u003c/p\u003e\n\u003ch3 id=\"跨云服务的容器运维\"\u003e\u003ca href=\"#跨云服务的容器运维\" class=\"headerlink\" title=\"跨云服务的容器运维\"\u003e\u003c/a\u003e跨云服务的容器运维\u003c/h3\u003e\u003cp\u003e跨云的主机管理：跨云主机管理的关键点在于，如何对内部私有云的机器和公有云的 ECS 进行管理，\u003c/p\u003e\n\u003cp\u003e跨云服务发现\u003c/p\u003e\n\u003cp\u003e跨云弹性扩容\u003c/p\u003e\n\u003cp\u003e跨云服务编排\u003c/p\u003e\n\u003ch2 id=\"下一代微服务架构-Service-Mesh\"\u003e\u003ca href=\"#下一代微服务架构-Service-Mesh\" class=\"headerlink\" title=\"下一代微服务架构 Service Mesh\"\u003e\u003c/a\u003e下一代微服务架构 Service Mesh\u003c/h2\u003e\u003cp\u003e为什么需要 Service Mesh\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e跨语言服务调用的需要\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e云原生应用服务治理的需要\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Service-Mesh-的实现原理\"\u003e\u003ca href=\"#Service-Mesh-的实现原理\" class=\"headerlink\" title=\"Service Mesh 的实现原理\"\u003e\u003c/a\u003eService Mesh 的实现原理\u003c/h2\u003e\u003cp\u003eService Mesh 实现的关键点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e轻量级网络代理 SideCar，它的作用就是转发服务之间的调用；\u003c/li\u003e\n\u003cli\u003e基于 SideCar 的服务治理也被叫作 Control Plane，它的作用是向 SideCar 发送各种指令，以完成各种服务治理功能。\u003c/li\u003e\n\u003cli\u003e服务发现\u003c/li\u003e\n\u003cli\u003e负载均衡\u003c/li\u003e\n\u003cli\u003e请求路由\u003c/li\u003e\n\u003cli\u003e故障处理\u003c/li\u003e\n\u003cli\u003e安全认证\u003c/li\u003e\n\u003cli\u003e监控上报\u003c/li\u003e\n\u003cli\u003e日志记录\u003c/li\u003e\n\u003cli\u003e配额控制\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Istio：Service-Mesh-的代表产品\"\u003e\u003ca href=\"#Istio：Service-Mesh-的代表产品\" class=\"headerlink\" title=\"Istio：Service Mesh 的代表产品\"\u003e\u003c/a\u003eIstio：Service Mesh 的代表产品\u003c/h2\u003e\u003ch3 id=\"Istio-整体架构\"\u003e\u003ca href=\"#Istio-整体架构\" class=\"headerlink\" title=\"Istio 整体架构\"\u003e\u003c/a\u003eIstio 整体架构\u003c/h3\u003e\u003cp\u003eIstio 的架构可以说由两部分组成，分别是 Proxy 和 Control Plane。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eProxy，就是前面提到的 SideCar，与应用程序部署在同一个主机上，应用程序之间的调用都通过 Proxy 来转发，目前支持 HTTP/1.1、HTTP/2、gRPC 以及 TCP 请求。\u003c/li\u003e\n\u003cli\u003eControl Plane，与 Proxy 通信，来实现各种服务治理功能，包括三个基本组件：Pilot、Mixer 以及 Citadel。\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-08-15T07:27:00Z",
  "Author": "钝悟 ◾ Dunwu"
}