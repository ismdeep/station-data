{
  "Source": "dunwu",
  "Title": "错误处理",
  "Link": "https://dunwu.github.io/blog/pages/e51064/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"错误处理\"\u003e\u003ca href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"\u003e\u003c/a\u003e错误处理\u003c/h1\u003e\u003ch2 id=\"错误的分类\"\u003e\u003ca href=\"#错误的分类\" class=\"headerlink\" title=\"错误的分类\"\u003e\u003c/a\u003e错误的分类\u003c/h2\u003e\u003ch4 id=\"资源的错误\"\u003e\u003ca href=\"#资源的错误\" class=\"headerlink\" title=\"资源的错误\"\u003e\u003c/a\u003e资源的错误\u003c/h4\u003e\u003cp\u003e当我们的代码去请求一些资源时导致的错误，比如打开一个没有权限的文件，写文件时出现的写错误，发送文件到网络端发现网络故障的错误，等等。\u003cstrong\u003e这一类错误属于程序运行环境的问题。对于这类错误，有的我们可以处理，有的我们则无法处理。比如，内存耗尽、栈溢出或是一些程序运行时关键性资源不能满足等等这些情况，我们只能停止运行，甚至退出整个程序。\u003c/strong\u003e\u003c/p\u003e\n\u003ch4 id=\"程序的错误\"\u003e\u003ca href=\"#程序的错误\" class=\"headerlink\" title=\"程序的错误\"\u003e\u003c/a\u003e程序的错误\u003c/h4\u003e\u003cp\u003e比如：空指针、非法参数等。\u003cstrong\u003e这类是我们自己程序的错误，我们要记录下来，写入日志，最好触发监控系统报警\u003c/strong\u003e。\u003c/p\u003e\n\u003ch4 id=\"用户的错误\"\u003e\u003ca href=\"#用户的错误\" class=\"headerlink\" title=\"用户的错误\"\u003e\u003c/a\u003e用户的错误\u003c/h4\u003e\u003cp\u003e比如：Bad Request、Bad Format 等这类由用户不合法输入带来的错误。\u003cstrong\u003e这类错误基本上是在用户的 API 层上出现的问题\u003c/strong\u003e。比如，解析一个 XML 或 JSON 文件，或是用户输入的字段不合法之类的。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e对于这类问题，我们需要向用户端报错，让用户自己处理修正他们的输入或操作。然后，我们正常执行，但是需要做统计，统计相应的错误率，这样有利于我们改善软件或是侦测是否有恶意的用户请求。\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id=\"错误返回码和异常捕捉\"\u003e\u003ca href=\"#错误返回码和异常捕捉\" class=\"headerlink\" title=\"错误返回码和异常捕捉\"\u003e\u003c/a\u003e错误返回码和异常捕捉\u003c/h2\u003e\u003cp\u003e错误处理一般有两种方式：错误返回码和异常捕捉。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e对于我们并不期望会发生的事，我们可以使用异常捕捉；\u003c/li\u003e\n\u003cli\u003e对于我们觉得可能会发生的事，使用返回码。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"异步编程的错误处理\"\u003e\u003ca href=\"#异步编程的错误处理\" class=\"headerlink\" title=\"异步编程的错误处理\"\u003e\u003c/a\u003e异步编程的错误处理\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e无法使用返回码\u003c/strong\u003e。因为函数在“被”异步运行中，所谓的返回只是把处理权交给下一条指令，而不是把函数运行完的结果返回。\u003cstrong\u003e所以，函数返回的语义完全变了，返回码也没有用了\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e无法使用抛异常的方式\u003c/strong\u003e。因为除了上述的函数立马返回的原因之外，抛出的异常也在另外一个线程中，不同线程中的栈是完全不一样的，所以主线程的 \u003ccode\u003ecatch\u003c/code\u003e 完全看不到另外一个线程中的异常。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"callback-错误处理\"\u003e\u003ca href=\"#callback-错误处理\" class=\"headerlink\" title=\"callback 错误处理\"\u003e\u003c/a\u003ecallback 错误处理\u003c/h3\u003e\u003cp\u003e异步编程中，最常用的错误处理方式就是 \u003ccode\u003ecallback\u003c/code\u003e 方式。在做异步请求的时候，注册几个 \u003ccode\u003eOnSuccess()\u003c/code\u003e、 \u003ccode\u003eOnFailure()\u003c/code\u003e 这样的函数，让在另一个线程中运行的异步代码来回调过来。\u003c/p\u003e\n\u003cp\u003e【示例】JavaScript 异步编程的错误处理\u003c/p\u003e\n\u003cfigure class=\"highlight javascript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"title function_\"\u003esuccessCallback\u003c/span\u003e(\u003cspan class=\"params\"\u003eresult\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"variable language_\"\u003econsole\u003c/span\u003e.\u003cspan class=\"title function_\"\u003elog\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#39;It succeeded with \u0026#39;\u003c/span\u003e + result)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"title function_\"\u003efailureCallback\u003c/span\u003e(\u003cspan class=\"params\"\u003eerror\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"variable language_\"\u003econsole\u003c/span\u003e.\u003cspan class=\"title function_\"\u003elog\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#39;It failed with \u0026#39;\u003c/span\u003e + error)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"title function_\"\u003edoSomething\u003c/span\u003e(successCallback, failureCallback)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e但是， 如果我们需要把几个异步函数顺序执行的话（异步程序中，程序执行的顺序是不可预测的、也是不确定的，而有时候，函数被调用的上下文是有相互依赖的，所以，我们希望它们能按一定的顺序处理），就会出现了所谓的 Callback Hell 的问题。如下所示：\u003c/p\u003e\n\u003cfigure class=\"highlight javascript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"title function_\"\u003edoSomething\u003c/span\u003e(\u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"params\"\u003eresult\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"title function_\"\u003edoSomethingElse\u003c/span\u003e(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    result,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"params\"\u003enewResult\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"title function_\"\u003edoThirdThing\u003c/span\u003e(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        newResult,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"params\"\u003efinalResult\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          \u003cspan class=\"variable language_\"\u003econsole\u003c/span\u003e.\u003cspan class=\"title function_\"\u003elog\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#39;Got the final result: \u0026#39;\u003c/span\u003e + finalResult)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        },\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        failureCallback\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    },\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    failureCallback\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}, failureCallback)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e而这样层层嵌套中需要注册的错误处理函数也有可能是完全不一样的，而且会导致代码非常混乱，难以阅读和维护。\u003c/p\u003e\n\u003ch3 id=\"JavaScript-的-Promise-错误处理\"\u003e\u003ca href=\"#JavaScript-的-Promise-错误处理\" class=\"headerlink\" title=\"JavaScript 的 Promise 错误处理\"\u003e\u003c/a\u003eJavaScript 的 Promise 错误处理\u003c/h3\u003e\u003cp\u003e在异步编程的实践里，使用 Promise 模式来处理更为优雅。\u003c/p\u003e\n\u003cfigure class=\"highlight javascript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"title function_\"\u003edoSomething\u003c/span\u003e()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e.\u003cspan class=\"title function_\"\u003ethen\u003c/span\u003e(\u003cspan class=\"function\"\u003e\u003cspan class=\"params\"\u003eresult\u003c/span\u003e =\u0026gt;\u003c/span\u003e \u003cspan class=\"title function_\"\u003edoSomethingElse\u003c/span\u003e(result))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e.\u003cspan class=\"title function_\"\u003ethen\u003c/span\u003e(\u003cspan class=\"function\"\u003e\u003cspan class=\"params\"\u003enewResult\u003c/span\u003e =\u0026gt;\u003c/span\u003e \u003cspan class=\"title function_\"\u003edoThirdThing\u003c/span\u003e(newResult))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e.\u003cspan class=\"title function_\"\u003ethen\u003c/span\u003e(\u003cspan class=\"function\"\u003e\u003cspan class=\"params\"\u003efinalResult\u003c/span\u003e =\u0026gt;\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"variable language_\"\u003econsole\u003c/span\u003e.\u003cspan class=\"title function_\"\u003elog\u003c/span\u003e(\u003cspan class=\"string\"\u003e`Got the final result: \u003cspan class=\"subst\"\u003e${finalResult}\u003c/span\u003e`\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}).\u003cspan class=\"title function_\"\u003ecatch\u003c/span\u003e(failureCallback);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上面代码中的 \u003ccode\u003ethen()\u003c/code\u003e 和 \u003ccode\u003ecatch()\u003c/code\u003e 方法就是 Promise 对象的方法，\u003ccode\u003ethen()\u003c/code\u003e方法可以把各个异步的函数给串联起来，而\u003ccode\u003ecatch()\u003c/code\u003e 方法则是出错的处理。\u003c/p\u003e\n\u003cp\u003e看到上面的那个级联式的调用方式，这就要我们的 \u003ccode\u003edoSomething()\u003c/code\u003e 函数返回 Promise 对象，下面是这个函数的相关代码示例：\u003c/p\u003e\n\u003cfigure class=\"highlight javascript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"title function_\"\u003edoSomething\u003c/span\u003e(\u003cspan class=\"params\"\u003e\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003elet\u003c/span\u003e promise = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003ePromise\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003elet\u003c/span\u003e xhr = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eXMLHttpRequest\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\txhr.\u003cspan class=\"title function_\"\u003eopen\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#39;GET\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;http://coolshell.cn/....\u0026#39;\u003c/span\u003e, \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\txhr.\u003cspan class=\"property\"\u003eonload\u003c/span\u003e = \u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"params\"\u003ee\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"variable language_\"\u003ethis\u003c/span\u003e.\u003cspan class=\"property\"\u003estatus\u003c/span\u003e === \u003cspan class=\"number\"\u003e200\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            results = \u003cspan class=\"title class_\"\u003eJSON\u003c/span\u003e.\u003cspan class=\"title function_\"\u003eparse\u003c/span\u003e(\u003cspan class=\"variable language_\"\u003ethis\u003c/span\u003e.\u003cspan class=\"property\"\u003eresponseText\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            promise.\u003cspan class=\"title function_\"\u003eresolve\u003c/span\u003e(results); \u003cspan class=\"comment\"\u003e// 成功时，调用 resolve() 方法\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    };\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    xhr.\u003cspan class=\"property\"\u003eonerror\u003c/span\u003e = \u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"params\"\u003ee\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        promise.\u003cspan class=\"title function_\"\u003ereject\u003c/span\u003e(e); \u003cspan class=\"comment\"\u003e// 失败时，调用 reject() 方法\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    };\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    xhr.\u003cspan class=\"title function_\"\u003esend\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e promise;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e从上面的代码示例中，我们可以看到，如果成功了，要调用\u003cbr/\u003e\u003ccode\u003ePromise.resolve()\u003c/code\u003e 方法，这样 Promise 对象会继续调用下一个 \u003ccode\u003ethen()\u003c/code\u003e。如果出错了就调用 \u003ccode\u003ePromise.reject()\u003c/code\u003e 方法，这样就会忽略后面的 \u003ccode\u003ethen()\u003c/code\u003e 直到 \u003ccode\u003ecatch()\u003c/code\u003e 方法。\u003c/p\u003e\n\u003cp\u003e我们可以看到 \u003ccode\u003ePromise.reject()\u003c/code\u003e 就像是抛异常一样。这个编程模式让我们的代码组织方便了很多。\u003c/p\u003e\n\u003cp\u003e另外，多说一句，Promise 还可以同时等待两个不同的异步方法。比如下面的代码所展示的方式：\u003c/p\u003e\n\u003cfigure class=\"highlight javascript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003epromise1 = \u003cspan class=\"title function_\"\u003edoSomething\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epromise2 = \u003cspan class=\"title function_\"\u003edoSomethingElse\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"title class_\"\u003ePromise\u003c/span\u003e.\u003cspan class=\"title function_\"\u003ewhen\u003c/span\u003e(promise1, promise2).\u003cspan class=\"title function_\"\u003ethen\u003c/span\u003e( \u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"params\"\u003eresult1, result2\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t... \u003cspan class=\"comment\"\u003e// 处理 result1 和 result2 的代码\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}, handleError);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在 ECMAScript 2017 的标准中，我们可以使用\u003ccode\u003easync\u003c/code\u003e/\u003ccode\u003eawait\u003c/code\u003e 这两个关键字来取代 Promise 对象，这样可以让我们的代码更易读。\u003c/p\u003e\n\u003cp\u003e比如下面的代码示例：\u003c/p\u003e\n\u003cfigure class=\"highlight javascript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003easync\u003c/span\u003e \u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"title function_\"\u003efoo\u003c/span\u003e(\u003cspan class=\"params\"\u003e\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003elet\u003c/span\u003e result = \u003cspan class=\"keyword\"\u003eawait\u003c/span\u003e \u003cspan class=\"title function_\"\u003edoSomething\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003elet\u003c/span\u003e newResult = \u003cspan class=\"keyword\"\u003eawait\u003c/span\u003e \u003cspan class=\"title function_\"\u003edoSomethingElse\u003c/span\u003e(result);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003elet\u003c/span\u003e finalResult = \u003cspan class=\"keyword\"\u003eawait\u003c/span\u003e \u003cspan class=\"title function_\"\u003edoThirdThing\u003c/span\u003e(newResult);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"variable language_\"\u003econsole\u003c/span\u003e.\u003cspan class=\"title function_\"\u003elog\u003c/span\u003e(\u003cspan class=\"string\"\u003e`Got the final result: \u003cspan class=\"subst\"\u003e${finalResult}\u003c/span\u003e`\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e(error) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"title function_\"\u003efailureCallback\u003c/span\u003e(error);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果在函数定义之前使用了 \u003ccode\u003easync\u003c/code\u003e 关键字，就可以在函数内使用 \u003ccode\u003eawait\u003c/code\u003e。 当在 \u003ccode\u003eawait\u003c/code\u003e 某个 \u003ccode\u003ePromise\u003c/code\u003e 时，函数暂停执行，直至该 \u003ccode\u003ePromise\u003c/code\u003e 产生结果，并且暂停不会阻塞主线程。 如果 \u003ccode\u003ePromise\u003c/code\u003e resolve，则会返回值。 如果 \u003ccode\u003ePromise\u003c/code\u003e reject，则会抛出拒绝的值。\u003c/p\u003e\n\u003ch3 id=\"Java-的-Promise-模式\"\u003e\u003ca href=\"#Java-的-Promise-模式\" class=\"headerlink\" title=\"Java 的 Promise 模式\"\u003e\u003c/a\u003eJava 的 Promise 模式\u003c/h3\u003e\u003cp\u003e在 JDK 1.8 里也引入了类似 JavaScript 的玩法 —— \u003ccode\u003eCompletableFuture\u003c/code\u003e。这个类提供了大量的异步编程中 Promise 的各种方式。\u003c/p\u003e\n\u003cp\u003e链式处理：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eCompletableFuture.supplyAsync(\u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e::findReceiver)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                 .thenApply(\u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e::sendMsg)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                 .thenAccept(\u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e::notify);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上面的这个链式处理和 JavaScript 中的\u003ccode\u003ethen()\u003c/code\u003e方法很像，其中的\u003cbr/\u003e\u003ccode\u003esupplyAsync()\u003c/code\u003e 表示执行一个异步方法，而 \u003ccode\u003ethenApply()\u003c/code\u003e 表示执行成功后再串联另外一个异步方法，最后是 \u003ccode\u003ethenAccept()\u003c/code\u003e 来处理最终结果。\u003c/p\u003e\n\u003cp\u003e下面这个例子是要合并两个异步函数的结果：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003eresult\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e CompletableFuture.supplyAsync(() -\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e         \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e     }).thenCombine(CompletableFuture.supplyAsync(() -\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e         \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;world\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e     }), (s1, s2) -\u0026gt; s1 + \u003cspan class=\"string\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e + s2).join());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSystem.out.println(result);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e接下来，我们再来看一下，Java 这个类相关的异常处理：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eCompletableFuture.supplyAsync(Integer::parseInt) \u003cspan class=\"comment\"\u003e// 输入: \u0026#34;ILLEGAL\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t     .thenApply(r -\u0026gt; r * \u003cspan class=\"number\"\u003e2\u003c/span\u003e * Math.PI)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t     .thenApply(s -\u0026gt; \u003cspan class=\"string\"\u003e\u0026#34;apply\u0026gt;\u0026gt; \u0026#34;\u003c/span\u003e + s)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t     .exceptionally(ex -\u0026gt; \u003cspan class=\"string\"\u003e\u0026#34;Error: \u0026#34;\u003c/span\u003e + ex.getMessage());\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e我们要注意到上面代码里的 \u003ccode\u003eexceptionally()\u003c/code\u003e 方法，这个和 JavaScript Promise 中的 \u003ccode\u003ecatch()\u003c/code\u003e 方法相似。\u003c/p\u003e\n\u003cp\u003e运行上面的代码，会出现如下输出：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eError: java.lang.NumberFormatException: For input string: \u003cspan class=\"string\"\u003e\u0026#34;ILLEGAL\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e也可以这样：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eCompletableFuture.supplyAsync(Integer::parseInt) \u003cspan class=\"comment\"\u003e// 输入: \u0026#34;ILLEGAL\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t .thenApply(r -\u0026gt; r * \u003cspan class=\"number\"\u003e2\u003c/span\u003e * Math.PI)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t .thenApply(s -\u0026gt; \u003cspan class=\"string\"\u003e\u0026#34;apply\u0026gt;\u0026gt; \u0026#34;\u003c/span\u003e + s)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t .handle((result, ex) -\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t \t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (result != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t \t\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e result;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t \t} \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t \t\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;Error handling: \u0026#34;\u003c/span\u003e + ex.getMessage();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t \t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t });\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上面代码中，你可以看到，其使用了 \u003ccode\u003ehandle()\u003c/code\u003e 方法来处理最终的结果，其中包含了异步函数中的错误处理。\u003c/p\u003e\n\u003ch2 id=\"错误处理的最佳实践\"\u003e\u003ca href=\"#错误处理的最佳实践\" class=\"headerlink\" title=\"错误处理的最佳实践\"\u003e\u003c/a\u003e错误处理的最佳实践\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e统一分类的错误字典\u003c/strong\u003e。无论你是使用错误码还是异常捕捉，都需要认真并统一地做好错误的分类。最好是在一个地方定义相关的错误。比如，HTTP 的 4XX 表示客户端有问题，5XX 则表示服务端有问题。也就是说，你要建立一个错误字典。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e同类错误的定义最好是可以扩展的\u003c/strong\u003e。这一点非常重要，而对于这一点，通过面向对象的继承或是像 Go 语言那样的接口多态可以很好地做到。这样可以方便地重用已有的代码。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e定义错误的严重程度\u003c/strong\u003e。比如，Fatal 表示重大错误，Error 表示资源或需求得不到满足，Warning 表示并不一定是个错误但还是需要引起注意，Info 表示不是错误只是一个信息，Debug 表示这是给内部开发人员用于调试程序的。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e错误日志的输出最好使用错误码，而不是错误信息\u003c/strong\u003e。打印错误日志的时候，应该使用统一的格式。但最好不要用错误信息，而应使用相应的错误码，错误码不一定是数字，也可以是一个能从错误字典里找到的一个唯一的可以让人读懂的关键字。这样，会非常有利于日志分析软件进行自动化监控，而不是要从错误信息中做语义分析。比如：HTTP 的日志中就会有 HTTP 的返回码，如：\u003ccode\u003e404\u003c/code\u003e。但我更推荐使用像\u003ccode\u003ePageNotFound\u003c/code\u003e这样的标识，这样人和机器都很容易处理。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e忽略错误最好有日志\u003c/strong\u003e。不然会给维护带来很大的麻烦。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e对于同一个地方不停的报错，最好不要都打到日志里\u003c/strong\u003e。不然这样会导致其它日志被淹没了，也会导致日志文件太大。最好的实践是，打出一个错误以及出现的次数。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e不要用错误处理逻辑来处理业务逻辑\u003c/strong\u003e。也就是说，不要使用异常捕捉这样的方式来处理业务逻辑，而是应该用条件判断。如果一个逻辑控制可以用 if - else 清楚地表达，那就不建议使用异常方式处理。异常捕捉是用来处理不期望发生的事情，而错误码则用来处理可能会发生的事。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e对于同类的错误处理，用一样的模式\u003c/strong\u003e。比如，对于\u003ccode\u003enull\u003c/code\u003e对象的错误，要么都用返回 null，加上条件检查的模式，要么都用抛 NullPointerException 的方式处理。不要混用，这样有助于代码规范。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e尽可能在错误发生的地方处理错误\u003c/strong\u003e。因为这样会让调用者变得更简单。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e向上尽可能地返回原始的错误\u003c/strong\u003e。如果一定要把错误返回到更高层去处理，那么，应该返回原始的错误，而不是重新发明一个错误。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e处理错误时，总是要清理已分配的资源\u003c/strong\u003e。这点非常关键，使用 RAII 技术，或是 try-catch-finally，或是 Go 的 defer 都可以容易地做到。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e不推荐在循环体里处理错误\u003c/strong\u003e。这里说的是 try-catch，绝大多数的情况你不需要这样做。最好把整个循环体外放在 try 语句块内，而在外面做 catch。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e不要把大量的代码都放在一个 try 语句块内\u003c/strong\u003e。一个 try 语句块内的语句应该是完成一个简单单一的事情。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e为你的错误定义提供清楚的文档以及每种错误的代码示例\u003c/strong\u003e。如果你是做 RESTful API 方面的，使用 Swagger 会帮你很容易搞定这个事。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e对于异步的方式，推荐使用 Promise 模式处理错误\u003c/strong\u003e。对于这一点，JavaScript 中有很好的实践。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e对于分布式的系统，推荐使用 APM 相关的软件\u003c/strong\u003e。尤其是使用 Zipkin 这样的服务调用跟踪的分析来关联错误。\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-08-13T15:32:37Z",
  "Author": "钝悟 ◾ Dunwu"
}