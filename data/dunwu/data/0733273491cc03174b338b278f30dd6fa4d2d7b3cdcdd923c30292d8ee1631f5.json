{
  "Source": "dunwu",
  "Title": "Redis 哨兵",
  "Link": "https://dunwu.github.io/blog/pages/615afe/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Redis-哨兵\"\u003e\u003ca href=\"#Redis-哨兵\" class=\"headerlink\" title=\"Redis 哨兵\"\u003e\u003c/a\u003eRedis 哨兵\u003c/h1\u003e\u003cblockquote\u003e\n\u003cp\u003eRedis 2.8 版本，新增了哨兵模式，以支持“自动故障转移”，它是 Redis 的 HA 方案。\u003c/p\u003e\n\u003cp\u003eRedis 哨兵模式由一个或多个 Sentinel 实例组成 Sentinel 集群，可以监控任意多个主服务器，以及这些主服务器的所有从服务器；并在被监视的主服务器进入下线状态时，自动将下线主服务器的某个从服务器升级为新的主服务器，然后由新的主服务器代替已下线的主服务器继续处理命令请求。\u003c/p\u003e\n\u003cp\u003e关键词：\u003ccode\u003e高可用\u003c/code\u003e、\u003ccode\u003e监控\u003c/code\u003e、\u003ccode\u003e选主\u003c/code\u003e、\u003ccode\u003e故障转移\u003c/code\u003e、\u003ccode\u003eRaft\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"哨兵简介\"\u003e\u003ca href=\"#哨兵简介\" class=\"headerlink\" title=\"哨兵简介\"\u003e\u003c/a\u003e哨兵简介\u003c/h2\u003e\u003cp\u003eRedis 的主从复制模式，虽然提供了一定程度的 \u003cstrong\u003e高可用性（High Availability）\u003c/strong\u003e。但是，当主节点出现故障时，只能通过手动操作将从节点晋升为主节点，这显然是比较低效的。为了解决这个问题，Redis 2.8 版本提供了哨兵模式（Sentinel）来支持“自动故障转移”。\u003c/p\u003e\n\u003cp\u003eRedis 哨兵模式由一个或多个 Sentinel 实例组成 Sentinel 集群，可以监控任意多个主服务器，以及这些主服务器的所有从服务器；并在被监视的主服务器进入下线状态时，自动将下线主服务器的某个从服务器升级为新的主服务器，然后由新的主服务器代替已下线的主服务器继续处理命令请求。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/202309190749810.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eSentinel 的主要功能如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e监控（Monitoring）\u003c/code\u003e\u003c/strong\u003e - Sentinel 不断检查主从服务器是否正常在工作。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e通知（Notification）\u003c/code\u003e\u003c/strong\u003e - Sentinel 可以通过一个 api 来通知系统管理员或者另外的应用程序，被监控的 Redis 实例有一些问题。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e自动故障转移（Automatic Failover）\u003c/code\u003e\u003c/strong\u003e - 如果一个主服务器下线，Sentinel 会开始自动故障转移：把一个从节点提升为主节点，并重新配置其他的从节点使用新的主节点，使用 Redis 服务的应用程序在连接的时候也被通知新的地址。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e配置提供者（Configuration provider）\u003c/code\u003e\u003c/strong\u003e - Sentinel 给客户端的服务发现提供来源：对于一个给定的服务，客户端连接到 Sentinels 来寻找当前主节点的地址。当故障转移发生的时候，Sentinel 将报告新的地址。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"启动哨兵\"\u003e\u003ca href=\"#启动哨兵\" class=\"headerlink\" title=\"启动哨兵\"\u003e\u003c/a\u003e启动哨兵\u003c/h2\u003e\u003cp\u003e启动一个 Sentinel 可以使用下面任意一条命令，两条命令效果完全相同。\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eredis-sentinel /path/to/sentinel.conf\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eredis-server /path/to/sentinel.conf --sentinel\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e当一个 Sentinel 启动时，它需要执行以下步骤：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e初始化服务器。\u003c/li\u003e\n\u003cli\u003e使用 Sentinel 专用代码。\u003c/li\u003e\n\u003cli\u003e初始化 Sentinel 状态。\u003c/li\u003e\n\u003cli\u003e初始化 Sentinel 的主服务器列表。\u003c/li\u003e\n\u003cli\u003e创建连向被监视的主服务器的网络连接。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eSentinel 本质上是一个运行在“特殊模式”下的 Redis 服务器\u003c/strong\u003e。Sentinel 模式下 Redis 服务器只支持 \u003ccode\u003ePING\u003c/code\u003e、\u003ccode\u003eSENTINEL\u003c/code\u003e、\u003ccode\u003eINFO\u003c/code\u003e、\u003ccode\u003eSUBSCRIBE\u003c/code\u003e、\u003ccode\u003eUNSUBSCRIBE\u003c/code\u003e、\u003ccode\u003ePSUBSCRIBE\u003c/code\u003e、\u003ccode\u003ePUNSUBSCRIBE\u003c/code\u003e 七个命令。\u003c/p\u003e\n\u003cp\u003e创建连向被监视的主服务器的网络连接，Sentinel 将成为主服务器的客户端，它可以向主服务器发送命令，并从命令回复中获取相关的信息。Sentinel 会读入用户指定的配置文件， 为每个要被监视的主服务器创建相应的实例结构， 并创建连向主服务器的命令连接和订阅连接：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e命令连接\u003c/strong\u003e - 专门用于向主服务器发送命令，并接受命令回复。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e订阅连接\u003c/strong\u003e - 专门用于订阅主服务器的 \u003ccode\u003e__sentinel__:hello\u003c/code\u003e 频道。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"监控\"\u003e\u003ca href=\"#监控\" class=\"headerlink\" title=\"监控\"\u003e\u003c/a\u003e监控\u003c/h2\u003e\u003ch3 id=\"获取服务器信息\"\u003e\u003ca href=\"#获取服务器信息\" class=\"headerlink\" title=\"获取服务器信息\"\u003e\u003c/a\u003e获取服务器信息\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/202309190750857.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e默认情况下， Sentinel 以\u003cstrong\u003e“每十秒一次”\u003c/strong\u003e的频率向被监视的主服务器和从服务器\u003cstrong\u003e发送 \u003ccode\u003eINFO\u003c/code\u003e 命令\u003c/strong\u003e，并通过分析 \u003ccode\u003eINFO\u003c/code\u003e 命令的回复来获取服务器的当前信息。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e主服务器 - 可以获取主服务器自身信息，以及其所属从服务器的地址信息。\u003c/li\u003e\n\u003cli\u003e从服务器 - 从服务器自身信息，以及其主服务器的了解状态和地址。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSentinel 通过向主服务器发送 \u003ccode\u003eINFO\u003c/code\u003e 命令来获得主服务器属下所有从服务器的地址信息， 并为这些从服务器创建相应的实例结构， 以及连向这些从服务器的“命令连接”和“订阅连接”\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e对于监视同一个主服务器和从服务器的多个 Sentinel 来说， 它们会以“每两秒一次”的频率， 通过向被监视服务器的 \u003ccode\u003e__sentinel__:hello\u003c/code\u003e 频道发送消息来向其他 Sentinel 宣告自己的存在。Sentinel 只会与主服务器和从服务器创建命令连接和订阅连接， Sentinel 与 Sentinel 之间则只创建命令连接。\u003c/p\u003e\n\u003ch3 id=\"判断下线\"\u003e\u003ca href=\"#判断下线\" class=\"headerlink\" title=\"判断下线\"\u003e\u003c/a\u003e判断下线\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/202309190801360.png\"/\u003e\u003c/p\u003e\n\u003ch4 id=\"主观下线\"\u003e\u003ca href=\"#主观下线\" class=\"headerlink\" title=\"主观下线\"\u003e\u003c/a\u003e主观下线\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e默认，每个 Sentinel 以“每秒一次”的频率，向它所知的“所有实例”发送一个 \u003ccode\u003ePING\u003c/code\u003e 命令\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e“所知”是指，与 Sentinel 创建了命令连接的实例。\u003c/li\u003e\n\u003cli\u003e“所有实例”包括了主服务器、从服务器以及其他 Sentinel 实例。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果，\u003cstrong\u003e某实例在指定的时长（ \u003ccode\u003edown-after-milliseconds\u003c/code\u003e 设置的值，单位毫秒）中，未向 Sentinel 发送有效回复， Sentinel 会将该实例判定为“主观下线”\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一个有效的 \u003ccode\u003ePING\u003c/code\u003e 回复可以是：\u003ccode\u003e+PONG\u003c/code\u003e、\u003ccode\u003e-LOADING\u003c/code\u003e 或者 \u003ccode\u003e-MASTERDOWN\u003c/code\u003e。如果服务器返回除以上三种回复之外的其他回复，又或者在 \u003cstrong\u003e指定时间\u003c/strong\u003e 内没有回复 \u003ccode\u003ePING\u003c/code\u003e 命令， 那么 Sentinel 认为服务器返回的回复无效。\u003c/li\u003e\n\u003cli\u003e“主观下线”适用于所有主节点和从节点。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"客观下线\"\u003e\u003ca href=\"#客观下线\" class=\"headerlink\" title=\"客观下线\"\u003e\u003c/a\u003e客观下线\u003c/h4\u003e\u003cp\u003e当一个\u003cstrong\u003e“主服务器”\u003c/strong\u003e被 Sentinel 标记为\u003cstrong\u003e“主观下线”\u003c/strong\u003e后，为了确认其是否真的下线，Sentinel 会向同样监听该主服务器的其他 Sentinel 发起询问。如果有\u003cstrong\u003e“足够数量”\u003c/strong\u003e的 Sentinel 在指定的时间范围内认为主服务器已下线，那么这个\u003cstrong\u003e“主服务器”\u003c/strong\u003e被标记为\u003cstrong\u003e“客观下线”\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSentinel 节点通过 \u003ccode\u003esentinel is-master-down-by-addr\u003c/code\u003e 命令，向其它 Sentinel 节点询问对某主服务器的 \u003cstrong\u003e状态判断\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e“足够数量”是指 Sentinel 配置中 \u003ccode\u003equorum\u003c/code\u003e 参数所设的值。\u003c/li\u003e\n\u003cli\u003e客观下线只适用于主节点。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e注：默认情况下， Sentinel 以\u003cstrong\u003e“每十秒一次”\u003c/strong\u003e的频率向被监视的主服务器和从服务器\u003cstrong\u003e发送 \u003ccode\u003eINFO\u003c/code\u003e 命令\u003c/strong\u003e。当一个主服务器被 Sentinel 标记为\u003cstrong\u003e“客观下线”\u003c/strong\u003e时，Sentinel 向该主服务器的所有从服务器发送 \u003ccode\u003eINFO\u003c/code\u003e 命令的频率，会从\u003cstrong\u003e“每十秒一次”\u003c/strong\u003e改为\u003cstrong\u003e“每秒一次”\u003c/strong\u003e。\u003c/p\u003e\n\u003ch2 id=\"选主\"\u003e\u003ca href=\"#选主\" class=\"headerlink\" title=\"选主\"\u003e\u003c/a\u003e选主\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003eRedis Sentinel 采用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://ramcloud.atlassian.net/wiki/download/attachments/6586375/raft.pdf\"\u003eRaft 协议\u003c/a\u003e 实现了其 Sentinel 选主流程。Raft 是一种共识性算法，想了解其原理，可以参考 \u003ca href=\"https://dunwu.github.io/waterdrop/pages/4907dc/\"\u003e深入剖析共识性算法 Raft\u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003e当一个“主服务器”被判断为“客观下线”时，监视该主服务器的各个 Sentinel 会进行“协商”，选举出一个领头的 Sentinel（Leader），并由领头 Sentinel 对下线主服务器执行“故障转移”操作\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e所有在线 Sentinel 都有资格被选为 Leader。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e当一个 Sentinel 认定某主服务器是“客观下线”后，该 Sentinel 会先看看自己是否投过票。\u003cul\u003e\n\u003cli\u003e如果已投票给其他 Sentinel 了，在 2 倍故障转移的超时时间内，都不能竞选 \u003cstrong\u003eLeader\u003c/strong\u003e——相当于它是一个 \u003cstrong\u003eFollower\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e如果未投票，那么该 Sentinel 可以竞选 \u003cstrong\u003eLeader\u003c/strong\u003e，转为 \u003cstrong\u003eCandidate\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e如 Raft 协议所描述的，\u003cstrong\u003eCandidate\u003c/strong\u003e 需要完成几件事情：\u003col\u003e\n\u003cli\u003e更新故障转移状态为 start\u003c/li\u003e\n\u003cli\u003e将当前纪元（\u003ccode\u003eepoch\u003c/code\u003e） 加 1，表明开始新一轮的选举——这里的 \u003ccode\u003eepoch\u003c/code\u003e 相当于 Raft 协议中的 \u003ccode\u003eterm\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e将自身的超时时间设为当前时间加上一个随机值，随机值为 1s 内的随机毫秒数。\u003c/li\u003e\n\u003cli\u003e向其他节点发送 \u003ccode\u003eis-master-down-by-addr\u003c/code\u003e 命令，请求其他节点投票支持自己，命令会携带自己的 \u003ccode\u003eepoch\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003eCandidate 会投票给自己。在 Sentinel 中，投票的方式是把自己 \u003ccode\u003emaster\u003c/code\u003e 结构体里的 \u003ccode\u003eleader\u003c/code\u003e 和 \u003ccode\u003eleader_epoch\u003c/code\u003e 改成投给的 Sentinel 和它的 \u003ccode\u003eepoch\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e其他 Sentinel 收到 \u003cstrong\u003eCandidate\u003c/strong\u003e 的 \u003ccode\u003eis-master-down-by-addr\u003c/code\u003e 命令后，如果 Sentinel 当前 \u003ccode\u003eepoch\u003c/code\u003e 和 \u003cstrong\u003eCandidate\u003c/strong\u003e 传给他的 \u003ccode\u003eepoch\u003c/code\u003e 一样，说明他已经把自己 \u003ccode\u003emaster\u003c/code\u003e 结构体里的 \u003ccode\u003eleader\u003c/code\u003e 和 \u003ccode\u003eleader_epoch\u003c/code\u003e 改成其他 \u003cstrong\u003eCandidate\u003c/strong\u003e，相当于把票投给了其他 \u003cstrong\u003eCandidate\u003c/strong\u003e。投票给其他 Sentinel 后，在当前 \u003ccode\u003eepoch\u003c/code\u003e 内，该 Sentinel 就只能成为 \u003cstrong\u003eFollower\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCandidate\u003c/strong\u003e 会不断的统计自己的票数，如果满足“当选投票条件”，则该 \u003cstrong\u003eCandidate\u003c/strong\u003e 当选 \u003cstrong\u003eLeader\u003c/strong\u003e：\u003col\u003e\n\u003cli\u003e票数超过一半（监控主服务器的 Sentinel 的节点数的一半 + 1）\u003c/li\u003e\n\u003cli\u003e票数超过 Sentinel 配置的 \u003ccode\u003equorum\u003c/code\u003e 参数——注：Raft 协议中没有这个限制，这是 Redis Sentinel 所独有的\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e如果在一个选举周期内（\u003ccode\u003eepoch\u003c/code\u003e），\u003cstrong\u003eCandidate\u003c/strong\u003e 没有满足“当选投票条件”（第 4 点描述的），则竞选失败。\u003c/li\u003e\n\u003cli\u003e如果在一个选举周期内（\u003ccode\u003eepoch\u003c/code\u003e），没有一个 \u003cstrong\u003eCandidate\u003c/strong\u003e 满足“当选投票条件”，说明所有 \u003cstrong\u003eCandidate\u003c/strong\u003e 都竞选失败，本轮选举作废。在等待超过 2 倍故障转移的超时时间后，开始新一轮的选举。\u003c/li\u003e\n\u003cli\u003e与 Raft 协议不同的是，Leader 并不会把自己成为 \u003cstrong\u003eLeader\u003c/strong\u003e 的消息发给其他 Sentinel。当 \u003cstrong\u003eLeader\u003c/strong\u003e 完成故障转移后，其他 Sentinel 检测到新的主服务器正常工作后，就会去掉“客观下线”的标识，从而不需要再发起选举。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"故障转移\"\u003e\u003ca href=\"#故障转移\" class=\"headerlink\" title=\"故障转移\"\u003e\u003c/a\u003e故障转移\u003c/h2\u003e\u003cp\u003e在选举产生出 Sentinel Leader 后，Sentinel Leader 将对已下线的主服务器执行故障转移操作。操作含以下三个步骤：\u003c/p\u003e\n\u003cp\u003e（1）\u003cstrong\u003e选出新的主服务器\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e故障转移第一步，是 Sentinel Leader 在已下线主服务属下的所有从服务器中，挑选一个状态良好、数据完整的从服务器。然后，向这个从服务器发送 \u003ccode\u003eSLAVEOF no one\u003c/code\u003e 命令，将其转换为主服务器。\u003c/p\u003e\n\u003cp\u003eSentinel Leader 如何选出新的主服务器：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e删除列表中所有处于下线或断线状态的从服务器。\u003c/li\u003e\n\u003cli\u003e删除列表中所有最近五秒没有回复过 Sentinel Leader 的 \u003ccode\u003eINFO\u003c/code\u003e 命令的从服务器。\u003c/li\u003e\n\u003cli\u003e删除所有与已下线主服务器连接断开超过 \u003ccode\u003edown-after-milliseconds * 10\u003c/code\u003e 毫秒的从服务器（\u003ccode\u003edown-after-milliseconds\u003c/code\u003e 指定了判断主服务器下线所需的时间）。\u003c/li\u003e\n\u003cli\u003e之后， Sentinel Leader 先选出优先级最高的从服务器；如果优先级一样高，再选择复制偏移量最大的从服务器；如果结果还不唯一，则选出运行 ID 最小的从服务器。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e（2）\u003cstrong\u003e修改从服务器的复制目标\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e选出新的主服务器后，Sentinel Leader 会向所有从服务器发送 \u003ccode\u003eSLAVEOF\u003c/code\u003e 命令，让它们去复制新的主服务器。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/202309190802685.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e（3）\u003cstrong\u003e将旧的主服务器变为从服务器\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eSentinel Leader 将旧的主服务器标记为从服务器。当旧的主服务器重新上线，Sentinel 会向它发送 \u003ccode\u003eSLAVEOF\u003c/code\u003e 命令，让其成为从服务器。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/202309190803617.png\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://item.jd.com/11486101.html\"\u003e《Redis 设计与实现》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.web-lovers.com/redis-source-sentinel.html\"\u003e渐进式解析 Redis 源码 - 哨兵 sentinel\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://juejin.im/post/5b7d226a6fb9a01a1e01ff64\"\u003e深入剖析 Redis 系列(二) - Redis 哨兵模式与高可用集群\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-06-24T02:45:38Z",
  "Author": "钝悟 ◾ Dunwu"
}