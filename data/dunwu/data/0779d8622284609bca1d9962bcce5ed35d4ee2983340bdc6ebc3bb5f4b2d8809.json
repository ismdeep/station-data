{
  "Source": "dunwu",
  "Title": "分布式一致性",
  "Link": "https://dunwu.github.io/blog/pages/dac0e2/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"分布式一致性\"\u003e\u003ca href=\"#分布式一致性\" class=\"headerlink\" title=\"分布式一致性\"\u003e\u003c/a\u003e分布式一致性\u003c/h1\u003e\u003ch2 id=\"ACID-理论\"\u003e\u003ca href=\"#ACID-理论\" class=\"headerlink\" title=\"ACID 理论\"\u003e\u003c/a\u003eACID 理论\u003c/h2\u003e\u003cp\u003eACID 是数据库事务正确执行的四个基本要素。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e原子性（Atomicity）\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e事务被视为不可分割的最小单元，事务中的所有操作要么全部提交成功，要么全部失败回滚。\u003c/li\u003e\n\u003cli\u003e回滚可以用日志来实现，日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e一致性（Consistency）\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e数据库在事务执行前后都保持一致性状态。\u003c/li\u003e\n\u003cli\u003e在一致性状态下，所有事务对一个数据的读取结果都是相同的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e隔离性（Isolation）\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e一个事务所做的修改在最终提交以前，对其它事务是不可见的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e持久性（Durability）\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。\u003c/li\u003e\n\u003cli\u003e可以通过数据库备份和恢复来实现，在系统发生奔溃时，使用备份的数据库进行数据恢复。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e一个支持事务（Transaction）中的数据库系统，必需要具有这四种特性，否则在事务过程（Transaction processing）当中无法保证数据的正确性，交易过程极可能达不到交易。\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e只有满足一致性，事务的执行结果才是正确的。\u003c/li\u003e\n\u003cli\u003e在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。\u003c/li\u003e\n\u003cli\u003e在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。\u003c/li\u003e\n\u003cli\u003e事务满足持久化是为了能应对系统崩溃的情况。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"本地事务和分布式事务\"\u003e\u003ca href=\"#本地事务和分布式事务\" class=\"headerlink\" title=\"本地事务和分布式事务\"\u003e\u003c/a\u003e本地事务和分布式事务\u003c/h2\u003e\u003cp\u003e学习分布式之前，先了解一下本地事务的概念。\u003c/p\u003e\n\u003cp\u003e事务简单来说：\u003cstrong\u003e一个会话中所进行所有的操作，要么同时成功，要么同时失败\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e事务指的是满足 ACID 特性的一组操作，可以通过 \u003ccode\u003eCommit\u003c/code\u003e 提交一个事务，也可以使用 \u003ccode\u003eRollback\u003c/code\u003e 进行回滚。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/202310092226555.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e分布式事务指的是事务操作跨越多个节点，并且要求满足事务的 ACID 特性\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e分布式事务相比于单机事务，实现复杂度要高很多，主要是因为其存在以下\u003cstrong\u003e难点\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e事务的原子性\u003c/strong\u003e：事务操作跨不同节点，当多个节点某一节点操作失败时，需要保证多节点操作的\u003cstrong\u003e都做或都不做（All or Nothing）\u003c/strong\u003e的原子性。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e事务的一致性\u003c/strong\u003e：当发生网络传输故障或者节点故障，节点间数据复制通道中断，在进行事务操作时需要保证数据一致性，保证事务的任何操作都不会使得数据违反数据库定义的约束、触发器等规则。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e事务的隔离性\u003c/strong\u003e：事务隔离性的本质就是如何正确多个并发事务的处理的读写冲突和写写冲突，因为在分布式事务控制中，可能会出现提交不同步的现象，这个时候就有可能出现“部分已经提交”的事务。此时并发应用访问数据如果没有加以控制，有可能出现“脏读”问题。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在分布式领域，要实现强一致性，代价非常高昂。因此，有人基于 CAP 理论以及 BASE 理论，有人就提出了\u003cstrong\u003e柔性事务\u003c/strong\u003e的概念。柔性事务是指：在不影响系统整体可用性的情况下(Basically Available 基本可用)，允许系统存在数据不一致的中间状态(Soft State 软状态)，在经过数据同步的延时之后，最终数据能够达到一致。\u003cstrong\u003e并不是完全放弃了 ACID，而是通过放宽一致性要求，借助本地事务来实现最终分布式事务一致性的同时也保证系统的吞吐\u003c/strong\u003e。\u003c/p\u003e\n\u003ch2 id=\"CAP-理论\"\u003e\u003ca href=\"#CAP-理论\" class=\"headerlink\" title=\"CAP 理论\"\u003e\u003c/a\u003eCAP 理论\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003eCAP 定理是加州大学计算机科学家埃里克·布鲁尔提出来的猜想，后来被证明成为分布式计算领域公认的定理。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eCAP 定理\u003c/strong\u003e，指的是：\u003cstrong\u003e在一个分布式系统中， 最多只能同时满足其中两项\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/202310200746619.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eCAP 就是取 Consistency、Availability、Partition Tolerance 的首字母而命名。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20211102180526.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一致性（\u003cstrong\u003eC\u003c/strong\u003eonsistency）：在任何给定时间，网络中的所有节点都具有完全相同（最近）的值。\u003c/li\u003e\n\u003cli\u003e可用性（\u003cstrong\u003eA\u003c/strong\u003evailability）：对网络的每个请求都会收到响应，但不能保证返回的数据是最新的。\u003c/li\u003e\n\u003cli\u003e分区容错性（\u003cstrong\u003eP\u003c/strong\u003eartition Tolerance）：即使任意数量的节点出现故障，网络仍会继续运行。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"一致性\"\u003e\u003ca href=\"#一致性\" class=\"headerlink\" title=\"一致性\"\u003e\u003c/a\u003e一致性\u003c/h3\u003e\u003cp\u003e一致性（Consistency）指的是\u003cstrong\u003e多个数据副本是否能保持一致\u003c/strong\u003e的特性。\u003c/p\u003e\n\u003cp\u003e在一致性的条件下，分布式系统在执行写操作成功后，如果所有用户都能够读取到最新的值，该系统就被认为具有强一致性。\u003c/p\u003e\n\u003cp\u003e数据一致性又可以分为以下几点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e强一致性\u003c/strong\u003e - 数据更新操作结果和操作响应总是一致的，即操作响应通知更新失败，那么数据一定没有被更新，而不是处于不确定状态。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e最终一致性\u003c/strong\u003e - 即物理存储的数据可能是不一致的，终端用户访问到的数据可能也是不一致的，但系统经过一段时间的自我修复和修正，数据最终会达到一致。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e举例来说，某条记录是 v0，用户向 G1 发起一个写操作，将其改为 v1。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://www.wangbase.com/blogimg/asset/201807/bg2018071602.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e接下来，用户的读操作就会得到 v1。这就叫一致性。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://www.wangbase.com/blogimg/asset/201807/bg2018071603.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e问题是，用户有可能向 G2 发起读操作，由于 G2 的值没有发生变化，因此返回的是 v0。G1 和 G2 读操作的结果不一致，这就不满足一致性了。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://www.wangbase.com/blogimg/asset/201807/bg2018071604.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e为了让 G2 也能变为 v1，就要在 G1 写操作的时候，让 G1 向 G2 发送一条消息，要求 G2 也改成 v1。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://www.wangbase.com/blogimg/asset/201807/bg2018071605.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e这样的话，用户向 G2 发起读操作，也能得到 v1。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://www.wangbase.com/blogimg/asset/201807/bg2018071606.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"可用性\"\u003e\u003ca href=\"#可用性\" class=\"headerlink\" title=\"可用性\"\u003e\u003c/a\u003e可用性\u003c/h3\u003e\u003cp\u003e可用性指\u003cstrong\u003e分布式系统在面对各种异常时可以提供正常服务的能力\u003c/strong\u003e，可以用系统可用时间占总时间的比值来衡量，4 个 9 的可用性表示系统 \u003ccode\u003e99.99%\u003c/code\u003e 的时间是可用的。\u003c/p\u003e\n\u003cp\u003e在可用性条件下，系统提供的服务一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。\u003c/p\u003e\n\u003ch3 id=\"分区容错性\"\u003e\u003ca href=\"#分区容错性\" class=\"headerlink\" title=\"分区容错性\"\u003e\u003c/a\u003e分区容错性\u003c/h3\u003e\u003cp\u003e分区容错性（Partition Tolerance）指 \u003cstrong\u003e分布式系统在遇到任何网络分区故障的时候，仍然需要能对外提供一致性和可用性的服务，除非是整个网络环境都发生了故障\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e在一个分布式系统里面，节点组成的网络本来应该是连通的。然而可能因为一些故障，使得有些节点之间不连通了，整个网络就分成了几块区域。数据就散布在了这些不连通的区域中，这就叫分区。\u003c/p\u003e\n\u003cp\u003e假设，某个数据项只在一个节点中保存，那么分区出现后，和这个节点不连通的部分就访问不到这个数据了。这时分区就是无法容忍的。\u003c/p\u003e\n\u003cp\u003e提高分区容错性的办法就是一个数据项复制到多个节点上，那么出现分区之后，这一数据项就可能分布到各个区里。容错性就提高了。\u003c/p\u003e\n\u003cp\u003e然而，要把数据复制到多个节点，就会带来一致性的问题，就是多个节点上面的数据可能是不一致的。要保证一致，每次写操作就都要等待全部节点写成功，而这等待又会带来可用性的问题。\u003c/p\u003e\n\u003cp\u003e总的来说就是，数据存在的节点越多，分区容错性越高，但要复制更新的数据就越多，一致性就越难保证。为了保证一致性，更新所有节点数据所需要的时间就越长，可用性就会降低。\u003c/p\u003e\n\u003cp\u003e大多数分布式系统都分布在多个子网络，每个子网络就叫做一个区（Partition）。分区容错的意思是，区间通信可能失败。比如，一台服务器放在中国，另一台服务器放在美国，这就是两个区，它们之间可能无法通信。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://www.wangbase.com/blogimg/asset/201807/bg2018071601.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e上图中，G1 和 G2 是两台跨区的服务器。G1 向 G2 发送一条消息，G2 可能无法收到。系统设计的时候，必须考虑到这种情况。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e一般来说，分区容错无法避免\u003c/strong\u003e，因此可以认为 CAP 的 P 总是成立。CAP 定理告诉我们，剩下的 C 和 A 无法同时做到。\u003c/p\u003e\n\u003ch3 id=\"AP-or-CP\"\u003e\u003ca href=\"#AP-or-CP\" class=\"headerlink\" title=\"AP or CP\"\u003e\u003c/a\u003eAP or CP\u003c/h3\u003e\u003cp\u003e在分布式系统中，分区容错性必不可少，因为需要总是假设网络是不可靠的。因此，\u003cstrong\u003eCAP 理论实际在是要在可用性和一致性之间做权衡\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e由于分布式数据存储（如区块链）的性质，分区容错性是一个既定的事实；网络中总会有失败/无法访问的节点（尤其是因为互联网的不稳定特性）。 CAP 定理指出，当存在 P（分区）时，必须在 C（一致性）或 A（可用性）之间进行选择。\u003c/p\u003e\n\u003cp\u003e（1）AP 模式\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eAP\u003c/strong\u003e \u003cstrong\u003e模式\u003c/strong\u003e：对网络的每个请求都会收到响应，即使网络由于网络分区故障而无法保证它是最新的。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e选择 \u003cstrong\u003eAP\u003c/strong\u003e \u003cstrong\u003e模式\u003c/strong\u003e，实现了服务的高可用。用户访问系统的时候，都能得到响应数据，不会出现响应错误；但是，当出现分区故障时，相同的读操作，访问不同的节点，得到响应数据可能不一样。\u003c/p\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20211102191819.png\" style=\"width: 500px\"/\u003e\n\n\u003cp\u003e（2）CP 模式\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eCP\u003c/strong\u003e \u003cstrong\u003e模式\u003c/strong\u003e：如果由于网络分区（故障节点）而无法保证特定信息是最新的，则系统将返回错误或超时。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e选择 \u003cstrong\u003eCP\u003c/strong\u003e \u003cstrong\u003e模式\u003c/strong\u003e，这样能够提供一部分的可用性。采用 CP 模型的分布式系统，一旦因为消息丢失、延迟过高发生了网络分区，就影响用户的体验和业务的可用性。因为为了防止数据不一致，集群将拒绝新数据的写入。\u003c/p\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20211102191820.png\" style=\"width: 500px\"/\u003e\n\n\u003ch2 id=\"BASE-理论\"\u003e\u003ca href=\"#BASE-理论\" class=\"headerlink\" title=\"BASE 理论\"\u003e\u003c/a\u003eBASE 理论\u003c/h2\u003e\u003ch3 id=\"什么是-BASE-定理\"\u003e\u003ca href=\"#什么是-BASE-定理\" class=\"headerlink\" title=\"什么是 BASE 定理\"\u003e\u003c/a\u003e什么是 BASE 定理\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eBASE 定理是对 CAP 中一致性和可用性权衡的结果\u003c/strong\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eBASE 是 \u003cstrong\u003e\u003ccode\u003e基本可用（Basically Available）\u003c/code\u003e\u003cstrong\u003e、\u003c/strong\u003e\u003ccode\u003e软状态（Soft State）\u003c/code\u003e\u003c/strong\u003e 和 \u003cstrong\u003e\u003ccode\u003e最终一致性（Eventually Consistent）\u003c/code\u003e\u003c/strong\u003e 三个短语的缩写。\u003c/p\u003e\n\u003cp\u003eBASE 理论的核心思想是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e基本可用（Basically Available）\u003c/strong\u003e分布式系统在出现故障的时候，\u003cstrong\u003e保证核心可用，允许损失部分可用性\u003c/strong\u003e。例如，电商在做促销时，为了保证购物系统的稳定性，部分消费者可能会被引导到一个降级的页面。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e软状态（Soft State）\u003c/strong\u003e指允许系统中的数据存在中间状态，并认为该中间状态不会影响系统整体可用性，即\u003cstrong\u003e允许系统不同节点的数据副本之间进行同步的过程存在延时\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e最终一致性（Eventually Consistent）\u003c/strong\u003e强调的是\u003cstrong\u003e系统中所有的数据副本，在经过一段时间的同步后，最终能达到一致的状态\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/architecture/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA-BASE.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"BASE-vs-ACID\"\u003e\u003ca href=\"#BASE-vs-ACID\" class=\"headerlink\" title=\"BASE vs. ACID\"\u003e\u003c/a\u003eBASE vs. ACID\u003c/h3\u003e\u003cp\u003eBASE 的理论的\u003cstrong\u003e核心思想\u003c/strong\u003e是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。\u003c/p\u003e\n\u003cp\u003eACID 要求强一致性，通常运用在传统的数据库系统上。而 BASE 要求最终一致性，通过\u003cstrong\u003e牺牲强一致性来达到可用性\u003c/strong\u003e，通常运用在大型分布式系统中。\u003c/p\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20211102192406.png\" style=\"width: 640px\"/\u003e\n\n\u003cp\u003e在实际的分布式场景中，不同业务单元和组件对一致性的要求是不同的，因此 ACID 和 BASE 往往会结合在一起使用。\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://cryptographics.info/cryptographics/blockchain/cap-theorem/\"\u003eCAP Theorem\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.semanticscholar.org/paper/CAP-twelve-years-later%3A-How-the-%22rules%22-have-Brewer/c9c73f5a1668b8bf12aae2efb6ac5a5a2c34002a\"\u003eCAP twelve years later: How the “rules” have changed\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.ruanyifeng.com/blog/2018/07/cap.html\"\u003eCAP 定理的含义\u003c/a\u003e - by 阮一峰\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://juejin.im/post/5d720e86f265da03cc08de74\"\u003e神一样的 CAP 理论被应用在何方\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://queue.acm.org/detail.cfm?id=1394128\"\u003eBASE: An Acid Alternative\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-11-08T00:15:33Z",
  "Author": "钝悟 ◾ Dunwu"
}