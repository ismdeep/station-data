{
  "Source": "dunwu",
  "Title": "Spring 依赖注入",
  "Link": "https://dunwu.github.io/blog/pages/f61a1c/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Spring-依赖注入\"\u003e\u003ca href=\"#Spring-依赖注入\" class=\"headerlink\" title=\"Spring 依赖注入\"\u003e\u003c/a\u003eSpring 依赖注入\u003c/h1\u003e\u003cp\u003eDI，是 Dependency Injection 的缩写，即依赖注入。依赖注入是 IoC 的最常见形式。依赖注入是手动或自动绑定的方式，无需依赖特定的容器或 API。\u003c/p\u003e\n\u003cp\u003e依赖注入 (Dependency Injection，简称 DI) 是一个过程，其中对象仅通过构造函数参数、工厂方法的参数或对象实例在构造或从工厂方法返回。然后容器在创建 bean 时注入这些依赖项。这个过程基本上是 bean 本身的逆过程（因此得名，控制反转），它通过使用类的直接构造或服务定位器模式自行控制其依赖项的实例化或位置。\u003c/p\u003e\n\u003cp\u003e使用 DI，代码更干净，当对象具有依赖关系时，解耦更有效。对象不查找其依赖项，也不知道依赖项的位置或类别。结果，您的类变得更容易测试，特别是当依赖关系在接口或抽象基类上时，它们允许在单元测试中使用存根或模拟实现。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e容器全权负责组件的装配，它会把符合依赖关系的对象通过 JavaBean 属性或者构造函数传递给需要的对象\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eDI 是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。\u003c/p\u003e\n\u003cp\u003e理解 DI 的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e谁依赖于谁：\u003c/strong\u003e当然是应用程序依赖于 IoC 容器；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e为什么需要依赖：\u003c/strong\u003e应用程序需要 IoC 容器来提供对象需要的外部资源；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e谁注入谁：\u003c/strong\u003e很明显是 IoC 容器注入应用程序某个对象，应用程序依赖的对象；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e注入了什么\u003c/strong\u003e：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"IoC-依赖注入-API\"\u003e\u003ca href=\"#IoC-依赖注入-API\" class=\"headerlink\" title=\"IoC 依赖注入 API\"\u003e\u003c/a\u003eIoC 依赖注入 API\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e根据 Bean 名称注入\u003c/li\u003e\n\u003cli\u003e根据 Bean 类型注入\u003c/li\u003e\n\u003cli\u003e注入容器内建 Bean 对象\u003c/li\u003e\n\u003cli\u003e注入非 Bean 对象\u003c/li\u003e\n\u003cli\u003e注入类型\u003cul\u003e\n\u003cli\u003e实时注入\u003c/li\u003e\n\u003cli\u003e延迟注入\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"依赖注入模式\"\u003e\u003ca href=\"#依赖注入模式\" class=\"headerlink\" title=\"依赖注入模式\"\u003e\u003c/a\u003e依赖注入模式\u003c/h2\u003e\u003cp\u003e依赖注入模式可以分为手动注入模式和自动注入模式。\u003c/p\u003e\n\u003ch3 id=\"手动注入模式\"\u003e\u003ca href=\"#手动注入模式\" class=\"headerlink\" title=\"手动注入模式\"\u003e\u003c/a\u003e手动注入模式\u003c/h3\u003e\u003cp\u003e手动注入模式：配置或者编程的方式，提前安排注入规则\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eXML 资源配置元信息\u003c/li\u003e\n\u003cli\u003eJava 注解配置元信息\u003c/li\u003e\n\u003cli\u003eAPI 配置元信息\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"自动注入模式\"\u003e\u003ca href=\"#自动注入模式\" class=\"headerlink\" title=\"自动注入模式\"\u003e\u003c/a\u003e自动注入模式\u003c/h3\u003e\u003cp\u003e自动注入模式即自动装配。自动装配（Autowiring）是指 Spring 容器可以自动装配 Bean 之间的关系。Spring 可以通过检查 \u003ccode\u003eApplicationContext\u003c/code\u003e 的内容，自动解析合作者（其他 Bean）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e自动装配可以显著减少属性或构造函数参数的配置。\u003c/li\u003e\n\u003cli\u003e随着对象的发展，自动装配可以更新配置。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注：由于自动装配存在一些限制和不足，官方不推荐使用。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"自动装配策略\"\u003e\u003ca href=\"#自动装配策略\" class=\"headerlink\" title=\"自动装配策略\"\u003e\u003c/a\u003e自动装配策略\u003c/h4\u003e\u003cp\u003e当使用基于 XML 的配置元数据时，可以使用 \u003ccode\u003e\u0026lt;bean/\u0026gt;\u003c/code\u003e 元素的 \u003ccode\u003eautowire\u003c/code\u003e 属性为 Bean 指定自动装配模式。自动装配模式有以下类型：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e模式\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eno\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e默认值，未激活 Autowiring，需要手动指定依赖注入对象。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ebyName\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e根据被注入属性的名称作为 Bean 名称进行依赖查找，并将对象设置到该属性。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ebyType\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e根据被注入属性的类型作为依赖类型进行查找，并将对象设置到该属性。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003econstructor\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e特殊 byType 类型，用于构造器参数。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e\u003ccode\u003eorg.springframework.beans.factory.config.AutowireCapableBeanFactory\u003c/code\u003e 是 \u003ccode\u003eBeanFactory\u003c/code\u003e 的子接口，它是 Spring 中用于实现自动装配的容器。\u003c/p\u003e\n\u003ch4 id=\"Autowired-注入过程\"\u003e\u003ca href=\"#Autowired-注入过程\" class=\"headerlink\" title=\"@Autowired 注入过程\"\u003e\u003c/a\u003e@Autowired 注入过程\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e元信息解析\u003c/li\u003e\n\u003cli\u003e依赖查找\u003c/li\u003e\n\u003cli\u003e依赖注入（字段、方法）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"自动装配的限制和不足\"\u003e\u003ca href=\"#自动装配的限制和不足\" class=\"headerlink\" title=\"自动装配的限制和不足\"\u003e\u003c/a\u003e自动装配的限制和不足\u003c/h4\u003e\u003cp\u003e自动装配有以下限制和不足：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e属性和构造函数参数设置中的显式依赖项会覆盖自动装配。您不能自动装配简单属性，例如基础数据类型、字符串和类（以及此类简单属性的数组）。\u003c/li\u003e\n\u003cli\u003e自动装配不如显式装配精准。Spring 会尽量避免猜测可能存在歧义的结果。\u003c/li\u003e\n\u003cli\u003eSpring 容器生成文档的工具可能无法解析自动装配信息。\u003c/li\u003e\n\u003cli\u003e如果同一类型存在多个 Bean 时，自动装配时会存在歧义。容器内的多个 Bean 定义可能与要自动装配的 Setter 方法或构造函数参数指定的类型匹配。对于数组、集合或 Map 实例，这不一定是问题。但是，对于期望单值的依赖项，如果没有唯一的 Bean 定义可用，则会引发异常。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e自动装配的限制和不足，详情可以参考官方文档：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.spring.io/spring/docs/5.2.2.RELEASE/spring-frameworkreference/core.html#beans-autowired-exceptions\"\u003eLimitations and Disadvantages of Autowiring 小节\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"依赖注入方式\"\u003e\u003ca href=\"#依赖注入方式\" class=\"headerlink\" title=\"依赖注入方式\"\u003e\u003c/a\u003e依赖注入方式\u003c/h2\u003e\u003cp\u003e依赖注入有如下方式：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e依赖注入方式\u003c/th\u003e\n\u003cth\u003e配置元数据举例\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003eSetter 方法注入\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;proeprty name=\u0026#34;user\u0026#34; ref=\u0026#34;userBean\u0026#34;/\u0026gt;\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e构造器注入\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;constructor-arg name=\u0026#34;user\u0026#34; ref=\u0026#34;userBean\u0026#34; /\u0026gt;\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e字段注入\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e@Autowired User user;\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e方法注入\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e@Autowired public void user(User user) { ... }\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e接口回调注入\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eclass MyBean implements BeanFactoryAware { ... }\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"构造器注入\"\u003e\u003ca href=\"#构造器注入\" class=\"headerlink\" title=\"构造器注入\"\u003e\u003c/a\u003e构造器注入\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e手动模式\u003cul\u003e\n\u003cli\u003exml 配置元信息\u003c/li\u003e\n\u003cli\u003e注解配置元信息\u003c/li\u003e\n\u003cli\u003eJava 配置元信息\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e自动模式\u003cul\u003e\n\u003cli\u003econstructor\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e构造器注入是通过容器调用具有多个参数的构造函数来完成的，每个参数代表一个依赖项。调用带有特定参数的静态工厂方法来构造 bean 几乎是等价的，并且本次讨论对构造函数和静态工厂方法的参数进行了类似的处理。\u003c/p\u003e\n\u003cp\u003e下面是一个构造器注入示例：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSimpleMovieLister\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// the SimpleMovieLister has a dependency on a MovieFinder\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e MovieFinder movieFinder;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// a constructor so that the Spring container can inject a MovieFinder\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eSimpleMovieLister\u003c/span\u003e\u003cspan class=\"params\"\u003e(MovieFinder movieFinder)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.movieFinder = movieFinder;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// business logic that actually uses the injected MovieFinder is omitted...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e构造函数参数解析匹配通过使用参数的类型进行。如果 bean 定义的构造函数参数中不存在潜在的歧义，则在 bean 定义中定义构造函数参数的顺序是在实例化 bean 时将这些参数提供给适当构造函数的顺序。\u003c/p\u003e\n\u003cfigure class=\"highlight aspectj\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epackage\u003c/span\u003e x.y;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eThingOne\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title\"\u003eThingOne\u003c/span\u003e\u003cspan class=\"params\"\u003e(ThingTwo thingTwo, ThingThree thingThree)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e假设 ThingTwo 和 ThingThree 类没有继承关系，则不存在潜在的歧义。因此，以下配置工作正常，您无需在 \u003ccode\u003e\u0026lt;constructor-arg/\u0026gt;\u003c/code\u003e 元素中显式指定构造函数参数索引或类型。\u003c/p\u003e\n\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003ebeans\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003ebean\u003c/span\u003e \u003cspan class=\"attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;beanOne\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;x.y.ThingOne\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003econstructor-arg\u003c/span\u003e \u003cspan class=\"attr\"\u003eref\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;beanTwo\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003econstructor-arg\u003c/span\u003e \u003cspan class=\"attr\"\u003eref\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;beanThree\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003ebean\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003ebean\u003c/span\u003e \u003cspan class=\"attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;beanTwo\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;x.y.ThingTwo\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003ebean\u003c/span\u003e \u003cspan class=\"attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;beanThree\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;x.y.ThingThree\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003ebeans\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e当引用另一个 bean 时，类型是已知的，并且可以发生匹配（就像前面的示例一样）。当使用简单类型时，例如 \u003ccode\u003e\u0026lt;value\u0026gt;true\u0026lt;/value\u0026gt;\u003c/code\u003e ，Spring 无法确定 value 的类型，因此无法在没有帮助的情况下按类型匹配。考虑以下类：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epackage\u003c/span\u003e examples;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eExampleBean\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// Number of years to calculate the Ultimate Answer\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e years;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// The Answer to Life, the Universe, and Everything\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e String ultimateAnswer;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eExampleBean\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e years, String ultimateAnswer)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.years = years;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.ultimateAnswer = ultimateAnswer;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e构造函数参数类型匹配\u003c/p\u003e\n\u003cp\u003e在上述场景中，如果您使用 type 属性显式指定构造函数参数的类型，则容器可以使用简单类型的类型匹配，如以下示例所示：\u003c/p\u003e\n\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003ebean\u003c/span\u003e \u003cspan class=\"attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;exampleBean\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;examples.ExampleBean\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003econstructor-arg\u003c/span\u003e \u003cspan class=\"attr\"\u003etype\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;int\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003evalue\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;7500000\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003econstructor-arg\u003c/span\u003e \u003cspan class=\"attr\"\u003etype\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;java.lang.String\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003evalue\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;42\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003ebean\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e构造函数参数索引匹配\u003c/p\u003e\n\u003cp\u003e可以使用 \u003ccode\u003eindex\u003c/code\u003e 属性显式指定构造函数参数的索引，如以下示例所示\u003c/p\u003e\n\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003ebean\u003c/span\u003e \u003cspan class=\"attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;exampleBean\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;examples.ExampleBean\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003econstructor-arg\u003c/span\u003e \u003cspan class=\"attr\"\u003eindex\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003evalue\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;7500000\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003econstructor-arg\u003c/span\u003e \u003cspan class=\"attr\"\u003eindex\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003evalue\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;42\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003ebean\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e构造函数参数名称匹配\u003c/p\u003e\n\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003ebean\u003c/span\u003e \u003cspan class=\"attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;exampleBean\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;examples.ExampleBean\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003econstructor-arg\u003c/span\u003e \u003cspan class=\"attr\"\u003ename\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;years\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003evalue\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;7500000\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003econstructor-arg\u003c/span\u003e \u003cspan class=\"attr\"\u003ename\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;ultimateAnswer\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003evalue\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;42\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003ebean\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可以使用 \u003ccode\u003e@ConstructorProperties\u003c/code\u003e 显式命名构造函数参数。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epackage\u003c/span\u003e examples;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eExampleBean\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// Fields omitted\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@ConstructorProperties({\u0026#34;years\u0026#34;, \u0026#34;ultimateAnswer\u0026#34;})\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eExampleBean\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e years, String ultimateAnswer)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.years = years;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.ultimateAnswer = ultimateAnswer;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"Setter-方法注入\"\u003e\u003ca href=\"#Setter-方法注入\" class=\"headerlink\" title=\"Setter 方法注入\"\u003e\u003c/a\u003eSetter 方法注入\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e手动模式\u003cul\u003e\n\u003cli\u003exml 配置元信息\u003c/li\u003e\n\u003cli\u003e注解配置元信息\u003c/li\u003e\n\u003cli\u003eJava 配置元信息\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e自动模式\u003cul\u003e\n\u003cli\u003ebyName\u003c/li\u003e\n\u003cli\u003ebyType\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSetter 方法注入是通过容器在调用无参数构造函数或无参数静态工厂方法来实例化 bean 后调用 bean 上的 setter 方法来完成的。\u003c/p\u003e\n\u003cp\u003e以下示例显示了一个只能通过使用纯 setter 注入进行依赖注入的类。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSimpleMovieLister\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// the SimpleMovieLister has a dependency on the MovieFinder\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e MovieFinder movieFinder;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// a setter method so that the Spring container can inject a MovieFinder\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003esetMovieFinder\u003c/span\u003e\u003cspan class=\"params\"\u003e(MovieFinder movieFinder)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.movieFinder = movieFinder;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// business logic that actually uses the injected MovieFinder is omitted...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在 Spring 中，可以混合使用构造器注入和 setter 方法注入。建议将构造器注入用于强制依赖项；并将 setter 方法注入或配置方法用于可选依赖项。需要注意的是，在 setter 方法上使用 \u003ccode\u003e@Required\u003c/code\u003e 注解可用于使属性成为必需的依赖项；然而，更建议使用构造器注入来完成这项工作。\u003c/p\u003e\n\u003ch3 id=\"字段注入\"\u003e\u003ca href=\"#字段注入\" class=\"headerlink\" title=\"字段注入\"\u003e\u003c/a\u003e字段注入\u003c/h3\u003e\u003cp\u003e手动模式（Java 注解配置元信息）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@Autowired\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@Resource\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@Inject\u003c/code\u003e（可选）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"方法注入\"\u003e\u003ca href=\"#方法注入\" class=\"headerlink\" title=\"方法注入\"\u003e\u003c/a\u003e方法注入\u003c/h3\u003e\u003cp\u003e手动模式（Java 注解配置元信息）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@Autowired\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@Resource\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@Inject\u003c/code\u003e（可选）\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@Bean\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"接口回调注入\"\u003e\u003ca href=\"#接口回调注入\" class=\"headerlink\" title=\"接口回调注入\"\u003e\u003c/a\u003e接口回调注入\u003c/h3\u003e\u003cp\u003eAware 系列接口回调\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e內建接口\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eBeanFactoryAware\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e获取 IoC 容器- \u003ccode\u003eBeanFactory\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eApplicationContextAware\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e获取 Spring 应用上下文- \u003ccode\u003eApplicationContext\u003c/code\u003e 对象\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eEnvironmentAware\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e获取 \u003ccode\u003eEnvironment\u003c/code\u003e 对象\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eResourceLoaderAware\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e获取资源加载器对象- \u003ccode\u003eResourceLoader\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eBeanClassLoaderAware\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e获取加载当前 Bean Class 的 \u003ccode\u003eClassLoader\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eBeanNameAware\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e获取当前 Bean 的名称\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eMessageSourceAware\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e获取 \u003ccode\u003eMessageSource\u003c/code\u003e 对象，用于 Spring 国际化\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eApplicationEventPublisherAware\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e获取 \u003ccode\u003eApplicationEventPublishAware\u003c/code\u003e 对象，用于 Spring 事件\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eEmbeddedValueResolverAware\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e获取 \u003ccode\u003eStringValueResolver\u003c/code\u003e 对象，用于占位符处理\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"依赖注入选型\"\u003e\u003ca href=\"#依赖注入选型\" class=\"headerlink\" title=\"依赖注入选型\"\u003e\u003c/a\u003e依赖注入选型\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e低依赖：构造器注入\u003c/li\u003e\n\u003cli\u003e多依赖：Setter 方法注入\u003c/li\u003e\n\u003cli\u003e便利性：字段注入\u003c/li\u003e\n\u003cli\u003e声明类：方法注入\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"限定注入和延迟注入\"\u003e\u003ca href=\"#限定注入和延迟注入\" class=\"headerlink\" title=\"限定注入和延迟注入\"\u003e\u003c/a\u003e限定注入和延迟注入\u003c/h2\u003e\u003ch3 id=\"限定注入\"\u003e\u003ca href=\"#限定注入\" class=\"headerlink\" title=\"限定注入\"\u003e\u003c/a\u003e限定注入\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e使用 \u003ccode\u003e@Qualifier\u003c/code\u003e 注解限定\u003cul\u003e\n\u003cli\u003e通过 Bean 名称限定\u003c/li\u003e\n\u003cli\u003e通过分组限定\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e通过 \u003ccode\u003e@Qualifier\u003c/code\u003e 注解扩展限定\u003cul\u003e\n\u003cli\u003e自定义注解：如 Spring Cloud 的 \u003ccode\u003e@LoadBalanced\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"延迟注入\"\u003e\u003ca href=\"#延迟注入\" class=\"headerlink\" title=\"延迟注入\"\u003e\u003c/a\u003e延迟注入\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e使用 \u003ccode\u003eObjectFactory\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e使用 \u003ccode\u003eObjectProvider\u003c/code\u003e（推荐）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"依赖注入数据类型\"\u003e\u003ca href=\"#依赖注入数据类型\" class=\"headerlink\" title=\"依赖注入数据类型\"\u003e\u003c/a\u003e依赖注入数据类型\u003c/h2\u003e\u003ch3 id=\"基础类型\"\u003e\u003ca href=\"#基础类型\" class=\"headerlink\" title=\"基础类型\"\u003e\u003c/a\u003e基础类型\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e基础数据类型：\u003ccode\u003eboolean\u003c/code\u003e、\u003ccode\u003ebyte\u003c/code\u003e、\u003ccode\u003echar\u003c/code\u003e、\u003ccode\u003eshort\u003c/code\u003e、\u003ccode\u003eint\u003c/code\u003e、\u003ccode\u003efloat\u003c/code\u003e、\u003ccode\u003elong\u003c/code\u003e、\u003ccode\u003edouble\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e标量类型：\u003ccode\u003eNumber\u003c/code\u003e、\u003ccode\u003eCharacter\u003c/code\u003e、\u003ccode\u003eBoolean\u003c/code\u003e、\u003ccode\u003eEnum\u003c/code\u003e、\u003ccode\u003eLocale\u003c/code\u003e、\u003ccode\u003eCharset\u003c/code\u003e、\u003ccode\u003eCurrency\u003c/code\u003e、\u003ccode\u003eProperties\u003c/code\u003e、\u003ccode\u003eUUID\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e常规类型：\u003ccode\u003eObject\u003c/code\u003e、\u003ccode\u003eString\u003c/code\u003e、\u003ccode\u003eTimeZone\u003c/code\u003e、\u003ccode\u003eCalendar\u003c/code\u003e、\u003ccode\u003eOptional\u003c/code\u003e 等\u003c/li\u003e\n\u003cli\u003eSpring 类型：\u003ccode\u003eResource\u003c/code\u003e、\u003ccode\u003eInputSource\u003c/code\u003e、\u003ccode\u003eFormatter\u003c/code\u003e 等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"集合类型\"\u003e\u003ca href=\"#集合类型\" class=\"headerlink\" title=\"集合类型\"\u003e\u003c/a\u003e集合类型\u003c/h3\u003e\u003cp\u003e数组类型：基础数据类型、标量类型、常规类型、String 类型的数组\u003c/p\u003e\n\u003cp\u003e集合类型：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eCollection\u003c/code\u003e：\u003ccode\u003eList\u003c/code\u003e、\u003ccode\u003eSet\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMap\u003c/code\u003e：\u003ccode\u003eProperties\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"依赖处理过程\"\u003e\u003ca href=\"#依赖处理过程\" class=\"headerlink\" title=\"依赖处理过程\"\u003e\u003c/a\u003e依赖处理过程\u003c/h2\u003e\u003cp\u003e入口：\u003ccode\u003eDefaultListableBeanFactory#resolveDependency\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e依赖描述符：\u003ccode\u003eDependencyDescriptor\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e自定义绑定候选对象处理器：\u003ccode\u003eAutowireCandidateResolver\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e@Autowired\u003c/code\u003e、\u003ccode\u003e@Value\u003c/code\u003e、\u003ccode\u003e@javax.inject.Inject\u003c/code\u003e 处理器：\u003ccode\u003eAutowiredAnnotationBeanPostProcessor\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e通用注解处理器：\u003ccode\u003eCommonAnnotationBeanPostProcessor\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e注入注解\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ejavax.xml.ws.WebServiceRef\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ejavax.ejb.EJB\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ejavax.annotation.Resources\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e生命周期注解\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ejavax.annotation.PostConstruct\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ejavax.annotation.PreDestroy\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e自定义依赖注入注解：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e生命周期处理\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eInstantiationAwareBeanPostProcessor\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMergedBeanDefinitionPostProcessor\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e元数据\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eInjectionMetadata\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eInjectionMetadata.InjectedElement\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"依赖查找-VS-依赖注入\"\u003e\u003ca href=\"#依赖查找-VS-依赖注入\" class=\"headerlink\" title=\"依赖查找 VS. 依赖注入\"\u003e\u003c/a\u003e依赖查找 VS. 依赖注入\u003c/h2\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003e依赖处理\u003c/th\u003e\n\u003cth\u003e实现复杂度\u003c/th\u003e\n\u003cth\u003e代码侵入性\u003c/th\u003e\n\u003cth\u003eAPI 依赖性\u003c/th\u003e\n\u003cth\u003e可读性\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e依赖查找\u003c/td\u003e\n\u003ctd\u003e主动\u003c/td\u003e\n\u003ctd\u003e相对繁琐\u003c/td\u003e\n\u003ctd\u003e侵入业务逻辑\u003c/td\u003e\n\u003ctd\u003e依赖容器 API\u003c/td\u003e\n\u003ctd\u003e良好\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e依赖注入\u003c/td\u003e\n\u003ctd\u003e被动\u003c/td\u003e\n\u003ctd\u003e相对便利\u003c/td\u003e\n\u003ctd\u003e低侵入性\u003c/td\u003e\n\u003ctd\u003e不依赖容器 API\u003c/td\u003e\n\u003ctd\u003e一般\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans\"\u003eSpring 官方文档之 Core Technologies\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/course/intro/265\"\u003e《小马哥讲 Spring 核心编程思想》\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-08-30T08:06:10Z",
  "Author": "钝悟 ◾ Dunwu"
}