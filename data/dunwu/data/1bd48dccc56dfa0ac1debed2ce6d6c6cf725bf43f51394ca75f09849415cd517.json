{
  "Source": "dunwu",
  "Title": "Redis 数据结构",
  "Link": "https://dunwu.github.io/blog/pages/aae60d/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Redis-数据结构\"\u003e\u003ca href=\"#Redis-数据结构\" class=\"headerlink\" title=\"Redis 数据结构\"\u003e\u003c/a\u003eRedis 数据结构\u003c/h1\u003e\u003cblockquote\u003e\n\u003cp\u003e关键词：\u003ccode\u003e对象\u003c/code\u003e、\u003ccode\u003eSDS\u003c/code\u003e、\u003ccode\u003e链表\u003c/code\u003e、\u003ccode\u003e字典\u003c/code\u003e、\u003ccode\u003e跳表\u003c/code\u003e、\u003ccode\u003e整数集合\u003c/code\u003e、\u003ccode\u003e压缩列表\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"SDS\"\u003e\u003ca href=\"#SDS\" class=\"headerlink\" title=\"SDS\"\u003e\u003c/a\u003eSDS\u003c/h2\u003e\u003ch3 id=\"SDS-简介\"\u003e\u003ca href=\"#SDS-简介\" class=\"headerlink\" title=\"SDS 简介\"\u003e\u003c/a\u003eSDS 简介\u003c/h3\u003e\u003cp\u003eSDS 是 Simple Dynamic String 的缩写，即\u003cstrong\u003e简单动态字符串\u003c/strong\u003e。Redis 为 SDS 做了一些优化，以替代 C 字符串来表示字符串内容。此外，SDS 还被 Redis 用作缓冲区（buffer），如：AOF 模块中的 AOF 缓冲区；客户端状态中的输入缓冲区。\u003c/p\u003e\n\u003cp\u003eSDS 相比 C 字符串，具有以下优势：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003eC 字符串\u003c/th\u003e\n\u003cth align=\"left\"\u003eSDS\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd align=\"left\"\u003e获取字符串长度的复杂度为 O(N) 。\u003c/td\u003e\n\u003ctd align=\"left\"\u003e获取字符串长度的复杂度为 O(1) 。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eAPI 是不安全的，可能会造成缓冲区溢出。\u003c/td\u003e\n\u003ctd align=\"left\"\u003eAPI 是安全的，不会造成缓冲区溢出。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e修改字符串长度 \u003ccode\u003eN\u003c/code\u003e 次必然需要执行 \u003ccode\u003eN\u003c/code\u003e 次内存重分配。\u003c/td\u003e\n\u003ctd align=\"left\"\u003e修改字符串长度 \u003ccode\u003eN\u003c/code\u003e 次最多需要执行 \u003ccode\u003eN\u003c/code\u003e 次内存重分配。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e只能保存文本数据。\u003c/td\u003e\n\u003ctd align=\"left\"\u003e可以保存文本或者二进制数据。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e可以使用所有 \u003ccode\u003e\u0026lt;string.h\u0026gt;\u003c/code\u003e 库中的函数。\u003c/td\u003e\n\u003ctd align=\"left\"\u003e可以使用一部分 \u003ccode\u003e\u0026lt;string.h\u0026gt;\u003c/code\u003e 库中的函数。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"SDS-实现\"\u003e\u003ca href=\"#SDS-实现\" class=\"headerlink\" title=\"SDS 实现\"\u003e\u003c/a\u003eSDS 实现\u003c/h3\u003e\u003cp\u003e每个 \u003ccode\u003esds.h/sdshdr\u003c/code\u003e 结构表示一个 SDS 值：\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003esdshdr\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 记录 buf 数组中已使用字节的数量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 等于 SDS 所保存字符串的长度\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e len;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 记录 buf 数组中未使用字节的数量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"built_in\"\u003efree\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 字节数组，用于保存字符串\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003echar\u003c/span\u003e buf[];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e};\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eSDS 遵循 C 字符串以空字符结尾的惯例， 保存空字符的 \u003ccode\u003e1\u003c/code\u003e 字节空间不计算在 SDS 的 \u003ccode\u003elen\u003c/code\u003e 属性里面， 并且为空字符分配额外的 \u003ccode\u003e1\u003c/code\u003e 字节空间， 以及添加空字符到字符串末尾等操作都是由 SDS 函数自动完成的， 所以这个空字符对于 SDS 的使用者来说是完全透明的。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://redisbook.com/_images/graphviz-72760f6945c3742eca0df91a91cc379168eda82d.png\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"SDS-特性\"\u003e\u003ca href=\"#SDS-特性\" class=\"headerlink\" title=\"SDS 特性\"\u003e\u003c/a\u003eSDS 特性\u003c/h3\u003e\u003cp\u003eSDS 与 C 字符串相比，做了一些优化，具有以下优势：\u003c/p\u003e\n\u003ch4 id=\"常数复杂度获取字符串长度\"\u003e\u003ca href=\"#常数复杂度获取字符串长度\" class=\"headerlink\" title=\"常数复杂度获取字符串长度\"\u003e\u003c/a\u003e常数复杂度获取字符串长度\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003eC 字符串 - 因为 C 字符串并不记录自身的长度信息， 所以为了获取一个 C 字符串的长度， 程序必须遍历整个字符串， 对遇到的每个字符进行计数， 直到遇到代表字符串结尾的空字符为止， 这个操作的复杂度为 \u003ccode\u003eO(N)\u003c/code\u003e 。\u003c/li\u003e\n\u003cli\u003eSDS - 因为 SDS 在 \u003ccode\u003elen\u003c/code\u003e 属性中记录了 SDS 本身的长度， 所以获取一个 SDS 长度的复杂度仅为 \u003ccode\u003eO(1)\u003c/code\u003e 。设置和更新 SDS 长度的工作是由 SDS 的 API 在执行时自动完成的， 使用 SDS 无须进行任何手动修改长度的工作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"杜绝缓冲区溢出\"\u003e\u003ca href=\"#杜绝缓冲区溢出\" class=\"headerlink\" title=\"杜绝缓冲区溢出\"\u003e\u003c/a\u003e杜绝缓冲区溢出\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003eC 字符串 - C 字符串不记录自身长度带来的另一个问题是容易造成缓冲区溢出（buffer overflow）。\u003c/li\u003e\n\u003cli\u003eSDS - 当 SDS API 需要对 SDS 进行修改时， API 会先检查 SDS 的空间是否满足修改所需的要求， 如果不满足的话， API 会自动将 SDS 的空间扩展至执行修改所需的大小， 然后才执行实际的修改操作， 所以使用 SDS 既不需要手动修改 SDS 的空间大小， 也不会出现前面所说的缓冲区溢出问题。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"减少修改字符串长度时所需的内存重分配次数\"\u003e\u003ca href=\"#减少修改字符串长度时所需的内存重分配次数\" class=\"headerlink\" title=\"减少修改字符串长度时所需的内存重分配次数\"\u003e\u003c/a\u003e减少修改字符串长度时所需的内存重分配次数\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003eC 字符串 - 对于一个包含了 \u003ccode\u003eN\u003c/code\u003e 个字符的 C 字符串来说， 这个 C 字符串的底层实现总是一个 \u003ccode\u003eN+1\u003c/code\u003e 个字符长的数组（额外的一个字符空间用于保存空字符）。因为 C 字符串的长度和底层数组的长度之间存在着这种关联性， 所以每次增长或者缩短一个 C 字符串， 程序都总要对保存这个 C 字符串的数组进行一次内存重分配操作。\u003cul\u003e\n\u003cli\u003e增长字符串时，如果没有内存重分配，就会产生缓冲区溢出。\u003c/li\u003e\n\u003cli\u003e缩减字符串是，如果没有内存重分配，就会产生内存泄露。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSDS - 因为内存重分配涉及复杂的算法， 并且可能需要执行系统调用， 所以它通常是一个比较耗时的操作。SDS 通过未使用空间解除了字符串长度和底层数组长度之间的关联： 在 SDS 中， \u003ccode\u003ebuf\u003c/code\u003e 数组的长度不一定就是字符数量加一， 数组里面可以包含未使用的字节， 而这些字节的数量就由 SDS 的 \u003ccode\u003efree\u003c/code\u003e 属性记录。通过未使用空间， SDS 实现了空间预分配和惰性空间释放两种优化策略。\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e空间预分配\u003c/strong\u003e - \u003cstrong\u003e空间预分配用于优化 SDS 的字符串增长操作\u003c/strong\u003e。 当 SDS 的 API 对一个 SDS 进行修改， 并且需要对 SDS 进行空间扩展的时候， 程序不仅会为 SDS 分配修改所必须要的空间， 还会为 SDS 分配额外的未使用空间。通过空间预分配， SDS 将连续增长 \u003ccode\u003eN\u003c/code\u003e 次字符串所需的内存重分配次数从必定 \u003ccode\u003eN\u003c/code\u003e 次降低为最多 \u003ccode\u003eN\u003c/code\u003e 次。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e惰性空间\u003c/strong\u003e - \u003cstrong\u003e惰性空间释放用于优化 SDS 的字符串缩短操作\u003c/strong\u003e。当 SDS 的 API 需要缩短 SDS 保存的字符串时， 程序并不立即使用内存重分配来回收缩短后多出来的字节， 而是使用 \u003ccode\u003efree\u003c/code\u003e 属性将这些字节的数量记录起来， 并等待将来使用。通过惰性空间释放策略， SDS 避免了缩短字符串时所需的内存重分配操作， 并为将来可能有的增长操作提供了优化。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"二进制安全\"\u003e\u003ca href=\"#二进制安全\" class=\"headerlink\" title=\"二进制安全\"\u003e\u003c/a\u003e二进制安全\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003eC 字符串 - C 字符串中的字符必须符合某种编码（比如 ASCII）， 并且除了字符串的末尾之外， 字符串里面不能包含空字符， 否则最先被程序读入的空字符将被误认为是字符串结尾 —— 这些限制使得 \u003cstrong\u003eC 字符串只能保存文本数据\u003c/strong\u003e， 而不能保存像图片、音频、视频、压缩文件这样的二进制数据。\u003c/li\u003e\n\u003cli\u003eSDS - SDS 的 API 都是二进制安全的（binary-safe）： 所有 SDS API 都会以处理二进制的方式来处理 SDS 存放在 \u003ccode\u003ebuf\u003c/code\u003e 数组里的数据， 程序不会对其中的数据做任何限制、过滤、或者假设 —— 数据在写入时是什么样的， 它被读取时就是什么样。\u003cstrong\u003e通过使用二进制安全的 SDS ， 使得 Redis 不仅可以保存文本数据， 还可以保存任意格式的二进制数据\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"兼容部分-C-字符串函数\"\u003e\u003ca href=\"#兼容部分-C-字符串函数\" class=\"headerlink\" title=\"兼容部分 C 字符串函数\"\u003e\u003c/a\u003e兼容部分 C 字符串函数\u003c/h4\u003e\u003cp\u003e虽然 SDS 的 API 都是二进制安全的， 但也会遵循 C 字符串惯例，将保存的数据的末尾设置为空字符， 并且总会在为 \u003ccode\u003ebuf\u003c/code\u003e 数组分配空间时多分配一个字节来容纳这个空字符， 这是为了让那些保存文本数据的 SDS 可以重用一部分 \u003ccode\u003e\u0026lt;string.h\u0026gt;\u003c/code\u003e 库定义的函数。因此，SDS 可以兼容部分 C 字符串函数。\u003c/p\u003e\n\u003ch2 id=\"链表\"\u003e\u003ca href=\"#链表\" class=\"headerlink\" title=\"链表\"\u003e\u003c/a\u003e链表\u003c/h2\u003e\u003ch3 id=\"链表简介\"\u003e\u003ca href=\"#链表简介\" class=\"headerlink\" title=\"链表简介\"\u003e\u003c/a\u003e链表简介\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e链表被广泛用于实现 Redis 的各种功能，比如 List 键，订阅与发布，慢查询，监视器等\u003c/strong\u003e。此外，Redis 服务器本身还使用链表来保存多个客户端的状态信息， 以及使用链表来构建客户端输出缓冲区（output buffer）。\u003c/p\u003e\n\u003cp\u003e由于 C 语言没有内置的链表，因此 Redis 自实现了一个链表：\u003cstrong\u003eRedis 的链表实现其实就是一个双链表\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e每个链表使用一个 list 结构来表示，这个结构带有表头节点指针、表尾节点指针、以及链表长度等信息。\u003c/li\u003e\n\u003cli\u003e因为链表表头节点的前置节点和表尾节点的后置节点都指向 NULL，所以 Redis 的链表实现是无环链表。\u003c/li\u003e\n\u003cli\u003e通过为链表设置不同的类型特定函数，Redis 的链表可以用于保存各种不同类型的值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"链表实现\"\u003e\u003ca href=\"#链表实现\" class=\"headerlink\" title=\"链表实现\"\u003e\u003c/a\u003e链表实现\u003c/h3\u003e\u003cp\u003e每个链表节点由一个 \u003ccode\u003eadlist.h/listNode\u003c/code\u003e 结构来表示，每个节点都有一个指向前置节点和后置节点的指针，所以 Redis 的链表实现是双链表。\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003elistNode\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 前置节点\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003elistNode\u003c/span\u003e *\u003cspan class=\"title\"\u003eprev\u003c/span\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 后置节点\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003elistNode\u003c/span\u003e *\u003cspan class=\"title\"\u003enext\u003c/span\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 节点的值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003evoid\u003c/span\u003e *value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} listNode;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e多个 \u003ccode\u003elistNode\u003c/code\u003e 可以通过 \u003ccode\u003eprev\u003c/code\u003e 和 \u003ccode\u003enext\u003c/code\u003e 指针组成双链表。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://redisbook.com/_images/graphviz-167adfc2e52e078d4c0e3c8a9eddec54551602fb.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e虽然仅仅使用多个 \u003ccode\u003elistNode\u003c/code\u003e 结构就可以组成链表， 但使用 \u003ccode\u003eadlist.h/list\u003c/code\u003e 来持有链表的话， 操作起来会更方便：\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003elist\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 表头节点\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    listNode *head;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 表尾节点\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    listNode *tail;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 链表所包含的节点数量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"type\"\u003elong\u003c/span\u003e len;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 节点值复制函数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003evoid\u003c/span\u003e *(*dup)(\u003cspan class=\"type\"\u003evoid\u003c/span\u003e *ptr);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 节点值释放函数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003evoid\u003c/span\u003e (*\u003cspan class=\"built_in\"\u003efree\u003c/span\u003e)(\u003cspan class=\"type\"\u003evoid\u003c/span\u003e *ptr);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 节点值对比函数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e (*match)(\u003cspan class=\"type\"\u003evoid\u003c/span\u003e *ptr, \u003cspan class=\"type\"\u003evoid\u003c/span\u003e *key);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} \u003cspan class=\"built_in\"\u003elist\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003elist\u003c/code\u003e 结构为链表提供了表头指针 \u003ccode\u003ehead\u003c/code\u003e 、表尾指针 \u003ccode\u003etail\u003c/code\u003e ， 以及链表长度计数器 \u003ccode\u003elen\u003c/code\u003e ， 而 \u003ccode\u003edup\u003c/code\u003e 、 \u003ccode\u003efree\u003c/code\u003e 和 \u003ccode\u003ematch\u003c/code\u003e 成员则是用于实现多态链表所需的类型特定函数：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edup\u003c/code\u003e 函数 - 用于复制链表节点所保存的值；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efree\u003c/code\u003e 函数 - 用于释放链表节点所保存的值；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ematch\u003c/code\u003e 函数 - 用于对比链表节点所保存的值和另一个输入值是否相等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"http://redisbook.com/_images/graphviz-5f4d8b6177061ac52d0ae05ef357fceb52e9cb90.png\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"字典\"\u003e\u003ca href=\"#字典\" class=\"headerlink\" title=\"字典\"\u003e\u003c/a\u003e字典\u003c/h2\u003e\u003ch3 id=\"字典简介\"\u003e\u003ca href=\"#字典简介\" class=\"headerlink\" title=\"字典简介\"\u003e\u003c/a\u003e字典简介\u003c/h3\u003e\u003cp\u003e字典是一种用于保存键值对（key-value pair）的抽象数据结构。字典中的每个键都是独一无二的， 程序可以在字典中根据键查找与之关联的值， 或者通过键来更新值， 又或者根据键来删除整个键值对， 等等。\u003c/p\u003e\n\u003cp\u003e由于 C 语言没有内置的链表，因此 Redis 自实现了一个字典。\u003c/p\u003e\n\u003cp\u003e字典被广泛用于实现 Redis 的各种功能， 其中包括数据库和 Hash 键。\u003c/p\u003e\n\u003ch3 id=\"字典实现\"\u003e\u003ca href=\"#字典实现\" class=\"headerlink\" title=\"字典实现\"\u003e\u003c/a\u003e字典实现\u003c/h3\u003e\u003cp\u003eRedis 的字典使用哈希表作为底层实现， 一个哈希表里面可以有多个哈希表节点， 而每个哈希表节点就保存了字典中的一个键值对。\u003c/p\u003e\n\u003cp\u003eRedis 字典所使用的哈希表由 \u003ccode\u003edict.h/dictht\u003c/code\u003e 结构定义：\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003edictht\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 哈希表数组\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    dictEntry **table;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 哈希表大小\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"type\"\u003elong\u003c/span\u003e size;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 哈希表大小掩码，用于计算索引值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 总是等于 size - 1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"type\"\u003elong\u003c/span\u003e sizemask;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 该哈希表已有节点的数量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"type\"\u003elong\u003c/span\u003e used;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} dictht;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etable\u003c/code\u003e 属性是一个数组， 数组中的每个元素都是一个指向 \u003ccode\u003edict.h/dictEntry\u003c/code\u003e 结构的指针， 每个 \u003ccode\u003edictEntry\u003c/code\u003e 结构保存着一个键值对。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esize\u003c/code\u003e 属性记录了哈希表的大小， 也即是 \u003ccode\u003etable\u003c/code\u003e 数组的大小， 而 \u003ccode\u003eused\u003c/code\u003e 属性则记录了哈希表目前已有节点（键值对）的数量。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esizemask\u003c/code\u003e 属性的值总是等于 \u003ccode\u003esize - 1\u003c/code\u003e ， 这个属性和哈希值一起决定一个键应该被放到 \u003ccode\u003etable\u003c/code\u003e 数组的哪个索引上面。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e哈希表节点使用 \u003ccode\u003edictEntry\u003c/code\u003e 结构表示， 每个 \u003ccode\u003edictEntry\u003c/code\u003e 结构都保存着一个键值对：\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003edictEntry\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 键\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003evoid\u003c/span\u003e *key;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003eunion\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003evoid\u003c/span\u003e *val;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003euint64_t\u003c/span\u003e u64;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint64_t\u003c/span\u003e s64;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } v;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 指向下个哈希表节点，形成链表\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003edictEntry\u003c/span\u003e *\u003cspan class=\"title\"\u003enext\u003c/span\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} dictEntry;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ekey\u003c/code\u003e 属性保存着键值对中的键， 而 \u003ccode\u003ev\u003c/code\u003e 属性则保存着键值对中的值， 其中键值对的值可以是一个指针， 或者是一个 \u003ccode\u003euint64_t\u003c/code\u003e 整数， 又或者是一个 \u003ccode\u003eint64_t\u003c/code\u003e 整数。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enext\u003c/code\u003e 属性是指向另一个哈希表节点的指针， 这个指针可以将多个哈希值相同的键值对连接在一次， 以此来解决键冲突（collision）的问题。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRedis 中的字典由 \u003ccode\u003edict.h/dict\u003c/code\u003e 结构表示：\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003edict\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 类型特定函数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    dictType *type;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 私有数据\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003evoid\u003c/span\u003e *privdata;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 哈希表\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    dictht ht[\u003cspan class=\"number\"\u003e2\u003c/span\u003e];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// rehash 索引\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 当 rehash 不在进行时，值为 -1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e rehashidx; \u003cspan class=\"comment\"\u003e/* rehashing not in progress if rehashidx == -1 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} dict;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003etype\u003c/code\u003e 属性和 \u003ccode\u003eprivdata\u003c/code\u003e 属性是针对不同类型的键值对， 为创建多态字典而设置的：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etype\u003c/code\u003e 属性是一个指向 \u003ccode\u003edictType\u003c/code\u003e 结构的指针， 每个 \u003ccode\u003edictType\u003c/code\u003e 结构保存了一簇用于操作特定类型键值对的函数， Redis 会为用途不同的字典设置不同的类型特定函数。\u003c/li\u003e\n\u003cli\u003e而 \u003ccode\u003eprivdata\u003c/code\u003e 属性则保存了需要传给那些类型特定函数的可选参数。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eht\u003c/code\u003e 属性是一个包含两个项的数组， 数组中的每个项都是一个 \u003ccode\u003edictht\u003c/code\u003e 哈希表， 一般情况下， 字典只使用 \u003ccode\u003eht[0]\u003c/code\u003e 哈希表， \u003ccode\u003eht[1]\u003c/code\u003e 哈希表只会在对 \u003ccode\u003eht[0]\u003c/code\u003e 哈希表进行 rehash 时使用。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erehashidx\u003c/code\u003e 属性记录了 rehash 目前的进度， 如果目前没有在进行 rehash ， 那么它的值为 \u003ccode\u003e-1\u003c/code\u003e 。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"http://redisbook.com/_images/graphviz-e73003b166b90094c8c4b7abbc8d59f691f91e27.png\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"哈希算法\"\u003e\u003ca href=\"#哈希算法\" class=\"headerlink\" title=\"哈希算法\"\u003e\u003c/a\u003e哈希算法\u003c/h3\u003e\u003cp\u003e当字典被用作数据库的底层实现， 或者哈希键的底层实现时， \u003cstrong\u003eRedis 使用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://code.google.com/p/smhasher/\"\u003eMurmurHash2\u003c/a\u003e 算法来计算键的哈希值\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eRedis 计算哈希值和索引值的方法如下：\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# 使用字典设置的哈希函数，计算键 key 的哈希值\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehash = dict-\u0026gt;type-\u0026gt;hashFunction(key);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 使用哈希表的 sizemask 属性和哈希值，计算出索引值\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 根据情况不同， ht[x] 可以是 ht[\u003cspan class=\"number\"\u003e0\u003c/span\u003e] 或者 ht[\u003cspan class=\"number\"\u003e1\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eindex = hash \u0026amp; dict-\u0026gt;ht[x].sizemask;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"哈希冲突\"\u003e\u003ca href=\"#哈希冲突\" class=\"headerlink\" title=\"哈希冲突\"\u003e\u003c/a\u003e哈希冲突\u003c/h3\u003e\u003cp\u003e当有两个或以上数量的键被分配到了哈希表数组的同一个索引上面时， 我们称这些键发生了冲突（collision）。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRedis 使用链地址法（separate chaining）来解决哈希冲突\u003c/strong\u003e： 每个哈希表节点都有一个 \u003ccode\u003enext\u003c/code\u003e 指针， 多个哈希表节点可以用 \u003ccode\u003enext\u003c/code\u003e 指针构成一个单向链表， 被分配到同一个索引上的多个节点可以用这个单向链表连接起来， 这就解决了键冲突的问题。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://redisbook.com/_images/graphviz-4b52dcf6eb0768750e1c15480be3326ca37e05b3.png\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"rehash\"\u003e\u003ca href=\"#rehash\" class=\"headerlink\" title=\"rehash\"\u003e\u003c/a\u003erehash\u003c/h3\u003e\u003ch4 id=\"rehash-的步骤\"\u003e\u003ca href=\"#rehash-的步骤\" class=\"headerlink\" title=\"rehash 的步骤\"\u003e\u003c/a\u003erehash 的步骤\u003c/h4\u003e\u003col\u003e\n\u003cli\u003e为字典的 \u003ccode\u003eht[1]\u003c/code\u003e 哈希表分配空间， 这个哈希表的空间大小取决于要执行的操作， 以及 \u003ccode\u003eht[0]\u003c/code\u003e 当前包含的键值对数量 （也即是 ht[0].used 属性的值）。\u003c/li\u003e\n\u003cli\u003e将保存在 \u003ccode\u003eht[0]\u003c/code\u003e 中的所有键值对 rehash 到 \u003ccode\u003eht[1]\u003c/code\u003e 上面： rehash 指的是重新计算键的哈希值和索引值， 然后将键值对放置到 \u003ccode\u003eht[1]\u003c/code\u003e 哈希表的指定位置上。\u003c/li\u003e\n\u003cli\u003e当 \u003ccode\u003eht[0]\u003c/code\u003e 包含的所有键值对都迁移到了 \u003ccode\u003eht[1]\u003c/code\u003e 之后 （\u003ccode\u003eht[0]\u003c/code\u003e 变为空表）， 释放 \u003ccode\u003eht[0]\u003c/code\u003e ， 将 \u003ccode\u003eht[1]\u003c/code\u003e 设置为 \u003ccode\u003eht[0]\u003c/code\u003e ， 并在 \u003ccode\u003eht[1]\u003c/code\u003e 新创建一个空白哈希表， 为下一次 rehash 做准备。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"http://redisbook.com/_images/graphviz-93608325578e8e45848938ef420115bf2227639e.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://redisbook.com/_images/graphviz-b68acb4d868ec7d79a44935ce08a159746ca58da.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://redisbook.com/_images/graphviz-92dc47e4329eabae941cddfd727b736ef738e8cf.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://redisbook.com/_images/graphviz-fa28d986a72f1f48b83c7f959ea217b1f9527d3c.png\"/\u003e\u003c/p\u003e\n\u003ch4 id=\"rehash-的条件\"\u003e\u003ca href=\"#rehash-的条件\" class=\"headerlink\" title=\"rehash 的条件\"\u003e\u003c/a\u003erehash 的条件\u003c/h4\u003e\u003cp\u003e当以下条件中的任意一个被满足时， 程序会自动开始对哈希表执行扩展操作：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e服务器目前没有在执行 BGSAVE 命令或者 BGREWRITEAOF 命令， 并且哈希表的负载因子大于等于 \u003ccode\u003e1\u003c/code\u003e ；\u003c/li\u003e\n\u003cli\u003e服务器目前正在执行 BGSAVE 命令或者 BGREWRITEAOF 命令， 并且哈希表的负载因子大于等于 \u003ccode\u003e5\u003c/code\u003e ；\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e其中哈希表的负载因子可以通过公式计算得出：\u003c/p\u003e\n\u003cfigure class=\"highlight apache\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 负载因子 = 哈希表已保存节点数量 / 哈希表大小\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003eload_factor\u003c/span\u003e = ht[\u003cspan class=\"number\"\u003e0\u003c/span\u003e].used / ht[\u003cspan class=\"number\"\u003e0\u003c/span\u003e].size\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"渐进式-rehash\"\u003e\u003ca href=\"#渐进式-rehash\" class=\"headerlink\" title=\"渐进式 rehash\"\u003e\u003c/a\u003e渐进式 rehash\u003c/h4\u003e\u003cp\u003e渐进式 rehash 的详细步骤：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e为 \u003ccode\u003eht[1]\u003c/code\u003e 分配空间， 让字典同时持有 \u003ccode\u003eht[0]\u003c/code\u003e 和 \u003ccode\u003eht[1]\u003c/code\u003e 两个哈希表。\u003c/li\u003e\n\u003cli\u003e在字典中维持一个索引计数器变量 \u003ccode\u003erehashidx\u003c/code\u003e ， 并将它的值设置为 \u003ccode\u003e0\u003c/code\u003e ， 表示 rehash 工作正式开始。\u003c/li\u003e\n\u003cli\u003e在 rehash 进行期间， 每次对字典执行添加、删除、查找或者更新操作时， 程序除了执行指定的操作以外， 还会顺带将 \u003ccode\u003eht[0]\u003c/code\u003e 哈希表在 \u003ccode\u003erehashidx\u003c/code\u003e 索引上的所有键值对 rehash 到 \u003ccode\u003eht[1]\u003c/code\u003e ， 当 rehash 工作完成之后， 程序将 \u003ccode\u003erehashidx\u003c/code\u003e 属性的值增一。\u003c/li\u003e\n\u003cli\u003e随着字典操作的不断执行， 最终在某个时间点上， \u003ccode\u003eht[0]\u003c/code\u003e 的所有键值对都会被 rehash 至 \u003ccode\u003eht[1]\u003c/code\u003e ， 这时程序将 \u003ccode\u003erehashidx\u003c/code\u003e 属性的值设为 \u003ccode\u003e-1\u003c/code\u003e ， 表示 rehash 操作已完成。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"跳表\"\u003e\u003ca href=\"#跳表\" class=\"headerlink\" title=\"跳表\"\u003e\u003c/a\u003e跳表\u003c/h2\u003e\u003ch3 id=\"跳表简介\"\u003e\u003ca href=\"#跳表简介\" class=\"headerlink\" title=\"跳表简介\"\u003e\u003c/a\u003e跳表简介\u003c/h3\u003e\u003cp\u003e跳表（skiplist）是一种有序数据结构， 它通过在每个节点中维持多个指向其他节点的指针， 从而达到快速访问节点的目的。\u003c/p\u003e\n\u003cp\u003e跳表支持平均 O(log N) 最坏 O(N) 复杂度的节点查找， 还可以通过顺序性操作来批量处理节点。\u003c/p\u003e\n\u003cp\u003e在大部分情况下， 跳表的效率可以和平衡树相媲美， 并且因为跳表的实现比平衡树要来得更为简单， 所以有不少程序都使用跳表来代替平衡树。\u003c/p\u003e\n\u003cp\u003eRedis 使用跳表作为有序集合键的底层实现之一： 如果一个有序集合包含的元素数量比较多， 又或者有序集合中元素的成员（member）是比较长的字符串时， Redis 就会使用跳表来作为有序集合键的底层实现。\u003c/p\u003e\n\u003cp\u003e此外，Redis 还在集群节点中用跳表作为内部数据结构。\u003c/p\u003e\n\u003ch3 id=\"跳表实现\"\u003e\u003ca href=\"#跳表实现\" class=\"headerlink\" title=\"跳表实现\"\u003e\u003c/a\u003e跳表实现\u003c/h3\u003e\u003cp\u003eRedis 的跳表实现由 \u003ccode\u003ezskiplist\u003c/code\u003e 和 \u003ccode\u003ezskiplistNode\u003c/code\u003e 两个结构组成， 其中 \u003ccode\u003ezskiplist\u003c/code\u003e 用于保存跳表信息（比如表头节点、表尾节点、长度）， 而 \u003ccode\u003ezskiplistNode\u003c/code\u003e 则用于表示跳表节点。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://redisbook.com/_images/graphviz-59432127803598137980d030e8e529c5b068bebb.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ezskiplist\u003c/code\u003e 结构的定义如下：\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003ezskiplist\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 表头节点和表尾节点\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003ezskiplistNode\u003c/span\u003e *\u003cspan class=\"title\"\u003eheader\u003c/span\u003e, *\u003cspan class=\"title\"\u003etail\u003c/span\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 表中节点的数量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"type\"\u003elong\u003c/span\u003e length;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 表中层数最大的节点的层数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e level;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} zskiplist;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eheader\u003c/code\u003e 和 \u003ccode\u003etail\u003c/code\u003e 指针分别指向跳表的表头和表尾节点， 通过这两个指针， 程序定位表头节点和表尾节点的复杂度为 O(1) 。\u003c/li\u003e\n\u003cli\u003e通过使用 \u003ccode\u003elength\u003c/code\u003e 属性来记录节点的数量， 程序可以在 O(1) 复杂度内返回跳表的长度。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elevel\u003c/code\u003e 属性则用于在 O(1) 复杂度内获取跳表中层高最大的那个节点的层数量， 注意表头节点的层高并不计算在内。\u003cstrong\u003e每个跳表节点的层高都是 \u003ccode\u003e1\u003c/code\u003e 至 \u003ccode\u003e32\u003c/code\u003e 之间的随机数\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e跳表节点的实现由 \u003ccode\u003eredis.h/zskiplistNode\u003c/code\u003e 结构定义：\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003ezskiplistNode\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 后退指针\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003ezskiplistNode\u003c/span\u003e *\u003cspan class=\"title\"\u003ebackward\u003c/span\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 分值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003edouble\u003c/span\u003e score;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 成员对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    robj *obj;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 层\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003ezskiplistLevel\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 前进指针\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003ezskiplistNode\u003c/span\u003e *\u003cspan class=\"title\"\u003eforward\u003c/span\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 跨度\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e span;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } level[];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} zskiplistNode;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e层（level）：每个层都带有两个属性：前进指针和跨度。前进指针用于访问位于表尾方向的其他节点，而跨度则记录了前进指针所指向节点和当前节点的距离。在上面的图片中，连线上带有数字的箭头就代表前进指针，而那个数字就是跨度。当程序从表头向表尾进行遍历时，访问会沿着层的前进指针进行。\u003c/li\u003e\n\u003cli\u003e后退（backward）指针：它指向位于当前节点的前一个节点。后退指针在程序从表尾向表头遍历时使用。\u003c/li\u003e\n\u003cli\u003e分值（score）：在跳表中，节点按各自所保存的分值从小到大排列。\u003cstrong\u003e在同一个跳表中， 多个节点可以包含相同的分值， 但每个节点的成员对象必须是唯一的\u003c/strong\u003e。跳表中的节点按照分值大小进行排序， 当分值相同时， 节点按照成员对象的大小进行排序。\u003c/li\u003e\n\u003cli\u003e成员对象（obj）：各个节点中的 \u003ccode\u003eo1\u003c/code\u003e 、 \u003ccode\u003eo2\u003c/code\u003e 和 \u003ccode\u003eo3\u003c/code\u003e 是节点所保存的成员对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"整数集合\"\u003e\u003ca href=\"#整数集合\" class=\"headerlink\" title=\"整数集合\"\u003e\u003c/a\u003e整数集合\u003c/h2\u003e\u003ch3 id=\"整数集合简介\"\u003e\u003ca href=\"#整数集合简介\" class=\"headerlink\" title=\"整数集合简介\"\u003e\u003c/a\u003e整数集合简介\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e整数集合（intset）是集合键的底层实现之一\u003c/strong\u003e。当一个集合只包含整数值元素， 并且这个集合的元素数量不多时， Redis 就会使用整数集合作为集合键的底层实现。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e整数集合的底层实现为数组， 这个数组以有序、无重复的方式保存集合元素， 在有需要时， 程序会根据新添加元素的类型， 改变这个数组的类型\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e升级操作为整数集合带来了操作上的灵活性， 并且尽可能地节约了内存\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e整数集合只支持升级操作， 不支持降级操作\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"整数集合实现\"\u003e\u003ca href=\"#整数集合实现\" class=\"headerlink\" title=\"整数集合实现\"\u003e\u003c/a\u003e整数集合实现\u003c/h3\u003e\u003cp\u003e整数集合是 Redis 用于保存整数值的集合抽象数据结构， 它可以保存类型为 \u003ccode\u003eint16_t\u003c/code\u003e 、 \u003ccode\u003eint32_t\u003c/code\u003e 或者 \u003ccode\u003eint64_t\u003c/code\u003e 的整数值， 并且保证集合中不会出现重复元素。\u003c/p\u003e\n\u003cp\u003e每个 \u003ccode\u003eintset.h/intset\u003c/code\u003e 结构表示一个整数集合：\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003eintset\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 编码方式\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003euint32_t\u003c/span\u003e encoding;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 集合包含的元素数量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003euint32_t\u003c/span\u003e length;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 保存元素的数组\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint8_t\u003c/span\u003e contents[];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} intset;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003econtents\u003c/code\u003e 数组是整数集合的底层实现： 整数集合的每个元素都是 \u003ccode\u003econtents\u003c/code\u003e 数组的一个数组项（item）， 各个项在数组中按值的大小从小到大有序地排列， 并且数组中不包含任何重复项。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elength\u003c/code\u003e 属性记录了整数集合包含的元素数量， 也即是 \u003ccode\u003econtents\u003c/code\u003e 数组的长度。\u003c/li\u003e\n\u003cli\u003e虽然 \u003ccode\u003eintset\u003c/code\u003e 结构将 \u003ccode\u003econtents\u003c/code\u003e 属性声明为 \u003ccode\u003eint8_t\u003c/code\u003e 类型的数组， 但实际上 \u003ccode\u003econtents\u003c/code\u003e 数组并不保存任何 \u003ccode\u003eint8_t\u003c/code\u003e 类型的值 —— \u003ccode\u003econtents\u003c/code\u003e 数组的真正类型取决于 \u003ccode\u003eencoding\u003c/code\u003e 属性的值：\u003cul\u003e\n\u003cli\u003e如果 \u003ccode\u003eencoding\u003c/code\u003e 属性的值为 \u003ccode\u003eINTSET_ENC_INT16\u003c/code\u003e ， 那么 \u003ccode\u003econtents\u003c/code\u003e 就是一个 \u003ccode\u003eint16_t\u003c/code\u003e 类型的数组， 数组里的每个项都是一个 \u003ccode\u003eint16_t\u003c/code\u003e 类型的整数值 （最小值为 \u003ccode\u003e-32,768\u003c/code\u003e ，最大值为 \u003ccode\u003e32,767\u003c/code\u003e ）。\u003c/li\u003e\n\u003cli\u003e如果 \u003ccode\u003eencoding\u003c/code\u003e 属性的值为 \u003ccode\u003eINTSET_ENC_INT32\u003c/code\u003e ， 那么 \u003ccode\u003econtents\u003c/code\u003e 就是一个 \u003ccode\u003eint32_t\u003c/code\u003e 类型的数组， 数组里的每个项都是一个 \u003ccode\u003eint32_t\u003c/code\u003e 类型的整数值 （最小值为 \u003ccode\u003e-2,147,483,648\u003c/code\u003e ，最大值为 \u003ccode\u003e2,147,483,647\u003c/code\u003e ）。\u003c/li\u003e\n\u003cli\u003e如果 \u003ccode\u003eencoding\u003c/code\u003e 属性的值为 \u003ccode\u003eINTSET_ENC_INT64\u003c/code\u003e ， 那么 \u003ccode\u003econtents\u003c/code\u003e 就是一个 \u003ccode\u003eint64_t\u003c/code\u003e 类型的数组， 数组里的每个项都是一个 \u003ccode\u003eint64_t\u003c/code\u003e 类型的整数值 （最小值为 \u003ccode\u003e-9,223,372,036,854,775,808\u003c/code\u003e ，最大值为 \u003ccode\u003e9,223,372,036,854,775,807\u003c/code\u003e ）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"http://redisbook.com/_images/graphviz-acf7fe010d7b09c5d2500c72eb555863e67ad74f.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://redisbook.com/_images/graphviz-878c08b90e7bbd02863d3e5cad116b36785ea30e.png\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"整数集合升级\"\u003e\u003ca href=\"#整数集合升级\" class=\"headerlink\" title=\"整数集合升级\"\u003e\u003c/a\u003e整数集合升级\u003c/h3\u003e\u003cp\u003e每当我们要将一个新元素添加到整数集合里面， 并且新元素的类型比整数集合现有所有元素的类型都要长时， 整数集合需要先进行升级（upgrade）， 然后才能将新元素添加到整数集合里面。\u003c/p\u003e\n\u003cp\u003e升级整数集合并添加新元素共分为三步进行：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e根据新元素的类型， 扩展整数集合底层数组的空间大小， 并为新元素分配空间。\u003c/li\u003e\n\u003cli\u003e将底层数组现有的所有元素都转换成与新元素相同的类型， 并将类型转换后的元素放置到正确的位上， 而且在放置元素的过程中， 需要继续维持底层数组的有序性质不变。\u003c/li\u003e\n\u003cli\u003e将新元素添加到底层数组里面。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e因为每次向整数集合添加新元素都可能会引起升级， 而每次升级都需要对底层数组中已有的所有元素进行类型转换， 所以向整数集合添加新元素的时间复杂度为 O(N) 。\u003c/p\u003e\n\u003ch2 id=\"压缩列表\"\u003e\u003ca href=\"#压缩列表\" class=\"headerlink\" title=\"压缩列表\"\u003e\u003c/a\u003e压缩列表\u003c/h2\u003e\u003ch3 id=\"压缩列表简介\"\u003e\u003ca href=\"#压缩列表简介\" class=\"headerlink\" title=\"压缩列表简介\"\u003e\u003c/a\u003e压缩列表简介\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e压缩列表是一种为节约内存而开发的顺序型数据结构\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e压缩列表（ziplist）被用作列表键和哈希键的底层实现之一\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e当一个列表键只包含少量列表项， 并且每个列表项要么就是小整数值， 要么就是长度比较短的字符串， 那么 Redis 就会使用压缩列表来做列表键的底层实现。\u003c/li\u003e\n\u003cli\u003e当一个哈希键只包含少量键值对， 并且每个键值对的键和值要么就是小整数值， 要么就是长度比较短的字符串， 那么 Redis 就会使用压缩列表来做哈希键的底层实现。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e压缩列表可以包含多个节点，每个节点可以保存一个字节数组或者整数值\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e添加新节点到压缩列表， 或者从压缩列表中删除节点， 可能会引发连锁更新操作， 但这种操作出现的几率并不高。\u003c/p\u003e\n\u003ch3 id=\"压缩列表实现\"\u003e\u003ca href=\"#压缩列表实现\" class=\"headerlink\" title=\"压缩列表实现\"\u003e\u003c/a\u003e压缩列表实现\u003c/h3\u003e\u003cp\u003e压缩列表各个组成部分的详细说明\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e属性\u003c/th\u003e\n\u003cth align=\"left\"\u003e类型\u003c/th\u003e\n\u003cth align=\"left\"\u003e长度\u003c/th\u003e\n\u003cth align=\"left\"\u003e用途\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003ezlbytes\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003euint32_t\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003e4\u003c/code\u003e 字节\u003c/td\u003e\n\u003ctd align=\"left\"\u003e记录整个压缩列表占用的内存字节数：在对压缩列表进行内存重分配， 或者计算 \u003ccode\u003ezlend\u003c/code\u003e 的位置时使用。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003ezltail\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003euint32_t\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003e4\u003c/code\u003e 字节\u003c/td\u003e\n\u003ctd align=\"left\"\u003e记录压缩列表表尾节点距离压缩列表的起始地址有多少字节： 通过这个偏移量，程序无须遍历整个压缩列表就可以确定表尾节点的地址。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003ezllen\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003euint16_t\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003e2\u003c/code\u003e 字节\u003c/td\u003e\n\u003ctd align=\"left\"\u003e记录了压缩列表包含的节点数量： 当这个属性的值小于 \u003ccode\u003eUINT16_MAX\u003c/code\u003e （\u003ccode\u003e65535\u003c/code\u003e）时， 这个属性的值就是压缩列表包含节点的数量； 当这个值等于 \u003ccode\u003eUINT16_MAX\u003c/code\u003e 时， 节点的真实数量需要遍历整个压缩列表才能计算得出。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eentryX\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e列表节点\u003c/td\u003e\n\u003ctd align=\"left\"\u003e不定\u003c/td\u003e\n\u003ctd align=\"left\"\u003e压缩列表包含的各个节点，节点的长度由节点保存的内容决定。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003ezlend\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003euint8_t\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003e1\u003c/code\u003e 字节\u003c/td\u003e\n\u003ctd align=\"left\"\u003e特殊值 \u003ccode\u003e0xFF\u003c/code\u003e （十进制 \u003ccode\u003e255\u003c/code\u003e ），用于标记压缩列表的末端。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"对象\"\u003e\u003ca href=\"#对象\" class=\"headerlink\" title=\"对象\"\u003e\u003c/a\u003e对象\u003c/h2\u003e\u003cp\u003eRedis 并没有直接使用这些数据结构来实现键值对数据库， 而是基于这些数据结构创建了一个对象系统， 这个系统包含字符串对象、列表对象、哈希对象、集合对象和有序集合对象这五种类型的对象， 每种对象都用到了至少一种我们前面所介绍的数据结构。\u003c/p\u003e\n\u003ch3 id=\"对象简介\"\u003e\u003ca href=\"#对象简介\" class=\"headerlink\" title=\"对象简介\"\u003e\u003c/a\u003e对象简介\u003c/h3\u003e\u003cp\u003eRedis 数据库中的每个键值对的键和值都是一个对象。\u003c/p\u003e\n\u003cp\u003eRedis 共有字符串、列表、哈希、集合、有序集合五种类型的对象， 每种类型的对象至少都有两种或以上的编码方式， 不同的编码可以在不同的使用场景上优化对象的使用效率。\u003c/p\u003e\n\u003cp\u003e服务器在执行某些命令之前， 会先检查给定键的类型能否执行指定的命令， 而检查一个键的类型就是检查键的值对象的类型。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e基于引用计数技术的内存回收机制\u003c/strong\u003e - Redis 的对象系统带有引用计数实现的内存回收机制， 当一个对象不再被使用时， 该对象所占用的内存就会被自动释放。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e基于引用计数技术的对象共享机制\u003c/strong\u003e - Redis 会共享值为 \u003ccode\u003e0\u003c/code\u003e 到 \u003ccode\u003e9999\u003c/code\u003e 的字符串对象。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e计算数据库键的空转时长\u003c/strong\u003e - 对象会记录自己的最后一次被访问的时间， 这个时间可以用于计算对象的空转时间。\u003c/p\u003e\n\u003ch3 id=\"对象的类型\"\u003e\u003ca href=\"#对象的类型\" class=\"headerlink\" title=\"对象的类型\"\u003e\u003c/a\u003e对象的类型\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eRedis 使用对象来表示数据库中的键和值\u003c/strong\u003e。每次当我们在 Redis 的数据库中新创建一个键值对时， 我们至少会创建两个对象， 一个对象用作键值对的键（键对象）， 另一个对象用作键值对的值（值对象）。\u003c/p\u003e\n\u003cp\u003eRedis 中的每个对象都由一个 \u003ccode\u003eredisObject\u003c/code\u003e 结构表示， 该结构中和保存数据有关的三个属性分别是 \u003ccode\u003etype\u003c/code\u003e 属性、 \u003ccode\u003eencoding\u003c/code\u003e 属性和 \u003ccode\u003eptr\u003c/code\u003e 属性：\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003eredisObject\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 类型\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eunsigned\u003c/span\u003e type:\u003cspan class=\"number\"\u003e4\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 编码\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eunsigned\u003c/span\u003e encoding:\u003cspan class=\"number\"\u003e4\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 指向底层实现数据结构的指针\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003evoid\u003c/span\u003e *ptr;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} robj;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e对象的 \u003ccode\u003etype\u003c/code\u003e 属性记录了对象的类型，有以下类型：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e对象\u003c/th\u003e\n\u003cth align=\"left\"\u003e对象 \u003ccode\u003etype\u003c/code\u003e 属性的值\u003c/th\u003e\n\u003cth align=\"left\"\u003eTYPE 命令的输出\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd align=\"left\"\u003e字符串对象\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_STRING\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003e\u0026#34;string\u0026#34;\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e列表对象\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_LIST\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003e\u0026#34;list\u0026#34;\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e哈希对象\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_HASH\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003e\u0026#34;hash\u0026#34;\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e集合对象\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_SET\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003e\u0026#34;set\u0026#34;\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e有序集合对象\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_ZSET\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003e\u0026#34;zset\u0026#34;\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003eRedis 数据库保存的键值对来说， 键总是一个字符串对象， 而值则可以是字符串对象、列表对象、哈希对象、集合对象或者有序集合对象的其中一种。\u003c/p\u003e\n\u003cp\u003e【示例】通过 \u003ccode\u003eTYPE\u003c/code\u003e 命令查看数据库键的值对象的类型\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e# \u003c/span\u003e\u003cspan class=\"language-bash\"\u003e键为字符串对象，值为字符串对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eSET msg \u003cspan class=\"string\"\u003e\u0026#34;hello world\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eOK\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eTYPE msg\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003estring\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e# \u003c/span\u003e\u003cspan class=\"language-bash\"\u003e键为字符串对象，值为列表对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eRPUSH numbers 1 3 5\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(integer) 6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eTYPE numbers\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003elist\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e# \u003c/span\u003e\u003cspan class=\"language-bash\"\u003e键为字符串对象，值为哈希对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eHMSET profile name Tome age 25 career Programmer\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eOK\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eTYPE profile\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehash\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e# \u003c/span\u003e\u003cspan class=\"language-bash\"\u003e键为字符串对象，值为集合对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eSADD fruits apple banana cherry\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(integer) 3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eTYPE fruits\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eset\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e# \u003c/span\u003e\u003cspan class=\"language-bash\"\u003e键为字符串对象，值为有序集合对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eZADD price 8.5 apple 5.0 banana 6.0 cherry\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(integer) 3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eTYPE price\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ezset\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"对象的编码\"\u003e\u003ca href=\"#对象的编码\" class=\"headerlink\" title=\"对象的编码\"\u003e\u003c/a\u003e对象的编码\u003c/h3\u003e\u003cp\u003e对象的 \u003ccode\u003eptr\u003c/code\u003e 指针指向对象的底层实现数据结构， 而这些数据结构由对象的 \u003ccode\u003eencoding\u003c/code\u003e 属性决定。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eencoding\u003c/code\u003e 属性记录了对象所使用的编码， 也即是说这个对象使用了什么数据结构作为对象的底层实现。\u003c/p\u003e\n\u003cp\u003eRedis 中每种类型的对象都至少使用了两种不同的编码，\u003cstrong\u003e不同的编码可以在不同的使用场景上优化对象的使用效率\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eRedis 支持的编码如下所示：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e类型\u003c/th\u003e\n\u003cth align=\"left\"\u003e编码\u003c/th\u003e\n\u003cth align=\"left\"\u003e对象\u003c/th\u003e\n\u003cth\u003e\u003cstrong\u003eOBJECT ENCODING\u003c/strong\u003e \u003cstrong\u003e命令输出\u003c/strong\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_STRING\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_ENCODING_INT\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e使用整数值实现的字符串对象。\u003c/td\u003e\n\u003ctd\u003e“int”\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_STRING\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_ENCODING_EMBSTR\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e使用 \u003ccode\u003eembstr\u003c/code\u003e 编码的简单动态字符串实现的字符串对象。\u003c/td\u003e\n\u003ctd\u003e“embstr”\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_STRING\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_ENCODING_RAW\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e使用简单动态字符串实现的字符串对象。\u003c/td\u003e\n\u003ctd\u003e“raw”\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_LIST\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_ENCODING_ZIPLIST\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e使用压缩列表实现的列表对象。\u003c/td\u003e\n\u003ctd\u003e“ziplist”\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_LIST\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_ENCODING_LINKEDLIST\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e使用双端链表实现的列表对象。\u003c/td\u003e\n\u003ctd\u003e“linkedlist”\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_HASH\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_ENCODING_ZIPLIST\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e使用压缩列表实现的哈希对象。\u003c/td\u003e\n\u003ctd\u003e“ziplist”\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_HASH\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_ENCODING_HT\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e使用字典实现的哈希对象。\u003c/td\u003e\n\u003ctd\u003e“hashtable”\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_SET\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_ENCODING_INTSET\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e使用整数集合实现的集合对象。\u003c/td\u003e\n\u003ctd\u003e“intset”\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_SET\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_ENCODING_HT\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e使用字典实现的集合对象。\u003c/td\u003e\n\u003ctd\u003e“hashtable”\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_ZSET\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_ENCODING_ZIPLIST\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e使用压缩列表实现的有序集合对象。\u003c/td\u003e\n\u003ctd\u003e“ziplist”\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_ZSET\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eREDIS_ENCODING_SKIPLIST\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e使用跳表和字典实现的有序集合对象。\u003c/td\u003e\n\u003ctd\u003e“skiplist”\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e【示例】使用 \u003ccode\u003eOBJECT ENCODING\u003c/code\u003e 命令可以查看数据库键的值对象的编码\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eSET msg \u003cspan class=\"string\"\u003e\u0026#34;hello wrold\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eOK\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eOBJECT ENCODING msg\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#34;embstr\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eSET story \u003cspan class=\"string\"\u003e\u0026#34;long long long long long long ago ...\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eOK\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eOBJECT ENCODING story\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#34;raw\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eSADD numbers 1 3 5\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(integer) 3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eOBJECT ENCODING numbers\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#34;intset\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eSADD numbers \u003cspan class=\"string\"\u003e\u0026#34;seven\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(integer) 1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eOBJECT ENCODING numbers\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#34;hashtable\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"类型检查与命令多态\"\u003e\u003ca href=\"#类型检查与命令多态\" class=\"headerlink\" title=\"类型检查与命令多态\"\u003e\u003c/a\u003e类型检查与命令多态\u003c/h3\u003e\u003cp\u003eRedis 中用于操作键的命令基本上可以分为两种类型。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e多态命令\u003c/strong\u003e - 可以对任何类型的键执行。如 DEL、 EXPIRE 、 RENAME 、 TYPE 、 OBJECT 等命令。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e特定类型命令\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003eSET 、 GET 、 APPEND 、 STRLEN 等命令只能对字符串键执行；\u003c/li\u003e\n\u003cli\u003eHDEL 、 HSET 、 HGET 、 HLEN 等命令只能对哈希键执行；\u003c/li\u003e\n\u003cli\u003eRPUSH 、 LPOP 、 LINSERT 、 LLEN 等命令只能对列表键执行；\u003c/li\u003e\n\u003cli\u003eSADD 、 SPOP 、 SINTER 、 SCARD 等命令只能对集合键执行；\u003c/li\u003e\n\u003cli\u003eZADD 、 ZCARD 、 ZRANK 、 ZSCORE 等命令只能对有序集合键执行；\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e为了确保只有指定类型的键可以执行某些特定的命令，Redis 在执行一个类型特定的命令之前， Redis 会先检查输入键的类型是否正确， 然后再决定是否执行给定的命令。类型特定命令所进行的类型检查是通过 \u003ccode\u003eredisObject\u003c/code\u003e 结构的 \u003ccode\u003etype\u003c/code\u003e 属性来实现的：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在执行一个类型特定命令之前， 服务器会先检查输入数据库键的值对象是否为执行命令所需的类型， 如果是的话， 服务器就对键执行指定的命令；\u003c/li\u003e\n\u003cli\u003e否则， 服务器将拒绝执行命令， 并向客户端返回一个类型错误。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRedis 除了会根据值对象的类型来判断键是否能够执行指定命令之外， 还会根据值对象的编码方式， 选择正确的命令实现代码来执行命令。\u003c/p\u003e\n\u003ch3 id=\"内存回收\"\u003e\u003ca href=\"#内存回收\" class=\"headerlink\" title=\"内存回收\"\u003e\u003c/a\u003e内存回收\u003c/h3\u003e\u003cp\u003e由于 C 语言不支持内存回收，Redis 内部实现了一套基于引用计数的内存回收机制。\u003c/p\u003e\n\u003cp\u003e每个对象的引用计数信息由 \u003ccode\u003eredisObject\u003c/code\u003e 结构的 \u003ccode\u003erefcount\u003c/code\u003e 属性记录：\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003eredisObject\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 引用计数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e refcount;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} robj;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e对象的引用计数信息会随着对象的使用状态而不断变化：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在创建一个新对象时， 引用计数的值会被初始化为 \u003ccode\u003e1\u003c/code\u003e ；\u003c/li\u003e\n\u003cli\u003e当对象被一个新程序使用时， 它的引用计数值会被增一；\u003c/li\u003e\n\u003cli\u003e当对象不再被一个程序使用时， 它的引用计数值会被减一；\u003c/li\u003e\n\u003cli\u003e当对象的引用计数值变为 \u003ccode\u003e0\u003c/code\u003e 时， 对象所占用的内存会被释放。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"对象共享\"\u003e\u003ca href=\"#对象共享\" class=\"headerlink\" title=\"对象共享\"\u003e\u003c/a\u003e对象共享\u003c/h3\u003e\u003cp\u003e在 Redis 中， 让多个键共享同一个值对象需要执行以下两个步骤：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e将数据库键的值指针指向一个现有的值对象；\u003c/li\u003e\n\u003cli\u003e将被共享的值对象的引用计数增一。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e共享对象机制对于节约内存非常有帮助， 数据库中保存的相同值对象越多， 对象共享机制就能节约越多的内存。\u003c/p\u003e\n\u003cp\u003eRedis 会在初始化服务器时， 共享值为 \u003ccode\u003e0\u003c/code\u003e 到 \u003ccode\u003e9999\u003c/code\u003e 的字符串对象。\u003c/p\u003e\n\u003ch3 id=\"对象的空转时长\"\u003e\u003ca href=\"#对象的空转时长\" class=\"headerlink\" title=\"对象的空转时长\"\u003e\u003c/a\u003e对象的空转时长\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eredisObject\u003c/code\u003e 的 \u003ccode\u003elru\u003c/code\u003e 属性记录了对象最后一次被命令程序访问的时间：\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003eredisObject\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eunsigned\u003c/span\u003e lru:\u003cspan class=\"number\"\u003e22\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} robj;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eOBJECT IDLETIME 命令可以打印出给定键的空转时长， 这一空转时长就是通过将当前时间减去键的值对象的 \u003ccode\u003elru\u003c/code\u003e 时间计算得出的：\u003c/p\u003e\n\u003cfigure class=\"highlight node-repl\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"language-javascript\"\u003e\u003cspan class=\"variable constant_\"\u003eSET\u003c/span\u003e msg \u003cspan class=\"string\"\u003e\u0026#34;hello world\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eOK\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 等待一小段时间\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"language-javascript\"\u003e\u003cspan class=\"variable constant_\"\u003eOBJECT\u003c/span\u003e \u003cspan class=\"variable constant_\"\u003eIDLETIME\u003c/span\u003e msg\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(integer) 20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 等待一阵子\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"language-javascript\"\u003e\u003cspan class=\"variable constant_\"\u003eOBJECT\u003c/span\u003e \u003cspan class=\"variable constant_\"\u003eIDLETIME\u003c/span\u003e msg\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(integer) 180\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 访问 msg 键的值\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"language-javascript\"\u003e\u003cspan class=\"variable constant_\"\u003eGET\u003c/span\u003e msg\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#34;hello world\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 键处于活跃状态，空转时长为 0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"language-javascript\"\u003e\u003cspan class=\"variable constant_\"\u003eOBJECT\u003c/span\u003e \u003cspan class=\"variable constant_\"\u003eIDLETIME\u003c/span\u003e msg\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(integer) 0\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e注意\u003c/p\u003e\n\u003cp\u003eOBJECT IDLETIME 命令的实现是特殊的， 这个命令在访问键的值对象时， 不会修改值对象的 \u003ccode\u003elru\u003c/code\u003e 属性。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e除了可以被 OBJECT IDLETIME 命令打印出来之外， 键的空转时长还有另外一项作用： 如果服务器打开了 \u003ccode\u003emaxmemory\u003c/code\u003e 选项， 并且服务器用于回收内存的算法为 \u003ccode\u003evolatile-lru\u003c/code\u003e 或者 \u003ccode\u003eallkeys-lru\u003c/code\u003e ， 那么当服务器占用的内存数超过了 \u003ccode\u003emaxmemory\u003c/code\u003e 选项所设置的上限值时， 空转时长较高的那部分键会优先被服务器释放， 从而回收内存。\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://item.jd.com/11486101.html\"\u003e《Redis 设计与实现》\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2023-08-23T07:14:13Z",
  "Author": "钝悟 ◾ Dunwu"
}