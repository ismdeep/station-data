{
  "Source": "dunwu",
  "Title": "JavaWeb 之 Servlet 指南",
  "Link": "https://dunwu.github.io/blog/pages/e98894/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"JavaWeb-之-Servlet-指南\"\u003e\u003ca href=\"#JavaWeb-之-Servlet-指南\" class=\"headerlink\" title=\"JavaWeb 之 Servlet 指南\"\u003e\u003c/a\u003eJavaWeb 之 Servlet 指南\u003c/h1\u003e\u003ch2 id=\"JavaWeb-简介\"\u003e\u003ca href=\"#JavaWeb-简介\" class=\"headerlink\" title=\"JavaWeb 简介\"\u003e\u003c/a\u003eJavaWeb 简介\u003c/h2\u003e\u003ch3 id=\"Web-应用程序\"\u003e\u003ca href=\"#Web-应用程序\" class=\"headerlink\" title=\"Web 应用程序\"\u003e\u003c/a\u003eWeb 应用程序\u003c/h3\u003e\u003cp\u003eWeb，在英语中 web 即表示网页的意思，它用于表示 Internet 主机上供外界访问的资源。\u003c/p\u003e\n\u003cp\u003eWeb 应用程序是一种可以通过 Web 访问的应用程序，程序的最大好处是用户很容易访问应用程序，用户只需要有浏览器即可，不需要再安装其他软件。\u003c/p\u003e\n\u003cp\u003eInternet 上供外界访问的 Web 资源分为：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e静态 web 资源：指 web 页面中供人们浏览的数据始终是不变。常见静态资源文件：html、css、各种图片类型（jpg、png）\u003c/li\u003e\n\u003cli\u003e动态 web 资源：指 web 页面中供人们浏览的数据是由程序产生的，不同时间点访问 web 页面看到的内容各不相同。常见动态资源技术：JSP/Servlet、ASP、PHP\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"常见-Web-服务器\"\u003e\u003ca href=\"#常见-Web-服务器\" class=\"headerlink\" title=\"常见 Web 服务器\"\u003e\u003c/a\u003e常见 Web 服务器\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://tomcat.apache.org/\"\u003eTomcat\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.eclipse.org/jetty/\"\u003eJetty\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://caucho.com/\"\u003eResin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://httpd.apache.org/\"\u003eApache\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://nginx.org/en/\"\u003eNginx\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.ibm.com/cloud/websphere-application-platform\"\u003eWebSphere\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.oracle.com/middleware/technologies/weblogic.html\"\u003eWebLogic\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJBoss\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Servlet-简介\"\u003e\u003ca href=\"#Servlet-简介\" class=\"headerlink\" title=\"Servlet 简介\"\u003e\u003c/a\u003eServlet 简介\u003c/h2\u003e\u003ch3 id=\"什么是-Servlet\"\u003e\u003ca href=\"#什么是-Servlet\" class=\"headerlink\" title=\"什么是 Servlet\"\u003e\u003c/a\u003e什么是 Servlet\u003c/h3\u003e\u003cp\u003eServlet（Server Applet），即小服务程序或服务连接器。Servlet 是 Java 编写的服务器端程序，具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态 Web 内容。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e狭义的 Servlet 是指 Java 实现的一个接口。\u003c/li\u003e\n\u003cli\u003e广义的 Servlet 是指任何实现了这个 Servlet 接口的类。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eServlet 运行于支持 Java 的应用服务器中。从原理上讲，Servlet 可以响应任何类型的请求，但绝大多数情况下 Servlet 只用来扩展基于 HTTP 协议的 Web 服务器。\u003c/p\u003e\n\u003ch3 id=\"Servlet-和-CGI-的区别\"\u003e\u003ca href=\"#Servlet-和-CGI-的区别\" class=\"headerlink\" title=\"Servlet 和 CGI 的区别\"\u003e\u003c/a\u003eServlet 和 CGI 的区别\u003c/h3\u003e\u003cp\u003eServlet 技术出现之前，Web 主要使用 CGI 技术。它们的区别如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eServlet 是基于 Java 编写的，处于服务器进程中，他能够通过多线程方式运行 service() 方法，一个实例可以服务于多个请求，而且一般不会销毁；\u003c/li\u003e\n\u003cli\u003eCGI(Common Gateway Interface)，即通用网关接口。它会为每个请求产生新的进程，服务完成后销毁，所以效率上低于 Servlet。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Servlet-版本以及主要特性\"\u003e\u003ca href=\"#Servlet-版本以及主要特性\" class=\"headerlink\" title=\"Servlet 版本以及主要特性\"\u003e\u003c/a\u003eServlet 版本以及主要特性\u003c/h3\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e版本\u003c/th\u003e\n\u003cth\u003e日期\u003c/th\u003e\n\u003cth\u003eJAVA EE/JDK 版本\u003c/th\u003e\n\u003cth\u003e特性\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003eServlet 4.0\u003c/td\u003e\n\u003ctd\u003e2017 年 10 月\u003c/td\u003e\n\u003ctd\u003eJavaEE 8\u003c/td\u003e\n\u003ctd\u003eHTTP2\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eServlet 3.1\u003c/td\u003e\n\u003ctd\u003e2013 年 5 月\u003c/td\u003e\n\u003ctd\u003eJavaEE 7\u003c/td\u003e\n\u003ctd\u003e非阻塞 I/O，HTTP 协议升级机制\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eServlet 3.0\u003c/td\u003e\n\u003ctd\u003e2009 年 12 月\u003c/td\u003e\n\u003ctd\u003eJavaEE 6, JavaSE 6\u003c/td\u003e\n\u003ctd\u003e可插拔性，易于开发，异步 Servlet，安全性，文件上传\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eServlet 2.5\u003c/td\u003e\n\u003ctd\u003e2005 年 10 月\u003c/td\u003e\n\u003ctd\u003eJavaEE 5, JavaSE 5\u003c/td\u003e\n\u003ctd\u003e依赖 JavaSE 5，支持注解\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eServlet 2.4\u003c/td\u003e\n\u003ctd\u003e2003 年 11 月\u003c/td\u003e\n\u003ctd\u003eJ2EE 1.4, J2SE 1.3\u003c/td\u003e\n\u003ctd\u003eweb.xml 使用 XML Schema\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eServlet 2.3\u003c/td\u003e\n\u003ctd\u003e2001 年 8 月\u003c/td\u003e\n\u003ctd\u003eJ2EE 1.3, J2SE 1.2\u003c/td\u003e\n\u003ctd\u003eFilter\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eServlet 2.2\u003c/td\u003e\n\u003ctd\u003e1999 年 8 月\u003c/td\u003e\n\u003ctd\u003eJ2EE 1.2, J2SE 1.2\u003c/td\u003e\n\u003ctd\u003e成为 J2EE 标准\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eServlet 2.1\u003c/td\u003e\n\u003ctd\u003e1998 年 11 月\u003c/td\u003e\n\u003ctd\u003e未指定\u003c/td\u003e\n\u003ctd\u003eFirst official specification, added RequestDispatcher, ServletContext\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eServlet 2.0\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eJDK 1.1\u003c/td\u003e\n\u003ctd\u003ePart of Java Servlet Development Kit 2.0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eServlet 1.0\u003c/td\u003e\n\u003ctd\u003e1997 年 6 月\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"Servlet-任务\"\u003e\u003ca href=\"#Servlet-任务\" class=\"headerlink\" title=\"Servlet 任务\"\u003e\u003c/a\u003eServlet 任务\u003c/h3\u003e\u003cp\u003eServlet 执行以下主要任务：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。\u003c/li\u003e\n\u003cli\u003e读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。\u003c/li\u003e\n\u003cli\u003e处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。\u003c/li\u003e\n\u003cli\u003e发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。\u003c/li\u003e\n\u003cli\u003e发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Servlet-生命周期\"\u003e\u003ca href=\"#Servlet-生命周期\" class=\"headerlink\" title=\"Servlet 生命周期\"\u003e\u003c/a\u003eServlet 生命周期\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"http://www.runoob.com/wp-content/uploads/2014/07/Servlet-LifeCycle.jpg\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003eServlet 生命周期如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e加载\u003c/strong\u003e - 第一个到达服务器的 HTTP 请求被委派到 Servlet 容器。容器通过类加载器使用 Servlet 类对应的文件加载 servlet；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e初始化\u003c/strong\u003e - Servlet 通过调用 \u003cstrong\u003einit ()\u003c/strong\u003e 方法进行初始化。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e服务\u003c/strong\u003e - Servlet 调用 \u003cstrong\u003eservice()\u003c/strong\u003e 方法来处理客户端的请求。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e销毁\u003c/strong\u003e - Servlet 通过调用 \u003cstrong\u003edestroy()\u003c/strong\u003e 方法终止（结束）。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e卸载\u003c/strong\u003e - Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"Servlet-API\"\u003e\u003ca href=\"#Servlet-API\" class=\"headerlink\" title=\"Servlet API\"\u003e\u003c/a\u003eServlet API\u003c/h2\u003e\u003ch3 id=\"Servlet-包\"\u003e\u003ca href=\"#Servlet-包\" class=\"headerlink\" title=\"Servlet 包\"\u003e\u003c/a\u003eServlet 包\u003c/h3\u003e\u003cp\u003eJava Servlet 是运行在带有支持 Java Servlet 规范的解释器的 web 服务器上的 Java 类。\u003c/p\u003e\n\u003cp\u003eServlet 可以使用 \u003cstrong\u003ejavax.servlet\u003c/strong\u003e 和 \u003cstrong\u003ejavax.servlet.http\u003c/strong\u003e 包创建，它是 Java 企业版的标准组成部分，Java 企业版是支持大型开发项目的 Java 类库的扩展版本。\u003c/p\u003e\n\u003cp\u003eJava Servlet 就像任何其他的 Java 类一样已经被创建和编译。在您安装 Servlet 包并把它们添加到您的计算机上的 Classpath 类路径中之后，您就可以通过 JDK 的 Java 编译器或任何其他编译器来编译 Servlet。\u003c/p\u003e\n\u003ch3 id=\"Servlet-接口\"\u003e\u003ca href=\"#Servlet-接口\" class=\"headerlink\" title=\"Servlet 接口\"\u003e\u003c/a\u003eServlet 接口\u003c/h3\u003e\u003cp\u003eServlet 接口定义了下面五个方法：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"title class_\"\u003eServlet\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003einit\u003c/span\u003e\u003cspan class=\"params\"\u003e(ServletConfig var1)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ServletException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ServletConfig \u003cspan class=\"title function_\"\u003egetServletConfig\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eservice\u003c/span\u003e\u003cspan class=\"params\"\u003e(ServletRequest var1, ServletResponse var2)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ServletException, IOException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    String \u003cspan class=\"title function_\"\u003egetServletInfo\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003edestroy\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"init-方法\"\u003e\u003ca href=\"#init-方法\" class=\"headerlink\" title=\"init() 方法\"\u003e\u003c/a\u003einit() 方法\u003c/h4\u003e\u003cp\u003einit 方法被设计成只调用一次。它在第一次创建 Servlet 时被调用，在后续每次用户请求时不再调用。因此，它是用于一次性初始化，就像 Applet 的 init 方法一样。\u003c/p\u003e\n\u003cp\u003eServlet 创建于用户第一次调用对应于该 Servlet 的 URL 时，但是您也可以指定 Servlet 在服务器第一次启动时被加载。\u003c/p\u003e\n\u003cp\u003e当用户调用一个 Servlet 时，就会创建一个 Servlet 实例，每一个用户请求都会产生一个新的线程，适当的时候移交给 doGet 或 doPost 方法。init() 方法简单地创建或加载一些数据，这些数据将被用于 Servlet 的整个生命周期。\u003c/p\u003e\n\u003cp\u003einit 方法的定义如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003einit\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ServletException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 初始化代码...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"service-方法\"\u003e\u003ca href=\"#service-方法\" class=\"headerlink\" title=\"service() 方法\"\u003e\u003c/a\u003eservice() 方法\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eservice()\u003c/code\u003e 方法是执行实际任务的核心方法\u003c/strong\u003e。Servlet 容器（即 Web 服务器）调用 \u003ccode\u003eservice()\u003c/code\u003e 方法来处理来自客户端（浏览器）的请求，并把格式化的响应写回给客户端。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eservice()\u003c/code\u003e 方法有两个参数：\u003ccode\u003eServletRequest\u003c/code\u003e 和 \u003ccode\u003eServletResponse\u003c/code\u003e。\u003ccode\u003eServletRequest\u003c/code\u003e 用来封装请求信息，\u003ccode\u003eServletResponse\u003c/code\u003e 用来封装响应信息，因此\u003cstrong\u003e本质上这两个类是对通信协议的封装。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e每次服务器接收到一个 Servlet 请求时，服务器会产生一个新的线程并调用服务。\u003ccode\u003eservice()\u003c/code\u003e 方法检查 HTTP 请求类型（GET、POST、PUT、DELETE 等），并在适当的时候调用 \u003ccode\u003edoGet\u003c/code\u003e、\u003ccode\u003edoPost\u003c/code\u003e、\u003ccode\u003edoPut\u003c/code\u003e，\u003ccode\u003edoDelete\u003c/code\u003e 等方法。\u003c/p\u003e\n\u003cp\u003e下面是该方法的特征：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eservice\u003c/span\u003e\u003cspan class=\"params\"\u003e(ServletRequest request,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e                    ServletResponse response)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ServletException, IOException{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eservice() 方法由容器调用，service 方法在适当的时候调用 doGet、doPost、doPut、doDelete 等方法。所以，您不用对 service() 方法做任何动作，您只需要根据来自客户端的请求类型来重写 doGet() 或 doPost() 即可。\u003c/p\u003e\n\u003cp\u003edoGet() 和 doPost() 方法是每次服务请求中最常用的方法。下面是这两种方法的特征。\u003c/p\u003e\n\u003ch4 id=\"doGet-方法\"\u003e\u003ca href=\"#doGet-方法\" class=\"headerlink\" title=\"doGet() 方法\"\u003e\u003c/a\u003edoGet() 方法\u003c/h4\u003e\u003cp\u003eGET 请求来自于一个 URL 的正常请求，或者来自于一个未指定 METHOD 的 HTML 表单，它由 doGet() 方法处理。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003edoGet\u003c/span\u003e\u003cspan class=\"params\"\u003e(HttpServletRequest request,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e                  HttpServletResponse response)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ServletException, IOException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// Servlet 代码\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"doPost-方法\"\u003e\u003ca href=\"#doPost-方法\" class=\"headerlink\" title=\"doPost() 方法\"\u003e\u003c/a\u003edoPost() 方法\u003c/h4\u003e\u003cp\u003ePOST 请求来自于一个特别指定了 METHOD 为 POST 的 HTML 表单，它由 doPost() 方法处理。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003edoPost\u003c/span\u003e\u003cspan class=\"params\"\u003e(HttpServletRequest request,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e                   HttpServletResponse response)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ServletException, IOException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// Servlet 代码\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"destroy-方法\"\u003e\u003ca href=\"#destroy-方法\" class=\"headerlink\" title=\"destroy() 方法\"\u003e\u003c/a\u003edestroy() 方法\u003c/h4\u003e\u003cp\u003edestroy() 方法只会被调用一次，在 Servlet 生命周期结束时被调用。destroy() 方法可以让您的 Servlet 关闭数据库连接、停止后台线程、把 Cookie 列表或点击计数器写入到磁盘，并执行其他类似的清理活动。\u003c/p\u003e\n\u003cp\u003e在调用 destroy() 方法之后，servlet 对象被标记为垃圾回收。destroy 方法定义如下所示：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003edestroy\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 终止化代码...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"Servlet-和-HTTP-状态码\"\u003e\u003ca href=\"#Servlet-和-HTTP-状态码\" class=\"headerlink\" title=\"Servlet 和 HTTP 状态码\"\u003e\u003c/a\u003eServlet 和 HTTP 状态码\u003c/h2\u003e\u003cp\u003etitle: JavaEE Servlet HTTP 状态码\u003cbr/\u003edate: 2017-11-08\u003cbr/\u003ecategories:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ejavaee\u003cbr/\u003etags:\u003c/li\u003e\n\u003cli\u003ejavaee\u003c/li\u003e\n\u003cli\u003eservlet\u003c/li\u003e\n\u003cli\u003ehttp\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"HTTP-状态码\"\u003e\u003ca href=\"#HTTP-状态码\" class=\"headerlink\" title=\"HTTP 状态码\"\u003e\u003c/a\u003eHTTP 状态码\u003c/h3\u003e\u003cp\u003eHTTP 请求和 HTTP 响应消息的格式是类似的，结构如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e初始状态行 + 回车换行符（回车+换行）\u003c/li\u003e\n\u003cli\u003e零个或多个标题行+回车换行符\u003c/li\u003e\n\u003cli\u003e一个空白行，即回车换行符\u003c/li\u003e\n\u003cli\u003e一个可选的消息主体，比如文件、查询数据或查询输出\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e例如，服务器的响应头如下所示：\u003c/p\u003e\n\u003cfigure class=\"highlight http\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003eHTTP/1.1\u003c/span\u003e \u003cspan class=\"number\"\u003e200\u003c/span\u003e OK\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003eContent-Type\u003c/span\u003e\u003cspan class=\"punctuation\"\u003e: \u003c/span\u003etext/html\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003eHeader2\u003c/span\u003e\u003cspan class=\"punctuation\"\u003e: \u003c/span\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003eHeaderN\u003c/span\u003e\u003cspan class=\"punctuation\"\u003e: \u003c/span\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  (Blank Line)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;!doctype ...\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;html\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;head\u0026gt;...\u0026lt;/head\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;body\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;/body\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e状态行包括 HTTP 版本（在本例中为 HTTP/1.1）、一个状态码（在本例中为 200）和一个对应于状态码的短消息（在本例中为 OK）。\u003c/p\u003e\n\u003cp\u003e以下是可能从 Web 服务器返回的 HTTP 状态码和相关的信息列表：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e1**\u003c/code\u003e：信息性状态码\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2**\u003c/code\u003e：成功状态码\u003cul\u003e\n\u003cli\u003e200：请求正常成功\u003c/li\u003e\n\u003cli\u003e204：指示请求成功但没有返回新信息\u003c/li\u003e\n\u003cli\u003e206：指示服务器已完成对资源的部分 GET 请求\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e3**\u003c/code\u003e：重定向状态码\u003cul\u003e\n\u003cli\u003e301：永久性重定向\u003c/li\u003e\n\u003cli\u003e302：临时性重定向\u003c/li\u003e\n\u003cli\u003e304：服务器端允许请求访问资源，但未满足条件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e4**\u003c/code\u003e：客户端错误状态码\u003cul\u003e\n\u003cli\u003e400：请求报文中存在语法错误\u003c/li\u003e\n\u003cli\u003e401：发送的请求需要有通过 HTTP 认证的认证信息\u003c/li\u003e\n\u003cli\u003e403：对请求资源的访问被服务器拒绝了\u003c/li\u003e\n\u003cli\u003e404：服务器上无法找到请求的资源\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e5**\u003c/code\u003e：服务器错误状态码\u003cul\u003e\n\u003cli\u003e500：服务器端在执行请求时发生了错误\u003c/li\u003e\n\u003cli\u003e503：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"设置-HTTP-状态码的方法\"\u003e\u003ca href=\"#设置-HTTP-状态码的方法\" class=\"headerlink\" title=\"设置 HTTP 状态码的方法\"\u003e\u003c/a\u003e设置 HTTP 状态码的方法\u003c/h3\u003e\u003cp\u003e下面的方法可用于在 Servlet 程序中设置 HTTP 状态码。这些方法通过 \u003ccode\u003eHttpServletResponse\u003c/code\u003e 对象可用。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e序号\u003c/th\u003e\n\u003cth\u003e方法 \u0026amp; 描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e**public void setStatus ( int statusCode )**该方法设置一个任意的状态码。setStatus 方法接受一个 int（状态码）作为参数。如果您的反应包含了一个特殊的状态码和文档，请确保在使用 \u003cem\u003ePrintWriter\u003c/em\u003e 实际返回任何内容之前调用 setStatus。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e**public void sendRedirect(String url)**该方法生成一个 302 响应，连同一个带有新文档 URL 的 \u003cem\u003eLocation\u003c/em\u003e 头。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003e**public void sendError(int code, String message)**该方法发送一个状态码（通常为 404），连同一个在 HTML 文档内部自动格式化并发送到客户端的短消息。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"HTTP-状态码实例\"\u003e\u003ca href=\"#HTTP-状态码实例\" class=\"headerlink\" title=\"HTTP 状态码实例\"\u003e\u003c/a\u003eHTTP 状态码实例\u003c/h3\u003e\u003cp\u003e下面的例子把 407 错误代码发送到客户端浏览器，浏览器会显示 “Need authentication!!!” 消息。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 导入必需的 java 库\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e java.io.*;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e javax.servlet.*;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e javax.servlet.http.*;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e java.util.*;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 扩展 HttpServlet 类\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eshowError\u003c/span\u003e \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eHttpServlet\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 处理 GET 方法请求的方法\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003edoGet\u003c/span\u003e\u003cspan class=\"params\"\u003e(HttpServletRequest request,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e                    HttpServletResponse response)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ServletException, IOException\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"comment\"\u003e// 设置错误代码和原因\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      response.sendError(\u003cspan class=\"number\"\u003e407\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Need authentication!!!\u0026#34;\u003c/span\u003e );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 处理 POST 方法请求的方法\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003edoPost\u003c/span\u003e\u003cspan class=\"params\"\u003e(HttpServletRequest request,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e                     HttpServletResponse response)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ServletException, IOException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e     doGet(request, response);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e现在，调用上面的 Servlet 将显示以下结果：\u003c/p\u003e\n\u003cfigure class=\"highlight http\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eHTTP Status 407 - Need authentication!!!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etype Status report\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emessage Need authentication!!!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edescription The client must first authenticate itself with the proxy (Need authentication!!!).\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eApache Tomcat/5.5.29\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100027701\"\u003e深入拆解 Tomcat \u0026amp; Jetty\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/4189495/\"\u003eJava Web 整合开发王者归来\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-08-24T11:41:46Z",
  "Author": "钝悟 ◾ Dunwu"
}