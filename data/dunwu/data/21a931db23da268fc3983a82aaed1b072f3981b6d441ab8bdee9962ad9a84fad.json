{
  "Source": "dunwu",
  "Title": "Zipkin 快速入门",
  "Link": "https://dunwu.github.io/blog/pages/0a8826/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Zipkin-快速入门\"\u003e\u003ca href=\"#Zipkin-快速入门\" class=\"headerlink\" title=\"Zipkin 快速入门\"\u003e\u003c/a\u003eZipkin 快速入门\u003c/h1\u003e\u003cp\u003e\u003cstrong\u003eZipkin 是一个基于 Java 开发的、开源的、分布式实时数据跟踪系统（Distributed Tracking System）\u003c/strong\u003e。它采集有助于解决服务架构中延迟问题的实时数据。\u003c/p\u003e\n\u003cp\u003eZipkin 主要功能是聚集来自各个异构系统的实时监控数据。分布式跟踪系统还有其他比较成熟的实现，例如：Naver 的 Pinpoint、Apache 的 HTrace、阿里的鹰眼 Tracing、京东的 Hydra、新浪的 Watchman，美团点评的 CAT，skywalking 等。\u003c/p\u003e\n\u003cp\u003eZipkin 基于 Google Dapper 的论文设计而来，由 Twitter 公司开发贡献。\u003c/p\u003e\n\u003ch2 id=\"一、Zipkin-简介\"\u003e\u003ca href=\"#一、Zipkin-简介\" class=\"headerlink\" title=\"一、Zipkin 简介\"\u003e\u003c/a\u003e一、Zipkin 简介\u003c/h2\u003e\u003ch3 id=\"特性\"\u003e\u003ca href=\"#特性\" class=\"headerlink\" title=\"特性\"\u003e\u003c/a\u003e特性\u003c/h3\u003e\u003cp\u003e如果日志文件中有跟踪 ID，则可以直接跳至该跟踪 ID。 否则，您可以基于属性进行查询，例如服务，操作名称，标签和持续时间。 将为您总结一些有趣的数据，例如在服务中花费的时间百分比以及操作是否失败。\u003c/p\u003e\n\u003cp\u003eZipkin UI 还提供了一个依赖关系图，该关系图显示了每个应用程序中跟踪了多少个请求。这对于识别聚合行为（包括错误路径或对不赞成使用的服务的调用）很有帮助。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200211161706.png\" alt=\"Zipkin UI\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"多平台\"\u003e\u003ca href=\"#多平台\" class=\"headerlink\" title=\"多平台\"\u003e\u003c/a\u003e多平台\u003c/h3\u003e\u003cp\u003eZipkin 官方支持 C#、Go、Java、JavaScript、Ruby、Scala、PHP 语言。\u003c/p\u003e\n\u003cp\u003e除此以外，社区还贡献了多种其他语言的支持，详情可以参考官方文档：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zipkin.io/pages/tracers_instrumentation.html\"\u003eTracers and Instrumentation\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"数据\"\u003e\u003ca href=\"#数据\" class=\"headerlink\" title=\"数据\"\u003e\u003c/a\u003e数据\u003c/h3\u003e\u003cp\u003eZipkin 服务器捆绑了用于采集和存储数据的扩展。\u003c/p\u003e\n\u003cp\u003e默认情况下，数据可以通过 \u003ccode\u003eHttp\u003c/code\u003e，\u003ccode\u003eKafka\u003c/code\u003e 、\u003ccode\u003eRabbitMQ\u003c/code\u003e 或 RPC 传输。\u003c/p\u003e\n\u003cp\u003e并存储在内存中或 \u003ccode\u003eMySQL\u003c/code\u003e、\u003ccode\u003eCassandra\u003c/code\u003e 或 \u003ccode\u003eElasticsearch\u003c/code\u003e 中。\u003c/p\u003e\n\u003cp\u003e数据以 json 形式存储，可以参考：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zipkin.io/zipkin-api/#/default/post_spans\"\u003eZipkin 官方的 Swagger API\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200211162055.png\" alt=\"Zipkin Swagger API\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"二、Zipkin-安装\"\u003e\u003ca href=\"#二、Zipkin-安装\" class=\"headerlink\" title=\"二、Zipkin 安装\"\u003e\u003c/a\u003e二、Zipkin 安装\u003c/h2\u003e\u003ch3 id=\"Docker\"\u003e\u003ca href=\"#Docker\" class=\"headerlink\" title=\"Docker\"\u003e\u003c/a\u003eDocker\u003c/h3\u003e\u003cp\u003eDocker 启动方式：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edocker run -d -p 9411:9411 openzipkin/zipkin\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"Java\"\u003e\u003ca href=\"#Java\" class=\"headerlink\" title=\"Java\"\u003e\u003c/a\u003eJava\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003e注意：必须运行在 JDK8+ 环境\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eJava 启动方式：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecurl -sSL https://zipkin.io/quickstart.sh | bash -s\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ejava -jar zipkin.jar\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"编译方式\"\u003e\u003ca href=\"#编译方式\" class=\"headerlink\" title=\"编译方式\"\u003e\u003c/a\u003e编译方式\u003c/h3\u003e\u003cp\u003e适用于需要订制化的场景。\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e# \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eget the latest \u003cspan class=\"built_in\"\u003esource\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egit clone https://github.com/openzipkin/zipkin\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecd zipkin\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e# \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eBuild the server and also make its dependencies\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e./mvnw -DskipTests --also-make -pl zipkin-server clean install\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e# \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eRun the server\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ejava -jar ./zipkin-server/target/zipkin-server-*exec.jar\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"三、Zipkin-架构\"\u003e\u003ca href=\"#三、Zipkin-架构\" class=\"headerlink\" title=\"三、Zipkin 架构\"\u003e\u003c/a\u003e三、Zipkin 架构\u003c/h2\u003e\u003cp\u003eZipKin 可以分为两部分，\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一部分是 Zipkin server，用来作为数据的采集存储、数据分析与展示；\u003c/li\u003e\n\u003cli\u003e另一部分是 Zipkin client 是 Zipkin 基于不同的语言及框架封装的一些列客户端工具，这些工具完成了追踪数据的生成与上报功能。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e架构如下：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200211155836.png\" alt=\"Zipkin 架构\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"Zipkin-Server\"\u003e\u003ca href=\"#Zipkin-Server\" class=\"headerlink\" title=\"Zipkin Server\"\u003e\u003c/a\u003eZipkin Server\u003c/h3\u003e\u003cp\u003eZipkin Server 主要包括四个模块：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCollector\u003c/strong\u003e - 负责采集客户端传输的数据。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eStorage\u003c/strong\u003e - 负责存储采集的数据。当前支持 Memory，MySQL，Cassandra，ElasticSearch 等，默认存储在内存中。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAPI（Query）\u003c/strong\u003e - 负责查询 Storage 中存储的数据。提供简单的 JSON API 获取数据，主要提供给 web UI 使用。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUI\u003c/strong\u003e - 提供简单的 web 界面。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eInstrumented Client 和 Instrumented Server，是指分布式架构中使用了 Trace 工具的两个应用，Client 会调用 Server 提供的服务，两者都会向 Zipkin 上报 Trace 相关信息。在 Client 和 Server 通过 Transport 上报 Trace 信息后，由 Zipkin 的 Collector 模块接收，并由 Storage 模块将数据存储在对应的存储介质中，然后 Zipkin 提供 API 供 UI 界面查询 Trace 跟踪信息。Non-Instrumented Server，指的是未使用 Trace 工具的 Server，显然它不会上报 Trace 信息。\u003c/p\u003e\n\u003ch3 id=\"Zipkin-Client\"\u003e\u003ca href=\"#Zipkin-Client\" class=\"headerlink\" title=\"Zipkin Client\"\u003e\u003c/a\u003eZipkin Client\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eTracer\u003c/strong\u003e - \u003ccode\u003eTracer\u003c/code\u003e 存在于你的应用中，它负责采集关于已发生操作的实时元数据。它们通常会检测库，因此对于用户是透明的。例如，已检测的 Web 服务器记录它何时接收到请求，以及何时发送响应。收集的跟踪数据称为跨度（Span）。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInstrumentation\u003c/strong\u003e - Instrumentation 保证了生产环境的安全性和很少的开销。因此，它们仅在内部传播 ID，以告知接收方正在进行追踪。完成的 Span 将通过外部通信告知 Zipkin，类似于应用程序异步报告指标的方式。例如，当跟踪某个操作并且需要发出 http 请求时，会添加一些 header 来传播 ID。header 不用于发送详细信息，例如操作名称。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eReporter\u003c/strong\u003e - 能够将数据发送到 Zipkin 的检测应用程序中的组件，被称为 Reporter。Reporter 有多种传输方式，可以将跟踪数据发送到 Zipkin 采集器，后者将跟踪数据持久化保存到存储中。稍后，API 会查询存储以向 UI 提供渲染数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e以下是 Zipkin 的一个示例工作流：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e┌─────────────┐ ┌───────────────────────┐  ┌─────────────┐  ┌──────────────────┐\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e│ User Code   │ │ Trace Instrumentation │  │ Http Client │  │ Zipkin Collector │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e└─────────────┘ └───────────────────────┘  └─────────────┘  └──────────────────┘\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       │                 │                         │                 │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e           ┌─────────┐\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       │ ──┤GET /foo ├─▶ │ ────┐                   │                 │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e           └─────────┘         │ record tags\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       │                 │ ◀───┘                   │                 │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                           ────┐\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       │                 │     │ add trace headers │                 │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                           ◀───┘\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       │                 │ ────┐                   │                 │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                               │ record timestamp\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       │                 │ ◀───┘                   │                 │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                             ┌─────────────────┐\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       │                 │ ──┤GET /foo         ├─▶ │                 │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                             │X-B3-TraceId: aa │     ────┐\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       │                 │   │X-B3-SpanId: 6b  │   │     │           │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                             └─────────────────┘         │ invoke\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       │                 │                         │     │ request   │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                                         │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       │                 │                         │     │           │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                 ┌────────┐          ◀───┘\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       │                 │ ◀─────┤200 OK  ├─────── │                 │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                           ────┐ └────────┘\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       │                 │     │ record duration   │                 │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            ┌────────┐     ◀───┘\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       │ ◀──┤200 OK  ├── │                         │                 │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            └────────┘       ┌────────────────────────────────┐\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       │                 │ ──┤ asynchronously report span     ├────▶ │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                             │                                │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                             │{                               │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                             │  \u0026#34;traceId\u0026#34;: \u0026#34;aa\u0026#34;,              │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                             │  \u0026#34;id\u0026#34;: \u0026#34;6b\u0026#34;,                   │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                             │  \u0026#34;name\u0026#34;: \u0026#34;get\u0026#34;,                │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                             │  \u0026#34;timestamp\u0026#34;: 1483945573944000,│\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                             │  \u0026#34;duration\u0026#34;: 386000,           │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                             │  \u0026#34;annotations\u0026#34;: [              │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                             │--snip--                        │\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                             └────────────────────────────────┘\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eInstrumented client 和 server 是分别使用了 ZipKin Client 的服务，Zipkin Client 会根据配置将追踪数据发送到 Zipkin Server 中进行数据存储、分析和展示。\u003c/p\u003e\n\u003ch2 id=\"四、Zipkin-客户端\"\u003e\u003ca href=\"#四、Zipkin-客户端\" class=\"headerlink\" title=\"四、Zipkin 客户端\"\u003e\u003c/a\u003e四、Zipkin 客户端\u003c/h2\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/openzipkin/brave\"\u003eBrave\u003c/a\u003e 是 Java 版的 zipkin 客户端。\u003c/p\u003e\n\u003cp\u003e一般不会手动编写 Trace 相关的代码，Brave 提供可一些开箱即用的库，帮助我们追踪一些特定的请求。比如：dubbo、grpc、servlet、mysql、httpClient、kafka、springMVC 等。\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zipkin.io/\"\u003eZipkin 官网\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/openzipkin/zipkin\"\u003eZipkin Github\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/openzipkin/brave\"\u003ebrave\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-03-23T14:56:45Z",
  "Author": "钝悟 ◾ Dunwu"
}