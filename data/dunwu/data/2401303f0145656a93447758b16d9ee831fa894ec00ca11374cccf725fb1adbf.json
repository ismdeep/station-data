{
  "Source": "dunwu",
  "Title": "Redis 过期删除和内存淘汰",
  "Link": "https://dunwu.github.io/blog/pages/ce0453/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Redis-过期删除和内存淘汰\"\u003e\u003ca href=\"#Redis-过期删除和内存淘汰\" class=\"headerlink\" title=\"Redis 过期删除和内存淘汰\"\u003e\u003c/a\u003eRedis 过期删除和内存淘汰\u003c/h1\u003e\u003cblockquote\u003e\n\u003cp\u003e关键词：\u003ccode\u003e定时删除\u003c/code\u003e、\u003ccode\u003e惰性删除\u003c/code\u003e、\u003ccode\u003e定期删除\u003c/code\u003e、\u003ccode\u003eLRU\u003c/code\u003e、\u003ccode\u003eLFU\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"Redis-过期删除\"\u003e\u003ca href=\"#Redis-过期删除\" class=\"headerlink\" title=\"Redis 过期删除\"\u003e\u003c/a\u003eRedis 过期删除\u003c/h2\u003e\u003cp\u003eRedis 可以为每个键设置过期时间，当键过期时，会自动删除该键。\u003c/p\u003e\n\u003ch3 id=\"设置键的生存时间或过期时间\"\u003e\u003ca href=\"#设置键的生存时间或过期时间\" class=\"headerlink\" title=\"设置键的生存时间或过期时间\"\u003e\u003c/a\u003e设置键的生存时间或过期时间\u003c/h3\u003e\u003cp\u003eRedis 中，和键的生存时间相关的命令如下所示：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e命令\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://redis.io/commands/expire/\"\u003e\u003ccode\u003eEXPIRE\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e设置 key 的过期时间，单位为秒\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://redis.io/commands/pexpire/\"\u003e\u003ccode\u003ePEXPIRE\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e设置 key 的过期时间，单位为毫秒\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://redis.io/commands/expireat/\"\u003e\u003ccode\u003eEXPIREAT\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e设置 key 的过期时间为指定的秒级时间戳\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://redis.io/commands/pexpireat/\"\u003e\u003ccode\u003ePEXPIREAT\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e设置 key 的过期时间为指定的毫秒级时间戳\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://redis.io/commands/ttl/\"\u003e\u003ccode\u003eTTL\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e返回 key 的剩余生存时间，单位为秒\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://redis.io/commands/pttl/\"\u003e\u003ccode\u003ePTTL\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e返回 key 的剩余生存时间，单位为毫秒\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://redis.io/commands/persist/\"\u003e\u003ccode\u003ePERSIST\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e移除 key 的过期时间，key 将持久保持\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e【示例】EXPIRE、TTL 操作\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003e\u003cspan class=\"built_in\"\u003eset\u003c/span\u003e key value\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eOK\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e# \u003c/span\u003e\u003cspan class=\"language-bash\"\u003e设置 key 的生存时间为 60s\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eexpire key 60\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(integer) 1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e# \u003c/span\u003e\u003cspan class=\"language-bash\"\u003e查看 key 的剩余生存时间\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003ettl key\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(integer) 58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e# \u003c/span\u003e\u003cspan class=\"language-bash\"\u003e60s 之内\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eget key\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e# \u003c/span\u003e\u003cspan class=\"language-bash\"\u003e60s 之外\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eget key\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(nil)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【示例】EXPIREAT、TTL 操作\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003e\u003cspan class=\"built_in\"\u003eset\u003c/span\u003e key value\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eOK\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e# \u003c/span\u003e\u003cspan class=\"language-bash\"\u003e设置 key 的生存时间为 1692419299\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eexpireat key 1692419299\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(integer) 1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e# \u003c/span\u003e\u003cspan class=\"language-bash\"\u003e查看 key 的剩余生存时间\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003ettl key\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(integer) 9948\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e# \u003c/span\u003e\u003cspan class=\"language-bash\"\u003e1692419299 之前\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eget key\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e# \u003c/span\u003e\u003cspan class=\"language-bash\"\u003e1692419299 之后\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eget key\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(nil)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"如何保存过期时间\"\u003e\u003ca href=\"#如何保存过期时间\" class=\"headerlink\" title=\"如何保存过期时间\"\u003e\u003c/a\u003e如何保存过期时间\u003c/h4\u003e\u003cp\u003e在 Redis 中，redisDb 结构的 \u003ccode\u003eexpires\u003c/code\u003e 字典保存了数据库中所有键的过期时间，这个字典称为过期字典：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e过期字典的键是一个指针，这个指针指向某个键对象\u003c/li\u003e\n\u003cli\u003e过期字典的值是一个 \u003ccode\u003elong long\u003c/code\u003e 类型的整数，这个整数保存了键的过期时间——一个毫秒精度的 UNIX 时间戳。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003eredisDb\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 数据库键空间，保存着数据库中的所有键值对\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    dict *dict;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 键的过期时间，字典的键为键，字典的值为过期事件 UNIX 时间戳\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    dict *expires;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} redisDb;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e下图是一个带有过期字典的示例：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/202309171537744.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e当执行 \u003ccode\u003eEXPIRE\u003c/code\u003e、\u003ccode\u003ePEXPIRE\u003c/code\u003e、\u003ccode\u003eEXPIREAT\u003c/code\u003e、\u003ccode\u003ePEXPIREAT\u003c/code\u003e 命令，Redis 都会将其转为 \u003ccode\u003ePEXPIREAT\u003c/code\u003e 形式的时间戳，然后维护在 \u003ccode\u003eexpires\u003c/code\u003e 字典中。\u003c/p\u003e\n\u003ch4 id=\"过期键的判定\"\u003e\u003ca href=\"#过期键的判定\" class=\"headerlink\" title=\"过期键的判定\"\u003e\u003c/a\u003e过期键的判定\u003c/h4\u003e\u003cp\u003e过期键的判定流程如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e检查指定 key 是否存在于过期字典；如果存在，则取得 key 的过期时间。\u003c/li\u003e\n\u003cli\u003e检查当前时间戳是否大于 key 的过期时间：如果是，key 已过期；反之，key 未过期。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"过期删除策略\"\u003e\u003ca href=\"#过期删除策略\" class=\"headerlink\" title=\"过期删除策略\"\u003e\u003c/a\u003e过期删除策略\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e定时删除\u003c/strong\u003e - 在设置 key 的过期时间的同时，创建一个定时器，让定时器在 key 的过期时间来临时，立即执行对 key 的删除操作。\u003cul\u003e\n\u003cli\u003e优点 - 保证过期 key 被尽可能快的删除，释放内存。\u003c/li\u003e\n\u003cli\u003e缺点 - \u003cstrong\u003e如果过期 key 较多，可能会占用相当一部分的 CPU，从而影响服务器的吞吐量和响应时延\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e惰性删除\u003c/strong\u003e - 放任 key 过期不管，但是每次访问 key 时，都检查 key 是否过期，如果过期的话，就删除该 key ；如果没有过期，就返回该 key。\u003cul\u003e\n\u003cli\u003e优点 - 占用 CPU 最少。程序只会在读写键时，对当前键进行过期检查，因此不会有额外的 CPU 开销。\u003c/li\u003e\n\u003cli\u003e缺点 - \u003cstrong\u003e过期的 key 可能因为没有被访问，而一直无法释放，造成内存的浪费，有内存泄漏的风险\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e定期删除\u003c/strong\u003e - 每隔一段时间，程序就对数据库进行一次检查，删除里面的过期 key 。至于要删除多少过期 key ，以及要检查多少个数据库，则由算法决定。定期删除是前两种策略的一种折中方案。定期删除策略的难点是删除操作执行的时长和频率。\u003cul\u003e\n\u003cli\u003e执行太频或执行时间过长，就会出现和定时删除相同的问题；\u003c/li\u003e\n\u003cli\u003e执行太少或执行时间过短，就会出现和惰性删除相同的问题；\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Redis-的过期删除策略\"\u003e\u003ca href=\"#Redis-的过期删除策略\" class=\"headerlink\" title=\"Redis 的过期删除策略\"\u003e\u003c/a\u003eRedis 的过期删除策略\u003c/h3\u003e\u003cp\u003eRedis 同时采用了惰性删除和定期删除策略，以此在合理使用 CPU 和内存之间取得平衡。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRedis 定期删除策略的实现\u003c/strong\u003e - 由 \u003ccode\u003eredis.c/activeExpireCycle\u003c/code\u003e 函数实现，每当 Redis 周期性执行 \u003ccode\u003eredis.c/serverCron\u003c/code\u003e 函数时，\u003ccode\u003eactiveExpireCycle\u003c/code\u003e 函数就会被调用。\u003ccode\u003eactiveExpireCycle\u003c/code\u003e 函数会在规定时间内，遍历各个数据库，从 \u003ccode\u003eexpires\u003c/code\u003e 字典中随机检查一部分键的过期时间，并删除过期的键。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRedis 惰性删除策略的实现\u003c/strong\u003e - 由 \u003ccode\u003edb.c/expireIfNeeded\u003c/code\u003e 函数实现，所有读写命令在执行之前都会调用 \u003ccode\u003eexpireIfNeeded\u003c/code\u003e 函数对输入键进行检查：如果输入键已过期，将输入键从数据库中删除；否则，什么也不做。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/202309171604805.png\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"AOF、RDB-和复制对过期键的处理\"\u003e\u003ca href=\"#AOF、RDB-和复制对过期键的处理\" class=\"headerlink\" title=\"AOF、RDB 和复制对过期键的处理\"\u003e\u003c/a\u003eAOF、RDB 和复制对过期键的处理\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e生成 RDB 文件 - \u003cstrong\u003e执行 \u003ccode\u003eSAVE\u003c/code\u003e 命令或者 \u003ccode\u003eBGSAVE\u003c/code\u003e 命令，所产生的新 RDB 文件“不会包含已经过期的键”\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e载入 RDB 文件 - \u003cstrong\u003e主服务器“不会载入已过期的键”\u003c/strong\u003e；\u003cstrong\u003e从服务器会载入“会载入已过期的键”\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e生成 AOF 文件 - 当一个过期键未被删除时，不会影响 AOF 文件；当一个过期键被删除之后， 服务器会追加一条 \u003ccode\u003eDEL\u003c/code\u003e 命令到现有 AOF 文件的末尾， 显式地删除过期键。\u003c/li\u003e\n\u003cli\u003e重写 AOF 文件 - \u003cstrong\u003e执行 \u003ccode\u003eBGREWRITEAOF\u003c/code\u003e 命令所产生的重写 AOF 文件“不会包含已经过期的键”\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e复制 - 当主服务器删除一个过期键之后， 它会向所有从服务器发送一条 \u003ccode\u003eDEL\u003c/code\u003e 命令， 显式地删除过期键。从服务器即使发现过期键， 也不会自作主张地删除它， 而是等待主节点发来 DEL 命令， 这种统一、中心化的过期键删除策略可以保证主从服务器数据的一致性。\u003c/li\u003e\n\u003cli\u003e当 Redis 命令对数据库进行修改之后， 服务器会根据配置， 向客户端发送数据库通知。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Redis-内存淘汰\"\u003e\u003ca href=\"#Redis-内存淘汰\" class=\"headerlink\" title=\"Redis 内存淘汰\"\u003e\u003c/a\u003eRedis 内存淘汰\u003c/h2\u003e\u003ch3 id=\"Redis-内存淘汰要点\"\u003e\u003ca href=\"#Redis-内存淘汰要点\" class=\"headerlink\" title=\"Redis 内存淘汰要点\"\u003e\u003c/a\u003eRedis 内存淘汰要点\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e失效时间\u003c/strong\u003e - 作为一种定期清理无效数据的重要机制，在 Redis 提供的诸多命令中，\u003ccode\u003eEXPIRE\u003c/code\u003e、\u003ccode\u003eEXPIREAT\u003c/code\u003e、\u003ccode\u003ePEXPIRE\u003c/code\u003e、\u003ccode\u003ePEXPIREAT\u003c/code\u003e 以及 \u003ccode\u003eSETEX\u003c/code\u003e 和 \u003ccode\u003ePSETEX\u003c/code\u003e 均可以用来设置一条键值对的失效时间。而一条键值对一旦被关联了失效时间就会在到期后自动删除（或者说变得无法访问更为准确）。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e最大缓存\u003c/strong\u003e - Redis 允许通过 \u003ccode\u003emaxmemory\u003c/code\u003e 参数来设置内存最大值。当内存达设定的阀值，就会触发\u003cstrong\u003e内存淘汰\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e内存淘汰\u003c/strong\u003e - 内存淘汰是为了更好的利用内存——清理部分缓存，以此换取内存的利用率，即尽量保证 Redis 缓存中存储的是热点数据。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e非精准的 LRU\u003c/strong\u003e - 实际上 Redis 实现的 LRU 并不是可靠的 LRU，也就是名义上我们使用 LRU 算法淘汰键，但是实际上被淘汰的键并不一定是真正的最久没用的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Redis-内存淘汰策略\"\u003e\u003ca href=\"#Redis-内存淘汰策略\" class=\"headerlink\" title=\"Redis 内存淘汰策略\"\u003e\u003c/a\u003eRedis 内存淘汰策略\u003c/h3\u003e\u003cp\u003e内存淘汰只是 Redis 提供的一个功能，为了更好地实现这个功能，必须为不同的应用场景提供不同的策略，内存淘汰策略讲的是为实现内存淘汰我们具体怎么做，要解决的问题包括淘汰键空间如何选择？在键空间中淘汰键如何选择？\u003c/p\u003e\n\u003cp\u003eRedis 提供了下面几种内存淘汰策略供用户选：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e不淘汰\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003enoeviction\u003c/code\u003e\u003c/strong\u003e - 当内存使用达到阈值的时候，所有引起申请内存的命令会报错。这是 Redis 默认的策略。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e在过期键中进行淘汰\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003evolatile-random\u003c/code\u003e\u003c/strong\u003e - 在设置了过期时间的键空间中，随机移除某个 key。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003evolatile-ttl\u003c/code\u003e\u003c/strong\u003e - 在设置了过期时间的键空间中，具有更早过期时间的 key 优先移除。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003evolatile-lru\u003c/code\u003e\u003c/strong\u003e - 在设置了过期时间的键空间中，优先移除最近未使用的 key。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003evolatile-lfu\u003c/code\u003e\u003c/strong\u003e （Redis 4.0 新增）- 淘汰所有设置了过期时间的键值中，最少使用的键值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e在所有键中进行淘汰\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eallkeys-lru\u003c/code\u003e\u003c/strong\u003e - 在主键空间中，优先移除最近未使用的 key。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eallkeys-random\u003c/code\u003e\u003c/strong\u003e - 在主键空间中，随机移除某个 key。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eallkeys-lfu\u003c/code\u003e\u003c/strong\u003e (Redis 4.0 新增) - 淘汰整个键值中最少使用的键值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"如何选择淘汰策略\"\u003e\u003ca href=\"#如何选择淘汰策略\" class=\"headerlink\" title=\"如何选择淘汰策略\"\u003e\u003c/a\u003e如何选择淘汰策略\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e如果数据呈现幂等分布，也就是一部分数据访问频率高，一部分数据访问频率低，则使用 \u003ccode\u003eallkeys-lru\u003c/code\u003e 或 \u003ccode\u003eallkeys-lfu\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e如果数据呈现平均分布，也就是所有的数据访问频率都相同，则使用 \u003ccode\u003eallkeys-random\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e若 Redis 既用于缓存，也用于持久化存储时，适用 \u003ccode\u003evolatile-lru\u003c/code\u003e 、\u003ccode\u003evolatile-lfu\u003c/code\u003e、\u003ccode\u003evolatile-random\u003c/code\u003e。但是，这种情况下，也可以部署两个 Redis 集群来达到同样目的。\u003c/li\u003e\n\u003cli\u003e为 key 设置过期时间实际上会消耗更多的内存。因此，如果条件允许，建议使用 \u003ccode\u003eallkeys-lru\u003c/code\u003e 或 \u003ccode\u003eallkeys-lfu\u003c/code\u003e，从而更高效的使用内存。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://item.jd.com/11486101.html\"\u003e《Redis 设计与实现》\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2023-08-23T07:14:13Z",
  "Author": "钝悟 ◾ Dunwu"
}