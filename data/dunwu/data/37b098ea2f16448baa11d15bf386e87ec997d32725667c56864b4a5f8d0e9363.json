{
  "Source": "dunwu",
  "Title": "Mysql 存储引擎",
  "Link": "https://dunwu.github.io/blog/pages/5fe0f3/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Mysql-存储引擎\"\u003e\u003ca href=\"#Mysql-存储引擎\" class=\"headerlink\" title=\"Mysql 存储引擎\"\u003e\u003c/a\u003eMysql 存储引擎\u003c/h1\u003e\u003cp\u003e在文件系统中，Mysql 将每个数据库（也可以成为 schema）保存为数据目录下的一个子目录。创建表示，Mysql 会在数据库子目录下创建一个和表同名的 \u003ccode\u003e.frm\u003c/code\u003e 文件保存表的定义。因为 Mysql 使用文件系统的目录和文件来保存数据库和表的定义，大小写敏感性和具体平台密切相关。Windows 中大小写不敏感；类 Unix 中大小写敏感。\u003cstrong\u003e不同的存储引擎保存数据和索引的方式是不同的，但表的定义则是在 Mysql 服务层统一处理的。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eMySQL 的存储引擎采用了插件的形式，每个存储引擎都面向一种特定的数据库应用环境。同时开源的 MySQL 还允许开发人员设置自己的存储引擎，下面是一些常见的存储引擎：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInnoDB 存储引擎：它是 MySQL 5.5 版本之后默认的存储引擎，最大的特点是支持事务、行级锁定、外键约束等。\u003c/li\u003e\n\u003cli\u003eMyISAM 存储引擎：在 MySQL 5.5 版本之前是默认的存储引擎，不支持事务，也不支持外键，最大的特点是速度快，占用资源少。\u003c/li\u003e\n\u003cli\u003eMemory 存储引擎：使用系统内存作为存储介质，以便得到更快的响应速度。不过如果 mysqld 进程崩溃，则会导致所有的数据丢失，因此我们只有当数据是临时的情况下才使用 Memory 存储引擎。\u003c/li\u003e\n\u003cli\u003eNDB 存储引擎：也叫做 NDB Cluster 存储引擎，主要用于 MySQL Cluster 分布式集群环境，类似于 Oracle 的 RAC 集群。\u003c/li\u003e\n\u003cli\u003eArchive 存储引擎：它有很好的压缩机制，用于文件归档，在请求写入时会进行压缩，所以也经常用来做仓库。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"存储引擎相关操作\"\u003e\u003ca href=\"#存储引擎相关操作\" class=\"headerlink\" title=\"存储引擎相关操作\"\u003e\u003c/a\u003e存储引擎相关操作\u003c/h2\u003e\u003ch3 id=\"查看存储引擎命令\"\u003e\u003ca href=\"#查看存储引擎命令\" class=\"headerlink\" title=\"查看存储引擎命令\"\u003e\u003c/a\u003e查看存储引擎命令\u003c/h3\u003e\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# 查看支持的存储引擎\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSHOW\u003c/span\u003e ENGINES;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 查看默认的存储引擎\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSHOW\u003c/span\u003e VARIABLES \u003cspan class=\"keyword\"\u003eLIKE\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#39;storage_engine\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 查看某表所使用的存储引擎\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSHOW\u003c/span\u003e \u003cspan class=\"keyword\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"keyword\"\u003eTABLE\u003c/span\u003e `table_name`;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 查看某数据库中的某表所使用的存储引擎\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSHOW\u003c/span\u003e \u003cspan class=\"keyword\"\u003eTABLE\u003c/span\u003e STATUS \u003cspan class=\"keyword\"\u003eLIKE\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#39;table_name\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSHOW\u003c/span\u003e \u003cspan class=\"keyword\"\u003eTABLE\u003c/span\u003e STATUS \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e `database_name` \u003cspan class=\"keyword\"\u003eWHERE\u003c/span\u003e `name` \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u0026#34;table_name\u0026#34;;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"设置存储引擎命令\"\u003e\u003ca href=\"#设置存储引擎命令\" class=\"headerlink\" title=\"设置存储引擎命令\"\u003e\u003c/a\u003e设置存储引擎命令\u003c/h3\u003e\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# 建表时指定存储引擎，如果不显示指定，默认是 INNODB\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"keyword\"\u003eTABLE\u003c/span\u003e t1 (i \u003cspan class=\"type\"\u003eINT\u003c/span\u003e) ENGINE \u003cspan class=\"operator\"\u003e=\u003c/span\u003e INNODB;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"keyword\"\u003eTABLE\u003c/span\u003e t2 (i \u003cspan class=\"type\"\u003eINT\u003c/span\u003e) ENGINE \u003cspan class=\"operator\"\u003e=\u003c/span\u003e CSV;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"keyword\"\u003eTABLE\u003c/span\u003e t3 (i \u003cspan class=\"type\"\u003eINT\u003c/span\u003e) ENGINE \u003cspan class=\"operator\"\u003e=\u003c/span\u003e MEMORY;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 修改存储引擎\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eALTER\u003c/span\u003e \u003cspan class=\"keyword\"\u003eTABLE\u003c/span\u003e t ENGINE \u003cspan class=\"operator\"\u003e=\u003c/span\u003e InnoDB;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 修改默认存储引擎，也可以在配置文件 my.cnf 中修改默认引擎\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSET\u003c/span\u003e default_storage_engine\u003cspan class=\"operator\"\u003e=\u003c/span\u003eNDBCLUSTER;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e默认情况下，每当 \u003ccode\u003eCREATE TABLE\u003c/code\u003e 或 \u003ccode\u003eALTER TABLE\u003c/code\u003e 不能使用默认存储引擎时，都会生成一个警告。为了防止在所需的引擎不可用时出现令人困惑的意外行为，可以启用 \u003ccode\u003eNO_ENGINE_SUBSTITUTION SQL\u003c/code\u003e 模式。如果所需的引擎不可用，则此设置将产生错误而不是警告，并且不会创建或更改表\u003c/p\u003e\n\u003ch2 id=\"Mysql-存储引擎简介\"\u003e\u003ca href=\"#Mysql-存储引擎简介\" class=\"headerlink\" title=\"Mysql 存储引擎简介\"\u003e\u003c/a\u003eMysql 存储引擎简介\u003c/h2\u003e\u003ch3 id=\"Mysql-内置的存储引擎\"\u003e\u003ca href=\"#Mysql-内置的存储引擎\" class=\"headerlink\" title=\"Mysql 内置的存储引擎\"\u003e\u003c/a\u003eMysql 内置的存储引擎\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInnoDB\u003c/strong\u003e - InnoDB 是 MySQL 5.5 版本以后的默认存储引擎。并且提供了行级锁和外键的约束。性能不错且支持自动崩溃恢复。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMyISAM\u003c/strong\u003e - MyISAM 是 MySQL 5.5 版本以后的默认存储引擎。特性丰富但不支持事务，也不支持行级锁和外键，也没有崩溃恢复功能。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCSV\u003c/strong\u003e - 可以将 CSV 文件作为 Mysql 的表来处理，但这种表不支持索引。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMemory\u003c/strong\u003e - 数据存储在内存，以便得到更快的响应速度。不过如果 mysqld 进程崩溃，则会导致所有的数据丢失。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNDB\u003c/strong\u003e - 也叫做 NDB Cluster 存储引擎，主要用于 MySQL Cluster 分布式集群环境，类似于 Oracle 的 RAC 集群。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eArchieve\u003c/strong\u003e - Archieve 存储引擎非常适合用于归档数据。\u003cul\u003e\n\u003cli\u003eArchieve 存储引擎只支持 \u003ccode\u003eINSERT\u003c/code\u003e 和 \u003ccode\u003eSELECT\u003c/code\u003e 操作。\u003c/li\u003e\n\u003cli\u003eArchieve 存储引擎采用 zlib 算法压缩数据，压缩比可达到 1: 10。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"如何选择合适的存储引擎\"\u003e\u003ca href=\"#如何选择合适的存储引擎\" class=\"headerlink\" title=\"如何选择合适的存储引擎\"\u003e\u003c/a\u003e如何选择合适的存储引擎\u003c/h3\u003e\u003cp\u003e大多数情况下，InnoDB 都是正确的选择，除非需要用到 InnoDB 不具备的特性。\u003c/p\u003e\n\u003cp\u003e如果应用需要选择 InnoDB 以外的存储引擎，可以考虑以下因素：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e事务：如果业务场景是 OLTP，则 InnoDB 是首选存储引擎。如果不需要支持事务，且主要是 SELECT 和 INSERT 操作，MyISAM 是不错的选择。所以，如果 Mysql 部署方式为主备模式，并进行读写分离。那么可以这么做：主节点只支持写操作，默认引擎为 InnoDB；备节点只支持读操作，默认引擎为 MyISAM。\u003c/li\u003e\n\u003cli\u003e并发：MyISAM 只支持表级锁，而 InnoDB 还支持行级锁。所以，InnoDB 并发性能更高。\u003c/li\u003e\n\u003cli\u003e外键：InnoDB 支持外键。\u003c/li\u003e\n\u003cli\u003e备份：InnoDB 支持在线热备份。\u003c/li\u003e\n\u003cli\u003e崩溃恢复：MyISAM 崩溃后发生损坏的概率比 InnoDB 高很多，而且恢复的速度也更慢。\u003c/li\u003e\n\u003cli\u003e其它特性：MyISAM 支持压缩表和空间数据索引。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"InnoDB-简介\"\u003e\u003ca href=\"#InnoDB-简介\" class=\"headerlink\" title=\"InnoDB 简介\"\u003e\u003c/a\u003eInnoDB 简介\u003c/h2\u003e\u003cp\u003eInnoDB 是 MySQL 5.5 版本以后的默认存储引擎。只有在需要 InnoDB 不支持的特性时，才考虑使用其它存储引擎。\u003c/p\u003e\n\u003cp\u003eInnoDB 也使用 B+Tree 作为索引结构，但具体实现方式却与 MyISAM 截然不同。MyISAM 索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。而\u003cstrong\u003e在 InnoDB 中，表数据文件本身就是按 B+Tree 组织的一个索引结构\u003c/strong\u003e，这棵树的叶节点 data 域保存了完整的数据记录。这个\u003cstrong\u003e索引的 key 是数据表的主键\u003c/strong\u003e，因此\u003cstrong\u003eInnoDB 表数据文件本身就是主索引\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eInnoDB 采用 MVCC 来支持高并发，并且实现了四个标准的隔离级别。其默认级别是可重复读（REPEATABLE READ），并且通过间隙锁（next-key locking）防止幻读。\u003c/p\u003e\n\u003cp\u003eInnoDB 是基于聚簇索引建立的，与其他存储引擎有很大不同。在索引中保存了数据，从而避免直接读取磁盘，因此对查询性能有很大的提升。\u003c/p\u003e\n\u003cp\u003e内部做了很多优化，包括从磁盘读取数据时采用的可预测性读、能够加快读操作并且自动创建的自适应哈希索引、能够加速插入操作的插入缓冲区等。\u003c/p\u003e\n\u003cp\u003e支持真正的在线热备份。其它存储引擎不支持在线热备份，要获取一致性视图需要停止对所有表的写入，而在读写混合场景中，停止写入可能也意味着停止读取。\u003c/p\u003e\n\u003cp\u003eInnoDB 物理文件结构为：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003e.frm\u003c/code\u003e 文件：与表相关的元数据信息都存放在 frm 文件，包括表结构的定义信息等。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003e.ibd\u003c/code\u003e 文件或 \u003ccode\u003e.ibdata\u003c/code\u003e 文件： 这两种文件都是存放 InnoDB 数据的文件，之所以有两种文件形式存放 InnoDB 的数据，是因为 InnoDB 的数据存储方式能够通过配置来决定是使用\u003cstrong\u003e共享表空间\u003c/strong\u003e存放存储数据，还是用\u003cstrong\u003e独享表空间\u003c/strong\u003e存放存储数据。\u003c/p\u003e\n\u003cp\u003e独享表空间存储方式使用\u003ccode\u003e.ibd\u003c/code\u003e文件，并且每个表一个\u003ccode\u003e.ibd\u003c/code\u003e文件 共享表空间存储方式使用\u003ccode\u003e.ibdata\u003c/code\u003e文件，所有表共同使用一个\u003ccode\u003e.ibdata\u003c/code\u003e文件（或多个，可自己配置）\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"InnoDB-存储架构\"\u003e\u003ca href=\"#InnoDB-存储架构\" class=\"headerlink\" title=\"InnoDB 存储架构\"\u003e\u003c/a\u003eInnoDB 存储架构\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/202311070640589.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eInnoDB 存储架构分为内存结构和磁盘结构。\u003c/p\u003e\n\u003cp\u003eInnoDB 内存结构的核心组件有：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBuffer Pool\u003c/li\u003e\n\u003cli\u003eChange Buffer\u003c/li\u003e\n\u003cli\u003eAdaptive Hash Index\u003c/li\u003e\n\u003cli\u003eLog Buffer\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eInnoDB 磁盘结构的核心组件有：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTablespace\u003c/li\u003e\n\u003cli\u003eDoublewrite Buffer\u003c/li\u003e\n\u003cli\u003eredo log\u003c/li\u003e\n\u003cli\u003eundo log\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"InnoDB-表空间\"\u003e\u003ca href=\"#InnoDB-表空间\" class=\"headerlink\" title=\"InnoDB 表空间\"\u003e\u003c/a\u003eInnoDB 表空间\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/202311070708733.png\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"行（row）\"\u003e\u003ca href=\"#行（row）\" class=\"headerlink\" title=\"行（row）\"\u003e\u003c/a\u003e行（row）\u003c/h3\u003e\u003cp\u003e数据库表中的记录都是按行（row）进行存放的，每行记录根据不同的行格式，有不同的存储结构。\u003c/p\u003e\n\u003cp\u003e后面我们详细介绍 InnoDB 存储引擎的行格式，也是本文重点介绍的内容。\u003c/p\u003e\n\u003ch3 id=\"页（page）\"\u003e\u003ca href=\"#页（page）\" class=\"headerlink\" title=\"页（page）\"\u003e\u003c/a\u003e页（page）\u003c/h3\u003e\u003cp\u003e记录是按照行来存储的，但是数据库的读取并不以「行」为单位，否则一次读取（也就是一次 I/O 操作）只能处理一行数据，效率会非常低。\u003c/p\u003e\n\u003cp\u003e因此，\u003cstrong\u003eInnoDB 的数据是按「页」为单位来读写的\u003c/strong\u003e，也就是说，当需要读一条记录的时候，并不是将这个行记录从磁盘读出来，而是以页为单位，将其整体读入内存。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e默认每个页的大小为 16KB\u003c/strong\u003e，也就是最多能保证 16KB 的连续存储空间。\u003c/p\u003e\n\u003cp\u003e页是 InnoDB 存储引擎磁盘管理的最小单元，意味着数据库每次读写都是以 16KB 为单位的，一次最少从磁盘中读取 16K 的内容到内存中，一次最少把内存中的 16K 内容刷新到磁盘中。\u003c/p\u003e\n\u003cp\u003e页的类型有很多，常见的有数据页、undo 日志页、溢出页等等。数据表中的行记录是用「数据页」来管理的，数据页的结构这里我就不讲细说了，之前文章有说过，感兴趣的可以去看这篇文章：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://xiaolincoding.com/mysql/index/page.html\"\u003e换一个角度看 B+ 树(opens new window)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e总之知道表中的记录存储在「数据页」里面就行。\u003c/p\u003e\n\u003ch3 id=\"区（extent）\"\u003e\u003ca href=\"#区（extent）\" class=\"headerlink\" title=\"区（extent）\"\u003e\u003c/a\u003e区（extent）\u003c/h3\u003e\u003cp\u003e我们知道 InnoDB 存储引擎是用 B+ 树来组织数据的。\u003c/p\u003e\n\u003cp\u003eB+ 树中每一层都是通过双向链表连接起来的，如果是以页为单位来分配存储空间，那么链表中相邻的两个页之间的物理位置并不是连续的，可能离得非常远，那么磁盘查询时就会有大量的随机 I/O，随机 I/O 是非常慢的。\u003c/p\u003e\n\u003cp\u003e解决这个问题也很简单，就是让链表中相邻的页的物理位置也相邻，这样就可以使用顺序 I/O 了，那么在范围查询（扫描叶子节点）的时候性能就会很高。\u003c/p\u003e\n\u003cp\u003e那具体怎么解决呢？\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e在表中数据量大的时候，为某个索引分配空间的时候就不再按照页为单位分配了，而是按照区（extent）为单位分配。每个区的大小为 1MB，对于 16KB 的页来说，连续的 64 个页会被划为一个区，这样就使得链表中相邻的页的物理位置也相邻，就能使用顺序 I/O 了\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"段（segment）\"\u003e\u003ca href=\"#段（segment）\" class=\"headerlink\" title=\"段（segment）\"\u003e\u003c/a\u003e段（segment）\u003c/h3\u003e\u003cp\u003e表空间是由各个段（segment）组成的，段是由多个区（extent）组成的。段一般分为数据段、索引段和回滚段等。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e索引段：存放 B + 树的非叶子节点的区的集合；\u003c/li\u003e\n\u003cli\u003e数据段：存放 B + 树的叶子节点的区的集合；\u003c/li\u003e\n\u003cli\u003e回滚段：存放的是回滚数据的区的集合。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e好了，终于说完表空间的结构了。接下来，就具体讲一下 InnoDB 的行格式了。\u003c/p\u003e\n\u003cp\u003e之所以要绕一大圈才讲行记录的格式，主要是想让大家知道行记录是存储在哪个文件，以及行记录在这个表空间文件中的哪个区域，有一个从上往下切入的视角，这样理解起来不会觉得很抽象。\u003c/p\u003e\n\u003ch2 id=\"InnoDB-内存结构\"\u003e\u003ca href=\"#InnoDB-内存结构\" class=\"headerlink\" title=\"InnoDB 内存结构\"\u003e\u003c/a\u003eInnoDB 内存结构\u003c/h2\u003e\u003ch3 id=\"Buffer-Pool\"\u003e\u003ca href=\"#Buffer-Pool\" class=\"headerlink\" title=\"Buffer Pool\"\u003e\u003c/a\u003eBuffer Pool\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/202311070641009.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eBuffer Pool 用于加速数据的访问和修改，通过将热点数据缓存在内存的方法，最大限度地减少磁盘 IO，加速热点数据的读和写。\u003c/p\u003e\n\u003cp\u003eBuffer Pool 中数据\u003cstrong\u003e以页为存储单位\u003c/strong\u003e，其实现数据结构是\u003cstrong\u003e以页为单位的单链表\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e由于内存的空间限制，Buffer Pool 仅能容纳最热点的数据。Buffer Pool 使用最近最少使用算法（Least Recent Used，LRU）算法淘汰非热点数据页。\u003c/p\u003e\n\u003cp\u003e依据时间局部性原理与空间局部性原理，Buffer Pool 在存储当前活动数据页的时候，会以预读 Read-ahead 的方式缓存目标数据页临近的数据页。\u003c/p\u003e\n\u003cp\u003e预读机制带来预读失败的问题，InnoDB \u003cstrong\u003e采用分代机制解决预读失败问题\u003c/strong\u003e：将 Buffer Pool 分为 New SubList 和 Old SubList 两部分，将最新读取的数据页置于 Old SubList 头部，Old SubList 中的数据再次被访问到才会置于 New SubList 头部；预读失败的冷数据将更快地从 Old SubList 中淘汰，而不会影响到 New SubList 中原有的热数据。\u003c/p\u003e\n\u003cp\u003e预读失败问题可以引申到缓冲池污染问题，InnoDB \u003cstrong\u003e采用时间窗口（Time Window）机制解决缓冲池污染问题\u003c/strong\u003e：对于 Old SubList 中的数据页，必须在 Old SubList 中停留到达指定时间之后再次被访问到，才能转移到 New SubList 中，默认窗口大小是 1s。\u003c/p\u003e\n\u003cp\u003e对于 Buffer Pool 中数据的查询，InnoDB 直接读取返回；对于 Buffer Pool 中数据的修改，InnoDB 直接在 Buffer Pool 中修改，并将修改写入 redo Log 中，当数据页被 LRU 算法淘汰时写入磁盘，若持久化前系统崩溃，则在重启后使用 redo Log 进行恢复。\u003c/p\u003e\n\u003ch3 id=\"Change-Buffer\"\u003e\u003ca href=\"#Change-Buffer\" class=\"headerlink\" title=\"Change Buffer\"\u003e\u003c/a\u003eChange Buffer\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/202311070641668.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eChange Buffer 用于加速非热点数据中二级索引的写入操作。由于二级索引数据的不连续性，导致修改二级索引时需要进行频繁的磁盘 IO 消耗大量性能，Change Buffer 缓冲对二级索引的修改操作，同时将写操作录入 redo log 中，在缓冲到一定量或系统较空闲时进行 \u003ccode\u003eibuf merge\u003c/code\u003e 操作将修改写入磁盘中。Change Buffer 在系统表空间中有相应的持久化区域。\u003c/p\u003e\n\u003cp\u003eChange Buffer 大小默认占 Buffer Pool 的 25%，在引擎启动时便初始化完成。其物理结构为一棵名为 \u003ccode\u003eibuf\u003c/code\u003e 的 B Tree。Change Buffer 的使用条件为：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInnoDB 开启 \u003ccode\u003einnodb_change_buffering\u003c/code\u003e，且该表当前没有 \u003ccode\u003eflush\u003c/code\u003e 操作。\u003c/li\u003e\n\u003cli\u003e仅对二级索引树的叶子节点进行修改，且该索引页不在 Buffer Pool 中。\u003c/li\u003e\n\u003cli\u003e对于 Unique 二级索引，仅删除操作可以缓冲。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e其 \u003ccode\u003eibuf merge\u003c/code\u003e 时机为：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e用户使用该二级索引进行查询时。\u003c/li\u003e\n\u003cli\u003e缓存插入操作时，预估到 page 空间不足可能导致索引页分裂时。\u003c/li\u003e\n\u003cli\u003e本次缓存操作将导致 ibuf btree 页分裂，且分类后 Change Buffer 大小将超出限制时。\u003c/li\u003e\n\u003cli\u003emaster 线程发起 \u003ccode\u003emerge\u003c/code\u003e 命令时。\u003c/li\u003e\n\u003cli\u003e用户对该表进行 \u003ccode\u003eflush\u003c/code\u003e 操作时。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Adaptive-Hash-Index\"\u003e\u003ca href=\"#Adaptive-Hash-Index\" class=\"headerlink\" title=\"Adaptive Hash Index\"\u003e\u003c/a\u003eAdaptive Hash Index\u003c/h3\u003e\u003cp\u003e自适应哈希索引（Adaptive Hash Index）用于实现对于热数据页的一次查询。使用聚簇索引进行数据页定位的时候需要根据索引树的高度从根节点走到叶子节点，通常需要 3 到 4 次查询才能定位数据。InnoDB 根据对索引使用情况的分析和索引字段的分析，通过自调优 Self-tuning 的方式为索引页建立或者删除哈希索引。\u003c/p\u003e\n\u003cp\u003eAHI 所作用的目标是频繁查询的数据页和索引页，而由于数据页是聚簇索引的一部分，因此 AHI 是建立在索引之上的索引，\u003cstrong\u003e对于二级索引，若命中 AHI，则将直接从 AHI 获取二级索引页的记录指针，再根据主键沿着聚簇索引查找数据；若聚簇索引查询同样命中 AHI，则直接返回目标数据页的记录指针，此时就可以根据记录指针直接定位数据页\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eAHI 的大小为 Buffer Pool 的 1/64，再 MySql 5.7 之后支持分区，以减少对于全局 AHI 锁的竞争，默认分区数为 8。\u003c/p\u003e\n\u003ch3 id=\"Log-Buffer\"\u003e\u003ca href=\"#Log-Buffer\" class=\"headerlink\" title=\"Log Buffer\"\u003e\u003c/a\u003eLog Buffer\u003c/h3\u003e\u003cp\u003eLog Buffer 是用于缓冲待写入磁盘日志文件的数据。InnoDB 的所有修改操作都会被写入 redo log、undo log 等日志文件，如果每次都直接写入磁盘，会引发大量 IO。Log Buffer 正是针对此进行了优化：先将修改操作缓冲于此内存区域，然后定期批量 刷新到磁盘。\u003c/p\u003e\n\u003cp\u003e日志缓冲区大小可以由配置 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size\"\u003e\u003ccode\u003einnodb_log_buffer_size\u003c/code\u003e\u003c/a\u003e 控制，默认大小为 16MB。\u003c/p\u003e\n\u003ch2 id=\"MyISAM\"\u003e\u003ca href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"\u003e\u003c/a\u003eMyISAM\u003c/h2\u003e\u003cp\u003eMyISAM 是 MySQL 5.5 版本以前的默认存储引擎。\u003c/p\u003e\n\u003cp\u003eMyISAM 设计简单，数据以紧密格式存储。对于只读数据，或者表比较小、可以容忍修复操作，则依然可以使用 MyISAM。\u003c/p\u003e\n\u003cp\u003eMyISAM 引擎使用 B+Tree 作为索引结构，\u003cstrong\u003e叶节点的 data 域存放的是数据记录的地址\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eMyISAM 提供了大量的特性，包括：全文索引、压缩表、空间函数等。但是，MyISAM 不支持事务和行级锁。并且 MyISAM 不支持崩溃后的安全恢复。\u003c/p\u003e\n\u003cp\u003eMyISAM 物理文件结构为：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e.frm\u003c/code\u003e文件：与表相关的元数据信息都存放在 frm 文件，包括表结构的定义信息等。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.MYD\u003c/code\u003e (\u003ccode\u003eMYData\u003c/code\u003e) 文件：MyISAM 存储引擎专用，用于存储 MyISAM 表的数据。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.MYI\u003c/code\u003e (\u003ccode\u003eMYIndex\u003c/code\u003e)文件：MyISAM 存储引擎专用，用于存储 MyISAM 表的索引相关信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"InnoDB-vs-MyISAM\"\u003e\u003ca href=\"#InnoDB-vs-MyISAM\" class=\"headerlink\" title=\"InnoDB vs. MyISAM\"\u003e\u003c/a\u003eInnoDB vs. MyISAM\u003c/h2\u003e\u003cp\u003eInnoDB 和 MyISAM 的对比：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e对比项\u003c/th\u003e\n\u003cth\u003eMyISAM\u003c/th\u003e\n\u003cth\u003eInnoDB\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e主外键\u003c/td\u003e\n\u003ctd\u003e不支持\u003c/td\u003e\n\u003ctd\u003e支持\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e事务\u003c/td\u003e\n\u003ctd\u003e不支持\u003c/td\u003e\n\u003ctd\u003e支持\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e锁\u003c/td\u003e\n\u003ctd\u003e支持表级锁\u003c/td\u003e\n\u003ctd\u003e支持表级锁、行级锁\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e索引\u003c/td\u003e\n\u003ctd\u003e采用非聚簇索引\u003c/td\u003e\n\u003ctd\u003e主键采用聚簇索引，以提高 IO 效率\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e表空间\u003c/td\u003e\n\u003ctd\u003e小\u003c/td\u003e\n\u003ctd\u003e大\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e关注点\u003c/td\u003e\n\u003ctd\u003e性能\u003c/td\u003e\n\u003ctd\u003e事务\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e计数器\u003c/td\u003e\n\u003ctd\u003e维护了计数器，\u003ccode\u003eSELECT COUNT(*)\u003c/code\u003e 效率为 \u003ccode\u003eO(1)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e没有维护计数器，需要全表扫描\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/23008813/\"\u003e《高性能 MySQL》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/139\"\u003eMySQL 实战 45 讲\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-07-13T02:08:37Z",
  "Author": "钝悟 ◾ Dunwu"
}