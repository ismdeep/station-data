{
  "Source": "dunwu",
  "Title": "Mysql 优化",
  "Link": "https://dunwu.github.io/blog/pages/396816/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Mysql-优化\"\u003e\u003ca href=\"#Mysql-优化\" class=\"headerlink\" title=\"Mysql 优化\"\u003e\u003c/a\u003eMysql 优化\u003c/h1\u003e\u003ch2 id=\"慢查询\"\u003e\u003ca href=\"#慢查询\" class=\"headerlink\" title=\"慢查询\"\u003e\u003c/a\u003e慢查询\u003c/h2\u003e\u003cp\u003e慢查询日志可以帮我们找到执行慢的 SQL。\u003c/p\u003e\n\u003cp\u003e可以通过以下命令查看慢查询日志是否开启：\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003emysql\u003cspan class=\"operator\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"keyword\"\u003eshow\u003c/span\u003e variables \u003cspan class=\"keyword\"\u003elike\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#39;%slow_query_log\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"operator\"\u003e+\u003c/span\u003e\u003cspan class=\"comment\"\u003e----------------+-------+\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"operator\"\u003e|\u003c/span\u003e Variable_name  \u003cspan class=\"operator\"\u003e|\u003c/span\u003e \u003cspan class=\"keyword\"\u003eValue\u003c/span\u003e \u003cspan class=\"operator\"\u003e|\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"operator\"\u003e+\u003c/span\u003e\u003cspan class=\"comment\"\u003e----------------+-------+\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"operator\"\u003e|\u003c/span\u003e slow_query_log \u003cspan class=\"operator\"\u003e|\u003c/span\u003e \u003cspan class=\"keyword\"\u003eON\u003c/span\u003e    \u003cspan class=\"operator\"\u003e|\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"operator\"\u003e+\u003c/span\u003e\u003cspan class=\"comment\"\u003e----------------+-------+\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e1\u003c/span\u003e \u003cspan class=\"type\"\u003erow\u003c/span\u003e \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"keyword\"\u003eset\u003c/span\u003e (\u003cspan class=\"number\"\u003e0.02\u003c/span\u003e sec)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e启停慢查询日志开关：\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# 开启慢查询日志\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emysql \u003cspan class=\"operator\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"keyword\"\u003eglobal\u003c/span\u003e slow_query_log\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#39;ON\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 关闭慢查询日志\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emysql \u003cspan class=\"operator\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"keyword\"\u003eglobal\u003c/span\u003e slow_query_log\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#39;OFF\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e查看慢查询的时间阈值：\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003emysql\u003cspan class=\"operator\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"keyword\"\u003eshow\u003c/span\u003e variables \u003cspan class=\"keyword\"\u003elike\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#39;%long_query_time%\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"operator\"\u003e+\u003c/span\u003e\u003cspan class=\"comment\"\u003e-----------------+-----------+\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"operator\"\u003e|\u003c/span\u003e Variable_name   \u003cspan class=\"operator\"\u003e|\u003c/span\u003e \u003cspan class=\"keyword\"\u003eValue\u003c/span\u003e     \u003cspan class=\"operator\"\u003e|\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"operator\"\u003e+\u003c/span\u003e\u003cspan class=\"comment\"\u003e-----------------+-----------+\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"operator\"\u003e|\u003c/span\u003e long_query_time \u003cspan class=\"operator\"\u003e|\u003c/span\u003e \u003cspan class=\"number\"\u003e10.000000\u003c/span\u003e \u003cspan class=\"operator\"\u003e|\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"operator\"\u003e+\u003c/span\u003e\u003cspan class=\"comment\"\u003e-----------------+-----------+\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e1\u003c/span\u003e \u003cspan class=\"type\"\u003erow\u003c/span\u003e \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"keyword\"\u003eset\u003c/span\u003e (\u003cspan class=\"number\"\u003e0.02\u003c/span\u003e sec)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e设置慢查询的时间阈值：\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003emysql \u003cspan class=\"operator\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"keyword\"\u003eglobal\u003c/span\u003e long_query_time \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e3\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eMySQL 自带了一个 mysqldumpslow 工具，用于统计慢查询日志（这个工具是个 Perl 脚本，需要先安装好 Perl）。\u003c/p\u003e\n\u003cp\u003emysqldumpslow 命令的具体参数如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e-s\u003c/code\u003e - 采用 order 排序的方式，排序方式可以有以下几种。分别是 c（访问次数）、t（查询时间）、l（锁定时间）、r（返回记录）、ac（平均查询次数）、al（平均锁定时间）、ar（平均返回记录数）和 at（平均查询时间）。其中 at 为默认排序方式。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-t\u003c/code\u003e - 返回前 N 条数据 。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-g\u003c/code\u003e - 后面可以是正则表达式，对大小写不敏感。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e比如想要按照查询时间排序，查看前两条 SQL 语句，可以执行如下命令：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eperl mysqldumpslow.pl -s t -t 2 \u0026#34;C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\slow.log\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"执行计划（EXPLAIN）\"\u003e\u003ca href=\"#执行计划（EXPLAIN）\" class=\"headerlink\" title=\"执行计划（EXPLAIN）\"\u003e\u003c/a\u003e执行计划（EXPLAIN）\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003e“执行计划”是对 SQL 查询语句在数据库中执行过程的描述\u003c/strong\u003e。 如果要分析某条 SQL 的性能问题，通常需要先查看 SQL 的执行计划，排查每一步 SQL 执行是否存在问题。\u003c/p\u003e\n\u003cp\u003e很多数据库都支持执行计划，Mysql 也不例外。在 Mysql 中，用户可以通过 \u003ccode\u003eEXPLAIN\u003c/code\u003e 命令查看优化器针对指定 SQL 生成的逻辑执行计划。 \u003c/p\u003e\n\u003cp\u003e【示例】Mysql 执行计划示例\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003emysql\u003cspan class=\"operator\"\u003e\u0026gt;\u003c/span\u003e explain \u003cspan class=\"keyword\"\u003eselect\u003c/span\u003e \u003cspan class=\"operator\"\u003e*\u003c/span\u003e \u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e user_info \u003cspan class=\"keyword\"\u003ewhere\u003c/span\u003e id \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e2\u003c/span\u003e\\G\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e \u003cspan class=\"number\"\u003e1.\u003c/span\u003e \u003cspan class=\"type\"\u003erow\u003c/span\u003e \u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003cspan class=\"operator\"\u003e*\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e           id: \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  select_type: SIMPLE\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etable\u003c/span\u003e: user_info\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   partitions: \u003cspan class=\"keyword\"\u003eNULL\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e         type: const\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epossible_keys: \u003cspan class=\"keyword\"\u003ePRIMARY\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          key: \u003cspan class=\"keyword\"\u003ePRIMARY\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      key_len: \u003cspan class=\"number\"\u003e8\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          \u003cspan class=\"keyword\"\u003eref\u003c/span\u003e: const\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e         \u003cspan class=\"keyword\"\u003erows\u003c/span\u003e: \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e     filtered: \u003cspan class=\"number\"\u003e100.00\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Extra: \u003cspan class=\"keyword\"\u003eNULL\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e1\u003c/span\u003e \u003cspan class=\"type\"\u003erow\u003c/span\u003e \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"keyword\"\u003eset\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e warning (\u003cspan class=\"number\"\u003e0.00\u003c/span\u003e sec)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e执行计划返回结果参数说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eid\u003c/code\u003e - SELECT 查询的标识符。每个 \u003ccode\u003eSELECT\u003c/code\u003e 都会自动分配一个唯一的标识符。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eselect_type\u003c/code\u003e - \u003ccode\u003eSELECT\u003c/code\u003e 查询的类型。\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSIMPLE\u003c/code\u003e - 表示此查询不包含 \u003ccode\u003eUNION\u003c/code\u003e 查询或子查询。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePRIMARY\u003c/code\u003e - 表示此查询是最外层的查询。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUNION\u003c/code\u003e - 表示此查询是 \u003ccode\u003eUNION\u003c/code\u003e 的第二或随后的查询。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDEPENDENT UNION\u003c/code\u003e - \u003ccode\u003eUNION\u003c/code\u003e 中的第二个或后面的查询语句, 取决于外面的查询。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUNION RESULT\u003c/code\u003e - \u003ccode\u003eUNION\u003c/code\u003e 的结果。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSUBQUERY\u003c/code\u003e - 子查询中的第一个 \u003ccode\u003eSELECT\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDEPENDENT SUBQUERY\u003c/code\u003e - 子查询中的第一个 \u003ccode\u003eSELECT\u003c/code\u003e, 取决于外面的查询. 即子查询依赖于外层查询的结果。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etable\u003c/code\u003e - 查询的是哪个表，如果给表起别名了，则显示别名。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epartitions\u003c/code\u003e - 匹配的分区。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etype\u003c/code\u003e - 表示从表中查询到行所执行的方式，查询方式是 SQL 优化中一个很重要的指标，执行效率由高到低依次为：\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esystem\u003c/code\u003e/\u003ccode\u003econst\u003c/code\u003e - 表中只有一行数据匹配。此时根据索引查询一次就能找到对应的数据。如果是 B+ 树索引，我们知道此时索引构造成了多个层级的树，当查询的索引在树的底层时，查询效率就越低。\u003ccode\u003econst\u003c/code\u003e 表示此时索引在第一层，只需访问一层便能得到数据。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eeq_ref\u003c/code\u003e - 使用唯一索引扫描。常见于多表连接中使用主键和唯一索引作为关联条件。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eref\u003c/code\u003e - 非唯一索引扫描。还可见于唯一索引最左原则匹配扫描。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erange\u003c/code\u003e - 索引范围扫描。比如 \u003ccode\u003e\u0026lt;\u003c/code\u003e，\u003ccode\u003e\u0026gt;\u003c/code\u003e，\u003ccode\u003ebetween\u003c/code\u003e 等操作。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eindex\u003c/code\u003e - 索引全表扫描。此时遍历整个索引树。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eALL\u003c/code\u003e - 表示全表扫描。需要遍历全表来找到对应的行。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epossible_keys\u003c/code\u003e - 此次查询中可能选用的索引。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ekey\u003c/code\u003e - 此次查询中实际使用的索引。如果这一项为 \u003ccode\u003eNULL\u003c/code\u003e，说明没有使用索引。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eref\u003c/code\u003e - 哪个字段或常数与 key 一起被使用。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erows\u003c/code\u003e - 显示此查询一共扫描了多少行，这个是一个估计值。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efiltered\u003c/code\u003e - 表示此查询条件所过滤的数据的百分比。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eextra\u003c/code\u003e - 额外的信息。\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eUsing filesort\u003c/code\u003e - 当查询语句中包含 \u003ccode\u003eGROUP BY\u003c/code\u003e 操作，而且无法利用索引完成排序操作的时候， 这时不得不选择相应的排序算法进行，甚至可能会通过文件排序，效率是很低的，所以要避免这种问题的出现。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUsing temporary\u003c/code\u003e - 使了用临时表保存中间结果，MySQL 在对查询结果排序时使用临时表，常见于排序 \u003ccode\u003eORDER BY\u003c/code\u003e 和分组查询 \u003ccode\u003eGROUP BY\u003c/code\u003e。效率低，要避免这种问题的出现。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUsing index\u003c/code\u003e - 所需数据只需在索引即可全部获得，不须要再到表中取数据，也就是使用了覆盖索引，避免了回表操作，效率不错。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e更多内容请参考：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://segmentfault.com/a/1190000008131735\"\u003eMySQL 性能优化神器 Explain 使用分析\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"optimizer-trace\"\u003e\u003ca href=\"#optimizer-trace\" class=\"headerlink\" title=\"optimizer trace\"\u003e\u003c/a\u003eoptimizer trace\u003c/h2\u003e\u003cp\u003e在 MySQL 5.6 及之后的版本中，我们可以使用 optimizer trace 功能查看优化器生成执行计划的整个过程。有了这个功能，我们不仅可以了解优化器的选择过程，更可以了解每一个执行环节的成本，然后依靠这些信息进一步优化查询。\u003c/p\u003e\n\u003cp\u003e如下代码所示，打开 optimizer_trace 后，再执行 SQL 就可以查询 information_schema.OPTIMIZER_TRACE 表查看执行计划了，最后可以关闭 optimizer_trace 功能：\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSET\u003c/span\u003e optimizer_trace\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u0026#34;enabled=on\u0026#34;;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"operator\"\u003e*\u003c/span\u003e \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e person \u003cspan class=\"keyword\"\u003eWHERE\u003c/span\u003e NAME \u003cspan class=\"operator\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#39;name84059\u0026#39;\u003c/span\u003e \u003cspan class=\"keyword\"\u003eAND\u003c/span\u003e create_time\u003cspan class=\"operator\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#39;2020-01-24 05:00\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003eSELECT * FROM information_schema.OPTIMIZER_TRACE;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003eSET optimizer_trace=\u0026#34;enabled=off\u0026#34;;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"SQL-优化\"\u003e\u003ca href=\"#SQL-优化\" class=\"headerlink\" title=\"SQL 优化\"\u003e\u003c/a\u003eSQL 优化\u003c/h2\u003e\u003ch3 id=\"SQL-优化基本思路\"\u003e\u003ca href=\"#SQL-优化基本思路\" class=\"headerlink\" title=\"SQL 优化基本思路\"\u003e\u003c/a\u003eSQL 优化基本思路\u003c/h3\u003e\u003cp\u003e使用 \u003ccode\u003eEXPLAIN\u003c/code\u003e 命令查看当前 SQL 是否使用了索引，优化后，再通过执行计划（\u003ccode\u003eEXPLAIN\u003c/code\u003e）来查看优化效果。\u003c/p\u003e\n\u003cp\u003eSQL 优化的基本思路：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e只返回必要的列\u003c/strong\u003e - 最好不要使用 \u003ccode\u003eSELECT *\u003c/code\u003e 语句。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e只返回必要的行\u003c/strong\u003e - 使用 \u003ccode\u003eWHERE\u003c/code\u003e 子查询语句进行过滤查询，有时候也需要使用 \u003ccode\u003eLIMIT\u003c/code\u003e 语句来限制返回的数据。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e缓存重复查询的数据\u003c/strong\u003e - 应该考虑在客户端使用缓存，尽量不要使用 Mysql 服务器缓存（存在较多问题和限制）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e使用索引覆盖查询\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"优化分页\"\u003e\u003ca href=\"#优化分页\" class=\"headerlink\" title=\"优化分页\"\u003e\u003c/a\u003e优化分页\u003c/h3\u003e\u003cp\u003e当需要分页操作时，通常会使用 \u003ccode\u003eLIMIT\u003c/code\u003e 加上偏移量的办法实现，同时加上合适的 \u003ccode\u003eORDER BY\u003c/code\u003e 字句。\u003cstrong\u003e如果有对应的索引，通常效率会不错，否则，MySQL 需要做大量的文件排序操作\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e一个常见的问题是当偏移量非常大的时候，比如：\u003ccode\u003eLIMIT 1000000 20\u003c/code\u003e 这样的查询，MySQL 需要查询 1000020 条记录然后只返回 20 条记录，前面的 1000000  条都将被抛弃，这样的代价非常高。\u003c/p\u003e\n\u003cp\u003e针对分页优化，有以下两种方案\u003c/p\u003e\n\u003cp\u003e（1）方案 - 延迟关联\u003c/p\u003e\n\u003cp\u003e优化这种查询一个最简单的办法就是尽可能的使用覆盖索引扫描，而不是查询所有的列。然后根据需要做一次关联查询再返回所有的列。对于偏移量很大时，这样做的效率会提升非常大。考虑下面的查询：\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e film_id,description \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e film \u003cspan class=\"keyword\"\u003eORDER\u003c/span\u003e \u003cspan class=\"keyword\"\u003eBY\u003c/span\u003e title LIMIT \u003cspan class=\"number\"\u003e1000000\u003c/span\u003e,\u003cspan class=\"number\"\u003e5\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果这张表非常大，那么这个查询最好改成下面的样子：\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e film.film_id,film.description\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e film \u003cspan class=\"keyword\"\u003eINNER\u003c/span\u003e \u003cspan class=\"keyword\"\u003eJOIN\u003c/span\u003e (\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e film_id \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e film \u003cspan class=\"keyword\"\u003eORDER\u003c/span\u003e \u003cspan class=\"keyword\"\u003eBY\u003c/span\u003e title LIMIT \u003cspan class=\"number\"\u003e50\u003c/span\u003e,\u003cspan class=\"number\"\u003e5\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e) \u003cspan class=\"keyword\"\u003eAS\u003c/span\u003e tmp \u003cspan class=\"keyword\"\u003eUSING\u003c/span\u003e(film_id);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里的延迟关联将大大提升查询效率，让 MySQL 扫描尽可能少的页面，获取需要访问的记录后在根据关联列回原表查询所需要的列。\u003c/p\u003e\n\u003cp\u003e（2）方案 - 书签方式\u003c/p\u003e\n\u003cp\u003e有时候如果可以使用书签记录上次取数据的位置，那么下次就可以直接从该书签记录的位置开始扫描，这样就可以避免使用 \u003ccode\u003eOFFSET\u003c/code\u003e，比如下面的查询：\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e-- 原语句\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e id \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e t LIMIT \u003cspan class=\"number\"\u003e1000000\u003c/span\u003e, \u003cspan class=\"number\"\u003e10\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e-- 优化语句\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e id \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e t \u003cspan class=\"keyword\"\u003eWHERE\u003c/span\u003e id \u003cspan class=\"operator\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"number\"\u003e1000000\u003c/span\u003e LIMIT \u003cspan class=\"number\"\u003e10\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e其他优化的办法还包括使用预先计算的汇总表，或者关联到一个冗余表，冗余表中只包含主键列和需要做排序的列。\u003c/p\u003e\n\u003ch3 id=\"优化-JOIN\"\u003e\u003ca href=\"#优化-JOIN\" class=\"headerlink\" title=\"优化 JOIN\"\u003e\u003c/a\u003e优化 JOIN\u003c/h3\u003e\u003cp\u003e优化子查询\u003c/p\u003e\n\u003cp\u003e尽量使用 \u003ccode\u003eJOIN\u003c/code\u003e 语句来替代子查询。因为子查询是嵌套查询，而嵌套查询会新创建一张临时表，而临时表的创建与销毁会占用一定的系统资源以及花费一定的时间，同时对于返回结果集比较大的子查询，其对查询性能的影响更大。\u003c/p\u003e\n\u003cp\u003e小表驱动大表\u003c/p\u003e\n\u003cp\u003eJOIN 查询时，应该用小表驱动大表。因为 JOIN 时，MySQL 内部会先遍历驱动表，再去遍历被驱动表。\u003c/p\u003e\n\u003cp\u003e比如 left join，左表就是驱动表，A 表小于 B 表，建立连接的次数就少，查询速度就被加快了。\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eselect\u003c/span\u003e name \u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e A \u003cspan class=\"keyword\"\u003eleft\u003c/span\u003e \u003cspan class=\"keyword\"\u003ejoin\u003c/span\u003e B ;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e适当冗余字段\u003c/p\u003e\n\u003cp\u003e增加冗余字段可以减少大量的连表查询，因为多张表的连表查询性能很低，所有可以适当的增加冗余字段，以减少多张表的关联查询，这是以空间换时间的优化策略\u003c/p\u003e\n\u003cp\u003e避免 JOIN 太多表\u003c/p\u003e\n\u003cp\u003e《阿里巴巴 Java 开发手册》规定不要 join 超过三张表，第一 join 太多降低查询的速度，第二 join 的 buffer 会占用更多的内存。\u003c/p\u003e\n\u003cp\u003e如果不可避免要 join 多张表，可以考虑使用数据异构的方式异构到 ES 中查询。\u003c/p\u003e\n\u003ch3 id=\"优化-UNION\"\u003e\u003ca href=\"#优化-UNION\" class=\"headerlink\" title=\"优化 UNION\"\u003e\u003c/a\u003e优化 UNION\u003c/h3\u003e\u003cp\u003eMySQL 执行 \u003ccode\u003eUNION\u003c/code\u003e 的策略是：先创建临时表，然后将各个查询结果填充到临时表中，最后再进行查询。很多优化策略在 \u003ccode\u003eUNION\u003c/code\u003e 查询中都会失效，因为它无法利用索引。\u003c/p\u003e\n\u003cp\u003e最好将 \u003ccode\u003eWHERE\u003c/code\u003e、\u003ccode\u003eLIMIT\u003c/code\u003e 等子句下推到 \u003ccode\u003eUNION\u003c/code\u003e 的各个子查询中，以便优化器可以充分利用这些条件进行优化。\u003c/p\u003e\n\u003cp\u003e此外，尽量使用 \u003ccode\u003eUNION ALL\u003c/code\u003e，避免使用 \u003ccode\u003eUNION\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eUNION\u003c/code\u003e 和 \u003ccode\u003eUNION ALL\u003c/code\u003e 都是将两个结果集合并为一个，\u003cstrong\u003e两个要联合的 SQL 语句字段个数必须一样，而且字段类型要“相容”（一致）\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eUNION\u003c/code\u003e 需要进行去重扫描，因此消息较低；而 \u003ccode\u003eUNION ALL\u003c/code\u003e 不会进行去重。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUNION\u003c/code\u003e 会按照字段的顺序进行排序；而 \u003ccode\u003eUNION ALL\u003c/code\u003e 只是简单的将两个结果合并就返回。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"优化-COUNT-查询\"\u003e\u003ca href=\"#优化-COUNT-查询\" class=\"headerlink\" title=\"优化 COUNT() 查询\"\u003e\u003c/a\u003e优化 COUNT() 查询\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eCOUNT()\u003c/code\u003e 有两种作用：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e统计某个列值的数量。统计列值时，要求列值是非 \u003ccode\u003eNULL\u003c/code\u003e 的，它不会统计 \u003ccode\u003eNULL\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e统计行数。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e统计列值时，要求列值是非空的，它不会统计 NULL\u003c/strong\u003e。如果确认括号中的表达式不可能为空时，实际上就是在统计行数。最简单的就是当使用 \u003ccode\u003eCOUNT(*)\u003c/code\u003e 时，并不是我们所想象的那样扩展成所有的列，实际上，它会忽略所有的列而直接统计行数。\u003c/p\u003e\n\u003cp\u003e我们最常见的误解也就在这儿，在括号内指定了一列却希望统计结果是行数，而且还常常误以为前者的性能会更好。但实际并非这样，如果要统计行数，直接使用 \u003ccode\u003eCOUNT(*)\u003c/code\u003e，意义清晰，且性能更好。\u003c/p\u003e\n\u003cp\u003e（1）简单优化\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"built_in\"\u003ecount\u003c/span\u003e(\u003cspan class=\"operator\"\u003e*\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e world.city \u003cspan class=\"keyword\"\u003eWHERE\u003c/span\u003e id \u003cspan class=\"operator\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"number\"\u003e5\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e (\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"built_in\"\u003ecount\u003c/span\u003e(\u003cspan class=\"operator\"\u003e*\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e world.city) \u003cspan class=\"operator\"\u003e-\u003c/span\u003e \u003cspan class=\"built_in\"\u003ecount\u003c/span\u003e(\u003cspan class=\"operator\"\u003e*\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e world.city \u003cspan class=\"keyword\"\u003eWHERE\u003c/span\u003e id \u003cspan class=\"operator\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"number\"\u003e5\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e（2）使用近似值\u003c/p\u003e\n\u003cp\u003e有时候某些业务场景并不需要完全精确的统计值，可以用近似值来代替，\u003ccode\u003eEXPLAIN\u003c/code\u003e 出来的行数就是一个不错的近似值，而且执行 \u003ccode\u003eEXPLAIN\u003c/code\u003e 并不需要真正地去执行查询，所以成本非常低。通常来说，执行 \u003ccode\u003eCOUNT()\u003c/code\u003e 都需要扫描大量的行才能获取到精确的数据，因此很难优化，MySQL 层面还能做得也就只有覆盖索引了。如果不还能解决问题，只有从架构层面解决了，比如添加汇总表，或者使用 Redis 这样的外部缓存系统。\u003c/p\u003e\n\u003ch3 id=\"优化查询方式\"\u003e\u003ca href=\"#优化查询方式\" class=\"headerlink\" title=\"优化查询方式\"\u003e\u003c/a\u003e优化查询方式\u003c/h3\u003e\u003ch4 id=\"切分大查询\"\u003e\u003ca href=\"#切分大查询\" class=\"headerlink\" title=\"切分大查询\"\u003e\u003c/a\u003e切分大查询\u003c/h4\u003e\u003cp\u003e一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eDELEFT \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e messages \u003cspan class=\"keyword\"\u003eWHERE\u003c/span\u003e \u003cspan class=\"keyword\"\u003ecreate\u003c/span\u003e \u003cspan class=\"operator\"\u003e\u0026lt;\u003c/span\u003e DATE_SUB(NOW(), \u003cspan class=\"type\"\u003eINTERVAL\u003c/span\u003e \u003cspan class=\"number\"\u003e3\u003c/span\u003e \u003cspan class=\"keyword\"\u003eMONTH\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003erows_affected \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edo {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    rows_affected \u003cspan class=\"operator\"\u003e=\u003c/span\u003e do_query(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;DELETE FROM messages WHERE create  \u0026lt; DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} while rows_affected \u003cspan class=\"operator\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"分解大连接查询\"\u003e\u003ca href=\"#分解大连接查询\" class=\"headerlink\" title=\"分解大连接查询\"\u003e\u003c/a\u003e分解大连接查询\u003c/h4\u003e\u003cp\u003e将一个大连接查询（JOIN）分解成对每一个表进行一次单表查询，然后将结果在应用程序中进行关联，这样做的好处有：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e让缓存更高效。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用。\u003c/li\u003e\n\u003cli\u003e分解成多个单表查询，这些单表查询的缓存结果更可能被其它查询使用到，从而减少冗余记录的查询。\u003c/li\u003e\n\u003cli\u003e减少锁竞争；\u003c/li\u003e\n\u003cli\u003e在应用层进行连接，可以更容易对数据库进行拆分，从而更容易做到高性能和可扩展。\u003c/li\u003e\n\u003cli\u003e查询本身效率也可能会有所提升。例如下面的例子中，使用 IN() 代替连接查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机的连接要更高效。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"operator\"\u003e*\u003c/span\u003e \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e tag\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eJOIN\u003c/span\u003e tag_post \u003cspan class=\"keyword\"\u003eON\u003c/span\u003e tag_post.tag_id\u003cspan class=\"operator\"\u003e=\u003c/span\u003etag.id\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eJOIN\u003c/span\u003e post \u003cspan class=\"keyword\"\u003eON\u003c/span\u003e tag_post.post_id\u003cspan class=\"operator\"\u003e=\u003c/span\u003epost.id\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eWHERE\u003c/span\u003e tag.tag\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#39;mysql\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"operator\"\u003e*\u003c/span\u003e \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e tag \u003cspan class=\"keyword\"\u003eWHERE\u003c/span\u003e tag\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#39;mysql\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"operator\"\u003e*\u003c/span\u003e \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e tag_post \u003cspan class=\"keyword\"\u003eWHERE\u003c/span\u003e tag_id\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003cspan class=\"number\"\u003e1234\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"operator\"\u003e*\u003c/span\u003e \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e post \u003cspan class=\"keyword\"\u003eWHERE\u003c/span\u003e post.id \u003cspan class=\"keyword\"\u003eIN\u003c/span\u003e (\u003cspan class=\"number\"\u003e123\u003c/span\u003e,\u003cspan class=\"number\"\u003e456\u003c/span\u003e,\u003cspan class=\"number\"\u003e567\u003c/span\u003e,\u003cspan class=\"number\"\u003e9098\u003c/span\u003e,\u003cspan class=\"number\"\u003e8904\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"索引优化\"\u003e\u003ca href=\"#索引优化\" class=\"headerlink\" title=\"索引优化\"\u003e\u003c/a\u003e索引优化\u003c/h3\u003e\u003cp\u003e通过索引覆盖查询，可以优化排序、分组。\u003c/p\u003e\n\u003cp\u003e详情见 \u003ca href=\"https://dunwu.github.io/waterdrop/pages/fcb19c/\"\u003eMysql 索引\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"数据结构优化\"\u003e\u003ca href=\"#数据结构优化\" class=\"headerlink\" title=\"数据结构优化\"\u003e\u003c/a\u003e数据结构优化\u003c/h2\u003e\u003cp\u003e良好的逻辑设计和物理设计是高性能的基石。\u003c/p\u003e\n\u003ch3 id=\"数据类型优化\"\u003e\u003ca href=\"#数据类型优化\" class=\"headerlink\" title=\"数据类型优化\"\u003e\u003c/a\u003e数据类型优化\u003c/h3\u003e\u003ch4 id=\"数据类型优化基本原则\"\u003e\u003ca href=\"#数据类型优化基本原则\" class=\"headerlink\" title=\"数据类型优化基本原则\"\u003e\u003c/a\u003e数据类型优化基本原则\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e更小的通常更好\u003c/strong\u003e - 越小的数据类型通常会更快，占用更少的磁盘、内存，处理时需要的 CPU 周期也更少。\u003cul\u003e\n\u003cli\u003e例如：整型比字符类型操作代价低，因而会使用整型来存储 IP 地址，使用 \u003ccode\u003eDATETIME\u003c/code\u003e 来存储时间，而不是使用字符串。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e简单就好\u003c/strong\u003e - 如整型比字符型操作代价低。\u003cul\u003e\n\u003cli\u003e例如：很多软件会用整型来存储 IP 地址。\u003c/li\u003e\n\u003cli\u003e例如：**\u003ccode\u003eUNSIGNED\u003c/code\u003e 表示不允许负值，大致可以使正数的上限提高一倍**。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e尽量避免 NULL\u003c/strong\u003e - 可为 NULL 的列会使得索引、索引统计和值比较都更复杂。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"类型的选择\"\u003e\u003ca href=\"#类型的选择\" class=\"headerlink\" title=\"类型的选择\"\u003e\u003c/a\u003e类型的选择\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e\u003cp\u003e整数类型通常是标识列最好的选择，因为它们很快并且可以使用 \u003ccode\u003eAUTO_INCREMENT\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eENUM\u003c/code\u003e 和 \u003ccode\u003eSET\u003c/code\u003e 类型通常是一个糟糕的选择，应尽量避免。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e应该尽量避免用字符串类型作为标识列，因为它们很消耗空间，并且通常比数字类型慢。对于 \u003ccode\u003eMD5\u003c/code\u003e、\u003ccode\u003eSHA\u003c/code\u003e、\u003ccode\u003eUUID\u003c/code\u003e 这类随机字符串，由于比较随机，所以可能分布在很大的空间内，导致 \u003ccode\u003eINSERT\u003c/code\u003e 以及一些 \u003ccode\u003eSELECT\u003c/code\u003e 语句变得很慢。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果存储 UUID ，应该移除 \u003ccode\u003e-\u003c/code\u003e 符号；更好的做法是，用 \u003ccode\u003eUNHEX()\u003c/code\u003e 函数转换 UUID 值为 16 字节的数字，并存储在一个 \u003ccode\u003eBINARY(16)\u003c/code\u003e 的列中，检索时，可以通过 \u003ccode\u003eHEX()\u003c/code\u003e 函数来格式化为 16 进制格式。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"表设计\"\u003e\u003ca href=\"#表设计\" class=\"headerlink\" title=\"表设计\"\u003e\u003c/a\u003e表设计\u003c/h3\u003e\u003cp\u003e应该避免的设计问题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e太多的列\u003c/strong\u003e - 设计者为了图方便，将大量冗余列加入表中，实际查询中，表中很多列是用不到的。这种宽表模式设计，会造成不小的性能代价，尤其是 \u003ccode\u003eALTER TABLE\u003c/code\u003e 非常耗时。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e太多的关联\u003c/strong\u003e - 所谓的实体 - 属性 - 值（EAV）设计模式是一个常见的糟糕设计模式。Mysql 限制了每个关联操作最多只能有 61 张表，但 EAV 模式需要许多自关联。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e枚举\u003c/strong\u003e - 尽量不要用枚举，因为添加和删除字符串（枚举选项）必须使用 \u003ccode\u003eALTER TABLE\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e尽量避免 \u003ccode\u003eNULL\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"范式和反范式\"\u003e\u003ca href=\"#范式和反范式\" class=\"headerlink\" title=\"范式和反范式\"\u003e\u003c/a\u003e范式和反范式\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e范式化目标是尽量减少冗余，而反范式化则相反\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e范式化的优点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e比反范式更节省空间\u003c/li\u003e\n\u003cli\u003e更新操作比反范式快\u003c/li\u003e\n\u003cli\u003e更少需要 \u003ccode\u003eDISTINCT\u003c/code\u003e 或 \u003ccode\u003eGROUP BY\u003c/code\u003e 语句\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e范式化的缺点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e通常需要关联查询。而关联查询代价较高，如果是分表的关联查询，代价更是高昂。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在真实世界中，很少会极端地使用范式化或反范式化。实际上，应该权衡范式和反范式的利弊，混合使用。\u003c/p\u003e\n\u003ch3 id=\"索引优化-1\"\u003e\u003ca href=\"#索引优化-1\" class=\"headerlink\" title=\"索引优化\"\u003e\u003c/a\u003e索引优化\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003e索引优化应该是查询性能优化的最有效手段。\u003c/p\u003e\n\u003cp\u003e如果想详细了解索引特性请参考：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/dunwu/db-tutorial/blob/master/docs/sql/mysql/mysql-index.md\"\u003eMysql 索引\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"何时使用索引\"\u003e\u003ca href=\"#何时使用索引\" class=\"headerlink\" title=\"何时使用索引\"\u003e\u003c/a\u003e何时使用索引\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e对于非常小的表，大部分情况下简单的全表扫描更高效。\u003c/li\u003e\n\u003cli\u003e对于中、大型表，索引非常有效。\u003c/li\u003e\n\u003cli\u003e对于特大型表，建立和使用索引的代价将随之增长。可以考虑使用分区技术。\u003c/li\u003e\n\u003cli\u003e如果表的数量特别多，可以建立一个元数据信息表，用来查询需要用到的某些特性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"索引优化策略\"\u003e\u003ca href=\"#索引优化策略\" class=\"headerlink\" title=\"索引优化策略\"\u003e\u003c/a\u003e索引优化策略\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e索引基本原则\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e索引不是越多越好，不要为所有列都创建索引。\u003c/li\u003e\n\u003cli\u003e要尽量避免冗余和重复索引。\u003c/li\u003e\n\u003cli\u003e要考虑删除未使用的索引。\u003c/li\u003e\n\u003cli\u003e尽量的扩展索引，不要新建索引。\u003c/li\u003e\n\u003cli\u003e频繁作为 \u003ccode\u003eWHERE\u003c/code\u003e 过滤条件的列应该考虑添加索引。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e独立的列\u003c/strong\u003e - “独立的列” 是指索引列不能是表达式的一部分，也不能是函数的参数。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e前缀索引\u003c/strong\u003e - 索引很长的字符列，可以索引开始的部分字符，这样可以大大节约索引空间。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e最左匹配原则\u003c/strong\u003e - 将选择性高的列或基数大的列优先排在多列索引最前列。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e使用索引来排序\u003c/strong\u003e - 索引最好既满足排序，又用于查找行。这样，就可以使用索引来对结果排序。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e=\u003c/code\u003e、\u003ccode\u003eIN\u003c/code\u003e 可以乱序 - 不需要考虑 \u003ccode\u003e=\u003c/code\u003e、\u003ccode\u003eIN\u003c/code\u003e 等的顺序\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e覆盖索引\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e自增字段作主键\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"数据模型和业务\"\u003e\u003ca href=\"#数据模型和业务\" class=\"headerlink\" title=\"数据模型和业务\"\u003e\u003c/a\u003e数据模型和业务\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e表字段比较复杂、易变动、结构难以统一的情况下，可以考虑使用 Nosql 来代替关系数据库表存储，如 ElasticSearch、MongoDB。\u003c/li\u003e\n\u003cli\u003e在高并发情况下的查询操作，可以使用缓存（如 Redis）代替数据库操作，提高并发性能。\u003c/li\u003e\n\u003cli\u003e数据量增长较快的表，需要考虑水平分表或分库，避免单表操作的性能瓶颈。\u003c/li\u003e\n\u003cli\u003e除此之外，我们应该通过一些优化，尽量避免比较复杂的 JOIN 查询操作，例如冗余一些字段，减少 JOIN 查询；创建一些中间表，减少 JOIN 查询。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/23008813/\"\u003e《高性能 MySQL》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/139\"\u003eMySQL 实战 45 讲\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100028001\"\u003e《Java 性能调优实战》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.jianshu.com/p/d7665192aaaf\"\u003e我必须得告诉大家的 MySQL 优化原理\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.jfox.info/20-tiao-mysql-xing-nen-you-hua-de-zui-jia-jing-yan.html\"\u003e20+ 条 MySQL 性能优化的最佳经验\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/8.0/en/execution-plan-information.html\"\u003eMysql 官方文档之执行计划\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://segmentfault.com/a/1190000008131735\"\u003eMySQL 性能优化神器 Explain 使用分析\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-06-03T12:16:48Z",
  "Author": "钝悟 ◾ Dunwu"
}