{
  "Source": "dunwu",
  "Title": "Hystrix 快速入门",
  "Link": "https://dunwu.github.io/blog/pages/364124/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Hystrix-快速入门\"\u003e\u003ca href=\"#Hystrix-快速入门\" class=\"headerlink\" title=\"Hystrix 快速入门\"\u003e\u003c/a\u003eHystrix 快速入门\u003c/h1\u003e\u003ch2 id=\"一、Hystrix-简介\"\u003e\u003ca href=\"#一、Hystrix-简介\" class=\"headerlink\" title=\"一、Hystrix 简介\"\u003e\u003c/a\u003e一、Hystrix 简介\u003c/h2\u003e\u003ch3 id=\"Hystrix-是什么\"\u003e\u003ca href=\"#Hystrix-是什么\" class=\"headerlink\" title=\"Hystrix 是什么\"\u003e\u003c/a\u003eHystrix 是什么\u003c/h3\u003e\u003cp\u003eHystrix 是 Netflix 开源的一款容错框架，包含常用的容错方法：线程池隔离、信号量隔离、熔断、降级。\u003c/p\u003e\n\u003cp\u003eHystrix 官方宣布\u003cstrong\u003e不再发布新版本\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e但是 Hystrix 的客户端熔断保护，断路器设计理念，有非常高的学习价值。\u003c/p\u003e\n\u003ch3 id=\"为什么需要-Hystrix\"\u003e\u003ca href=\"#为什么需要-Hystrix\" class=\"headerlink\" title=\"为什么需要 Hystrix\"\u003e\u003c/a\u003e为什么需要 Hystrix\u003c/h3\u003e\u003cp\u003e复杂的分布式系统架构中的应用程序往往具有数十个依赖项，每个依赖项都会不可避免地在某个时刻失败。 如果主机应用程序未与这些外部故障隔离开来，则可能会被波及。\u003c/p\u003e\n\u003cp\u003e例如，对于依赖于 30 个服务的应用程序，假设每个服务的正常运行时间为 99.99％，则可以期望：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e99.99\u003csup\u003e30\u003c/sup\u003e = 99.7％ 的正常运行时间\u003c/p\u003e\n\u003cp\u003e10 亿个请求中的 0.3％= 3,000,000 个失败\u003c/p\u003e\n\u003cp\u003e即使所有依赖项都具有出色的正常运行时间，每月也会有 2 个小时以上的停机时间。\u003c/p\u003e\n\u003cp\u003e然而，现实情况一般比这种估量情况更糟糕。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003chr/\u003e\n\u003cp\u003e当一切正常时，整体系统如下所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200717141615.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e在高并发场景，这些依赖的稳定性与否对系统的影响非常大，但是依赖有很多不可控问题：如网络连接、资源繁忙、服务宕机等。例如：下图中有一个 QPS 为 50 的依赖 I 出现不可用，但是其他依赖服务是可用的。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200717141749.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e但是，在高并发场景下，当依赖 I 阻塞时，大多数服务器的线程池就出现阻塞(BLOCK)。当这种级联故障愈演愈烈，就可能造成整个线上服务不可用的雪崩效应，如下图：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200717141859.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003eHystrix 就是为了解决这类问题而应运而生。\u003c/p\u003e\n\u003ch3 id=\"Hystrix-的功能\"\u003e\u003ca href=\"#Hystrix-的功能\" class=\"headerlink\" title=\"Hystrix 的功能\"\u003e\u003c/a\u003eHystrix 的功能\u003c/h3\u003e\u003cp\u003eHystrix 具有以下功能：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e避免资源耗尽：阻止任何一个依赖服务耗尽所有的资源，比如 tomcat 中的所有线程资源。\u003c/li\u003e\n\u003cli\u003e避免请求排队和积压：采用限流和 \u003ccode\u003efail fast\u003c/code\u003e 来控制故障。\u003c/li\u003e\n\u003cli\u003e支持降级：提供 fallback 降级机制来应对故障。\u003c/li\u003e\n\u003cli\u003e资源隔离：比如 \u003ccode\u003ebulkhead\u003c/code\u003e（舱壁隔离技术）、\u003ccode\u003eswimlane\u003c/code\u003e（泳道技术）、\u003ccode\u003ecircuit breaker\u003c/code\u003e（断路技术）来限制任何一个依赖服务的故障的影响。\u003c/li\u003e\n\u003cli\u003e统计/监控/报警：通过近实时的统计/监控/报警功能，来提高故障发现的速度。\u003c/li\u003e\n\u003cli\u003e通过近实时的属性和配置\u003cstrong\u003e热修改\u003c/strong\u003e功能，来提高故障处理和恢复的速度。\u003c/li\u003e\n\u003cli\u003e保护依赖服务调用的所有故障情况，而不仅仅只是网络故障情况。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果使用 Hystrix 对每个基础依赖服务进行过载保护，则整个系统架构将会类似下图所示，每个依赖项彼此隔离，受到延迟时发生饱和的资源的被限制访问，并包含 fallback 逻辑（用于降级处理），该逻辑决定了在依赖项中发生任何类型的故障时做出对应的处理。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200717142842.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"Hystrix-核心概念\"\u003e\u003ca href=\"#Hystrix-核心概念\" class=\"headerlink\" title=\"Hystrix 核心概念\"\u003e\u003c/a\u003eHystrix 核心概念\u003c/h2\u003e\u003ch2 id=\"二、Hystrix-工作流程\"\u003e\u003ca href=\"#二、Hystrix-工作流程\" class=\"headerlink\" title=\"二、Hystrix 工作流程\"\u003e\u003c/a\u003e二、Hystrix 工作流程\u003c/h2\u003e\u003cp\u003e如下图所示，Hystrix 的工作流程大致可以分为 9 个步骤。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200717143247.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"（一）包装命令\"\u003e\u003ca href=\"#（一）包装命令\" class=\"headerlink\" title=\"（一）包装命令\"\u003e\u003c/a\u003e（一）包装命令\u003c/h3\u003e\u003cp\u003ex 支持资源隔离。\u003c/p\u003e\n\u003cp\u003e资源隔离，就是说，你如果要把对某一个依赖服务的所有调用请求，全部隔离在同一份资源池内，不会去用其它资源了，这就叫资源隔离。哪怕对这个依赖服务，比如说商品服务，现在同时发起的调用量已经到了 1000，但是分配给商品服务线程池内就 10 个线程，最多就只会用这 10 个线程去执行。不会因为对商品服务调用的延迟，将 Tomcat 内部所有的线程资源全部耗尽。\u003c/p\u003e\n\u003cp\u003eHystrix 进行资源隔离，其实是提供了一个抽象，叫做命令模式。这也是 Hystrix 最最基本的资源隔离技术。\u003c/p\u003e\n\u003cp\u003e在使用 Hystrix 的过程中，会对\u003cstrong\u003e依赖服务\u003c/strong\u003e的调用请求封装成\u003cstrong\u003e命令对象\u003c/strong\u003e，Hystrix 对 \u003cstrong\u003e命令对象\u003c/strong\u003e抽象了两个抽象类：\u003ccode\u003eHystrixCommand\u003c/code\u003e 和\u003ccode\u003eHystrixObservableCommand\u003c/code\u003e 。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eHystrixCommand\u003c/code\u003e 表示的\u003cstrong\u003e命令对象\u003c/strong\u003e会返回一个唯一返回值。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eHystrixObservableCommand\u003c/code\u003e 表示的\u003cstrong\u003e命令对象\u003c/strong\u003e 会返回多个返回值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eHystrixCommand\u003c/span\u003e \u003cspan class=\"variable\"\u003ecommand\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eHystrixCommand\u003c/span\u003e(arg1, arg2);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eHystrixObservableCommand\u003c/span\u003e \u003cspan class=\"variable\"\u003ecommand\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eHystrixObservableCommand\u003c/span\u003e(arg1, arg2);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"（二）执行命令\"\u003e\u003ca href=\"#（二）执行命令\" class=\"headerlink\" title=\"（二）执行命令\"\u003e\u003c/a\u003e（二）执行命令\u003c/h3\u003e\u003cp\u003eHystrix 中共有 4 种方式执行命令，如下所示：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e执行方式\u003c/th\u003e\n\u003cth align=\"left\"\u003e说明\u003c/th\u003e\n\u003cth align=\"left\"\u003e可用对象\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eexecute()\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e阻塞式同步执行，返回依赖服务的单一返回结果(或者抛出异常)\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eHystrixCommand\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003equeue()\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e基于 Future 的异步方式执行，返回依赖服务的单一返回结果(或者抛出异常)\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eHystrixCommand\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eobserve()\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e基于 Rxjava 的 Observable 方式，返回通过 Observable 表示的依赖服务返回结果,代调用代码先执行(Hot Obserable)\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eHystrixObservableCommand\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003etoObvsevable\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e基于 Rxjava 的 Observable 方式，返回通过 Observable 表示的依赖服务返回结果,执行代码等到真正订阅的时候才会执行(cold observable)\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eHystrixObservableCommand\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e这四种命令中，\u003ccode\u003eexeucte()\u003c/code\u003e、\u003ccode\u003equeue()\u003c/code\u003e、\u003ccode\u003eobserve()\u003c/code\u003e的表示也是通过\u003ccode\u003etoObservable()\u003c/code\u003e实现的，其转换关系如下图所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://upload-images.jianshu.io/upload_images/14126519-60964d9fa41614c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/563/format/webp\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eHystrixCommand\u003c/code\u003e 执行方式\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eK\u003c/span\u003e \u003cspan class=\"variable\"\u003evalue\u003c/span\u003e   \u003cspan class=\"operator\"\u003e=\u003c/span\u003e command.execute();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 等价语句：\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eK\u003c/span\u003e \u003cspan class=\"variable\"\u003evalue\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e command.execute().queue().get();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eFuture\u0026lt;K\u0026gt; fValue  = command.queue();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//等价语句：\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eFuture\u0026lt;K\u0026gt; fValue = command.toObservable().toBlocking().toFuture();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eObservable\u0026lt;K\u0026gt; ohValue = command.observe(); \u003cspan class=\"comment\"\u003e//hot observable，立刻订阅，命令立刻执行\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//等价语句：\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eObservable\u0026lt;K\u0026gt; ohValue = command.toObservable().subscribe(subject);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 上述执行最终实现还是基于 toObservable()\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eObservable\u0026lt;K\u0026gt; ocValue = command.toObservable(); \u003cspan class=\"comment\"\u003e//cold observable，延后订阅，订阅发生后，执行才真正执行\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"（三）是否缓存\"\u003e\u003ca href=\"#（三）是否缓存\" class=\"headerlink\" title=\"（三）是否缓存\"\u003e\u003c/a\u003e（三）是否缓存\u003c/h3\u003e\u003cp\u003e如果当前命令对象配置了允许从\u003ccode\u003e结果缓存\u003c/code\u003e中取返回结果，并且在\u003ccode\u003e结果缓存\u003c/code\u003e中已经缓存了请求结果，则缓存的请求结果会立刻通过 \u003ccode\u003eObservable\u003c/code\u003e 的格式返回。\u003c/p\u003e\n\u003ch3 id=\"（四）是否开启断路器\"\u003e\u003ca href=\"#（四）是否开启断路器\" class=\"headerlink\" title=\"（四）是否开启断路器\"\u003e\u003c/a\u003e（四）是否开启断路器\u003c/h3\u003e\u003cp\u003e如果第三步没有缓存没有命中，则判断一下当前断路器的断路状态是否打开。如果断路器状态为\u003ccode\u003e打开\u003c/code\u003e状态，则 \u003ccode\u003eHystrix\u003c/code\u003e 将不会执行此 Command 命令，直接执行\u003cstrong\u003e步骤 8\u003c/strong\u003e 调用 Fallback；\u003c/p\u003e\n\u003cp\u003e如果断路器状态是\u003ccode\u003e关闭\u003c/code\u003e，则执行 \u003cstrong\u003e步骤 5\u003c/strong\u003e 检查是否有足够的资源运行 Command 命令\u003c/p\u003e\n\u003ch3 id=\"（五）信号量、线程池是否拒绝\"\u003e\u003ca href=\"#（五）信号量、线程池是否拒绝\" class=\"headerlink\" title=\"（五）信号量、线程池是否拒绝\"\u003e\u003c/a\u003e（五）信号量、线程池是否拒绝\u003c/h3\u003e\u003cp\u003e如果当前要执行的 Command 命令 先关连的线程池 和队列(或者信号量)资源已经满了，Hystrix 将不会运行 Command 命令，直接执行 \u003cstrong\u003e步骤 8\u003c/strong\u003e的 Fallback 降级处理；如果未满，表示有剩余的资源执行 Command 命令，则执行\u003cstrong\u003e步骤 6\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id=\"（六）construct-或-run\"\u003e\u003ca href=\"#（六）construct-或-run\" class=\"headerlink\" title=\"（六）construct() 或 run()\"\u003e\u003c/a\u003e（六）construct() 或 run()\u003c/h3\u003e\u003cp\u003e当经过\u003cstrong\u003e步骤 5\u003c/strong\u003e 判断，有足够的资源执行 Command 命令时，本步骤将调用 Command 命令运行方法，基于不同类型的 Command，有如下两种两种运行方式：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e运行方式\u003c/th\u003e\n\u003cth align=\"left\"\u003e说明\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eHystrixCommand.run()\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e返回一个处理结果或者抛出一个异常\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eHystrixObservableCommand.construct()\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e返回一个 Observable 表示的结果(可能多个)，或者 基于\u003ccode\u003eonError\u003c/code\u003e的错误通知\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e如果\u003ccode\u003erun()\u003c/code\u003e 或者\u003ccode\u003econstruct()\u003c/code\u003e方法 的\u003ccode\u003e真实执行时间\u003c/code\u003e超过了 Command 设置的\u003ccode\u003e超时时间阈值\u003c/code\u003e, 则\u003cstrong\u003e当前则执行线程\u003c/strong\u003e（或者是独立的定时器线程）将会抛出\u003ccode\u003eTimeoutException\u003c/code\u003e。抛出超时异常 TimeoutException，后，将执行\u003cstrong\u003e步骤 8\u003c/strong\u003e的 Fallback 降级处理。即使\u003ccode\u003erun()\u003c/code\u003e或者\u003ccode\u003econstruct()\u003c/code\u003e执行没有被取消或中断，最终能够处理返回结果，但在降级处理逻辑中，将会抛弃\u003ccode\u003erun()\u003c/code\u003e或\u003ccode\u003econstruct()\u003c/code\u003e方法的返回结果，而返回 Fallback 降级处理结果。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e注意事项\u003c/strong\u003e\u003cbr/\u003e需要注意的是，Hystrix 无法强制 将正在运行的线程停止掉–Hystrix 能够做的最好的方式就是在 JVM 中抛出一个\u003ccode\u003eInterruptedException\u003c/code\u003e。如果 Hystrix 包装的工作不抛出中断异常\u003ccode\u003eInterruptedException\u003c/code\u003e, 则在 Hystrix 线程池中的线程将会继续执行，尽管\u003ccode\u003e调用的客户端\u003c/code\u003e已经接收到了\u003ccode\u003eTimeoutException\u003c/code\u003e。这种方式会使 Hystrix 的线程池处于饱和状态。大部分的 Java Http Client 开源库并不会解析 \u003ccode\u003eInterruptedException\u003c/code\u003e。所以确认 HTTP client 相关的连接和读/写相关的超时时间设置。\u003cbr/\u003e如果 Command 命令没有抛出任何异常，并且有返回结果，则 Hystrix 将会在做完日志记录和统计之后会将结果返回。 如果是通过\u003ccode\u003erun()\u003c/code\u003e方式运行，则返回一个\u003ccode\u003eObserable\u003c/code\u003e对象，包含一个唯一值，并且发送一个\u003ccode\u003eonCompleted\u003c/code\u003e通知；如果是通过\u003ccode\u003econsturct()\u003c/code\u003e方式运行 ，则返回一个\u003ccode\u003eObservable对象\u003c/code\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"（七）健康检查\"\u003e\u003ca href=\"#（七）健康检查\" class=\"headerlink\" title=\"（七）健康检查\"\u003e\u003c/a\u003e（七）健康检查\u003c/h3\u003e\u003cp\u003eHystrix 会统计 Command 命令执行执行过程中的\u003cstrong\u003e成功数\u003c/strong\u003e、\u003cstrong\u003e失败数\u003c/strong\u003e、\u003cstrong\u003e拒绝数\u003c/strong\u003e和\u003cstrong\u003e超时数\u003c/strong\u003e,将这些信息记录到\u003cstrong\u003e断路器(Circuit Breaker)\u003cstrong\u003e中。断路器将上述统计按照\u003c/strong\u003e时间窗\u003c/strong\u003e的形式记录到一个定长数组中。断路器根据时间窗内的统计数据去判定请求什么时候可以被熔断，熔断后，在接下来一段恢复周期内，相同的请求过来后会直接被熔断。当再次校验，如果健康监测通过后，熔断开关将会被关闭。\u003c/p\u003e\n\u003ch3 id=\"（八）获取-Fallback\"\u003e\u003ca href=\"#（八）获取-Fallback\" class=\"headerlink\" title=\"（八）获取 Fallback\"\u003e\u003c/a\u003e（八）获取 Fallback\u003c/h3\u003e\u003cp\u003e当以下场景出现后，Hystrix 将会尝试触发 \u003ccode\u003eFallback\u003c/code\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e步骤 6 Command 执行时抛出了任何异常；\u003c/li\u003e\n\u003cli\u003e步骤 4 断路器已经被打开\u003c/li\u003e\n\u003cli\u003e步骤 5 执行命令的线程池、队列或者信号量资源已满\u003c/li\u003e\n\u003cli\u003e命令执行的时间超过阈值\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"（九）返回结果\"\u003e\u003ca href=\"#（九）返回结果\" class=\"headerlink\" title=\"（九）返回结果\"\u003e\u003c/a\u003e（九）返回结果\u003c/h3\u003e\u003cp\u003e如果 Hystrix 命令对象执行成功，将会返回结果，或者以\u003ccode\u003eObservable\u003c/code\u003e形式包装的结果。根据\u003cstrong\u003e步骤 2\u003c/strong\u003e的 command 调用方式，返回的\u003ccode\u003eObservable\u003c/code\u003e 会按照如下图说是的转换关系进行返回：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://upload-images.jianshu.io/upload_images/14126519-8790f97df332d9a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eexecute()\u003c/code\u003e — 用和 \u003ccode\u003e.queue()\u003c/code\u003e 相同的方式获取 \u003ccode\u003eFuture\u003c/code\u003e，然后调用 \u003ccode\u003eFuture\u003c/code\u003e 的 \u003ccode\u003eget()\u003c/code\u003e 以获取 \u003ccode\u003eObservable\u003c/code\u003e 的单个值。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003equeue()\u003c/code\u003e —将 \u003ccode\u003eObservable\u003c/code\u003e 转换为 \u003ccode\u003eBlockingObservable\u003c/code\u003e，以便可以将其转换为 \u003ccode\u003eFuture\u003c/code\u003e 并返回。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewatch()\u003c/code\u003e —订阅 \u003ccode\u003eObservable\u003c/code\u003e 并开始执行命令的流程； 返回一个 \u003ccode\u003eObservable\u003c/code\u003e，当订阅该 \u003ccode\u003eObservable\u003c/code\u003e 时，它会重新通知。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etoObservable()\u003c/code\u003e —返回不变的 \u003ccode\u003eObservable\u003c/code\u003e； 必须订阅它才能真正开始执行命令的流程。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"三、断路器工作原理\"\u003e\u003ca href=\"#三、断路器工作原理\" class=\"headerlink\" title=\"三、断路器工作原理\"\u003e\u003c/a\u003e三、断路器工作原理\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://upload-images.jianshu.io/upload_images/14126519-dce007513bf90794.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e断路器时间窗内的请求数 是否超过了\u003cstrong\u003e请求数断路器生效阈值\u003c/strong\u003e\u003ccode\u003ecircuitBreaker.requestVolumeThreshold\u003c/code\u003e,如果超过了阈值，则将会触发断路，断路状态为\u003cstrong\u003e开启\u003c/strong\u003e\u003cbr/\u003e例如，如果当前阈值设置的是\u003ccode\u003e20\u003c/code\u003e,则当时间窗内统计的请求数共计 19 个，即使 19 个全部失败了，都不会触发断路器。\u003c/li\u003e\n\u003cli\u003e并且请求错误率超过了\u003cstrong\u003e请求错误率阈值\u003c/strong\u003e\u003ccode\u003eerrorThresholdPercentage\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e如果两个都满足，则将断路器由\u003cstrong\u003e关闭\u003c/strong\u003e迁移到\u003cstrong\u003e开启\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e如果断路器开启，则后续的所有相同请求将会被断路掉；\u003c/li\u003e\n\u003cli\u003e直到过了\u003cstrong\u003e沉睡时间窗\u003c/strong\u003e\u003ccode\u003esleepWindowInMilliseconds\u003c/code\u003e后，再发起请求时，允许其通过（此时的状态为\u003cstrong\u003e半开起状态\u003c/strong\u003e）。如果请求失败了，则保持断路器状态为\u003cstrong\u003e开启\u003c/strong\u003e状态，并更新\u003cstrong\u003e沉睡时间窗\u003c/strong\u003e。如果请求成功了，则将断路器状态改为\u003cstrong\u003e关闭\u003c/strong\u003e状态；\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e核心的逻辑如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                       \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eonNext\u003c/span\u003e\u003cspan class=\"params\"\u003e(HealthCounts hc)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                           \u003cspan class=\"comment\"\u003e// check if we are past the statisticalWindowVolumeThreshold\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                           \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (hc.getTotalRequests() \u0026lt; properties.circuitBreakerRequestVolumeThreshold().get()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                               \u003cspan class=\"comment\"\u003e// we are not past the minimum volume threshold for the stat window,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                               \u003cspan class=\"comment\"\u003e// so no change to circuit status.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                               \u003cspan class=\"comment\"\u003e// if it was CLOSED, it stays CLOSED\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                               \u003cspan class=\"comment\"\u003e// if it was half-open, we need to wait for a successful command execution\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                               \u003cspan class=\"comment\"\u003e// if it was open, we need to wait for sleep window to elapse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                           } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                               \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (hc.getErrorPercentage() \u0026lt; properties.circuitBreakerErrorThresholdPercentage().get()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                   \u003cspan class=\"comment\"\u003e//we are not past the minimum error threshold for the stat window,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                   \u003cspan class=\"comment\"\u003e// so no change to circuit status.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                   \u003cspan class=\"comment\"\u003e// if it was CLOSED, it stays CLOSED\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                   \u003cspan class=\"comment\"\u003e// if it was half-open, we need to wait for a successful command execution\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                   \u003cspan class=\"comment\"\u003e// if it was open, we need to wait for sleep window to elapse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                               } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                   \u003cspan class=\"comment\"\u003e// our failure rate is too high, we need to set the state to OPEN\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                   \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (status.compareAndSet(Status.CLOSED, Status.OPEN)) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                       circuitOpened.set(System.currentTimeMillis());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                   }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                               }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                           }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                       }\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"系统指标\"\u003e\u003ca href=\"#系统指标\" class=\"headerlink\" title=\"系统指标\"\u003e\u003c/a\u003e系统指标\u003c/h3\u003e\u003cp\u003eHystrix 对系统指标的统计是基于时间窗模式的：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e时间窗\u003c/strong\u003e：最近的一个时间区间内，比如前一小时到现在，那么时间窗的长度就是\u003ccode\u003e1小时\u003c/code\u003e；\u003cbr/\u003e\u003cstrong\u003e桶\u003c/strong\u003e：桶是在特定的\u003cstrong\u003e时间窗\u003c/strong\u003e内，等分的指标收集的统计集合；比如时间窗的长度为\u003ccode\u003e1小时\u003c/code\u003e，而桶的数量为\u003ccode\u003e10\u003c/code\u003e,那么每个桶在时间轴上依次排开，时间由远及近，每个桶统计的时间分片为 \u003ccode\u003e1h / 10 = 6 min\u003c/code\u003e 6 分钟。一个桶中，包含了\u003ccode\u003e成功数\u003c/code\u003e、\u003ccode\u003e失败数\u003c/code\u003e、\u003ccode\u003e超时数\u003c/code\u003e、\u003ccode\u003e拒绝数\u003c/code\u003e 四个指标。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e在系统内，时间窗会随着系统的运行逐渐向前移动，而时间窗的长度和桶的数量是固定不变的，那么随着时间的移动，会出现较久的过期的桶被移除出去，新的桶被添加进来，如下图所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://upload-images.jianshu.io/upload_images/14126519-11710915e1a5dcda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"四、资源隔离技术\"\u003e\u003ca href=\"#四、资源隔离技术\" class=\"headerlink\" title=\"四、资源隔离技术\"\u003e\u003c/a\u003e四、资源隔离技术\u003c/h2\u003e\u003ch3 id=\"线程池隔离\"\u003e\u003ca href=\"#线程池隔离\" class=\"headerlink\" title=\"线程池隔离\"\u003e\u003c/a\u003e线程池隔离\u003c/h3\u003e\u003cp\u003e如下图所示，由于计算机系统的基本执行单位就是线程，线程具备独立的执行能力，所以，为了做到资源保护，需要对系统的线程池进行划分，对于外部调用方\u003c/p\u003e\n\u003cfigure class=\"highlight crmsh\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eUser\u003c/span\u003e \u003cspan class=\"title\"\u003eRequest\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e的请求，调用各个线程池的服务，各个线程池独立完成调用，然后将结果返回\u003c/p\u003e\n\u003cfigure class=\"highlight\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e调用方\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e。在调用服务的过程中，如果\u003c/p\u003e\n\u003cfigure class=\"highlight\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e服务提供方\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e执行时间过长，则\u003c/p\u003e\n\u003cfigure class=\"highlight\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e调用方\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可以直接以超时的方式直接返回，快速失败。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://upload-images.jianshu.io/upload_images/14126519-55a0be64ecac4cda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e线程池隔离的几点好处\u003c/p\u003e\n\u003cblockquote\u003e\n\u003col\u003e\n\u003cli\u003e使用超时返回的机制，避免同步调用服务时，调用时间过长，无法释放，导致资源耗尽的情况\u003c/li\u003e\n\u003cli\u003e服务方可以控制请求数量，请求过多，可以直接拒绝,达到快速失败的目的；\u003c/li\u003e\n\u003cli\u003e请求排队，线程池可以维护执行队列，将请求压到队列中处理\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e举个例子，如下代码段，模拟了同步调用服务的过程：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//服务提供方，执行服务的时候模拟2分钟的耗时\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCallable\u0026lt;String\u0026gt; callableService  = ()-\u0026gt;{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003elong\u003c/span\u003e \u003cspan class=\"variable\"\u003estart\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e System.currentTimeMillis();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e(System.currentTimeMillis()-start\u0026gt; \u003cspan class=\"number\"\u003e1000\u003c/span\u003e * \u003cspan class=\"number\"\u003e60\u003c/span\u003e *\u003cspan class=\"number\"\u003e2\u003c/span\u003e){\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       \u003cspan class=\"comment\"\u003e//模拟服务执行时间过长的情况\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;OK\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//模拟10个客户端调用服务\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eExecutorService\u003c/span\u003e \u003cspan class=\"variable\"\u003eclients\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Executors.newFixedThreadPool(\u003cspan class=\"number\"\u003e10\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//模拟给10个客户端提交处理请求\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e20\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    clients.execute(()-\u0026gt;{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e//同步调用\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003eresult\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e callableService.call();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;当前客户端：\u0026#34;\u003c/span\u003e+Thread.currentThread().getName()+\u003cspan class=\"string\"\u003e\u0026#34;调用服务完成，得到结果：\u0026#34;\u003c/span\u003e+result);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (Exception e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            e.printStackTrace();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    });\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在此环节中，客户端 \u003ccode\u003eclients\u003c/code\u003e必须等待服务方返回结果之后，才能接收新的请求。如果用吞吐量来衡量系统的话，会发现系统的处理能力比较低。为了提高相应时间，可以借助线程池的方式，设置超时时间，这样的话，客户端就不需要必须等待服务方返回，如果时间过长，可以提前返回,改造后的代码如下所示：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//服务提供方，执行服务的时候模拟2分钟的耗时\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       Callable\u0026lt;String\u0026gt; callableService  = ()-\u0026gt;{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e           \u003cspan class=\"type\"\u003elong\u003c/span\u003e \u003cspan class=\"variable\"\u003estart\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e System.currentTimeMillis();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e           \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e(System.currentTimeMillis()-start\u0026gt; \u003cspan class=\"number\"\u003e1000\u003c/span\u003e * \u003cspan class=\"number\"\u003e60\u003c/span\u003e *\u003cspan class=\"number\"\u003e2\u003c/span\u003e){\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              \u003cspan class=\"comment\"\u003e//模拟服务执行时间过长的情况\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e           }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e           \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;OK\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       };\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       \u003cspan class=\"comment\"\u003e//创建线程池作为服务方\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       \u003cspan class=\"type\"\u003eExecutorService\u003c/span\u003e \u003cspan class=\"variable\"\u003eexecutorService\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Executors.newFixedThreadPool(\u003cspan class=\"number\"\u003e30\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       \u003cspan class=\"comment\"\u003e//模拟10个客户端调用服务\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       \u003cspan class=\"type\"\u003eExecutorService\u003c/span\u003e \u003cspan class=\"variable\"\u003eclients\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Executors.newFixedThreadPool(\u003cspan class=\"number\"\u003e10\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e10\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e           clients.execute(()-\u0026gt;{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e               \u003cspan class=\"comment\"\u003e//同步调用\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                   \u003cspan class=\"comment\"\u003e//将请求提交给线程池执行，Callable 和 Runnable在某种意义上，也是Command对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                   Future\u0026lt;String\u0026gt; future = executorService.submit(callableService::call);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                   \u003cspan class=\"comment\"\u003e//在指定的时间内获取结果，如果超时，调用方可以直接返回\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                   \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                       \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003eresult\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e future.get(\u003cspan class=\"number\"\u003e1000\u003c/span\u003e, TimeUnit.SECONDS);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                       \u003cspan class=\"comment\"\u003e//客户端等待时间之后，快速返回\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                       System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;当前客户端：\u0026#34;\u003c/span\u003e+Thread.currentThread().getName()+\u003cspan class=\"string\"\u003e\u0026#34;调用服务完成，得到结果：\u0026#34;\u003c/span\u003e+result);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                   }\u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (TimeoutException timeoutException){\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                       System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;服务调用超时，返回处理\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                   } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (InterruptedException e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                   } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (ExecutionException e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                   }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e           });\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       }\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果我们将服务方的线程池设置为：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eThreadPoolExecutor\u003c/span\u003e \u003cspan class=\"variable\"\u003eexecutorService\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eThreadPoolExecutor\u003c/span\u003e(\u003cspan class=\"number\"\u003e10\u003c/span\u003e,\u003cspan class=\"number\"\u003e1000\u003c/span\u003e,TimeUnit.SECONDS,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eArrayBlockingQueue\u003c/span\u003e\u0026lt;\u0026gt;(\u003cspan class=\"number\"\u003e100\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eThreadPoolExecutor\u003c/span\u003e.DiscardPolicy() \u003cspan class=\"comment\"\u003e// 提交请求过多时，可以丢弃请求，避免死等阻塞的情况。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003e线程池隔离模式的弊端\u003c/strong\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e线程池隔离模式，会根据服务划分出独立的线程池，系统资源的线程并发数是有限的，当线程数过多，系统话费大量的 CPU 时间来做线程上下文切换的无用操作，反而降低系统性能；如果线程池隔离的过多，会导致真正用于接收用户请求的线程就相应地减少，系统吞吐量反而下降；\u003cbr/\u003e\u003cstrong\u003e在实践上，应当对像远程方法调用，网络资源请求这种服务时间不太可控的场景下使用线程池隔离模式处理\u003c/strong\u003e\u003cbr/\u003e如下图所示，是线程池隔离模式的三种场景：\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg src=\"https://upload-images.jianshu.io/upload_images/14126519-8e16e7f8072475eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"信号量隔离\"\u003e\u003ca href=\"#信号量隔离\" class=\"headerlink\" title=\"信号量隔离\"\u003e\u003c/a\u003e信号量隔离\u003c/h3\u003e\u003cp\u003e由于基于线程池隔离的模式占用系统线程池资源，Hystrix 还提供了另外一个隔离技术：基于信号量的隔离。\u003c/p\u003e\n\u003cp\u003e基于信号量的隔离方式非常地简单，其核心就是使用共用变量\u003c/p\u003e\n\u003cfigure class=\"highlight ebnf\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003esemaphore\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e进行原子操作，控制线程的并发量，当并发量达到一定量级时，服务禁止调用。如下图所示：信号量本身不会消耗多余的线程资源，所以就非常轻量。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://upload-images.jianshu.io/upload_images/14126519-9af3442e03df941e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e基于信号量隔离的利弊\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e利：基于信号量的隔离，利用 JVM 的原子性 CAS 操作，避免了资源锁的竞争，省去了线程池开销，效率非常高；\u003cbr/\u003e弊：本质上基于信号量的隔离是同步行为，所以无法做到超时熔断，所以服务方自身要控制住执行时间，避免超时。\u003cbr/\u003e应用场景：\u003cstrong\u003e业务服务上，有并发上限限制时，可以考虑此方式\u003c/strong\u003e \u0026gt; \u003ccode\u003eAlibaba Sentinel\u003c/code\u003e开源框架，就是基于信号量的熔断和断路器框架。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"五、Hystrix-应用\"\u003e\u003ca href=\"#五、Hystrix-应用\" class=\"headerlink\" title=\"五、Hystrix 应用\"\u003e\u003c/a\u003e五、Hystrix 应用\u003c/h2\u003e\u003ch3 id=\"Spring-Cloud-Hystrix\"\u003e\u003ca href=\"#Spring-Cloud-Hystrix\" class=\"headerlink\" title=\"Spring Cloud + Hystrix\"\u003e\u003c/a\u003eSpring Cloud + Hystrix\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHystrix 配置无法动态调节生效\u003c/strong\u003e。Hystrix 框架本身是使用的\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://links.jianshu.com/go?to=https://github.com/Netflix/archaius\"\u003eArchaius\u003c/a\u003e框架完成的配置加载和刷新，但是集成自 Spring Cloud 下，无法有效地根据实时监控结果，动态调整熔断和系统参数\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e线程池和 Command 之间的配置比较复杂\u003c/strong\u003e,在 Spring Cloud 在做 feigin-hystrix 集成的时候，还有些 BUG，对 command 的默认配置没有处理好，导致所有 command 占用公共的 command 线程池，没有细粒度控制，还需要做框架适配调整\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight php\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"title\"\u003eSetterFactory\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e   * Returns a hystrix setter appropriate for the given target and method\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e   */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  HystrixCommand.Setter \u003cspan class=\"title function_ invoke__\"\u003ecreate\u003c/span\u003e(Target\u0026lt;?\u0026gt; target, Method method);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e   * Default behavior is to derive the group key from {\u003cspan class=\"doctag\"\u003e@link\u003c/span\u003e Target#name()} and the command key from\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e   * {\u003cspan class=\"doctag\"\u003e@link\u003c/span\u003e Feign#configKey(Class, Method)}.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e   */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eDefault\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title\"\u003eSetterFactory\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    @Override\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e HystrixCommand.Setter \u003cspan class=\"title function_ invoke__\"\u003ecreate\u003c/span\u003e(Target\u0026lt;?\u0026gt; target, Method method) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      String groupKey = target.\u003cspan class=\"title function_ invoke__\"\u003ename\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      String commandKey = Feign.\u003cspan class=\"title function_ invoke__\"\u003econfigKey\u003c/span\u003e(target.\u003cspan class=\"title function_ invoke__\"\u003etype\u003c/span\u003e(), method);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e HystrixCommand.Setter\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          .\u003cspan class=\"title function_ invoke__\"\u003ewithGroupKey\u003c/span\u003e(HystrixCommandGroupKey.Factory.\u003cspan class=\"title function_ invoke__\"\u003easKey\u003c/span\u003e(groupKey))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          .\u003cspan class=\"title function_ invoke__\"\u003eandCommandKey\u003c/span\u003e(HystrixCommandKey.Factory.\u003cspan class=\"title function_ invoke__\"\u003easKey\u003c/span\u003e(commandKey));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          \u003cspan class=\"comment\"\u003e//没有处理好default配置项的加载\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"Hystrix-配置\"\u003e\u003ca href=\"#Hystrix-配置\" class=\"headerlink\" title=\"Hystrix 配置\"\u003e\u003c/a\u003eHystrix 配置\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e详细配置可以参考 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration\"\u003eHystrix 官方配置手册\u003c/a\u003e，这里仅介绍比较核心的配置\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"执行配置\"\u003e\u003ca href=\"#执行配置\" class=\"headerlink\" title=\"执行配置\"\u003e\u003c/a\u003e执行配置\u003c/h3\u003e\u003cp\u003e以下配置用于控制 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#run()\"\u003e\u003ccode\u003eHystrixCommand.run()\u003c/code\u003e\u003c/a\u003e 如何执行。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e配置项\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003cth\u003e默认值\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#execution.isolation.strategy\"\u003e\u003ccode\u003eexecution.isolation.strategy\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e线程隔离（THREAD）或信号量隔离（SEMAPHORE）\u003c/td\u003e\n\u003ctd\u003eTHREAD\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#execution.isolation.thread.timeoutInMilliseconds\"\u003e\u003ccode\u003eexecution.isolation.thread.timeoutInMilliseconds\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e方法执行超时时间\u003c/td\u003e\n\u003ctd\u003e1000(ms)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#execution.isolation.semaphore.maxConcurrentRequests\"\u003e\u003ccode\u003eexecution.isolation.semaphore.maxConcurrentRequests\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e信号量隔离最大并发数\u003c/td\u003e\n\u003ctd\u003e10\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"断路配置\"\u003e\u003ca href=\"#断路配置\" class=\"headerlink\" title=\"断路配置\"\u003e\u003c/a\u003e断路配置\u003c/h3\u003e\u003cp\u003e以下配置用于控制 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCircuitBreaker.html\"\u003e\u003ccode\u003eHystrixCircuitBreaker\u003c/code\u003e\u003c/a\u003e 的断路处理。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e配置项\u003c/th\u003e\n\u003cth align=\"left\"\u003e说明\u003c/th\u003e\n\u003cth align=\"left\"\u003e默认值\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.enabled\"\u003e\u003ccode\u003ecircuitBreaker.enabled\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e是否开启断路器\u003c/td\u003e\n\u003ctd align=\"left\"\u003etrue\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.requestVolumeThreshold\"\u003e\u003ccode\u003ecircuitBreaker.requestVolumeThreshold\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e断路器启用请求数阈值\u003c/td\u003e\n\u003ctd align=\"left\"\u003e20\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.sleepWindowInMilliseconds\"\u003e\u003ccode\u003ecircuitBreaker.sleepWindowInMilliseconds\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e断路器启用后的休眠时间\u003c/td\u003e\n\u003ctd align=\"left\"\u003e5000(ms)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.errorThresholdPercentage\"\u003e\u003ccode\u003ecircuitBreaker.errorThresholdPercentage\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e断路器启用失败率阈值\u003c/td\u003e\n\u003ctd align=\"left\"\u003e50(%)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.forceOpen\"\u003e\u003ccode\u003ecircuitBreaker.forceOpen\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e是否强制将断路器设置成开启状态\u003c/td\u003e\n\u003ctd align=\"left\"\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.forceClosed\"\u003e\u003ccode\u003ecircuitBreaker.forceClosed\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e是否强制将断路器设置成关闭状态\u003c/td\u003e\n\u003ctd align=\"left\"\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"指标配置\"\u003e\u003ca href=\"#指标配置\" class=\"headerlink\" title=\"指标配置\"\u003e\u003c/a\u003e指标配置\u003c/h3\u003e\u003cp\u003e以下配置用于从 HystrixCommand 和 HystrixObservableCommand 执行中捕获相关指标。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e配置项\u003c/th\u003e\n\u003cth align=\"left\"\u003e说明\u003c/th\u003e\n\u003cth align=\"left\"\u003e默认值\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.rollingStats.timeInMilliseconds\"\u003e\u003ccode\u003emetrics.rollingStats.timeInMilliseconds\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e时间窗的长度\u003c/td\u003e\n\u003ctd align=\"left\"\u003e10000(ms)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.rollingStats.numBuckets\"\u003e\u003ccode\u003emetrics.rollingStats.numBuckets\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e桶的数量，需要保证\u003ccode\u003etimeInMilliseconds % numBuckets =0\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e10\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.rollingPercentile.enabled\"\u003e\u003ccode\u003emetrics.rollingPercentile.enabled\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e是否统计运行延迟的占比\u003c/td\u003e\n\u003ctd align=\"left\"\u003etrue\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.rollingPercentile.timeInMilliseconds\"\u003e\u003ccode\u003emetrics.rollingPercentile.timeInMilliseconds\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003cstrong\u003e运行延迟占比\u003c/strong\u003e统计的时间窗\u003c/td\u003e\n\u003ctd align=\"left\"\u003e60000(ms)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.rollingPercentile.numBuckets\"\u003e\u003ccode\u003emetrics.rollingPercentile.numBuckets\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003cstrong\u003e运行延迟占比\u003c/strong\u003e统计的桶数\u003c/td\u003e\n\u003ctd align=\"left\"\u003e6\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.rollingPercentile.bucketSize\"\u003e\u003ccode\u003emetrics.rollingPercentile.bucketSize\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e百分比统计桶的容量，桶内最多保存的运行时间统计\u003c/td\u003e\n\u003ctd align=\"left\"\u003e100\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.healthSnapshot.intervalInMilliseconds\"\u003e\u003ccode\u003emetrics.healthSnapshot.intervalInMilliseconds\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e统计快照刷新间隔\u003c/td\u003e\n\u003ctd align=\"left\"\u003e500 (ms)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"线程池配置\"\u003e\u003ca href=\"#线程池配置\" class=\"headerlink\" title=\"线程池配置\"\u003e\u003c/a\u003e线程池配置\u003c/h3\u003e\u003cp\u003e以下配置用于控制 Hystrix Command 执行所使用的线程池。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e配置项\u003c/th\u003e\n\u003cth align=\"left\"\u003e说明\u003c/th\u003e\n\u003cth align=\"left\"\u003e默认值\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#coreSize\"\u003e\u003ccode\u003ecoreSize\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e线程池核心线程数\u003c/td\u003e\n\u003ctd align=\"left\"\u003e10\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#maximumSize\"\u003e\u003ccode\u003emaximumSize\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e线程池最大线程数\u003c/td\u003e\n\u003ctd align=\"left\"\u003e10\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#maxQueueSize\"\u003e\u003ccode\u003emaxQueueSize\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e最大 LinkedBlockingQueue 的大小，-1 表示用 SynchronousQueue\u003c/td\u003e\n\u003ctd align=\"left\"\u003e-1\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#queueSizeRejectionThreshold\"\u003e\u003ccode\u003equeueSizeRejectionThreshold\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e队列大小阈值，超过则拒绝\u003c/td\u003e\n\u003ctd align=\"left\"\u003e5\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix/wiki/Configuration#allowMaximumSizeToDivergeFromCoreSize\"\u003e\u003ccode\u003eallowMaximumSizeToDivergeFromCoreSize\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e此属性允许 maximumSize 的配置生效。该值可以等于或大于 coreSize。设置 coreSize \u0026lt;maximumSize 使得线程池可以维持 maximumSize 并发性，但是会在相对空闲时将线程回收。（取决于 keepAliveTimeInMinutes）\u003c/td\u003e\n\u003ctd align=\"left\"\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"六、其他限流技术\"\u003e\u003ca href=\"#六、其他限流技术\" class=\"headerlink\" title=\"六、其他限流技术\"\u003e\u003c/a\u003e六、其他限流技术\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eresilience4j\u003c/strong\u003e\u003cbr/\u003eHystrix 虽然官方宣布不再维护，其推荐另外一个框架：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://links.jianshu.com/go?to=https://github.com/resilience4j/resilience4j\"\u003eresilience4j\u003c/a\u003e, 这个框架是是为 Java 8 和 函数式编程设计的一个轻量级的容错框架，该框架充分利用函数式编程的概念，为\u003ccode\u003e函数式接口\u003c/code\u003e、\u003ccode\u003elamda表达式\u003c/code\u003e、\u003ccode\u003e方法引用\u003c/code\u003e高阶函数进行包装，(本质上是装饰者模式的概念)，通过包装实现\u003ccode\u003e断路\u003c/code\u003e、\u003ccode\u003e限流\u003c/code\u003e、\u003ccode\u003e重试\u003c/code\u003e、\u003ccode\u003e舱壁\u003c/code\u003e功能。\u003cbr/\u003e这个框架整体而言比较轻量，没有控制台，不太好做系统级监控；\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAlibaba Sentinel\u003c/p\u003e\n\u003cfigure class=\"highlight ebnf\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003eSentinel\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e是 阿里巴巴开源的轻量级的流量控制、熔断降级 Java 库，该库的核心是使用的是信号量隔离的方式做流量控制和熔断，其优点是其集成性和易用性，几乎能和当前主流的 Spring Cloud, dubbo ,grpc ,nacos, zookeeper 做集成，如下图所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://upload-images.jianshu.io/upload_images/14126519-70fd779fc1f3b9b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003esentinel-features-overview-en.png\u003c/p\u003e\n\u003cfigure class=\"highlight ebnf\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003eSentinel\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e的目标生态圈：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://upload-images.jianshu.io/upload_images/14126519-84833e6225a05df0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight ebnf\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003esentinel\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e一个强大的功能，就是它有一个流控管理控制台，你可以实时地监控每个服务的流控情况，并且可以实时编辑各种流控、熔断规则，有效地保证了服务保护的及时性。下图是内部试用的 sentinel 控制台：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://upload-images.jianshu.io/upload_images/14126519-bb4aa4ba3a1de64c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp\" alt=\"img\"/\u003e另外，\u003c/p\u003e\n\u003cfigure class=\"highlight ebnf\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003esentinel\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e还可以和\u003c/p\u003e\n\u003cfigure class=\"highlight ebnf\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003ectrip apollo\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e分布式配置系统进行集成，将流控规降级等各种规则先配置在 apollo 中，然后服务启动自动加载流控规则。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Netflix/Hystrix\"\u003eHystrix Github\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.jianshu.com/p/684b04b6c454\"\u003eSpring Cloud Hystrix 设计原理\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://juejin.im/post/5c009ff6f265da614b11b84d\"\u003eHystrix 都停更了，我为什么还要学？\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-02-17T14:34:30Z",
  "Author": "钝悟 ◾ Dunwu"
}