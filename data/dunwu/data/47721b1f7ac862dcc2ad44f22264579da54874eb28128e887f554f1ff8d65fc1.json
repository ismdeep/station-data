{
  "Source": "dunwu",
  "Title": "《后端存储实战课》笔记",
  "Link": "https://dunwu.github.io/blog/pages/a16273/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"《后端存储实战课》笔记\"\u003e\u003ca href=\"#《后端存储实战课》笔记\" class=\"headerlink\" title=\"《后端存储实战课》笔记\"\u003e\u003c/a\u003e《后端存储实战课》笔记\u003c/h1\u003e\u003ch2 id=\"课前加餐丨电商系统是如何设计的？\"\u003e\u003ca href=\"#课前加餐丨电商系统是如何设计的？\" class=\"headerlink\" title=\"课前加餐丨电商系统是如何设计的？\"\u003e\u003c/a\u003e课前加餐丨电商系统是如何设计的？\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220407152237.png\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"创建和更新订单时，如何保证数据准确无误？\"\u003e\u003ca href=\"#创建和更新订单时，如何保证数据准确无误？\" class=\"headerlink\" title=\"创建和更新订单时，如何保证数据准确无误？\"\u003e\u003c/a\u003e创建和更新订单时，如何保证数据准确无误？\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220407162459.png\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"流量大、数据多的商品详情页系统该如何设计？\"\u003e\u003ca href=\"#流量大、数据多的商品详情页系统该如何设计？\" class=\"headerlink\" title=\"流量大、数据多的商品详情页系统该如何设计？\"\u003e\u003c/a\u003e流量大、数据多的商品详情页系统该如何设计？\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220407164745.png\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"复杂而又重要的购物车系统，应该如何设计？\"\u003e\u003ca href=\"#复杂而又重要的购物车系统，应该如何设计？\" class=\"headerlink\" title=\"复杂而又重要的购物车系统，应该如何设计？\"\u003e\u003c/a\u003e复杂而又重要的购物车系统，应该如何设计？\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220408142059.png\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"事务：账户余额总是对不上账，怎么办？\"\u003e\u003ca href=\"#事务：账户余额总是对不上账，怎么办？\" class=\"headerlink\" title=\"事务：账户余额总是对不上账，怎么办？\"\u003e\u003c/a\u003e事务：账户余额总是对不上账，怎么办？\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220408152524.png\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"分布式事务：如何保证多个系统间的数据是一致的？\"\u003e\u003ca href=\"#分布式事务：如何保证多个系统间的数据是一致的？\" class=\"headerlink\" title=\"分布式事务：如何保证多个系统间的数据是一致的？\"\u003e\u003c/a\u003e分布式事务：如何保证多个系统间的数据是一致的？\u003c/h2\u003e\u003cp\u003e分布式事务常见解决方案：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e2PC\u003c/li\u003e\n\u003cli\u003e3PC\u003c/li\u003e\n\u003cli\u003eTCC\u003c/li\u003e\n\u003cli\u003eSaga\u003c/li\u003e\n\u003cli\u003e本地消息表\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e个人以前总结：\u003ca href=\"https://dunwu.github.io/design/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html\"\u003e分布式事务\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"如何用-Elasticsearch-构建商品搜索系统？\"\u003e\u003ca href=\"#如何用-Elasticsearch-构建商品搜索系统？\" class=\"headerlink\" title=\"如何用 Elasticsearch 构建商品搜索系统？\"\u003e\u003c/a\u003e如何用 Elasticsearch 构建商品搜索系统？\u003c/h2\u003e\u003cp\u003e搜索领域的核心问题是进行全文匹配。一般的关系型数据库，如 Mysql 的索引（InnoDB 为 B 树索引）不适用于全文检索，导致查询时只能全表扫描，性能很差。\u003c/p\u003e\n\u003cp\u003e搜索引擎（典型代表：Elasticsearch）通过倒排索引技术，很好的支持了全文检索。但是，倒排索引的写入和更新性能相较于 B 树索引较差，因此不适用于更新频繁的数据。\u003c/p\u003e\n\u003ch2 id=\"MySQL-HA：如何将“删库跑路”的损失降到最低？\"\u003e\u003ca href=\"#MySQL-HA：如何将“删库跑路”的损失降到最低？\" class=\"headerlink\" title=\"MySQL HA：如何将“删库跑路”的损失降到最低？\"\u003e\u003c/a\u003eMySQL HA：如何将“删库跑路”的损失降到最低？\u003c/h2\u003e\u003cp\u003eMysql 复制（略）\u003c/p\u003e\n\u003ch2 id=\"一个几乎每个系统必踩的坑儿：访问数据库超时\"\u003e\u003ca href=\"#一个几乎每个系统必踩的坑儿：访问数据库超时\" class=\"headerlink\" title=\"一个几乎每个系统必踩的坑儿：访问数据库超时\"\u003e\u003c/a\u003e一个几乎每个系统必踩的坑儿：访问数据库超时\u003c/h2\u003e\u003cp\u003e数据库超时分析经验：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e根据故障时段在系统忙时，推断出故障是跟支持用户访问的功能有关。\u003c/li\u003e\n\u003cli\u003e根据系统能在流量峰值过后自动恢复这一现象，排除后台服务被大量请求打死的可能性。\u003c/li\u003e\n\u003cli\u003e根据 CPU 利用率的变化曲线，如果满足一定的周期性波动，可推断出大概率和定时任务有关。这些定时任务负责刷新数据缓存。如果确实是因为刷新缓存定时任务导致的，需要针对性优化。\u003c/li\u003e\n\u003cli\u003e如果 Mysql CPU 过高，大概率是慢 SQL 导致的，优先排查慢 SQL 日志，找出查询特别慢的表。看看该表是不是需要加缓存。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e避免访问数据库超时的注意点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e开发时，考虑 SQL 相关表的数据规模，查询性能，是否匹配索引等等，避免出现慢 SQL\u003c/li\u003e\n\u003cli\u003e设计上，考虑减少查询次数，如使用缓存\u003c/li\u003e\n\u003cli\u003e系统支持自动杀慢 SQL\u003c/li\u003e\n\u003cli\u003e支持熔断、降级，减少故障影响范围\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"怎么能避免写出慢-SQL？\"\u003e\u003ca href=\"#怎么能避免写出慢-SQL？\" class=\"headerlink\" title=\"怎么能避免写出慢 SQL？\"\u003e\u003c/a\u003e怎么能避免写出慢 SQL？\u003c/h2\u003e\u003cp\u003e数据表不宜过大，一般不要超过千万条数据。\u003c/p\u003e\n\u003cp\u003e根据实际情况，尽量设计好索引，以提高查询、排序效率。\u003c/p\u003e\n\u003cp\u003e如果出现慢 SQL，需要改造索引时，可以通过执行计划进行分析。\u003c/p\u003e\n\u003ch2 id=\"走进黑盒：SQL-是如何在数据库中执行的？\"\u003e\u003ca href=\"#走进黑盒：SQL-是如何在数据库中执行的？\" class=\"headerlink\" title=\"走进黑盒：SQL 是如何在数据库中执行的？\"\u003e\u003c/a\u003e走进黑盒：SQL 是如何在数据库中执行的？\u003c/h2\u003e\u003ch2 id=\"MySQL-如何应对高并发（一）：使用缓存保护-MySQL\"\u003e\u003ca href=\"#MySQL-如何应对高并发（一）：使用缓存保护-MySQL\" class=\"headerlink\" title=\"MySQL 如何应对高并发（一）：使用缓存保护 MySQL\"\u003e\u003c/a\u003eMySQL 如何应对高并发（一）：使用缓存保护 MySQL\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220413101029.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220413101039.png\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"MySQL-如何应对高并发（二）：读写分离\"\u003e\u003ca href=\"#MySQL-如何应对高并发（二）：读写分离\" class=\"headerlink\" title=\"MySQL 如何应对高并发（二）：读写分离\"\u003e\u003c/a\u003eMySQL 如何应对高并发（二）：读写分离\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220413160150.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/database/mysql/master-slave-proxy.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"MySQL-主从数据库同步是如何实现的？\"\u003e\u003ca href=\"#MySQL-主从数据库同步是如何实现的？\" class=\"headerlink\" title=\"MySQL 主从数据库同步是如何实现的？\"\u003e\u003c/a\u003eMySQL 主从数据库同步是如何实现的？\u003c/h2\u003e\u003cp\u003e基于 binlog 进行数据同步\u003c/p\u003e\n\u003ch2 id=\"订单数据越来越多，数据库越来越慢该怎么办？\"\u003e\u003ca href=\"#订单数据越来越多，数据库越来越慢该怎么办？\" class=\"headerlink\" title=\"订单数据越来越多，数据库越来越慢该怎么办？\"\u003e\u003c/a\u003e订单数据越来越多，数据库越来越慢该怎么办？\u003c/h2\u003e\u003cp\u003e针对大表，为了优化其查询性能，可以将历史数据归档。一般可以考虑归档到列式数据库，如：Hive\u003c/p\u003e\n\u003ch2 id=\"MySQL-存储海量数据的最后一招：分库分表\"\u003e\u003ca href=\"#MySQL-存储海量数据的最后一招：分库分表\" class=\"headerlink\" title=\"MySQL 存储海量数据的最后一招：分库分表\"\u003e\u003c/a\u003eMySQL 存储海量数据的最后一招：分库分表\u003c/h2\u003e\u003cp\u003e分库分表\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220413174922.png\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"用-Redis-构建缓存集群的最佳实践有哪些\"\u003e\u003ca href=\"#用-Redis-构建缓存集群的最佳实践有哪些\" class=\"headerlink\" title=\"用 Redis 构建缓存集群的最佳实践有哪些\"\u003e\u003c/a\u003e用 Redis 构建缓存集群的最佳实践有哪些\u003c/h2\u003e\u003cp\u003eRedis 3.0 后，官方提供 Redis Cluster 来解决数据量大、高可用和高并发问题。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e相关文章：\u003ca href=\"https://dunwu.github.io/waterdrop/%E6%95%B0%E6%8D%AE%E5%BA%93/05.KV%E6%95%B0%E6%8D%AE%E5%BA%93/01.Redis/07.Redis%E9%9B%86%E7%BE%A4/\"\u003eRedis 集群\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"大厂都是怎么做-MySQL-to-Redis-同步的\"\u003e\u003ca href=\"#大厂都是怎么做-MySQL-to-Redis-同步的\" class=\"headerlink\" title=\"大厂都是怎么做 MySQL to Redis 同步的?\"\u003e\u003c/a\u003e大厂都是怎么做 MySQL to Redis 同步的?\u003c/h2\u003e\u003cp\u003e缓存穿透：把全量数据都放在 Redis 集群，服务通过接受 MQ 消息，去触发更新缓存数据。\u003c/p\u003e\n\u003cp\u003e使用 Binlog 实时更新 Redis 缓存，如 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/alibaba/canal\"\u003eCanal\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"分布式存储：你知道对象存储是如何保存图片文件的吗？\"\u003e\u003ca href=\"#分布式存储：你知道对象存储是如何保存图片文件的吗？\" class=\"headerlink\" title=\"分布式存储：你知道对象存储是如何保存图片文件的吗？\"\u003e\u003c/a\u003e分布式存储：你知道对象存储是如何保存图片文件的吗？\u003c/h2\u003e\u003cp\u003e保存图片、音频、视频这种相对较大的文件，一般使用对象存储。如：HDFS 等。\u003c/p\u003e\n\u003cp\u003e元数据管理：ZooKeeper、etcd、Nacos\u003c/p\u003e\n\u003cp\u003e对象如何拆分和保存：将大文件分块（block），提升 IO 效率并方便维护。\u003c/p\u003e\n\u003ch2 id=\"跨系统实时同步数据，分布式事务是唯一的解决方案吗？\"\u003e\u003ca href=\"#跨系统实时同步数据，分布式事务是唯一的解决方案吗？\" class=\"headerlink\" title=\"跨系统实时同步数据，分布式事务是唯一的解决方案吗？\"\u003e\u003c/a\u003e跨系统实时同步数据，分布式事务是唯一的解决方案吗？\u003c/h2\u003e\u003cp\u003e跨系统实时同步数据：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e早期方案：使用 ETL 定时同步数据，在 T+1 时刻去同步上一周期的数据，然后进行计算和分析。\u003c/li\u003e\n\u003cli\u003e使用 Binlog 和 MQ 构建实时数据同步系统\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如何保证数据同步的实时性\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e为了能够支撑众多下游数据库实时同步的需求，可以通过 MQ 解耦上下游，Binlog 先发送到 MQ 中，下游各业务方可以消费 MQ 中的消息再写入各自的数据库。\u003c/li\u003e\n\u003cli\u003e如果下游处理能力不能满足要求，可以增加 MQ 中的分区数量实现并发同步，但需要结合同步的业务数据特点，把具有因果关系的数据哈希到相同分区上，才能避免因为并发乱序而出现数据同步错误的问题。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"如何在不停机的情况下，安全地更换数据库？\"\u003e\u003ca href=\"#如何在不停机的情况下，安全地更换数据库？\" class=\"headerlink\" title=\"如何在不停机的情况下，安全地更换数据库？\"\u003e\u003c/a\u003e如何在不停机的情况下，安全地更换数据库？\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e停机迁移/扩容\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e优点：简单粗暴；没有数据一致性问题\u003c/li\u003e\n\u003cli\u003e缺点：需要停机\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e双写迁移\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e优点：不需要停机\u003c/li\u003e\n\u003cli\u003e缺点：方案较复杂\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e主从升级\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e优点：不需要停机；无需数据迁移\u003c/li\u003e\n\u003cli\u003e缺点：需要冗余的从库\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"类似“点击流”这样的海量数据应该如何存储？\"\u003e\u003ca href=\"#类似“点击流”这样的海量数据应该如何存储？\" class=\"headerlink\" title=\"类似“点击流”这样的海量数据应该如何存储？\"\u003e\u003c/a\u003e类似“点击流”这样的海量数据应该如何存储？\u003c/h2\u003e\u003cp\u003e使用 Kafka 暂存海量原始数据，然后再使用大数据计算框架（Spark、Flink）进行计算。\u003c/p\u003e\n\u003cp\u003e其他方案：\u003c/p\u003e\n\u003cp\u003e分布式流数据存储，如：Pravega、Pulsar 的存储引擎 BookKeeper\u003c/p\u003e\n\u003cp\u003e时序数据库，如：InfluxDB、OpenTSDB 等。\u003c/p\u003e\n\u003ch2 id=\"面对海量数据，如何才能查得更快\"\u003e\u003ca href=\"#面对海量数据，如何才能查得更快\" class=\"headerlink\" title=\"面对海量数据，如何才能查得更快\"\u003e\u003c/a\u003e面对海量数据，如何才能查得更快\u003c/h2\u003e\u003cp\u003e实时计算：Flink、Storm\u003c/p\u003e\n\u003cp\u003e批处理计算：Map-Reduce、Spark\u003c/p\u003e\n\u003cp\u003e海量数据存储：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e列式数据库（在正确使用的前提下，10GB 量级的数据查询基本上可以做到秒级返回）：HBase、Cassandra\u003c/li\u003e\n\u003cli\u003e搜索引擎（对于 TB 量级以下的数据，如果可以接受相对比较贵的硬件成本）：Elasticsearch\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"MySQL-经常遇到的高可用、分片问题，NewSQL-是如何解决的？\"\u003e\u003ca href=\"#MySQL-经常遇到的高可用、分片问题，NewSQL-是如何解决的？\" class=\"headerlink\" title=\"MySQL 经常遇到的高可用、分片问题，NewSQL 是如何解决的？\"\u003e\u003c/a\u003eMySQL 经常遇到的高可用、分片问题，NewSQL 是如何解决的？\u003c/h2\u003e\u003cp\u003e安利 CockroachDB、RocksDB、OceanBase\u003c/p\u003e\n\u003ch2 id=\"RocksDB：不丢数据的高性能-KV-存储、\"\u003e\u003ca href=\"#RocksDB：不丢数据的高性能-KV-存储、\" class=\"headerlink\" title=\"RocksDB：不丢数据的高性能 KV 存储、\"\u003e\u003c/a\u003eRocksDB：不丢数据的高性能 KV 存储、\u003c/h2\u003e\u003cp\u003e越来越多的新生代数据库，都选择 RocksDB 作为它们的存储引擎。\u003c/p\u003e\n\u003cp\u003eRedis 是一个内存数据库，所以它很快。\u003c/p\u003e\n\u003cp\u003eRocksDB 是一个持久化的 KV 存储，它需要保证每条数据都要安全地写到磁盘上。磁盘的读写性能和内\u003cbr/\u003e存读写性能差着一两个数量级，读写磁盘的 RocksDB，能和读写内存的 Redis 做到相近的性能，这就是 RocksDB 的价值所在了。\u003c/p\u003e\n\u003cp\u003eRocksDB 性能好，是由于使用了 LSM 树结构。\u003c/p\u003e\n\u003cp\u003eLSM-Tree 的全称是：The Log-Structured Merge-Tree，是一种非常复杂的复合数据结构，它包含了 WAL（Write Ahead Log）、跳表（SkipList）和一个分层的有序表（SSTable，Sorted String Table）。\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100046801\"\u003e后端存储实战课\u003c/a\u003e - 极客教程【入门】：讲解存储在电商领域的种种应用和一些基本特性\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-04-08T09:00:00Z",
  "Author": "钝悟 ◾ Dunwu"
}