{
  "Source": "dunwu",
  "Title": "如何设计系统",
  "Link": "https://dunwu.github.io/blog/pages/0a89f3/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"如何设计系统\"\u003e\u003ca href=\"#如何设计系统\" class=\"headerlink\" title=\"如何设计系统\"\u003e\u003c/a\u003e如何设计系统\u003c/h1\u003e\u003ch2 id=\"系统设计过程\"\u003e\u003ca href=\"#系统设计过程\" class=\"headerlink\" title=\"系统设计过程\"\u003e\u003c/a\u003e系统设计过程\u003c/h2\u003e\u003ch3 id=\"步骤一、约束和用例\"\u003e\u003ca href=\"#步骤一、约束和用例\" class=\"headerlink\" title=\"步骤一、约束和用例\"\u003e\u003c/a\u003e步骤一、约束和用例\u003c/h3\u003e\u003cp\u003e对于任何系统设计，第一件应该做的事是：阐明系统的约束并确定系统需要满足哪些用例。\u003c/p\u003e\n\u003cp\u003e永远不要假设没有明确说明的事情。一定要尽力收集、理解需求，并设计一个很好地涵盖这些要求的解决方案。\u003c/p\u003e\n\u003cp\u003e例如，URL 缩短服务可能只为几千个用户提供服务，但每个用户都可能共享数百万个 URL。它可能旨在处理对缩短的 URL 的数百万次点击或数十次点击。该服务可能必须提供有关每个缩短的 URL 的大量统计信息（这会增加您的数据大小），或者可能根本不需要统计信息。\u003c/p\u003e\n\u003cp\u003e您还必须考虑预期会发生的用例。您的系统将根据其预期功能进行设计。不要忘记确保你知道面试官一开始没有告诉你的所有要求。\u003c/p\u003e\n\u003ch3 id=\"步骤二、顶层设计\"\u003e\u003ca href=\"#步骤二、顶层设计\" class=\"headerlink\" title=\"步骤二、顶层设计\"\u003e\u003c/a\u003e步骤二、顶层设计\u003c/h3\u003e\u003cp\u003e一旦确定了要设计的系统的范围，接下来就要做顶层设计：概述系统架构中所需的所有重要组件。\u003c/p\u003e\n\u003cp\u003e此时，应该绘制出主要组件以及它们之间的连接。通常，这种顶层设计是基于主流技术的组合。这就要求设计必须熟悉这些技术，了解其利弊以及适合使用的场景。\u003c/p\u003e\n\u003ch3 id=\"步骤三、分析瓶颈\"\u003e\u003ca href=\"#步骤三、分析瓶颈\" class=\"headerlink\" title=\"步骤三、分析瓶颈\"\u003e\u003c/a\u003e步骤三、分析瓶颈\u003c/h3\u003e\u003cp\u003e顶层设计很可能会遇到一个或多个瓶颈。这完全没问题，不要指望一个新系统可以立即处理世界上的所有负载。它只需要可扩展，以便您能够使用一些标准工具和技术对其进行改进。\u003c/p\u003e\n\u003cp\u003e现在有了顶层设计，就要考虑这些组件在系统扩展时面临的瓶颈。也许，系统需要一个负载均衡器和集群来处理用户请求。或者，由于数据容量庞大，以至于需要将数据库分库分表（分布在多台机器上）。这些方案有什么利弊，是否适用？数据库是否太慢，是否需要一些内存缓存？\u003c/p\u003e\n\u003cp\u003e通常每个解决方案都是某种权衡和取舍。改变某事会使其他事情恶化。然而，重要的是能够讨论这些权衡，并根据定义的约束和用例来衡量它们对系统的影响。\u003c/p\u003e\n\u003cp\u003e一旦分析清楚核心瓶颈，就可以着手在下一步中去解决它们。\u003c/p\u003e\n\u003ch3 id=\"步骤四、扩展设计\"\u003e\u003ca href=\"#步骤四、扩展设计\" class=\"headerlink\" title=\"步骤四、扩展设计\"\u003e\u003c/a\u003e步骤四、扩展设计\u003c/h3\u003e\u003cp\u003e首先，你需要了解以下技术手段：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e垂直扩展\u003c/li\u003e\n\u003cli\u003e水平罗占\u003c/li\u003e\n\u003cli\u003e缓存\u003c/li\u003e\n\u003cli\u003e负载均衡\u003c/li\u003e\n\u003cli\u003e数据库复制\u003c/li\u003e\n\u003cli\u003e数据库分区\u003c/li\u003e\n\u003cli\u003e异步\u003c/li\u003e\n\u003cli\u003eNoSql\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在系统设计方面，回顾现实中的架构非常有用。注意使用了哪些技术。继续研究每一项新技术，看看它解决了什么问题，它的替代品是什么，它擅长的地方，以及失败的地方。\u003c/p\u003e\n\u003cp\u003e一切都是权衡的结果——这是系统设计中最基本的概念之一。\u003c/p\u003e\n\u003cp\u003e一些推荐的学习资料\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://highscalability.com/blog/2017/10/23/one-model-at-a-time-integrating-and-running-deep-learning-mo.html\"\u003e生产中的深度学习\u003c/a\u003e：关于 EyeEm 如何构建在大量图像上运行多个深度学习模型的生产系统的精彩故事\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://highscalability.com/blog/2016/10/12/lessons-learned-from-scaling-uber-to-2000-engineers-1000-ser.html\"\u003eUber\u003c/a\u003e：一篇关于 Uber 如何快速扩展的好文章，关于将您的服务分解为分布在许多存储库中的许多微服务。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://highscalability.com/blog/2016/6/27/how-facebook-live-streams-to-800000-simultaneous-viewers.html\"\u003eFacebook\u003c/a\u003e：Facebook 如何在直播中同时处理 800,000 名观众\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://highscalability.com/blog/2016/6/15/the-image-optimization-technology-that-serves-millions-of-re.html\"\u003eKraken.io\u003c/a\u003e：如何大规模缩放图像优化，本文将更详细地看一些具体使用的硬件方案，以及部署、监控等重要方面\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://highscalability.com/blog/2016/4/20/how-twitter-handles-3000-images-per-second.html\"\u003eTwitter\u003c/a\u003e：Twitter 如何处理每秒 3,000 张图片上传以及为什么它使用的旧方式现在行不通\u003c/li\u003e\n\u003cli\u003e最后，Twitter 子组件的一些很好的例子：存储数据（\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.youtube.com/watch?v=5cKTP36HVgI\"\u003evideo\u003c/a\u003e | \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://highscalability.com/blog/2011/12/19/how-twitter-stores-250-million-tweets-a-day-using-mysql.html\"\u003etext\u003c/a\u003e）和时间轴（\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.infoq.com/presentations/Twitter-Timeline-Scalability\"\u003evideo\u003c/a\u003e | \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html\"\u003etext\u003c/a\u003e）。\u003c/li\u003e\n\u003cli\u003e有关更高级的示例，请查看 Google、Youtube（\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.youtube.com/watch?v=w5WVu624fY8\"\u003evideo\u003c/a\u003e | \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://highscalability.com/youtube-architecture\"\u003etext\u003c/a\u003e）、\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html\"\u003eTumblr\u003c/a\u003e、\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://highscalability.com/blog/2009/8/5/stack-overflow-architecture.html\"\u003eStackOverflow\u003c/a\u003e 和 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://highscalability.com/blog/2011/11/29/datasift-architecture-realtime-datamining-at-120000-tweets-p.html\"\u003eDatashift\u003c/a\u003e 上的这些帖子。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/donnemartin/system-design-primer\"\u003esystem-design-primer\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.hiredintech.com/courses/system-design\"\u003eSystem Design for Tech Interviews\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-11-08T00:15:33Z",
  "Author": "钝悟 ◾ Dunwu"
}