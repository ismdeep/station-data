{
  "Source": "dunwu",
  "Title": "ShardingSphere 简介",
  "Link": "https://dunwu.github.io/blog/pages/5ed2a2/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"ShardingSphere-简介\"\u003e\u003ca href=\"#ShardingSphere-简介\" class=\"headerlink\" title=\"ShardingSphere 简介\"\u003e\u003c/a\u003eShardingSphere 简介\u003c/h1\u003e\u003ch2 id=\"简介\"\u003e\u003ca href=\"#简介\" class=\"headerlink\" title=\"简介\"\u003e\u003c/a\u003e简介\u003c/h2\u003e\u003ch3 id=\"ShardingSphere-组件\"\u003e\u003ca href=\"#ShardingSphere-组件\" class=\"headerlink\" title=\"ShardingSphere 组件\"\u003e\u003c/a\u003eShardingSphere 组件\u003c/h3\u003e\u003cp\u003eShardingSphere 是一套开源的分布式数据库中间件解决方案组成的生态圈，它由 Sharding-JDBC、Sharding-Proxy 和 Sharding-Sidecar（计划中）这 3 款相互独立的产品组成。 他们均提供标准化的数据分片、分布式事务和数据库治理功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20201008151613.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch4 id=\"ShardingSphere-JDBC\"\u003e\u003ca href=\"#ShardingSphere-JDBC\" class=\"headerlink\" title=\"ShardingSphere-JDBC\"\u003e\u003c/a\u003eShardingSphere-JDBC\u003c/h4\u003e\u003cp\u003e定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务。 它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e适用于任何基于 JDBC 的 ORM 框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template 或直接使用 JDBC。\u003c/li\u003e\n\u003cli\u003e支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP 等。\u003c/li\u003e\n\u003cli\u003e支持任意实现 JDBC 规范的数据库，目前支持 MySQL，Oracle，SQLServer，PostgreSQL 以及任何遵循 SQL92 标准的数据库。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20201008151213.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch4 id=\"Sharding-Proxy\"\u003e\u003ca href=\"#Sharding-Proxy\" class=\"headerlink\" title=\"Sharding-Proxy\"\u003e\u003c/a\u003eSharding-Proxy\u003c/h4\u003e\u003cp\u003e定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。 目前提供 MySQL 和 PostgreSQL 版本，它可以使用任何兼容 MySQL/PostgreSQL 协议的访问客户端(如：MySQL Command Client, MySQL Workbench, Navicat 等)操作数据，对 DBA 更加友好。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e向应用程序完全透明，可直接当做 MySQL/PostgreSQL 使用。\u003c/li\u003e\n\u003cli\u003e适用于任何兼容 MySQL/PostgreSQL 协议的的客户端。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20201008151434.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch4 id=\"Sharding-Sidecar（TODO）\"\u003e\u003ca href=\"#Sharding-Sidecar（TODO）\" class=\"headerlink\" title=\"Sharding-Sidecar（TODO）\"\u003e\u003c/a\u003eSharding-Sidecar（TODO）\u003c/h4\u003e\u003cp\u003e定位为 Kubernetes 的云原生数据库代理，以 Sidecar 的形式代理所有对数据库的访问。 通过无中心、零侵入的方案提供与数据库交互的的啮合层，即 \u003ccode\u003eDatabase Mesh\u003c/code\u003e，又可称数据库网格。\u003c/p\u003e\n\u003cp\u003eDatabase Mesh 的关注重点在于如何将分布式的数据访问应用与数据库有机串联起来，它更加关注的是交互，是将杂乱无章的应用与数据库之间的交互进行有效地梳理。 使用 Database Mesh，访问数据库的应用和数据库终将形成一个巨大的网格体系，应用和数据库只需在网格体系中对号入座即可，它们都是被啮合层所治理的对象。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20201008151557.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e\u003cem\u003eSharding-JDBC\u003c/em\u003e\u003c/th\u003e\n\u003cth align=\"left\"\u003e\u003cem\u003eSharding-Proxy\u003c/em\u003e\u003c/th\u003e\n\u003cth align=\"left\"\u003e\u003cem\u003eSharding-Sidecar\u003c/em\u003e\u003c/th\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd align=\"left\"\u003e数据库\u003c/td\u003e\n\u003ctd align=\"left\"\u003e任意\u003c/td\u003e\n\u003ctd align=\"left\"\u003eMySQL\u003c/td\u003e\n\u003ctd\u003eMySQL\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e连接消耗数\u003c/td\u003e\n\u003ctd align=\"left\"\u003e高\u003c/td\u003e\n\u003ctd align=\"left\"\u003e低\u003c/td\u003e\n\u003ctd\u003e高\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e异构语言\u003c/td\u003e\n\u003ctd align=\"left\"\u003e仅 Java\u003c/td\u003e\n\u003ctd align=\"left\"\u003e任意\u003c/td\u003e\n\u003ctd\u003e任意\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e性能\u003c/td\u003e\n\u003ctd align=\"left\"\u003e损耗低\u003c/td\u003e\n\u003ctd align=\"left\"\u003e损耗略高\u003c/td\u003e\n\u003ctd\u003e损耗低\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e无中心化\u003c/td\u003e\n\u003ctd align=\"left\"\u003e是\u003c/td\u003e\n\u003ctd align=\"left\"\u003e否\u003c/td\u003e\n\u003ctd\u003e是\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e静态入口\u003c/td\u003e\n\u003ctd align=\"left\"\u003e无\u003c/td\u003e\n\u003ctd align=\"left\"\u003e有\u003c/td\u003e\n\u003ctd\u003e无\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch4 id=\"混合架构\"\u003e\u003ca href=\"#混合架构\" class=\"headerlink\" title=\"混合架构\"\u003e\u003c/a\u003e混合架构\u003c/h4\u003e\u003cp\u003eShardingSphere-JDBC 采用无中心化架构，适用于 Java 开发的高性能的轻量级 OLTP 应用；ShardingSphere-Proxy 提供静态入口以及异构语言的支持，适用于 OLAP 应用以及对分片数据库进行管理和运维的场景。\u003c/p\u003e\n\u003cp\u003eApache ShardingSphere 是多接入端共同组成的生态圈。 通过混合使用 ShardingSphere-JDBC 和 ShardingSphere-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合与当前业务的最佳系统架构。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20201008151658.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"功能列表\"\u003e\u003ca href=\"#功能列表\" class=\"headerlink\" title=\"功能列表\"\u003e\u003c/a\u003e功能列表\u003c/h3\u003e\u003ch4 id=\"数据分片\"\u003e\u003ca href=\"#数据分片\" class=\"headerlink\" title=\"数据分片\"\u003e\u003c/a\u003e数据分片\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e分库 \u0026amp; 分表\u003c/li\u003e\n\u003cli\u003e读写分离\u003c/li\u003e\n\u003cli\u003e分片策略定制化\u003c/li\u003e\n\u003cli\u003e无中心化分布式主键\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"分布式事务\"\u003e\u003ca href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"\u003e\u003c/a\u003e分布式事务\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e标准化事务接口\u003c/li\u003e\n\u003cli\u003eXA 强一致事务\u003c/li\u003e\n\u003cli\u003e柔性事务\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"数据库治理\"\u003e\u003ca href=\"#数据库治理\" class=\"headerlink\" title=\"数据库治理\"\u003e\u003c/a\u003e数据库治理\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e分布式治理\u003c/li\u003e\n\u003cli\u003e弹性伸缩\u003c/li\u003e\n\u003cli\u003e可视化链路追踪\u003c/li\u003e\n\u003cli\u003e数据加密\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/apache/incubator-shardingsphere\"\u003eshardingsphere Github\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://shardingsphere.apache.org/document/current/cn/overview/\"\u003eshardingsphere 官方文档\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-10-08T12:30:30Z",
  "Author": "钝悟 ◾ Dunwu"
}