{
  "Source": "dunwu",
  "Title": "系统测试架构",
  "Link": "https://dunwu.github.io/blog/pages/641e5c/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"系统测试架构\"\u003e\u003ca href=\"#系统测试架构\" class=\"headerlink\" title=\"系统测试架构\"\u003e\u003c/a\u003e系统测试架构\u003c/h1\u003e\u003cblockquote\u003e\n\u003cp\u003e软件测试描述一种用来促进鉴定软件的正确性、完整性、安全性和质量的过程。软件测试的经典定义是：在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程。\u003c/p\u003e\n\u003cp\u003e现代软件开发项目中，分工明确，基本上都会有研发、测试、QA 等角色。不同角色由于关注的视角不同，测试目标和测试方法也不完全相同。本文主要从研发、测试的视角去考量软件测试技术。\u003c/p\u003e\n\u003cp\u003e注意：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e为了方便，只有测试人员需要关注的测试点用【测试】标注；\u003c/li\u003e\n\u003cli\u003e而只有研发人员需要关注的测试点用【研发】标注；\u003c/li\u003e\n\u003cli\u003e都需要关注的测试点则不作标注。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"测试方法分类\"\u003e\u003ca href=\"#测试方法分类\" class=\"headerlink\" title=\"测试方法分类\"\u003e\u003c/a\u003e测试方法分类\u003c/h2\u003e\u003ch3 id=\"从测试设计方法分类\"\u003e\u003ca href=\"#从测试设计方法分类\" class=\"headerlink\" title=\"从测试设计方法分类\"\u003e\u003c/a\u003e从测试设计方法分类\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e黑盒测试【测试】\u003c/strong\u003e - 把软件系统当作一个“黑箱”，无法了解或使用系统的内部结构及知识。从软件的行为，而不是内部结构出发来设计测试。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e白盒测试【研发】\u003c/strong\u003e - 设计者可以看到软件系统的内部结构，并且使用软件的内部知识来指导测试数据及方法的选择。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e灰盒测试\u003c/strong\u003e - 介于黑盒和白盒之间。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e小结：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e黑河测试通常针对的是软件的行为或功能，一般是测试人员主要关注的。\u003c/li\u003e\n\u003cli\u003e白盒测试通常则需要对软件有一定程度的了解，一般是开发人员所关注的。\u003c/li\u003e\n\u003cli\u003e灰盒测试通常是为了测试软件在特定的场景下的表现，而非主场景。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"从测试的目的分类\"\u003e\u003ca href=\"#从测试的目的分类\" class=\"headerlink\" title=\"从测试的目的分类\"\u003e\u003c/a\u003e从测试的目的分类\u003c/h3\u003e\u003ch4 id=\"功能测试\"\u003e\u003ca href=\"#功能测试\" class=\"headerlink\" title=\"功能测试\"\u003e\u003c/a\u003e功能测试\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e单元测试（Unit Test）\u003c/strong\u003e - 在最低粒度的功能/参数上验证程序的准确性，比如测试一个函数的正确性。【研发】\u003cul\u003e\n\u003cli\u003e常用技术：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/junit-team/junit4\"\u003e\u003cstrong\u003ejunit4\u003c/strong\u003e\u003c/a\u003e、\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/junit-team/junit5\"\u003e\u003cstrong\u003ejunit5\u003c/strong\u003e\u003c/a\u003e、\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/mockito/mockito\"\u003e\u003cstrong\u003emockito\u003c/strong\u003e\u003c/a\u003e、\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/joel-costigliola/assertj-core\"\u003e\u003cstrong\u003eassertj-core\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e功能测试（Functional Test）\u003c/strong\u003e - 验证模块的功能。【测试】\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e集成测试（Integration Test）\u003c/strong\u003e - 验证几个互相有依赖关系的模块的功能。【测试】\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e场景测试（Scenario Test）\u003c/strong\u003e- 验证几个模块是否能完成一个用户场景。【测试】\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e系统测试（System Test）\u003c/strong\u003e - 对于整个系统功能的测试。【测试】\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAlpha 测试\u003c/strong\u003e - 软件测试人员在真实用户环境中对软件进行全面的测试。【测试】\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBeta 测试\u003c/strong\u003e - 也叫公测，是真实的用户在真实的环境中进行的测试。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"非功能测试\"\u003e\u003ca href=\"#非功能测试\" class=\"headerlink\" title=\"非功能测试\"\u003e\u003c/a\u003e非功能测试\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e压力测试（Stress test）\u003c/strong\u003e - 验证软件在超过负载设计的情况下仍能返回正确的结果，没有崩溃\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e负载测试（Load test）\u003c/strong\u003e - 测试软件在负载情况下能否正常工作\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e性能测试（Performance test）\u003c/strong\u003e - 测试软件的效能，是否提供满意的服务质量。\u003cul\u003e\n\u003cli\u003e常用技术：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://jmeter.apache.org/\"\u003e\u003cstrong\u003eJMeter\u003c/strong\u003e\u003c/a\u003e、JMH。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e软件辅助功能测试（Accessibility test\u003c/strong\u003e） - 测试软件是否向残疾用户提供足够的辅助功能\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e本地化/全球化测试（Localization/Globalization\u003c/strong\u003e）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e兼容性测试（Compatibility Test）\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e配置测试（Configuration Test）\u003c/strong\u003e - 测试软件在各种配置下能否正常工作\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e可用性测试（Usability Test）\u003c/strong\u003e – 测试软件是否好用\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e安全性测试（Security Test）\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.cnblogs.com/TankXiao/archive/2012/02/20/2347016.html\"\u003e软件测试 (一) 软件测试方法大汇总\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.xncoding.com/2018/01/07/java/jmh.html\"\u003eJava 微基准测试框架 JMH\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-12-10T09:00:00Z",
  "Author": "钝悟 ◾ Dunwu"
}