{
  "Source": "dunwu",
  "Title": "HBase Java API 高级特性之过滤器",
  "Link": "https://dunwu.github.io/blog/pages/a3347e/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"HBase-Java-API-高级特性之过滤器\"\u003e\u003ca href=\"#HBase-Java-API-高级特性之过滤器\" class=\"headerlink\" title=\"HBase Java API 高级特性之过滤器\"\u003e\u003c/a\u003eHBase Java API 高级特性之过滤器\u003c/h1\u003e\u003cp\u003eHBase 中两种主要的数据读取方法是 \u003ccode\u003eget()\u003c/code\u003e 和 \u003ccode\u003escan()\u003c/code\u003e，它们都支持直接访问数据和通过指定起止 row key 访问数据。此外，可以指定列族、列、时间戳和版本号来进行条件查询。它们的缺点是不支持细粒度的筛选功能。为了弥补这种不足，\u003ccode\u003eGet\u003c/code\u003e 和 \u003ccode\u003eScan\u003c/code\u003e 支持通过过滤器（\u003ccode\u003eFilter\u003c/code\u003e）对 row key、列或列值进行过滤。\u003c/p\u003e\n\u003cp\u003eHBase 提供了一些内置过滤器，也允许用户通过继承 \u003ccode\u003eFilter\u003c/code\u003e 类来自定义过滤器。所有的过滤器都在服务端生效，称为 \u003cstrong\u003e谓词下推\u003c/strong\u003e。这样可以保证被过滤掉的数据不会被传到客户端。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://www.oreilly.com/api/v2/epubs/9781449314682/files/httpatomoreillycomsourceoreillyimages889252.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e图片来自 HBase 权威指南\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eHBase 过滤器层次结构的最底层是 \u003ccode\u003eFilter\u003c/code\u003e 接口和 \u003ccode\u003eFilterBase\u003c/code\u003e 抽象类。大部分过滤器都直接继承自 \u003ccode\u003eFilterBase\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"比较过滤器\"\u003e\u003ca href=\"#比较过滤器\" class=\"headerlink\" title=\"比较过滤器\"\u003e\u003c/a\u003e比较过滤器\u003c/h2\u003e\u003cp\u003e所有比较过滤器均继承自 \u003ccode\u003eCompareFilter\u003c/code\u003e。\u003ccode\u003eCompareFilter\u003c/code\u003e 比 \u003ccode\u003eFilterBase\u003c/code\u003e 多了一个 \u003ccode\u003ecompare()\u003c/code\u003e 方法，它需要传入参数定义比较操作的过程：比较运算符和比较器。\u003c/p\u003e\n\u003cp\u003e创建一个比较过滤器需要两个参数，分别是\u003cstrong\u003e比较运算符\u003c/strong\u003e和\u003cstrong\u003e比较器实例\u003c/strong\u003e。\u003c/p\u003e\n\u003cfigure class=\"highlight kotlin\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e CompareFilter(\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e CompareOp compareOp,\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e ByteArrayComparable comparator) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e.compareOp = compareOp;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e.comparator = comparator;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e }\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"比较运算符\"\u003e\u003ca href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"\u003e\u003c/a\u003e比较运算符\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003eLESS (\u0026lt;)\u003c/li\u003e\n\u003cli\u003eLESS_OR_EQUAL (\u0026lt;=)\u003c/li\u003e\n\u003cli\u003eEQUAL (=)\u003c/li\u003e\n\u003cli\u003eNOT_EQUAL (!=)\u003c/li\u003e\n\u003cli\u003eGREATER_OR_EQUAL (\u0026gt;=)\u003c/li\u003e\n\u003cli\u003eGREATER (\u0026gt;)\u003c/li\u003e\n\u003cli\u003eNO_OP (排除所有符合条件的值)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e比较运算符均定义在枚举类 \u003ccode\u003eCompareOperator\u003c/code\u003e 中\u003c/p\u003e\n\u003cfigure class=\"highlight autohotkey\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e@InterfaceAudience.Public\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epublic enum CompareOperator {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003e  LESS,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003e  LESS_OR_EQUAL,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003e  EQUAL,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003e  NOT_EQUAL,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003e  GREATER_OR_EQUAL,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003e  GREATER,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003e  NO_OP,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e注意：在 1.x 版本的 HBase 中，比较运算符定义在 \u003ccode\u003eCompareFilter.CompareOp\u003c/code\u003e 枚举类中，但在 2.0 之后这个类就被标识为 @deprecated ，并会在 3.0 移除。所以 2.0 之后版本的 HBase 需要使用 \u003ccode\u003eCompareOperator\u003c/code\u003e 这个枚举类。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"比较器\"\u003e\u003ca href=\"#比较器\" class=\"headerlink\" title=\"比较器\"\u003e\u003c/a\u003e比较器\u003c/h3\u003e\u003cp\u003e所有比较器均继承自 \u003ccode\u003eByteArrayComparable\u003c/code\u003e 抽象类，常用的有以下几种：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eBinaryComparator\u003c/strong\u003e : 使用 \u003ccode\u003eBytes.compareTo(byte []，byte [])\u003c/code\u003e 按字典序比较指定的字节数组。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBinaryPrefixComparator\u003c/strong\u003e : 按字典序与指定的字节数组进行比较，但只比较到这个字节数组的长度。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRegexStringComparator\u003c/strong\u003e : 使用给定的正则表达式与指定的字节数组进行比较。仅支持 \u003ccode\u003eEQUAL\u003c/code\u003e 和 \u003ccode\u003eNOT_EQUAL\u003c/code\u003e 操作。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSubStringComparator\u003c/strong\u003e : 测试给定的子字符串是否出现在指定的字节数组中，比较不区分大小写。仅支持 \u003ccode\u003eEQUAL\u003c/code\u003e 和 \u003ccode\u003eNOT_EQUAL\u003c/code\u003e 操作。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNullComparator\u003c/strong\u003e ：判断给定的值是否为空。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBitComparator\u003c/strong\u003e ：按位进行比较。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003eBinaryPrefixComparator\u003c/code\u003e 和 \u003ccode\u003eBinaryComparator\u003c/code\u003e 的区别不是很好理解，这里举例说明一下：\u003c/p\u003e\n\u003cp\u003e在进行 \u003ccode\u003eEQUAL\u003c/code\u003e 的比较时，如果比较器传入的是 \u003ccode\u003eabcd\u003c/code\u003e 的字节数组，但是待比较数据是 \u003ccode\u003eabcdefgh\u003c/code\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果使用的是 \u003ccode\u003eBinaryPrefixComparator\u003c/code\u003e 比较器，则比较以 \u003ccode\u003eabcd\u003c/code\u003e 字节数组的长度为准，即 \u003ccode\u003eefgh\u003c/code\u003e 不会参与比较，这时候认为 \u003ccode\u003eabcd\u003c/code\u003e 与 \u003ccode\u003eabcdefgh\u003c/code\u003e 是满足 \u003ccode\u003eEQUAL\u003c/code\u003e 条件的；\u003c/li\u003e\n\u003cli\u003e如果使用的是 \u003ccode\u003eBinaryComparator\u003c/code\u003e 比较器，则认为其是不相等的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"比较过滤器种类\"\u003e\u003ca href=\"#比较过滤器种类\" class=\"headerlink\" title=\"比较过滤器种类\"\u003e\u003c/a\u003e比较过滤器种类\u003c/h3\u003e\u003cp\u003e比较过滤器共有五个（Hbase 1.x 版本和 2.x 版本相同）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRowFilter\u003c/strong\u003e ：基于行键来过滤数据；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFamilyFilterr\u003c/strong\u003e ：基于列族来过滤数据；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eQualifierFilterr\u003c/strong\u003e ：基于列限定符（列名）来过滤数据；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eValueFilterr\u003c/strong\u003e ：基于单元格 (cell) 的值来过滤数据；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDependentColumnFilter\u003c/strong\u003e ：指定一个参考列来过滤其他列的过滤器，过滤的原则是基于参考列的时间戳来进行筛选 。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e前四种过滤器的使用方法相同，均只要传递比较运算符和运算器实例即可构建，然后通过 \u003ccode\u003esetFilter\u003c/code\u003e 方法传递给 \u003ccode\u003escan\u003c/code\u003e：\u003c/p\u003e\n\u003cfigure class=\"highlight arcade\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eFilter\u003c/span\u003e \u003cspan class=\"built_in\"\u003efilter\u003c/span\u003e  = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e RowFilter(CompareOperator.LESS_OR_EQUAL,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                               \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e BinaryComparator(Bytes.toBytes(\u003cspan class=\"string\"\u003e\u0026#34;xxx\u0026#34;\u003c/span\u003e)));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e scan.setFilter(\u003cspan class=\"built_in\"\u003efilter\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eDependentColumnFilter\u003c/code\u003e 的使用稍微复杂一点，这里单独做下说明。\u003c/p\u003e\n\u003ch3 id=\"DependentColumnFilter\"\u003e\u003ca href=\"#DependentColumnFilter\" class=\"headerlink\" title=\"DependentColumnFilter\"\u003e\u003c/a\u003eDependentColumnFilter\u003c/h3\u003e\u003cp\u003e可以把 \u003ccode\u003eDependentColumnFilter\u003c/code\u003e 理解为\u003cstrong\u003e一个 valueFilter 和一个时间戳过滤器的组合\u003c/strong\u003e。\u003ccode\u003eDependentColumnFilter\u003c/code\u003e 有三个带参构造器，这里选择一个参数最全的进行说明：\u003c/p\u003e\n\u003cfigure class=\"highlight arduino\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eDependentColumnFilter\u003c/span\u003e(\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003ebyte\u003c/span\u003e [] family, \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003ebyte\u003c/span\u003e[] qualifier,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                               \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e dropDependentColumn, \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e CompareOperator op,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                               \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e ByteArrayComparable valueComparator)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003efamily\u003c/strong\u003e ：列族\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003equalifier\u003c/strong\u003e ：列限定符（列名）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003edropDependentColumn\u003c/strong\u003e ：决定参考列是否被包含在返回结果内，为 true 时表示参考列被返回，为 false 时表示被丢弃\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eop\u003c/strong\u003e ：比较运算符\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evalueComparator\u003c/strong\u003e ：比较器\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这里举例进行说明：\u003c/p\u003e\n\u003cfigure class=\"highlight lasso\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eDependentColumnFilter dependentColumnFilter = \u003cspan class=\"literal\"\u003enew\u003c/span\u003e DependentColumnFilter(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eBytes\u003c/span\u003e.toBytes(\u003cspan class=\"string\"\u003e\u0026#34;student\u0026#34;\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eBytes\u003c/span\u003e.toBytes(\u003cspan class=\"string\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    CompareOperator.EQUAL,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"literal\"\u003enew\u003c/span\u003e BinaryPrefixComparator(\u003cspan class=\"built_in\"\u003eBytes\u003c/span\u003e.toBytes(\u003cspan class=\"string\"\u003e\u0026#34;xiaolan\u0026#34;\u003c/span\u003e)));\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e首先会去查找 \u003ccode\u003estudent:name\u003c/code\u003e 中值以 \u003ccode\u003exiaolan\u003c/code\u003e 开头的所有数据获得 \u003ccode\u003e参考数据集\u003c/code\u003e，这一步等同于 valueFilter 过滤器；\u003c/li\u003e\n\u003cli\u003e其次再用参考数据集中所有数据的时间戳去检索其他列，获得时间戳相同的其他列的数据作为 \u003ccode\u003e结果数据集\u003c/code\u003e，这一步等同于时间戳过滤器；\u003c/li\u003e\n\u003cli\u003e最后如果 \u003ccode\u003edropDependentColumn\u003c/code\u003e 为 true，则返回 \u003ccode\u003e参考数据集\u003c/code\u003e+\u003ccode\u003e结果数据集\u003c/code\u003e，若为 false，则抛弃参考数据集，只返回 \u003ccode\u003e结果数据集\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"专用过滤器\"\u003e\u003ca href=\"#专用过滤器\" class=\"headerlink\" title=\"专用过滤器\"\u003e\u003c/a\u003e专用过滤器\u003c/h2\u003e\u003cp\u003e专用过滤器通常直接继承自 \u003ccode\u003eFilterBase\u003c/code\u003e，用于更特定的场景。\u003c/p\u003e\n\u003ch3 id=\"单列列值过滤器-SingleColumnValueFilter\"\u003e\u003ca href=\"#单列列值过滤器-SingleColumnValueFilter\" class=\"headerlink\" title=\"单列列值过滤器 (SingleColumnValueFilter)\"\u003e\u003c/a\u003e单列列值过滤器 (SingleColumnValueFilter)\u003c/h3\u003e\u003cp\u003e基于某列（参考列）的值决定某行数据是否被过滤。其实例有以下方法：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003esetFilterIfMissing(boolean filterIfMissing)\u003c/strong\u003e ：默认值为 false，即如果该行数据不包含参考列，其依然被包含在最后的结果中；设置为 true 时，则不包含；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003esetLatestVersionOnly(boolean latestVersionOnly)\u003c/strong\u003e ：默认为 true，即只检索参考列的最新版本数据；设置为 false，则检索所有版本数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight vbscript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eSingleColumnValueFilter singleColumnValueFilter = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e SingleColumnValue\u003cspan class=\"built_in\"\u003eFilter\u003c/span\u003e(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"string\"\u003e\u0026#34;student\u0026#34;\u003c/span\u003e.getBytes(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"string\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e.getBytes(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                CompareOperator.EQUAL,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e SubstringComparator(\u003cspan class=\"string\"\u003e\u0026#34;xiaolan\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003esingleColumnValueFilter.setFilterIfMissing(\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003escan.\u003cspan class=\"keyword\"\u003eset\u003c/span\u003e\u003cspan class=\"built_in\"\u003eFilter\u003c/span\u003e(singleColumnValueFilter);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"单列列值排除器-SingleColumnValueExcludeFilter\"\u003e\u003ca href=\"#单列列值排除器-SingleColumnValueExcludeFilter\" class=\"headerlink\" title=\"单列列值排除器 (SingleColumnValueExcludeFilter)\"\u003e\u003c/a\u003e单列列值排除器 (SingleColumnValueExcludeFilter)\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eSingleColumnValueExcludeFilter\u003c/code\u003e 继承自上面的 \u003ccode\u003eSingleColumnValueFilter\u003c/code\u003e，过滤行为与其相反。\u003c/p\u003e\n\u003ch3 id=\"行键前缀过滤器-PrefixFilter\"\u003e\u003ca href=\"#行键前缀过滤器-PrefixFilter\" class=\"headerlink\" title=\"行键前缀过滤器 (PrefixFilter)\"\u003e\u003c/a\u003e行键前缀过滤器 (PrefixFilter)\u003c/h3\u003e\u003cp\u003e基于 RowKey 值决定某行数据是否被过滤。\u003c/p\u003e\n\u003cfigure class=\"highlight vbscript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ePrefixFilter prefixFilter = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e Prefix\u003cspan class=\"built_in\"\u003eFilter\u003c/span\u003e(Bytes.toBytes(\u003cspan class=\"string\"\u003e\u0026#34;xxx\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003escan.\u003cspan class=\"keyword\"\u003eset\u003c/span\u003e\u003cspan class=\"built_in\"\u003eFilter\u003c/span\u003e(prefixFilter);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"列名前缀过滤器-ColumnPrefixFilter\"\u003e\u003ca href=\"#列名前缀过滤器-ColumnPrefixFilter\" class=\"headerlink\" title=\"列名前缀过滤器 (ColumnPrefixFilter)\"\u003e\u003c/a\u003e列名前缀过滤器 (ColumnPrefixFilter)\u003c/h3\u003e\u003cp\u003e基于列限定符（列名）决定某行数据是否被过滤。\u003c/p\u003e\n\u003cfigure class=\"highlight vbscript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eColumnPrefixFilter columnPrefixFilter = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e ColumnPrefix\u003cspan class=\"built_in\"\u003eFilter\u003c/span\u003e(Bytes.toBytes(\u003cspan class=\"string\"\u003e\u0026#34;xxx\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e scan.\u003cspan class=\"keyword\"\u003eset\u003c/span\u003e\u003cspan class=\"built_in\"\u003eFilter\u003c/span\u003e(columnPrefixFilter);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"分页过滤器-PageFilter\"\u003e\u003ca href=\"#分页过滤器-PageFilter\" class=\"headerlink\" title=\"分页过滤器 (PageFilter)\"\u003e\u003c/a\u003e分页过滤器 (PageFilter)\u003c/h3\u003e\u003cp\u003e可以使用这个过滤器实现对结果按行进行分页，创建 PageFilter 实例的时候需要传入每页的行数。\u003c/p\u003e\n\u003cfigure class=\"highlight arduino\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title\"\u003ePageFilter\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003elong\u003c/span\u003e pageSize)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Preconditions.\u003cspan class=\"built_in\"\u003echeckArgument\u003c/span\u003e(pageSize \u0026gt;= \u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;must be positive %s\u0026#34;\u003c/span\u003e, pageSize);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e.pageSize = pageSize;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e下面的代码体现了客户端实现分页查询的主要逻辑，这里对其进行一下解释说明：\u003c/p\u003e\n\u003cp\u003e客户端进行分页查询，需要传递 \u003ccode\u003estartRow\u003c/code\u003e(起始 RowKey)，知道起始 \u003ccode\u003estartRow\u003c/code\u003e 后，就可以返回对应的 pageSize 行数据。这里唯一的问题就是，对于第一次查询，显然 \u003ccode\u003estartRow\u003c/code\u003e 就是表格的第一行数据，但是之后第二次、第三次查询我们并不知道 \u003ccode\u003estartRow\u003c/code\u003e，只能知道上一次查询的最后一条数据的 RowKey（简单称之为 \u003ccode\u003elastRow\u003c/code\u003e）。\u003c/p\u003e\n\u003cp\u003e我们不能将 \u003ccode\u003elastRow\u003c/code\u003e 作为新一次查询的 \u003ccode\u003estartRow\u003c/code\u003e 传入，因为 scan 的查询区间是[startRow，endRow) ，即前开后闭区间，这样 \u003ccode\u003estartRow\u003c/code\u003e 在新的查询也会被返回，这条数据就重复了。\u003c/p\u003e\n\u003cp\u003e同时在不使用第三方数据库存储 RowKey 的情况下，我们是无法通过知道 \u003ccode\u003elastRow\u003c/code\u003e 的下一个 RowKey 的，因为 RowKey 的设计可能是连续的也有可能是不连续的。\u003c/p\u003e\n\u003cp\u003e由于 Hbase 的 RowKey 是按照字典序进行排序的。这种情况下，就可以在 \u003ccode\u003elastRow\u003c/code\u003e 后面加上 \u003ccode\u003e0\u003c/code\u003e ，作为 \u003ccode\u003estartRow\u003c/code\u003e 传入，因为按照字典序的规则，某个值加上 \u003ccode\u003e0\u003c/code\u003e 后的新值，在字典序上一定是这个值的下一个值，对于 HBase 来说下一个 RowKey 在字典序上一定也是等于或者大于这个新值的。\u003c/p\u003e\n\u003cp\u003e所以最后传入 \u003ccode\u003elastRow\u003c/code\u003e+\u003ccode\u003e0\u003c/code\u003e，如果等于这个值的 RowKey 存在就从这个值开始 scan,否则从字典序的下一个 RowKey 开始 scan。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e25 个字母以及数字字符，字典排序如下:\u003c/p\u003e\n\u003cfigure class=\"highlight lasso\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#39;0\u0026#39;\u003c/span\u003e \u0026lt; \u003cspan class=\"string\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e \u0026lt; \u003cspan class=\"string\"\u003e\u0026#39;2\u0026#39;\u003c/span\u003e \u0026lt; \u003cspan class=\"params\"\u003e...\u003c/span\u003e \u0026lt; \u003cspan class=\"string\"\u003e\u0026#39;9\u0026#39;\u003c/span\u003e \u0026lt; \u003cspan class=\"string\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e \u0026lt; \u003cspan class=\"string\"\u003e\u0026#39;b\u0026#39;\u003c/span\u003e \u0026lt; \u003cspan class=\"params\"\u003e...\u003c/span\u003e \u0026lt; \u003cspan class=\"string\"\u003e\u0026#39;z\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e分页查询主要实现逻辑：\u003c/p\u003e\n\u003cfigure class=\"highlight pgsql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ebyte[] POSTFIX = \u003cspan class=\"built_in\"\u003enew\u003c/span\u003e byte[] { \u003cspan class=\"number\"\u003e0x00\u003c/span\u003e };\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eFilter\u003c/span\u003e \u003cspan class=\"keyword\"\u003efilter\u003c/span\u003e = \u003cspan class=\"built_in\"\u003enew\u003c/span\u003e PageFilter(\u003cspan class=\"number\"\u003e15\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e totalRows = \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ebyte[] lastRow = \u003cspan class=\"keyword\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"keyword\"\u003etrue\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Scan scan = \u003cspan class=\"built_in\"\u003enew\u003c/span\u003e Scan();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    scan.setFilter(\u003cspan class=\"keyword\"\u003efilter\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (lastRow != \u003cspan class=\"keyword\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        // 如果不是首行 则 lastRow + \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        byte[] startRow = Bytes.\u003cspan class=\"keyword\"\u003eadd\u003c/span\u003e(lastRow, POSTFIX);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eSystem\u003c/span\u003e.\u003cspan class=\"keyword\"\u003eout\u003c/span\u003e.println(\u0026#34;start row: \u0026#34; +\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                           Bytes.toStringBinary(startRow));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        scan.withStartRow(startRow);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ResultScanner scanner = \u003cspan class=\"keyword\"\u003etable\u003c/span\u003e.getScanner(scan);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e localRows = \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Result result;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e ((result = scanner.next()) != \u003cspan class=\"keyword\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eSystem\u003c/span\u003e.\u003cspan class=\"keyword\"\u003eout\u003c/span\u003e.println(localRows++ + \u0026#34;: \u0026#34; + result);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        totalRows++;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        lastRow = result.getRow();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    scanner.\u003cspan class=\"keyword\"\u003eclose\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    //最后一页，查询结束\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (localRows == \u003cspan class=\"number\"\u003e0\u003c/span\u003e) break;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSystem\u003c/span\u003e.\u003cspan class=\"keyword\"\u003eout\u003c/span\u003e.println(\u0026#34;total rows: \u0026#34; + totalRows);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e需要注意的是在多台 Regin Services 上执行分页过滤的时候，由于并行执行的过滤器不能共享它们的状态和边界，所以有可能每个过滤器都会在完成扫描前获取了 PageCount 行的结果，这种情况下会返回比分页条数更多的数据，分页过滤器就有失效的可能。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"时间戳过滤器-TimestampsFilter\"\u003e\u003ca href=\"#时间戳过滤器-TimestampsFilter\" class=\"headerlink\" title=\"时间戳过滤器 (TimestampsFilter)\"\u003e\u003c/a\u003e时间戳过滤器 (TimestampsFilter)\u003c/h3\u003e\u003cfigure class=\"highlight abnf\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eList\u0026lt;Long\u0026gt; list \u003cspan class=\"operator\"\u003e=\u003c/span\u003e new ArrayList\u0026lt;\u0026gt;()\u003cspan class=\"comment\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003elist.add(\u003cspan class=\"number\"\u003e1554975573000\u003c/span\u003eL)\u003cspan class=\"comment\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTimestampsFilter timestampsFilter \u003cspan class=\"operator\"\u003e=\u003c/span\u003e new TimestampsFilter(list)\u003cspan class=\"comment\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003escan.setFilter(timestampsFilter)\u003cspan class=\"comment\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"首次行键过滤器-FirstKeyOnlyFilter\"\u003e\u003ca href=\"#首次行键过滤器-FirstKeyOnlyFilter\" class=\"headerlink\" title=\"首次行键过滤器 (FirstKeyOnlyFilter)\"\u003e\u003c/a\u003e首次行键过滤器 (FirstKeyOnlyFilter)\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eFirstKeyOnlyFilter\u003c/code\u003e 只扫描每行的第一列，扫描完第一列后就结束对当前行的扫描，并跳转到下一行。相比于全表扫描，其性能更好，通常用于行数统计的场景，因为如果某一行存在，则行中必然至少有一列。\u003c/p\u003e\n\u003cfigure class=\"highlight abnf\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eFirstKeyOnlyFilter firstKeyOnlyFilter \u003cspan class=\"operator\"\u003e=\u003c/span\u003e new FirstKeyOnlyFilter()\u003cspan class=\"comment\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003escan.set(firstKeyOnlyFilter)\u003cspan class=\"comment\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"包装过滤器\"\u003e\u003ca href=\"#包装过滤器\" class=\"headerlink\" title=\"包装过滤器\"\u003e\u003c/a\u003e包装过滤器\u003c/h2\u003e\u003cp\u003e包装过滤器就是通过包装其他过滤器以实现某些拓展的功能。\u003c/p\u003e\n\u003ch3 id=\"SkipFilter-过滤器\"\u003e\u003ca href=\"#SkipFilter-过滤器\" class=\"headerlink\" title=\"SkipFilter 过滤器\"\u003e\u003c/a\u003eSkipFilter 过滤器\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eSkipFilter\u003c/code\u003e 包装一个过滤器，当被包装的过滤器遇到一个需要过滤的 KeyValue 实例时，则拓展过滤整行数据。下面是一个使用示例：\u003c/p\u003e\n\u003cfigure class=\"highlight haxe\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 定义 ValueFilter 过滤器\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eFilter filter1 = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eValueFilter\u003c/span\u003e(CompareOperator.NOT_EQUAL,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eBinaryComparator\u003c/span\u003e(Bytes.toBytes(\u003cspan class=\"string\"\u003e\u0026#34;xxx\u0026#34;\u003c/span\u003e)));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 使用 SkipFilter 进行包装\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eFilter filter2 = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eSkipFilter\u003c/span\u003e(filter1);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"WhileMatchFilter-过滤器\"\u003e\u003ca href=\"#WhileMatchFilter-过滤器\" class=\"headerlink\" title=\"WhileMatchFilter 过滤器\"\u003e\u003c/a\u003eWhileMatchFilter 过滤器\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eWhileMatchFilter\u003c/code\u003e 包装一个过滤器，当被包装的过滤器遇到一个需要过滤的 KeyValue 实例时，\u003ccode\u003eWhileMatchFilter\u003c/code\u003e 则结束本次扫描，返回已经扫描到的结果。下面是其使用示例：\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eFilter filter1 = new RowFilter(CompareOperator.NOT_EQUAL,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                               new BinaryComparator(Bytes.toBytes(\u003cspan class=\"string\"\u003e\u0026#34;rowKey4\u0026#34;\u003c/span\u003e)));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eScan scan = new Scan();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003escan.setFilter(filter1);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eResultScanner scanner1 = table.getScanner(scan);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (Result result : scanner1) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (Cell cell : result.listCells()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(cell);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003escanner1.close();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSystem.out.println(\u003cspan class=\"string\"\u003e\u0026#34;--------------------\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e// 使用 WhileMatchFilter 进行包装\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eFilter filter2 = new WhileMatchFilter(filter1);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003escan.setFilter(filter2);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eResultScanner scanner2 = table.getScanner(scan);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (Result result : scanner1) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (Cell cell : result.listCells()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(cell);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003escanner2.close();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erowKey0/student:name/1555035006994/Put/vlen=8/seqid=0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erowKey1/student:name/1555035007019/Put/vlen=8/seqid=0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erowKey2/student:name/1555035007025/Put/vlen=8/seqid=0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erowKey3/student:name/1555035007037/Put/vlen=8/seqid=0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erowKey5/student:name/1555035007051/Put/vlen=8/seqid=0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erowKey6/student:name/1555035007057/Put/vlen=8/seqid=0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erowKey7/student:name/1555035007062/Put/vlen=8/seqid=0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erowKey8/student:name/1555035007068/Put/vlen=8/seqid=0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erowKey9/student:name/1555035007073/Put/vlen=8/seqid=0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e--------------------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erowKey0/student:name/1555035006994/Put/vlen=8/seqid=0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erowKey1/student:name/1555035007019/Put/vlen=8/seqid=0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erowKey2/student:name/1555035007025/Put/vlen=8/seqid=0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erowKey3/student:name/1555035007037/Put/vlen=8/seqid=0\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可以看到被包装后，只返回了 \u003ccode\u003erowKey4\u003c/code\u003e 之前的数据。\u003c/p\u003e\n\u003ch2 id=\"FilterList\"\u003e\u003ca href=\"#FilterList\" class=\"headerlink\" title=\"FilterList\"\u003e\u003c/a\u003eFilterList\u003c/h2\u003e\u003cp\u003e以上都是讲解单个过滤器的作用，当需要多个过滤器共同作用于一次查询的时候，就需要使用 \u003ccode\u003eFilterList\u003c/code\u003e。\u003ccode\u003eFilterList\u003c/code\u003e 支持通过构造器或者 \u003ccode\u003eaddFilter\u003c/code\u003e 方法传入多个过滤器。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 构造器传入\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eFilterList\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e Operator operator, \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e List\u0026lt;Filter\u0026gt; filters)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eFilterList\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e List\u0026lt;Filter\u0026gt; filters)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eFilterList\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e Filter... filters)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 方法传入\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eaddFilter\u003c/span\u003e\u003cspan class=\"params\"\u003e(List\u0026lt;Filter\u0026gt; filters)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eaddFilter\u003c/span\u003e\u003cspan class=\"params\"\u003e(Filter filter)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e多个过滤器组合的结果由 \u003ccode\u003eoperator\u003c/code\u003e 参数定义 ，其可选参数定义在 \u003ccode\u003eOperator\u003c/code\u003e 枚举类中。只有 \u003ccode\u003eMUST_PASS_ALL\u003c/code\u003e 和 \u003ccode\u003eMUST_PASS_ONE\u003c/code\u003e 两个可选的值：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMUST_PASS_ALL\u003c/strong\u003e ：相当于 AND，必须所有的过滤器都通过才认为通过；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMUST_PASS_ONE\u003c/strong\u003e ：相当于 OR，只有要一个过滤器通过则认为通过。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight d\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003e@InterfaceAudience\u003c/span\u003e.Public\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eenum\u003c/span\u003e Operator {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/** !AND */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    MUST_PASS_ALL,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/** !OR */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    MUST_PASS_ONE\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e使用示例如下：\u003c/p\u003e\n\u003cfigure class=\"highlight haxe\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eList\u0026lt;Filter\u0026gt; filters = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eArrayList\u003c/span\u003e\u0026lt;Filter\u0026gt;();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eFilter filter1 = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eRowFilter\u003c/span\u003e(CompareOperator.GREATER_OR_EQUAL,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                               \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eBinaryComparator\u003c/span\u003e(Bytes.toBytes(\u003cspan class=\"string\"\u003e\u0026#34;XXX\u0026#34;\u003c/span\u003e)));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efilters.add(filter1);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eFilter filter2 = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eRowFilter\u003c/span\u003e(CompareOperator.LESS_OR_EQUAL,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                               \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eBinaryComparator\u003c/span\u003e(Bytes.toBytes(\u003cspan class=\"string\"\u003e\u0026#34;YYY\u0026#34;\u003c/span\u003e)));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efilters.add(filter2);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eFilter filter3 = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eQualifierFilter\u003c/span\u003e(CompareOperator.EQUAL,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                     \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eRegexStringComparator\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;ZZZ\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efilters.add(filter3);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eFilterList filterList = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eFilterList\u003c/span\u003e(filters);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eScan scan = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eScan\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003escan.setFilter(filterList);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://item.jd.com/11321037.html\"\u003e《HBase 权威指南》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/larsgeorge/hbase-book\"\u003e《HBase 权威指南》官方源码\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2023-03-16T01:45:10Z",
  "Author": "钝悟 ◾ Dunwu"
}