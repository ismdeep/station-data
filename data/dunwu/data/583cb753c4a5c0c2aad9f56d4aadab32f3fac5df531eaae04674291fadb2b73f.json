{
  "Source": "dunwu",
  "Title": "SpringBoot 知识图谱",
  "Link": "https://dunwu.github.io/blog/pages/430f53/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"SpringBoot-知识图谱\"\u003e\u003ca href=\"#SpringBoot-知识图谱\" class=\"headerlink\" title=\"SpringBoot 知识图谱\"\u003e\u003c/a\u003eSpringBoot 知识图谱\u003c/h1\u003e\u003cblockquote\u003e\n\u003col\u003e\n\u003cli\u003e预警：本文非常长，建议先 mark 后看，也许是最后一次写这么长的文章\u003c/li\u003e\n\u003cli\u003e说明：前面有 4 个小节关于 Spring 的基础知识，分别是：IOC 容器、JavaConfig、事件监听、SpringFactoriesLoader 详解，它们占据了本文的大部分内容，虽然它们之间可能没有太多的联系，但这些知识对于理解 Spring Boot 的核心原理至关重要，如果你对 Spring 框架烂熟于心，完全可以跳过这 4 个小节。正是因为这个系列的文章是由这些看似不相关的知识点组成，因此取名知识清单。\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e在过去两三年的 Spring 生态圈，最让人兴奋的莫过于 Spring Boot 框架。或许从命名上就能看出这个框架的设计初衷：快速的启动 Spring 应用。因而 Spring Boot 应用本质上就是一个基于 Spring 框架的应用，它是 Spring 对“约定优先于配置”理念的最佳实践产物，它能够帮助开发者更快速高效地构建基于 Spring 生态圈的应用。\u003c/p\u003e\n\u003cp\u003e那 Spring Boot 有何魔法？\u003cstrong\u003e自动配置\u003c/strong\u003e、\u003cstrong\u003e起步依赖\u003c/strong\u003e、\u003cstrong\u003eActuator\u003c/strong\u003e、\u003cstrong\u003e命令行界面(CLI)\u003c/strong\u003e 是 Spring Boot 最重要的 4 大核心特性，其中 CLI 是 Spring Boot 的可选特性，虽然它功能强大，但也引入了一套不太常规的开发模型，因而这个系列的文章仅关注其它 3 种特性。如文章标题，本文是这个系列的第一部分，将为你打开 Spring Boot 的大门，重点为你剖析其启动流程以及自动配置实现原理。要掌握这部分核心内容，理解一些 Spring 框架的基础知识，将会让你事半功倍。\u003c/p\u003e\n\u003ch2 id=\"一、抛砖引玉：探索-Spring-IoC-容器\"\u003e\u003ca href=\"#一、抛砖引玉：探索-Spring-IoC-容器\" class=\"headerlink\" title=\"一、抛砖引玉：探索 Spring IoC 容器\"\u003e\u003c/a\u003e一、抛砖引玉：探索 Spring IoC 容器\u003c/h2\u003e\u003cp\u003e如果有看过\u003ccode\u003eSpringApplication.run()\u003c/code\u003e方法的源码，Spring Boot 冗长无比的启动流程一定会让你抓狂，透过现象看本质，SpringApplication 只是将一个典型的 Spring 应用的启动流程进行了扩展，因此，透彻理解 Spring 容器是打开 Spring Boot 大门的一把钥匙。\u003c/p\u003e\n\u003ch3 id=\"1-1、Spring-IoC-容器\"\u003e\u003ca href=\"#1-1、Spring-IoC-容器\" class=\"headerlink\" title=\"1.1、Spring IoC 容器\"\u003e\u003c/a\u003e1.1、Spring IoC 容器\u003c/h3\u003e\u003cp\u003e可以把 Spring IoC 容器比作一间餐馆，当你来到餐馆，通常会直接招呼服务员：点菜！至于菜的原料是什么？如何用原料把菜做出来？可能你根本就不关心。IoC 容器也是一样，你只需要告诉它需要某个 bean，它就把对应的实例（instance）扔给你，至于这个 bean 是否依赖其他组件，怎样完成它的初始化，根本就不需要你关心。\u003c/p\u003e\n\u003cp\u003e作为餐馆，想要做出菜肴，得知道菜的原料和菜谱，同样地，IoC 容器想要管理各个业务对象以及它们之间的依赖关系，需要通过某种途径来记录和管理这些信息。\u003ccode\u003eBeanDefinition\u003c/code\u003e对象就承担了这个责任：容器中的每一个 bean 都会有一个对应的 BeanDefinition 实例，该实例负责保存 bean 对象的所有必要信息，包括 bean 对象的 class 类型、是否是抽象类、构造方法和参数、其它属性等等。当客户端向容器请求相应对象时，容器就会通过这些信息为客户端返回一个完整可用的 bean 实例。\u003c/p\u003e\n\u003cp\u003e原材料已经准备好（把 BeanDefinition 看着原料），开始做菜吧，等等，你还需要一份菜谱，\u003ccode\u003eBeanDefinitionRegistry\u003c/code\u003e和\u003ccode\u003eBeanFactory\u003c/code\u003e就是这份菜谱，BeanDefinitionRegistry 抽象出 bean 的注册逻辑，而 BeanFactory 则抽象出了 bean 的管理逻辑，而各个 BeanFactory 的实现类就具体承担了 bean 的注册以及管理工作。它们之间的关系就如下图：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2018/9/9/165bd49d06649b0b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"img\"/\u003e \u003cem\u003eBeanFactory、BeanDefinitionRegistry 关系图（来自：Spring 揭秘）\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eDefaultListableBeanFactory\u003c/code\u003e作为一个比较通用的 BeanFactory 实现，它同时也实现了 BeanDefinitionRegistry 接口，因此它就承担了 Bean 的注册管理工作。从图中也可以看出，BeanFactory 接口中主要包含 getBean、containBean、getType、getAliases 等管理 bean 的方法，而 BeanDefinitionRegistry 接口则包含 registerBeanDefinition、removeBeanDefinition、getBeanDefinition 等注册管理 BeanDefinition 的方法。\u003c/p\u003e\n\u003cp\u003e下面通过一段简单的代码来模拟 BeanFactory 底层是如何工作的：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 默认容器实现\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eDefaultListableBeanFactory\u003c/span\u003e \u003cspan class=\"variable\"\u003ebeanRegistry\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eDefaultListableBeanFactory\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 根据业务对象构造相应的BeanDefinition\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eAbstractBeanDefinition\u003c/span\u003e \u003cspan class=\"variable\"\u003edefinition\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRootBeanDefinition\u003c/span\u003e(Business.class,\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 将bean定义注册到容器中\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ebeanRegistry.registerBeanDefinition(\u003cspan class=\"string\"\u003e\u0026#34;beanName\u0026#34;\u003c/span\u003e,definition);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 如果有多个bean，还可以指定各个bean之间的依赖关系\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ........\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 然后可以从容器中获取这个bean的实例\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 注意：这里的beanRegistry其实实现了BeanFactory接口，所以可以强转，\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 单纯的BeanDefinitionRegistry是无法强制转换到BeanFactory类型的\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eBeanFactory\u003c/span\u003e \u003cspan class=\"variable\"\u003econtainer\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e (BeanFactory)beanRegistry;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eBusiness\u003c/span\u003e \u003cspan class=\"variable\"\u003ebusiness\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e (Business)container.getBean(\u003cspan class=\"string\"\u003e\u0026#34;beanName\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这段代码仅为了说明 BeanFactory 底层的大致工作流程，实际情况会更加复杂，比如 bean 之间的依赖关系可能定义在外部配置文件(XML/Properties)中、也可能是注解方式。Spring IoC 容器的整个工作流程大致可以分为两个阶段：\u003c/p\u003e\n\u003cp\u003e①、容器启动阶段\u003c/p\u003e\n\u003cp\u003e容器启动时，会通过某种途径加载\u003ccode\u003eConfiguration MetaData\u003c/code\u003e。除了代码方式比较直接外，在大部分情况下，容器需要依赖某些工具类，比如：\u003ccode\u003eBeanDefinitionReader\u003c/code\u003e，BeanDefinitionReader 会对加载的\u003ccode\u003eConfiguration MetaData\u003c/code\u003e进行解析和分析，并将分析后的信息组装为相应的 BeanDefinition，最后把这些保存了 bean 定义的 BeanDefinition，注册到相应的 BeanDefinitionRegistry，这样容器的启动工作就完成了。这个阶段主要完成一些准备性工作，更侧重于 bean 对象管理信息的收集，当然一些验证性或者辅助性的工作也在这一阶段完成。\u003c/p\u003e\n\u003cp\u003e来看一个简单的例子吧，过往，所有的 bean 都定义在 XML 配置文件中，下面的代码将模拟 BeanFactory 如何从配置文件中加载 bean 的定义以及依赖关系：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 通常为BeanDefinitionRegistry的实现类，这里以DeFaultListabeBeanFactory为例\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eBeanDefinitionRegistry\u003c/span\u003e \u003cspan class=\"variable\"\u003ebeanRegistry\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eDefaultListableBeanFactory\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// XmlBeanDefinitionReader实现了BeanDefinitionReader接口，用于解析XML文件\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eXmlBeanDefinitionReader\u003c/span\u003e \u003cspan class=\"variable\"\u003ebeanDefinitionReader\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eXmlBeanDefinitionReaderImpl\u003c/span\u003e(beanRegistry);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 加载配置文件\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ebeanDefinitionReader.loadBeanDefinitions(\u003cspan class=\"string\"\u003e\u0026#34;classpath:spring-bean.xml\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 从容器中获取bean实例\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eBeanFactory\u003c/span\u003e \u003cspan class=\"variable\"\u003econtainer\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e (BeanFactory)beanRegistry;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eBusiness\u003c/span\u003e \u003cspan class=\"variable\"\u003ebusiness\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e (Business)container.getBean(\u003cspan class=\"string\"\u003e\u0026#34;beanName\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e②、Bean 的实例化阶段\u003c/p\u003e\n\u003cp\u003e经过第一阶段，所有 bean 定义都通过 BeanDefinition 的方式注册到 BeanDefinitionRegistry 中，当某个请求通过容器的 getBean 方法请求某个对象，或者因为依赖关系容器需要隐式的调用 getBean 时，就会触发第二阶段的活动：容器会首先检查所请求的对象之前是否已经实例化完成。如果没有，则会根据注册的 BeanDefinition 所提供的信息实例化被请求对象，并为其注入依赖。当该对象装配完毕后，容器会立即将其返回给请求方法使用。\u003c/p\u003e\n\u003cp\u003eBeanFactory 只是 Spring IoC 容器的一种实现，如果没有特殊指定，它采用采用延迟初始化策略：只有当访问容器中的某个对象时，才对该对象进行初始化和依赖注入操作。而在实际场景下，我们更多的使用另外一种类型的容器：\u003ccode\u003eApplicationContext\u003c/code\u003e，它构建在 BeanFactory 之上，属于更高级的容器，除了具有 BeanFactory 的所有能力之外，还提供对事件监听机制以及国际化的支持等。它管理的 bean，在容器启动时全部完成初始化和依赖注入操作。\u003c/p\u003e\n\u003ch3 id=\"1-2、Spring-容器扩展机制\"\u003e\u003ca href=\"#1-2、Spring-容器扩展机制\" class=\"headerlink\" title=\"1.2、Spring 容器扩展机制\"\u003e\u003c/a\u003e1.2、Spring 容器扩展机制\u003c/h3\u003e\u003cp\u003eIoC 容器负责管理容器中所有 bean 的生命周期，而在 bean 生命周期的不同阶段，Spring 提供了不同的扩展点来改变 bean 的命运。在容器的启动阶段，\u003ccode\u003eBeanFactoryPostProcessor\u003c/code\u003e允许我们在容器实例化相应对象之前，对注册到容器的 BeanDefinition 所保存的信息做一些额外的操作，比如修改 bean 定义的某些属性或者增加其他信息等。\u003c/p\u003e\n\u003cp\u003e如果要自定义扩展类，通常需要实现\u003ccode\u003eorg.springframework.beans.factory.config.BeanFactoryPostProcessor\u003c/code\u003e接口，与此同时，因为容器中可能有多个 BeanFactoryPostProcessor，可能还需要实现\u003ccode\u003eorg.springframework.core.Ordered\u003c/code\u003e接口，以保证 BeanFactoryPostProcessor 按照顺序执行。Spring 提供了为数不多的 BeanFactoryPostProcessor 实现，我们以\u003ccode\u003ePropertyPlaceholderConfigurer\u003c/code\u003e来说明其大致的工作流程。\u003c/p\u003e\n\u003cp\u003e在 Spring 项目的 XML 配置文件中，经常可以看到许多配置项的值使用占位符，而将占位符所代表的值单独配置到独立的 properties 文件，这样可以将散落在不同 XML 文件中的配置集中管理，而且也方便运维根据不同的环境进行配置不同的值。这个非常实用的功能就是由 PropertyPlaceholderConfigurer 负责实现的。\u003c/p\u003e\n\u003cp\u003e根据前文，当 BeanFactory 在第一阶段加载完所有配置信息时，BeanFactory 中保存的对象的属性还是以占位符方式存在的，比如\u003ccode\u003e${jdbc.mysql.url}\u003c/code\u003e。当 PropertyPlaceholderConfigurer 作为 BeanFactoryPostProcessor 被应用时，它会使用 properties 配置文件中的值来替换相应的 BeanDefinition 中占位符所表示的属性值。当需要实例化 bean 时，bean 定义中的属性值就已经被替换成我们配置的值。当然其实现比上面描述的要复杂一些，这里仅说明其大致工作原理，更详细的实现可以参考其源码。\u003c/p\u003e\n\u003cp\u003e与之相似的，还有\u003ccode\u003eBeanPostProcessor\u003c/code\u003e，其存在于对象实例化阶段。跟 BeanFactoryPostProcessor 类似，它会处理容器内所有符合条件并且已经实例化后的对象。简单的对比，BeanFactoryPostProcessor 处理 bean 的定义，而 BeanPostProcessor 则处理 bean 完成实例化后的对象。BeanPostProcessor 定义了两个接口：\u003c/p\u003e\n\u003cfigure class=\"highlight processing\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e interface BeanPostProcessor {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 前置处理\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eObject\u003c/span\u003e \u003cspan class=\"title function_\"\u003epostProcessBeforeInitialization\u003c/span\u003e(\u003cspan class=\"built_in\"\u003eObject\u003c/span\u003e bean, \u003cspan class=\"built_in\"\u003eString\u003c/span\u003e beanName) \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e BeansException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 后置处理\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eObject\u003c/span\u003e \u003cspan class=\"title function_\"\u003epostProcessAfterInitialization\u003c/span\u003e(\u003cspan class=\"built_in\"\u003eObject\u003c/span\u003e bean, \u003cspan class=\"built_in\"\u003eString\u003c/span\u003e beanName) \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e BeansException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e为了理解这两个方法执行的时机，简单的了解下 bean 的整个生命周期：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003epostProcessBeforeInitialization()\u003c/code\u003e方法与\u003ccode\u003epostProcessAfterInitialization()\u003c/code\u003e分别对应图中前置处理和后置处理两个步骤将执行的方法。这两个方法中都传入了 bean 对象实例的引用，为扩展容器的对象实例化过程提供了很大便利，在这儿几乎可以对传入的实例执行任何操作。注解、AOP 等功能的实现均大量使用了\u003ccode\u003eBeanPostProcessor\u003c/code\u003e，比如有一个自定义注解，你完全可以实现 BeanPostProcessor 的接口，在其中判断 bean 对象的脑袋上是否有该注解，如果有，你可以对这个 bean 实例执行任何操作，想想是不是非常的简单？\u003c/p\u003e\n\u003cp\u003e再来看一个更常见的例子，在 Spring 中经常能够看到各种各样的 Aware 接口，其作用就是在对象实例化完成以后将 Aware 接口定义中规定的依赖注入到当前实例中。比如最常见的\u003ccode\u003eApplicationContextAware\u003c/code\u003e接口，实现了这个接口的类都可以获取到一个 ApplicationContext 对象。当容器中每个对象的实例化过程走到 BeanPostProcessor 前置处理这一步时，容器会检测到之前注册到容器的 ApplicationContextAwareProcessor，然后就会调用其 postProcessBeforeInitialization()方法，检查并设置 Aware 相关依赖。看看代码吧，是不是很简单：\u003c/p\u003e\n\u003cfigure class=\"highlight typescript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 代码来自：org.springframework.context.support.ApplicationContextAwareProcessor\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 其postProcessBeforeInitialization方法调用了invokeAwareInterfaces方法\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"built_in\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003einvokeAwareInterfaces\u003c/span\u003e(\u003cspan class=\"params\"\u003e\u003cspan class=\"built_in\"\u003eObject\u003c/span\u003e bean\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (bean \u003cspan class=\"keyword\"\u003einstanceof\u003c/span\u003e \u003cspan class=\"title class_\"\u003eEnvironmentAware\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ((\u003cspan class=\"title class_\"\u003eEnvironmentAware\u003c/span\u003e) bean).\u003cspan class=\"title function_\"\u003esetEnvironment\u003c/span\u003e(\u003cspan class=\"variable language_\"\u003ethis\u003c/span\u003e.\u003cspan class=\"property\"\u003eapplicationContext\u003c/span\u003e.\u003cspan class=\"title function_\"\u003egetEnvironment\u003c/span\u003e());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (bean \u003cspan class=\"keyword\"\u003einstanceof\u003c/span\u003e \u003cspan class=\"title class_\"\u003eApplicationContextAware\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ((\u003cspan class=\"title class_\"\u003eApplicationContextAware\u003c/span\u003e) bean).\u003cspan class=\"title function_\"\u003esetApplicationContext\u003c/span\u003e(\u003cspan class=\"variable language_\"\u003ethis\u003c/span\u003e.\u003cspan class=\"property\"\u003eapplicationContext\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// ......\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e最后总结一下，本小节内容和你一起回顾了 Spring 容器的部分核心内容，限于篇幅不能写更多，但理解这部分内容，足以让您轻松理解 Spring Boot 的启动原理，如果在后续的学习过程中遇到一些晦涩难懂的知识，再回过头来看看 Spring 的核心知识，也许有意想不到的效果。也许 Spring Boot 的中文资料很少，但 Spring 的中文资料和书籍有太多太多，总有东西能给你启发。\u003c/p\u003e\n\u003ch2 id=\"二、夯实基础：JavaConfig-与常见-Annotation\"\u003e\u003ca href=\"#二、夯实基础：JavaConfig-与常见-Annotation\" class=\"headerlink\" title=\"二、夯实基础：JavaConfig 与常见 Annotation\"\u003e\u003c/a\u003e二、夯实基础：JavaConfig 与常见 Annotation\u003c/h2\u003e\u003ch3 id=\"2-1、JavaConfig\"\u003e\u003ca href=\"#2-1、JavaConfig\" class=\"headerlink\" title=\"2.1、JavaConfig\"\u003e\u003c/a\u003e2.1、JavaConfig\u003c/h3\u003e\u003cp\u003e我们知道\u003ccode\u003ebean\u003c/code\u003e是 Spring IOC 中非常核心的概念，Spring 容器负责 bean 的生命周期的管理。在最初，Spring 使用 XML 配置文件的方式来描述 bean 的定义以及相互间的依赖关系，但随着 Spring 的发展，越来越多的人对这种方式表示不满，因为 Spring 项目的所有业务类均以 bean 的形式配置在 XML 文件中，造成了大量的 XML 文件，使项目变得复杂且难以管理。\u003c/p\u003e\n\u003cp\u003e后来，基于纯 Java Annotation 依赖注入框架\u003ccode\u003eGuice\u003c/code\u003e出世，其性能明显优于采用 XML 方式的 Spring，甚至有部分人认为，\u003ccode\u003eGuice\u003c/code\u003e可以完全取代 Spring（\u003ccode\u003eGuice\u003c/code\u003e仅是一个轻量级 IOC 框架，取代 Spring 还差的挺远）。正是这样的危机感，促使 Spring 及社区推出并持续完善了\u003ccode\u003eJavaConfig\u003c/code\u003e子项目，它基于 Java 代码和 Annotation 注解来描述 bean 之间的依赖绑定关系。比如，下面是使用 XML 配置方式来描述 bean 的定义：\u003c/p\u003e\n\u003cfigure class=\"highlight routeros\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026lt;bean \u003cspan class=\"attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;bookService\u0026#34;\u003c/span\u003e \u003cspan class=\"attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;cn.moondev.service.BookServiceImpl\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/bean\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e而基于 JavaConfig 的配置形式是这样的：\u003c/p\u003e\n\u003cfigure class=\"highlight haxe\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@Configuration\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title class_\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eMoonBookConfiguration\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 任何标志了@Bean的方法，其返回值将作为一个bean注册到Spring的IOC容器中\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 方法名默认成为该bean定义的id\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Bean\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e BookService bookService() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eBookServiceImpl\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果两个 bean 之间有依赖关系的话，在 XML 配置中应该是这样：\u003c/p\u003e\n\u003cfigure class=\"highlight abnf\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026lt;bean id\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#34;bookService\u0026#34;\u003c/span\u003e class\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#34;cn.moondev.service.BookServiceImpl\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026lt;property name\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#34;dependencyService\u0026#34;\u003c/span\u003e ref\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#34;dependencyService\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;/bean\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;bean id\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#34;otherService\u0026#34;\u003c/span\u003e class\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#34;cn.moondev.service.OtherServiceImpl\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026lt;property name\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#34;dependencyService\u0026#34;\u003c/span\u003e ref\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#34;dependencyService\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;/bean\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;bean id\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#34;dependencyService\u0026#34;\u003c/span\u003e class\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#34;DependencyServiceImpl\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e而在 JavaConfig 中则是这样：\u003c/p\u003e\n\u003cfigure class=\"highlight typescript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@Configuration\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMoonBookConfiguration\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 如果一个bean依赖另一个bean，则直接调用对应JavaConfig类中依赖bean的创建方法即可\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 这里直接调用dependencyService()\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Bean\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title class_\"\u003eBookService\u003c/span\u003e \u003cspan class=\"title function_\"\u003ebookService\u003c/span\u003e(\u003cspan class=\"params\"\u003e\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eBookServiceImpl\u003c/span\u003e(\u003cspan class=\"title function_\"\u003edependencyService\u003c/span\u003e());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Bean\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title class_\"\u003eOtherService\u003c/span\u003e \u003cspan class=\"title function_\"\u003eotherService\u003c/span\u003e(\u003cspan class=\"params\"\u003e\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eOtherServiceImpl\u003c/span\u003e(\u003cspan class=\"title function_\"\u003edependencyService\u003c/span\u003e());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Bean\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title class_\"\u003eDependencyService\u003c/span\u003e \u003cspan class=\"title function_\"\u003edependencyService\u003c/span\u003e(\u003cspan class=\"params\"\u003e\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eDependencyServiceImpl\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e你可能注意到这个示例中，有两个 bean 都依赖于 dependencyService，也就是说当初始化 bookService 时会调用\u003ccode\u003edependencyService()\u003c/code\u003e，在初始化 otherService 时也会调用\u003ccode\u003edependencyService()\u003c/code\u003e，那么问题来了？这时候 IOC 容器中是有一个 dependencyService 实例还是两个？这个问题留着大家思考吧，这里不再赘述。\u003c/p\u003e\n\u003ch3 id=\"2-2、-ComponentScan\"\u003e\u003ca href=\"#2-2、-ComponentScan\" class=\"headerlink\" title=\"2.2、@ComponentScan\"\u003e\u003c/a\u003e2.2、@ComponentScan\u003c/h3\u003e\u003cp\u003e\u003ccode\u003e@ComponentScan\u003c/code\u003e注解对应 XML 配置形式中的``元素，表示启用组件扫描，Spring 会自动扫描所有通过注解配置的 bean，然后将其注册到 IOC 容器中。我们可以通过\u003ccode\u003ebasePackages\u003c/code\u003e等属性来指定\u003ccode\u003e@ComponentScan\u003c/code\u003e自动扫描的范围，如果不指定，默认从声明\u003ccode\u003e@ComponentScan\u003c/code\u003e所在类的\u003ccode\u003epackage\u003c/code\u003e进行扫描。正因为如此，SpringBoot 的启动类都默认在\u003ccode\u003esrc/main/java\u003c/code\u003e下。\u003c/p\u003e\n\u003ch3 id=\"2-3、-Import\"\u003e\u003ca href=\"#2-3、-Import\" class=\"headerlink\" title=\"2.3、@Import\"\u003e\u003c/a\u003e2.3、@Import\u003c/h3\u003e\u003cp\u003e\u003ccode\u003e@Import\u003c/code\u003e注解用于导入配置类，举个简单的例子：\u003c/p\u003e\n\u003cfigure class=\"highlight haxe\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@Configuration\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title class_\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eMoonBookConfiguration\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Bean\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e BookService bookService() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eBookServiceImpl\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e现在有另外一个配置类，比如：\u003ccode\u003eMoonUserConfiguration\u003c/code\u003e，这个配置类中有一个 bean 依赖于\u003ccode\u003eMoonBookConfiguration\u003c/code\u003e中的 bookService，如何将这两个 bean 组合在一起？借助\u003ccode\u003e@Import\u003c/code\u003e即可：\u003c/p\u003e\n\u003cfigure class=\"highlight less\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@Configuration\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 可以同时导入多个配置类，比如：@Import({A.class,B.class})\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@Import\u003c/span\u003e(MoonBookConfiguration.class)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epublic class MoonUserConfiguration {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"variable\"\u003e@Bean\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    public UserService \u003cspan class=\"built_in\"\u003euserService\u003c/span\u003e(BookService bookService) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"selector-tag\"\u003ereturn\u003c/span\u003e \u003cspan class=\"selector-tag\"\u003enew\u003c/span\u003e \u003cspan class=\"selector-tag\"\u003eBookServiceImpl\u003c/span\u003e(bookService);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e需要注意的是，在 4.2 之前，\u003ccode\u003e@Import\u003c/code\u003e注解只支持导入配置类，但是在 4.2 之后，它支持导入普通类，并将这个类作为一个 bean 的定义注册到 IOC 容器中。\u003c/p\u003e\n\u003ch3 id=\"2-4、-Conditional\"\u003e\u003ca href=\"#2-4、-Conditional\" class=\"headerlink\" title=\"2.4、@Conditional\"\u003e\u003c/a\u003e2.4、@Conditional\u003c/h3\u003e\u003cp\u003e\u003ccode\u003e@Conditional\u003c/code\u003e注解表示在满足某种条件后才初始化一个 bean 或者启用某些配置。它一般用在由\u003ccode\u003e@Component\u003c/code\u003e、\u003ccode\u003e@Service\u003c/code\u003e、\u003ccode\u003e@Configuration\u003c/code\u003e等注解标识的类上面，或者由\u003ccode\u003e@Bean\u003c/code\u003e标记的方法上。如果一个\u003ccode\u003e@Configuration\u003c/code\u003e类标记了\u003ccode\u003e@Conditional\u003c/code\u003e，则该类中所有标识了\u003ccode\u003e@Bean\u003c/code\u003e的方法和\u003ccode\u003e@Import\u003c/code\u003e注解导入的相关类将遵从这些条件。\u003c/p\u003e\n\u003cp\u003e在 Spring 里可以很方便的编写你自己的条件类，所要做的就是实现\u003ccode\u003eCondition\u003c/code\u003e接口，并覆盖它的\u003ccode\u003ematches()\u003c/code\u003e方法。举个例子，下面的简单条件类表示只有在\u003ccode\u003eClasspath\u003c/code\u003e里存在\u003ccode\u003eJdbcTemplate\u003c/code\u003e类时才生效：\u003c/p\u003e\n\u003cfigure class=\"highlight typescript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eJdbcTemplateCondition\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eCondition\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"built_in\"\u003eboolean\u003c/span\u003e \u003cspan class=\"title function_\"\u003ematches\u003c/span\u003e(\u003cspan class=\"params\"\u003eConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        conditionContext.\u003cspan class=\"title function_\"\u003egetClassLoader\u003c/span\u003e().\u003cspan class=\"title function_\"\u003eloadClass\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;org.springframework.jdbc.core.JdbcTemplate\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (\u003cspan class=\"title class_\"\u003eClassNotFoundException\u003c/span\u003e e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            e.\u003cspan class=\"title function_\"\u003eprintStackTrace\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e当你用 Java 来声明 bean 的时候，可以使用这个自定义条件类：\u003c/p\u003e\n\u003cfigure class=\"highlight less\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@Conditional\u003c/span\u003e(JdbcTemplateCondition.class)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@Service\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epublic MyService \u003cspan class=\"built_in\"\u003eservice\u003c/span\u003e() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ......\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这个例子中只有当\u003ccode\u003eJdbcTemplateCondition\u003c/code\u003e类的条件成立时才会创建 MyService 这个 bean。也就是说 MyService 这 bean 的创建条件是\u003ccode\u003eclasspath\u003c/code\u003e里面包含\u003ccode\u003eJdbcTemplate\u003c/code\u003e，否则这个 bean 的声明就会被忽略掉。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eSpring Boot\u003c/code\u003e定义了很多有趣的条件，并把他们运用到了配置类上，这些配置类构成了\u003ccode\u003eSpring Boot\u003c/code\u003e的自动配置的基础。\u003ccode\u003eSpring Boot\u003c/code\u003e运用条件化配置的方法是：定义多个特殊的条件化注解，并将它们用到配置类上。下面列出了\u003ccode\u003eSpring Boot\u003c/code\u003e提供的部分条件化注解：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e条件化注解\u003c/th\u003e\n\u003cth\u003e配置生效条件\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e@ConditionalOnBean\u003c/td\u003e\n\u003ctd\u003e配置了某个特定 bean\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e@ConditionalOnMissingBean\u003c/td\u003e\n\u003ctd\u003e没有配置特定的 bean\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e@ConditionalOnClass\u003c/td\u003e\n\u003ctd\u003eClasspath 里有指定的类\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e@ConditionalOnMissingClass\u003c/td\u003e\n\u003ctd\u003eClasspath 里没有指定的类\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e@ConditionalOnExpression\u003c/td\u003e\n\u003ctd\u003e给定的 Spring Expression Language 表达式计算结果为 true\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e@ConditionalOnJava\u003c/td\u003e\n\u003ctd\u003eJava 的版本匹配特定指或者一个范围值\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e@ConditionalOnProperty\u003c/td\u003e\n\u003ctd\u003e指定的配置属性要有一个明确的值\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e@ConditionalOnResource\u003c/td\u003e\n\u003ctd\u003eClasspath 里有指定的资源\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e@ConditionalOnWebApplication\u003c/td\u003e\n\u003ctd\u003e这是一个 Web 应用程序\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e@ConditionalOnNotWebApplication\u003c/td\u003e\n\u003ctd\u003e这不是一个 Web 应用程序\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"2-5、-ConfigurationProperties-与-EnableConfigurationProperties\"\u003e\u003ca href=\"#2-5、-ConfigurationProperties-与-EnableConfigurationProperties\" class=\"headerlink\" title=\"2.5、@ConfigurationProperties 与@EnableConfigurationProperties\"\u003e\u003c/a\u003e2.5、@ConfigurationProperties 与@EnableConfigurationProperties\u003c/h3\u003e\u003cp\u003e当某些属性的值需要配置的时候，我们一般会在\u003ccode\u003eapplication.properties\u003c/code\u003e文件中新建配置项，然后在 bean 中使用\u003ccode\u003e@Value\u003c/code\u003e注解来获取配置的值，比如下面配置数据源的代码。\u003c/p\u003e\n\u003cfigure class=\"highlight haxe\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// jdbc config\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ejdbc.mysql.url=jdbc:\u003cspan class=\"type\"\u003emysql\u003c/span\u003e:\u003cspan class=\"comment\"\u003e//localhost:3306/sampledb\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ejdbc.mysql.username=root\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ejdbc.mysql.password=\u003cspan class=\"number\"\u003e123456\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e......\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 配置数据源\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@Configuration\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title class_\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eHikariDataSourceConfiguration\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Value\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;jdbc.mysql.url\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eString\u003c/span\u003e url;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Value\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;jdbc.mysql.username\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eString\u003c/span\u003e user;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Value\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;jdbc.mysql.password\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eString\u003c/span\u003e password;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Bean\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e HikariDataSource dataSource() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        HikariConfig hikariConfig = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eHikariConfig\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        hikariConfig.setJdbcUrl(url);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        hikariConfig.setUsername(user);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        hikariConfig.setPassword(password);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 省略部分代码\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eHikariDataSource\u003c/span\u003e(hikariConfig);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e使用\u003ccode\u003e@Value\u003c/code\u003e注解注入的属性通常都比较简单，如果同一个配置在多个地方使用，也存在不方便维护的问题（考虑下，如果有几十个地方在使用某个配置，而现在你想改下名字，你改怎么做？）。对于更为复杂的配置，Spring Boot 提供了更优雅的实现方式，那就是\u003ccode\u003e@ConfigurationProperties\u003c/code\u003e注解。我们可以通过下面的方式来改写上面的代码：\u003c/p\u003e\n\u003cfigure class=\"highlight haxe\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@Component\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//  还可以通过@PropertySource(\u0026#34;classpath:jdbc.properties\u0026#34;)来指定配置文件\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@ConfigurationProperties\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;jdbc.mysql\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 前缀=jdbc.mysql，会在配置文件中寻找jdbc.mysql.*的配置项\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epulic \u003cspan class=\"title class_\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eJdbcConfig\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eString\u003c/span\u003e url;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eString\u003c/span\u003e username;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eString\u003c/span\u003e password;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@Configuration\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title class_\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eHikariDataSourceConfiguration\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@AutoWired\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e JdbcConfig config;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Bean\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e HikariDataSource dataSource() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        HikariConfig hikariConfig = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eHikariConfig\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        hikariConfig.setJdbcUrl(config.url);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        hikariConfig.setUsername(config.username);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        hikariConfig.setPassword(config.password);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 省略部分代码\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eHikariDataSource\u003c/span\u003e(hikariConfig);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003e@ConfigurationProperties\u003c/code\u003e对于更为复杂的配置，处理起来也是得心应手，比如有如下配置文件：\u003c/p\u003e\n\u003cfigure class=\"highlight routeros\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e#App\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapp.menus[0].\u003cspan class=\"attribute\"\u003etitle\u003c/span\u003e=Home\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapp.menus[0].\u003cspan class=\"attribute\"\u003ename\u003c/span\u003e=Home\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapp.menus[0].\u003cspan class=\"attribute\"\u003epath\u003c/span\u003e=/\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapp.menus[1].\u003cspan class=\"attribute\"\u003etitle\u003c/span\u003e=Login\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapp.menus[1].\u003cspan class=\"attribute\"\u003ename\u003c/span\u003e=Login\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapp.menus[1].\u003cspan class=\"attribute\"\u003epath\u003c/span\u003e=/login\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapp.compiler.\u003cspan class=\"attribute\"\u003etimeout\u003c/span\u003e=5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapp.compiler.\u003cspan class=\"attribute\"\u003eoutput-folder\u003c/span\u003e=/temp/\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapp.\u003cspan class=\"attribute\"\u003eerror\u003c/span\u003e=/error/\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可以定义如下配置类来接收这些属性\u003c/p\u003e\n\u003cfigure class=\"highlight haxe\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@Component\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@ConfigurationProperties\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;app\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title class_\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eAppProperties\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eString\u003c/span\u003e error;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e List\u0026lt;Menu\u0026gt; menus = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eArrayList\u003c/span\u003e\u0026lt;\u0026gt;();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e Compiler compiler = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eCompiler\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"title class_\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eMenu\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eString\u003c/span\u003e name;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eString\u003c/span\u003e path;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eString\u003c/span\u003e title;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"title class_\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eCompiler\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eString\u003c/span\u003e timeout;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eString\u003c/span\u003e outputFolder;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003e@EnableConfigurationProperties\u003c/code\u003e注解表示对\u003ccode\u003e@ConfigurationProperties\u003c/code\u003e的内嵌支持，默认会将对应 Properties Class 作为 bean 注入的 IOC 容器中，即在相应的 Properties 类上不用加\u003ccode\u003e@Component\u003c/code\u003e注解。\u003c/p\u003e\n\u003ch2 id=\"三、削铁如泥：SpringFactoriesLoader-详解\"\u003e\u003ca href=\"#三、削铁如泥：SpringFactoriesLoader-详解\" class=\"headerlink\" title=\"三、削铁如泥：SpringFactoriesLoader 详解\"\u003e\u003c/a\u003e三、削铁如泥：SpringFactoriesLoader 详解\u003c/h2\u003e\u003cp\u003eJVM 提供了 3 种类加载器：\u003ccode\u003eBootstrapClassLoader\u003c/code\u003e、\u003ccode\u003eExtClassLoader\u003c/code\u003e、\u003ccode\u003eAppClassLoader\u003c/code\u003e分别加载 Java 核心类库、扩展类库以及应用的类路径(\u003ccode\u003eCLASSPATH\u003c/code\u003e)下的类库。JVM 通过双亲委派模型进行类的加载，我们也可以通过继承\u003ccode\u003ejava.lang.classloader\u003c/code\u003e实现自己的类加载器。\u003c/p\u003e\n\u003cp\u003e何为双亲委派模型？当一个类加载器收到类加载任务时，会先交给自己的父加载器去完成，因此最终加载任务都会传递到最顶层的 BootstrapClassLoader，只有当父加载器无法完成加载任务时，才会尝试自己来加载。\u003c/p\u003e\n\u003cp\u003e采用双亲委派模型的一个好处是保证使用不同类加载器最终得到的都是同一个对象，这样就可以保证 Java 核心库的类型安全，比如，加载位于 rt.jar 包中的\u003ccode\u003ejava.lang.Object\u003c/code\u003e类，不管是哪个加载器加载这个类，最终都是委托给顶层的 BootstrapClassLoader 来加载的，这样就可以保证任何的类加载器最终得到的都是同样一个 Object 对象。查看 ClassLoader 的源码，对双亲委派模型会有更直观的认识：\u003c/p\u003e\n\u003cfigure class=\"highlight gradle\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"keyword\"\u003eClass\u003c/span\u003e\u0026lt;?\u0026gt; loadClass(String name, \u003cspan class=\"keyword\"\u003eboolean\u003c/span\u003e resolve) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003esynchronized\u003c/span\u003e (getClassLoadingLock(name)) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 首先，检查该类是否已经被加载，如果从JVM缓存中找到该类，则直接返回\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eClass\u003c/span\u003e\u0026lt;?\u0026gt; c = findLoadedClass(name);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (c == \u003cspan class=\"keyword\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 遵循双亲委派的模型，首先会通过递归从父加载器开始找，\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 直到父类加载器是BootstrapClassLoader为止\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (parent != \u003cspan class=\"keyword\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                c = parent.loadClass(name, \u003cspan class=\"keyword\"\u003efalse\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                c = findBootstrapClassOrNull(name);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (ClassNotFoundException e) {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (c == \u003cspan class=\"keyword\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 如果还找不到，尝试通过findClass方法去寻找\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// findClass是留给开发者自己实现的，也就是说\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 自定义类加载器时，重写此方法即可\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e           c = findClass(name);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (resolve) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        resolveClass(c);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e c;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e但双亲委派模型并不能解决所有的类加载器问题，比如，Java 提供了很多服务提供者接口(\u003ccode\u003eService Provider Interface\u003c/code\u003e，SPI)，允许第三方为这些接口提供实现。常见的 SPI 有 JDBC、JNDI、JAXP 等，这些 SPI 的接口由核心类库提供，却由第三方实现，这样就存在一个问题：SPI 的接口是 Java 核心库的一部分，是由 BootstrapClassLoader 加载的；SPI 实现的 Java 类一般是由 AppClassLoader 来加载的。BootstrapClassLoader 是无法找到 SPI 的实现类的，因为它只加载 Java 的核心库。它也不能代理给 AppClassLoader，因为它是最顶层的类加载器。也就是说，双亲委派模型并不能解决这个问题。\u003c/p\u003e\n\u003cp\u003e线程上下文类加载器(\u003ccode\u003eContextClassLoader\u003c/code\u003e)正好解决了这个问题。从名称上看，可能会误解为它是一种新的类加载器，实际上，它仅仅是 Thread 类的一个变量而已，可以通过\u003ccode\u003esetContextClassLoader(ClassLoader cl)\u003c/code\u003e和\u003ccode\u003egetContextClassLoader()\u003c/code\u003e来设置和获取该对象。如果不做任何的设置，Java 应用的线程的上下文类加载器默认就是 AppClassLoader。在核心类库使用 SPI 接口时，传递的类加载器使用线程上下文类加载器，就可以成功的加载到 SPI 实现的类。线程上下文类加载器在很多 SPI 的实现中都会用到。但在 JDBC 中，你可能会看到一种更直接的实现方式，比如，JDBC 驱动管理\u003ccode\u003ejava.sql.Driver\u003c/code\u003e中的\u003ccode\u003eloadInitialDrivers()\u003c/code\u003e方法中，你可以直接看到 JDK 是如何加载驱动的：\u003c/p\u003e\n\u003cfigure class=\"highlight gradle\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (String aDriver : driversList) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 直接使用AppClassLoader\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eClass\u003c/span\u003e.forName(aDriver, \u003cspan class=\"keyword\"\u003etrue\u003c/span\u003e, ClassLoader.getSystemClassLoader());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (Exception ex) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eprintln\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;DriverManager.Initialize: load failed: \u0026#34;\u003c/span\u003e + ex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e其实讲解线程上下文类加载器，最主要是让大家在看到\u003ccode\u003eThread.currentThread().getClassLoader()\u003c/code\u003e和\u003ccode\u003eThread.currentThread().getContextClassLoader()\u003c/code\u003e时不会一脸懵逼，这两者除了在许多底层框架中取得的 ClassLoader 可能会有所不同外，其他大多数业务场景下都是一样的，大家只要知道它是为了解决什么问题而存在的即可。\u003c/p\u003e\n\u003cp\u003e类加载器除了加载 class 外，还有一个非常重要功能，就是加载资源，它可以从 jar 包中读取任何资源文件，比如，\u003ccode\u003eClassLoader.getResources(String name)\u003c/code\u003e方法就是用于读取 jar 包中的资源文件，其代码如下：\u003c/p\u003e\n\u003cfigure class=\"highlight pgsql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003epublic\u003c/span\u003e Enumeration\u0026lt;URL\u0026gt; getResources(String \u003cspan class=\"type\"\u003ename\u003c/span\u003e) throws IOException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Enumeration\u0026lt;URL\u0026gt;[] tmp = (Enumeration\u0026lt;URL\u0026gt;[]) \u003cspan class=\"built_in\"\u003enew\u003c/span\u003e Enumeration\u0026lt;?\u0026gt;[\u003cspan class=\"number\"\u003e2\u003c/span\u003e];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (parent != \u003cspan class=\"keyword\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        tmp[\u003cspan class=\"number\"\u003e0\u003c/span\u003e] = parent.getResources(\u003cspan class=\"type\"\u003ename\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        tmp[\u003cspan class=\"number\"\u003e0\u003c/span\u003e] = getBootstrapResources(\u003cspan class=\"type\"\u003ename\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    tmp[\u003cspan class=\"number\"\u003e1\u003c/span\u003e] = findResources(\u003cspan class=\"type\"\u003ename\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"built_in\"\u003enew\u003c/span\u003e CompoundEnumeration\u0026lt;\u0026gt;(tmp);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e是不是觉得有点眼熟，不错，它的逻辑其实跟类加载的逻辑是一样的，首先判断父类加载器是否为空，不为空则委托父类加载器执行资源查找任务，直到 BootstrapClassLoader，最后才轮到自己查找。而不同的类加载器负责扫描不同路径下的 jar 包，就如同加载 class 一样，最后会扫描所有的 jar 包，找到符合条件的资源文件。\u003c/p\u003e\n\u003cp\u003e类加载器的\u003ccode\u003efindResources(name)\u003c/code\u003e方法会遍历其负责加载的所有 jar 包，找到 jar 包中名称为 name 的资源文件，这里的资源可以是任何文件，甚至是.class 文件，比如下面的示例，用于查找 Array.class 文件：\u003c/p\u003e\n\u003cfigure class=\"highlight pgsql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e// 寻找\u003cspan class=\"keyword\"\u003eArray\u003c/span\u003e.\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e文件\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003epublic\u003c/span\u003e static \u003cspan class=\"type\"\u003evoid\u003c/span\u003e main(String[] args) throws \u003cspan class=\"keyword\"\u003eException\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    // \u003cspan class=\"keyword\"\u003eArray\u003c/span\u003e.\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e的完整路径\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    String \u003cspan class=\"type\"\u003ename\u003c/span\u003e = \u0026#34;java/sql/Array.class\u0026#34;;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Enumeration\u0026lt;URL\u0026gt; urls = Thread.currentThread().getContextClassLoader().getResources(\u003cspan class=\"type\"\u003ename\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (urls.hasMoreElements()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        URL url = urls.nextElement();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eSystem\u003c/span\u003e.\u003cspan class=\"keyword\"\u003eout\u003c/span\u003e.println(url.toString());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e运行后可以得到如下结果：\u003c/p\u003e\n\u003cfigure class=\"highlight awk\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e$JAVA_HOME\u003c/span\u003e\u003cspan class=\"regexp\"\u003e/jre/\u003c/span\u003elib\u003cspan class=\"regexp\"\u003e/rt.jar!/\u003c/span\u003ejava\u003cspan class=\"regexp\"\u003e/sql/\u003c/span\u003eArray.class\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e根据资源文件的 URL，可以构造相应的文件来读取资源内容。\u003c/p\u003e\n\u003cp\u003e看到这里，你可能会感到挺奇怪的，你不是要详解\u003ccode\u003eSpringFactoriesLoader\u003c/code\u003e吗？上来讲了一堆 ClassLoader 是几个意思？看下它的源码你就知道了：\u003c/p\u003e\n\u003cfigure class=\"highlight haxe\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003eString\u003c/span\u003e FACTORIES_RESOURCE_LOCATION = \u003cspan class=\"string\"\u003e\u0026#34;META-INF/spring.factories\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// spring.factories文件的格式为：key=value1,value2,value3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 从所有的jar包中找到META-INF/spring.factories文件\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 然后从文件中解析出key=factoryClass类名称的所有value值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e List\u0026lt;\u003cspan class=\"keyword\"\u003eString\u003c/span\u003e\u0026gt; loadFactoryNames(Class\u0026lt;?\u0026gt; factoryClass, ClassLoader classLoader) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eString\u003c/span\u003e factoryClassName = factoryClass.getName();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 取得资源文件的URL\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Enumeration\u0026lt;URL\u0026gt; urls = (classLoader != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) : \u003cspan class=\"type\"\u003eClassLoader\u003c/span\u003e.getSystemResources(FACTORIES_RESOURCE_LOCATION));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    List\u0026lt;\u003cspan class=\"keyword\"\u003eString\u003c/span\u003e\u0026gt; result = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eArrayList\u003c/span\u003e\u0026lt;\u003cspan class=\"keyword\"\u003eString\u003c/span\u003e\u0026gt;();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 遍历所有的URL\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (urls.hasMoreElements()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        URL url = urls.nextElement();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 根据资源文件URL解析properties文件\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Properties properties = PropertiesLoaderUtils.loadProperties(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eUrlResource\u003c/span\u003e(url));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eString\u003c/span\u003e factoryClassNames = properties.getProperty(factoryClassName);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 组装数据，并返回\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e result;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e有了前面关于 ClassLoader 的知识，再来理解这段代码，是不是感觉豁然开朗：从\u003ccode\u003eCLASSPATH\u003c/code\u003e下的每个 Jar 包中搜寻所有\u003ccode\u003eMETA-INF/spring.factories\u003c/code\u003e配置文件，然后将解析 properties 文件，找到指定名称的配置后返回。需要注意的是，其实这里不仅仅是会去 ClassPath 路径下查找，会扫描所有路径下的 Jar 包，只不过这个文件只会在 Classpath 下的 jar 包中。来简单看下\u003ccode\u003espring.factories\u003c/code\u003e文件的内容吧：\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 来自 org.springframework.boot.autoconfigure下的META-INF/spring.factories\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// EnableAutoConfiguration后文会讲到，它用于开启Spring Boot自动配置功能\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eorg\u003cspan class=\"selector-class\"\u003e.springframework\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.boot\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.autoconfigure\u003c/span\u003e.EnableAutoConfiguration=\\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eorg\u003cspan class=\"selector-class\"\u003e.springframework\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.boot\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.autoconfigure\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.admin\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.SpringApplicationAdminJmxAutoConfiguration\u003c/span\u003e,\\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eorg\u003cspan class=\"selector-class\"\u003e.springframework\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.boot\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.autoconfigure\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.aop\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.AopAutoConfiguration\u003c/span\u003e,\\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eorg\u003cspan class=\"selector-class\"\u003e.springframework\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.boot\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.autoconfigure\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.amqp\u003c/span\u003e.RabbitAutoConfiguration\\\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e执行\u003ccode\u003eloadFactoryNames(EnableAutoConfiguration.class, classLoader)\u003c/code\u003e后，得到对应的一组\u003ccode\u003e@Configuration\u003c/code\u003e类，\u003cbr/\u003e我们就可以通过反射实例化这些类然后注入到 IOC 容器中，最后容器里就有了一系列标注了\u003ccode\u003e@Configuration\u003c/code\u003e的 JavaConfig 形式的配置类。\u003c/p\u003e\n\u003cp\u003e这就是\u003ccode\u003eSpringFactoriesLoader\u003c/code\u003e，它本质上属于 Spring 框架私有的一种扩展方案，类似于 SPI，Spring Boot 在 Spring 基础上的很多核心功能都是基于此，希望大家可以理解。\u003c/p\u003e\n\u003ch2 id=\"四、另一件武器：Spring-容器的事件监听机制\"\u003e\u003ca href=\"#四、另一件武器：Spring-容器的事件监听机制\" class=\"headerlink\" title=\"四、另一件武器：Spring 容器的事件监听机制\"\u003e\u003c/a\u003e四、另一件武器：Spring 容器的事件监听机制\u003c/h2\u003e\u003cp\u003e过去，事件监听机制多用于图形界面编程，比如：\u003cstrong\u003e点击\u003c/strong\u003e按钮、在文本框\u003cstrong\u003e输入\u003c/strong\u003e内容等操作被称为事件，而当事件触发时，应用程序作出一定的响应则表示应用监听了这个事件，而在服务器端，事件的监听机制更多的用于异步通知以及监控和异常处理。Java 提供了实现事件监听机制的两个基础类：自定义事件类型扩展自\u003ccode\u003ejava.util.EventObject\u003c/code\u003e、事件的监听器扩展自\u003ccode\u003ejava.util.EventListener\u003c/code\u003e。来看一个简单的实例：简单的监控一个方法的耗时。\u003c/p\u003e\n\u003cp\u003e首先定义事件类型，通常的做法是扩展 EventObject，随着事件的发生，相应的状态通常都封装在此类中：\u003c/p\u003e\n\u003cfigure class=\"highlight scala\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003epublic \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eMethodMonitorEvent\u003c/span\u003e \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title\"\u003eEventObject\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 时间戳，用于记录方法开始执行的时间\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    public long timestamp;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    public \u003cspan class=\"type\"\u003eMethodMonitorEvent\u003c/span\u003e(\u003cspan class=\"type\"\u003eObject\u003c/span\u003e source) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003esuper\u003c/span\u003e(source);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e事件发布之后，相应的监听器即可对该类型的事件进行处理，我们可以在方法开始执行之前发布一个 begin 事件，在方法执行结束之后发布一个 end 事件，相应地，事件监听器需要提供方法对这两种情况下接收到的事件进行处理：\u003c/p\u003e\n\u003cfigure class=\"highlight csharp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 1、定义事件监听接口\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"title\"\u003eMethodMonitorEventListener\u003c/span\u003e \u003cspan class=\"title\"\u003eextends\u003c/span\u003e \u003cspan class=\"title\"\u003eEventListener\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 处理方法执行之前发布的事件\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003eonMethodBegin\u003c/span\u003e(\u003cspan class=\"params\"\u003eMethodMonitorEvent \u003cspan class=\"keyword\"\u003eevent\u003c/span\u003e\u003c/span\u003e)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 处理方法结束时发布的事件\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003eonMethodEnd\u003c/span\u003e(\u003cspan class=\"params\"\u003eMethodMonitorEvent \u003cspan class=\"keyword\"\u003eevent\u003c/span\u003e\u003c/span\u003e)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 2、事件监听接口的实现：如何处理\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eAbstractMethodMonitorEventListener\u003c/span\u003e \u003cspan class=\"title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title\"\u003eMethodMonitorEventListener\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    @Override\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003eonMethodBegin\u003c/span\u003e(\u003cspan class=\"params\"\u003eMethodMonitorEvent \u003cspan class=\"keyword\"\u003eevent\u003c/span\u003e\u003c/span\u003e)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 记录方法开始执行时的时间\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eevent\u003c/span\u003e.timestamp = System.currentTimeMillis();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    @Override\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003eonMethodEnd\u003c/span\u003e(\u003cspan class=\"params\"\u003eMethodMonitorEvent \u003cspan class=\"keyword\"\u003eevent\u003c/span\u003e\u003c/span\u003e)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 计算方法耗时\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003elong\u003c/span\u003e duration = System.currentTimeMillis() - \u003cspan class=\"keyword\"\u003eevent\u003c/span\u003e.timestamp;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.\u003cspan class=\"keyword\"\u003eout\u003c/span\u003e.println(\u003cspan class=\"string\"\u003e\u0026#34;耗时：\u0026#34;\u003c/span\u003e + duration);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e事件监听器接口针对不同的事件发布实际提供相应的处理方法定义，最重要的是，其方法只接收 MethodMonitorEvent 参数，说明这个监听器类只负责监听器对应的事件并进行处理。有了事件和监听器，剩下的就是发布事件，然后让相应的监听器监听并处理。通常情况，我们会有一个事件发布者，它本身作为事件源，在合适的时机，将相应的事件发布给对应的事件监听器：\u003c/p\u003e\n\u003cfigure class=\"highlight typescript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMethodMonitorEventPublisher\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"title class_\"\u003eList\u003c/span\u003e\u0026lt;\u003cspan class=\"title class_\"\u003eMethodMonitorEventListener\u003c/span\u003e\u0026gt; listeners = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eArrayList\u003c/span\u003e\u0026lt;\u003cspan class=\"title class_\"\u003eMethodMonitorEventListener\u003c/span\u003e\u0026gt;();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"built_in\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emethodMonitor\u003c/span\u003e(\u003cspan class=\"params\"\u003e\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"title class_\"\u003eMethodMonitorEvent\u003c/span\u003e eventObject = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMethodMonitorEvent\u003c/span\u003e(\u003cspan class=\"variable language_\"\u003ethis\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"title function_\"\u003epublishEvent\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;begin\u0026#34;\u003c/span\u003e,eventObject);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 模拟方法执行：休眠5秒钟\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"title class_\"\u003eTimeUnit\u003c/span\u003e.\u003cspan class=\"property\"\u003eSECONDS\u003c/span\u003e.\u003cspan class=\"title function_\"\u003esleep\u003c/span\u003e(\u003cspan class=\"number\"\u003e5\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"title function_\"\u003epublishEvent\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;end\u0026#34;\u003c/span\u003e,eventObject);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"built_in\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003epublishEvent\u003c/span\u003e(\u003cspan class=\"params\"\u003e\u003cspan class=\"built_in\"\u003eString\u003c/span\u003e status,MethodMonitorEvent event\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 避免在事件处理期间，监听器被移除，这里为了安全做一个复制操作\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"title class_\"\u003eList\u003c/span\u003e\u0026lt;\u003cspan class=\"title class_\"\u003eMethodMonitorEventListener\u003c/span\u003e\u0026gt; copyListeners = ➥ \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eArrayList\u003c/span\u003e\u0026lt;\u003cspan class=\"title class_\"\u003eMethodMonitorEventListener\u003c/span\u003e\u0026gt;(listeners);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"title class_\"\u003eMethodMonitorEventListener\u003c/span\u003e listener : copyListeners) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"string\"\u003e\u0026#34;begin\u0026#34;\u003c/span\u003e.\u003cspan class=\"title function_\"\u003eequals\u003c/span\u003e(status)) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                listener.\u003cspan class=\"title function_\"\u003eonMethodBegin\u003c/span\u003e(event);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                listener.\u003cspan class=\"title function_\"\u003eonMethodEnd\u003c/span\u003e(event);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"built_in\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e(\u003cspan class=\"params\"\u003e\u003cspan class=\"built_in\"\u003eString\u003c/span\u003e[] args\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"title class_\"\u003eMethodMonitorEventPublisher\u003c/span\u003e publisher = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMethodMonitorEventPublisher\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        publisher.\u003cspan class=\"title function_\"\u003eaddEventListener\u003c/span\u003e(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eAbstractMethodMonitorEventListener\u003c/span\u003e());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        publisher.\u003cspan class=\"title function_\"\u003emethodMonitor\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 省略实现\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"built_in\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eaddEventListener\u003c/span\u003e(\u003cspan class=\"params\"\u003eMethodMonitorEventListener listener\u003c/span\u003e) {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"built_in\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eremoveEventListener\u003c/span\u003e(\u003cspan class=\"params\"\u003eMethodMonitorEventListener listener\u003c/span\u003e) {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"built_in\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eremoveAllListeners\u003c/span\u003e(\u003cspan class=\"params\"\u003e\u003c/span\u003e) {}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e对于事件发布者（事件源）通常需要关注两点：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e在合适的时机发布事件。此例中的 methodMonitor()方法是事件发布的源头，其在方法执行之前和结束之后两个时间点发布 MethodMonitorEvent 事件，每个时间点发布的事件都会传给相应的监听器进行处理。在具体实现时需要注意的是，事件发布是顺序执行，为了不影响处理性能，事件监听器的处理逻辑应尽量简单。\u003c/li\u003e\n\u003cli\u003e事件监听器的管理。publisher 类中提供了事件监听器的注册与移除方法，这样客户端可以根据实际情况决定是否需要注册新的监听器或者移除某个监听器。如果这里没有提供 remove 方法，那么注册的监听器示例将一直被 MethodMonitorEventPublisher 引用，即使已经废弃不用了，也依然在发布者的监听器列表中，这会导致隐性的内存泄漏。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"Spring-容器内的事件监听机制\"\u003e\u003ca href=\"#Spring-容器内的事件监听机制\" class=\"headerlink\" title=\"Spring 容器内的事件监听机制\"\u003e\u003c/a\u003eSpring 容器内的事件监听机制\u003c/h4\u003e\u003cp\u003eSpring 的 ApplicationContext 容器内部中的所有事件类型均继承自\u003ccode\u003eorg.springframework.context.ApplicationEvent\u003c/code\u003e，容器中的所有监听器都实现\u003ccode\u003eorg.springframework.context.ApplicationListener\u003c/code\u003e接口，并且以 bean 的形式注册在容器中。一旦在容器内发布 ApplicationEvent 及其子类型的事件，注册到容器的 ApplicationListener 就会对这些事件进行处理。\u003c/p\u003e\n\u003cp\u003e你应该已经猜到是怎么回事了。\u003c/p\u003e\n\u003cp\u003eApplicationEvent 继承自 EventObject，Spring 提供了一些默认的实现，比如：\u003ccode\u003eContextClosedEvent\u003c/code\u003e表示容器在即将关闭时发布的事件类型，\u003ccode\u003eContextRefreshedEvent\u003c/code\u003e表示容器在初始化或者刷新的时候发布的事件类型……\u003c/p\u003e\n\u003cp\u003e容器内部使用 ApplicationListener 作为事件监听器接口定义，它继承自 EventListener。ApplicationContext 容器在启动时，会自动识别并加载 EventListener 类型的 bean，一旦容器内有事件发布，将通知这些注册到容器的 EventListener。\u003c/p\u003e\n\u003cp\u003eApplicationContext 接口继承了 ApplicationEventPublisher 接口，该接口提供了\u003ccode\u003evoid publishEvent(ApplicationEvent event)\u003c/code\u003e方法定义，不难看出，ApplicationContext 容器担当的就是事件发布者的角色。如果有兴趣可以查看\u003ccode\u003eAbstractApplicationContext.publishEvent(ApplicationEvent event)\u003c/code\u003e方法的源码：ApplicationContext 将事件的发布以及监听器的管理工作委托给\u003ccode\u003eApplicationEventMulticaster\u003c/code\u003e接口的实现类。在容器启动时，会检查容器内是否存在名为 applicationEventMulticaster 的 ApplicationEventMulticaster 对象实例。如果有就使用其提供的实现，没有就默认初始化一个 SimpleApplicationEventMulticaster 作为实现。\u003c/p\u003e\n\u003cp\u003e最后，如果我们业务需要在容器内部发布事件，只需要为其注入 ApplicationEventPublisher 依赖即可：实现 ApplicationEventPublisherAware 接口或者 ApplicationContextAware 接口(Aware 接口相关内容请回顾上文)。\u003c/p\u003e\n\u003ch2 id=\"五、出神入化：揭秘自动配置原理\"\u003e\u003ca href=\"#五、出神入化：揭秘自动配置原理\" class=\"headerlink\" title=\"五、出神入化：揭秘自动配置原理\"\u003e\u003c/a\u003e五、出神入化：揭秘自动配置原理\u003c/h2\u003e\u003cp\u003e典型的 Spring Boot 应用的启动类一般均位于\u003ccode\u003esrc/main/java\u003c/code\u003e根路径下，比如\u003ccode\u003eMoonApplication\u003c/code\u003e类：\u003c/p\u003e\n\u003cfigure class=\"highlight typescript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@SpringBootApplication\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMoonApplication\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"built_in\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e(\u003cspan class=\"params\"\u003e\u003cspan class=\"built_in\"\u003eString\u003c/span\u003e[] args\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"title class_\"\u003eSpringApplication\u003c/span\u003e.\u003cspan class=\"title function_\"\u003erun\u003c/span\u003e(\u003cspan class=\"title class_\"\u003eMoonApplication\u003c/span\u003e.\u003cspan class=\"property\"\u003eclass\u003c/span\u003e, args);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e其中\u003ccode\u003e@SpringBootApplication\u003c/code\u003e开启组件扫描和自动配置，而\u003ccode\u003eSpringApplication.run\u003c/code\u003e则负责启动引导应用程序。\u003ccode\u003e@SpringBootApplication\u003c/code\u003e是一个复合\u003ccode\u003eAnnotation\u003c/code\u003e，它将三个有用的注解组合在一起：\u003c/p\u003e\n\u003cfigure class=\"highlight less\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@Target\u003c/span\u003e(ElementType.TYPE)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@Retention\u003c/span\u003e(RetentionPolicy.RUNTIME)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@Documented\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@Inherited\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@SpringBootConfiguration\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@EnableAutoConfiguration\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@ComponentScan\u003c/span\u003e(excludeFilters = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"variable\"\u003e@Filter\u003c/span\u003e(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"variable\"\u003e@Filter\u003c/span\u003e(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epublic \u003cspan class=\"variable\"\u003e@interface\u003c/span\u003e SpringBootApplication {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// ......\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003e@SpringBootConfiguration\u003c/code\u003e就是\u003ccode\u003e@Configuration\u003c/code\u003e，它是 Spring 框架的注解，标明该类是一个\u003ccode\u003eJavaConfig\u003c/code\u003e配置类。而\u003ccode\u003e@ComponentScan\u003c/code\u003e启用组件扫描，前文已经详细讲解过，这里着重关注\u003ccode\u003e@EnableAutoConfiguration\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e@EnableAutoConfiguration\u003c/code\u003e注解表示开启 Spring Boot 自动配置功能，Spring Boot 会根据应用的依赖、自定义的 bean、classpath 下有没有某个类 等等因素来猜测你需要的 bean，然后注册到 IOC 容器中。那\u003ccode\u003e@EnableAutoConfiguration\u003c/code\u003e是如何推算出你的需求？首先看下它的定义：\u003c/p\u003e\n\u003cfigure class=\"highlight less\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@Target\u003c/span\u003e(ElementType.TYPE)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@Retention\u003c/span\u003e(RetentionPolicy.RUNTIME)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@Documented\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@Inherited\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@AutoConfigurationPackage\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@Import\u003c/span\u003e(EnableAutoConfigurationImportSelector.class)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epublic \u003cspan class=\"variable\"\u003e@interface\u003c/span\u003e EnableAutoConfiguration {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// ......\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e你的关注点应该在\u003ccode\u003e@Import(EnableAutoConfigurationImportSelector.class)\u003c/code\u003e上了，前文说过，\u003ccode\u003e@Import\u003c/code\u003e注解用于导入类，并将这个类作为一个 bean 的定义注册到容器中，这里它将把\u003ccode\u003eEnableAutoConfigurationImportSelector\u003c/code\u003e作为 bean 注入到容器中，而这个类会将所有符合条件的@Configuration 配置都加载到容器中，看看它的代码：\u003c/p\u003e\n\u003cfigure class=\"highlight haxe\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eString\u003c/span\u003e[] selectImports(AnnotationMetadata annotationMetadata) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 省略了大部分代码，保留一句核心代码\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 注意：SpringBoot最近版本中，这句代码被封装在一个单独的方法中\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// SpringFactoriesLoader相关知识请参考前文\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    List\u0026lt;\u003cspan class=\"keyword\"\u003eString\u003c/span\u003e\u0026gt; factories = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eArrayList\u003c/span\u003e\u0026lt;\u003cspan class=\"keyword\"\u003eString\u003c/span\u003e\u0026gt;(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eLinkedHashSet\u003c/span\u003e\u0026lt;\u003cspan class=\"keyword\"\u003eString\u003c/span\u003e\u0026gt;(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.beanClassLoader)));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这个类会扫描所有的 jar 包，将所有符合条件的@Configuration 配置类注入的容器中，何为符合条件，看看\u003ccode\u003eMETA-INF/spring.factories\u003c/code\u003e的文件内容：\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 来自 org.springframework.boot.autoconfigure下的META-INF/spring.factories\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 配置的key = EnableAutoConfiguration，与代码中一致\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eorg\u003cspan class=\"selector-class\"\u003e.springframework\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.boot\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.autoconfigure\u003c/span\u003e.EnableAutoConfiguration=\\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eorg\u003cspan class=\"selector-class\"\u003e.springframework\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.boot\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.autoconfigure\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.jdbc\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.DataSourceAutoConfiguration\u003c/span\u003e,\\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eorg\u003cspan class=\"selector-class\"\u003e.springframework\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.boot\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.autoconfigure\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.aop\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.AopAutoConfiguration\u003c/span\u003e,\\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eorg\u003cspan class=\"selector-class\"\u003e.springframework\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.boot\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.autoconfigure\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.amqp\u003c/span\u003e.RabbitAutoConfiguration\\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e.....\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e以\u003ccode\u003eDataSourceAutoConfiguration\u003c/code\u003e为例，看看 Spring Boot 是如何自动配置的：\u003c/p\u003e\n\u003cfigure class=\"highlight less\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@Configuration\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@ConditionalOnClass\u003c/span\u003e({ DataSource.class, EmbeddedDatabaseType.class })\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@EnableConfigurationProperties\u003c/span\u003e(DataSourceProperties.class)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@Import\u003c/span\u003e({ Registrar.class, DataSourcePoolMetadataProvidersConfiguration.class })\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epublic class DataSourceAutoConfiguration {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e分别说一说：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@ConditionalOnClass({ DataSource.class, EmbeddedDatabaseType.class })\u003c/code\u003e：当 Classpath 中存在 DataSource 或者 EmbeddedDatabaseType 类时才启用这个配置，否则这个配置将被忽略。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@EnableConfigurationProperties(DataSourceProperties.class)\u003c/code\u003e：将 DataSource 的默认配置类注入到 IOC 容器中，DataSourceproperties 定义为：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight haxe\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 提供对datasource配置信息的支持，所有的配置前缀为：spring.datasource\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@ConfigurationProperties\u003c/span\u003e(prefix = \u003cspan class=\"string\"\u003e\u0026#34;spring.datasource\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title class_\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eDataSourceProperties\u003c/span\u003e  \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e ClassLoader classLoader;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e Environment environment;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003eString\u003c/span\u003e name = \u003cspan class=\"string\"\u003e\u0026#34;testdb\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ......\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@Import({ Registrar.class, DataSourcePoolMetadataProvidersConfiguration.class })\u003c/code\u003e：导入其他额外的配置，就以\u003ccode\u003eDataSourcePoolMetadataProvidersConfiguration\u003c/code\u003e为例吧。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight less\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003e@Configuration\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epublic class DataSourcePoolMetadataProvidersConfiguration {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"variable\"\u003e@Configuration\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"variable\"\u003e@ConditionalOnClass\u003c/span\u003e(org.apache.tomcat.jdbc.pool.DataSource.class)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    static class TomcatDataSourcePoolMetadataProviderConfiguration {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"variable\"\u003e@Bean\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        public DataSourcePoolMetadataProvider \u003cspan class=\"built_in\"\u003etomcatPoolDataSourceMetadataProvider\u003c/span\u003e() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            .....\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  ......\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eDataSourcePoolMetadataProvidersConfiguration 是数据库连接池提供者的一个配置类，即 Classpath 中存在\u003ccode\u003eorg.apache.tomcat.jdbc.pool.DataSource.class\u003c/code\u003e，则使用 tomcat-jdbc 连接池，如果 Classpath 中存在\u003ccode\u003eHikariDataSource.class\u003c/code\u003e则使用 Hikari 连接池。\u003c/p\u003e\n\u003cp\u003e这里仅描述了 DataSourceAutoConfiguration 的冰山一角，但足以说明 Spring Boot 如何利用条件话配置来实现自动配置的。回顾一下，\u003ccode\u003e@EnableAutoConfiguration\u003c/code\u003e中导入了 EnableAutoConfigurationImportSelector 类，而这个类的\u003ccode\u003eselectImports()\u003c/code\u003e通过 SpringFactoriesLoader 得到了大量的配置类，而每一个配置类则根据条件化配置来做出决策，以实现自动配置。\u003c/p\u003e\n\u003cp\u003e整个流程很清晰，但漏了一个大问题：\u003ccode\u003eEnableAutoConfigurationImportSelector.selectImports()\u003c/code\u003e是何时执行的？其实这个方法会在容器启动过程中执行：\u003ccode\u003eAbstractApplicationContext.refresh()\u003c/code\u003e，更多的细节在下一小节中说明。\u003c/p\u003e\n\u003ch2 id=\"六、启动引导：Spring-Boot-应用启动的秘密\"\u003e\u003ca href=\"#六、启动引导：Spring-Boot-应用启动的秘密\" class=\"headerlink\" title=\"六、启动引导：Spring Boot 应用启动的秘密\"\u003e\u003c/a\u003e六、启动引导：Spring Boot 应用启动的秘密\u003c/h2\u003e\u003ch3 id=\"6-1-SpringApplication-初始化\"\u003e\u003ca href=\"#6-1-SpringApplication-初始化\" class=\"headerlink\" title=\"6.1 SpringApplication 初始化\"\u003e\u003c/a\u003e6.1 SpringApplication 初始化\u003c/h3\u003e\u003cp\u003eSpringBoot 整个启动流程分为两个步骤：初始化一个 SpringApplication 对象、执行该对象的 run 方法。看下 SpringApplication 的初始化流程，SpringApplication 的构造方法中调用 initialize(Object[] sources)方法，其代码如下：\u003c/p\u003e\n\u003cfigure class=\"highlight kotlin\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e void initialize(Object[] sources) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e     \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (sources != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; sources.length \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e         \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e.sources.addAll(Arrays.asList(sources));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e     }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e     \u003cspan class=\"comment\"\u003e// 判断是否是Web项目\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e     \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e.webEnvironment = deduceWebEnvironment();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e     setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e     setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e     \u003cspan class=\"comment\"\u003e// 找到入口类\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e     \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e.mainApplicationClass = deduceMainApplicationClass();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e初始化流程中最重要的就是通过 SpringFactoriesLoader 找到\u003ccode\u003espring.factories\u003c/code\u003e文件中配置的\u003ccode\u003eApplicationContextInitializer\u003c/code\u003e和\u003ccode\u003eApplicationListener\u003c/code\u003e两个接口的实现类名称，以便后期构造相应的实例。\u003ccode\u003eApplicationContextInitializer\u003c/code\u003e的主要目的是在\u003ccode\u003eConfigurableApplicationContext\u003c/code\u003e做 refresh 之前，对 ConfigurableApplicationContext 实例做进一步的设置或处理。ConfigurableApplicationContext 继承自 ApplicationContext，其主要提供了对 ApplicationContext 进行设置的能力。\u003c/p\u003e\n\u003cp\u003e实现一个 ApplicationContextInitializer 非常简单，因为它只有一个方法，但大多数情况下我们没有必要自定义一个 ApplicationContextInitializer，即便是 Spring Boot 框架，它默认也只是注册了两个实现，毕竟 Spring 的容器已经非常成熟和稳定，你没有必要来改变它。\u003c/p\u003e\n\u003cp\u003e而\u003ccode\u003eApplicationListener\u003c/code\u003e的目的就没什么好说的了，它是 Spring 框架对 Java 事件监听机制的一种框架实现，具体内容在前文 Spring 事件监听机制这个小节有详细讲解。这里主要说说，如果你想为 Spring Boot 应用添加监听器，该如何实现？\u003c/p\u003e\n\u003cp\u003eSpring Boot 提供两种方式来添加自定义监听器：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e通过\u003ccode\u003eSpringApplication.addListeners(ApplicationListener... listeners)\u003c/code\u003e或者\u003ccode\u003eSpringApplication.setListeners(Collection\u0026gt; listeners)\u003c/code\u003e两个方法来添加一个或者多个自定义监听器\u003c/li\u003e\n\u003cli\u003e既然 SpringApplication 的初始化流程中已经从\u003ccode\u003espring.factories\u003c/code\u003e中获取到\u003ccode\u003eApplicationListener\u003c/code\u003e的实现类，那么我们直接在自己的 jar 包的\u003ccode\u003eMETA-INF/spring.factories\u003c/code\u003e文件中新增配置即可：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eorg\u003cspan class=\"selector-class\"\u003e.springframework\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.context\u003c/span\u003e.ApplicationListener=\\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecn\u003cspan class=\"selector-class\"\u003e.moondev\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.listeners\u003c/span\u003e.xxxxListener\\\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e关于 SpringApplication 的初始化，我们就说这么多。\u003c/p\u003e\n\u003ch3 id=\"6-2-Spring-Boot-启动流程\"\u003e\u003ca href=\"#6-2-Spring-Boot-启动流程\" class=\"headerlink\" title=\"6.2 Spring Boot 启动流程\"\u003e\u003c/a\u003e6.2 Spring Boot 启动流程\u003c/h3\u003e\u003cp\u003eSpring Boot 应用的整个启动流程都封装在 SpringApplication.run 方法中，其整个流程真的是太长太长了，但本质上就是在 Spring 容器启动的基础上做了大量的扩展，按照这个思路来看看源码：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e ConfigurableApplicationContext \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e(String... args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eStopWatch\u003c/span\u003e \u003cspan class=\"variable\"\u003estopWatch\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eStopWatch\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        stopWatch.start();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eConfigurableApplicationContext\u003c/span\u003e \u003cspan class=\"variable\"\u003econtext\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eFailureAnalyzers\u003c/span\u003e \u003cspan class=\"variable\"\u003eanalyzers\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        configureHeadlessProperty();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// ①\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eSpringApplicationRunListeners\u003c/span\u003e \u003cspan class=\"variable\"\u003elisteners\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e getRunListeners(args);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        listeners.starting();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// ②\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eApplicationArguments\u003c/span\u003e \u003cspan class=\"variable\"\u003eapplicationArguments\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eDefaultApplicationArguments\u003c/span\u003e(args);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eConfigurableEnvironment\u003c/span\u003e \u003cspan class=\"variable\"\u003eenvironment\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e prepareEnvironment(listeners,applicationArguments);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// ③\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eBanner\u003c/span\u003e \u003cspan class=\"variable\"\u003eprintedBanner\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e printBanner(environment);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// ④\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            context = createApplicationContext();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// ⑤\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            analyzers = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eFailureAnalyzers\u003c/span\u003e(context);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// ⑥\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            prepareContext(context, environment, listeners, applicationArguments,printedBanner);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// ⑦\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            refreshContext(context);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// ⑧\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            afterRefresh(context, applicationArguments);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// ⑨\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            listeners.finished(context, \u003cspan class=\"literal\"\u003enull\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            stopWatch.stop();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e context;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (Throwable ex) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            handleRunFailure(context, listeners, analyzers, ex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ethrow\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eIllegalStateException\u003c/span\u003e(ex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e① 通过 SpringFactoriesLoader 查找并加载所有的\u003ccode\u003eSpringApplicationRunListeners\u003c/code\u003e，通过调用 starting()方法通知所有的 SpringApplicationRunListeners：应用开始启动了。SpringApplicationRunListeners 其本质上就是一个事件发布者，它在 SpringBoot 应用启动的不同时间点发布不同应用事件类型(ApplicationEvent)，如果有哪些事件监听者(ApplicationListener)对这些事件感兴趣，则可以接收并且处理。还记得初始化流程中，SpringApplication 加载了一系列 ApplicationListener 吗？这个启动流程中没有发现有发布事件的代码，其实都已经在 SpringApplicationRunListeners 这儿实现了。\u003c/p\u003e\n\u003cp\u003e简单的分析一下其实现流程，首先看下 SpringApplicationRunListener 的源码：\u003c/p\u003e\n\u003cfigure class=\"highlight csharp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"title\"\u003eSpringApplicationRunListener\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 运行run方法时立即调用此方法，可以用户非常早期的初始化工作\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003estarting\u003c/span\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// Environment准备好后，并且ApplicationContext创建之前调用\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003eenvironmentPrepared\u003c/span\u003e(\u003cspan class=\"params\"\u003eConfigurableEnvironment environment\u003c/span\u003e)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// ApplicationContext创建好后立即调用\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003econtextPrepared\u003c/span\u003e(\u003cspan class=\"params\"\u003eConfigurableApplicationContext context\u003c/span\u003e)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// ApplicationContext加载完成，在refresh之前调用\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003econtextLoaded\u003c/span\u003e(\u003cspan class=\"params\"\u003eConfigurableApplicationContext context\u003c/span\u003e)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 当run方法结束之前调用\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003efinished\u003c/span\u003e(\u003cspan class=\"params\"\u003eConfigurableApplicationContext context, Throwable exception\u003c/span\u003e)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eSpringApplicationRunListener 只有一个实现类：\u003ccode\u003eEventPublishingRunListener\u003c/code\u003e。① 处的代码只会获取到一个 EventPublishingRunListener 的实例，我们来看看 starting()方法的内容：\u003c/p\u003e\n\u003cfigure class=\"highlight csharp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003estarting\u003c/span\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 发布一个ApplicationStartedEvent\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e.initialMulticaster.multicastEvent(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e ApplicationStartedEvent(\u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e.application, \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e.args));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e顺着这个逻辑，你可以在 ② 处的\u003ccode\u003eprepareEnvironment()\u003c/code\u003e方法的源码中找到\u003ccode\u003elisteners.environmentPrepared(environment);\u003c/code\u003e即 SpringApplicationRunListener 接口的第二个方法，那不出你所料，\u003ccode\u003eenvironmentPrepared()\u003c/code\u003e又发布了另外一个事件\u003ccode\u003eApplicationEnvironmentPreparedEvent\u003c/code\u003e。接下来会发生什么，就不用我多说了吧。\u003c/p\u003e\n\u003cp\u003e② 创建并配置当前应用将要使用的\u003ccode\u003eEnvironment\u003c/code\u003e，Environment 用于描述应用程序当前的运行环境，其抽象了两个方面的内容：配置文件(profile)和属性(properties)，开发经验丰富的同学对这两个东西一定不会陌生：不同的环境(eg：生产环境、预发布环境)可以使用不同的配置文件，而属性则可以从配置文件、环境变量、命令行参数等来源获取。因此，当 Environment 准备好后，在整个应用的任何时候，都可以从 Environment 中获取资源。\u003c/p\u003e\n\u003cp\u003e总结起来，② 处的两句代码，主要完成以下几件事：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e判断 Environment 是否存在，不存在就创建（如果是 web 项目就创建\u003ccode\u003eStandardServletEnvironment\u003c/code\u003e，否则创建\u003ccode\u003eStandardEnvironment\u003c/code\u003e）\u003c/li\u003e\n\u003cli\u003e配置 Environment：配置 profile 以及 properties\u003c/li\u003e\n\u003cli\u003e调用 SpringApplicationRunListener 的\u003ccode\u003eenvironmentPrepared()\u003c/code\u003e方法，通知事件监听者：应用的 Environment 已经准备好\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e③、SpringBoot 应用在启动时会输出这样的东西：\u003c/p\u003e\n\u003cfigure class=\"highlight gherkin\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e  .   ____          _            __ _ _\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e /\\\\ / ___\u0026#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e( ( )\\___ |\u003cspan class=\"string\"\u003e \u0026#39;_ \u003c/span\u003e|\u003cspan class=\"string\"\u003e \u0026#39;_\u003c/span\u003e|\u003cspan class=\"string\"\u003e \u003c/span\u003e|\u003cspan class=\"string\"\u003e \u0026#39;_ \\/ _` \u003c/span\u003e|\u003cspan class=\"string\"\u003e \\ \\ \\ \\\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e \\\\/  ___)\u003c/span\u003e|\u003cspan class=\"string\"\u003e \u003c/span\u003e|\u003cspan class=\"string\"\u003e_)\u003c/span\u003e|\u003cspan class=\"string\"\u003e \u003c/span\u003e|\u003cspan class=\"string\"\u003e \u003c/span\u003e|\u003cspan class=\"string\"\u003e \u003c/span\u003e|\u003cspan class=\"string\"\u003e \u003c/span\u003e|\u003cspan class=\"string\"\u003e \u003c/span\u003e||\u003cspan class=\"string\"\u003e (_\u003c/span\u003e|\u003cspan class=\"string\"\u003e \u003c/span\u003e|\u003cspan class=\"string\"\u003e  ) ) ) )\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e  \u0026#39;  \u003c/span\u003e|\u003cspan class=\"string\"\u003e____\u003c/span\u003e|\u003cspan class=\"string\"\u003e .__\u003c/span\u003e|\u003cspan class=\"string\"\u003e_\u003c/span\u003e|\u003cspan class=\"string\"\u003e \u003c/span\u003e|\u003cspan class=\"string\"\u003e_\u003c/span\u003e|\u003cspan class=\"string\"\u003e_\u003c/span\u003e|\u003cspan class=\"string\"\u003e \u003c/span\u003e|\u003cspan class=\"string\"\u003e_\\__, \u003c/span\u003e|\u003cspan class=\"string\"\u003e / / / /\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e =========\u003c/span\u003e|\u003cspan class=\"string\"\u003e_\u003c/span\u003e|\u003cspan class=\"string\"\u003e==============\u003c/span\u003e|\u003cspan class=\"string\"\u003e___/=/_/_/_/\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e :: Spring Boot ::        (v1.5.6.RELEASE)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果想把这个东西改成自己的涂鸦，你可以研究以下 Banner 的实现，这个任务就留给你们吧。\u003c/p\u003e\n\u003cp\u003e④、根据是否是 web 项目，来创建不同的 ApplicationContext 容器。\u003c/p\u003e\n\u003cp\u003e⑤、创建一系列\u003ccode\u003eFailureAnalyzer\u003c/code\u003e，创建流程依然是通过 SpringFactoriesLoader 获取到所有实现 FailureAnalyzer 接口的 class，然后在创建对应的实例。FailureAnalyzer 用于分析故障并提供相关诊断信息。\u003c/p\u003e\n\u003cp\u003e⑥、初始化 ApplicationContext，主要完成以下工作：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e将准备好的 Environment 设置给 ApplicationContext\u003c/li\u003e\n\u003cli\u003e遍历调用所有的 ApplicationContextInitializer 的\u003ccode\u003einitialize()\u003c/code\u003e方法来对已经创建好的 ApplicationContext 进行进一步的处理\u003c/li\u003e\n\u003cli\u003e调用 SpringApplicationRunListener 的\u003ccode\u003econtextPrepared()\u003c/code\u003e方法，通知所有的监听者：ApplicationContext 已经准备完毕\u003c/li\u003e\n\u003cli\u003e将所有的 bean 加载到容器中\u003c/li\u003e\n\u003cli\u003e调用 SpringApplicationRunListener 的\u003ccode\u003econtextLoaded()\u003c/code\u003e方法，通知所有的监听者：ApplicationContext 已经装载完毕\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e⑦、调用 ApplicationContext 的\u003ccode\u003erefresh()\u003c/code\u003e方法，完成 IoC 容器可用的最后一道工序。从名字上理解为刷新容器，那何为刷新？就是插手容器的启动，联系一下第一小节的内容。那如何刷新呢？且看下面代码：\u003c/p\u003e\n\u003cfigure class=\"highlight scss\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 摘自refresh()方法中一句代码\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003einvokeBeanFactoryPostProcessors\u003c/span\u003e(beanFactory);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e看看这个方法的实现：\u003c/p\u003e\n\u003cfigure class=\"highlight lasso\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"literal\"\u003evoid\u003c/span\u003e invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"params\"\u003e...\u003c/span\u003e\u003cspan class=\"params\"\u003e...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e获取到所有的\u003ccode\u003eBeanFactoryPostProcessor\u003c/code\u003e来对容器做一些额外的操作。BeanFactoryPostProcessor 允许我们在容器实例化相应对象之前，对注册到容器的 BeanDefinition 所保存的信息做一些额外的操作。这里的 getBeanFactoryPostProcessors()方法可以获取到 3 个 Processor：\u003c/p\u003e\n\u003cfigure class=\"highlight arcade\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eConfigurationWarningsApplicationContextInitializer\u003cspan class=\"symbol\"\u003e$Co\u003c/span\u003enfigurationWarningsPostProcessor\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSharedMetadataReaderFactoryContextInitializer\u003cspan class=\"symbol\"\u003e$Cac\u003c/span\u003ehingMetadataReaderFactoryPostProcessor\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConfigFileApplicationListener\u003cspan class=\"symbol\"\u003e$PropertySourceOrderi\u003c/span\u003engPostProcessor\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e不是有那么多 BeanFactoryPostProcessor 的实现类，为什么这儿只有这 3 个？因为在初始化流程获取到的各种 ApplicationContextInitializer 和 ApplicationListener 中，只有上文 3 个做了类似于如下操作：\u003c/p\u003e\n\u003cfigure class=\"highlight typescript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"built_in\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003einitialize\u003c/span\u003e(\u003cspan class=\"params\"\u003eConfigurableApplicationContext context\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    context.\u003cspan class=\"title function_\"\u003eaddBeanFactoryPostProcessor\u003c/span\u003e(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eConfigurationWarningsPostProcessor\u003c/span\u003e(\u003cspan class=\"title function_\"\u003egetChecks\u003c/span\u003e()));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e然后你就可以进入到\u003ccode\u003ePostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors()\u003c/code\u003e方法了，这个方法除了会遍历上面的 3 个 BeanFactoryPostProcessor 处理外，还会获取类型为\u003ccode\u003eBeanDefinitionRegistryPostProcessor\u003c/code\u003e的 bean：\u003ccode\u003eorg.springframework.context.annotation.internalConfigurationAnnotationProcessor\u003c/code\u003e，对应的 Class 为\u003ccode\u003eConfigurationClassPostProcessor\u003c/code\u003e。\u003ccode\u003eConfigurationClassPostProcessor\u003c/code\u003e用于解析处理各种注解，包括：@Configuration、@ComponentScan、@Import、@PropertySource、@ImportResource、@Bean。当处理\u003ccode\u003e@import\u003c/code\u003e注解的时候，就会调用自动配置这一小节中的\u003ccode\u003eEnableAutoConfigurationImportSelector.selectImports()\u003c/code\u003e来完成自动配置功能。其他的这里不再多讲，如果你有兴趣，可以查阅参考资料 6。\u003c/p\u003e\n\u003cp\u003e⑧、查找当前 context 中是否注册有 CommandLineRunner 和 ApplicationRunner，如果有则遍历执行它们。\u003c/p\u003e\n\u003cp\u003e⑨、执行所有 SpringApplicationRunListener 的 finished()方法。\u003c/p\u003e\n\u003cp\u003e这就是 Spring Boot 的整个启动流程，其核心就是在 Spring 容器初始化并启动的基础上加入各种扩展点，这些扩展点包括：ApplicationContextInitializer、ApplicationListener 以及各种 BeanFactoryPostProcessor 等等。你对整个流程的细节不必太过关注，甚至没弄明白也没有关系，你只要理解这些扩展点是在何时如何工作的，能让它们为你所用即可。\u003c/p\u003e\n\u003cp\u003e整个启动流程确实非常复杂，可以查询参考资料中的部分章节和内容，对照着源码，多看看，我想最终你都能弄清楚的。言而总之，Spring 才是核心，理解清楚 Spring 容器的启动流程，那 Spring Boot 启动流程就不在话下了。\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cp\u003e[1]\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://link.jianshu.com/?t=http://union-click.jd.com/jdc?d=4jESQ9\"\u003e王福强 著；springboot 揭秘：快速构建微服务体系; 机械工业出版社, 2016\u003c/a\u003e\u003cbr/\u003e[2]\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://link.jianshu.com/?t=http://union-click.jd.com/jdc?d=yzfgeF\"\u003e王福强 著；spring 揭秘; 人民邮件出版社, 2009\u003c/a\u003e\u003cbr/\u003e[3]\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://link.jianshu.com/?t=http://union-click.jd.com/jdc?d=AQ6oHO\"\u003ecraig walls 著；丁雪丰 译；spring boot 实战；中国工信出版集团 人民邮电出版社，2016\u003c/a\u003e\u003cbr/\u003e[4]\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://link.jianshu.com/?t=https://www.ibm.com/developerworks/cn/java/j-lo-classloader/\"\u003e深入探讨 java 类加载器\u003c/a\u003e : \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://link.jianshu.com/?t=https://www.ibm.com/developerworks/cn/java/j-lo-classloader/\"\u003ewww.ibm.com/developerwo…\u003c/a\u003e\u003cbr/\u003e[5]\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://link.jianshu.com/?t=http://blog.csdn.net/liaokailin/article/details/49559951\"\u003espring boot 实战：自动配置原理分析\u003c/a\u003e : \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://link.jianshu.com/?t=http://blog.csdn.net/liaokailin/article/details/49559951\"\u003eblog.csdn.net/liaokailin/…\u003c/a\u003e\u003cbr/\u003e[6]\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://link.jianshu.com/?t=http://blog.csdn.net/liaokailin/article/details/49107209\"\u003espring boot实战：spring boot bean加载源码分析\u003c/a\u003e： \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://link.jianshu.com/?t=http://blog.csdn.net/liaokailin/article/details/49107209\"\u003eblog.csdn.net/liaokailin/…\u003c/a\u003e\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-08-11T23:01:26Z",
  "Author": "钝悟 ◾ Dunwu"
}