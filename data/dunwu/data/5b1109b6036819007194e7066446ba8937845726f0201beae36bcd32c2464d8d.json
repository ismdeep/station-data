{
  "Source": "dunwu",
  "Title": "Kafka 快速入门",
  "Link": "https://dunwu.github.io/blog/pages/a697a6/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Kafka-快速入门\"\u003e\u003ca href=\"#Kafka-快速入门\" class=\"headerlink\" title=\"Kafka 快速入门\"\u003e\u003c/a\u003eKafka 快速入门\u003c/h1\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eApache Kafka 是一款开源的消息引擎系统，也是一个分布式流计算平台，此外，还可以作为数据存储\u003c/strong\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"Kafka-简介\"\u003e\u003ca href=\"#Kafka-简介\" class=\"headerlink\" title=\"Kafka 简介\"\u003e\u003c/a\u003eKafka 简介\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eApache Kafka 是一款开源的消息引擎系统，也是一个分布式流计算平台，此外，还可以作为数据存储\u003c/strong\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/distributed/mq/kafka/kafka-event-system.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"Kafka-的功能\"\u003e\u003ca href=\"#Kafka-的功能\" class=\"headerlink\" title=\"Kafka 的功能\"\u003e\u003c/a\u003eKafka 的功能\u003c/h3\u003e\u003cp\u003eKafka 的核心功能如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e消息引擎\u003c/strong\u003e - Kafka 可以作为一个消息引擎系统。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e流处理\u003c/strong\u003e - Kafka 可以作为一个分布式流处理平台。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e存储\u003c/strong\u003e - Kafka 可以作为一个安全的分布式存储。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Kafka-的特性\"\u003e\u003ca href=\"#Kafka-的特性\" class=\"headerlink\" title=\"Kafka 的特性\"\u003e\u003c/a\u003eKafka 的特性\u003c/h3\u003e\u003cp\u003eKafka 的设计目标：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e高性能\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e分区、分段、索引\u003c/strong\u003e：基于分区机制提供并发处理能力。分段、索引提升了数据读写的查询效率。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e顺序读写\u003c/strong\u003e：使用顺序读写提升磁盘 IO 性能。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e零拷贝\u003c/strong\u003e：利用零拷贝技术，提升网络 I/O 效率。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e页缓存\u003c/strong\u003e：利用操作系统的 PageCache 来缓存数据（典型的利用空间换时间）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e批量读写\u003c/strong\u003e：批量读写可以有效提升网络 I/O 效率。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e数据压缩\u003c/strong\u003e：Kafka 支持数据压缩，可以有效提升网络 I/O 效率。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003epull 模式\u003c/strong\u003e：Kafka 架构基于 pull 模式，可以自主控制消费策略，提升传输效率。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e高可用\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e持久化\u003c/strong\u003e：Kafka 所有的消息都存储在磁盘，天然支持持久化。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e副本机制\u003c/strong\u003e：Kafka 的 Broker 集群支持副本机制，可以通过冗余，来保证其整体的可用性。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e选举 Leader\u003c/strong\u003e：Kafka 基于 ZooKeeper 支持选举 Leader，实现了故障转移能力。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e伸缩性\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e分区\u003c/strong\u003e：Kafka 的分区机制使得其具有良好的伸缩性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Kafka-术语\"\u003e\u003ca href=\"#Kafka-术语\" class=\"headerlink\" title=\"Kafka 术语\"\u003e\u003c/a\u003eKafka 术语\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e消息\u003c/strong\u003e：Kafka 的数据单元被称为消息。消息由字节数组组成。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e批次\u003c/strong\u003e：批次就是一组消息，这些消息属于同一个主题和分区。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e主题（Topic）\u003c/strong\u003e：Kafka 消息通过主题进行分类。主题就类似数据库的表。\u003cul\u003e\n\u003cli\u003e不同主题的消息是物理隔离的；\u003c/li\u003e\n\u003cli\u003e同一个主题的消息保存在一个或多个 Broker 上。但用户只需指定消息的 Topic 即可生产或消费数据而不必关心数据存于何处。\u003c/li\u003e\n\u003cli\u003e主题有一个或多个分区。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e分区（Partition）\u003c/strong\u003e：分区是一个有序不变的消息序列，消息以追加的方式写入分区，然后以先入先出的顺序读取。Kafka 通过分区来实现数据冗余和伸缩性。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e消息偏移量（Offset）\u003c/strong\u003e：表示分区中每条消息的位置信息，是一个单调递增且不变的值。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e生产者（Producer）\u003c/strong\u003e：生产者是向主题发布新消息的 Kafka 客户端。生产者可以将数据发布到所选择的主题中。生产者负责将记录分配到主题中的哪一个分区中。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e消费者（Consumer）\u003c/strong\u003e：消费者是从主题订阅新消息的 Kafka 客户端。消费者通过检查消息的偏移量来区分消息是否已读。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e消费者群组（Consumer Group）\u003c/strong\u003e：多个消费者共同构成的一个群组，同时消费多个分区以实现高并发。\u003cul\u003e\n\u003cli\u003e每个消费者属于一个特定的消费者群组（可以为每个消费者指定消费者群组，若不指定，则属于默认的群组）。\u003c/li\u003e\n\u003cli\u003e群组中，一个消费者可以消费多个分区\u003c/li\u003e\n\u003cli\u003e群组中，每个分区只能被指定给一个消费\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e再均衡（Rebalance）\u003c/strong\u003e：消费者组内某个消费者实例挂掉后，其他消费者实例自动重新分配订阅主题分区的过程。分区再均衡是 Kafka 消费者端实现高可用的重要手段。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBroker\u003c/strong\u003e - 一个独立的 Kafka 服务器被称为 Broker。Broker 接受来自生产者的消息，为消息设置偏移量，并提交消息到磁盘保存；消费者向 Broker 请求消息，Broker 负责返回已提交的消息。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e副本（Replica）\u003c/strong\u003e：Kafka 中同一条消息能够被拷贝到多个地方以提供数据冗余，这些地方就是所谓的副本。副本还分为领导者副本和追随者副本，各自有不同的角色划分。副本是在分区层级下的，即每个分区可配置多个副本实现高可用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Kafka-发行版本\"\u003e\u003ca href=\"#Kafka-发行版本\" class=\"headerlink\" title=\"Kafka 发行版本\"\u003e\u003c/a\u003eKafka 发行版本\u003c/h3\u003e\u003cp\u003eKafka 主要有以下发行版本：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eApache Kafka\u003c/strong\u003e：也称社区版 Kafka。优势在于迭代速度快，社区响应度高，使用它可以让你有更高的把控度；缺陷在于仅提供基础核心组件，缺失一些高级的特性。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eConfluent Kafka\u003c/strong\u003e：Confluent 公司提供的 Kafka。优势在于集成了很多高级特性且由 Kafka 原班人马打造，质量上有保证；缺陷在于相关文档资料不全，普及率较低，没有太多可供参考的范例。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCDH/HDP Kafka\u003c/strong\u003e：大数据云公司提供的 Kafka，内嵌 Apache Kafka。优势在于操作简单，节省运维成本；缺陷在于把控度低，演进速度较慢。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Kafka-重大版本\"\u003e\u003ca href=\"#Kafka-重大版本\" class=\"headerlink\" title=\"Kafka 重大版本\"\u003e\u003c/a\u003eKafka 重大版本\u003c/h3\u003e\u003cp\u003eKafka 有以下重大版本：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e0.8\u003cul\u003e\n\u003cli\u003e正式引入了副本机制\u003c/li\u003e\n\u003cli\u003e至少升级到 0.8.2.2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e0.9\u003cul\u003e\n\u003cli\u003e增加了基础的安全认证 / 权限功能\u003c/li\u003e\n\u003cli\u003e新版本 Producer API 在这个版本中算比较稳定\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e0.10\u003cul\u003e\n\u003cli\u003e引入了 Kafka Streams\u003c/li\u003e\n\u003cli\u003e至少升级到 0.10.2.2\u003c/li\u003e\n\u003cli\u003e修复了一个可能导致 Producer 性能降低的 Bug\u003c/li\u003e\n\u003cli\u003e使用新版本 Consumer API\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e0.11\u003cul\u003e\n\u003cli\u003e提供幂等性 Producer API 以及事务\u003c/li\u003e\n\u003cli\u003e对 Kafka 消息格式做了重构\u003c/li\u003e\n\u003cli\u003e至少升级到 0.11.0.3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e1.0 和 2.0\u003cul\u003e\n\u003cli\u003eKafka Streams 的改进\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Kafka-服务端使用入门\"\u003e\u003ca href=\"#Kafka-服务端使用入门\" class=\"headerlink\" title=\"Kafka 服务端使用入门\"\u003e\u003c/a\u003eKafka 服务端使用入门\u003c/h2\u003e\u003ch3 id=\"步骤一、获取-Kafka\"\u003e\u003ca href=\"#步骤一、获取-Kafka\" class=\"headerlink\" title=\"步骤一、获取 Kafka\"\u003e\u003c/a\u003e步骤一、获取 Kafka\u003c/h3\u003e\u003cp\u003e下载最新的 Kafka 版本并解压到本地。\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ tar -xzf kafka_2.13-2.7.0.tgz\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e$ \u003cspan class=\"built_in\"\u003ecd\u003c/span\u003e kafka_2.13-2.7.0\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"步骤二、启动-Kafka-环境\"\u003e\u003ca href=\"#步骤二、启动-Kafka-环境\" class=\"headerlink\" title=\"步骤二、启动 Kafka 环境\"\u003e\u003c/a\u003e步骤二、启动 Kafka 环境\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003e注意：本地必须已安装 Java8\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e执行以下指令，保证所有服务按照正确的顺序启动：\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# Start the ZooKeeper service\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# Note: Soon, ZooKeeper will no longer be required by Apache Kafka.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e$ bin/zookeeper-server-start.sh config/zookeeper.properties\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e打开另一个终端会话，并执行：\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# Start the Kafka broker service\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e$ bin/kafka-server-start.sh config/server.properties\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e一旦所有服务成功启动，您就已经成功运行了一个基本的 kafka 环境。\u003c/p\u003e\n\u003ch3 id=\"步骤三、创建一个-TOPIC-并存储您的事件\"\u003e\u003ca href=\"#步骤三、创建一个-TOPIC-并存储您的事件\" class=\"headerlink\" title=\"步骤三、创建一个 TOPIC 并存储您的事件\"\u003e\u003c/a\u003e步骤三、创建一个 TOPIC 并存储您的事件\u003c/h3\u003e\u003cp\u003eKafka 是一个分布式事件流处理平台，它可以让您通过各种机制读、写、存储并处理事件（\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kafka.apache.org/documentation/#messages\"\u003e\u003cem\u003eevents\u003c/em\u003e\u003c/a\u003e，也被称为记录或消息）\u003c/p\u003e\n\u003cp\u003e示例事件包括付款交易，手机的地理位置更新，运输订单，物联网设备或医疗设备的传感器测量等等。 这些事件被组织并存储在主题中（\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kafka.apache.org/documentation/#intro_concepts_and_terms\"\u003e\u003cem\u003etopics\u003c/em\u003e\u003c/a\u003e）。 简单来说，主题类似于文件系统中的文件夹，而事件是该文件夹中的文件。\u003c/p\u003e\n\u003cp\u003e因此，在您写入第一个事件之前，您必须先创建一个 Topic。执行以下指令：\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ bin/kafka-topics.sh --create --topic quickstart-events --bootstrap-server localhost:9092\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e所有的 Kafka 命令行工具都有附加可选项：不加任何参数，运行 \u003ccode\u003ekafka-topics.sh\u003c/code\u003e 命令会显示使用信息。例如，会显示新 Topic 的分区数等细节。\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ bin/kafka-topics.sh --describe --topic quickstart-events --bootstrap-server localhost:9092\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTopic:quickstart-events  PartitionCount:1    ReplicationFactor:1 Configs:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Topic: quickstart-events Partition: 0    Leader: 0   Replicas: 0 Isr: 0\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"步骤四、向-Topic-写入-Event\"\u003e\u003ca href=\"#步骤四、向-Topic-写入-Event\" class=\"headerlink\" title=\"步骤四、向 Topic 写入 Event\"\u003e\u003c/a\u003e步骤四、向 Topic 写入 Event\u003c/h3\u003e\u003cp\u003eKafka 客户端和 Kafka Broker 的通信是通过网络读写 Event。一旦收到信息，Broker 会将其以您需要的时间（甚至永久化）、容错化的方式存储。\u003c/p\u003e\n\u003cp\u003e执行 \u003ccode\u003ekafka-console-producer.sh\u003c/code\u003e 命令将 Event 写入 Topic。默认，您输入的任意行会作为独立 Event 写入 Topic：\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ bin/kafka-console-producer.sh --topic quickstart-events --bootstrap-server localhost:9092\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eThis is my first event\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eThis is my second event\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e您可以通过 \u003ccode\u003eCtrl-C\u003c/code\u003e 在任何时候中断 \u003ccode\u003ekafka-console-producer.sh\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"步骤五、读-Event\"\u003e\u003ca href=\"#步骤五、读-Event\" class=\"headerlink\" title=\"步骤五、读 Event\"\u003e\u003c/a\u003e步骤五、读 Event\u003c/h3\u003e\u003cp\u003e执行 kafka-console-consumer.sh 以读取写入 Topic 中的 Event\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ bin/kafka-console-consumer.sh --topic quickstart-events --from-beginning --bootstrap-server localhost:9092\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eThis is my first event\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eThis is my second event\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e您可以通过 \u003ccode\u003eCtrl-C\u003c/code\u003e 在任何时候中断 \u003ccode\u003ekafka-console-consumer.sh\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e由于 Event 被持久化存储在 Kafka 中，因此您可以根据需要任意多次地读取它们。 您可以通过打开另一个终端会话并再次重新运行上一个命令来轻松地验证这一点。\u003c/p\u003e\n\u003ch3 id=\"步骤六、通过-KAFKA-CONNECT-将数据作为事件流导入-导出\"\u003e\u003ca href=\"#步骤六、通过-KAFKA-CONNECT-将数据作为事件流导入-导出\" class=\"headerlink\" title=\"步骤六、通过 KAFKA CONNECT 将数据作为事件流导入/导出\"\u003e\u003c/a\u003e步骤六、通过 KAFKA CONNECT 将数据作为事件流导入/导出\u003c/h3\u003e\u003cp\u003e您可能有大量数据，存储在传统的关系数据库或消息队列系统中，并且有许多使用这些系统的应用程序。 通过 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kafka.apache.org/documentation/#connect\"\u003eKafka Connect\u003c/a\u003e，您可以将来自外部系统的数据持续地导入到 Kafka 中，反之亦然。 因此，将已有系统与 Kafka 集成非常容易。为了使此过程更加容易，有数百种此类连接器可供使用。\u003c/p\u003e\n\u003cp\u003e需要了解有关如何将数据导入和导出 Kafka 的更多信息，可以参考：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kafka.apache.org/documentation/#connect\"\u003eKafka Connect section\u003c/a\u003e 章节。\u003c/p\u003e\n\u003ch3 id=\"步骤七、使用-Kafka-Streams-处理事件\"\u003e\u003ca href=\"#步骤七、使用-Kafka-Streams-处理事件\" class=\"headerlink\" title=\"步骤七、使用 Kafka Streams 处理事件\"\u003e\u003c/a\u003e步骤七、使用 Kafka Streams 处理事件\u003c/h3\u003e\u003cp\u003e一旦将数据作为 Event 存储在 Kafka 中，就可以使用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kafka.apache.org/documentation/streams\"\u003eKafka Streams\u003c/a\u003e 的 Java / Scala 客户端。它允许您实现关键任务的实时应用程序和微服务，其中输入（和/或）输出数据存储在 Kafka Topic 中。\u003c/p\u003e\n\u003cp\u003eKafka Streams 结合了 Kafka 客户端编写和部署标准 Java 和 Scala 应用程序的简便性，以及 Kafka 服务器集群技术的优势，使这些应用程序具有高度的可伸缩性、弹性、容错性和分布式。该库支持一次性处理，有状态的操作，以及聚合、窗口化化操作、join、基于事件时间的处理等等。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eKStream\u0026lt;String, String\u0026gt; textLines = builder.stream(\u003cspan class=\"string\"\u003e\u0026#34;quickstart-events\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eKTable\u0026lt;String, Long\u0026gt; wordCounts = textLines\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            .flatMapValues(line -\u0026gt; Arrays.asList(line.toLowerCase().split(\u003cspan class=\"string\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e)))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            .groupBy((keyIgnored, word) -\u0026gt; word)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            .count();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ewordCounts.toStream().to(\u003cspan class=\"string\"\u003e\u0026#34;output-topic\u0026#34;\u003c/span\u003e), Produced.with(Serdes.String(), Serdes.Long()));\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kafka.apache.org/25/documentation/streams/quickstart\"\u003eKafka Streams demo\u003c/a\u003e 和 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kafka.apache.org/25/documentation/streams/tutorial\"\u003eapp development tutorial\u003c/a\u003e 展示了如何从头到尾的编码并运行一个流式应用。\u003c/p\u003e\n\u003ch3 id=\"步骤八、终止-Kafka-环境\"\u003e\u003ca href=\"#步骤八、终止-Kafka-环境\" class=\"headerlink\" title=\"步骤八、终止 Kafka 环境\"\u003e\u003c/a\u003e步骤八、终止 Kafka 环境\u003c/h3\u003e\u003col\u003e\n\u003cli\u003e如果尚未停止，请使用 \u003ccode\u003eCtrl-C\u003c/code\u003e 停止生产者和消费者客户端。\u003c/li\u003e\n\u003cli\u003e使用 \u003ccode\u003eCtrl-C\u003c/code\u003e 停止 Kafka 代理。\u003c/li\u003e\n\u003cli\u003e最后，使用 \u003ccode\u003eCtrl-C\u003c/code\u003e 停止 ZooKeeper 服务器。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e如果您还想删除本地 Kafka 环境的所有数据，包括您在此过程中创建的所有事件，请执行以下命令：\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ \u003cspan class=\"built_in\"\u003erm\u003c/span\u003e -rf /tmp/kafka-logs /tmp/zookeeper\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"Kafka-Java-客户端使用入门\"\u003e\u003ca href=\"#Kafka-Java-客户端使用入门\" class=\"headerlink\" title=\"Kafka Java 客户端使用入门\"\u003e\u003c/a\u003eKafka Java 客户端使用入门\u003c/h2\u003e\u003ch3 id=\"引入-maven-依赖\"\u003e\u003ca href=\"#引入-maven-依赖\" class=\"headerlink\" title=\"引入 maven 依赖\"\u003e\u003c/a\u003e引入 maven 依赖\u003c/h3\u003e\u003cp\u003eStream API 的 maven 依赖：\u003c/p\u003e\n\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003edependency\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003egroupId\u003c/span\u003e\u0026gt;\u003c/span\u003eorg.apache.kafka\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003egroupId\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eartifactId\u003c/span\u003e\u0026gt;\u003c/span\u003ekafka-streams\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eartifactId\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eversion\u003c/span\u003e\u0026gt;\u003c/span\u003e1.1.0\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eversion\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003edependency\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e其他 API 的 maven 依赖：\u003c/p\u003e\n\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003edependency\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003egroupId\u003c/span\u003e\u0026gt;\u003c/span\u003eorg.apache.kafka\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003egroupId\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eartifactId\u003c/span\u003e\u0026gt;\u003c/span\u003ekafka-clients\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eartifactId\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eversion\u003c/span\u003e\u0026gt;\u003c/span\u003e1.1.0\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eversion\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003edependency\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"Kafka-核心-API\"\u003e\u003ca href=\"#Kafka-核心-API\" class=\"headerlink\" title=\"Kafka 核心 API\"\u003e\u003c/a\u003eKafka 核心 API\u003c/h3\u003e\u003cp\u003eKafka 有 5 个核心 API\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kafka.apache.org/documentation.html#producerapi\"\u003eProducer API\u003c/a\u003e - 允许一个应用程序发布一串流式数据到一个或者多个 Kafka Topic。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kafka.apache.org/documentation.html#consumerapi\"\u003eConsumer API\u003c/a\u003e - 允许一个应用程序订阅一个或多个 Kafka Topic，并且对发布给他们的流式数据进行处理。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kafka.apache.org/documentation/streams\"\u003eStreams API\u003c/a\u003e - 允许一个应用程序作为一个流处理器，消费一个或者多个 Kafka Topic 产生的输入流，然后生产一个输出流到一个或多个 Kafka Topic 中去，在输入输出流中进行有效的转换。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kafka.apache.org/documentation.html#connect\"\u003eConnector API\u003c/a\u003e - 允许构建并运行可重用的生产者或者消费者，将 Kafka Topic 连接到已存在的应用程序或数据库。例如，连接到一个关系型数据库，捕捉表的所有变更内容。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kafka.apache.org/documentation/#adminapi\"\u003eAdmin API\u003c/a\u003e - 支持管理和检查 Topic，Broker，ACL 和其他 Kafka 对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"发送消息\"\u003e\u003ca href=\"#发送消息\" class=\"headerlink\" title=\"发送消息\"\u003e\u003c/a\u003e发送消息\u003c/h3\u003e\u003ch4 id=\"发送并忽略返回\"\u003e\u003ca href=\"#发送并忽略返回\" class=\"headerlink\" title=\"发送并忽略返回\"\u003e\u003c/a\u003e发送并忽略返回\u003c/h4\u003e\u003cp\u003e代码如下，直接通过 \u003ccode\u003esend\u003c/code\u003e 方法来发送\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eProducerRecord\u0026lt;String, String\u0026gt; record =\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProducerRecord\u003c/span\u003e\u0026lt;\u0026gt;(\u003cspan class=\"string\"\u003e\u0026#34;CustomerCountry\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Precision Products\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;France\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            producer.send(record);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (Exception e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            e.printStackTrace();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"同步发送\"\u003e\u003ca href=\"#同步发送\" class=\"headerlink\" title=\"同步发送\"\u003e\u003c/a\u003e同步发送\u003c/h4\u003e\u003cp\u003e代码如下，与“发送并忘记”的方式区别在于多了一个 \u003ccode\u003eget\u003c/code\u003e 方法，会一直阻塞等待 \u003ccode\u003eBroker\u003c/code\u003e 返回结果：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eProducerRecord\u0026lt;String, String\u0026gt; record =\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProducerRecord\u003c/span\u003e\u0026lt;\u0026gt;(\u003cspan class=\"string\"\u003e\u0026#34;CustomerCountry\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Precision Products\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;France\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            producer.send(record).get();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (Exception e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            e.printStackTrace();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"异步发送\"\u003e\u003ca href=\"#异步发送\" class=\"headerlink\" title=\"异步发送\"\u003e\u003c/a\u003e异步发送\u003c/h4\u003e\u003cp\u003e代码如下，异步方式相对于“发送并忽略返回”的方式的不同在于：在异步返回时可以执行一些操作，如记录错误或者成功日志。\u003c/p\u003e\n\u003cp\u003e首先，定义一个 callback\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eDemoProducerCallback\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eCallback\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eonCompletion\u003c/span\u003e\u003cspan class=\"params\"\u003e(RecordMetadata recordMetadata, Exception e)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e           \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (e != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e               e.printStackTrace();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e             }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e然后，使用这个 callback\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eProducerRecord\u0026lt;String, String\u0026gt; record =\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProducerRecord\u003c/span\u003e\u0026lt;\u0026gt;(\u003cspan class=\"string\"\u003e\u0026#34;CustomerCountry\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Biomedical Materials\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;USA\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eproducer.send(record, \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eDemoProducerCallback\u003c/span\u003e());\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"发送消息示例\"\u003e\u003ca href=\"#发送消息示例\" class=\"headerlink\" title=\"发送消息示例\"\u003e\u003c/a\u003e发送消息示例\u003c/h4\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e java.util.Properties;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e org.apache.kafka.clients.producer.KafkaProducer;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e org.apache.kafka.clients.producer.Producer;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e org.apache.kafka.clients.producer.ProducerConfig;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e org.apache.kafka.clients.producer.ProducerRecord;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * Kafka 生产者生产消息示例 生产者配置参考：https://kafka.apache.org/documentation/#producerconfigs\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProducerDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003eHOST\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;localhost:9092\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 1. 指定生产者的配置\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eProperties\u003c/span\u003e \u003cspan class=\"variable\"\u003eproperties\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProperties\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, HOST);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        properties.put(ProducerConfig.ACKS_CONFIG, \u003cspan class=\"string\"\u003e\u0026#34;all\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        properties.put(ProducerConfig.RETRIES_CONFIG, \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        properties.put(ProducerConfig.BATCH_SIZE_CONFIG, \u003cspan class=\"number\"\u003e16384\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        properties.put(ProducerConfig.LINGER_MS_CONFIG, \u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        properties.put(ProducerConfig.BUFFER_MEMORY_CONFIG, \u003cspan class=\"number\"\u003e33554432\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"string\"\u003e\u0026#34;org.apache.kafka.common.serialization.StringSerializer\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"string\"\u003e\u0026#34;org.apache.kafka.common.serialization.StringSerializer\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 2. 使用配置初始化 Kafka 生产者\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Producer\u0026lt;String, String\u0026gt; producer = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eKafkaProducer\u003c/span\u003e\u0026lt;\u0026gt;(properties);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 3. 使用 send 方法发送异步消息\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e100\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003emsg\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;Message \u0026#34;\u003c/span\u003e + i;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                producer.send(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProducerRecord\u003c/span\u003e\u0026lt;\u0026gt;(\u003cspan class=\"string\"\u003e\u0026#34;HelloWorld\u0026#34;\u003c/span\u003e, msg));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;Sent:\u0026#34;\u003c/span\u003e + msg);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (Exception e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            e.printStackTrace();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 4. 关闭生产者\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            producer.close();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"消费消息流程\"\u003e\u003ca href=\"#消费消息流程\" class=\"headerlink\" title=\"消费消息流程\"\u003e\u003c/a\u003e消费消息流程\u003c/h3\u003e\u003ch4 id=\"消费流程\"\u003e\u003ca href=\"#消费流程\" class=\"headerlink\" title=\"消费流程\"\u003e\u003c/a\u003e消费流程\u003c/h4\u003e\u003cp\u003e具体步骤如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e创建消费者。\u003c/li\u003e\n\u003cli\u003e订阅主题。除了订阅主题方式外还有使用指定分组的模式，但是常用方式都是订阅主题方式\u003c/li\u003e\n\u003cli\u003e轮询消息。通过 poll 方法轮询。\u003c/li\u003e\n\u003cli\u003e关闭消费者。在不用消费者之后，会执行 close 操作。close 操作会关闭 socket，并触发当前消费者群组的再均衡。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 1.构建KafkaCustomer\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eConsumer\u003c/span\u003e \u003cspan class=\"variable\"\u003econsumer\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e buildCustomer();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 2.设置主题\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003econsumer.subscribe(Arrays.asList(topic));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 3.接受消息\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ConsumerRecords\u0026lt;String, String\u0026gt; records = consumer.poll(\u003cspan class=\"number\"\u003e500\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;customer Message---\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (ConsumerRecord\u0026lt;String, String\u0026gt; record : records)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// print the offset,key and value for the consumer records.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.printf(\u003cspan class=\"string\"\u003e\u0026#34;offset = %d, key = %s, value = %s\\n\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    record.offset(), record.key(), record.value());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 4.关闭消息\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        consumer.close();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e创建消费者的代码如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e Consumer \u003cspan class=\"title function_\"\u003ebuildCustomer\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eProperties\u003c/span\u003e \u003cspan class=\"variable\"\u003eprops\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProperties\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// bootstrap.servers是Kafka集群的IP地址。多个时,使用逗号隔开\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;bootstrap.servers\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;localhost:9092\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 消费者群组\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;group.id\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;enable.auto.commit\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;auto.commit.interval.ms\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;1000\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;session.timeout.ms\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;30000\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;key.deserializer\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"string\"\u003e\u0026#34;org.apache.kafka.common.serialization.StringDeserializer\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;value.deserializer\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"string\"\u003e\u0026#34;org.apache.kafka.common.serialization.StringDeserializer\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    KafkaConsumer\u0026lt;String, String\u0026gt; consumer = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eKafkaConsumer\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u0026lt;String, String\u0026gt;(props);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e consumer;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"消费消息方式\"\u003e\u003ca href=\"#消费消息方式\" class=\"headerlink\" title=\"消费消息方式\"\u003e\u003c/a\u003e消费消息方式\u003c/h4\u003e\u003cp\u003e分为订阅主题和指定分组两种方式：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e消费者分组模式。通过订阅主题方式时，消费者必须加入到消费者群组中，即消费者必须有一个自己的分组；\u003c/li\u003e\n\u003cli\u003e独立消费者模式。这种模式就是消费者是独立的不属于任何消费者分组，自己指定消费那些 \u003ccode\u003ePartition\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e（1）订阅主题方式\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003econsumer.subscribe(Arrays.asList(topic));\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e（2）独立消费者模式\u003c/p\u003e\n\u003cp\u003e通过 consumer 的 \u003ccode\u003eassign(Collection\u0026lt;TopicPartition\u0026gt; partitions)\u003c/code\u003e 方法来为消费者指定分区。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003econsumeMessageForIndependentConsumer\u003c/span\u003e\u003cspan class=\"params\"\u003e(String topic)\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 1.构建KafkaCustomer\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eConsumer\u003c/span\u003e \u003cspan class=\"variable\"\u003econsumer\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e buildCustomer();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 2.指定分区\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 2.1获取可用分区\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    List\u0026lt;PartitionInfo\u0026gt; partitionInfoList = buildCustomer().partitionsFor(topic);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 2.2指定分区,这里是指定了所有分区,也可以指定个别的分区\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e(\u003cspan class=\"literal\"\u003enull\u003c/span\u003e != partitionInfoList){\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        List\u0026lt;TopicPartition\u0026gt; partitions = Lists.newArrayList();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e(PartitionInfo partitionInfo : partitionInfoList){\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            partitions.add(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eTopicPartition\u003c/span\u003e(partitionInfo.topic(),partitionInfo.partition()));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        consumer.assign(partitions);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 3.接受消息\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ConsumerRecords\u0026lt;String, String\u0026gt; records = consumer.poll(\u003cspan class=\"number\"\u003e500\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;consume Message---\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (ConsumerRecord\u0026lt;String, String\u0026gt; record : records) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// print the offset,key and value for the consumer records.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.printf(\u003cspan class=\"string\"\u003e\u0026#34;offset = %d, key = %s, value = %s\\n\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    record.offset(), record.key(), record.value());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 异步提交\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            consumer.commitAsync();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e官方\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://kafka.apache.org/\"\u003eKafka 官网\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/apache/kafka\"\u003eKafka Github\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kafka.apache.org/documentation/\"\u003eKafka 官方文档\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e书籍\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://item.jd.com/12270295.html\"\u003e《Kafka 权威指南》\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e教程\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/apachecn/kafka-doc-zh\"\u003eKafka 中文文档\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100029201\"\u003eKafka 核心技术与实战\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e文章\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://hackernoon.com/thorough-introduction-to-apache-kafka-6fbf2989bbc1\"\u003eThorough Introduction to Apache Kafka\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.heartthinkdo.com/?p=2006#233\"\u003eKafka(03) Kafka 介绍\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-06-03T01:55:35Z",
  "Author": "钝悟 ◾ Dunwu"
}