{
  "Source": "dunwu",
  "Title": "Spring 依赖查找",
  "Link": "https://dunwu.github.io/blog/pages/9a6f6b/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Spring-依赖查找\"\u003e\u003ca href=\"#Spring-依赖查找\" class=\"headerlink\" title=\"Spring 依赖查找\"\u003e\u003c/a\u003eSpring 依赖查找\u003c/h1\u003e\u003cp\u003e\u003cstrong\u003e依赖查找是主动或手动的依赖查找方式，通常需要依赖容器或标准 API 实现\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eIoC 依赖查找大致可以分为以下几类：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e根据 Bean 名称查找\u003c/li\u003e\n\u003cli\u003e根据 Bean 类型查找\u003c/li\u003e\n\u003cli\u003e根据 Bean 名称 + 类型查找\u003c/li\u003e\n\u003cli\u003e根据 Java 注解查找\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e此外，根据查找的 Bean 对象是单一或集合对象，是否需要延迟查找等特定常见，有相应不同的 API。\u003c/p\u003e\n\u003ch2 id=\"单一类型依赖查找\"\u003e\u003ca href=\"#单一类型依赖查找\" class=\"headerlink\" title=\"单一类型依赖查找\"\u003e\u003c/a\u003e单一类型依赖查找\u003c/h2\u003e\u003cp\u003e单一类型依赖查找接口- \u003ccode\u003eBeanFactory\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e根据 Bean 名称查找\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egetBean(String)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSpring 2.5 覆盖默认参数：\u003ccode\u003egetBean(String,Object...)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e根据 Bean 类型查找\u003cul\u003e\n\u003cli\u003eBean 实时查找\u003cul\u003e\n\u003cli\u003eSpring 3.0 \u003ccode\u003egetBean(Class)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSpring 4.1 覆盖默认参数：\u003ccode\u003egetBean(Class,Object...)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSpring 5.1 Bean 延迟查找\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egetBeanProvider(Class)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egetBeanProvider(ResolvableType)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e根据 Bean 名称 + 类型查找：\u003ccode\u003egetBean(String,Class)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"集合类型依赖查找\"\u003e\u003ca href=\"#集合类型依赖查找\" class=\"headerlink\" title=\"集合类型依赖查找\"\u003e\u003c/a\u003e集合类型依赖查找\u003c/h2\u003e\u003cp\u003e集合类型依赖查找接口- \u003ccode\u003eListableBeanFactory\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e根据 Bean 类型查找\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e获取同类型 Bean 名称列表\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egetBeanNamesForType(Class)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSpring 4.2 \u003ccode\u003egetBeanNamesForType(ResolvableType)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e获取同类型 Bean 实例列表\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egetBeansOfType(Class)\u003c/code\u003e 以及重载方法\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e通过注解类型查找\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eSpring 3.0 获取标注类型 Bean 名称列表\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egetBeanNamesForAnnotation(Class\u0026lt;? extends Annotation\u0026gt;)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eSpring 3.0 获取标注类型 Bean 实例列表\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egetBeansWithAnnotation(Class\u0026lt;? extends Annotation\u0026gt;)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eSpring 3.0 获取指定名称+ 标注类型 Bean 实例\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efindAnnotationOnBean(String,Class\u0026lt;? extends Annotation\u0026gt;)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"层次性依赖查找\"\u003e\u003ca href=\"#层次性依赖查找\" class=\"headerlink\" title=\"层次性依赖查找\"\u003e\u003c/a\u003e层次性依赖查找\u003c/h2\u003e\u003cp\u003e层次性依赖查找接口- \u003ccode\u003eHierarchicalBeanFactory\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e双亲 \u003ccode\u003eBeanFactory\u003c/code\u003e：\u003ccode\u003egetParentBeanFactory()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e层次性查找\u003cul\u003e\n\u003cli\u003e根据 Bean 名称查找\u003cul\u003e\n\u003cli\u003e基于 \u003ccode\u003econtainsLocalBean\u003c/code\u003e 方法实现\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e根据 Bean 类型查找实例列表\u003cul\u003e\n\u003cli\u003e单一类型：\u003ccode\u003eBeanFactoryUtils#beanOfType\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e集合类型：\u003ccode\u003eBeanFactoryUtils#beansOfTypeIncludingAncestors\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e根据 Java 注解查找名称列表\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eBeanFactoryUtils#beanNamesForTypeIncludingAncestors\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"延迟依赖查找\"\u003e\u003ca href=\"#延迟依赖查找\" class=\"headerlink\" title=\"延迟依赖查找\"\u003e\u003c/a\u003e延迟依赖查找\u003c/h2\u003e\u003cp\u003eBean 延迟依赖查找接口\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.beans.factory.ObjectFactory\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.beans.factory.ObjectProvider\u003c/code\u003e（Spring 5 对 Java 8 特性扩展）\u003c/li\u003e\n\u003cli\u003e函数式接口\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egetIfAvailable(Supplier)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eifAvailable(Consumer)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eStream 扩展- stream()\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"安全依赖查找\"\u003e\u003ca href=\"#安全依赖查找\" class=\"headerlink\" title=\"安全依赖查找\"\u003e\u003c/a\u003e安全依赖查找\u003c/h2\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e依赖查找类型\u003c/th\u003e\n\u003cth\u003e代表实现\u003c/th\u003e\n\u003cth\u003e是否安全\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e单一类型查找\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eBeanFactory#getBean\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e否\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eObjectFactory#getObject\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e否\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eObjectProvider#getIfAvailable\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e是\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e集合类型查找\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eListableBeanFactory#getBeansOfType\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e是\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eObjectProvider#stream\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e是\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e注意：层次性依赖查找的安全性取决于其扩展的单一或集合类型的 \u003ccode\u003eBeanFactory\u003c/code\u003e 接口\u003c/p\u003e\n\u003ch2 id=\"内建可查找的依赖\"\u003e\u003ca href=\"#内建可查找的依赖\" class=\"headerlink\" title=\"内建可查找的依赖\"\u003e\u003c/a\u003e内建可查找的依赖\u003c/h2\u003e\u003cp\u003e\u003ccode\u003eAbstractApplicationContext\u003c/code\u003e 内建可查找的依赖\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eBean\u003c/th\u003e\n\u003cth\u003e名称 Bean\u003c/th\u003e\n\u003cth\u003e实例使用场景\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003eenvironment\u003c/td\u003e\n\u003ctd\u003eEnvironment 对象\u003c/td\u003e\n\u003ctd\u003e外部化配置以及 Profiles\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003esystemProperties\u003c/td\u003e\n\u003ctd\u003ejava.util.Properties 对象\u003c/td\u003e\n\u003ctd\u003eJava 系统属性\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003esystemEnvironment\u003c/td\u003e\n\u003ctd\u003ejava.util.Map 对象\u003c/td\u003e\n\u003ctd\u003e操作系统环境变量\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003emessageSource\u003c/td\u003e\n\u003ctd\u003eMessageSource 对象\u003c/td\u003e\n\u003ctd\u003e国际化文案\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003elifecycleProcessor\u003c/td\u003e\n\u003ctd\u003eLifecycleProcessor 对象\u003c/td\u003e\n\u003ctd\u003eLifecycle Bean 处理器\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eapplicationEventMulticaster\u003c/td\u003e\n\u003ctd\u003eApplicationEventMulticaster 对象\u003c/td\u003e\n\u003ctd\u003eSpring 事件广播器\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e注解驱动 Spring 应用上下文内建可查找的依赖（部分）\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eBean 名称\u003c/th\u003e\n\u003cth\u003eBean 实例\u003c/th\u003e\n\u003cth\u003e使用场景\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003eorg.springframework.context.annotation.internalConfigurationAnnotationProcessor\u003c/td\u003e\n\u003ctd\u003eConfigurationClassPostProcessor 对象\u003c/td\u003e\n\u003ctd\u003e处理 Spring 配置类\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eorg.springframework.context.annotation.internalAutowiredAnnotationProcessor\u003c/td\u003e\n\u003ctd\u003eAutowiredAnnotationBeanPostProcessor 对象\u003c/td\u003e\n\u003ctd\u003e处理@Autowired 以及@Value 注解\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eorg.springframework.context.annotation.internalCommonAnnotationProcessor\u003c/td\u003e\n\u003ctd\u003eCommonAnnotationBeanPostProcessor 对象\u003c/td\u003e\n\u003ctd\u003e（条件激活）处理 JSR-250 注解，如@PostConstruct 等\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eorg.springframework.context.event.internalEventListenerProcessor\u003c/td\u003e\n\u003ctd\u003eEventListenerMethodProcessor 对象\u003c/td\u003e\n\u003ctd\u003e处理标注@EventListener 的 Spring 事件监听方法\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eorg.springframework.context.event.internalEventListenerFactory\u003c/td\u003e\n\u003ctd\u003eDefaultEventListenerFactory 对象\u003c/td\u003e\n\u003ctd\u003e@EventListener 事件监听方法适配为 ApplicationListener\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eorg.springframework.context.annotation.internalPersistenceAnnotationProcessor\u003c/td\u003e\n\u003ctd\u003ePersistenceAnnotationBeanPostProcessor 对象\u003c/td\u003e\n\u003ctd\u003e（条件激活）处理 JPA 注解场景\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"依赖查找中的经典异常\"\u003e\u003ca href=\"#依赖查找中的经典异常\" class=\"headerlink\" title=\"依赖查找中的经典异常\"\u003e\u003c/a\u003e依赖查找中的经典异常\u003c/h2\u003e\u003cp\u003e\u003ccode\u003eBeansException\u003c/code\u003e 子类型\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e异常类型\u003c/th\u003e\n\u003cth\u003e触发条件（举例）\u003c/th\u003e\n\u003cth\u003e场景举例\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eNoSuchBeanDefinitionException\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e当查找 Bean 不存在于 IoC 容器时\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eBeanFactory#getBeanObjectFactory#getObject\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eNoUniqueBeanDefinitionException\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e类型依赖查找时，IoC 容器存在多个 Bean 实例\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eBeanFactory#getBean(Class)\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eBeanInstantiationException\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e当 Bean 所对应的类型非具体类时\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eBeanFactory#getBean\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eBeanCreationException\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e当 Bean 初始化过程中\u003c/td\u003e\n\u003ctd\u003eBean 初始化方法执行异常时\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eBeanDefinitionStoreException\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e当 \u003ccode\u003eBeanDefinition\u003c/code\u003e 配置元信息非法时\u003c/td\u003e\n\u003ctd\u003eXML 配置资源无法打开时\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans\"\u003eSpring 官方文档之 Core Technologies\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/course/intro/265\"\u003e《小马哥讲 Spring 核心编程思想》\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-08-30T08:06:10Z",
  "Author": "钝悟 ◾ Dunwu"
}