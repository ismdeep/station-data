{
  "Source": "dunwu",
  "Title": "Spring 应用上下文生命周期",
  "Link": "https://dunwu.github.io/blog/pages/ad472e/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Spring-应用上下文生命周期\"\u003e\u003ca href=\"#Spring-应用上下文生命周期\" class=\"headerlink\" title=\"Spring 应用上下文生命周期\"\u003e\u003c/a\u003eSpring 应用上下文生命周期\u003c/h1\u003e\u003ch2 id=\"Spring-应用上下文启动准备阶段\"\u003e\u003ca href=\"#Spring-应用上下文启动准备阶段\" class=\"headerlink\" title=\"Spring 应用上下文启动准备阶段\"\u003e\u003c/a\u003eSpring 应用上下文启动准备阶段\u003c/h2\u003e\u003cp\u003eAbstractApplicationContext#prepareRefresh() 方法\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e启动时间 - startupDate\u003c/li\u003e\n\u003cli\u003e状态标识 - closed(false)、active(true)\u003c/li\u003e\n\u003cli\u003e初始化 PropertySources - initPropertySources()\u003c/li\u003e\n\u003cli\u003e检验 Environment 中必须属性\u003c/li\u003e\n\u003cli\u003e初始化事件监听器集合\u003c/li\u003e\n\u003cli\u003e初始化早期 Spring 事件集合\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"BeanFactory-创建阶段\"\u003e\u003ca href=\"#BeanFactory-创建阶段\" class=\"headerlink\" title=\"BeanFactory 创建阶段\"\u003e\u003c/a\u003eBeanFactory 创建阶段\u003c/h2\u003e\u003cp\u003eAbstractApplicationContext#obtainFreshBeanFactory() 方法\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e刷新 Spring 应用上下文底层 BeanFactory - refreshBeanFactory()\u003cul\u003e\n\u003cli\u003e销毁或关闭 BeanFactory，如果已存在的话\u003c/li\u003e\n\u003cli\u003e创建 BeanFactory - createBeanFactory()\u003c/li\u003e\n\u003cli\u003e设置 BeanFactory Id\u003c/li\u003e\n\u003cli\u003e设置“是否允许 BeanDefinition 重复定义” - customizeBeanFactory(DefaultListableBeanFactory)\u003c/li\u003e\n\u003cli\u003e设置“是否允许循环引用（依赖）” - customizeBeanFactory(DefaultListableBeanFactory)\u003c/li\u003e\n\u003cli\u003e加载 BeanDefinition - loadBeanDefinitions(DefaultListableBeanFactory) 方法\u003c/li\u003e\n\u003cli\u003e关联新建 BeanFactory 到 Spring 应用上下文\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e返回 Spring 应用上下文底层 BeanFactory - getBeanFactory()\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"BeanFactory-准备阶段\"\u003e\u003ca href=\"#BeanFactory-准备阶段\" class=\"headerlink\" title=\"BeanFactory 准备阶段\"\u003e\u003c/a\u003eBeanFactory 准备阶段\u003c/h2\u003e\u003cp\u003eAbstractApplicationContext#prepareBeanFactory(ConfigurableListableBeanFactory) 方法\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e关联 ClassLoader\u003c/li\u003e\n\u003cli\u003e设置 Bean 表达式处理器\u003c/li\u003e\n\u003cli\u003e添加 PropertyEditorRegistrar 实现 - ResourceEditorRegistrar\u003c/li\u003e\n\u003cli\u003e添加 Aware 回调接口 BeanPostProcessor 实现 - ApplicationContextAwareProcessor\u003c/li\u003e\n\u003cli\u003e忽略 Aware 回调接口作为依赖注入接口\u003c/li\u003e\n\u003cli\u003e注册 ResolvableDependency 对象 - BeanFactory、ResourceLoader、ApplicationEventPublisher 以及 ApplicationContext\u003c/li\u003e\n\u003cli\u003e注册 ApplicationListenerDetector 对象\u003c/li\u003e\n\u003cli\u003e注册 LoadTimeWeaverAwareProcessor 对象\u003c/li\u003e\n\u003cli\u003e注册单例对象 - Environment、Java System Properties 以及 OS 环境变量\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"BeanFactory-后置处理阶段\"\u003e\u003ca href=\"#BeanFactory-后置处理阶段\" class=\"headerlink\" title=\"BeanFactory 后置处理阶段\"\u003e\u003c/a\u003eBeanFactory 后置处理阶段\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003eAbstractApplicationContext#postProcessBeanFactory(ConfigurableListableBeanFactory) 方法\u003cul\u003e\n\u003cli\u003e由子类覆盖该方法\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eAbstractApplicationContext#invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory 方法\u003cul\u003e\n\u003cli\u003e调用 BeanFactoryPostProcessor 或 BeanDefinitionRegistry 后置处理方法\u003c/li\u003e\n\u003cli\u003e注册 LoadTimeWeaverAwareProcessor 对象\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"BeanFactory-注册-BeanPostProcessor-阶段\"\u003e\u003ca href=\"#BeanFactory-注册-BeanPostProcessor-阶段\" class=\"headerlink\" title=\"BeanFactory 注册 BeanPostProcessor 阶段\"\u003e\u003c/a\u003eBeanFactory 注册 BeanPostProcessor 阶段\u003c/h2\u003e\u003cp\u003eAbstractApplicationContext#registerBeanPostProcessors(ConfigurableListableBeanFactory) 方法\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e注册 PriorityOrdered 类型的 BeanPostProcessor Beans\u003c/li\u003e\n\u003cli\u003e注册 Ordered 类型的 BeanPostProcessor Beans\u003c/li\u003e\n\u003cli\u003e注册普通 BeanPostProcessor Beans\u003c/li\u003e\n\u003cli\u003e注册 MergedBeanDefinitionPostProcessor Beans\u003c/li\u003e\n\u003cli\u003e注册 ApplicationListenerDetector 对象\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"初始化內建-Bean：MessageSource\"\u003e\u003ca href=\"#初始化內建-Bean：MessageSource\" class=\"headerlink\" title=\"初始化內建 Bean：MessageSource\"\u003e\u003c/a\u003e初始化內建 Bean：MessageSource\u003c/h2\u003e\u003cp\u003eAbstractApplicationContext#initMessageSource() 方法\u003c/p\u003e\n\u003ch2 id=\"初始化內建-Bean：Spring-事件广播器\"\u003e\u003ca href=\"#初始化內建-Bean：Spring-事件广播器\" class=\"headerlink\" title=\"初始化內建 Bean：Spring 事件广播器\"\u003e\u003c/a\u003e初始化內建 Bean：Spring 事件广播器\u003c/h2\u003e\u003cp\u003eAbstractApplicationContext#initApplicationEventMulticaster() 方法\u003c/p\u003e\n\u003ch2 id=\"Spring-应用上下文刷新阶段\"\u003e\u003ca href=\"#Spring-应用上下文刷新阶段\" class=\"headerlink\" title=\"Spring 应用上下文刷新阶段\"\u003e\u003c/a\u003eSpring 应用上下文刷新阶段\u003c/h2\u003e\u003cp\u003eAbstractApplicationContext#onRefresh() 方法\u003c/p\u003e\n\u003cp\u003e子类覆盖该方法\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eorg.springframework.web.context.support.AbstractRefreshableWebApplicationContext#onRefresh()\u003c/li\u003e\n\u003cli\u003eorg.springframework.web.context.support.GenericWebApplicationContext#onRefresh()\u003c/li\u003e\n\u003cli\u003eorg.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext#onRefresh()\u003c/li\u003e\n\u003cli\u003eorg.springframework.boot.web.servlet.context.ServletWebServerApplicationContext#onRefresh()\u003c/li\u003e\n\u003cli\u003eorg.springframework.web.context.support.StaticWebApplicationContext#onRefresh()\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-事件监听器注册阶段\"\u003e\u003ca href=\"#Spring-事件监听器注册阶段\" class=\"headerlink\" title=\"Spring 事件监听器注册阶段\"\u003e\u003c/a\u003eSpring 事件监听器注册阶段\u003c/h2\u003e\u003cp\u003eAbstractApplicationContext#registerListeners() 方法\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e添加当前应用上下文所关联的 ApplicationListener 对象（集合）\u003c/li\u003e\n\u003cli\u003e添加 BeanFactory 所注册 ApplicationListener Beans\u003c/li\u003e\n\u003cli\u003e广播早期 Spring 事件\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"BeanFactory-初始化完成阶段\"\u003e\u003ca href=\"#BeanFactory-初始化完成阶段\" class=\"headerlink\" title=\"BeanFactory 初始化完成阶段\"\u003e\u003c/a\u003eBeanFactory 初始化完成阶段\u003c/h2\u003e\u003cp\u003eAbstractApplicationContext#finishBeanFactoryInitialization(ConfigurableListableBeanFactory) 方法\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBeanFactory 关联 ConversionService Bean，如果存在\u003c/li\u003e\n\u003cli\u003e添加 StringValueResolver 对象\u003c/li\u003e\n\u003cli\u003e依赖查找 LoadTimeWeaverAware Bean\u003c/li\u003e\n\u003cli\u003eBeanFactory 临时 ClassLoader 置为 null\u003c/li\u003e\n\u003cli\u003eBeanFactory 冻结配置\u003c/li\u003e\n\u003cli\u003eBeanFactory 初始化非延迟单例 Beans\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-应用上下刷新完成阶段\"\u003e\u003ca href=\"#Spring-应用上下刷新完成阶段\" class=\"headerlink\" title=\"Spring 应用上下刷新完成阶段\"\u003e\u003c/a\u003eSpring 应用上下刷新完成阶段\u003c/h2\u003e\u003cp\u003eAbstractApplicationContext#finishRefresh() 方法\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e清除 ResourceLoader 缓存 - clearResourceCaches() @since 5.0\u003c/li\u003e\n\u003cli\u003e初始化 LifecycleProcessor 对象 - initLifecycleProcessor()\u003c/li\u003e\n\u003cli\u003e调用 LifecycleProcessor#onRefresh() 方法\u003c/li\u003e\n\u003cli\u003e发布 Spring 应用上下文已刷新事件 - ContextRefreshedEvent\u003c/li\u003e\n\u003cli\u003e向 MBeanServer 托管 Live Beans\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-应用上下文启动阶段\"\u003e\u003ca href=\"#Spring-应用上下文启动阶段\" class=\"headerlink\" title=\"Spring 应用上下文启动阶段\"\u003e\u003c/a\u003eSpring 应用上下文启动阶段\u003c/h2\u003e\u003cp\u003eAbstractApplicationContext#start() 方法\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e启动 LifecycleProcessor\u003cul\u003e\n\u003cli\u003e依赖查找 Lifecycle Beans\u003c/li\u003e\n\u003cli\u003e启动 Lifecycle Beans\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e发布 Spring 应用上下文已启动事件 - ContextStartedEvent\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-应用上下文停止阶段\"\u003e\u003ca href=\"#Spring-应用上下文停止阶段\" class=\"headerlink\" title=\"Spring 应用上下文停止阶段\"\u003e\u003c/a\u003eSpring 应用上下文停止阶段\u003c/h2\u003e\u003cp\u003eAbstractApplicationContext#stop() 方法\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e停止 LifecycleProcessor\u003cul\u003e\n\u003cli\u003e依赖查找 Lifecycle Beans\u003c/li\u003e\n\u003cli\u003e停止 Lifecycle Beans\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e发布 Spring 应用上下文已停止事件 - ContextStoppedEvent\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-应用上下文关闭阶段\"\u003e\u003ca href=\"#Spring-应用上下文关闭阶段\" class=\"headerlink\" title=\"Spring 应用上下文关闭阶段\"\u003e\u003c/a\u003eSpring 应用上下文关闭阶段\u003c/h2\u003e\u003cp\u003eAbstractApplicationContext#close() 方法\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e状态标识：active(false)、closed(true)\u003c/li\u003e\n\u003cli\u003eLive Beans JMX 撤销托管\u003cul\u003e\n\u003cli\u003eLiveBeansView.unregisterApplicationContext(ConfigurableApplicationContext)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e发布 Spring 应用上下文已关闭事件 - ContextClosedEvent\u003c/li\u003e\n\u003cli\u003e关闭 LifecycleProcessor\u003cul\u003e\n\u003cli\u003e依赖查找 Lifecycle Beans\u003c/li\u003e\n\u003cli\u003e停止 Lifecycle Beans\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e销毁 Spring Beans\u003c/li\u003e\n\u003cli\u003e关闭 BeanFactory\u003c/li\u003e\n\u003cli\u003e回调 onClose()\u003c/li\u003e\n\u003cli\u003e注册 Shutdown Hook 线程（如果曾注册）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"问题\"\u003e\u003ca href=\"#问题\" class=\"headerlink\" title=\"问题\"\u003e\u003c/a\u003e问题\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eSpring 应用上下文生命周期有哪些阶段\u003c/strong\u003e？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e刷新阶段 - ConfigurableApplicationContext#refresh()\u003c/li\u003e\n\u003cli\u003e启动阶段 - ConfigurableApplicationContext#start()\u003c/li\u003e\n\u003cli\u003e停止阶段 - ConfigurableApplicationContext#stop()\u003c/li\u003e\n\u003cli\u003e关闭阶段 - ConfigurableApplicationContext#close()\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans\"\u003eSpring 官方文档之 Core Technologies\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/course/intro/265\"\u003e《小马哥讲 Spring 核心编程思想》\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-12-23T01:58:09Z",
  "Author": "钝悟 ◾ Dunwu"
}