{
  "Source": "dunwu",
  "Title": "数据库系统概论",
  "Link": "https://dunwu.github.io/blog/pages/e1121b/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"数据库系统概论\"\u003e\u003ca href=\"#数据库系统概论\" class=\"headerlink\" title=\"数据库系统概论\"\u003e\u003c/a\u003e数据库系统概论\u003c/h1\u003e\u003ch2 id=\"数据库核心术语\"\u003e\u003ca href=\"#数据库核心术语\" class=\"headerlink\" title=\"数据库核心术语\"\u003e\u003c/a\u003e数据库核心术语\u003c/h2\u003e\u003ch3 id=\"数据\"\u003e\u003ca href=\"#数据\" class=\"headerlink\" title=\"数据\"\u003e\u003c/a\u003e数据\u003c/h3\u003e\u003cp\u003e数据\u003cstrong\u003e是数据库中存储的基本对象\u003c/strong\u003e，可以对数据做如下定义：\u003cstrong\u003e描述事物的符号称为数据\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e描述事物的符号多种多样，所以数据有多种表现形式。\u003c/p\u003e\n\u003cp\u003e数据的表现形式还不能完全地表达其内容，需要经过解释，数据和关于数据的解释是密不可分的，每一个数据都有它的意义，数据的解释指的是对数据含义的说明，\u003cstrong\u003e数据的含义称为数据的语义，数据与其语义是不可分的。\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id=\"数据库\"\u003e\u003ca href=\"#数据库\" class=\"headerlink\" title=\"数据库\"\u003e\u003c/a\u003e数据库\u003c/h3\u003e\u003cp\u003e数据库就是存放数据的仓库，只不过这个仓库是在计算机存储设备上，而且数据是按一定格式存放的。\u003c/p\u003e\n\u003cp\u003e严格的来讲，数据库的含义如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e长期存储在计算机内，有组织的，可共享大量数据的集合\u003c/li\u003e\n\u003cli\u003e里面的数据按照一定的数据模型组织，描述和储存\u003c/li\u003e\n\u003cli\u003e具有较小的冗余度，较高的数据独立性和易扩展性，并可为各种用户共享\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e数据库特点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e永久存储\u003c/li\u003e\n\u003cli\u003e有组织\u003c/li\u003e\n\u003cli\u003e可共享\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"数据库管理系统\"\u003e\u003ca href=\"#数据库管理系统\" class=\"headerlink\" title=\"数据库管理系统\"\u003e\u003c/a\u003e数据库管理系统\u003c/h3\u003e\u003cp\u003e数据库管理系统（Database Management System, DBMS）是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库。它对数据库进行统一的管理和控制，以保证数据库的安全性和完整性。 用户通过 DBMS 访问数据库中的数据，数据库管理员也通过 DBMS 进行数据库的维护工作。\u003c/p\u003e\n\u003cp\u003e数据库管理系统的功能主要包括以下方面：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e数据定义功能\u003c/li\u003e\n\u003cli\u003e数据组织，存储和管理\u003c/li\u003e\n\u003cli\u003e数据操纵功能\u003c/li\u003e\n\u003cli\u003e数据库的事务管理和运行管理\u003c/li\u003e\n\u003cli\u003e数据库的建立和维护功能\u003cul\u003e\n\u003cli\u003e数据库初始数据输入，转换功能\u003c/li\u003e\n\u003cli\u003e数据库的转储，恢复功能\u003c/li\u003e\n\u003cli\u003e数据库的重组织功能\u003c/li\u003e\n\u003cli\u003e数据库的性能监视，分析功能\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e其他功能\u003cul\u003e\n\u003cli\u003e数据库管理系统与网络中其他软件系统的通信功能\u003c/li\u003e\n\u003cli\u003e一个数据库管理系统与另一个数据库管理系统或文件系统的数据转换功能\u003c/li\u003e\n\u003cli\u003e异构数据库之间的互访和互操作功能等\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"数据库系统\"\u003e\u003ca href=\"#数据库系统\" class=\"headerlink\" title=\"数据库系统\"\u003e\u003c/a\u003e数据库系统\u003c/h3\u003e\u003cp\u003e数据库系统是由\u003cstrong\u003e数据库，数据库管理系统，应用程序和数据库管理员组成的存储，管理，处理和维护数据的系统\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"OLTP-和-OLAP\"\u003e\u003ca href=\"#OLTP-和-OLAP\" class=\"headerlink\" title=\"OLTP 和 OLAP\"\u003e\u003c/a\u003eOLTP 和 OLAP\u003c/h3\u003e\u003cp\u003eOLTP 和 OLAP 的共性：\u003c/p\u003e\n\u003cp\u003eOLTP 和 OLAP 都是用于存储和处理大量数据的数据库管理系统。它们都需要高效可靠的 IT 基础设施才能平稳运行。可以同时使用它们来查询现有数据或存储新数据。两者都支持组织中数据驱动的决策。大多数公司同时使用 OLTP 和 OLAP 系统来满足其商业智能需求。\u003c/p\u003e\n\u003cp\u003eOLTP 和 OLAP 的区别：\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e“联机事务处理 (OLTP) ”系统的主要用途是处理数据库事务\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e“联机分析处理 (OLAP) ”系统的主要用途是分析聚合数据\u003c/strong\u003e。\u003c/p\u003e\n\u003ch2 id=\"数据模型\"\u003e\u003ca href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"\u003e\u003c/a\u003e数据模型\u003c/h2\u003e\u003cp\u003e数据模型是\u003cstrong\u003e对现实世界数据特征的抽象\u003c/strong\u003e，也就是说\u003cstrong\u003e数据模型是用来描述数据，组织数据和对数据进行操作的\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e现有的数据库都是基于某种数据模型的，\u003cstrong\u003e数据模型是数据库系统的核心和基础\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e数据模型可以分为两类：第一类是概念模型，第二类是逻辑模型和物理模型。\u003c/p\u003e\n\u003ch3 id=\"概念模型\"\u003e\u003ca href=\"#概念模型\" class=\"headerlink\" title=\"概念模型\"\u003e\u003c/a\u003e概念模型\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e概念模型\u003c/strong\u003e也称为信息模型，它是按照用户的观点来对数据和信息建模，主要用于数据库设计。\u003c/p\u003e\n\u003cp\u003e概念模型主要涉及以下一些概念：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e实体 - 客观存在并可相互区别的事务称为实体。\u003c/li\u003e\n\u003cli\u003e属性 - 实体具有的某一特性称为属性。\u003c/li\u003e\n\u003cli\u003e码 - 唯一标识实体的属性集称为码。\u003c/li\u003e\n\u003cli\u003e实体模型 - 用实体名及其属性名集合来抽象和刻画同类实体，称为实体模型。\u003c/li\u003e\n\u003cli\u003e实体集 - 同一类型实体的集合就是实体集。\u003c/li\u003e\n\u003cli\u003e联系\u003cul\u003e\n\u003cli\u003e实体之间的联系通常指的是不同实体集之间的联系。\u003c/li\u003e\n\u003cli\u003e实体之间的联系有一对一，一对多和多对多等多种类型。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e概念模型的一种表示方法是：\u003cstrong\u003e实体-联系方法\u003c/strong\u003e，该方法使用 ER 图来描述现实世界的概念模型，ER 方法也成为 ER 模型。\u003c/p\u003e\n\u003ch3 id=\"逻辑模型\"\u003e\u003ca href=\"#逻辑模型\" class=\"headerlink\" title=\"逻辑模型\"\u003e\u003c/a\u003e逻辑模型\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e逻辑模型\u003c/strong\u003e是计算机系统的观点对数据建模，主要用于数据库管理系统的实现。\u003c/p\u003e\n\u003cp\u003e逻辑模型通常由三部分组成：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e数据结构\u003c/strong\u003e - 数据结构描述数据库的组成对象以及对象之间的联系，也就是说，数据结构描述的内容有两类，一类是对象的类型、内容、性质有关的，一类是与数据之间联系有关的对象。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e数据操作\u003c/strong\u003e - 数据操作指的是对数据库中各种对象的实例允许执行的操作的集合，包括操作及有关的操作规则。主要有查询和更新两大操作。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e数据的完整性约束\u003c/strong\u003e - 数据的完整性约束条件是一组完整性规则。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e物理模型\u003c/strong\u003e是对数据最底层的抽象，他描述数据在系统内部的表示和存储方式，是面向计算机系统的。\u003c/p\u003e\n\u003ch2 id=\"函数依赖\"\u003e\u003ca href=\"#函数依赖\" class=\"headerlink\" title=\"函数依赖\"\u003e\u003c/a\u003e函数依赖\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003e定义\u003c/strong\u003e：设 \u003cstrong\u003eR(U)\u003c/strong\u003e 是\u003cstrong\u003e属性集合 U={ A1, A2, … , An }\u003c/strong\u003e 上的\u003cstrong\u003e一个关系模式\u003c/strong\u003e，X, Y 是 U 上的两个子集，若对 R(U) 的任意一个可能的关系 r ，r 中不可能有两个元组满足在 X 中的属性值相等而在 Y 中的属性值不等，则称 “ X 函数决定 Y ” 或 “ Y 函数依赖于 X ” ，记作 X-\u0026gt;Y 。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e白话\u003c/strong\u003e：在一个\u003cstrong\u003e关系 R\u003c/strong\u003e 中，属性（组） Y 的值是由属性（组） X 的值所决定的 。又可以说，在关系 R 中，\u003cstrong\u003e若两个元组的 X 属性值相同，那么这两个元组的 Y 属性值也相同\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e为什么叫做\u003cstrong\u003e函数\u003c/strong\u003e依赖？ 函数的定义：对于定义域中任意 x ，有且只有一个 y 与之对应。 属性之间的依赖：对于相同的 X 属性值，有且只有一个 Y 属性值与之对应。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e本质\u003c/strong\u003e：函数依赖的本质就是反应了 一个关系中\u003cstrong\u003e属性之间\u003c/strong\u003e的\u003cstrong\u003e约束关系\u003c/strong\u003e，或者\u003cstrong\u003e依赖关系\u003c/strong\u003e。函数依赖是一种数据依赖。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e举例\u003c/strong\u003e：\u003c/p\u003e\n\u003cfigure class=\"highlight dust\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"language-xml\"\u003eU = \u003c/span\u003e\u003cspan class=\"template-variable\"\u003e{ 学号，姓名，年龄，专业 }\u003c/span\u003e\u003cspan class=\"language-xml\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"language-xml\"\u003e\u003c/span\u003e\u003cspan class=\"template-variable\"\u003e{学号}\u003c/span\u003e\u003cspan class=\"language-xml\"\u003e → \u003c/span\u003e\u003cspan class=\"template-variable\"\u003e{ 姓名，年龄，专业 }\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e扩展阅读：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zhuanlan.zhihu.com/p/344087914\"\u003e白话详解数据库函数依赖和 Armstrong 公理及其引理\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"范式\"\u003e\u003ca href=\"#范式\" class=\"headerlink\" title=\"范式\"\u003e\u003c/a\u003e范式\u003c/h2\u003e\u003cp\u003e数据库规范化，又称“\u003cstrong\u003e范式\u003c/strong\u003e”，是数据库设计的指导理论。\u003cstrong\u003e范式的目标是：使数据库结构更合理，消除存储异常，使数据冗余尽量小，增进数据的一致性\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e根据约束程度从低到高有：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）等等。现代数据库设计，一般最多满足 3NF——范式过高，虽然具有对数据关系更好的约束性，但也导致数据关系表增加而令数据库 IO 更繁忙。因此，在实际应用中，本来可以交由数据库处理的关系约束，很多都是在数据库使用程序中完成的。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/202311030715177.png\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"第一范式-1NF\"\u003e\u003ca href=\"#第一范式-1NF\" class=\"headerlink\" title=\"第一范式 (1NF)\"\u003e\u003c/a\u003e第一范式 (1NF)\u003c/h3\u003e\u003cp\u003e1NF 要求属性具有原子性，不可再分解。\u003c/p\u003e\n\u003ch3 id=\"第二范式-2NF\"\u003e\u003ca href=\"#第二范式-2NF\" class=\"headerlink\" title=\"第二范式 (2NF)\"\u003e\u003c/a\u003e第二范式 (2NF)\u003c/h3\u003e\u003cp\u003e2NF 要求记录有唯一标识，即实体的唯一性，即\u003cstrong\u003e不存在部分依赖\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e假设有一张 student 表，结构如下：\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e-- 学生表\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"title\"\u003estudent\u003c/span\u003e\u003cspan class=\"params\"\u003e(学号、课程号、姓名、学分、成绩)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e举例来说，现有一张 student 表，具有学号、课程号、姓名、学分等字段。从中可以看出，表中包含了学生信息和课程信息。由于非主键字段必须依赖主键，这里学分依赖课程号，姓名依赖学号，所以不符合 2NF。\u003c/p\u003e\n\u003cp\u003e不符合 2NF 可能会存在的问题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e数据冗余\u003c/strong\u003e - 每条记录都含有相同信息。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e删除异常\u003c/strong\u003e - 删除所有学生成绩，就把课程信息全删除了。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e插入异常\u003c/strong\u003e - 学生未选课，无法记录进数据库。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e更新异常\u003c/strong\u003e - 调整课程学分，所有行都调整。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e根据 2NF 可以拆分如下：\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e-- 学生表\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"title\"\u003estudent\u003c/span\u003e\u003cspan class=\"params\"\u003e(学号、姓名)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e-- 课程表\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"title\"\u003ecourse\u003c/span\u003e\u003cspan class=\"params\"\u003e(课程号、学分)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e-- 学生课程关系表\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"title\"\u003estudent_course\u003c/span\u003e\u003cspan class=\"params\"\u003e(学号、课程号、成绩)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"第三范式-3NF\"\u003e\u003ca href=\"#第三范式-3NF\" class=\"headerlink\" title=\"第三范式 (3NF)\"\u003e\u003c/a\u003e第三范式 (3NF)\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e如果一个关系属于第二范式\u003c/strong\u003e，并且在\u003cstrong\u003e两个(或多个)非主键属性之间不存在函数依赖\u003c/strong\u003e（非主键属性之间的函数依赖也称为传递依赖），那么这个关系属于第三范式。\u003c/p\u003e\n\u003cp\u003e3NF 是对字段的\u003cstrong\u003e冗余性\u003c/strong\u003e，要求任何字段不能由其他字段派生出来，它要求字段没有冗余，即\u003cstrong\u003e不存在传递依赖\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e假设有一张 student 表，结构如下：\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e-- 学生表\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"title\"\u003estudent\u003c/span\u003e\u003cspan class=\"params\"\u003e(学号、姓名、年龄、班级号、班主任)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上表属于第二范式，因为主键由单个属性组成（学号）。\u003c/p\u003e\n\u003cp\u003e因为存在\u003cstrong\u003e依赖传递\u003c/strong\u003e：(学号) → (学生)→(所在班级) → (班主任) 。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e可能会存在问题：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e数据冗余 - 有重复值；\u003c/li\u003e\n\u003cli\u003e更新异常 - 有重复的冗余信息，修改时需要同时修改多条记录，否则会出现\u003cstrong\u003e数据不一致的情况\u003c/strong\u003e 。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e可以基于 3NF 拆解：\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"title\"\u003estudent\u003c/span\u003e\u003cspan class=\"params\"\u003e(学号、姓名、年龄、所在班级号)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"title\"\u003eclass\u003c/span\u003e\u003cspan class=\"params\"\u003e(班级号、班主任)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"反范式\"\u003e\u003ca href=\"#反范式\" class=\"headerlink\" title=\"反范式\"\u003e\u003c/a\u003e反范式\u003c/h3\u003e\u003cp\u003e前文已提及，\u003cstrong\u003e范式的目标是：使数据库结构更合理，消除存储异常，使数据冗余尽量小，增进数据的一致性\u003c/strong\u003e。反范式，顾名思义，与范式正好相反。\u003c/p\u003e\n\u003cp\u003e是不是范式越严格越好呢（也就是意味着极力避免冗余，甚至消除冗余）？这也不是一定的，范式越高意味着表的划分更细，一个数据库中需要的表也就越多，用户不得不将原本相关联的数据分摊到多个表中。当用户同时需要这些数据时只能通过关联表的形式将数据重新合并在一起。同时把多个表联接在一起的花费是巨大的，尤其是当需要连接的两张或者多张表数据非常庞大的时候，表连接操作几乎是一个噩梦，这严重地降低了系统运行性能。因此，\u003cstrong\u003e有时为了提高查询效率，有必要适当的冗余数据，以达到空间换时间的目的——这就是“反范式”\u003c/strong\u003e。\u003c/p\u003e\n\u003ch2 id=\"ER-图\"\u003e\u003ca href=\"#ER-图\" class=\"headerlink\" title=\"ER 图\"\u003e\u003c/a\u003eER 图\u003c/h2\u003e\u003cp\u003eE-R 图又称实体关系图，是一种提供了实体，属性和联系的方法，用来描述现实世界的概念模型。通俗点讲就是，当我们理解了实际问题的需求之后，需要用一种方法来表示这种需求，概念模型就是用来描述这种需求。\u003c/p\u003e\n\u003cp\u003eER 图中的要素：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e实体\u003c/strong\u003e - \u003cstrong\u003e用矩形表示\u003c/strong\u003e。实际问题中客观存在的并且可以相互区别的事物称为实体。实体是现实世界中的对象，可以具体到人，事，物。可以是学生，教师，图书馆的书籍。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e属性\u003c/strong\u003e - \u003cstrong\u003e用椭圆形表示\u003c/strong\u003e。实体所具有的某一个特性称为属性，在 E-R 图中属性用来描述实体。比如：可以用“姓名”“姓名”“出生日期”来描述人。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e主键\u003c/strong\u003e - \u003cstrong\u003e在属性下方标记下划线\u003c/strong\u003e。在描述实体集的所有属性中，可以唯一标识每个实体的属性称为键。键也是属于实体的属性，作为键的属性取值必须唯一且不能“空置”。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e联系\u003c/strong\u003e - \u003cstrong\u003e用菱形表示\u003c/strong\u003e。世界上任何事物都不是孤立存在的，事物内部和事物之间都有联系的，实体之间的联系通常有 3 种类型：一对一联系，一对多联系，多对多联系。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/202311030715877.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e绘制 ER 图常用软件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.draw.io/\"\u003edrawio 官网\u003c/a\u003e - 开源的绘图工具，特点是简洁、清晰，并且同时支持线上线下绘图。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://products.office.com/zh-cn/visio/flowchart-software\"\u003eVisio\u003c/a\u003e - Office 的绘图工具，特点是简单、清晰。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.edrawsoft.cn/\"\u003e亿图\u003c/a\u003e - 国内开发的、收费的绘图工具。图形模板、素材非常全面，样式也很精美，可以导出为 word、pdf、图片。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://staruml.io/\"\u003eStarUML\u003c/a\u003e - 样式精美，功能全面的 UML 工具。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://astah.net/\"\u003eAstah 官网\u003c/a\u003e - 样式不错，功能全面的绘图工具。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://argouml.en.softonic.com/?ex=CAT-759.2\"\u003eArgoUML 官网\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.processon.com/\"\u003eProcessOn 官网\u003c/a\u003e - 在线绘图工具，特点是简洁、清晰。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e扩展阅读：\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.zhihu.com/tardis/zm/art/270299029?source_id=1003\"\u003eER 图（实体关系图）怎么画？\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/26317662/\"\u003e《数据库系统概论（第 5 版）》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://segmentfault.com/a/1190000013695030\"\u003e数据库逻辑设计之三大范式通俗理解，一看就懂，书上说的太晦涩\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.zhihu.com/tardis/zm/art/270299029?source_id=1003\"\u003eER 图（实体关系图）怎么画？\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2023-11-01T01:39:59Z",
  "Author": "钝悟 ◾ Dunwu"
}