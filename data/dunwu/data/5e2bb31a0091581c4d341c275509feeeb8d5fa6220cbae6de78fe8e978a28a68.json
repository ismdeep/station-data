{
  "Source": "dunwu",
  "Title": "JavaWeb 之 Filter 和 Listener",
  "Link": "https://dunwu.github.io/blog/pages/82df5f/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"JavaWeb-之-Filter-和-Listener\"\u003e\u003ca href=\"#JavaWeb-之-Filter-和-Listener\" class=\"headerlink\" title=\"JavaWeb 之 Filter 和 Listener\"\u003e\u003c/a\u003eJavaWeb 之 Filter 和 Listener\u003c/h1\u003e\u003cp\u003e引入了 Servlet 规范后，你不需要关心 Socket 网络通信、不需要关心 HTTP 协议，也不需要关心你的业务类是如何被实例化和调用的，因为这些都被 Servlet 规范标准化了，你只要关心怎么实现的你的业务逻辑。这对于程序员来说是件好事，但也有不方便的一面。所谓规范就是说大家都要遵守，就会千篇一律，但是如果这个规范不能满足你的业务的个性化需求，就有问题了，因此设计一个规范或者一个中间件，要充分考虑到可扩展性。Servlet 规范提供了两种扩展机制：\u003cstrong\u003eFilter\u003c/strong\u003e和\u003cstrong\u003eListener\u003c/strong\u003e。\u003c/p\u003e\n\u003ch2 id=\"Filter\"\u003e\u003ca href=\"#Filter\" class=\"headerlink\" title=\"Filter\"\u003e\u003c/a\u003eFilter\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eFilter 是过滤器，这个接口允许你对请求和响应做一些统一的定制化处理\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eFilter 提供了过滤链（Filter Chain）的概念，一个过滤链包括多个 Filter。客户端请求 request 在抵达 Servlet 之前会经过过滤链的所有 Filter，服务器响应 response 从 Servlet 抵达客户端浏览器之前也会经过过滤链的所有 FIlter。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/1559054413341.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"过滤器方法\"\u003e\u003ca href=\"#过滤器方法\" class=\"headerlink\" title=\"过滤器方法\"\u003e\u003c/a\u003e过滤器方法\u003c/h3\u003e\u003cp\u003eFilter 接口有三个方法：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003einit\u003c/code\u003e：初始化 \u003ccode\u003eFilter\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edestroy\u003c/code\u003e：销毁 \u003ccode\u003eFilter\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edoFilter\u003c/code\u003e：将请求传给下个 \u003ccode\u003eFilter\u003c/code\u003e 或 \u003ccode\u003eServlet\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003einit\u003c/code\u003e 和 \u003ccode\u003edestroy\u003c/code\u003e 方法只会被调用一次；\u003ccode\u003edoFilter\u003c/code\u003e 每次有客户端请求都会被调用一次。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"title class_\"\u003eFilter\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t * web 程序启动时调用此方法, 用于初始化该 Filter\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e config\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t *            可以从该参数中获取初始化参数以及ServletContext信息等\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t * \u003cspan class=\"doctag\"\u003e@throws\u003c/span\u003e ServletException\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003einit\u003c/span\u003e\u003cspan class=\"params\"\u003e(FilterConfig config)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ServletException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t * 客户请求服务器时会经过\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t *\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e request\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t *            客户请求\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e response\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t *            服务器响应\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e chain\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t *            过滤链, 通过 chain.doFilter(request, response) 将请求传给下个 Filter 或\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t *            Servlet\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t * \u003cspan class=\"doctag\"\u003e@throws\u003c/span\u003e ServletException\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t * \u003cspan class=\"doctag\"\u003e@throws\u003c/span\u003e IOException\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003edoFilter\u003c/span\u003e\u003cspan class=\"params\"\u003e(ServletRequest request, ServletResponse response,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\t\t\tFilterChain chain)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ServletException, IOException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t * web 程序关闭时调用此方法, 用于销毁一些资源\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003edestroy\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"过滤器配置\"\u003e\u003ca href=\"#过滤器配置\" class=\"headerlink\" title=\"过滤器配置\"\u003e\u003c/a\u003e过滤器配置\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eFilter\u003c/code\u003e 需要配置在 \u003ccode\u003eweb.xml\u003c/code\u003e 中才能生效。一个 \u003ccode\u003eFilter\u003c/code\u003e 需要配置 \u003ccode\u003e\u0026lt;filter\u0026gt;\u003c/code\u003e 与 \u003ccode\u003e\u0026lt;filter-mapping\u0026gt;\u003c/code\u003e 标签。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;filter\u0026gt;\u003c/code\u003e 配置 Filter 名称，实现类以及初始化参数。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;filter-mapping\u0026gt;\u003c/code\u003e 配置什么规则下使用该 Filter。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;filter\u0026gt;\u003c/code\u003e 的 filterName 与 \u003ccode\u003e\u0026lt;filter-mapping\u0026gt;\u003c/code\u003e 的 filterName 必须匹配。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;url-pattern\u0026gt;\u003c/code\u003e 配置 URL 的规则，可以配置多个，可以使用通配符（\u003ccode\u003e*\u003c/code\u003e）。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;dispatcher\u0026gt;\u003c/code\u003e 配置到达 Servlet 的方式，有 4 种取值：REQUEST、FORWARD、INCLUDE、ERROR。可以同时配置多个 \u003ccode\u003e\u0026lt;dispatcher\u0026gt;\u003c/code\u003e。如果没有配置任何 \u003ccode\u003e\u0026lt;dispatcher\u0026gt;\u003c/code\u003e，默认为 REQUEST。\u003cul\u003e\n\u003cli\u003eREQUEST - 表示仅当直接请求 Servlet 时才生效。\u003c/li\u003e\n\u003cli\u003eFORWARD - 表示仅当某 Servlet 通过 FORWARD 到该 Servlet 时才生效。\u003c/li\u003e\n\u003cli\u003eINCLUDE - JSP 中可以通过 \u003ccode\u003e\u0026lt;jsp:include\u0026gt;\u003c/code\u003e 请求某 Servlet。仅在这种情况表有效。\u003c/li\u003e\n\u003cli\u003eERROR - JSP 中可以通过 \u003ccode\u003e\u0026lt;%@ page errorPage=\u0026#34;error.jsp\u0026#34; %\u0026gt;\u003c/code\u003e 指定错误处理页面。仅在这种情况表有效。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Listener\"\u003e\u003ca href=\"#Listener\" class=\"headerlink\" title=\"Listener\"\u003e\u003c/a\u003eListener\u003c/h2\u003e\u003cp\u003e监听器（\u003ccode\u003eListener\u003c/code\u003e）用于监听 web 应用程序中的\u003ccode\u003eServletContext\u003c/code\u003e, \u003ccode\u003eHttpSession\u003c/code\u003e和 \u003ccode\u003eServletRequest\u003c/code\u003e等域对象的创建与销毁事件，以及监听这些域对象中的属性发生修改的事件。\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003eListener\u003c/code\u003e 不需要关注该类事件时怎样触发或者怎么调用相应的 \u003ccode\u003eListener\u003c/code\u003e，只要记住该类事件触发时一定会调用相应的 \u003ccode\u003eListener\u003c/code\u003e，遵循 Servlet 规范的服务器会自动完成相应工作。\u003c/p\u003e\n\u003ch3 id=\"监听器的分类\"\u003e\u003ca href=\"#监听器的分类\" class=\"headerlink\" title=\"监听器的分类\"\u003e\u003c/a\u003e监听器的分类\u003c/h3\u003e\u003cp\u003e在 Servlet 规范中定义了多种类型的监听器，它们用于监听的事件源分别为\u003ccode\u003eServletContext\u003c/code\u003e，\u003ccode\u003eHttpSession\u003c/code\u003e和\u003ccode\u003eServletRequest\u003c/code\u003e这三个域对象\u003cbr/\u003eServlet 规范针对这三个对象上的操作，又把多种类型的监听器划分为三种类型：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e监听域对象自身的创建和销毁的事件监听器。\u003c/li\u003e\n\u003cli\u003e监听域对象中的属性的增加和删除的事件监听器。\u003c/li\u003e\n\u003cli\u003e监听绑定到 HttpSession 域中的某个对象的状态的事件监听器。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"监听对象的创建和销毁\"\u003e\u003ca href=\"#监听对象的创建和销毁\" class=\"headerlink\" title=\"监听对象的创建和销毁\"\u003e\u003c/a\u003e监听对象的创建和销毁\u003c/h3\u003e\u003ch4 id=\"HttpSessionListener\"\u003e\u003ca href=\"#HttpSessionListener\" class=\"headerlink\" title=\"HttpSessionListener\"\u003e\u003c/a\u003eHttpSessionListener\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eHttpSessionListener\u003c/code\u003e 接口用于监听 \u003ccode\u003eHttpSession\u003c/code\u003e 对象的创建和销毁。\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e创建一个 \u003ccode\u003eSession\u003c/code\u003e 时，激发 \u003ccode\u003esessionCreated (HttpSessionEvent se)\u003c/code\u003e 方法\u003c/li\u003e\n\u003cli\u003e销毁一个 \u003ccode\u003eSession\u003c/code\u003e 时，激发 \u003ccode\u003esessionDestroyed (HttpSessionEvent se)\u003c/code\u003e 方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"ServletContextListener\"\u003e\u003ca href=\"#ServletContextListener\" class=\"headerlink\" title=\"ServletContextListener\"\u003e\u003c/a\u003eServletContextListener\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eServletContextListener\u003c/code\u003e 接口用于监听 \u003ccode\u003eServletContext\u003c/code\u003e 对象的创建和销毁事件。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e实现了 \u003ccode\u003eServletContextListener\u003c/code\u003e 接口的类都可以对 \u003ccode\u003eServletContext\u003c/code\u003e 对象的创建和销毁进行监听。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e当 \u003ccode\u003eServletContext\u003c/code\u003e 对象被创建时，激发 \u003ccode\u003econtextInitialized (ServletContextEvent sce)\u003c/code\u003e 方法。\u003c/li\u003e\n\u003cli\u003e当 \u003ccode\u003eServletContext\u003c/code\u003e 对象被销毁时，激发 \u003ccode\u003econtextDestroyed(ServletContextEvent sce)\u003c/code\u003e 方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003eServletContext\u003c/code\u003e 域对象创建和销毁时机：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e创建：服务器启动针对每一个 Web 应用创建 \u003ccode\u003eServletContext\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e销毁：服务器关闭前先关闭代表每一个 web 应用的 \u003ccode\u003eServletContext\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"ServletRequestListener\"\u003e\u003ca href=\"#ServletRequestListener\" class=\"headerlink\" title=\"ServletRequestListener\"\u003e\u003c/a\u003eServletRequestListener\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eServletRequestListener\u003c/code\u003e 接口用于监听 \u003ccode\u003eServletRequest\u003c/code\u003e 对象的创建和销毁。\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eRequest\u003c/code\u003e 对象被创建时，监听器的 \u003ccode\u003erequestInitialized(ServletRequestEvent sre)\u003c/code\u003e 方法将会被调用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRequest\u003c/code\u003e 对象被销毁时，监听器的 \u003ccode\u003erequestDestroyed(ServletRequestEvent sre)\u003c/code\u003e 方法将会被调用\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003eServletRequest\u003c/code\u003e 域对象创建和销毁时机：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e创建：用户每一次访问都会创建 request 对象\u003c/li\u003e\n\u003cli\u003e销毁：当前访问结束，request 对象就会销毁\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"监听对象的属性变化\"\u003e\u003ca href=\"#监听对象的属性变化\" class=\"headerlink\" title=\"监听对象的属性变化\"\u003e\u003c/a\u003e监听对象的属性变化\u003c/h3\u003e\u003cp\u003e域对象中属性的变更的事件监听器就是用来监听 \u003ccode\u003eServletContext\u003c/code\u003e、\u003ccode\u003eHttpSession\u003c/code\u003e、\u003ccode\u003eHttpServletRequest\u003c/code\u003e 这三个对象中的属性变更信息事件的监听器。\u003cbr/\u003e这三个监听器接口分别是 \u003ccode\u003eServletContextAttributeListener\u003c/code\u003e、\u003ccode\u003eHttpSessionAttributeListener\u003c/code\u003e \u003ccode\u003e和 ServletRequestAttributeListener\u003c/code\u003e，这三个接口中都定义了三个方法来处理被监听对象中的属性的增加，删除和替换的事件，同一个事件在这三个接口中对应的方法名称完全相同，只是接受的参数类型不同。\u003c/p\u003e\n\u003ch4 id=\"attributeAdded-方法\"\u003e\u003ca href=\"#attributeAdded-方法\" class=\"headerlink\" title=\"attributeAdded 方法\"\u003e\u003c/a\u003eattributeAdded 方法\u003c/h4\u003e\u003cp\u003e当向被监听对象中增加一个属性时，web 容器就调用事件监听器的 \u003ccode\u003eattributeAdded\u003c/code\u003e 方法进行响应，这个方法接收一个事件类型的参数，监听器可以通过这个参数来获得正在增加属性的域对象和被保存到域中的属性对象\u003cbr/\u003e各个域属性监听器中的完整语法定义为：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eattributeAdded\u003c/span\u003e\u003cspan class=\"params\"\u003e(ServletContextAttributeEvent scae)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eattributeReplaced\u003c/span\u003e\u003cspan class=\"params\"\u003e(HttpSessionBindingEvent hsbe)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eattributeRmoved\u003c/span\u003e\u003cspan class=\"params\"\u003e(ServletRequestAttributeEvent srae)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"attributeRemoved-方法\"\u003e\u003ca href=\"#attributeRemoved-方法\" class=\"headerlink\" title=\"attributeRemoved 方法\"\u003e\u003c/a\u003eattributeRemoved 方法\u003c/h4\u003e\u003cp\u003e当删除被监听对象中的一个属性时，web 容器调用事件监听器的 \u003ccode\u003eattributeRemoved\u003c/code\u003e 方法进行响应\u003cbr/\u003e各个域属性监听器中的完整语法定义为：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eattributeRemoved\u003c/span\u003e\u003cspan class=\"params\"\u003e(ServletContextAttributeEvent scae)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eattributeRemoved\u003c/span\u003e\u003cspan class=\"params\"\u003e(HttpSessionBindingEvent hsbe)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eattributeRemoved\u003c/span\u003e\u003cspan class=\"params\"\u003e(ServletRequestAttributeEvent srae)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"attributeReplaced-方法\"\u003e\u003ca href=\"#attributeReplaced-方法\" class=\"headerlink\" title=\"attributeReplaced 方法\"\u003e\u003c/a\u003eattributeReplaced 方法\u003c/h4\u003e\u003cp\u003e当监听器的域对象中的某个属性被替换时，web 容器调用事件监听器的 \u003ccode\u003eattributeReplaced\u003c/code\u003e 方法进行响应\u003cbr/\u003e各个域属性监听器中的完整语法定义为：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eattributeReplaced\u003c/span\u003e\u003cspan class=\"params\"\u003e(ServletContextAttributeEvent scae)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eattributeReplaced\u003c/span\u003e\u003cspan class=\"params\"\u003e(HttpSessionBindingEvent hsbe)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eattributeReplaced\u003c/span\u003e\u003cspan class=\"params\"\u003e(ServletRequestAttributeEvent srae)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"监听-Session-内的对象\"\u003e\u003ca href=\"#监听-Session-内的对象\" class=\"headerlink\" title=\"监听 Session 内的对象\"\u003e\u003c/a\u003e监听 Session 内的对象\u003c/h3\u003e\u003cp\u003e保存在 Session 域中的对象可以有多种状态：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e绑定（\u003ccode\u003esession.setAttribute(\u0026#34;bean\u0026#34;,Object)\u003c/code\u003e）到 \u003ccode\u003eSession\u003c/code\u003e 中；\u003c/li\u003e\n\u003cli\u003e从 \u003ccode\u003eSession\u003c/code\u003e 域中解除绑定（\u003ccode\u003esession.removeAttribute(\u0026#34;bean\u0026#34;)\u003c/code\u003e）；\u003c/li\u003e\n\u003cli\u003e随 \u003ccode\u003eSession\u003c/code\u003e 对象持久化到一个存储设备中；\u003c/li\u003e\n\u003cli\u003e随 \u003ccode\u003eSession\u003c/code\u003e 对象从一个存储设备中恢复。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eServlet 规范中定义了两个特殊的监听器接口 \u003ccode\u003eHttpSessionBindingListener\u003c/code\u003e 和\u003ccode\u003eHttpSessionActivationListener\u003c/code\u003e 来帮助 JavaBean 对象了解自己在 Session 域中的这些状态。\u003c/p\u003e\n\u003cp\u003e实现这两个接口的类不需要 \u003ccode\u003eweb.xml\u003c/code\u003e 文件中进行注册。\u003c/p\u003e\n\u003ch4 id=\"HttpSessionBindingListener\"\u003e\u003ca href=\"#HttpSessionBindingListener\" class=\"headerlink\" title=\"HttpSessionBindingListener\"\u003e\u003c/a\u003eHttpSessionBindingListener\u003c/h4\u003e\u003cp\u003e\u003ccode\u003eHttpSessionBindingListener\u003c/code\u003e 接口的 JavaBean 对象可以感知自己被绑定或解绑定到 \u003ccode\u003eSession\u003c/code\u003e 中的事件。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e当对象被绑定到 \u003ccode\u003eHttpSession\u003c/code\u003e 对象中时，web 服务器调用该对象的 \u003ccode\u003evalueBound(HttpSessionBindingEvent event)\u003c/code\u003e 方法。\u003c/li\u003e\n\u003cli\u003e当对象从 \u003ccode\u003eHttpSession\u003c/code\u003e 对象中解除绑定时，web 服务器调用该对象的 \u003ccode\u003evalueUnbound(HttpSessionBindingEvent event)\u003c/code\u003e 方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"HttpSessionActivationListener\"\u003e\u003ca href=\"#HttpSessionActivationListener\" class=\"headerlink\" title=\"HttpSessionActivationListener\"\u003e\u003c/a\u003eHttpSessionActivationListener\u003c/h4\u003e\u003cp\u003e实现了 \u003ccode\u003eHttpSessionActivationListener\u003c/code\u003e 接口的 JavaBean 对象可以感知自己被活化(反序列化)和钝化(序列化)的事件。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e当绑定到 \u003ccode\u003eHttpSession\u003c/code\u003e 对象中的 JavaBean 对象将要随 \u003ccode\u003eHttpSession\u003c/code\u003e 对象被序列化之前，web 服务器调用该 JavaBean 对象的 \u003ccode\u003esessionWillPassivate(HttpSessionEvent event)\u003c/code\u003e 方法。这样 JavaBean 对象就可以知道自己将要和 \u003ccode\u003eHttpSession\u003c/code\u003e 对象一起被序列化到硬盘中.\u003c/li\u003e\n\u003cli\u003e当绑定到 \u003ccode\u003eHttpSession\u003c/code\u003e 对象中的 JavaBean 对象将要随 \u003ccode\u003eHttpSession\u003c/code\u003e 对象被反序列化之后，web 服务器调用该 JavaBean 对象的 \u003ccode\u003esessionDidActive(HttpSessionEvent event)\u003c/code\u003e 方法。这样 JavaBean 对象就可以知道自己将要和 \u003ccode\u003eHttpSession\u003c/code\u003e 对象一起被反序列化回到内存中\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Filter-和-Listener\"\u003e\u003ca href=\"#Filter-和-Listener\" class=\"headerlink\" title=\"Filter 和 Listener\"\u003e\u003c/a\u003eFilter 和 Listener\u003c/h2\u003e\u003cp\u003eFilter 和 Listener 的本质区别：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFilter 是干预过程的\u003c/strong\u003e，它是过程的一部分，是基于过程行为的。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eListener 是基于状态的\u003c/strong\u003e，任何行为改变同一个状态，触发的事件是一致的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"示例代码\"\u003e\u003ca href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"\u003e\u003c/a\u003e示例代码\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eFilter\u003c/code\u003e 的示例源码：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/dunwu/javatech/tree/master/codes/javaee-tutorial/javaee-tutorial-filter\"\u003e源码\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eListener\u003c/code\u003e 的示例源码：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/dunwu/javatech/tree/master/codes/javaee-tutorial/javaee-tutorial-listener\"\u003e源码\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100027701\"\u003e深入拆解 Tomcat \u0026amp; Jetty\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/4189495/\"\u003eJava Web 整合开发王者归来\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-08-24T11:41:46Z",
  "Author": "钝悟 ◾ Dunwu"
}