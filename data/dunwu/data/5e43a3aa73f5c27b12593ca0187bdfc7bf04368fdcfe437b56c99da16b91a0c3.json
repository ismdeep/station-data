{
  "Source": "dunwu",
  "Title": "Elastic 快速入门",
  "Link": "https://dunwu.github.io/blog/pages/553160/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Elastic-快速入门\"\u003e\u003ca href=\"#Elastic-快速入门\" class=\"headerlink\" title=\"Elastic 快速入门\"\u003e\u003c/a\u003eElastic 快速入门\u003c/h1\u003e\u003cblockquote\u003e\n\u003cp\u003e开源协议：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/elastic/elasticsearch/tree/7.4/licenses/APACHE-LICENSE-2.0.txt\"\u003eApache 2.0\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"1-简介\"\u003e\u003ca href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"\u003e\u003c/a\u003e1. 简介\u003c/h2\u003e\u003ch3 id=\"1-1-Elastic-Stack-是什么\"\u003e\u003ca href=\"#1-1-Elastic-Stack-是什么\" class=\"headerlink\" title=\"1.1. Elastic Stack 是什么\"\u003e\u003c/a\u003e1.1. Elastic Stack 是什么\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eElastic Stack\u003c/strong\u003e 即 \u003cstrong\u003eELK Stack\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eELK 是指 Elastic 公司旗下三款产品 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/cn/products/elasticsearch\"\u003eElasticSearch\u003c/a\u003e 、\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/cn/products/logstash\"\u003eLogstash\u003c/a\u003e 、\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/cn/products/kibana\"\u003eKibana\u003c/a\u003e 的首字母组合。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eElasticsearch 是一个搜索和分析引擎。\u003c/li\u003e\n\u003cli\u003eLogstash 是服务器端数据处理管道，能够同时从多个来源采集数据，转换数据，然后将数据发送到诸如 Elasticsearch 等“存储库”中。\u003c/li\u003e\n\u003cli\u003eKibana 则可以让用户在 Elasticsearch 中使用图形和图表对数据进行可视化。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e而 Elastic Stack 是 ELK Stack 的更新换代产品，最新产品引入了轻量型的单一功能数据采集器，并把它们叫做 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/cn/products/beats\"\u003eBeats\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 id=\"1-2-为什么使用-Elastic-Stack\"\u003e\u003ca href=\"#1-2-为什么使用-Elastic-Stack\" class=\"headerlink\" title=\"1.2. 为什么使用 Elastic Stack\"\u003e\u003c/a\u003e1.2. 为什么使用 Elastic Stack\u003c/h3\u003e\u003cp\u003e对于有一定规模的公司来说，通常会很多个应用，并部署在大量的服务器上。运维和开发人员常常需要通过查看日志来定位问题。如果应用是集群化部署，试想如果登录一台台服务器去查看日志，是多么费时费力。\u003c/p\u003e\n\u003cp\u003e而通过 ELK 这套解决方案，可以同时实现日志收集、日志搜索和日志分析的功能。\u003c/p\u003e\n\u003ch3 id=\"1-3-Elastic-Stack-架构\"\u003e\u003ca href=\"#1-3-Elastic-Stack-架构\" class=\"headerlink\" title=\"1.3. Elastic Stack 架构\"\u003e\u003c/a\u003e1.3. Elastic Stack 架构\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://www.elastic.co/guide/en/logstash/current/static/images/deploy3.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e说明\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e以上是 Elastic Stack 的一个架构图。从图中可以清楚的看到数据流向。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/products/beats\"\u003eBeats\u003c/a\u003e 是单一用途的数据传输平台，它可以将多台机器的数据发送到 Logstash 或 ElasticSearch。但 Beats 并不是不可或缺的一环，所以本文中暂不介绍。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/products/logstash\"\u003eLogstash\u003c/a\u003e 是一个动态数据收集管道。支持以 TCP/UDP/HTTP 多种方式收集数据（也可以接受 Beats 传输来的数据），并对数据做进一步丰富或提取字段处理。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/products/elasticsearch\"\u003eElasticSearch\u003c/a\u003e 是一个基于 JSON 的分布式的搜索和分析引擎。作为 ELK 的核心，它集中存储数据。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/products/kibana\"\u003eKibana\u003c/a\u003e 是 ELK 的用户界面。它将收集的数据进行可视化展示（各种报表、图形化数据），并提供配置、管理 ELK 的界面。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"2-ElasticSearch\"\u003e\u003ca href=\"#2-ElasticSearch\" class=\"headerlink\" title=\"2. ElasticSearch\"\u003e\u003c/a\u003e2. ElasticSearch\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/elastic/elasticsearch\"\u003eElasticsearch\u003c/a\u003e 是一个分布式、RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。 作为 Elastic Stack 的核心，它集中存储您的数据，帮助您发现意料之中以及意料之外的情况。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"2-1-ElasticSearch-简介\"\u003e\u003ca href=\"#2-1-ElasticSearch-简介\" class=\"headerlink\" title=\"2.1. ElasticSearch 简介\"\u003e\u003c/a\u003e2.1. ElasticSearch 简介\u003c/h3\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/elastic/elasticsearch\"\u003eElasticsearch\u003c/a\u003e 基于搜索库 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/apache/lucene-solr\"\u003eLucene\u003c/a\u003e 开发。ElasticSearch 隐藏了 Lucene 的复杂性，提供了简单易用的 REST API / Java API 接口（另外还有其他语言的 API 接口）。\u003c/p\u003e\n\u003cp\u003eElasticSearch 可以视为一个文档存储，它\u003cstrong\u003e将复杂数据结构序列化为 JSON 存储\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eElasticSearch 是近乎于实时的全文搜素\u003c/strong\u003e，这是指：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e从写入数据到数据可以被搜索，存在较小的延迟（大概是 1s）\u003c/li\u003e\n\u003cli\u003e基于 ES 执行搜索和分析可以达到秒级\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"2-1-1-核心概念\"\u003e\u003ca href=\"#2-1-1-核心概念\" class=\"headerlink\" title=\"2.1.1. 核心概念\"\u003e\u003c/a\u003e2.1.1. 核心概念\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e索引（Index）\u003c/code\u003e\u003c/strong\u003e 可以认为是文档（document）的优化集合。\u003c/li\u003e\n\u003cli\u003e每个 \u003cstrong\u003e\u003ccode\u003e文档（document）\u003c/code\u003e\u003c/strong\u003e 都是字段（field）的集合。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e字段（field）\u003c/code\u003e\u003c/strong\u003e 是包含数据的键值对。\u003c/li\u003e\n\u003cli\u003e默认情况下，Elasticsearch 对每个字段中的所有数据建立索引，并且每个索引字段都具有专用的优化数据结构。\u003c/li\u003e\n\u003cli\u003e每个索引里可以有一个或者多个类型（type）。\u003ccode\u003e类型（type）\u003c/code\u003e 是 index 的一个逻辑分类，\u003c/li\u003e\n\u003cli\u003e当单台机器不足以存储大量数据时，Elasticsearch 可以将一个索引中的数据切分为多个 \u003cstrong\u003e\u003ccode\u003e分片（shard）\u003c/code\u003e\u003c/strong\u003e 。 \u003cstrong\u003e\u003ccode\u003e分片（shard）\u003c/code\u003e\u003c/strong\u003e 分布在多台服务器上存储。有了 shard 就可以横向扩展，存储更多数据，让搜索和分析等操作分布到多台服务器上去执行，提升吞吐量和性能。每个 shard 都是一个 lucene index。\u003c/li\u003e\n\u003cli\u003e任何一个服务器随时可能故障或宕机，此时 shard 可能就会丢失，因此可以为每个 shard 创建多个 **\u003ccode\u003e副本（replica）\u003c/code\u003e**。replica 可以在 shard 故障时提供备用服务，保证数据不丢失，多个 replica 还可以提升搜索操作的吞吐量和性能。primary shard（建立索引时一次设置，不能修改，默认 5 个），replica shard（随时修改数量，默认 1 个），默认每个索引 10 个 shard，5 个 primary shard，5 个 replica shard，最小的高可用配置，是 2 台服务器。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-2-ElasticSearch-原理\"\u003e\u003ca href=\"#2-2-ElasticSearch-原理\" class=\"headerlink\" title=\"2.2. ElasticSearch 原理\"\u003e\u003c/a\u003e2.2. ElasticSearch 原理\u003c/h3\u003e\u003ch4 id=\"2-2-1-ES-写数据过程\"\u003e\u003ca href=\"#2-2-1-ES-写数据过程\" class=\"headerlink\" title=\"2.2.1. ES 写数据过程\"\u003e\u003c/a\u003e2.2.1. ES 写数据过程\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e客户端选择一个 node 发送请求过去，这个 node 就是 \u003ccode\u003ecoordinating node\u003c/code\u003e（协调节点）。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecoordinating node\u003c/code\u003e 对 document 进行\u003cstrong\u003e路由\u003c/strong\u003e，将请求转发给对应的 node（有 primary shard）。\u003c/li\u003e\n\u003cli\u003e实际的 node 上的 \u003ccode\u003eprimary shard\u003c/code\u003e 处理请求，然后将数据同步到 \u003ccode\u003ereplica node\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecoordinating node\u003c/code\u003e 如果发现 \u003ccode\u003eprimary node\u003c/code\u003e 和所有 \u003ccode\u003ereplica node\u003c/code\u003e 都搞定之后，就返回响应结果给客户端。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://github.com/doocs/advanced-java/raw/master/images/es-write.png\" alt=\"es-write\"/\u003e\u003c/p\u003e\n\u003ch4 id=\"2-2-2-es-读数据过程\"\u003e\u003ca href=\"#2-2-2-es-读数据过程\" class=\"headerlink\" title=\"2.2.2. es 读数据过程\"\u003e\u003c/a\u003e2.2.2. es 读数据过程\u003c/h4\u003e\u003cp\u003e可以通过 \u003ccode\u003edoc id\u003c/code\u003e 来查询，会根据 \u003ccode\u003edoc id\u003c/code\u003e 进行 hash，判断出来当时把 \u003ccode\u003edoc id\u003c/code\u003e 分配到了哪个 shard 上面去，从那个 shard 去查询。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e客户端发送请求到\u003cstrong\u003e任意\u003c/strong\u003e一个 node，成为 \u003ccode\u003ecoordinate node\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecoordinate node\u003c/code\u003e 对 \u003ccode\u003edoc id\u003c/code\u003e 进行哈希路由，将请求转发到对应的 node，此时会使用 \u003ccode\u003eround-robin\u003c/code\u003e \u003cstrong\u003e随机轮询算法\u003c/strong\u003e，在 \u003ccode\u003eprimary shard\u003c/code\u003e 以及其所有 replica 中随机选择一个，让读请求负载均衡。\u003c/li\u003e\n\u003cli\u003e接收请求的 node 返回 document 给 \u003ccode\u003ecoordinate node\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecoordinate node\u003c/code\u003e 返回 document 给客户端。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"2-2-3-写数据底层原理\"\u003e\u003ca href=\"#2-2-3-写数据底层原理\" class=\"headerlink\" title=\"2.2.3. 写数据底层原理\"\u003e\u003c/a\u003e2.2.3. 写数据底层原理\u003c/h4\u003e\u003cp\u003e\u003cimg src=\"https://github.com/doocs/advanced-java/raw/master/images/es-write-detail.png\" alt=\"es-write-detail\"/\u003e\u003c/p\u003e\n\u003cp\u003e先写入内存 buffer，在 buffer 里的时候数据是搜索不到的；同时将数据写入 translog 日志文件。\u003c/p\u003e\n\u003cp\u003e如果 buffer 快满了，或者到一定时间，就会将内存 buffer 数据 \u003ccode\u003erefresh\u003c/code\u003e 到一个新的 \u003ccode\u003esegment file\u003c/code\u003e 中，但是此时数据不是直接进入 \u003ccode\u003esegment file\u003c/code\u003e 磁盘文件，而是先进入 \u003ccode\u003eos cache\u003c/code\u003e 。这个过程就是 \u003ccode\u003erefresh\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e每隔 1 秒钟，es 将 buffer 中的数据写入一个\u003cstrong\u003e新的\u003c/strong\u003e \u003ccode\u003esegment file\u003c/code\u003e，每秒钟会产生一个\u003cstrong\u003e新的磁盘文件\u003c/strong\u003e \u003ccode\u003esegment file\u003c/code\u003e，这个 \u003ccode\u003esegment file\u003c/code\u003e 中就存储最近 1 秒内 buffer 中写入的数据。\u003c/p\u003e\n\u003cp\u003e但是如果 buffer 里面此时没有数据，那当然不会执行 refresh 操作，如果 buffer 里面有数据，默认 1 秒钟执行一次 refresh 操作，刷入一个新的 segment file 中。\u003c/p\u003e\n\u003cp\u003e操作系统里面，磁盘文件其实都有一个东西，叫做 \u003ccode\u003eos cache\u003c/code\u003e，即操作系统缓存，就是说数据写入磁盘文件之前，会先进入 \u003ccode\u003eos cache\u003c/code\u003e，先进入操作系统级别的一个内存缓存中去。只要 \u003ccode\u003ebuffer\u003c/code\u003e 中的数据被 refresh 操作刷入 \u003ccode\u003eos cache\u003c/code\u003e中，这个数据就可以被搜索到了。\u003c/p\u003e\n\u003cp\u003e为什么叫 es 是\u003cstrong\u003e准实时\u003c/strong\u003e的？ \u003ccode\u003eNRT\u003c/code\u003e，全称 \u003ccode\u003enear real-time\u003c/code\u003e。默认是每隔 1 秒 refresh 一次的，所以 es 是准实时的，因为写入的数据 1 秒之后才能被看到。可以通过 es 的 \u003ccode\u003erestful api\u003c/code\u003e 或者 \u003ccode\u003ejava api\u003c/code\u003e，\u003cstrong\u003e手动\u003c/strong\u003e执行一次 refresh 操作，就是手动将 buffer 中的数据刷入 \u003ccode\u003eos cache\u003c/code\u003e中，让数据立马就可以被搜索到。只要数据被输入 \u003ccode\u003eos cache\u003c/code\u003e 中，buffer 就会被清空了，因为不需要保留 buffer 了，数据在 translog 里面已经持久化到磁盘去一份了。\u003c/p\u003e\n\u003cp\u003e重复上面的步骤，新的数据不断进入 buffer 和 translog，不断将 \u003ccode\u003ebuffer\u003c/code\u003e 数据写入一个又一个新的 \u003ccode\u003esegment file\u003c/code\u003e 中去，每次 \u003ccode\u003erefresh\u003c/code\u003e 完 buffer 清空，translog 保留。随着这个过程推进，translog 会变得越来越大。当 translog 达到一定长度的时候，就会触发 \u003ccode\u003ecommit\u003c/code\u003e 操作。\u003c/p\u003e\n\u003cp\u003ecommit 操作发生第一步，就是将 buffer 中现有数据 \u003ccode\u003erefresh\u003c/code\u003e 到 \u003ccode\u003eos cache\u003c/code\u003e 中去，清空 buffer。然后，将一个 \u003ccode\u003ecommit point\u003c/code\u003e 写入磁盘文件，里面标识着这个 \u003ccode\u003ecommit point\u003c/code\u003e 对应的所有 \u003ccode\u003esegment file\u003c/code\u003e，同时强行将 \u003ccode\u003eos cache\u003c/code\u003e 中目前所有的数据都 \u003ccode\u003efsync\u003c/code\u003e 到磁盘文件中去。最后\u003cstrong\u003e清空\u003c/strong\u003e 现有 translog 日志文件，重启一个 translog，此时 commit 操作完成。\u003c/p\u003e\n\u003cp\u003e这个 commit 操作叫做 \u003ccode\u003eflush\u003c/code\u003e。默认 30 分钟自动执行一次 \u003ccode\u003eflush\u003c/code\u003e，但如果 translog 过大，也会触发 \u003ccode\u003eflush\u003c/code\u003e。flush 操作就对应着 commit 的全过程，我们可以通过 es api，手动执行 flush 操作，手动将 os cache 中的数据 fsync 强刷到磁盘上去。\u003c/p\u003e\n\u003cp\u003etranslog 日志文件的作用是什么？你执行 commit 操作之前，数据要么是停留在 buffer 中，要么是停留在 os cache 中，无论是 buffer 还是 os cache 都是内存，一旦这台机器死了，内存中的数据就全丢了。所以需要将数据对应的操作写入一个专门的日志文件 \u003ccode\u003etranslog\u003c/code\u003e 中，一旦此时机器宕机，再次重启的时候，es 会自动读取 translog 日志文件中的数据，恢复到内存 buffer 和 os cache 中去。\u003c/p\u003e\n\u003cp\u003etranslog 其实也是先写入 os cache 的，默认每隔 5 秒刷一次到磁盘中去，所以默认情况下，可能有 5 秒的数据会仅仅停留在 buffer 或者 translog 文件的 os cache 中，如果此时机器挂了，会\u003cstrong\u003e丢失\u003c/strong\u003e 5 秒钟的数据。但是这样性能比较好，最多丢 5 秒的数据。也可以将 translog 设置成每次写操作必须是直接 \u003ccode\u003efsync\u003c/code\u003e 到磁盘，但是性能会差很多。\u003c/p\u003e\n\u003cp\u003e实际上你在这里，如果面试官没有问你 es 丢数据的问题，你可以在这里给面试官炫一把，你说，其实 es 第一是准实时的，数据写入 1 秒后可以搜索到；可能会丢失数据的。有 5 秒的数据，停留在 buffer、translog os cache、segment file os cache 中，而不在磁盘上，此时如果宕机，会导致 5 秒的\u003cstrong\u003e数据丢失\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e总结一下\u003c/strong\u003e，数据先写入内存 buffer，然后每隔 1s，将数据 refresh 到 os cache，到了 os cache 数据就能被搜索到（所以我们才说 es 从写入到能被搜索到，中间有 1s 的延迟）。每隔 5s，将数据写入 translog 文件（这样如果机器宕机，内存数据全没，最多会有 5s 的数据丢失），translog 大到一定程度，或者默认每隔 30mins，会触发 commit 操作，将缓冲区的数据都 flush 到 segment file 磁盘文件中。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e数据写入 segment file 之后，同时就建立好了倒排索引。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"2-2-4-删除-更新数据底层原理\"\u003e\u003ca href=\"#2-2-4-删除-更新数据底层原理\" class=\"headerlink\" title=\"2.2.4. 删除/更新数据底层原理\"\u003e\u003c/a\u003e2.2.4. 删除/更新数据底层原理\u003c/h4\u003e\u003cp\u003e如果是删除操作，commit 的时候会生成一个 \u003ccode\u003e.del\u003c/code\u003e 文件，里面将某个 doc 标识为 \u003ccode\u003edeleted\u003c/code\u003e 状态，那么搜索的时候根据 \u003ccode\u003e.del\u003c/code\u003e 文件就知道这个 doc 是否被删除了。\u003c/p\u003e\n\u003cp\u003e如果是更新操作，就是将原来的 doc 标识为 \u003ccode\u003edeleted\u003c/code\u003e 状态，然后新写入一条数据。\u003c/p\u003e\n\u003cp\u003ebuffer 每 refresh 一次，就会产生一个 \u003ccode\u003esegment file\u003c/code\u003e，所以默认情况下是 1 秒钟一个 \u003ccode\u003esegment file\u003c/code\u003e，这样下来 \u003ccode\u003esegment file\u003c/code\u003e 会越来越多，此时会定期执行 merge。每次 merge 的时候，会将多个 \u003ccode\u003esegment file\u003c/code\u003e 合并成一个，同时这里会将标识为 \u003ccode\u003edeleted\u003c/code\u003e 的 doc 给\u003cstrong\u003e物理删除掉\u003c/strong\u003e，然后将新的 \u003ccode\u003esegment file\u003c/code\u003e 写入磁盘，这里会写一个 \u003ccode\u003ecommit point\u003c/code\u003e，标识所有新的 \u003ccode\u003esegment file\u003c/code\u003e，然后打开 \u003ccode\u003esegment file\u003c/code\u003e 供搜索使用，同时删除旧的 \u003ccode\u003esegment file\u003c/code\u003e。\u003c/p\u003e\n\u003ch4 id=\"2-2-5-底层-lucene\"\u003e\u003ca href=\"#2-2-5-底层-lucene\" class=\"headerlink\" title=\"2.2.5. 底层 lucene\"\u003e\u003c/a\u003e2.2.5. 底层 lucene\u003c/h4\u003e\u003cp\u003e简单来说，lucene 就是一个 jar 包，里面包含了封装好的各种建立倒排索引的算法代码。我们用 Java 开发的时候，引入 lucene jar，然后基于 lucene 的 api 去开发就可以了。\u003c/p\u003e\n\u003cp\u003e通过 lucene，我们可以将已有的数据建立索引，lucene 会在本地磁盘上面，给我们组织索引的数据结构。\u003c/p\u003e\n\u003ch4 id=\"2-2-6-倒排索引\"\u003e\u003ca href=\"#2-2-6-倒排索引\" class=\"headerlink\" title=\"2.2.6. 倒排索引\"\u003e\u003c/a\u003e2.2.6. 倒排索引\u003c/h4\u003e\u003cp\u003e在搜索引擎中，每个文档都有一个对应的文档 ID，文档内容被表示为一系列关键词的集合。例如，文档 1 经过分词，提取了 20 个关键词，每个关键词都会记录它在文档中出现的次数和出现位置。\u003c/p\u003e\n\u003cp\u003e那么，倒排索引就是\u003cstrong\u003e关键词到文档\u003c/strong\u003e ID 的映射，每个关键词都对应着一系列的文件，这些文件中都出现了关键词。\u003c/p\u003e\n\u003cp\u003e举个栗子。\u003c/p\u003e\n\u003cp\u003e有以下文档：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eDocId\u003c/th\u003e\n\u003cth\u003eDoc\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e谷歌地图之父跳槽 Facebook\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e谷歌地图之父加盟 Facebook\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003e谷歌地图创始人拉斯离开谷歌加盟 Facebook\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003e谷歌地图之父跳槽 Facebook 与 Wave 项目取消有关\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003ctd\u003e谷歌地图之父拉斯加盟社交网站 Facebook\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e对文档进行分词之后，得到以下\u003cstrong\u003e倒排索引\u003c/strong\u003e。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eWordId\u003c/th\u003e\n\u003cth\u003eWord\u003c/th\u003e\n\u003cth\u003eDocIds\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e谷歌\u003c/td\u003e\n\u003ctd\u003e1,2,3,4,5\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e地图\u003c/td\u003e\n\u003ctd\u003e1,2,3,4,5\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003e之父\u003c/td\u003e\n\u003ctd\u003e1,2,4,5\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003e跳槽\u003c/td\u003e\n\u003ctd\u003e1,4\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003ctd\u003eFacebook\u003c/td\u003e\n\u003ctd\u003e1,2,3,4,5\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e6\u003c/td\u003e\n\u003ctd\u003e加盟\u003c/td\u003e\n\u003ctd\u003e2,3,5\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e7\u003c/td\u003e\n\u003ctd\u003e创始人\u003c/td\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e8\u003c/td\u003e\n\u003ctd\u003e拉斯\u003c/td\u003e\n\u003ctd\u003e3,5\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003ctd\u003e离开\u003c/td\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e10\u003c/td\u003e\n\u003ctd\u003e与\u003c/td\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e..\u003c/td\u003e\n\u003ctd\u003e..\u003c/td\u003e\n\u003ctd\u003e..\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e另外，实用的倒排索引还可以记录更多的信息，比如文档频率信息，表示在文档集合中有多少个文档包含某个单词。\u003c/p\u003e\n\u003cp\u003e那么，有了倒排索引，搜索引擎可以很方便地响应用户的查询。比如用户输入查询 \u003ccode\u003eFacebook\u003c/code\u003e，搜索系统查找倒排索引，从中读出包含这个单词的文档，这些文档就是提供给用户的搜索结果。\u003c/p\u003e\n\u003cp\u003e要注意倒排索引的两个重要细节：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e倒排索引中的所有词项对应一个或多个文档；\u003c/li\u003e\n\u003cli\u003e倒排索引中的词项\u003cstrong\u003e根据字典顺序升序排列\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e上面只是一个简单的栗子，并没有严格按照字典顺序升序排列。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"3-Logstash\"\u003e\u003ca href=\"#3-Logstash\" class=\"headerlink\" title=\"3. Logstash\"\u003e\u003c/a\u003e3. Logstash\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/elastic/logstash\"\u003eLogstash\u003c/a\u003e 是开源的服务器端数据处理管道，能够同时从多个来源采集数据，转换数据，然后将数据发送到您最喜欢的“存储库”中。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"3-1-Logstash-简介\"\u003e\u003ca href=\"#3-1-Logstash-简介\" class=\"headerlink\" title=\"3.1. Logstash 简介\"\u003e\u003c/a\u003e3.1. Logstash 简介\u003c/h3\u003e\u003cp\u003eLogstash 可以传输和处理你的日志、事务或其他数据。\u003c/p\u003e\n\u003cp\u003eLogstash 是 Elasticsearch 的最佳数据管道。\u003c/p\u003e\n\u003cp\u003eLogstash 是插件式管理模式，在输入、过滤、输出以及编码过程中都可以使用插件进行定制。Logstash 社区有超过 200 种可用插件。\u003c/p\u003e\n\u003ch3 id=\"3-2-Logstash-原理\"\u003e\u003ca href=\"#3-2-Logstash-原理\" class=\"headerlink\" title=\"3.2. Logstash 原理\"\u003e\u003c/a\u003e3.2. Logstash 原理\u003c/h3\u003e\u003cp\u003eLogstash 有两个必要元素：\u003ccode\u003einput\u003c/code\u003e 和 \u003ccode\u003eoutput\u003c/code\u003e ，一个可选元素：\u003ccode\u003efilter\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e这三个元素，分别代表 Logstash 事件处理的三个阶段：输入 \u0026gt; 过滤器 \u0026gt; 输出。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://www.elastic.co/guide/en/logstash/current/static/images/basic_logstash_pipeline.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003einput\u003c/strong\u003e - 负责从数据源采集数据。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003efilter\u003c/code\u003e\u003c/strong\u003e - 将数据修改为你指定的格式或内容。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eoutput\u003c/code\u003e\u003c/strong\u003e - 将数据传输到目的地。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在实际应用场景中，通常输入、输出、过滤器不止一个。Logstash 的这三个元素都使用插件式管理方式，用户可以根据应用需要，灵活的选用各阶段需要的插件，并组合使用。\u003c/p\u003e\n\u003ch2 id=\"4-Beats\"\u003e\u003ca href=\"#4-Beats\" class=\"headerlink\" title=\"4. Beats\"\u003e\u003c/a\u003e4. Beats\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/elastic/beats\"\u003eBeats\u003c/a\u003e 是安装在服务器上的数据中转代理\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eBeats 可以将数据直接传输到 Elasticsearch 或传输到 Logstash 。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg src=\"https://www.elastic.co/guide/en/beats/libbeat/current/images/beats-platform.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003eBeats 有多种类型，可以根据实际应用需要选择合适的类型。\u003c/p\u003e\n\u003cp\u003e常用的类型有：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePacketbeat：\u003c/strong\u003e网络数据包分析器，提供有关您的应用程序服务器之间交换的事务的信息。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFilebeat：\u003c/strong\u003e从您的服务器发送日志文件。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMetricbeat：\u003c/strong\u003e是一个服务器监视代理程序，它定期从服务器上运行的操作系统和服务收集指标。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWinlogbeat：\u003c/strong\u003e提供 Windows 事件日志。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-1-Filebeat-简介\"\u003e\u003ca href=\"#4-1-Filebeat-简介\" class=\"headerlink\" title=\"4.1. Filebeat 简介\"\u003e\u003c/a\u003e4.1. Filebeat 简介\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003e_由于本人仅接触过 Filebeat，所以本文只介绍 Beats 组件中的 Filebeat_。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e相比 Logstash，FileBeat 更加轻量化。\u003c/p\u003e\n\u003cp\u003e在任何环境下，应用程序都有停机的可能性。 Filebeat 读取并转发日志行，如果中断，则会记住所有事件恢复联机状态时所在位置。\u003c/p\u003e\n\u003cp\u003eFilebeat 带有内部模块（auditd，Apache，Nginx，System 和 MySQL），可通过一个指定命令来简化通用日志格式的收集，解析和可视化。\u003c/p\u003e\n\u003cp\u003eFileBeat 不会让你的管道超负荷。FileBeat 如果是向 Logstash 传输数据，当 Logstash 忙于处理数据，会通知 FileBeat 放慢读取速度。一旦拥塞得到解决，FileBeat 将恢复到原来的速度并继续传播。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://www.elastic.co/guide/en/beats/filebeat/current/images/filebeat.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"4-2-Filebeat-原理\"\u003e\u003ca href=\"#4-2-Filebeat-原理\" class=\"headerlink\" title=\"4.2. Filebeat 原理\"\u003e\u003c/a\u003e4.2. Filebeat 原理\u003c/h3\u003e\u003cp\u003eFilebeat 有两个主要组件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eharvester\u003c/code\u003e：负责读取一个文件的内容。它会逐行读取文件内容，并将内容发送到输出目的地。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprospector\u003c/code\u003e：负责管理 harvester 并找到所有需要读取的文件源。比如类型是日志，prospector 就会遍历制定路径下的所有匹配要求的文件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight yaml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003efilebeat.prospectors:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"attr\"\u003etype:\u003c/span\u003e \u003cspan class=\"string\"\u003elog\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"attr\"\u003epaths:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"string\"\u003e/var/log/*.log\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"string\"\u003e/var/path2/*.log\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eFilebeat 保持每个文件的状态，并经常刷新注册表文件中的磁盘状态。状态用于记住 harvester 正在读取的最后偏移量，并确保发送所有日志行。\u003c/p\u003e\n\u003cp\u003eFilebeat 将每个事件的传递状态存储在注册表文件中。所以它能保证事件至少传递一次到配置的输出，没有数据丢失。\u003c/p\u003e\n\u003ch2 id=\"5-运维\"\u003e\u003ca href=\"#5-运维\" class=\"headerlink\" title=\"5. 运维\"\u003e\u003c/a\u003e5. 运维\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"../01.Elasticsearch/20.Elasticsearch%E8%BF%90%E7%BB%B4.md\"\u003eElasticSearch 运维\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"07.Logstash%E8%BF%90%E7%BB%B4.md\"\u003eLogstash 运维\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"05.Kibana%E8%BF%90%E7%BB%B4.md\"\u003eKibana 运维\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"03.Filebeat%E8%BF%90%E7%BB%B4.md\"\u003eBeats 运维\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"6-参考资料\"\u003e\u003ca href=\"#6-参考资料\" class=\"headerlink\" title=\"6. 参考资料\"\u003e\u003c/a\u003e6. 参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e官方资源\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/cn/products/elasticsearch\"\u003eElasticsearch 官网\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/elastic/elasticsearch\"\u003eElasticsearch Github\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html\"\u003eElasticsearch 官方文档\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/cn/products/logstash\"\u003eLogstash 官网\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/elastic/logstash\"\u003eLogstash Github\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/guide/en/logstash/current/index.html\"\u003eLogstash 官方文档\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/cn/products/kibana\"\u003eKibana 官网\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/elastic/kibana\"\u003eKibana Github\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/guide/en/kibana/current/index.html\"\u003eKibana 官方文档\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/cn/products/beats\"\u003eBeats 官网\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/elastic/beats\"\u003eBeats Github\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/guide/en/beats/libbeat/current/index.html\"\u003eBeats 官方文档\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e文章\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/cn/what-is/elk-stack\"\u003e什么是 ELK Stack？\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/doocs/advanced-java/blob/master/docs/high-concurrency/es-introduction.md\"\u003ehttps://github.com/doocs/advanced-java/blob/master/docs/high-concurrency/es-introduction.md\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/doocs/advanced-java/blob/master/docs/high-concurrency/es-write-query-search.md\"\u003ees-write-query-search\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-06-15T23:10:44Z",
  "Author": "钝悟 ◾ Dunwu"
}