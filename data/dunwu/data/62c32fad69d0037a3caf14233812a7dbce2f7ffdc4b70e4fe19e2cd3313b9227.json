{
  "Source": "dunwu",
  "Title": "服务注册和发现",
  "Link": "https://dunwu.github.io/blog/pages/1a90aa/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"服务注册和发现\"\u003e\u003ca href=\"#服务注册和发现\" class=\"headerlink\" title=\"服务注册和发现\"\u003e\u003c/a\u003e服务注册和发现\u003c/h1\u003e\u003ch2 id=\"服务元数据\"\u003e\u003ca href=\"#服务元数据\" class=\"headerlink\" title=\"服务元数据\"\u003e\u003c/a\u003e服务元数据\u003c/h2\u003e\u003cp\u003e构建微服务的首要问题是：服务提供者和服务消费者通信时，如何达成共识。具体来说，就是这个服务的接口名是什么？调用这个服务需要传递哪些参数？接口的返回值是什么类型？以及一些其他接口描述信息。\u003c/p\u003e\n\u003cp\u003e服务的元数据信息通常有以下信息：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务节点信息，如 IP、端口等。\u003c/li\u003e\n\u003cli\u003e接口定义，如接口名、请求参数、响应参数等。\u003c/li\u003e\n\u003cli\u003e请求失败的重试次数\u003c/li\u003e\n\u003cli\u003e序列化方式\u003c/li\u003e\n\u003cli\u003e压缩方式\u003c/li\u003e\n\u003cli\u003e通信协议\u003c/li\u003e\n\u003cli\u003e等等\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e常见的发布服务元数据的方式有：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eREST API\u003c/li\u003e\n\u003cli\u003eXML 文件\u003c/li\u003e\n\u003cli\u003eIDL 文件\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"REST-API\"\u003e\u003ca href=\"#REST-API\" class=\"headerlink\" title=\"REST API\"\u003e\u003c/a\u003eREST API\u003c/h3\u003e\u003cp\u003e以 Eureka 为例\u003c/p\u003e\n\u003cp\u003e服务提供者定义接口\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@RestController\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProviderController\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e DiscoveryClient discoveryClient;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eProviderController\u003c/span\u003e\u003cspan class=\"params\"\u003e(DiscoveryClient discoveryClient)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.discoveryClient = discoveryClient;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@GetMapping(\u0026#34;/send\u0026#34;)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"title function_\"\u003esend\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003eservices\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;Services: \u0026#34;\u003c/span\u003e + discoveryClient.getServices();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(services);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e services;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e服务消费者消费接口\u003c/p\u003e\n\u003cfigure class=\"highlight kotlin\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@RestController\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eConsumerController\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e LoadBalancerClient loadBalancerClient;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e RestTemplate restTemplate;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e ConsumerController(LoadBalancerClient loadBalancerClient,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        RestTemplate restTemplate) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e.loadBalancerClient = loadBalancerClient;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e.restTemplate = restTemplate;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@GetMapping(\u003cspan class=\"string\"\u003e\u0026#34;/recv\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e String recv() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ServiceInstance serviceInstance = loadBalancerClient.choose(\u003cspan class=\"string\"\u003e\u0026#34;eureka-provider\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        String url = \u003cspan class=\"string\"\u003e\u0026#34;http://\u0026#34;\u003c/span\u003e + serviceInstance.getHost() + \u003cspan class=\"string\"\u003e\u0026#34;:\u0026#34;\u003c/span\u003e + serviceInstance.getPort() + \u003cspan class=\"string\"\u003e\u0026#34;/send\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.\u003cspan class=\"keyword\"\u003eout\u003c/span\u003e.println(url);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e restTemplate.getForObject(url, String.\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"XML-文件\"\u003e\u003ca href=\"#XML-文件\" class=\"headerlink\" title=\"XML 文件\"\u003e\u003c/a\u003eXML 文件\u003c/h3\u003e\u003cp\u003eXML 文件这种方式的服务发布和引用主要分三个步骤：\u003c/p\u003e\n\u003cp\u003e（1）服务提供者定义接口，并实现接口。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// The demo service definition.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eservice DemoService {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  rpc \u003cspan class=\"title function_\"\u003eSayHello\u003c/span\u003e \u003cspan class=\"params\"\u003e(HelloRequest)\u003c/span\u003e returns (HelloReply) {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// The request message containing the user\u0026#39;s name.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emessage HelloRequest {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003estring\u003c/span\u003e \u003cspan class=\"variable\"\u003ename\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// The response message containing the greetings\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emessage HelloReply {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003estring\u003c/span\u003e \u003cspan class=\"variable\"\u003emessage\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e（2）服务提供者进程启动时，通过加载 xml 配置文件将接口暴露出去。\u003c/p\u003e\n\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003ebeans\u003c/span\u003e \u003cspan class=\"attr\"\u003exmlns:xsi\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e       \u003cspan class=\"attr\"\u003exmlns:dubbo\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;http://dubbo.apache.org/schema/dubbo\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e       \u003cspan class=\"attr\"\u003exmlns\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;http://www.springframework.org/schema/beans\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e       \u003cspan class=\"attr\"\u003exsi:schemaLocation\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"tag\"\u003e       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003edubbo:application\u003c/span\u003e \u003cspan class=\"attr\"\u003ename\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;demo-provider\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003edubbo:registry\u003c/span\u003e \u003cspan class=\"attr\"\u003eaddress\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;zookeeper://127.0.0.1:2181\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003edubbo:protocol\u003c/span\u003e \u003cspan class=\"attr\"\u003ename\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;dubbo\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003eport\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;20890\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003ebean\u003c/span\u003e \u003cspan class=\"attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;demoService\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;org.apache.dubbo.samples.basic.impl.DemoServiceImpl\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003edubbo:service\u003c/span\u003e \u003cspan class=\"attr\"\u003einterface\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;org.apache.dubbo.samples.basic.api.DemoService\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003eref\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;demoService\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003ebeans\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e（3）服务消费者进程启动时，通过加载 xml 配置文件来引入要调用的接口。\u003c/p\u003e\n\u003cp\u003econsumer.xml 示例\u003c/p\u003e\n\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003ebeans\u003c/span\u003e \u003cspan class=\"attr\"\u003exmlns:xsi\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e       \u003cspan class=\"attr\"\u003exmlns:dubbo\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;http://dubbo.apache.org/schema/dubbo\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e       \u003cspan class=\"attr\"\u003exmlns\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;http://www.springframework.org/schema/beans\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e       \u003cspan class=\"attr\"\u003exsi:schemaLocation\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"tag\"\u003e       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003edubbo:application\u003c/span\u003e \u003cspan class=\"attr\"\u003ename\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;demo-consumer\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003edubbo:registry\u003c/span\u003e \u003cspan class=\"attr\"\u003egroup\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;aaa\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003eaddress\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;zookeeper://127.0.0.1:2181\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003edubbo:reference\u003c/span\u003e \u003cspan class=\"attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;demoService\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003echeck\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;false\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003einterface\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;org.apache.dubbo.samples.basic.api.DemoService\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003ebeans\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"IDL-文件\"\u003e\u003ca href=\"#IDL-文件\" class=\"headerlink\" title=\"IDL 文件\"\u003e\u003c/a\u003eIDL 文件\u003c/h3\u003e\u003cp\u003eIDL 就是接口描述语言（interface description language）的缩写，通过一种中立的方式来描述接口，使得在不同的平台上运行的对象和不同语言编写的程序可以相互通信交流。\u003c/p\u003e\n\u003cp\u003e也就是说 IDL 主要是\u003cstrong\u003e用作跨语言平台的服务之间的调用\u003c/strong\u003e，有两种最常用的 IDL：一个是 Facebook 开源的\u003cstrong\u003eThrift 协议\u003c/strong\u003e，另一个是 Google 开源的\u003cstrong\u003egRPC 协议\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e以 gRPC 协议为例，gRPC 协议使用 Protobuf 简称 proto 文件来定义接口名、调用参数以及返回值类型。\u003c/p\u003e\n\u003cp\u003e比如文件 helloword.proto 定义了一个接口 SayHello 方法，它的请求参数是 HelloRequest，它的返回值是 HelloReply。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// The greeter service definition.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eservice Greeter {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// Sends a greeting\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  rpc \u003cspan class=\"title function_\"\u003eSayHello\u003c/span\u003e \u003cspan class=\"params\"\u003e(HelloRequest)\u003c/span\u003e returns (HelloReply) {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  rpc \u003cspan class=\"title function_\"\u003eSayHelloAgain\u003c/span\u003e \u003cspan class=\"params\"\u003e(HelloRequest)\u003c/span\u003e returns (HelloReply) {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// The request message containing the user\u0026#39;s name.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emessage HelloRequest {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003estring\u003c/span\u003e \u003cspan class=\"variable\"\u003ename\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// The response message containing the greetings\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emessage HelloReply {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003estring\u003c/span\u003e \u003cspan class=\"variable\"\u003emessage\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e假如服务提供者使用的是 Java 语言，那么利用 protoc 插件即可自动生成 Server 端的 Java 代码。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eGreeterImpl\u003c/span\u003e \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eGreeterGrpc\u003c/span\u003e.GreeterImplBase {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003esayHello\u003c/span\u003e\u003cspan class=\"params\"\u003e(HelloRequest req, StreamObserver\u0026lt;HelloReply\u0026gt; responseObserver)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eHelloReply\u003c/span\u003e \u003cspan class=\"variable\"\u003ereply\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e HelloReply.newBuilder().setMessage(\u003cspan class=\"string\"\u003e\u0026#34;Hello \u0026#34;\u003c/span\u003e + req.getName()).build();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    responseObserver.onNext(reply);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    responseObserver.onCompleted();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003esayHelloAgain\u003c/span\u003e\u003cspan class=\"params\"\u003e(HelloRequest req, StreamObserver\u0026lt;HelloReply\u0026gt; responseObserver)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eHelloReply\u003c/span\u003e \u003cspan class=\"variable\"\u003ereply\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e HelloReply.newBuilder().setMessage(\u003cspan class=\"string\"\u003e\u0026#34;Hello again \u0026#34;\u003c/span\u003e + req.getName()).build();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    responseObserver.onNext(reply);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    responseObserver.onCompleted();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e假如服务消费者使用的也是 Java 语言，那么利用 protoc 插件即可自动生成 Client 端的 Java 代码。\u003c/p\u003e\n\u003cfigure class=\"highlight pgsql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003epublic\u003c/span\u003e \u003cspan class=\"type\"\u003evoid\u003c/span\u003e greet(String \u003cspan class=\"type\"\u003ename\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  logger.\u003cspan class=\"keyword\"\u003einfo\u003c/span\u003e(\u0026#34;Will try to greet \u0026#34; + \u003cspan class=\"type\"\u003ename\u003c/span\u003e + \u0026#34; ...\u0026#34;);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  HelloRequest request = HelloRequest.newBuilder().setName(\u003cspan class=\"type\"\u003ename\u003c/span\u003e).build();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  HelloReply response;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  try {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    response = blockingStub.sayHello(request);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  } catch (StatusRuntimeException e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    logger.log(\u003cspan class=\"keyword\"\u003eLevel\u003c/span\u003e.\u003cspan class=\"built_in\"\u003eWARNING\u003c/span\u003e, \u0026#34;RPC failed: {0}\u0026#34;, e.getStatus());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  logger.\u003cspan class=\"keyword\"\u003einfo\u003c/span\u003e(\u0026#34;Greeting: \u0026#34; + response.getMessage());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  try {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    response = blockingStub.sayHelloAgain(request);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  } catch (StatusRuntimeException e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    logger.log(\u003cspan class=\"keyword\"\u003eLevel\u003c/span\u003e.\u003cspan class=\"built_in\"\u003eWARNING\u003c/span\u003e, \u0026#34;RPC failed: {0}\u0026#34;, e.getStatus());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  logger.\u003cspan class=\"keyword\"\u003einfo\u003c/span\u003e(\u0026#34;Greeting: \u0026#34; + response.getMessage());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e假如服务消费者使用的是其他语言，也可以利用相应的插件生成代码。\u003c/p\u003e\n\u003cp\u003e由此可见，gRPC 协议的服务描述是通过 proto 文件来定义接口的，然后再使用 protoc 来生成不同语言平台的客户端和服务端代码，从而具备跨语言服务调用能力。\u003c/p\u003e\n\u003cp\u003e有一点特别需要注意的是，在描述接口定义时，IDL 文件需要对接口返回值进行详细定义。如果接口返回值的字段比较多，并且经常变化时，采用 IDL 文件方式的接口定义就不太合适了。一方面可能会造成 IDL 文件过大难以维护，另一方面只要 IDL 文件中定义的接口返回值有变更，都需要同步所有的服务消费者都更新，管理成本就太高了。\u003c/p\u003e\n\u003ch2 id=\"服务注册和发现基本原理\"\u003e\u003ca href=\"#服务注册和发现基本原理\" class=\"headerlink\" title=\"服务注册和发现基本原理\"\u003e\u003c/a\u003e服务注册和发现基本原理\u003c/h2\u003e\u003cp\u003e服务发现通常依赖于\u003cstrong\u003e注册中心\u003c/strong\u003e来协调服务发现的过程，其步骤如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e服务提供者将接口信息以注册到注册中心。\u003c/li\u003e\n\u003cli\u003e服务消费者从注册中心读取和订阅服务提供者的地址信息。\u003c/li\u003e\n\u003cli\u003e如果有可用的服务，注册中心会主动通知服务消费者。\u003c/li\u003e\n\u003cli\u003e服务消费者根据可用服务的地址列表，调用服务提供者的接口。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e这个过程很像是生活中的房屋租赁，房东将租房信息挂到中介公司，房客从中介公司查找租房信息。房客如果想要租房东的房子，通过中介公司牵线搭桥，联系上房东，双方谈妥签订协议，就可以正式建立起租赁关系。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220415171843.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e主流的服务注册与发现的解决方案，主要有两种：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e应用内注册与发现\u003c/strong\u003e：注册中心提供服务端和客户端的 SDK，业务应用通过引入注册中心提供的 SDK，通过 SDK 与注册中心交互，来实现服务的注册和发现。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e应用外注册与发现\u003c/strong\u003e：业务应用本身不需要通过 SDK 与注册中心打交道，而是通过其他方式与注册中心交互，间接完成服务注册与发现。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"应用内注册与发现\"\u003e\u003ca href=\"#应用内注册与发现\" class=\"headerlink\" title=\"应用内注册与发现\"\u003e\u003c/a\u003e应用内注册与发现\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e应用内注册与发现\u003c/strong\u003e方案是：注册中心提供服务端和客户端的 SDK，业务应用通过引入注册中心提供的 SDK，通过 SDK 与注册中心交互，来实现服务的注册和发现。最典型的案例要属 Netflix 开源的 Eureka，官方架构图如下：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220418204148.jfif\"/\u003e\u003c/p\u003e\n\u003cp\u003eEureka 的架构主要由三个重要的组件组成：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEureka Server\u003c/strong\u003e：注册中心的服务端，实现了服务信息注册、存储以及查询等功能。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e服务端的 Eureka Client\u003c/strong\u003e：集成在服务端的注册中心 SDK，服务提供者通过调用 SDK，实现服务注册、反注册等功能。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e客户端的 Eureka Client\u003c/strong\u003e：集成在客户端的注册中心 SDK，服务消费者通过调用 SDK，实现服务订阅、服务更新等功能。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"应用外注册与发现\"\u003e\u003ca href=\"#应用外注册与发现\" class=\"headerlink\" title=\"应用外注册与发现\"\u003e\u003c/a\u003e应用外注册与发现\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e应用外注册与发现\u003c/strong\u003e方案是：业务应用本身不需要通过 SDK 与注册中心打交道，而是通过其他方式与注册中心交互，间接完成服务注册与发现。最典型的案例是开源注册中心 Consul。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220418204352.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eConsul 实现应用外服务注册和发现主要依靠三个重要的组件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eConsul：注册中心的服务端，实现服务注册信息的存储，并提供注册和发现服务。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/gliderlabs/registrator\"\u003eRegistrator\u003c/a\u003e：一个开源的第三方服务管理器项目，它通过监听服务部署的 Docker 实例是否存活，来负责服务提供者的注册和销毁。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/hashicorp/consul-template\"\u003eConsul Template\u003c/a\u003e：定时从注册中心服务端获取最新的服务提供者节点列表并刷新 LB 配置（比如 Nginx 的 upstream），这样服务消费者就通过访问 Nginx 就可以获取最新的服务提供者信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"注册中心基本功能\"\u003e\u003ca href=\"#注册中心基本功能\" class=\"headerlink\" title=\"注册中心基本功能\"\u003e\u003c/a\u003e注册中心基本功能\u003c/h2\u003e\u003cp\u003e从服务注册和发现的流程，可以看出，\u003cstrong\u003e注册中心是服务发现的核心组件\u003c/strong\u003e。常见的注册中心组件有：Nacos、Consul、Zookeeper 等。\u003c/p\u003e\n\u003cp\u003e注册中心是用来存储服务的元数据信息。服务的元数据信息通常有以下信息：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务节点信息，如 IP、端口等。\u003c/li\u003e\n\u003cli\u003e接口定义，如接口名、请求参数、响应参数等。\u003c/li\u003e\n\u003cli\u003e请求失败的重试次数\u003c/li\u003e\n\u003cli\u003e序列化方式\u003c/li\u003e\n\u003cli\u003e压缩方式\u003c/li\u003e\n\u003cli\u003e通信协议\u003c/li\u003e\n\u003cli\u003e等等\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在具体存储时，一般会按照“服务 - 分组 - 节点信息”三层结构来存储。\u003c/p\u003e\n\u003cp\u003e注册中心的实现主要涉及几个问题：注册中心需要提供哪些接口，该如何部署；如何存储服务信息；如何监控服务提供者节点的存活；如果服务提供者节点有变化如何通知服务消费者，以及如何控制注册中心的访问权限。\u003c/p\u003e\n\u003ch3 id=\"注册中心-API\"\u003e\u003ca href=\"#注册中心-API\" class=\"headerlink\" title=\"注册中心 API\"\u003e\u003c/a\u003e注册中心 API\u003c/h3\u003e\u003cp\u003e根据注册中心原理的描述，注册中心必须提供以下最基本的 API，例如：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e服务注册接口\u003c/strong\u003e：服务提供者通过调用服务注册接口来完成服务注册。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e服务反注册接口\u003c/strong\u003e：服务提供者通过调用服务反注册接口来完成服务注销。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e心跳汇报接口\u003c/strong\u003e：服务提供者通过调用心跳汇报接口完成节点存活状态上报。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e服务订阅接口\u003c/strong\u003e：服务消费者通过调用服务订阅接口完成服务订阅，获取可用的服务提供者节点列表。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e服务变更查询接口\u003c/strong\u003e：服务消费者通过调用服务变更查询接口，获取最新的可用服务节点列表。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e除此之外，为了便于管理，注册中心还必须提供一些后台管理的 API，例如：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e服务查询接口\u003c/strong\u003e：查询注册中心当前注册了哪些服务信息。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e服务修改接口\u003c/strong\u003e：修改注册中心中某一服务的信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"集群部署\"\u003e\u003ca href=\"#集群部署\" class=\"headerlink\" title=\"集群部署\"\u003e\u003c/a\u003e集群部署\u003c/h3\u003e\u003cp\u003e注册中心作为服务提供者和服务消费者之间沟通的桥梁，它的重要性不言而喻。所以注册中心一般都是采用集群部署来保证高可用性，并通过分布式一致性协议来确保集群中不同节点之间的数据保持一致。\u003c/p\u003e\n\u003cp\u003e以开源注册中心 ZooKeeper 为例，ZooKeeper 集群中包含多个节点，服务提供者和服务消费者可以同任意一个节点通信，因为它们的数据一定是相同的，这是为什么呢？这就要从 ZooKeeper 的工作原理说起：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e每个 Server 在内存中存储了一份数据，Client 的读请求可以请求任意一个 Server。\u003c/li\u003e\n\u003cli\u003eZooKeeper 启动时，将从实例中选举一个 leader（Paxos 协议）。\u003c/li\u003e\n\u003cli\u003eLeader 负责处理数据更新等操作（ZAB 协议）。\u003c/li\u003e\n\u003cli\u003e一个更新操作成功，当且仅当大多数 Server 在内存中成功修改 。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e通过上面这种方式，ZooKeeper 保证了高可用性以及数据一致性。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/distributed/rpc/zookeeper/zookeeper_3.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"元数据存储\"\u003e\u003ca href=\"#元数据存储\" class=\"headerlink\" title=\"元数据存储\"\u003e\u003c/a\u003e元数据存储\u003c/h3\u003e\u003cp\u003e注册中心存储服务信息一般采用层次化的目录结构，以 ZooKeeper 为例：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e每个目录在 ZooKeeper 中叫作 znode，并且其有一个唯一的路径标识。\u003c/li\u003e\n\u003cli\u003eznode 可以包含数据和子 znode。\u003c/li\u003e\n\u003cli\u003eznode 中的数据可以有多个版本，比如某一个 znode 下存有多个数据版本，那么查询这个路径下的数据需带上版本信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/distributed/rpc/zookeeper/zookeeper_1.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"白名单机制\"\u003e\u003ca href=\"#白名单机制\" class=\"headerlink\" title=\"白名单机制\"\u003e\u003c/a\u003e白名单机制\u003c/h3\u003e\u003cp\u003e在实际的微服务测试和部署时，通常包含多套环境，比如生产环境一套、测试环境一套。开发在进行业务自测、测试在进行回归测试时，一般都是用测试环境，部署的 RPC Server 节点注册到测试的注册中心集群。但经常会出现开发或者测试在部署时，错误的把测试环境下的服务节点注册到了线上注册中心集群，这样的话线上流量就会调用到测试环境下的 RPC Server 节点，可能会造成意想不到的后果。\u003c/p\u003e\n\u003cp\u003e为了防止这种情况发生，注册中心需要提供一个保护机制，你可以把注册中心想象成一个带有门禁的房间，只有拥有门禁卡的 RPC Server 才能进入。在实际应用中，注册中心可以提供一个白名单机制，只有添加到注册中心白名单内的 RPC Server，才能够调用注册中心的注册接口，这样的话可以避免测试环境中的节点意外跑到线上环境中去。\u003c/p\u003e\n\u003ch2 id=\"服务健康检测\"\u003e\u003ca href=\"#服务健康检测\" class=\"headerlink\" title=\"服务健康检测\"\u003e\u003c/a\u003e服务健康检测\u003c/h2\u003e\u003cp\u003e注册中心除了要支持最基本的服务注册和服务订阅功能以外，还必须具备对服务提供者节点的健康状态检测功能，这样才能保证注册中心里保存的服务节点都是可用的。\u003c/p\u003e\n\u003cp\u003e还是以 ZooKeeper 为例，它是基于 ZooKeeper 客户端和服务端的长连接和会话超时控制机制，来实现服务健康状态检测的。\u003c/p\u003e\n\u003cp\u003e在 ZooKeeper 中，客户端和服务端建立连接后，会话也随之建立，并生成一个全局唯一的 Session ID。服务端和客户端维持的是一个长连接，在 SESSION_TIMEOUT 周期内，服务端会检测与客户端的链路是否正常，具体方式是通过客户端定时向服务端发送心跳消息（ping 消息），服务器重置下次 SESSION_TIMEOUT 时间。如果超过 SESSION_TIMEOUT 后服务端都没有收到客户端的心跳消息，则服务端认为这个 Session 就已经结束了，ZooKeeper 就会认为这个服务节点已经不可用，将会从注册中心中删除其信息。\u003c/p\u003e\n\u003ch3 id=\"服务状态变更通知\"\u003e\u003ca href=\"#服务状态变更通知\" class=\"headerlink\" title=\"服务状态变更通知\"\u003e\u003c/a\u003e服务状态变更通知\u003c/h3\u003e\u003cp\u003e一旦注册中心探测到有服务提供者节点新加入或者被剔除，就必须立刻通知所有订阅该服务的服务消费者，刷新本地缓存的服务节点信息，确保服务调用不会请求不可用的服务提供者节点。\u003c/p\u003e\n\u003cp\u003e继续以 ZooKeeper 为例，基于 ZooKeeper 的 Watcher 机制，来实现服务状态变更通知给服务消费者的。服务消费者在调用 ZooKeeper 的 getData 方法订阅服务时，还可以通过监听器 Watcher 的 process 方法获取服务的变更，然后调用 getData 方法来获取变更后的数据，刷新本地缓存的服务节点信息。\u003c/p\u003e\n\u003ch3 id=\"心跳开关保护机制\"\u003e\u003ca href=\"#心跳开关保护机制\" class=\"headerlink\" title=\"心跳开关保护机制\"\u003e\u003c/a\u003e心跳开关保护机制\u003c/h3\u003e\u003cp\u003e在网络频繁抖动的情况下，注册中心中可用的节点会不断变化，这时候服务消费者会频繁收到服务提供者节点变更的信息，于是就不断地请求注册中心来拉取最新的可用服务节点信息。当有成百上千个服务消费者，同时请求注册中心获取最新的服务提供者的节点信息时，可能会把注册中心的带宽给占满，尤其是注册中心是百兆网卡的情况下。\u003c/p\u003e\n\u003cp\u003e针对这种情况，\u003cstrong\u003e需要一种保护机制，即使在网络频繁抖动的时候，服务消费者也不至于同时去请求注册中心获取最新的服务节点信息\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e一个可行的解决方案就是给注册中心设置一个开关，当开关打开时，即使网络频繁抖动，注册中心也不会通知所有的服务消费者有服务节点信息变更，比如只给 10% 的服务消费者返回变更，这样的话就能将注册中心的请求量减少到原来的 1/10。当然打开这个开关也是有一定代价的，它会导致服务消费者感知最新的服务节点信息延迟，原先可能在 10s 内就能感知到服务提供者节点信息的变更，现在可能会延迟到几分钟，所以在网络正常的情况下，开关并不适合打开；可以作为一个紧急措施，在网络频繁抖动的时候，才打开这个开关。\u003c/p\u003e\n\u003cp\u003e心跳开关保护机制，是为了防止服务提供者节点频繁变更导致的服务消费者同时去注册中心获取最新服务节点信息。\u003c/p\u003e\n\u003ch3 id=\"服务节点摘除保护机制\"\u003e\u003ca href=\"#服务节点摘除保护机制\" class=\"headerlink\" title=\"服务节点摘除保护机制\"\u003e\u003c/a\u003e服务节点摘除保护机制\u003c/h3\u003e\u003cp\u003e服务提供者在进程启动时，会注册服务到注册中心，并每隔一段时间，汇报心跳给注册中心，以标识自己的存活状态。如果隔了一段固定时间后，服务提供者仍然没有汇报心跳给注册中心，注册中心就会认为该节点已经处于“dead”状态，于是从服务的可用节点信息中移除出去。\u003c/p\u003e\n\u003cp\u003e如果遇到网络问题，大批服务提供者节点汇报给注册中心的心跳信息都可能会传达失败，注册中心就会把它们都从可用节点列表中移除出去，造成剩下的可用节点难以承受所有的调用，引起“雪崩”。但是这种情况下，可能大部分服务提供者节点是可用的，仅仅因为网络原因无法汇报心跳给注册中心就被“无情”的摘除了。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e这个时候就需要根据实际业务的情况，设定一个阈值比例，即使遇到刚才说的这种情况，注册中心也不能摘除超过这个阈值比例的节点\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e这个阈值比例可以根据实际业务的冗余度来确定，我通常会把这个比例设定在 20%，就是说注册中心不能摘除超过 20% 的节点。因为大部分情况下，节点的变化不会这么频繁，只有在网络抖动或者业务明确要下线大批量节点的情况下才有可能发生。而业务明确要下线大批量节点的情况是可以预知的，这种情况下可以关闭阈值保护；而正常情况下，应该打开阈值保护，以防止网络抖动时，大批量可用的服务节点被摘除。\u003c/p\u003e\n\u003cp\u003e服务节点摘除保护机制，是为了防止服务提供者节点被大量摘除引起服务消费者可以调用的节点不足。\u003c/p\u003e\n\u003ch3 id=\"静态注册中心\"\u003e\u003ca href=\"#静态注册中心\" class=\"headerlink\" title=\"静态注册中心\"\u003e\u003c/a\u003e静态注册中心\u003c/h3\u003e\u003cp\u003e因为服务提供者是向服务消费者提供服务的，是否可用服务消费者应该比注册中心更清楚，因此可以直接在服务消费者端根据调用服务提供者是否成功来判定服务提供者是否可用。如果服务消费者调用某一个服务提供者节点连续失败超过一定次数，可以在本地内存中将这个节点标记为不可用。并且每隔一段固定时间，服务消费者都要向标记为不可用的节点发起保活探测，如果探测成功了，就将标记为不可用的节点再恢复为可用状态，重新发起调用。\u003c/p\u003e\n\u003ch2 id=\"注册中心选型\"\u003e\u003ca href=\"#注册中心选型\" class=\"headerlink\" title=\"注册中心选型\"\u003e\u003c/a\u003e注册中心选型\u003c/h2\u003e\u003cp\u003e注册中心选型时最需要关注两个问题：\u003cstrong\u003e高可用性\u003c/strong\u003e和\u003cstrong\u003e数据一致性\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"高可用性\"\u003e\u003ca href=\"#高可用性\" class=\"headerlink\" title=\"高可用性\"\u003e\u003c/a\u003e高可用性\u003c/h3\u003e\u003cp\u003e注册中心作为服务提供者和服务消费者之间沟通的纽带，它的高可用性十分重要。如果注册中心不可用了，那么服务提供者就无法对外暴露自己的服务，而服务消费者也无法知道自己想要调用的服务的具体地址。\u003c/p\u003e\n\u003cp\u003e实现高可用性的手段主要有两种\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e集群部署\u003c/strong\u003e，即使有部分机器宕机，将请求分发到正常的机器上就可以保证服务的正常访问。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e多机房部署\u003c/strong\u003e，避免一个机房因为断电或者光缆被挖断等不可抗力因素不可用时，仍然可以通过把请求迁移到其他机房来保证服务的正常访问。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这两种手段本质上都是服务冗余。\u003c/p\u003e\n\u003ch3 id=\"数据一致性\"\u003e\u003ca href=\"#数据一致性\" class=\"headerlink\" title=\"数据一致性\"\u003e\u003c/a\u003e数据一致性\u003c/h3\u003e\u003ch2 id=\"服务发现的问题\"\u003e\u003ca href=\"#服务发现的问题\" class=\"headerlink\" title=\"服务发现的问题\"\u003e\u003c/a\u003e服务发现的问题\u003c/h2\u003e\u003ch3 id=\"多注册中心\"\u003e\u003ca href=\"#多注册中心\" class=\"headerlink\" title=\"多注册中心\"\u003e\u003c/a\u003e多注册中心\u003c/h3\u003e\u003cp\u003e理想情况下，如果始终只有一个注册中心，那么整个交互非常简单。但在实际工作中，往往需要对接多个注册中心，常见场景如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e服务消费者订阅多个注册中心\u003c/strong\u003e：服务消费者可能订阅了多个服务，多个服务可能是由多个业务部门提供的，而且每个业务部门都有自己的注册中心，提供的服务只在自己的注册中心里有记录。这就要求服务消费者要具备在启动时，能够从多个注册中心订阅服务的能力。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e服务提供者注册多个注册中心\u003c/strong\u003e：一个服务提供者提供了某个服务，可能作为静态服务对外提供，也可能作为动态服务对外提供，这两个服务部署在不同的注册中心，所以要求服务提供者在启动的时候，要能够同时向多个注册中心注册服务。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"并行订阅服务\"\u003e\u003ca href=\"#并行订阅服务\" class=\"headerlink\" title=\"并行订阅服务\"\u003e\u003c/a\u003e并行订阅服务\u003c/h3\u003e\u003cp\u003e通常一个服务消费者订阅了不止一个服务。如果采用串行订阅方式，即每订阅一个服务，服务消费者就调用一次注册中心的订阅接口，获取这个服务的节点列表并初始化连接，就可能要执行很多次这样的过程。在某些服务节点的初始化连接过程中，出现连接超时的情况，后续所有的服务节点的初始化连接都需要等待它完成，导致服务消费者启动变慢，最后耗费了将近五分钟时间来完成所有服务节点的初始化连接过程。\u003c/p\u003e\n\u003cp\u003e由于以上问题，所以服务发现应该支持并行订阅，每订阅一个服务就单独用一个线程来处理，这样的话即使遇到个别服务节点连接超时，其他服务节点的初始化连接也不受影响，最慢也就是这个服务节点的初始化连接耗费的时间，最终所有服务节点的初始化连接耗时控制在一个可以接受的时间范围内。\u003c/p\u003e\n\u003ch3 id=\"批量注销服务\"\u003e\u003ca href=\"#批量注销服务\" class=\"headerlink\" title=\"批量注销服务\"\u003e\u003c/a\u003e批量注销服务\u003c/h3\u003e\u003cp\u003e通常一个服务提供者节点提供不止一个服务，所以注册和反注册都需要多次调用注册中心。在与注册中心的多次交互中，可能由于网络抖动、注册中心集群异常等原因，导致个别调用失败。对于注册中心来说，偶发的注册调用失败对服务调用基本没有影响，其结果顶多就是某一个服务少了一个可用的节点。但偶发的反注册调用失败会导致不可用的节点残留在注册中心中，变成“僵尸节点”，但服务消费者端还会把它当成“活节点”，继续发起调用，最终导致调用失败。\u003c/p\u003e\n\u003cp\u003e可以通过调用注册中心提供的批量反注册接口，一次调用就可以把该节点上提供的所有服务同时注销掉，从而避免了“僵尸节点”的出现。\u003c/p\u003e\n\u003ch3 id=\"服务变更信息的增量更新\"\u003e\u003ca href=\"#服务变更信息的增量更新\" class=\"headerlink\" title=\"服务变更信息的增量更新\"\u003e\u003c/a\u003e服务变更信息的增量更新\u003c/h3\u003e\u003cp\u003e服务消费者端启动时，除了会查询订阅服务的可用节点列表做初始化连接，还会订阅服务的变更，每隔一段时间从注册中心获取最新的服务节点信息标记 sign，并与本地保存的 sign 值作比对，如果不一样，就会调用注册中心获取最新的服务节点信息。\u003c/p\u003e\n\u003cp\u003e一般情况下，按照这个过程是没问题的，但是在网络频繁抖动时，服务提供者上报给注册中心的心跳可能会一会儿失败一会儿成功，这时候注册中心就会频繁更新服务的可用节点信息，导致服务消费者频繁从注册中心拉取最新的服务可用节点信息，严重时可能产生网络风暴，导致注册中心带宽被打满。\u003c/p\u003e\n\u003cp\u003e为了减少服务消费者从注册中心中拉取的服务可用节点信息的数据量，这个时候可以通过增量更新的方式，注册中心只返回变化的那部分节点信息，尤其在只有少数节点信息变更时，此举可以大大减少服务消费者从注册中心拉取的数据量，从而最大程度避免产生网络风暴。\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100014401\"\u003e从 0 开始学微服务\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100046201\"\u003eRPC 实战与核心原理\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/course/intro/100003901\"\u003e微服务架构核心 20 讲\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-04-18T11:34:47Z",
  "Author": "钝悟 ◾ Dunwu"
}