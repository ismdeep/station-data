{
  "Source": "dunwu",
  "Title": "复杂度分析",
  "Link": "https://dunwu.github.io/blog/pages/cba821/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"复杂度分析\"\u003e\u003ca href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"\u003e\u003c/a\u003e复杂度分析\u003c/h1\u003e\u003ch2 id=\"为什么需要复杂度分析\"\u003e\u003ca href=\"#为什么需要复杂度分析\" class=\"headerlink\" title=\"为什么需要复杂度分析\"\u003e\u003c/a\u003e为什么需要复杂度分析\u003c/h2\u003e\u003cp\u003e衡量算法的优劣，有两种评估方式：事前估计和后期测试。\u003c/p\u003e\n\u003cp\u003e后期测试有性能测试、基准测试（Benchmark）等手段。\u003c/p\u003e\n\u003cp\u003e但是，后期测试有以下限制：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e测试结果非常依赖测试环境\u003c/strong\u003e。如：不同机型、不同编译器版本、不同硬件配置等等，都会影响测试结果。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e测试结果受数据规模的影响很大\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以，需要一种方法，可以不受环境或数据规模的影响，粗略地估计算法的执行效率。这种方法就是复杂度分析。\u003c/p\u003e\n\u003ch2 id=\"时间复杂度分析\"\u003e\u003ca href=\"#时间复杂度分析\" class=\"headerlink\" title=\"时间复杂度分析\"\u003e\u003c/a\u003e时间复杂度分析\u003c/h2\u003e\u003ch3 id=\"大-O-表示法\"\u003e\u003ca href=\"#大-O-表示法\" class=\"headerlink\" title=\"大 O 表示法\"\u003e\u003c/a\u003e大 O 表示法\u003c/h3\u003e\u003cp\u003e假设问题的规模为 n，则程序的时间复杂度表示为 \u003ccode\u003eT(n)\u003c/code\u003e。\u003cstrong\u003e代码的执行时间 T(n) 与每行代码的执行次数 n 成正比\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e当 n 增大时，T(n) 也随之增大，想要准确估计其变化比较困难。所以，可以采用大 O 时间复杂度来粗略估计其复杂度，其表达式为：**\u003ccode\u003eT(n) = O(f(n))\u003c/code\u003e**。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e大 O 表示法\u003c/strong\u003e实际上并不具体表示代码真正的执行时间，而是表示\u003cstrong\u003e代码执行时间随数据规模增长的变化趋势\u003c/strong\u003e，所以，也叫作\u003cstrong\u003e渐进时间复杂度\u003c/strong\u003e（asymptotic time complexity），简称\u003cstrong\u003e时间复杂度\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"时间复杂度分析的要点\"\u003e\u003ca href=\"#时间复杂度分析的要点\" class=\"headerlink\" title=\"时间复杂度分析的要点\"\u003e\u003c/a\u003e时间复杂度分析的要点\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e只关注循环执行次数最多的一段代码\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e加法法则：总复杂度等于量级最大的那段代码的复杂度\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"最好、最坏和平均情况\"\u003e\u003ca href=\"#最好、最坏和平均情况\" class=\"headerlink\" title=\"最好、最坏和平均情况\"\u003e\u003c/a\u003e最好、最坏和平均情况\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e最好情况时间复杂度\u003c/strong\u003e（best case time complexity）：\u003cstrong\u003e在最理想的情况下，执行代码的时间复杂度\u003c/strong\u003e。例如：在最理想的情况下，要查找的变量 x 正好是数组的第一个元素，此时最好情况时间复杂度为 1。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e最坏情况时间复杂度\u003c/strong\u003e（worst case time complexity）：\u003cstrong\u003e在最糟糕的情况下，执行代码的时间复杂度\u003c/strong\u003e。例如：在最理想的情况下，要查找的变量 x 正好是数组的最后个元素，此时最好情况时间复杂度为 n。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e平均情况时间复杂度\u003c/strong\u003e（average case time complexity）：平均时间复杂度的全称应该叫\u003cstrong\u003e加权平均时间复杂度\u003c/strong\u003e或者\u003cstrong\u003e期望时间复杂度\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"时间复杂度分析示例\"\u003e\u003ca href=\"#时间复杂度分析示例\" class=\"headerlink\" title=\"时间复杂度分析示例\"\u003e\u003c/a\u003e时间复杂度分析示例\u003c/h3\u003e\u003cp\u003e【示例】从 1 累加到 100 的时间复杂度是多少？\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003esum\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eN\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e100\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e; i \u0026lt;= N; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    sum = sum + i;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e时间复杂度计算：显然，这段代码执行了 100 次加法，其时间复杂度和 N 的大小完全一致\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"title\"\u003eT\u003c/span\u003e\u003cspan class=\"params\"\u003e(n)\u003c/span\u003e\u003c/span\u003e = \u003cspan class=\"built_in\"\u003eO\u003c/span\u003e(n)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【示例】嵌套循环的时间复杂度是多少？\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eM\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e10\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eN\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e20\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e; i \u0026lt; M; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ej\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e; j \u0026lt; N; j++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;i = \u0026#34;\u003c/span\u003e + i + \u003cspan class=\"string\"\u003e\u0026#34;, j = \u0026#34;\u003c/span\u003e + j);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e时间复杂度计算：\u003c/p\u003e\n\u003cfigure class=\"highlight excel\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eT\u003c/span\u003e(\u003cspan class=\"built_in\"\u003en\u003c/span\u003e) = (M-\u003cspan class=\"number\"\u003e1\u003c/span\u003e)(\u003cspan class=\"built_in\"\u003eN\u003c/span\u003e-\u003cspan class=\"number\"\u003e1\u003c/span\u003e) = O(M*\u003cspan class=\"built_in\"\u003eN\u003c/span\u003e) ≈ O(\u003cspan class=\"built_in\"\u003eN\u003c/span\u003e^\u003cspan class=\"number\"\u003e2\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【示例】递归函数的时间复杂度是多少？思考一下斐波那契数列 \u003ccode\u003ef(n) = f(n-1) + f(n-2)\u003c/code\u003e 的时间复杂度是多少？\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220320110642.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"title\"\u003eT\u003c/span\u003e\u003cspan class=\"params\"\u003e(n)\u003c/span\u003e\u003c/span\u003e = \u003cspan class=\"built_in\"\u003eO\u003c/span\u003e(\u003cspan class=\"number\"\u003e2\u003c/span\u003e^N)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"空间复杂度分析\"\u003e\u003ca href=\"#空间复杂度分析\" class=\"headerlink\" title=\"空间复杂度分析\"\u003e\u003c/a\u003e空间复杂度分析\u003c/h2\u003e\u003cp\u003e时间复杂度的全称是\u003cstrong\u003e渐进时间复杂度\u003c/strong\u003e，\u003cstrong\u003e表示算法的执行时间与数据规模之间的增长关系\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e类比一下，空间复杂度全称就是\u003cstrong\u003e渐进空间复杂度\u003c/strong\u003e（asymptotic space complexity），\u003cstrong\u003e表示算法的存储空间与数据规模之间的增长关系\u003c/strong\u003e。\u003c/p\u003e\n\u003ch2 id=\"复杂度量级\"\u003e\u003ca href=\"#复杂度量级\" class=\"headerlink\" title=\"复杂度量级\"\u003e\u003c/a\u003e复杂度量级\u003c/h2\u003e\u003cp\u003e复杂度有以下量级：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e**\u003ccode\u003eO(1)\u003c/code\u003e**：常数复杂度\u003c/li\u003e\n\u003cli\u003e**\u003ccode\u003eO(log n)\u003c/code\u003e**：对数复杂度\u003c/li\u003e\n\u003cli\u003e**\u003ccode\u003eO(n)\u003c/code\u003e**：线性复杂度\u003c/li\u003e\n\u003cli\u003e**\u003ccode\u003eO(nlog n)\u003c/code\u003e**：线性对数阶复杂度\u003c/li\u003e\n\u003cli\u003e**\u003ccode\u003eO(n^2)\u003c/code\u003e**：平方复杂度\u003c/li\u003e\n\u003cli\u003e**\u003ccode\u003eO(n^3)\u003c/code\u003e**：立方复杂度\u003c/li\u003e\n\u003cli\u003e**\u003ccode\u003eO(n^k)\u003c/code\u003e**：K 次方复杂度\u003c/li\u003e\n\u003cli\u003e**\u003ccode\u003eO(2^n)\u003c/code\u003e**：指数复杂度\u003c/li\u003e\n\u003cli\u003e**\u003ccode\u003eO(n!)\u003c/code\u003e**：阶乘复杂度\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在数据量比较小的时候，复杂度量级差异并不明显；但是，随着数据规模大小的变化，差异会逐渐突出。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220320160627.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eO(1)\u003c/code\u003e 复杂度示例：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003enum\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e100\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSystem.out.println(\u003cspan class=\"string\"\u003e\u0026#34;num = \u0026#34;\u003c/span\u003e + num);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eO(log n)\u003c/code\u003e 对数复杂度示例：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003emax\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e100\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e; i \u0026lt; max; i = i * \u003cspan class=\"number\"\u003e2\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;i = \u0026#34;\u003c/span\u003e + i);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eO(n)\u003c/code\u003e 复杂度示例：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003emax\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e100\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e; i \u0026lt; max; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;i = \u0026#34;\u003c/span\u003e + i);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eO(n^2)\u003c/code\u003e 复杂度示例：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eM\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e10\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eN\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e20\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e; i \u0026lt; M; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ej\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e; j \u0026lt; N; j++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;i = \u0026#34;\u003c/span\u003e + i + \u003cspan class=\"string\"\u003e\u0026#34;, j = \u0026#34;\u003c/span\u003e + j);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eO(k^n)\u003c/code\u003e 复杂度示例：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003emax\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e10\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e; i \u0026lt;= Math.pow(\u003cspan class=\"number\"\u003e2\u003c/span\u003e, max); i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;i = \u0026#34;\u003c/span\u003e + i);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"常见数据结构的复杂度\"\u003e\u003ca href=\"#常见数据结构的复杂度\" class=\"headerlink\" title=\"常见数据结构的复杂度\"\u003e\u003c/a\u003e常见数据结构的复杂度\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200702071922.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100017301\"\u003e数据结构与算法之美\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-03-20T15:25:17Z",
  "Author": "钝悟 ◾ Dunwu"
}