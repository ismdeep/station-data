{
  "Source": "dunwu",
  "Title": "Java 正则从入门到精通",
  "Link": "https://dunwu.github.io/blog/pages/4c1dd4/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Java-正则从入门到精通\"\u003e\u003ca href=\"#Java-正则从入门到精通\" class=\"headerlink\" title=\"Java 正则从入门到精通\"\u003e\u003c/a\u003eJava 正则从入门到精通\u003c/h1\u003e\u003cblockquote\u003e\n\u003cp\u003e关键词：Pattern、Matcher、捕获与非捕获、反向引用、零宽断言、贪婪与懒惰、元字符、DFA、NFA\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"正则简介\"\u003e\u003ca href=\"#正则简介\" class=\"headerlink\" title=\"正则简介\"\u003e\u003c/a\u003e正则简介\u003c/h2\u003e\u003ch3 id=\"正则表达式是什么\"\u003e\u003ca href=\"#正则表达式是什么\" class=\"headerlink\" title=\"正则表达式是什么\"\u003e\u003c/a\u003e正则表达式是什么\u003c/h3\u003e\u003cp\u003e正则表达式（Regular Expression）是一个用正则符号写出的公式，程序对这个公式进行语法分析，建立一个语法分析树，再根据这个分析树结合正则表达式的引擎生成执行程序（这个执行程序我们把它称作状态机，也叫状态自动机），用于字符匹配。\u003c/p\u003e\n\u003ch3 id=\"如何学习正则\"\u003e\u003ca href=\"#如何学习正则\" class=\"headerlink\" title=\"如何学习正则\"\u003e\u003c/a\u003e如何学习正则\u003c/h3\u003e\u003cp\u003e正则表达式是一个强大的文本匹配工具，但是它的规则很复杂，理解起来较为困难，容易让人望而生畏。\u003c/p\u003e\n\u003cp\u003e刚接触正则时，我看了一堆正则的语义说明，但是仍然不明所以。后来，我多接触一些正则的应用实例，渐渐有了感觉，再结合语义说明，终有领悟。我觉得正则表达式和武侠修练武功差不多，应该先练招式，再练心法。如果一开始就直接看正则的规则，保证你会懵逼。当你熟悉基本招式（正则基本使用案例）后，也该修炼修炼心法（正则语法）了。真正的高手不能只靠死记硬背那么几招把式。就像张三丰教张无忌太极拳一样，领悟心法，融会贯通，少侠你就可以无招胜有招，成为传说中的绝世高手。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e以上闲话可归纳为一句：学习正则应该从实例去理解规则。\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id=\"正则工具类\"\u003e\u003ca href=\"#正则工具类\" class=\"headerlink\" title=\"正则工具类\"\u003e\u003c/a\u003e正则工具类\u003c/h2\u003e\u003cp\u003eJDK 中的 \u003ccode\u003ejava.util.regex\u003c/code\u003e 包提供了对正则表达式的支持。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ejava.util.regex\u003c/code\u003e 有三个核心类：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePattern 类：\u003c/strong\u003e\u003ccode\u003ePattern\u003c/code\u003e 是一个正则表达式的编译表示。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMatcher 类：\u003c/strong\u003e\u003ccode\u003eMatcher\u003c/code\u003e 是对输入字符串进行解释和匹配操作的引擎。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePatternSyntaxException：\u003c/strong\u003e\u003ccode\u003ePatternSyntaxException\u003c/code\u003e 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e注：\u003c/strong\u003e需要格外注意一点，在 Java 中使用反斜杠”\\“时必须写成 \u003ccode\u003e\u0026#34;\\\\\u0026#34;\u003c/code\u003e。所以本文的代码出现形如 \u003ccode\u003eString regex = \u0026#34;\\\\$\\\\{.*?\\\\}\u0026#34;\u003c/code\u003e 其实就是 \u003ccode\u003e\\$\\{.\\*?\\}\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id=\"Pattern-类\"\u003e\u003ca href=\"#Pattern-类\" class=\"headerlink\" title=\"Pattern 类\"\u003e\u003c/a\u003ePattern 类\u003c/h3\u003e\u003cp\u003e\u003ccode\u003ePattern\u003c/code\u003e类没有公共构造方法。要创建一个\u003ccode\u003ePattern\u003c/code\u003e对象，你必须首先调用其\u003cstrong\u003e静态方法\u003c/strong\u003e\u003ccode\u003ecompile\u003c/code\u003e，加载正则规则字符串，然后返回一个 Pattern 对象。\u003c/p\u003e\n\u003cp\u003e与\u003ccode\u003ePattern\u003c/code\u003e类一样，\u003ccode\u003eMatcher\u003c/code\u003e类也没有公共构造方法。你需要调用\u003ccode\u003ePattern\u003c/code\u003e对象的\u003ccode\u003ematcher\u003c/code\u003e方法来获得一个\u003ccode\u003eMatcher\u003c/code\u003e对象。\u003c/p\u003e\n\u003cp\u003e【示例】Pattern 和 Matcher 的初始化\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003ePattern\u003c/span\u003e \u003cspan class=\"variable\"\u003ep\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Pattern.compile(regex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eMatcher\u003c/span\u003e \u003cspan class=\"variable\"\u003em\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e p.matcher(content);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"Matcher-类\"\u003e\u003ca href=\"#Matcher-类\" class=\"headerlink\" title=\"Matcher 类\"\u003e\u003c/a\u003eMatcher 类\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eMatcher\u003c/code\u003e 类可以说是 \u003ccode\u003ejava.util.regex\u003c/code\u003e 中的核心类，它有三类功能：校验、查找、替换。\u003c/p\u003e\n\u003ch4 id=\"校验\"\u003e\u003ca href=\"#校验\" class=\"headerlink\" title=\"校验\"\u003e\u003c/a\u003e校验\u003c/h4\u003e\u003cp\u003e为了校验文本是否与正则规则匹配，Matcher 提供了以下几个返回值为 \u003ccode\u003eboolean\u003c/code\u003e 的方法。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003cstrong\u003e序号\u003c/strong\u003e\u003c/th\u003e\n\u003cth\u003e\u003cstrong\u003e方法及说明\u003c/strong\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e**public boolean lookingAt() ** 尝试将从区域开头开始的输入序列与该模式匹配。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e**public boolean find() **尝试查找与该模式匹配的输入序列的下一个子序列。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003epublic boolean find(int start）\u003c/strong\u003e重置此匹配器，然后尝试查找匹配该模式、从指定索引开始的输入序列的下一个子序列。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003e**public boolean matches() **尝试将整个区域与模式匹配。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e如果你傻傻分不清上面的查找方法有什么区别，那么下面一个例子就可以让你秒懂。\u003c/p\u003e\n\u003cp\u003e【示例】lookingAt、find、matches\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tcheckLookingAt(\u003cspan class=\"string\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;helloworld\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tcheckLookingAt(\u003cspan class=\"string\"\u003e\u0026#34;world\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;helloworld\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tcheckFind(\u003cspan class=\"string\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;helloworld\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tcheckFind(\u003cspan class=\"string\"\u003e\u0026#34;world\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;helloworld\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tcheckMatches(\u003cspan class=\"string\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;helloworld\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tcheckMatches(\u003cspan class=\"string\"\u003e\u0026#34;world\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;helloworld\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tcheckMatches(\u003cspan class=\"string\"\u003e\u0026#34;helloworld\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;helloworld\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003echeckLookingAt\u003c/span\u003e\u003cspan class=\"params\"\u003e(String regex, String content)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003ePattern\u003c/span\u003e \u003cspan class=\"variable\"\u003ep\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Pattern.compile(regex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eMatcher\u003c/span\u003e \u003cspan class=\"variable\"\u003em\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e p.matcher(content);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (m.lookingAt()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(content + \u003cspan class=\"string\"\u003e\u0026#34;\\tlookingAt： \u0026#34;\u003c/span\u003e + regex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t} \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(content + \u003cspan class=\"string\"\u003e\u0026#34;\\tnot lookingAt： \u0026#34;\u003c/span\u003e + regex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003echeckFind\u003c/span\u003e\u003cspan class=\"params\"\u003e(String regex, String content)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003ePattern\u003c/span\u003e \u003cspan class=\"variable\"\u003ep\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Pattern.compile(regex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eMatcher\u003c/span\u003e \u003cspan class=\"variable\"\u003em\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e p.matcher(content);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (m.find()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(content + \u003cspan class=\"string\"\u003e\u0026#34;\\tfind： \u0026#34;\u003c/span\u003e + regex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t} \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(content + \u003cspan class=\"string\"\u003e\u0026#34;\\tnot find： \u0026#34;\u003c/span\u003e + regex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003echeckMatches\u003c/span\u003e\u003cspan class=\"params\"\u003e(String regex, String content)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003ePattern\u003c/span\u003e \u003cspan class=\"variable\"\u003ep\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Pattern.compile(regex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eMatcher\u003c/span\u003e \u003cspan class=\"variable\"\u003em\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e p.matcher(content);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (m.matches()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(content + \u003cspan class=\"string\"\u003e\u0026#34;\\tmatches： \u0026#34;\u003c/span\u003e + regex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t} \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(content + \u003cspan class=\"string\"\u003e\u0026#34;\\tnot matches： \u0026#34;\u003c/span\u003e + regex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e输出：\u003c/p\u003e\n\u003cfigure class=\"highlight xquery\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ehelloworld\tlookingAt： hello\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehelloworld\u003cspan class=\"built_in\"\u003e\tnot\u003c/span\u003e lookingAt： world\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehelloworld\tfind： hello\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehelloworld\tfind： world\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehelloworld\u003cspan class=\"built_in\"\u003e\tnot\u003c/span\u003e\u003cspan class=\"built_in\"\u003e matches\u003c/span\u003e： hello\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehelloworld\u003cspan class=\"built_in\"\u003e\tnot\u003c/span\u003e\u003cspan class=\"built_in\"\u003e matches\u003c/span\u003e： world\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehelloworld\u003cspan class=\"built_in\"\u003e\tmatches\u003c/span\u003e： helloworld\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eregex = \u0026#34;world\u0026#34;\u003c/code\u003e 表示的正则规则是以 world 开头的字符串，\u003ccode\u003eregex = \u0026#34;hello\u0026#34;\u003c/code\u003e 和 \u003ccode\u003eregex = \u0026#34;helloworld\u0026#34;\u003c/code\u003e 也是同理。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003elookingAt\u003c/code\u003e方法从头部开始，检查 content 字符串是否有子字符串于正则规则匹配。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efind\u003c/code\u003e方法检查 content 字符串是否有子字符串于正则规则匹配，不管字符串所在位置。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ematches\u003c/code\u003e方法检查 content 字符串整体是否与正则规则匹配。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"查找\"\u003e\u003ca href=\"#查找\" class=\"headerlink\" title=\"查找\"\u003e\u003c/a\u003e查找\u003c/h4\u003e\u003cp\u003e为了查找文本匹配正则规则的位置，\u003ccode\u003eMatcher\u003c/code\u003e提供了以下方法：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003cstrong\u003e序号\u003c/strong\u003e\u003c/th\u003e\n\u003cth\u003e\u003cstrong\u003e方法及说明\u003c/strong\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e**public int start() **返回以前匹配的初始索引。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003epublic int start(int group)\u003c/strong\u003e 返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003e**public int end()**返回最后匹配字符之后的偏移量。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003e**public int end(int group)**返回在以前的匹配操作期间，由给定组所捕获子序列的最后字符之后的偏移量。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003ctd\u003e**public String group()**返回前一个符合匹配条件的子序列。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e6\u003c/td\u003e\n\u003ctd\u003e**public String group(int group)**返回指定的符合匹配条件的子序列。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e【示例】使用 start()、end()、group() 查找所有匹配正则条件的子序列\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003eregex\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;world\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003econtent\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;helloworld helloworld\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003ePattern\u003c/span\u003e \u003cspan class=\"variable\"\u003ep\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Pattern.compile(regex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eMatcher\u003c/span\u003e \u003cspan class=\"variable\"\u003em\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e p.matcher(content);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tSystem.out.println(\u003cspan class=\"string\"\u003e\u0026#34;content: \u0026#34;\u003c/span\u003e + content);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (m.find()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\ti++;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(\u003cspan class=\"string\"\u003e\u0026#34;[\u0026#34;\u003c/span\u003e + i + \u003cspan class=\"string\"\u003e\u0026#34;th] found\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.print(\u003cspan class=\"string\"\u003e\u0026#34;start: \u0026#34;\u003c/span\u003e + m.start() + \u003cspan class=\"string\"\u003e\u0026#34;, \u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.print(\u003cspan class=\"string\"\u003e\u0026#34;end: \u0026#34;\u003c/span\u003e + m.end() + \u003cspan class=\"string\"\u003e\u0026#34;, \u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.print(\u003cspan class=\"string\"\u003e\u0026#34;group: \u0026#34;\u003c/span\u003e + m.group() + \u003cspan class=\"string\"\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003e输出\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight pgsql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003econtent: helloworld helloworld\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"number\"\u003e1\u003c/span\u003eth] \u003cspan class=\"built_in\"\u003efound\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003estart\u003c/span\u003e: \u003cspan class=\"number\"\u003e5\u003c/span\u003e, \u003cspan class=\"keyword\"\u003eend\u003c/span\u003e: \u003cspan class=\"number\"\u003e10\u003c/span\u003e, \u003cspan class=\"keyword\"\u003egroup\u003c/span\u003e: world\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"number\"\u003e2\u003c/span\u003eth] \u003cspan class=\"built_in\"\u003efound\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003estart\u003c/span\u003e: \u003cspan class=\"number\"\u003e16\u003c/span\u003e, \u003cspan class=\"keyword\"\u003eend\u003c/span\u003e: \u003cspan class=\"number\"\u003e21\u003c/span\u003e, \u003cspan class=\"keyword\"\u003egroup\u003c/span\u003e: world\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e例子很直白，不言自明了吧。\u003c/p\u003e\n\u003ch4 id=\"替换\"\u003e\u003ca href=\"#替换\" class=\"headerlink\" title=\"替换\"\u003e\u003c/a\u003e替换\u003c/h4\u003e\u003cp\u003e替换方法是替换输入字符串里文本的方法：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003cstrong\u003e序号\u003c/strong\u003e\u003c/th\u003e\n\u003cth\u003e\u003cstrong\u003e方法及说明\u003c/strong\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e**public Matcher appendReplacement(StringBuffer sb, String replacement)**实现非终端添加和替换步骤。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e**public StringBuffer appendTail(StringBuffer sb)**实现终端添加和替换步骤。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003e**public String replaceAll(String replacement) ** 替换模式与给定替换字符串相匹配的输入序列的每个子序列。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003epublic String replaceFirst(String replacement)\u003c/strong\u003e 替换模式与给定替换字符串匹配的输入序列的第一个子序列。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003ctd\u003e**public static String quoteReplacement(String s)**返回指定字符串的字面替换字符串。这个方法返回一个字符串，就像传递给 Matcher 类的 appendReplacement 方法一个字面字符串一样工作。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e【示例】replaceFirst 和 replaceAll\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003eregex\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;can\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003ereplace\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;can not\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003econtent\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;I can because I think I can.\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003ePattern\u003c/span\u003e \u003cspan class=\"variable\"\u003ep\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Pattern.compile(regex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eMatcher\u003c/span\u003e \u003cspan class=\"variable\"\u003em\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e p.matcher(content);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tSystem.out.println(\u003cspan class=\"string\"\u003e\u0026#34;content: \u0026#34;\u003c/span\u003e + content);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tSystem.out.println(\u003cspan class=\"string\"\u003e\u0026#34;replaceFirst: \u0026#34;\u003c/span\u003e + m.replaceFirst(replace));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tSystem.out.println(\u003cspan class=\"string\"\u003e\u0026#34;replaceAll: \u0026#34;\u003c/span\u003e + m.replaceAll(replace));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003e输出\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight mathematica\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003econtent\u003c/span\u003e\u003cspan class=\"operator\"\u003e:\u003c/span\u003e \u003cspan class=\"built_in\"\u003eI\u003c/span\u003e \u003cspan class=\"variable\"\u003ecan\u003c/span\u003e \u003cspan class=\"variable\"\u003ebecause\u003c/span\u003e \u003cspan class=\"built_in\"\u003eI\u003c/span\u003e \u003cspan class=\"variable\"\u003ethink\u003c/span\u003e \u003cspan class=\"built_in\"\u003eI\u003c/span\u003e \u003cspan class=\"variable\"\u003ecan\u003c/span\u003e\u003cspan class=\"operator\"\u003e.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003ereplaceFirst\u003c/span\u003e\u003cspan class=\"operator\"\u003e:\u003c/span\u003e \u003cspan class=\"built_in\"\u003eI\u003c/span\u003e \u003cspan class=\"variable\"\u003ecan\u003c/span\u003e \u003cspan class=\"variable\"\u003enot\u003c/span\u003e \u003cspan class=\"variable\"\u003ebecause\u003c/span\u003e \u003cspan class=\"built_in\"\u003eI\u003c/span\u003e \u003cspan class=\"variable\"\u003ethink\u003c/span\u003e \u003cspan class=\"built_in\"\u003eI\u003c/span\u003e \u003cspan class=\"variable\"\u003ecan\u003c/span\u003e\u003cspan class=\"operator\"\u003e.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003ereplaceAll\u003c/span\u003e\u003cspan class=\"operator\"\u003e:\u003c/span\u003e \u003cspan class=\"built_in\"\u003eI\u003c/span\u003e \u003cspan class=\"variable\"\u003ecan\u003c/span\u003e \u003cspan class=\"variable\"\u003enot\u003c/span\u003e \u003cspan class=\"variable\"\u003ebecause\u003c/span\u003e \u003cspan class=\"built_in\"\u003eI\u003c/span\u003e \u003cspan class=\"variable\"\u003ethink\u003c/span\u003e \u003cspan class=\"built_in\"\u003eI\u003c/span\u003e \u003cspan class=\"variable\"\u003ecan\u003c/span\u003e \u003cspan class=\"variable\"\u003enot\u003c/span\u003e\u003cspan class=\"operator\"\u003e.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003ereplaceFirst：替换第一个匹配正则规则的子序列。\u003c/p\u003e\n\u003cp\u003ereplaceAll：替换所有匹配正则规则的子序列。\u003c/p\u003e\n\u003cp\u003e【示例】appendReplacement、appendTail 和 replaceAll\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003eregex\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;can\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003ereplace\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;can not\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003econtent\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;I can because I think I can.\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eStringBuffer\u003c/span\u003e \u003cspan class=\"variable\"\u003esb\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eStringBuffer\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eStringBuffer\u003c/span\u003e \u003cspan class=\"variable\"\u003esb2\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eStringBuffer\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tSystem.out.println(\u003cspan class=\"string\"\u003e\u0026#34;content: \u0026#34;\u003c/span\u003e + content);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003ePattern\u003c/span\u003e \u003cspan class=\"variable\"\u003ep\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Pattern.compile(regex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eMatcher\u003c/span\u003e \u003cspan class=\"variable\"\u003em\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e p.matcher(content);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (m.find()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tm.appendReplacement(sb, replace);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tSystem.out.println(\u003cspan class=\"string\"\u003e\u0026#34;appendReplacement: \u0026#34;\u003c/span\u003e + sb);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tm.appendTail(sb);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tSystem.out.println(\u003cspan class=\"string\"\u003e\u0026#34;appendTail: \u0026#34;\u003c/span\u003e + sb);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003e输出\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight mathematica\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003econtent\u003c/span\u003e\u003cspan class=\"operator\"\u003e:\u003c/span\u003e \u003cspan class=\"built_in\"\u003eI\u003c/span\u003e \u003cspan class=\"variable\"\u003ecan\u003c/span\u003e \u003cspan class=\"variable\"\u003ebecause\u003c/span\u003e \u003cspan class=\"built_in\"\u003eI\u003c/span\u003e \u003cspan class=\"variable\"\u003ethink\u003c/span\u003e \u003cspan class=\"built_in\"\u003eI\u003c/span\u003e \u003cspan class=\"variable\"\u003ecan\u003c/span\u003e\u003cspan class=\"operator\"\u003e.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003eappendReplacement\u003c/span\u003e\u003cspan class=\"operator\"\u003e:\u003c/span\u003e \u003cspan class=\"built_in\"\u003eI\u003c/span\u003e \u003cspan class=\"variable\"\u003ecan\u003c/span\u003e \u003cspan class=\"variable\"\u003enot\u003c/span\u003e \u003cspan class=\"variable\"\u003ebecause\u003c/span\u003e \u003cspan class=\"built_in\"\u003eI\u003c/span\u003e \u003cspan class=\"variable\"\u003ethink\u003c/span\u003e \u003cspan class=\"built_in\"\u003eI\u003c/span\u003e \u003cspan class=\"variable\"\u003ecan\u003c/span\u003e \u003cspan class=\"variable\"\u003enot\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"variable\"\u003eappendTail\u003c/span\u003e\u003cspan class=\"operator\"\u003e:\u003c/span\u003e \u003cspan class=\"built_in\"\u003eI\u003c/span\u003e \u003cspan class=\"variable\"\u003ecan\u003c/span\u003e \u003cspan class=\"variable\"\u003enot\u003c/span\u003e \u003cspan class=\"variable\"\u003ebecause\u003c/span\u003e \u003cspan class=\"built_in\"\u003eI\u003c/span\u003e \u003cspan class=\"variable\"\u003ethink\u003c/span\u003e \u003cspan class=\"built_in\"\u003eI\u003c/span\u003e \u003cspan class=\"variable\"\u003ecan\u003c/span\u003e \u003cspan class=\"variable\"\u003enot\u003c/span\u003e\u003cspan class=\"operator\"\u003e.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e从输出结果可以看出，\u003ccode\u003eappendReplacement\u003c/code\u003e和\u003ccode\u003eappendTail\u003c/code\u003e方法组合起来用，功能和\u003ccode\u003ereplaceAll\u003c/code\u003e是一样的。\u003c/p\u003e\n\u003cp\u003e如果你查看\u003ccode\u003ereplaceAll\u003c/code\u003e的源码，会发现其内部就是使用\u003ccode\u003eappendReplacement\u003c/code\u003e和\u003ccode\u003eappendTail\u003c/code\u003e方法组合来实现的。\u003c/p\u003e\n\u003cp\u003e【示例】quoteReplacement 和 replaceAll，解决特殊字符替换问题\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003eregex\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;\\\\$\\\\{.*?\\\\}\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003ereplace\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;${product}\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003econtent\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;product is ${productName}.\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003ePattern\u003c/span\u003e \u003cspan class=\"variable\"\u003ep\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Pattern.compile(regex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eMatcher\u003c/span\u003e \u003cspan class=\"variable\"\u003em\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e p.matcher(content);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003ereplaceAll\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e m.replaceAll(replace);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tSystem.out.println(\u003cspan class=\"string\"\u003e\u0026#34;content: \u0026#34;\u003c/span\u003e + content);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tSystem.out.println(\u003cspan class=\"string\"\u003e\u0026#34;replaceAll: \u0026#34;\u003c/span\u003e + replaceAll);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003e输出\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eException \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e thread \u003cspan class=\"string\"\u003e\u0026#34;main\u0026#34;\u003c/span\u003e java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.IllegalArgumentException\u003c/span\u003e: No group with name {product}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tat java\u003cspan class=\"selector-class\"\u003e.util\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.regex\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Matcher\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.appendReplacement\u003c/span\u003e(Matcher\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e849\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tat java\u003cspan class=\"selector-class\"\u003e.util\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.regex\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Matcher\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.replaceAll\u003c/span\u003e(Matcher\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e955\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tat org\u003cspan class=\"selector-class\"\u003e.zp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.notes\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.javase\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.regex\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.RegexDemo\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.wrongMethod\u003c/span\u003e(RegexDemo\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e42\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tat org\u003cspan class=\"selector-class\"\u003e.zp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.notes\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.javase\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.regex\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.RegexDemo\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.main\u003c/span\u003e(RegexDemo\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e18\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tat sun\u003cspan class=\"selector-class\"\u003e.reflect\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.NativeMethodAccessorImpl\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.invoke0\u003c/span\u003e(Native Method)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tat sun\u003cspan class=\"selector-class\"\u003e.reflect\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.NativeMethodAccessorImpl\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.invoke\u003c/span\u003e(NativeMethodAccessorImpl\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e62\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tat sun\u003cspan class=\"selector-class\"\u003e.reflect\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.DelegatingMethodAccessorImpl\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.invoke\u003c/span\u003e(DelegatingMethodAccessorImpl\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e43\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tat java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.reflect\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Method\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.invoke\u003c/span\u003e(Method\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e498\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tat com\u003cspan class=\"selector-class\"\u003e.intellij\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.rt\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.execution\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.application\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.AppMain\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.main\u003c/span\u003e(AppMain\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e147\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eString regex = \u0026#34;\\\\$\\\\{.*?\\\\}\u0026#34;;\u003c/code\u003e表示匹配类似\u003ccode\u003e${name}\u003c/code\u003e这样的字符串。由于\u003ccode\u003e$\u003c/code\u003e、\u003ccode\u003e{\u003c/code\u003e 、\u003ccode\u003e}\u003c/code\u003e都是特殊字符，需要用反义字符\u003ccode\u003e\\\u003c/code\u003e来修饰才能被当做一个字符串字符来处理。\u003c/p\u003e\n\u003cp\u003e上面的例子是想将 \u003ccode\u003e${productName}\u003c/code\u003e 替换为 \u003ccode\u003e${product}\u003c/code\u003e ，然而\u003ccode\u003ereplaceAll\u003c/code\u003e方法却将传入的字符串中的\u003ccode\u003e$\u003c/code\u003e当做特殊字符来处理了。结果产生异常。\u003c/p\u003e\n\u003cp\u003e如何解决这个问题?\u003c/p\u003e\n\u003cp\u003eJDK1.5 引入了\u003ccode\u003equoteReplacement\u003c/code\u003e方法。它可以用来转换特殊字符。其实源码非常简单，就是判断字符串中如果有\u003ccode\u003e\\\u003c/code\u003e或\u003ccode\u003e$\u003c/code\u003e，就为它加一个转义字符\u003ccode\u003e\\\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e我们对上面的代码略作调整：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003em.replaceAll(replace)\u003c/code\u003e改为\u003ccode\u003em.replaceAll(Matcher.quoteReplacement(replace))\u003c/code\u003e，新代码如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003eregex\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;\\\\$\\\\{.*?\\\\}\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003ereplace\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;${product}\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003econtent\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;product is ${productName}.\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003ePattern\u003c/span\u003e \u003cspan class=\"variable\"\u003ep\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Pattern.compile(regex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eMatcher\u003c/span\u003e \u003cspan class=\"variable\"\u003em\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e p.matcher(content);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003ereplaceAll\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e m.replaceAll(Matcher.quoteReplacement(replace));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tSystem.out.println(\u003cspan class=\"string\"\u003e\u0026#34;content: \u0026#34;\u003c/span\u003e + content);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tSystem.out.println(\u003cspan class=\"string\"\u003e\u0026#34;replaceAll: \u0026#34;\u003c/span\u003e + replaceAll);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003e输出\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight maxima\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003econtent\u003c/span\u003e: \u003cspan class=\"built_in\"\u003eproduct\u003c/span\u003e \u003cspan class=\"built_in\"\u003eis\u003c/span\u003e ${productName}.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ereplaceAll: \u003cspan class=\"built_in\"\u003eproduct\u003c/span\u003e \u003cspan class=\"built_in\"\u003eis\u003c/span\u003e ${\u003cspan class=\"built_in\"\u003eproduct\u003c/span\u003e}.\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e字符串中如果有\u003ccode\u003e\\\u003c/code\u003e或\u003ccode\u003e$\u003c/code\u003e，不能被正常解析的问题解决。\u003c/p\u003e\n\u003ch2 id=\"元字符\"\u003e\u003ca href=\"#元字符\" class=\"headerlink\" title=\"元字符\"\u003e\u003c/a\u003e元字符\u003c/h2\u003e\u003cp\u003e元字符(metacharacters)就是正则表达式中具有特殊意义的专用字符。\u003c/p\u003e\n\u003ch3 id=\"基本元字符\"\u003e\u003ca href=\"#基本元字符\" class=\"headerlink\" title=\"基本元字符\"\u003e\u003c/a\u003e基本元字符\u003c/h3\u003e\u003cp\u003e正则表达式的元字符难以记忆，很大程度上是因为有很多为了简化表达而出现的等价字符。而实际上最基本的元字符，并没有那么多。对于大部分的场景，基本元字符都可以搞定。让我们从一个个实例出发，由浅入深的去体会正则的奥妙。\u003c/p\u003e\n\u003ch4 id=\"多选（-）\"\u003e\u003ca href=\"#多选（-）\" class=\"headerlink\" title=\"多选（|）\"\u003e\u003c/a\u003e多选（\u003ccode\u003e|\u003c/code\u003e）\u003c/h4\u003e\u003cp\u003e【示例】匹配一个确定的字符串\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;abc\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;abc\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果要匹配一个确定的字符串，非常简单，如例 1 所示。但是，如果你不确定要匹配的字符串，希望有多个选择，怎么办？答案是：使用元字符\u003ccode\u003e|\u003c/code\u003e ，它的含义是或。\u003c/p\u003e\n\u003cp\u003e【示例】匹配多个可选的字符串\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 测试正则表达式字符：|\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;yes|no\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;yes\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;yes|no\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;no\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;yes|no\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;right\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// yes\tmatches： yes|no\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// no\tmatches： yes|no\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// right\tnot matches： yes|no\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"分组（-）\"\u003e\u003ca href=\"#分组（-）\" class=\"headerlink\" title=\"分组（()）\"\u003e\u003c/a\u003e分组（\u003ccode\u003e()\u003c/code\u003e）\u003c/h4\u003e\u003cp\u003e如果你希望表达式由多个子表达式组成，你可以使用 \u003ccode\u003e()\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e【示例】匹配组合字符串\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;(play|end)(ing|ed)\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;ended\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;(play|end)(ing|ed)\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;ending\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;(play|end)(ing|ed)\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;playing\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;(play|end)(ing|ed)\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;played\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ended\tmatches： (play|end)(ing|ed)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ending\tmatches： (play|end)(ing|ed)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// playing\tmatches： (play|end)(ing|ed)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// played\tmatches： (play|end)(ing|ed)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"指定单字符有效范围（-）\"\u003e\u003ca href=\"#指定单字符有效范围（-）\" class=\"headerlink\" title=\"指定单字符有效范围（[]）\"\u003e\u003c/a\u003e指定单字符有效范围（\u003ccode\u003e[]\u003c/code\u003e）\u003c/h4\u003e\u003cp\u003e前面展示了如何匹配字符串，但是很多时候你需要精确的匹配一个字符，这时可以使用\u003ccode\u003e[]\u003c/code\u003e 。\u003c/p\u003e\n\u003cp\u003e【示例】字符在指定范围\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 测试正则表达式字符：[]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;[abc]\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e));  \u003cspan class=\"comment\"\u003e// 字符只能是a、b、c\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;[a-z]\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;m\u0026#34;\u003c/span\u003e)); \u003cspan class=\"comment\"\u003e// 字符只能是a - z\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;[A-Z]\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;O\u0026#34;\u003c/span\u003e)); \u003cspan class=\"comment\"\u003e// 字符只能是A - Z\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;[a-zA-Z]\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;K\u0026#34;\u003c/span\u003e)); \u003cspan class=\"comment\"\u003e// 字符只能是a - z和A - Z\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;[a-zA-Z]\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;k\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;[0-9]\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;5\u0026#34;\u003c/span\u003e)); \u003cspan class=\"comment\"\u003e// 字符只能是0 - 9\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// b\tmatches： [abc]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// m\tmatches： [a-z]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// O\tmatches： [A-Z]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// K\tmatches： [a-zA-Z]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// k\tmatches： [a-zA-Z]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 5\tmatches： [0-9]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"指定单字符无效范围（-）\"\u003e\u003ca href=\"#指定单字符无效范围（-）\" class=\"headerlink\" title=\"指定单字符无效范围（ [^]）\"\u003e\u003c/a\u003e指定单字符无效范围（ \u003ccode\u003e[^]\u003c/code\u003e）\u003c/h4\u003e\u003cp\u003e【示例】字符不能在指定范围\u003c/p\u003e\n\u003cp\u003e如果需要匹配一个字符的逆操作，即字符不能在指定范围，可以使用\u003ccode\u003e[^]\u003c/code\u003e。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 测试正则表达式字符：[^]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;[^abc]\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e)); \u003cspan class=\"comment\"\u003e// 字符不能是a、b、c\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;[^a-z]\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;m\u0026#34;\u003c/span\u003e)); \u003cspan class=\"comment\"\u003e// 字符不能是a - z\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;[^A-Z]\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;O\u0026#34;\u003c/span\u003e)); \u003cspan class=\"comment\"\u003e// 字符不能是A - Z\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;[^a-zA-Z]\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;K\u0026#34;\u003c/span\u003e)); \u003cspan class=\"comment\"\u003e// 字符不能是a - z和A - Z\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;[^a-zA-Z]\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;k\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;[^0-9]\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;5\u0026#34;\u003c/span\u003e)); \u003cspan class=\"comment\"\u003e// 字符不能是0 - 9\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// b\tnot matches： [^abc]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// m\tnot matches： [^a-z]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// O\tnot matches： [^A-Z]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// K\tnot matches： [^a-zA-Z]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// k\tnot matches： [^a-zA-Z]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 5\tnot matches： [^0-9]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"限制字符数量（-）\"\u003e\u003ca href=\"#限制字符数量（-）\" class=\"headerlink\" title=\"限制字符数量（{}）\"\u003e\u003c/a\u003e限制字符数量（\u003ccode\u003e{}\u003c/code\u003e）\u003c/h4\u003e\u003cp\u003e如果想要控制字符出现的次数，可以使用 \u003ccode\u003e{}\u003c/code\u003e。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e字符\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e{n}\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003en 是一个非负整数。匹配确定的 n 次。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e{n,}\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003en 是一个非负整数。至少匹配 n 次。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e{n,m}\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003em 和 n 均为非负整数，其中 n \u0026lt;= m。最少匹配 n 次且最多匹配 m 次。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e【示例】限制字符出现次数\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// {n}: n 是一个非负整数。匹配确定的 n 次。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap{1}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap{1}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;ap\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap{1}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;app\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap{1}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;apppppppppp\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// {n,}: n 是一个非负整数。至少匹配 n 次。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap{1,}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap{1,}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;ap\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap{1,}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;app\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap{1,}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;apppppppppp\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// {n,m}: m 和 n 均为非负整数，其中 n \u0026lt;= m。最少匹配 n 次且最多匹配 m 次。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap{2,5}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap{2,5}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;ap\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap{2,5}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;app\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap{2,5}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;apppppppppp\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// a\tnot matches： ap{1}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ap\tmatches： ap{1}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// app\tnot matches： ap{1}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// apppppppppp\tnot matches： ap{1}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// a\tnot matches： ap{1,}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ap\tmatches： ap{1,}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// app\tmatches： ap{1,}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// apppppppppp\tmatches： ap{1,}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// a\tnot matches： ap{2,5}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ap\tnot matches： ap{2,5}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// app\tmatches： ap{2,5}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// apppppppppp\tnot matches： ap{2,5}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"转义字符（-）\"\u003e\u003ca href=\"#转义字符（-）\" class=\"headerlink\" title=\"转义字符（/）\"\u003e\u003c/a\u003e转义字符（\u003ccode\u003e/\u003c/code\u003e）\u003c/h4\u003e\u003cp\u003e如果想要查找元字符本身，你需要使用转义符，使得正则引擎将其视作一个普通字符，而不是一个元字符去处理。\u003c/p\u003e\n\u003cfigure class=\"highlight livescript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e* 的转义字符：\u003cspan class=\"string\"\u003e\\*\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e+ 的转义字符：\u003cspan class=\"string\"\u003e\\+\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e? 的转义字符：\u003cspan class=\"string\"\u003e\\?\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e^ 的转义字符：\u003cspan class=\"string\"\u003e\\^\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e$ 的转义字符：\u003cspan class=\"string\"\u003e\\$\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e. 的转义字符：\u003cspan class=\"string\"\u003e\\.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果是转义符 \u003ccode\u003e\\\u003c/code\u003e 本身，你需要使用 \u003ccode\u003e\\\\\u003c/code\u003e 。\u003c/p\u003e\n\u003ch4 id=\"指定表达式字符串的开始（-）和结尾（-）\"\u003e\u003ca href=\"#指定表达式字符串的开始（-）和结尾（-）\" class=\"headerlink\" title=\"指定表达式字符串的开始（^）和结尾（$）\"\u003e\u003c/a\u003e指定表达式字符串的开始（\u003ccode\u003e^\u003c/code\u003e）和结尾（\u003ccode\u003e$\u003c/code\u003e）\u003c/h4\u003e\u003cp\u003e如果希望匹配的字符串必须以特定字符串开头，可以使用 \u003ccode\u003e^\u003c/code\u003e 。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注意：请特别留意，这里的 \u003ccode\u003e^\u003c/code\u003e 一定要和 \u003ccode\u003e[^]\u003c/code\u003e 中的 \u003ccode\u003e^\u003c/code\u003e 区分。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e【示例】限制字符串头部\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;^app[a-z]{0,}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;apple\u0026#34;\u003c/span\u003e)); \u003cspan class=\"comment\"\u003e// 字符串必须以app开头\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;^app[a-z]{0,}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;aplause\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// apple\tmatches： ^app[a-z]{0,}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// aplause\tnot matches： ^app[a-z]{0,}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果希望匹配的字符串必须以特定字符串结尾，可以使用 \u003ccode\u003e$\u003c/code\u003e 。\u003c/p\u003e\n\u003cp\u003e【示例】限制字符串尾部\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;[a-z]{0,}ing$\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;playing\u0026#34;\u003c/span\u003e)); \u003cspan class=\"comment\"\u003e// 字符串必须以ing结尾\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;[a-z]{0,}ing$\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;long\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// playing\tmatches： [a-z]{0,}ing$\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// long\tnot matches： [a-z]{0,}ing$\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"等价字符\"\u003e\u003ca href=\"#等价字符\" class=\"headerlink\" title=\"等价字符\"\u003e\u003c/a\u003e等价字符\u003c/h3\u003e\u003cp\u003e等价字符，顾名思义，就是对于基本元字符表达的一种简化（等价字符的功能都可以通过基本元字符来实现）。\u003c/p\u003e\n\u003cp\u003e在没有掌握基本元字符之前，可以先不用理会，因为很容易把人绕晕。\u003c/p\u003e\n\u003cp\u003e等价字符的好处在于简化了基本元字符的写法。\u003c/p\u003e\n\u003ch4 id=\"表示某一类型字符的等价字符\"\u003e\u003ca href=\"#表示某一类型字符的等价字符\" class=\"headerlink\" title=\"表示某一类型字符的等价字符\"\u003e\u003c/a\u003e表示某一类型字符的等价字符\u003c/h4\u003e\u003cp\u003e下表中的等价字符都表示某一类型的字符。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e字符\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003e\u003ccode\u003e.\u003c/code\u003e\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e匹配除“\\n”之外的任何单个字符。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003e\u003ccode\u003e\\d\u003c/code\u003e\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e匹配一个数字字符。等价于[0-9]。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003e\u003ccode\u003e\\D\u003c/code\u003e\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e匹配一个非数字字符。等价于[^0-9]。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003e\u003ccode\u003e\\w\u003c/code\u003e\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e匹配包括下划线的任何单词字符。类似但不等价于“[A-Za-z0-9_]”，这里的单词字符指的是 Unicode 字符集。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003e\u003ccode\u003e\\W\u003c/code\u003e\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e匹配任何非单词字符。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003e\u003ccode\u003e\\s\u003c/code\u003e\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003e\u003ccode\u003e\\S\u003c/code\u003e\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e匹配任何可见字符。等价于[ \\f\\n\\r\\t\\v]。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e【示例】基本等价字符的用法\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 匹配除“\\n”之外的任何单个字符\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;.{1,}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;.{1,}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;~!@#$%^\u0026amp;*()+`-=[]{};:\u0026lt;\u0026gt;,./?|\\\\\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;.\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;[^\\n]\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 匹配一个数字字符。等价于[0-9]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;\\\\d{1,}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;0123456789\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 匹配一个非数字字符。等价于[^0-9]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;\\\\D{1,}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;0123456789\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 匹配包括下划线的任何单词字符。类似但不等价于“[A-Za-z0-9_]”，这里的单词字符指的是Unicode字符集\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;\\\\w{1,}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;\\\\w{1,}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;~!@#$%^\u0026amp;*()+`-=[]{};:\u0026lt;\u0026gt;,./?|\\\\\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 匹配任何非单词字符\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;\\\\W{1,}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;\\\\W{1,}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;~!@#$%^\u0026amp;*()+`-=[]{};:\u0026lt;\u0026gt;,./?|\\\\\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;\\\\s{1,}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34; \\f\\r\\n\\t\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 匹配任何可见字符。等价于[^ \\f\\n\\r\\t\\v]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(checkMatches(\u003cspan class=\"string\"\u003e\u0026#34;\\\\S{1,}\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34; \\f\\r\\n\\t\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_\tmatches： .{1,}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ~!@#$%^\u0026amp;*()+`-=[]{};:\u0026lt;\u0026gt;,./?|\\\\\tmatches： .{1,}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// \\n\tnot matches： .\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// \\n\tnot matches： [^\\n]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 0123456789\tmatches： \\\\d{1,}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 0123456789\tnot matches： \\\\D{1,}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_\tmatches： \\\\w{1,}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ~!@#$%^\u0026amp;*()+`-=[]{};:\u0026lt;\u0026gt;,./?|\\\\\tnot matches： \\\\w{1,}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_\tnot matches： \\\\W{1,}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ~!@#$%^\u0026amp;*()+`-=[]{};:\u0026lt;\u0026gt;,./?|\\\\\tmatches： \\\\W{1,}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// \\f\\r\\n\\t\tmatches： \\\\s{1,}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// \\f\\r\\n\\t\tnot matches： \\\\S{1,}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"限制字符数量的等价字符\"\u003e\u003ca href=\"#限制字符数量的等价字符\" class=\"headerlink\" title=\"限制字符数量的等价字符\"\u003e\u003c/a\u003e限制字符数量的等价字符\u003c/h4\u003e\u003cp\u003e在基本元字符章节中，已经介绍了限制字符数量的基本元字符 - \u003ccode\u003e{}\u003c/code\u003e 。\u003c/p\u003e\n\u003cp\u003e此外，还有 \u003ccode\u003e*\u003c/code\u003e、\u003ccode\u003e+\u003c/code\u003e、\u003ccode\u003e?\u003c/code\u003e 这个三个为了简化写法而出现的等价字符，我们来认识一下。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e字符\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配前面的子表达式零次或多次。等价于{0,}。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e+\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配前面的子表达式一次或多次。等价于{1,}。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e?\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配前面的子表达式零次或一次。等价于 {0,1}。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e\u003cstrong\u003e案例 限制字符数量的等价字符\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// *: 匹配前面的子表达式零次或多次。* 等价于{0,}。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap*\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap*\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;ap\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap*\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;app\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap*\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;apppppppppp\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// +: 匹配前面的子表达式一次或多次。+ 等价于 {1,}。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap+\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap+\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;ap\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap+\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;app\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap+\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;apppppppppp\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ?: 匹配前面的子表达式零次或一次。? 等价于 {0,1}。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap?\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap?\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;ap\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap?\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;app\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echeckMatches(\u003cspan class=\"string\"\u003e\u0026#34;ap?\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;apppppppppp\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// a\tmatches： ap*\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ap\tmatches： ap*\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// app\tmatches： ap*\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// apppppppppp\tmatches： ap*\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// a\tnot matches： ap+\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ap\tmatches： ap+\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// app\tmatches： ap+\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// apppppppppp\tmatches： ap+\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// a\tmatches： ap?\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ap\tmatches： ap?\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// app\tnot matches： ap?\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// apppppppppp\tnot matches： ap?\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"元字符优先级顺序\"\u003e\u003ca href=\"#元字符优先级顺序\" class=\"headerlink\" title=\"元字符优先级顺序\"\u003e\u003c/a\u003e元字符优先级顺序\u003c/h4\u003e\u003cp\u003e正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似。\u003c/p\u003e\n\u003cp\u003e下表从最高到最低说明了各种正则表达式运算符的优先级顺序：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e运算符\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\\\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e转义符\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e()\u003c/code\u003e、\u003ccode\u003e(?:)\u003c/code\u003e、\u003ccode\u003e(?=)\u003c/code\u003e、\u003ccode\u003e[]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e括号和中括号\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e*\u003c/code\u003e、\u003ccode\u003e+\u003c/code\u003e、\u003ccode\u003e?\u003c/code\u003e、\u003ccode\u003e{n}\u003c/code\u003e、\u003ccode\u003e{n,}\u003c/code\u003e、\u003ccode\u003e{n,m}\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e限定符\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e^\u003c/code\u003e、\u003ccode\u003e$\u003c/code\u003e、\u003ccode\u003e*任何字符\u003c/code\u003e、\u003ccode\u003e任何字符*\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e定位点和序列\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e`\u003c/td\u003e\n\u003ctd\u003e`\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e字符具有高于替换运算符的优先级，使得 \u003ccode\u003em|food\u003c/code\u003e 匹配 \u003ccode\u003em\u003c/code\u003e 或 \u003ccode\u003efood\u003c/code\u003e 。若要匹配 \u003ccode\u003emood\u003c/code\u003e 或 \u003ccode\u003efood\u003c/code\u003e ，请使用括号创建子表达式，从而产生 \u003ccode\u003e(m|f)ood\u003c/code\u003e 。\u003c/p\u003e\n\u003ch2 id=\"分组构造\"\u003e\u003ca href=\"#分组构造\" class=\"headerlink\" title=\"分组构造\"\u003e\u003c/a\u003e分组构造\u003c/h2\u003e\u003cp\u003e在基本元字符章节，提到了 \u003ccode\u003e()\u003c/code\u003e 字符可以用来对表达式分组。实际上分组还有更多复杂的用法。\u003c/p\u003e\n\u003cp\u003e所谓分组构造，是用来描述正则表达式的子表达式，用于捕获字符串中的子字符串。\u003c/p\u003e\n\u003ch3 id=\"捕获与非捕获\"\u003e\u003ca href=\"#捕获与非捕获\" class=\"headerlink\" title=\"捕获与非捕获\"\u003e\u003c/a\u003e捕获与非捕获\u003c/h3\u003e\u003cp\u003e下表为分组构造中的捕获和非捕获分类。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e表达式\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003cth\u003e捕获或非捕获\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(exp)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配的子表达式\u003c/td\u003e\n\u003ctd\u003e捕获\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(?\u0026lt;name\u0026gt;exp)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e命名的反向引用\u003c/td\u003e\n\u003ctd\u003e捕获\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(?:exp)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e非捕获组\u003c/td\u003e\n\u003ctd\u003e非捕获\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(?=exp)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e零宽度正预测先行断言\u003c/td\u003e\n\u003ctd\u003e非捕获\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(?!exp)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e零宽度负预测先行断言\u003c/td\u003e\n\u003ctd\u003e非捕获\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(?\u0026lt;=exp)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e零宽度正回顾后发断言\u003c/td\u003e\n\u003ctd\u003e非捕获\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(?\u0026lt;!exp)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e零宽度负回顾后发断言\u003c/td\u003e\n\u003ctd\u003e非捕获\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注：Java 正则引擎不支持平衡组。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"反向引用\"\u003e\u003ca href=\"#反向引用\" class=\"headerlink\" title=\"反向引用\"\u003e\u003c/a\u003e反向引用\u003c/h3\u003e\u003ch5 id=\"带编号的反向引用\"\u003e\u003ca href=\"#带编号的反向引用\" class=\"headerlink\" title=\"带编号的反向引用\"\u003e\u003c/a\u003e带编号的反向引用\u003c/h5\u003e\u003cp\u003e带编号的反向引用使用以下语法：\u003ccode\u003e\\number\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中\u003cem\u003enumber\u003c/em\u003e 是正则表达式中捕获组的序号位置。 例如，\\4 匹配第四个捕获组的内容。 如果正则表达式模式中未定义\u003cem\u003enumber\u003c/em\u003e，则将发生分析错误\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e【示例】匹配重复的单词和紧随每个重复的单词的单词(不命名子表达式)\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// (\\w+)\\s\\1\\W(\\w+) 匹配重复的单词和紧随每个重复的单词的单词\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(findAll(\u003cspan class=\"string\"\u003e\u0026#34;(\\\\w+)\\\\s\\\\1\\\\W(\\\\w+)\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"string\"\u003e\u0026#34;He said that that was the the correct answer.\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = (\\w+)\\s\\1\\W(\\w+), content: He said that that was the the correct answer.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [1th] start: 8, end: 21, group: that that was\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [2th] start: 22, end: 37, group: the the correct\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e(\\w+)\u003c/code\u003e：匹配一个或多个单词字符。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\s\u003c/code\u003e：与空白字符匹配。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\1\u003c/code\u003e：匹配第一个组，即(\\w+)。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\W\u003c/code\u003e：匹配包括空格和标点符号的一个非单词字符。 这样可以防止正则表达式模式匹配从第一个捕获组的单词开头的单词。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"命名的反向引用\"\u003e\u003ca href=\"#命名的反向引用\" class=\"headerlink\" title=\"命名的反向引用\"\u003e\u003c/a\u003e命名的反向引用\u003c/h4\u003e\u003cp\u003e命名后向引用通过使用下面的语法进行定义：\u003ccode\u003e\\k\u0026lt;name \u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e【示例】匹配重复的单词和紧随每个重复的单词的单词(命名子表达式)\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// (?\u0026lt;duplicateWord\u0026gt;\\w+)\\s\\k\u0026lt;duplicateWord\u0026gt;\\W(?\u0026lt;nextWord\u0026gt;\\w+) 匹配重复的单词和紧随每个重复的单词的单词\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(findAll(\u003cspan class=\"string\"\u003e\u0026#34;(?\u0026lt;duplicateWord\u0026gt;\\\\w+)\\\\s\\\\k\u0026lt;duplicateWord\u0026gt;\\\\W(?\u0026lt;nextWord\u0026gt;\\\\w+)\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"string\"\u003e\u0026#34;He said that that was the the correct answer.\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = (?\u0026lt;duplicateWord\u0026gt;\\w+)\\s\\k\u0026lt;duplicateWord\u0026gt;\\W(?\u0026lt;nextWord\u0026gt;\\w+), content: He said that that was the the correct answer.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [1th] start: 8, end: 21, group: that that was\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [2th] start: 22, end: 37, group: the the correct\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e(?\u0026lt;duplicateWord\u0026gt;\\w+)\u003c/code\u003e：匹配一个或多个单词字符。 命名此捕获组 duplicateWord。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\s\u003c/code\u003e: 与空白字符匹配。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\k\u0026lt;duplicateWord\u0026gt;\u003c/code\u003e：匹配名为 duplicateWord 的捕获的组。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\W\u003c/code\u003e：匹配包括空格和标点符号的一个非单词字符。 这样可以防止正则表达式模式匹配从第一个捕获组的单词开头的单词。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e(?\u0026lt;nextWord\u0026gt;\\w+)\u003c/code\u003e：匹配一个或多个单词字符。 命名此捕获组 nextWord。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"非捕获组\"\u003e\u003ca href=\"#非捕获组\" class=\"headerlink\" title=\"非捕获组\"\u003e\u003c/a\u003e非捕获组\u003c/h3\u003e\u003cp\u003e\u003ccode\u003e(?:exp)\u003c/code\u003e 表示当一个限定符应用到一个组，但组捕获的子字符串并非所需时，通常会使用非捕获组构造。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e【示例】匹配以.结束的语句。\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 匹配由句号终止的语句。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(findAll(\u003cspan class=\"string\"\u003e\u0026#34;(?:\\\\b(?:\\\\w+)\\\\W*)+\\\\.\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;This is a short sentence. Never end\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = (?:\\b(?:\\w+)\\W*)+\\., content: This is a short sentence. Never end\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [1th] start: 0, end: 25, group: This is a short sentence.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"零宽断言\"\u003e\u003ca href=\"#零宽断言\" class=\"headerlink\" title=\"零宽断言\"\u003e\u003c/a\u003e零宽断言\u003c/h3\u003e\u003cp\u003e用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像\\b,^,$那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e表达式\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(?=exp)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配 exp 前面的位置\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(?\u0026lt;=exp)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配 exp 后面的位置\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(?!exp)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配后面跟的不是 exp 的位置\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(?\u0026lt;!exp)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配前面不是 exp 的位置\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch4 id=\"匹配-exp-前面的位置\"\u003e\u003ca href=\"#匹配-exp-前面的位置\" class=\"headerlink\" title=\"匹配 exp 前面的位置\"\u003e\u003c/a\u003e匹配 exp 前面的位置\u003c/h4\u003e\u003cp\u003e\u003ccode\u003e(?=exp)\u003c/code\u003e 表示输入字符串必须匹配\u003cem\u003e子表达式\u003c/em\u003e中的正则表达式模式，尽管匹配的子字符串未包含在匹配结果中。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// \\b\\w+(?=\\sis\\b) 表示要捕获is之前的单词\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(findAll(\u003cspan class=\"string\"\u003e\u0026#34;\\\\b\\\\w+(?=\\\\sis\\\\b)\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;The dog is a Malamute.\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(findAll(\u003cspan class=\"string\"\u003e\u0026#34;\\\\b\\\\w+(?=\\\\sis\\\\b)\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;The island has beautiful birds.\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(findAll(\u003cspan class=\"string\"\u003e\u0026#34;\\\\b\\\\w+(?=\\\\sis\\\\b)\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;The pitch missed home plate.\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(findAll(\u003cspan class=\"string\"\u003e\u0026#34;\\\\b\\\\w+(?=\\\\sis\\\\b)\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Sunday is a weekend day.\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = \\b\\w+(?=\\sis\\b), content: The dog is a Malamute.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [1th] start: 4, end: 7, group: dog\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = \\b\\w+(?=\\sis\\b), content: The island has beautiful birds.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// not found\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = \\b\\w+(?=\\sis\\b), content: The pitch missed home plate.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// not found\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = \\b\\w+(?=\\sis\\b), content: Sunday is a weekend day.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [1th] start: 0, end: 6, group: Sunday\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\\b\u003c/code\u003e：在单词边界处开始匹配。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\w+\u003c/code\u003e：匹配一个或多个单词字符。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e(?=\\sis\\b)\u003c/code\u003e：确定单词字符是否后接空白字符和字符串“is”，其在单词边界处结束。 如果如此，则匹配成功。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"匹配-exp-后面的位置\"\u003e\u003ca href=\"#匹配-exp-后面的位置\" class=\"headerlink\" title=\"匹配 exp 后面的位置\"\u003e\u003c/a\u003e匹配 exp 后面的位置\u003c/h4\u003e\u003cp\u003e\u003ccode\u003e(?\u0026lt;=exp)\u003c/code\u003e 表示子表达式不得在输入字符串当前位置左侧出现，尽管子表达式未包含在匹配结果中。零宽度正回顾后发断言不会回溯。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// (?\u0026lt;=\\b20)\\d{2}\\b 表示要捕获以20开头的数字的后面部分\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(findAll(\u003cspan class=\"string\"\u003e\u0026#34;(?\u0026lt;=\\\\b20)\\\\d{2}\\\\b\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;2010 1999 1861 2140 2009\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = (?\u0026lt;=\\b20)\\d{2}\\b, content: 2010 1999 1861 2140 2009\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [1th] start: 2, end: 4, group: 10\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [2th] start: 22, end: 24, group: 09\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\\d{2}\u003c/code\u003e：匹配两个十进制数字。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e{?\u0026lt;=\\b20)\u003c/code\u003e：如果两个十进制数字的字边界以小数位数“20”开头，则继续匹配。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\b\u003c/code\u003e：在单词边界处结束匹配。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"匹配后面跟的不是-exp-的位置\"\u003e\u003ca href=\"#匹配后面跟的不是-exp-的位置\" class=\"headerlink\" title=\"匹配后面跟的不是 exp 的位置\"\u003e\u003c/a\u003e匹配后面跟的不是 exp 的位置\u003c/h4\u003e\u003cp\u003e\u003ccode\u003e(?!exp)\u003c/code\u003e 表示输入字符串不得匹配\u003cem\u003e子表达式\u003c/em\u003e中的正则表达式模式，尽管匹配的子字符串未包含在匹配结果中。\u003c/p\u003e\n\u003cp\u003e【示例】捕获未以“un”开头的单词\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// \\b(?!un)\\w+\\b 表示要捕获未以“un”开头的单词\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(findAll(\u003cspan class=\"string\"\u003e\u0026#34;\\\\b(?!un)\\\\w+\\\\b\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;unite one unethical ethics use untie ultimate\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = \\b(?!un)\\w+\\b, content: unite one unethical ethics use untie ultimate\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [1th] start: 6, end: 9, group: one\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [2th] start: 20, end: 26, group: ethics\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [3th] start: 27, end: 30, group: use\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [4th] start: 37, end: 45, group: ultimate\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\\b\u003c/code\u003e：在单词边界处开始匹配。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e(?!un)\u003c/code\u003e：确定接下来的两个的字符是否为“un”。 如果没有，则可能匹配。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\w+\u003c/code\u003e：匹配一个或多个单词字符。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\b\u003c/code\u003e：在单词边界处结束匹配。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"匹配前面不是-exp-的位置\"\u003e\u003ca href=\"#匹配前面不是-exp-的位置\" class=\"headerlink\" title=\"匹配前面不是 exp 的位置\"\u003e\u003c/a\u003e匹配前面不是 exp 的位置\u003c/h4\u003e\u003cp\u003e\u003ccode\u003e(?\u0026lt;!exp)\u003c/code\u003e 表示子表达式不得在输入字符串当前位置的左侧出现。 但是，任何不匹配子表达式 的子字符串不包含在匹配结果中。\u003c/p\u003e\n\u003cp\u003e【示例】捕获任意工作日\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// (?\u0026lt;!(Saturday|Sunday) )\\b\\w+ \\d{1,2}, \\d{4}\\b 表示要捕获任意工作日（即周一到周五）\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(findAll(\u003cspan class=\"string\"\u003e\u0026#34;(?\u0026lt;!(Saturday|Sunday) )\\\\b\\\\w+ \\\\d{1,2}, \\\\d{4}\\\\b\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Monday February 1, 2010\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(findAll(\u003cspan class=\"string\"\u003e\u0026#34;(?\u0026lt;!(Saturday|Sunday) )\\\\b\\\\w+ \\\\d{1,2}, \\\\d{4}\\\\b\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Wednesday February 3, 2010\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(findAll(\u003cspan class=\"string\"\u003e\u0026#34;(?\u0026lt;!(Saturday|Sunday) )\\\\b\\\\w+ \\\\d{1,2}, \\\\d{4}\\\\b\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Saturday February 6, 2010\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertFalse(findAll(\u003cspan class=\"string\"\u003e\u0026#34;(?\u0026lt;!(Saturday|Sunday) )\\\\b\\\\w+ \\\\d{1,2}, \\\\d{4}\\\\b\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Sunday February 7, 2010\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(findAll(\u003cspan class=\"string\"\u003e\u0026#34;(?\u0026lt;!(Saturday|Sunday) )\\\\b\\\\w+ \\\\d{1,2}, \\\\d{4}\\\\b\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Monday, February 8, 2010\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = (?\u0026lt;!(Saturday|Sunday) )\\b\\w+ \\d{1,2}, \\d{4}\\b, content: Monday February 1, 2010\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [1th] start: 7, end: 23, group: February 1, 2010\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = (?\u0026lt;!(Saturday|Sunday) )\\b\\w+ \\d{1,2}, \\d{4}\\b, content: Wednesday February 3, 2010\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [1th] start: 10, end: 26, group: February 3, 2010\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = (?\u0026lt;!(Saturday|Sunday) )\\b\\w+ \\d{1,2}, \\d{4}\\b, content: Saturday February 6, 2010\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// not found\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = (?\u0026lt;!(Saturday|Sunday) )\\b\\w+ \\d{1,2}, \\d{4}\\b, content: Sunday February 7, 2010\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// not found\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = (?\u0026lt;!(Saturday|Sunday) )\\b\\w+ \\d{1,2}, \\d{4}\\b, content: Monday, February 8, 2010\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [1th] start: 8, end: 24, group: February 8, 2010\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"贪婪与懒惰\"\u003e\u003ca href=\"#贪婪与懒惰\" class=\"headerlink\" title=\"贪婪与懒惰\"\u003e\u003c/a\u003e贪婪与懒惰\u003c/h2\u003e\u003cp\u003e当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配\u003cstrong\u003e尽可能多\u003c/strong\u003e的字符。以这个表达式为例：a.*b，它将会匹配最长的以 a 开始，以 b 结束的字符串。如果用它来搜索 aabab 的话，它会匹配整个字符串 aabab。这被称为贪婪匹配。\u003c/p\u003e\n\u003cp\u003e有时，我们更需要懒惰匹配，也就是匹配\u003cstrong\u003e尽可能少\u003c/strong\u003e的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.*?就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e表达式\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e*?\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e重复任意次，但尽可能少重复\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e+?\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e重复 1 次或更多次，但尽可能少重复\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e??\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e重复 0 次或 1 次，但尽可能少重复\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e{n,m}?\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e重复 n 到 m 次，但尽可能少重复\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e{n,}?\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e重复 n 次以上，但尽可能少重复\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e【示例】Java 正则中贪婪与懒惰的示例\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 贪婪匹配\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(findAll(\u003cspan class=\"string\"\u003e\u0026#34;a\\\\w*b\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;abaabaaabaaaab\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 懒惰匹配\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(findAll(\u003cspan class=\"string\"\u003e\u0026#34;a\\\\w*?b\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;abaabaaabaaaab\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(findAll(\u003cspan class=\"string\"\u003e\u0026#34;a\\\\w+?b\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;abaabaaabaaaab\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(findAll(\u003cspan class=\"string\"\u003e\u0026#34;a\\\\w??b\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;abaabaaabaaaab\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(findAll(\u003cspan class=\"string\"\u003e\u0026#34;a\\\\w{0,4}?b\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;abaabaaabaaaab\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAssert.assertTrue(findAll(\u003cspan class=\"string\"\u003e\u0026#34;a\\\\w{3,}?b\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;abaabaaabaaaab\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = a\\w*b, content: abaabaaabaaaab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [1th] start: 0, end: 14, group: abaabaaabaaaab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = a\\w*?b, content: abaabaaabaaaab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [1th] start: 0, end: 2, group: ab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [2th] start: 2, end: 5, group: aab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [3th] start: 5, end: 9, group: aaab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [4th] start: 9, end: 14, group: aaaab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = a\\w+?b, content: abaabaaabaaaab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [1th] start: 0, end: 5, group: abaab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [2th] start: 5, end: 9, group: aaab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [3th] start: 9, end: 14, group: aaaab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = a\\w??b, content: abaabaaabaaaab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [1th] start: 0, end: 2, group: ab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [2th] start: 2, end: 5, group: aab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [3th] start: 6, end: 9, group: aab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [4th] start: 11, end: 14, group: aab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = a\\w{0,4}?b, content: abaabaaabaaaab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [1th] start: 0, end: 2, group: ab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [2th] start: 2, end: 5, group: aab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [3th] start: 5, end: 9, group: aaab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [4th] start: 9, end: 14, group: aaaab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// regex = a\\w{3,}?b, content: abaabaaabaaaab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [1th] start: 0, end: 5, group: abaab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [2th] start: 5, end: 14, group: aaabaaaab\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e说明：\u003c/p\u003e\n\u003cp\u003e本例中代码展示的是使用不同贪婪或懒惰策略去查找字符串 \u003ccode\u003eabaabaaabaaaab\u003c/code\u003e 中匹配\u003cstrong\u003e以 \u003ccode\u003ea\u003c/code\u003e 开头，以 \u003ccode\u003eb\u003c/code\u003e 结尾的所有子字符串\u003c/strong\u003e。请从输出结果中，细细体味使用不同的贪婪或懒惰策略，对于匹配子字符串有什么影响。\u003c/p\u003e\n\u003ch2 id=\"正则附录\"\u003e\u003ca href=\"#正则附录\" class=\"headerlink\" title=\"正则附录\"\u003e\u003c/a\u003e正则附录\u003c/h2\u003e\u003ch3 id=\"匹配正则字符串的方法\"\u003e\u003ca href=\"#匹配正则字符串的方法\" class=\"headerlink\" title=\"匹配正则字符串的方法\"\u003e\u003c/a\u003e匹配正则字符串的方法\u003c/h3\u003e\u003cp\u003e由于正则表达式中很多元字符本身就是转义字符，在 Java 字符串的规则中不会被显示出来。\u003c/p\u003e\n\u003cp\u003e为此，可以使用一个工具类\u003ccode\u003eorg.apache.commons.lang3.StringEscapeUtils\u003c/code\u003e来做特殊处理，使得转义字符可以打印。这个工具类提供的都是静态方法，从方法命名大致也可以猜出用法，这里不多做说明。\u003c/p\u003e\n\u003cp\u003e如果你了解 maven，可以直接引入依赖\u003c/p\u003e\n\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003edependency\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003egroupId\u003c/span\u003e\u0026gt;\u003c/span\u003eorg.apache.commons\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003egroupId\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eartifactId\u003c/span\u003e\u0026gt;\u003c/span\u003ecommons-lang3\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eartifactId\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eversion\u003c/span\u003e\u0026gt;\u003c/span\u003e${commons-lang3.version}\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eversion\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003edependency\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【示例】本文为了展示正则匹配规则用到的方法\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"title function_\"\u003echeckMatches\u003c/span\u003e\u003cspan class=\"params\"\u003e(String regex, String content)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003ePattern\u003c/span\u003e \u003cspan class=\"variable\"\u003ep\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Pattern.compile(regex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eMatcher\u003c/span\u003e \u003cspan class=\"variable\"\u003em\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e p.matcher(content);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"variable\"\u003eflag\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e m.matches();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (m.matches()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(StringEscapeUtils.escapeJava(content) + \u003cspan class=\"string\"\u003e\u0026#34;\\tmatches： \u0026#34;\u003c/span\u003e + StringEscapeUtils.escapeJava(regex));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t} \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(StringEscapeUtils.escapeJava(content) + \u003cspan class=\"string\"\u003e\u0026#34;\\tnot matches： \u0026#34;\u003c/span\u003e + StringEscapeUtils.escapeJava(regex));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e flag;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003efindAll\u003c/span\u003e\u003cspan class=\"params\"\u003e(String regex, String content)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003ePattern\u003c/span\u003e \u003cspan class=\"variable\"\u003ep\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Pattern.compile(regex);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eMatcher\u003c/span\u003e \u003cspan class=\"variable\"\u003em\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e p.matcher(content);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tSystem.out.println(\u003cspan class=\"string\"\u003e\u0026#34;regex = \u0026#34;\u003c/span\u003e + regex + \u003cspan class=\"string\"\u003e\u0026#34;, content: \u0026#34;\u003c/span\u003e + content);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ecount\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (m.find()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tcount++;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(\u003cspan class=\"string\"\u003e\u0026#34;[\u0026#34;\u003c/span\u003e + count + \u003cspan class=\"string\"\u003e\u0026#34;th] \u0026#34;\u003c/span\u003e + \u003cspan class=\"string\"\u003e\u0026#34;start: \u0026#34;\u003c/span\u003e + m.start() + \u003cspan class=\"string\"\u003e\u0026#34;, end: \u0026#34;\u003c/span\u003e + m.end()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t+ \u003cspan class=\"string\"\u003e\u0026#34;, group: \u0026#34;\u003c/span\u003e + m.group());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"number\"\u003e0\u003c/span\u003e == count) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(\u003cspan class=\"string\"\u003e\u0026#34;not found\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e count;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"速查元字符字典\"\u003e\u003ca href=\"#速查元字符字典\" class=\"headerlink\" title=\"速查元字符字典\"\u003e\u003c/a\u003e速查元字符字典\u003c/h3\u003e\u003cp\u003e为了方便快查正则的元字符含义，在本节根据元字符的功能集中罗列正则的各种元字符。\u003c/p\u003e\n\u003ch4 id=\"限定符\"\u003e\u003ca href=\"#限定符\" class=\"headerlink\" title=\"限定符\"\u003e\u003c/a\u003e限定符\u003c/h4\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e字符\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e+\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e?\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 中的”do” 。? 等价于 {0,1}。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e{n}\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003en 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e{n,}\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003en 是一个非负整数。至少匹配 n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*‘。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e{n,m}\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003em 和 n 均为非负整数，其中 n \u0026lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch4 id=\"定位符\"\u003e\u003ca href=\"#定位符\" class=\"headerlink\" title=\"定位符\"\u003e\u003c/a\u003e定位符\u003c/h4\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e字符\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e^\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \\n 或 \\r 之后的位置匹配。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \\n 或 \\r 之前的位置匹配。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\\b\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配一个字边界，即字与空格间的位置。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\\B\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e非字边界匹配。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch4 id=\"非打印字符\"\u003e\u003ca href=\"#非打印字符\" class=\"headerlink\" title=\"非打印字符\"\u003e\u003c/a\u003e非打印字符\u003c/h4\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e字符\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\\cx\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\\f\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配一个换页符。等价于 \\x0c 和 \\cL。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\\n\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配一个换行符。等价于 \\x0a 和 \\cJ。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\\r\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配一个回车符。等价于 \\x0d 和 \\cM。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\\s\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\\S\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配任何非空白字符。等价于 [ \\f\\n\\r\\t\\v]。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\\t\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配一个制表符。等价于 \\x09 和 \\cI。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\\v\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配一个垂直制表符。等价于 \\x0b 和 \\cK。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch4 id=\"分组\"\u003e\u003ca href=\"#分组\" class=\"headerlink\" title=\"分组\"\u003e\u003c/a\u003e分组\u003c/h4\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e表达式\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(exp)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配的子表达式。()中的内容就是子表达式。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(?\u0026lt;name\u0026gt;exp)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e命名的子表达式（反向引用）。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(?:exp)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e非捕获组，表示当一个限定符应用到一个组，但组捕获的子字符串并非所需时，通常会使用非捕获组构造。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(?=exp)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配 exp 前面的位置。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(?\u0026lt;=exp)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配 exp 后面的位置。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(?!exp)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配后面跟的不是 exp 的位置。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(?\u0026lt;!exp)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配前面不是 exp 的位置。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch4 id=\"特殊符号\"\u003e\u003ca href=\"#特殊符号\" class=\"headerlink\" title=\"特殊符号\"\u003e\u003c/a\u003e特殊符号\u003c/h4\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e字符\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\\\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\\n’ 匹配换行符。序列 ‘\\‘ 匹配 “\u0026#34;，而 ‘(‘ 则匹配 “(“。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e|\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e指明两项之间的一个选择。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e[]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e匹配方括号范围内的任意一个字符。形式如：[xyz]、[^xyz]、[a-z]、[^a-z]、[x,y,z]\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"正则实战\"\u003e\u003ca href=\"#正则实战\" class=\"headerlink\" title=\"正则实战\"\u003e\u003c/a\u003e正则实战\u003c/h2\u003e\u003cp\u003e虽然本系列洋洋洒洒的大谈特谈正则表达式。但是我还是要在这里建议，如果一个正则表达式没有经过充分测试，还是要谨慎使用。\u003c/p\u003e\n\u003cp\u003e正则是把双刃剑，它可以为你节省大量的代码行。但是由于它不易阅读，维护起来可是头疼的哦（你需要一个字符一个字符的去理解）。\u003c/p\u003e\n\u003ch3 id=\"最实用的正则\"\u003e\u003ca href=\"#最实用的正则\" class=\"headerlink\" title=\"最实用的正则\"\u003e\u003c/a\u003e最实用的正则\u003c/h3\u003e\u003ch4 id=\"校验中文\"\u003e\u003ca href=\"#校验中文\" class=\"headerlink\" title=\"校验中文\"\u003e\u003c/a\u003e校验中文\u003c/h4\u003e\u003cp\u003e校验字符串中只能有中文字符（不包括中文标点符号）。中文字符的 Unicode 编码范围是 \u003ccode\u003e\\u4e00\u003c/code\u003e 到 \u003ccode\u003e\\u9fa5\u003c/code\u003e。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如有兴趣，可以参考\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://baike.baidu.com/link?url=3xi0vmvCIGKQLJZdn_BYhQ1IDFsoSJMrya6_eOjCBb7A6cRIW-zhZFLC9Yh8wjxU6A_HCfNuP8FBBXU9CN3Wcq\"\u003e\u003cstrong\u003e百度百科-Unicode\u003c/strong\u003e\u003c/a\u003e 。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cfigure class=\"highlight taggerscript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e^[\u003cspan class=\"symbol\"\u003e\\u4e00\u003c/span\u003e-\u003cspan class=\"symbol\"\u003e\\u9fa5\u003c/span\u003e]+$\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e匹配：\u003c/strong\u003e 春眠不觉晓\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e不匹配：\u003c/strong\u003e春眠不觉晓，\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"校验身份证号码\"\u003e\u003ca href=\"#校验身份证号码\" class=\"headerlink\" title=\"校验身份证号码\"\u003e\u003c/a\u003e校验身份证号码\u003c/h4\u003e\u003cp\u003e身份证为 15 位或 18 位。15 位是第一代身份证。从 1999 年 10 月 1 日起，全国实行公民身份证号码制度，居民身份证编号由原 15 位升至 18 位。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e15 位身份证\u003c/strong\u003e：由 15 位数字组成。排列顺序从左至右依次为：六位数字地区码；六位数字出生日期；三位顺序号，其中 15 位男为单数，女为双数。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e18 位身份证\u003c/strong\u003e：由十七位数字本体码和一位数字校验码组成。排列顺序从左至右依次为：六位数字地区码；八位数字出生日期；三位数字顺序码和一位数字校验码（也可能是 X）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e身份证号含义详情请见：\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://baike.baidu.com/link?url=5mYlYNE0RsSe2D4tydajtiaR8hAm4pPZ0FHSPuQ05N4f6H-i7qPuw7sY5KfNuiOVJWVWZvU4gf3IY-vIcKdP1CU4Fv-9pKmFQB50qGv_hZT2dkGbkd9--8_saY7omV80vEw9ixVeEwda37fHswfmtyU4QSiBG5s3K5K-JnYr1dqNlPu0f3t008UcLh5-wyID\"\u003e\u003cstrong\u003e百度百科-居民身份证号码\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003e地区码（6 位）\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight inform7\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e(1\u003cspan class=\"comment\"\u003e[1-5]\u003c/span\u003e|2\u003cspan class=\"comment\"\u003e[1-3]\u003c/span\u003e|3\u003cspan class=\"comment\"\u003e[1-7]\u003c/span\u003e|4\u003cspan class=\"comment\"\u003e[1-3]\u003c/span\u003e|5\u003cspan class=\"comment\"\u003e[0-4]\u003c/span\u003e|6\u003cspan class=\"comment\"\u003e[1-5]\u003c/span\u003e)\\d{4}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003e出生日期（8 位）\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e注：下面的是 18 位身份证的有效出生日期，如果是 15 位身份证，只要将第一个\\d{4}改为\\d{2}即可。\u003c/p\u003e\n\u003cfigure class=\"highlight scheme\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e((\\d{\u003cspan class=\"number\"\u003e4\u003c/span\u003e}((\u003cspan class=\"name\"\u003e0\u003c/span\u003e[\u003cspan class=\"name\"\u003e13578\u003c/span\u003e]|\u003cspan class=\"number\"\u003e1\u003c/span\u003e[\u003cspan class=\"name\"\u003e02\u003c/span\u003e])(\u003cspan class=\"name\"\u003e0\u003c/span\u003e[\u003cspan class=\"name\"\u003e1-9\u003c/span\u003e]|[\u003cspan class=\"name\"\u003e12\u003c/span\u003e]\\d|\u003cspan class=\"number\"\u003e3\u003c/span\u003e[\u003cspan class=\"name\"\u003e01\u003c/span\u003e])|(\u003cspan class=\"name\"\u003e0\u003c/span\u003e[\u003cspan class=\"name\"\u003e13456789\u003c/span\u003e]|\u003cspan class=\"number\"\u003e1\u003c/span\u003e[\u003cspan class=\"name\"\u003e012\u003c/span\u003e])(\u003cspan class=\"name\"\u003e0\u003c/span\u003e[\u003cspan class=\"name\"\u003e1-9\u003c/span\u003e]|[\u003cspan class=\"name\"\u003e12\u003c/span\u003e]\\d|\u003cspan class=\"number\"\u003e30\u003c/span\u003e)|\u003cspan class=\"number\"\u003e02\u003c/span\u003e(\u003cspan class=\"name\"\u003e0\u003c/span\u003e[\u003cspan class=\"name\"\u003e1-9\u003c/span\u003e]|\u003cspan class=\"number\"\u003e1\u003c/span\u003e\\d|\u003cspan class=\"number\"\u003e2\u003c/span\u003e[\u003cspan class=\"name\"\u003e0-8\u003c/span\u003e])))|([\u003cspan class=\"name\"\u003e02468\u003c/span\u003e][\u003cspan class=\"name\"\u003e048\u003c/span\u003e]|[\u003cspan class=\"name\"\u003e13579\u003c/span\u003e][\u003cspan class=\"name\"\u003e26\u003c/span\u003e])\u003cspan class=\"number\"\u003e0229\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003e15 位有效身份证\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight inform7\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e^((1\u003cspan class=\"comment\"\u003e[1-5]\u003c/span\u003e|2\u003cspan class=\"comment\"\u003e[1-3]\u003c/span\u003e|3\u003cspan class=\"comment\"\u003e[1-7]\u003c/span\u003e|4\u003cspan class=\"comment\"\u003e[1-3]\u003c/span\u003e|5\u003cspan class=\"comment\"\u003e[0-4]\u003c/span\u003e|6\u003cspan class=\"comment\"\u003e[1-5]\u003c/span\u003e)\\d{4})((\\d{2}((0\u003cspan class=\"comment\"\u003e[13578]\u003c/span\u003e|1\u003cspan class=\"comment\"\u003e[02]\u003c/span\u003e)(0\u003cspan class=\"comment\"\u003e[1-9]\u003c/span\u003e|\u003cspan class=\"comment\"\u003e[12]\u003c/span\u003e\\d|3\u003cspan class=\"comment\"\u003e[01]\u003c/span\u003e)|(0\u003cspan class=\"comment\"\u003e[13456789]\u003c/span\u003e|1\u003cspan class=\"comment\"\u003e[012]\u003c/span\u003e)(0\u003cspan class=\"comment\"\u003e[1-9]\u003c/span\u003e|\u003cspan class=\"comment\"\u003e[12]\u003c/span\u003e\\d|30)|02(0\u003cspan class=\"comment\"\u003e[1-9]\u003c/span\u003e|1\\d|2\u003cspan class=\"comment\"\u003e[0-8]\u003c/span\u003e)))|(\u003cspan class=\"comment\"\u003e[02468]\u003c/span\u003e\u003cspan class=\"comment\"\u003e[048]\u003c/span\u003e|\u003cspan class=\"comment\"\u003e[13579]\u003c/span\u003e\u003cspan class=\"comment\"\u003e[26]\u003c/span\u003e)0229)(\\d{3})$\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e匹配：\u003c/strong\u003e110001700101031\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e不匹配：\u003c/strong\u003e110001701501031\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e18 位有效身份证\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight inform7\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e^((1\u003cspan class=\"comment\"\u003e[1-5]\u003c/span\u003e|2\u003cspan class=\"comment\"\u003e[1-3]\u003c/span\u003e|3\u003cspan class=\"comment\"\u003e[1-7]\u003c/span\u003e|4\u003cspan class=\"comment\"\u003e[1-3]\u003c/span\u003e|5\u003cspan class=\"comment\"\u003e[0-4]\u003c/span\u003e|6\u003cspan class=\"comment\"\u003e[1-5]\u003c/span\u003e)\\d{4})((\\d{4}((0\u003cspan class=\"comment\"\u003e[13578]\u003c/span\u003e|1\u003cspan class=\"comment\"\u003e[02]\u003c/span\u003e)(0\u003cspan class=\"comment\"\u003e[1-9]\u003c/span\u003e|\u003cspan class=\"comment\"\u003e[12]\u003c/span\u003e\\d|3\u003cspan class=\"comment\"\u003e[01]\u003c/span\u003e)|(0\u003cspan class=\"comment\"\u003e[13456789]\u003c/span\u003e|1\u003cspan class=\"comment\"\u003e[012]\u003c/span\u003e)(0\u003cspan class=\"comment\"\u003e[1-9]\u003c/span\u003e|\u003cspan class=\"comment\"\u003e[12]\u003c/span\u003e\\d|30)|02(0\u003cspan class=\"comment\"\u003e[1-9]\u003c/span\u003e|1\\d|2\u003cspan class=\"comment\"\u003e[0-8]\u003c/span\u003e)))|(\u003cspan class=\"comment\"\u003e[02468]\u003c/span\u003e\u003cspan class=\"comment\"\u003e[048]\u003c/span\u003e|\u003cspan class=\"comment\"\u003e[13579]\u003c/span\u003e\u003cspan class=\"comment\"\u003e[26]\u003c/span\u003e)0229)(\\d{3}(\\d|X))$\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e匹配：\u003c/strong\u003e110001199001010310 | 11000019900101015X\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e不匹配：\u003c/strong\u003e990000199001010310 | 110001199013010310\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"校验有效用户名、密码\"\u003e\u003ca href=\"#校验有效用户名、密码\" class=\"headerlink\" title=\"校验有效用户名、密码\"\u003e\u003c/a\u003e校验有效用户名、密码\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e描述：\u003c/strong\u003e长度为 6-18 个字符，允许输入字母、数字、下划线，首字符必须为字母。\u003c/p\u003e\n\u003cfigure class=\"highlight dust\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"language-xml\"\u003e^[a-zA-Z]\\w\u003c/span\u003e\u003cspan class=\"template-variable\"\u003e{5,17}\u003c/span\u003e\u003cspan class=\"language-xml\"\u003e$\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e匹配：\u003c/strong\u003e\u003ca href=\"mailto:he_llo@worl.d.com\"\u003ehe_llo@worl.d.com\u003c/a\u003e | \u003ca href=\"mailto:hel.l-o@wor-ld.museum\"\u003ehel.l-o@wor-ld.museum\u003c/a\u003e | \u003ca href=\"mailto:h1ello@123.com\"\u003eh1ello@123.com\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e不匹配：\u003c/strong\u003e\u003ca href=\"mailto:hello@worl_d.com\"\u003ehello@worl_d.com\u003c/a\u003e | he\u0026amp;\u003ca href=\"mailto:llo@world.co1\"\u003ello@world.co1\u003c/a\u003e | .hello@wor#.co.uk\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"校验邮箱\"\u003e\u003ca href=\"#校验邮箱\" class=\"headerlink\" title=\"校验邮箱\"\u003e\u003c/a\u003e校验邮箱\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e描述：\u003c/strong\u003e不允许使用 IP 作为域名，如 : \u003ca href=\"mailto:hello@154.145.68.12\"\u003ehello@154.145.68.12\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e@\u003c/code\u003e符号前的邮箱用户和\u003ccode\u003e.\u003c/code\u003e符号前的域名(domain)必须满足以下条件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e字符只能是英文字母、数字、下划线\u003ccode\u003e_\u003c/code\u003e、\u003ccode\u003e.\u003c/code\u003e、\u003ccode\u003e-\u003c/code\u003e ；\u003c/li\u003e\n\u003cli\u003e首字符必须为字母或数字；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e_\u003c/code\u003e、\u003ccode\u003e.\u003c/code\u003e、\u003ccode\u003e-\u003c/code\u003e 不能连续出现。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e域名的根域只能为字母，且至少为两个字符。\u003c/p\u003e\n\u003cfigure class=\"highlight inform7\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e^\u003cspan class=\"comment\"\u003e[A-Za-z0-9]\u003c/span\u003e((\u003cspan class=\"comment\"\u003e[_\\.\\-]\u003c/span\u003e?\u003cspan class=\"comment\"\u003e[a-zA-Z0-9]\u003c/span\u003e+)*)@(\u003cspan class=\"comment\"\u003e[A-Za-z0-9]\u003c/span\u003e+)((\u003cspan class=\"comment\"\u003e[\\.\\-]\u003c/span\u003e?\u003cspan class=\"comment\"\u003e[a-zA-Z0-9]\u003c/span\u003e+)*)\\.(\u003cspan class=\"comment\"\u003e[A-Za-z]\u003c/span\u003e{2,})$\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e匹配：\u003c/strong\u003e\u003ca href=\"mailto:he_llo@worl.d.com\"\u003ehe_llo@worl.d.com\u003c/a\u003e | \u003ca href=\"mailto:hel.l-o@wor-ld.museum\"\u003ehel.l-o@wor-ld.museum\u003c/a\u003e | \u003ca href=\"mailto:h1ello@123.com\"\u003eh1ello@123.com\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e不匹配：\u003c/strong\u003e\u003ca href=\"mailto:hello@worl_d.com\"\u003ehello@worl_d.com\u003c/a\u003e | he\u0026amp;\u003ca href=\"mailto:llo@world.co1\"\u003ello@world.co1\u003c/a\u003e | .hello@wor#.co.uk\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"校验-URL\"\u003e\u003ca href=\"#校验-URL\" class=\"headerlink\" title=\"校验 URL\"\u003e\u003c/a\u003e校验 URL\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e描述：\u003c/strong\u003e校验 URL。支持 http、https、ftp、ftps。\u003c/p\u003e\n\u003cfigure class=\"highlight ruby\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e^(ht|\u003cspan class=\"params\"\u003ef)(tp\u003c/span\u003e|tps)\\\u003cspan class=\"symbol\"\u003e://\u003c/span\u003e[a-zA-\u003cspan class=\"variable constant_\"\u003eZ0\u003c/span\u003e-\u003cspan class=\"number\"\u003e9\u003c/span\u003e\\-\\.]+\\.([a-zA-Z]{\u003cspan class=\"number\"\u003e2\u003c/span\u003e,\u003cspan class=\"number\"\u003e3\u003c/span\u003e})\u003cspan class=\"string\"\u003e?(\u003c/span\u003e/\\S*)\u003cspan class=\"string\"\u003e?$\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e匹配：\u003c/strong\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://google.com/help/me\"\u003ehttp://google.com/help/me\u003c/a\u003e | \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.google.com/help/me/\"\u003ehttp://www.google.com/help/me/\u003c/a\u003e | \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.google.com/help.asp\"\u003ehttps://www.google.com/help.asp\u003c/a\u003e | \u003ca href=\"ftp://www.google.com/\"\u003eftp://www.google.com\u003c/a\u003e | ftps://google.org\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e不匹配：\u003c/strong\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://un/www.google.com/index.asp\"\u003ehttp://un/www.google.com/index.asp\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"校验时间\"\u003e\u003ca href=\"#校验时间\" class=\"headerlink\" title=\"校验时间\"\u003e\u003c/a\u003e校验时间\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e描述：\u003c/strong\u003e校验时间。时、分、秒必须是有效数字，如果数值不是两位数，十位需要补零。\u003c/p\u003e\n\u003cfigure class=\"highlight inform7\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e^(\u003cspan class=\"comment\"\u003e[0-1]\u003c/span\u003e\u003cspan class=\"comment\"\u003e[0-9]\u003c/span\u003e|\u003cspan class=\"comment\"\u003e[2]\u003c/span\u003e\u003cspan class=\"comment\"\u003e[0-3]\u003c/span\u003e):(\u003cspan class=\"comment\"\u003e[0-5]\u003c/span\u003e\u003cspan class=\"comment\"\u003e[0-9]\u003c/span\u003e)$\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e匹配：\u003c/strong\u003e00:00:00 | 23:59:59 | 17:06:30\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e不匹配：\u003c/strong\u003e17:6:30 | 24:16:30\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"校验日期\"\u003e\u003ca href=\"#校验日期\" class=\"headerlink\" title=\"校验日期\"\u003e\u003c/a\u003e校验日期\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e描述：\u003c/strong\u003e校验日期。日期满足以下条件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e格式 yyyy-MM-dd 或 yyyy-M-d\u003c/li\u003e\n\u003cli\u003e连字符可以没有或是“-”、“/”、“.”之一\u003c/li\u003e\n\u003cli\u003e闰年的二月可以有 29 日；而平年不可以。\u003c/li\u003e\n\u003cli\u003e一、三、五、七、八、十、十二月为 31 日。四、六、九、十一月为 30 日。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight inform7\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e^(?:(?!0000)\u003cspan class=\"comment\"\u003e[0-9]\u003c/span\u003e{4}(\u003cspan class=\"comment\"\u003e[-/.]\u003c/span\u003e?)(?:(?:0?\u003cspan class=\"comment\"\u003e[1-9]\u003c/span\u003e|1\u003cspan class=\"comment\"\u003e[0-2]\u003c/span\u003e)\\1(?:0?\u003cspan class=\"comment\"\u003e[1-9]\u003c/span\u003e|1\u003cspan class=\"comment\"\u003e[0-9]\u003c/span\u003e|2\u003cspan class=\"comment\"\u003e[0-8]\u003c/span\u003e)|(?:0?\u003cspan class=\"comment\"\u003e[13-9]\u003c/span\u003e|1\u003cspan class=\"comment\"\u003e[0-2]\u003c/span\u003e)\\1(?:29|30)|(?:0?\u003cspan class=\"comment\"\u003e[13578]\u003c/span\u003e|1\u003cspan class=\"comment\"\u003e[02]\u003c/span\u003e)\\1(?:31))|(?:\u003cspan class=\"comment\"\u003e[0-9]\u003c/span\u003e{2}(?:0\u003cspan class=\"comment\"\u003e[48]\u003c/span\u003e|\u003cspan class=\"comment\"\u003e[2468]\u003c/span\u003e\u003cspan class=\"comment\"\u003e[048]\u003c/span\u003e|\u003cspan class=\"comment\"\u003e[13579]\u003c/span\u003e\u003cspan class=\"comment\"\u003e[26]\u003c/span\u003e)|(?:0\u003cspan class=\"comment\"\u003e[48]\u003c/span\u003e|\u003cspan class=\"comment\"\u003e[2468]\u003c/span\u003e\u003cspan class=\"comment\"\u003e[048]\u003c/span\u003e|\u003cspan class=\"comment\"\u003e[13579]\u003c/span\u003e\u003cspan class=\"comment\"\u003e[26]\u003c/span\u003e)00)(\u003cspan class=\"comment\"\u003e[-/.]\u003c/span\u003e?)0?2\\2(?:29))$\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e匹配：\u003c/strong\u003e2016/1/1 | 2016/01/01 | 20160101 | 2016-01-01 | 2016.01.01 | 2000-02-29\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e不匹配：\u003c/strong\u003e2001-02-29 | 2016/12/32 | 2016/6/31 | 2016/13/1 | 2016/0/1\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"校验中国手机号码\"\u003e\u003ca href=\"#校验中国手机号码\" class=\"headerlink\" title=\"校验中国手机号码\"\u003e\u003c/a\u003e校验中国手机号码\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e描述：\u003c/strong\u003e中国手机号码正确格式：11 位数字。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e移动有 16 个号段：134、135、136、137、138、139、147、150、151、152、157、158、159、182、187、188。其中 147、157、188 是 3G 号段，其他都是 2G 号段。联通有 7 种号段：130、131、132、155、156、185、186。其中 186 是 3G（WCDMA）号段，其余为 2G 号段。电信有 4 个号段：133、153、180、189。其中 189 是 3G 号段（CDMA2000），133 号段主要用作无线网卡号。总结：13 开头手机号 0-9；15 开头手机号 0-3、5-9；18 开头手机号 0、2、5-9。\u003c/p\u003e\n\u003cp\u003e此外，中国在国际上的区号为 86，所以手机号开头有+86、86 也是合法的。\u003c/p\u003e\n\u003cp\u003e以上信息来源于 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://baike.baidu.com/link?url=Bia2K_f8rGcakOlP4d9m_-DNSgXU5-0NDP0pPavS0ZbhRHQcUFUTbMERjdO4u7cvkpTJaIDeUXq_EXWnMqXMdSuMQDX3NAbZXAlZYl_V18KATWF7y1EFzUyJ62rf3bAN\"\u003e\u003cstrong\u003e百度百科-手机号\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cfigure class=\"highlight gcode\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e^\u003cspan class=\"comment\"\u003e((\\+)\u003c/span\u003e?\u003cspan class=\"number\"\u003e86\u003c/span\u003e\\s*)?\u003cspan class=\"comment\"\u003e((13[0-9])\u003c/span\u003e|\u003cspan class=\"comment\"\u003e(15([0-3]|[5-9])\u003c/span\u003e)|\u003cspan class=\"comment\"\u003e(18[0,2,5-9])\u003c/span\u003e)\\d{\u003cspan class=\"number\"\u003e8\u003c/span\u003e}$\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e匹配：\u003c/strong\u003e+86 18012345678 | 86 18012345678 | 15812345678\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e不匹配：\u003c/strong\u003e15412345678 | 12912345678 | 180123456789\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"校验中国固话号码\"\u003e\u003ca href=\"#校验中国固话号码\" class=\"headerlink\" title=\"校验中国固话号码\"\u003e\u003c/a\u003e校验中国固话号码\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e描述：\u003c/strong\u003e固话号码，必须加区号（以 0 开头）。\u003cbr/\u003e3 位有效区号：010、020~029，固话位数为 8 位。\u003cbr/\u003e4 位有效区号：03xx 开头到 09xx，固话位数为 7。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果想了解更详细的信息，请参考 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://baike.baidu.com/link?url=sX8JoxK1ja5uM5pDYvQe27_QsyqAZ_78DLSeEvwjqtG_uXqU6p5Oh7CPbImNbnwu1ClOmD8udgDIswZfYzQIw0z3BYZO3eTplvVDzieuowTYqt7yHGDAqyT7o4vvGhg4\"\u003e\u003cstrong\u003e百度百科-电话区号\u003c/strong\u003e\u003c/a\u003e 。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cfigure class=\"highlight coq\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e^(\u003cspan class=\"number\"\u003e010\u003c/span\u003e|\u003cspan class=\"type\"\u003e02\u003c/span\u003e[\u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003cspan class=\"number\"\u003e-9\u003c/span\u003e])(\\s|\u003cspan class=\"type\"\u003e-)\\d\u003c/span\u003e{\u003cspan class=\"number\"\u003e8\u003c/span\u003e}|\u003cspan class=\"type\"\u003e(0\u003c/span\u003e[\u003cspan class=\"number\"\u003e3\u003c/span\u003e\u003cspan class=\"number\"\u003e-9\u003c/span\u003e]\\d{\u003cspan class=\"number\"\u003e2\u003c/span\u003e})(\\s|\u003cspan class=\"type\"\u003e-)\\d\u003c/span\u003e{\u003cspan class=\"number\"\u003e7\u003c/span\u003e}$\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e匹配：\u003c/strong\u003e010-12345678 | 010 12345678 | 0512-1234567 | 0512 1234567\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e不匹配：\u003c/strong\u003e1234567 | 12345678\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"校验-IPv4-地址\"\u003e\u003ca href=\"#校验-IPv4-地址\" class=\"headerlink\" title=\"校验 IPv4 地址\"\u003e\u003c/a\u003e校验 IPv4 地址\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e描述：\u003c/strong\u003eIP 地址是一个 32 位的二进制数，通常被分割为 4 个“8 位二进制数”（也就是 4 个字节）。IP 地址通常用“点分十进制”表示成（a.b.c.d）的形式，其中，a,b,c,d 都是 0~255 之间的十进制整数。\u003c/p\u003e\n\u003cfigure class=\"highlight inform7\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e^(\u003cspan class=\"comment\"\u003e[01]\u003c/span\u003e?\\d\\d?|2\u003cspan class=\"comment\"\u003e[0-4]\u003c/span\u003e\\d|25\u003cspan class=\"comment\"\u003e[0-5]\u003c/span\u003e)\\.(\u003cspan class=\"comment\"\u003e[01]\u003c/span\u003e?\\d\\d?|2\u003cspan class=\"comment\"\u003e[0-4]\u003c/span\u003e\\d|25\u003cspan class=\"comment\"\u003e[0-5]\u003c/span\u003e)\\.(\u003cspan class=\"comment\"\u003e[01]\u003c/span\u003e?\\d\\d?|2\u003cspan class=\"comment\"\u003e[0-4]\u003c/span\u003e\\d|25\u003cspan class=\"comment\"\u003e[0-5]\u003c/span\u003e)\\.(\u003cspan class=\"comment\"\u003e[01]\u003c/span\u003e?\\d\\d?|2\u003cspan class=\"comment\"\u003e[0-4]\u003c/span\u003e\\d|25\u003cspan class=\"comment\"\u003e[0-5]\u003c/span\u003e)$\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e匹配：\u003c/strong\u003e0.0.0.0 | 255.255.255.255 | 127.0.0.1\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e不匹配：\u003c/strong\u003e10.10.10 | 10.10.10.256\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"校验-IPv6-地址\"\u003e\u003ca href=\"#校验-IPv6-地址\" class=\"headerlink\" title=\"校验 IPv6 地址\"\u003e\u003c/a\u003e校验 IPv6 地址\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e描述：\u003c/strong\u003eIPv6 的 128 位地址通常写成 8 组，每组为四个十六进制数的形式。\u003c/p\u003e\n\u003cp\u003eIPv6 地址可以表示为以下形式：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIPv6 地址\u003c/li\u003e\n\u003cli\u003e零压缩 IPv6 地址(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://tools.ietf.org/html/rfc5952#section-2.2\"\u003esection 2.2 of rfc5952\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e带有本地链接区域索引的 IPv6 地址 (\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://tools.ietf.org/html/rfc4007#section-11\"\u003esection 11 of rfc4007\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e嵌入 IPv4 的 IPv6 地址(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://tools.ietf.org/html/rfc6052#section-2\"\u003esection 2 of rfc6052\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e映射 IPv4 的 IPv6 地址 (\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://tools.ietf.org/html/rfc2765#section-2.1\"\u003esection 2.1 of rfc2765\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e翻译 IPv4 的 IPv6 地址 (\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://tools.ietf.org/html/rfc2765#section-2.1\"\u003esection 2.1 of rfc2765\u003c/a\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e显然，IPv6 地址的表示方式很复杂。你也可以参考：\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://baike.baidu.com/link?url=D3nmh0q_G_ZVmxXFG79mjjNfT4hs9fwjqUgygh-tvhq43KYqx88HV27WEXmoT4nA4iGzXwXMm5L-j50C2gSL5q\"\u003e\u003cstrong\u003e百度百科-IPv6\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses\"\u003e\u003cstrong\u003eStack overflow 上的 IPv6 正则表达高票答案\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cfigure class=\"highlight scheme\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e(([\u003cspan class=\"name\"\u003e0-9a-fA-F\u003c/span\u003e]{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}:){\u003cspan class=\"number\"\u003e7\u003c/span\u003e,\u003cspan class=\"number\"\u003e7\u003c/span\u003e}[\u003cspan class=\"name\"\u003e0-9a-fA-F\u003c/span\u003e]{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}|([\u003cspan class=\"name\"\u003e0-9a-fA-F\u003c/span\u003e]{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}:){\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e7\u003c/span\u003e}:|([\u003cspan class=\"name\"\u003e0-9a-fA-F\u003c/span\u003e]{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}:){\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e6\u003c/span\u003e}:[\u003cspan class=\"name\"\u003e0-9a-fA-F\u003c/span\u003e]{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}|([\u003cspan class=\"name\"\u003e0-9a-fA-F\u003c/span\u003e]{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}:){\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e5\u003c/span\u003e}(\u003cspan class=\"name\"\u003e:\u003c/span\u003e[\u003cspan class=\"name\"\u003e0-9a-fA-F\u003c/span\u003e]{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}){\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e2\u003c/span\u003e}|([\u003cspan class=\"name\"\u003e0-9a-fA-F\u003c/span\u003e]{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}:){\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}(\u003cspan class=\"name\"\u003e:\u003c/span\u003e[\u003cspan class=\"name\"\u003e0-9a-fA-F\u003c/span\u003e]{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}){\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e3\u003c/span\u003e}|([\u003cspan class=\"name\"\u003e0-9a-fA-F\u003c/span\u003e]{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}:){\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e3\u003c/span\u003e}(\u003cspan class=\"name\"\u003e:\u003c/span\u003e[\u003cspan class=\"name\"\u003e0-9a-fA-F\u003c/span\u003e]{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}){\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}|([\u003cspan class=\"name\"\u003e0-9a-fA-F\u003c/span\u003e]{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}:){\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e2\u003c/span\u003e}(\u003cspan class=\"name\"\u003e:\u003c/span\u003e[\u003cspan class=\"name\"\u003e0-9a-fA-F\u003c/span\u003e]{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}){\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e5\u003c/span\u003e}|[\u003cspan class=\"name\"\u003e0-9a-fA-F\u003c/span\u003e]{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}:((\u003cspan class=\"name\"\u003e:\u003c/span\u003e[\u003cspan class=\"name\"\u003e0-9a-fA-F\u003c/span\u003e]{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}){\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e6\u003c/span\u003e})|:((\u003cspan class=\"name\"\u003e:\u003c/span\u003e[\u003cspan class=\"name\"\u003e0-9a-fA-F\u003c/span\u003e]{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}){\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e7\u003c/span\u003e}|:)|fe80:(\u003cspan class=\"name\"\u003e:\u003c/span\u003e[\u003cspan class=\"name\"\u003e0-9a-fA-F\u003c/span\u003e]{\u003cspan class=\"number\"\u003e0\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}){\u003cspan class=\"number\"\u003e0\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}%[\u003cspan class=\"name\"\u003e0-9a-zA-Z\u003c/span\u003e]{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,}|::(\u003cspan class=\"name\"\u003effff\u003c/span\u003e(\u003cspan class=\"name\"\u003e:0\u003c/span\u003e{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}){\u003cspan class=\"number\"\u003e0\u003c/span\u003e,\u003cspan class=\"number\"\u003e1\u003c/span\u003e}:){\u003cspan class=\"number\"\u003e0\u003c/span\u003e,\u003cspan class=\"number\"\u003e1\u003c/span\u003e}((\u003cspan class=\"name\"\u003e25\u003c/span\u003e[\u003cspan class=\"name\"\u003e0-5\u003c/span\u003e]|(\u003cspan class=\"name\"\u003e2\u003c/span\u003e[\u003cspan class=\"name\"\u003e0-4\u003c/span\u003e]|\u003cspan class=\"number\"\u003e1\u003c/span\u003e{\u003cspan class=\"number\"\u003e0\u003c/span\u003e,\u003cspan class=\"number\"\u003e1\u003c/span\u003e}[\u003cspan class=\"name\"\u003e0-9\u003c/span\u003e]){\u003cspan class=\"number\"\u003e0\u003c/span\u003e,\u003cspan class=\"number\"\u003e1\u003c/span\u003e}[\u003cspan class=\"name\"\u003e0-9\u003c/span\u003e])\\.){\u003cspan class=\"number\"\u003e3\u003c/span\u003e,\u003cspan class=\"number\"\u003e3\u003c/span\u003e}(\u003cspan class=\"name\"\u003e25\u003c/span\u003e[\u003cspan class=\"name\"\u003e0-5\u003c/span\u003e]|(\u003cspan class=\"name\"\u003e2\u003c/span\u003e[\u003cspan class=\"name\"\u003e0-4\u003c/span\u003e]|\u003cspan class=\"number\"\u003e1\u003c/span\u003e{\u003cspan class=\"number\"\u003e0\u003c/span\u003e,\u003cspan class=\"number\"\u003e1\u003c/span\u003e}[\u003cspan class=\"name\"\u003e0-9\u003c/span\u003e]){\u003cspan class=\"number\"\u003e0\u003c/span\u003e,\u003cspan class=\"number\"\u003e1\u003c/span\u003e}[\u003cspan class=\"name\"\u003e0-9\u003c/span\u003e])|([\u003cspan class=\"name\"\u003e0-9a-fA-F\u003c/span\u003e]{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}:){\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e4\u003c/span\u003e}:((\u003cspan class=\"name\"\u003e25\u003c/span\u003e[\u003cspan class=\"name\"\u003e0-5\u003c/span\u003e]|(\u003cspan class=\"name\"\u003e2\u003c/span\u003e[\u003cspan class=\"name\"\u003e0-4\u003c/span\u003e]|\u003cspan class=\"number\"\u003e1\u003c/span\u003e{\u003cspan class=\"number\"\u003e0\u003c/span\u003e,\u003cspan class=\"number\"\u003e1\u003c/span\u003e}[\u003cspan class=\"name\"\u003e0-9\u003c/span\u003e]){\u003cspan class=\"number\"\u003e0\u003c/span\u003e,\u003cspan class=\"number\"\u003e1\u003c/span\u003e}[\u003cspan class=\"name\"\u003e0-9\u003c/span\u003e])\\.){\u003cspan class=\"number\"\u003e3\u003c/span\u003e,\u003cspan class=\"number\"\u003e3\u003c/span\u003e}(\u003cspan class=\"name\"\u003e25\u003c/span\u003e[\u003cspan class=\"name\"\u003e0-5\u003c/span\u003e]|(\u003cspan class=\"name\"\u003e2\u003c/span\u003e[\u003cspan class=\"name\"\u003e0-4\u003c/span\u003e]|\u003cspan class=\"number\"\u003e1\u003c/span\u003e{\u003cspan class=\"number\"\u003e0\u003c/span\u003e,\u003cspan class=\"number\"\u003e1\u003c/span\u003e}[\u003cspan class=\"name\"\u003e0-9\u003c/span\u003e]){\u003cspan class=\"number\"\u003e0\u003c/span\u003e,\u003cspan class=\"number\"\u003e1\u003c/span\u003e}[\u003cspan class=\"name\"\u003e0-9\u003c/span\u003e]))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e匹配：\u003c/strong\u003e1:2:3:4:5:6:7:8 | 1:: | 1::8 | 1::6:7:8 | 1::5:6:7:8 | 1::4:5:6:7:8 | 1::3:4:5:6:7:8 | ::2:3:4:5:6:7:8 | 1:2:3:4:5:6:7:: | 1:2:3:4:5:6::8 | 1:2:3:4:5::8 | 1:2:3:4::8 | 1:2:3::8 | 1:2::8 | 1::8 | ::8 | fe80::7:8%1 | ::255.255.255.255 | 2001:db8:3:4::192.0.2.33 | 64:ff9b::192.0.2.33\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e不匹配：\u003c/strong\u003e1.2.3.4.5.6.7.8 | 1::2::3\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"特定字符\"\u003e\u003ca href=\"#特定字符\" class=\"headerlink\" title=\"特定字符\"\u003e\u003c/a\u003e特定字符\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e匹配长度为 3 的字符串：\u003ccode\u003e^.{3}$\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e匹配由 26 个英文字母组成的字符串：\u003ccode\u003e^[A-Za-z]+$\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e匹配由 26 个大写英文字母组成的字符串：\u003ccode\u003e^[A-Z]+$\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e匹配由 26 个小写英文字母组成的字符串：\u003ccode\u003e^[a-z]+$\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e匹配由数字和 26 个英文字母组成的字符串：\u003ccode\u003e^[A-Za-z0-9]+$\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e匹配由数字、26 个英文字母或者下划线组成的字符串：\u003ccode\u003e^\\w+$\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"特定数字\"\u003e\u003ca href=\"#特定数字\" class=\"headerlink\" title=\"特定数字\"\u003e\u003c/a\u003e特定数字\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e匹配正整数：\u003ccode\u003e^[1-9]\\d*$\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e匹配负整数：\u003ccode\u003e^-[1-9]\\d*$\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e匹配整数：\u003ccode\u003e^(-?[1-9]\\d*)|0$\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e匹配正浮点数：\u003ccode\u003e^[1-9]\\d*\\.\\d+|0\\.\\d+$\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e匹配负浮点数：\u003ccode\u003e^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e匹配浮点数：\u003ccode\u003e^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"正则表达式的性能\"\u003e\u003ca href=\"#正则表达式的性能\" class=\"headerlink\" title=\"正则表达式的性能\"\u003e\u003c/a\u003e正则表达式的性能\u003c/h2\u003e\u003cp\u003e目前实现正则表达式引擎的方式有两种：DFA 自动机（Deterministic Final Automata 确定有限状态自动机）和 NFA 自动机（Non deterministic Finite Automaton 非确定有限状态自动机）。对比来看，构造 DFA 自动机的代价远大于 NFA 自动机，但 DFA 自动机的执行效率高于 NFA 自动机。\u003c/p\u003e\n\u003cp\u003e假设一个字符串的长度是 n，如果用 DFA 自动机作为正则表达式引擎，则匹配的时间复杂度为 O(n)；如果用 NFA 自动机作为正则表达式引擎，由于 NFA 自动机在匹配过程中存在大量的分支和回溯，假设 NFA 的状态数为 s，则该匹配算法的时间复杂度为 O（ns）。\u003c/p\u003e\n\u003cp\u003eNFA 自动机的优势是支持更多功能。例如，捕获 group、环视、占有优先量词等高级功能。这些功能都是基于子表达式独立进行匹配，因此在编程语言里，使用的正则表达式库都是基于 NFA 实现的。\u003c/p\u003e\n\u003ch3 id=\"NFA-自动机的回溯\"\u003e\u003ca href=\"#NFA-自动机的回溯\" class=\"headerlink\" title=\"NFA 自动机的回溯\"\u003e\u003c/a\u003eNFA 自动机的回溯\u003c/h3\u003e\u003cp\u003e用 NFA 自动机实现的比较复杂的正则表达式，在匹配过程中经常会引起回溯问题。大量的回溯会长时间地占用 CPU，从而带来系统性能开销。\u003c/p\u003e\n\u003cfigure class=\"highlight ini\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003etext\u003c/span\u003e=“abbc”\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003eregex\u003c/span\u003e=“ab{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e3\u003c/span\u003e}c”\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这个例子匹配目的是：匹配以 a 开头，以 c 结尾，中间有 1-3 个 b 字符的字符串。NFA 自动机对其解析的过程是这样的：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e读取正则表达式第一个匹配符 a 和字符串第一个字符 a 进行比较，a 对 a，匹配。\u003c/li\u003e\n\u003cli\u003e然后，读取正则表达式第二个匹配符 \u003ccode\u003eb{1,3}\u003c/code\u003e 和字符串的第二个字符 b 进行比较，匹配。但因为 \u003ccode\u003eb{1,3}\u003c/code\u003e 表示 1-3 个 b 字符串，NFA 自动机又具有贪婪特性，所以此时不会继续读取正则表达式的下一个匹配符，而是依旧使用 \u003ccode\u003eb{1,3}\u003c/code\u003e 和字符串的第三个字符 b 进行比较，结果还是匹配。\u003c/li\u003e\n\u003cli\u003e接着继续使用 \u003ccode\u003eb{1,3}\u003c/code\u003e 和字符串的第四个字符 c 进行比较，发现不匹配了，此时就会发生回溯，已经读取的字符串第四个字符 c 将被吐出去，指针回到第三个字符 b 的位置。\u003c/li\u003e\n\u003cli\u003e那么发生回溯以后，匹配过程怎么继续呢？程序会读取正则表达式的下一个匹配符 c，和字符串中的第四个字符 c 进行比较，结果匹配，结束。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"如何避免回溯\"\u003e\u003ca href=\"#如何避免回溯\" class=\"headerlink\" title=\"如何避免回溯\"\u003e\u003c/a\u003e如何避免回溯\u003c/h3\u003e\u003ch4 id=\"贪婪模式（Greedy）\"\u003e\u003ca href=\"#贪婪模式（Greedy）\" class=\"headerlink\" title=\"贪婪模式（Greedy）\"\u003e\u003c/a\u003e贪婪模式（Greedy）\u003c/h4\u003e\u003cp\u003e顾名思义，就是在数量匹配中，如果单独使用 +、 ? 、* 或{min,max} 等量词，正则表达式会匹配尽可能多的内容。\u003c/p\u003e\n\u003cp\u003e例如，上边那个例子：\u003c/p\u003e\n\u003cfigure class=\"highlight ini\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003etext\u003c/span\u003e=“abbc”\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003eregex\u003c/span\u003e=“ab{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e3\u003c/span\u003e}c”\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e就是在贪婪模式下，NFA 自动机读取了最大的匹配范围，即匹配 3 个 b 字符。匹配发生了一次失败，就引起了一次回溯。如果匹配结果是“abbbc”，就会匹配成功。\u003c/p\u003e\n\u003cfigure class=\"highlight ini\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003etext\u003c/span\u003e=“abbbc”\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003eregex\u003c/span\u003e=“ab{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e3\u003c/span\u003e}c”\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"懒惰模式（Reluctant）\"\u003e\u003ca href=\"#懒惰模式（Reluctant）\" class=\"headerlink\" title=\"懒惰模式（Reluctant）\"\u003e\u003c/a\u003e懒惰模式（Reluctant）\u003c/h4\u003e\u003cp\u003e在该模式下，正则表达式会尽可能少地重复匹配字符。如果匹配成功，它会继续匹配剩余的字符串。\u003c/p\u003e\n\u003cp\u003e例如，在上面例子的字符后面加一个“？”，就可以开启懒惰模式。\u003c/p\u003e\n\u003cfigure class=\"highlight ini\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003etext\u003c/span\u003e=“abc”\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003eregex\u003c/span\u003e=“ab{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e3\u003c/span\u003e}?c”\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e匹配结果是“abc”，该模式下 NFA 自动机首先选择最小的匹配范围，即匹配 1 个 b 字符，因此就避免了回溯问题。\u003c/p\u003e\n\u003ch4 id=\"独占模式（Possessive）\"\u003e\u003ca href=\"#独占模式（Possessive）\" class=\"headerlink\" title=\"独占模式（Possessive）\"\u003e\u003c/a\u003e独占模式（Possessive）\u003c/h4\u003e\u003cp\u003e同贪婪模式一样，独占模式一样会最大限度地匹配更多内容；不同的是，在独占模式下，匹配失败就会结束匹配，不会发生回溯问题。\u003c/p\u003e\n\u003cp\u003e还是上边的例子，在字符后面加一个“+”，就可以开启独占模式。\u003c/p\u003e\n\u003cfigure class=\"highlight ini\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003etext\u003c/span\u003e=“abbc”\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003eregex\u003c/span\u003e=“ab{\u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003cspan class=\"number\"\u003e3\u003c/span\u003e}+bc”\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e结果是不匹配，结束匹配，不会发生回溯问题。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e讲到这里，你应该非常清楚了，\u003cstrong\u003e避免回溯的方法就是：使用懒惰模式和独占模式。\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"正则表达式的优化\"\u003e\u003ca href=\"#正则表达式的优化\" class=\"headerlink\" title=\"正则表达式的优化\"\u003e\u003c/a\u003e正则表达式的优化\u003c/h3\u003e\u003ch4 id=\"少用贪婪模式，多用独占模式\"\u003e\u003ca href=\"#少用贪婪模式，多用独占模式\" class=\"headerlink\" title=\"少用贪婪模式，多用独占模式\"\u003e\u003c/a\u003e少用贪婪模式，多用独占模式\u003c/h4\u003e\u003cp\u003e贪婪模式会引起回溯问题，可以使用独占模式来避免回溯。\u003c/p\u003e\n\u003ch4 id=\"减少分支选择\"\u003e\u003ca href=\"#减少分支选择\" class=\"headerlink\" title=\"减少分支选择\"\u003e\u003c/a\u003e减少分支选择\u003c/h4\u003e\u003cp\u003e分支选择类型 \u003ccode\u003e(X|Y|Z)\u003c/code\u003e 的正则表达式会降低性能，我们在开发的时候要尽量减少使用。如果一定要用，我们可以通过以下几种方式来优化：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e首先，我们需要考虑选择的顺序，将比较常用的选择项放在前面，使它们可以较快地被匹配；\u003c/li\u003e\n\u003cli\u003e其次，我们可以尝试提取共用模式，例如，将 \u003ccode\u003e(abcd|abef)\u003c/code\u003e 替换为 \u003ccode\u003eab(cd|ef)\u003c/code\u003e，后者匹配速度较快，因为 NFA 自动机会尝试匹配 ab，如果没有找到，就不会再尝试任何选项；\u003c/li\u003e\n\u003cli\u003e最后，如果是简单的分支选择类型，我们可以用三次 index 代替 \u003ccode\u003e(X|Y|Z)\u003c/code\u003e，如果测试的话，你就会发现三次 index 的效率要比 \u003ccode\u003e(X|Y|Z)\u003c/code\u003e 高出一些。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"减少捕获嵌套\"\u003e\u003ca href=\"#减少捕获嵌套\" class=\"headerlink\" title=\"减少捕获嵌套\"\u003e\u003c/a\u003e减少捕获嵌套\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e捕获组是指把正则表达式中，子表达式匹配的内容保存到以数字编号或显式命名的数组中，方便后面引用。一般一个 () 就是一个捕获组，捕获组可以进行嵌套。\u003c/li\u003e\n\u003cli\u003e非捕获组则是指参与匹配却不进行分组编号的捕获组，其表达式一般由 \u003ccode\u003e(?:exp)\u003c/code\u003e 组成。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在正则表达式中，每个捕获组都有一个编号，编号 0 代表整个匹配到的内容。我们可以看下面的例子：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003etext\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;\u0026lt;input high=\\\u0026#34;20\\\u0026#34; weight=\\\u0026#34;70\\\u0026#34;\u0026gt;test\u0026lt;/input\u0026gt;\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tString reg=\u003cspan class=\"string\"\u003e\u0026#34;(\u0026lt;input.*?\u0026gt;)(.*?)(\u0026lt;/input\u0026gt;)\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003ePattern\u003c/span\u003e \u003cspan class=\"variable\"\u003ep\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Pattern.compile(reg);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eMatcher\u003c/span\u003e \u003cspan class=\"variable\"\u003em\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e p.matcher(text);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e(m.find()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(m.group(\u003cspan class=\"number\"\u003e0\u003c/span\u003e));\u003cspan class=\"comment\"\u003e// 整个匹配到的内容\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(m.group(\u003cspan class=\"number\"\u003e1\u003c/span\u003e));\u003cspan class=\"comment\"\u003e//(\u0026lt;input.*?\u0026gt;)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(m.group(\u003cspan class=\"number\"\u003e2\u003c/span\u003e));\u003cspan class=\"comment\"\u003e//(.*?)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(m.group(\u003cspan class=\"number\"\u003e3\u003c/span\u003e));\u003cspan class=\"comment\"\u003e//(\u0026lt;/input\u0026gt;)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e运行结果：\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026lt;input high=\\\u0026#34;20\\\u0026#34; weight=\\\u0026#34;70\\\u0026#34;\u0026gt;\u003cspan class=\"built_in\"\u003etest\u003c/span\u003e\u0026lt;/input\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;input high=\\\u0026#34;20\\\u0026#34; weight=\\\u0026#34;70\\\u0026#34;\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003etest\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;/input\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果你并不需要获取某一个分组内的文本，那么就使用非捕获分组。例如，使用“(?:X)”代替“(X)”，我们再看下面的例子：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003etext\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;\u0026lt;input high=\\\u0026#34;20\\\u0026#34; weight=\\\u0026#34;70\\\u0026#34;\u0026gt;test\u0026lt;/input\u0026gt;\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tString reg=\u003cspan class=\"string\"\u003e\u0026#34;(?:\u0026lt;input.*?\u0026gt;)(.*?)(?:\u0026lt;/input\u0026gt;)\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003ePattern\u003c/span\u003e \u003cspan class=\"variable\"\u003ep\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Pattern.compile(reg);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eMatcher\u003c/span\u003e \u003cspan class=\"variable\"\u003em\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e p.matcher(text);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e(m.find()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(m.group(\u003cspan class=\"number\"\u003e0\u003c/span\u003e));\u003cspan class=\"comment\"\u003e// 整个匹配到的内容\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(m.group(\u003cspan class=\"number\"\u003e1\u003c/span\u003e));\u003cspan class=\"comment\"\u003e//(.*?)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e运行结果：\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026lt;input high=\\\u0026#34;20\\\u0026#34; weight=\\\u0026#34;70\\\u0026#34;\u0026gt;\u003cspan class=\"built_in\"\u003etest\u003c/span\u003e\u0026lt;/input\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003etest\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e综上可知：减少不需要获取的分组，可以提高正则表达式的性能。\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://deerchao.net/tutorials/regex/regex.htm\"\u003e正则表达式 30 分钟入门教程\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://msdn.microsoft.com/zh-cn/library/d9eze55x(v=vs.80).aspx\"\u003emsdn 正则表达式教程\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://blog.csdn.net/lxcnn/article/details/4362500\"\u003e正则应用之——日期正则表达式\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.regexlib.com/\"\u003ehttp://www.regexlib.com/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100028001\"\u003e《Java 性能调优实战》\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-12-25T10:43:11Z",
  "Author": "钝悟 ◾ Dunwu"
}