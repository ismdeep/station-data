{
  "Source": "dunwu",
  "Title": "spring-boot-async",
  "Link": "https://dunwu.github.io/blog/pages/92add2/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"SpringBoot-教程之处理异步请求\"\u003e\u003ca href=\"#SpringBoot-教程之处理异步请求\" class=\"headerlink\" title=\"SpringBoot 教程之处理异步请求\"\u003e\u003c/a\u003eSpringBoot 教程之处理异步请求\u003c/h1\u003e\u003ch2 id=\"EnableAsync-注解\"\u003e\u003ca href=\"#EnableAsync-注解\" class=\"headerlink\" title=\"@EnableAsync 注解\"\u003e\u003c/a\u003e\u003ccode\u003e@EnableAsync\u003c/code\u003e 注解\u003c/h2\u003e\u003cp\u003e要使用 \u003ccode\u003e@Async\u003c/code\u003e，首先需要使用 \u003ccode\u003e@EnableAsync\u003c/code\u003e 注解开启 Spring Boot 中的异步特性。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@Configuration\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@EnableAsync\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eAppConfig\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e更详细的配置说明，可以参考：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/AsyncConfigurer.html\"\u003e\u003ccode\u003eAsyncConfigurer\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"Async-注解\"\u003e\u003ca href=\"#Async-注解\" class=\"headerlink\" title=\"@Async 注解\"\u003e\u003c/a\u003e\u003ccode\u003e@Async\u003c/code\u003e 注解\u003c/h2\u003e\u003ch3 id=\"支持的用法\"\u003e\u003ca href=\"#支持的用法\" class=\"headerlink\" title=\"支持的用法\"\u003e\u003c/a\u003e支持的用法\u003c/h3\u003e\u003cp\u003e（1）\u003cstrong\u003e无入参无返回值方法\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e您可以用 \u003ccode\u003e@Async\u003c/code\u003e 注解修饰方法，这表明这个方法是异步方式调用。换句话说，程序在调用此方法时会立即返回，而方法的实际执行发生在已提交给 Spring \u003ccode\u003eTaskExecutor\u003c/code\u003e 的任务中。在最简单的情况下，您可以将注解应用于返回 void 的方法，如以下示例所示：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@Async\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003edoSomething\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// this will be executed asynchronously\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e（2）\u003cstrong\u003e有入参无返回值方法\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e与使用 \u003ccode\u003e@Scheduled\u003c/code\u003e 注释注释的方法不同，这些方法可以指定参数，因为它们在运行时由调用者以“正常”方式调用，而不是由容器管理的调度任务调用。例如，以下代码是 \u003ccode\u003e@Async\u003c/code\u003e 注解的合法应用：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@Async\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003edoSomething\u003c/span\u003e\u003cspan class=\"params\"\u003e(String s)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// this will be executed asynchronously\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e（3）\u003cstrong\u003e有入参有返回值方法\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e甚至可以异步调用返回值的方法。但是，这些方法需要具有 \u003ccode\u003eFuture\u003c/code\u003e 类型的返回值。这仍然提供了异步执行的好处，以便调用者可以在调用 \u003ccode\u003eFuture\u003c/code\u003e 上的 \u003ccode\u003eget()\u003c/code\u003e 之前执行其他任务。以下示例显示如何在返回值的方法上使用\u003ccode\u003e@Async\u003c/code\u003e：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@Async\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eFuture\u0026lt;String\u0026gt; \u003cspan class=\"title function_\"\u003ereturnSomething\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e i)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// this will be executed asynchronously\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"不支持的用法\"\u003e\u003ca href=\"#不支持的用法\" class=\"headerlink\" title=\"不支持的用法\"\u003e\u003c/a\u003e不支持的用法\u003c/h3\u003e\u003cp\u003e\u003ccode\u003e@Async\u003c/code\u003e 不能与生命周期回调一起使用，例如 \u003ccode\u003e@PostConstruct\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e要异步初始化 Spring bean，必须使用单独的初始化 Spring bean，然后在目标上调用 \u003ccode\u003e@Async\u003c/code\u003e 带注释的方法，如以下示例所示：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSampleBeanImpl\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSampleBean\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Async\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003edoSomething\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSampleBeanInitializer\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e SampleBean bean;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eSampleBeanInitializer\u003c/span\u003e\u003cspan class=\"params\"\u003e(SampleBean bean)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.bean = bean;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@PostConstruct\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003einitialize\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        bean.doSomething();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"明确指定执行器\"\u003e\u003ca href=\"#明确指定执行器\" class=\"headerlink\" title=\"明确指定执行器\"\u003e\u003c/a\u003e明确指定执行器\u003c/h2\u003e\u003cp\u003e默认情况下，在方法上指定 \u003ccode\u003e@Async\u003c/code\u003e 时，使用的执行器是在启用异步支持时配置的执行器，即如果使用 XML 或 \u003ccode\u003eAsyncConfigurer\u003c/code\u003e 实现（如果有），则为 \u003ccode\u003eannotation-driven\u003c/code\u003e 元素。但是，如果需要指示在执行给定方法时应使用默认值以外的执行器，则可以使用 \u003ccode\u003e@Async\u003c/code\u003e 注解的 value 属性。以下示例显示了如何执行此操作：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@Async(\u0026#34;otherExecutor\u0026#34;)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003edoSomething\u003c/span\u003e\u003cspan class=\"params\"\u003e(String s)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// this will be executed asynchronously by \u0026#34;otherExecutor\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在这种情况下，“otherExecutor”可以是 Spring 容器中任何 Executor bean 的名称，也可以是与任何 Executor 关联的限定符的名称（例如，使用 \u003ccode\u003e\u0026lt;qualifier\u0026gt;\u003c/code\u003e 元素或 Spring 的 \u003ccode\u003e@Qualifier\u003c/code\u003e 注释指定） ）。\u003c/p\u003e\n\u003ch2 id=\"管理-Async-的异常\"\u003e\u003ca href=\"#管理-Async-的异常\" class=\"headerlink\" title=\"管理 @Async 的异常\"\u003e\u003c/a\u003e管理 \u003ccode\u003e@Async\u003c/code\u003e 的异常\u003c/h2\u003e\u003cp\u003e当 \u003ccode\u003e@Async\u003c/code\u003e 方法的返回值类型为 \u003ccode\u003eFuture\u003c/code\u003e 型时，很容易管理在方法执行期间抛出的异常，因为在调用 \u003ccode\u003eget\u003c/code\u003e 结果时会抛出此异常。但是，对于返回值类型为 void 型的方法，异常不会被捕获且无法传输。您可以提供 \u003ccode\u003eAsyncUncaughtExceptionHandler\u003c/code\u003e 来处理此类异常。以下示例显示了如何执行此操作：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMyAsyncUncaughtExceptionHandler\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eAsyncUncaughtExceptionHandler\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003ehandleUncaughtException\u003c/span\u003e\u003cspan class=\"params\"\u003e(Throwable ex, Method method, Object... params)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// handle exception\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e默认情况下，仅记录异常。您可以使用 \u003ccode\u003eAsyncConfigurer\u003c/code\u003e 或 \u003ccode\u003e\u0026lt;task：annotation-driven /\u0026gt;\u003c/code\u003e XML 元素定义自定义 \u003ccode\u003eAsyncUncaughtExceptionHandler\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"示例源码\"\u003e\u003ca href=\"#示例源码\" class=\"headerlink\" title=\"示例源码\"\u003e\u003c/a\u003e示例源码\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e示例源码：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/dunwu/spring-boot-tutorial/tree/master/codes/spring-boot-async\"\u003espring-boot-async\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config\"\u003eSpring Boot 官方文档之 boot-features-external-config\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#scheduling-annotation-support\"\u003eSpring Boot 官方文档之 scheduling-annotation-support\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-11-18T06:55:01Z",
  "Author": "钝悟 ◾ Dunwu"
}