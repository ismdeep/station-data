{
  "Source": "dunwu",
  "Title": "Java NIO",
  "Link": "https://dunwu.github.io/blog/pages/6912a8/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Java-NIO\"\u003e\u003ca href=\"#Java-NIO\" class=\"headerlink\" title=\"Java NIO\"\u003e\u003c/a\u003eJava NIO\u003c/h1\u003e\u003cblockquote\u003e\n\u003cp\u003e关键词：\u003ccode\u003eChannel\u003c/code\u003e、\u003ccode\u003eBuffer\u003c/code\u003e、\u003ccode\u003eSelector\u003c/code\u003e、\u003ccode\u003e非阻塞\u003c/code\u003e、\u003ccode\u003e多路复用\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"NIO-简介\"\u003e\u003ca href=\"#NIO-简介\" class=\"headerlink\" title=\"NIO 简介\"\u003e\u003c/a\u003eNIO 简介\u003c/h2\u003e\u003cp\u003eNIO 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入了 NIO 框架，对应 \u003ccode\u003ejava.nio\u003c/code\u003e 包，提供了 \u003ccode\u003eChannel\u003c/code\u003e 、\u003ccode\u003eSelector\u003c/code\u003e、\u003ccode\u003eBuffer\u003c/code\u003e 等抽象。\u003c/p\u003e\n\u003cp\u003eNIO 中的 N 可以理解为 Non-blocking，不单纯是 New。它支持面向缓冲的，基于通道的 I/O 操作方法。 NIO 提供了与传统 BIO 模型中的 \u003ccode\u003eSocket\u003c/code\u003e 和 \u003ccode\u003eServerSocket\u003c/code\u003e 相对应的 \u003ccode\u003eSocketChannel\u003c/code\u003e 和 \u003ccode\u003eServerSocketChannel\u003c/code\u003e 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞 I/O 来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发。\u003c/p\u003e\n\u003ch3 id=\"NIO-和-BIO-的区别\"\u003e\u003ca href=\"#NIO-和-BIO-的区别\" class=\"headerlink\" title=\"NIO 和 BIO 的区别\"\u003e\u003c/a\u003eNIO 和 BIO 的区别\u003c/h3\u003e\u003ch4 id=\"Non-blocking-IO-非阻塞\"\u003e\u003ca href=\"#Non-blocking-IO-非阻塞\" class=\"headerlink\" title=\"Non-blocking IO(非阻塞)\"\u003e\u003c/a\u003eNon-blocking IO(非阻塞)\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003eBIO 是阻塞的，NIO 是非阻塞的\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eBIO 的各种流是阻塞的。这意味着，当一个线程调用 \u003ccode\u003eread()\u003c/code\u003e 或 \u003ccode\u003ewrite()\u003c/code\u003e 时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。在此期间，该线程不能再干其他任何事。\u003c/p\u003e\n\u003cp\u003eNIO 使我们可以进行非阻塞 IO 操作。比如说，单线程中从通道读取数据到 buffer，同时可以继续做别的事情，当数据读取到 buffer 中后，线程再继续处理数据。写数据也是一样的。另外，非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。\u003c/p\u003e\n\u003ch4 id=\"Buffer-缓冲区\"\u003e\u003ca href=\"#Buffer-缓冲区\" class=\"headerlink\" title=\"Buffer(缓冲区)\"\u003e\u003c/a\u003eBuffer(缓冲区)\u003c/h4\u003e\u003cp\u003e**BIO 面向流(Stream oriented)，而 NIO 面向缓冲区(Buffer oriented)**。\u003c/p\u003e\n\u003cp\u003eBuffer 是一个对象，它包含一些要写入或者要读出的数据。在 NIO 类库中加入 Buffer 对象，体现了 NIO 与 BIO 的一个重要区别。在面向流的 BIO 中可以将数据直接写入或者将数据直接读到 Stream 对象中。虽然 Stream 中也有 Buffer 开头的扩展类，但只是流的包装类，还是从流读到缓冲区，而 NIO 却是直接读到 Buffer 中进行操作。\u003c/p\u003e\n\u003cp\u003e在 NIO 厍中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读缓冲区中的数据; 在写入数据时，写入到缓冲区中。任何时候访问 NIO 中的数据，都是通过缓冲区进行操作。\u003c/p\u003e\n\u003cp\u003e最常用的缓冲区是 ByteBuffer,一个 ByteBuffer 提供了一组功能用于操作 byte 数组。除了 ByteBuffer,还有其他的一些缓冲区，事实上，每一种 Java 基本类型（除了 Boolean 类型）都对应有一种缓冲区。\u003c/p\u003e\n\u003ch4 id=\"Channel-通道\"\u003e\u003ca href=\"#Channel-通道\" class=\"headerlink\" title=\"Channel (通道)\"\u003e\u003c/a\u003eChannel (通道)\u003c/h4\u003e\u003cp\u003eNIO 通过 Channel（通道） 进行读写。\u003c/p\u003e\n\u003cp\u003e通道是双向的，可读也可写，而流的读写是单向的。无论读写，通道只能和 Buffer 交互。因为 Buffer，通道可以异步地读写。\u003c/p\u003e\n\u003ch4 id=\"Selector-选择器\"\u003e\u003ca href=\"#Selector-选择器\" class=\"headerlink\" title=\"Selector (选择器)\"\u003e\u003c/a\u003eSelector (选择器)\u003c/h4\u003e\u003cp\u003eNIO 有选择器，而 IO 没有。\u003c/p\u003e\n\u003cp\u003e选择器用于使用单个线程处理多个通道。因此，它需要较少的线程来处理这些通道。线程之间的切换对于操作系统来说是昂贵的。 因此，为了提高系统效率选择器是有用的。\u003c/p\u003e\n\u003ch3 id=\"NIO-的基本流程\"\u003e\u003ca href=\"#NIO-的基本流程\" class=\"headerlink\" title=\"NIO 的基本流程\"\u003e\u003c/a\u003eNIO 的基本流程\u003c/h3\u003e\u003cp\u003e通常来说 NIO 中的所有 IO 都是从 Channel（通道） 开始的。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e从通道进行数据读取 ：创建一个缓冲区，然后请求通道读取数据。\u003c/li\u003e\n\u003cli\u003e从通道进行数据写入 ：创建一个缓冲区，填充数据，并要求通道写入数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"NIO-核心组件\"\u003e\u003ca href=\"#NIO-核心组件\" class=\"headerlink\" title=\"NIO 核心组件\"\u003e\u003c/a\u003eNIO 核心组件\u003c/h3\u003e\u003cp\u003eNIO 包含下面几个核心的组件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eChannel(通道)\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBuffer(缓冲区)\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSelector(选择器)\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Channel-通道-1\"\u003e\u003ca href=\"#Channel-通道-1\" class=\"headerlink\" title=\"Channel(通道)\"\u003e\u003c/a\u003eChannel(通道)\u003c/h2\u003e\u003cp\u003e通道（\u003ccode\u003eChannel\u003c/code\u003e）是对 BIO 中的流的模拟，可以通过它读写数据。\u003c/p\u003e\n\u003cp\u003eChannel，类似在 Linux 之类操作系统上看到的文件描述符，是 NIO 中被用来支持批量式 IO 操作的一种抽象。\u003c/p\u003e\n\u003cp\u003eFile 或者 Socket，通常被认为是比较高层次的抽象，而 Channel 则是更加操作系统底层的一种抽象，这也使得 NIO 得以充分利用现代操作系统底层机制，获得特定场景的性能优化，例如，DMA（Direct Memory Access）等。不同层次的抽象是相互关联的，我们可以通过 Socket 获取 Channel，反之亦然。\u003c/p\u003e\n\u003cp\u003e通道与流的不同之处在于：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e流是单向的\u003c/strong\u003e - 一个流只能单纯的负责读或写。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e通道是双向的\u003c/strong\u003e - 一个通道可以同时用于读写。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e通道包括以下类型：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eFileChannel\u003c/code\u003e：从文件中读写数据；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDatagramChannel\u003c/code\u003e：通过 UDP 读写网络中数据；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSocketChannel\u003c/code\u003e：通过 TCP 读写网络中数据；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eServerSocketChannel\u003c/code\u003e：可以监听新进来的 TCP 连接，对每一个新进来的连接都会创建一个 SocketChannel。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Buffer-缓冲区-1\"\u003e\u003ca href=\"#Buffer-缓冲区-1\" class=\"headerlink\" title=\"Buffer(缓冲区)\"\u003e\u003c/a\u003eBuffer(缓冲区)\u003c/h2\u003e\u003cp\u003eNIO 与传统 I/O 不同，它是基于块（Block）的，它以块为基本单位处理数据。\u003ccode\u003eBuffer\u003c/code\u003e 是一块连续的内存块，是 NIO 读写数据的缓冲。\u003ccode\u003eBuffer\u003c/code\u003e 可以将文件一次性读入内存再做后续处理，而传统的方式是边读文件边处理数据。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e向 \u003ccode\u003eChannel\u003c/code\u003e 读写的数据都必须先置于缓冲区中\u003c/strong\u003e。也就是说，不会直接对通道进行读写数据，而是要先经过缓冲区。缓冲区实质上是一个数组，但它不仅仅是一个数组。缓冲区提供了对数据的结构化访问，而且还可以跟踪系统的读/写进程。\u003c/p\u003e\n\u003cp\u003eBIO 和 NIO 已经很好地集成了，\u003ccode\u003ejava.io.*\u003c/code\u003e 已经以 NIO 为基础重新实现了，所以现在它可以利用 NIO 的一些特性。例如，\u003ccode\u003ejava.io.*\u003c/code\u003e 包中的一些类包含以块的形式读写数据的方法，这使得即使在面向流的系统中，处理速度也会更快。\u003c/p\u003e\n\u003cp\u003e缓冲区包括以下类型：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eByteBuffer\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCharBuffer\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eShortBuffer\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIntBuffer\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLongBuffer\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFloatBuffer\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDoubleBuffer\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"缓冲区状态变量\"\u003e\u003ca href=\"#缓冲区状态变量\" class=\"headerlink\" title=\"缓冲区状态变量\"\u003e\u003c/a\u003e缓冲区状态变量\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecapacity\u003c/code\u003e：最大容量；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eposition\u003c/code\u003e：当前已经读写的字节数；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elimit\u003c/code\u003e：还可以读写的字节数。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emark\u003c/code\u003e：记录上一次 postion 的位置，默认是 0，算是一个便利性的考虑，往往不是必须\u003cbr/\u003e的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e缓冲区状态变量的改变过程举例：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e新建一个大小为 8 个字节的缓冲区，此时 position 为 0，而 limit = capacity = 8。capacity 变量不会改变，下面的讨论会忽略它。\u003c/li\u003e\n\u003cli\u003e从输入通道中读取 5 个字节数据写入缓冲区中，此时 position 移动设置为 5，limit 保持不变。\u003c/li\u003e\n\u003cli\u003e在将缓冲区的数据写到输出通道之前，需要先调用 flip() 方法，这个方法将 limit 设置为当前 position，并将 position 设置为 0。\u003c/li\u003e\n\u003cli\u003e从缓冲区中取 4 个字节到输出缓冲中，此时 position 设为 4。\u003c/li\u003e\n\u003cli\u003e最后需要调用 clear() 方法来清空缓冲区，此时 position 和 limit 都被设置为最初位置。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"文件-NIO-示例\"\u003e\u003ca href=\"#文件-NIO-示例\" class=\"headerlink\" title=\"文件 NIO 示例\"\u003e\u003c/a\u003e文件 NIO 示例\u003c/h3\u003e\u003cp\u003e以下展示了使用 NIO 快速复制文件的实例：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003efastCopy\u003c/span\u003e\u003cspan class=\"params\"\u003e(String src, String dist)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e IOException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* 获得源文件的输入字节流 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eFileInputStream\u003c/span\u003e \u003cspan class=\"variable\"\u003efin\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eFileInputStream\u003c/span\u003e(src);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* 获取输入字节流的文件通道 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eFileChannel\u003c/span\u003e \u003cspan class=\"variable\"\u003efcin\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e fin.getChannel();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* 获取目标文件的输出字节流 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eFileOutputStream\u003c/span\u003e \u003cspan class=\"variable\"\u003efout\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eFileOutputStream\u003c/span\u003e(dist);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* 获取输出字节流的通道 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eFileChannel\u003c/span\u003e \u003cspan class=\"variable\"\u003efcout\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e fout.getChannel();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* 为缓冲区分配 1024 个字节 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eByteBuffer\u003c/span\u003e \u003cspan class=\"variable\"\u003ebuffer\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e ByteBuffer.allocateDirect(\u003cspan class=\"number\"\u003e1024\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e/* 从输入通道中读取数据到缓冲区中 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003er\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e fcin.read(buffer);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e/* read() 返回 -1 表示 EOF */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (r == -\u003cspan class=\"number\"\u003e1\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ebreak\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e/* 切换读写 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        buffer.flip();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e/* 把缓冲区的内容写入输出文件中 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        fcout.write(buffer);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e/* 清空缓冲区 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        buffer.clear();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"DirectBuffer\"\u003e\u003ca href=\"#DirectBuffer\" class=\"headerlink\" title=\"DirectBuffer\"\u003e\u003c/a\u003eDirectBuffer\u003c/h3\u003e\u003cp\u003eNIO 还提供了一个可以直接访问物理内存的类 \u003ccode\u003eDirectBuffer\u003c/code\u003e。普通的 \u003ccode\u003eBuffer\u003c/code\u003e 分配的是 JVM 堆内存，而 \u003ccode\u003eDirectBuffer\u003c/code\u003e 是直接分配物理内存。\u003c/p\u003e\n\u003cp\u003e数据要输出到外部设备，必须先从用户空间复制到内核空间，再复制到输出设备，而 \u003ccode\u003eDirectBuffer\u003c/code\u003e 则是直接将步骤简化为从内核空间复制到外部设备，减少了数据拷贝。\u003c/p\u003e\n\u003cp\u003e这里拓展一点，由于 \u003ccode\u003eDirectBuffer\u003c/code\u003e 申请的是非 JVM 的物理内存，所以创建和销毁的代价很高。\u003ccode\u003eDirectBuffer\u003c/code\u003e 申请的内存并不是直接由 JVM 负责垃圾回收，但在 \u003ccode\u003eDirectBuffer\u003c/code\u003e 包装类被回收时，会通过 Java 引用机制来释放该内存块。\u003c/p\u003e\n\u003ch2 id=\"Selector-选择器-1\"\u003e\u003ca href=\"#Selector-选择器-1\" class=\"headerlink\" title=\"Selector(选择器)\"\u003e\u003c/a\u003eSelector(选择器)\u003c/h2\u003e\u003cp\u003eNIO 常常被叫做非阻塞 IO，主要是因为 NIO 在网络通信中的非阻塞特性被广泛使用。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eSelector\u003c/code\u003e 是 Java NIO 编程的基础。用于检查一个或多个 NIO \u003ccode\u003eChannel\u003c/code\u003e 的状态是否处于可读、可写。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNIO 实现了 IO 多路复用中的 Reactor 模型\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e一个线程（\u003ccode\u003eThread\u003c/code\u003e）使用一个\u003cstrong\u003e选择器 \u003ccode\u003eSelector\u003c/code\u003e 通过轮询的方式去监听多个通道 \u003ccode\u003eChannel\u003c/code\u003e 上的事件（\u003ccode\u003eaccpet\u003c/code\u003e、\u003ccode\u003eread\u003c/code\u003e）\u003c/strong\u003e，如果某个 \u003ccode\u003eChannel\u003c/code\u003e 上面发生监听事件，这个 \u003ccode\u003eChannel\u003c/code\u003e 就处于就绪状态，然后进行 I/O 操作。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e通过\u003cstrong\u003e配置监听的通道 \u003ccode\u003eChannel\u003c/code\u003e 为非阻塞\u003c/strong\u003e，那么当 \u003ccode\u003eChannel\u003c/code\u003e 上的 IO 事件还未到达时，就不会进入阻塞状态一直等待，而是继续轮询其它 \u003ccode\u003eChannel\u003c/code\u003e，找到 IO 事件已经到达的 \u003ccode\u003eChannel\u003c/code\u003e 执行。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e因为创建和切换线程的开销很大，因此使用\u003cstrong\u003e一个线程来处理多个事件\u003c/strong\u003e而不是一个线程处理一个事件具有更好的性能。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e需要注意的是，只有 \u003ccode\u003eSocketChannel\u003c/code\u003e 才能配置为非阻塞，而 \u003ccode\u003eFileChannel\u003c/code\u003e 不能，因为 \u003ccode\u003eFileChannel\u003c/code\u003e 配置非阻塞也没有意义。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e目前操作系统的 I/O 多路复用机制都使用了 epoll，相比传统的 select 机制，epoll 没有最大连接句柄 1024 的限制。所以 Selector 在理论上可以轮询成千上万的客户端。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"创建选择器\"\u003e\u003ca href=\"#创建选择器\" class=\"headerlink\" title=\"创建选择器\"\u003e\u003c/a\u003e创建选择器\u003c/h3\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eSelector\u003c/span\u003e \u003cspan class=\"variable\"\u003eselector\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Selector.open();\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"将通道注册到选择器上\"\u003e\u003ca href=\"#将通道注册到选择器上\" class=\"headerlink\" title=\"将通道注册到选择器上\"\u003e\u003c/a\u003e将通道注册到选择器上\u003c/h3\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eServerSocketChannel\u003c/span\u003e \u003cspan class=\"variable\"\u003essChannel\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e ServerSocketChannel.open();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003essChannel.configureBlocking(\u003cspan class=\"literal\"\u003efalse\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003essChannel.register(selector, SelectionKey.OP_ACCEPT);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e通道必须配置为非阻塞模式，否则使用选择器就没有任何意义了，因为如果通道在某个事件上被阻塞，那么服务器就不能响应其它事件，必须等待这个事件处理完毕才能去处理其它事件，显然这和选择器的作用背道而驰。\u003c/p\u003e\n\u003cp\u003e在将通道注册到选择器上时，还需要指定要注册的具体事件，主要有以下几类：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSelectionKey.OP_CONNECT\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSelectionKey.OP_ACCEPT\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSelectionKey.OP_READ\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSelectionKey.OP_WRITE\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e它们在 SelectionKey 的定义如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eOP_READ\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u0026lt;\u0026lt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eOP_WRITE\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u0026lt;\u0026lt; \u003cspan class=\"number\"\u003e2\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eOP_CONNECT\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u0026lt;\u0026lt; \u003cspan class=\"number\"\u003e3\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eOP_ACCEPT\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u0026lt;\u0026lt; \u003cspan class=\"number\"\u003e4\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可以看出每个事件可以被当成一个位域，从而组成事件集整数。例如：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003einterestSet\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e SelectionKey.OP_READ | SelectionKey.OP_WRITE;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"监听事件\"\u003e\u003ca href=\"#监听事件\" class=\"headerlink\" title=\"监听事件\"\u003e\u003c/a\u003e监听事件\u003c/h3\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003enum\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e selector.select();\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e使用 \u003ccode\u003eselect()\u003c/code\u003e 来监听到达的事件，它会一直阻塞直到有至少一个事件到达。\u003c/p\u003e\n\u003ch3 id=\"获取到达的事件\"\u003e\u003ca href=\"#获取到达的事件\" class=\"headerlink\" title=\"获取到达的事件\"\u003e\u003c/a\u003e获取到达的事件\u003c/h3\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eSet\u0026lt;SelectionKey\u0026gt; keys = selector.selectedKeys();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eIterator\u0026lt;SelectionKey\u0026gt; keyIterator = keys.iterator();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (keyIterator.hasNext()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eSelectionKey\u003c/span\u003e \u003cspan class=\"variable\"\u003ekey\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e keyIterator.next();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (key.isAcceptable()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (key.isReadable()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    keyIterator.remove();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"事件循环\"\u003e\u003ca href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"\u003e\u003c/a\u003e事件循环\u003c/h3\u003e\u003cp\u003e因为一次 select() 调用不能处理完所有的事件，并且服务器端有可能需要一直监听事件，因此服务器端处理事件的代码一般会放在一个死循环内。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003enum\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e selector.select();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Set\u0026lt;SelectionKey\u0026gt; keys = selector.selectedKeys();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Iterator\u0026lt;SelectionKey\u0026gt; keyIterator = keys.iterator();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (keyIterator.hasNext()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eSelectionKey\u003c/span\u003e \u003cspan class=\"variable\"\u003ekey\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e keyIterator.next();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (key.isAcceptable()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (key.isReadable()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        keyIterator.remove();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"套接字-NIO-示例\"\u003e\u003ca href=\"#套接字-NIO-示例\" class=\"headerlink\" title=\"套接字 NIO 示例\"\u003e\u003c/a\u003e套接字 NIO 示例\u003c/h3\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e60\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e61\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e62\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e63\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e65\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e66\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e67\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e68\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e69\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e70\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e71\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eNIOServer\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e IOException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eSelector\u003c/span\u003e \u003cspan class=\"variable\"\u003eselector\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Selector.open();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eServerSocketChannel\u003c/span\u003e \u003cspan class=\"variable\"\u003essChannel\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e ServerSocketChannel.open();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ssChannel.configureBlocking(\u003cspan class=\"literal\"\u003efalse\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ssChannel.register(selector, SelectionKey.OP_ACCEPT);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eServerSocket\u003c/span\u003e \u003cspan class=\"variable\"\u003eserverSocket\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e ssChannel.socket();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eInetSocketAddress\u003c/span\u003e \u003cspan class=\"variable\"\u003eaddress\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eInetSocketAddress\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;127.0.0.1\u0026#34;\u003c/span\u003e, \u003cspan class=\"number\"\u003e8888\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        serverSocket.bind(address);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            selector.select();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            Set\u0026lt;SelectionKey\u0026gt; keys = selector.selectedKeys();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            Iterator\u0026lt;SelectionKey\u0026gt; keyIterator = keys.iterator();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (keyIterator.hasNext()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"type\"\u003eSelectionKey\u003c/span\u003e \u003cspan class=\"variable\"\u003ekey\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e keyIterator.next();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (key.isAcceptable()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"type\"\u003eServerSocketChannel\u003c/span\u003e \u003cspan class=\"variable\"\u003essChannel1\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e (ServerSocketChannel) key.channel();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"comment\"\u003e// 服务器会为每个新连接创建一个 SocketChannel\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"type\"\u003eSocketChannel\u003c/span\u003e \u003cspan class=\"variable\"\u003esChannel\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e ssChannel1.accept();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    sChannel.configureBlocking(\u003cspan class=\"literal\"\u003efalse\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"comment\"\u003e// 这个新连接主要用于从客户端读取数据\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    sChannel.register(selector, SelectionKey.OP_READ);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (key.isReadable()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"type\"\u003eSocketChannel\u003c/span\u003e \u003cspan class=\"variable\"\u003esChannel\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e (SocketChannel) key.channel();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    System.out.println(readDataFromSocketChannel(sChannel));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    sChannel.close();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                keyIterator.remove();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e String \u003cspan class=\"title function_\"\u003ereadDataFromSocketChannel\u003c/span\u003e\u003cspan class=\"params\"\u003e(SocketChannel sChannel)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e IOException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eByteBuffer\u003c/span\u003e \u003cspan class=\"variable\"\u003ebuffer\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e ByteBuffer.allocate(\u003cspan class=\"number\"\u003e1024\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eStringBuilder\u003c/span\u003e \u003cspan class=\"variable\"\u003edata\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eStringBuilder\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            buffer.clear();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003en\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e sChannel.read(buffer);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (n == -\u003cspan class=\"number\"\u003e1\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003ebreak\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            buffer.flip();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003elimit\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e buffer.limit();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003echar\u003c/span\u003e[] dst = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003echar\u003c/span\u003e[limit];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; limit; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                dst[i] = (\u003cspan class=\"type\"\u003echar\u003c/span\u003e) buffer.get(i);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            data.append(dst);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            buffer.clear();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e data.toString();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eNIOClient\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e IOException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eSocket\u003c/span\u003e \u003cspan class=\"variable\"\u003esocket\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSocket\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;127.0.0.1\u0026#34;\u003c/span\u003e, \u003cspan class=\"number\"\u003e8888\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eOutputStream\u003c/span\u003e \u003cspan class=\"variable\"\u003eout\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e socket.getOutputStream();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003es\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;hello world\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        out.write(s.getBytes());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        out.close();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"内存映射文件\"\u003e\u003ca href=\"#内存映射文件\" class=\"headerlink\" title=\"内存映射文件\"\u003e\u003c/a\u003e内存映射文件\u003c/h3\u003e\u003cp\u003e内存映射文件 I/O 是一种读和写文件数据的方法，它可以比常规的基于流或者基于通道的 I/O 快得多。\u003c/p\u003e\n\u003cp\u003e向内存映射文件写入可能是危险的，只是改变数组的单个元素这样的简单操作，就可能会直接修改磁盘上的文件。修改数据与将数据保存到磁盘是没有分开的。\u003c/p\u003e\n\u003cp\u003e下面代码行将文件的前 1024 个字节映射到内存中，map() 方法返回一个 MappedByteBuffer，它是 ByteBuffer 的子类。因此，可以像使用其他任何 ByteBuffer 一样使用新映射的缓冲区，操作系统会在需要时负责执行映射。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eMappedByteBuffer\u003c/span\u003e \u003cspan class=\"variable\"\u003embb\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e fc.map(FileChannel.MapMode.READ_WRITE, \u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u003cspan class=\"number\"\u003e1024\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"NIO-vs-BIO\"\u003e\u003ca href=\"#NIO-vs-BIO\" class=\"headerlink\" title=\"NIO vs. BIO\"\u003e\u003c/a\u003eNIO vs. BIO\u003c/h2\u003e\u003cp\u003eBIO 与 NIO 最重要的区别是数据打包和传输的方式：\u003cstrong\u003eBIO 以流的方式处理数据，而 NIO 以块的方式处理数据\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e面向流的 BIO 一次处理一个字节数据\u003c/strong\u003e：一个输入流产生一个字节数据，一个输出流消费一个字节数据。为流式数据创建过滤器非常容易，链接几个过滤器，以便每个过滤器只负责复杂处理机制的一部分。不利的一面是，面向流的 I/O 通常相当慢。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e面向块的 NIO 一次处理一个数据块\u003c/strong\u003e，按块处理数据比按流处理数据要快得多。但是面向块的 NIO 缺少一些面向流的 BIO 所具有的优雅性和简单性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBIO 模式：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200630212345.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003eNIO 模式：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200630212248.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/BIO-NIO-AIO.md\"\u003eBIO,NIO,AIO 总结\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zhuanlan.zhihu.com/p/23488863\"\u003eJava NIO 浅析\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://tutorials.jenkov.com/java-nio/index.html\"\u003eJavaNIO Tutorial\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.ibm.com/developerworks/cn/education/java/j-nio/j-nio.html\"\u003eIBM: NIO 入门\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-02-19T10:54:21Z",
  "Author": "钝悟 ◾ Dunwu"
}