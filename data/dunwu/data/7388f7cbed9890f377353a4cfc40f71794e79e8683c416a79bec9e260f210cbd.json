{
  "Source": "dunwu",
  "Title": "Linux 命令 Cheat Sheet",
  "Link": "https://dunwu.github.io/blog/pages/af6d52/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Linux-命令-Cheat-Sheet\"\u003e\u003ca href=\"#Linux-命令-Cheat-Sheet\" class=\"headerlink\" title=\"Linux 命令 Cheat Sheet\"\u003e\u003c/a\u003eLinux 命令 Cheat Sheet\u003c/h1\u003e\u003ch2 id=\"常见命令分类\"\u003e\u003ca href=\"#常见命令分类\" class=\"headerlink\" title=\"常见命令分类\"\u003e\u003c/a\u003e常见命令分类\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://dunwu.github.io/linux-tutorial/linux/cli/linux-cli-help.html\"\u003e查看 Linux 命令帮助信息\u003c/a\u003e - 关键词：\u003ccode\u003ehelp\u003c/code\u003e, \u003ccode\u003ewhatis\u003c/code\u003e, \u003ccode\u003einfo\u003c/code\u003e, \u003ccode\u003ewhich\u003c/code\u003e, \u003ccode\u003ewhereis\u003c/code\u003e, \u003ccode\u003eman\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dunwu.github.io/linux-tutorial/linux/cli/linux-cli-dir.html\"\u003eLinux 文件目录管理\u003c/a\u003e - 关键词：\u003ccode\u003ecd\u003c/code\u003e, \u003ccode\u003els\u003c/code\u003e, \u003ccode\u003epwd\u003c/code\u003e, \u003ccode\u003emkdir\u003c/code\u003e, \u003ccode\u003ermdir\u003c/code\u003e, \u003ccode\u003etree\u003c/code\u003e, \u003ccode\u003etouch\u003c/code\u003e, \u003ccode\u003eln\u003c/code\u003e, \u003ccode\u003erename\u003c/code\u003e, \u003ccode\u003estat\u003c/code\u003e, \u003ccode\u003efile\u003c/code\u003e, \u003ccode\u003echmod\u003c/code\u003e, \u003ccode\u003echown\u003c/code\u003e, \u003ccode\u003elocate\u003c/code\u003e, \u003ccode\u003efind\u003c/code\u003e, \u003ccode\u003ecp\u003c/code\u003e, \u003ccode\u003emv\u003c/code\u003e, \u003ccode\u003erm\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dunwu.github.io/linux-tutorial/linux/cli/linux-cli-file.html\"\u003eLinux 文件内容查看命令\u003c/a\u003e - 关键词：\u003ccode\u003ecat\u003c/code\u003e, \u003ccode\u003ehead\u003c/code\u003e, \u003ccode\u003etail\u003c/code\u003e, \u003ccode\u003emore\u003c/code\u003e, \u003ccode\u003eless\u003c/code\u003e, \u003ccode\u003esed\u003c/code\u003e, \u003ccode\u003evi\u003c/code\u003e, \u003ccode\u003egrep\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dunwu.github.io/linux-tutorial/linux/cli/linux-cli-file-compress.html\"\u003eLinux 文件压缩和解压\u003c/a\u003e - 关键词：\u003ccode\u003etar\u003c/code\u003e, \u003ccode\u003egzip\u003c/code\u003e, \u003ccode\u003ezip\u003c/code\u003e, \u003ccode\u003eunzip\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dunwu.github.io/linux-tutorial/linux/cli/linux-cli-user.html\"\u003eLinux 用户管理\u003c/a\u003e - 关键词：\u003ccode\u003egroupadd\u003c/code\u003e, \u003ccode\u003egroupdel\u003c/code\u003e, \u003ccode\u003egroupmod\u003c/code\u003e, \u003ccode\u003euseradd\u003c/code\u003e, \u003ccode\u003euserdel\u003c/code\u003e, \u003ccode\u003eusermod\u003c/code\u003e, \u003ccode\u003epasswd\u003c/code\u003e, \u003ccode\u003esu\u003c/code\u003e, \u003ccode\u003esudo\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dunwu.github.io/linux-tutorial/linux/cli/linux-cli-system.html\"\u003eLinux 系统管理\u003c/a\u003e - 关键词：\u003ccode\u003ereboot\u003c/code\u003e, \u003ccode\u003eexit\u003c/code\u003e, \u003ccode\u003eshutdown\u003c/code\u003e, \u003ccode\u003edate\u003c/code\u003e, \u003ccode\u003emount\u003c/code\u003e, \u003ccode\u003eumount\u003c/code\u003e, \u003ccode\u003eps\u003c/code\u003e, \u003ccode\u003ekill\u003c/code\u003e, \u003ccode\u003esystemctl\u003c/code\u003e, \u003ccode\u003eservice\u003c/code\u003e, \u003ccode\u003ecrontab\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dunwu.github.io/linux-tutorial/linux/cli/linux-cli-net.html\"\u003eLinux 网络管理\u003c/a\u003e - 关键词：关键词：\u003ccode\u003ecurl\u003c/code\u003e, \u003ccode\u003ewget\u003c/code\u003e, \u003ccode\u003etelnet\u003c/code\u003e, \u003ccode\u003eip\u003c/code\u003e, \u003ccode\u003ehostname\u003c/code\u003e, \u003ccode\u003eifconfig\u003c/code\u003e, \u003ccode\u003eroute\u003c/code\u003e, \u003ccode\u003essh\u003c/code\u003e, \u003ccode\u003essh-keygen\u003c/code\u003e, \u003ccode\u003efirewalld\u003c/code\u003e, \u003ccode\u003eiptables\u003c/code\u003e, \u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003enslookup\u003c/code\u003e, \u003ccode\u003enc\u003c/code\u003e/\u003ccode\u003enetcat\u003c/code\u003e, \u003ccode\u003eping\u003c/code\u003e, \u003ccode\u003etraceroute\u003c/code\u003e, \u003ccode\u003enetstat\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dunwu.github.io/linux-tutorial/linux/cli/linux-cli-hardware.html\"\u003eLinux 硬件管理\u003c/a\u003e - 关键词：\u003ccode\u003edf\u003c/code\u003e, \u003ccode\u003edu\u003c/code\u003e, \u003ccode\u003etop\u003c/code\u003e, \u003ccode\u003efree\u003c/code\u003e, \u003ccode\u003eiotop\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dunwu.github.io/linux-tutorial/linux/cli/linux-cli-software.html\"\u003eLinux 软件管理\u003c/a\u003e - 关键词：\u003ccode\u003erpm\u003c/code\u003e, \u003ccode\u003eyum\u003c/code\u003e, \u003ccode\u003eapt-get\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"基础\"\u003e\u003ca href=\"#基础\" class=\"headerlink\" title=\"基础\"\u003e\u003c/a\u003e基础\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cp\u003e学习 Bash 的基础知识。具体地，在命令行中输入 \u003ccode\u003eman bash\u003c/code\u003e 并至少全文浏览一遍; 它理解起来很简单并且不冗长。其他的 shell 可能很好用，但 Bash 的功能已经足够强大并且到几乎总是可用的（ 如果你\u003cem\u003e只\u003c/em\u003e学习 zsh，fish 或其他的 shell 的话，在你自己的设备上会显得很方便，但过度依赖这些功能会给您带来不便，例如当你需要在服务器上工作时）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e熟悉至少一个基于文本的编辑器。通常而言 Vim （\u003ccode\u003evi\u003c/code\u003e） 会是你最好的选择，毕竟在终端中编辑文本时 Vim 是最好用的工具（甚至大部分情况下 Vim 要比 Emacs、大型 IDE 或是炫酷的编辑器更好用）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e学会如何使用 \u003ccode\u003eman\u003c/code\u003e 命令去阅读文档。学会使用 \u003ccode\u003eapropos\u003c/code\u003e 去查找文档。知道有些命令并不对应可执行文件，而是在 Bash 内置好的，此时可以使用 \u003ccode\u003ehelp\u003c/code\u003e 和 \u003ccode\u003ehelp -d\u003c/code\u003e 命令获取帮助信息。你可以用 \u003ccode\u003etype 命令\u003c/code\u003e 来判断这个命令到底是可执行文件、shell 内置命令还是别名。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e学会使用 \u003ccode\u003e\u0026gt;\u003c/code\u003e 和 \u003ccode\u003e\u0026lt;\u003c/code\u003e 来重定向输出和输入，学会使用 \u003ccode\u003e|\u003c/code\u003e 来重定向管道。明白 \u003ccode\u003e\u0026gt;\u003c/code\u003e 会覆盖了输出文件而 \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e学会使用通配符 \u003ccode\u003e*\u003c/code\u003e （或许再算上 \u003ccode\u003e?\u003c/code\u003e 和 \u003ccode\u003e[\u003c/code\u003e…\u003ccode\u003e]\u003c/code\u003e） 和引用以及引用中 \u003ccode\u003e\u0026#39;\u003c/code\u003e 和 \u003ccode\u003e\u0026#34;\u003c/code\u003e 的区别（后文中有一些具体的例子）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e熟悉 Bash 中的任务管理工具：\u003ccode\u003e\u0026amp;\u003c/code\u003e，\u003cstrong\u003ectrl-z\u003c/strong\u003e，\u003cstrong\u003ectrl-c\u003c/strong\u003e，\u003ccode\u003ejobs\u003c/code\u003e，\u003ccode\u003efg\u003c/code\u003e，\u003ccode\u003ebg\u003c/code\u003e，\u003ccode\u003ekill\u003c/code\u003e 等。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e学会使用 \u003ccode\u003essh\u003c/code\u003e 进行远程命令行登录，最好知道如何使用 \u003ccode\u003essh-agent\u003c/code\u003e，\u003ccode\u003essh-add\u003c/code\u003e 等命令来实现基础的无密码认证登录。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e学会基本的文件管理工具：\u003ccode\u003els\u003c/code\u003e 和 \u003ccode\u003els -l\u003c/code\u003e （了解 \u003ccode\u003els -l\u003c/code\u003e 中每一列代表的意义），\u003ccode\u003eless\u003c/code\u003e，\u003ccode\u003ehead\u003c/code\u003e，\u003ccode\u003etail\u003c/code\u003e 和 \u003ccode\u003etail -f\u003c/code\u003e （甚至 \u003ccode\u003eless +F\u003c/code\u003e），\u003ccode\u003eln\u003c/code\u003e 和 \u003ccode\u003eln -s\u003c/code\u003e （了解硬链接与软链接的区别），\u003ccode\u003echown\u003c/code\u003e，\u003ccode\u003echmod\u003c/code\u003e，\u003ccode\u003edu\u003c/code\u003e （硬盘使用情况概述：\u003ccode\u003edu -hs *\u003c/code\u003e）。 关于文件系统的管理，学习 \u003ccode\u003edf\u003c/code\u003e，\u003ccode\u003emount\u003c/code\u003e，\u003ccode\u003efdisk\u003c/code\u003e，\u003ccode\u003emkfs\u003c/code\u003e，\u003ccode\u003elsblk\u003c/code\u003e。知道 inode 是什么（与 \u003ccode\u003els -i\u003c/code\u003e 和 \u003ccode\u003edf -i\u003c/code\u003e 等命令相关）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e学习基本的网络管理工具：\u003ccode\u003eip\u003c/code\u003e 或 \u003ccode\u003eifconfig\u003c/code\u003e，\u003ccode\u003edig\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e学习并使用一种版本控制管理系统，例如 \u003ccode\u003egit\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e熟悉正则表达式，学会使用 \u003ccode\u003egrep\u003c/code\u003e／\u003ccode\u003eegrep\u003c/code\u003e，它们的参数中 \u003ccode\u003e-i\u003c/code\u003e，\u003ccode\u003e-o\u003c/code\u003e，\u003ccode\u003e-v\u003c/code\u003e，\u003ccode\u003e-A\u003c/code\u003e，\u003ccode\u003e-B\u003c/code\u003e 和 \u003ccode\u003e-C\u003c/code\u003e 这些是很常用并值得认真学习的。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e学会使用 \u003ccode\u003eapt-get\u003c/code\u003e，\u003ccode\u003eyum\u003c/code\u003e，\u003ccode\u003ednf\u003c/code\u003e 或 \u003ccode\u003epacman\u003c/code\u003e （具体使用哪个取决于你使用的 Linux 发行版）来查找和安装软件包。并确保你的环境中有 \u003ccode\u003epip\u003c/code\u003e 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 \u003ccode\u003epip\u003c/code\u003e 来安装会很方便）。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"日常使用\"\u003e\u003ca href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"\u003e\u003c/a\u003e日常使用\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cp\u003e在 Bash 中，可以通过按 \u003cstrong\u003eTab\u003c/strong\u003e 键实现自动补全参数，使用 \u003cstrong\u003ectrl-r\u003c/strong\u003e 搜索命令行历史记录（按下按键之后，输入关键字便可以搜索，重复按下 \u003cstrong\u003ectrl-r\u003c/strong\u003e 会向后查找匹配项，按下 \u003cstrong\u003eEnter\u003c/strong\u003e 键会执行当前匹配的命令，而按下右方向键会将匹配项放入当前行中，不会直接执行，以便做出修改）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e在 Bash 中，可以按下 \u003cstrong\u003ectrl-w\u003c/strong\u003e 删除你键入的最后一个单词，\u003cstrong\u003ectrl-u\u003c/strong\u003e 可以删除行内光标所在位置之前的内容，\u003cstrong\u003ealt-b\u003c/strong\u003e 和 \u003cstrong\u003ealt-f\u003c/strong\u003e 可以以单词为单位移动光标，\u003cstrong\u003ectrl-a\u003c/strong\u003e 可以将光标移至行首，\u003cstrong\u003ectrl-e\u003c/strong\u003e 可以将光标移至行尾，\u003cstrong\u003ectrl-k\u003c/strong\u003e 可以删除光标至行尾的所有内容，\u003cstrong\u003ectrl-l\u003c/strong\u003e 可以清屏。键入 \u003ccode\u003eman readline\u003c/code\u003e 可以查看 Bash 中的默认快捷键。内容有很多，例如 \u003cstrong\u003ealt-.\u003c/strong\u003e 循环地移向前一个参数，而 \u003cstrong\u003ealt-*\u003c/strong\u003e 可以展开通配符。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e你喜欢的话，可以执行 \u003ccode\u003eset -o vi\u003c/code\u003e 来使用 vi 风格的快捷键，而执行 \u003ccode\u003eset -o emacs\u003c/code\u003e 可以把它改回来。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e为了便于编辑长命令，在设置你的默认编辑器后（例如 \u003ccode\u003eexport EDITOR=vim\u003c/code\u003e），\u003cstrong\u003ectrl-x\u003c/strong\u003e \u003cstrong\u003ectrl-e\u003c/strong\u003e 会打开一个编辑器来编辑当前输入的命令。在 vi 风格下快捷键则是 \u003cstrong\u003eescape-v\u003c/strong\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e键入 \u003ccode\u003ehistory\u003c/code\u003e 查看命令行历史记录，再用 \u003ccode\u003e!n\u003c/code\u003e（\u003ccode\u003en\u003c/code\u003e 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是 \u003ccode\u003e!$\u003c/code\u003e， 它用于指代上次键入的参数，而 \u003ccode\u003e!!\u003c/code\u003e 可以指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些功能，你也可以通过快捷键 \u003cstrong\u003ectrl-r\u003c/strong\u003e 和 \u003cstrong\u003ealt-.\u003c/strong\u003e 来实现。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ecd\u003c/code\u003e 命令可以切换工作路径，输入 \u003ccode\u003ecd \\~\u003c/code\u003e 可以进入 home 目录。要访问你的 home 目录中的文件，可以使用前缀 \u003ccode\u003e\\~\u003c/code\u003e（例如 \u003ccode\u003e\\~/.bashrc\u003c/code\u003e）。在 \u003ccode\u003esh\u003c/code\u003e 脚本里则用环境变量 \u003ccode\u003e$HOME\u003c/code\u003e 指代 home 目录的路径。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e回到前一个工作路径：\u003ccode\u003ecd -\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e如果你输入命令的时候中途改了主意，按下 \u003cstrong\u003ealt-#\u003c/strong\u003e 在行首添加 \u003ccode\u003e#\u003c/code\u003e 把它当做注释再按下回车执行（或者依次按下 \u003cstrong\u003ectrl-a\u003c/strong\u003e， **#**， \u003cstrong\u003eenter\u003c/strong\u003e）。这样做的话，之后借助命令行历史记录，你可以很方便恢复你刚才输入到一半的命令。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ccode\u003exargs\u003c/code\u003e （ 或 \u003ccode\u003eparallel\u003c/code\u003e）。他们非常给力。注意到你可以控制每行参数个数（\u003ccode\u003e-L\u003c/code\u003e）和最大并行数（\u003ccode\u003e-P\u003c/code\u003e）。如果你不确定它们是否会按你想的那样工作，先使用 \u003ccode\u003exargs echo\u003c/code\u003e 查看一下。此外，使用 \u003ccode\u003e-I{}\u003c/code\u003e 会很方便。例如：\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efind . -name \u003cspan class=\"string\"\u003e\u0026#39;*.py\u0026#39;\u003c/span\u003e | xargs grep some_function\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003ecat\u003c/span\u003e hosts | xargs -I{} ssh root@{} hostname\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003epstree -p\u003c/code\u003e 以一种优雅的方式展示进程树。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ccode\u003epgrep\u003c/code\u003e 和 \u003ccode\u003epkill\u003c/code\u003e 根据名字查找进程或发送信号（\u003ccode\u003e-f\u003c/code\u003e 参数通常有用）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e了解你可以发往进程的信号的种类。比如，使用 \u003ccode\u003ekill -STOP [pid]\u003c/code\u003e 停止一个进程。使用 \u003ccode\u003eman 7 signal\u003c/code\u003e 查看详细列表。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ccode\u003enohup\u003c/code\u003e 或 \u003ccode\u003edisown\u003c/code\u003e 使一个后台进程持续运行。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ccode\u003enetstat -lntp\u003c/code\u003e 或 \u003ccode\u003ess -plat\u003c/code\u003e 检查哪些进程在监听端口（默认是检查 TCP 端口; 添加参数 \u003ccode\u003e-u\u003c/code\u003e 则检查 UDP 端口）或者 \u003ccode\u003elsof -iTCP -sTCP:LISTEN -P -n\u003c/code\u003e (这也可以在 OS X 上运行)。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003elsof\u003c/code\u003e 来查看开启的套接字和文件。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ccode\u003euptime\u003c/code\u003e 或 \u003ccode\u003ew\u003c/code\u003e 来查看系统已经运行多长时间。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ccode\u003ealias\u003c/code\u003e 来创建常用命令的快捷形式。例如：\u003ccode\u003ealias ll=\u0026#39;ls -latr\u0026#39;\u003c/code\u003e 创建了一个新的命令别名 \u003ccode\u003ell\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e可以把别名、shell 选项和常用函数保存在 \u003ccode\u003e\\~/.bashrc\u003c/code\u003e，具体看下这篇\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://superuser.com/a/183980/7106\"\u003e文章\u003c/a\u003e。这样做的话你就可以在所有 shell 会话中使用你的设定。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e把环境变量的设定以及登陆时要执行的命令保存在 \u003ccode\u003e\\~/.bash_profile\u003c/code\u003e。而对于从图形界面启动的 shell 和 \u003ccode\u003ecron\u003c/code\u003e 启动的 shell，则需要单独配置文件。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e要想在几台电脑中同步你的配置文件（例如 \u003ccode\u003e.bashrc\u003c/code\u003e 和 \u003ccode\u003e.bash_profile\u003c/code\u003e），可以借助 Git。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e当变量和文件名中包含空格的时候要格外小心。Bash 变量要用引号括起来，比如 \u003ccode\u003e\u0026#34;$FOO\u0026#34;\u003c/code\u003e。尽量使用 \u003ccode\u003e-0\u003c/code\u003e 或 \u003ccode\u003e-print0\u003c/code\u003e 选项以便用 NULL 来分隔文件名，例如 \u003ccode\u003elocate -0 pattern | xargs -0 ls -al\u003c/code\u003e 或 \u003ccode\u003efind / -print0 -type d | xargs -0 ls -al\u003c/code\u003e。如果 for 循环中循环访问的文件名含有空字符（空格、tab 等字符），只需用 \u003ccode\u003eIFS=$\u0026#39;\\n\u0026#39;\u003c/code\u003e 把内部字段分隔符设为换行符。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e在 Bash 脚本中，使用 \u003ccode\u003eset -x\u003c/code\u003e 去调试输出（或者使用它的变体 \u003ccode\u003eset -v\u003c/code\u003e，它会记录原始输入，包括多余的参数和注释）。尽可能地使用严格模式：使用 \u003ccode\u003eset -e\u003c/code\u003e 令脚本在发生错误时退出而不是继续运行；使用 \u003ccode\u003eset -u\u003c/code\u003e 来检查是否使用了未赋值的变量；试试 \u003ccode\u003eset -o pipefail\u003c/code\u003e，它可以监测管道中的错误。当牵扯到很多脚本时，使用 \u003ccode\u003etrap\u003c/code\u003e 来检测 ERR 和 EXIT。一个好的习惯是在脚本文件开头这样写，这会使它能够检测一些错误，并在错误发生时中断程序并输出信息：\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eset\u003c/span\u003e -euo pipefail\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003etrap\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;echo \u0026#39;error: Script failed: see failed command above\u0026#39;\u0026#34;\u003c/span\u003e ERR\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e在 Bash 脚本中，子 shell（使用括号 \u003ccode\u003e(...)\u003c/code\u003e）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# do something in current dir\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(\u003cspan class=\"built_in\"\u003ecd\u003c/span\u003e /some/other/dir \u0026amp;\u0026amp; other-command)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# continue in original dir\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e在 Bash 中，变量有许多的扩展方式。\u003ccode\u003e${name:?error message}\u003c/code\u003e 用于检查变量是否存在。此外，当 Bash 脚本只需要一个参数时，可以使用这样的代码 \u003ccode\u003einput_file=${1:?usage: $0 input_file}\u003c/code\u003e。在变量为空时使用默认值：\u003ccode\u003e${name:-default}\u003c/code\u003e。如果你要在之前的例子中再加一个（可选的）参数，可以使用类似这样的代码 \u003ccode\u003eoutput_file=${2:-logfile}\u003c/code\u003e，如果省略了 $2，它的值就为空，于是 \u003ccode\u003eoutput_file\u003c/code\u003e 就会被设为 \u003ccode\u003elogfile\u003c/code\u003e。数学表达式：\u003ccode\u003ei=$(( (i + 1) % 5 ))\u003c/code\u003e。序列：\u003ccode\u003e{1..10}\u003c/code\u003e。截断字符串：\u003ccode\u003e${var%suffix}\u003c/code\u003e 和 \u003ccode\u003e${var#prefix}\u003c/code\u003e。例如，假设 \u003ccode\u003evar=foo.pdf\u003c/code\u003e，那么 \u003ccode\u003eecho ${var%.pdf}.txt\u003c/code\u003e 将输出 \u003ccode\u003efoo.txt\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用括号扩展（\u003ccode\u003e{\u003c/code\u003e…\u003ccode\u003e}\u003c/code\u003e）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 \u003ccode\u003emv foo.{txt,pdf} some-dir\u003c/code\u003e（同时移动两个文件），\u003ccode\u003ecp somefile{,.bak}\u003c/code\u003e（会被扩展成 \u003ccode\u003ecp somefile somefile.bak\u003c/code\u003e）或者 \u003ccode\u003emkdir -p test-{a,b,c}/subtest-{1,2,3}\u003c/code\u003e（会被扩展成所有可能的组合，并创建一个目录树）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e通过使用 \u003ccode\u003e\u0026lt;(some command)\u003c/code\u003e 可以将输出视为文件。例如，对比本地文件 \u003ccode\u003e/etc/hosts\u003c/code\u003e 和一个远程文件：\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ediff /etc/hosts \u0026lt;(ssh somehost \u003cspan class=\"built_in\"\u003ecat\u003c/span\u003e /etc/hosts)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e编写脚本时，你可能会想要把代码都放在大括号里。缺少右括号的话，代码就会因为语法错误而无法执行。如果你的脚本是要放在网上分享供他人使用的，这样的写法就体现出它的好处了，因为这样可以防止下载不完全代码被执行。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"comment\"\u003e# 在这里写代码\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e了解 Bash 中的“here documents”，例如 \u003ccode\u003ecat \u0026lt;\u0026lt;EOF ...\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e在 Bash 中，同时重定向标准输出和标准错误：\u003ccode\u003esome-command \u0026gt;logfile 2\u0026gt;\u0026amp;1\u003c/code\u003e 或者 \u003ccode\u003esome-command \u0026amp;\u0026gt;logfile\u003c/code\u003e。通常，为了保证命令不会在标准输入里残留一个未关闭的文件句柄捆绑在你当前所在的终端上，在命令后添加 \u003ccode\u003e\u0026lt;/dev/null\u003c/code\u003e 是一个好习惯。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ccode\u003eman ascii\u003c/code\u003e 查看具有十六进制和十进制值的 ASCII 表。\u003ccode\u003eman unicode\u003c/code\u003e，\u003ccode\u003eman utf-8\u003c/code\u003e，以及 \u003ccode\u003eman latin1\u003c/code\u003e 有助于你去了解通用的编码信息。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ccode\u003escreen\u003c/code\u003e 或 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://tmux.github.io/\"\u003e\u003ccode\u003etmux\u003c/code\u003e\u003c/a\u003e 来使用多份屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。而 \u003ccode\u003ebyobu\u003c/code\u003e 可以为它们提供更多的信息和易用的管理工具。另一个轻量级的 session 持久化解决方案是 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/bogner/dtach\"\u003e\u003ccode\u003edtach\u003c/code\u003e\u003c/a\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003essh 中，了解如何使用 \u003ccode\u003e-L\u003c/code\u003e 或 \u003ccode\u003e-D\u003c/code\u003e（偶尔需要用 \u003ccode\u003e-R\u003c/code\u003e）开启隧道是非常有用的，比如当你需要从一台远程服务器上访问 web 页面。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e对 ssh 设置做一些小优化可能是很有用的，例如这个 \u003ccode\u003e\\~/.ssh/config\u003c/code\u003e 文件包含了防止特定网络环境下连接断开、压缩数据、多通道等选项：\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight routeros\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003eTCPKeepAlive\u003c/span\u003e=\u003cspan class=\"literal\"\u003eyes\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003eServerAliveInterval\u003c/span\u003e=15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003eServerAliveCountMax\u003c/span\u003e=6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003eCompression\u003c/span\u003e=\u003cspan class=\"literal\"\u003eyes\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eControlMaster auto\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eControlPath /tmp/%r@%h:%p\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eControlPersist \u003cspan class=\"literal\"\u003eyes\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e一些其他的关于 ssh 的选项是与安全相关的，应当小心翼翼的使用。例如你应当只能在可信任的网络中启用 \u003ccode\u003eStrictHostKeyChecking=no\u003c/code\u003e，\u003ccode\u003eForwardAgent=yes\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e考虑使用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://mosh.mit.edu/\"\u003e\u003ccode\u003emosh\u003c/code\u003e\u003c/a\u003e 作为 ssh 的替代品，它使用 UDP 协议。它可以避免连接被中断并且对带宽需求更小，但它需要在服务端做相应的配置。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e获取八进制形式的文件访问权限（修改系统设置时通常需要，但 \u003ccode\u003els\u003c/code\u003e 的功能不那么好用并且通常会搞砸），可以使用类似如下的代码：\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003estat\u003c/span\u003e -c \u003cspan class=\"string\"\u003e\u0026#39;%A %a %n\u0026#39;\u003c/span\u003e /etc/timezone\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/mooz/percol\"\u003e\u003ccode\u003epercol\u003c/code\u003e\u003c/a\u003e 或者 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/junegunn/fzf\"\u003e\u003ccode\u003efzf\u003c/code\u003e\u003c/a\u003e 可以交互式地从另一个命令输出中选取值。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ccode\u003efpp\u003c/code\u003e（\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/facebook/PathPicker\"\u003ePathPicker\u003c/a\u003e）可以与基于另一个命令(例如 \u003ccode\u003egit\u003c/code\u003e）输出的文件交互。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：\u003cbr/\u003e\u003ccode\u003epython -m SimpleHTTPServer 7777\u003c/code\u003e （使用端口 7777 和 Python 2）或\u003ccode\u003epython -m http.server 7777\u003c/code\u003e （使用端口 7777 和 Python 3）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e以其他用户的身份执行命令，使用 \u003ccode\u003esudo\u003c/code\u003e。默认以 root 用户的身份执行；使用 \u003ccode\u003e-u\u003c/code\u003e 来指定其他用户。使用 \u003ccode\u003e-i\u003c/code\u003e 来以该用户登录（需要输入\u003cem\u003e你自己的\u003c/em\u003e密码）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e将 shell 切换为其他用户，使用 \u003ccode\u003esu username\u003c/code\u003e 或者 \u003ccode\u003esudo - username\u003c/code\u003e。加入 \u003ccode\u003e-\u003c/code\u003e 会使得切换后的环境与使用该用户登录后的环境相同。省略用户名则默认为 root。切换到哪个用户，就需要输入\u003cem\u003e哪个用户的\u003c/em\u003e密码。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e了解命令行的 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://wiki.debian.org/CommonErrorMessages/ArgumentListTooLong\"\u003e128K 限制\u003c/a\u003e。使用通配符匹配大量文件名时，常会遇到“Argument list too long”的错误信息。（这种情况下换用 \u003ccode\u003efind\u003c/code\u003e 或 \u003ccode\u003exargs\u003c/code\u003e 通常可以解决。）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e当你需要一个基本的计算器时，可以使用 \u003ccode\u003epython\u003c/code\u003e 解释器（当然你要用 python 的时候也是这样）。例如：\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight python-repl\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"language-python\"\u003e\u003cspan class=\"number\"\u003e2\u003c/span\u003e+\u003cspan class=\"number\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"文件及数据处理\"\u003e\u003ca href=\"#文件及数据处理\" class=\"headerlink\" title=\"文件及数据处理\"\u003e\u003c/a\u003e文件及数据处理\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cp\u003e在当前目录下通过文件名查找一个文件，使用类似于这样的命令：\u003ccode\u003efind . -iname \u0026#39;*something*\u0026#39;\u003c/code\u003e。在所有路径下通过文件名查找文件，使用 \u003ccode\u003elocate something\u003c/code\u003e （但注意到 \u003ccode\u003eupdatedb\u003c/code\u003e 可能没有对最近新建的文件建立索引，所以你可能无法定位到这些未被索引的文件）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/ggreer/the_silver_searcher\"\u003e\u003ccode\u003eag\u003c/code\u003e\u003c/a\u003e 在源代码或数据文件里检索（\u003ccode\u003egrep -r\u003c/code\u003e 同样可以做到，但相比之下 \u003ccode\u003eag\u003c/code\u003e 更加先进）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e将 HTML 转为文本：\u003ccode\u003elynx -dump -stdin\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eMarkdown，HTML，以及所有文档格式之间的转换，试试 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://pandoc.org/\"\u003e\u003ccode\u003epandoc\u003c/code\u003e\u003c/a\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e当你要处理棘手的 XML 时候，\u003ccode\u003exmlstarlet\u003c/code\u003e 算是上古时代流传下来的神器。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://stedolan.github.io/jq/\"\u003e\u003ccode\u003ejq\u003c/code\u003e\u003c/a\u003e 处理 JSON。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/0k/shyaml\"\u003e\u003ccode\u003eshyaml\u003c/code\u003e\u003c/a\u003e 处理 YAML。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e要处理 Excel 或 CSV 文件的话，\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/onyxfish/csvkit\"\u003ecsvkit\u003c/a\u003e 提供了 \u003ccode\u003ein2csv\u003c/code\u003e，\u003ccode\u003ecsvcut\u003c/code\u003e，\u003ccode\u003ecsvjoin\u003c/code\u003e，\u003ccode\u003ecsvgrep\u003c/code\u003e 等方便易用的工具。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e当你要处理 Amazon S3 相关的工作的时候，\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/s3tools/s3cmd\"\u003e\u003ccode\u003es3cmd\u003c/code\u003e\u003c/a\u003e 是一个很方便的工具而 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/bloomreach/s4cmd\"\u003e\u003ccode\u003es4cmd\u003c/code\u003e\u003c/a\u003e 的效率更高。Amazon 官方提供的 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/aws/aws-cli\"\u003e\u003ccode\u003eaws\u003c/code\u003e\u003c/a\u003e 以及 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/donnemartin/saws\"\u003e\u003ccode\u003esaws\u003c/code\u003e\u003c/a\u003e 是其他 AWS 相关工作的基础，值得学习。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e了解如何使用 \u003ccode\u003esort\u003c/code\u003e 和 \u003ccode\u003euniq\u003c/code\u003e，包括 uniq 的 \u003ccode\u003e-u\u003c/code\u003e 参数和 \u003ccode\u003e-d\u003c/code\u003e 参数，具体内容在后文单行脚本节中。另外可以了解一下 \u003ccode\u003ecomm\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e了解如何使用 \u003ccode\u003ecut\u003c/code\u003e，\u003ccode\u003epaste\u003c/code\u003e 和 \u003ccode\u003ejoin\u003c/code\u003e 来更改文件。很多人都会使用 \u003ccode\u003ecut\u003c/code\u003e，但遗忘了 \u003ccode\u003ejoin\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e了解如何运用 \u003ccode\u003ewc\u003c/code\u003e 去计算新行数（\u003ccode\u003e-l\u003c/code\u003e），字符数（\u003ccode\u003e-m\u003c/code\u003e），单词数（\u003ccode\u003e-w\u003c/code\u003e）以及字节数（\u003ccode\u003e-c\u003c/code\u003e）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e了解如何使用 \u003ccode\u003etee\u003c/code\u003e 将标准输入复制到文件甚至标准输出，例如 \u003ccode\u003els -al | tee file.txt\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e要进行一些复杂的计算，比如分组、逆序和一些其他的统计分析，可以考虑使用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.gnu.org/software/datamash/\"\u003e\u003ccode\u003edatamash\u003c/code\u003e\u003c/a\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e注意到语言设置（中文或英文等）对许多命令行工具有一些微妙的影响，比如排序的顺序和性能。大多数 Linux 的安装过程会将 \u003ccode\u003eLANG\u003c/code\u003e 或其他有关的变量设置为符合本地的设置。要意识到当你改变语言设置时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降\u003cem\u003e许多倍\u003c/em\u003e。某些情况下（例如集合运算）你可以放心的使用 \u003ccode\u003eexport LC_ALL=C\u003c/code\u003e 来忽略掉国际化并按照字节来判断顺序。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e你可以单独指定某一条命令的环境，只需在调用时把环境变量设定放在命令的前面，例如 \u003ccode\u003eTZ=Pacific/Fiji date\u003c/code\u003e 可以获取斐济的时间。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e了解如何使用 \u003ccode\u003eawk\u003c/code\u003e 和 \u003ccode\u003esed\u003c/code\u003e 来进行简单的数据处理。 参阅 \u003ca href=\"#one-liners\"\u003eOne-liners\u003c/a\u003e 获取示例。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e替换一个或多个文件中出现的字符串：\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eperl -pi.bak -e \u003cspan class=\"string\"\u003e\u0026#39;s/old-string/new-string/g\u0026#39;\u003c/span\u003e my-files-*.txt\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e使用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/jlevy/repren\"\u003e\u003ccode\u003erepren\u003c/code\u003e\u003c/a\u003e 来批量重命名文件，或是在多个文件中搜索替换内容。（有些时候 \u003ccode\u003erename\u003c/code\u003e 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 将文件、目录和内容全部重命名 foo -\u0026gt; bar:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erepren --full --preserve-case --from foo --to bar .\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 还原所有备份文件 whatever.bak -\u0026gt; whatever:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erepren --renames --from \u003cspan class=\"string\"\u003e\u0026#39;(.*)\\.bak\u0026#39;\u003c/span\u003e --to \u003cspan class=\"string\"\u003e\u0026#39;\\1\u0026#39;\u003c/span\u003e *.bak\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 用 rename 实现上述功能（若可用）:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erename \u003cspan class=\"string\"\u003e\u0026#39;s/\\.bak$//\u0026#39;\u003c/span\u003e *.bak\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e根据 man 页面的描述，\u003ccode\u003ersync\u003c/code\u003e 是一个快速且非常灵活的文件复制工具。它闻名于设备之间的文件同步，但其实它在本地情况下也同样有用。在安全设置允许下，用 \u003ccode\u003ersync\u003c/code\u003e 代替 \u003ccode\u003escp\u003c/code\u003e 可以实现文件续传，而不用重新从头开始。它同时也是删除大量文件的\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html\"\u003e最快方法\u003c/a\u003e之一：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003emkdir\u003c/span\u003e empty \u0026amp;\u0026amp; rsync -r --delete empty/ some-dir \u0026amp;\u0026amp; \u003cspan class=\"built_in\"\u003ermdir\u003c/span\u003e some-dir\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e若要在复制文件时获取当前进度，可使用 \u003ccode\u003epv\u003c/code\u003e，\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/dmerejkowsky/pycp\"\u003e\u003ccode\u003epycp\u003c/code\u003e\u003c/a\u003e，\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Xfennec/progress\"\u003e\u003ccode\u003eprogress\u003c/code\u003e\u003c/a\u003e，\u003ccode\u003ersync --progress\u003c/code\u003e。若所执行的复制为 block 块拷贝，可以使用 \u003ccode\u003edd status=progress\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ccode\u003eshuf\u003c/code\u003e 可以以行为单位来打乱文件的内容或从一个文件中随机选取多行。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e了解 \u003ccode\u003esort\u003c/code\u003e 的参数。显示数字时，使用 \u003ccode\u003e-n\u003c/code\u003e 或者 \u003ccode\u003e-h\u003c/code\u003e 来显示更易读的数（例如 \u003ccode\u003edu -h\u003c/code\u003e 的输出）。明白排序时关键字的工作原理（\u003ccode\u003e-t\u003c/code\u003e 和 \u003ccode\u003e-k\u003c/code\u003e）。例如，注意到你需要 \u003ccode\u003e-k1，1\u003c/code\u003e 来仅按第一个域来排序，而 \u003ccode\u003e-k1\u003c/code\u003e 意味着按整行排序。稳定排序（\u003ccode\u003esort -s\u003c/code\u003e）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 \u003ccode\u003esort -k1，1 | sort -s -k2，2\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e如果你想在 Bash 命令行中写 tab 制表符，按下 \u003cstrong\u003ectrl-v\u003c/strong\u003e \u003cstrong\u003e[Tab]\u003c/strong\u003e 或键入 \u003ccode\u003e$\u0026#39;\\t\u0026#39;\u003c/code\u003e （后者可能更好，因为你可以复制粘贴它）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e标准的源代码对比及合并工具是 \u003ccode\u003ediff\u003c/code\u003e 和 \u003ccode\u003epatch\u003c/code\u003e。使用 \u003ccode\u003ediffstat\u003c/code\u003e 查看变更总览数据。注意到 \u003ccode\u003ediff -r\u003c/code\u003e 对整个文件夹有效。使用 \u003ccode\u003ediff -r tree1 tree2 | diffstat\u003c/code\u003e 查看变更的统计数据。\u003ccode\u003evimdiff\u003c/code\u003e 用于比对并编辑文件。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e对于二进制文件，使用 \u003ccode\u003ehd\u003c/code\u003e，\u003ccode\u003ehexdump\u003c/code\u003e 或者 \u003ccode\u003exxd\u003c/code\u003e 使其以十六进制显示，使用 \u003ccode\u003ebvi\u003c/code\u003e，\u003ccode\u003ehexedit\u003c/code\u003e 或者 \u003ccode\u003ebiew\u003c/code\u003e 来进行二进制编辑。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e同样对于二进制文件，\u003ccode\u003estrings\u003c/code\u003e（包括 \u003ccode\u003egrep\u003c/code\u003e 等工具）可以帮助在二进制文件中查找特定比特。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e制作二进制差分文件（Delta 压缩），使用 \u003ccode\u003exdelta3\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ccode\u003eiconv\u003c/code\u003e 更改文本编码。需要更高级的功能，可以使用 \u003ccode\u003euconv\u003c/code\u003e，它支持一些高级的 Unicode 功能。例如，这条命令移除了所有重音符号：\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003euconv -f utf-8 -t utf-8 -x \u003cspan class=\"string\"\u003e\u0026#39;::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] \u0026gt;; ::Any-NFC; \u0026#39;\u003c/span\u003e \u0026lt; input.txt \u0026gt; output.txt\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e拆分文件可以使用 \u003ccode\u003esplit\u003c/code\u003e（按大小拆分）和 \u003ccode\u003ecsplit\u003c/code\u003e（按模式拆分）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e操作日期和时间表达式，可以用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.fresse.org/dateutils/\"\u003e\u003ccode\u003edateutils\u003c/code\u003e\u003c/a\u003e 中的 \u003ccode\u003edateadd\u003c/code\u003e、\u003ccode\u003edatediff\u003c/code\u003e、\u003ccode\u003estrptime\u003c/code\u003e 等工具。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ccode\u003ezless\u003c/code\u003e、\u003ccode\u003ezmore\u003c/code\u003e、\u003ccode\u003ezcat\u003c/code\u003e 和 \u003ccode\u003ezgrep\u003c/code\u003e 对压缩过的文件进行操作。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e文件属性可以通过 \u003ccode\u003echattr\u003c/code\u003e 进行设置，它比文件权限更加底层。例如，为了保护文件不被意外删除，可以使用不可修改标记：\u003ccode\u003esudo chattr +i /critical/directory/or/file\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ccode\u003egetfacl\u003c/code\u003e 和 \u003ccode\u003esetfacl\u003c/code\u003e 以保存和恢复文件权限。例如：\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003egetfacl -R /some/path \u0026gt; permissions.txt\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003esetfacl --restore=permissions.txt\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e为了高效地创建空文件，请使用 \u003ccode\u003etruncate\u003c/code\u003e（创建\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zh.wikipedia.org/wiki/%E7%A8%80%E7%96%8F%E6%96%87%E4%BB%B6\"\u003e稀疏文件\u003c/a\u003e），\u003ccode\u003efallocate\u003c/code\u003e（用于 ext4，xfs，btrf 和 ocfs2 文件系统），\u003ccode\u003exfs_mkfile\u003c/code\u003e（适用于几乎所有的文件系统，包含在 xfsprogs 包中），\u003ccode\u003emkfile\u003c/code\u003e（用于类 Unix 操作系统，比如 Solaris 和 Mac OS）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"系统调试\"\u003e\u003ca href=\"#系统调试\" class=\"headerlink\" title=\"系统调试\"\u003e\u003c/a\u003e系统调试\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ecurl\u003c/code\u003e 和 \u003ccode\u003ecurl -I\u003c/code\u003e 可以被轻松地应用于 web 调试中，它们的好兄弟 \u003ccode\u003ewget\u003c/code\u003e 也是如此，或者也可以试试更潮的 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/jkbrzt/httpie\"\u003e\u003ccode\u003ehttpie\u003c/code\u003e\u003c/a\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e获取 CPU 和硬盘的使用状态，通常使用使用 \u003ccode\u003etop\u003c/code\u003e（\u003ccode\u003ehtop\u003c/code\u003e 更佳），\u003ccode\u003eiostat\u003c/code\u003e 和 \u003ccode\u003eiotop\u003c/code\u003e。而 \u003ccode\u003eiostat -mxz 15\u003c/code\u003e 可以让你获悉 CPU 和每个硬盘分区的基本信息和性能表现。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ccode\u003enetstat\u003c/code\u003e 和 \u003ccode\u003ess\u003c/code\u003e 查看网络连接的细节。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003edstat\u003c/code\u003e 在你想要对系统的现状有一个粗略的认识时是非常有用的。然而若要对系统有一个深度的总体认识，使用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/nicolargo/glances\"\u003e\u003ccode\u003eglances\u003c/code\u003e\u003c/a\u003e，它会在一个终端窗口中向你提供一些系统级的数据。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e若要了解内存状态，运行并理解 \u003ccode\u003efree\u003c/code\u003e 和 \u003ccode\u003evmstat\u003c/code\u003e 的输出。值得留意的是“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，而与空闲内存无关。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eJava 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 \u003ccode\u003ekill -3 \u0026lt;pid\u0026gt;\u003c/code\u003e 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准错误或是日志文件。JDK 中的 \u003ccode\u003ejps\u003c/code\u003e，\u003ccode\u003ejstat\u003c/code\u003e，\u003ccode\u003ejstack\u003c/code\u003e，\u003ccode\u003ejmap\u003c/code\u003e 很有用。\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/aragozin/jvm-tools\"\u003eSJK tools\u003c/a\u003e 更高级。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.bitwizard.nl/mtr/\"\u003e\u003ccode\u003emtr\u003c/code\u003e\u003c/a\u003e 去跟踪路由，用于确定网络问题。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://dev.yorhel.nl/ncdu\"\u003e\u003ccode\u003encdu\u003c/code\u003e\u003c/a\u003e 来查看磁盘使用情况，它比寻常的命令，如 \u003ccode\u003edu -sh *\u003c/code\u003e，更节省时间。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e查找正在使用带宽的套接字连接或进程，使用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.ex-parrot.com/~pdw/iftop/\"\u003e\u003ccode\u003eiftop\u003c/code\u003e\u003c/a\u003e 或 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/raboof/nethogs\"\u003e\u003ccode\u003enethogs\u003c/code\u003e\u003c/a\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eab\u003c/code\u003e 工具（Apache 中自带）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 \u003ccode\u003esiege\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://wireshark.org/\"\u003e\u003ccode\u003ewireshark\u003c/code\u003e\u003c/a\u003e，\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html\"\u003e\u003ccode\u003etshark\u003c/code\u003e\u003c/a\u003e 和 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://ngrep.sourceforge.net/\"\u003e\u003ccode\u003engrep\u003c/code\u003e\u003c/a\u003e 可用于复杂的网络调试。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e了解 \u003ccode\u003estrace\u003c/code\u003e 和 \u003ccode\u003eltrace\u003c/code\u003e。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（\u003ccode\u003e-c\u003c/code\u003e）和附加到一个运行的进程参数 （\u003ccode\u003e-p\u003c/code\u003e）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e了解使用 \u003ccode\u003eldd\u003c/code\u003e 来检查共享库。但是\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.catonmat.net/blog/ldd-arbitrary-code-execution/\"\u003e永远不要在不信任的文件上运行\u003c/a\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e了解如何运用 \u003ccode\u003egdb\u003c/code\u003e 连接到一个运行着的进程并获取它的堆栈轨迹。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e学会使用 \u003ccode\u003e/proc\u003c/code\u003e。它在调试正在出现的问题的时候有时会效果惊人。比如：\u003ccode\u003e/proc/cpuinfo\u003c/code\u003e，\u003ccode\u003e/proc/meminfo\u003c/code\u003e，\u003ccode\u003e/proc/cmdline\u003c/code\u003e，\u003ccode\u003e/proc/xxx/cwd\u003c/code\u003e，\u003ccode\u003e/proc/xxx/exe\u003c/code\u003e，\u003ccode\u003e/proc/xxx/fd/\u003c/code\u003e，\u003ccode\u003e/proc/xxx/smaps\u003c/code\u003e（这里的 \u003ccode\u003exxx\u003c/code\u003e 表示进程的 id 或 pid）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e当调试一些之前出现的问题的时候，\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://sebastien.godard.pagesperso-orange.fr/\"\u003e\u003ccode\u003esar\u003c/code\u003e\u003c/a\u003e 非常有用。它展示了 cpu、内存以及网络等的历史数据。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e关于更深层次的系统分析以及性能分析，看看 \u003ccode\u003estap\u003c/code\u003e（\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://sourceware.org/systemtap/wiki\"\u003eSystemTap\u003c/a\u003e），\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/Perf_(Linux)\"\u003e\u003ccode\u003eperf\u003c/code\u003e\u003c/a\u003e，以及\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/draios/sysdig\"\u003e\u003ccode\u003esysdig\u003c/code\u003e\u003c/a\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e查看你当前使用的系统，使用 \u003ccode\u003euname\u003c/code\u003e，\u003ccode\u003euname -a\u003c/code\u003e（Unix／kernel 信息）或者 \u003ccode\u003elsb_release -a\u003c/code\u003e（Linux 发行版信息）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e无论什么东西工作得很欢乐（可能是硬件或驱动问题）时可以试试 \u003ccode\u003edmesg\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e如果你删除了一个文件，但通过 \u003ccode\u003edu\u003c/code\u003e 发现没有释放预期的磁盘空间，请检查文件是否被进程占用：\u003cbr/\u003e\u003ccode\u003elsof | grep deleted | grep \u0026#34;filename-of-my-big-file\u0026#34;\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"单行脚本\"\u003e\u003ca href=\"#单行脚本\" class=\"headerlink\" title=\"单行脚本\"\u003e\u003c/a\u003e单行脚本\u003c/h2\u003e\u003cp\u003e一些命令组合的例子：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e当你需要对文本文件做集合交、并、差运算时，\u003ccode\u003esort\u003c/code\u003e 和 \u003ccode\u003euniq\u003c/code\u003e 会是你的好帮手。具体例子请参照代码后面的，此处假设 \u003ccode\u003ea\u003c/code\u003e 与 \u003ccode\u003eb\u003c/code\u003e 是两内容不同的文件。这种方式效率很高，并且在小文件和上 G 的文件上都能运用（注意尽管在 \u003ccode\u003e/tmp\u003c/code\u003e 在一个小的根分区上时你可能需要 \u003ccode\u003e-T\u003c/code\u003e 参数，但是实际上 \u003ccode\u003esort\u003c/code\u003e 并不被内存大小约束），参阅前文中关于 \u003ccode\u003eLC_ALL\u003c/code\u003e 和 \u003ccode\u003esort\u003c/code\u003e 的 \u003ccode\u003e-u\u003c/code\u003e 参数的部分。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003esort\u003c/span\u003e a b | \u003cspan class=\"built_in\"\u003euniq\u003c/span\u003e \u0026gt; c   \u003cspan class=\"comment\"\u003e# c 是 a 并 b\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003esort\u003c/span\u003e a b | \u003cspan class=\"built_in\"\u003euniq\u003c/span\u003e -d \u0026gt; c   \u003cspan class=\"comment\"\u003e# c 是 a 交 b\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003esort\u003c/span\u003e a b b | \u003cspan class=\"built_in\"\u003euniq\u003c/span\u003e -u \u0026gt; c   \u003cspan class=\"comment\"\u003e# c 是 a - b\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e使用 \u003ccode\u003egrep . *\u003c/code\u003e（每行都会附上文件名）或者 \u003ccode\u003ehead -100 *\u003c/code\u003e（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 \u003ccode\u003e/sys\u003c/code\u003e、\u003ccode\u003e/proc\u003c/code\u003e、\u003ccode\u003e/etc\u003c/code\u003e）时特别好用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eawk \u003cspan class=\"string\"\u003e\u0026#39;{ x += $3 } END { print x }\u0026#39;\u003c/span\u003e myfile\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e如果你想在文件树上查看大小/日期，这可能看起来像递归版的 \u003ccode\u003els -l\u003c/code\u003e 但比 \u003ccode\u003els -lR\u003c/code\u003e 更易于理解：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efind . -\u003cspan class=\"built_in\"\u003etype\u003c/span\u003e f -\u003cspan class=\"built_in\"\u003els\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 \u003ccode\u003eacct_id\u003c/code\u003e 参数在 URI 中。如果你想计算出每个 \u003ccode\u003eacct_id\u003c/code\u003e 值有多少次请求，使用如下代码：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eegrep -o \u003cspan class=\"string\"\u003e\u0026#39;acct_id=[0-9]+\u0026#39;\u003c/span\u003e access.log | \u003cspan class=\"built_in\"\u003ecut\u003c/span\u003e -d= -f2 | \u003cspan class=\"built_in\"\u003esort\u003c/span\u003e | \u003cspan class=\"built_in\"\u003euniq\u003c/span\u003e -c | \u003cspan class=\"built_in\"\u003esort\u003c/span\u003e -rn\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e要持续监测文件改动，可以使用 \u003ccode\u003ewatch\u003c/code\u003e，例如检查某个文件夹中文件的改变，可以用 \u003ccode\u003ewatch -d -n 2 \u0026#39;ls -rtlh | tail\u0026#39;\u003c/code\u003e；或者在排查 WiFi 设置故障时要监测网络设置的更改，可以用 \u003ccode\u003ewatch -d -n 2 ifconfig\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"function\"\u003e\u003cspan class=\"title\"\u003etaocl\u003c/span\u003e\u003c/span\u003e() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md|\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    pandoc -f markdown -t html |\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    iconv -f \u003cspan class=\"string\"\u003e\u0026#39;utf-8\u0026#39;\u003c/span\u003e -t \u003cspan class=\"string\"\u003e\u0026#39;unicode\u0026#39;\u003c/span\u003e |\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    xmlstarlet fo --html --dropdtd |\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    xmlstarlet sel -t -v \u003cspan class=\"string\"\u003e\u0026#34;(html/body/ul/li[count(p)\u0026gt;0])[\u003cspan class=\"variable\"\u003e$RANDOM\u003c/span\u003e mod last()+1]\u0026#34;\u003c/span\u003e |\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    xmlstarlet unesc | \u003cspan class=\"built_in\"\u003efmt\u003c/span\u003e -80\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"冷门但有用\"\u003e\u003ca href=\"#冷门但有用\" class=\"headerlink\" title=\"冷门但有用\"\u003e\u003c/a\u003e冷门但有用\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eexpr\u003c/code\u003e：计算表达式或正则匹配\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003em4\u003c/code\u003e：简单的宏处理器\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eyes\u003c/code\u003e：多次打印字符串\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ecal\u003c/code\u003e：漂亮的日历\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eenv\u003c/code\u003e：执行一个命令（脚本文件中很有用）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eprintenv\u003c/code\u003e：打印环境变量（调试时或在写脚本文件时很有用）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003elook\u003c/code\u003e：查找以特定字符串开头的单词或行\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ecut\u003c/code\u003e，\u003ccode\u003epaste\u003c/code\u003e 和 \u003ccode\u003ejoin\u003c/code\u003e：数据修改\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003efmt\u003c/code\u003e：格式化文本段落\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003epr\u003c/code\u003e：将文本格式化成页／列形式\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003efold\u003c/code\u003e：包裹文本中的几行\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ecolumn\u003c/code\u003e：将文本格式化成多个对齐、定宽的列或表格\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eexpand\u003c/code\u003e 和 \u003ccode\u003eunexpand\u003c/code\u003e：制表符与空格之间转换\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003enl\u003c/code\u003e：添加行号\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eseq\u003c/code\u003e：打印数字\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ebc\u003c/code\u003e：计算器\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003efactor\u003c/code\u003e：分解因数\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://gnupg.org/\"\u003e\u003ccode\u003egpg\u003c/code\u003e\u003c/a\u003e：加密并签名文件\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003etoe\u003c/code\u003e：terminfo 入口列表\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003enc\u003c/code\u003e：网络调试及数据传输\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003esocat\u003c/code\u003e：套接字代理，与 \u003ccode\u003enetcat\u003c/code\u003e 类似\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/mattthias/slurm\"\u003e\u003ccode\u003eslurm\u003c/code\u003e\u003c/a\u003e：网络流量可视化\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003edd\u003c/code\u003e：文件或设备间传输数据\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003efile\u003c/code\u003e：确定文件类型\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003etree\u003c/code\u003e：以树的形式显示路径和文件，类似于递归的 \u003ccode\u003els\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003estat\u003c/code\u003e：文件信息\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003etime\u003c/code\u003e：执行命令，并计算执行时间\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003etimeout\u003c/code\u003e：在指定时长范围内执行命令，并在规定时间结束后停止进程\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003elockfile\u003c/code\u003e：使文件只能通过 \u003ccode\u003erm -f\u003c/code\u003e 移除\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003elogrotate\u003c/code\u003e： 切换、压缩以及发送日志文件\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ewatch\u003c/code\u003e：重复运行同一个命令，展示结果并／或高亮有更改的部分\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/joh/when-changed\"\u003e\u003ccode\u003ewhen-changed\u003c/code\u003e\u003c/a\u003e：当检测到文件更改时执行指定命令。参阅 \u003ccode\u003einotifywait\u003c/code\u003e 和 \u003ccode\u003eentr\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003etac\u003c/code\u003e：反向输出文件\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eshuf\u003c/code\u003e：文件中随机选取几行\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ecomm\u003c/code\u003e：一行一行的比较排序过的文件\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003estrings\u003c/code\u003e：从二进制文件中抽取文本\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003etr\u003c/code\u003e：转换字母\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eiconv\u003c/code\u003e 或 \u003ccode\u003euconv\u003c/code\u003e：文本编码转换\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003esplit\u003c/code\u003e 和 \u003ccode\u003ecsplit\u003c/code\u003e：分割文件\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003esponge\u003c/code\u003e：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 \u003ccode\u003egrep -v something some-file | sponge some-file\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eunits\u003c/code\u003e：将一种计量单位转换为另一种等效的计量单位（参阅 \u003ccode\u003e/usr/share/units/definitions.units\u003c/code\u003e）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eapg\u003c/code\u003e：随机生成密码\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003exz\u003c/code\u003e：高比例的文件压缩\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eldd\u003c/code\u003e：动态库信息\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003enm\u003c/code\u003e：提取 obj 文件中的符号\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eab\u003c/code\u003e 或 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/wg/wrk\"\u003e\u003ccode\u003ewrk\u003c/code\u003e\u003c/a\u003e：web 服务器性能分析\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003estrace\u003c/code\u003e：调试系统调用\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.bitwizard.nl/mtr/\"\u003e\u003ccode\u003emtr\u003c/code\u003e\u003c/a\u003e：更好的网络调试跟踪工具\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ecssh\u003c/code\u003e：可视化的并发 shell\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ersync\u003c/code\u003e：通过 ssh 或本地文件系统同步文件和文件夹\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://wireshark.org/\"\u003e\u003ccode\u003ewireshark\u003c/code\u003e\u003c/a\u003e 和 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html\"\u003e\u003ccode\u003etshark\u003c/code\u003e\u003c/a\u003e：抓包和网络调试工具\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://ngrep.sourceforge.net/\"\u003e\u003ccode\u003engrep\u003c/code\u003e\u003c/a\u003e：网络层的 grep\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ehost\u003c/code\u003e 和 \u003ccode\u003edig\u003c/code\u003e：DNS 查找\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003elsof\u003c/code\u003e：列出当前系统打开文件的工具以及查看端口信息\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003edstat\u003c/code\u003e：系统状态查看\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/nicolargo/glances\"\u003e\u003ccode\u003eglances\u003c/code\u003e\u003c/a\u003e：高层次的多子系统总览\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eiostat\u003c/code\u003e：硬盘使用状态\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003empstat\u003c/code\u003e： CPU 使用状态\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003evmstat\u003c/code\u003e： 内存使用状态\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ehtop\u003c/code\u003e：top 的加强版\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003elast\u003c/code\u003e：登入记录\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ew\u003c/code\u003e：查看处于登录状态的用户\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eid\u003c/code\u003e：用户/组 ID 信息\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://sebastien.godard.pagesperso-orange.fr/\"\u003e\u003ccode\u003esar\u003c/code\u003e\u003c/a\u003e：系统历史数据\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.ex-parrot.com/~pdw/iftop/\"\u003e\u003ccode\u003eiftop\u003c/code\u003e\u003c/a\u003e 或 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/raboof/nethogs\"\u003e\u003ccode\u003enethogs\u003c/code\u003e\u003c/a\u003e：套接字及进程的网络利用情况\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ess\u003c/code\u003e：套接字数据\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003edmesg\u003c/code\u003e：引导及系统错误信息\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003esysctl\u003c/code\u003e： 在内核运行时动态地查看和修改内核的运行参数\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ehdparm\u003c/code\u003e：SATA/ATA 磁盘更改及性能分析\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003elsblk\u003c/code\u003e：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003elshw\u003c/code\u003e，\u003ccode\u003elscpu\u003c/code\u003e，\u003ccode\u003elspci\u003c/code\u003e，\u003ccode\u003elsusb\u003c/code\u003e 和 \u003ccode\u003edmidecode\u003c/code\u003e：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB 设备等\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003elsmod\u003c/code\u003e 和 \u003ccode\u003emodinfo\u003c/code\u003e：列出内核模块，并显示其细节\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003efortune\u003c/code\u003e，\u003ccode\u003eddate\u003c/code\u003e 和 \u003ccode\u003esl\u003c/code\u003e：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"仅限-OS-X-系统\"\u003e\u003ca href=\"#仅限-OS-X-系统\" class=\"headerlink\" title=\"仅限 OS X 系统\"\u003e\u003c/a\u003e仅限 OS X 系统\u003c/h2\u003e\u003cp\u003e以下是\u003cem\u003e仅限于\u003c/em\u003e OS X 系统的技巧。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e用 \u003ccode\u003ebrew\u003c/code\u003e （Homebrew）或者 \u003ccode\u003eport\u003c/code\u003e （MacPorts）进行包管理。这些可以用来在 OS X 系统上安装以上的大多数命令。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e用 \u003ccode\u003epbcopy\u003c/code\u003e 复制任何命令的输出到桌面应用，用 \u003ccode\u003epbpaste\u003c/code\u003e 粘贴输入。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e若要在 OS X 终端中将 Option 键视为 alt 键（例如在上面介绍的 \u003cstrong\u003ealt-b\u003c/strong\u003e、\u003cstrong\u003ealt-f\u003c/strong\u003e 等命令中用到），打开 偏好设置 -\u0026gt; 描述文件 -\u0026gt; 键盘 并勾选“使用 Option 键作为 Meta 键”。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e用 \u003ccode\u003eopen\u003c/code\u003e 或者 \u003ccode\u003eopen -a /Applications/Whatever.app\u003c/code\u003e 使用桌面应用打开文件。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eSpotlight：用 \u003ccode\u003emdfind\u003c/code\u003e 搜索文件，用 \u003ccode\u003emdls\u003c/code\u003e 列出元数据（例如照片的 EXIF 信息）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e注意 OS X 系统是基于 BSD UNIX 的，许多命令（例如 \u003ccode\u003eps\u003c/code\u003e，\u003ccode\u003els\u003c/code\u003e，\u003ccode\u003etail\u003c/code\u003e，\u003ccode\u003eawk\u003c/code\u003e，\u003ccode\u003esed\u003c/code\u003e）都和 Linux 中有微妙的不同（ Linux 很大程度上受到了 System V-style Unix 和 GNU 工具影响）。你可以通过标题为 “BSD General Commands Manual” 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 \u003ccode\u003egawk\u003c/code\u003e 和 \u003ccode\u003egsed\u003c/code\u003e 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 \u003ccode\u003eperl\u003c/code\u003e ）或者经过仔细的测试。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e用 \u003ccode\u003esw_vers\u003c/code\u003e 获取 OS X 的版本信息。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"仅限-Windows-系统\"\u003e\u003ca href=\"#仅限-Windows-系统\" class=\"headerlink\" title=\"仅限 Windows 系统\"\u003e\u003c/a\u003e仅限 Windows 系统\u003c/h2\u003e\u003cp\u003e以下是\u003cem\u003e仅限于\u003c/em\u003e Windows 系统的技巧。\u003c/p\u003e\n\u003ch3 id=\"在-Winodws-下获取-Unix-工具\"\u003e\u003ca href=\"#在-Winodws-下获取-Unix-工具\" class=\"headerlink\" title=\"在 Winodws 下获取 Unix 工具\"\u003e\u003c/a\u003e在 Winodws 下获取 Unix 工具\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cp\u003e可以安装 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://cygwin.com/\"\u003eCygwin\u003c/a\u003e 允许你在 Microsoft Windows 中体验 Unix shell 的威力。这样的话，本文中介绍的大多数内容都将适用。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e在 Windows 10 上，你可以使用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://msdn.microsoft.com/commandline/wsl/about\"\u003eBash on Ubuntu on Windows\u003c/a\u003e，它提供了一个熟悉的 Bash 环境，包含了不少 Unix 命令行工具。好处是它允许 Linux 上编写的程序在 Windows 上运行，而另一方面，Windows 上编写的程序却无法在 Bash 命令行中运行。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e如果你在 Windows 上主要想用 GNU 开发者工具（例如 GCC），可以考虑 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.mingw.org/\"\u003eMinGW\u003c/a\u003e 以及它的 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.mingw.org/wiki/msys\"\u003eMSYS\u003c/a\u003e 包，这个包提供了例如 bash，gawk，make 和 grep 的工具。MSYS 并不包含所有可以与 Cygwin 媲美的特性。当制作 Unix 工具的原生 Windows 端口时 MinGW 将特别地有用。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e另一个在 Windows 下实现接近 Unix 环境外观效果的选项是 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/dthree/cash\"\u003eCash\u003c/a\u003e。注意在此环境下只有很少的 Unix 命令和命令行可用。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"实用-Windows-命令行工具\"\u003e\u003ca href=\"#实用-Windows-命令行工具\" class=\"headerlink\" title=\"实用 Windows 命令行工具\"\u003e\u003c/a\u003e实用 Windows 命令行工具\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cp\u003e可以使用 \u003ccode\u003ewmic\u003c/code\u003e 在命令行环境下给大部分 Windows 系统管理任务编写脚本以及执行这些任务。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWindows 实用的原生命令行网络工具包括 \u003ccode\u003eping\u003c/code\u003e，\u003ccode\u003eipconfig\u003c/code\u003e，\u003ccode\u003etracert\u003c/code\u003e，和 \u003ccode\u003enetstat\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e可以使用 \u003ccode\u003eRundll32\u003c/code\u003e 命令来实现\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.thewindowsclub.com/rundll32-shortcut-commands-windows\"\u003e许多有用的 Windows 任务\u003c/a\u003e 。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Cygwin-技巧\"\u003e\u003ca href=\"#Cygwin-技巧\" class=\"headerlink\" title=\"Cygwin 技巧\"\u003e\u003c/a\u003eCygwin 技巧\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cp\u003e通过 Cygwin 的包管理器来安装额外的 Unix 程序。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用 \u003ccode\u003emintty\u003c/code\u003e 作为你的命令行窗口。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e要访问 Windows 剪贴板，可以通过 \u003ccode\u003e/dev/clipboard\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e运行 \u003ccode\u003ecygstart\u003c/code\u003e 以通过默认程序打开一个文件。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e要访问 Windows 注册表，可以使用 \u003ccode\u003eregtool\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e注意 Windows 驱动器路径 \u003ccode\u003eC:\\\u003c/code\u003e 在 Cygwin 中用 \u003ccode\u003e/cygdrive/c\u003c/code\u003e 代表，而 Cygwin 的 \u003ccode\u003e/\u003c/code\u003e 代表 Windows 中的 \u003ccode\u003eC:\\cygwin\u003c/code\u003e。要转换 Cygwin 和 Windows 风格的路径可以用 \u003ccode\u003ecygpath\u003c/code\u003e。这在需要调用 Windows 程序的脚本里很有用。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e学会使用 \u003ccode\u003ewmic\u003c/code\u003e，你就可以从命令行执行大多数 Windows 系统管理任务，并编成脚本。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e要在 Windows 下获得 Unix 的界面和体验，另一个办法是使用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/dthree/cash\"\u003eCash\u003c/a\u003e。需要注意的是，这个环境支持的 Unix 命令和命令行参数非常少。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e要在 Windows 上获取 GNU 开发者工具（比如 GCC）的另一个办法是使用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.mingw.org/\"\u003eMinGW\u003c/a\u003e 以及它的 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.mingw.org/wiki/msys\"\u003eMSYS\u003c/a\u003e 软件包，该软件包提供了 bash、gawk、make、grep 等工具。然而 MSYS 提供的功能没有 Cygwin 完善。MinGW 在创建 Unix 工具的 Windows 原生移植方面非常有用。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"更多资源\"\u003e\u003ca href=\"#更多资源\" class=\"headerlink\" title=\"更多资源\"\u003e\u003c/a\u003e更多资源\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/alebcay/awesome-shell\"\u003eawesome-shell\u003c/a\u003e：一份精心组织的命令行工具及资源的列表。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/herrbischoff/awesome-osx-command-line\"\u003eawesome-osx-command-line\u003c/a\u003e：一份针对 OS X 命令行的更深入的指南。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://redsymbol.net/articles/unofficial-bash-strict-mode/\"\u003eStrict mode\u003c/a\u003e：为了编写更好的脚本文件。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/koalaman/shellcheck\"\u003eshellcheck\u003c/a\u003e：一个静态 shell 脚本分析工具，本质上是 bash／sh／zsh 的 lint。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.dwheeler.com/essays/filenames-in-shell.html\"\u003eFilenames and Pathnames in Shell\u003c/a\u003e：有关如何在 shell 脚本里正确处理文件名的细枝末节。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://datascienceatthecommandline.com/#tools\"\u003eData Science at the Command Line\u003c/a\u003e：用于数据科学的一些命令和工具，摘自同名书籍。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"免责声明\"\u003e\u003ca href=\"#免责声明\" class=\"headerlink\" title=\"免责声明\"\u003e\u003c/a\u003e免责声明\u003c/h2\u003e\u003cp\u003e除去特别小的工作，你编写的代码应当方便他人阅读。能力往往伴随着责任，你 \u003cem\u003e有能力\u003c/em\u003e 在 Bash 中玩一些奇技淫巧并不意味着你应该去做！;)\u003c/p\u003e\n\u003ch2 id=\"授权条款\"\u003e\u003ca href=\"#授权条款\" class=\"headerlink\" title=\"授权条款\"\u003e\u003c/a\u003e授权条款\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"http://creativecommons.org/licenses/by-sa/4.0/\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e本文使用授权协议 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003eCreative Commons Attribution-ShareAlike 4.0 International License\u003c/a\u003e。\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2023-11-27T02:57:22Z",
  "Author": "钝悟 ◾ Dunwu"
}