{
  "Source": "dunwu",
  "Title": "《玩转 Spring 全家桶》笔记",
  "Link": "https://dunwu.github.io/blog/pages/eb5c76/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"《玩转-Spring-全家桶》笔记\"\u003e\u003ca href=\"#《玩转-Spring-全家桶》笔记\" class=\"headerlink\" title=\"《玩转 Spring 全家桶》笔记\"\u003e\u003c/a\u003e《玩转 Spring 全家桶》笔记\u003c/h1\u003e\u003ch2 id=\"第一章：初识-Spring-4-讲\"\u003e\u003ca href=\"#第一章：初识-Spring-4-讲\" class=\"headerlink\" title=\"第一章：初识 Spring (4 讲)\"\u003e\u003c/a\u003e第一章：初识 Spring (4 讲)\u003c/h2\u003e\u003ch3 id=\"01-Spring-课程介绍\"\u003e\u003ca href=\"#01-Spring-课程介绍\" class=\"headerlink\" title=\"01 | Spring 课程介绍\"\u003e\u003c/a\u003e01 | Spring 课程介绍\u003c/h3\u003e\u003ch3 id=\"02-一起认识-Spring-家族的主要成员\"\u003e\u003ca href=\"#02-一起认识-Spring-家族的主要成员\" class=\"headerlink\" title=\"02 | 一起认识 Spring 家族的主要成员\"\u003e\u003c/a\u003e02 | 一起认识 Spring 家族的主要成员\u003c/h3\u003e\u003cp\u003eSpring Framework - 用于构建企业级应用的轻量级一站式解决方案\u003c/p\u003e\n\u003cp\u003eSpring Boot - 快速构建基于 Spring 的应用程序\u003c/p\u003e\n\u003cp\u003eSpring Cloud - 简化分布式系统的开发\u003c/p\u003e\n\u003ch3 id=\"03-跟着-Spring-了解技术趋势\"\u003e\u003ca href=\"#03-跟着-Spring-了解技术趋势\" class=\"headerlink\" title=\"03 | 跟着 Spring 了解技术趋势\"\u003e\u003c/a\u003e03 | 跟着 Spring 了解技术趋势\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch3 id=\"04-编写你的第一个-Spring-程序\"\u003e\u003ca href=\"#04-编写你的第一个-Spring-程序\" class=\"headerlink\" title=\"04 | 编写你的第一个 Spring 程序\"\u003e\u003c/a\u003e04 | 编写你的第一个 Spring 程序\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"第二章：JDBC-必知必会-10-讲\"\u003e\u003ca href=\"#第二章：JDBC-必知必会-10-讲\" class=\"headerlink\" title=\"第二章：JDBC 必知必会 (10 讲)\"\u003e\u003c/a\u003e第二章：JDBC 必知必会 (10 讲)\u003c/h2\u003e\u003ch3 id=\"05-如何配置单数据源\"\u003e\u003ca href=\"#05-如何配置单数据源\" class=\"headerlink\" title=\"05 | 如何配置单数据源\"\u003e\u003c/a\u003e05 | 如何配置单数据源\u003c/h3\u003e\u003ch4 id=\"直接配置所需的-Bean\"\u003e\u003ca href=\"#直接配置所需的-Bean\" class=\"headerlink\" title=\"直接配置所需的 Bean\"\u003e\u003c/a\u003e直接配置所需的 Bean\u003c/h4\u003e\u003cp\u003e数据源相关\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDataSource（根据选择的连接池实现决定）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e事务相关（可选）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePlatformTransactionManager（DataSourceTransactionManager）\u003c/li\u003e\n\u003cli\u003eTransactionTemplate\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e操作相关（可选）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJdbcTemplate\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"Spring-Boot-做了哪些配置\"\u003e\u003ca href=\"#Spring-Boot-做了哪些配置\" class=\"headerlink\" title=\"Spring Boot 做了哪些配置\"\u003e\u003c/a\u003eSpring Boot 做了哪些配置\u003c/h4\u003e\u003cp\u003eDataSourceAutoConfiguration\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e配置 DataSource\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eDataSourceTransactionManagerAutoConfiguration\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e配置 DataSourceTransactionManager\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eJdbcTemplateAutoConfiguration\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e配置 JdbcTemplate\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e符合条件时才进行配置\u003c/p\u003e\n\u003ch4 id=\"数据源相关配置属性\"\u003e\u003ca href=\"#数据源相关配置属性\" class=\"headerlink\" title=\"数据源相关配置属性\"\u003e\u003c/a\u003e数据源相关配置属性\u003c/h4\u003e\u003cp\u003e通用\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003espring.datasource.url=jdbc:mysql://localhost/test\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.datasource.username=dbuser\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.datasource.password=dbpass\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.datasource.driver-class-name=com.mysql.jdbc.Driver\u003c/code\u003e（可选）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e初始化内嵌数据库\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003espring.datasource.initialization-mode=embedded|always|never\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003espring.datasource.schema 与 spring.datasource.data 确定初始化 SQL ⽂文件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.datasource.platform=hsqldb | h2 | oracle | mysql | postgresql\u003c/code\u003e（与前者对应）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"06-如何配置多数据源\"\u003e\u003ca href=\"#06-如何配置多数据源\" class=\"headerlink\" title=\"06 | 如何配置多数据源\"\u003e\u003c/a\u003e06 | 如何配置多数据源\u003c/h3\u003e\u003ch4 id=\"配置多数据源的注意事项\"\u003e\u003ca href=\"#配置多数据源的注意事项\" class=\"headerlink\" title=\"配置多数据源的注意事项\"\u003e\u003c/a\u003e配置多数据源的注意事项\u003c/h4\u003e\u003cp\u003e不同数据源的配置要分开\u003c/p\u003e\n\u003cp\u003e关注每次使用的数据源\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e有多个 DataSource 时系统如何判断\u003c/li\u003e\n\u003cli\u003e对应的设施（事务、ORM 等）如何选择 DataSource\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"Spring-Boot-中的多数据源配置\"\u003e\u003ca href=\"#Spring-Boot-中的多数据源配置\" class=\"headerlink\" title=\"Spring Boot 中的多数据源配置\"\u003e\u003c/a\u003eSpring Boot 中的多数据源配置\u003c/h4\u003e\u003cp\u003e手工配置两组 DataSource 及相关内容\u003c/p\u003e\n\u003cp\u003e与 Spring Boot 协同工作（二选一）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e配置@Primary 类型的 Bean\u003c/li\u003e\n\u003cli\u003e排除 Spring Boot 的自动配置\u003c/li\u003e\n\u003cli\u003eDataSourceAutoConfiguration\u003c/li\u003e\n\u003cli\u003eDataSourceTransactionManagerAutoConfiguration\u003c/li\u003e\n\u003cli\u003eJdbcTemplateAutoConfiguration\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"07-那些好用的连接池们：HikariCP\"\u003e\u003ca href=\"#07-那些好用的连接池们：HikariCP\" class=\"headerlink\" title=\"07 | 那些好用的连接池们：HikariCP\"\u003e\u003c/a\u003e07 | 那些好用的连接池们：HikariCP\u003c/h3\u003e\u003ch4 id=\"在-Spring-Boot-中的配置\"\u003e\u003ca href=\"#在-Spring-Boot-中的配置\" class=\"headerlink\" title=\"在 Spring Boot 中的配置\"\u003e\u003c/a\u003e在 Spring Boot 中的配置\u003c/h4\u003e\u003cp\u003eSpring Boot 2.x\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e默认使用 HikariCP\u003c/li\u003e\n\u003cli\u003e配置 spring.datasource.hikari.* 配置\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSpring Boot 1.x\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e默认使用 Tomcat 连接池，需要移除 tomcat-jdbc 依赖\u003c/li\u003e\n\u003cli\u003espring.datasource.type=com.zaxxer.hikari.HikariDataSource\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"常用-HikariCP-配置参数\"\u003e\u003ca href=\"#常用-HikariCP-配置参数\" class=\"headerlink\" title=\"常用 HikariCP 配置参数\"\u003e\u003c/a\u003e常用 HikariCP 配置参数\u003c/h4\u003e\u003cp\u003e常用配置\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003espring.datasource.hikari.maximumPoolSize=10\u003c/li\u003e\n\u003cli\u003espring.datasource.hikari.minimumIdle=10\u003c/li\u003e\n\u003cli\u003espring.datasource.hikari.idleTimeout=600000\u003c/li\u003e\n\u003cli\u003espring.datasource.hikari.connectionTimeout=30000\u003c/li\u003e\n\u003cli\u003espring.datasource.hikari.maxLifetime=1800000\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e其他配置详见 HikariCP 官网\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/brettwooldridge/HikariCP\"\u003ehttps://github.com/brettwooldridge/HikariCP\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"08-那些好用的连接池们：Alibaba-Druid\"\u003e\u003ca href=\"#08-那些好用的连接池们：Alibaba-Druid\" class=\"headerlink\" title=\"08 | 那些好用的连接池们：Alibaba Druid\"\u003e\u003c/a\u003e08 | 那些好用的连接池们：Alibaba Druid\u003c/h3\u003e\u003ch4 id=\"数据源配置\"\u003e\u003ca href=\"#数据源配置\" class=\"headerlink\" title=\"数据源配置\"\u003e\u003c/a\u003e数据源配置\u003c/h4\u003e\u003cp\u003e直接配置 DruidDataSource\u003c/p\u003e\n\u003cp\u003e通过 druid-spring-boot-starter\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003espring.datasource.druid.*\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFilter 配置\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003espring.datasource.druid.filters=stat,config,wall,log4j （全部使用默认值）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e密码加密\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003espring.datasource.password=\u0026lt;加密密码\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.datasource.druid.filter.config.enabled=true\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.datasource.druid.connection-properties=config.decrypt=true;config.decrypt.key=\u0026lt;public-key\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSQL 防注入\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003espring.datasource.druid.filter.wall.enabled=true\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.datasource.druid.filter.wall.db-type=h2\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.datasource.druid.filter.wall.config.delete-allow=false\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.datasource.druid.filter.wall.config.drop-table-allow=false\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"Druid-Filter\"\u003e\u003ca href=\"#Druid-Filter\" class=\"headerlink\" title=\"Druid Filter\"\u003e\u003c/a\u003eDruid Filter\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e用于定制连接池操作的各种环节\u003c/li\u003e\n\u003cli\u003e可以继承 FilterEventAdapter 以便方便地实现 Filter\u003c/li\u003e\n\u003cli\u003e修改 META-INF/druid-filter.properties 增加 Filter 配置\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"09-如何通过-Spring-JDBC-访问数据库\"\u003e\u003ca href=\"#09-如何通过-Spring-JDBC-访问数据库\" class=\"headerlink\" title=\"09 | 如何通过 Spring JDBC 访问数据库\"\u003e\u003c/a\u003e09 | 如何通过 Spring JDBC 访问数据库\u003c/h3\u003e\u003ch4 id=\"Spring-的-JDBC-操作类\"\u003e\u003ca href=\"#Spring-的-JDBC-操作类\" class=\"headerlink\" title=\"Spring 的 JDBC 操作类\"\u003e\u003c/a\u003eSpring 的 JDBC 操作类\u003c/h4\u003e\u003cp\u003espring-jdbc\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ecore，JdbcTemplate 等相关核心接口和类\u003c/li\u003e\n\u003cli\u003edatasource，数据源相关的辅助类\u003c/li\u003e\n\u003cli\u003eobject，将基本的 JDBC 操作封装成对象\u003c/li\u003e\n\u003cli\u003esupport，错误码等其他辅助工具\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"常用的-Bean-注解\"\u003e\u003ca href=\"#常用的-Bean-注解\" class=\"headerlink\" title=\"常用的 Bean 注解\"\u003e\u003c/a\u003e常用的 Bean 注解\u003c/h4\u003e\u003cp\u003e通过注解定义 Bean\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@Component\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@Repository\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@Service\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@Controller\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@RestController\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"简单的-JDBC-操作\"\u003e\u003ca href=\"#简单的-JDBC-操作\" class=\"headerlink\" title=\"简单的 JDBC 操作\"\u003e\u003c/a\u003e简单的 JDBC 操作\u003c/h4\u003e\u003cp\u003e\u003ccode\u003eJdbcTemplate\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003equery\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003equeryForObject\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003equeryForList\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eupdate\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eexecute\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"SQL-批处理\"\u003e\u003ca href=\"#SQL-批处理\" class=\"headerlink\" title=\"SQL 批处理\"\u003e\u003c/a\u003eSQL 批处理\u003c/h4\u003e\u003cp\u003e\u003ccode\u003eJdbcTemplate\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebatchUpdate\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eBatchPreparedStatementSetter\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003eNamedParameterJdbcTemplate\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebatchUpdate\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSqlParameterSourceUtils.createBatch\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"10-什么是-Spring-的事务抽象（上）\"\u003e\u003ca href=\"#10-什么是-Spring-的事务抽象（上）\" class=\"headerlink\" title=\"10 | 什么是 Spring 的事务抽象（上）\"\u003e\u003c/a\u003e10 | 什么是 Spring 的事务抽象（上）\u003c/h3\u003e\u003ch3 id=\"11-什么是-Spring-的事务抽象（下）\"\u003e\u003ca href=\"#11-什么是-Spring-的事务抽象（下）\" class=\"headerlink\" title=\"11 | 什么是 Spring 的事务抽象（下）\"\u003e\u003c/a\u003e11 | 什么是 Spring 的事务抽象（下）\u003c/h3\u003e\u003ch4 id=\"Spring-的事务抽象\"\u003e\u003ca href=\"#Spring-的事务抽象\" class=\"headerlink\" title=\"Spring 的事务抽象\"\u003e\u003c/a\u003eSpring 的事务抽象\u003c/h4\u003e\u003cp\u003e一致的事务模型\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJDBC/Hibernate/myBatis\u003c/li\u003e\n\u003cli\u003eDataSource/JTA\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"事务抽象的核心接口\"\u003e\u003ca href=\"#事务抽象的核心接口\" class=\"headerlink\" title=\"事务抽象的核心接口\"\u003e\u003c/a\u003e事务抽象的核心接口\u003c/h4\u003e\u003cp\u003ePlatformTransactionManager\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDataSourceTransactionManager\u003c/li\u003e\n\u003cli\u003eHibernateTransactionManager\u003c/li\u003e\n\u003cli\u003eJtaTransactionManager\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTransactionDefinition\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePropagation\u003c/li\u003e\n\u003cli\u003eIsolation\u003c/li\u003e\n\u003cli\u003eTimeout\u003c/li\u003e\n\u003cli\u003eRead-only status\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"事务传播特性\"\u003e\u003ca href=\"#事务传播特性\" class=\"headerlink\" title=\"事务传播特性\"\u003e\u003c/a\u003e事务传播特性\u003c/h4\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e传播性\u003c/th\u003e\n\u003cth\u003e值\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003ePROPAGATION_REQUIRED\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e当前有事务就用当前的，没有就用新的\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePROPAGATION_SUPPORTS\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e事务可有可无，不是必须的\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePROPAGATION_MANDATORY\u003c/td\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e当前一定要有事务，不然就抛异常\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePROPAGATION_REQUIRES_NEW\u003c/td\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003e无论是否有事务，都起个新的事务\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePROPAGATION_NOT_SUPPORTED\u003c/td\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003e不支持事务，按非事务方式运行\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePROPAGATION_NEVER\u003c/td\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003ctd\u003e不支持事务，如果有事务则抛异常\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePROPAGATION_NESTED\u003c/td\u003e\n\u003ctd\u003e6\u003c/td\u003e\n\u003ctd\u003e当前有事务就在当前事务里再起一个事务\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch4 id=\"事务隔离特性\"\u003e\u003ca href=\"#事务隔离特性\" class=\"headerlink\" title=\"事务隔离特性\"\u003e\u003c/a\u003e事务隔离特性\u003c/h4\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e隔离性\u003c/th\u003e\n\u003cth\u003e值\u003c/th\u003e\n\u003cth\u003e脏读\u003c/th\u003e\n\u003cth\u003e不可重复读\u003c/th\u003e\n\u003cth\u003e幻读\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003eISOLATION_READ_UNCOMMITTED\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e✔️️️\u003c/td\u003e\n\u003ctd\u003e✔️️️\u003c/td\u003e\n\u003ctd\u003e✔️️️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eISOLATION_READ_COMMITTED\u003c/td\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e❌\u003c/td\u003e\n\u003ctd\u003e✔️️️\u003c/td\u003e\n\u003ctd\u003e✔️️️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eISOLATION_REPEATABLE_READ\u003c/td\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003e❌\u003c/td\u003e\n\u003ctd\u003e❌\u003c/td\u003e\n\u003ctd\u003e✔️️️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eISOLATION_SERIALIZABLE\u003c/td\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003e❌\u003c/td\u003e\n\u003ctd\u003e❌\u003c/td\u003e\n\u003ctd\u003e❌\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch4 id=\"编程式事务\"\u003e\u003ca href=\"#编程式事务\" class=\"headerlink\" title=\"编程式事务\"\u003e\u003c/a\u003e编程式事务\u003c/h4\u003e\u003cp\u003eTransactionTemplate\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTransactionCallback\u003c/li\u003e\n\u003cli\u003eTransactionCallbackWithoutResult\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePlatformTransactionManager\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e可以传入 TransactionDefinition 进行定义\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"声明式事务\"\u003e\u003ca href=\"#声明式事务\" class=\"headerlink\" title=\"声明式事务\"\u003e\u003c/a\u003e声明式事务\u003c/h4\u003e\u003cp\u003e开启事务注解的方式\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@EnableTransactionManagement\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;tx:annotation-driven/\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e一些配置\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eproxyTargetClass\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emode\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorder\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003e@Transactional\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etransactionManager\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epropagation\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eisolation\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etimeout\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ereadOnly\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e怎么判断回滚\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"12-了解-Spring-的-JDBC-异常抽象\"\u003e\u003ca href=\"#12-了解-Spring-的-JDBC-异常抽象\" class=\"headerlink\" title=\"12 | 了解 Spring 的 JDBC 异常抽象\"\u003e\u003c/a\u003e12 | 了解 Spring 的 JDBC 异常抽象\u003c/h3\u003e\u003ch4 id=\"Spring-的-JDBC-异常抽象\"\u003e\u003ca href=\"#Spring-的-JDBC-异常抽象\" class=\"headerlink\" title=\"Spring 的 JDBC 异常抽象\"\u003e\u003c/a\u003eSpring 的 JDBC 异常抽象\u003c/h4\u003e\u003cp\u003eSpring 会将数据操作的异常转换为 DataAccessException\u003c/p\u003e\n\u003cp\u003e无论使用何种数据访问方式，都能使用一样的异常\u003c/p\u003e\n\u003ch4 id=\"Spring-是怎么认识那些错误码的\"\u003e\u003ca href=\"#Spring-是怎么认识那些错误码的\" class=\"headerlink\" title=\"Spring 是怎么认识那些错误码的\"\u003e\u003c/a\u003eSpring 是怎么认识那些错误码的\u003c/h4\u003e\u003cp\u003e通过 SQLErrorCodeSQLExceptionTranslator 解析错误码\u003c/p\u003e\n\u003cp\u003eErrorCode 定义\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eorg/springframework/jdbc/support/sql-error-codes.xml\u003c/li\u003e\n\u003cli\u003eClasspath 下的 sql-error-codes.xml\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"13-课程答疑（上）\"\u003e\u003ca href=\"#13-课程答疑（上）\" class=\"headerlink\" title=\"13 | 课程答疑（上）\"\u003e\u003c/a\u003e13 | 课程答疑（上）\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch3 id=\"14-课程答疑（下）\"\u003e\u003ca href=\"#14-课程答疑（下）\" class=\"headerlink\" title=\"14 | 课程答疑（下）\"\u003e\u003c/a\u003e14 | 课程答疑（下）\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"第三章：O-R-Mapping-实践-9-讲\"\u003e\u003ca href=\"#第三章：O-R-Mapping-实践-9-讲\" class=\"headerlink\" title=\"第三章：O/R Mapping 实践 (9 讲)\"\u003e\u003c/a\u003e第三章：O/R Mapping 实践 (9 讲)\u003c/h2\u003e\u003ch3 id=\"15-认识-Spring-Data-JPA\"\u003e\u003ca href=\"#15-认识-Spring-Data-JPA\" class=\"headerlink\" title=\"15 | 认识 Spring Data JPA\"\u003e\u003c/a\u003e15 | 认识 Spring Data JPA\u003c/h3\u003e\u003ch4 id=\"Java-Persistence-API\"\u003e\u003ca href=\"#Java-Persistence-API\" class=\"headerlink\" title=\"Java Persistence API\"\u003e\u003c/a\u003eJava Persistence API\u003c/h4\u003e\u003cp\u003eJPA 为对象关系映射提供了一种基于 POJO 的持久化模型\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e简化数据持久化代码的开发工作\u003c/li\u003e\n\u003cli\u003e为 Java 社区屏蔽不同持久化 API 的差异\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"Spring-Data\"\u003e\u003ca href=\"#Spring-Data\" class=\"headerlink\" title=\"Spring Data\"\u003e\u003c/a\u003eSpring Data\u003c/h4\u003e\u003cp\u003e在保留底层存储特性的同时，提供相对一致的、基于 Spring 的编程模型\u003c/p\u003e\n\u003cp\u003e主要模块\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSpring Data Commons\u003c/li\u003e\n\u003cli\u003eSpring Data JDBC\u003c/li\u003e\n\u003cli\u003eSpring Data JPA\u003c/li\u003e\n\u003cli\u003eSpring Data Redis\u003c/li\u003e\n\u003cli\u003e……\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"16-定义-JPA-的实体对象\"\u003e\u003ca href=\"#16-定义-JPA-的实体对象\" class=\"headerlink\" title=\"16 | 定义 JPA 的实体对象\"\u003e\u003c/a\u003e16 | 定义 JPA 的实体对象\u003c/h3\u003e\u003ch4 id=\"常用-JPA-注解\"\u003e\u003ca href=\"#常用-JPA-注解\" class=\"headerlink\" title=\"常用 JPA 注解\"\u003e\u003c/a\u003e常用 JPA 注解\u003c/h4\u003e\u003cp\u003e实体\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@Entity、@MappedSuperclass\u003c/li\u003e\n\u003cli\u003e@Table(name)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e主键\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@Id\u003c/li\u003e\n\u003cli\u003e@GeneratedValue(strategy, generator)\u003c/li\u003e\n\u003cli\u003e@SequenceGenerator(name, sequenceName)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e映射\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@Column(name, nullable, length, insertable, updatable)\u003c/li\u003e\n\u003cli\u003e@JoinTable(name)、@JoinColumn(name)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e关系\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@OneToOne、@OneToMany、@ManyToOne、@ManyToMany\u003c/li\u003e\n\u003cli\u003e@OrderBy\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"Lombok\"\u003e\u003ca href=\"#Lombok\" class=\"headerlink\" title=\"Lombok\"\u003e\u003c/a\u003eLombok\u003c/h4\u003e\u003cp\u003eProject Lombok 能够自动嵌入 IDE 和构建工具，提升开发效率\u003c/p\u003e\n\u003cp\u003e常用功能\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@Getter / @Setter\u003c/li\u003e\n\u003cli\u003e@ToString\u003c/li\u003e\n\u003cli\u003e@NoArgsConstructor / @RequiredArgsConstructor / @AllArgsConstructor\u003c/li\u003e\n\u003cli\u003e@Data\u003c/li\u003e\n\u003cli\u003e@Builder\u003c/li\u003e\n\u003cli\u003e@Slf4j / @CommonsLog / @Log4j2\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"17-开始我们的线上咖啡馆实战项目：SpringBucks\"\u003e\u003ca href=\"#17-开始我们的线上咖啡馆实战项目：SpringBucks\" class=\"headerlink\" title=\"17 | 开始我们的线上咖啡馆实战项目：SpringBucks\"\u003e\u003c/a\u003e17 | 开始我们的线上咖啡馆实战项目：SpringBucks\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch3 id=\"18-通过-Spring-Data-JPA-操作数据库\"\u003e\u003ca href=\"#18-通过-Spring-Data-JPA-操作数据库\" class=\"headerlink\" title=\"18 | 通过 Spring Data JPA 操作数据库\"\u003e\u003c/a\u003e18 | 通过 Spring Data JPA 操作数据库\u003c/h3\u003e\u003ch4 id=\"Repository\"\u003e\u003ca href=\"#Repository\" class=\"headerlink\" title=\"Repository\"\u003e\u003c/a\u003eRepository\u003c/h4\u003e\u003cp\u003e@EnableJpaRepositories\u003c/p\u003e\n\u003cp\u003eRepository\u0026lt;T, ID\u0026gt; 接口\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCrudRepository\u0026lt;T, ID\u0026gt;\u003c/li\u003e\n\u003cli\u003ePagingAndSortingRepository\u0026lt;T, ID\u0026gt;\u003c/li\u003e\n\u003cli\u003eJpaRepository\u0026lt;T, ID\u0026gt;\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"定义查询\"\u003e\u003ca href=\"#定义查询\" class=\"headerlink\" title=\"定义查询\"\u003e\u003c/a\u003e定义查询\u003c/h4\u003e\u003cp\u003e根据方法名定义查询\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efind…By… / read…By… / query…By… / get…By…\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecount…By…\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e…OrderBy…[Asc / Desc]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnd / Or / IgnoreCase\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTop / First / Distinct\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"分页查询\"\u003e\u003ca href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"\u003e\u003c/a\u003e分页查询\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ePagingAndSortingRepository\u0026lt;T, ID\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePageable / Sort\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSlice\u0026lt;T\u0026gt; / Page\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"19-Spring-Data-JPA-的-Repository-是怎么从接口变成-Bean-的\"\u003e\u003ca href=\"#19-Spring-Data-JPA-的-Repository-是怎么从接口变成-Bean-的\" class=\"headerlink\" title=\"19 | Spring Data JPA 的 Repository 是怎么从接口变成 Bean 的\"\u003e\u003c/a\u003e19 | Spring Data JPA 的 Repository 是怎么从接口变成 Bean 的\u003c/h3\u003e\u003ch4 id=\"Repository-Bean-是如何创建的\"\u003e\u003ca href=\"#Repository-Bean-是如何创建的\" class=\"headerlink\" title=\"Repository Bean 是如何创建的\"\u003e\u003c/a\u003eRepository Bean 是如何创建的\u003c/h4\u003e\u003cp\u003eJpaRepositoriesRegistrar\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e激活了 @EnableJpaRepositories\u003c/li\u003e\n\u003cli\u003e返回了 JpaRepositoryConfigExtension\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRepositoryBeanDefinitionRegistrarSupport.registerBeanDefinitions\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e注册 Repository Bean（类型是 JpaRepositoryFactoryBean）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRepositoryConfigurationExtensionSupport.getRepositoryConfigurations\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e取得 Repository 配置\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eJpaRepositoryFactory.getTargetRepository\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e创建了 Repository\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"接口中的方法是如何被解释的\"\u003e\u003ca href=\"#接口中的方法是如何被解释的\" class=\"headerlink\" title=\"接口中的方法是如何被解释的\"\u003e\u003c/a\u003e接口中的方法是如何被解释的\u003c/h4\u003e\u003cp\u003eRepositoryFactorySupport.getRepository 添加了 Advice\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDefaultMethodInvokingMethodInterceptor\u003c/li\u003e\n\u003cli\u003eQueryExecutorMethodInterceptor\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAbstractJpaQuery.execute 执行具体的查询\u003c/p\u003e\n\u003cp\u003e语法解析在 Part 中\u003c/p\u003e\n\u003ch3 id=\"20-通过-MyBatis-操作数据库\"\u003e\u003ca href=\"#20-通过-MyBatis-操作数据库\" class=\"headerlink\" title=\"20 | 通过 MyBatis 操作数据库\"\u003e\u003c/a\u003e20 | 通过 MyBatis 操作数据库\u003c/h3\u003e\u003cp\u003e在 Spring 中使用 MyBatis\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMyBatis Spring Adapter（\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/mybatis/spring%EF%BC%89\"\u003ehttps://github.com/mybatis/spring）\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMyBatis Spring-Boot-Starter（\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/mybatis/spring-boot-starter%EF%BC%89\"\u003ehttps://github.com/mybatis/spring-boot-starter）\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e简单配置\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emybatis.mapper-locations = classpath*:mapper/**/*.xml\u003c/li\u003e\n\u003cli\u003emybatis.type-aliases-package = 类型别名的包名\u003c/li\u003e\n\u003cli\u003emybatis.type-handlers-package = TypeHandler 扫描包名\u003c/li\u003e\n\u003cli\u003emybatis.configuration.map-underscore-to-camel-case = true\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMapper 的定义与扫描\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@MapperScan 配置扫描位置\u003c/li\u003e\n\u003cli\u003e@Mapper 定义接口\u003c/li\u003e\n\u003cli\u003e映射的定义—— XML 与注解\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"21-让-MyBatis-更好用的那些工具：MyBatis-Generator\"\u003e\u003ca href=\"#21-让-MyBatis-更好用的那些工具：MyBatis-Generator\" class=\"headerlink\" title=\"21 | 让 MyBatis 更好用的那些工具：MyBatis Generator\"\u003e\u003c/a\u003e21 | 让 MyBatis 更好用的那些工具：MyBatis Generator\u003c/h3\u003e\u003cp\u003eMyBatis Generator（\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.mybatis.org/generator/%EF%BC%89\"\u003ehttp://www.mybatis.org/generator/）\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"22-让-MyBatis-更好用的那些工具：MyBatis-PageHelper\"\u003e\u003ca href=\"#22-让-MyBatis-更好用的那些工具：MyBatis-PageHelper\" class=\"headerlink\" title=\"22 | 让 MyBatis 更好用的那些工具：MyBatis PageHelper\"\u003e\u003c/a\u003e22 | 让 MyBatis 更好用的那些工具：MyBatis PageHelper\u003c/h3\u003e\u003cp\u003eMyBatis PageHepler（\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://pagehelper.github.io)/\"\u003ehttps://pagehelper.github.io）\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"23-SpringBucks-实战项目进度小结\"\u003e\u003ca href=\"#23-SpringBucks-实战项目进度小结\" class=\"headerlink\" title=\"23 | SpringBucks 实战项目进度小结\"\u003e\u003c/a\u003e23 | SpringBucks 实战项目进度小结\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"第四章：NoSQL-实践-7-讲\"\u003e\u003ca href=\"#第四章：NoSQL-实践-7-讲\" class=\"headerlink\" title=\"第四章：NoSQL 实践 (7 讲)\"\u003e\u003c/a\u003e第四章：NoSQL 实践 (7 讲)\u003c/h2\u003e\u003ch3 id=\"24-通过-Docker-辅助开发\"\u003e\u003ca href=\"#24-通过-Docker-辅助开发\" class=\"headerlink\" title=\"24 | 通过 Docker 辅助开发\"\u003e\u003c/a\u003e24 | 通过 Docker 辅助开发\u003c/h3\u003e\u003ch4 id=\"Docker-常用命令\"\u003e\u003ca href=\"#Docker-常用命令\" class=\"headerlink\" title=\"Docker 常用命令\"\u003e\u003c/a\u003eDocker 常用命令\u003c/h4\u003e\u003cp\u003e镜像相关\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edocker pull \u0026lt;image\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edocker search \u0026lt;image\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e容器相关\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edocker run\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edocker start/stop \u0026lt;容器名\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edocker ps \u0026lt;容器名\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edocker logs \u0026lt;容器名\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"docker-run-的常用选项\"\u003e\u003ca href=\"#docker-run-的常用选项\" class=\"headerlink\" title=\"docker run 的常用选项\"\u003e\u003c/a\u003edocker run 的常用选项\u003c/h4\u003e\u003cp\u003e\u003ccode\u003edocker run [OPTIONS] IMAGE [COMMAND] [ARG…]\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e选项说明\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e-d，后台运行容器\u003c/li\u003e\n\u003cli\u003e-e，设置环境变量\u003c/li\u003e\n\u003cli\u003e–expose / -p 宿主端口:容器端口\u003c/li\u003e\n\u003cli\u003e–name，指定容器名称\u003c/li\u003e\n\u003cli\u003e–link，链接不同容器\u003c/li\u003e\n\u003cli\u003e-v 宿主目录:容器目录，挂载磁盘卷\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"国内-Docker-镜像配置\"\u003e\u003ca href=\"#国内-Docker-镜像配置\" class=\"headerlink\" title=\"国内 Docker 镜像配置\"\u003e\u003c/a\u003e国内 Docker 镜像配置\u003c/h4\u003e\u003cp\u003e官方 Docker Hub\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://hub.docker.com/\"\u003ehttps://hub.docker.com\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e官方镜像\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e镜像 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.docker-cn.com/registry-mirror\"\u003ehttps://www.docker-cn.com/registry-mirror\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e下载 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.docker-cn.com/get-docker\"\u003ehttps://www.docker-cn.com/get-docker\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e阿里云镜像\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://dev.aliyun.com/\"\u003ehttps://dev.aliyun.com\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"25-在-Spring-中访问-MongoDB\"\u003e\u003ca href=\"#25-在-Spring-中访问-MongoDB\" class=\"headerlink\" title=\"25 | 在 Spring 中访问 MongoDB\"\u003e\u003c/a\u003e25 | 在 Spring 中访问 MongoDB\u003c/h3\u003e\u003ch4 id=\"Spring-对-MongoDB-的支持\"\u003e\u003ca href=\"#Spring-对-MongoDB-的支持\" class=\"headerlink\" title=\"Spring 对 MongoDB 的支持\"\u003e\u003c/a\u003eSpring 对 MongoDB 的支持\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003eSpring Data MongoDB\u003cul\u003e\n\u003cli\u003eMongoTemplate\u003c/li\u003e\n\u003cli\u003eRepository 支持\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"Spring-Data-MongoDB-的基本用法\"\u003e\u003ca href=\"#Spring-Data-MongoDB-的基本用法\" class=\"headerlink\" title=\"Spring Data MongoDB 的基本用法\"\u003e\u003c/a\u003eSpring Data MongoDB 的基本用法\u003c/h4\u003e\u003cp\u003e注解\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@Document\u003c/li\u003e\n\u003cli\u003e@Id\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMongoTemplate\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003esave / remove\u003c/li\u003e\n\u003cli\u003eCriteria / Query / Update\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"Spring-Data-MongoDB-的-Repository\"\u003e\u003ca href=\"#Spring-Data-MongoDB-的-Repository\" class=\"headerlink\" title=\"Spring Data MongoDB 的 Repository\"\u003e\u003c/a\u003eSpring Data MongoDB 的 Repository\u003c/h4\u003e\u003cp\u003e\u003ccode\u003e@EnableMongoRepositories\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e对应接口\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eMongoRepository\u0026lt;T, ID\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePagingAndSortingRepository\u0026lt;T, ID\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCrudRepository\u0026lt;T, ID\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"26-在-Spring-中访问-Redis\"\u003e\u003ca href=\"#26-在-Spring-中访问-Redis\" class=\"headerlink\" title=\"26 | 在 Spring 中访问 Redis\"\u003e\u003c/a\u003e26 | 在 Spring 中访问 Redis\u003c/h3\u003e\u003ch4 id=\"Spring-对-Redis-的支持\"\u003e\u003ca href=\"#Spring-对-Redis-的支持\" class=\"headerlink\" title=\"Spring 对 Redis 的支持\"\u003e\u003c/a\u003eSpring 对 Redis 的支持\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003eSpring Data Redis\u003cul\u003e\n\u003cli\u003e支持的客户端 Jedis / Lettuce\u003c/li\u003e\n\u003cli\u003eRedisTemplate\u003c/li\u003e\n\u003cli\u003eRepository 支持\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"Jedis-客户端的简单使用\"\u003e\u003ca href=\"#Jedis-客户端的简单使用\" class=\"headerlink\" title=\"Jedis 客户端的简单使用\"\u003e\u003c/a\u003eJedis 客户端的简单使用\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003eJedis 不是线程安全的\u003c/li\u003e\n\u003cli\u003e通过 JedisPool 获得 Jedis 实例\u003c/li\u003e\n\u003cli\u003e直接使用 Jedis 中的方法\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"27-Redis-的哨兵与集群模式\"\u003e\u003ca href=\"#27-Redis-的哨兵与集群模式\" class=\"headerlink\" title=\"27 | Redis 的哨兵与集群模式\"\u003e\u003c/a\u003e27 | Redis 的哨兵与集群模式\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003eJedisSentinelPool\u003c/li\u003e\n\u003cli\u003eJedisCluster\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"28-了解-Spring-的缓存抽象\"\u003e\u003ca href=\"#28-了解-Spring-的缓存抽象\" class=\"headerlink\" title=\"28 | 了解 Spring 的缓存抽象\"\u003e\u003c/a\u003e28 | 了解 Spring 的缓存抽象\u003c/h3\u003e\u003ch4 id=\"Spring-的缓存抽象\"\u003e\u003ca href=\"#Spring-的缓存抽象\" class=\"headerlink\" title=\"Spring 的缓存抽象\"\u003e\u003c/a\u003eSpring 的缓存抽象\u003c/h4\u003e\u003cp\u003e为不同的缓存提供一层抽象\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e为 Java 方法增加缓存，缓存执行结果\u003c/li\u003e\n\u003cli\u003e支持 ConcurrentMap、EhCache、Caffeine、JCache（JSR-107）\u003c/li\u003e\n\u003cli\u003e接口\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.cache.Cache\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.cache.CacheManager\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"基于注解的缓存\"\u003e\u003ca href=\"#基于注解的缓存\" class=\"headerlink\" title=\"基于注解的缓存\"\u003e\u003c/a\u003e基于注解的缓存\u003c/h4\u003e\u003cp\u003e@EnableCaching\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@Cacheable\u003c/li\u003e\n\u003cli\u003e@CacheEvict\u003c/li\u003e\n\u003cli\u003e@CachePut\u003c/li\u003e\n\u003cli\u003e@Caching\u003c/li\u003e\n\u003cli\u003e@CacheConfig\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"29-Redis-在-Spring-中的其他用法\"\u003e\u003ca href=\"#29-Redis-在-Spring-中的其他用法\" class=\"headerlink\" title=\"29 | Redis 在 Spring 中的其他用法\"\u003e\u003c/a\u003e29 | Redis 在 Spring 中的其他用法\u003c/h3\u003e\u003ch4 id=\"与-Redis-建立连接\"\u003e\u003ca href=\"#与-Redis-建立连接\" class=\"headerlink\" title=\"与 Redis 建立连接\"\u003e\u003c/a\u003e与 Redis 建立连接\u003c/h4\u003e\u003cp\u003e配置连接工厂\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLettuceConnectionFactory 与 JedisConnectionFactory\u003cul\u003e\n\u003cli\u003eRedisStandaloneConfiguration\u003c/li\u003e\n\u003cli\u003eRedisSentinelConfiguration\u003c/li\u003e\n\u003cli\u003eRedisClusterConfiguration\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"读写分离\"\u003e\u003ca href=\"#读写分离\" class=\"headerlink\" title=\"读写分离\"\u003e\u003c/a\u003e读写分离\u003c/h4\u003e\u003cp\u003eLettuce 内置支持读写分离\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e只读主、只读从\u003c/li\u003e\n\u003cli\u003e优先读主、优先读从\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLettuceClientConfiguration\u003c/p\u003e\n\u003cp\u003eLettucePoolingClientConfiguration\u003c/p\u003e\n\u003cp\u003eLettuceClientConfigurationBuilderCustomizer\u003c/p\u003e\n\u003ch4 id=\"RedisTemplate\"\u003e\u003ca href=\"#RedisTemplate\" class=\"headerlink\" title=\"RedisTemplate\"\u003e\u003c/a\u003eRedisTemplate\u003c/h4\u003e\u003cp\u003eRedisTemplate\u0026lt;K, V\u0026gt;\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eopsForXxx()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eStringRedisTemplate\u003c/p\u003e\n\u003ch4 id=\"Redis-Repository\"\u003e\u003ca href=\"#Redis-Repository\" class=\"headerlink\" title=\"Redis Repository\"\u003e\u003c/a\u003eRedis Repository\u003c/h4\u003e\u003cp\u003e实体注解\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@RedisHash\u003c/li\u003e\n\u003cli\u003e@Id\u003c/li\u003e\n\u003cli\u003e@Indexed\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"处理不同类型数据源的-Repository\"\u003e\u003ca href=\"#处理不同类型数据源的-Repository\" class=\"headerlink\" title=\"处理不同类型数据源的 Repository\"\u003e\u003c/a\u003e处理不同类型数据源的 Repository\u003c/h4\u003e\u003cp\u003e如何区分这些 Repository\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e根据实体的注解\u003c/li\u003e\n\u003cli\u003e根据继承的接口类型\u003c/li\u003e\n\u003cli\u003e扫描不同的包\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"30-SpringBucks-实战项目进度小结\"\u003e\u003ca href=\"#30-SpringBucks-实战项目进度小结\" class=\"headerlink\" title=\"30 | SpringBucks 实战项目进度小结\"\u003e\u003c/a\u003e30 | SpringBucks 实战项目进度小结\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"第五章：数据访问进阶-8-讲\"\u003e\u003ca href=\"#第五章：数据访问进阶-8-讲\" class=\"headerlink\" title=\"第五章：数据访问进阶 (8 讲)\"\u003e\u003c/a\u003e第五章：数据访问进阶 (8 讲)\u003c/h2\u003e\u003ch3 id=\"31-Project-Reactor-介绍（上）\"\u003e\u003ca href=\"#31-Project-Reactor-介绍（上）\" class=\"headerlink\" title=\"31 | Project Reactor 介绍（上）\"\u003e\u003c/a\u003e31 | Project Reactor 介绍（上）\u003c/h3\u003e\u003ch3 id=\"32-Project-Reactor-介绍（下）\"\u003e\u003ca href=\"#32-Project-Reactor-介绍（下）\" class=\"headerlink\" title=\"32 | Project Reactor 介绍（下）\"\u003e\u003c/a\u003e32 | Project Reactor 介绍（下）\u003c/h3\u003e\u003cp\u003e一些核心的概念\u003c/p\u003e\n\u003cp\u003eOperators - Publisher / Subscriber\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNothing Happens Until You subscribe()\u003c/li\u003e\n\u003cli\u003eFlux [ 0..N ] - onNext()、onComplete()、onError()\u003c/li\u003e\n\u003cli\u003eMono [ 0..1 ] - onNext()、onComplete()、onError()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBackpressure\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSubscription\u003c/li\u003e\n\u003cli\u003eonRequest()、onCancel()、onDispose()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e线程调度 Schedulers\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eimmediate() / single() / newSingle()\u003c/li\u003e\n\u003cli\u003eelastic() / parallel() / newParallel()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e错误处理\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eonError / onErrorReturn / onErrorResume\u003c/li\u003e\n\u003cli\u003edoOnError / doFinally\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"33-通过-Reactive-的方式访问-Redis\"\u003e\u003ca href=\"#33-通过-Reactive-的方式访问-Redis\" class=\"headerlink\" title=\"33 | 通过 Reactive 的方式访问 Redis\"\u003e\u003c/a\u003e33 | 通过 Reactive 的方式访问 Redis\u003c/h3\u003e\u003ch4 id=\"Spring-Data-Redis\"\u003e\u003ca href=\"#Spring-Data-Redis\" class=\"headerlink\" title=\"Spring Data Redis\"\u003e\u003c/a\u003eSpring Data Redis\u003c/h4\u003e\u003cp\u003eLettuce 能够支持 Reactive 方式\u003c/p\u003e\n\u003cp\u003eSpring Data Redis 中主要的支持\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReactiveRedisConnection\u003c/li\u003e\n\u003cli\u003eReactiveRedisConnectionFactory\u003c/li\u003e\n\u003cli\u003eReactiveRedisTemplate\u003c/li\u003e\n\u003cli\u003eopsForXxx()\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"34-通过-Reactive-的方式访问-MongoDB\"\u003e\u003ca href=\"#34-通过-Reactive-的方式访问-MongoDB\" class=\"headerlink\" title=\"34 | 通过 Reactive 的方式访问 MongoDB\"\u003e\u003c/a\u003e34 | 通过 Reactive 的方式访问 MongoDB\u003c/h3\u003e\u003ch4 id=\"Spring-Data-MongoDB\"\u003e\u003ca href=\"#Spring-Data-MongoDB\" class=\"headerlink\" title=\"Spring Data MongoDB\"\u003e\u003c/a\u003eSpring Data MongoDB\u003c/h4\u003e\u003cp\u003eMongoDB 官方提供了支持 Reactive 的驱动\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emongodb-driver-reactivestreams\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSpring Data MongoDB 中主要的支持\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReactiveMongoClientFactoryBean\u003c/li\u003e\n\u003cli\u003eReactiveMongoDatabaseFactory\u003c/li\u003e\n\u003cli\u003eReactiveMongoTemplate\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"35-通过-Reactive-的方式访问-RDBMS\"\u003e\u003ca href=\"#35-通过-Reactive-的方式访问-RDBMS\" class=\"headerlink\" title=\"35 | 通过 Reactive 的方式访问 RDBMS\"\u003e\u003c/a\u003e35 | 通过 Reactive 的方式访问 RDBMS\u003c/h3\u003e\u003ch4 id=\"Spring-Data-R2DBC\"\u003e\u003ca href=\"#Spring-Data-R2DBC\" class=\"headerlink\" title=\"Spring Data R2DBC\"\u003e\u003c/a\u003eSpring Data R2DBC\u003c/h4\u003e\u003cp\u003eR2DBC （\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://spring.io/projects/spring-data-r2dbc%EF%BC%89\"\u003ehttps://spring.io/projects/spring-data-r2dbc）\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReactive Relational Database Connectivity\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e支持的数据库\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePostgres（io.r2dbc:r2dbc-postgresql）\u003c/li\u003e\n\u003cli\u003eH2（io.r2dbc:r2dbc-h2）\u003c/li\u003e\n\u003cli\u003eMicrosoft SQL Server（io.r2dbc:r2dbc-mssql）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e一些主要的类\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eConnectionFactory\u003c/li\u003e\n\u003cli\u003eDatabaseClient\u003cul\u003e\n\u003cli\u003eexecute().sql(SQL)\u003c/li\u003e\n\u003cli\u003einTransaction(db -\u0026gt; {})\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eR2dbcExceptionTranslator\u003cul\u003e\n\u003cli\u003eSqlErrorCodeR2dbcExceptionTranslator\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eR2DBC Repository 支持\u003c/p\u003e\n\u003cp\u003e一些主要的类\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@EnableR2dbcRepositories\u003c/li\u003e\n\u003cli\u003eReactiveCrudRepository\u0026lt;T, ID\u0026gt;\u003c/li\u003e\n\u003cli\u003e@Table / @Id\u003c/li\u003e\n\u003cli\u003e其中的方法返回都是 Mono 或者 Flux\u003c/li\u003e\n\u003cli\u003e自定义查询需要自己写 @Query\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"36-通过-AOP-打印数据访问层的摘要（上）\"\u003e\u003ca href=\"#36-通过-AOP-打印数据访问层的摘要（上）\" class=\"headerlink\" title=\"36 | 通过 AOP 打印数据访问层的摘要（上）\"\u003e\u003c/a\u003e36 | 通过 AOP 打印数据访问层的摘要（上）\u003c/h3\u003e\u003ch3 id=\"37-通过-AOP-打印数据访问层的摘要（下）\"\u003e\u003ca href=\"#37-通过-AOP-打印数据访问层的摘要（下）\" class=\"headerlink\" title=\"37 | 通过 AOP 打印数据访问层的摘要（下）\"\u003e\u003c/a\u003e37 | 通过 AOP 打印数据访问层的摘要（下）\u003c/h3\u003e\u003ch4 id=\"Spring-AOP-的一些核心概念\"\u003e\u003ca href=\"#Spring-AOP-的一些核心概念\" class=\"headerlink\" title=\"Spring AOP 的一些核心概念\"\u003e\u003c/a\u003eSpring AOP 的一些核心概念\u003c/h4\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e概念\u003c/th\u003e\n\u003cth\u003e含义\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003eAspect\u003c/td\u003e\n\u003ctd\u003e切面\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eJoin\u003c/td\u003e\n\u003ctd\u003ePoint 连接点，Spring AOP 里总是代表一次方法执行\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eAdvice\u003c/td\u003e\n\u003ctd\u003e通知，在连接点执行的动作\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePointcut\u003c/td\u003e\n\u003ctd\u003e切入点，说明如何匹配连接点\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIntroduction\u003c/td\u003e\n\u003ctd\u003e引入，为现有类型声明额外的方法和属性\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eTarget\u003c/td\u003e\n\u003ctd\u003eobject 目标对象\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eAOP proxy\u003c/td\u003e\n\u003ctd\u003eAOP 代理对象，可以是 JDK 动态代理，也可以是 CGLIB 代理\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eWeaving\u003c/td\u003e\n\u003ctd\u003e织入，连接切面与目标对象或类型创建代理的过程\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch4 id=\"常用注解\"\u003e\u003ca href=\"#常用注解\" class=\"headerlink\" title=\"常用注解\"\u003e\u003c/a\u003e常用注解\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e@EnableAspectJAutoProxy\u003c/li\u003e\n\u003cli\u003e@Aspect\u003c/li\u003e\n\u003cli\u003e@Pointcut\u003c/li\u003e\n\u003cli\u003e@Before\u003c/li\u003e\n\u003cli\u003e@After / @AfterReturning / @AfterThrowing\u003c/li\u003e\n\u003cli\u003e@Around\u003c/li\u003e\n\u003cli\u003e@Order\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"如何打印-SQL\"\u003e\u003ca href=\"#如何打印-SQL\" class=\"headerlink\" title=\"如何打印 SQL\"\u003e\u003c/a\u003e如何打印 SQL\u003c/h4\u003e\u003cp\u003eHikariCP\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eP6SQL，\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/p6spy/p6spy\"\u003ehttps://github.com/p6spy/p6spy\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAlibaba Druid\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e内置 SQL 输出\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/alibaba/druid/wiki/Druid%E4%B8%AD%E4%BD%BF%E2%BD%A4%E7%94%A8log4j2%E8%BF%9B%E2%BE%8F%E8%A1%8C%EF%A8%88%E2%BD%87%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA\"\u003ehttps://github.com/alibaba/druid/wiki/Druid中使⽤用log4j2进⾏行行⽇日志输出\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"38-SpringBucks-实战项目进度小结\"\u003e\u003ca href=\"#38-SpringBucks-实战项目进度小结\" class=\"headerlink\" title=\"38 | SpringBucks 实战项目进度小结\"\u003e\u003c/a\u003e38 | SpringBucks 实战项目进度小结\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"第六章：Spring-MVC-实践-14-讲\"\u003e\u003ca href=\"#第六章：Spring-MVC-实践-14-讲\" class=\"headerlink\" title=\"第六章：Spring MVC 实践 (14 讲)\"\u003e\u003c/a\u003e第六章：Spring MVC 实践 (14 讲)\u003c/h2\u003e\u003ch3 id=\"39-编写第一个-Spring-MVC-Controller\"\u003e\u003ca href=\"#39-编写第一个-Spring-MVC-Controller\" class=\"headerlink\" title=\"39 | 编写第一个 Spring MVC Controller\"\u003e\u003c/a\u003e39 | 编写第一个 Spring MVC Controller\u003c/h3\u003e\u003ch3 id=\"认识-Spring-MVC\"\u003e\u003ca href=\"#认识-Spring-MVC\" class=\"headerlink\" title=\"认识 Spring MVC\"\u003e\u003c/a\u003e认识 Spring MVC\u003c/h3\u003e\u003cp\u003eDispatcherServlet\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eController\u003c/li\u003e\n\u003cli\u003exxxResolver\u003c/li\u003e\n\u003cli\u003eViewResolver\u003c/li\u003e\n\u003cli\u003eHandlerExceptionResolver\u003c/li\u003e\n\u003cli\u003eMultipartResolver\u003c/li\u003e\n\u003cli\u003eHandlerMapping\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Spring-MVC-中的常⽤用注解\"\u003e\u003ca href=\"#Spring-MVC-中的常⽤用注解\" class=\"headerlink\" title=\"Spring MVC 中的常⽤用注解\"\u003e\u003c/a\u003eSpring MVC 中的常⽤用注解\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e@Controller\u003c/li\u003e\n\u003cli\u003e@RestController\u003c/li\u003e\n\u003cli\u003e@RequestMapping\u003c/li\u003e\n\u003cli\u003e@GetMapping / @PostMapping\u003c/li\u003e\n\u003cli\u003e@PutMapping / @DeleteMapping\u003c/li\u003e\n\u003cli\u003e@RequestBody / @ResponseBody / @ResponseStatus\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"40-理解-Spring-的应用上下文\"\u003e\u003ca href=\"#40-理解-Spring-的应用上下文\" class=\"headerlink\" title=\"40 | 理解 Spring 的应用上下文\"\u003e\u003c/a\u003e40 | 理解 Spring 的应用上下文\u003c/h3\u003e\u003ch3 id=\"Spring-的应用程序上下文\"\u003e\u003ca href=\"#Spring-的应用程序上下文\" class=\"headerlink\" title=\"Spring 的应用程序上下文\"\u003e\u003c/a\u003eSpring 的应用程序上下文\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e关于上下文常用的接口\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBeanFactory\u003c/li\u003e\n\u003cli\u003eDefaultListableBeanFactory\u003c/li\u003e\n\u003cli\u003eApplicationContext\u003c/li\u003e\n\u003cli\u003eClassPathXmlApplicationContext\u003c/li\u003e\n\u003cli\u003eFileSystemXmlApplicationContext\u003c/li\u003e\n\u003cli\u003eAnnotationConfigApplicationContext\u003c/li\u003e\n\u003cli\u003eWebApplicationContext\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"41-理解请求的处理机制\"\u003e\u003ca href=\"#41-理解请求的处理机制\" class=\"headerlink\" title=\"41 | 理解请求的处理机制\"\u003e\u003c/a\u003e41 | 理解请求的处理机制\u003c/h3\u003e\u003cp\u003e一个请求的大致处理流程\u003c/p\u003e\n\u003cp\u003e绑定一些 Attribute\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWebApplicationContext / LocaleResolver / ThemeResolver\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e处理 Multipart\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果是，则将请求转为 MultipartHttpServletRequest\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHandler 处理\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果找到对应 Handler，执行 Controller 及前后置处理器逻辑处理返回的 Model ，呈现视图\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"42-如何定义处理方法（上）\"\u003e\u003ca href=\"#42-如何定义处理方法（上）\" class=\"headerlink\" title=\"42 | 如何定义处理方法（上）\"\u003e\u003c/a\u003e42 | 如何定义处理方法（上）\u003c/h3\u003e\u003ch3 id=\"定义映射关系\"\u003e\u003ca href=\"#定义映射关系\" class=\"headerlink\" title=\"定义映射关系\"\u003e\u003c/a\u003e定义映射关系\u003c/h3\u003e\u003cp\u003e@Controller\u003c/p\u003e\n\u003cp\u003e@RequestMapping\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003epath / method 指定映射路路径与⽅方法\u003c/li\u003e\n\u003cli\u003eparams / headers 限定映射范围\u003c/li\u003e\n\u003cli\u003econsumes / produces 限定请求与响应格式\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e一些快捷方式\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@RestController\u003c/li\u003e\n\u003cli\u003e@GetMapping / @PostMapping / @PutMapping / @DeleteMapping / @PatchMapping\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"定义处理方法\"\u003e\u003ca href=\"#定义处理方法\" class=\"headerlink\" title=\"定义处理方法\"\u003e\u003c/a\u003e定义处理方法\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e@RequestBody / @ResponseBody / @ResponseStatus\u003c/li\u003e\n\u003cli\u003e@PathVariable / @RequestParam / @RequestHeader\u003c/li\u003e\n\u003cli\u003eHttpEntity / ResponseEntity\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"定义类型转换\"\u003e\u003ca href=\"#定义类型转换\" class=\"headerlink\" title=\"定义类型转换\"\u003e\u003c/a\u003e定义类型转换\u003c/h3\u003e\u003cp\u003e自己实现 WebMvcConfigurer\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSpring Boot 在 WebMvcAutoConfiguration 中实现了一个\u003c/li\u003e\n\u003cli\u003e添加自定义的 Converter\u003c/li\u003e\n\u003cli\u003e添加自定义的 Formatter\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"定义校验\"\u003e\u003ca href=\"#定义校验\" class=\"headerlink\" title=\"定义校验\"\u003e\u003c/a\u003e定义校验\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e通过 Validator 对绑定结果进行校验\u003cul\u003e\n\u003cli\u003eHibernate Validator\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e@Valid 注解\u003c/li\u003e\n\u003cli\u003eBindingResult\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Multipart-上传\"\u003e\u003ca href=\"#Multipart-上传\" class=\"headerlink\" title=\"Multipart 上传\"\u003e\u003c/a\u003eMultipart 上传\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e配置 MultipartResolver\u003c/li\u003e\n\u003cli\u003eSpring Boot 自动配置 MultipartAutoConfiguration\u003c/li\u003e\n\u003cli\u003e支持类型 multipart/form-data\u003c/li\u003e\n\u003cli\u003eMultipartFile 类型\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"43-如何定义处理方法（下）\"\u003e\u003ca href=\"#43-如何定义处理方法（下）\" class=\"headerlink\" title=\"43 | 如何定义处理方法（下）\"\u003e\u003c/a\u003e43 | 如何定义处理方法（下）\u003c/h3\u003e\u003ch3 id=\"44-Spring-MVC-中的视图解析机制（上）\"\u003e\u003ca href=\"#44-Spring-MVC-中的视图解析机制（上）\" class=\"headerlink\" title=\"44 | Spring MVC 中的视图解析机制（上）\"\u003e\u003c/a\u003e44 | Spring MVC 中的视图解析机制（上）\u003c/h3\u003e\u003ch3 id=\"45-Spring-MVC-中的视图解析机制（下）\"\u003e\u003ca href=\"#45-Spring-MVC-中的视图解析机制（下）\" class=\"headerlink\" title=\"45 | Spring MVC 中的视图解析机制（下）\"\u003e\u003c/a\u003e45 | Spring MVC 中的视图解析机制（下）\u003c/h3\u003e\u003ch4 id=\"视图解析的实现基础\"\u003e\u003ca href=\"#视图解析的实现基础\" class=\"headerlink\" title=\"视图解析的实现基础\"\u003e\u003c/a\u003e视图解析的实现基础\u003c/h4\u003e\u003cp\u003eViewResolver 与 View 接口\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAbstractCachingViewResolver\u003c/li\u003e\n\u003cli\u003eUrlBasedViewResolver\u003c/li\u003e\n\u003cli\u003eFreeMarkerViewResolver\u003c/li\u003e\n\u003cli\u003eContentNegotiatingViewResolver\u003c/li\u003e\n\u003cli\u003eInternalResourceViewResolver\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"DispatcherServlet-中的视图解析逻辑\"\u003e\u003ca href=\"#DispatcherServlet-中的视图解析逻辑\" class=\"headerlink\" title=\"DispatcherServlet 中的视图解析逻辑\"\u003e\u003c/a\u003eDispatcherServlet 中的视图解析逻辑\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003einitStrategies()\u003cul\u003e\n\u003cli\u003einitViewResolvers() 初始化了了对应 ViewResolver\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003edoDispatch()\u003cul\u003e\n\u003cli\u003eprocessDispatchResult()\u003cul\u003e\n\u003cli\u003e没有返回视图的话，尝试 RequestToViewNameTranslator\u003c/li\u003e\n\u003cli\u003eresolveViewName() 解析 View 对象\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e使用 @ResponseBody 的情况\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在 HandlerAdapter.handle() 的中完成了 Response 输出\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eRequestMappingHandlerAdapter.invokeHandlerMethod()\u003c/code\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eHandlerMethodReturnValueHandlerComposite.handleReturnValue()\u003c/code\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eRequestResponseBodyMethodProcessor.handleReturnValue()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"重定向\"\u003e\u003ca href=\"#重定向\" class=\"headerlink\" title=\"重定向\"\u003e\u003c/a\u003e重定向\u003c/h4\u003e\u003cp\u003e两种不同的重定向前缀\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eredirect:\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eforward:\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"46-Spring-MVC-中的常用视图（上）\"\u003e\u003ca href=\"#46-Spring-MVC-中的常用视图（上）\" class=\"headerlink\" title=\"46 | Spring MVC 中的常用视图（上）\"\u003e\u003c/a\u003e46 | Spring MVC 中的常用视图（上）\u003c/h3\u003e\u003ch4 id=\"Spring-MVC-支持的视图\"\u003e\u003ca href=\"#Spring-MVC-支持的视图\" class=\"headerlink\" title=\"Spring MVC 支持的视图\"\u003e\u003c/a\u003eSpring MVC 支持的视图\u003c/h4\u003e\u003cp\u003e支持的视图列表\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.spring.io/spring/docs/5.1.5.RELEASE/spring-frameworkreference/web.html#mvc-view\"\u003ehttps://docs.spring.io/spring/docs/5.1.5.RELEASE/spring-frameworkreference/web.html#mvc-view\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJackson-based JSON / XML\u003c/li\u003e\n\u003cli\u003eThymeleaf \u0026amp; FreeMarker\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"配置-MessageConverter\"\u003e\u003ca href=\"#配置-MessageConverter\" class=\"headerlink\" title=\"配置 MessageConverter\"\u003e\u003c/a\u003e配置 MessageConverter\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e通过 WebMvcConfigurer 的 configureMessageConverters()\u003c/li\u003e\n\u003cli\u003eSpring Boot 自动查找 HttpMessageConverters 进行注册\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"Spring-Boot-对-Jackson-的支持\"\u003e\u003ca href=\"#Spring-Boot-对-Jackson-的支持\" class=\"headerlink\" title=\"Spring Boot 对 Jackson 的支持\"\u003e\u003c/a\u003eSpring Boot 对 Jackson 的支持\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003eJacksonAutoConfiguration\u003cul\u003e\n\u003cli\u003eSpring Boot 通过 @JsonComponent 注册 JSON 序列化组件\u003c/li\u003e\n\u003cli\u003eJackson2ObjectMapperBuilderCustomizer\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eJacksonHttpMessageConvertersConfiguration\u003cul\u003e\n\u003cli\u003e增加 jackson-dataformat-xml 以支持 XML 序列化\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"47-Spring-MVC-中的常用视图（下）\"\u003e\u003ca href=\"#47-Spring-MVC-中的常用视图（下）\" class=\"headerlink\" title=\"47 | Spring MVC 中的常用视图（下）\"\u003e\u003c/a\u003e47 | Spring MVC 中的常用视图（下）\u003c/h3\u003e\u003ch4 id=\"使用-Thymeleaf\"\u003e\u003ca href=\"#使用-Thymeleaf\" class=\"headerlink\" title=\"使用 Thymeleaf\"\u003e\u003c/a\u003e使用 Thymeleaf\u003c/h4\u003e\u003cp\u003e添加 Thymeleaf 依赖\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eorg.springframework.boot:spring-boot-starter-thymeleaf\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSpring Boot 的自动配置\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eThymeleafAutoConfiguration\u003c/code\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eThymeleafViewResolver\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"Thymeleaf-的一些默认配置\"\u003e\u003ca href=\"#Thymeleaf-的一些默认配置\" class=\"headerlink\" title=\"Thymeleaf 的一些默认配置\"\u003e\u003c/a\u003eThymeleaf 的一些默认配置\u003c/h5\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003espring.thymeleaf.cache=true\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.thymeleaf.check-template=true\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.thymeleaf.check-template-location=true\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.thymeleaf.enabled=true\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.thymeleaf.encoding=UTF-8\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.thymeleaf.mode=HTML\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.thymeleaf.servlet.content-type=text/html\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.thymeleaf.prefix=classpath:/templates/\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.thymeleaf.suffix=.html\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"48-静态资源与缓存\"\u003e\u003ca href=\"#48-静态资源与缓存\" class=\"headerlink\" title=\"48 | 静态资源与缓存\"\u003e\u003c/a\u003e48 | 静态资源与缓存\u003c/h3\u003e\u003ch4 id=\"Spring-Boot-中的静态资源配置\"\u003e\u003ca href=\"#Spring-Boot-中的静态资源配置\" class=\"headerlink\" title=\"Spring Boot 中的静态资源配置\"\u003e\u003c/a\u003eSpring Boot 中的静态资源配置\u003c/h4\u003e\u003cp\u003e核心逻辑\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWebMvcConfigurer.addResourceHandlers()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e常用配置\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003espring.mvc.static-path-pattern=/**\u003c/li\u003e\n\u003cli\u003espring.resources.static-locations=classpath:/META-INF/\u003cbr/\u003eresources/,classpath:/resources/,classpath:/static/,classpath:/public/\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"Spring-Boot-中的缓存配置\"\u003e\u003ca href=\"#Spring-Boot-中的缓存配置\" class=\"headerlink\" title=\"Spring Boot 中的缓存配置\"\u003e\u003c/a\u003eSpring Boot 中的缓存配置\u003c/h4\u003e\u003cp\u003e常用配置（默认时间单位都是秒）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eResourceProperties.Cache\u003c/li\u003e\n\u003cli\u003espring.resources.cache.cachecontrol.max-age=时间\u003c/li\u003e\n\u003cli\u003espring.resources.cache.cachecontrol.no-cache=true/false\u003c/li\u003e\n\u003cli\u003espring.resources.cache.cachecontrol.s-max-age=时间\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"49-Spring-MVC-中的异常处理机制\"\u003e\u003ca href=\"#49-Spring-MVC-中的异常处理机制\" class=\"headerlink\" title=\"49 | Spring MVC 中的异常处理机制\"\u003e\u003c/a\u003e49 | Spring MVC 中的异常处理机制\u003c/h3\u003e\u003ch4 id=\"Spring-MVC-的异常解析\"\u003e\u003ca href=\"#Spring-MVC-的异常解析\" class=\"headerlink\" title=\"Spring MVC 的异常解析\"\u003e\u003c/a\u003eSpring MVC 的异常解析\u003c/h4\u003e\u003cp\u003e核心接口\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHandlerExceptionResolver\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e实现类\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSimpleMappingExceptionResolver\u003c/li\u003e\n\u003cli\u003eDefaultHandlerExceptionResolver\u003c/li\u003e\n\u003cli\u003eResponseStatusExceptionResolver\u003c/li\u003e\n\u003cli\u003eExceptionHandlerExceptionResolver\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"异常处理方法\"\u003e\u003ca href=\"#异常处理方法\" class=\"headerlink\" title=\"异常处理方法\"\u003e\u003c/a\u003e异常处理方法\u003c/h4\u003e\u003cp\u003e处理方法\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@ExceptionHandler\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e添加位置\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@Controller / @RestController\u003c/li\u003e\n\u003cli\u003e@ControllerAdvice / @RestControllerAdvice\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"50-了解-Spring-MVC-的切入点\"\u003e\u003ca href=\"#50-了解-Spring-MVC-的切入点\" class=\"headerlink\" title=\"50 | 了解 Spring MVC 的切入点\"\u003e\u003c/a\u003e50 | 了解 Spring MVC 的切入点\u003c/h3\u003e\u003ch4 id=\"Spring-MVC-的拦截器\"\u003e\u003ca href=\"#Spring-MVC-的拦截器\" class=\"headerlink\" title=\"Spring MVC 的拦截器\"\u003e\u003c/a\u003eSpring MVC 的拦截器\u003c/h4\u003e\u003cp\u003e核心接口\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHandlerInteceptor\u003cul\u003e\n\u003cli\u003eboolean preHandle()\u003c/li\u003e\n\u003cli\u003evoid postHandle()\u003c/li\u003e\n\u003cli\u003evoid afterCompletion()\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e针对 @ResponseBody 和 ResponseEntity 的情况\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eResponseBodyAdvice\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e针对异步请求的接口\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAsyncHandlerInterceptor\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"拦截器的配置方式\"\u003e\u003ca href=\"#拦截器的配置方式\" class=\"headerlink\" title=\"拦截器的配置方式\"\u003e\u003c/a\u003e拦截器的配置方式\u003c/h4\u003e\u003cp\u003e常规方法\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWebMvcConfigurer.addInterceptors()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSpring Boot 中的配置\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e创建一个带 @Configuration 的 WebMvcConfigurer 配置类\u003c/li\u003e\n\u003cli\u003e不能带 @EnableWebMvc（想彻底自己控制 MVC 配置除外）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"51-SpringBucks-实战项目进度小结\"\u003e\u003ca href=\"#51-SpringBucks-实战项目进度小结\" class=\"headerlink\" title=\"51 | SpringBucks 实战项目进度小结\"\u003e\u003c/a\u003e51 | SpringBucks 实战项目进度小结\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch3 id=\"52-课程答疑\"\u003e\u003ca href=\"#52-课程答疑\" class=\"headerlink\" title=\"52 | 课程答疑\"\u003e\u003c/a\u003e52 | 课程答疑\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"第七章：访问-Web-资源-5-讲\"\u003e\u003ca href=\"#第七章：访问-Web-资源-5-讲\" class=\"headerlink\" title=\"第七章：访问 Web 资源 (5 讲)\"\u003e\u003c/a\u003e第七章：访问 Web 资源 (5 讲)\u003c/h2\u003e\u003ch3 id=\"53-通过-RestTemplate-访问-Web-资源\"\u003e\u003ca href=\"#53-通过-RestTemplate-访问-Web-资源\" class=\"headerlink\" title=\"53 | 通过 RestTemplate 访问 Web 资源\"\u003e\u003c/a\u003e53 | 通过 RestTemplate 访问 Web 资源\u003c/h3\u003e\u003ch4 id=\"Spring-Boot-中的-RestTemplate\"\u003e\u003ca href=\"#Spring-Boot-中的-RestTemplate\" class=\"headerlink\" title=\"Spring Boot 中的 RestTemplate\"\u003e\u003c/a\u003eSpring Boot 中的 RestTemplate\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003eSpring Boot 中没有自动配置 RestTemplate\u003c/li\u003e\n\u003cli\u003eSpring Boot 提供了 RestTemplateBuilder\u003c/li\u003e\n\u003cli\u003eRestTemplateBuilder.build()\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"常用方法\"\u003e\u003ca href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"\u003e\u003c/a\u003e常用方法\u003c/h4\u003e\u003cp\u003eGET 请求\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003egetForObject() / getForEntity()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePOST 请求\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003epostForObject() / postForEntity()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePUT 请求\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eput()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eDELETE 请求\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003edelete()\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"构造-URI\"\u003e\u003ca href=\"#构造-URI\" class=\"headerlink\" title=\"构造 URI\"\u003e\u003c/a\u003e构造 URI\u003c/h4\u003e\u003cp\u003e构造 URI\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUriComponentsBuilder\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e构造相对于当前请求的 URI\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eServletUriComponentsBuilder\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e构造指向 Controller 的 URI\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMvcUriComponentsBuilder\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"54-RestTemplate-的高阶用法\"\u003e\u003ca href=\"#54-RestTemplate-的高阶用法\" class=\"headerlink\" title=\"54 | RestTemplate 的高阶用法\"\u003e\u003c/a\u003e54 | RestTemplate 的高阶用法\u003c/h3\u003e\u003cp\u003e传递 HTTP Header\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eRestTemplate.exchange()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRequestEntity\u0026lt;T\u0026gt; / ResponseEntity\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e类型转换\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eJsonSerializer / JsonDeserializer\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@JsonComponent\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e解析泛型对象\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eRestTemplate.exchange()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eParameterizedTypeReference\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"55-简单定制-RestTemplate\"\u003e\u003ca href=\"#55-简单定制-RestTemplate\" class=\"headerlink\" title=\"55 | 简单定制 RestTemplate\"\u003e\u003c/a\u003e55 | 简单定制 RestTemplate\u003c/h3\u003e\u003ch4 id=\"RestTemplate-⽀支持的-HTTP-库\"\u003e\u003ca href=\"#RestTemplate-⽀支持的-HTTP-库\" class=\"headerlink\" title=\"RestTemplate ⽀支持的 HTTP 库\"\u003e\u003c/a\u003eRestTemplate ⽀支持的 HTTP 库\u003c/h4\u003e\u003cp\u003e通用接口\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eClientHttpRequestFactory\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e默认实现\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSimpleClientHttpRequestFactory\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eApache HttpComponents\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHttpComponentsClientHttpRequestFactory\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNetty\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNetty4ClientHttpRequestFactory\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOkHttp\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOkHttp3ClientHttpRequestFactory\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"优化底层请求策略\"\u003e\u003ca href=\"#优化底层请求策略\" class=\"headerlink\" title=\"优化底层请求策略\"\u003e\u003c/a\u003e优化底层请求策略\u003c/h4\u003e\u003cp\u003e连接管理\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePoolingHttpClientConnectionManager\u003c/li\u003e\n\u003cli\u003eKeepAlive 策略\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e超时设置\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003econnectTimeout / readTimeout\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSSL 校验\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e证书检查策略\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"56-通过-WebClient-访问-Web-资源\"\u003e\u003ca href=\"#56-通过-WebClient-访问-Web-资源\" class=\"headerlink\" title=\"56 | 通过 WebClient 访问 Web 资源\"\u003e\u003c/a\u003e56 | 通过 WebClient 访问 Web 资源\u003c/h3\u003e\u003ch4 id=\"了解-WebClient\"\u003e\u003ca href=\"#了解-WebClient\" class=\"headerlink\" title=\"了解 WebClient\"\u003e\u003c/a\u003e了解 WebClient\u003c/h4\u003e\u003cp\u003eWebClient\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一个以 Reactive 方式处理 HTTP 请求的非阻塞式的客户端\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e支持的底层 HTTP 库\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReactor Netty - ReactorClientHttpConnector\u003c/li\u003e\n\u003cli\u003eJetty ReactiveStream HttpClient - JettyClientHttpConnector\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"WebClient-的基本用法\"\u003e\u003ca href=\"#WebClient-的基本用法\" class=\"headerlink\" title=\"WebClient 的基本用法\"\u003e\u003c/a\u003eWebClient 的基本用法\u003c/h4\u003e\u003cp\u003e创建 WebClient\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWebClient.create()\u003c/li\u003e\n\u003cli\u003eWebClient.builder()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e发起请求\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eget() / post() / put() / delete() / patch()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e获得结果\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eretrieve() / exchange()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e处理 HTTP Status\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eonStatus()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e应答正文\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ebodyToMono() / bodyToFlux()\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"57-SpringBucks-实战项目进度小结\"\u003e\u003ca href=\"#57-SpringBucks-实战项目进度小结\" class=\"headerlink\" title=\"57 | SpringBucks 实战项目进度小结\"\u003e\u003c/a\u003e57 | SpringBucks 实战项目进度小结\u003c/h3\u003e\u003ch2 id=\"第八章：-Web-开发进阶-9-讲\"\u003e\u003ca href=\"#第八章：-Web-开发进阶-9-讲\" class=\"headerlink\" title=\"第八章： Web 开发进阶 (9 讲)\"\u003e\u003c/a\u003e第八章： Web 开发进阶 (9 讲)\u003c/h2\u003e\u003ch3 id=\"58-设计好的-RESTful-Web-Service（上）\"\u003e\u003ca href=\"#58-设计好的-RESTful-Web-Service（上）\" class=\"headerlink\" title=\"58 | 设计好的 RESTful Web Service（上）\"\u003e\u003c/a\u003e58 | 设计好的 RESTful Web Service（上）\u003c/h3\u003e\u003ch3 id=\"59-设计好的-RESTful-Web-Service（下）\"\u003e\u003ca href=\"#59-设计好的-RESTful-Web-Service（下）\" class=\"headerlink\" title=\"59 | 设计好的 RESTful Web Service（下）\"\u003e\u003c/a\u003e59 | 设计好的 RESTful Web Service（下）\u003c/h3\u003e\u003cp\u003e如何实现 Restful Web Service\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e识别资源\u003c/li\u003e\n\u003cli\u003e选择合适的资源粒度\u003c/li\u003e\n\u003cli\u003e设计 URI\u003c/li\u003e\n\u003cli\u003e选择合适的 HTTP 方法和返回码\u003c/li\u003e\n\u003cli\u003e设计资源的表述\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e识别资源\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e找到领域名词\u003c/li\u003e\n\u003cli\u003e能用 CRUD 操作的名词\u003c/li\u003e\n\u003cli\u003e将资源组织为集合（即集合资源）\u003c/li\u003e\n\u003cli\u003e将资源合并为复合资源\u003c/li\u003e\n\u003cli\u003e计算或处理函数\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"资源的粒度\"\u003e\u003ca href=\"#资源的粒度\" class=\"headerlink\" title=\"资源的粒度\"\u003e\u003c/a\u003e资源的粒度\u003c/h3\u003e\u003cp\u003e站在客户端的角度，要考虑\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e可缓存性\u003c/li\u003e\n\u003cli\u003e修改频率\u003c/li\u003e\n\u003cli\u003e可变性\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e站在服务端的角度，要考虑\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e网络效率\u003c/li\u003e\n\u003cli\u003e表述的多少\u003c/li\u003e\n\u003cli\u003e客户端的易用程度\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e构建更好的 URI\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用域及子域对资源进行合理的分组或划分\u003c/li\u003e\n\u003cli\u003e在 URI 的路径部分使用斜杠分隔符 ( / ) 来表示资源之间的层次关系\u003c/li\u003e\n\u003cli\u003e在 URI 的路径部分使用逗号 ( , ) 和分号 ( ; ) 来表示非层次元素\u003c/li\u003e\n\u003cli\u003e使用连字符 ( - ) 和下划线 ( _ ) 来改善长路径中名称的可读性\u003c/li\u003e\n\u003cli\u003e在 URI 的查询部分使用“与”符号 ( \u0026amp; ) 来分隔参数\u003c/li\u003e\n\u003cli\u003e在 URI 中避免出现文件扩展名 ( 例例如 .php，.aspx 和 .jsp )\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"60-什么是-HATEOAS\"\u003e\u003ca href=\"#60-什么是-HATEOAS\" class=\"headerlink\" title=\"60 | 什么是 HATEOAS\"\u003e\u003c/a\u003e60 | 什么是 HATEOAS\u003c/h3\u003e\u003ch3 id=\"61-使用-Spring-Data-REST-实现简单的超媒体服务（上）\"\u003e\u003ca href=\"#61-使用-Spring-Data-REST-实现简单的超媒体服务（上）\" class=\"headerlink\" title=\"61 | 使用 Spring Data REST 实现简单的超媒体服务（上）\"\u003e\u003c/a\u003e61 | 使用 Spring Data REST 实现简单的超媒体服务（上）\u003c/h3\u003e\u003ch3 id=\"62-使用-Spring-Data-REST-实现简单的超媒体服务-下\"\u003e\u003ca href=\"#62-使用-Spring-Data-REST-实现简单的超媒体服务-下\" class=\"headerlink\" title=\"62 | 使用 Spring Data REST 实现简单的超媒体服务(下)\"\u003e\u003c/a\u003e62 | 使用 Spring Data REST 实现简单的超媒体服务(下)\u003c/h3\u003e\u003ch4 id=\"认识-HAL\"\u003e\u003ca href=\"#认识-HAL\" class=\"headerlink\" title=\"认识 HAL\"\u003e\u003c/a\u003e认识 HAL\u003c/h4\u003e\u003cp\u003eHAL\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHypertext Application Language\u003c/li\u003e\n\u003cli\u003eHAL 是一种简单的格式，为 API 中的资源提供简单一致的链接\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHAL 模型\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e链接\u003c/li\u003e\n\u003cli\u003e内嵌资源\u003c/li\u003e\n\u003cli\u003e状态\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"Spring-Data-REST\"\u003e\u003ca href=\"#Spring-Data-REST\" class=\"headerlink\" title=\"Spring Data REST\"\u003e\u003c/a\u003eSpring Data REST\u003c/h4\u003e\u003cp\u003eSpring Boot 依赖\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003espring-boot-starter-data-rest\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e常用注解与类\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@RepositoryRestResource\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eResource\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePagedResource\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"如何访问-HATEOAS-服务\"\u003e\u003ca href=\"#如何访问-HATEOAS-服务\" class=\"headerlink\" title=\"如何访问 HATEOAS 服务\"\u003e\u003c/a\u003e如何访问 HATEOAS 服务\u003c/h4\u003e\u003cp\u003e配置 Jackson JSON\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e注册 HAL 支持\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e操作超链接\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e找到需要的 Link\u003c/li\u003e\n\u003cli\u003e访问超链接\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"63-分布式环境中如何解决-Session-的问题\"\u003e\u003ca href=\"#63-分布式环境中如何解决-Session-的问题\" class=\"headerlink\" title=\"63 | 分布式环境中如何解决 Session 的问题\"\u003e\u003c/a\u003e63 | 分布式环境中如何解决 Session 的问题\u003c/h3\u003e\u003ch4 id=\"常见的会话解决方案\"\u003e\u003ca href=\"#常见的会话解决方案\" class=\"headerlink\" title=\"常见的会话解决方案\"\u003e\u003c/a\u003e常见的会话解决方案\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e粘性会话 Sticky Session\u003c/li\u003e\n\u003cli\u003e会话复制 Session Replication\u003c/li\u003e\n\u003cli\u003e集中会话 Centralized Session\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"认识-Spring-Session\"\u003e\u003ca href=\"#认识-Spring-Session\" class=\"headerlink\" title=\"认识 Spring Session\"\u003e\u003c/a\u003e认识 Spring Session\u003c/h4\u003e\u003cp\u003eSpring Session\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e简化集群中的用户会话管理\u003c/li\u003e\n\u003cli\u003e无需绑定容器特定解决方案\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e支持的存储\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRedis\u003c/li\u003e\n\u003cli\u003eMongoDB\u003c/li\u003e\n\u003cli\u003eJDBC\u003c/li\u003e\n\u003cli\u003eHazelcast\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"实现原理\"\u003e\u003ca href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"\u003e\u003c/a\u003e实现原理\u003c/h4\u003e\u003cp\u003e定制 HttpSession\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e通过定制的 HttpServletRequest 返回定制的 HttpSession\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSessionRepositoryRequestWrapper\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSessionRepositoryFilter\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDelegatingFilterProxy\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"基于-Redis-的-HttpSession\"\u003e\u003ca href=\"#基于-Redis-的-HttpSession\" class=\"headerlink\" title=\"基于 Redis 的 HttpSession\"\u003e\u003c/a\u003e基于 Redis 的 HttpSession\u003c/h4\u003e\u003cp\u003e引入依赖\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003espring-session-data-redis\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e基本配置\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@EnableRedisHttpSession\u003c/li\u003e\n\u003cli\u003e提供 RedisConnectionFactory\u003c/li\u003e\n\u003cli\u003e实现 AbstractHttpSessionApplicationInitializer\u003c/li\u003e\n\u003cli\u003e配置 DelegatingFilterProxy\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"64-使用-WebFlux-代替-Spring-MVC（上）\"\u003e\u003ca href=\"#64-使用-WebFlux-代替-Spring-MVC（上）\" class=\"headerlink\" title=\"64 | 使用 WebFlux 代替 Spring MVC（上）\"\u003e\u003c/a\u003e64 | 使用 WebFlux 代替 Spring MVC（上）\u003c/h3\u003e\u003ch3 id=\"65-使用-WebFlux-代替-Spring-MVC（下）\"\u003e\u003ca href=\"#65-使用-WebFlux-代替-Spring-MVC（下）\" class=\"headerlink\" title=\"65 | 使用 WebFlux 代替 Spring MVC（下）\"\u003e\u003c/a\u003e65 | 使用 WebFlux 代替 Spring MVC（下）\u003c/h3\u003e\u003ch4 id=\"认识-WebFlux\"\u003e\u003ca href=\"#认识-WebFlux\" class=\"headerlink\" title=\"认识 WebFlux\"\u003e\u003c/a\u003e认识 WebFlux\u003c/h4\u003e\u003cp\u003e什么是 WebFlux\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e用于构建基于 Reactive 技术栈之上的 Web 应用程序\u003c/li\u003e\n\u003cli\u003e基于 Reactive Streams API ，运行在非阻塞服务器上\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e为什么会有 WebFlux\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e对于非阻塞 Web 应用的需要\u003c/li\u003e\n\u003cli\u003e函数式编程\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e关于 WebFlux 的性能\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e请求的耗时并不会有很大的改善\u003c/li\u003e\n\u003cli\u003e仅需少量固定数量的线程和较少的内存即可实现扩展\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"WebMVC-v-s-WebFlux\"\u003e\u003ca href=\"#WebMVC-v-s-WebFlux\" class=\"headerlink\" title=\"WebMVC v.s. WebFlux\"\u003e\u003c/a\u003eWebMVC v.s. WebFlux\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e已有 Spring MVC 应⽤用，运行正常，就别改了\u003c/li\u003e\n\u003cli\u003e依赖了大量阻塞式持久化 API 和网络 API，建议使用 Spring MVC\u003c/li\u003e\n\u003cli\u003e已经使用了非阻塞技术栈，可以考虑使用 WebFlux\u003c/li\u003e\n\u003cli\u003e想要使用 Java 8 Lambda 结合轻量级函数式框架，可以考虑 WebFlux\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"WebFlux-中的编程模型\"\u003e\u003ca href=\"#WebFlux-中的编程模型\" class=\"headerlink\" title=\"WebFlux 中的编程模型\"\u003e\u003c/a\u003eWebFlux 中的编程模型\u003c/h4\u003e\u003cp\u003e两种编程模型\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e基于注解的控制器\u003c/li\u003e\n\u003cli\u003e函数式 Endpoints\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"基于注解的控制器\"\u003e\u003ca href=\"#基于注解的控制器\" class=\"headerlink\" title=\"基于注解的控制器\"\u003e\u003c/a\u003e基于注解的控制器\u003c/h4\u003e\u003cp\u003e常用注解\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@Controller\u003c/li\u003e\n\u003cli\u003e@RequestMapping 及其等价注解\u003c/li\u003e\n\u003cli\u003e@RequestBody / @ResponseBody\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e返回值\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eMono\u0026lt;T\u0026gt; / Flux\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"66-SpringBucks-实战项目进度小结\"\u003e\u003ca href=\"#66-SpringBucks-实战项目进度小结\" class=\"headerlink\" title=\"66 | SpringBucks 实战项目进度小结\"\u003e\u003c/a\u003e66 | SpringBucks 实战项目进度小结\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"第九章：重新认识-Spring-Boot-8-讲\"\u003e\u003ca href=\"#第九章：重新认识-Spring-Boot-8-讲\" class=\"headerlink\" title=\"第九章：重新认识 Spring Boot (8 讲)\"\u003e\u003c/a\u003e第九章：重新认识 Spring Boot (8 讲)\u003c/h2\u003e\u003ch3 id=\"67-认识-Spring-Boot-的组成部分\"\u003e\u003ca href=\"#67-认识-Spring-Boot-的组成部分\" class=\"headerlink\" title=\"67 | 认识 Spring Boot 的组成部分\"\u003e\u003c/a\u003e67 | 认识 Spring Boot 的组成部分\u003c/h3\u003e\u003ch3 id=\"Spring-Boot-的特性\"\u003e\u003ca href=\"#Spring-Boot-的特性\" class=\"headerlink\" title=\"Spring Boot 的特性\"\u003e\u003c/a\u003eSpring Boot 的特性\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e方便地创建可独立运行的 Spring 应用程序\u003c/li\u003e\n\u003cli\u003e直接内嵌 Tomcat、Jetty 或 Undertow\u003c/li\u003e\n\u003cli\u003e简化了项目的构建配置\u003c/li\u003e\n\u003cli\u003e为 Spring 及第三方库提供自动配置\u003c/li\u003e\n\u003cli\u003e提供生产级特性\u003c/li\u003e\n\u003cli\u003e无需生成代码或进行 XML 配置\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Spring-Boot-的四大核心\"\u003e\u003ca href=\"#Spring-Boot-的四大核心\" class=\"headerlink\" title=\"Spring Boot 的四大核心\"\u003e\u003c/a\u003eSpring Boot 的四大核心\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e自动配置 - Auto Configuration\u003c/li\u003e\n\u003cli\u003e起步依赖 - Starter Dependency\u003c/li\u003e\n\u003cli\u003e命令行界面 - Spring Boot CLI\u003c/li\u003e\n\u003cli\u003eActuator\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"68-了解自动配置的实现原理\"\u003e\u003ca href=\"#68-了解自动配置的实现原理\" class=\"headerlink\" title=\"68 | 了解自动配置的实现原理\"\u003e\u003c/a\u003e68 | 了解自动配置的实现原理\u003c/h3\u003e\u003ch3 id=\"了解自动配置\"\u003e\u003ca href=\"#了解自动配置\" class=\"headerlink\" title=\"了解自动配置\"\u003e\u003c/a\u003e了解自动配置\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e自动配置\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e基于添加的 JAR 依赖自动对 Spring Boot 应⽤用程序进行配置\u003c/li\u003e\n\u003cli\u003espring-boot-autoconfiguration\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e开启自动配置\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@EnableAutoConfiguration\u003c/code\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eexclude = Class\u0026lt;?\u0026gt;[]\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@SpringBootApplication\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"自动配置的实现原理\"\u003e\u003ca href=\"#自动配置的实现原理\" class=\"headerlink\" title=\"自动配置的实现原理\"\u003e\u003c/a\u003e自动配置的实现原理\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003e@EnableAutoConfiguration\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eAutoConfigurationImportSelector\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMETA-INF/spring.factories\u003c/code\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.boot.autoconfigure.EnableAutoConfiguration\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e条件注解\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@Conditional\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@ConditionalOnClass\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@ConditionalOnBean\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@ConditionalOnMissingBean\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@ConditionalOnProperty\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e……\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"了解自动配置的情况\"\u003e\u003ca href=\"#了解自动配置的情况\" class=\"headerlink\" title=\"了解自动配置的情况\"\u003e\u003c/a\u003e了解自动配置的情况\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e观察自动配置的判断结果\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e–debug\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eConditionEvaluationReportLoggingListener\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePositive matches\u003c/li\u003e\n\u003cli\u003eNegative matches\u003c/li\u003e\n\u003cli\u003eExclusions\u003c/li\u003e\n\u003cli\u003eUnconditional classes\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"69-动手实现自己的自动配置\"\u003e\u003ca href=\"#69-动手实现自己的自动配置\" class=\"headerlink\" title=\"69 | 动手实现自己的自动配置\"\u003e\u003c/a\u003e69 | 动手实现自己的自动配置\u003c/h3\u003e\u003ch3 id=\"主要工作内容\"\u003e\u003ca href=\"#主要工作内容\" class=\"headerlink\" title=\"主要工作内容\"\u003e\u003c/a\u003e主要工作内容\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e编写 Java Config\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@Configuration\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e添加条件\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@Conditional\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e定位自动配置\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eMETA-INF/spring.factories\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"条件注解\"\u003e\u003ca href=\"#条件注解\" class=\"headerlink\" title=\"条件注解\"\u003e\u003c/a\u003e条件注解\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e条件注解\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@Conditional\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e类条件\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@ConditionalOnClass\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@ConditionalOnMissingClass\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e属性条件\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@ConditionalOnProperty\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eBean 条件\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@ConditionalOnBean\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@ConditionalOnMissingBean\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e**@ConditionalOnSingleCandidate\u003c/code\u003e**\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e资源条件\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@ConditionalOnResource\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eWeb 应用条件\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@ConditionalOnWebApplication\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@ConditionalOnNotWebApplication\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e其他条件\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@ConditionalOnExpression\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@ConditionalOnJava\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@ConditionalOnJndi\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"自动配置的执行顺序\"\u003e\u003ca href=\"#自动配置的执行顺序\" class=\"headerlink\" title=\"自动配置的执行顺序\"\u003e\u003c/a\u003e自动配置的执行顺序\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e执行顺序\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@AutoConfigureBefore\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@AutoConfigureAfter\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@AutoConfigureOrder\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"70-如何在低版本-Spring-中快速实现类似自动配置的功能\"\u003e\u003ca href=\"#70-如何在低版本-Spring-中快速实现类似自动配置的功能\" class=\"headerlink\" title=\"70 | 如何在低版本 Spring 中快速实现类似自动配置的功能\"\u003e\u003c/a\u003e70 | 如何在低版本 Spring 中快速实现类似自动配置的功能\u003c/h3\u003e\u003ch3 id=\"需求与问题\"\u003e\u003ca href=\"#需求与问题\" class=\"headerlink\" title=\"需求与问题\"\u003e\u003c/a\u003e需求与问题\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e核心的诉求\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e现存系统，不打算重构\u003c/li\u003e\n\u003cli\u003eSpring 版本 3.x，不打算升级版本和引入 Spring Boot\u003c/li\u003e\n\u003cli\u003e期望能够在少改代码的前提下实现一些功能增强\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e面临的问题\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e3.x 的 Spring 没有条件注解\u003c/li\u003e\n\u003cli\u003e无法自动定位需要加载的自动配置\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"核心解决思路\"\u003e\u003ca href=\"#核心解决思路\" class=\"headerlink\" title=\"核心解决思路\"\u003e\u003c/a\u003e核心解决思路\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e条件判断\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e通过 \u003ccode\u003eBeanFactoryPostProcessor\u003c/code\u003e 进行判断\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e配置加载\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e编写 Java Config 类\u003c/li\u003e\n\u003cli\u003e引入配置类\u003c/li\u003e\n\u003cli\u003e通过 component-scan\u003c/li\u003e\n\u003cli\u003e通过 xml 文件 import\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Spring-的扩展点\"\u003e\u003ca href=\"#Spring-的扩展点\" class=\"headerlink\" title=\"Spring 的扩展点\"\u003e\u003c/a\u003eSpring 的扩展点\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eBeanPostProcessor\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e针对 Bean 实例\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e在 Bean 创建后提供定制逻辑回调\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eBeanFactoryPostProcessor\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e针对 Bean 定义\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e在容器创建 Bean 前获取配置元数据\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eJava Config 中需要定义为 static 方法\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"关于-Bean-的一些定制\"\u003e\u003ca href=\"#关于-Bean-的一些定制\" class=\"headerlink\" title=\"关于 Bean 的一些定制\"\u003e\u003c/a\u003e关于 Bean 的一些定制\u003c/h3\u003e\u003ch4 id=\"生命周期回调\"\u003e\u003ca href=\"#生命周期回调\" class=\"headerlink\" title=\"生命周期回调\"\u003e\u003c/a\u003e生命周期回调\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003eInitializingBean / @PostConstruct / init-method\u003c/li\u003e\n\u003cli\u003eDisposableBean / @PostDestory / destroy-method\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"XXXAware\"\u003e\u003ca href=\"#XXXAware\" class=\"headerlink\" title=\"XXXAware\"\u003e\u003c/a\u003eXXXAware\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eApplicationContextAware\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eBeanFactoryAware\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eBeanNameAware\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"一些常用操作\"\u003e\u003ca href=\"#一些常用操作\" class=\"headerlink\" title=\"一些常用操作\"\u003e\u003c/a\u003e一些常用操作\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e判断类是否存在\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eClassUtils.isPresent()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e判断 Bean 是否已定义\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eListableBeanFactory.containsBeanDefinition()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eListableBeanFactory.getBeanNamesForType()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e注册 Bean 定义\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eBeanDefinitionRegistry.registerBeanDefinition()\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eGenericBeanDefinition\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eBeanFactory.registerSingleton()\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"71-了解起步依赖及其实现原理\"\u003e\u003ca href=\"#71-了解起步依赖及其实现原理\" class=\"headerlink\" title=\"71 | 了解起步依赖及其实现原理\"\u003e\u003c/a\u003e71 | 了解起步依赖及其实现原理\u003c/h3\u003e\u003ch3 id=\"Maven-依赖管理技巧\"\u003e\u003ca href=\"#Maven-依赖管理技巧\" class=\"headerlink\" title=\"Maven 依赖管理技巧\"\u003e\u003c/a\u003eMaven 依赖管理技巧\u003c/h3\u003e\u003cp\u003e了解你的依赖\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emvn dependency:tree\u003c/li\u003e\n\u003cli\u003eIDEA Maven Helper 插件\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e排除特定依赖\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eexclusion\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e统一管理依赖\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003edependencyManagement\u003c/li\u003e\n\u003cli\u003eBill of Materials - bom\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Spring-Boot-的-starter-依赖\"\u003e\u003ca href=\"#Spring-Boot-的-starter-依赖\" class=\"headerlink\" title=\"Spring Boot 的 starter 依赖\"\u003e\u003c/a\u003eSpring Boot 的 starter 依赖\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eStarter Dependencies\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e直接面向功能\u003c/li\u003e\n\u003cli\u003e一站获得所有相关依赖，不再复制粘贴\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e官方的 Starters\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003espring-boot-starter-*\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"72-定制自己的起步依赖\"\u003e\u003ca href=\"#72-定制自己的起步依赖\" class=\"headerlink\" title=\"72 | 定制自己的起步依赖\"\u003e\u003c/a\u003e72 | 定制自己的起步依赖\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e主要内容\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eautoconfigure 模块，包含自动配置代码\u003c/li\u003e\n\u003cli\u003estarter 模块，包含指向自动配置模块的依赖及其他相关依赖\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e命名方式\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003exxx-spring-boot-autoconfigure\u003c/li\u003e\n\u003cli\u003exxx-spring-boot-starter\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e注意事项\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e不要使用 spring-boot 作为依赖的前缀\u003c/li\u003e\n\u003cli\u003e不要使用 spring-boot 的配置命名空间\u003c/li\u003e\n\u003cli\u003estarter 中仅添加必要的依赖\u003c/li\u003e\n\u003cli\u003e声明对 spring-boot-starter 的依赖\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"73-深挖-Spring-Boot-的配置加载机制\"\u003e\u003ca href=\"#73-深挖-Spring-Boot-的配置加载机制\" class=\"headerlink\" title=\"73 | 深挖 Spring Boot 的配置加载机制\"\u003e\u003c/a\u003e73 | 深挖 Spring Boot 的配置加载机制\u003c/h3\u003e\u003ch3 id=\"外化配置加载顺序\"\u003e\u003ca href=\"#外化配置加载顺序\" class=\"headerlink\" title=\"外化配置加载顺序\"\u003e\u003c/a\u003e外化配置加载顺序\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e开启 DevTools 时，\u003ccode\u003e~/.spring-boot-devtools.properties\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e测试类上的 \u003ccode\u003e@TestPropertySource\u003c/code\u003e 注解\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@SpringBootTest#properties\u003c/code\u003e 属性\u003c/li\u003e\n\u003cli\u003e命令行参数（ \u003ccode\u003e--server.port=9000\u003c/code\u003e ）\u003c/li\u003e\n\u003cli\u003eSPRING_APPLICATION_JSON 中的属性\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eServletConfig\u003c/code\u003e 初始化参数\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eServletContext\u003c/code\u003e 初始化参数\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ejava:comp/env\u003c/code\u003e 中的 JNDI 属性\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSystem.getProperties()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e操作系统环境变量\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erandom.*\u003c/code\u003e 涉及到的 \u003ccode\u003eRandomValuePropertySource\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ejar 包外部的 application-{profile}.properties 或 .yml\u003c/li\u003e\n\u003cli\u003ejar 包内部的 application-{profile}.properties 或 .yml\u003c/li\u003e\n\u003cli\u003ejar 包外部的 application.properties 或 .yml\u003c/li\u003e\n\u003cli\u003ejar 包内部的 application.properties 或 .yml\u003c/li\u003e\n\u003cli\u003e@Configuration 类上的 @PropertySource\u003c/li\u003e\n\u003cli\u003eSpringApplication.setDefaultProperties() 设置的默认属性\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"application-properties\"\u003e\u003ca href=\"#application-properties\" class=\"headerlink\" title=\"application.properties\"\u003e\u003c/a\u003eapplication.properties\u003c/h3\u003e\u003cp\u003e默认位置\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e./config\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e./\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eCLASSPATH 中的 \u003ccode\u003e/config\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eCLASSPATH 中的 \u003ccode\u003e/\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e修改名字或路路径\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003espring.config.name\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.config.location\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.config.additional-location\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Relaxed-Binding\"\u003e\u003ca href=\"#Relaxed-Binding\" class=\"headerlink\" title=\"Relaxed Binding\"\u003e\u003c/a\u003eRelaxed Binding\u003c/h3\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e命名风格\u003c/th\u003e\n\u003cth\u003e使用范围\u003c/th\u003e\n\u003cth\u003e示例\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e短划线分隔\u003c/td\u003e\n\u003ctd\u003eProperties 文件\u003cbr/\u003eYAML 文件\u003cbr/\u003e系统属性\u003c/td\u003e\n\u003ctd\u003egeektime.spring-boot.first-demo\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e驼峰式\u003c/td\u003e\n\u003ctd\u003eProperties 文件\u003cbr/\u003eYAML 文件\u003cbr/\u003e系统属性\u003c/td\u003e\n\u003ctd\u003egeektime.springBoot.firstDemo\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e下划线分割\u003c/td\u003e\n\u003ctd\u003eProperties 文件\u003cbr/\u003eYAML 文件\u003cbr/\u003e系统属性\u003c/td\u003e\n\u003ctd\u003egeektime.spring_boot.first_demo\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e全⼤大写，下划线分隔\u003c/td\u003e\n\u003ctd\u003e环境变量\u003c/td\u003e\n\u003ctd\u003eGEEKTIME_SPRINGBOOT_FIRSTDEMO\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"74-理解配置背后的-PropertySource-抽象\"\u003e\u003ca href=\"#74-理解配置背后的-PropertySource-抽象\" class=\"headerlink\" title=\"74 | 理解配置背后的 PropertySource 抽象\"\u003e\u003c/a\u003e74 | 理解配置背后的 PropertySource 抽象\u003c/h3\u003e\u003ch3 id=\"添加-PropertySource\"\u003e\u003ca href=\"#添加-PropertySource\" class=\"headerlink\" title=\"添加 PropertySource\"\u003e\u003c/a\u003e添加 PropertySource\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;context:property-placeholder\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePropertySourcesPlaceholderConfigurer\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePropertyPlaceholderConfigurer\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@PropertySource\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@PropertySources\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Spring-Boot-中的-ConfigurationProperties\"\u003e\u003ca href=\"#Spring-Boot-中的-ConfigurationProperties\" class=\"headerlink\" title=\"Spring Boot 中的 @ConfigurationProperties\"\u003e\u003c/a\u003eSpring Boot 中的 @ConfigurationProperties\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e可以将属性绑定到结构化对象上\u003c/li\u003e\n\u003cli\u003e支持 Relaxed Binding\u003c/li\u003e\n\u003cli\u003e支持安全的类型转换\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@EnableConfigurationProperties\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"定制-PropertySource\"\u003e\u003ca href=\"#定制-PropertySource\" class=\"headerlink\" title=\"定制 PropertySource\"\u003e\u003c/a\u003e定制 PropertySource\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e主要步骤\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e实现 \u003ccode\u003ePropertySource\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e从 \u003ccode\u003eEnvironment\u003c/code\u003e 取得 \u003ccode\u003ePropertySources\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e将自己的 \u003ccode\u003ePropertySource\u003c/code\u003e 添加到合适的位置\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e切入位置\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eEnvironmentPostProcessor\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eBeanFactoryPostProcessor\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"第十章：运行中的-Spring-Boot-11-讲\"\u003e\u003ca href=\"#第十章：运行中的-Spring-Boot-11-讲\" class=\"headerlink\" title=\"第十章：运行中的 Spring Boot (11 讲)\"\u003e\u003c/a\u003e第十章：运行中的 Spring Boot (11 讲)\u003c/h2\u003e\u003ch3 id=\"75-认识-Spring-Boot-的各类-Actuator-Endpoint\"\u003e\u003ca href=\"#75-认识-Spring-Boot-的各类-Actuator-Endpoint\" class=\"headerlink\" title=\"75 | 认识 Spring Boot 的各类 Actuator Endpoint\"\u003e\u003c/a\u003e75 | 认识 Spring Boot 的各类 Actuator Endpoint\u003c/h3\u003e\u003ch3 id=\"Actuator\"\u003e\u003ca href=\"#Actuator\" class=\"headerlink\" title=\"Actuator\"\u003e\u003c/a\u003eActuator\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e目的\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e监控并管理应用程序\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e访问方式\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHTTP\u003c/li\u003e\n\u003cli\u003eJMX\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e依赖\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003espring-boot-starter-actuator\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"一些常用-Endpoint\"\u003e\u003ca href=\"#一些常用-Endpoint\" class=\"headerlink\" title=\"一些常用 Endpoint\"\u003e\u003c/a\u003e一些常用 Endpoint\u003c/h3\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003cth\u003e默认开启\u003c/th\u003e\n\u003cth\u003e默认 HTTP\u003c/th\u003e\n\u003cth\u003e默认 JMX\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003ebeans\u003c/td\u003e\n\u003ctd\u003e显示容器中的 Bean 列表\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003ctd\u003eN\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ecaches\u003c/td\u003e\n\u003ctd\u003e显示应用中的缓存\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003ctd\u003eN\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003econditions\u003c/td\u003e\n\u003ctd\u003e显示配置条件的计算情况\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003ctd\u003eN\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003econfigprops\u003c/td\u003e\n\u003ctd\u003e显示 @ConfigurationProperties 的信息\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003ctd\u003eN\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eenv\u003c/td\u003e\n\u003ctd\u003e显示 ConfigurableEnvironment 中的属性\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003ctd\u003eN\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ehealth\u003c/td\u003e\n\u003ctd\u003e显示健康检查信息\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ehttptrace\u003c/td\u003e\n\u003ctd\u003e显示 HTTP Trace 信息\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003ctd\u003eN\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003einfo\u003c/td\u003e\n\u003ctd\u003e显示设置好的应用信息\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eloggers\u003c/td\u003e\n\u003ctd\u003e显示并更新日志配置\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003ctd\u003eN\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003emetrics\u003c/td\u003e\n\u003ctd\u003e显示应用的度量信息\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003ctd\u003eN\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003emappings\u003c/td\u003e\n\u003ctd\u003e显示所有的 @RequestMapping 信息\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003ctd\u003eN\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003escheduledtasks\u003c/td\u003e\n\u003ctd\u003e显示应用的调度任务信息\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003ctd\u003eN\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eshutdown\u003c/td\u003e\n\u003ctd\u003e优雅地关闭应用程序\u003c/td\u003e\n\u003ctd\u003eN\u003c/td\u003e\n\u003ctd\u003eN\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ethreaddump\u003c/td\u003e\n\u003ctd\u003e执行 Thread Dump\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003ctd\u003eN\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eheapdump\u003c/td\u003e\n\u003ctd\u003e返回 Heap Dump 文件，格式为 HPROF\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003ctd\u003eN\u003c/td\u003e\n\u003ctd\u003eN/A\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eprometheus\u003c/td\u003e\n\u003ctd\u003e返回可供 Prometheus 抓取的信息\u003c/td\u003e\n\u003ctd\u003eY\u003c/td\u003e\n\u003ctd\u003eN\u003c/td\u003e\n\u003ctd\u003eN/A\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"如何访问-Actuator-Endpoint\"\u003e\u003ca href=\"#如何访问-Actuator-Endpoint\" class=\"headerlink\" title=\"如何访问 Actuator Endpoint\"\u003e\u003c/a\u003e如何访问 Actuator Endpoint\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eHTTP 访问\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e/actuator/\u0026lt;id\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e端口与路径\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emanagement.server.address=\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emanagement.server.port=\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emanagement.endpoints.web.base-path=/actuator\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emanagement.endpoints.web.path-mapping.\u0026lt;id\u0026gt;=路径\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e开启 Endpoint\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emanagement.endpoint.\u0026lt;id\u0026gt;.enabled=true\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emanagement.endpoints.enabled-by-default=false\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e暴露 Endpoint\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emanagement.endpoints.jmx.exposure.exclude=\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emanagement.endpoints.jmx.exposure.include=*\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emanagement.endpoints.web.exposure.exclude=\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emanagement.endpoints.web.exposure.include=info, health\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"76-动手定制自己的-Health-Indicator\"\u003e\u003ca href=\"#76-动手定制自己的-Health-Indicator\" class=\"headerlink\" title=\"76 | 动手定制自己的 Health Indicator\"\u003e\u003c/a\u003e76 | 动手定制自己的 Health Indicator\u003c/h3\u003e\u003ch3 id=\"Spring-Boot-自带的-Health-Indicator\"\u003e\u003ca href=\"#Spring-Boot-自带的-Health-Indicator\" class=\"headerlink\" title=\"Spring Boot 自带的 Health Indicator\"\u003e\u003c/a\u003eSpring Boot 自带的 Health Indicator\u003c/h3\u003e\u003cp\u003e目的\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e检查应用程序的运行状态\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e状态\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDOWN - 503\u003c/li\u003e\n\u003cli\u003eOUT_OF_SERVICE - 503\u003c/li\u003e\n\u003cli\u003eUP - 200\u003c/li\u003e\n\u003cli\u003eUNKNOWN - 200\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e机制\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e通过 \u003ccode\u003eHealthIndicatorRegistry\u003c/code\u003e 收集信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eHealthIndicator\u003c/code\u003e 实现具体检查逻辑\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e配置项\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emanagement.health.defaults.enabled=true|false\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emanagement.health.\u0026lt;id\u0026gt;.enabled=true\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emanagement.endpoint.health.show-details=never|whenauthorized|always\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e内置 HealthIndicator 清单\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eCassandraHealthIndicator\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eElasticsearchHealthIndicator\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eMongoHealthIndicator\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eSolrHealthIndicator\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eCouchbaseHealthIndicator\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eInfluxDbHealthIndicator\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eNeo4jHealthIndicator\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eDiskSpaceHealthIndicator\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eJmsHealthIndicator\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eRabbitHealthIndicator\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eDataSourceHealthIndicator\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eMailHealthIndicator\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eRedisHealthIndicator\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"自定义-Health-Indicator\"\u003e\u003ca href=\"#自定义-Health-Indicator\" class=\"headerlink\" title=\"自定义 Health Indicator\"\u003e\u003c/a\u003e自定义 Health Indicator\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e方法\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e实现 HealthIndicator 接口\u003c/li\u003e\n\u003cli\u003e根据自定义检查逻辑返回对应 Health 状态\u003c/li\u003e\n\u003cli\u003eHealth 中包含状态和详细描述信息\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"77-通过-Micrometer-获取运行数据\"\u003e\u003ca href=\"#77-通过-Micrometer-获取运行数据\" class=\"headerlink\" title=\"77 | 通过 Micrometer 获取运行数据\"\u003e\u003c/a\u003e77 | 通过 Micrometer 获取运行数据\u003c/h3\u003e\u003ch3 id=\"认识-Micrometer\"\u003e\u003ca href=\"#认识-Micrometer\" class=\"headerlink\" title=\"认识 Micrometer\"\u003e\u003c/a\u003e认识 Micrometer\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e特性\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e多维度度量量\u003c/li\u003e\n\u003cli\u003e支持 Tag\u003c/li\u003e\n\u003cli\u003e预置大量探针\u003c/li\u003e\n\u003cli\u003e缓存、类加载器器、GC、CPU 利利⽤用率、线程池……\u003c/li\u003e\n\u003cli\u003e与 Spring 深度整合\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e支持多种监控系统\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eDimensional\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAppOptics, Atlas, Azure Monitor, Cloudwatch, Datadog, Datadog StatsD, Dynatrace, Elastic, Humio, Influx, KairosDB, New Relic, Prometheus, SignalFx, Sysdig StatsD, Telegraf\u003cbr/\u003eStatsD, Wavefront\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eHierarchical\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGraphite, Ganglia, JMX, Etsy StatsD\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"一些核心度量指标\"\u003e\u003ca href=\"#一些核心度量指标\" class=\"headerlink\" title=\"一些核心度量指标\"\u003e\u003c/a\u003e一些核心度量指标\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e核心接口\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMeter\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e内置实现\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGauge, TimeGauge\u003c/li\u003e\n\u003cli\u003eTimer, LongTaskTimer, FunctionTimer\u003c/li\u003e\n\u003cli\u003eCounter, FunctionCounter\u003c/li\u003e\n\u003cli\u003eDistributionSummary\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Micrometer-in-Spring-Boot-2-x\"\u003e\u003ca href=\"#Micrometer-in-Spring-Boot-2-x\" class=\"headerlink\" title=\"Micrometer in Spring Boot 2.x\"\u003e\u003c/a\u003eMicrometer in Spring Boot 2.x\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e一些 URL\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e/actuator/metrics\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e/actuator/prometheus\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e一些配置项\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emanagement.metrics.export.*\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emanagement.metrics.tags.*\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emanagement.metrics.enable.*\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emanagement.metrics.distribution.*\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emanagement.metrics.web.server.auto-time-requests\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e核心度量项\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJVM、CPU、文件句柄数、日志、启动时间\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e其他度量项\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSpring MVC、Spring WebFlux\u003c/li\u003e\n\u003cli\u003eTomcat、Jersey JAX-RS\u003c/li\u003e\n\u003cli\u003eRestTemplate、WebClient\u003c/li\u003e\n\u003cli\u003e缓存、数据源、Hibernate\u003c/li\u003e\n\u003cli\u003eKafka、RabbitMQ\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e自定义度量指标\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e通过 MeterRegistry 注册 Meter\u003c/li\u003e\n\u003cli\u003e提供 MeterBinder Bean 让 Spring Boot ⾃自动绑定\u003c/li\u003e\n\u003cli\u003e通过 MeterFilter 进⾏行行定制\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"78-通过-Spring-Boot-Admin-了解程序的运行状态\"\u003e\u003ca href=\"#78-通过-Spring-Boot-Admin-了解程序的运行状态\" class=\"headerlink\" title=\"78 | 通过 Spring Boot Admin 了解程序的运行状态\"\u003e\u003c/a\u003e78 | 通过 Spring Boot Admin 了解程序的运行状态\u003c/h3\u003e\u003ch3 id=\"Spring-Boot-Admin\"\u003e\u003ca href=\"#Spring-Boot-Admin\" class=\"headerlink\" title=\"Spring Boot Admin\"\u003e\u003c/a\u003eSpring Boot Admin\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e目的\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e为 Spring Boot 应用程序提供一套管理界面\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e主要功能\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e集中展示应用程序 Actuator 相关的内容\u003c/li\u003e\n\u003cli\u003e变更通知\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"快速上手\"\u003e\u003ca href=\"#快速上手\" class=\"headerlink\" title=\"快速上手\"\u003e\u003c/a\u003e快速上手\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e服务端\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ede.codecentric:spring-boot-admin-starter-server:2.1.3\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@EnableAdminServer\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e客户端\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ede.codecentric:spring-boot-admin-starter-client:2.1.3\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e配置服务端及 Endpoint\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.boot.admin.client.url=http://localhost:8080\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emanagement.endpoints.web.exposure.include=*\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"安全控制\"\u003e\u003ca href=\"#安全控制\" class=\"headerlink\" title=\"安全控制\"\u003e\u003c/a\u003e安全控制\u003c/h3\u003e\u003cp\u003e安全相关依赖\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003espring-boot-starter-security\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e服务端配置\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003espring.security.user.name\u003c/li\u003e\n\u003cli\u003espring.security.user.password\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"79-如何定制-Web-容器的运行参数\"\u003e\u003ca href=\"#79-如何定制-Web-容器的运行参数\" class=\"headerlink\" title=\"79 | 如何定制 Web 容器的运行参数\"\u003e\u003c/a\u003e79 | 如何定制 Web 容器的运行参数\u003c/h3\u003e\u003ch3 id=\"内嵌-Web-容器\"\u003e\u003ca href=\"#内嵌-Web-容器\" class=\"headerlink\" title=\"内嵌 Web 容器\"\u003e\u003c/a\u003e内嵌 Web 容器\u003c/h3\u003e\u003cp\u003e可选容器列表\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003espring-boot-starter-tomcat\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring-boot-starter-jetty\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring-boot-starter-undertow\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring-boot-starter-reactor-netty\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"修改容器器配置\"\u003e\u003ca href=\"#修改容器器配置\" class=\"headerlink\" title=\"修改容器器配置\"\u003e\u003c/a\u003e修改容器器配置\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e端口\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eserver.port\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eserver.address\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e压缩\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eserver.compression.enabled\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eserver.compression.min-response-size\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eserver.compression.mime-types\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eTomcat 特定配置\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eserver.tomcat.max-connections=10000\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eserver.tomcat.max-http-post-size=2MB\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eserver.tomcat.max-swallow-size=2MB\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eserver.tomcat.max-threads=200\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eserver.tomcat.min-spare-threads=10\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e错误处理\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eserver.error.path=/error\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eserver.error.include-exception=false\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eserver.error.include-stacktrace=never\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eserver.error.whitelabel.enabled=true\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e其他\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eserver.use-forward-headers\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eserver.servlet.session.timeout\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e编程方式\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eWebServerFactoryCustomizer\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTomcatServletWebServerFactory\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eJettyServletWebServerFactory\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUndertowServletWebServerFactory\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"80-如何配置容器支持-HTTP-2（上）\"\u003e\u003ca href=\"#80-如何配置容器支持-HTTP-2（上）\" class=\"headerlink\" title=\"80 | 如何配置容器支持 HTTP/2（上）\"\u003e\u003c/a\u003e80 | 如何配置容器支持 HTTP/2（上）\u003c/h3\u003e\u003ch3 id=\"配置-HTTPS-支持\"\u003e\u003ca href=\"#配置-HTTPS-支持\" class=\"headerlink\" title=\"配置 HTTPS 支持\"\u003e\u003c/a\u003e配置 HTTPS 支持\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e通过参数进行配置\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eserver.port=8443\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eserver.ssl.*\u003c/code\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eserver.ssl.key-store\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eserver.ssl.key-store-type，JKS 或者 PKCS12\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eserver.ssl.key-store-password=secret\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"生成证书文件\"\u003e\u003ca href=\"#生成证书文件\" class=\"headerlink\" title=\"生成证书文件\"\u003e\u003c/a\u003e生成证书文件\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e命令\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ekeytool -genkey -alias 别名\u003cul\u003e\n\u003cli\u003e-storetype 仓库类型 -keyalg 算法 -keysize 长度\u003c/li\u003e\n\u003cli\u003e-keystore 文件名 -validity 有效期\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e说明\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e仓库类型，JKS、JCEKS、PKCS12 等\u003c/li\u003e\n\u003cli\u003e算法，RSA、DSA 等\u003c/li\u003e\n\u003cli\u003e长度，例如 2048\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"客户端-HTTPS-支持\"\u003e\u003ca href=\"#客户端-HTTPS-支持\" class=\"headerlink\" title=\"客户端 HTTPS 支持\"\u003e\u003c/a\u003e客户端 HTTPS 支持\u003c/h3\u003e\u003cp\u003e配置 HttpClient （ \u0026gt;= 4.4 ）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSSLContextBuilder\u003c/code\u003e 构造 \u003ccode\u003eSSLContext\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esetSSLHostnameVerifier(new NoopHostnameVerifier())\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e配置 \u003ccode\u003eRequestFactory\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eHttpComponentsClientHttpRequestFactory\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esetHttpClient()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"81-如何配置容器支持-HTTP-2（下）\"\u003e\u003ca href=\"#81-如何配置容器支持-HTTP-2（下）\" class=\"headerlink\" title=\"81 | 如何配置容器支持 HTTP/2（下）\"\u003e\u003c/a\u003e81 | 如何配置容器支持 HTTP/2（下）\u003c/h3\u003e\u003ch3 id=\"配置-HTTP-2-支持\"\u003e\u003ca href=\"#配置-HTTP-2-支持\" class=\"headerlink\" title=\"配置 HTTP/2 支持\"\u003e\u003c/a\u003e配置 HTTP/2 支持\u003c/h3\u003e\u003cp\u003e前提条件\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJava \u0026gt;= JDK 9\u003c/li\u003e\n\u003cli\u003eTomcat \u0026gt;= 9.0.0\u003c/li\u003e\n\u003cli\u003eSpring Boot 不支持 h2c，需要先配置 SSL\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e配置项\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eserver.http2.enabled\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"客户端-HTTP-2-支持\"\u003e\u003ca href=\"#客户端-HTTP-2-支持\" class=\"headerlink\" title=\"客户端 HTTP/2 支持\"\u003e\u003c/a\u003e客户端 HTTP/2 支持\u003c/h3\u003e\u003cp\u003eHTTP 库选择\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eOkHttp（ com.squareup.okhttp3:okhttp:3.14.0 ）\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eOkHttpClient\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRestTemplate 配置\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eOkHttp3ClientHttpRequestFactory\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"82-如何编写命令行运行的程序\"\u003e\u003ca href=\"#82-如何编写命令行运行的程序\" class=\"headerlink\" title=\"82 | 如何编写命令行运行的程序\"\u003e\u003c/a\u003e82 | 如何编写命令行运行的程序\u003c/h3\u003e\u003ch3 id=\"关闭-Web-容器\"\u003e\u003ca href=\"#关闭-Web-容器\" class=\"headerlink\" title=\"关闭 Web 容器\"\u003e\u003c/a\u003e关闭 Web 容器\u003c/h3\u003e\u003cp\u003e控制依赖\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e不添加 Web 相关依赖\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e配置方式\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003espring.main.web-application-type=none\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e编程方式\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSpringApplication\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esetWebApplicationType()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSpringApplicationBuilder\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eweb()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e在调用 \u003ccode\u003eSpringApplication\u003c/code\u003e 的 \u003ccode\u003erun()\u003c/code\u003e 方法前设置 \u003ccode\u003eWebApplicationType\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"常用工具类\"\u003e\u003ca href=\"#常用工具类\" class=\"headerlink\" title=\"常用工具类\"\u003e\u003c/a\u003e常用工具类\u003c/h3\u003e\u003cp\u003e不同的 Runner\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eApplicationRunner\u003c/li\u003e\n\u003cli\u003e参数是 ApplicationArguments\u003c/li\u003e\n\u003cli\u003eCommandLineRunner\u003c/li\u003e\n\u003cli\u003e参数是 String[]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e返回码\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eExitCodeGenerator\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"83-了解可执行-Jar-背后的秘密\"\u003e\u003ca href=\"#83-了解可执行-Jar-背后的秘密\" class=\"headerlink\" title=\"83 | 了解可执行 Jar 背后的秘密\"\u003e\u003c/a\u003e83 | 了解可执行 Jar 背后的秘密\u003c/h3\u003e\u003ch3 id=\"认识可执行-Jar\"\u003e\u003ca href=\"#认识可执行-Jar\" class=\"headerlink\" title=\"认识可执行 Jar\"\u003e\u003c/a\u003e认识可执行 Jar\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e其中包含\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJar 描述，\u003ccode\u003eMETA-INF/MANIFEST.MF\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSpring Boot Loader，org/springframework/boot/loader\u003c/li\u003e\n\u003cli\u003e项目内容，BOOT-INF/classes\u003c/li\u003e\n\u003cli\u003e项目依赖，BOOT-INF/lib\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e其中不包含\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJDK / JRE\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"如何找到程序的入口\"\u003e\u003ca href=\"#如何找到程序的入口\" class=\"headerlink\" title=\"如何找到程序的入口\"\u003e\u003c/a\u003e如何找到程序的入口\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eJar 的启动类\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eMANIFEST.MF\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMain-Class: org.springframework.boot.loader.JarLauncher\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e项目的主类\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@SpringApplication\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMANIFEST.MF\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eStart-Class: xxx.yyy.zzz\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"84-如何将-Spring-Boot-应用打包成-Docker-镜像文件\"\u003e\u003ca href=\"#84-如何将-Spring-Boot-应用打包成-Docker-镜像文件\" class=\"headerlink\" title=\"84 | 如何将 Spring Boot 应用打包成 Docker 镜像文件\"\u003e\u003c/a\u003e84 | 如何将 Spring Boot 应用打包成 Docker 镜像文件\u003c/h3\u003e\u003ch3 id=\"什么是-Docker-镜像\"\u003e\u003ca href=\"#什么是-Docker-镜像\" class=\"headerlink\" title=\"什么是 Docker 镜像\"\u003e\u003c/a\u003e什么是 Docker 镜像\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e镜像是静态的只读模板\u003c/li\u003e\n\u003cli\u003e镜像中包含构建 Docker 容器器的指令\u003c/li\u003e\n\u003cli\u003e镜像是分层的\u003c/li\u003e\n\u003cli\u003e通过 Dockerfile 来创建镜像\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Dockerfile\"\u003e\u003ca href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"\u003e\u003c/a\u003eDockerfile\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20230806142644.png\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"通过-Maven-构建-Docker-镜像\"\u003e\u003ca href=\"#通过-Maven-构建-Docker-镜像\" class=\"headerlink\" title=\"通过 Maven 构建 Docker 镜像\"\u003e\u003c/a\u003e通过 Maven 构建 Docker 镜像\u003c/h3\u003e\u003cp\u003e准备工作\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e提供一个 Dockerfile\u003c/li\u003e\n\u003cli\u003e配置 dockerfile-maven-plugin 插件\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e执行构建\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emvn package\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emvn dockerfile:build\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e检查结果\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edocker images\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"85-SpringBucks-实战项目进度小结\"\u003e\u003ca href=\"#85-SpringBucks-实战项目进度小结\" class=\"headerlink\" title=\"85 | SpringBucks 实战项目进度小结\"\u003e\u003c/a\u003e85 | SpringBucks 实战项目进度小结\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"第十一章：Spring-Cloud-及-Cloud-Native-概述-5-讲\"\u003e\u003ca href=\"#第十一章：Spring-Cloud-及-Cloud-Native-概述-5-讲\" class=\"headerlink\" title=\"第十一章：Spring Cloud 及 Cloud Native 概述 (5 讲)\"\u003e\u003c/a\u003e第十一章：Spring Cloud 及 Cloud Native 概述 (5 讲)\u003c/h2\u003e\u003ch3 id=\"86-简单理解微服务\"\u003e\u003ca href=\"#86-简单理解微服务\" class=\"headerlink\" title=\"86 | 简单理解微服务\"\u003e\u003c/a\u003e86 | 简单理解微服务\u003c/h3\u003e\u003cp\u003e微服务就是一些协同工作的小而自治的服务。\u003c/p\u003e\n\u003cp\u003e微服务的优点\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e易于部署\u003c/li\u003e\n\u003cli\u003e与组织结构对齐\u003c/li\u003e\n\u003cli\u003e可组合性\u003c/li\u003e\n\u003cli\u003e可替代性\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e微服务的代价\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e架构复杂\u003c/li\u003e\n\u003cli\u003e运维复杂\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"87-如何理解云原生-Cloud-Native\"\u003e\u003ca href=\"#87-如何理解云原生-Cloud-Native\" class=\"headerlink\" title=\"87 | 如何理解云原生(Cloud Native)\"\u003e\u003c/a\u003e87 | 如何理解云原生(Cloud Native)\u003c/h3\u003e\u003cp\u003e云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。\u003c/p\u003e\n\u003cp\u003e云原生应用要求\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDevOps\u003c/li\u003e\n\u003cli\u003e持续交付\u003c/li\u003e\n\u003cli\u003e微服务\u003c/li\u003e\n\u003cli\u003e容器\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCloud Native Computing Foundation，缩写 CNCF\u003c/p\u003e\n\u003ch3 id=\"88-12-Factor-App（上）\"\u003e\u003ca href=\"#88-12-Factor-App（上）\" class=\"headerlink\" title=\"88 | 12-Factor App（上）\"\u003e\u003c/a\u003e88 | 12-Factor App（上）\u003c/h3\u003e\u003ch3 id=\"89-12-Factor-App（下）\"\u003e\u003ca href=\"#89-12-Factor-App（下）\" class=\"headerlink\" title=\"89 | 12-Factor App（下）\"\u003e\u003c/a\u003e89 | 12-Factor App（下）\u003c/h3\u003e\u003cp\u003e12-Factor 为构建 SaaS 应用提供了方法论。\u003c/p\u003e\n\u003cp\u003e参考资料：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://12factor.net/zh_cn/\"\u003ehttps://12factor.net/zh_cn/\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e基准代码 - 一份基准代码，多份部署。解决方案：git\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e依赖 - 显式声明依赖关系。解决方案：maven、gradle\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e配置 - 在环境中存储配置。解决方案：apollo\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e后端服务 - 把后端服务当作附加资源\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e构建，发布，运行 - 严格分离构建和运行。解决方案：CI/CD（如：jenkins、sonar 等）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e进程 - 以一个或多个无状态进程运行应用\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e端口绑定 - 通过端口绑定提供服务\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e并发 - 通过进程模型进行扩展\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e易处理 - 快速启动和优雅终止可最大化健壮性\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e开发环境与线上环境等价 - 尽可能的保持开发，预发布，线上环境相同\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e日志 - 把日志当作事件流\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e管理进程 - 后台管理任务当作一次性进程运行\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"90-认识-Spring-Cloud-的组成部分\"\u003e\u003ca href=\"#90-认识-Spring-Cloud-的组成部分\" class=\"headerlink\" title=\"90 | 认识 Spring Cloud 的组成部分\"\u003e\u003c/a\u003e90 | 认识 Spring Cloud 的组成部分\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20230729155944.svg\"/\u003e\u003c/p\u003e\n\u003cp\u003eSpring Cloud 的主要功能\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务发现\u003c/li\u003e\n\u003cli\u003e服务熔断\u003c/li\u003e\n\u003cli\u003e配置服务\u003c/li\u003e\n\u003cli\u003e服务安全\u003c/li\u003e\n\u003cli\u003e服务网关\u003c/li\u003e\n\u003cli\u003e分布式消息\u003c/li\u003e\n\u003cli\u003e分布式跟踪\u003c/li\u003e\n\u003cli\u003e各种云平台支持\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"第十二章：服务注册与发现-9-讲\"\u003e\u003ca href=\"#第十二章：服务注册与发现-9-讲\" class=\"headerlink\" title=\"第十二章：服务注册与发现 (9 讲)\"\u003e\u003c/a\u003e第十二章：服务注册与发现 (9 讲)\u003c/h2\u003e\u003ch3 id=\"91-使用-Eureka-作为服务注册中心\"\u003e\u003ca href=\"#91-使用-Eureka-作为服务注册中心\" class=\"headerlink\" title=\"91 | 使用 Eureka 作为服务注册中心\"\u003e\u003c/a\u003e91 | 使用 Eureka 作为服务注册中心\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSpringCloud 启动包\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e服务端 - \u003ccode\u003espring-cloud-starter-netflix-eureka-server\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e客户端 - \u003ccode\u003espring-cloud-starter-netflix-eureka-client\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e注解\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e服务端启动注解 - \u003ccode\u003e@EnableEurekaServer\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e客户端启动注解\u003cul\u003e\n\u003cli\u003e通用注解 - \u003ccode\u003e@EnableDiscoveryClient\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eEureka 特定注解 - \u003ccode\u003e@EnableEurekaClient\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e要点\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003eEureka 默认端口 8761\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e配置\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eeureka.client.serviceUrl.defaultZone\u003c/code\u003e - 注册地址，如 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://localhost:10001/eureka/\"\u003ehttp://localhost:10001/eureka/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eeureka.client.register-with-eureka\u003c/code\u003e - 是否将自己注册到 Eureka Server，默认为 true\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eeureka.client.fetch-registry\u003c/code\u003e - 是否从 Eureka Server 获取注册信息，默认为 true\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"92-使用-Spring-Cloud-Loadbalancer-访问服务\"\u003e\u003ca href=\"#92-使用-Spring-Cloud-Loadbalancer-访问服务\" class=\"headerlink\" title=\"92 | 使用 Spring Cloud Loadbalancer 访问服务\"\u003e\u003c/a\u003e92 | 使用 Spring Cloud Loadbalancer 访问服务\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e如何获得服务地址\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.cloud.netflix.eureka.EurekaDiscoveryClient\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.cloud.client.discovery.DiscoveryClient\u003c/code\u003e - 通用接口，推荐方式\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e负载均衡客户端\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@LoadBalanced\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e实际是通过 \u003ccode\u003eClientHttpRequestInterceptor\u003c/code\u003e 实现的\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLoadBalancerInterceptor\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLoadBalancerClient\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRibbonLoadBalancerClient\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"93-使用-Feign-访问服务\"\u003e\u003ca href=\"#93-使用-Feign-访问服务\" class=\"headerlink\" title=\"93 | 使用 Feign 访问服务\"\u003e\u003c/a\u003e93 | 使用 Feign 访问服务\u003c/h3\u003e\u003cp\u003e声明式 REST Web 服务客户端\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSpringCloud 启动包\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003espring-cloud-starter-openfeign\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e注解\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e启动注解 - \u003ccode\u003e@EnableFeignClients\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e定义接口注解 - \u003ccode\u003e@FeignClient\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e配置\u003c/strong\u003e - \u003ccode\u003eorg.springframework.cloud.openfeign.FeignClientsConfiguration\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"94-深入理解服务发现背后的-DiscoveryClient\"\u003e\u003ca href=\"#94-深入理解服务发现背后的-DiscoveryClient\" class=\"headerlink\" title=\"94 | 深入理解服务发现背后的 DiscoveryClient\"\u003e\u003c/a\u003e94 | 深入理解服务发现背后的 DiscoveryClient\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e服务端抽象接口\u003c/strong\u003e - \u003ccode\u003eorg.springframework.cloud.client.serviceregistry.ServiceRegistry\u003c/code\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eEurekaServiceRegistry\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEurekaRegistration\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEurekaAutoServiceRegistration\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEurekaClientAutoConfiguration\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e客户端抽象接口\u003c/strong\u003e - \u003ccode\u003eorg.springframework.cloud.client.discovery.DiscoveryClient\u003c/code\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@EnableDiscoveryClient\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e负载均衡抽象接口\u003c/strong\u003e - \u003ccode\u003eorg.springframework.cloud.client.loadbalancer.LoadBalancerClient\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"95-使用-Zookeeper-作为服务注册中心\"\u003e\u003ca href=\"#95-使用-Zookeeper-作为服务注册中心\" class=\"headerlink\" title=\"95 | 使用 Zookeeper 作为服务注册中心\"\u003e\u003c/a\u003e95 | 使用 Zookeeper 作为服务注册中心\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSpringCloud 启动包\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003espring-cloud-starter-zookeeper-discovery\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e配置\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eZookeeperAutoConfiguration\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eZookeeperDiscoveryAutoConfiguration\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"96-使用-Consul-作为服务注册中心\"\u003e\u003ca href=\"#96-使用-Consul-作为服务注册中心\" class=\"headerlink\" title=\"96 | 使用 Consul 作为服务注册中心\"\u003e\u003c/a\u003e96 | 使用 Consul 作为服务注册中心\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSpringCloud 启动包\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003espring-cloud-starter-consul-discovery\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e配置\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eConsulAutoConfiguration\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"97-使用-Nacos-作为服务注册中心\"\u003e\u003ca href=\"#97-使用-Nacos-作为服务注册中心\" class=\"headerlink\" title=\"97 | 使用 Nacos 作为服务注册中心\"\u003e\u003c/a\u003e97 | 使用 Nacos 作为服务注册中心\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSpringCloud 启动包\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003espring-cloud-starter-alibaba-nacos-discovery\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e配置\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eNacosDiscoveryAutoConfiguration\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"98-如何定制自己的-DiscoveryClient\"\u003e\u003ca href=\"#98-如何定制自己的-DiscoveryClient\" class=\"headerlink\" title=\"98 | 如何定制自己的 DiscoveryClient\"\u003e\u003c/a\u003e98 | 如何定制自己的 DiscoveryClient\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eDiscoveryClient\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eEurekaDiscoveryClient\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eZooKeeperDiscoveryClient\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eConsulDiscoveryClient\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNacosDiscoveryClient\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eLoadBalancerClient\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eRibbonLoadBalancerClient\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e自定义 DiscoveryClient 步骤\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e返回该 DiscoveryClient 能提供的服务名列表\u003c/li\u003e\n\u003cli\u003e返回指定服务对应的 ServiceInstance 列表\u003c/li\u003e\n\u003cli\u003e返回 DiscoveryClient 的顺序\u003c/li\u003e\n\u003cli\u003e返回 HealthIndicator 里显示的描述\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e自定义 RibbonClient 支持\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e实现 \u003ccode\u003eServerList\u0026lt;T extends Server\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eRibbon 提供了 AbstractServerList\u003c/li\u003e\n\u003cli\u003e提供一个配置类，声明 ServerList Bean 实例\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"99-SpringBucks-实战项目进度小结\"\u003e\u003ca href=\"#99-SpringBucks-实战项目进度小结\" class=\"headerlink\" title=\"99 | SpringBucks 实战项目进度小结\"\u003e\u003c/a\u003e99 | SpringBucks 实战项目进度小结\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"第十三章：服务熔断-7-讲\"\u003e\u003ca href=\"#第十三章：服务熔断-7-讲\" class=\"headerlink\" title=\"第十三章：服务熔断 (7 讲)\"\u003e\u003c/a\u003e第十三章：服务熔断 (7 讲)\u003c/h2\u003e\u003ch3 id=\"100-使用-Hystrix-实现服务熔断（上）\"\u003e\u003ca href=\"#100-使用-Hystrix-实现服务熔断（上）\" class=\"headerlink\" title=\"100 | 使用 Hystrix 实现服务熔断（上）\"\u003e\u003c/a\u003e100 | 使用 Hystrix 实现服务熔断（上）\u003c/h3\u003e\u003cp\u003e断路器模式\u003c/p\u003e\n\u003cp\u003e在断路器对象中封装受保护的方法调用\u003c/p\u003e\n\u003cp\u003e该对象监控调用和断路情况\u003c/p\u003e\n\u003cp\u003e调用失败触发阈值后，后序调用直接由断路器返回错误，不再执行实际调用\u003c/p\u003e\n\u003ch3 id=\"101-使用-Hystrix-实现服务熔断（下）\"\u003e\u003ca href=\"#101-使用-Hystrix-实现服务熔断（下）\" class=\"headerlink\" title=\"101 | 使用 Hystrix 实现服务熔断（下）\"\u003e\u003c/a\u003e101 | 使用 Hystrix 实现服务熔断（下）\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eHystrix 应用\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e注解\u003c/li\u003e\n\u003cli\u003e@HystrixCommand\u003cul\u003e\n\u003cli\u003efallbackMethod\u003c/li\u003e\n\u003cli\u003ecommandProperties\u003cul\u003e\n\u003cli\u003e@HystrixProperty\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eSpringCloud 启动包\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003espring-cloud-starter-netflix-hystrix\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e注解\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@EnableCircuitBreaker\u003c/code\u003e - 断路器开启注解\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eFeign 支持\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efeign.hystrix.enabled=true\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@FeignClient\u003c/code\u003e 的 \u003ccode\u003efallback\u003c/code\u003e / \u003ccode\u003efallbackFactory\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e配置\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eHystrixCircuitBreakerAutoConfiguration\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"102-如何观察服务熔断\"\u003e\u003ca href=\"#102-如何观察服务熔断\" class=\"headerlink\" title=\"102 | 如何观察服务熔断\"\u003e\u003c/a\u003e102 | 如何观察服务熔断\u003c/h3\u003e\u003cp\u003eSpring Cloud 对于熔断的监控支持\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHystrix Metrics Stream\u003cul\u003e\n\u003cli\u003espring-boot-starter-actuator\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e/actuator/hystrix.stream\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eHystrix Dashboard\u003cul\u003e\n\u003cli\u003espring-cloud-starter-netflix-hystrix-dashboard\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@EnableHystrixDashboard\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e/hystirx\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e聚合集群熔断信息\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSpringCloud 启动包\u003c/strong\u003e - spring-cloud-starter-netflix-turbines\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e注解\u003c/strong\u003e - \u003ccode\u003e@EnableTurbine\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e/turbine/stream?cluster=集群名\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"103-使用-Resilience4j-实现服务熔断\"\u003e\u003ca href=\"#103-使用-Resilience4j-实现服务熔断\" class=\"headerlink\" title=\"103 | 使用 Resilience4j 实现服务熔断\"\u003e\u003c/a\u003e103 | 使用 Resilience4j 实现服务熔断\u003c/h3\u003e\u003cp\u003eHystrix 官方已经停止维护，因此建议选择其他产品来替代。例如：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/resilience4j/resilience4j\"\u003eResilience4J\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eResilience4J 实现\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e基于 \u003ccode\u003eConcurrentHashMap\u003c/code\u003e 的内存断路器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCircuitBreakerRegistry\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCircuitBreakerConfig\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eResilience4J 依赖\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eresilience4j-spring-boot2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e注解\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@CircuitBreaker\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e配置\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCircuitBreakerProperties\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"104-使用-Resilience4j-实现服务限流（上）\"\u003e\u003ca href=\"#104-使用-Resilience4j-实现服务限流（上）\" class=\"headerlink\" title=\"104 | 使用 Resilience4j 实现服务限流（上）\"\u003e\u003c/a\u003e104 | 使用 Resilience4j 实现服务限流（上）\u003c/h3\u003e\u003cp\u003eBulkhead\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e目的\u003cul\u003e\n\u003cli\u003e防止下游依赖被并发请求冲击\u003c/li\u003e\n\u003cli\u003e防止发生雪崩\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e用法\u003cul\u003e\n\u003cli\u003eBulkheadRegistry / BulkheadConfig\u003c/li\u003e\n\u003cli\u003e@Bulkhead(name = “xxx”)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"105-使用-Resilience4j-实现服务限流（下）\"\u003e\u003ca href=\"#105-使用-Resilience4j-实现服务限流（下）\" class=\"headerlink\" title=\"105 | 使用 Resilience4j 实现服务限流（下）\"\u003e\u003c/a\u003e105 | 使用 Resilience4j 实现服务限流（下）\u003c/h3\u003e\u003cp\u003eRateLimit\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e目的\u003cul\u003e\n\u003cli\u003e限制特定时间内的执行次数\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e用法\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eRateLimiterRegistry\u003c/code\u003e / \u003ccode\u003eRateLimiterConfig\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@RateLimiter\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e配置\u003c/li\u003e\n\u003cli\u003eRateLimiterPropertis\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"106-SpringBucks-实战项目进度小结\"\u003e\u003ca href=\"#106-SpringBucks-实战项目进度小结\" class=\"headerlink\" title=\"106 | SpringBucks 实战项目进度小结\"\u003e\u003c/a\u003e106 | SpringBucks 实战项目进度小结\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"第十四章：服务配置-7-讲\"\u003e\u003ca href=\"#第十四章：服务配置-7-讲\" class=\"headerlink\" title=\"第十四章：服务配置 (7 讲)\"\u003e\u003c/a\u003e第十四章：服务配置 (7 讲)\u003c/h2\u003e\u003ch3 id=\"107-基于-Git-的配置中心（上）\"\u003e\u003ca href=\"#107-基于-Git-的配置中心（上）\" class=\"headerlink\" title=\"107 | 基于 Git 的配置中心（上）\"\u003e\u003c/a\u003e107 | 基于 Git 的配置中心（上）\u003c/h3\u003e\u003cp\u003e目的\u003c/p\u003e\n\u003cp\u003e提供针对外置配置的 HTTP API\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSpringCloud 启动包\u003c/strong\u003e - spring-cloud-config-server\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e注解\u003c/strong\u003e - \u003ccode\u003e@EnableConfigServer\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"108-基于-Git-的配置中心（下）\"\u003e\u003ca href=\"#108-基于-Git-的配置中心（下）\" class=\"headerlink\" title=\"108 | 基于 Git 的配置中心（下）\"\u003e\u003c/a\u003e108 | 基于 Git 的配置中心（下）\u003c/h3\u003e\u003ch3 id=\"109-基于-Zookeeper-的配置中心\"\u003e\u003ca href=\"#109-基于-Zookeeper-的配置中心\" class=\"headerlink\" title=\"109 | 基于 Zookeeper 的配置中心\"\u003e\u003c/a\u003e109 | 基于 Zookeeper 的配置中心\u003c/h3\u003e\u003ch3 id=\"110-深入理解-Spring-Cloud-的配置抽象\"\u003e\u003ca href=\"#110-深入理解-Spring-Cloud-的配置抽象\" class=\"headerlink\" title=\"110 | 深入理解 Spring Cloud 的配置抽象\"\u003e\u003c/a\u003e110 | 深入理解 Spring Cloud 的配置抽象\u003c/h3\u003e\u003cp\u003e实现\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e类似于 Spring 的 Environment 和 PropertySource\u003c/li\u003e\n\u003cli\u003e在上下文中增加 Spring Cloud Config 的 PropertySource\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePropertySource 子类\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eZooKeeperPropertySource\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eConsulPropertySource\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eConsulFilePropertySource\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePropertySourceLocator\u003c/p\u003e\n\u003cp\u003eEnvironmentRepositry\u003c/p\u003e\n\u003cp\u003e配置刷新\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e/actuator/refresh\u003c/li\u003e\n\u003cli\u003eSpring Cloud Bus - RegfreshRemoteApplicationEvent\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eZooKeeperConfigBootstrapConfiguration\u003c/p\u003e\n\u003cp\u003eZooKeeperConfigAutoConfiguration\u003c/p\u003e\n\u003ch3 id=\"111-基于-Consul-的配置中心\"\u003e\u003ca href=\"#111-基于-Consul-的配置中心\" class=\"headerlink\" title=\"111 | 基于 Consul 的配置中心\"\u003e\u003c/a\u003e111 | 基于 Consul 的配置中心\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eSpringCloud 启动包\u003c/strong\u003e - spring-cloud-starter-consual-config\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e配置文件\u003c/strong\u003e - bootstrap.propertis | yml\u003c/p\u003e\n\u003ch3 id=\"112-基于-Nacos-的配置中心\"\u003e\u003ca href=\"#112-基于-Nacos-的配置中心\" class=\"headerlink\" title=\"112 | 基于 Nacos 的配置中心\"\u003e\u003c/a\u003e112 | 基于 Nacos 的配置中心\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eSpringCloud 启动包\u003c/strong\u003e - spring-cloud-starter-alibaba-nacos-config\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e配置文件\u003c/strong\u003e - bootstrap.propertis | yml\u003c/p\u003e\n\u003ch3 id=\"113-SpringBucks-实战项目进度小结\"\u003e\u003ca href=\"#113-SpringBucks-实战项目进度小结\" class=\"headerlink\" title=\"113 | SpringBucks 实战项目进度小结\"\u003e\u003c/a\u003e113 | SpringBucks 实战项目进度小结\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"第十五章：Spring-Cloud-Stream-4-讲\"\u003e\u003ca href=\"#第十五章：Spring-Cloud-Stream-4-讲\" class=\"headerlink\" title=\"第十五章：Spring Cloud Stream (4 讲)\"\u003e\u003c/a\u003e第十五章：Spring Cloud Stream (4 讲)\u003c/h2\u003e\u003ch3 id=\"114-认识-Spring-Cloud-Stream\"\u003e\u003ca href=\"#114-认识-Spring-Cloud-Stream\" class=\"headerlink\" title=\"114 | 认识 Spring Cloud Stream\"\u003e\u003c/a\u003e114 | 认识 Spring Cloud Stream\u003c/h3\u003e\u003cp\u003eSpring Cloud Stream 是一款用于构建消息驱动的微服务应用程序的轻量级框架。\u003c/p\u003e\n\u003cp\u003e特性\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e声明式编程模型\u003c/li\u003e\n\u003cli\u003e引入多种概念抽象：发布订阅、消费组、分区\u003c/li\u003e\n\u003cli\u003e支持多种消息中间件：RabbitMQ、Kafka\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e概念\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBinding\u003cul\u003e\n\u003cli\u003e生产者、消费者与 MQ 之间的桥梁\u003c/li\u003e\n\u003cli\u003e@EnableBinding\u003c/li\u003e\n\u003cli\u003e@Input /SubscribableChannel\u003c/li\u003e\n\u003cli\u003e@Output / MessageChannel\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e消费组\u003c/li\u003e\n\u003cli\u003e分区\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e生产消息\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用 MessageChannel 的 send()\u003c/li\u003e\n\u003cli\u003e@SendTo\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e消费消息\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@StreamListener\u003c/li\u003e\n\u003cli\u003e@Payload / @Headers / @Header\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"115-通过-Spring-Cloud-Stream-访问-RabbitMQ\"\u003e\u003ca href=\"#115-通过-Spring-Cloud-Stream-访问-RabbitMQ\" class=\"headerlink\" title=\"115 | 通过 Spring Cloud Stream 访问 RabbitMQ\"\u003e\u003c/a\u003e115 | 通过 Spring Cloud Stream 访问 RabbitMQ\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eSpringCloud 启动包\u003c/strong\u003e - spring-cloud-starter-stream-rabbit\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSpringBoot 启动包\u003c/strong\u003e - spring-boot-starter-amqp\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e配置\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eorg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"116-通过-Spring-Cloud-Stream-访问-Kafka\"\u003e\u003ca href=\"#116-通过-Spring-Cloud-Stream-访问-Kafka\" class=\"headerlink\" title=\"116 | 通过 Spring Cloud Stream 访问 Kafka\"\u003e\u003c/a\u003e116 | 通过 Spring Cloud Stream 访问 Kafka\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eSpringCloud 启动包\u003c/strong\u003e - spring-cloud-starter-stream-kafka\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e配置\u003c/strong\u003e - \u003ccode\u003eorg.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eSpring 定时任务\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTaskScheduler / Trigger / TriggerContext\u003c/li\u003e\n\u003cli\u003e配置定时任务\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@EnableScheduling\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;task:scheduler /\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@Scheduled\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSpring 事件机制\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eApplicationEvent\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e发送事件\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eApplicationEventPublisher\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eApplicationEventPublisherAware\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e监听事件\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eApplicationListener\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@EventListener\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"117-SpringBucks-实战项目进度小结\"\u003e\u003ca href=\"#117-SpringBucks-实战项目进度小结\" class=\"headerlink\" title=\"117 | SpringBucks 实战项目进度小结\"\u003e\u003c/a\u003e117 | SpringBucks 实战项目进度小结\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"第十六章：服务链路追踪-6-讲\"\u003e\u003ca href=\"#第十六章：服务链路追踪-6-讲\" class=\"headerlink\" title=\"第十六章：服务链路追踪 (6 讲)\"\u003e\u003c/a\u003e第十六章：服务链路追踪 (6 讲)\u003c/h2\u003e\u003ch3 id=\"118-通过-Dapper-理解链路治理\"\u003e\u003ca href=\"#118-通过-Dapper-理解链路治理\" class=\"headerlink\" title=\"118 | 通过 Dapper 理解链路治理\"\u003e\u003c/a\u003e118 | 通过 Dapper 理解链路治理\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch3 id=\"119-使用-Spring-Cloud-Sleuth-实现链路追踪\"\u003e\u003ca href=\"#119-使用-Spring-Cloud-Sleuth-实现链路追踪\" class=\"headerlink\" title=\"119 | 使用 Spring Cloud Sleuth 实现链路追踪\"\u003e\u003c/a\u003e119 | 使用 Spring Cloud Sleuth 实现链路追踪\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eSpringCloud 启动包\u003c/strong\u003e - spring-cloud-starter-sleuth、spring-cloud-starter-zipkin\u003c/p\u003e\n\u003ch3 id=\"120-如何追踪消息链路\"\u003e\u003ca href=\"#120-如何追踪消息链路\" class=\"headerlink\" title=\"120 | 如何追踪消息链路\"\u003e\u003c/a\u003e120 | 如何追踪消息链路\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch3 id=\"121-除了链路还要治理什么\"\u003e\u003ca href=\"#121-除了链路还要治理什么\" class=\"headerlink\" title=\"121 | 除了链路还要治理什么\"\u003e\u003c/a\u003e121 | 除了链路还要治理什么\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch3 id=\"122-SpringBucks-实战项目进度小结\"\u003e\u003ca href=\"#122-SpringBucks-实战项目进度小结\" class=\"headerlink\" title=\"122 | SpringBucks 实战项目进度小结\"\u003e\u003c/a\u003e122 | SpringBucks 实战项目进度小结\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/course/intro/156\"\u003e玩转 Spring 全家桶\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2023-07-29T07:25:09Z",
  "Author": "钝悟 ◾ Dunwu"
}