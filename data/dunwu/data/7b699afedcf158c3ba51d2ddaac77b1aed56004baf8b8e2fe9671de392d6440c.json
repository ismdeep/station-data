{
  "Source": "dunwu",
  "Title": "《SQL 必知必会》笔记",
  "Link": "https://dunwu.github.io/blog/pages/34699b/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"《SQL-必知必会》笔记\"\u003e\u003ca href=\"#《SQL-必知必会》笔记\" class=\"headerlink\" title=\"《SQL 必知必会》笔记\"\u003e\u003c/a\u003e《SQL 必知必会》笔记\u003c/h1\u003e\u003ch2 id=\"第一章：SQL-语法基础篇\"\u003e\u003ca href=\"#第一章：SQL-语法基础篇\" class=\"headerlink\" title=\"第一章：SQL 语法基础篇\"\u003e\u003c/a\u003e第一章：SQL 语法基础篇\u003c/h2\u003e\u003ch3 id=\"01-丨了解-SQL：一门半衰期很长的语言\"\u003e\u003ca href=\"#01-丨了解-SQL：一门半衰期很长的语言\" class=\"headerlink\" title=\"01 丨了解 SQL：一门半衰期很长的语言\"\u003e\u003c/a\u003e01 丨了解 SQL：一门半衰期很长的语言\u003c/h3\u003e\u003cp\u003eSQL 语言按照功能划分成以下的 4 个部分：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDDL\u003c/strong\u003e，英文叫做 Data Definition Language，也就是数据定义语言，它用来定义我们的数据库对象，包括数据库、数据表和列。通过使用 DDL，我们可以创建，删除和修改数据库和表结构。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDML\u003c/strong\u003e，英文叫做 Data Manipulation Language，数据操作语言，我们用它操作和数据库相关的记录，比如增加、删除、修改数据表中的记录。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDCL\u003c/strong\u003e，英文叫做 Data Control Language，数据控制语言，我们用它来定义访问权限和安全级别。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDQL\u003c/strong\u003e，英文叫做 Data Query Language，数据查询语言，我们用它查询想要的记录，它是 SQL 语言的重中之重。在实际的业务中，我们绝大多数情况下都是在和查询打交道，因此学会编写正确且高效的查询语句，是学习的重点。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"02-丨-DBMS-的前世今生\"\u003e\u003ca href=\"#02-丨-DBMS-的前世今生\" class=\"headerlink\" title=\"02 丨 DBMS 的前世今生\"\u003e\u003c/a\u003e02 丨 DBMS 的前世今生\u003c/h3\u003e\u003cp\u003eDB、DBS 和 DBMS 的区别：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDBMS 的英文全称是 DataBase Management System，数据库管理系统，实际上它可以对多个数据库进行管理，所以你可以理解为 DBMS = 多个数据库（DB） + 管理程序。\u003c/li\u003e\n\u003cli\u003eDB 的英文是 DataBase，也就是数据库。数据库是存储数据的集合，你可以把它理解为多个数据表。\u003c/li\u003e\n\u003cli\u003eDBS 的英文是 DataBase System，数据库系统。它是更大的概念，包括了数据库、数据库管理系统以及数据库管理人员 DBA。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNoSql 不同时期的释义\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e1970：NoSQL = We have no SQL\u003c/li\u003e\n\u003cli\u003e1980：NoSQL = Know SQL\u003c/li\u003e\n\u003cli\u003e2000：NoSQL = No SQL!\u003c/li\u003e\n\u003cli\u003e2005：NoSQL = Not only SQL\u003c/li\u003e\n\u003cli\u003e2013：NoSQL = No, SQL!\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"03-丨学会用数据库的方式思考-SQL-是如何执行的\"\u003e\u003ca href=\"#03-丨学会用数据库的方式思考-SQL-是如何执行的\" class=\"headerlink\" title=\"03 丨学会用数据库的方式思考 SQL 是如何执行的\"\u003e\u003c/a\u003e03 丨学会用数据库的方式思考 SQL 是如何执行的\u003c/h3\u003e\u003ch4 id=\"Oracle-中的-SQL-是如何执行的\"\u003e\u003ca href=\"#Oracle-中的-SQL-是如何执行的\" class=\"headerlink\" title=\"Oracle 中的 SQL 是如何执行的\"\u003e\u003c/a\u003eOracle 中的 SQL 是如何执行的\u003c/h4\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220716105947.png\"/\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e语法检查\u003c/strong\u003e：检查 SQL 拼写是否正确，如果不正确，Oracle 会报语法错误。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e语义检查\u003c/strong\u003e：检查 SQL 中的访问对象是否存在。比如我们在写 SELECT 语句的时候，列名写错了，系统就会提示错误。语法检查和语义检查的作用是保证 SQL 语句没有错误。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e权限检查\u003c/strong\u003e：看用户是否具备访问该数据的权限。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e共享池检查\u003c/strong\u003e：共享池（Shared Pool）是一块内存池，最主要的作用是缓存 SQL 语句和该语句的执行计划。Oracle 通过检查共享池是否存在 SQL 语句的执行计划，来判断进行软解析，还是硬解析。那软解析和硬解析又该怎么理解呢？\u003cul\u003e\n\u003cli\u003e在共享池中，Oracle 首先对 SQL 语句进行 Hash 运算，然后根据 Hash 值在库缓存（Library Cache）中查找，如果存在 SQL 语句的执行计划，就直接拿来执行，直接进入“执行器”的环节，这就是\u003cstrong\u003e软解析\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e如果没有找到 SQL 语句和执行计划，Oracle 就需要创建解析树进行解析，生成执行计划，进入“优化器”这个步骤，这就是\u003cstrong\u003e硬解析\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e优化器\u003c/strong\u003e：优化器中就是要进行硬解析，也就是决定怎么做，比如创建解析树，生成执行计划。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e执行器\u003c/strong\u003e：当有了解析树和执行计划之后，就知道了 SQL 该怎么被执行，这样就可以在执行器中执行语句了。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e共享池是 Oracle 中的术语，包括了库缓存，数据字典缓冲区等。它主要缓存 SQL 语句和执行计划。\u003c/p\u003e\n\u003cp\u003e而数据字典缓冲区存储的是 Oracle 中的对象定义，比如表、视图、索引等对象。当对 SQL 语句进行解析的时候，如果需要相关的数据，会从数据字典缓冲区中提取。\u003c/p\u003e\n\u003ch4 id=\"MySQL-中的-SQL-是如何执行的\"\u003e\u003ca href=\"#MySQL-中的-SQL-是如何执行的\" class=\"headerlink\" title=\"MySQL 中的 SQL 是如何执行的\"\u003e\u003c/a\u003eMySQL 中的 SQL 是如何执行的\u003c/h4\u003e\u003cp\u003eMySQL 是典型的 C/S 架构，即 Client/Server 架构，服务器端程序使用的 mysqld。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220716110905.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eMysql 可分为三层：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e连接层\u003c/strong\u003e：客户端和服务器端建立连接，客户端发送 SQL 至服务器端；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSQL 层\u003c/strong\u003e：对 SQL 语句进行查询处理；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e存储引擎层\u003c/strong\u003e：与数据库文件打交道，负责数据的存储和读取。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220716111103.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eSQL 层的结构\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e查询缓存\u003c/strong\u003e：Server 如果在查询缓存中发现了这条 SQL 语句，就会直接将结果返回给客户端；如果没有，就进入到解析器阶段。需要说明的是，因为查询缓存往往效率不高，所以在 MySQL8.0 之后就抛弃了这个功能。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e解析器\u003c/strong\u003e：在解析器中对 SQL 语句进行语法分析、语义分析。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e优化器\u003c/strong\u003e：在优化器中会确定 SQL 语句的执行路径，比如是根据全表检索，还是根据索引来检索等。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e执行器\u003c/strong\u003e：在执行之前需要判断该用户是否具备权限，如果具备权限就执行 SQL 查询并返回结果。在 MySQL8.0 以下的版本，如果设置了查询缓存，这时会将查询结果进行缓存。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e与 Oracle 不同的是，MySQL 的存储引擎采用了插件的形式，每个存储引擎都面向一种特定的数据库应用环境。同时开源的 MySQL 还允许开发人员设置自己的存储引擎，下面是一些常见的存储引擎：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInnoDB 存储引擎：它是 MySQL 5.5 版本之后默认的存储引擎，最大的特点是支持事务、行级锁定、外键约束等。\u003c/li\u003e\n\u003cli\u003eMyISAM 存储引擎：在 MySQL 5.5 版本之前是默认的存储引擎，不支持事务，也不支持外键，最大的特点是速度快，占用资源少。\u003c/li\u003e\n\u003cli\u003eMemory 存储引擎：使用系统内存作为存储介质，以便得到更快的响应速度。不过如果 mysqld 进程崩溃，则会导致所有的数据丢失，因此我们只有当数据是临时的情况下才使用 Memory 存储引擎。\u003c/li\u003e\n\u003cli\u003eNDB 存储引擎：也叫做 NDB Cluster 存储引擎，主要用于 MySQL Cluster 分布式集群环境，类似于 Oracle 的 RAC 集群。\u003c/li\u003e\n\u003cli\u003eArchive 存储引擎：它有很好的压缩机制，用于文件归档，在请求写入时会进行压缩，所以也经常用来做仓库。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"04-丨使用-DDL-创建数据库-数据表时需要注意什么？\"\u003e\u003ca href=\"#04-丨使用-DDL-创建数据库-数据表时需要注意什么？\" class=\"headerlink\" title=\"04 丨使用 DDL 创建数据库\u0026amp;数据表时需要注意什么？\"\u003e\u003c/a\u003e04 丨使用 DDL 创建数据库\u0026amp;数据表时需要注意什么？\u003c/h3\u003e\u003cp\u003eDDL 的核心指令是 \u003ccode\u003eCREATE\u003c/code\u003e、\u003ccode\u003eALTER\u003c/code\u003e、\u003ccode\u003eDROP\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e设计数据表的原则\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e数据表的个数越少越好\u003c/strong\u003e - RDBMS 的核心在于对实体和联系的定义，也就是 E-R 图（Entity Relationship Diagram），数据表越少，证明实体和联系设计得越简洁，既方便理解又方便操作。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e数据表中的字段个数越少越好\u003c/strong\u003e - 字段个数越多，数据冗余的可能性越大。设置字段个数少的前提是各个字段相互独立，而不是某个字段的取值可以由其他字段计算出来。当然字段个数少是相对的，我们通常会在数据冗余和检索效率中进行平衡。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e数据表中联合主键的字段个数越少越好\u003c/strong\u003e - 设置主键是为了确定唯一性，当一个字段无法确定唯一性的时候，就需要采用联合主键的方式（也就是用多个字段来定义一个主键）。联合主键中的字段越多，占用的索引空间越大，不仅会加大理解难度，还会增加运行时间和索引空间，因此联合主键的字段个数越少越好。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e使用主键和外键越多越好\u003c/strong\u003e - 数据库的设计实际上就是定义各种表，以及各种字段之间的关系。这些关系越多，证明这些实体之间的冗余度越低，利用度越高。这样做的好处在于不仅保证了数据表之间的独立性，还能提升相互之间的关联使用率。——不同意\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"05-丨检索数据：你还在-SELECT-么？\"\u003e\u003ca href=\"#05-丨检索数据：你还在-SELECT-么？\" class=\"headerlink\" title=\"05 丨检索数据：你还在 SELECT 么？\"\u003e\u003c/a\u003e05 丨检索数据：你还在 SELECT 么？\u003c/h3\u003e\u003cp\u003eSELECT 的作用是从一个表或多个表中检索出想要的数据行。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSELECT\u003c/code\u003e 语句用于从数据库中查询数据。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDISTINCT\u003c/code\u003e 用于返回唯一不同的值。它作用于所有列，也就是说所有列的值都相同才算相同。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLIMIT\u003c/code\u003e 限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eASC\u003c/code\u003e ：升序（默认）\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDESC\u003c/code\u003e ：降序\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e查询单列\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e name \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e world.country;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e查询多列\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e name, continent, region \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e world.country;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e查询所有列\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"operator\"\u003e*\u003c/span\u003e \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e world.country;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e查询不同的值\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"keyword\"\u003edistinct\u003c/span\u003e(continent) \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e world.country;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e限制查询结果\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e-- 返回前 5 行\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"operator\"\u003e*\u003c/span\u003e \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e world.country LIMIT \u003cspan class=\"number\"\u003e5\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"operator\"\u003e*\u003c/span\u003e \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e world.country LIMIT \u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u003cspan class=\"number\"\u003e5\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e-- 返回第 3 ~ 5 行\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"operator\"\u003e*\u003c/span\u003e \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e world.country LIMIT \u003cspan class=\"number\"\u003e2\u003c/span\u003e, \u003cspan class=\"number\"\u003e3\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"06-丨数据过滤：SQL-数据过滤都有哪些方法？\"\u003e\u003ca href=\"#06-丨数据过滤：SQL-数据过滤都有哪些方法？\" class=\"headerlink\" title=\"06 丨数据过滤：SQL 数据过滤都有哪些方法？\"\u003e\u003c/a\u003e06 丨数据过滤：SQL 数据过滤都有哪些方法？\u003c/h3\u003e\u003ch4 id=\"比较操作符\"\u003e\u003ca href=\"#比较操作符\" class=\"headerlink\" title=\"比较操作符\"\u003e\u003c/a\u003e比较操作符\u003c/h4\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e运算符\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e=\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e等于\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e不等于。注释：在 SQL 的一些版本中，该操作符可被写成 !=\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e大于\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e小于\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026gt;=\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e大于等于\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;=\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e小于等于\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch4 id=\"范围操作符\"\u003e\u003ca href=\"#范围操作符\" class=\"headerlink\" title=\"范围操作符\"\u003e\u003c/a\u003e范围操作符\u003c/h4\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e运算符\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e在某个范围内\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eIN\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e指定针对某个列的多个可能值\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch4 id=\"逻辑操作符\"\u003e\u003ca href=\"#逻辑操作符\" class=\"headerlink\" title=\"逻辑操作符\"\u003e\u003c/a\u003e逻辑操作符\u003c/h4\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e运算符\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eAND\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e并且（与）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eOR\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e或者（或）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eNOT\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e否定（非）\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch4 id=\"通配符\"\u003e\u003ca href=\"#通配符\" class=\"headerlink\" title=\"通配符\"\u003e\u003c/a\u003e通配符\u003c/h4\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e运算符\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eLIKE\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e搜索某种模式\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e%\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e表示任意字符出现任意次数\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e_\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e表示任意字符出现一次\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e[]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e必须匹配指定位置的一个字符\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"07-丨什么是-SQL-函数？为什么使用-SQL-函数可能会带来问题？\"\u003e\u003ca href=\"#07-丨什么是-SQL-函数？为什么使用-SQL-函数可能会带来问题？\" class=\"headerlink\" title=\"07 丨什么是 SQL 函数？为什么使用 SQL 函数可能会带来问题？\"\u003e\u003c/a\u003e07 丨什么是 SQL 函数？为什么使用 SQL 函数可能会带来问题？\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e数学函数\u003c/li\u003e\n\u003cli\u003e字符串函数\u003c/li\u003e\n\u003cli\u003e日期函数\u003c/li\u003e\n\u003cli\u003e转换函数\u003c/li\u003e\n\u003cli\u003e聚合函数\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"08-丨什么是-SQL-的聚集函数，如何利用它们汇总表的数据？\"\u003e\u003ca href=\"#08-丨什么是-SQL-的聚集函数，如何利用它们汇总表的数据？\" class=\"headerlink\" title=\"08 丨什么是 SQL 的聚集函数，如何利用它们汇总表的数据？\"\u003e\u003c/a\u003e08 丨什么是 SQL 的聚集函数，如何利用它们汇总表的数据？\u003c/h3\u003e\u003cp\u003e聚合函数\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"center\"\u003e函 数\u003c/th\u003e\n\u003cth align=\"center\"\u003e说 明\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd align=\"center\"\u003e\u003ccode\u003eAVG()\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"center\"\u003e返回某列的平均值\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"center\"\u003e\u003ccode\u003eCOUNT()\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"center\"\u003e返回某列的行数\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"center\"\u003e\u003ccode\u003eMAX()\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"center\"\u003e返回某列的最大值\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"center\"\u003e\u003ccode\u003eMIN()\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"center\"\u003e返回某列的最小值\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"center\"\u003e\u003ccode\u003eSUM()\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"center\"\u003e返回某列值之和\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"09-丨子查询：子查询的种类都有哪些，如何提高子查询的性能？\"\u003e\u003ca href=\"#09-丨子查询：子查询的种类都有哪些，如何提高子查询的性能？\" class=\"headerlink\" title=\"09 丨子查询：子查询的种类都有哪些，如何提高子查询的性能？\"\u003e\u003c/a\u003e09 丨子查询：子查询的种类都有哪些，如何提高子查询的性能？\u003c/h3\u003e\u003cp\u003eEXISTS、IN、ANY、ALL、SOME\u003c/p\u003e\n\u003ch3 id=\"10-丨常用的-SQL-标准有哪些，在-SQL92-中是如何使用连接的？\"\u003e\u003ca href=\"#10-丨常用的-SQL-标准有哪些，在-SQL92-中是如何使用连接的？\" class=\"headerlink\" title=\"10 丨常用的 SQL 标准有哪些，在 SQL92 中是如何使用连接的？\"\u003e\u003c/a\u003e10 丨常用的 SQL 标准有哪些，在 SQL92 中是如何使用连接的？\u003c/h3\u003e\u003cp\u003e内连接（INNER JOIN）\u003c/p\u003e\n\u003cp\u003e自连接（\u003ccode\u003e=\u003c/code\u003e）\u003c/p\u003e\n\u003cp\u003e自然连接（NATURAL JOIN）\u003c/p\u003e\n\u003cp\u003e外连接（OUTER JOIN）\u003c/p\u003e\n\u003cp\u003e左连接（LEFT JOIN）\u003c/p\u003e\n\u003cp\u003e右连接（RIGHT JOIN）\u003c/p\u003e\n\u003ch3 id=\"11-丨-SQL99-是如何使用连接的，与-SQL92-的区别是什么？\"\u003e\u003ca href=\"#11-丨-SQL99-是如何使用连接的，与-SQL92-的区别是什么？\" class=\"headerlink\" title=\"11 丨 SQL99 是如何使用连接的，与 SQL92 的区别是什么？\"\u003e\u003c/a\u003e11 丨 SQL99 是如何使用连接的，与 SQL92 的区别是什么？\u003c/h3\u003e\u003ch3 id=\"12-丨视图在-SQL-中的作用是什么，它是怎样工作的？\"\u003e\u003ca href=\"#12-丨视图在-SQL-中的作用是什么，它是怎样工作的？\" class=\"headerlink\" title=\"12 丨视图在 SQL 中的作用是什么，它是怎样工作的？\"\u003e\u003c/a\u003e12 丨视图在 SQL 中的作用是什么，它是怎样工作的？\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003e视图是基于 SQL 语句的结果集的可视化的表。\u003cstrong\u003e视图是虚拟的表，本身不存储数据，也就不能对其进行索引操作\u003c/strong\u003e。对视图的操作和对普通表的操作一样。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e视图的作用：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e简化复杂的 SQL 操作，比如复杂的连接。\u003c/li\u003e\n\u003cli\u003e只使用实际表的一部分数据。\u003c/li\u003e\n\u003cli\u003e通过只给用户访问视图的权限，保证数据的安全性。\u003c/li\u003e\n\u003cli\u003e更改数据格式和表示。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"13-丨什么是存储过程，在实际项目中用得多么？\"\u003e\u003ca href=\"#13-丨什么是存储过程，在实际项目中用得多么？\" class=\"headerlink\" title=\"13 丨什么是存储过程，在实际项目中用得多么？\"\u003e\u003c/a\u003e13 丨什么是存储过程，在实际项目中用得多么？\u003c/h3\u003e\u003cp\u003e存储过程的英文是 Stored Procedure。它可以视为一组 SQL 语句的批处理。一旦存储过程被创建出来，使用它就像使用函数一样简单，我们直接通过调用存储过程名即可。\u003c/p\u003e\n\u003cp\u003e存储过程的优点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e执行效率高\u003c/strong\u003e：一次编译多次使用。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e安全性强\u003c/strong\u003e：在设定存储过程的时候可以设置对用户的使用权限，这样就和视图一样具有较强的安全性。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e可复用\u003c/strong\u003e：将代码封装，可以提高代码复用。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e性能好\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e由于是预先编译，因此具有很高的性能。\u003c/li\u003e\n\u003cli\u003e一个存储过程替代大量 T_SQL 语句 ，可以降低网络通信量，提高通信速率。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e存储过程的缺点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e可移植性差\u003c/strong\u003e：存储过程不能跨数据库移植。由于不同数据库的存储过程语法几乎都不一样，十分难以维护（不通用）。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e调试困难\u003c/strong\u003e：只有少数 DBMS 支持存储过程的调试。对于复杂的存储过程来说，开发和维护都不容易。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e版本管理困难\u003c/strong\u003e：比如数据表索引发生变化了，可能会导致存储过程失效。我们在开发软件的时候往往需要进行版本管理，但是存储过程本身没有版本控制，版本迭代更新的时候很麻烦。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e不适合高并发的场景\u003c/strong\u003e：高并发的场景需要减少数据库的压力，有时数据库会采用分库分表的方式，而且对可扩展性要求很高，在这种情况下，存储过程会变得难以维护，增加数据库的压力，显然就不适用了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e_综上，存储过程的优缺点都非常突出，是否使用一定要慎重，需要根据具体应用场景来权衡_。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"14-丨什么是事务处理，如何使用-COMMIT-和-ROLLBACK-进行操作？\"\u003e\u003ca href=\"#14-丨什么是事务处理，如何使用-COMMIT-和-ROLLBACK-进行操作？\" class=\"headerlink\" title=\"14 丨什么是事务处理，如何使用 COMMIT 和 ROLLBACK 进行操作？\"\u003e\u003c/a\u003e14 丨什么是事务处理，如何使用 COMMIT 和 ROLLBACK 进行操作？\u003c/h3\u003e\u003cp\u003eACID：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eA，也就是原子性（Atomicity）。原子的概念就是不可分割，你可以把它理解为组成物质的基本单位，也是我们进行数据处理操作的基本单位。\u003c/li\u003e\n\u003cli\u003eC，就是一致性（Consistency）。一致性指的就是数据库在进行事务操作后，会由原来的一致状态，变成另一种一致的状态。也就是说当事务提交后，或者当事务发生回滚后，数据库的完整性约束不能被破坏。\u003c/li\u003e\n\u003cli\u003eI，就是隔离性（Isolation）。它指的是每个事务都是彼此独立的，不会受到其他事务的执行影响。也就是说一个事务在提交之前，对其他事务都是不可见的。\u003c/li\u003e\n\u003cli\u003e最后一个 D，指的是持久性（Durability）。事务提交之后对数据的修改是持久性的，即使在系统出故障的情况下，比如系统崩溃或者存储介质发生故障，数据的修改依然是有效的。因为当事务完成，数据库的日志就会被更新，这时可以通过日志，让系统恢复到最后一次成功的更新状态。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e事务的控制语句：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eSTART TRANSACTION 或者 BEGIN，作用是显式开启一个事务。\u003c/li\u003e\n\u003cli\u003eCOMMIT：提交事务。当提交事务后，对数据库的修改是永久性的。\u003c/li\u003e\n\u003cli\u003eROLLBACK 或者 ROLLBACK TO [SAVEPOINT]，意为回滚事务。意思是撤销正在进行的所有没有提交的修改，或者将事务回滚到某个保存点。\u003c/li\u003e\n\u003cli\u003eSAVEPOINT：在事务中创建保存点，方便后续针对保存点进行回滚。一个事务中可以存在多个保存点。\u003c/li\u003e\n\u003cli\u003eRELEASE SAVEPOINT：删除某个保存点。\u003c/li\u003e\n\u003cli\u003eSET TRANSACTION，设置事务的隔离级别。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"15-丨初识事务隔离：隔离的级别有哪些，它们都解决了哪些异常问题？\"\u003e\u003ca href=\"#15-丨初识事务隔离：隔离的级别有哪些，它们都解决了哪些异常问题？\" class=\"headerlink\" title=\"15 丨初识事务隔离：隔离的级别有哪些，它们都解决了哪些异常问题？\"\u003e\u003c/a\u003e15 丨初识事务隔离：隔离的级别有哪些，它们都解决了哪些异常问题？\u003c/h3\u003e\u003cp\u003e事务隔离级别从低到高分别是：读未提交（READ UNCOMMITTED ）、读已提交（READ COMMITTED）、可重复读（REPEATABLE READ）和可串行化（SERIALIZABLE）。\u003c/p\u003e\n\u003ch3 id=\"16-丨游标：当我们需要逐条处理数据时，该怎么做？\"\u003e\u003ca href=\"#16-丨游标：当我们需要逐条处理数据时，该怎么做？\" class=\"headerlink\" title=\"16 丨游标：当我们需要逐条处理数据时，该怎么做？\"\u003e\u003c/a\u003e16 丨游标：当我们需要逐条处理数据时，该怎么做？\u003c/h3\u003e\u003ch3 id=\"17-丨如何使用-Python-操作-MySQL？\"\u003e\u003ca href=\"#17-丨如何使用-Python-操作-MySQL？\" class=\"headerlink\" title=\"17 丨如何使用 Python 操作 MySQL？\"\u003e\u003c/a\u003e17 丨如何使用 Python 操作 MySQL？\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch3 id=\"18-丨-SQLAlchemy：如何使用-PythonORM-框架来操作-MySQL？\"\u003e\u003ca href=\"#18-丨-SQLAlchemy：如何使用-PythonORM-框架来操作-MySQL？\" class=\"headerlink\" title=\"18 丨 SQLAlchemy：如何使用 PythonORM 框架来操作 MySQL？\"\u003e\u003c/a\u003e18 丨 SQLAlchemy：如何使用 PythonORM 框架来操作 MySQL？\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch3 id=\"19-丨基础篇总结：如何理解查询优化、通配符以及存储过程？\"\u003e\u003ca href=\"#19-丨基础篇总结：如何理解查询优化、通配符以及存储过程？\" class=\"headerlink\" title=\"19 丨基础篇总结：如何理解查询优化、通配符以及存储过程？\"\u003e\u003c/a\u003e19 丨基础篇总结：如何理解查询优化、通配符以及存储过程？\u003c/h3\u003e\u003ch2 id=\"第二章：SQL-性能优化篇\"\u003e\u003ca href=\"#第二章：SQL-性能优化篇\" class=\"headerlink\" title=\"第二章：SQL 性能优化篇\"\u003e\u003c/a\u003e第二章：SQL 性能优化篇\u003c/h2\u003e\u003ch3 id=\"20-丨当我们思考数据库调优的时候，都有哪些维度可以选择？\"\u003e\u003ca href=\"#20-丨当我们思考数据库调优的时候，都有哪些维度可以选择？\" class=\"headerlink\" title=\"20 丨当我们思考数据库调优的时候，都有哪些维度可以选择？\"\u003e\u003c/a\u003e20 丨当我们思考数据库调优的时候，都有哪些维度可以选择？\u003c/h3\u003e\u003cp\u003e我的理解：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e选择合适数据库\u003c/li\u003e\n\u003cli\u003e配置优化\u003c/li\u003e\n\u003cli\u003e硬件优化\u003c/li\u003e\n\u003cli\u003e优化表设计\u003c/li\u003e\n\u003cli\u003e优化查询\u003c/li\u003e\n\u003cli\u003e使用缓存\u003c/li\u003e\n\u003cli\u003e读写分离+分库分表\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"21-丨范式设计：数据表的范式有哪些，3NF-指的是什么？\"\u003e\u003ca href=\"#21-丨范式设计：数据表的范式有哪些，3NF-指的是什么？\" class=\"headerlink\" title=\"21 丨范式设计：数据表的范式有哪些，3NF 指的是什么？\"\u003e\u003c/a\u003e21 丨范式设计：数据表的范式有哪些，3NF 指的是什么？\u003c/h3\u003e\u003cp\u003e范式定义：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e1NF\u003c/strong\u003e：指的是数据库表中的任何属性都是原子性的，不可再分。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e2NF\u003c/strong\u003e：指的数据表里的非主属性都要和这个数据表的候选键有完全依赖关系。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e3NF\u003c/strong\u003e：在满足 2NF 的同时，对任何非主属性都不传递依赖于候选键。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBCNF\u003c/strong\u003e：在 3NF 的基础上消除了主属性对候选键的部分依赖或者传递依赖关系。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e范式化的目标是尽力减少冗余列，节省空间\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"22-丨反范式设计：3NF-有什么不足，为什么有时候需要反范式设计？\"\u003e\u003ca href=\"#22-丨反范式设计：3NF-有什么不足，为什么有时候需要反范式设计？\" class=\"headerlink\" title=\"22 丨反范式设计：3NF 有什么不足，为什么有时候需要反范式设计？\"\u003e\u003c/a\u003e22 丨反范式设计：3NF 有什么不足，为什么有时候需要反范式设计？\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e反范式化的目标是适当增加冗余列，以避免关联查询\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e范式化优点\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e更节省空间\u003c/li\u003e\n\u003cli\u003e更新操作更快\u003c/li\u003e\n\u003cli\u003e更少需要 \u003ccode\u003eDISTINCT\u003c/code\u003e 或 \u003ccode\u003eGROUP BY\u003c/code\u003e 语句\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e范式化缺点\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e增加了关联查询，而关联查询代价很高\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"23-丨索引的概览：用还是不用索引，这是一个问题\"\u003e\u003ca href=\"#23-丨索引的概览：用还是不用索引，这是一个问题\" class=\"headerlink\" title=\"23 丨索引的概览：用还是不用索引，这是一个问题\"\u003e\u003c/a\u003e23 丨索引的概览：用还是不用索引，这是一个问题\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003e索引的优缺点\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003e索引的优点\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e大大减少了服务器需要扫描的数据量\u003c/li\u003e\n\u003cli\u003e可以帮助服务器避免排序和临时表\u003c/li\u003e\n\u003cli\u003e可以将随机 I/O 变为顺序 I/O\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e索引的缺点\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e创建和维护索引要耗费时间，这会随着数据量的增加而增加。\u003c/li\u003e\n\u003cli\u003e占用额外物理空间\u003c/li\u003e\n\u003cli\u003e写操作时很可能需要更新索引，导致数据库的写操作性能降低\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e索引的适用场景\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003e适用场景\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e频繁读操作（SELECT）\u003c/li\u003e\n\u003cli\u003e表的数据量比较大\u003c/li\u003e\n\u003cli\u003e列名经常出现在 WHERE 或连接（JOIN）条件中\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e不适用场景\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e频繁写操作（INSERT/UPDATE/DELETE）\u003c/li\u003e\n\u003cli\u003e列名不经常出现在 WHERE 或连接（JOIN）条件中\u003c/li\u003e\n\u003cli\u003e索引会经常无法命中，没有意义\u003c/li\u003e\n\u003cli\u003e非常小的表（比如不到 1000 行）：简单的全表扫描更高效\u003c/li\u003e\n\u003cli\u003e特大型的表：索引的代价很高昂，可以用分区或 Nosql\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"24-丨索引的原理：我们为什么用-B-树来做索引？\"\u003e\u003ca href=\"#24-丨索引的原理：我们为什么用-B-树来做索引？\" class=\"headerlink\" title=\"24 丨索引的原理：我们为什么用 B+树来做索引？\"\u003e\u003c/a\u003e24 丨索引的原理：我们为什么用 B+树来做索引？\u003c/h3\u003e\u003cp\u003e磁盘的 I/O 操作次数对索引的使用效率至关重要。虽然传统的二叉树数据结构查找数据的效率高，但很容易增加磁盘 I/O 操作的次数，影响索引使用的效率。因此在构造索引的时候，我们更倾向于采用“矮胖”的数据结构。\u003c/p\u003e\n\u003cp\u003eB 树和 B+ 树都可以作为索引的数据结构，在 MySQL 中采用的是 B+ 树，B+ 树在查询性能上更稳定，在磁盘页大小相同的情况下，树的构造更加矮胖，所需要进行的磁盘 I/O 次数更少，更适合进行关键字的范围查询。\u003c/p\u003e\n\u003ch3 id=\"25-丨-Hash-索引的底层原理是什么？\"\u003e\u003ca href=\"#25-丨-Hash-索引的底层原理是什么？\" class=\"headerlink\" title=\"25 丨 Hash 索引的底层原理是什么？\"\u003e\u003c/a\u003e25 丨 Hash 索引的底层原理是什么？\u003c/h3\u003e\u003cp\u003eMysql 中，只有 Memory 存储引擎显示支持哈希索引。\u003c/p\u003e\n\u003cp\u003e✔️️️️️ 哈希索引的\u003cstrong\u003e优点\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e因为索引数据结构紧凑，所以\u003cstrong\u003e查询速度非常快\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e❌ 哈希索引的\u003cstrong\u003e缺点\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e只支持等值比较查询\u003c/strong\u003e - 包括 \u003ccode\u003e=\u003c/code\u003e、\u003ccode\u003eIN()\u003c/code\u003e、\u003ccode\u003e\u0026lt;=\u0026gt;\u003c/code\u003e。\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e不支持范围查询\u003c/strong\u003e，如 \u003ccode\u003eWHERE price \u0026gt; 100\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e不支持模糊查询\u003c/strong\u003e，如 \u003ccode\u003e%\u003c/code\u003e 开头。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e无法用于排序\u003c/strong\u003e - 因为 Hash 索引指向的数据是无序的，因此无法起到排序优化的作用。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e不支持联合索引的最左侧原则\u003c/strong\u003e - 对于联合索引来说，Hash 索引在计算 Hash 值的时候是将索引键合并后再一起计算 Hash 值，所以不会针对每个索引单独计算 Hash 值。因此如果用到联合索引的一个或者几个索引时，联合索引无法被利用。例如：在数据列 (A,B) 上建立哈希索引，如果查询只有数据列 A，无法使用该索引。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e不能用索引中的值来避免读取行\u003c/strong\u003e - 因为哈希索引只包含哈希值和行指针，不存储字段，所以不能使用索引中的值来避免读取行。不过，访问内存中的行的速度很快，所以大部分情况下这一点对性能影响不大。\u003c/li\u003e\n\u003cli\u003e哈希索引有\u003cstrong\u003e可能出现哈希冲突\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e出现哈希冲突时，必须遍历链表中所有的行指针，逐行比较，直到找到符合条件的行。\u003c/li\u003e\n\u003cli\u003e如果哈希冲突多的话，维护索引的代价会很高。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e提示：因为种种限制，所以哈希索引只适用于特定的场合。而一旦使用哈希索引，则它带来的性能提升会非常显著。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"26-丨索引的使用原则：如何通过索引让-SQL-查询效率最大化？\"\u003e\u003ca href=\"#26-丨索引的使用原则：如何通过索引让-SQL-查询效率最大化？\" class=\"headerlink\" title=\"26 丨索引的使用原则：如何通过索引让 SQL 查询效率最大化？\"\u003e\u003c/a\u003e26 丨索引的使用原则：如何通过索引让 SQL 查询效率最大化？\u003c/h3\u003e\u003cp\u003e✔️️️️ 什么情况\u003cstrong\u003e适用\u003c/strong\u003e索引？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e字段的数值有唯一性的限制\u003c/strong\u003e，如用户名。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e频繁作为 \u003ccode\u003eWHERE\u003c/code\u003e 条件或 \u003ccode\u003eJOIN\u003c/code\u003e 条件的字段，尤其在数据表大的情况下\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e频繁用于 \u003ccode\u003eGROUP BY\u003c/code\u003e 或 \u003ccode\u003eORDER BY\u003c/code\u003e 的字段\u003c/strong\u003e。将该字段作为索引，查询时就无需再排序了，因为 B+ 树\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDISTINCT 字段需要创建索引\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e❌ 什么情况\u003cstrong\u003e不适用\u003c/strong\u003e索引？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e频繁写操作\u003c/strong\u003e（ \u003ccode\u003eINSERT\u003c/code\u003e/\u003ccode\u003eUPDATE\u003c/code\u003e/\u003ccode\u003eDELETE\u003c/code\u003e ），也就意味着需要更新索引。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e列名不经常出现在 \u003ccode\u003eWHERE\u003c/code\u003e 或连接（\u003ccode\u003eJOIN\u003c/code\u003e）条件中\u003c/strong\u003e，也就意味着索引会经常无法命中，没有意义，还增加空间开销。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e非常小的表\u003c/strong\u003e，对于非常小的表，大部分情况下简单的全表扫描更高效。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e特大型的表\u003c/strong\u003e，建立和使用索引的代价将随之增长。可以考虑使用分区技术或 Nosql。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e索引失效的场景：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e对索引使用左模糊匹配\u003c/li\u003e\n\u003cli\u003e对索引使用表达式或函数\u003c/li\u003e\n\u003cli\u003e对索引隐式类型转换\u003c/li\u003e\n\u003cli\u003e联合索引不遵循最左匹配原则\u003c/li\u003e\n\u003cli\u003e索引列判空\u003c/li\u003e\n\u003cli\u003eWHERE 子句中的 OR 前后条件存在非索引列\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"27-丨从数据页的角度理解-B-树查询\"\u003e\u003ca href=\"#27-丨从数据页的角度理解-B-树查询\" class=\"headerlink\" title=\"27 丨从数据页的角度理解 B+树查询\"\u003e\u003c/a\u003e27 丨从数据页的角度理解 B+树查询\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e在数据库中，不论读一行，还是读多行，都是将这些行所在的页进行加载。也就是说，数据库管理存储空间的基本单位是页（Page）。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220720055715.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e一个表空间包括了一个或多个段，一个段包括了一个或多个区，一个区包括了多个页，而一个页中可以有多行记录：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e页是数据库存储的最小单位。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e区（Extent）是比页大一级的存储结构，在 InnoDB 存储引擎中，一个区会分配 64 个连续的页。因为 InnoDB 中的页大小默认是 16KB，所以一个区的大小是 64*16KB=1MB。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e段（Segment）由一个或多个区组成，区在文件系统是一个连续分配的空间（在 InnoDB 中是连续的 64 个页），不过在段中不要求区与区之间是相邻的。段是数据库中的分配单位，不同类型的数据库对象以不同的段形式存在。当我们创建数据表、索引的时候，就会相应创建对应的段，比如创建一张表时会创建一个表段，创建一个索引时会创建一个索引段。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e表空间（Tablespace）是一个逻辑容器，表空间存储的对象是段，在一个表空间中可以有一个或多个段，但是一个段只能属于一个表空间。数据库由一个或多个表空间组成，表空间从管理上可以划分为系统表空间、用户表空间、撤销表空间、临时表空间等。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"28-丨从磁盘-I-O-的角度理解-SQL-查询的成本\"\u003e\u003ca href=\"#28-丨从磁盘-I-O-的角度理解-SQL-查询的成本\" class=\"headerlink\" title=\"28 丨从磁盘 I/O 的角度理解 SQL 查询的成本\"\u003e\u003c/a\u003e28 丨从磁盘 I/O 的角度理解 SQL 查询的成本\u003c/h3\u003e\u003cp\u003e磁盘 I/O 耗时远大于内存，因此数据库会采用缓冲池的方式提升页的查找效率。\u003c/p\u003e\n\u003cp\u003eSQL 查询是一个动态的过程，从页加载的角度来看：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e位置决定效率。如果页就在数据库缓冲池中，那么效率是最高的，否则还需要从内存或者磁盘中进行读取，当然针对单个页的读取来说，如果页存在于内存中，会比在磁盘中读取效率高很多。\u003c/li\u003e\n\u003cli\u003e批量决定效率。如果我们从磁盘中对单一页进行随机读，那么效率是很低的（差不多 10ms），而采用顺序读取的方式，批量对页进行读取，平均一页的读取效率就会提升很多，甚至要快于单个页面在内存中的随机读取。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"29-丨为什么没有理想的索引？\"\u003e\u003ca href=\"#29-丨为什么没有理想的索引？\" class=\"headerlink\" title=\"29 丨为什么没有理想的索引？\"\u003e\u003c/a\u003e29 丨为什么没有理想的索引？\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch3 id=\"30-丨锁：悲观锁和乐观锁是什么？\"\u003e\u003ca href=\"#30-丨锁：悲观锁和乐观锁是什么？\" class=\"headerlink\" title=\"30 丨锁：悲观锁和乐观锁是什么？\"\u003e\u003c/a\u003e30 丨锁：悲观锁和乐观锁是什么？\u003c/h3\u003e\u003cp\u003e基于加锁方式分类，Mysql 可以分为悲观锁和乐观锁。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e悲观锁\u003c/strong\u003e - 假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作\u003cul\u003e\n\u003cli\u003e在查询完数据的时候就把事务锁起来，直到提交事务（\u003ccode\u003eCOMMIT\u003c/code\u003e）\u003c/li\u003e\n\u003cli\u003e实现方式：\u003cstrong\u003e使用数据库中的锁机制\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e乐观锁\u003c/strong\u003e - 假设最好的情况——每次访问数据时，都假设数据不会被其他线程修改，不必加锁。只在更新的时候，判断一下在此期间是否有其他线程更新该数据。\u003cul\u003e\n\u003cli\u003e实现方式：\u003cstrong\u003e更新数据时，先使用版本号机制或 CAS 算法检查数据是否被修改\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"31-丨为什么大部分-RDBMS-都会支持-MVCC？\"\u003e\u003ca href=\"#31-丨为什么大部分-RDBMS-都会支持-MVCC？\" class=\"headerlink\" title=\"31 丨为什么大部分 RDBMS 都会支持 MVCC？\"\u003e\u003c/a\u003e31 丨为什么大部分 RDBMS 都会支持 MVCC？\u003c/h3\u003e\u003cp\u003eMVCC 的核心就是 Undo Log+ Read View\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUndo Log 保存数据的历史版本，实现多版本的管理；\u003c/li\u003e\n\u003cli\u003e通过 Read View 原则来决定数据是否显示；\u003c/li\u003e\n\u003cli\u003e时针对不同的隔离级别，Read View 的生成策略不同，也就实现了不同的隔离级别\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"32-丨查询优化器是如何工作的？\"\u003e\u003ca href=\"#32-丨查询优化器是如何工作的？\" class=\"headerlink\" title=\"32 丨查询优化器是如何工作的？\"\u003e\u003c/a\u003e32 丨查询优化器是如何工作的？\u003c/h3\u003e\u003cp\u003eMySQL 整个查询执行过程，总的来说分为 6 个步骤，分别对应 6 个组件：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e连接器\u003c/strong\u003e - 客户端和 MySQL 服务器建立连接；连接器负责跟客户端建立连接、获取权限、维持和管理连接。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e查询缓存\u003c/strong\u003e - MySQL 服务器首先检查查询缓存，如果命中缓存，则立刻返回结果。否则进入下一阶段。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e分析器\u003c/strong\u003e - MySQL 服务器进行 SQL 分析：语法分析、词法分析。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e优化器\u003c/strong\u003e - MySQL 服务器用优化器生成对应的执行计划。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e执行器\u003c/strong\u003e - MySQL 服务器根据执行计划，调用存储引擎的 API 来执行查询。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e返回结果\u003c/strong\u003e - MySQL 服务器将结果返回给客户端，同时缓存查询结果。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"33-丨如何使用性能分析工具定位-SQL-执行慢的原因？\"\u003e\u003ca href=\"#33-丨如何使用性能分析工具定位-SQL-执行慢的原因？\" class=\"headerlink\" title=\"33 丨如何使用性能分析工具定位 SQL 执行慢的原因？\"\u003e\u003c/a\u003e33 丨如何使用性能分析工具定位 SQL 执行慢的原因？\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220720093823.png\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"34-丨答疑篇：关于索引以及缓冲池的一些解惑\"\u003e\u003ca href=\"#34-丨答疑篇：关于索引以及缓冲池的一些解惑\" class=\"headerlink\" title=\"34 丨答疑篇：关于索引以及缓冲池的一些解惑\"\u003e\u003c/a\u003e34 丨答疑篇：关于索引以及缓冲池的一些解惑\u003c/h3\u003e\u003ch3 id=\"35-丨数据库主从同步的作用是什么，如何解决数据不一致问题？\"\u003e\u003ca href=\"#35-丨数据库主从同步的作用是什么，如何解决数据不一致问题？\" class=\"headerlink\" title=\"35 丨数据库主从同步的作用是什么，如何解决数据不一致问题？\"\u003e\u003c/a\u003e35 丨数据库主从同步的作用是什么，如何解决数据不一致问题？\u003c/h3\u003e\u003cp\u003eMysql 支持两种复制：基于行的复制和基于语句的复制。\u003c/p\u003e\n\u003cp\u003e这两种方式都是在主库上记录二进制日志，然后在从库重放日志的方式来实现异步的数据复制。这意味着：复制过程存在时延，这段时间内，主从数据可能不一致。\u003c/p\u003e\n\u003cp\u003e主要涉及三个线程：binlog 线程、I/O 线程和 SQL 线程。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ebinlog 线程\u003c/strong\u003e ：负责将主服务器上的数据更改写入二进制文件（binlog）中。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eI/O 线程\u003c/strong\u003e ：负责从主服务器上读取二进制日志文件，并写入从服务器的中继日志中。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSQL 线程\u003c/strong\u003e ：负责读取中继日志并重放其中的 SQL 语句。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/database/mysql/master-slave.png\"/\u003e\n\u003c/div\u003e\n\n\u003cp\u003e如何解决主从同步时的数据一致性问题？\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e异步复制\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e异步模式就是客户端提交 COMMIT 之后不需要等从库返回任何结果，而是直接将结果返回给客户端，这样做的好处是不会影响主库写的效率，但可能会存在主库宕机，而 Binlog 还没有同步到从库的情况，也就是此时的主库和从库数据不一致。这时候从从库中选择一个作为新主，那么新主则可能缺少原来主服务器中已提交的事务。所以，这种复制模式下的数据一致性是最弱的。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e半异步复制\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e原理是在客户端提交 COMMIT 之后不直接将结果返回给客户端，而是等待至少有一个从库接收到了 Binlog，并且写入到中继日志中，再返回给客户端。这样做的好处就是提高了数据的一致性，当然相比于异步复制来说，至少多增加了一个网络连接的延迟，降低了主库写的效率。——其实是一种两阶段提交的思想。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e组复制\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e这种复制技术是基于 Paxos 的状态机复制。\u003c/p\u003e\n\u003cp\u003e将多个节点共同组成一个复制组，在执行读写（RW）事务的时候，需要通过一致性协议层（Consensus 层）的同意，也就是读写事务想要进行提交，必须要经过组里“大多数人”（对应 Node 节点）的同意，大多数指的是同意的节点数量需要大于（N/2+1），这样才可以进行提交，而不是原发起方一个说了算。而针对只读（RO）事务则不需要经过组内同意，直接 COMMIT 即可。\u003c/p\u003e\n\u003cp\u003e在一个复制组内有多个节点组成，它们各自维护了自己的数据副本，并且在一致性协议层实现了原子消息和全局有序消息，从而保证组内数据的一致性。\u003c/p\u003e\n\u003ch3 id=\"36-丨数据库没有备份，没有使用-Binlog-的情况下，如何恢复数据？\"\u003e\u003ca href=\"#36-丨数据库没有备份，没有使用-Binlog-的情况下，如何恢复数据？\" class=\"headerlink\" title=\"36 丨数据库没有备份，没有使用 Binlog 的情况下，如何恢复数据？\"\u003e\u003c/a\u003e36 丨数据库没有备份，没有使用 Binlog 的情况下，如何恢复数据？\u003c/h3\u003e\u003ch3 id=\"37-丨-SQL-注入：你的-SQL-是如何被注入的？\"\u003e\u003ca href=\"#37-丨-SQL-注入：你的-SQL-是如何被注入的？\" class=\"headerlink\" title=\"37 丨 SQL 注入：你的 SQL 是如何被注入的？\"\u003e\u003c/a\u003e37 丨 SQL 注入：你的 SQL 是如何被注入的？\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eSQL 注入攻击（SQL injection）\u003c/strong\u003e，是发生于应用程序之数据层的安全漏洞。简而言之，是在输入的字符串之中注入 SQL 指令，在设计不良的程序当中忽略了检查，那么这些注入进去的指令就会被数据库服务器误认为是正常的 SQL 指令而运行，因此遭到破坏或是入侵。\u003c/p\u003e\n\u003cp\u003e攻击示例：\u003c/p\u003e\n\u003cp\u003e考虑以下简单的登录表单：\u003c/p\u003e\n\u003cfigure class=\"highlight html\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eform\u003c/span\u003e \u003cspan class=\"attr\"\u003eaction\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;/login\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003emethod\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;POST\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eUsername: \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003einput\u003c/span\u003e \u003cspan class=\"attr\"\u003etype\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;text\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003ename\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e /\u0026gt;\u003c/span\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePassword: \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003einput\u003c/span\u003e \u003cspan class=\"attr\"\u003etype\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;password\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003ename\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;password\u0026#34;\u003c/span\u003e /\u0026gt;\u003c/span\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003einput\u003c/span\u003e \u003cspan class=\"attr\"\u003etype\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;submit\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003evalue\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;登陆\u0026#34;\u003c/span\u003e /\u0026gt;\u003c/span\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e我们的处理里面的 SQL 可能是这样的：\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eusername:\u003cspan class=\"operator\"\u003e=\u003c/span\u003er.Form.Get(\u0026#34;username\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epassword:\u003cspan class=\"operator\"\u003e=\u003c/span\u003er.Form.Get(\u0026#34;password\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003esql\u003c/span\u003e:\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u0026#34;SELECT * FROM user WHERE username=\u0026#39;\u0026#34;\u003cspan class=\"operator\"\u003e+\u003c/span\u003eusername\u003cspan class=\"operator\"\u003e+\u003c/span\u003e\u0026#34;\u0026#39; AND password=\u0026#39;\u0026#34;\u003cspan class=\"operator\"\u003e+\u003c/span\u003epassword\u003cspan class=\"operator\"\u003e+\u003c/span\u003e\u0026#34;\u0026#39;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果用户的输入的用户名如下，密码任意\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003emyuser\u003cspan class=\"string\"\u003e\u0026#39; or \u0026#39;\u003c/span\u003efoo\u003cspan class=\"string\"\u003e\u0026#39; = \u0026#39;\u003c/span\u003efoo\u003cspan class=\"string\"\u003e\u0026#39; --\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e那么我们的 SQL 变成了如下所示：\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"operator\"\u003e*\u003c/span\u003e \u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e \u003cspan class=\"keyword\"\u003euser\u003c/span\u003e \u003cspan class=\"keyword\"\u003eWHERE\u003c/span\u003e username\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#39;myuser\u0026#39;\u003c/span\u003e \u003cspan class=\"keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#39;foo\u0026#39;\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#39;foo\u0026#39;\u003c/span\u003e \u003cspan class=\"comment\"\u003e--\u0026#39;\u0026#39; AND password=\u0026#39;xxx\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在 SQL 里面 \u003ccode\u003e--\u003c/code\u003e 是注释标记，所以查询语句会在此中断。这就让攻击者在不知道任何合法用户名和密码的情况下成功登录了。\u003c/p\u003e\n\u003cp\u003e对于 MSSQL 还有更加危险的一种 SQL 注入，就是控制系统，下面这个可怕的例子将演示如何在某些版本的 MSSQL 数据库上执行系统命令。\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003esql\u003c/span\u003e:\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u0026#34;SELECT * FROM products WHERE name LIKE \u0026#39;%\u0026#34;\u003cspan class=\"operator\"\u003e+\u003c/span\u003eprod\u003cspan class=\"operator\"\u003e+\u003c/span\u003e\u0026#34;%\u0026#39;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eDb.Exec(\u003cspan class=\"keyword\"\u003esql\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果攻击提交 \u003ccode\u003ea%\u0026#39; exec master..xp_cmdshell \u0026#39;net user test testpass /ADD\u0026#39; --\u003c/code\u003e 作为变量 prod 的值，那么 sql 将会变成\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003esql\u003c/span\u003e:\u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u0026#34;SELECT * FROM products WHERE name LIKE \u0026#39;%a%\u0026#39; exec master..xp_cmdshell \u0026#39;net user test testpass /ADD\u0026#39;--%\u0026#39;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eMSSQL 服务器会执行这条 SQL 语句，包括它后面那个用于向系统添加新用户的命令。如果这个程序是以 sa 运行而 MSSQLSERVER 服务又有足够的权限的话，攻击者就可以获得一个系统帐号来访问主机了。\u003c/p\u003e\n\u003cp\u003e虽然以上的例子是针对某一特定的数据库系统的，但是这并不代表不能对其它数据库系统实施类似的攻击。针对这种安全漏洞，只要使用不同方法，各种数据库都有可能遭殃。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e攻击手段和目的\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e数据表中的数据外泄，例如个人机密数据，账户数据，密码等。\u003c/li\u003e\n\u003cli\u003e数据结构被黑客探知，得以做进一步攻击（例如 \u003ccode\u003eSELECT * FROM sys.tables\u003c/code\u003e）。\u003c/li\u003e\n\u003cli\u003e数据库服务器被攻击，系统管理员账户被窜改（例如 \u003ccode\u003eALTER LOGIN sa WITH PASSWORD=\u0026#39;xxxxxx\u0026#39;\u003c/code\u003e）。\u003c/li\u003e\n\u003cli\u003e获取系统较高权限后，有可能得以在网页加入恶意链接、恶意代码以及 XSS 等。\u003c/li\u003e\n\u003cli\u003e经由数据库服务器提供的操作系统支持，让黑客得以修改或控制操作系统（例如 xp_cmdshell “net stop iisadmin”可停止服务器的 IIS 服务）。\u003c/li\u003e\n\u003cli\u003e破坏硬盘数据，瘫痪全系统（例如 xp_cmdshell “FORMAT C:”）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e应对手段\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e使用参数化查询\u003c/strong\u003e - 建议使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到 SQL 语句中，即不要直接拼接 SQL 语句。例如使用 database/sql 里面的查询函数 \u003ccode\u003ePrepare\u003c/code\u003e 和 \u003ccode\u003eQuery\u003c/code\u003e ，或者 \u003ccode\u003eExec(query string, args ...interface{})\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e单引号转换\u003c/strong\u003e - 在组合 SQL 字符串时，先针对所传入的参数进行字符替换（将单引号字符替换为连续 2 个单引号字符）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"第三章：认识-DBMS\"\u003e\u003ca href=\"#第三章：认识-DBMS\" class=\"headerlink\" title=\"第三章：认识 DBMS\"\u003e\u003c/a\u003e第三章：认识 DBMS\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e内容对我意义不大，略\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"38-丨如何在-Excel-中使用-SQL-语言？\"\u003e\u003ca href=\"#38-丨如何在-Excel-中使用-SQL-语言？\" class=\"headerlink\" title=\"38 丨如何在 Excel 中使用 SQL 语言？\"\u003e\u003c/a\u003e38 丨如何在 Excel 中使用 SQL 语言？\u003c/h3\u003e\u003ch3 id=\"39-丨-WebSQL：如何在-H5-中存储一个本地数据库？\"\u003e\u003ca href=\"#39-丨-WebSQL：如何在-H5-中存储一个本地数据库？\" class=\"headerlink\" title=\"39 丨 WebSQL：如何在 H5 中存储一个本地数据库？\"\u003e\u003c/a\u003e39 丨 WebSQL：如何在 H5 中存储一个本地数据库？\u003c/h3\u003e\u003ch3 id=\"40-丨-SQLite：为什么微信用-SQLite-存储聊天记录？\"\u003e\u003ca href=\"#40-丨-SQLite：为什么微信用-SQLite-存储聊天记录？\" class=\"headerlink\" title=\"40 丨 SQLite：为什么微信用 SQLite 存储聊天记录？\"\u003e\u003c/a\u003e40 丨 SQLite：为什么微信用 SQLite 存储聊天记录？\u003c/h3\u003e\u003ch3 id=\"41-丨初识-Redis：Redis-为什么会这么快？\"\u003e\u003ca href=\"#41-丨初识-Redis：Redis-为什么会这么快？\" class=\"headerlink\" title=\"41 丨初识 Redis：Redis 为什么会这么快？\"\u003e\u003c/a\u003e41 丨初识 Redis：Redis 为什么会这么快？\u003c/h3\u003e\u003ch3 id=\"42-丨如何使用-Redis-来实现多用户抢票问题\"\u003e\u003ca href=\"#42-丨如何使用-Redis-来实现多用户抢票问题\" class=\"headerlink\" title=\"42 丨如何使用 Redis 来实现多用户抢票问题\"\u003e\u003c/a\u003e42 丨如何使用 Redis 来实现多用户抢票问题\u003c/h3\u003e\u003ch3 id=\"43-丨如何使用-Redis-搭建玩家排行榜？\"\u003e\u003ca href=\"#43-丨如何使用-Redis-搭建玩家排行榜？\" class=\"headerlink\" title=\"43 丨如何使用 Redis 搭建玩家排行榜？\"\u003e\u003c/a\u003e43 丨如何使用 Redis 搭建玩家排行榜？\u003c/h3\u003e\u003ch3 id=\"44-丨-DBMS-篇总结和答疑：用-SQLite-做词云\"\u003e\u003ca href=\"#44-丨-DBMS-篇总结和答疑：用-SQLite-做词云\" class=\"headerlink\" title=\"44 丨 DBMS 篇总结和答疑：用 SQLite 做词云\"\u003e\u003c/a\u003e44 丨 DBMS 篇总结和答疑：用 SQLite 做词云\u003c/h3\u003e\u003ch2 id=\"第四章：SQL-项目实战\"\u003e\u003ca href=\"#第四章：SQL-项目实战\" class=\"headerlink\" title=\"第四章：SQL 项目实战\"\u003e\u003c/a\u003e第四章：SQL 项目实战\u003c/h2\u003e\u003ch3 id=\"45-丨数据清洗：如何使用-SQL-对数据进行清洗？\"\u003e\u003ca href=\"#45-丨数据清洗：如何使用-SQL-对数据进行清洗？\" class=\"headerlink\" title=\"45 丨数据清洗：如何使用 SQL 对数据进行清洗？\"\u003e\u003c/a\u003e45 丨数据清洗：如何使用 SQL 对数据进行清洗？\u003c/h3\u003e\u003cp\u003eSQL 可以帮我们进行数据处理，总的来说可以分成 OLTP 和 OLAP 两种方式。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOLTP\u003c/strong\u003e：称之为\u003cstrong\u003e联机事务处理\u003c/strong\u003e。对数据进行增删改查，SQL 查询优化，事务处理等就属于 OLTP 的范畴。它对实时性要求高，需要将用户的数据有效地存储到数据库中，同时有时候针对互联网应用的需求，我们还需要设置数据库的主从架构保证数据库的高并发和高可用性。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOLAP\u003c/strong\u003e：称之为\u003cstrong\u003e联机分析处理\u003c/strong\u003e。它是对已经存储在数据库中的数据进行分析，帮我们得出报表，指导业务。它对数据的实时性要求不高，但数据量往往很大，存储在数据库（数据仓库）中的数据可能还存在数据质量的问题，比如数据重复、数据中有缺失值，或者单位不统一等，因此在进行数据分析之前，首要任务就是对收集的数据进行清洗，从而保证数据质量。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"46-丨数据集成：如何对各种数据库进行集成和转换？\"\u003e\u003ca href=\"#46-丨数据集成：如何对各种数据库进行集成和转换？\" class=\"headerlink\" title=\"46 丨数据集成：如何对各种数据库进行集成和转换？\"\u003e\u003c/a\u003e46 丨数据集成：如何对各种数据库进行集成和转换？\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220720142031.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eETL 是英文 Extract、Transform 和 Load 的缩写，也就是将数据从不同的数据源进行抽取，然后通过交互转换，最终加载到目的地的过程。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在 Extract 数据抽取这个过程中，需要做大量的工作，我们需要了解企业分散在不同地方的数据源都采用了哪种 DBMS，还需要了解这些数据源存放的数据结构等，是结构化数据，还是非结构化数据。在抽取中，我们也可以采用全量抽取和增量抽取两种方式。相比于全量抽取，增量抽取使用得更为广泛，它可以帮我们动态捕捉数据源的数据变化，并进行同步更新。\u003c/li\u003e\n\u003cli\u003e在 Transform 数据转换的过程中，我们可以使用一些数据转换的组件，比如说数据字段的映射、数据清洗、数据验证和数据过滤等，这些模块可以像是在流水线上进行作业一样，帮我们完成各种数据转换的需求，从而将不同质量，不同规范的数据进行统一。\u003c/li\u003e\n\u003cli\u003e在 Load 数据加载的过程中，我们可以将转换之后的数据加载到目的地，如果目标是 RDBMS，我们可以直接通过 SQL 进行加载，或者使用批量加载的方式进行加载。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"47-丨如何利用-SQL-对零售数据进行分析？\"\u003e\u003ca href=\"#47-丨如何利用-SQL-对零售数据进行分析？\" class=\"headerlink\" title=\"47 丨如何利用 SQL 对零售数据进行分析？\"\u003e\u003c/a\u003e47 丨如何利用 SQL 对零售数据进行分析？\u003c/h3\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch1 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h1\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/192\"\u003eSQL 必知必会\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-07-16T02:46:05Z",
  "Author": "钝悟 ◾ Dunwu"
}