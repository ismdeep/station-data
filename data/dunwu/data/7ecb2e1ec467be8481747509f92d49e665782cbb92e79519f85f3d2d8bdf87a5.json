{
  "Source": "dunwu",
  "Title": "Java 面向对象",
  "Link": "https://dunwu.github.io/blog/pages/3e1661/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Java-面向对象\"\u003e\u003ca href=\"#Java-面向对象\" class=\"headerlink\" title=\"Java 面向对象\"\u003e\u003c/a\u003eJava 面向对象\u003c/h1\u003e\u003cblockquote\u003e\n\u003cp\u003e在\u003ca href=\"02.Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.md\"\u003eJava 基本数据类型\u003c/a\u003e 中我们了解 Java 中支持的基本数据类型（值类型）。本文开始讲解 Java 中重要的引用类型——类。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"面向对象\"\u003e\u003ca href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"\u003e\u003c/a\u003e面向对象\u003c/h2\u003e\u003cp\u003e每种编程语言，都有自己的操纵内存中元素的方式。\u003c/p\u003e\n\u003cp\u003eJava 中提供了\u003ca href=\"https://dunwu.github.io/waterdrop/pages/55d693/\"\u003e基本数据类型\u003c/a\u003e，但这还不能满足编写程序时，需要抽象更加复杂数据类型的需要。因此，Java 中，允许开发者通过类（类的机制下面会讲到）创建自定义类型。\u003c/p\u003e\n\u003cp\u003e有了自定义类型，那么数据类型自然会千变万化，所以，必须要有一定的机制，使得它们仍然保持一些必要的、通用的特性。\u003c/p\u003e\n\u003cp\u003eJava 世界有一句名言：一切皆为对象。这句话，你可能第一天学 Java 时，就听过了。这不仅仅是一句口号，也体现在 Java 的设计上。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e首先，所有 Java 类都继承自 \u003ccode\u003eObject\u003c/code\u003e 类（从这个名字，就可见一斑）。\u003c/li\u003e\n\u003cli\u003e几乎所有 Java 对象初始化时，都要使用 \u003ccode\u003enew\u003c/code\u003e 创建对象（\u003ca href=\"https://dunwu.github.io/waterdrop/pages/55d693/\"\u003e基本数据类型\u003c/a\u003e、String、枚举特殊处理），对象存储在堆中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 下面两\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003es\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;abc\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003es\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eString\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;abc\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e其中，\u003ccode\u003eString s\u003c/code\u003e 定义了一个名为 s 的引用，它指向一个 \u003ccode\u003eString\u003c/code\u003e 类型的对象，而实际的对象是 \u003ccode\u003e“abc”\u003c/code\u003e 字符串。这就像是，使用遥控器（引用）来操纵电视机（对象）。\u003c/p\u003e\n\u003cp\u003e与 C/C++ 这类语言不同，程序员只需要通过 \u003ccode\u003enew\u003c/code\u003e 创建一个对象，但不必负责销毁或结束一个对象。负责运行 Java 程序的 Java 虚拟机有一个垃圾回收器，它会监视 \u003ccode\u003enew\u003c/code\u003e 创建的对象，一旦发现对象不再被引用，则会释放对象的内存空间。\u003c/p\u003e\n\u003ch3 id=\"封装\"\u003e\u003ca href=\"#封装\" class=\"headerlink\" title=\"封装\"\u003e\u003c/a\u003e封装\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e封装（Encapsulation）是指一种将抽象性函式接口的实现细节部份包装、隐藏起来的方法。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e封装最主要的作用在于我们能修改自己的实现代码，而不用修改那些调用我们代码的程序片段。\u003c/p\u003e\n\u003cp\u003e适当的封装可以让程式码更容易理解与维护，也加强了程式码的安全性。\u003c/p\u003e\n\u003cp\u003e封装的优点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e良好的封装能够减少耦合。\u003c/li\u003e\n\u003cli\u003e类内部的结构可以自由修改。\u003c/li\u003e\n\u003cli\u003e可以对成员变量进行更精确的控制。\u003c/li\u003e\n\u003cli\u003e隐藏信息，实现细节。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e实现封装的步骤：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e修改属性的可见性来限制对属性的访问（一般限制为 private）。\u003c/li\u003e\n\u003cli\u003e对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"继承\"\u003e\u003ca href=\"#继承\" class=\"headerlink\" title=\"继承\"\u003e\u003c/a\u003e继承\u003c/h3\u003e\u003cp\u003e继承是 java 面向对象编程技术的一块基石，因为它允许创建分等级层次的类。\u003c/p\u003e\n\u003cp\u003e继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。\u003c/p\u003e\n\u003cp\u003e现实中的例子：\u003c/p\u003e\n\u003cp\u003e狗和鸟都是动物。如果将狗、鸟作为类，它们可以继承动物类。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/1552641712126.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e类的继承形式：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eclass 父类 {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eclass 子类 extends 父类 {}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"继承类型\"\u003e\u003ca href=\"#继承类型\" class=\"headerlink\" title=\"继承类型\"\u003e\u003c/a\u003e继承类型\u003c/h4\u003e\u003cp\u003e\u003cimg src=\"http://www.runoob.com/wp-content/uploads/2013/12/types_of_inheritance.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch4 id=\"继承的特性\"\u003e\u003ca href=\"#继承的特性\" class=\"headerlink\" title=\"继承的特性\"\u003e\u003c/a\u003e继承的特性\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e子类可以继承父类的属性和方法。需要注意的是，构造方法除外，构造方法只能被调用，而不能被继承。\u003c/li\u003e\n\u003cli\u003e子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。\u003c/li\u003e\n\u003cli\u003e子类可以用自己的方式实现父类的方法。\u003c/li\u003e\n\u003cli\u003eJava 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 A 类继承 B 类，B 类继承 C 类，所以按照关系就是 C 类是 B 类的父类，B 类是 A 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。\u003c/li\u003e\n\u003cli\u003e提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"继承关键字\"\u003e\u003ca href=\"#继承关键字\" class=\"headerlink\" title=\"继承关键字\"\u003e\u003c/a\u003e继承关键字\u003c/h4\u003e\u003cp\u003e继承可以使用 \u003ccode\u003eextends\u003c/code\u003e 和 \u003ccode\u003eimplements\u003c/code\u003e 这两个关键字来实现继承，而且所有的类都是继承于 \u003ccode\u003ejava.lang.Object\u003c/code\u003e，当一个类没有继承的两个关键字，则默认继承 \u003ccode\u003eObject\u003c/code\u003e（这个类在 \u003cstrong\u003e\u003ccode\u003ejava.lang\u003c/code\u003e\u003c/strong\u003e 包中，所以不需要 **\u003ccode\u003eimport\u003c/code\u003e**）祖先类。\u003c/p\u003e\n\u003ch3 id=\"多态\"\u003e\u003ca href=\"#多态\" class=\"headerlink\" title=\"多态\"\u003e\u003c/a\u003e多态\u003c/h3\u003e\u003cp\u003e刚开始学习面向对象编程时，容易被各种术语弄得云里雾里。所以，很多人会死记硬背书中对于术语的定义。\u003c/p\u003e\n\u003cp\u003e但是，随着应用和理解的深入，应该会渐渐有更进一步的认识，将其融汇贯通的理解。\u003c/p\u003e\n\u003cp\u003e学习类之前，先让我们思考一个问题：Java 中为什么要引入类机制，设计的初衷是什么？\u003c/p\u003e\n\u003cp\u003eJava 中提供的基本数据类型，只能表示单一的数值，这用于数值计算，还 OK。但是，如果要抽象模拟现实中更复杂的事物，则无法做到。\u003c/p\u003e\n\u003cp\u003e试想，如果要让你抽象狗的数据模型，怎么做？狗有眼耳口鼻等器官，有腿，狗有大小，毛色，这些都是它的状态，狗会跑、会叫、会吃东西，这些是它的行为。\u003c/p\u003e\n\u003cp\u003e类的引入，就是为了抽象这种相对复杂的事物。\u003c/p\u003e\n\u003cp\u003e对象是用于计算机语言对问题域中事物的描述。\u003cstrong\u003e对象通过方法和属性来分别描述事物所具有的行为和状态。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e类是用于描述同一类的对象的一个抽象的概念，类中定义了这一类对象所具有的行为和状态。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e类可以看成是创建 Java 对象的模板。\u003c/p\u003e\n\u003cp\u003e什么是方法？扩展阅读：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.zhihu.com/question/20275578/answer/26577791\"\u003e面向对象编程的弊端是什么？ - invalid s 的回答\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"类\"\u003e\u003ca href=\"#类\" class=\"headerlink\" title=\"类\"\u003e\u003c/a\u003e类\u003c/h2\u003e\u003cp\u003e与大多数面向对象编程语言一样，Java 使用 \u003ccode\u003eclass\u003c/code\u003e （类）关键字来表示自定义类型。自定义类型是为了更容易抽象现实事物。\u003c/p\u003e\n\u003cp\u003e在一个类中，可以设置一静一动两种元素：属性（静）和方法（动）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e属性（有的人喜欢称为成员、字段）\u003c/strong\u003e - 属性抽象的是事物的状态。类属性可以是任何类型的对象。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e方法（有的人喜欢称为函数）\u003c/strong\u003e - 方法抽象的是事物的行为。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e类的形式如下：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/1552640231731.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"方法\"\u003e\u003ca href=\"#方法\" class=\"headerlink\" title=\"方法\"\u003e\u003c/a\u003e方法\u003c/h2\u003e\u003ch3 id=\"方法定义\"\u003e\u003ca href=\"#方法定义\" class=\"headerlink\" title=\"方法定义\"\u003e\u003c/a\u003e方法定义\u003c/h3\u003e\u003cfigure class=\"highlight lasso\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e修饰符 返回值类型 方法名(参数类型 参数名){\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"params\"\u003e...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    方法体\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"params\"\u003e...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e 返回值;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e方法包含一个方法头和一个方法体。下面是一个方法的所有部分：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e修饰符：\u003c/strong\u003e修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e返回值类型 ：\u003c/strong\u003e方法可能有返回值。如果没有返回值，这种情况下，返回值类型应设为 void。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e方法名：\u003c/strong\u003e是方法的实际名称。方法名和参数表共同构成方法签名。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e参数类型：\u003c/strong\u003e参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e方法体：\u003c/strong\u003e方法体包含具体的语句，定义该方法的功能。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e示例：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003eadd\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e x, \u003cspan class=\"type\"\u003eint\u003c/span\u003e y)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e x + y;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"方法调用\"\u003e\u003ca href=\"#方法调用\" class=\"headerlink\" title=\"方法调用\"\u003e\u003c/a\u003e方法调用\u003c/h3\u003e\u003cp\u003eJava 支持两种调用方法的方式，根据方法是否返回值来选择。\u003c/p\u003e\n\u003cp\u003e当程序调用一个方法时，程序的控制权交给了被调用的方法。当被调用方法的返回语句执行或者到达方法体闭括号时候交还控制权给程序。\u003c/p\u003e\n\u003cp\u003e当方法返回一个值的时候，方法调用通常被当做一个值。例如：\u003c/p\u003e\n\u003cfigure class=\"highlight apache\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003eint\u003c/span\u003e larger = max(\u003cspan class=\"number\"\u003e30\u003c/span\u003e, \u003cspan class=\"number\"\u003e40\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果方法返回值是 void，方法调用一定是一条语句。例如，方法 println 返回 void。下面的调用是个语句：\u003c/p\u003e\n\u003cfigure class=\"highlight pgsql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSystem\u003c/span\u003e.\u003cspan class=\"keyword\"\u003eout\u003c/span\u003e.println(\u0026#34;Hello World\u0026#34;);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"构造方法\"\u003e\u003ca href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"\u003e\u003c/a\u003e构造方法\u003c/h3\u003e\u003cp\u003e每个类都有构造方法。如果没有显式地为类定义任何构造方法，Java 编译器将会为该类提供一个默认构造方法。\u003c/p\u003e\n\u003cp\u003e在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003ePuppy\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003ePuppy\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003ePuppy\u003c/span\u003e\u003cspan class=\"params\"\u003e(String name)\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 这个构造器仅有一个参数：name\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"变量\"\u003e\u003ca href=\"#变量\" class=\"headerlink\" title=\"变量\"\u003e\u003c/a\u003e变量\u003c/h2\u003e\u003cp\u003eJava 支持的变量类型有：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e局部变量\u003c/code\u003e - 类方法中的变量。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e实例变量（也叫成员变量）\u003c/code\u003e - 类方法外的变量，不过没有 \u003ccode\u003estatic\u003c/code\u003e 修饰。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e类变量（也叫静态变量）\u003c/code\u003e - 类方法外的变量，用 \u003ccode\u003estatic\u003c/code\u003e 修饰。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e特性对比：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e局部变量\u003c/th\u003e\n\u003cth\u003e实例变量（也叫成员变量）\u003c/th\u003e\n\u003cth\u003e类变量（也叫静态变量）\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e局部变量声明在方法、构造方法或者语句块中。\u003c/td\u003e\n\u003ctd\u003e实例变量声明在方法、构造方法和语句块之外。\u003c/td\u003e\n\u003ctd\u003e类变量声明在方法、构造方法和语句块之外。并且以 static 修饰。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁。\u003c/td\u003e\n\u003ctd\u003e实例变量在对象创建的时候创建，在对象被销毁的时候销毁。\u003c/td\u003e\n\u003ctd\u003e类变量在第一次被访问时创建，在程序结束时销毁。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e局部变量没有默认值，所以必须经过初始化，才可以使用。\u003c/td\u003e\n\u003ctd\u003e实例变量具有默认值。数值型变量的默认值是 0，布尔型变量的默认值是 false，引用类型变量的默认值是 null。变量的值可以在声明时指定，也可以在构造方法中指定。\u003c/td\u003e\n\u003ctd\u003e类变量具有默认值。数值型变量的默认值是 0，布尔型变量的默认值是 false，引用类型变量的默认值是 null。变量的值可以在声明时指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e对于局部变量，如果是基本类型，会把值直接存储在栈；如果是引用类型，会把其对象存储在堆，而把这个对象的引用（指针）存储在栈。\u003c/td\u003e\n\u003ctd\u003e实例变量存储在堆。\u003c/td\u003e\n\u003ctd\u003e类变量存储在静态存储区。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e访问修饰符不能用于局部变量。\u003c/td\u003e\n\u003ctd\u003e访问修饰符可以用于实例变量。\u003c/td\u003e\n\u003ctd\u003e访问修饰符可以用于类变量。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e局部变量只在声明它的方法、构造方法或者语句块中可见。\u003c/td\u003e\n\u003ctd\u003e实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见。\u003c/td\u003e\n\u003ctd\u003e与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为 public 类型。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。\u003c/td\u003e\n\u003ctd\u003e静态变量可以通过：ClassName.VariableName 的方式访问。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e类变量除了被声明为常量外很少使用。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"变量修饰符\"\u003e\u003ca href=\"#变量修饰符\" class=\"headerlink\" title=\"变量修饰符\"\u003e\u003c/a\u003e变量修饰符\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e访问级别修饰符 - 如果变量是实例变量或类变量，可以添加访问级别修饰符（public/protected/private）\u003c/li\u003e\n\u003cli\u003e静态修饰符 - 如果变量是类变量，需要添加 static 修饰\u003c/li\u003e\n\u003cli\u003efinal - 如果变量使用 final 修饰符，就表示这是一个常量，不能被修改。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"创建对象\"\u003e\u003ca href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"\u003e\u003c/a\u003e创建对象\u003c/h3\u003e\u003cp\u003e对象是根据类创建的。在 Java 中，使用关键字 new 来创建一个新的对象。创建对象需要以下三步：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e声明\u003c/strong\u003e：声明一个对象，包括对象名称和对象类型。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e实例化\u003c/strong\u003e：使用关键字 new 来创建一个对象。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e初始化\u003c/strong\u003e：使用 new 创建对象时，会调用构造方法初始化对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight arduino\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003ePuppy\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title\"\u003ePuppy\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eString\u003c/span\u003e name)\u003c/span\u003e\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"comment\"\u003e//这个构造器仅有一个参数：name\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      System.out.\u003cspan class=\"built_in\"\u003eprintln\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;小狗的名字是 : \u0026#34;\u003c/span\u003e + name );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"type\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eString\u003c/span\u003e[] args)\u003c/span\u003e\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"comment\"\u003e// 下面的语句将创建一个Puppy对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      Puppy myPuppy = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"built_in\"\u003ePuppy\u003c/span\u003e( \u003cspan class=\"string\"\u003e\u0026#34;tommy\u0026#34;\u003c/span\u003e );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"访问实例变量和方法\"\u003e\u003ca href=\"#访问实例变量和方法\" class=\"headerlink\" title=\"访问实例变量和方法\"\u003e\u003c/a\u003e访问实例变量和方法\u003c/h3\u003e\u003cfigure class=\"highlight abnf\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e/* 实例化对象 */\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003eObjectReference\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e new Constructor()\u003cspan class=\"comment\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e/* 访问类中的变量 */\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eObjectReference.variableName\u003cspan class=\"comment\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e/* 访问类中的方法 */\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eObjectReference.methodName()\u003cspan class=\"comment\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"访问权限控制\"\u003e\u003ca href=\"#访问权限控制\" class=\"headerlink\" title=\"访问权限控制\"\u003e\u003c/a\u003e访问权限控制\u003c/h2\u003e\u003ch3 id=\"代码组织\"\u003e\u003ca href=\"#代码组织\" class=\"headerlink\" title=\"代码组织\"\u003e\u003c/a\u003e代码组织\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e当编译一个 .java 文件时，在 .java 文件中的每个类都会输出一个与类同名的 .class 文件。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eMultiClassDemo.java 示例：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMultiClass1\u003c/span\u003e {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMultiClass2\u003c/span\u003e {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMultiClass3\u003c/span\u003e {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMultiClassDemo\u003c/span\u003e {}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e执行 \u003ccode\u003ejavac MultiClassDemo.java\u003c/code\u003e 命令，本地会生成 MultiClass1.class、MultiClass2.class、MultiClass3.class、MultiClassDemo.class 四个文件。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eJava 可运行程序是由一组 .class 文件打包并压缩成的一个 .jar 文件\u003c/strong\u003e。Java 解释器负责这些文件的查找、装载和解释。\u003cstrong\u003eJava 类库实际上是一组类文件（.java 文件）。\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e其中每个文件允许有一个 public 类，以及任意数量的非 public 类\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003epublic 类名必须和 .java 文件名完全相同，包括大小写。\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e程序一般不止一个人编写，会调用系统提供的代码、第三方库中的代码、项目中其他人写的代码等，不同的人因为不同的目的可能定义同样的类名/接口名，这就是命名冲突。\u003c/p\u003e\n\u003cp\u003eJava 中为了解决命名冲突问题，提供了包（\u003ccode\u003epackage\u003c/code\u003e）和导入（\u003ccode\u003eimport\u003c/code\u003e）机制。\u003c/p\u003e\n\u003ch4 id=\"package\"\u003e\u003ca href=\"#package\" class=\"headerlink\" title=\"package\"\u003e\u003c/a\u003epackage\u003c/h4\u003e\u003cp\u003e包（\u003ccode\u003epackage\u003c/code\u003e）的原则：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e包类似于文件夹，文件放在文件夹中，类和接口则放在包中。为了便于组织，文件夹一般是一个\u003cstrong\u003e有层次的树形结构\u003c/strong\u003e，包也类似。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e包名以逗号 \u003ccode\u003e.\u003c/code\u003e 分隔，表示层次结构。\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eJava 中命名包名的一个惯例是使用域名作为前缀，因为域名是唯一的，一般按照域名的反序来定义包名，比如，域名是：apache.org，包名就以 org.apache 开头。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e包名和文件目录结构必须完全匹配。\u003c/strong\u003eJava 解释器运行过程如下：\u003cul\u003e\n\u003cli\u003e找出环境变量 CLASSPATH，作为 .class 文件的根目录。\u003c/li\u003e\n\u003cli\u003e从根目录开始，获取包名称，并将逗号 \u003ccode\u003e.\u003c/code\u003e 替换为文件分隔符（反斜杠 \u003ccode\u003e/\u003c/code\u003e），通过这个路径名称去查找 Java 类。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"import\"\u003e\u003ca href=\"#import\" class=\"headerlink\" title=\"import\"\u003e\u003c/a\u003eimport\u003c/h4\u003e\u003cp\u003e同一个包下的类之间互相引用是不需要包名的，可以直接使用。但如果类不在同一个包内，则必须要知道其所在的包，使用有两种方式：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e通过类的完全限定名\u003c/li\u003e\n\u003cli\u003e通过 import 将用到的类引入到当前类\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e通过类的完全限定名示例：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003ePackageDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e \u003cspan class=\"params\"\u003e(String[]args)\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003ejava\u003c/span\u003e.util.Date());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003ejava\u003c/span\u003e.util.Date());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e通过 \u003ccode\u003eimport\u003c/code\u003e 导入其它包的类到当前类：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e java.util.Date;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003ePackageDemo2\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eDate\u003c/span\u003e());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eDate\u003c/span\u003e());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e说明：以上两个示例比较起来，显然是 \u003ccode\u003eimport\u003c/code\u003e 方式，代码更加整洁。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e扩展阅读：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.cnblogs.com/swiftma/p/5628762.html\"\u003ehttps://www.cnblogs.com/swiftma/p/5628762.html\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"访问权限修饰关键字\"\u003e\u003ca href=\"#访问权限修饰关键字\" class=\"headerlink\" title=\"访问权限修饰关键字\"\u003e\u003c/a\u003e访问权限修饰关键字\u003c/h3\u003e\u003cp\u003e访问权限控制的等级，从最大权限到最小权限依次为：\u003c/p\u003e\n\u003cfigure class=\"highlight actionscript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u0026gt; \u003cspan class=\"keyword\"\u003eprotected\u003c/span\u003e \u0026gt; 包访问权限（没有任何关键字）\u0026gt; \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003epublic\u003c/code\u003e - 表示任何类都可以访问；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e包访问权限\u003c/code\u003e - 包访问权限，没有任何关键字。它表示当前包中的所有其他类都可以访问，但是其它包的类无法访问。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprotected\u003c/code\u003e - 表示子类可以访问，此外，同一个包内的其他类也可以访问，即使这些类不是子类。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprivate\u003c/code\u003e - 表示其它任何类都无法访问。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"接口\"\u003e\u003ca href=\"#接口\" class=\"headerlink\" title=\"接口\"\u003e\u003c/a\u003e接口\u003c/h2\u003e\u003cp\u003e接口是对行为的抽象，它是抽象方法的集合，利用接口可以达到 API 定义和实现分离的目的。\u003c/p\u003e\n\u003cp\u003e接口，不能实例化；不能包含任何非常量成员，任何 field 都是隐含着 \u003ccode\u003epublic static final\u003c/code\u003e 的意义；同时，没有非静态方法实现，也就是说要么是抽象方法，要么是静态方法。\u003c/p\u003e\n\u003cp\u003eJava 标准类库中，定义了非常多的接口，比如 \u003ccode\u003ejava.util.List\u003c/code\u003e。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"title class_\"\u003eComparable\u003c/span\u003e\u0026lt;T\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003ecompareTo\u003c/span\u003e\u003cspan class=\"params\"\u003e(T o)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"抽象类\"\u003e\u003ca href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"\u003e\u003c/a\u003e抽象类\u003c/h2\u003e\u003cp\u003e抽象类是不能实例化的类，用 \u003ccode\u003eabstract\u003c/code\u003e 关键字修饰 \u003ccode\u003eclass\u003c/code\u003e，其目的主要是代码重用。除了不能实例化，形式上和一般的 Java 类并没有太大区别，可以有一个或者多个抽象方法，也可以没有抽象方法。抽象类大多用于抽取相关 Java 类的共用方法实现或者是共同成员变量，然后通过继承的方式达到代码复用的目的。\u003c/p\u003e\n\u003cp\u003eJava 标准库中，比如 \u003ccode\u003ecollection\u003c/code\u003e 框架，很多通用部分就被抽取成为抽象类，例如 \u003ccode\u003ejava.util.AbstractList\u003c/code\u003e。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e抽象类不能被实例化(初学者很容易犯的错)，如果被实例化，就会报错，编译无法通过。只有抽象类的非抽象子类可以创建对象。\u003c/li\u003e\n\u003cli\u003e抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。\u003c/li\u003e\n\u003cli\u003e抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。\u003c/li\u003e\n\u003cli\u003e构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。\u003c/li\u003e\n\u003cli\u003e抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e书籍\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/2130190/\"\u003eJava 编程思想\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/3146174/\"\u003eJava 核心技术（卷 1）\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/4496038/\"\u003eHead First Java\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e文章\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.zhihu.com/question/20275578/answer/26577791\"\u003e面向对象编程的弊端是什么？ - invalid s 的回答\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.cnblogs.com/swiftma/p/5628762.html\"\u003ehttps://www.cnblogs.com/swiftma/p/5628762.html\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-08-06T10:20:39Z",
  "Author": "钝悟 ◾ Dunwu"
}