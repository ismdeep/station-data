{
  "Source": "dunwu",
  "Title": "《微服务架构核心 20 讲》笔记",
  "Link": "https://dunwu.github.io/blog/pages/b4661f/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"《微服务架构核心-20-讲》笔记\"\u003e\u003ca href=\"#《微服务架构核心-20-讲》笔记\" class=\"headerlink\" title=\"《微服务架构核心 20 讲》笔记\"\u003e\u003c/a\u003e《微服务架构核心 20 讲》笔记\u003c/h1\u003e\u003ch2 id=\"什么是微服务架构\"\u003e\u003ca href=\"#什么是微服务架构\" class=\"headerlink\" title=\"什么是微服务架构\"\u003e\u003c/a\u003e什么是微服务架构\u003c/h2\u003e\u003cp\u003e微服务是一种架构模式。\u003c/p\u003e\n\u003cp\u003e微服务的六个特点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一组小的服务\u003c/li\u003e\n\u003cli\u003e独立的进程\u003c/li\u003e\n\u003cli\u003e独立部署\u003c/li\u003e\n\u003cli\u003e轻量级通信\u003c/li\u003e\n\u003cli\u003e基于业务能力\u003c/li\u003e\n\u003cli\u003e无集中式管理——这里指的是可以用不同的技术栈，不同的存储\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e微服务定义\u003c/strong\u003e：基于有界上下文的、松散耦合的、面向服务的架构。\u003c/p\u003e\n\u003ch2 id=\"架构师如何权衡微服务的利弊\"\u003e\u003ca href=\"#架构师如何权衡微服务的利弊\" class=\"headerlink\" title=\"架构师如何权衡微服务的利弊\"\u003e\u003c/a\u003e架构师如何权衡微服务的利弊\u003c/h2\u003e\u003cp\u003e架构之道在于权衡利弊。\u003c/p\u003e\n\u003cp\u003e微服务架构的优点\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e强模块化边界\u003c/li\u003e\n\u003cli\u003e可独立部署\u003c/li\u003e\n\u003cli\u003e技术多样性\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e微服务架构的缺点\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e分布式系统复杂性\u003c/li\u003e\n\u003cli\u003e最终一致性\u003c/li\u003e\n\u003cli\u003e运维复杂性\u003c/li\u003e\n\u003cli\u003e测试复杂性\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e分布式系统带来的一个挑战就是取终一致性。\u003c/p\u003e\n\u003ch2 id=\"康威法则和微服务给架构师怎样的启示\"\u003e\u003ca href=\"#康威法则和微服务给架构师怎样的启示\" class=\"headerlink\" title=\"康威法则和微服务给架构师怎样的启示\"\u003e\u003c/a\u003e康威法则和微服务给架构师怎样的启示\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003e康威法则\u003c/strong\u003e：设计系统的架构受制于产生这些设计的组织的沟通结构。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220627061813.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e康威的原文中提出的各定律\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第一定律 组织沟通方式会通过系统设计表达出来\u003c/li\u003e\n\u003cli\u003e第二定律 时间再多一件事情也不可能做的完美，但总有时间做完一件事情\u003c/li\u003e\n\u003cli\u003e第三定律 线型系统和线型组织架构间有潜在的异质同态特性\u003c/li\u003e\n\u003cli\u003e第四定律 大的系统组织总是比小系统更倾向于分解\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e其中心思想实际就是\u003cstrong\u003e分而治之\u003c/strong\u003e。\u003c/p\u003e\n\u003ch2 id=\"企业应该在什么时候开始考虑引入微服务\"\u003e\u003ca href=\"#企业应该在什么时候开始考虑引入微服务\" class=\"headerlink\" title=\"企业应该在什么时候开始考虑引入微服务\"\u003e\u003c/a\u003e企业应该在什么时候开始考虑引入微服务\u003c/h2\u003e\u003cp\u003e微服务的适用性:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://blog.xyecho.com/assets/time-geekbang-microservice-core20/micro_server_4.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e微服务重在服务治理，其对于平台基础设施有较高要求，所以企业刚开始应用微服务并不一定能提高生产力。简单来说：单体服务适用于小团队；微服务适用于大团队。\u003c/p\u003e\n\u003cp\u003e何时选择微服务，在于度的把控。当研发团队人员增长到一定程度，沟通成本不断增长时，就可以考虑微服务架构了。一个经验数据是，当团队达到 100 人规模时，就可以考虑使用微服务架构了。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e罗马不是一天建成的\u003c/strong\u003e：架构是一个演进的过程，不应该一开始就将系统设计的过于复杂。\u003c/p\u003e\n\u003ch2 id=\"什么样组织架构更适合微服务\"\u003e\u003ca href=\"#什么样组织架构更适合微服务\" class=\"headerlink\" title=\"什么样组织架构更适合微服务\"\u003e\u003c/a\u003e什么样组织架构更适合微服务\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220627063405.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e左边是比较传统的组织架构。产品从左到右流程走，可能出现的问题，反馈比较慢，对业务支持比较慢。沟通成本比较大。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e右边是比较合适微服务的组织架构， 每一个团队（基于微服务的跨职能的团队），有开发，有产品，有测试，团队都支持自己的微服务。交付的产口是平台，对外提供 API 接口支持多样的业务。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220627064331.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003eDevOps 理念：谁开发的，谁构建，谁支持。\u003c/p\u003e\n\u003ch2 id=\"如何理解阿里巴巴提出的微服务\"\u003e\u003ca href=\"#如何理解阿里巴巴提出的微服务\" class=\"headerlink\" title=\"如何理解阿里巴巴提出的微服务\"\u003e\u003c/a\u003e如何理解阿里巴巴提出的微服务\u003c/h2\u003e\u003cp\u003e中台战略和微服务的关系\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://blog.xyecho.com/assets/time-geekbang-microservice-core20/micro_server_6.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e业务中台和技术中台统称为大中台，支撑业务前台。正所谓，万丈高楼平地起，中台基础越扎实，前台发展就越快。\u003c/p\u003e\n\u003cp\u003ePaaS 和 核心业务层是和微服务相关的。这一些基本都可以用微服务来实现。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eIaaS：Infrastructure-as-a-Service（基础设施即服务）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ePaaS：Platform-as-a-Service（平台即服务）\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"如何给出一个清晰简洁的服务分层方式\"\u003e\u003ca href=\"#如何给出一个清晰简洁的服务分层方式\" class=\"headerlink\" title=\"如何给出一个清晰简洁的服务分层方式\"\u003e\u003c/a\u003e如何给出一个清晰简洁的服务分层方式\u003c/h2\u003e\u003cp\u003e大致的服务分层图：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220627064948.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003eSOA（Service-Oriented Architecture）或微服务大致可分为\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e基础服务\u003c/strong\u003e：也被称为：核心领域服务、中间层服务、公共服务\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e聚合服务\u003c/strong\u003e：对基础服务的聚合，以满足业务需求，提供给外部调用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"微服务总体技术架构体系是怎么设计的\"\u003e\u003ca href=\"#微服务总体技术架构体系是怎么设计的\" class=\"headerlink\" title=\"微服务总体技术架构体系是怎么设计的\"\u003e\u003c/a\u003e微服务总体技术架构体系是怎么设计的\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220627065252.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e接入层：接入外部流量，内部做负载均衡\u003c/li\u003e\n\u003cli\u003e网关层：反向路由，限流，安全，跨横切面的功能。\u003c/li\u003e\n\u003cli\u003e业务服务层：可分为：聚合服务，基础服务\u003c/li\u003e\n\u003cli\u003e支撑服务：各种公共性的后台服务\u003c/li\u003e\n\u003cli\u003e平台服务：可以是一些管理系统\u003c/li\u003e\n\u003cli\u003e基础设施：由运维团队运维\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e其中，与微服务相关的主要有：网关层、业务服务层、支撑服务、平台服务\u003c/p\u003e\n\u003ch2 id=\"微服务最经典的三种服务发现机制\"\u003e\u003ca href=\"#微服务最经典的三种服务发现机制\" class=\"headerlink\" title=\"微服务最经典的三种服务发现机制\"\u003e\u003c/a\u003e微服务最经典的三种服务发现机制\u003c/h2\u003e\u003cp\u003e消费者（客户端）如何发现生产者（服务端），有三种模式：\u003c/p\u003e\n\u003cp\u003e（1）通过 DNS 访问 LB（负载均衡），LB 分发\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220627070054.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e（2）消费者内置 LB， 生产者将自身信息注册到注册中心上，并通过发送定时心跳来确认自身服务可用。消费者定期从注册中心拉取生产者信息\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220627070105.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e（3）结全前面两种方式， 在 Consumer 的主机上也布置一个 LB。 LB 会定期同步注册中心的信息。 运维成本比较高一点。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220627070117.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"微服务-API-服务网关（一）原理\"\u003e\u003ca href=\"#微服务-API-服务网关（一）原理\" class=\"headerlink\" title=\"微服务 API 服务网关（一）原理\"\u003e\u003c/a\u003e微服务 API 服务网关（一）原理\u003c/h2\u003e\u003cp\u003e网关用于屏蔽服务内部的逻辑，希望外部访问看到是统一的接口。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220628070638.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e网关主要的功能：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e反向代理\u003c/strong\u003e：将外部的请求换成内部调用。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e安全认证\u003c/strong\u003e：防刷、防爬虫。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e限流熔断\u003c/strong\u003e：处理可能会突发流量。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e日志监控\u003c/strong\u003e：进行访问访问审计，监控流量。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e一般不要把过多的业务逻辑写在网关当中。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220628070651.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"服务-API-服务网关（二）开源网关-Zuul\"\u003e\u003ca href=\"#服务-API-服务网关（二）开源网关-Zuul\" class=\"headerlink\" title=\"服务 API 服务网关（二）开源网关 Zuul\"\u003e\u003c/a\u003e服务 API 服务网关（二）开源网关 Zuul\u003c/h2\u003e\u003cp\u003eServlet 和 Filter Runner 过滤器：前置路由过滤器， 路由过滤器，后置路由过滤器\u003c/p\u003e\n\u003cp\u003e过滤器开发，可以通过脚本开发。开发完后上传到过滤器目录中， 被扫描后加到 Filter Runner 中。\u003c/p\u003e\n\u003cp\u003e各个 Filter 共享数据通过 Request Context 来实现。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220628070702.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e过滤链的流程：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220628070712.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"跟-Netflix-学习微服务路由发现体系\"\u003e\u003ca href=\"#跟-Netflix-学习微服务路由发现体系\" class=\"headerlink\" title=\"跟 Netflix 学习微服务路由发现体系\"\u003e\u003c/a\u003e跟 Netflix 学习微服务路由发现体系\u003c/h2\u003e\u003cp\u003enetflix 有两个比较重要的支撑服务\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务注册中心 Eureka\u003c/li\u003e\n\u003cli\u003e网关 zuul\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220628070723.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"集中式配置中心的作用和原理是什么\"\u003e\u003ca href=\"#集中式配置中心的作用和原理是什么\" class=\"headerlink\" title=\"集中式配置中心的作用和原理是什么\"\u003e\u003c/a\u003e集中式配置中心的作用和原理是什么\u003c/h2\u003e\u003cp\u003e为什么要引入配置中心呢？\u003c/p\u003e\n\u003cp\u003e配置文件中的属性不方便管理，无法动态更新，无法审计。配置中心可以解决这些问题。\u003c/p\u003e\n\u003cp\u003e什么可做配置呢？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e业务开关\u003c/li\u003e\n\u003cli\u003e调用/响应超时\u003c/li\u003e\n\u003cli\u003e限流\u003c/li\u003e\n\u003cli\u003e连接字符串\u003c/li\u003e\n\u003cli\u003e动态参数\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSvr 更新配置有两种方式：推和拉。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220628070748.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e携程的 Apollo 配置中心:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220628070805.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003egithub : \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/ctripcorp/apollo\"\u003ehttps://github.com/ctripcorp/apollo\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"微服务通讯方式-RPC-vs-REST\"\u003e\u003ca href=\"#微服务通讯方式-RPC-vs-REST\" class=\"headerlink\" title=\"微服务通讯方式 RPC vs REST\"\u003e\u003c/a\u003e微服务通讯方式 RPC vs REST\u003c/h2\u003e\u003cp\u003eRPC：远程过程调用\u003c/p\u003e\n\u003cp\u003eREST：Restful\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220628070816.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"微服务框架需要考虑哪些治理环节\"\u003e\u003ca href=\"#微服务框架需要考虑哪些治理环节\" class=\"headerlink\" title=\"微服务框架需要考虑哪些治理环节\"\u003e\u003c/a\u003e微服务框架需要考虑哪些治理环节\u003c/h2\u003e\u003cp\u003e一个公司的微服务多了，就要需要考虑服务治理：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e软负载：蓝绿发布，灰度发布\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e指标（Metrics）：服务的调用量，耗时监控\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e调用链埋点：方便快速定位问题\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e契约生成代码： 定义结构体可自动生成 json 格式， vscode 有插件。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220628070827.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e阿里巴巴微服务治理生态：Dubbo \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://dubbo.apache.org/en-us/\"\u003ehttp://dubbo.apache.org/en-us/\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"微服务监控系统分层和监控架构\"\u003e\u003ca href=\"#微服务监控系统分层和监控架构\" class=\"headerlink\" title=\"微服务监控系统分层和监控架构\"\u003e\u003c/a\u003e微服务监控系统分层和监控架构\u003c/h2\u003e\u003cp\u003e五个层次的监控：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e基础层施监控\u003c/li\u003e\n\u003cli\u003e系统层监控\u003c/li\u003e\n\u003cli\u003e应用层监控\u003cul\u003e\n\u003cli\u003eurl\u003c/li\u003e\n\u003cli\u003esevice\u003c/li\u003e\n\u003cli\u003emysql\u003c/li\u003e\n\u003cli\u003ecache 可用率\u003c/li\u003e\n\u003cli\u003e性能\u003c/li\u003e\n\u003cli\u003eqps\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e业务层监控\u003cul\u003e\n\u003cli\u003e核心指标监控\u003c/li\u003e\n\u003cli\u003e登录注册\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e端用户体验监控\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220628070913.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e日志监控：Elasticsearch\u003c/li\u003e\n\u003cli\u003emetrics 监控\u003c/li\u003e\n\u003cli\u003e健康检查\u003c/li\u003e\n\u003cli\u003e调用链监控\u003c/li\u003e\n\u003cli\u003e告警系统\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e比较典型的监控架构，大部分公司的流程\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220628070950.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e数据量比较大一般用 Kafka 作为缓冲队列。\u003c/p\u003e\n\u003cp\u003eNagios 健康检测工具。\u003c/p\u003e\n\u003cp\u003eELK：ELK 是 Elasticsearch、Logstash、Kibana 三大开源框架首字母大写简称。\u003c/p\u003e\n\u003ch2 id=\"微服务的调用链监控该如何选型\"\u003e\u003ca href=\"#微服务的调用链监控该如何选型\" class=\"headerlink\" title=\"微服务的调用链监控该如何选型\"\u003e\u003c/a\u003e微服务的调用链监控该如何选型\u003c/h2\u003e\u003cp\u003e调用链的监控　谷歌 2010 年提出来的。\u003c/p\u003e\n\u003cp\u003e通过 Span 来跟踪， RootSpan ChildSpan 跨进程时 会有 Trace di + parant span id\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220628071003.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e三个主流调用链监控系统的比较：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220628071013.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"微服务的容错限流是如何工作的\"\u003e\u003ca href=\"#微服务的容错限流是如何工作的\" class=\"headerlink\" title=\"微服务的容错限流是如何工作的\"\u003e\u003c/a\u003e微服务的容错限流是如何工作的\u003c/h2\u003e\u003cp\u003eNetfiix Hystrix 具有熔断、隔离、限流、降级的功能 。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220628071025.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e3 Cirult OPen 判断是否可以熔断， 是则执行 getFAllBack() 降级处理函数\u003c/li\u003e\n\u003cli\u003e5 run() 超时 也执行降级处理函数。\u003c/li\u003e\n\u003cli\u003e6 不成功也 执行处理函数 。\u003c/li\u003e\n\u003cli\u003eCalculate Cirult Health 就是在正常执行成功后计算是否需要熔断。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Docker-容器部署技术-持续交付流水线\"\u003e\u003ca href=\"#Docker-容器部署技术-持续交付流水线\" class=\"headerlink\" title=\"Docker 容器部署技术 \u0026amp; 持续交付流水线\"\u003e\u003c/a\u003eDocker 容器部署技术 \u0026amp; 持续交付流水线\u003c/h2\u003e\u003cp\u003edocker 容器治理就是解决：环境不一致的问题。把依赖的所有包都打在镜像中。\u003c/p\u003e\n\u003cp\u003e统一、标准化的交付流水线。\u003c/p\u003e\n\u003cp\u003eUAT 环境： User Acceptance Test （用户验收测试）\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220628071059.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e发布模式： 蓝绿布置，灰度发布（金丝雀发布）。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220628071111.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"容器集群调度和基于容器的发布体系\"\u003e\u003ca href=\"#容器集群调度和基于容器的发布体系\" class=\"headerlink\" title=\"容器集群调度和基于容器的发布体系\"\u003e\u003c/a\u003e容器集群调度和基于容器的发布体系\u003c/h2\u003e\u003cp\u003e资源调度框架 Mesos 架构\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220628071127.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e基于容器的云发布体系\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220628071152.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-06-26T10:09:46Z",
  "Author": "钝悟 ◾ Dunwu"
}