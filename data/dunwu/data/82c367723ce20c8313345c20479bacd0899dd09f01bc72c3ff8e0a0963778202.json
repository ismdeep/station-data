{
  "Source": "dunwu",
  "Title": "Java并发和容器",
  "Link": "https://dunwu.github.io/blog/pages/b067d6/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Java-并发和容器\"\u003e\u003ca href=\"#Java-并发和容器\" class=\"headerlink\" title=\"Java 并发和容器\"\u003e\u003c/a\u003eJava 并发和容器\u003c/h1\u003e\u003ch2 id=\"同步容器\"\u003e\u003ca href=\"#同步容器\" class=\"headerlink\" title=\"同步容器\"\u003e\u003c/a\u003e同步容器\u003c/h2\u003e\u003ch3 id=\"同步容器简介\"\u003e\u003ca href=\"#同步容器简介\" class=\"headerlink\" title=\"同步容器简介\"\u003e\u003c/a\u003e同步容器简介\u003c/h3\u003e\u003cp\u003e在 Java 中，同步容器主要包括 2 类：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eVector\u003c/code\u003e、\u003ccode\u003eStack\u003c/code\u003e、\u003ccode\u003eHashtable\u003c/code\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eVector\u003c/code\u003e - \u003ccode\u003eVector\u003c/code\u003e 实现了 \u003ccode\u003eList\u003c/code\u003e 接口。\u003ccode\u003eVector\u003c/code\u003e 实际上就是一个数组，和 \u003ccode\u003eArrayList\u003c/code\u003e 类似。但是 \u003ccode\u003eVector\u003c/code\u003e 中的方法都是 \u003ccode\u003esynchronized\u003c/code\u003e 方法，即进行了同步措施。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eStack\u003c/code\u003e - \u003ccode\u003eStack\u003c/code\u003e 也是一个同步容器，它的方法也用 \u003ccode\u003esynchronized\u003c/code\u003e 进行了同步，它实际上是继承于 \u003ccode\u003eVector\u003c/code\u003e 类。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eHashtable\u003c/code\u003e- \u003ccode\u003eHashtable\u003c/code\u003e 实现了 \u003ccode\u003eMap\u003c/code\u003e 接口，它和 \u003ccode\u003eHashMap\u003c/code\u003e 很相似，但是 \u003ccode\u003eHashtable\u003c/code\u003e 进行了同步处理，而 \u003ccode\u003eHashMap\u003c/code\u003e 没有。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCollections\u003c/code\u003e 类中提供的静态工厂方法创建的类（由 \u003ccode\u003eCollections.synchronizedXXX\u003c/code\u003e 等方法）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"同步容器的问题\"\u003e\u003ca href=\"#同步容器的问题\" class=\"headerlink\" title=\"同步容器的问题\"\u003e\u003c/a\u003e同步容器的问题\u003c/h3\u003e\u003cp\u003e同步容器的同步原理就是在其 \u003ccode\u003eget\u003c/code\u003e、\u003ccode\u003eset\u003c/code\u003e、\u003ccode\u003esize\u003c/code\u003e 等主要方法上用 \u003ccode\u003esynchronized\u003c/code\u003e 修饰。 \u003cstrong\u003e\u003ccode\u003esynchronized\u003c/code\u003e 可以保证在同一个时刻，只有一个线程可以执行某个方法或者某个代码块\u003c/strong\u003e。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e想详细了解 \u003ccode\u003esynchronized\u003c/code\u003e 用法和原理可以参考：\u003ca href=\"https://dunwu.github.io/waterdrop/pages/2c6488/\"\u003eJava 并发核心机制\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"性能问题\"\u003e\u003ca href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"\u003e\u003c/a\u003e性能问题\u003c/h4\u003e\u003cp\u003e\u003ccode\u003esynchronized\u003c/code\u003e 的互斥同步会产生阻塞和唤醒线程的开销。显然，这种方式比没有使用 \u003ccode\u003esynchronized\u003c/code\u003e 的容器性能要差很多。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注：尤其是在 Java 1.6 没有对 \u003ccode\u003esynchronized\u003c/code\u003e 进行优化前，阻塞开销很高。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"安全问题\"\u003e\u003ca href=\"#安全问题\" class=\"headerlink\" title=\"安全问题\"\u003e\u003c/a\u003e安全问题\u003c/h4\u003e\u003cp\u003e同步容器真的绝对安全吗？\u003c/p\u003e\n\u003cp\u003e其实也未必。在做复合操作（非原子操作）时，仍然需要加锁来保护。常见复合操作如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e迭代\u003c/strong\u003e：反复访问元素，直到遍历完全部元素；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e跳转\u003c/strong\u003e：根据指定顺序寻找当前元素的下一个（下 n 个）元素；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e条件运算\u003c/strong\u003e：例如若没有则添加等；\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e❌ 不安全的示例\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eVectorDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e Vector\u0026lt;Integer\u0026gt; vector = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eVector\u003c/span\u003e\u0026lt;\u0026gt;();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            vector.clear();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e10\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                vector.add(i);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eThread\u003c/span\u003e \u003cspan class=\"variable\"\u003ethread1\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eThread\u003c/span\u003e() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; vector.size(); i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        vector.remove(i);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            };\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eThread\u003c/span\u003e \u003cspan class=\"variable\"\u003ethread2\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eThread\u003c/span\u003e() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; vector.size(); i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        vector.get(i);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            };\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            thread1.start();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            thread2.start();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (Thread.activeCount() \u0026gt; \u003cspan class=\"number\"\u003e10\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;同时存在 10 个以上线程，退出\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e以上程序执行时可能会出现数组越界错误。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eVector\u003c/code\u003e 是线程安全的，那为什么还会报这个错？\u003c/p\u003e\n\u003cp\u003e这是因为，对于 Vector，虽然能保证每一个时刻只能有一个线程访问它，但是不排除这种可能：\u003c/p\u003e\n\u003cp\u003e当某个线程在某个时刻执行这句时：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e i=\u003cspan class=\"number\"\u003e0\u003c/span\u003e;i\u0026lt;vector.size();i++)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    vector.get(i);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e假若此时 vector 的 size 方法返回的是 10，i 的值为 9\u003c/p\u003e\n\u003cp\u003e然后另外一个线程执行了这句：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e i=\u003cspan class=\"number\"\u003e0\u003c/span\u003e;i\u0026lt;vector.size();i++)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    vector.remove(i);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e将下标为 9 的元素删除了。\u003c/p\u003e\n\u003cp\u003e那么通过 get 方法访问下标为 9 的元素肯定就会出问题了。\u003c/p\u003e\n\u003cp\u003e✔️️️ 安全示例\u003c/p\u003e\n\u003cp\u003e因此为了保证线程安全，必须在方法调用端做额外的同步措施，如下面所示：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eVectorDemo2\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e Vector\u0026lt;Integer\u0026gt; vector = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eVector\u003c/span\u003e\u0026lt;Integer\u0026gt;();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e10\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                vector.add(i);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eThread\u003c/span\u003e \u003cspan class=\"variable\"\u003ethread1\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eThread\u003c/span\u003e() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003esynchronized\u003c/span\u003e (VectorDemo2.class) {   \u003cspan class=\"comment\"\u003e//进行额外的同步\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; vector.size(); i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            vector.remove(i);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            };\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eThread\u003c/span\u003e \u003cspan class=\"variable\"\u003ethread2\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eThread\u003c/span\u003e() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003esynchronized\u003c/span\u003e (VectorDemo2.class) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; vector.size(); i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            vector.get(i);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            };\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            thread1.start();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            thread2.start();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (Thread.activeCount() \u0026gt; \u003cspan class=\"number\"\u003e10\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;同时存在 10 个以上线程，退出\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eConcurrentModificationException\u003c/code\u003e 异常\u003c/p\u003e\n\u003cp\u003e在对 \u003ccode\u003eVector\u003c/code\u003e 等容器并发地进行迭代修改时，会报 \u003ccode\u003eConcurrentModificationException\u003c/code\u003e 异常，关于这个异常将会在后续文章中讲述。\u003c/p\u003e\n\u003cp\u003e但是在并发容器中不会出现这个问题。\u003c/p\u003e\n\u003ch2 id=\"并发容器简介\"\u003e\u003ca href=\"#并发容器简介\" class=\"headerlink\" title=\"并发容器简介\"\u003e\u003c/a\u003e并发容器简介\u003c/h2\u003e\u003cp\u003e同步容器将所有对容器状态的访问都串行化，以保证线程安全性，这种策略会严重降低并发性。\u003c/p\u003e\n\u003cp\u003eJava 1.5 后提供了多种并发容器，\u003cstrong\u003e使用并发容器来替代同步容器，可以极大地提高伸缩性并降低风险\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eJ.U.C 包中提供了几个非常有用的并发容器作为线程安全的容器：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e并发容器\u003c/th\u003e\n\u003cth\u003e对应的普通容器\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eConcurrentHashMap\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJava 1.8 之前采用分段锁机制细化锁粒度，降低阻塞，从而提高并发性；Java 1.8 之后基于 CAS 实现。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eConcurrentSkipListMap\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eSortedMap\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e基于跳表实现的\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eCopyOnWriteArrayList\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eCopyOnWriteArraySet\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eSet\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e基于 \u003ccode\u003eCopyOnWriteArrayList\u003c/code\u003e 实现。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eConcurrentSkipListSet\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eSortedSet\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e基于 \u003ccode\u003eConcurrentSkipListMap\u003c/code\u003e 实现。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eConcurrentLinkedQueue\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eQueue\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e线程安全的无界队列。底层采用单链表。支持 FIFO。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eConcurrentLinkedDeque\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eDeque\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e线程安全的无界双端队列。底层采用双向链表。支持 FIFO 和 FILO。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eArrayBlockingQueue\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eQueue\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e数组实现的阻塞队列。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eQueue\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e链表实现的阻塞队列。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eLinkedBlockingDeque\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eDeque\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e双向链表实现的双端阻塞队列。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003eJ.U.C 包中提供的并发容器命名一般分为三类：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eConcurrent\u003c/code\u003e\u003cul\u003e\n\u003cli\u003e这类型的锁竞争相对于 \u003ccode\u003eCopyOnWrite\u003c/code\u003e 要高一些，但写操作代价要小一些。\u003c/li\u003e\n\u003cli\u003e此外，\u003ccode\u003eConcurrent\u003c/code\u003e 往往提供了较低的遍历一致性，即：当利用迭代器遍历时，如果容器发生修改，迭代器仍然可以继续进行遍历。代价就是，在获取容器大小 \u003ccode\u003esize()\u003c/code\u003e ，容器是否为空等方法，不一定完全精确，但这是为了获取并发吞吐量的设计取舍，可以理解。与之相比，如果是使用同步容器，就会出现 \u003ccode\u003efail-fast\u003c/code\u003e 问题，即：检测到容器在遍历过程中发生了修改，则抛出 \u003ccode\u003eConcurrentModificationException\u003c/code\u003e，不再继续遍历。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCopyOnWrite\u003c/code\u003e - 一个线程写，多个线程读。读操作时不加锁，写操作时通过在副本上加锁保证并发安全，空间开销较大。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eBlocking\u003c/code\u003e - 内部实现一般是基于锁，提供阻塞队列的能力。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e:x: 错误示例，产生 \u003ccode\u003eConcurrentModificationException\u003c/code\u003e 异常：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eremoveKeys\u003c/span\u003e\u003cspan class=\"params\"\u003e(Map\u0026lt;String, Object\u0026gt; map, \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e String... keys)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    map.keySet().removeIf(key -\u0026gt; ArrayUtil.contains(keys, key));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e:x: 错误示例，产生 \u003ccode\u003eConcurrentModificationException\u003c/code\u003e 异常：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u0026lt;K, V\u0026gt; Map\u0026lt;K, V\u0026gt; \u003cspan class=\"title function_\"\u003eremoveKeys\u003c/span\u003e\u003cspan class=\"params\"\u003e(Map\u0026lt;String, Object\u0026gt; map, \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e String... keys)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (K key : keys) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tmap.remove(key);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e map;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"并发场景下的-Map\"\u003e\u003ca href=\"#并发场景下的-Map\" class=\"headerlink\" title=\"并发场景下的 Map\"\u003e\u003c/a\u003e并发场景下的 Map\u003c/h3\u003e\u003cp\u003e如果对数据有强一致要求，则需使用 \u003ccode\u003eHashtable\u003c/code\u003e；在大部分场景通常都是弱一致性的情况下，使用 \u003ccode\u003eConcurrentHashMap\u003c/code\u003e 即可；如果数据量在千万级别，且存在大量增删改操作，则可以考虑使用 \u003ccode\u003eConcurrentSkipListMap\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id=\"并发场景下的-List\"\u003e\u003ca href=\"#并发场景下的-List\" class=\"headerlink\" title=\"并发场景下的 List\"\u003e\u003c/a\u003e并发场景下的 List\u003c/h3\u003e\u003cp\u003e读多写少用 \u003ccode\u003eCopyOnWriteArrayList\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e写多读少用 \u003ccode\u003eConcurrentLinkedQueue\u003c/code\u003e ，但由于是无界的，要有容量限制，避免无限膨胀，导致内存溢出。\u003c/p\u003e\n\u003ch2 id=\"Map\"\u003e\u003ca href=\"#Map\" class=\"headerlink\" title=\"Map\"\u003e\u003c/a\u003eMap\u003c/h2\u003e\u003cp\u003eMap 接口的两个实现是 ConcurrentHashMap 和 ConcurrentSkipListMap，它们从应用的角度来看，主要区别在于\u003cstrong\u003eConcurrentHashMap 的 key 是无序的，而 ConcurrentSkipListMap 的 key 是有序的\u003c/strong\u003e。所以如果你需要保证 key 的顺序，就只能使用 ConcurrentSkipListMap。\u003c/p\u003e\n\u003cp\u003e使用 ConcurrentHashMap 和 ConcurrentSkipListMap 需要注意的地方是，它们的 key 和 value 都不能为空，否则会抛出\u003ccode\u003eNullPointerException\u003c/code\u003e这个运行时异常。\u003c/p\u003e\n\u003ch3 id=\"ConcurrentHashMap\"\u003e\u003ca href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"\u003e\u003c/a\u003eConcurrentHashMap\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eConcurrentHashMap\u003c/code\u003e 是线程安全的 \u003ccode\u003eHashMap\u003c/code\u003e ，用于替代 \u003ccode\u003eHashtable\u003c/code\u003e。\u003c/p\u003e\n\u003ch4 id=\"ConcurrentHashMap-的特性\"\u003e\u003ca href=\"#ConcurrentHashMap-的特性\" class=\"headerlink\" title=\"ConcurrentHashMap 的特性\"\u003e\u003c/a\u003e\u003ccode\u003eConcurrentHashMap\u003c/code\u003e 的特性\u003c/h4\u003e\u003cp\u003e\u003ccode\u003eConcurrentHashMap\u003c/code\u003e \u003ccode\u003e实现了\u003c/code\u003e \u003ccode\u003eConcurrentMap\u003c/code\u003e 接口，而 \u003ccode\u003eConcurrentMap\u003c/code\u003e 接口扩展了 \u003ccode\u003eMap\u003c/code\u003e 接口。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eConcurrentHashMap\u003c/span\u003e\u0026lt;K,V\u0026gt; \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eAbstractMap\u003c/span\u003e\u0026lt;K,V\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eConcurrentMap\u003c/span\u003e\u0026lt;K,V\u0026gt;, Serializable {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eConcurrentHashMap\u003c/code\u003e 的实现包含了 \u003ccode\u003eHashMap\u003c/code\u003e 所有的基本特性，如：数据结构、读写策略等。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eConcurrentHashMap\u003c/code\u003e 没有实现对 \u003ccode\u003eMap\u003c/code\u003e 加锁以提供独占访问。因此无法通过在客户端加锁的方式来创建新的原子操作。但是，一些常见的复合操作，如：“若没有则添加”、“若相等则移除”、“若相等则替换”，都已经实现为原子操作，并且是围绕 \u003ccode\u003eConcurrentMap\u003c/code\u003e 的扩展接口而实现。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"title class_\"\u003eConcurrentMap\u003c/span\u003e\u0026lt;K, V\u0026gt; \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMap\u003c/span\u003e\u0026lt;K, V\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 仅当 K 没有相应的映射值才插入\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    V \u003cspan class=\"title function_\"\u003eputIfAbsent\u003c/span\u003e\u003cspan class=\"params\"\u003e(K key, V value)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 仅当 K 被映射到 V 时才移除\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"title function_\"\u003eremove\u003c/span\u003e\u003cspan class=\"params\"\u003e(Object key, Object value)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 仅当 K 被映射到 oldValue 时才替换为 newValue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"title function_\"\u003ereplace\u003c/span\u003e\u003cspan class=\"params\"\u003e(K key, V oldValue, V newValue)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 仅当 K 被映射到某个值时才替换为 newValue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    V \u003cspan class=\"title function_\"\u003ereplace\u003c/span\u003e\u003cspan class=\"params\"\u003e(K key, V value)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e不同于 \u003ccode\u003eHashtable\u003c/code\u003e，\u003ccode\u003eConcurrentHashMap\u003c/code\u003e 提供的迭代器不会抛出 \u003ccode\u003eConcurrentModificationException\u003c/code\u003e，因此不需要在迭代过程中对容器加锁。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e:bell: 注意：一些需要对整个 \u003ccode\u003eMap\u003c/code\u003e 进行计算的方法，如 \u003ccode\u003esize\u003c/code\u003e 和 \u003ccode\u003eisEmpty\u003c/code\u003e ，由于返回的结果在计算时可能已经过期，所以\u003cstrong\u003e并非实时的精确值\u003c/strong\u003e。这是一种策略上的权衡，在并发环境下，这类方法由于总在不断变化，所以获取其实时精确值的意义不大。\u003ccode\u003eConcurrentHashMap\u003c/code\u003e 弱化这类方法，以换取更重要操作（如：\u003ccode\u003eget\u003c/code\u003e、\u003ccode\u003eput\u003c/code\u003e、\u003ccode\u003econtainesKey\u003c/code\u003e、\u003ccode\u003eremove\u003c/code\u003e 等）的性能。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"ConcurrentHashMap-的用法\"\u003e\u003ca href=\"#ConcurrentHashMap-的用法\" class=\"headerlink\" title=\"ConcurrentHashMap 的用法\"\u003e\u003c/a\u003eConcurrentHashMap 的用法\u003c/h4\u003e\u003cp\u003e示例：不会出现 \u003ccode\u003eConcurrentModificationException\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eConcurrentHashMap\u003c/code\u003e 的基本操作与 \u003ccode\u003eHashMap\u003c/code\u003e 的用法基本一样。不同于 \u003ccode\u003eHashMap\u003c/code\u003e、\u003ccode\u003eHashtable\u003c/code\u003e，\u003ccode\u003eConcurrentHashMap\u003c/code\u003e 提供的迭代器不会抛出 \u003ccode\u003eConcurrentModificationException\u003c/code\u003e，因此不需要在迭代过程中对容器加锁。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eConcurrentHashMapDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// HashMap 在并发迭代访问时会抛出 ConcurrentModificationException 异常\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// Map\u0026lt;Integer, Character\u0026gt; map = new HashMap\u0026lt;\u0026gt;();\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Map\u0026lt;Integer, Character\u0026gt; map = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eConcurrentHashMap\u003c/span\u003e\u0026lt;\u0026gt;();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eThread\u003c/span\u003e \u003cspan class=\"variable\"\u003ewthread\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eThread\u003c/span\u003e(() -\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;写操作线程开始执行\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e26\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                map.put(i, (\u003cspan class=\"type\"\u003echar\u003c/span\u003e) (\u003cspan class=\"string\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e + i));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        });\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eThread\u003c/span\u003e \u003cspan class=\"variable\"\u003erthread\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eThread\u003c/span\u003e(() -\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;读操作线程开始执行\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (Integer key : map.keySet()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                System.out.println(key + \u003cspan class=\"string\"\u003e\u0026#34; - \u0026#34;\u003c/span\u003e + map.get(key));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        });\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        wthread.start();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        rthread.start();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Thread.sleep(\u003cspan class=\"number\"\u003e1000\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"ConcurrentHashMap-的原理\"\u003e\u003ca href=\"#ConcurrentHashMap-的原理\" class=\"headerlink\" title=\"ConcurrentHashMap 的原理\"\u003e\u003c/a\u003eConcurrentHashMap 的原理\u003c/h4\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003eConcurrentHashMap\u003c/code\u003e 一直在演进，尤其在 Java 1.7 和 Java 1.8，其数据结构和并发机制有很大的差异。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003eJava 1.7\u003cul\u003e\n\u003cli\u003e数据结构：\u003cstrong\u003e数组＋单链表\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e并发机制：采用分段锁机制细化锁粒度，降低阻塞，从而提高并发性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eJava 1.8\u003cul\u003e\n\u003cli\u003e数据结构：\u003cstrong\u003e数组＋单链表＋红黑树\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e并发机制：取消分段锁，之后基于 CAS + synchronized 实现。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"Java-1-7-的实现\"\u003e\u003ca href=\"#Java-1-7-的实现\" class=\"headerlink\" title=\"Java 1.7 的实现\"\u003e\u003c/a\u003eJava 1.7 的实现\u003c/h5\u003e\u003cp\u003e分段锁，是将内部进行分段（Segment），里面是 \u003ccode\u003eHashEntry\u003c/code\u003e 数组，和 \u003ccode\u003eHashMap\u003c/code\u003e 类似，哈希相同的条目也是以链表形式存放。\u003cbr/\u003e\u003ccode\u003eHashEntry\u003c/code\u003e 内部使用 \u003ccode\u003evolatile\u003c/code\u003e 的 \u003ccode\u003evalue\u003c/code\u003e 字段来保证可见性，也利用了不可变对象的机制，以改进利用 \u003ccode\u003eUnsafe\u003c/code\u003e 提供的底层能力，比如 volatile access，去直接完成部分操作，以最优化性能，毕竟 \u003ccode\u003eUnsafe\u003c/code\u003e 中的很多操作都是 JVM intrinsic 优化过的。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200605214405.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e在进行并发写操作时，\u003ccode\u003eConcurrentHashMap\u003c/code\u003e 会获取可重入锁（\u003ccode\u003eReentrantLock\u003c/code\u003e），以保证数据一致性。所以，在并发修改期间，相应 \u003ccode\u003eSegment\u003c/code\u003e 是被锁定的。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eConcurrentHashMap\u003c/span\u003e\u0026lt;K, V\u0026gt; \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eAbstractMap\u003c/span\u003e\u0026lt;K, V\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eConcurrentMap\u003c/span\u003e\u0026lt;K, V\u0026gt;, Serializable {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 将整个hashmap分成几个小的map，每个segment都是一个锁；与hashtable相比，这么设计的目的是对于put, remove等操作，可以减少并发冲突，对\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 不属于同一个片段的节点可以并发操作，大大提高了性能\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e Segment\u0026lt;K,V\u0026gt;[] segments;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 本质上Segment类就是一个小的hashmap，里面table数组存储了各个节点的数据，继承了ReentrantLock, 可以作为互拆锁使用\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSegment\u003c/span\u003e\u0026lt;K,V\u0026gt; \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReentrantLock\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSerializable\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etransient\u003c/span\u003e \u003cspan class=\"keyword\"\u003evolatile\u003c/span\u003e HashEntry\u0026lt;K,V\u0026gt;[] table;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etransient\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e count;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 基本节点，存储Key， Value值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eHashEntry\u003c/span\u003e\u0026lt;K,V\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e hash;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e K key;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003evolatile\u003c/span\u003e V value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003evolatile\u003c/span\u003e HashEntry\u0026lt;K,V\u0026gt; next;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch5 id=\"Java-1-8-的实现\"\u003e\u003ca href=\"#Java-1-8-的实现\" class=\"headerlink\" title=\"Java 1.8 的实现\"\u003e\u003c/a\u003eJava 1.8 的实现\u003c/h5\u003e\u003cul\u003e\n\u003cli\u003e数据结构改进：与 HashMap 一样，将原先 \u003cstrong\u003e数组＋单链表\u003c/strong\u003e 的数据结构，变更为 \u003cstrong\u003e数组＋单链表＋红黑树\u003c/strong\u003e 的结构。当出现哈希冲突时，数据会存入数组指定桶的单链表，当链表长度达到 8，则将其转换为红黑树结构，这样其查询的时间复杂度可以降低到 $$O(logN)$$，以改进性能。\u003c/li\u003e\n\u003cli\u003e并发机制改进：\u003cul\u003e\n\u003cli\u003e取消 segments 字段，\u003cstrong\u003e直接采用 \u003ccode\u003etransient volatile HashEntry\u0026lt;K,V\u0026gt;[] table\u003c/code\u003e 保存数据，采用 table 数组元素作为锁，从而实现了对每一行数据进行加锁，进一步减少并发冲突的概率\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e使用 CAS + \u003ccode\u003esychronized\u003c/code\u003e 操作，在特定场景进行无锁并发操作。使用 Unsafe、LongAdder 之类底层手段，进行极端情况的优化。现代 JDK 中，synchronized 已经被不断优化，可以不再过分担心性能差异，另外，相比于 ReentrantLock，它可以减少内存消耗，这是个非常大的优势。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e60\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e61\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e62\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e63\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e65\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e66\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e67\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e68\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e69\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e70\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e71\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e V \u003cspan class=\"title function_\"\u003eputVal\u003c/span\u003e\u003cspan class=\"params\"\u003e(K key, V value, \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e onlyIfAbsent)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (key == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e || value == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) \u003cspan class=\"keyword\"\u003ethrow\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eNullPointerException\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ehash\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e spread(key.hashCode());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ebinCount\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (Node\u0026lt;K,V\u0026gt;[] tab = table;;) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Node\u0026lt;K,V\u0026gt; f; \u003cspan class=\"type\"\u003eint\u003c/span\u003e n, i, fh;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 如果table为空，初始化；否则，根据hash值计算得到数组索引i，如果tab[i]为空，直接新建节点Node即可。注：tab[i]实质为链表或者红黑树的首节点。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (tab == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e || (n = tab.length) == \u003cspan class=\"number\"\u003e0\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            tab = initTable();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e ((f = tabAt(tab, i = (n - \u003cspan class=\"number\"\u003e1\u003c/span\u003e) \u0026amp; hash)) == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (casTabAt(tab, i, \u003cspan class=\"literal\"\u003enull\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                         \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eNode\u003c/span\u003e\u0026lt;K,V\u0026gt;(hash, key, value, \u003cspan class=\"literal\"\u003enull\u003c/span\u003e)))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003ebreak\u003c/span\u003e;                   \u003cspan class=\"comment\"\u003e// no lock when adding to empty bin\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 如果tab[i]不为空并且hash值为MOVED，说明该链表正在进行transfer操作，返回扩容完成后的table。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e ((fh = f.hash) == MOVED)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            tab = helpTransfer(tab, f);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eV\u003c/span\u003e \u003cspan class=\"variable\"\u003eoldVal\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 针对首个节点进行加锁操作，而不是segment，进一步减少线程冲突\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003esynchronized\u003c/span\u003e (f) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (tabAt(tab, i) == f) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (fh \u0026gt;= \u003cspan class=\"number\"\u003e0\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        binCount = \u003cspan class=\"number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (Node\u0026lt;K,V\u0026gt; e = f;; ++binCount) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            K ek;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            \u003cspan class=\"comment\"\u003e// 如果在链表中找到值为key的节点e，直接设置e.val = value即可。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (e.hash == hash \u0026amp;\u0026amp;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                ((ek = e.key) == key ||\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                 (ek != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; key.equals(ek)))) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                oldVal = e.val;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (!onlyIfAbsent)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                    e.val = value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                \u003cspan class=\"keyword\"\u003ebreak\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            \u003cspan class=\"comment\"\u003e// 如果没有找到值为key的节点，直接新建Node并加入链表即可。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            Node\u0026lt;K,V\u0026gt; pred = e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e ((e = e.next) == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                pred.next = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eNode\u003c/span\u003e\u0026lt;K,V\u0026gt;(hash, key,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                                          value, \u003cspan class=\"literal\"\u003enull\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                \u003cspan class=\"keyword\"\u003ebreak\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"comment\"\u003e// 如果首节点为TreeBin类型，说明为红黑树结构，执行putTreeVal操作。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (f \u003cspan class=\"keyword\"\u003einstanceof\u003c/span\u003e TreeBin) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        Node\u0026lt;K,V\u0026gt; p;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        binCount = \u003cspan class=\"number\"\u003e2\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e ((p = ((TreeBin\u0026lt;K,V\u0026gt;)f).putTreeVal(hash, key,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                                       value)) != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            oldVal = p.val;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (!onlyIfAbsent)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                p.val = value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (binCount != \u003cspan class=\"number\"\u003e0\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"comment\"\u003e// 如果节点数\u0026gt;＝8，那么转换链表结构为红黑树结构。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (binCount \u0026gt;= TREEIFY_THRESHOLD)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    treeifyBin(tab, i);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (oldVal != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e oldVal;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003ebreak\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 计数增加1，有可能触发transfer操作(扩容)。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    addCount(\u003cspan class=\"number\"\u003e1L\u003c/span\u003e, binCount);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"ConcurrentHashMap-的实战\"\u003e\u003ca href=\"#ConcurrentHashMap-的实战\" class=\"headerlink\" title=\"ConcurrentHashMap 的实战\"\u003e\u003c/a\u003eConcurrentHashMap 的实战\u003c/h4\u003e\u003cblockquote\u003e\n\u003cp\u003e示例摘自：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100047701\"\u003e《Java 业务开发常见错误 100 例》\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch5 id=\"ConcurrentHashMap-错误示例\"\u003e\u003ca href=\"#ConcurrentHashMap-错误示例\" class=\"headerlink\" title=\"ConcurrentHashMap 错误示例\"\u003e\u003c/a\u003eConcurrentHashMap 错误示例\u003c/h5\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//线程个数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eTHREAD_COUNT\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e10\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//总元素数量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eITEM_COUNT\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1000\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ConcurrentHashMap\u0026lt;String, Long\u0026gt; concurrentHashMap = getData(ITEM_COUNT - \u003cspan class=\"number\"\u003e100\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//初始900个元素\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;init size:\u0026#34;\u003c/span\u003e + concurrentHashMap.size());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eForkJoinPool\u003c/span\u003e \u003cspan class=\"variable\"\u003eforkJoinPool\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eForkJoinPool\u003c/span\u003e(THREAD_COUNT);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//使用线程池并发处理逻辑\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    forkJoinPool.execute(() -\u0026gt; IntStream.rangeClosed(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e10\u003c/span\u003e).parallel().forEach(i -\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e//查询还需要补充多少个元素\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003egap\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e ITEM_COUNT - concurrentHashMap.size();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;gap size:\u0026#34;\u003c/span\u003e + gap);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e//补充元素\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        concurrentHashMap.putAll(getData(gap));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//等待所有任务完成\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    forkJoinPool.shutdown();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    forkJoinPool.awaitTermination(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, TimeUnit.HOURS);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//最后元素个数会是1000吗？\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;finish size:\u0026#34;\u003c/span\u003e + concurrentHashMap.size());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e ConcurrentHashMap\u0026lt;String, Long\u0026gt; \u003cspan class=\"title function_\"\u003egetData\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e count)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e LongStream.rangeClosed(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, count)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .boxed()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .collect(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            Collectors.toConcurrentMap(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                i -\u0026gt; UUID.randomUUID().toString(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                i -\u0026gt; i,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                (o1, o2) -\u0026gt; o1,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                ConcurrentHashMap::\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e初始大小 900 符合预期，还需要填充 100 个元素。\u003c/p\u003e\n\u003cp\u003e预期结果为 1000 个元素，实际大于 1000 个元素。\u003c/p\u003e\n\u003cp\u003e【分析】\u003c/p\u003e\n\u003cp\u003eConcurrentHashMap 对外提供的方法或能力的限制：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用了 ConcurrentHashMap，不代表对它的多个操作之间的状态是一致的，是没有其他线程在操作它的，如果需要确保需要手动加锁。\u003c/li\u003e\n\u003cli\u003e诸如 size、isEmpty 和 containsValue 等聚合方法，在并发情况下可能会反映 ConcurrentHashMap 的中间状态。因此在并发情况下，这些方法的返回值只能用作参考，而不能用于流程控制。显然，利用 size 方法计算差异值，是一个流程控制。\u003c/li\u003e\n\u003cli\u003e诸如 putAll 这样的聚合方法也不能确保原子性，在 putAll 的过程中去获取数据可能会获取到部分数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"ConcurrentHashMap-错误示例修正-1-0-版\"\u003e\u003ca href=\"#ConcurrentHashMap-错误示例修正-1-0-版\" class=\"headerlink\" title=\"ConcurrentHashMap 错误示例修正 1.0 版\"\u003e\u003c/a\u003eConcurrentHashMap 错误示例修正 1.0 版\u003c/h5\u003e\u003cp\u003e通过 synchronized 加锁，当然可以保证数据一致性，但是牺牲了 ConcurrentHashMap 的性能，没哟真正发挥出 ConcurrentHashMap 的特性。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//线程个数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eTHREAD_COUNT\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e10\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//总元素数量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eITEM_COUNT\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1000\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ConcurrentHashMap\u0026lt;String, Long\u0026gt; concurrentHashMap = getData(ITEM_COUNT - \u003cspan class=\"number\"\u003e100\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//初始900个元素\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;init size:\u0026#34;\u003c/span\u003e + concurrentHashMap.size());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eForkJoinPool\u003c/span\u003e \u003cspan class=\"variable\"\u003eforkJoinPool\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eForkJoinPool\u003c/span\u003e(THREAD_COUNT);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//使用线程池并发处理逻辑\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    forkJoinPool.execute(() -\u0026gt; IntStream.rangeClosed(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e10\u003c/span\u003e).parallel().forEach(i -\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e//查询还需要补充多少个元素\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003esynchronized\u003c/span\u003e (concurrentHashMap) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003egap\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e ITEM_COUNT - concurrentHashMap.size();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;gap size:\u0026#34;\u003c/span\u003e + gap);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e//补充元素\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            concurrentHashMap.putAll(getData(gap));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//等待所有任务完成\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    forkJoinPool.shutdown();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    forkJoinPool.awaitTermination(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, TimeUnit.HOURS);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//最后元素个数会是1000吗？\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;finish size:\u0026#34;\u003c/span\u003e + concurrentHashMap.size());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e ConcurrentHashMap\u0026lt;String, Long\u0026gt; \u003cspan class=\"title function_\"\u003egetData\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e count)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e LongStream.rangeClosed(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, count)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .boxed()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .collect(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            Collectors.toConcurrentMap(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                i -\u0026gt; UUID.randomUUID().toString(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                i -\u0026gt; i,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                (o1, o2) -\u0026gt; o1,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                ConcurrentHashMap::\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch5 id=\"ConcurrentHashMap-错误示例修正-2-0-版\"\u003e\u003ca href=\"#ConcurrentHashMap-错误示例修正-2-0-版\" class=\"headerlink\" title=\"ConcurrentHashMap 错误示例修正 2.0 版\"\u003e\u003c/a\u003eConcurrentHashMap 错误示例修正 2.0 版\u003c/h5\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e60\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e61\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e62\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e63\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//循环次数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eLOOP_COUNT\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e10000000\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//线程个数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eTHREAD_COUNT\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e10\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//总元素数量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eITEM_COUNT\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1000\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eStopWatch\u003c/span\u003e \u003cspan class=\"variable\"\u003estopWatch\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eStopWatch\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    stopWatch.start(\u003cspan class=\"string\"\u003e\u0026#34;normaluse\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Map\u0026lt;String, Long\u0026gt; normaluse = normaluse();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    stopWatch.stop();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Assert.isTrue(normaluse.size() == ITEM_COUNT, \u003cspan class=\"string\"\u003e\u0026#34;normaluse size error\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Assert.isTrue(normaluse.values().stream()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            .mapToLong(aLong -\u0026gt; aLong).reduce(\u003cspan class=\"number\"\u003e0\u003c/span\u003e, Long::sum) == LOOP_COUNT\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        , \u003cspan class=\"string\"\u003e\u0026#34;normaluse count error\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    stopWatch.start(\u003cspan class=\"string\"\u003e\u0026#34;gooduse\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Map\u0026lt;String, Long\u0026gt; gooduse = gooduse();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    stopWatch.stop();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Assert.isTrue(gooduse.size() == ITEM_COUNT, \u003cspan class=\"string\"\u003e\u0026#34;gooduse size error\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Assert.isTrue(gooduse.values().stream()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            .mapToLong(l -\u0026gt; l)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            .reduce(\u003cspan class=\"number\"\u003e0\u003c/span\u003e, Long::sum) == LOOP_COUNT\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        , \u003cspan class=\"string\"\u003e\u0026#34;gooduse count error\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    System.out.println(stopWatch.prettyPrint());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e Map\u0026lt;String, Long\u0026gt; \u003cspan class=\"title function_\"\u003enormaluse\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ConcurrentHashMap\u0026lt;String, Long\u0026gt; freqs = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eConcurrentHashMap\u003c/span\u003e\u0026lt;\u0026gt;(ITEM_COUNT);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eForkJoinPool\u003c/span\u003e \u003cspan class=\"variable\"\u003eforkJoinPool\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eForkJoinPool\u003c/span\u003e(THREAD_COUNT);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    forkJoinPool.execute(() -\u0026gt; IntStream.rangeClosed(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, LOOP_COUNT).parallel().forEach(i -\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003ekey\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;item\u0026#34;\u003c/span\u003e + ThreadLocalRandom.current().nextInt(ITEM_COUNT);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003esynchronized\u003c/span\u003e (freqs) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (freqs.containsKey(key)) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    freqs.put(key, freqs.get(key) + \u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    freqs.put(key, \u003cspan class=\"number\"\u003e1L\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    forkJoinPool.shutdown();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    forkJoinPool.awaitTermination(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, TimeUnit.HOURS);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e freqs;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e Map\u0026lt;String, Long\u0026gt; \u003cspan class=\"title function_\"\u003egooduse\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ConcurrentHashMap\u0026lt;String, LongAdder\u0026gt; freqs = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eConcurrentHashMap\u003c/span\u003e\u0026lt;\u0026gt;(ITEM_COUNT);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eForkJoinPool\u003c/span\u003e \u003cspan class=\"variable\"\u003eforkJoinPool\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eForkJoinPool\u003c/span\u003e(THREAD_COUNT);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    forkJoinPool.execute(() -\u0026gt; IntStream.rangeClosed(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, LOOP_COUNT).parallel().forEach(i -\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003ekey\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;item\u0026#34;\u003c/span\u003e + ThreadLocalRandom.current().nextInt(ITEM_COUNT);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            freqs.computeIfAbsent(key, k -\u0026gt; \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eLongAdder\u003c/span\u003e()).increment();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    forkJoinPool.shutdown();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    forkJoinPool.awaitTermination(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, TimeUnit.HOURS);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e freqs.entrySet().stream()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .collect(Collectors.toMap(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            e -\u0026gt; e.getKey(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            e -\u0026gt; e.getValue().longValue())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"List\"\u003e\u003ca href=\"#List\" class=\"headerlink\" title=\"List\"\u003e\u003c/a\u003eList\u003c/h2\u003e\u003ch3 id=\"CopyOnWriteArrayList\"\u003e\u003ca href=\"#CopyOnWriteArrayList\" class=\"headerlink\" title=\"CopyOnWriteArrayList\"\u003e\u003c/a\u003eCopyOnWriteArrayList\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eCopyOnWriteArrayList\u003c/code\u003e 是线程安全的 \u003ccode\u003eArrayList\u003c/code\u003e。\u003ccode\u003eCopyOnWrite\u003c/code\u003e 字面意思为\u003cstrong\u003e写的时候会将共享变量新复制一份\u003c/strong\u003e出来。复制的好处在于\u003cstrong\u003e读操作是无锁的\u003c/strong\u003e（也就是无阻塞）。\u003c/p\u003e\n\u003cp\u003eCopyOnWriteArrayList \u003cstrong\u003e仅适用于写操作非常少的场景\u003c/strong\u003e，而且能够容忍读写的短暂不一致。如果读写比例均衡或者有大量写操作的话，使用 CopyOnWriteArrayList 的性能会非常糟糕。\u003c/p\u003e\n\u003ch4 id=\"CopyOnWriteArrayList-原理\"\u003e\u003ca href=\"#CopyOnWriteArrayList-原理\" class=\"headerlink\" title=\"CopyOnWriteArrayList 原理\"\u003e\u003c/a\u003eCopyOnWriteArrayList 原理\u003c/h4\u003e\u003cp\u003eCopyOnWriteArrayList 内部维护了一个数组，成员变量 array 就指向这个内部数组，所有的读操作都是基于 array 进行的，如下图所示，迭代器 Iterator 遍历的就是 array 数组。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200702204541.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003elock - 执行写时复制操作，需要使用可重入锁加锁\u003c/li\u003e\n\u003cli\u003earray - 对象数组，用于存放元素\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/** The lock protecting all mutators */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003etransient\u003c/span\u003e \u003cspan class=\"type\"\u003eReentrantLock\u003c/span\u003e \u003cspan class=\"variable\"\u003elock\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReentrantLock\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/** The array, accessed only via getArray/setArray. */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003etransient\u003c/span\u003e \u003cspan class=\"keyword\"\u003evolatile\u003c/span\u003e Object[] array;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/container/CopyOnWriteArrayList.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e（1）读操作\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003eCopyOnWriteAarrayList\u003c/code\u003e 中，读操作不同步，因为它们在内部数组的快照上工作，所以多个迭代器可以同时遍历而不会相互阻塞（图 1,2,4）。\u003c/p\u003e\n\u003cp\u003eCopyOnWriteArrayList 的读操作是不用加锁的，性能很高。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e E \u003cspan class=\"title function_\"\u003eget\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e index)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e get(getArray(), index);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e E \u003cspan class=\"title function_\"\u003eget\u003c/span\u003e\u003cspan class=\"params\"\u003e(Object[] a, \u003cspan class=\"type\"\u003eint\u003c/span\u003e index)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (E) a[index];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e（2）写操作\u003c/p\u003e\n\u003cp\u003e所有的写操作都是同步的。他们在备份数组（图 3）的副本上工作。写操作完成后，后备阵列将被替换为复制的阵列，并释放锁定。支持数组变得易变，所以替换数组的调用是原子（图 5）。\u003c/p\u003e\n\u003cp\u003e写操作后创建的迭代器将能够看到修改的结构（图 6,7）。\u003c/p\u003e\n\u003cp\u003e写时复制集合返回的迭代器不会抛出 \u003ccode\u003eConcurrentModificationException\u003c/code\u003e，因为它们在数组的快照上工作，并且无论后续的修改（2,4）如何，都会像迭代器创建时那样完全返回元素。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e添加操作\u003c/strong\u003e - 添加的逻辑很简单，先将原容器 copy 一份，然后在新副本上执行写操作，之后再切换引用。当然此过程是要加锁的。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"title function_\"\u003eadd\u003c/span\u003e\u003cspan class=\"params\"\u003e(E e)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//ReentrantLock加锁，保证线程安全\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eReentrantLock\u003c/span\u003e \u003cspan class=\"variable\"\u003elock\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.lock;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    lock.lock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Object[] elements = getArray();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003elen\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e elements.length;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e//拷贝原容器，长度为原容器长度加一\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Object[] newElements = Arrays.copyOf(elements, len + \u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e//在新副本上执行添加操作\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        newElements[len] = e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e//将原容器引用指向新副本\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        setArray(newElements);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e//解锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        lock.unlock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003e删除操作\u003c/strong\u003e - 删除操作同理，将除要删除元素之外的其他元素拷贝到新副本中，然后切换引用，将原容器引用指向新副本。同属写操作，需要加锁。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e E \u003cspan class=\"title function_\"\u003eremove\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e index)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//加锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eReentrantLock\u003c/span\u003e \u003cspan class=\"variable\"\u003elock\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.lock;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    lock.lock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Object[] elements = getArray();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003elen\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e elements.length;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eE\u003c/span\u003e \u003cspan class=\"variable\"\u003eoldValue\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e get(elements, index);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003enumMoved\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e len - index - \u003cspan class=\"number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (numMoved == \u003cspan class=\"number\"\u003e0\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e//如果要删除的是列表末端数据，拷贝前len-1个数据到新副本上，再切换引用\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            setArray(Arrays.copyOf(elements, len - \u003cspan class=\"number\"\u003e1\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e//否则，将除要删除元素之外的其他元素拷贝到新副本中，并切换引用\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            Object[] newElements = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eObject\u003c/span\u003e[len - \u003cspan class=\"number\"\u003e1\u003c/span\u003e];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.arraycopy(elements, \u003cspan class=\"number\"\u003e0\u003c/span\u003e, newElements, \u003cspan class=\"number\"\u003e0\u003c/span\u003e, index);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.arraycopy(elements, index + \u003cspan class=\"number\"\u003e1\u003c/span\u003e, newElements, index,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                              numMoved);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            setArray(newElements);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e oldValue;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e//解锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        lock.unlock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"CopyOnWriteArrayList-示例\"\u003e\u003ca href=\"#CopyOnWriteArrayList-示例\" class=\"headerlink\" title=\"CopyOnWriteArrayList 示例\"\u003e\u003c/a\u003eCopyOnWriteArrayList 示例\u003c/h4\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eCopyOnWriteArrayListDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReadTask\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRunnable\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        List\u0026lt;String\u0026gt; list;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ReadTask(List\u0026lt;String\u0026gt; list) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.list = list;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (String str : list) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                System.out.println(str);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eWriteTask\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRunnable\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        List\u0026lt;String\u0026gt; list;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e index;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        WriteTask(List\u0026lt;String\u0026gt; list, \u003cspan class=\"type\"\u003eint\u003c/span\u003e index) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.list = list;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.index = index;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            list.remove(index);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            list.add(index, \u003cspan class=\"string\"\u003e\u0026#34;write_\u0026#34;\u003c/span\u003e + index);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eNUM\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e10\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// ArrayList 在并发迭代访问时会抛出 ConcurrentModificationException 异常\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// List\u0026lt;String\u0026gt; list = new ArrayList\u0026lt;\u0026gt;();\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        CopyOnWriteArrayList\u0026lt;String\u0026gt; list = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eCopyOnWriteArrayList\u003c/span\u003e\u0026lt;\u0026gt;();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; NUM; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            list.add(\u003cspan class=\"string\"\u003e\u0026#34;main_\u0026#34;\u003c/span\u003e + i);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eExecutorService\u003c/span\u003e \u003cspan class=\"variable\"\u003eexecutorService\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Executors.newFixedThreadPool(NUM);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; NUM; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            executorService.execute(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReadTask\u003c/span\u003e(list));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            executorService.execute(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eWriteTask\u003c/span\u003e(list, i));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        executorService.shutdown();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eCopyOnWriteArrayListDemo\u003c/span\u003e().run();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"CopyOnWriteArrayList-实战\"\u003e\u003ca href=\"#CopyOnWriteArrayList-实战\" class=\"headerlink\" title=\"CopyOnWriteArrayList 实战\"\u003e\u003c/a\u003eCopyOnWriteArrayList 实战\u003c/h4\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e60\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@Slf4j\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eWrongCopyOnWriteList\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        testRead();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        testWrite();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e Map \u003cspan class=\"title function_\"\u003etestWrite\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        List\u0026lt;Integer\u0026gt; copyOnWriteArrayList = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eCopyOnWriteArrayList\u003c/span\u003e\u0026lt;\u0026gt;();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        List\u0026lt;Integer\u0026gt; synchronizedList = Collections.synchronizedList(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eArrayList\u003c/span\u003e\u0026lt;\u0026gt;());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eStopWatch\u003c/span\u003e \u003cspan class=\"variable\"\u003estopWatch\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eStopWatch\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eloopCount\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e100000\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        stopWatch.start(\u003cspan class=\"string\"\u003e\u0026#34;Write:copyOnWriteArrayList\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        IntStream.rangeClosed(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, loopCount)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            .parallel()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            .forEach(__ -\u0026gt; copyOnWriteArrayList.add(ThreadLocalRandom.current().nextInt(loopCount)));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        stopWatch.stop();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        stopWatch.start(\u003cspan class=\"string\"\u003e\u0026#34;Write:synchronizedList\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        IntStream.rangeClosed(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, loopCount)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            .parallel()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            .forEach(__ -\u0026gt; synchronizedList.add(ThreadLocalRandom.current().nextInt(loopCount)));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        stopWatch.stop();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        log.info(stopWatch.prettyPrint());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eMap\u003c/span\u003e \u003cspan class=\"variable\"\u003eresult\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eHashMap\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        result.put(\u003cspan class=\"string\"\u003e\u0026#34;copyOnWriteArrayList\u0026#34;\u003c/span\u003e, copyOnWriteArrayList.size());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        result.put(\u003cspan class=\"string\"\u003e\u0026#34;synchronizedList\u0026#34;\u003c/span\u003e, synchronizedList.size());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e result;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eaddAll\u003c/span\u003e\u003cspan class=\"params\"\u003e(List\u0026lt;Integer\u0026gt; list)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        list.addAll(IntStream.rangeClosed(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e1000000\u003c/span\u003e).boxed().collect(Collectors.toList()));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e Map \u003cspan class=\"title function_\"\u003etestRead\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        List\u0026lt;Integer\u0026gt; copyOnWriteArrayList = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eCopyOnWriteArrayList\u003c/span\u003e\u0026lt;\u0026gt;();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        List\u0026lt;Integer\u0026gt; synchronizedList = Collections.synchronizedList(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eArrayList\u003c/span\u003e\u0026lt;\u0026gt;());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        addAll(copyOnWriteArrayList);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        addAll(synchronizedList);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eStopWatch\u003c/span\u003e \u003cspan class=\"variable\"\u003estopWatch\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eStopWatch\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eloopCount\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1000000\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ecount\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e copyOnWriteArrayList.size();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        stopWatch.start(\u003cspan class=\"string\"\u003e\u0026#34;Read:copyOnWriteArrayList\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        IntStream.rangeClosed(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, loopCount)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            .parallel()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            .forEach(__ -\u0026gt; copyOnWriteArrayList.get(ThreadLocalRandom.current().nextInt(count)));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        stopWatch.stop();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        stopWatch.start(\u003cspan class=\"string\"\u003e\u0026#34;Read:synchronizedList\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        IntStream.range(\u003cspan class=\"number\"\u003e0\u003c/span\u003e, loopCount)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            .parallel()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            .forEach(__ -\u0026gt; synchronizedList.get(ThreadLocalRandom.current().nextInt(count)));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        stopWatch.stop();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        log.info(stopWatch.prettyPrint());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eMap\u003c/span\u003e \u003cspan class=\"variable\"\u003eresult\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eHashMap\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        result.put(\u003cspan class=\"string\"\u003e\u0026#34;copyOnWriteArrayList\u0026#34;\u003c/span\u003e, copyOnWriteArrayList.size());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        result.put(\u003cspan class=\"string\"\u003e\u0026#34;synchronizedList\u0026#34;\u003c/span\u003e, synchronizedList.size());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e result;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e读性能差不多是写性能的一百倍。\u003c/p\u003e\n\u003ch2 id=\"Set\"\u003e\u003ca href=\"#Set\" class=\"headerlink\" title=\"Set\"\u003e\u003c/a\u003eSet\u003c/h2\u003e\u003cp\u003eSet 接口的两个实现是 CopyOnWriteArraySet 和 ConcurrentSkipListSet，使用场景可以参考前面讲述的 CopyOnWriteArrayList 和 ConcurrentSkipListMap，它们的原理都是一样的。\u003c/p\u003e\n\u003ch2 id=\"Queue\"\u003e\u003ca href=\"#Queue\" class=\"headerlink\" title=\"Queue\"\u003e\u003c/a\u003eQueue\u003c/h2\u003e\u003cp\u003eJava 并发包里面 Queue 这类并发容器是最复杂的，你可以从以下两个维度来分类。一个维度是\u003cstrong\u003e阻塞与非阻塞\u003c/strong\u003e，所谓阻塞指的是：\u003cstrong\u003e当队列已满时，入队操作阻塞；当队列已空时，出队操作阻塞\u003c/strong\u003e。另一个维度是\u003cstrong\u003e单端与双端\u003c/strong\u003e，单端指的是只能队尾入队，队首出队；而双端指的是队首队尾皆可入队出队。Java 并发包里\u003cstrong\u003e阻塞队列都用 Blocking 关键字标识，单端队列使用 Queue 标识，双端队列使用 Deque 标识\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"BlockingQueue\"\u003e\u003ca href=\"#BlockingQueue\" class=\"headerlink\" title=\"BlockingQueue\"\u003e\u003c/a\u003eBlockingQueue\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eBlockingQueue\u003c/code\u003e 顾名思义，是一个\u003cstrong\u003e阻塞队列\u003c/strong\u003e。**\u003ccode\u003eBlockingQueue\u003c/code\u003e 基本都是基于锁实现\u003cstrong\u003e。在 \u003ccode\u003eBlockingQueue\u003c/code\u003e 中，\u003c/strong\u003e当队列已满时，入队操作阻塞；当队列已空时，出队操作阻塞**。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eBlockingQueue\u003c/code\u003e 接口定义如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"title class_\"\u003eBlockingQueue\u003c/span\u003e\u0026lt;E\u0026gt; \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eQueue\u003c/span\u003e\u0026lt;E\u0026gt; {}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e核心 API：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 获取并移除队列头结点，如果必要，其会等待直到队列出现元素\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eE \u003cspan class=\"title function_\"\u003etake\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 插入元素，如果队列已满，则等待直到队列出现空闲空间\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eput\u003c/span\u003e\u003cspan class=\"params\"\u003e(E e)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eBlockingQueue\u003c/code\u003e 对插入操作、移除操作、获取元素操作提供了四种不同的方法用于不同的场景中使用：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e抛出异常；\u003c/li\u003e\n\u003cli\u003e返回特殊值（\u003ccode\u003enull\u003c/code\u003e 或 \u003ccode\u003etrue\u003c/code\u003e/\u003ccode\u003efalse\u003c/code\u003e，取决于具体的操作）；\u003c/li\u003e\n\u003cli\u003e阻塞等待此操作，直到这个操作成功；\u003c/li\u003e\n\u003cli\u003e阻塞等待此操作，直到成功或者超时指定时间。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e总结如下：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003e\u003cstrong\u003eThrows exception\u003c/strong\u003e\u003c/th\u003e\n\u003cth\u003e\u003cstrong\u003eSpecial value\u003c/strong\u003e\u003c/th\u003e\n\u003cth\u003e\u003cstrong\u003eBlocks\u003c/strong\u003e\u003c/th\u003e\n\u003cth\u003e\u003cstrong\u003eTimes out\u003c/strong\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003eInsert\u003c/td\u003e\n\u003ctd\u003eadd(e)\u003c/td\u003e\n\u003ctd\u003eoffer(e)\u003c/td\u003e\n\u003ctd\u003eput(e)\u003c/td\u003e\n\u003ctd\u003eoffer(e, time, unit)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRemove\u003c/td\u003e\n\u003ctd\u003eremove()\u003c/td\u003e\n\u003ctd\u003epoll()\u003c/td\u003e\n\u003ctd\u003etake()\u003c/td\u003e\n\u003ctd\u003epoll(time, unit)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eExamine\u003c/td\u003e\n\u003ctd\u003eelement()\u003c/td\u003e\n\u003ctd\u003epeek()\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003enot applicable\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003enot applicable\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e\u003ccode\u003eBlockingQueue\u003c/code\u003e 的各个实现类都遵循了这些规则。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eBlockingQueue\u003c/code\u003e 不接受 \u003ccode\u003enull\u003c/code\u003e 值元素。\u003c/p\u003e\n\u003cp\u003eJDK 提供了以下阻塞队列：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eArrayBlockingQueue\u003c/code\u003e - 一个由\u003cstrong\u003e数组结构组成的有界阻塞队列\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e - 一个由\u003cstrong\u003e链表结构组成的有界阻塞队列\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePriorityBlockingQueue\u003c/code\u003e - 一个\u003cstrong\u003e支持优先级排序的无界阻塞队列\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSynchronousQueue\u003c/code\u003e - 一个\u003cstrong\u003e不存储元素的阻塞队列\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDelayQueue\u003c/code\u003e - 一个使用优先级队列实现的无界阻塞队列。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLinkedTransferQueue\u003c/code\u003e - 一个\u003cstrong\u003e由链表结构组成的无界阻塞队列\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003eBlockingQueue\u003c/code\u003e 基本都是基于锁实现。\u003c/p\u003e\n\u003ch3 id=\"PriorityBlockingQueue-类\"\u003e\u003ca href=\"#PriorityBlockingQueue-类\" class=\"headerlink\" title=\"PriorityBlockingQueue 类\"\u003e\u003c/a\u003ePriorityBlockingQueue 类\u003c/h3\u003e\u003cp\u003e\u003ccode\u003ePriorityBlockingQueue\u003c/code\u003e 类定义如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003ePriorityBlockingQueue\u003c/span\u003e\u0026lt;E\u0026gt; \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eAbstractQueue\u003c/span\u003e\u0026lt;E\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eBlockingQueue\u003c/span\u003e\u0026lt;E\u0026gt;, java.io.Serializable {}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"PriorityBlockingQueue-要点\"\u003e\u003ca href=\"#PriorityBlockingQueue-要点\" class=\"headerlink\" title=\"PriorityBlockingQueue 要点\"\u003e\u003c/a\u003ePriorityBlockingQueue 要点\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ePriorityBlockingQueue\u003c/code\u003e 可以视为 \u003ccode\u003ePriorityQueue\u003c/code\u003e 的线程安全版本。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePriorityBlockingQueue\u003c/code\u003e 实现了 \u003ccode\u003eBlockingQueue\u003c/code\u003e，也是一个阻塞队列。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePriorityBlockingQueue\u003c/code\u003e 实现了 \u003ccode\u003eSerializable\u003c/code\u003e，支持序列化。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePriorityBlockingQueue\u003c/code\u003e 不接受 \u003ccode\u003enull\u003c/code\u003e 值元素。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePriorityBlockingQueue\u003c/code\u003e 的插入操作 \u003ccode\u003eput\u003c/code\u003e 方法不会 block，因为它是无界队列（take 方法在队列为空的时候会阻塞）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"PriorityBlockingQueue-原理\"\u003e\u003ca href=\"#PriorityBlockingQueue-原理\" class=\"headerlink\" title=\"PriorityBlockingQueue 原理\"\u003e\u003c/a\u003ePriorityBlockingQueue 原理\u003c/h4\u003e\u003cp\u003e\u003ccode\u003ePriorityBlockingQueue\u003c/code\u003e 有两个重要成员：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003etransient\u003c/span\u003e Object[] queue;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e ReentrantLock lock;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003equeue\u003c/code\u003e 是一个 \u003ccode\u003eObject\u003c/code\u003e 数组，用于保存 \u003ccode\u003ePriorityBlockingQueue\u003c/code\u003e 的元素。\u003c/li\u003e\n\u003cli\u003e而可重入锁 \u003ccode\u003elock\u003c/code\u003e 则用于在执行插入、删除操作时，保证这个方法在当前线程释放锁之前，其他线程不能访问。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003ePriorityBlockingQueue\u003c/code\u003e 的容量虽然有初始化大小，但是不限制大小，如果当前容量已满，插入新元素时会自动扩容。\u003c/p\u003e\n\u003ch3 id=\"ArrayBlockingQueue-类\"\u003e\u003ca href=\"#ArrayBlockingQueue-类\" class=\"headerlink\" title=\"ArrayBlockingQueue 类\"\u003e\u003c/a\u003eArrayBlockingQueue 类\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eArrayBlockingQueue\u003c/code\u003e 是由数组结构组成的\u003cstrong\u003e有界阻塞队列\u003c/strong\u003e。\u003c/p\u003e\n\u003ch4 id=\"ArrayBlockingQueue-要点\"\u003e\u003ca href=\"#ArrayBlockingQueue-要点\" class=\"headerlink\" title=\"ArrayBlockingQueue 要点\"\u003e\u003c/a\u003eArrayBlockingQueue 要点\u003c/h4\u003e\u003cp\u003e\u003ccode\u003eArrayBlockingQueue\u003c/code\u003e 类定义如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eArrayBlockingQueue\u003c/span\u003e\u0026lt;E\u0026gt; \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eAbstractQueue\u003c/span\u003e\u0026lt;E\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eBlockingQueue\u003c/span\u003e\u0026lt;E\u0026gt;, java.io.Serializable {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 数组的大小就决定了队列的边界，所以初始化时必须指定容量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eArrayBlockingQueue\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e capacity)\u003c/span\u003e { \u003cspan class=\"comment\"\u003e//... }\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eArrayBlockingQueue\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e capacity, \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e fair)\u003c/span\u003e { \u003cspan class=\"comment\"\u003e//... }\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eArrayBlockingQueue\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e capacity, \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e fair, Collection\u0026lt;? extends E\u0026gt; c)\u003c/span\u003e { \u003cspan class=\"comment\"\u003e//... }\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eArrayBlockingQueue\u003c/code\u003e 实现了 \u003ccode\u003eBlockingQueue\u003c/code\u003e，也是一个阻塞队列。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eArrayBlockingQueue\u003c/code\u003e 实现了 \u003ccode\u003eSerializable\u003c/code\u003e，支持序列化。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eArrayBlockingQueue\u003c/code\u003e 是基于数组实现的有界阻塞队列。所以初始化时必须指定容量。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"ArrayBlockingQueue-原理\"\u003e\u003ca href=\"#ArrayBlockingQueue-原理\" class=\"headerlink\" title=\"ArrayBlockingQueue 原理\"\u003e\u003c/a\u003eArrayBlockingQueue 原理\u003c/h4\u003e\u003cp\u003e\u003ccode\u003eArrayBlockingQueue\u003c/code\u003e 的重要成员如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 用于存放元素的数组\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e Object[] items;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 下一次读取操作的位置\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e takeIndex;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 下一次写入操作的位置\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e putIndex;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 队列中的元素数量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e count;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 以下几个就是控制并发用的同步器\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e ReentrantLock lock;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e Condition notEmpty;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e Condition notFull;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eArrayBlockingQueue\u003c/code\u003e 内部以 \u003ccode\u003efinal\u003c/code\u003e 的数组保存数据，数组的大小就决定了队列的边界。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eArrayBlockingQueue\u003c/code\u003e 实现并发同步的原理就是，读操作和写操作都需要获取到 AQS 独占锁才能进行操作。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果队列为空，这个时候读操作的线程进入到读线程队列排队，等待写线程写入新的元素，然后唤醒读线程队列的第一个等待线程。\u003c/li\u003e\n\u003cli\u003e如果队列已满，这个时候写操作的线程进入到写线程队列排队，等待读线程将队列元素移除，然后唤醒写线程队列的第一个等待线程。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e对于 \u003ccode\u003eArrayBlockingQueue\u003c/code\u003e，我们可以在构造的时候指定以下三个参数：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e队列容量，其限制了队列中最多允许的元素个数；\u003c/li\u003e\n\u003cli\u003e指定独占锁是公平锁还是非公平锁。非公平锁的吞吐量比较高，公平锁可以保证每次都是等待最久的线程获取到锁；\u003c/li\u003e\n\u003cli\u003e可以指定用一个集合来初始化，将此集合中的元素在构造方法期间就先添加到队列中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"LinkedBlockingQueue-类\"\u003e\u003ca href=\"#LinkedBlockingQueue-类\" class=\"headerlink\" title=\"LinkedBlockingQueue 类\"\u003e\u003c/a\u003eLinkedBlockingQueue 类\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e 是由链表结构组成的有界阻塞队列。容易被误解为无边界，但其实其行为和内部代码都是基于有界的逻辑实现的，只不过如果我们没有在创建队列时就指定容量，那么其容量限制就自动被设置为 \u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e，成为了无界队列。\u003c/p\u003e\n\u003ch4 id=\"LinkedBlockingQueue-要点\"\u003e\u003ca href=\"#LinkedBlockingQueue-要点\" class=\"headerlink\" title=\"LinkedBlockingQueue 要点\"\u003e\u003c/a\u003eLinkedBlockingQueue 要点\u003c/h4\u003e\u003cp\u003e\u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e 类定义如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eLinkedBlockingQueue\u003c/span\u003e\u0026lt;E\u0026gt; \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eAbstractQueue\u003c/span\u003e\u0026lt;E\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eBlockingQueue\u003c/span\u003e\u0026lt;E\u0026gt;, java.io.Serializable {}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e 实现了 \u003ccode\u003eBlockingQueue\u003c/code\u003e，也是一个阻塞队列。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e 实现了 \u003ccode\u003eSerializable\u003c/code\u003e，支持序列化。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e 是基于单链表实现的阻塞队列，可以当做无界队列也可以当做有界队列来使用。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e 中元素按照插入顺序保存（FIFO）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"LinkedBlockingQueue-原理\"\u003e\u003ca href=\"#LinkedBlockingQueue-原理\" class=\"headerlink\" title=\"LinkedBlockingQueue 原理\"\u003e\u003c/a\u003eLinkedBlockingQueue 原理\u003c/h4\u003e\u003cp\u003e\u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e 中的重要数据结构：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 队列容量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e capacity;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 队列中的元素数量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eAtomicInteger\u003c/span\u003e \u003cspan class=\"variable\"\u003ecount\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eAtomicInteger\u003c/span\u003e(\u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 队头\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003etransient\u003c/span\u003e Node\u0026lt;E\u0026gt; head;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 队尾\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003etransient\u003c/span\u003e Node\u0026lt;E\u0026gt; last;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// take, poll, peek 等读操作的方法需要获取到这个锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eReentrantLock\u003c/span\u003e \u003cspan class=\"variable\"\u003etakeLock\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReentrantLock\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 如果读操作的时候队列是空的，那么等待 notEmpty 条件\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eCondition\u003c/span\u003e \u003cspan class=\"variable\"\u003enotEmpty\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e takeLock.newCondition();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// put, offer 等写操作的方法需要获取到这个锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eReentrantLock\u003c/span\u003e \u003cspan class=\"variable\"\u003eputLock\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReentrantLock\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 如果写操作的时候队列是满的，那么等待 notFull 条件\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eCondition\u003c/span\u003e \u003cspan class=\"variable\"\u003enotFull\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e putLock.newCondition();\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里用了两对 \u003ccode\u003eLock\u003c/code\u003e 和 \u003ccode\u003eCondition\u003c/code\u003e，简单介绍如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etakeLock\u003c/code\u003e 和 \u003ccode\u003enotEmpty\u003c/code\u003e 搭配：如果要获取（take）一个元素，需要获取 \u003ccode\u003etakeLock\u003c/code\u003e 锁，但是获取了锁还不够，如果队列此时为空，还需要队列不为空（\u003ccode\u003enotEmpty\u003c/code\u003e）这个条件（\u003ccode\u003eCondition\u003c/code\u003e）。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eputLock\u003c/code\u003e 需要和 \u003ccode\u003enotFull\u003c/code\u003e 搭配：如果要插入（put）一个元素，需要获取 \u003ccode\u003eputLock\u003c/code\u003e 锁，但是获取了锁还不够，如果队列此时已满，还需要队列不是满的（notFull）这个条件（\u003ccode\u003eCondition\u003c/code\u003e）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"SynchronousQueue-类\"\u003e\u003ca href=\"#SynchronousQueue-类\" class=\"headerlink\" title=\"SynchronousQueue 类\"\u003e\u003c/a\u003eSynchronousQueue 类\u003c/h3\u003e\u003cp\u003eSynchronousQueue 是\u003cstrong\u003e不存储元素的阻塞队列\u003c/strong\u003e。每个删除操作都要等待插入操作，反之每个插入操作也都要等待删除动作。那么这个队列的容量是多少呢？是 1 吗？其实不是的，其内部容量是 0。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eSynchronousQueue\u003c/code\u003e 定义如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSynchronousQueue\u003c/span\u003e\u0026lt;E\u0026gt; \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eAbstractQueue\u003c/span\u003e\u0026lt;E\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eBlockingQueue\u003c/span\u003e\u0026lt;E\u0026gt;, java.io.Serializable {}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eSynchronousQueue\u003c/code\u003e 这个类，在线程池的实现类 \u003ccode\u003eScheduledThreadPoolExecutor\u003c/code\u003e 中得到了应用。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eSynchronousQueue\u003c/code\u003e 的队列其实是虚的，即队列容量为 0。数据必须从某个写线程交给某个读线程，而不是写到某个队列中等待被消费。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eSynchronousQueue\u003c/code\u003e 中不能使用 peek 方法（在这里这个方法直接返回 null），peek 方法的语义是只读取不移除，显然，这个方法的语义是不符合 SynchronousQueue 的特征的。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eSynchronousQueue\u003c/code\u003e 也不能被迭代，因为根本就没有元素可以拿来迭代的。\u003c/p\u003e\n\u003cp\u003e虽然 \u003ccode\u003eSynchronousQueue\u003c/code\u003e 间接地实现了 Collection 接口，但是如果你将其当做 Collection 来用的话，那么集合是空的。\u003c/p\u003e\n\u003cp\u003e当然，\u003ccode\u003eSynchronousQueue\u003c/code\u003e 也不允许传递 null 值的（并发包中的容器类好像都不支持插入 null 值，因为 null 值往往用作其他用途，比如用于方法的返回值代表操作失败）。\u003c/p\u003e\n\u003ch3 id=\"ConcurrentLinkedDeque-类\"\u003e\u003ca href=\"#ConcurrentLinkedDeque-类\" class=\"headerlink\" title=\"ConcurrentLinkedDeque 类\"\u003e\u003c/a\u003eConcurrentLinkedDeque 类\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eDeque\u003c/code\u003e 的侧重点是支持对队列头尾都进行插入和删除，所以提供了特定的方法，如:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e尾部插入时需要的 \u003ccode\u003eaddLast(e)\u003c/code\u003e、\u003ccode\u003eofferLast(e)\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e尾部删除所需要的 \u003ccode\u003eremoveLast()\u003c/code\u003e、\u003ccode\u003epollLast()\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Queue-的并发应用\"\u003e\u003ca href=\"#Queue-的并发应用\" class=\"headerlink\" title=\"Queue 的并发应用\"\u003e\u003c/a\u003eQueue 的并发应用\u003c/h3\u003e\u003cp\u003eQueue 被广泛使用在生产者 - 消费者场景。而在并发场景，利用 \u003ccode\u003eBlockingQueue\u003c/code\u003e 的阻塞机制，可以减少很多并发协调工作。\u003c/p\u003e\n\u003cp\u003e这么多并发 Queue 的实现，如何选择呢？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e考虑应用场景中对队列边界的要求。\u003ccode\u003eArrayBlockingQueue\u003c/code\u003e 是有明确的容量限制的，而 \u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e 则取决于我们是否在创建时指定，\u003ccode\u003eSynchronousQueue\u003c/code\u003e 则干脆不能缓存任何元素。\u003c/li\u003e\n\u003cli\u003e从空间利用角度，数组结构的 \u003ccode\u003eArrayBlockingQueue\u003c/code\u003e 要比 \u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e 紧凑，因为其不需要创建所谓节点，但是其初始分配阶段就需要一段连续的空间，所以初始内存需求更大。\u003c/li\u003e\n\u003cli\u003e通用场景中，\u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e 的吞吐量一般优于 \u003ccode\u003eArrayBlockingQueue\u003c/code\u003e，因为它实现了更加细粒度的锁操作。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eArrayBlockingQueue\u003c/code\u003e 实现比较简单，性能更好预测，属于表现稳定的“选手”。\u003c/li\u003e\n\u003cli\u003e可能令人意外的是，很多时候 \u003ccode\u003eSynchronousQueue\u003c/code\u003e 的性能表现，往往大大超过其他实现，尤其是在队列元素较小的场景。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/10484692/\"\u003e《Java 并发编程实战》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/26591326/\"\u003e《Java 并发编程的艺术》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/u010425776/article/details/54890215\"\u003ehttps://blog.csdn.net/u010425776/article/details/54890215\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/wangxiaotongfan/article/details/52074160\"\u003ehttps://blog.csdn.net/wangxiaotongfan/article/details/52074160\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://my.oschina.net/hosee/blog/675884\"\u003ehttps://my.oschina.net/hosee/blog/675884\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.jianshu.com/p/c0642afe03e0\"\u003ehttps://www.jianshu.com/p/c0642afe03e0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.jianshu.com/p/f6730d5784ad\"\u003ehttps://www.jianshu.com/p/f6730d5784ad\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.javarticles.com/2012/06/copyonwritearraylist.html\"\u003ehttp://www.javarticles.com/2012/06/copyonwritearraylist.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.cnblogs.com/xrq730/p/5020760.html\"\u003ehttps://www.cnblogs.com/xrq730/p/5020760.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.cnblogs.com/leesf456/p/5547853.html\"\u003ehttps://www.cnblogs.com/leesf456/p/5547853.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.cnblogs.com/chengxiao/p/6881974.html\"\u003ehttp://www.cnblogs.com/chengxiao/p/6881974.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.cnblogs.com/dolphin0520/p/3933404.html\"\u003ehttp://www.cnblogs.com/dolphin0520/p/3933404.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://juejin.im/post/5b551e8df265da0f84562403\"\u003eHashMap? ConcurrentHashMap? 相信看完这篇没人能难住你！\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-02-02T09:54:36Z",
  "Author": "钝悟 ◾ Dunwu"
}