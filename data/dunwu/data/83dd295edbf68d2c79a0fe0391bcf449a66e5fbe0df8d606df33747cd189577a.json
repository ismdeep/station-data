{
  "Source": "dunwu",
  "Title": "Java 内存管理",
  "Link": "https://dunwu.github.io/blog/pages/db5b69/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Java-内存管理\"\u003e\u003ca href=\"#Java-内存管理\" class=\"headerlink\" title=\"Java 内存管理\"\u003e\u003c/a\u003eJava 内存管理\u003c/h1\u003e\u003ch2 id=\"内存简介\"\u003e\u003ca href=\"#内存简介\" class=\"headerlink\" title=\"内存简介\"\u003e\u003c/a\u003e内存简介\u003c/h2\u003e\u003ch3 id=\"物理内存和虚拟内存\"\u003e\u003ca href=\"#物理内存和虚拟内存\" class=\"headerlink\" title=\"物理内存和虚拟内存\"\u003e\u003c/a\u003e物理内存和虚拟内存\u003c/h3\u003e\u003cp\u003e所谓物理内存就是通常所说的 RAM（随机存储器）。\u003c/p\u003e\n\u003cp\u003e虚拟内存使得多个进程在同时运行时可以共享物理内存，这里的共享只是空间上共享，在逻辑上彼此仍然是隔离的。\u003c/p\u003e\n\u003ch3 id=\"内核空间和用户空间\"\u003e\u003ca href=\"#内核空间和用户空间\" class=\"headerlink\" title=\"内核空间和用户空间\"\u003e\u003c/a\u003e内核空间和用户空间\u003c/h3\u003e\u003cp\u003e一个计算通常有固定大小的内存空间，但是程序并不能使用全部的空间。因为这些空间被划分为内核空间和用户空间，而程序只能使用用户空间的内存。\u003c/p\u003e\n\u003ch3 id=\"使用内存的-Java-组件\"\u003e\u003ca href=\"#使用内存的-Java-组件\" class=\"headerlink\" title=\"使用内存的 Java 组件\"\u003e\u003c/a\u003e使用内存的 Java 组件\u003c/h3\u003e\u003cp\u003eJava 启动后，作为一个进程运行在操作系统中。\u003c/p\u003e\n\u003cp\u003e有哪些 Java 组件需要占用内存呢？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e堆内存：Java 堆、类和类加载器\u003c/li\u003e\n\u003cli\u003e栈内存：线程\u003c/li\u003e\n\u003cli\u003e本地内存：NIO、JNI\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"运行时数据区域\"\u003e\u003ca href=\"#运行时数据区域\" class=\"headerlink\" title=\"运行时数据区域\"\u003e\u003c/a\u003e运行时数据区域\u003c/h2\u003e\u003cp\u003eJVM 在执行 Java 程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。如下图所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-memory-runtime-data-area.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"程序计数器\"\u003e\u003ca href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"\u003e\u003c/a\u003e程序计数器\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003e程序计数器（Program Counter Register）\u003c/code\u003e\u003c/strong\u003e 是一块较小的内存空间，它可以看做是\u003cstrong\u003e当前线程所执行的字节码的行号指示器\u003c/strong\u003e。例如，分支、循环、跳转、异常、线程恢复等都依赖于计数器。\u003c/p\u003e\n\u003cp\u003e当执行的线程数量超过 CPU 数量时，线程之间会根据时间片轮询争夺 CPU 资源。如果一个线程的时间片用完了，或者是其它原因导致这个线程的 CPU 资源被提前抢夺，那么这个退出的线程就需要单独的一个程序计数器，来记录下一条运行的指令，从而在线程切换后能恢复到正确的执行位置。各条线程间的计数器互不影响，独立存储，我们称这类内存区域为 “线程私有” 的内存。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果线程正在执行的是一个 Java 方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；\u003c/li\u003e\n\u003cli\u003e如果正在执行的是 Native 方法，这个计数器值则为空（Undefined）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e🔔 注意：此内存区域是唯一一个在 JVM 中没有规定任何 \u003ccode\u003eOutOfMemoryError\u003c/code\u003e 情况的区域。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"Java-虚拟机栈\"\u003e\u003ca href=\"#Java-虚拟机栈\" class=\"headerlink\" title=\"Java 虚拟机栈\"\u003e\u003c/a\u003eJava 虚拟机栈\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eJava 虚拟机栈（Java Virtual Machine Stacks）\u003c/code\u003e\u003c/strong\u003e 也\u003cstrong\u003e是线程私有的，它的生命周期与线程相同\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e每个 Java 方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储 \u003cstrong\u003e局部变量表\u003c/strong\u003e、\u003cstrong\u003e操作数栈\u003c/strong\u003e、\u003cstrong\u003e常量池引用\u003c/strong\u003e 等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-stack.png!w640\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e局部变量表\u003c/strong\u003e - 32 位变量槽，存放了编译期可知的各种基本数据类型、对象引用、\u003ccode\u003eReturnAddress\u003c/code\u003e 类型。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e操作数栈\u003c/strong\u003e - 基于栈的执行引擎，虚拟机把操作数栈作为它的工作区，大多数指令都要从这里弹出数据、执行运算，然后把结果压回操作数栈。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e动态链接\u003c/strong\u003e - 每个栈帧都包含一个指向运行时常量池（方法区的一部分）中该栈帧所属方法的引用。持有这个引用是为了支持方法调用过程中的动态连接。Class 文件的常量池中有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用一部分会在类加载阶段或第一次使用的时候转化为直接引用，这种转化称为静态解析。另一部分将在每一次的运行期间转化为直接应用，这部分称为动态链接。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e方法出口\u003c/strong\u003e - 返回方法被调用的位置，恢复上层方法的局部变量和操作数栈，如果无返回值，则把它压入调用者的操作数栈。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e🔔 注意：\u003c/p\u003e\n\u003cp\u003e该区域可能抛出以下异常：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果线程请求的栈深度超过最大值，就会抛出 \u003ccode\u003eStackOverflowError\u003c/code\u003e 异常；\u003c/li\u003e\n\u003cli\u003e如果虚拟机栈进行动态扩展时，无法申请到足够内存，就会抛出 \u003ccode\u003eOutOfMemoryError\u003c/code\u003e 异常。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e💡 提示：\u003c/p\u003e\n\u003cp\u003e可以通过 \u003ccode\u003e-Xss\u003c/code\u003e 这个虚拟机参数来指定一个程序的 Java 虚拟机栈内存大小：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ejava -Xss=512M HackTheJava\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"本地方法栈\"\u003e\u003ca href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"\u003e\u003c/a\u003e本地方法栈\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003e本地方法栈（Native Method Stack）\u003c/code\u003e\u003c/strong\u003e 与虚拟机栈的作用相似。\u003c/p\u003e\n\u003cp\u003e二者的区别在于：\u003cstrong\u003e虚拟机栈为 Java 方法服务；本地方法栈为 Native 方法服务\u003c/strong\u003e。本地方法并不是用 Java 实现的，而是由 C 语言实现的。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-native-method-stack.gif!w640\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e🔔 注意：本地方法栈也会抛出 \u003ccode\u003eStackOverflowError\u003c/code\u003e 异常和 \u003ccode\u003eOutOfMemoryError\u003c/code\u003e 异常。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"Java-堆\"\u003e\u003ca href=\"#Java-堆\" class=\"headerlink\" title=\"Java 堆\"\u003e\u003c/a\u003eJava 堆\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eJava 堆（Java Heap）\u003c/code\u003e 的作用就是存放对象实例，几乎所有的对象实例都是在这里分配内存\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eJava 堆是垃圾收集的主要区域（因此也被叫做”GC 堆”）。现代的垃圾收集器基本都是采用\u003cstrong\u003e分代收集算法\u003c/strong\u003e，该算法的思想是针对不同的对象采取不同的垃圾回收算法。\u003c/p\u003e\n\u003cp\u003e因此虚拟机把 Java 堆分成以下三块：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e新生代（Young Generation）\u003c/code\u003e\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eEden\u003c/code\u003e - Eden 和 Survivor 的比例为 8:1\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFrom Survivor\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTo Survivor\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e老年代（Old Generation）\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e永久代（Permanent Generation）\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e当一个对象被创建时，它首先进入新生代，之后有可能被转移到老年代中。新生代存放着大量的生命很短的对象，因此新生代在三个区域中垃圾回收的频率最高。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-heap.gif!w640\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e🔔 注意：Java 堆不需要连续内存，并且可以动态扩展其内存，扩展失败会抛出 \u003ccode\u003eOutOfMemoryError\u003c/code\u003e 异常。\u003c/p\u003e\n\u003cp\u003e💡 提示：可以通过 \u003ccode\u003e-Xms\u003c/code\u003e 和 \u003ccode\u003e-Xmx\u003c/code\u003e 两个虚拟机参数来指定一个程序的 Java 堆内存大小，第一个参数设置初始值，第二个参数设置最大值。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ejava -Xms=1M -Xmx=2M HackTheJava\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"方法区\"\u003e\u003ca href=\"#方法区\" class=\"headerlink\" title=\"方法区\"\u003e\u003c/a\u003e方法区\u003c/h3\u003e\u003cp\u003e方法区（Method Area）也被称为永久代。\u003cstrong\u003e方法区用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较难实现。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e🔔 注意：和 Java 堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 \u003ccode\u003eOutOfMemoryError\u003c/code\u003e 异常。\u003c/p\u003e\n\u003cp\u003e💡 提示：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJDK 1.7 之前，HotSpot 虚拟机把它当成永久代来进行垃圾回收。可通过参数 \u003ccode\u003e-XX:PermSize\u003c/code\u003e 和 \u003ccode\u003e-XX:MaxPermSize\u003c/code\u003e 设置。\u003c/li\u003e\n\u003cli\u003eJDK 1.8 之后，取消了永久代，用 **\u003ccode\u003emetaspace（元数据）\u003c/code\u003e**区替代。可通过参数 \u003ccode\u003e-XX:MaxMetaspaceSize\u003c/code\u003e 设置。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"运行时常量池\"\u003e\u003ca href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"\u003e\u003c/a\u003e运行时常量池\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003e运行时常量池（Runtime Constant Pool）\u003c/code\u003e 是方法区的一部分\u003c/strong\u003e，Class 文件中除了有类的版本、字段、方法、接口等描述信息，还有一项信息是常量池（Constant Pool Table），\u003cstrong\u003e用于存放编译器生成的各种字面量和符号引用\u003c/strong\u003e，这部分内容会在类加载后被放入这个区域。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e字面量\u003c/strong\u003e - 文本字符串、声明为 \u003ccode\u003efinal\u003c/code\u003e 的常量值等。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e符号引用\u003c/strong\u003e - 类和接口的完全限定名（Fully Qualified Name）、字段的名称和描述符（Descriptor）、方法的名称和描述符。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e除了在编译期生成的常量，还允许动态生成，例如 \u003ccode\u003eString\u003c/code\u003e 类的 \u003ccode\u003eintern()\u003c/code\u003e。这部分常量也会被放入运行时常量池。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e🔔 注意：当常量池无法再申请到内存时会抛出 \u003ccode\u003eOutOfMemoryError\u003c/code\u003e 异常。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"直接内存\"\u003e\u003ca href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"\u003e\u003c/a\u003e直接内存\u003c/h3\u003e\u003cp\u003e直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是 JVM 规范中定义的内存区域。\u003c/p\u003e\n\u003cp\u003e在 JDK 1.4 中新加入了 NIO 类，它可以使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆里的 \u003ccode\u003eDirectByteBuffer\u003c/code\u003e 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e🔔 注意：直接内存这部分也被频繁的使用，且也可能导致 \u003ccode\u003eOutOfMemoryError\u003c/code\u003e 异常。\u003c/p\u003e\n\u003cp\u003e💡 提示：直接内存容量可通过 \u003ccode\u003e-XX:MaxDirectMemorySize\u003c/code\u003e 指定，如果不指定，则默认与 Java 堆最大值（\u003ccode\u003e-Xmx\u003c/code\u003e 指定）一样。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"Java-内存区域对比\"\u003e\u003ca href=\"#Java-内存区域对比\" class=\"headerlink\" title=\"Java 内存区域对比\"\u003e\u003c/a\u003eJava 内存区域对比\u003c/h3\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e内存区域\u003c/th\u003e\n\u003cth\u003e内存作用范围\u003c/th\u003e\n\u003cth\u003e异常\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e程序计数器\u003c/td\u003e\n\u003ctd\u003e线程私有\u003c/td\u003e\n\u003ctd\u003e无\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eJava 虚拟机栈\u003c/td\u003e\n\u003ctd\u003e线程私有\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eStackOverflowError\u003c/code\u003e 和 \u003ccode\u003eOutOfMemoryError\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e本地方法栈\u003c/td\u003e\n\u003ctd\u003e线程私有\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eStackOverflowError\u003c/code\u003e 和 \u003ccode\u003eOutOfMemoryError\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eJava 堆\u003c/td\u003e\n\u003ctd\u003e线程共享\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eOutOfMemoryError\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e方法区\u003c/td\u003e\n\u003ctd\u003e线程共享\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eOutOfMemoryError\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e运行时常量池\u003c/td\u003e\n\u003ctd\u003e线程共享\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eOutOfMemoryError\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e直接内存\u003c/td\u003e\n\u003ctd\u003e非运行时数据区\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eOutOfMemoryError\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"JVM-运行原理\"\u003e\u003ca href=\"#JVM-运行原理\" class=\"headerlink\" title=\"JVM 运行原理\"\u003e\u003c/a\u003eJVM 运行原理\u003c/h2\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e60\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e61\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eJVMCase\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// 常量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003eMAN_SEX_TYPE\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;man\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// 静态变量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003eWOMAN_SEX_TYPE\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;woman\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"type\"\u003eStudent\u003c/span\u003e \u003cspan class=\"variable\"\u003estu\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eStudent\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tstu.setName(\u003cspan class=\"string\"\u003e\u0026#34;nick\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tstu.setSexType(MAN_SEX_TYPE);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tstu.setAge(\u003cspan class=\"number\"\u003e20\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"type\"\u003eJVMCase\u003c/span\u003e \u003cspan class=\"variable\"\u003ejvmcase\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eJVMCase\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"comment\"\u003e// 调用静态方法\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tprint(stu);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"comment\"\u003e// 调用非静态方法\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tjvmcase.sayHello(stu);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// 常规静态方法\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eprint\u003c/span\u003e\u003cspan class=\"params\"\u003e(Student stu)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(\u003cspan class=\"string\"\u003e\u0026#34;name: \u0026#34;\u003c/span\u003e + stu.getName() + \u003cspan class=\"string\"\u003e\u0026#34;; sex:\u0026#34;\u003c/span\u003e + stu.getSexType() + \u003cspan class=\"string\"\u003e\u0026#34;; age:\u0026#34;\u003c/span\u003e + stu.getAge());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// 非静态方法\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003esayHello\u003c/span\u003e\u003cspan class=\"params\"\u003e(Student stu)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tSystem.out.println(stu.getName() + \u003cspan class=\"string\"\u003e\u0026#34;say: hello\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eStudent\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tString name;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tString sexType;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"type\"\u003eint\u003c/span\u003e age;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"title function_\"\u003egetName\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e name;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003esetName\u003c/span\u003e\u003cspan class=\"params\"\u003e(String name)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.name = name;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"title function_\"\u003egetSexType\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e sexType;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003esetSexType\u003c/span\u003e\u003cspan class=\"params\"\u003e(String sexType)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.sexType = sexType;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003egetAge\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e age;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003esetAge\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e age)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.age = age;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e运行以上代码时，JVM 处理过程如下：\u003c/p\u003e\n\u003cp\u003e（1）JVM 向操作系统申请内存，JVM 第一步就是通过配置参数或者默认配置参数向操作系统申请内存空间，根据内存大小找到具体的内存分配表，然后把内存段的起始地址和终止地址分配给 JVM，接下来 JVM 就进行内部分配。\u003c/p\u003e\n\u003cp\u003e（2）JVM 获得内存空间后，会根据配置参数分配堆、栈以及方法区的内存大小。\u003c/p\u003e\n\u003cp\u003e（3）class 文件加载、验证、准备以及解析，其中准备阶段会为类的静态变量分配内存，初始化为系统的初始值（这部分我在第 21 讲还会详细介绍）。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200630094250.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e（4）完成上一个步骤后，将会进行最后一个初始化阶段。在这个阶段中，JVM 首先会执行构造器 \u003ccode\u003e\u0026lt;clinit\u0026gt;\u003c/code\u003e 方法，编译器会在 \u003ccode\u003e.java\u003c/code\u003e 文件被编译成 \u003ccode\u003e.class\u003c/code\u003e 文件时，收集所有类的初始化代码，包括静态变量赋值语句、静态代码块、静态方法，收集在一起成为 \u003ccode\u003e\u0026lt;clinit\u0026gt;()\u003c/code\u003e 方法。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200630094329.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e（5）执行方法。启动 main 线程，执行 main 方法，开始执行第一行代码。此时堆内存中会创建一个 student 对象，对象引用 student 就存放在栈中。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200630094651.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e（6）此时再次创建一个 JVMCase 对象，调用 sayHello 非静态方法，sayHello 方法属于对象 JVMCase，此时 sayHello 方法入栈，并通过栈中的 student 引用调用堆中的 Student 对象；之后，调用静态方法 print，print 静态方法属于 JVMCase 类，是从静态方法中获取，之后放入到栈中，也是通过 student 引用调用堆中的 student 对象。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200630094714.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"OutOfMemoryError\"\u003e\u003ca href=\"#OutOfMemoryError\" class=\"headerlink\" title=\"OutOfMemoryError\"\u003e\u003c/a\u003eOutOfMemoryError\u003c/h2\u003e\u003ch3 id=\"什么是-OutOfMemoryError\"\u003e\u003ca href=\"#什么是-OutOfMemoryError\" class=\"headerlink\" title=\"什么是 OutOfMemoryError\"\u003e\u003c/a\u003e什么是 OutOfMemoryError\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eOutOfMemoryError\u003c/code\u003e 简称为 OOM。Java 中对 OOM 的解释是，没有空闲内存，并且垃圾收集器也无法提供更多内存。通俗的解释是：JVM 内存不足了。\u003c/p\u003e\n\u003cp\u003e在 JVM 规范中，\u003cstrong\u003e除了程序计数器区域外，其他运行时区域都可能发生 \u003ccode\u003eOutOfMemoryError\u003c/code\u003e 异常（简称 OOM）\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e下面逐一介绍 OOM 发生场景。\u003c/p\u003e\n\u003ch3 id=\"堆空间溢出\"\u003e\u003ca href=\"#堆空间溢出\" class=\"headerlink\" title=\"堆空间溢出\"\u003e\u003c/a\u003e堆空间溢出\u003c/h3\u003e\u003cp\u003e\u003ccode\u003ejava.lang.OutOfMemoryError: Java heap space\u003c/code\u003e 这个错误意味着：\u003cstrong\u003e堆空间溢出\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e更细致的说法是：Java 堆内存已经达到 \u003ccode\u003e-Xmx\u003c/code\u003e 设置的最大值。Java 堆用于存储对象实例，只要不断地创建对象，并且保证 GC Roots 到对象之间有可达路径来避免垃圾收集器回收这些对象，那么当堆空间到达最大容量限制后就会产生 OOM。\u003c/p\u003e\n\u003cp\u003e堆空间溢出有可能是**\u003ccode\u003e内存泄漏（Memory Leak）\u003c/code\u003e** 或 \u003cstrong\u003e\u003ccode\u003e内存溢出（Memory Overflow）\u003c/code\u003e\u003c/strong\u003e 。需要使用 jstack 和 jmap 生成 threaddump 和 heapdump，然后用内存分析工具（如：MAT）进行分析。\u003c/p\u003e\n\u003ch4 id=\"Java-heap-space-分析步骤\"\u003e\u003ca href=\"#Java-heap-space-分析步骤\" class=\"headerlink\" title=\"Java heap space 分析步骤\"\u003e\u003c/a\u003eJava heap space 分析步骤\u003c/h4\u003e\u003col\u003e\n\u003cli\u003e使用 \u003ccode\u003ejmap\u003c/code\u003e 或 \u003ccode\u003e-XX:+HeapDumpOnOutOfMemoryError\u003c/code\u003e 获取堆快照。\u003c/li\u003e\n\u003cli\u003e使用内存分析工具（visualvm、mat、jProfile 等）对堆快照文件进行分析。\u003c/li\u003e\n\u003cli\u003e根据分析图，重点是确认内存中的对象是否是必要的，分清究竟是是内存泄漏（Memory Leak）还是内存溢出（Memory Overflow）。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"内存泄漏\"\u003e\u003ca href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"\u003e\u003c/a\u003e内存泄漏\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e内存泄漏是指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，失去了对该段内存的控制，因而造成了内存的浪费。内存泄漏随着被执行的次数不断增加，最终会导致内存溢出。\u003c/p\u003e\n\u003cp\u003e内存泄漏常见场景：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e静态容器\u003cul\u003e\n\u003cli\u003e声明为静态（\u003ccode\u003estatic\u003c/code\u003e）的 \u003ccode\u003eHashMap\u003c/code\u003e、\u003ccode\u003eVector\u003c/code\u003e 等集合\u003c/li\u003e\n\u003cli\u003e通俗来讲 A 中有 B，当前只把 B 设置为空，A 没有设置为空，回收时 B 无法回收。因为被 A 引用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e监听器\u003cul\u003e\n\u003cli\u003e监听器被注册后释放对象时没有删除监听器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e物理连接\u003cul\u003e\n\u003cli\u003e各种连接池建立了连接，必须通过 \u003ccode\u003eclose()\u003c/code\u003e 关闭链接\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e内部类和外部模块等的引用\u003cul\u003e\n\u003cli\u003e发现它的方式同内存溢出，可再加个实时观察\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ejstat -gcutil 7362 2500 70\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e重点关注：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eFGC\u003c/code\u003e — 从应用程序启动到采样时发生 Full GC 的次数。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFGCT\u003c/code\u003e — 从应用程序启动到采样时 Full GC 所用的时间（单位秒）。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFGC\u003c/code\u003e 次数越多，\u003ccode\u003eFGCT\u003c/code\u003e 所需时间越多，越有可能存在内存泄漏。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果是内存泄漏，可以进一步查看泄漏对象到 GC Roots 的对象引用链。这样就能找到泄漏对象是怎样与 GC Roots 关联并导致 GC 无法回收它们的。掌握了这些原因，就可以较准确的定位出引起内存泄漏的代码。\u003c/p\u003e\n\u003cp\u003e导致内存泄漏的常见原因是使用容器，且不断向容器中添加元素，但没有清理，导致容器内存不断膨胀。\u003c/p\u003e\n\u003cp\u003e【示例】\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 内存泄漏示例\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 错误现象：java.lang.OutOfMemoryError: Java heap space\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * VM Args：-verbose:gc -Xms10M -Xmx10M -XX:+HeapDumpOnOutOfMemoryError\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eHeapOutOfMemoryDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        List\u0026lt;OomObject\u0026gt; list = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eArrayList\u003c/span\u003e\u0026lt;\u0026gt;();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            list.add(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eOomObject\u003c/span\u003e());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eOomObject\u003c/span\u003e {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"内存溢出\"\u003e\u003ca href=\"#内存溢出\" class=\"headerlink\" title=\"内存溢出\"\u003e\u003c/a\u003e内存溢出\u003c/h4\u003e\u003cp\u003e如果不存在内存泄漏，即内存中的对象确实都必须存活着，则应当检查虚拟机的堆参数（\u003ccode\u003e-Xmx\u003c/code\u003e 和 \u003ccode\u003e-Xms\u003c/code\u003e），与机器物理内存进行对比，看看是否可以调大。并从代码上检查是否存在某些对象生命周期过长、持有时间过长的情况，尝试减少程序运行期的内存消耗。\u003c/p\u003e\n\u003cp\u003e【示例】\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 堆溢出示例\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u0026lt;p\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 错误现象：java.lang.OutOfMemoryError: Java heap space\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u0026lt;p\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * VM Args：-verbose:gc -Xms10M -Xmx10M\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e *\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u003cspan class=\"doctag\"\u003e@author\u003c/span\u003e \u0026lt;a href=\u0026#34;mailto:forbreak@163.com\u0026#34;\u0026gt;Zhang Peng\u0026lt;/a\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u003cspan class=\"doctag\"\u003e@since\u003c/span\u003e 2019-06-25\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eHeapOutOfMemoryDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Double[] array = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eDouble\u003c/span\u003e[\u003cspan class=\"number\"\u003e999999999\u003c/span\u003e];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;array length = [\u0026#34;\u003c/span\u003e + array.length + \u003cspan class=\"string\"\u003e\u0026#34;]\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e执行 \u003ccode\u003ejava -verbose:gc -Xms10M -Xmx10M -XX:+HeapDumpOnOutOfMemoryError io.github.dunwu.javacore.jvm.memory.HeapMemoryLeakMemoryErrorDemo\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e上面的例子是一个极端的例子，试图创建一个维度很大的数组，堆内存无法分配这么大的内存，从而报错：\u003ccode\u003eJava heap space\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e但如果在现实中，代码并没有问题，仅仅是因为堆内存不足，可以通过 \u003ccode\u003e-Xms\u003c/code\u003e 和 \u003ccode\u003e-Xmx\u003c/code\u003e 适当调整堆内存大小。\u003c/p\u003e\n\u003ch3 id=\"GC-开销超过限制\"\u003e\u003ca href=\"#GC-开销超过限制\" class=\"headerlink\" title=\"GC 开销超过限制\"\u003e\u003c/a\u003eGC 开销超过限制\u003c/h3\u003e\u003cp\u003e\u003ccode\u003ejava.lang.OutOfMemoryError: GC overhead limit exceeded\u003c/code\u003e 这个错误，官方给出的定义是：\u003cstrong\u003e超过 \u003ccode\u003e98%\u003c/code\u003e 的时间用来做 GC 并且回收了不到 \u003ccode\u003e2%\u003c/code\u003e 的堆内存时会抛出此异常\u003c/strong\u003e。这意味着，发生在 GC 占用大量时间为释放很小空间的时候发生的，是一种保护机制。导致异常的原因：一般是因为堆太小，没有足够的内存。\u003c/p\u003e\n\u003cp\u003e【示例】\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * GC overhead limit exceeded 示例\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 错误现象：java.lang.OutOfMemoryError: GC overhead limit exceeded\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 发生在GC占用大量时间为释放很小空间的时候发生的，是一种保护机制。导致异常的原因：一般是因为堆太小，没有足够的内存。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 官方对此的定义：超过98%的时间用来做GC并且回收了不到2%的堆内存时会抛出此异常。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * VM Args: -Xms10M -Xmx10M\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eGcOverheadLimitExceededDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        List\u0026lt;Double\u0026gt; list = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eArrayList\u003c/span\u003e\u0026lt;\u0026gt;();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003edouble\u003c/span\u003e \u003cspan class=\"variable\"\u003ed\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0.0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            list.add(d++);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【处理】\u003c/p\u003e\n\u003cp\u003e与 \u003cstrong\u003eJava heap space\u003c/strong\u003e 错误处理方法类似，先判断是否存在内存泄漏。如果有，则修正代码；如果没有，则通过 \u003ccode\u003e-Xms\u003c/code\u003e 和 \u003ccode\u003e-Xmx\u003c/code\u003e 适当调整堆内存大小。\u003c/p\u003e\n\u003ch3 id=\"永久代空间不足\"\u003e\u003ca href=\"#永久代空间不足\" class=\"headerlink\" title=\"永久代空间不足\"\u003e\u003c/a\u003e永久代空间不足\u003c/h3\u003e\u003cp\u003e【错误】\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ejava\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.OutOfMemoryError\u003c/span\u003e: PermGen space\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【原因】\u003c/p\u003e\n\u003cp\u003ePerm （永久代）空间主要用于存放 \u003ccode\u003eClass\u003c/code\u003e 和 Meta 信息，包括类的名称和字段，带有方法字节码的方法，常量池信息，与类关联的对象数组和类型数组以及即时编译器优化。GC 在主程序运行期间不会对永久代空间进行清理，默认是 64M 大小。\u003c/p\u003e\n\u003cp\u003e根据上面的定义，可以得出 \u003cstrong\u003ePermGen 大小要求取决于加载的类的数量以及此类声明的大小\u003c/strong\u003e。因此，可以说造成该错误的主要原因是永久代中装入了太多的类或太大的类。\u003c/p\u003e\n\u003cp\u003e在 JDK8 之前的版本中，可以通过 \u003ccode\u003e-XX:PermSize\u003c/code\u003e 和 \u003ccode\u003e-XX:MaxPermSize\u003c/code\u003e 设置永久代空间大小，从而限制方法区大小，并间接限制其中常量池的容量。\u003c/p\u003e\n\u003ch4 id=\"初始化时永久代空间不足\"\u003e\u003ca href=\"#初始化时永久代空间不足\" class=\"headerlink\" title=\"初始化时永久代空间不足\"\u003e\u003c/a\u003e初始化时永久代空间不足\u003c/h4\u003e\u003cp\u003e【示例】\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 永久代内存空间不足示例\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u0026lt;p\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 错误现象：\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u0026lt;ul\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u0026lt;li\u0026gt;java.lang.OutOfMemoryError: PermGen space (JDK8 以前版本)\u0026lt;/li\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u0026lt;li\u0026gt;java.lang.OutOfMemoryError: Metaspace (JDK8 及以后版本)\u0026lt;/li\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u0026lt;/ul\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * VM Args:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u0026lt;ul\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u0026lt;li\u0026gt;-Xmx100M -XX:MaxPermSize=16M (JDK8 以前版本)\u0026lt;/li\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u0026lt;li\u0026gt;-Xmx100M -XX:MaxMetaspaceSize=16M (JDK8 及以后版本)\u0026lt;/li\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u0026lt;/ul\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003ePermOutOfMemoryErrorDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e Exception {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e100_000_000\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            generate(\u003cspan class=\"string\"\u003e\u0026#34;eu.plumbr.demo.Generated\u0026#34;\u003c/span\u003e + i);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e Class \u003cspan class=\"title function_\"\u003egenerate\u003c/span\u003e\u003cspan class=\"params\"\u003e(String name)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e Exception {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eClassPool\u003c/span\u003e \u003cspan class=\"variable\"\u003epool\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e ClassPool.getDefault();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e pool.makeClass(name).toClass();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在此示例中，源代码遍历循环并在运行时生成类。javassist 库正在处理类生成的复杂性。\u003c/p\u003e\n\u003ch4 id=\"重部署时永久代空间不足\"\u003e\u003ca href=\"#重部署时永久代空间不足\" class=\"headerlink\" title=\"重部署时永久代空间不足\"\u003e\u003c/a\u003e重部署时永久代空间不足\u003c/h4\u003e\u003cp\u003e对于更复杂，更实际的示例，让我们逐步介绍一下在应用程序重新部署期间发生的 Permgen 空间错误。重新部署应用程序时，你希望垃圾回收会摆脱引用所有先前加载的类的加载器，并被加载新类的类加载器取代。\u003c/p\u003e\n\u003cp\u003e不幸的是，许多第三方库以及对线程，JDBC 驱动程序或文件系统句柄等资源的不良处理使得无法卸载以前使用的类加载器。反过来，这意味着在每次重新部署期间，所有先前版本的类仍将驻留在 PermGen 中，从而在每次重新部署期间生成数十兆的垃圾。\u003c/p\u003e\n\u003cp\u003e让我们想象一个使用 JDBC 驱动程序连接到关系数据库的示例应用程序。启动应用程序时，初始化代码将加载 JDBC 驱动程序以连接到数据库。对应于规范，JDBC 驱动程序向 java.sql.DriverManager 进行注册。该注册包括将对驱动程序实例的引用存储在 DriverManager 的静态字段中。\u003c/p\u003e\n\u003cp\u003e现在，当从应用程序服务器取消部署应用程序时，java.sql.DriverManager 仍将保留该引用。我们最终获得了对驱动程序类的实时引用，而驱动程序类又保留了用于加载应用程序的 java.lang.Classloader 实例的引用。反过来，这意味着垃圾回收算法无法回收空间。\u003c/p\u003e\n\u003cp\u003e而且该 java.lang.ClassLoader 实例仍引用应用程序的所有类，通常在 PermGen 中占据数十兆字节。这意味着只需少量重新部署即可填充通常大小的 PermGen。\u003c/p\u003e\n\u003ch4 id=\"PermGen-space-解决方案\"\u003e\u003ca href=\"#PermGen-space-解决方案\" class=\"headerlink\" title=\"PermGen space 解决方案\"\u003e\u003c/a\u003ePermGen space 解决方案\u003c/h4\u003e\u003cp\u003e（1）解决初始化时的 \u003ccode\u003eOutOfMemoryError\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e在应用程序启动期间触发由于 PermGen 耗尽导致的 \u003ccode\u003eOutOfMemoryError\u003c/code\u003e 时，解决方案很简单。该应用程序仅需要更多空间才能将所有类加载到 PermGen 区域，因此我们只需要增加其大小即可。为此，更改你的应用程序启动配置并添加（或增加，如果存在）\u003ccode\u003e-XX:MaxPermSize\u003c/code\u003e 参数，类似于以下示例：\u003c/p\u003e\n\u003cfigure class=\"highlight routeros\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ejava -XX:\u003cspan class=\"attribute\"\u003eMaxPermSize\u003c/span\u003e=512m com.yourcompany.YourClass\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上面的配置将告诉 JVM，PermGen 可以增长到 512MB。\u003c/p\u003e\n\u003cp\u003e清理应用程序中 \u003ccode\u003eWEB-INF/lib\u003c/code\u003e 下的 jar，用不上的 jar 删除掉，多个应用公共的 jar 移动到 Tomcat 的 lib 目录，减少重复加载。\u003c/p\u003e\n\u003cp\u003e🔔 注意：\u003ccode\u003e-XX:PermSize\u003c/code\u003e 一般设为 64M\u003c/p\u003e\n\u003cp\u003e（2）解决重新部署时的 \u003ccode\u003eOutOfMemoryError\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e重新部署应用程序后立即发生 OutOfMemoryError 时，应用程序会遭受类加载器泄漏的困扰。在这种情况下，解决问题的最简单，继续进行堆转储分析–使用类似于以下命令的重新部署后进行堆转储：\u003c/p\u003e\n\u003cfigure class=\"highlight gradle\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ejmap -\u003cspan class=\"keyword\"\u003edump\u003c/span\u003e:format=b,\u003cspan class=\"keyword\"\u003efile\u003c/span\u003e=\u003cspan class=\"keyword\"\u003edump\u003c/span\u003e.hprof \u0026lt;process-id\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e然后使用你最喜欢的堆转储分析器打开转储（Eclipse MAT 是一个很好的工具）。在分析器中可以查找重复的类，尤其是那些正在加载应用程序类的类。从那里，你需要进行所有类加载器的查找，以找到当前活动的类加载器。\u003c/p\u003e\n\u003cp\u003e对于非活动类加载器，你需要通过从非活动类加载器收集到 GC 根的最短路径来确定阻止它们被垃圾收集的引用。有了此信息，你将找到根本原因。如果根本原因是在第三方库中，则可以进入 Google/StackOverflow 查看是否是已知问题以获取补丁/解决方法。\u003c/p\u003e\n\u003cp\u003e（3）解决运行时 \u003ccode\u003eOutOfMemoryError\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e第一步是检查是否允许 GC 从 PermGen 卸载类。在这方面，标准的 JVM 相当保守-类是天生的。因此，一旦加载，即使没有代码在使用它们，类也会保留在内存中。当应用程序动态创建许多类并且长时间不需要生成的类时，这可能会成为问题。在这种情况下，允许 JVM 卸载类定义可能会有所帮助。这可以通过在启动脚本中仅添加一个配置参数来实现：\u003c/p\u003e\n\u003cfigure class=\"highlight ruby\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e-\u003cspan class=\"variable constant_\"\u003eXX\u003c/span\u003e\u003cspan class=\"symbol\"\u003e:+CMSClassUnloadingEnabled\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e默认情况下，此选项设置为 false，因此要启用此功能，你需要在 Java 选项中显式设置。如果启用 CMSClassUnloadingEnabled，GC 也会扫描 PermGen 并删除不再使用的类。请记住，只有同时使用 UseConcMarkSweepGC 时此选项才起作用。\u003c/p\u003e\n\u003cfigure class=\"highlight ruby\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e-\u003cspan class=\"variable constant_\"\u003eXX\u003c/span\u003e\u003cspan class=\"symbol\"\u003e:+UseConcMarkSweepGC\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在确保可以卸载类并且问题仍然存在之后，你应该继续进行堆转储分析–使用类似于以下命令的方法进行堆转储：\u003c/p\u003e\n\u003cfigure class=\"highlight gradle\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ejmap -\u003cspan class=\"keyword\"\u003edump\u003c/span\u003e:\u003cspan class=\"keyword\"\u003efile\u003c/span\u003e=\u003cspan class=\"keyword\"\u003edump\u003c/span\u003e.hprof,format=b \u0026lt;process-id\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e然后，使用你最喜欢的堆转储分析器（例如 Eclipse MAT）打开转储，然后根据已加载的类数查找最昂贵的类加载器。从此类加载器中，你可以继续提取已加载的类，并按实例对此类进行排序，以使可疑对象排在首位。\u003c/p\u003e\n\u003cp\u003e然后，对于每个可疑者，就需要你手动将根本原因追溯到生成此类的应用程序代码。\u003c/p\u003e\n\u003ch3 id=\"元数据区空间不足\"\u003e\u003ca href=\"#元数据区空间不足\" class=\"headerlink\" title=\"元数据区空间不足\"\u003e\u003c/a\u003e元数据区空间不足\u003c/h3\u003e\u003cp\u003e【错误】\u003c/p\u003e\n\u003cfigure class=\"highlight julia\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eException\u003c/span\u003e \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e thread \u003cspan class=\"string\"\u003e\u0026#34;main\u0026#34;\u003c/span\u003e java.lang.\u003cspan class=\"built_in\"\u003eOutOfMemoryError\u003c/span\u003e: Metaspace\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【原因】\u003c/p\u003e\n\u003cp\u003eJava8 以后，JVM 内存空间发生了很大的变化。取消了永久代，转而变为元数据区。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e元数据区的内存不足，即方法区和运行时常量池的空间不足\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e方法区用于存放 Class 的相关信息，如类名、访问修饰符、常量池、字段描述、方法描述等。\u003c/p\u003e\n\u003cp\u003e一个类要被垃圾收集器回收，判定条件是比较苛刻的。在经常动态生成大量 Class 的应用中，需要特别注意类的回收状况。这类常见除了 CGLib 字节码增强和动态语言以外，常见的还有：大量 JSP 或动态产生 JSP 文件的应用（JSP 第一次运行时需要编译为 Java 类）、基于 OSGi 的应用（即使是同一个类文件，被不同的加载器加载也会视为不同的类）等。\u003c/p\u003e\n\u003cp\u003e【示例】方法区出现 \u003ccode\u003eOutOfMemoryError\u003c/code\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMethodAreaOutOfMemoryDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eEnhancer\u003c/span\u003e \u003cspan class=\"variable\"\u003eenhancer\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eEnhancer\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            enhancer.setSuperclass(Bean.class);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            enhancer.setUseCache(\u003cspan class=\"literal\"\u003efalse\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            enhancer.setCallback(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMethodInterceptor\u003c/span\u003e() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e Object \u003cspan class=\"title function_\"\u003eintercept\u003c/span\u003e\u003cspan class=\"params\"\u003e(Object obj, Method method, Object[] args, MethodProxy proxy)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e Throwable {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e proxy.invokeSuper(obj, args);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            });\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            enhancer.create();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eBean\u003c/span\u003e {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【解决】\u003c/p\u003e\n\u003cp\u003e当由于元空间而面临 \u003ccode\u003eOutOfMemoryError\u003c/code\u003e 时，第一个解决方案应该是显而易见的。如果应用程序耗尽了内存中的 Metaspace 区域，则应增加 Metaspace 的大小。更改应用程序启动配置并增加以下内容：\u003c/p\u003e\n\u003cfigure class=\"highlight routeros\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e-XX:\u003cspan class=\"attribute\"\u003eMaxMetaspaceSize\u003c/span\u003e=512m\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上面的配置示例告诉 JVM，允许 Metaspace 增长到 512 MB。\u003c/p\u003e\n\u003cp\u003e另一种解决方案甚至更简单。你可以通过删除此参数来完全解除对 Metaspace 大小的限制，JVM 默认对 Metaspace 的大小没有限制。但是请注意以下事实：这样做可能会导致大量交换或达到本机物理内存而分配失败。\u003c/p\u003e\n\u003ch3 id=\"无法新建本地线程\"\u003e\u003ca href=\"#无法新建本地线程\" class=\"headerlink\" title=\"无法新建本地线程\"\u003e\u003c/a\u003e无法新建本地线程\u003c/h3\u003e\u003cp\u003e\u003ccode\u003ejava.lang.OutOfMemoryError: Unable to create new native thread\u003c/code\u003e 这个错误意味着：\u003cstrong\u003eJava 应用程序已达到其可以启动线程数的限制\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e【原因】\u003c/p\u003e\n\u003cp\u003e当发起一个线程的创建时，虚拟机会在 JVM 内存创建一个 \u003ccode\u003eThread\u003c/code\u003e 对象同时创建一个操作系统线程，而这个系统线程的内存用的不是 JVM 内存，而是系统中剩下的内存。\u003c/p\u003e\n\u003cp\u003e那么，究竟能创建多少线程呢？这里有一个公式：\u003c/p\u003e\n\u003cfigure class=\"highlight gcode\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e线程数 = \u003cspan class=\"comment\"\u003e(MaxProcessMemory - JVMMemory - ReservedOsMemory)\u003c/span\u003e / \u003cspan class=\"comment\"\u003e(ThreadStackSize)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【参数】\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eMaxProcessMemory\u003c/code\u003e - 一个进程的最大内存\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eJVMMemory\u003c/code\u003e - JVM 内存\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReservedOsMemory\u003c/code\u003e - 保留的操作系统内存\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eThreadStackSize\u003c/code\u003e - 线程栈的大小\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e**给 JVM 分配的内存越多，那么能用来创建系统线程的内存就会越少，越容易发生 \u003ccode\u003eunable to create new native thread\u003c/code\u003e**。所以，JVM 内存不是分配的越大越好。\u003c/p\u003e\n\u003cp\u003e但是，通常导致 \u003ccode\u003ejava.lang.OutOfMemoryError\u003c/code\u003e 的情况：无法创建新的本机线程需要经历以下阶段：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eJVM 内部运行的应用程序请求新的 Java 线程\u003c/li\u003e\n\u003cli\u003eJVM 本机代码代理为操作系统创建新本机线程的请求\u003c/li\u003e\n\u003cli\u003e操作系统尝试创建一个新的本机线程，该线程需要将内存分配给该线程\u003c/li\u003e\n\u003cli\u003e操作系统将拒绝本机内存分配，原因是 32 位 Java 进程大小已耗尽其内存地址空间（例如，已达到（2-4）GB 进程大小限制）或操作系统的虚拟内存已完全耗尽\u003c/li\u003e\n\u003cli\u003e引发 \u003ccode\u003ejava.lang.OutOfMemoryError: Unable to create new native thread\u003c/code\u003e 错误。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e【示例】\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eUnableCreateNativeThreadErrorDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eThread\u003c/span\u003e(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRunnable\u003c/span\u003e() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        TimeUnit.MINUTES.sleep(\u003cspan class=\"number\"\u003e5\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (InterruptedException e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        e.printStackTrace();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }).start();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【处理】\u003c/p\u003e\n\u003cp\u003e可以通过增加操作系统级别的限制来绕过无法创建新的本机线程问题。例如，如果限制了 JVM 可在用户空间中产生的进程数，则应检查出并可能增加该限制：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e[root@dev ~]# ulimit -a\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecore file size          (blocks, -c) 0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e--- cut for brevity ---\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emax user processes              (-u) 1800\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e通常，\u003ccode\u003eOutOfMemoryError\u003c/code\u003e 对新的本机线程的限制表示编程错误。当应用程序产生数千个线程时，很可能出了一些问题—很少有应用程序可以从如此大量的线程中受益。\u003c/p\u003e\n\u003cp\u003e解决问题的一种方法是开始进行线程转储以了解情况。\u003c/p\u003e\n\u003ch3 id=\"直接内存溢出\"\u003e\u003ca href=\"#直接内存溢出\" class=\"headerlink\" title=\"直接内存溢出\"\u003e\u003c/a\u003e直接内存溢出\u003c/h3\u003e\u003cp\u003e由直接内存导致的内存溢出，一个明显的特征是在 Head Dump 文件中不会看见明显的异常，如果发现 OOM 之后 Dump 文件很小，而程序中又直接或间接使用了 NIO，就可以考虑检查一下是不是这方面的原因。\u003c/p\u003e\n\u003cp\u003e【示例】直接内存 \u003ccode\u003eOutOfMemoryError\u003c/code\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 本机直接内存溢出示例\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 错误现象：java.lang.OutOfMemoryError\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * VM Args：-Xmx20M -XX:MaxDirectMemorySize=10M\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eDirectOutOfMemoryDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003e_1MB\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1024\u003c/span\u003e * \u003cspan class=\"number\"\u003e1024\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e IllegalAccessException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eField\u003c/span\u003e \u003cspan class=\"variable\"\u003eunsafeField\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Unsafe.class.getDeclaredFields()[\u003cspan class=\"number\"\u003e0\u003c/span\u003e];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        unsafeField.setAccessible(\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eUnsafe\u003c/span\u003e \u003cspan class=\"variable\"\u003eunsafe\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e (Unsafe) unsafeField.get(\u003cspan class=\"literal\"\u003enull\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            unsafe.allocateMemory(_1MB);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"StackOverflowError\"\u003e\u003ca href=\"#StackOverflowError\" class=\"headerlink\" title=\"StackOverflowError\"\u003e\u003c/a\u003eStackOverflowError\u003c/h2\u003e\u003cp\u003e对于 HotSpot 虚拟机来说，栈容量只由 \u003ccode\u003e-Xss\u003c/code\u003e 参数来决定如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出 \u003ccode\u003eStackOverflowError\u003c/code\u003e 异常。\u003c/p\u003e\n\u003cp\u003e从实战来说，栈溢出的常见原因：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e递归函数调用层数太深\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e大量循环或死循环\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e【示例】递归函数调用层数太深导致 \u003ccode\u003eStackOverflowError\u003c/code\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eStackOverflowDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003estackLength\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erecursion\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        stackLength++;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        recursion();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eStackOverflowDemo\u003c/span\u003e \u003cspan class=\"variable\"\u003eobj\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eStackOverflowDemo\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            obj.recursion();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (Throwable e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;栈深度：\u0026#34;\u003c/span\u003e + obj.stackLength);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            e.printStackTrace();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/34907497/\"\u003e《深入理解 Java 虚拟机》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100028001\"\u003e《Java 性能调优实战》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.douban.com/doulist/2545443/\"\u003e从表到里学习 JVM 实现\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.jianshu.com/p/28935cbfbae0\"\u003e作为测试你应该知道的 JAVA OOM 及定位分析\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/sinat_29912455/article/details/51125748\"\u003e异常、堆内存溢出、OOM 的几种情况\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://tianmingxing.com/2019/11/17/%E4%BB%8B%E7%BB%8DJVM%E4%B8%ADOOM%E7%9A%848%E7%A7%8D%E7%B1%BB%E5%9E%8B/\"\u003e介绍 JVM 中 OOM 的 8 种类型\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-06-28T08:19:00Z",
  "Author": "钝悟 ◾ Dunwu"
}