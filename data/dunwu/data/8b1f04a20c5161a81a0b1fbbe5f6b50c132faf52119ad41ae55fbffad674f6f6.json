{
  "Source": "dunwu",
  "Title": "如何建设监控体系",
  "Link": "https://dunwu.github.io/blog/pages/e593a4/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"如何建设监控体系\"\u003e\u003ca href=\"#如何建设监控体系\" class=\"headerlink\" title=\"如何建设监控体系\"\u003e\u003c/a\u003e如何建设监控体系\u003c/h1\u003e\u003cp\u003e当服务消费者与服务提供者之间建立了通信，作为管理者需要通过监控手段来观察服务是否正常，调用是否成功。服务监控是很复杂的，在微服务架构下，一次用户调用会因为服务化拆分后，变成多个不同服务之间的相互调用，这也就需要对拆分后的每个服务都监控起来。\u003c/p\u003e\n\u003ch2 id=\"监控的意义\"\u003e\u003ca href=\"#监控的意义\" class=\"headerlink\" title=\"监控的意义\"\u003e\u003c/a\u003e监控的意义\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e发现问题\u003c/strong\u003e：当系统出现问题或故障，监控系统应根据监控对象的数据异常，及时发现问题，触发告警。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e定位问题\u003c/strong\u003e：监控系统的告警提示，通常应该指明问题的影响范围（如某机器 IP、某机房），触发故障的内容（数据库、MQ 或某服务的某监控数据异常），触发时间等等。有了这些必要的信息，有利于工程师分析问题时缩小排查范围，更快找到问题原因。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e解决问题\u003c/strong\u003e：一旦分析清楚故障的原因后，就需要根据故障的重要度、紧急程度、影响范围等要素，去决定应该如何应对故障。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e总结问题\u003c/strong\u003e：如果发生了重大故障后，需要对故障进行复盘，总结故障的原因和应对故障时的措施，思考在事前有没有更好的防范手段；在事后的应对故障的处理有没有改进的空间。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"监控目标\"\u003e\u003ca href=\"#监控目标\" class=\"headerlink\" title=\"监控目标\"\u003e\u003c/a\u003e监控目标\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e对系统不间断实时监控\u003c/strong\u003e：实际上是对系统不间断的实时监控(这就是监控)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e实时反馈系统当前状态\u003c/strong\u003e：我们监控某个硬件、或者某个系统，都是需要能实时看到当前系统的状态，是正常、异常、或者故障\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e保证服务的可靠性、安全性\u003c/strong\u003e：我们监控的目的就是要保证系统、服务、业务正常运行\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e保证业务持续稳定运行\u003c/strong\u003e：如果我们的监控做得很完善，即使出现故障，能第一时间接收到故障告警，在第一时间处理解决，从而保证业务持续性的稳定运行。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"监控方法\"\u003e\u003ca href=\"#监控方法\" class=\"headerlink\" title=\"监控方法\"\u003e\u003c/a\u003e监控方法\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e明确监控对象\u003c/strong\u003e：根据业务和系统的实际需要，明确需要监控的对象。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e确定性能基准指标\u003c/strong\u003e：确定了监控对象，接下来，要确定该监控对象的性能基准。如：CPU 使用率、吞吐量等。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e定义告警阈值\u003c/strong\u003e：监控对象什么情况是正常的，什么情况是异常的，什么情况是有故障的？\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e故障处理流程\u003c/strong\u003e：当监控对象达到告警阈值时，应如何应对？触发怎样的告警？有没有自动化处理机制，如弹性扩容等？有没有熔断、降级等？\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"监控流程\"\u003e\u003ca href=\"#监控流程\" class=\"headerlink\" title=\"监控流程\"\u003e\u003c/a\u003e监控流程\u003c/h2\u003e\u003cp\u003e一旦明确了要监控的对象，接下就是考虑如何监控。\u003c/p\u003e\n\u003cp\u003e完整的监控流程主要包括以下环节：采集、传输、存储、分析、展示、告警、处理。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220602172630.png\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"数据采集\"\u003e\u003ca href=\"#数据采集\" class=\"headerlink\" title=\"数据采集\"\u003e\u003c/a\u003e数据采集\u003c/h3\u003e\u003cp\u003e通常有两种数据收集方式：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e服务主动上报\u003c/strong\u003e：这种处理方式通过在业务代码或者服务框架里加入数据收集代码逻辑，在每一次服务调用完成后，主动上报服务的调用信息。这种方式在链路跟踪中较为常见，主流的技术方案有：Zipkin。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e代理收集\u003c/strong\u003e：这种处理方式通过服务调用后把调用的详细信息记录到本地日志文件中，然后再通过代理去解析本地日志文件，然后再上报服务的调用信息。主流的技术方案有：ELK、Flume。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"数据传输\"\u003e\u003ca href=\"#数据传输\" class=\"headerlink\" title=\"数据传输\"\u003e\u003c/a\u003e数据传输\u003c/h3\u003e\u003cp\u003e数据传输最常用的方式有两种：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eUDP 传输\u003c/strong\u003e：这种处理方式是数据处理单元提供服务器的请求地址，数据采集后通过 UDP 协议与服务器建立连接，然后把数据发送过去。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eKafka 传输\u003c/strong\u003e：这种处理方式是数据采集后发送到指定的 Topic，然后数据处理单元再订阅对应的 Topic，就可以从 Kafka 消息队列中读取到对应的数据。由于 Kafka 有非常高的吞吐能力，所以很适合作为大数据量的缓冲池。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"数据存储\"\u003e\u003ca href=\"#数据存储\" class=\"headerlink\" title=\"数据存储\"\u003e\u003c/a\u003e数据存储\u003c/h3\u003e\u003cp\u003e上报的监控数据需要存储，不同监控系统选择的存储非常多样化。比较常见的有：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e时序数据库：InfluxDB（如：Prometheus）\u003c/li\u003e\n\u003cli\u003e列式数据库：OpenTSDB 用 Hbase 存储所有时序（无须采样）的数据，来构建一个分布式、可伸缩的时间序列数据库。它支持秒级数据采集，支持永久存储，可以做容量规划，并很容易地接入到现有的告警系统里。\u003c/li\u003e\n\u003cli\u003eSQL 数据库：Zabbix 使用关系型数据库 Mysql 存储数据。\u003c/li\u003e\n\u003cli\u003e搜索引擎数据库：ELK 使用 Elasticsearch 存储数据，以倒排索引的数据结构存储，需要查询的时候，根据索引来查询。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"数据处理\"\u003e\u003ca href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"\u003e\u003c/a\u003e数据处理\u003c/h3\u003e\u003cp\u003e数据处理是对收集来的原始数据进行聚合计算并存储。数据聚合通常有两个维度：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e接口维度聚合\u003c/strong\u003e：这个维度是把实时收到的数据按照接口名维度实时聚合在一起，这样就可以得到每个接口的每秒请求量、平均耗时、成功率等信息。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e机器维度聚合\u003c/strong\u003e：这个维度是把实时收到的数据按照调用的节点维度聚合在一起，这样就可以从单机维度去查看每个接口的实时请求量、平均耗时等信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"数据展示\"\u003e\u003ca href=\"#数据展示\" class=\"headerlink\" title=\"数据展示\"\u003e\u003c/a\u003e数据展示\u003c/h3\u003e\u003cp\u003e数据展示是把处理后的数据以 Dashboard 的方式展示给用户。数据展示有多种方式，比如曲线图、饼状图、格子图展示等。\u003c/p\u003e\n\u003ch3 id=\"监控告警\"\u003e\u003ca href=\"#监控告警\" class=\"headerlink\" title=\"监控告警\"\u003e\u003c/a\u003e监控告警\u003c/h3\u003e\u003cp\u003e监控告警的形式很多，如：电话告警、邮件告警、短信告警、IM 告警等。\u003c/p\u003e\n\u003cp\u003e此外，告警需要根据甄别故障的影响范围，以确定故障级别，如：重要度、紧急度等。根据故障的级别，通知需要介入的人员，快速响应处理。\u003c/p\u003e\n\u003ch2 id=\"监控对象\"\u003e\u003ca href=\"#监控对象\" class=\"headerlink\" title=\"监控对象\"\u003e\u003c/a\u003e监控对象\u003c/h2\u003e\u003cp\u003e服务监控一定是通过观察数据来量化分析，所以首先要明确需要监控什么。\u003c/p\u003e\n\u003cp\u003e一般来说，服务监控数据有以下分类：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e基础层监控\u003c/strong\u003e：\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCPU\u003c/strong\u003e：CPU 利用率、用户态利用率、内核态利用率、单核平均负载\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e内存\u003c/strong\u003e：内存使用量、内存剩余量\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e磁盘\u003c/strong\u003e：磁盘使用量、磁盘使用率\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e网络\u003c/strong\u003e：网络流量、丢包数、错包数、连接数等。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e温度\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e电压\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e等等\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e中间层监控\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e数据库\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMysql\u003c/strong\u003e：集群健康状况、磁盘使用率、连接数、慢日志等\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRedis\u003c/strong\u003e：集群健康状况、内存使用量、CPU 使用率、内存使用率、连接数、对象数、慢日志等\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eElasticsearch\u003c/strong\u003e：集群健康状况、CPU 使用率、内存使用率\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMongoDB\u003c/strong\u003e：集群健康状况、\u003c/li\u003e\n\u003cli\u003e等等\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e中间件\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMQ\u003c/strong\u003e：QPS、消息成功数、消息失败数、传输耗时、消息堆积量\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e任务调度\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e等等\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e应用层监控\u003c/strong\u003e：接口监控、访问服务、SQL、内存使用率、响应时间、TPS、QPS 等。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e业务监控\u003c/strong\u003e：核心指标、登录、登出、下单、支付等。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e客户端监控\u003c/strong\u003e：性能、返回码、地域、运营商、版本、系统等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"监控维度\"\u003e\u003ca href=\"#监控维度\" class=\"headerlink\" title=\"监控维度\"\u003e\u003c/a\u003e监控维度\u003c/h2\u003e\u003cp\u003e一般来说，要从多个维度来对业务进行监控，具体来讲可以包括下面几个维度：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e全局维度\u003c/strong\u003e。从整体角度监控对象的的请求量、平均耗时以及错误率，全局维度的监控一般是为了让你对监控对象的调用情况有个整体了解。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e机房维度\u003c/strong\u003e。一般为了业务的高可用性，服务通常部署在不止一个机房，因为不同机房地域的不同，同一个监控对象的各种指标可能会相差很大，所以需要深入到机房内部去了解。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e单机维度\u003c/strong\u003e。即便是在同一个机房内部，可能由于采购年份和批次的不同，位于不同机器上的同一个监控对象的各种指标也会有很大差异。一般来说，新采购的机器通常由于成本更低，配置也更高，在同等请求量的情况下，可能表现出较大的性能差异，因此也需要从单机维度去监控同一个对象。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e时间维度\u003c/strong\u003e。同一个监控对象，在每天的同一时刻各种指标通常也不会一样，这种差异要么是由业务变更导致，要么是运营活动导致。为了了解监控对象各种指标的变化，通常需要与一天前、一周前、一个月前，甚至三个月前做比较。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e核心维度\u003c/strong\u003e。业务上一般会依据重要性程度对监控对象进行分级，最简单的是分成核心业务和非核心业务。核心业务和非核心业务在部署上必须隔离，分开监控，这样才能对核心业务做重点保障。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"监控技术\"\u003e\u003ca href=\"#监控技术\" class=\"headerlink\" title=\"监控技术\"\u003e\u003c/a\u003e监控技术\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003eELK 的技术栈比较成熟，应用范围也比较广，除了可用作监控系统外，还可以用作日志查询和分析。\u003c/li\u003e\n\u003cli\u003eGraphite 是基于时间序列数据库存储的监控系统，并且提供了功能强大的各种聚合函数比如 sum、average、top5 等可用于监控分析，而且对外提供了 API 也可以接入其他图形化监控系统如 Grafana。\u003c/li\u003e\n\u003cli\u003eTICK 的核心在于其时间序列数据库 InfluxDB 的存储功能强大，且支持类似 SQL 语言的复杂数据处理操作。\u003c/li\u003e\n\u003cli\u003ePrometheus 的独特之处在于它采用了拉数据的方式，对业务影响较小，同时也采用了时间序列数据库存储，而且支持独有的 PromQL 查询语言，功能强大而且简洁。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOpenTSDB\u003c/strong\u003e 用 Hbase 存储所有时序（无须采样）的数据，来构建一个分布式、可伸缩的时间序列数据库。它支持秒级数据采集，支持永久存储，可以做容量规划，并很容易地接入到现有的告警系统里。OpenTSDB 可以从大规模的集群（包括集群中的网络设备、操作系统、应用程序）中获取相应的采集指标，并进行存储、索引和服务，从而使这些数据更容易让人理解，如 Web 化、图形化等。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eZabbix\u003c/strong\u003e 是一个分布式监控系统，支持多种采集方式和采集客户端，有专用的 Agent 代理，也支持 SNMP、IPMI、JMX、Telnet、SSH 等多种协议，它将采集到的数据存放到数据库，然后对其进行分析整理，达到条件触发告警。其灵活的扩展性和丰富的功能是其他监控系统所不能比的。相对来说，它的总体功能做的非常优秀。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100014401\"\u003e从 0 开始学微服务\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100046201\"\u003eRPC 实战与核心原理\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/course/intro/100003901\"\u003e微服务架构核心 20 讲\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zhuanlan.zhihu.com/p/26369145\"\u003e一篇文章全面了解监控知识体系\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-04-19T12:02:48Z",
  "Author": "钝悟 ◾ Dunwu"
}