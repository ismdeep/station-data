{
  "Source": "dunwu",
  "Title": "Spring Bean 生命周期",
  "Link": "https://dunwu.github.io/blog/pages/4ab176/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Spring-Bean-生命周期\"\u003e\u003ca href=\"#Spring-Bean-生命周期\" class=\"headerlink\" title=\"Spring Bean 生命周期\"\u003e\u003c/a\u003eSpring Bean 生命周期\u003c/h1\u003e\u003ch2 id=\"Spring-Bean-元信息配置阶段\"\u003e\u003ca href=\"#Spring-Bean-元信息配置阶段\" class=\"headerlink\" title=\"Spring Bean 元信息配置阶段\"\u003e\u003c/a\u003eSpring Bean 元信息配置阶段\u003c/h2\u003e\u003cp\u003eBeanDefinition 配置\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e面向资源\u003cul\u003e\n\u003cli\u003eXML 配置\u003c/li\u003e\n\u003cli\u003eProperties 资源配置\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e面向注解\u003c/li\u003e\n\u003cli\u003e面向 API\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-Bean-元信息解析阶段\"\u003e\u003ca href=\"#Spring-Bean-元信息解析阶段\" class=\"headerlink\" title=\"Spring Bean 元信息解析阶段\"\u003e\u003c/a\u003eSpring Bean 元信息解析阶段\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e面向资源 BeanDefinition 解析\u003cul\u003e\n\u003cli\u003eBeanDefinitionReader\u003c/li\u003e\n\u003cli\u003eXML 解析器 - BeanDefinitionParser\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e面向注解 BeanDefinition 解析\u003cul\u003e\n\u003cli\u003eAnnotatedBeanDefinitionReader\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-Bean-注册阶段\"\u003e\u003ca href=\"#Spring-Bean-注册阶段\" class=\"headerlink\" title=\"Spring Bean 注册阶段\"\u003e\u003c/a\u003eSpring Bean 注册阶段\u003c/h2\u003e\u003cp\u003eBeanDefinition 注册接口：BeanDefinitionRegistry\u003c/p\u003e\n\u003ch2 id=\"Spring-BeanDefinition-合并阶段\"\u003e\u003ca href=\"#Spring-BeanDefinition-合并阶段\" class=\"headerlink\" title=\"Spring BeanDefinition 合并阶段\"\u003e\u003c/a\u003eSpring BeanDefinition 合并阶段\u003c/h2\u003e\u003cp\u003eBeanDefinition 合并\u003c/p\u003e\n\u003cp\u003e父子 BeanDefinition 合并\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e当前 BeanFactory 查找\u003c/li\u003e\n\u003cli\u003e层次性 BeanFactory 查找\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-Bean-Class-加载阶段\"\u003e\u003ca href=\"#Spring-Bean-Class-加载阶段\" class=\"headerlink\" title=\"Spring Bean Class 加载阶段\"\u003e\u003c/a\u003eSpring Bean Class 加载阶段\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003eClassLoader 类加载\u003c/li\u003e\n\u003cli\u003eJava Security 安全控制\u003c/li\u003e\n\u003cli\u003eConfigurableBeanFactory 临时 ClassLoader\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-Bean-实例化前阶段\"\u003e\u003ca href=\"#Spring-Bean-实例化前阶段\" class=\"headerlink\" title=\"Spring Bean 实例化前阶段\"\u003e\u003c/a\u003eSpring Bean 实例化前阶段\u003c/h2\u003e\u003cp\u003e实例化方式\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e传统实例化方式：实例化策略（InstantiationStrategy）\u003c/li\u003e\n\u003cli\u003e构造器依赖注入\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-Bean-实例化阶段\"\u003e\u003ca href=\"#Spring-Bean-实例化阶段\" class=\"headerlink\" title=\"Spring Bean 实例化阶段\"\u003e\u003c/a\u003eSpring Bean 实例化阶段\u003c/h2\u003e\u003cp\u003e非主流生命周期 - Bean 实例化前阶段\u003c/p\u003e\n\u003cp\u003eInstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation\u003c/p\u003e\n\u003ch2 id=\"Spring-Bean-实例化后阶段\"\u003e\u003ca href=\"#Spring-Bean-实例化后阶段\" class=\"headerlink\" title=\"Spring Bean 实例化后阶段\"\u003e\u003c/a\u003eSpring Bean 实例化后阶段\u003c/h2\u003e\u003cp\u003eBean 属性赋值（Populate）判断\u003c/p\u003e\n\u003cp\u003eInstantiationAwareBeanPostProcessor#postProcessAfterInstantiation\u003c/p\u003e\n\u003ch2 id=\"Spring-Bean-属性赋值前阶段\"\u003e\u003ca href=\"#Spring-Bean-属性赋值前阶段\" class=\"headerlink\" title=\"Spring Bean 属性赋值前阶段\"\u003e\u003c/a\u003eSpring Bean 属性赋值前阶段\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003eBean 属性值元信息\u003cul\u003e\n\u003cli\u003ePropertyValues\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eBean 属性赋值前回调\u003cul\u003e\n\u003cli\u003eSpring 1.2 - 5.0：InstantiationAwareBeanPostProcessor#postProcessPropertyValues\u003c/li\u003e\n\u003cli\u003eSpring 5.1：InstantiationAwareBeanPostProcessor#postProcessProperties\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-Bean-Aware-接口回调阶段\"\u003e\u003ca href=\"#Spring-Bean-Aware-接口回调阶段\" class=\"headerlink\" title=\"Spring Bean Aware 接口回调阶段\"\u003e\u003c/a\u003eSpring Bean Aware 接口回调阶段\u003c/h2\u003e\u003cp\u003eSpring Aware 接口：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBeanNameAware\u003c/li\u003e\n\u003cli\u003eBeanClassLoaderAware\u003c/li\u003e\n\u003cli\u003eBeanFactoryAware\u003c/li\u003e\n\u003cli\u003eEnvironmentAware\u003c/li\u003e\n\u003cli\u003eEmbeddedValueResolverAware\u003c/li\u003e\n\u003cli\u003eResourceLoaderAware\u003c/li\u003e\n\u003cli\u003eApplicationEventPublisherAware\u003c/li\u003e\n\u003cli\u003eMessageSourceAware\u003c/li\u003e\n\u003cli\u003eApplicationContextAware\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-Bean-初始化前阶段\"\u003e\u003ca href=\"#Spring-Bean-初始化前阶段\" class=\"headerlink\" title=\"Spring Bean 初始化前阶段\"\u003e\u003c/a\u003eSpring Bean 初始化前阶段\u003c/h2\u003e\u003cp\u003e已完成：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eBean 实例化\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eBean 属性赋值\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eBean Aware 接口回调\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e方法回调：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBeanPostProcessor#postProcessBeforeInitialization\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-Bean-初始化阶段\"\u003e\u003ca href=\"#Spring-Bean-初始化阶段\" class=\"headerlink\" title=\"Spring Bean 初始化阶段\"\u003e\u003c/a\u003eSpring Bean 初始化阶段\u003c/h2\u003e\u003cp\u003eBean 初始化（Initialization）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@PostConstruct 标注方法\u003c/li\u003e\n\u003cli\u003e实现 InitializingBean 接口的 afterPropertiesSet() 方法\u003c/li\u003e\n\u003cli\u003e自定义初始化方法\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-Bean-初始化后阶段\"\u003e\u003ca href=\"#Spring-Bean-初始化后阶段\" class=\"headerlink\" title=\"Spring Bean 初始化后阶段\"\u003e\u003c/a\u003eSpring Bean 初始化后阶段\u003c/h2\u003e\u003cp\u003e方法回调：BeanPostProcessor#postProcessAfterInitialization\u003c/p\u003e\n\u003ch2 id=\"Spring-Bean-初始化完成阶段\"\u003e\u003ca href=\"#Spring-Bean-初始化完成阶段\" class=\"headerlink\" title=\"Spring Bean 初始化完成阶段\"\u003e\u003c/a\u003eSpring Bean 初始化完成阶段\u003c/h2\u003e\u003cp\u003e方法回调：Spring 4.1 +：SmartInitializingSingleton#afterSingletonsInstantiated\u003c/p\u003e\n\u003ch2 id=\"Spring-Bean-销毁前阶段\"\u003e\u003ca href=\"#Spring-Bean-销毁前阶段\" class=\"headerlink\" title=\"Spring Bean 销毁前阶段\"\u003e\u003c/a\u003eSpring Bean 销毁前阶段\u003c/h2\u003e\u003cp\u003e方法回调：DestructionAwareBeanPostProcessor#postProcessBeforeDestruction\u003c/p\u003e\n\u003ch2 id=\"Spring-Bean-销毁阶段\"\u003e\u003ca href=\"#Spring-Bean-销毁阶段\" class=\"headerlink\" title=\"Spring Bean 销毁阶段\"\u003e\u003c/a\u003eSpring Bean 销毁阶段\u003c/h2\u003e\u003cp\u003eBean 销毁（Destroy）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@PreDestroy 标注方法\u003c/li\u003e\n\u003cli\u003e实现 DisposableBean 接口的 destroy() 方法\u003c/li\u003e\n\u003cli\u003e自定义销毁方法\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-Bean-垃圾收集\"\u003e\u003ca href=\"#Spring-Bean-垃圾收集\" class=\"headerlink\" title=\"Spring Bean 垃圾收集\"\u003e\u003c/a\u003eSpring Bean 垃圾收集\u003c/h2\u003e\u003cp\u003eBean 垃圾回收（GC）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e关闭 Spring 容器（应用上下文）\u003c/li\u003e\n\u003cli\u003e执行 GC\u003c/li\u003e\n\u003cli\u003eSpring Bean 覆盖的 finalize() 方法被回调\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"问题\"\u003e\u003ca href=\"#问题\" class=\"headerlink\" title=\"问题\"\u003e\u003c/a\u003e问题\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eBeanPostProcessor 的使用场景有哪些\u003c/strong\u003e？\u003c/p\u003e\n\u003cp\u003eBeanPostProcessor 提供 Spring Bean 初始化前和初始化后的生命周期回调，分别对应 postProcessBeforeInitialization 以及 postProcessAfterInitialization 方法，允许对关心的 Bean 进行扩展，甚至是替换。\u003c/p\u003e\n\u003cp\u003e加分项：其中，ApplicationContext 相关的 Aware 回调也是基于 BeanPostProcessor 实现，即 ApplicationContextAwareProcessor。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBeanFactoryPostProcessor 与 BeanPostProcessor 的区别\u003c/strong\u003e？\u003c/p\u003e\n\u003cp\u003eBeanFactoryPostProcessor 是 Spring BeanFactory（实际为 ConfigurableListableBeanFactory） 的后置处理器，用于扩展 BeanFactory，或通过 BeanFactory 进行依赖查找和依赖注入。\u003c/p\u003e\n\u003cp\u003eBeanFactoryPostProcessor 必须有 Spring ApplicationContext 执行，BeanFactory 无法与其直接交互。\u003c/p\u003e\n\u003cp\u003e而 BeanPostProcessor 则直接与 BeanFactory 关联，属于 N 对 1 的关系。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBeanFactory 是怎样处理 Bean 生命周期\u003c/strong\u003e？\u003c/p\u003e\n\u003cp\u003eBeanFactory 的默认实现为 \u003ccode\u003eDefaultListableBeanFactory\u003c/code\u003e，其中 Bean生命周期与方法映射如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBeanDefinition 注册阶段 - registerBeanDefinition\u003c/li\u003e\n\u003cli\u003eBeanDefinition 合并阶段 - getMergedBeanDefinition\u003c/li\u003e\n\u003cli\u003eBean 实例化前阶段 - resolveBeforeInstantiation\u003c/li\u003e\n\u003cli\u003eBean 实例化阶段 - createBeanInstance\u003c/li\u003e\n\u003cli\u003eBean 初始化后阶段 - populateBean\u003c/li\u003e\n\u003cli\u003eBean 属性赋值前阶段 - populateBean\u003c/li\u003e\n\u003cli\u003eBean 属性赋值阶段 - populateBean\u003c/li\u003e\n\u003cli\u003eBean Aware 接口回调阶段 - initializeBean\u003c/li\u003e\n\u003cli\u003eBean 初始化前阶段 - initializeBean\u003c/li\u003e\n\u003cli\u003eBean 初始化阶段 - initializeBean\u003c/li\u003e\n\u003cli\u003eBean 初始化后阶段 - initializeBean\u003c/li\u003e\n\u003cli\u003eBean 初始化完成阶段 - preInstantiateSingletons\u003c/li\u003e\n\u003cli\u003eBean 销毁前阶段 - destroyBean\u003c/li\u003e\n\u003cli\u003eBean 销毁阶段 - destroyBean\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans\"\u003eSpring 官方文档之 Core Technologies\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/course/intro/265\"\u003e《小马哥讲 Spring 核心编程思想》\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-12-21T11:26:01Z",
  "Author": "钝悟 ◾ Dunwu"
}