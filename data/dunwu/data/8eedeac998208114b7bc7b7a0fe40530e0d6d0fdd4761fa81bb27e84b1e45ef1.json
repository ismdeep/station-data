{
  "Source": "dunwu",
  "Title": "Java 容器之 Map",
  "Link": "https://dunwu.github.io/blog/pages/385755/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Java-容器之-Map\"\u003e\u003ca href=\"#Java-容器之-Map\" class=\"headerlink\" title=\"Java 容器之 Map\"\u003e\u003c/a\u003eJava 容器之 Map\u003c/h1\u003e\u003ch2 id=\"Map-简介\"\u003e\u003ca href=\"#Map-简介\" class=\"headerlink\" title=\"Map 简介\"\u003e\u003c/a\u003eMap 简介\u003c/h2\u003e\u003ch3 id=\"Map-架构\"\u003e\u003ca href=\"#Map-架构\" class=\"headerlink\" title=\"Map 架构\"\u003e\u003c/a\u003eMap 架构\u003c/h3\u003e\u003cdiv align=\"center\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/container/Map-diagrams.png\"/\u003e\n\u003c/div\u003e\n\n\u003cp\u003eMap 家族主要成员功能如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eMap\u003c/code\u003e 是 Map 容器家族的祖先，Map 是一个用于保存键值对(key-value)的接口。\u003cstrong\u003eMap 中不能包含重复的键；每个键最多只能映射到一个值。\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAbstractMap\u003c/code\u003e 继承了 \u003ccode\u003eMap\u003c/code\u003e 的抽象类，它实现了 \u003ccode\u003eMap\u003c/code\u003e 中的核心 API。其它 \u003ccode\u003eMap\u003c/code\u003e 的实现类可以通过继承 \u003ccode\u003eAbstractMap\u003c/code\u003e 来减少重复编码。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSortedMap\u003c/code\u003e 继承了 \u003ccode\u003eMap\u003c/code\u003e 的接口。\u003ccode\u003eSortedMap\u003c/code\u003e 中的内容是排序的键值对，排序的方法是通过实现比较器(\u003ccode\u003eComparator\u003c/code\u003e)完成的。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNavigableMap\u003c/code\u003e 继承了 \u003ccode\u003eSortedMap\u003c/code\u003e 的接口。相比于 \u003ccode\u003eSortedMap\u003c/code\u003e，\u003ccode\u003eNavigableMap\u003c/code\u003e 有一系列的“导航”方法；如”获取大于/等于某对象的键值对”、“获取小于/等于某对象的键值对”等等。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eHashMap\u003c/code\u003e 继承了 \u003ccode\u003eAbstractMap\u003c/code\u003e，但没实现 \u003ccode\u003eNavigableMap\u003c/code\u003e 接口。\u003ccode\u003eHashMap\u003c/code\u003e 的主要作用是储存无序的键值对，而 \u003ccode\u003eHash\u003c/code\u003e 也体现了它的查找效率很高。\u003ccode\u003eHashMap\u003c/code\u003e 是使用最广泛的 \u003ccode\u003eMap\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eHashtable\u003c/code\u003e 虽然没有继承 \u003ccode\u003eAbstractMap\u003c/code\u003e，但它继承了 \u003ccode\u003eDictionary\u003c/code\u003e（\u003ccode\u003eDictionary\u003c/code\u003e 也是键值对的接口），而且也实现 \u003ccode\u003eMap\u003c/code\u003e 接口。因此，\u003ccode\u003eHashtable\u003c/code\u003e 的主要作用是储存无序的键值对。和 HashMap 相比，\u003ccode\u003eHashtable\u003c/code\u003e 在它的主要方法中使用 \u003ccode\u003esynchronized\u003c/code\u003e 关键字修饰，来保证线程安全。但是，由于它的锁粒度太大，非常影响读写速度，所以，现代 Java 程序几乎不会使用 \u003ccode\u003eHashtable\u003c/code\u003e ，如果需要保证线程安全，一般会用 \u003ccode\u003eConcurrentHashMap\u003c/code\u003e 来替代。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTreeMap\u003c/code\u003e 继承了 \u003ccode\u003eAbstractMap\u003c/code\u003e，且实现了 \u003ccode\u003eNavigableMap\u003c/code\u003e 接口。\u003ccode\u003eTreeMap\u003c/code\u003e 的主要作用是储存有序的键值对，排序依据根据元素类型的 \u003ccode\u003eComparator\u003c/code\u003e 而定。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eWeakHashMap\u003c/code\u003e 继承了 \u003ccode\u003eAbstractMap\u003c/code\u003e。\u003ccode\u003eWeakHashMap\u003c/code\u003e 的键是\u003cstrong\u003e弱引用\u003c/strong\u003e （即 \u003ccode\u003eWeakReference\u003c/code\u003e），它的主要作用是当 GC 内存不足时，会自动将 \u003ccode\u003eWeakHashMap\u003c/code\u003e 中的 key 回收，这避免了 \u003ccode\u003eWeakHashMap\u003c/code\u003e 的内存空间无限膨胀。很明显，\u003ccode\u003eWeakHashMap\u003c/code\u003e 适用于作为缓存。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Map-接口\"\u003e\u003ca href=\"#Map-接口\" class=\"headerlink\" title=\"Map 接口\"\u003e\u003c/a\u003eMap 接口\u003c/h3\u003e\u003cp\u003eMap 的定义如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMap\u003c/span\u003e\u0026lt;K,V\u0026gt; { }\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eMap 是一个用于保存键值对(key-value)的接口。\u003cstrong\u003eMap 中不能包含重复的键；每个键最多只能映射到一个值。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eMap 接口提供三种 \u003ccode\u003eCollection\u003c/code\u003e 视图，允许以\u003cstrong\u003e键集\u003c/strong\u003e、\u003cstrong\u003e值集\u003c/strong\u003e或\u003cstrong\u003e键-值映射关系集\u003c/strong\u003e的形式访问数据。\u003c/p\u003e\n\u003cp\u003eMap 有些实现类，可以有序的保存元素，如 \u003ccode\u003eTreeMap\u003c/code\u003e；另一些实现类则不保证顺序，如 \u003ccode\u003eHashMap\u003c/code\u003e 类。\u003c/p\u003e\n\u003cp\u003eMap 的实现类应该提供 2 个“标准的”构造方法：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003evoid（无参数）构造方法，用于创建空 Map；\u003c/li\u003e\n\u003cli\u003e带有单个 Map 类型参数的构造方法，用于创建一个与其参数具有相同键-值映射关系的新 Map。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e实际上，后一个构造方法允许用户复制任意 Map，生成所需类的一个等价 Map。尽管无法强制执行此建议（因为接口不能包含构造方法），但是 JDK 中所有通用的 Map 实现都遵从它。\u003c/p\u003e\n\u003ch3 id=\"Map-Entry-接口\"\u003e\u003ca href=\"#Map-Entry-接口\" class=\"headerlink\" title=\"Map.Entry 接口\"\u003e\u003c/a\u003eMap.Entry 接口\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eMap.Entry\u003c/code\u003e 一般用于通过迭代器（\u003ccode\u003eIterator\u003c/code\u003e）访问问 \u003ccode\u003eMap\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMap.Entry\u003c/code\u003e 是 Map 中内部的一个接口，\u003ccode\u003eMap.Entry\u003c/code\u003e 代表了 \u003cstrong\u003e键值对\u003c/strong\u003e 实体，Map 通过 \u003ccode\u003eentrySet()\u003c/code\u003e 获取 \u003ccode\u003eMap.Entry\u003c/code\u003e 集合，从而通过该集合实现对键值对的操作。\u003c/p\u003e\n\u003ch3 id=\"AbstractMap-抽象类\"\u003e\u003ca href=\"#AbstractMap-抽象类\" class=\"headerlink\" title=\"AbstractMap 抽象类\"\u003e\u003c/a\u003eAbstractMap 抽象类\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eAbstractMap\u003c/code\u003e 的定义如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eabstract\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eAbstractMap\u003c/span\u003e\u0026lt;K,V\u0026gt; \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMap\u003c/span\u003e\u0026lt;K,V\u0026gt; {}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eAbstractMap\u003c/code\u003e 抽象类提供了 \u003ccode\u003eMap\u003c/code\u003e 接口的核心实现，以最大限度地减少实现 \u003ccode\u003eMap\u003c/code\u003e 接口所需的工作。\u003c/p\u003e\n\u003cp\u003e要实现不可修改的 Map，编程人员只需扩展此类并提供 \u003ccode\u003eentrySet()\u003c/code\u003e 方法的实现即可，该方法将返回 \u003ccode\u003eMap\u003c/code\u003e 的映射关系 Set 视图。通常，返回的 set 将依次在 \u003ccode\u003eAbstractSet\u003c/code\u003e 上实现。此 Set 不支持 \u003ccode\u003eadd()\u003c/code\u003e 或 \u003ccode\u003eremove()\u003c/code\u003e 方法，其迭代器也不支持 \u003ccode\u003eremove()\u003c/code\u003e 方法。\u003c/p\u003e\n\u003cp\u003e要实现可修改的 \u003ccode\u003eMap\u003c/code\u003e，编程人员必须另外重写此类的 \u003ccode\u003eput\u003c/code\u003e 方法（否则将抛出 \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e），\u003ccode\u003eentrySet().iterator()\u003c/code\u003e 返回的迭代器也必须另外实现其 \u003ccode\u003eremove()\u003c/code\u003e 方法。\u003c/p\u003e\n\u003ch3 id=\"SortedMap-接口\"\u003e\u003ca href=\"#SortedMap-接口\" class=\"headerlink\" title=\"SortedMap 接口\"\u003e\u003c/a\u003eSortedMap 接口\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eSortedMap\u003c/code\u003e 的定义如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSortedMap\u003c/span\u003e\u0026lt;K,V\u0026gt; \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMap\u003c/span\u003e\u0026lt;K,V\u0026gt; { }\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eSortedMap\u003c/code\u003e 继承了 \u003ccode\u003eMap\u003c/code\u003e ，它是一个有序的 \u003ccode\u003eMap\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eSortedMap\u003c/code\u003e 的排序方式有两种：\u003cstrong\u003e自然排序\u003c/strong\u003e或者\u003cstrong\u003e用户指定比较器\u003c/strong\u003e。\u003cstrong\u003e插入有序 \u003ccode\u003eSortedMap\u003c/code\u003e 的所有元素都必须实现 \u003ccode\u003eComparable\u003c/code\u003e 接口（或者被指定的比较器所接受）\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e另外，所有 \u003ccode\u003eSortedMap\u003c/code\u003e 实现类都应该提供 4 个“标准”构造方法：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003evoid\u003c/code\u003e（无参数）构造方法，它创建一个空的有序 \u003ccode\u003eMap\u003c/code\u003e，按照键的自然顺序进行排序。\u003c/li\u003e\n\u003cli\u003e带有一个 \u003ccode\u003eComparator\u003c/code\u003e 类型参数的构造方法，它创建一个空的有序 \u003ccode\u003eMap\u003c/code\u003e，根据指定的比较器进行排序。\u003c/li\u003e\n\u003cli\u003e带有一个 \u003ccode\u003eMap\u003c/code\u003e 类型参数的构造方法，它创建一个新的有序 \u003ccode\u003eMap\u003c/code\u003e，其键-值映射关系与参数相同，按照键的自然顺序进行排序。\u003c/li\u003e\n\u003cli\u003e带有一个 \u003ccode\u003eSortedMap\u003c/code\u003e 类型参数的构造方法，它创建一个新的有序 \u003ccode\u003eMap\u003c/code\u003e，其键-值映射关系和排序方法与输入的有序 Map 相同。无法保证强制实施此建议，因为接口不能包含构造方法。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"NavigableMap-接口\"\u003e\u003ca href=\"#NavigableMap-接口\" class=\"headerlink\" title=\"NavigableMap 接口\"\u003e\u003c/a\u003eNavigableMap 接口\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eNavigableMap\u003c/code\u003e 的定义如下：\u003c/p\u003e\n\u003cfigure class=\"highlight angelscript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"symbol\"\u003eNavigableMap\u003c/span\u003e\u0026lt;\u003cspan class=\"symbol\"\u003eK\u003c/span\u003e,\u003cspan class=\"symbol\"\u003eV\u003c/span\u003e\u0026gt; \u003cspan class=\"symbol\"\u003eextends\u003c/span\u003e \u003cspan class=\"symbol\"\u003eSortedMap\u003c/span\u003e\u0026lt;\u003cspan class=\"symbol\"\u003eK\u003c/span\u003e,\u003cspan class=\"symbol\"\u003eV\u003c/span\u003e\u0026gt; { }\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eNavigableMap\u003c/code\u003e 继承了 \u003ccode\u003eSortedMap\u003c/code\u003e ，它提供了丰富的查找方法。\u003c/p\u003e\n\u003cp\u003eNavigableMap 分别提供了获取“键”、“键-值对”、“键集”、“键-值对集”的相关方法。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eNavigableMap\u003c/code\u003e 提供的功能可以分为 4 类：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e获取键-值对\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003elowerEntry\u003c/code\u003e、\u003ccode\u003efloorEntry\u003c/code\u003e、\u003ccode\u003eceilingEntry\u003c/code\u003e 和 \u003ccode\u003ehigherEntry\u003c/code\u003e 方法，它们分别返回与小于、小于等于、大于等于、大于给定键的键关联的 Map.Entry 对象。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efirstEntry\u003c/code\u003e、\u003ccode\u003epollFirstEntry\u003c/code\u003e、\u003ccode\u003elastEntry\u003c/code\u003e 和 \u003ccode\u003epollLastEntry\u003c/code\u003e 方法，它们返回和/或移除最小和最大的映射关系（如果存在），否则返回 null。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e获取键\u003c/strong\u003e。这个和第 1 类比较类似。\u003cul\u003e\n\u003cli\u003e\u003ccode\u003elowerKey\u003c/code\u003e、\u003ccode\u003efloorKey\u003c/code\u003e、\u003ccode\u003eceilingKey\u003c/code\u003e 和 \u003ccode\u003ehigherKey\u003c/code\u003e 方法，它们分别返回与小于、小于等于、大于等于、大于给定键的键。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e获取键的集合\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003enavigableKeySet\u003c/code\u003e、\u003ccode\u003edescendingKeySet\u003c/code\u003e 分别获取正序/反序的键集。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e获取键-值对的子集\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Dictionary-抽象类\"\u003e\u003ca href=\"#Dictionary-抽象类\" class=\"headerlink\" title=\"Dictionary 抽象类\"\u003e\u003c/a\u003eDictionary 抽象类\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eDictionary\u003c/code\u003e 的定义如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eabstract\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eDictionary\u003c/span\u003e\u0026lt;K,V\u0026gt; {}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eDictionary\u003c/code\u003e 是 JDK 1.0 定义的操作键值对的抽象类，它包括了操作键值对的基本方法。\u003c/p\u003e\n\u003ch2 id=\"HashMap-类\"\u003e\u003ca href=\"#HashMap-类\" class=\"headerlink\" title=\"HashMap 类\"\u003e\u003c/a\u003eHashMap 类\u003c/h2\u003e\u003cp\u003e\u003ccode\u003eHashMap\u003c/code\u003e 类是最常用的 \u003ccode\u003eMap\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id=\"HashMap-要点\"\u003e\u003ca href=\"#HashMap-要点\" class=\"headerlink\" title=\"HashMap 要点\"\u003e\u003c/a\u003eHashMap 要点\u003c/h3\u003e\u003cp\u003e从 \u003ccode\u003eHashMap\u003c/code\u003e 的命名，也可以看出：**\u003ccode\u003eHashMap\u003c/code\u003e 以散列方式存储键值对**。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eHashMap\u003c/code\u003e 允许使用空值和空键\u003c/strong\u003e。（\u003ccode\u003eHashMap\u003c/code\u003e 类大致等同于 \u003ccode\u003eHashtable\u003c/code\u003e，除了它是不同步的并且允许为空值。）这个类不保序；特别是，它的元素顺序可能会随着时间的推移变化。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eHashMap\u003c/code\u003e 有两个影响其性能的参数：初始容量和负载因子\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e容量是哈希表中桶的数量，初始容量就是哈希表创建时的容量。\u003c/li\u003e\n\u003cli\u003e加载因子是散列表在其容量自动扩容之前被允许的最大饱和量。当哈希表中的 entry 数量超过负载因子和当前容量的乘积时，散列表就会被重新映射（即重建内部数据结构），一般散列表大约是存储桶数量的两倍。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e通常，默认加载因子（0.75）在时间和空间成本之间提供了良好的平衡。较高的值会减少空间开销，但会增加查找成本（反映在大部分 \u003ccode\u003eHashMap\u003c/code\u003e 类的操作中，包括 \u003ccode\u003eget\u003c/code\u003e 和 \u003ccode\u003eput\u003c/code\u003e）。在设置初始容量时，应考虑映射中的条目数量及其负载因子，以尽量减少重新运行操作的次数。如果初始容量大于最大入口数除以负载因子，则不会发生重新刷新操作。\u003c/p\u003e\n\u003cp\u003e如果许多映射要存储在 \u003ccode\u003eHashMap\u003c/code\u003e 实例中，使用足够大的容量创建映射将允许映射存储的效率高于根据需要执行自动重新散列以增长表。请注意，使用多个具有相同 \u003ccode\u003ehashCode()\u003c/code\u003e 的密钥是降低任何散列表性能的一个可靠方法。为了改善影响，当键是 \u003ccode\u003eComparable\u003c/code\u003e 时，该类可以使用键之间的比较顺序来帮助断开关系。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eHashMap\u003c/code\u003e 不是线程安全的。\u003c/p\u003e\n\u003ch3 id=\"HashMap-原理\"\u003e\u003ca href=\"#HashMap-原理\" class=\"headerlink\" title=\"HashMap 原理\"\u003e\u003c/a\u003eHashMap 原理\u003c/h3\u003e\u003ch4 id=\"HashMap-数据结构\"\u003e\u003ca href=\"#HashMap-数据结构\" class=\"headerlink\" title=\"HashMap 数据结构\"\u003e\u003c/a\u003eHashMap 数据结构\u003c/h4\u003e\u003cp\u003e\u003ccode\u003eHashMap\u003c/code\u003e 的核心字段：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etable\u003c/code\u003e - \u003ccode\u003eHashMap\u003c/code\u003e 使用一个 \u003ccode\u003eNode\u0026lt;K,V\u0026gt;[]\u003c/code\u003e 类型的数组 \u003ccode\u003etable\u003c/code\u003e 来储存元素。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esize\u003c/code\u003e - 初始容量。 初始为 16，每次容量不够自动扩容\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eloadFactor\u003c/code\u003e - 负载因子。自动扩容之前被允许的最大饱和量，默认 0.75。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eHashMap\u003c/span\u003e\u0026lt;K,V\u0026gt; \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eAbstractMap\u003c/span\u003e\u0026lt;K,V\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMap\u003c/span\u003e\u0026lt;K,V\u0026gt;, Cloneable, Serializable {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 该表在初次使用时初始化，并根据需要调整大小。分配时，长度总是2的幂。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003etransient\u003c/span\u003e Node\u0026lt;K,V\u0026gt;[] table;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 保存缓存的 entrySet()。请注意，AbstractMap 字段用于 keySet() 和 values()。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003etransient\u003c/span\u003e Set\u0026lt;Map.Entry\u0026lt;K,V\u0026gt;\u0026gt; entrySet;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// map 中的键值对数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003etransient\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e size;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 这个HashMap被结构修改的次数结构修改是那些改变HashMap中的映射数量或者修改其内部结构（例如，重新散列）的修改。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003etransient\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e modCount;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 下一个调整大小的值（容量*加载因子）。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e threshold;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 散列表的加载因子\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003efloat\u003c/span\u003e loadFactor;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"HashMap-构造方法\"\u003e\u003ca href=\"#HashMap-构造方法\" class=\"headerlink\" title=\"HashMap 构造方法\"\u003e\u003c/a\u003eHashMap 构造方法\u003c/h4\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eHashMap\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e; \u003cspan class=\"comment\"\u003e// 默认加载因子0.75\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eHashMap\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e initialCapacity)\u003c/span\u003e; \u003cspan class=\"comment\"\u003e// 默认加载因子0.75；以 initialCapacity 初始化容量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eHashMap\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e initialCapacity, \u003cspan class=\"type\"\u003efloat\u003c/span\u003e loadFactor)\u003c/span\u003e; \u003cspan class=\"comment\"\u003e// 以 initialCapacity 初始化容量；以 loadFactor 初始化加载因子\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eHashMap\u003c/span\u003e\u003cspan class=\"params\"\u003e(Map\u0026lt;? extends K, ? extends V\u0026gt; m)\u003c/span\u003e \u003cspan class=\"comment\"\u003e// 默认加载因子0.75\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"put-方法的实现\"\u003e\u003ca href=\"#put-方法的实现\" class=\"headerlink\" title=\"put 方法的实现\"\u003e\u003c/a\u003eput 方法的实现\u003c/h4\u003e\u003cp\u003eput 方法大致的思路为：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e对 key 的 \u003ccode\u003ehashCode()\u003c/code\u003e 做 hash 计算，然后根据 hash 值再计算 Node 的存储位置;\u003c/li\u003e\n\u003cli\u003e如果没有哈希碰撞，直接放到桶里；如果有哈希碰撞，以链表的形式存在桶后。\u003c/li\u003e\n\u003cli\u003e如果哈希碰撞导致链表过长(大于等于 \u003ccode\u003eTREEIFY_THRESHOLD\u003c/code\u003e，数值为 8)，就把链表转换成红黑树；\u003c/li\u003e\n\u003cli\u003e如果节点已经存在就替换旧值\u003c/li\u003e\n\u003cli\u003e桶数量超过容量*负载因子（即 load factor * current capacity），HashMap 调用 \u003ccode\u003eresize\u003c/code\u003e 自动扩容一倍\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e具体代码的实现如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e V \u003cspan class=\"title function_\"\u003eput\u003c/span\u003e\u003cspan class=\"params\"\u003e(K key, V value)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e putVal(hash(key), key, value, \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e, \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// hashcode 无符号位移 16 位\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003ehash\u003c/span\u003e\u003cspan class=\"params\"\u003e(Object key)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e h;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (key == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) ? \u003cspan class=\"number\"\u003e0\u003c/span\u003e : (h = key.hashCode()) ^ (h \u0026gt;\u0026gt;\u0026gt; \u003cspan class=\"number\"\u003e16\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e V \u003cspan class=\"title function_\"\u003eputVal\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e hash, K key, V value, \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e onlyIfAbsent,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e                   \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e evict)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Node\u0026lt;K,V\u0026gt;[] tab; Node\u0026lt;K,V\u0026gt; p; \u003cspan class=\"type\"\u003eint\u003c/span\u003e n, i;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// tab 为空则创建\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e ((tab = table) == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e || (n = tab.length) == \u003cspan class=\"number\"\u003e0\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        n = (tab = resize()).length;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 计算 index，并对 null 做处理\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e ((p = tab[i = (n - \u003cspan class=\"number\"\u003e1\u003c/span\u003e) \u0026amp; hash]) == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        tab[i] = newNode(hash, key, value, \u003cspan class=\"literal\"\u003enull\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Node\u0026lt;K,V\u0026gt; e; K k;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 节点存在\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (p.hash == hash \u0026amp;\u0026amp;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            ((k = p.key) == key || (key != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; key.equals(k))))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            e = p;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 该链为树\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (p \u003cspan class=\"keyword\"\u003einstanceof\u003c/span\u003e TreeNode)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            e = ((TreeNode\u0026lt;K,V\u0026gt;)p).putTreeVal(\u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e, tab, hash, key, value);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 该链为链表\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ebinCount\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; ; ++binCount) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e ((e = p.next) == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    p.next = newNode(hash, key, value, \u003cspan class=\"literal\"\u003enull\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (binCount \u0026gt;= TREEIFY_THRESHOLD - \u003cspan class=\"number\"\u003e1\u003c/span\u003e) \u003cspan class=\"comment\"\u003e// -1 for 1st\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        treeifyBin(tab, hash);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003ebreak\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (e.hash == hash \u0026amp;\u0026amp;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    ((k = e.key) == key || (key != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; key.equals(k))))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003ebreak\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                p = e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 写入\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (e != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) { \u003cspan class=\"comment\"\u003e// existing mapping for key\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eV\u003c/span\u003e \u003cspan class=\"variable\"\u003eoldValue\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e e.value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (!onlyIfAbsent || oldValue == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                e.value = value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            afterNodeAccess(e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e oldValue;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ++modCount;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (++size \u0026gt; threshold)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        resize();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    afterNodeInsertion(evict);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e为什么计算 hash 使用 hashcode 无符号位移 16 位。\u003c/p\u003e\n\u003cp\u003e假设要添加两个对象 a 和 b，如果数组长度是 16，这时对象 a 和 b 通过公式 (n - 1) \u0026amp; hash 运算，也就是 (16-1)＆a.hashCode 和 (16-1)＆b.hashCode，15 的二进制为 0000000000000000000000000001111，假设对象 A 的 hashCode 为 1000010001110001000001111000000，对象 B 的 hashCode 为 0111011100111000101000010100000，你会发现上述与运算结果都是 0。这样的哈希结果就太让人失望了，很明显不是一个好的哈希算法。\u003c/p\u003e\n\u003cp\u003e但如果我们将 hashCode 值右移 16 位（h \u0026gt;\u0026gt;\u0026gt; 16 代表无符号右移 16 位），也就是取 int 类型的一半，刚好可以将该二进制数对半切开，并且使用位异或运算（如果两个数对应的位置相反，则结果为 1，反之为 0），这样的话，就能避免上面的情况发生。这就是 hash() 方法的具体实现方式。\u003cstrong\u003e简而言之，就是尽量打乱 hashCode 真正参与运算的低 16 位。\u003c/strong\u003e\u003c/p\u003e\n\u003ch4 id=\"get-方法的实现\"\u003e\u003ca href=\"#get-方法的实现\" class=\"headerlink\" title=\"get 方法的实现\"\u003e\u003c/a\u003eget 方法的实现\u003c/h4\u003e\u003cp\u003e在理解了 put 之后，get 就很简单了。大致思路如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e对 key 的 hashCode() 做 hash 计算，然后根据 hash 值再计算桶的 index\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e如果桶中的第一个节点命中，直接返回；\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e如果有冲突，则通过 \u003ccode\u003ekey.equals(k)\u003c/code\u003e 去查找对应的 entry\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e若为树，则在红黑树中通过 key.equals(k) 查找，O(logn)；\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e若为链表，则在链表中通过 key.equals(k) 查找，O(n)。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e具体代码的实现如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e V \u003cspan class=\"title function_\"\u003eget\u003c/span\u003e\u003cspan class=\"params\"\u003e(Object key)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Node\u0026lt;K,V\u0026gt; e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (e = getNode(hash(key), key)) == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e ? \u003cspan class=\"literal\"\u003enull\u003c/span\u003e : e.value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e Node\u0026lt;K,V\u0026gt; \u003cspan class=\"title function_\"\u003egetNode\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e hash, Object key)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Node\u0026lt;K,V\u0026gt;[] tab; Node\u0026lt;K,V\u0026gt; first, e; \u003cspan class=\"type\"\u003eint\u003c/span\u003e n; K k;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e ((tab = table) != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; (n = tab.length) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e \u0026amp;\u0026amp;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        (first = tab[(n - \u003cspan class=\"number\"\u003e1\u003c/span\u003e) \u0026amp; hash]) != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 直接命中\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (first.hash == hash \u0026amp;\u0026amp; \u003cspan class=\"comment\"\u003e// always check first node\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            ((k = first.key) == key || (key != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; key.equals(k))))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e first;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 未命中\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e ((e = first.next) != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 在树中 get\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (first \u003cspan class=\"keyword\"\u003einstanceof\u003c/span\u003e TreeNode)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e ((TreeNode\u0026lt;K,V\u0026gt;)first).getTreeNode(hash, key);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 在链表中 get\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003edo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (e.hash == hash \u0026amp;\u0026amp;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    ((k = e.key) == key || (key != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; key.equals(k))))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            } \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e ((e = e.next) != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"hash-方法的实现\"\u003e\u003ca href=\"#hash-方法的实现\" class=\"headerlink\" title=\"hash 方法的实现\"\u003e\u003c/a\u003ehash 方法的实现\u003c/h4\u003e\u003cp\u003eHashMap **计算桶下标（index）公式：\u003ccode\u003ekey.hashCode() ^ (h \u0026gt;\u0026gt;\u0026gt; 16)\u003c/code\u003e**。\u003c/p\u003e\n\u003cp\u003e下面针对这个公式来详细讲解。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003eget\u003c/code\u003e 和 \u003ccode\u003eput\u003c/code\u003e 的过程中，计算下标时，先对 \u003ccode\u003ehashCode\u003c/code\u003e 进行 \u003ccode\u003ehash\u003c/code\u003e 操作，然后再通过 \u003ccode\u003ehash\u003c/code\u003e 值进一步计算下标，如下图所示：\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/container/HashMap-hash.png\"/\u003e\n\u003c/div\u003e\n\n\u003cp\u003e在对 \u003ccode\u003ehashCode()\u003c/code\u003e 计算 hash 时具体实现是这样的：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003ehash\u003c/span\u003e\u003cspan class=\"params\"\u003e(Object key)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e h;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (key == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) ? \u003cspan class=\"number\"\u003e0\u003c/span\u003e : (h = key.hashCode()) ^ (h \u0026gt;\u0026gt;\u0026gt; \u003cspan class=\"number\"\u003e16\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可以看到这个方法大概的作用就是：高 16bit 不变，低 16bit 和高 16bit 做了一个异或。\u003c/p\u003e\n\u003cp\u003e在设计 hash 方法时，因为目前的 table 长度 n 为 2 的幂，而计算下标的时候，是这样实现的(使用 \u003ccode\u003e\u0026amp;\u003c/code\u003e 位操作，而非 \u003ccode\u003e%\u003c/code\u003e 求余)：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e(n - \u003cspan class=\"number\"\u003e1\u003c/span\u003e) \u0026amp; hash\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e设计者认为这方法很容易发生碰撞。为什么这么说呢？不妨思考一下，在 n - 1 为 15(0x1111) 时，其实散列真正生效的只是低 4bit 的有效位，当然容易碰撞了。\u003c/p\u003e\n\u003cp\u003e因此，设计者想了一个顾全大局的方法(综合考虑了速度、作用、质量)，就是把高 16bit 和低 16bit 异或了一下。设计者还解释到因为现在大多数的 hashCode 的分布已经很不错了，就算是发生了碰撞也用 O(logn)的 tree 去做了。仅仅异或一下，既减少了系统的开销，也不会造成的因为高位没有参与下标的计算(table 长度比较小时)，从而引起的碰撞。\u003c/p\u003e\n\u003cp\u003e如果还是产生了频繁的碰撞，会发生什么问题呢？作者注释说，他们使用树来处理频繁的碰撞(we use trees to handle large sets of collisions in bins)，在 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://openjdk.java.net/jeps/180\"\u003eJEP-180\u003c/a\u003e 中，描述了这个问题：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eImprove the performance of java.util.HashMap under high hash-collision conditions by using balanced trees rather than linked lists to store map entries. Implement the same improvement in the LinkedHashMap class.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e之前已经提过，在获取 HashMap 的元素时，基本分两步：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cp\u003e首先根据 hashCode()做 hash，然后确定 bucket 的 index；\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e如果 bucket 的节点的 key 不是我们需要的，则通过 keys.equals()在链中找。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在 JDK8 之前的实现中是用链表解决冲突的，在产生碰撞的情况下，进行 get 时，两步的时间复杂度是 O(1)+O(n)。因此，当碰撞很厉害的时候 n 很大，O(n)的速度显然是影响速度的。\u003c/p\u003e\n\u003cp\u003e因此在 JDK8 中，利用红黑树替换链表，这样复杂度就变成了 O(1)+O(logn)了，这样在 n 很大的时候，能够比较理想的解决这个问题，在 JDK8：HashMap 的性能提升一文中有性能测试的结果。\u003c/p\u003e\n\u003ch4 id=\"resize-的实现\"\u003e\u003ca href=\"#resize-的实现\" class=\"headerlink\" title=\"resize 的实现\"\u003e\u003c/a\u003eresize 的实现\u003c/h4\u003e\u003cp\u003e当 \u003ccode\u003eput\u003c/code\u003e 时，如果发现目前的 bucket 占用程度已经超过了 Load Factor 所希望的比例，那么就会发生 resize。在 resize 的过程，简单的说就是把 bucket 扩充为 2 倍，之后重新计算 index，把节点再放到新的 bucket 中。\u003c/p\u003e\n\u003cp\u003e当超过限制的时候会 resize，然而又因为我们使用的是 2 次幂的扩展(指长度扩为原来 2 倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动 2 次幂的位置。\u003c/p\u003e\n\u003cp\u003e怎么理解呢？例如我们从 16 扩展为 32 时，具体的变化如下所示：\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/container/HashMap-resize-01.png\"/\u003e\n\u003c/div\u003e\n\n\u003cp\u003e因此元素在重新计算 hash 之后，因为 n 变为 2 倍，那么 n-1 的 mask 范围在高位多 1bit(红色)，因此新的 index 就会发生这样的变化：\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/container/HashMap-resize-02.png\"/\u003e\n\u003c/div\u003e\n\n\u003cp\u003e因此，我们在扩充 HashMap 的时候，不需要重新计算 hash，只需要看看原来的 hash 值新增的那个 bit 是 1 还是 0 就好了，是 0 的话索引没变，是 1 的话索引变成“原索引+oldCap”。可以看看下图为 16 扩充为 32 的 resize 示意图：\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/container/HashMap-resize-03.png\"/\u003e\n\u003c/div\u003e\n\n\u003cp\u003e这个设计确实非常的巧妙，既省去了重新计算 hash 值的时间，而且同时，由于新增的 1bit 是 0 还是 1 可以认为是随机的，因此 resize 的过程，均匀的把之前的冲突的节点分散到新的 bucket 了。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e60\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e61\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e62\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e63\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e65\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e66\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e67\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e68\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e69\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e70\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e71\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e72\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e73\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e74\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e75\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e76\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e77\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e78\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e79\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e80\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e81\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e82\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e Node\u0026lt;K,V\u0026gt;[] resize() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Node\u0026lt;K,V\u0026gt;[] oldTab = table;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eoldCap\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e (oldTab == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) ? \u003cspan class=\"number\"\u003e0\u003c/span\u003e : oldTab.length;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eoldThr\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e threshold;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e newCap, newThr = \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (oldCap \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 超过最大值就不再扩充了，就只好随你碰撞去吧\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (oldCap \u0026gt;= MAXIMUM_CAPACITY) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            threshold = Integer.MAX_VALUE;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e oldTab;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 没超过最大值，就扩充为原来的 2 倍\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e ((newCap = oldCap \u0026lt;\u0026lt; \u003cspan class=\"number\"\u003e1\u003c/span\u003e) \u0026lt; MAXIMUM_CAPACITY \u0026amp;\u0026amp;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    oldCap \u0026gt;= DEFAULT_INITIAL_CAPACITY)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            newThr = oldThr \u0026lt;\u0026lt; \u003cspan class=\"number\"\u003e1\u003c/span\u003e; \u003cspan class=\"comment\"\u003e// double threshold\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (oldThr \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e) \u003cspan class=\"comment\"\u003e// initial capacity was placed in threshold\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        newCap = oldThr;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {               \u003cspan class=\"comment\"\u003e// zero initial threshold signifies using defaults\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        newCap = DEFAULT_INITIAL_CAPACITY;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        newThr = (\u003cspan class=\"type\"\u003eint\u003c/span\u003e)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 计算新的 resize 上限\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (newThr == \u003cspan class=\"number\"\u003e0\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003efloat\u003c/span\u003e \u003cspan class=\"variable\"\u003eft\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e (\u003cspan class=\"type\"\u003efloat\u003c/span\u003e)newCap * loadFactor;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        newThr = (newCap \u0026lt; MAXIMUM_CAPACITY \u0026amp;\u0026amp; ft \u0026lt; (\u003cspan class=\"type\"\u003efloat\u003c/span\u003e)MAXIMUM_CAPACITY ?\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    (\u003cspan class=\"type\"\u003eint\u003c/span\u003e)ft : Integer.MAX_VALUE);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    threshold = newThr;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@SuppressWarnings({\u0026#34;rawtypes\u0026#34;,\u0026#34;unchecked\u0026#34;})\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Node\u0026lt;K,V\u0026gt;[] newTab = (Node\u0026lt;K,V\u0026gt;[])\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eNode\u003c/span\u003e[newCap];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    table = newTab;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (oldTab != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 把每个 bucket 都移动到新的 buckets 中\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ej\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; j \u0026lt; oldCap; ++j) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            Node\u0026lt;K,V\u0026gt; e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e ((e = oldTab[j]) != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                oldTab[j] = \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (e.next == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    newTab[e.hash \u0026amp; (newCap - \u003cspan class=\"number\"\u003e1\u003c/span\u003e)] = e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (e \u003cspan class=\"keyword\"\u003einstanceof\u003c/span\u003e TreeNode)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    ((TreeNode\u0026lt;K,V\u0026gt;)e).split(\u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e, newTab, j, oldCap);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e { \u003cspan class=\"comment\"\u003e// preserve order\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    Node\u0026lt;K,V\u0026gt; loHead = \u003cspan class=\"literal\"\u003enull\u003c/span\u003e, loTail = \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    Node\u0026lt;K,V\u0026gt; hiHead = \u003cspan class=\"literal\"\u003enull\u003c/span\u003e, hiTail = \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    Node\u0026lt;K,V\u0026gt; next;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003edo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        next = e.next;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        \u003cspan class=\"comment\"\u003e// 原索引\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e ((e.hash \u0026amp; oldCap) == \u003cspan class=\"number\"\u003e0\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (loTail == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                loHead = e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                loTail.next = e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            loTail = e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        \u003cspan class=\"comment\"\u003e// 原索引+oldCap\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (hiTail == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                hiHead = e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                hiTail.next = e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            hiTail = e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    } \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e ((e = next) != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"comment\"\u003e// 原索引放到bucket里\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (loTail != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        loTail.next = \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        newTab[j] = loHead;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"comment\"\u003e// 原索引+oldCap放到bucket里\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (hiTail != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        hiTail.next = \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        newTab[j + oldCap] = hiHead;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e newTab;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"LinkedHashMap-类\"\u003e\u003ca href=\"#LinkedHashMap-类\" class=\"headerlink\" title=\"LinkedHashMap 类\"\u003e\u003c/a\u003eLinkedHashMap 类\u003c/h2\u003e\u003ch3 id=\"LinkedHashMap-要点\"\u003e\u003ca href=\"#LinkedHashMap-要点\" class=\"headerlink\" title=\"LinkedHashMap 要点\"\u003e\u003c/a\u003eLinkedHashMap 要点\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eLinkedHashMap\u003c/code\u003e 通过维护一个保存所有条目（Entry）的双向链表，保证了元素迭代的顺序（即插入顺序）\u003c/strong\u003e。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e关注点\u003c/th\u003e\n\u003cth\u003e结论\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e是否允许键值对为 null\u003c/td\u003e\n\u003ctd\u003eKey 和 Value 都允许 null\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e是否允许重复数据\u003c/td\u003e\n\u003ctd\u003eKey 重复会覆盖、Value 允许重复\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e是否有序\u003c/td\u003e\n\u003ctd\u003e按照元素插入顺序存储\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e是否线程安全\u003c/td\u003e\n\u003ctd\u003e非线程安全\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"LinkedHashMap-要点-1\"\u003e\u003ca href=\"#LinkedHashMap-要点-1\" class=\"headerlink\" title=\"LinkedHashMap 要点\"\u003e\u003c/a\u003eLinkedHashMap 要点\u003c/h3\u003e\u003ch4 id=\"LinkedHashMap-数据结构\"\u003e\u003ca href=\"#LinkedHashMap-数据结构\" class=\"headerlink\" title=\"LinkedHashMap 数据结构\"\u003e\u003c/a\u003eLinkedHashMap 数据结构\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eLinkedHashMap\u003c/code\u003e 通过维护一对 \u003ccode\u003eLinkedHashMap.Entry\u0026lt;K,V\u0026gt;\u003c/code\u003e 类型的头尾指针，以双链表形式，保存所有数据\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e学习过数据结构的双链表，就能理解其元素存储以及访问必然是有序的。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eLinkedHashMap\u003c/span\u003e\u0026lt;K,V\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eHashMap\u003c/span\u003e\u0026lt;K,V\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMap\u003c/span\u003e\u0026lt;K,V\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 双链表的头指针\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003etransient\u003c/span\u003e LinkedHashMap.Entry\u0026lt;K,V\u0026gt; head;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 双链表的尾指针\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003etransient\u003c/span\u003e LinkedHashMap.Entry\u0026lt;K,V\u0026gt; tail;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 迭代排序方法：true 表示访问顺序；false 表示插入顺序\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e accessOrder;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eLinkedHashMap\u003c/code\u003e 继承了 \u003ccode\u003eHashMap\u003c/code\u003e 的 \u003ccode\u003eput\u003c/code\u003e 方法，本身没有实现 \u003ccode\u003eput\u003c/code\u003e 方法。\u003c/p\u003e\n\u003ch2 id=\"TreeMap-类\"\u003e\u003ca href=\"#TreeMap-类\" class=\"headerlink\" title=\"TreeMap 类\"\u003e\u003c/a\u003eTreeMap 类\u003c/h2\u003e\u003ch3 id=\"TreeMap-要点\"\u003e\u003ca href=\"#TreeMap-要点\" class=\"headerlink\" title=\"TreeMap 要点\"\u003e\u003c/a\u003eTreeMap 要点\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eTreeMap\u003c/code\u003e 基于红黑树实现。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eTreeMap\u003c/code\u003e 是有序的。它的排序规则是：根据 map 中的 key 的自然语义顺序或提供的比较器（\u003ccode\u003eComparator\u003c/code\u003e）的自定义比较顺序。\u003c/p\u003e\n\u003cp\u003eTreeMap 不是线程安全的。\u003c/p\u003e\n\u003ch3 id=\"TreeMap-原理\"\u003e\u003ca href=\"#TreeMap-原理\" class=\"headerlink\" title=\"TreeMap 原理\"\u003e\u003c/a\u003eTreeMap 原理\u003c/h3\u003e\u003ch4 id=\"put-方法\"\u003e\u003ca href=\"#put-方法\" class=\"headerlink\" title=\"put 方法\"\u003e\u003c/a\u003eput 方法\u003c/h4\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e V \u003cspan class=\"title function_\"\u003eput\u003c/span\u003e\u003cspan class=\"params\"\u003e(K key, V value)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Entry\u0026lt;K,V\u0026gt; t = root;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 如果根节点为 null，插入第一个节点\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (t == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        compare(key, key); \u003cspan class=\"comment\"\u003e// type (and possibly null) check\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        root = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eEntry\u003c/span\u003e\u0026lt;\u0026gt;(key, value, \u003cspan class=\"literal\"\u003enull\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        size = \u003cspan class=\"number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        modCount++;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e cmp;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Entry\u0026lt;K,V\u0026gt; parent;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// split comparator and comparable paths\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Comparator\u0026lt;? \u003cspan class=\"built_in\"\u003esuper\u003c/span\u003e K\u0026gt; cpr = comparator;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 每个节点的左孩子节点的值小于它；右孩子节点的值大于它\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 如果有比较器，使用比较器进行比较\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (cpr != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003edo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            parent = t;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            cmp = cpr.compare(key, t.key);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (cmp \u0026lt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                t = t.left;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (cmp \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                t = t.right;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e t.setValue(value);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (t != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 没有比较器，使用 key 的自然顺序进行比较\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (key == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ethrow\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eNullPointerException\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"meta\"\u003e@SuppressWarnings(\u0026#34;unchecked\u0026#34;)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            Comparable\u0026lt;? \u003cspan class=\"built_in\"\u003esuper\u003c/span\u003e K\u0026gt; k = (Comparable\u0026lt;? \u003cspan class=\"built_in\"\u003esuper\u003c/span\u003e K\u0026gt;) key;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003edo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            parent = t;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            cmp = k.compareTo(t.key);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (cmp \u0026lt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                t = t.left;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (cmp \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                t = t.right;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e t.setValue(value);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (t != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 通过上面的遍历未找到 key 值，则新插入节点\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Entry\u0026lt;K,V\u0026gt; e = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eEntry\u003c/span\u003e\u0026lt;\u0026gt;(key, value, parent);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (cmp \u0026lt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        parent.left = e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        parent.right = e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 插入后，为了维持红黑树的平衡需要调整\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    fixAfterInsertion(e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    size++;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    modCount++;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"get-方法\"\u003e\u003ca href=\"#get-方法\" class=\"headerlink\" title=\"get 方法\"\u003e\u003c/a\u003eget 方法\u003c/h4\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e V \u003cspan class=\"title function_\"\u003eget\u003c/span\u003e\u003cspan class=\"params\"\u003e(Object key)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Entry\u0026lt;K,V\u0026gt; p = getEntry(key);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (p==\u003cspan class=\"literal\"\u003enull\u003c/span\u003e ? \u003cspan class=\"literal\"\u003enull\u003c/span\u003e : p.value);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e Entry\u0026lt;K,V\u0026gt; \u003cspan class=\"title function_\"\u003egetEntry\u003c/span\u003e\u003cspan class=\"params\"\u003e(Object key)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// Offload comparator-based version for sake of performance\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (comparator != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e getEntryUsingComparator(key);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (key == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ethrow\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eNullPointerException\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@SuppressWarnings(\u0026#34;unchecked\u0026#34;)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Comparable\u0026lt;? \u003cspan class=\"built_in\"\u003esuper\u003c/span\u003e K\u0026gt; k = (Comparable\u0026lt;? \u003cspan class=\"built_in\"\u003esuper\u003c/span\u003e K\u0026gt;) key;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Entry\u0026lt;K,V\u0026gt; p = root;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 按照二叉树搜索的方式进行搜索，搜到返回\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (p != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ecmp\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e k.compareTo(p.key);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (cmp \u0026lt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            p = p.left;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (cmp \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            p = p.right;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e p;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"remove-方法\"\u003e\u003ca href=\"#remove-方法\" class=\"headerlink\" title=\"remove 方法\"\u003e\u003c/a\u003eremove 方法\u003c/h3\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e V \u003cspan class=\"title function_\"\u003eremove\u003c/span\u003e\u003cspan class=\"params\"\u003e(Object key)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Entry\u0026lt;K,V\u0026gt; p = getEntry(key);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (p == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eV\u003c/span\u003e \u003cspan class=\"variable\"\u003eoldValue\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e p.value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    deleteEntry(p);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e oldValue;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003edeleteEntry\u003c/span\u003e\u003cspan class=\"params\"\u003e(Entry\u0026lt;K,V\u0026gt; p)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    modCount++;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    size--;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 如果当前节点有左右孩子节点，使用后继节点替换要删除的节点\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// If strictly internal, copy successor\u0026#39;s element to p and then make p\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// point to successor.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (p.left != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; p.right != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Entry\u0026lt;K,V\u0026gt; s = successor(p);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        p.key = s.key;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        p.value = s.value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        p = s;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"comment\"\u003e// p has 2 children\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// Start fixup at replacement node, if it exists.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Entry\u0026lt;K,V\u0026gt; replacement = (p.left != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e ? p.left : p.right);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (replacement != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) { \u003cspan class=\"comment\"\u003e// 要删除的节点有一个孩子节点\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// Link replacement to parent\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        replacement.parent = p.parent;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (p.parent == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            root = replacement;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (p == p.parent.left)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            p.parent.left  = replacement;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            p.parent.right = replacement;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// Null out links so they are OK to use by fixAfterDeletion.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        p.left = p.right = p.parent = \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// Fix replacement\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (p.color == BLACK)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            fixAfterDeletion(replacement);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (p.parent == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) { \u003cspan class=\"comment\"\u003e// return if we are the only node.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        root = \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e { \u003cspan class=\"comment\"\u003e//  No children. Use self as phantom replacement and unlink.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (p.color == BLACK)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            fixAfterDeletion(p);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (p.parent != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (p == p.parent.left)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                p.parent.left = \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (p == p.parent.right)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                p.parent.right = \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            p.parent = \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"TreeMap-示例\"\u003e\u003ca href=\"#TreeMap-示例\" class=\"headerlink\" title=\"TreeMap 示例\"\u003e\u003c/a\u003eTreeMap 示例\u003c/h3\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eTreeMapDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e String[] chars = \u003cspan class=\"string\"\u003e\u0026#34;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\u0026#34;\u003c/span\u003e.split(\u003cspan class=\"string\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        TreeMap\u0026lt;Integer, String\u0026gt; treeMap = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eTreeMap\u003c/span\u003e\u0026lt;\u0026gt;();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; chars.length; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            treeMap.put(i, chars[i]);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(treeMap);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eInteger\u003c/span\u003e \u003cspan class=\"variable\"\u003elow\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e treeMap.firstKey();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eInteger\u003c/span\u003e \u003cspan class=\"variable\"\u003ehigh\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e treeMap.lastKey();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(low);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(high);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Iterator\u0026lt;Integer\u0026gt; it = treeMap.keySet().iterator();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt;= \u003cspan class=\"number\"\u003e6\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (i == \u003cspan class=\"number\"\u003e3\u003c/span\u003e) { low = it.next(); }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (i == \u003cspan class=\"number\"\u003e6\u003c/span\u003e) { high = it.next(); } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e { it.next(); }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(low);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(high);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(treeMap.subMap(low, high));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(treeMap.headMap(high));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(treeMap.tailMap(low));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"WeakHashMap\"\u003e\u003ca href=\"#WeakHashMap\" class=\"headerlink\" title=\"WeakHashMap\"\u003e\u003c/a\u003eWeakHashMap\u003c/h2\u003e\u003cp\u003eWeakHashMap 的定义如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eWeakHashMap\u003c/span\u003e\u0026lt;K,V\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eAbstractMap\u003c/span\u003e\u0026lt;K,V\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMap\u003c/span\u003e\u0026lt;K,V\u0026gt; {}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eWeakHashMap 继承了 AbstractMap，实现了 Map 接口。\u003c/p\u003e\n\u003cp\u003e和 HashMap 一样，WeakHashMap 也是一个散列表，它存储的内容也是键值对(key-value)映射，而且键和值都可以是 null。\u003c/p\u003e\n\u003cp\u003e不过 WeakHashMap 的键是\u003cstrong\u003e弱键\u003c/strong\u003e。在 WeakHashMap 中，当某个键不再被其它对象引用，会被从 WeakHashMap 中被自动移除。更精确地说，对于一个给定的键，其映射的存在并不阻止垃圾回收器对该键的丢弃，这就使该键成为可终止的，被终止，然后被回收。某个键被终止时，它对应的键值对也就从映射中有效地移除了。\u003c/p\u003e\n\u003cp\u003e这个\u003cstrong\u003e弱键\u003c/strong\u003e的原理呢？大致上就是，通过 WeakReference 和 ReferenceQueue 实现的。\u003c/p\u003e\n\u003cp\u003eWeakHashMap 的 key 是\u003cstrong\u003e弱键\u003c/strong\u003e，即是 WeakReference 类型的；ReferenceQueue 是一个队列，它会保存被 GC 回收的\u003cstrong\u003e弱键\u003c/strong\u003e。实现步骤是：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e新建 WeakHashMap，将\u003cstrong\u003e键值对\u003c/strong\u003e添加到 WeakHashMap 中。实际上，WeakHashMap 是通过数组 table 保存 Entry(键值对)；每一个 Entry 实际上是一个单向链表，即 Entry 是键值对链表。\u003c/li\u003e\n\u003cli\u003e当某\u003cstrong\u003e弱键\u003c/strong\u003e不再被其它对象引用，并被 GC 回收时。在 GC 回收该\u003cstrong\u003e弱键\u003c/strong\u003e时，这个\u003cstrong\u003e弱键\u003c/strong\u003e也同时会被添加到 ReferenceQueue(queue)队列中。\u003c/li\u003e\n\u003cli\u003e当下一次我们需要操作 WeakHashMap 时，会先同步 table 和 queue。table 中保存了全部的键值对，而 queue 中保存被 GC 回收的键值对；同步它们，就是删除 table 中被 GC 回收的键值对。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e这就是\u003cstrong\u003e弱键\u003c/strong\u003e如何被自动从 WeakHashMap 中删除的步骤了。\u003c/p\u003e\n\u003cp\u003e和 HashMap 一样，WeakHashMap 是不同步的。可以使用 Collections.synchronizedMap 方法来构造同步的 WeakHashMap。\u003c/p\u003e\n\u003ch2 id=\"总结\"\u003e\u003ca href=\"#总结\" class=\"headerlink\" title=\"总结\"\u003e\u003c/a\u003e总结\u003c/h2\u003e\u003ch3 id=\"Map-简介-1\"\u003e\u003ca href=\"#Map-简介-1\" class=\"headerlink\" title=\"Map 简介\"\u003e\u003c/a\u003eMap 简介\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200221162002.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"HashMap\"\u003e\u003ca href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"\u003e\u003c/a\u003eHashMap\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200221162111.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"其他-Map\"\u003e\u003ca href=\"#其他-Map\" class=\"headerlink\" title=\"其他 Map\"\u003e\u003c/a\u003e其他 Map\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200221161913.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://yikun.github.io/2015/04/01/Java-HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0\"\u003eJava-HashMap 工作原理及实现\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/justloveyou_/article/details/71713781\"\u003eMap 综述（二）：彻头彻尾理解 LinkedHashMap\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.cnblogs.com/skywang12345/p/3308931.html\"\u003eJava 集合系列 09 之 Map 架构\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.cnblogs.com/skywang12345/p/3311092.html\"\u003eJava 集合系列 13 之 WeakHashMap 详细介绍(源码解析)和使用示例\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-12-29T13:49:58Z",
  "Author": "钝悟 ◾ Dunwu"
}