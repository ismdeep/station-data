{
  "Source": "dunwu",
  "Title": "《分布式协议与算法实战》笔记",
  "Link": "https://dunwu.github.io/blog/pages/53d3f7/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"《分布式协议与算法实战》笔记\"\u003e\u003ca href=\"#《分布式协议与算法实战》笔记\" class=\"headerlink\" title=\"《分布式协议与算法实战》笔记\"\u003e\u003c/a\u003e《分布式协议与算法实战》笔记\u003c/h1\u003e\u003ch2 id=\"拜占庭将军问题\"\u003e\u003ca href=\"#拜占庭将军问题\" class=\"headerlink\" title=\"拜占庭将军问题\"\u003e\u003c/a\u003e拜占庭将军问题\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e拜占庭将军问题是由\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zh.wikipedia.org/wiki/%E8%8E%B1%E6%96%AF%E5%88%A9%C2%B7%E5%85%B0%E6%B3%A2%E7%89%B9\"\u003e莱斯利·兰波特\u003c/a\u003e在其同名论文中提出的\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zh.wikipedia.org/wiki/%E5%AF%B9%E7%AD%89%E7%BD%91%E7%BB%9C\"\u003e分布式对等网络\u003c/a\u003e通信容错问题。其实是借拜占庭将军的例子，抛出了分布式共识性问题，并探讨和论证了解决的方法。\u003c/p\u003e\n\u003cp\u003e在\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zh.wikipedia.org/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E8%A8%88%E7%AE%97\"\u003e分布式计算\u003c/a\u003e中，不同的节点通过通讯交换信息达成共识而按照同一套协作策略行动。但有时候，系统中的节点可能出错而发送错误的信息，用于传递信息的通讯网络也可能导致信息损坏，使得网络中不同的成员关于全体协作的策略得出不同结论，从而破坏系统一致性。拜占庭将军问题被认为是容错性问题中最难的问题类型之一。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"问题描述\"\u003e\u003ca href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"\u003e\u003c/a\u003e问题描述\u003c/h3\u003e\u003cp\u003e一群拜占庭将军各领一支军队共同围困一座城市。\u003c/p\u003e\n\u003cp\u003e为了简化问题，军队的行动策略只有两种：\u003cstrong\u003e进攻\u003c/strong\u003e（Attack，后面简称 A）或 \u003cstrong\u003e撤退\u003c/strong\u003e（Retreat，后面简称 R）。如果这些军队不是统一进攻或撤退，就可能因兵力不足导致失败。因此，\u003cstrong\u003e将军们通过投票来达成一致策略：同进或同退\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e因为将军们分别在城市的不同方位，所以他们只能\u003cstrong\u003e通过信使互相联系\u003c/strong\u003e。在投票过程中，\u003cstrong\u003e每位将军都将自己的投票信息（A 或 R）通知其他所有将军\u003c/strong\u003e，这样一来每位将军根据自己的投票和其他所有将军送来的信息就可以分析出共同的投票结果而决定行动策略。\u003c/p\u003e\n\u003cp\u003e这个抽象模型的问题在于：\u003cstrong\u003e将军中可能存在叛徒，他们不仅会发出误导性投票，还可能选择性地发送投票信息\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e由于将军之间需要通过信使通讯，叛变将军可能通过伪造信件来以其他将军的身份发送假投票。而即使在保证所有将军忠诚的情况下，也不能排除信使被敌人截杀，甚至被敌人间谍替换等情况。因此很难通过保证人员可靠性及通讯可靠性来解决问题。\u003c/p\u003e\n\u003cp\u003e假使那些忠诚（或是没有出错）的将军仍然能通过多数决定来决定他们的战略，便称达到了拜占庭容错。在此，票都会有一个默认值，若消息（票）没有被收到，则使用此默认值来投票。\u003c/p\u003e\n\u003cp\u003e上述的故事可以映射到分布式系统中，_将军代表分布式系统中的节点；信使代表通信系统；叛徒代表故障或异常_。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20210704104211.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"问题分析\"\u003e\u003ca href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"\u003e\u003c/a\u003e问题分析\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003e兰伯特针对拜占庭将军问题，给出了两个解决方案：口头协议和书面协议。\u003c/p\u003e\n\u003cp\u003e本文介绍一下口头协议。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e在口头协议中，拜占庭将军问题被简化为\u003cstrong\u003e将军 - 副官\u003c/strong\u003e模型，其核心规则如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e忠诚的副官遵守同一命令。\u003c/li\u003e\n\u003cli\u003e若将军是忠诚的，所有忠诚的副官都执行他的命令。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e如果叛徒人数为 m，将军人数不能少于 3m + 1\u003c/strong\u003e ，那么拜占庭将军问题就能解决了。——关于这个公式，可以不必深究，如果对推导过程感兴趣，可以参考论文。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e示例一、叛徒人数为 1，将军人数为 3\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20210704112012.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e这个示例中，将军人数不满足 3m + 1，无法保证忠诚的副官都执行将军的命令。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e示例二、叛徒人数为 1，将军人数为 4\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20210704194815.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e这个示例中，将军人数满足 3m + 1，无论是副官中有叛徒，还是将军是叛徒，都能保证忠诚的副官执行将军的命令。\u003c/p\u003e\n\u003ch2 id=\"CAP-理论\"\u003e\u003ca href=\"#CAP-理论\" class=\"headerlink\" title=\"CAP 理论\"\u003e\u003c/a\u003eCAP 理论\u003c/h2\u003e\u003cp\u003eCAP 是指：在一个分布式系统中， 一致性、可用性和分区容忍性，最多只能同时满足其中两项。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e一致性（C：Consistency）\u003c/strong\u003e：多个数据副本是否能保持一致\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e可用性（A：Availability）\u003c/strong\u003e：分布式系统在面对各种异常时可以提供正常服务的能力\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e分区容忍性（P：Partition Tolerance）\u003c/strong\u003e：分布式系统在遇到任何网络分区故障的时候，仍然需要能对外提供一致性和可用性的服务，除非是整个网络环境都发生了故障\u003c/li\u003e\n\u003c/ul\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20211102191636.png\" style=\"width: 400px\"/\u003e\n\n\u003cp\u003eCAP 权衡\u003c/p\u003e\n\u003cp\u003e在分布式系统中，分区容忍性必不可少，因为需要总是假设网络是不可靠的；CAP 理论实际在是要在可用性和一致性之间做权衡。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCP\u003c/strong\u003e：需要让所有节点下线成为不可用的状态，等待同步完成。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAP\u003c/strong\u003e：在同步过程中允许读取所有节点的数据，但是数据可能不一致。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ACID-理论\"\u003e\u003ca href=\"#ACID-理论\" class=\"headerlink\" title=\"ACID 理论\"\u003e\u003c/a\u003eACID 理论\u003c/h2\u003e\u003cp\u003eACID 特性：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e原子性（Atomicity）\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e事务被视为不可分割的最小单元，事务中的所有操作要么全部提交成功，要么全部失败回滚。\u003c/li\u003e\n\u003cli\u003e回滚可以用日志来实现，日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e一致性（Consistency）\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e数据库在事务执行前后都保持一致性状态。\u003c/li\u003e\n\u003cli\u003e在一致性状态下，所有事务对一个数据的读取结果都是相同的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e隔离性（Isolation）\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e一个事务所做的修改在最终提交以前，对其它事务是不可见的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e持久性（Durability）\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。\u003c/li\u003e\n\u003cli\u003e可以通过数据库备份和恢复来实现，在系统发生奔溃时，使用备份的数据库进行数据恢复。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/database/RDB/%E6%95%B0%E6%8D%AE%E5%BA%93ACID.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e在分布式系统中实现 ACID 比单机复杂的多。\u003c/p\u003e\n\u003cp\u003e在分布式系统中实现 ACID，即实现分布式事务，具体的方案有如下几种：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e两阶段提交（2PC）\u003c/li\u003e\n\u003cli\u003e三阶段提交（3PC）\u003c/li\u003e\n\u003cli\u003e补偿事务（TCC）\u003c/li\u003e\n\u003cli\u003e本地消息表（异步确保）\u003c/li\u003e\n\u003cli\u003eMQ 事务消息\u003c/li\u003e\n\u003cli\u003eSagas 事务模型\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"BASE-理论\"\u003e\u003ca href=\"#BASE-理论\" class=\"headerlink\" title=\"BASE 理论\"\u003e\u003c/a\u003eBASE 理论\u003c/h2\u003e\u003cp\u003eBASE 理论是对 CAP 中一致性和可用性权衡的结果。\u003c/p\u003e\n\u003cp\u003eBASE 是指：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。\u003c/p\u003e\n\u003cp\u003eBASE 特性\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e基本可用（Basically Available）\u003c/strong\u003e：指分布式系统在出现故障的时候，保证核心可用，允许损失部分可用性。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e软状态（Soft State）\u003c/strong\u003e：指允许系统中的数据存在中间状态，并认为该中间状态不会影响系统整体可用性，即允许系统不同节点的数据副本之间进行同步的过程存在延时。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e最终一致性（Eventually Consistent）\u003c/strong\u003e：最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能达到一致的状态。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/architecture/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA-BASE.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"Paxos-算法\"\u003e\u003ca href=\"#Paxos-算法\" class=\"headerlink\" title=\"Paxos 算法\"\u003e\u003c/a\u003ePaxos 算法\u003c/h2\u003e\u003cp\u003ePaxos 是 Leslie Lamport 于 1990 年提出的一种基于消息传递且具有高度容错特性的共识（consensus）算法。\u003c/p\u003e\n\u003cp\u003ePaxos 算法包含 2 个部分：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eBasic Paxos 算法\u003c/strong\u003e：描述的多节点之间如何就某个值达成共识。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMulti Paxos 思想\u003c/strong\u003e：描述的是执行多个 Basic Paxos 实例，就一系列值达成共识。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePaxos 算法解决的问题正是分布式共识性问题，即一个分布式系统中的各个进程如何就某个值（决议）达成一致。\u003c/p\u003e\n\u003cp\u003ePaxos 算法运行在允许宕机故障的异步系统中，不要求可靠的消息传递，可容忍消息丢失、延迟、乱序以及重复。它利用大多数 (Majority) 机制保证了 2N+1 的容错能力，即 2N+1 个节点的系统最多允许 N 个节点同时出现故障。\u003c/p\u003e\n\u003ch3 id=\"Basic-Paxos-算法\"\u003e\u003ca href=\"#Basic-Paxos-算法\" class=\"headerlink\" title=\"Basic Paxos 算法\"\u003e\u003c/a\u003eBasic Paxos 算法\u003c/h3\u003e\u003ch4 id=\"角色\"\u003e\u003ca href=\"#角色\" class=\"headerlink\" title=\"角色\"\u003e\u003c/a\u003e角色\u003c/h4\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20210528150700.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e提议者（Proposer）\u003c/strong\u003e：发出提案（Proposal），用于投票表决。Proposal 信息包括提案编号 (Proposal ID) 和提议的值 (Value)。在绝大多数场景中，集群中收到客户端请求的节点，才是提议者。这样做的好处是，对业务代码没有入侵性，也就是说，我们不需要在业务代码中实现算法逻辑。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e决策者（Acceptor）\u003c/strong\u003e：对每个 Proposal 进行投票，若 Proposal 获得多数 Acceptor 的接受，则称该 Proposal 被批准。一般来说，集群中的所有节点都在扮演决策者的角色，参与共识协商，并接受和存储数据。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e学习者（Learner）\u003c/strong\u003e：不参与决策，从 Proposers/Acceptors 学习、记录最新达成共识的提案（Value）。一般来说，学习者是数据备份节点，比如主从架构中的从节点，被动地接受数据，容灾备份。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在多副本状态机中，每个副本都同时具有 Proposer、Acceptor、Learner 三种角色。\u003c/p\u003e\n\u003cp\u003e这三种角色，在本质上代表的是三种功能：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e提议者代表的是接入和协调功能，收到客户端请求后，发起二阶段提交，进行共识协商；\u003c/li\u003e\n\u003cli\u003e接受者代表投票协商和存储数据，对提议的值进行投票，并接受达成共识的值，存储保存；\u003c/li\u003e\n\u003cli\u003e学习者代表存储数据，不参与共识协商，只接受达成共识的值，存储保存。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"算法\"\u003e\u003ca href=\"#算法\" class=\"headerlink\" title=\"算法\"\u003e\u003c/a\u003e算法\u003c/h4\u003e\u003cp\u003ePaxos 算法通过一个决议分为两个阶段（Learn 阶段之前决议已经形成）：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003ePrepare 阶段\u003c/strong\u003e：Proposer 向 Acceptors 发出 Prepare 请求，Acceptors 针对收到的 Prepare 请求进行 Promise 承诺。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAccept 阶段\u003c/strong\u003e：Proposer 收到多数 Acceptors 承诺的 Promise 后，向 Acceptors 发出 Propose 请求，Acceptors 针对收到的 Propose 请求进行 Accept 处理。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLearn 阶段\u003c/strong\u003e：Proposer 在收到多数 Acceptors 的 Accept 之后，标志着本次 Accept 成功，决议形成，将形成的决议发送给所有 Learners。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003ePaxos 算法流程中的每条消息描述如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003ePrepare\u003c/strong\u003e: Proposer 生成全局唯一且递增的 Proposal ID (可使用时间戳加 Server ID)，向所有 Acceptors 发送 Prepare 请求，这里无需携带提案内容，只携带 Proposal ID 即可。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003ePromise\u003c/strong\u003e: Acceptors 收到 Prepare 请求后，做出“两个承诺，一个应答”。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e两个承诺：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e不再接受 Proposal ID 小于等于当前请求的 Prepare 请求。\u003c/li\u003e\n\u003cli\u003e不再接受 Proposal ID 小于当前请求的 Propose 请求。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e一个应答：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e不违背以前作出的承诺下，回复已经 Accept 过的提案中 Proposal ID 最大的那个提案的 Value 和 Proposal ID，没有则返回空值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003ePropose\u003c/strong\u003e: Proposer 收到多数 Acceptors 的 Promise 应答后，从应答中选择 Proposal ID 最大的提案的 Value，作为本次要发起的提案。如果所有应答的提案 Value 均为空值，则可以自己随意决定提案 Value。然后携带当前 Proposal ID，向所有 Acceptors 发送 Propose 请求。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eAccept\u003c/strong\u003e: Acceptor 收到 Propose 请求后，在不违背自己之前作出的承诺下，接受并持久化当前 Proposal ID 和提案 Value。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eLearn\u003c/strong\u003e: Proposer 收到多数 Acceptors 的 Accept 后，决议形成，将形成的决议发送给所有 Learners。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Multi-Paxos-思想\"\u003e\u003ca href=\"#Multi-Paxos-思想\" class=\"headerlink\" title=\"Multi Paxos 思想\"\u003e\u003c/a\u003eMulti Paxos 思想\u003c/h3\u003e\u003ch4 id=\"Basic-Paxos-的问题\"\u003e\u003ca href=\"#Basic-Paxos-的问题\" class=\"headerlink\" title=\"Basic Paxos 的问题\"\u003e\u003c/a\u003eBasic Paxos 的问题\u003c/h4\u003e\u003cp\u003eBasic Paxos 有以下问题，导致它不能应用于实际：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eBasic Paxos 算法只能对一个值形成决议\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBasic Paxos 算法会消耗大量网络带宽\u003c/strong\u003e。Basic Paxos 中，决议的形成至少需要两次网络通信，在高并发情况下可能需要更多的网络通信，极端情况下甚至可能形成活锁。如果想连续确定多个值，Basic Paxos 搞不定了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"Multi-Paxos-的改进\"\u003e\u003ca href=\"#Multi-Paxos-的改进\" class=\"headerlink\" title=\"Multi Paxos 的改进\"\u003e\u003c/a\u003eMulti Paxos 的改进\u003c/h4\u003e\u003cp\u003eMulti Paxos 正是为解决以上问题而提出。Multi Paxos 基于 Basic Paxos 做了两点改进：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e针对每一个要确定的值，运行一次 Paxos 算法实例（Instance），形成决议。每一个 Paxos 实例使用唯一的 Instance ID 标识。\u003c/li\u003e\n\u003cli\u003e在所有 Proposer 中选举一个 Leader，由 Leader 唯一地提交 Proposal 给 Acceptor 进行表决。这样没有 Proposer 竞争，解决了活锁问题。在系统中仅有一个 Leader 进行 Value 提交的情况下，Prepare 阶段就可以跳过，从而将两阶段变为一阶段，提高效率。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMulti Paxos 首先需要选举 Leader，Leader 的确定也是一次决议的形成，所以可执行一次 Basic Paxos 实例来选举出一个 Leader。选出 Leader 之后只能由 Leader 提交 Proposal，在 Leader 宕机之后服务临时不可用，需要重新选举 Leader 继续服务。在系统中仅有一个 Leader 进行 Proposal 提交的情况下，Prepare 阶段可以跳过。\u003c/p\u003e\n\u003cp\u003eMulti Paxos 通过改变 Prepare 阶段的作用范围至后面 Leader 提交的所有实例，从而使得 Leader 的连续提交只需要执行一次 Prepare 阶段，后续只需要执行 Accept 阶段，将两阶段变为一阶段，提高了效率。为了区分连续提交的多个实例，每个实例使用一个 Instance ID 标识，Instance ID 由 Leader 本地递增生成即可。\u003c/p\u003e\n\u003cp\u003eMulti Paxos 允许有多个自认为是 Leader 的节点并发提交 Proposal 而不影响其安全性，这样的场景即退化为 Basic Paxos。\u003c/p\u003e\n\u003cp\u003eChubby 和 Boxwood 均使用 Multi Paxos。ZooKeeper 使用的 Zab 也是 Multi Paxos 的变形。\u003c/p\u003e\n\u003ch2 id=\"Raft-算法\"\u003e\u003ca href=\"#Raft-算法\" class=\"headerlink\" title=\"Raft 算法\"\u003e\u003c/a\u003eRaft 算法\u003c/h2\u003e\u003ch3 id=\"Raft-基础\"\u003e\u003ca href=\"#Raft-基础\" class=\"headerlink\" title=\"Raft 基础\"\u003e\u003c/a\u003eRaft 基础\u003c/h3\u003e\u003cp\u003eRaft 将一致性问题分解成了三个子问题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e选举 Leader\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e日志复制\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e安全性\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"服务器角色\"\u003e\u003ca href=\"#服务器角色\" class=\"headerlink\" title=\"服务器角色\"\u003e\u003c/a\u003e服务器角色\u003c/h4\u003e\u003cp\u003e在 Raft 中，任何时刻，每个服务器都处于这三个角色之一 ：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eLeader\u003c/code\u003e\u003c/strong\u003e - 领导者，通常一个系统中是\u003cstrong\u003e一主（Leader）多从（Follower）\u003c/strong\u003e。Leader \u003cstrong\u003e负责处理所有的客户端请求\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eFollower\u003c/code\u003e\u003c/strong\u003e - 跟随者，\u003cstrong\u003e不会发送任何请求\u003c/strong\u003e，只是简单的 \u003cstrong\u003e响应来自 Leader 或者 Candidate 的请求\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eCandidate\u003c/code\u003e\u003c/strong\u003e - 参选者，选举新 Leader 时的临时角色。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200131215742.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e:bulb: 图示说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFollower 只响应来自其他服务器的请求。在一定时限内，如果 Follower 接收不到消息，就会转变成 Candidate，并发起选举。\u003c/li\u003e\n\u003cli\u003eCandidate 向 Follower 发起投票请求，如果获得集群中半数以上的选票，就会转变为 Leader。\u003c/li\u003e\n\u003cli\u003e在一个 Term 内，Leader 始终保持不变，直到下线了。Leader 需要周期性向所有 Follower 发送心跳消息，以阻止 Follower 转变为 Candidate。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"任期\"\u003e\u003ca href=\"#任期\" class=\"headerlink\" title=\"任期\"\u003e\u003c/a\u003e任期\u003c/h4\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200131220742.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003eRaft 把时间分割成任意长度的 \u003cstrong\u003e\u003cem\u003e\u003ccode\u003e任期（Term）\u003c/code\u003e\u003c/em\u003e\u003cstrong\u003e，任期用连续的整数标记。每一段任期从一次\u003c/strong\u003e选举\u003c/strong\u003e开始。\u003cstrong\u003eRaft 保证了在一个给定的任期内，最多只有一个领导者\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果选举成功，Leader 会管理整个集群直到任期结束。\u003c/li\u003e\n\u003cli\u003e如果选举失败，那么这个任期就会因为没有 Leader 而结束。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e不同服务器节点观察到的任期转换状态可能不一样\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务器节点可能观察到多次的任期转换。\u003c/li\u003e\n\u003cli\u003e服务器节点也可能观察不到任何一次任期转换。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e任期在 Raft 算法中充当逻辑时钟的作用，使得服务器节点可以查明一些过期的信息（比如过期的 Leader）。每个服务器节点都会存储一个当前任期号，这一编号在整个时期内单调的增长。当服务器之间通信的时候会交换当前任期号。\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果一个服务器的当前任期号比其他人小，那么他会更新自己的编号到较大的编号值。\u003c/li\u003e\n\u003cli\u003e如果一个 Candidate 或者 Leader 发现自己的任期号过期了，那么他会立即恢复成跟随者状态。\u003c/li\u003e\n\u003cli\u003e如果一个节点接收到一个包含过期的任期号的请求，那么他会直接拒绝这个请求。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"RPC\"\u003e\u003ca href=\"#RPC\" class=\"headerlink\" title=\"RPC\"\u003e\u003c/a\u003eRPC\u003c/h4\u003e\u003cp\u003eRaft 算法中服务器节点之间的通信使用 **_\u003ccode\u003e远程过程调用（RPC）\u003c/code\u003e_**。\u003c/p\u003e\n\u003cp\u003e基本的一致性算法只需要两种 RPC：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eRequestVote RPC\u003c/code\u003e\u003c/strong\u003e - 请求投票 RPC，由 Candidate 在选举期间发起。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eAppendEntries RPC\u003c/code\u003e\u003c/strong\u003e - 附加条目 RPC，由 Leader 发起，用来复制日志和提供一种心跳机制。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"选举-Leader\"\u003e\u003ca href=\"#选举-Leader\" class=\"headerlink\" title=\"选举 Leader\"\u003e\u003c/a\u003e选举 Leader\u003c/h3\u003e\u003ch4 id=\"选举规则\"\u003e\u003ca href=\"#选举规则\" class=\"headerlink\" title=\"选举规则\"\u003e\u003c/a\u003e选举规则\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003eRaft 使用一种心跳机制来触发 Leader 选举\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLeader 需要周期性的向所有 Follower 发送心跳消息\u003c/strong\u003e，以此维持自己的权威并阻止新 Leader 的产生。\u003c/p\u003e\n\u003cp\u003e每个 Follower 都设置了一个\u003cstrong\u003e随机的竞选超时时间\u003c/strong\u003e，一般为 \u003ccode\u003e150ms ~ 300ms\u003c/code\u003e，如果在竞选超时时间内没有收到 Leader 的心跳消息，就会认为当前 Term 没有可用的 Leader，并发起选举来选出新的 Leader。开始一次选举过程，Follower 先要增加自己的当前 Term 号，并\u003cstrong\u003e转换为 Candidate\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eCandidate 会并行的\u003cstrong\u003e向集群中的所有服务器节点发送投票请求（\u003ccode\u003eRequestVote RPC\u003c/code\u003e）\u003c/strong\u003e，它会保持当前状态直到以下三件事情之一发生：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e自己成为 Leader\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e其他的服务器成为 Leader\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e没有任何服务器成为 Leader\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"自己成为-Leader\"\u003e\u003ca href=\"#自己成为-Leader\" class=\"headerlink\" title=\"自己成为 Leader\"\u003e\u003c/a\u003e自己成为 Leader\u003c/h5\u003e\u003cul\u003e\n\u003cli\u003e当一个 Candidate 从整个集群\u003cstrong\u003e半数以上\u003c/strong\u003e的服务器节点获得了针对同一个 Term 的选票，那么它就赢得了这次选举并成为 Leader。每个服务器最多会对一个 Term 投出一张选票，按照先来先服务（FIFO）的原则。_要求半数以上选票的规则确保了最多只会有一个 Candidate 赢得此次选举_。\u003c/li\u003e\n\u003cli\u003e一旦 Candidate 赢得选举，就立即成为 Leader。然后它会向其他的服务器发送心跳消息来建立自己的权威并且阻止新的领导人的产生。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"其他的服务器成为-Leader\"\u003e\u003ca href=\"#其他的服务器成为-Leader\" class=\"headerlink\" title=\"其他的服务器成为 Leader\"\u003e\u003c/a\u003e其他的服务器成为 Leader\u003c/h5\u003e\u003cp\u003e等待投票期间，Candidate 可能会从其他的服务器接收到声明它是 Leader 的 \u003ccode\u003eAppendEntries RPC\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果这个 Leader 的 Term 号（包含在此次的 RPC 中）不小于 Candidate 当前的 Term，那么 Candidate 会承认 Leader 合法并回到 Follower 状态。\u003c/li\u003e\n\u003cli\u003e如果此次 RPC 中的 Term 号比自己小，那么 Candidate 就会拒绝这个消息并继续保持 Candidate 状态。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"没有任何服务器成为-Leader\"\u003e\u003ca href=\"#没有任何服务器成为-Leader\" class=\"headerlink\" title=\"没有任何服务器成为 Leader\"\u003e\u003c/a\u003e没有任何服务器成为 Leader\u003c/h5\u003e\u003cp\u003e如果有多个 Follower 同时成为 Candidate，那么选票可能会被瓜分以至于没有 Candidate 可以赢得半数以上的投票。当这种情况发生的时候，每一个 Candidate 都会竞选超时，然后通过增加当前 Term 号来开始一轮新的选举。然而，没有其他机制的话，选票可能会被无限的重复瓜分。\u003c/p\u003e\n\u003cp\u003eRaft 算法使用随机选举超时时间的方法来确保很少会发生选票瓜分的情况，就算发生也能很快的解决。为了阻止选票起初就被瓜分，竞选超时时间是一个\u003cstrong\u003e随机的时间\u003c/strong\u003e，在一个固定的区间（例如 150-300 毫秒）随机选择，这样可以把选举都分散开。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e以至于在大多数情况下，只有一个服务器会超时，然后它赢得选举，成为 Leader，并在其他服务器超时之前发送心跳包。\u003c/li\u003e\n\u003cli\u003e同样的机制也被用在选票瓜分的情况下：每一个 Candidate 在开始一次选举的时候会重置一个随机的选举超时时间，然后在超时时间内等待投票的结果；这样减少了在新的选举中另外的选票瓜分的可能性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr/\u003e\n\u003cp\u003e理解了上面的选举规则后，我们通过动图来加深认识。\u003c/p\u003e\n\u003ch3 id=\"日志复制\"\u003e\u003ca href=\"#日志复制\" class=\"headerlink\" title=\"日志复制\"\u003e\u003c/a\u003e日志复制\u003c/h3\u003e\u003ch4 id=\"日志格式\"\u003e\u003ca href=\"#日志格式\" class=\"headerlink\" title=\"日志格式\"\u003e\u003c/a\u003e日志格式\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e日志由含日志索引（log index）的日志条目（log entry）组成\u003c/strong\u003e。每个日志条目包含它被创建时的 Term 号（下图中方框中的数字），和一个复制状态机需要执行的指令。如果一个日志条目被复制到半数以上的服务器上，就被认为可以提交（Commit）了。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e日志条目中的 Term 号被用来检查是否出现不一致的情况。\u003c/li\u003e\n\u003cli\u003e日志条目中的日志索引（一个整数值）用来表明它在日志中的位置。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://pic3.zhimg.com/80/v2-ee29a89e4eb63468e142bb6103dbe4de_hd.jpg\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003eRaft 日志同步保证如下两点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果不同日志中的两个日志条目有着相同的日志索引和 Term，则\u003cstrong\u003e它们所存储的命令是相同的\u003c/strong\u003e。\u003cul\u003e\n\u003cli\u003e这个特性基于这条原则：Leader 最多在一个 Term 内、在指定的一个日志索引上创建一条日志条目，同时日志条目在日志中的位置也从来不会改变。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e如果不同日志中的两个日志条目有着相同的日志索引和 Term，则\u003cstrong\u003e它们之前的所有条目都是完全一样的\u003c/strong\u003e。\u003cul\u003e\n\u003cli\u003e这个特性由 \u003ccode\u003eAppendEntries RPC\u003c/code\u003e 的一个简单的一致性检查所保证。在发送 \u003ccode\u003eAppendEntries RPC\u003c/code\u003e 时，Leader 会把新日志条目之前的日志条目的日志索引和 Term 号一起发送。如果 Follower 在它的日志中找不到包含相同日志索引和 Term 号的日志条目，它就会拒绝接收新的日志条目。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"日志复制流程\"\u003e\u003ca href=\"#日志复制流程\" class=\"headerlink\" title=\"日志复制流程\"\u003e\u003c/a\u003e日志复制流程\u003c/h4\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200201115848.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eLeader 负责处理所有客户端的请求。\u003c/li\u003e\n\u003cli\u003eLeader 把请求作为日志条目加入到它的日志中，然后并行的向其他服务器发送 \u003ccode\u003eAppendEntries RPC\u003c/code\u003e 请求，要求 Follower 复制日志条目。\u003c/li\u003e\n\u003cli\u003eFollower 复制成功后，返回确认消息。\u003c/li\u003e\n\u003cli\u003e当这个日志条目被半数以上的服务器复制后，Leader 提交这个日志条目到它的复制状态机，并向客户端返回执行结果。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注意：如果 Follower 崩溃或者运行缓慢，再或者网络丢包，Leader 会不断的重复尝试发送 \u003ccode\u003eAppendEntries RPC\u003c/code\u003e 请求 （尽管已经回复了客户端），直到所有的跟随者都最终复制了所有的日志条目。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"日志一致性\"\u003e\u003ca href=\"#日志一致性\" class=\"headerlink\" title=\"日志一致性\"\u003e\u003c/a\u003e日志一致性\u003c/h4\u003e\u003cp\u003e一般情况下，Leader 和 Followers 的日志保持一致，因此日志条目一致性检查通常不会失败。然而，Leader 崩溃可能会导致日志不一致：旧的 Leader 可能没有完全复制完日志中的所有条目。\u003c/p\u003e\n\u003ch5 id=\"Leader-和-Follower-日志不一致的可能\"\u003e\u003ca href=\"#Leader-和-Follower-日志不一致的可能\" class=\"headerlink\" title=\"Leader 和 Follower 日志不一致的可能\"\u003e\u003c/a\u003eLeader 和 Follower 日志不一致的可能\u003c/h5\u003e\u003cp\u003eLeader 和 Follower 可能存在多种日志不一致的可能。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://pic4.zhimg.com/80/v2-d36c587901391cae50788061f568d24f_hd.jpg\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e:bulb: 图示说明：\u003c/p\u003e\n\u003cp\u003e上图阐述了 Leader 和 Follower 可能存在多种日志不一致的可能，每一个方框表示一个日志条目，里面的数字表示任期号 。\u003c/p\u003e\n\u003cp\u003e当一个 Leader 成功当选时，Follower 可能出现以下情况（a-f）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e存在未更新日志条目\u003c/strong\u003e，如（a、b）。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e存在未提交日志条目\u003c/strong\u003e，如（c、d）。\u003c/li\u003e\n\u003cli\u003e或\u003cstrong\u003e两种情况都存在\u003c/strong\u003e，如（e、f）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e_例如，场景 f 可能会这样发生，某服务器在 Term2 的时候是 Leader，已附加了一些日志条目到自己的日志中，但在提交之前就崩溃了；很快这个机器就被重启了，在 Term3 重新被选为 Leader，并且又增加了一些日志条目到自己的日志中；在 Term 2 和 Term 3 的日志被提交之前，这个服务器又宕机了，并且在接下来的几个任期里一直处于宕机状态_。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch5 id=\"Leader-和-Follower-日志一致的保证\"\u003e\u003ca href=\"#Leader-和-Follower-日志一致的保证\" class=\"headerlink\" title=\"Leader 和 Follower 日志一致的保证\"\u003e\u003c/a\u003eLeader 和 Follower 日志一致的保证\u003c/h5\u003e\u003cp\u003eLeader 通过强制 Followers 复制它的日志来处理日志的不一致，\u003cstrong\u003eFollowers 上的不一致的日志会被 Leader 的日志覆盖\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLeader 为了使 Followers 的日志同自己的一致，Leader 需要找到 Followers 同它的日志一致的地方，然后覆盖 Followers 在该位置之后的条目。\u003c/li\u003e\n\u003cli\u003eLeader 会从后往前试，每次日志条目失败后尝试前一个日志条目，直到成功找到每个 Follower 的日志一致位点，然后向后逐条覆盖 Followers 在该位置之后的条目。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"安全性\"\u003e\u003ca href=\"#安全性\" class=\"headerlink\" title=\"安全性\"\u003e\u003c/a\u003e安全性\u003c/h3\u003e\u003cp\u003e前面描述了 Raft 算法是如何选举 Leader 和复制日志的。\u003c/p\u003e\n\u003cp\u003eRaft 还增加了一些限制来完善 Raft 算法，以保证安全性：保证了任意 Leader 对于给定的 Term，都拥有了之前 Term 的所有被提交的日志条目。\u003c/p\u003e\n\u003ch4 id=\"选举限制\"\u003e\u003ca href=\"#选举限制\" class=\"headerlink\" title=\"选举限制\"\u003e\u003c/a\u003e选举限制\u003c/h4\u003e\u003cp\u003e拥有最新的已提交的日志条目的 Follower 才有资格成为 Leader。\u003c/p\u003e\n\u003cp\u003eRaft 使用投票的方式来阻止一个 Candidate 赢得选举除非这个 Candidate 包含了所有已经提交的日志条目。 Candidate 为了赢得选举必须联系集群中的大部分节点，这意味着每一个已经提交的日志条目在这些服务器节点中肯定存在于至少一个节点上。如果 Candidate 的日志至少和大多数的服务器节点一样新（这个新的定义会在下面讨论），那么他一定持有了所有已经提交的日志条目。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRequestVote RPC\u003c/code\u003e 实现了这样的限制：\u003cstrong\u003eRequestVote RPC 中包含了 Candidate 的日志信息， Follower 会拒绝掉那些日志没有自己新的投票请求\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e如何判断哪个日志条目比较新？\u003c/p\u003e\n\u003cp\u003eRaft 通过比较两份日志中最后一条日志条目的日志索引和 Term 来判断哪个日志比较新。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e先判断 Term，哪个数值大即代表哪个日志比较新。\u003c/li\u003e\n\u003cli\u003e如果 Term 相同，再比较 日志索引，哪个数值大即代表哪个日志比较新。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"提交旧任期的日志条目\"\u003e\u003ca href=\"#提交旧任期的日志条目\" class=\"headerlink\" title=\"提交旧任期的日志条目\"\u003e\u003c/a\u003e提交旧任期的日志条目\u003c/h4\u003e\u003cp\u003e一个当前 Term 的日志条目被复制到了半数以上的服务器上，Leader 就认为它是可以被提交的。如果这个 Leader 在提交日志条目前就下线了，后续的 Leader 可能会覆盖掉这个日志条目。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://pic4.zhimg.com/80/v2-12a5ebab63781f9ec49e14e331775537_hd.jpg\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e💡 图示说明：\u003c/p\u003e\n\u003cp\u003e上图解释了为什么 Leader 无法对旧 Term 的日志条目进行提交。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e阶段 (a) ，S1 是 Leader，且 S1 写入日志条目为 (Term 2，日志索引 2），只有 S2 复制了这个日志条目。\u003c/li\u003e\n\u003cli\u003e阶段 (b)，S1 下线，S5 被选举为 Term3 的 Leader。S5 写入日志条目为 (Term 3，日志索引 2）。\u003c/li\u003e\n\u003cli\u003e阶段 (c)，S5 下线，S1 重新上线，并被选举为 Term4 的 Leader。此时，Term 2 的那条日志条目已经被复制到了集群中的大多数节点上，但是还没有被提交。\u003c/li\u003e\n\u003cli\u003e阶段 (d)，S1 再次下线，S5 重新上线，并被重新选举为 Term3 的 Leader。然后 S5 覆盖了日志索引 2 处的日志。\u003c/li\u003e\n\u003cli\u003e阶段 (e)，如果阶段 (d) 还未发生，即 S1 再次下线之前，S1 把自己主导的日志条目复制到了大多数节点上，那么在后续 Term 里面这些新日志条目就会被提交。这样在同一时刻就同时保证了，之前的所有旧日志条目就会被提交。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eRaft 永远不会通过计算副本数目的方式去提交一个之前 Term 内的日志条目\u003c/strong\u003e。只有 Leader 当前 Term 里的日志条目通过计算副本数目可以被提交；一旦当前 Term 的日志条目以这种方式被提交，那么由于日志匹配特性，之前的日志条目也都会被间接的提交。\u003c/p\u003e\n\u003cp\u003e当 Leader 复制之前任期里的日志时，Raft 会为所有日志保留原始的 Term，这在提交规则上产生了额外的复杂性。在其他的一致性算法中，如果一个新的领导人要重新复制之前的任期里的日志时，它必须使用当前新的任期号。Raft 使用的方法更加容易辨别出日志，因为它可以随着时间和日志的变化对日志维护着同一个任期编号。另外，和其他的算法相比，Raft 中的新领导人只需要发送更少日志条目（其他算法中必须在他们被提交之前发送更多的冗余日志条目来为他们重新编号）。\u003c/p\u003e\n\u003ch3 id=\"日志压缩\"\u003e\u003ca href=\"#日志压缩\" class=\"headerlink\" title=\"日志压缩\"\u003e\u003c/a\u003e日志压缩\u003c/h3\u003e\u003cp\u003e在实际的系统中，不能让日志无限膨胀，否则系统重启时需要花很长的时间进行恢复，从而影响可用性。Raft 采用对整个系统进行快照来解决，快照之前的日志都可以丢弃。\u003c/p\u003e\n\u003cp\u003e每个副本独立的对自己的系统状态生成快照，并且只能对已经提交的日志条目生成快照。\u003c/p\u003e\n\u003cp\u003e快照包含以下内容：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e日志元数据。最后一条已提交的日志条目的日志索引和 Term。这两个值在快照之后的第一条日志条目的 \u003ccode\u003eAppendEntries RPC\u003c/code\u003e 的完整性检查的时候会被用上。\u003c/li\u003e\n\u003cli\u003e系统当前状态。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e当 Leader 要发送某个日志条目，落后太多的 Follower 的日志条目会被丢弃，Leader 会将快照发给 Follower。或者新上线一台机器时，也会发送快照给它。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200201220628.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e生成快照的频率要适中\u003c/strong\u003e，频率过高会消耗大量 I/O 带宽；频率过低，一旦需要执行恢复操作，会丢失大量数据，影响可用性。推荐当日志达到某个固定的大小时生成快照。\u003c/p\u003e\n\u003cp\u003e生成一次快照可能耗时过长，影响正常日志同步。可以通过使用 copy-on-write 技术避免快照过程影响正常日志同步。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e说明：本文仅阐述 Raft 算法的核心内容，不包括算法论证、评估等\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"一致性哈希算法\"\u003e\u003ca href=\"#一致性哈希算法\" class=\"headerlink\" title=\"一致性哈希算法\"\u003e\u003c/a\u003e一致性哈希算法\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003e一致性哈希（Consistent Hash）\u003c/code\u003e\u003cstrong\u003e算法的目标是：\u003c/strong\u003e相同的请求尽可能落到同一个服务器上\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e一致性哈希\u003c/strong\u003e 可以很好的解决 \u003cstrong\u003e稳定性问题\u003c/strong\u003e，可以将所有的 \u003cstrong\u003e存储节点\u003c/strong\u003e 排列在 \u003cstrong\u003e首尾相接\u003c/strong\u003e 的 \u003ccode\u003eHash\u003c/code\u003e 环上，每个 \u003ccode\u003ekey\u003c/code\u003e 在计算 \u003ccode\u003eHash\u003c/code\u003e 后会 \u003cstrong\u003e顺时针\u003c/strong\u003e 找到 \u003cstrong\u003e临接\u003c/strong\u003e 的 \u003cstrong\u003e存储节点\u003c/strong\u003e 存放。而当有节点 \u003cstrong\u003e加入\u003c/strong\u003e 或 \u003cstrong\u003e退出\u003c/strong\u003e 时，仅影响该节点在 \u003ccode\u003eHash\u003c/code\u003e 环上 \u003cstrong\u003e顺时针相邻\u003c/strong\u003e 的 \u003cstrong\u003e后续节点\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/architecture/partition-consistent-hash.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e相同的请求\u003c/strong\u003e是指：一般在使用一致性哈希时，需要指定一个 key 用于 hash 计算，可能是：\u003cul\u003e\n\u003cli\u003e用户 ID\u003c/li\u003e\n\u003cli\u003e请求方 IP\u003c/li\u003e\n\u003cli\u003e请求服务名称，参数列表构成的串\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e尽可能\u003c/strong\u003e是指：服务器可能发生上下线，少数服务器的变化不应该影响大多数的请求。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e当某台候选服务器宕机时，原本发往该服务器的请求，会基于虚拟节点，平摊到其它候选服务器，不会引起剧烈变动。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e优点\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e加入\u003c/strong\u003e 和 \u003cstrong\u003e删除\u003c/strong\u003e 节点只影响 \u003cstrong\u003e哈希环\u003c/strong\u003e 中 \u003cstrong\u003e顺时针方向\u003c/strong\u003e 的 \u003cstrong\u003e相邻的节点\u003c/strong\u003e，对其他节点无影响。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e缺点\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e加减节点\u003c/strong\u003e 会造成 \u003cstrong\u003e哈希环\u003c/strong\u003e 中部分数据 \u003cstrong\u003e无法命中\u003c/strong\u003e。当使用 \u003cstrong\u003e少量节点\u003c/strong\u003e 时，\u003cstrong\u003e节点变化\u003c/strong\u003e 将大范围影响 \u003cstrong\u003e哈希环\u003c/strong\u003e 中 \u003cstrong\u003e数据映射\u003c/strong\u003e，不适合 \u003cstrong\u003e少量数据节点\u003c/strong\u003e 的分布式方案。\u003cstrong\u003e普通\u003c/strong\u003e 的 \u003cstrong\u003e一致性哈希分区\u003c/strong\u003e 在增减节点时需要 \u003cstrong\u003e增加一倍\u003c/strong\u003e 或 \u003cstrong\u003e减去一半\u003c/strong\u003e 节点才能保证 \u003cstrong\u003e数据\u003c/strong\u003e 和 \u003cstrong\u003e负载的均衡\u003c/strong\u003e。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e注意\u003c/strong\u003e：因为 \u003cstrong\u003e一致性哈希分区\u003c/strong\u003e 的这些缺点，一些分布式系统采用 \u003cstrong\u003e虚拟槽\u003c/strong\u003e 对 \u003cstrong\u003e一致性哈希\u003c/strong\u003e 进行改进，比如 \u003ccode\u003eDynamo\u003c/code\u003e 系统。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"Gossip-协议\"\u003e\u003ca href=\"#Gossip-协议\" class=\"headerlink\" title=\"Gossip 协议\"\u003e\u003c/a\u003eGossip 协议\u003c/h2\u003e\u003cp\u003eGossip 协议是集群中节点相互通信的内部通信技术。 Gossip 是一种高效、轻量级、可靠的节点间广播协议，用于传播数据。它是去中心化的、“流行病”的、容错的和点对点通信协议。\u003c/p\u003e\n\u003cp\u003eGoosip 协议的信息传播和扩散通常需要由种子节点发起。整个传播过程可能需要一定的时间，由于不能保证某个时刻所有节点都收到消息，但是理论上最终所有节点都会收到消息，因此它是一个\u003cstrong\u003e最终一致性\u003c/strong\u003e协议。\u003c/p\u003e\n\u003ch3 id=\"Gossip-的执行过程\"\u003e\u003ca href=\"#Gossip-的执行过程\" class=\"headerlink\" title=\"Gossip 的执行过程\"\u003e\u003c/a\u003eGossip 的执行过程\u003c/h3\u003e\u003cp\u003eGossip 协议的执行过程：Gossip 过程是由种子节点发起，当一个种子节点有状态需要更新到网络中的其他节点时，它会随机的选择周围几个节点散播消息，收到消息的节点也会重复该过程，直至最终网络中所有的节点都收到了消息。这个过程可能需要一定的时间，由于不能保证某个时刻所有节点都收到消息，但是理论上最终所有节点都会收到消息，因此它是一个最终一致性协议。\u003c/p\u003e\n\u003ch3 id=\"Gossip-类型\"\u003e\u003ca href=\"#Gossip-类型\" class=\"headerlink\" title=\"Gossip 类型\"\u003e\u003c/a\u003eGossip 类型\u003c/h3\u003e\u003cp\u003eGossip 有两种类型：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e**Anti-Entropy(反熵)**：以固定的概率传播所有的数据。Anti-Entropy 是 SI model，节点只有两种状态，Suspective 和 Infective，叫做 simple epidemics。\u003c/li\u003e\n\u003cli\u003e**Rumor-Mongering(谣言传播)**：仅传播新到达的数据。Rumor-Mongering 是 SIR model，节点有三种状态，Suspective，Infective 和 Removed，叫做 complex epidemics。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e熵是物理学上的一个概念，代表杂乱无章，而反熵就是在杂乱无章中寻求一致。本质上，\u003cstrong\u003e反熵是一种通过异步修复实现最终一致性的方法\u003c/strong\u003e。反熵指的是集群中的节点，每隔段时间就随机选择某个其他节点，然后通过互相交换自己的所有数据来消除两者之间的差异，实现数据的最终一致性。由于消息会不断反复的交换，因此消息数量是非常庞大的，无限制的（unbounded），这对一个系统来说是一个巨大的开销。所以，\u003cstrong\u003e反熵不适合动态变化或节点数比较多的分布式环境\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e谣言传播模型指的是当一个节点有了新数据后，这个节点变成活跃状态，并周期性地联系其他节点向其发送新数据，直到所有的节点都存储了该新数据。在谣言传播模型下，消息可以发送得更频繁，因为消息只包含最新 update，体积更小。而且，一个谣言消息在某个时间点之后会被标记为 removed，并且不再被传播，因此，谣言传播模型下，系统有一定的概率会不一致。而由于，谣言传播模型下某个时间点之后消息不再传播，因此消息是有限的，系统开销小。\u003c/p\u003e\n\u003cp\u003e一般来说，为了在通信代价和可靠性之间取得折中，需要将这两种方法结合使用。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eGossip 中的通信模式\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e在 Gossip 协议下，网络中两个节点之间有三种通信方式:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePush: 节点 A 将数据 (key,value,version) 及对应的版本号推送给 B 节点，B 节点更新 A 中比自己新的数据\u003c/li\u003e\n\u003cli\u003ePull：A 仅将数据 key, version 推送给 B，B 将本地比 A 新的数据（Key, value, version）推送给 A，A 更新本地\u003c/li\u003e\n\u003cli\u003ePush/Pull：与 Pull 类似，只是多了一步，A 再将本地比 B 新的数据推送给 B，B 则更新本地\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果把两个节点数据同步一次定义为一个周期，则在一个周期内，Push 需通信 1 次，Pull 需 2 次，Push/Pull 则需 3 次。虽然消息数增加了，但从效果上来讲，Push/Pull 最好，理论上一个周期内可以使两个节点完全一致。直观上，Push/Pull 的收敛速度也是最快的。\u003c/p\u003e\n\u003ch3 id=\"Gossip-的优点\"\u003e\u003ca href=\"#Gossip-的优点\" class=\"headerlink\" title=\"Gossip 的优点\"\u003e\u003c/a\u003eGossip 的优点\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e扩展性\u003c/strong\u003e：网络可以允许节点的任意增加和减少，新增加的节点的状态最终会与其他节点一致。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e容错\u003c/strong\u003e：网络中任何节点的宕机和重启都不会影响 Gossip 消息的传播，Gossip 协议具有天然的分布式系统容错特性。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e去中心化\u003c/strong\u003e：Gossip 协议不要求任何中心节点，所有节点都可以是对等的，任何一个节点无需知道整个网络状况，只要网络是连通的，任意一个节点就可以把消息散播到全网。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e一致性收敛\u003c/strong\u003e：Gossip 协议中的消息会以一传十、十传百一样的指数级速度在网络中快速传播，因此系统状态的不一致可以在很快的时间内收敛到一致。消息传播速度达到了 logN。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e简单\u003c/strong\u003e：Gossip 协议的过程极其简单，实现起来几乎没有太多复杂性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Gossip-的缺陷\"\u003e\u003ca href=\"#Gossip-的缺陷\" class=\"headerlink\" title=\"Gossip 的缺陷\"\u003e\u003c/a\u003eGossip 的缺陷\u003c/h3\u003e\u003cp\u003e分布式网络中，没有一种完美的解决方案，Gossip 协议跟其他协议一样，也有一些不可避免的缺陷，主要是两个：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e消息的延迟\u003c/strong\u003e：由于 Gossip 协议中，节点只会随机向少数几个节点发送消息，消息最终是通过多个轮次的散播而到达全网的，因此使用 Gossip 协议会造成不可避免的消息延迟。不适合用在对实时性要求较高的场景下。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e消息冗余\u003c/strong\u003e：Gossip 协议规定，节点会定期随机选择周围节点发送消息，而收到消息的节点也会重复该步骤，因此就不可避免的存在消息重复发送给同一节点的情况，造成了消息的冗余，同时也增加了收到消息的节点的处理压力。而且，由于是定期发送，因此，即使收到了消息的节点还会反复收到重复消息，加重了消息的冗余。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"QuorumNWR-算法\"\u003e\u003ca href=\"#QuorumNWR-算法\" class=\"headerlink\" title=\"QuorumNWR 算法\"\u003e\u003c/a\u003eQuorumNWR 算法\u003c/h2\u003e\u003cp\u003e通过 Quorum NWR，你可以自定义一致性级别，通过临时调整写入或者查询的方式，当 \u003ccode\u003eW + R \u0026gt; N\u003c/code\u003e 时，就可以实现强一致性了。\u003c/p\u003e\n\u003ch3 id=\"Quorum-NWR-的三要素\"\u003e\u003ca href=\"#Quorum-NWR-的三要素\" class=\"headerlink\" title=\"Quorum NWR 的三要素\"\u003e\u003c/a\u003eQuorum NWR 的三要素\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e**\u003ccode\u003eN\u003c/code\u003e**：表示副本数，又叫做复制因子（Replication Factor）。也就是说，N 表示集群中同一份数据有多少个副本。在实现 Quorum NWR 的时候，你需要实现自定义副本的功能。也就是说，用户可以自定义指定数据的副本数。\u003c/li\u003e\n\u003cli\u003e**\u003ccode\u003eW\u003c/code\u003e**：又称写一致性级别（Write Consistency Level），表示成功完成 W 个副本更新，才完成写操作\u003c/li\u003e\n\u003cli\u003e**\u003ccode\u003eR\u003c/code\u003e**：又称读一致性级别（Read Consistency Level），表示读取一个数据对象时需要读 R 个副本。你可以这么理解，读取指定数据时，要读 R 副本，然后返回 R 个副本中最新的那份数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eN、W、R 值的不同组合，会产生不同的一致性效果：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e当 \u003ccode\u003eW + R \u0026gt; N\u003c/code\u003e 的时候，对于客户端来讲，整个系统能保证强一致性，一定能返回更新后的那份数据。\u003c/li\u003e\n\u003cli\u003e当 \u003ccode\u003eW + R \u0026lt; N\u003c/code\u003e 的时候，对于客户端来讲，整个系统只能保证最终一致性，可能会返回旧数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e需要注意的是，副本数不能超过节点数：多副本的意义在于冗余备份，如果副本数超过节点数，就意味着在一个节点上会存在多个副本，那么冗余备份的意义就不大了。\u003c/p\u003e\n\u003ch2 id=\"PBFT-算法\"\u003e\u003ca href=\"#PBFT-算法\" class=\"headerlink\" title=\"PBFT 算法\"\u003e\u003c/a\u003ePBFT 算法\u003c/h2\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"PoW-算法\"\u003e\u003ca href=\"#PoW-算法\" class=\"headerlink\" title=\"PoW 算法\"\u003e\u003c/a\u003ePoW 算法\u003c/h2\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"ZAB-协议\"\u003e\u003ca href=\"#ZAB-协议\" class=\"headerlink\" title=\"ZAB 协议\"\u003e\u003c/a\u003eZAB 协议\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003eZooKeeper 并没有直接采用 Paxos 算法，而是采用了名为 ZAB 的一致性协议。**\u003cem\u003eZAB 协议不是 Paxos 算法\u003c/em\u003e**，只是比较类似，二者在操作上并不相同。\u003c/p\u003e\n\u003cp\u003eZAB 协议是 Zookeeper 专门设计的一种\u003cstrong\u003e支持崩溃恢复的原子广播协议\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eZAB 协议是 ZooKeeper 的数据一致性和高可用解决方案。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eZAB 协议定义了两个可以\u003cstrong\u003e无限循环\u003c/strong\u003e的流程：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e选举 Leader\u003c/code\u003e\u003c/strong\u003e - 用于故障恢复，从而保证高可用。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e原子广播\u003c/code\u003e\u003c/strong\u003e - 用于主从同步，从而保证数据一致性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"选举-Leader-1\"\u003e\u003ca href=\"#选举-Leader-1\" class=\"headerlink\" title=\"选举 Leader\"\u003e\u003c/a\u003e选举 Leader\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eZooKeeper 的故障恢复\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eZooKeeper 集群采用一主（称为 Leader）多从（称为 Follower）模式，主从节点通过副本机制保证数据一致。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e如果 Follower 节点挂了\u003c/strong\u003e - ZooKeeper 集群中的每个节点都会单独在内存中维护自身的状态，并且各节点之间都保持着通讯，\u003cstrong\u003e只要集群中有半数机器能够正常工作，那么整个集群就可以正常提供服务\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e如果 Leader 节点挂了\u003c/strong\u003e - 如果 Leader 节点挂了，系统就不能正常工作了。此时，需要通过 ZAB 协议的选举 Leader 机制来进行故障恢复。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eZAB 协议的选举 Leader 机制简单来说，就是：基于过半选举机制产生新的 Leader，之后其他机器将从新的 Leader 上同步状态，当有过半机器完成状态同步后，就退出选举 Leader 模式，进入原子广播模式。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"术语\"\u003e\u003ca href=\"#术语\" class=\"headerlink\" title=\"术语\"\u003e\u003c/a\u003e术语\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003emyid\u003c/strong\u003e - 每个 Zookeeper 服务器，都需要在数据文件夹下创建一个名为 myid 的文件，该文件包含整个 Zookeeper 集群唯一的 ID（整数）。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ezxid\u003c/strong\u003e - 类似于 RDBMS 中的事务 ID，用于标识一次更新操作的 Proposal ID。为了保证顺序性，该 zkid 必须单调递增。因此 Zookeeper 使用一个 64 位的数来表示，高 32 位是 Leader 的 epoch，从 1 开始，每次选出新的 Leader，epoch 加一。低 32 位为该 epoch 内的序号，每次 epoch 变化，都将低 32 位的序号重置。这样保证了 zkid 的全局递增性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"服务器状态\"\u003e\u003ca href=\"#服务器状态\" class=\"headerlink\" title=\"服务器状态\"\u003e\u003c/a\u003e服务器状态\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003cem\u003eLOOKING\u003c/em\u003e\u003c/strong\u003e - 不确定 Leader 状态。该状态下的服务器认为当前集群中没有 Leader，会发起 Leader 选举\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003cem\u003eFOLLOWING\u003c/em\u003e\u003c/strong\u003e - 跟随者状态。表明当前服务器角色是 Follower，并且它知道 Leader 是谁\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003cem\u003eLEADING\u003c/em\u003e\u003c/strong\u003e - 领导者状态。表明当前服务器角色是 Leader，它会维护与 Follower 间的心跳\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003cem\u003eOBSERVING\u003c/em\u003e\u003c/strong\u003e - 观察者状态。表明当前服务器角色是 Observer，与 Folower 唯一的不同在于不参与选举，也不参与集群写操作时的投票\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"选票数据结构\"\u003e\u003ca href=\"#选票数据结构\" class=\"headerlink\" title=\"选票数据结构\"\u003e\u003c/a\u003e选票数据结构\u003c/h4\u003e\u003cp\u003e每个服务器在进行领导选举时，会发送如下关键信息\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003cem\u003elogicClock\u003c/em\u003e\u003c/strong\u003e - 每个服务器会维护一个自增的整数，名为 logicClock，它表示这是该服务器发起的第多少轮投票\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003cem\u003estate\u003c/em\u003e\u003c/strong\u003e - 当前服务器的状态\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003cem\u003eself_id\u003c/em\u003e\u003c/strong\u003e - 当前服务器的 myid\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003cem\u003eself_zxid\u003c/em\u003e\u003c/strong\u003e - 当前服务器上所保存的数据的最大 zxid\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003cem\u003evote_id\u003c/em\u003e\u003c/strong\u003e - 被推举的服务器的 myid\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003cem\u003evote_zxid\u003c/em\u003e\u003c/strong\u003e - 被推举的服务器上所保存的数据的最大 zxid\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"投票流程\"\u003e\u003ca href=\"#投票流程\" class=\"headerlink\" title=\"投票流程\"\u003e\u003c/a\u003e投票流程\u003c/h4\u003e\u003cp\u003e（1）\u003cstrong\u003e自增选举轮次\u003c/strong\u003e - Zookeeper 规定所有有效的投票都必须在同一轮次中。每个服务器在开始新一轮投票时，会先对自己维护的 logicClock 进行自增操作。\u003c/p\u003e\n\u003cp\u003e（2）\u003cstrong\u003e初始化选票\u003c/strong\u003e - 每个服务器在广播自己的选票前，会将自己的投票箱清空。该投票箱记录了所收到的选票。例：服务器 2 投票给服务器 3，服务器 3 投票给服务器 1，则服务器 1 的投票箱为(2, 3), (3, 1), (1, 1)。票箱中只会记录每一投票者的最后一票，如投票者更新自己的选票，则其它服务器收到该新选票后会在自己票箱中更新该服务器的选票。\u003c/p\u003e\n\u003cp\u003e（3）\u003cstrong\u003e发送初始化选票\u003c/strong\u003e - 每个服务器最开始都是通过广播把票投给自己。\u003c/p\u003e\n\u003cp\u003e（4）\u003cstrong\u003e接收外部投票\u003c/strong\u003e - 服务器会尝试从其它服务器获取投票，并记入自己的投票箱内。如果无法获取任何外部投票，则会确认自己是否与集群中其它服务器保持着有效连接。如果是，则再次发送自己的投票；如果否，则马上与之建立连接。\u003c/p\u003e\n\u003cp\u003e（5）\u003cstrong\u003e判断选举轮次\u003c/strong\u003e - 收到外部投票后，首先会根据投票信息中所包含的 logicClock 来进行不同处理\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e外部投票的 logicClock 大于自己的 logicClock。说明该服务器的选举轮次落后于其它服务器的选举轮次，立即清空自己的投票箱并将自己的 logicClock 更新为收到的 logicClock，然后再对比自己之前的投票与收到的投票以确定是否需要变更自己的投票，最终再次将自己的投票广播出去。\u003c/li\u003e\n\u003cli\u003e外部投票的 logicClock 小于自己的 logicClock。当前服务器直接忽略该投票，继续处理下一个投票。\u003c/li\u003e\n\u003cli\u003e外部投票的 logickClock 与自己的相等。当时进行选票 PK。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e（6）\u003cstrong\u003e选票 PK\u003c/strong\u003e - 选票 PK 是基于\u003ccode\u003e(self_id, self_zxid)\u003c/code\u003e 与 \u003ccode\u003e(vote_id, vote_zxid)\u003c/code\u003e 的对比\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e外部投票的 logicClock 大于自己的 logicClock，则将自己的 logicClock 及自己的选票的 logicClock 变更为收到的 logicClock\u003c/li\u003e\n\u003cli\u003e若 logicClock 一致，则对比二者的 vote_zxid，若外部投票的 vote_zxid 比较大，则将自己的票中的 vote_zxid 与 vote_myid 更新为收到的票中的 vote_zxid 与 vote_myid 并广播出去，另外将收到的票及自己更新后的票放入自己的票箱。如果票箱内已存在(self_myid, self_zxid)相同的选票，则直接覆盖\u003c/li\u003e\n\u003cli\u003e若二者 vote_zxid 一致，则比较二者的 vote_myid，若外部投票的 vote_myid 比较大，则将自己的票中的 vote_myid 更新为收到的票中的 vote_myid 并广播出去，另外将收到的票及自己更新后的票放入自己的票箱\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e（7）\u003cstrong\u003e统计选票\u003c/strong\u003e - 如果已经确定有过半服务器认可了自己的投票（可能是更新后的投票），则终止投票。否则继续接收其它服务器的投票。\u003c/p\u003e\n\u003cp\u003e（8）\u003cstrong\u003e更新服务器状态\u003c/strong\u003e - 投票终止后，服务器开始更新自身状态。若过半的票投给了自己，则将自己的服务器状态更新为 LEADING，否则将自己的状态更新为 FOLLOWING\u003c/p\u003e\n\u003cp\u003e通过以上流程分析，我们不难看出：要使 Leader 获得多数 Server 的支持，则 \u003cstrong\u003eZooKeeper 集群节点数必须是奇数。且存活的节点数目不得少于 \u003ccode\u003eN + 1\u003c/code\u003e\u003c/strong\u003e 。\u003c/p\u003e\n\u003cp\u003e每个 Server 启动后都会重复以上流程。在恢复模式下，如果是刚从崩溃状态恢复的或者刚启动的 server 还会从磁盘快照中恢复数据和会话信息，zk 会记录事务日志并定期进行快照，方便在恢复时进行状态恢复。\u003c/p\u003e\n\u003ch3 id=\"原子广播（Atomic-Broadcast）\"\u003e\u003ca href=\"#原子广播（Atomic-Broadcast）\" class=\"headerlink\" title=\"原子广播（Atomic Broadcast）\"\u003e\u003c/a\u003e原子广播（Atomic Broadcast）\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eZooKeeper 通过副本机制来实现高可用\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e那么，ZooKeeper 是如何实现副本机制的呢？答案是：ZAB 协议的原子广播。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/distributed/rpc/zookeeper/zookeeper_3.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003eZAB 协议的原子广播要求：\u003c/p\u003e\n\u003cp\u003e**\u003cem\u003e所有的写请求都会被转发给 Leader，Leader 会以原子广播的方式通知 Follow。当半数以上的 Follow 已经更新状态持久化后，Leader 才会提交这个更新，然后客户端才会收到一个更新成功的响应\u003c/em\u003e**。这有些类似数据库中的两阶段提交协议。\u003c/p\u003e\n\u003cp\u003e在整个消息的广播过程中，Leader 服务器会每个事务请求生成对应的 Proposal，并为其分配一个全局唯一的递增的事务 ID(ZXID)，之后再对其进行广播。\u003c/p\u003e\n\u003ch2 id=\"InfluxDB-企业版一致性实现剖析\"\u003e\u003ca href=\"#InfluxDB-企业版一致性实现剖析\" class=\"headerlink\" title=\"InfluxDB 企业版一致性实现剖析\"\u003e\u003c/a\u003eInfluxDB 企业版一致性实现剖析\u003c/h2\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"Hashicorp-Raft\"\u003e\u003ca href=\"#Hashicorp-Raft\" class=\"headerlink\" title=\"Hashicorp Raft\"\u003e\u003c/a\u003eHashicorp Raft\u003c/h2\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"基于-Raft-的分布式-KV-系统开发实战\"\u003e\u003ca href=\"#基于-Raft-的分布式-KV-系统开发实战\" class=\"headerlink\" title=\"基于 Raft 的分布式 KV 系统开发实战\"\u003e\u003c/a\u003e基于 Raft 的分布式 KV 系统开发实战\u003c/h2\u003e\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100046101\"\u003e分布式协议与算法实战\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-06-27T03:49:01Z",
  "Author": "钝悟 ◾ Dunwu"
}