{
  "Source": "dunwu",
  "Title": "Java锁",
  "Link": "https://dunwu.github.io/blog/pages/e2e047/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"深入理解-Java-并发锁\"\u003e\u003ca href=\"#深入理解-Java-并发锁\" class=\"headerlink\" title=\"深入理解 Java 并发锁\"\u003e\u003c/a\u003e深入理解 Java 并发锁\u003c/h1\u003e\u003cblockquote\u003e\n\u003cp\u003e本文先阐述 Java 中各种锁的概念。\u003c/p\u003e\n\u003cp\u003e然后，介绍锁的核心实现 AQS。\u003c/p\u003e\n\u003cp\u003e然后，重点介绍 Lock 和 Condition 两个接口及其实现。并发编程有两个核心问题：同步和互斥。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e互斥\u003c/strong\u003e，即同一时刻只允许一个线程访问共享资源；\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e同步\u003c/strong\u003e，即线程之间如何通信、协作。\u003c/p\u003e\n\u003cp\u003e这两大问题，管程（\u003ccode\u003esychronized\u003c/code\u003e）都是能够解决的。\u003cstrong\u003eJ.U.C 包还提供了 Lock 和 Condition 两个接口来实现管程，其中 Lock 用于解决互斥问题，Condition 用于解决同步问题\u003c/strong\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"并发锁简介\"\u003e\u003ca href=\"#并发锁简介\" class=\"headerlink\" title=\"并发锁简介\"\u003e\u003c/a\u003e并发锁简介\u003c/h2\u003e\u003cp\u003e确保线程安全最常见的做法是利用锁机制（\u003ccode\u003eLock\u003c/code\u003e、\u003ccode\u003esychronized\u003c/code\u003e）来对共享数据做互斥同步，这样在同一个时刻，只有一个线程可以执行某个方法或者某个代码块，那么操作必然是原子性的，线程安全的。\u003c/p\u003e\n\u003cp\u003e在工作、面试中，经常会听到各种五花八门的锁，听的人云里雾里。锁的概念术语很多，它们是针对不同的问题所提出的，通过简单的梳理，也不难理解。\u003c/p\u003e\n\u003ch3 id=\"可重入锁\"\u003e\u003ca href=\"#可重入锁\" class=\"headerlink\" title=\"可重入锁\"\u003e\u003c/a\u003e可重入锁\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e可重入锁，顾名思义，指的是线程可以重复获取同一把锁\u003c/strong\u003e。即同一个线程在外层方法获取了锁，在进入内层方法会自动获取锁。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e可重入锁可以在一定程度上避免死锁\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e 、\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 是可重入锁\u003c/strong\u003e。这点，从其命名也不难看出。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esynchronized\u003c/code\u003e 也是一个可重入锁\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e【示例】\u003ccode\u003esynchronized\u003c/code\u003e 的可重入示例\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003esynchronized\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003esetA\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e Exception{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Thread.sleep(\u003cspan class=\"number\"\u003e1000\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    setB();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003esynchronized\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003esetB\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e Exception{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Thread.sleep(\u003cspan class=\"number\"\u003e1000\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上面的代码就是一个典型场景：如果使用的锁不是可重入锁的话，\u003ccode\u003esetB\u003c/code\u003e 可能不会被当前线程执行，从而造成死锁。\u003c/p\u003e\n\u003cp\u003e【示例】\u003ccode\u003eReentrantLock\u003c/code\u003e 的可重入示例\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eTask\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eLock\u003c/span\u003e \u003cspan class=\"variable\"\u003elock\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReentrantLock\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eTask\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.value = \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003eget\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 获取锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        lock.lock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 保证锁能释放\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            lock.unlock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eaddOne\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 获取锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        lock.lock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 注意：此处已经成功获取锁，进入 get 方法后，又尝试获取锁，\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 如果锁不是可重入的，会导致死锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            value = \u003cspan class=\"number\"\u003e1\u003c/span\u003e + get();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 保证锁能释放\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            lock.unlock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"公平锁与非公平锁\"\u003e\u003ca href=\"#公平锁与非公平锁\" class=\"headerlink\" title=\"公平锁与非公平锁\"\u003e\u003c/a\u003e公平锁与非公平锁\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e公平锁\u003c/strong\u003e - 公平锁是指 \u003cstrong\u003e多线程按照申请锁的顺序来获取锁\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e非公平锁\u003c/strong\u003e - 非公平锁是指 \u003cstrong\u003e多线程不按照申请锁的顺序来获取锁\u003c/strong\u003e 。这就可能会出现优先级反转（后来者居上）或者饥饿现象（某线程总是抢不过别的线程，导致始终无法执行）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e公平锁为了保证线程申请顺序，势必要付出一定的性能代价，因此其吞吐量一般低于非公平锁。\u003c/p\u003e\n\u003cp\u003e公平锁与非公平锁 在 Java 中的典型实现：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esynchronized\u003c/code\u003e 只支持非公平锁\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e 、\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e，默认是非公平锁，但支持公平锁\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"独享锁与共享锁\"\u003e\u003ca href=\"#独享锁与共享锁\" class=\"headerlink\" title=\"独享锁与共享锁\"\u003e\u003c/a\u003e独享锁与共享锁\u003c/h3\u003e\u003cp\u003e独享锁与共享锁是一种广义上的说法，从实际用途上来看，也常被称为互斥锁与读写锁。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e独享锁\u003c/strong\u003e - 独享锁是指 \u003cstrong\u003e锁一次只能被一个线程所持有\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e共享锁\u003c/strong\u003e - 共享锁是指 \u003cstrong\u003e锁可被多个线程所持有\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e独享锁与共享锁在 Java 中的典型实现：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esynchronized\u003c/code\u003e 、\u003ccode\u003eReentrantLock\u003c/code\u003e 只支持独享锁\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 其写锁是独享锁，其读锁是共享锁\u003c/strong\u003e。读锁是共享锁使得并发读是非常高效的，读写，写读 ，写写的过程是互斥的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"悲观锁与乐观锁\"\u003e\u003ca href=\"#悲观锁与乐观锁\" class=\"headerlink\" title=\"悲观锁与乐观锁\"\u003e\u003c/a\u003e悲观锁与乐观锁\u003c/h3\u003e\u003cp\u003e乐观锁与悲观锁不是指具体的什么类型的锁，而是\u003cstrong\u003e处理并发同步的策略\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e悲观锁\u003c/strong\u003e - 悲观锁对于并发采取悲观的态度，认为：\u003cstrong\u003e不加锁的并发操作一定会出问题\u003c/strong\u003e。\u003cstrong\u003e悲观锁适合写操作频繁的场景\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e乐观锁\u003c/strong\u003e - 乐观锁对于并发采取乐观的态度，认为：\u003cstrong\u003e不加锁的并发操作也没什么问题。对于同一个数据的并发操作，是不会发生修改的\u003c/strong\u003e。在更新数据的时候，会采用不断尝试更新的方式更新数据。\u003cstrong\u003e乐观锁适合读多写少的场景\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e悲观锁与乐观锁在 Java 中的典型实现：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e悲观锁在 Java 中的应用就是通过使用 \u003ccode\u003esynchronized\u003c/code\u003e 和 \u003ccode\u003eLock\u003c/code\u003e 显示加锁来进行互斥同步，这是一种阻塞同步。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e乐观锁在 Java 中的应用就是采用 \u003ccode\u003eCAS\u003c/code\u003e 机制（\u003ccode\u003eCAS\u003c/code\u003e 操作通过 \u003ccode\u003eUnsafe\u003c/code\u003e 类提供，但这个类不直接暴露为 API，所以都是间接使用，如各种原子类）。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"偏向锁、轻量级锁、重量级锁\"\u003e\u003ca href=\"#偏向锁、轻量级锁、重量级锁\" class=\"headerlink\" title=\"偏向锁、轻量级锁、重量级锁\"\u003e\u003c/a\u003e偏向锁、轻量级锁、重量级锁\u003c/h3\u003e\u003cp\u003e所谓轻量级锁与重量级锁，指的是锁控制粒度的粗细。显然，控制粒度越细，阻塞开销越小，并发性也就越高。\u003c/p\u003e\n\u003cp\u003eJava 1.6 以前，重量级锁一般指的是 \u003ccode\u003esynchronized\u003c/code\u003e ，而轻量级锁指的是 \u003ccode\u003evolatile\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003eJava 1.6 以后，针对 \u003ccode\u003esynchronized\u003c/code\u003e 做了大量优化，引入 4 种锁状态： 无锁状态、偏向锁、轻量级锁和重量级锁。锁可以单向的从偏向锁升级到轻量级锁，再从轻量级锁升级到重量级锁 。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e偏向锁\u003c/strong\u003e - 偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁。降低获取锁的代价。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e轻量级锁\u003c/strong\u003e - 是指当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，提高性能。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e重量级锁\u003c/strong\u003e - 是指当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下去，当自旋一定次数的时候，还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁。重量级锁会让其他申请的线程进入阻塞，性能降低。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"分段锁\"\u003e\u003ca href=\"#分段锁\" class=\"headerlink\" title=\"分段锁\"\u003e\u003c/a\u003e分段锁\u003c/h3\u003e\u003cp\u003e分段锁其实是一种锁的设计，并不是具体的一种锁。所谓分段锁，就是把锁的对象分成多段，每段独立控制，使得锁粒度更细，减少阻塞开销，从而提高并发性。这其实很好理解，就像高速公路上的收费站，如果只有一个收费口，那所有的车只能排成一条队缴费；如果有多个收费口，就可以分流了。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eHashtable\u003c/code\u003e 使用 \u003ccode\u003esynchronized\u003c/code\u003e 修饰方法来保证线程安全性，那么面对线程的访问，Hashtable 就会锁住整个对象，所有的其它线程只能等待，这种阻塞方式的吞吐量显然很低。\u003c/p\u003e\n\u003cp\u003eJava 1.7 以前的 \u003ccode\u003eConcurrentHashMap\u003c/code\u003e 就是分段锁的典型案例。\u003ccode\u003eConcurrentHashMap\u003c/code\u003e 维护了一个 \u003ccode\u003eSegment\u003c/code\u003e 数组，一般称为分段桶。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e Segment\u0026lt;K,V\u0026gt;[] segments;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e当有线程访问 \u003ccode\u003eConcurrentHashMap\u003c/code\u003e 的数据时，\u003ccode\u003eConcurrentHashMap\u003c/code\u003e 会先根据 hashCode 计算出数据在哪个桶（即哪个 Segment），然后锁住这个 \u003ccode\u003eSegment\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id=\"显示锁和内置锁\"\u003e\u003ca href=\"#显示锁和内置锁\" class=\"headerlink\" title=\"显示锁和内置锁\"\u003e\u003c/a\u003e显示锁和内置锁\u003c/h3\u003e\u003cp\u003eJava 1.5 之前，协调对共享对象的访问时可以使用的机制只有 \u003ccode\u003esynchronized\u003c/code\u003e 和 \u003ccode\u003evolatile\u003c/code\u003e。这两个都属于内置锁，即锁的申请和释放都是由 JVM 所控制。\u003c/p\u003e\n\u003cp\u003eJava 1.5 之后，增加了新的机制：\u003ccode\u003eReentrantLock\u003c/code\u003e、\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e ，这类锁的申请和释放都可以由程序所控制，所以常被称为显示锁。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e💡 \u003ccode\u003esynchronized\u003c/code\u003e 的用法和原理可以参考：\u003ca href=\"https://dunwu.github.io/waterdrop/pages/2c6488/#%E4%BA%8Csynchronized\"\u003eJava 并发基础机制 - synchronized\u003c/a\u003e 。\u003c/p\u003e\n\u003cp\u003e:bell: 注意：如果不需要 \u003ccode\u003eReentrantLock\u003c/code\u003e、\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 所提供的高级同步特性，\u003cstrong\u003e应该优先考虑使用 \u003ccode\u003esynchronized\u003c/code\u003e\u003c/strong\u003e 。理由如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJava 1.6 以后，\u003ccode\u003esynchronized\u003c/code\u003e 做了大量的优化，其性能已经与 \u003ccode\u003eReentrantLock\u003c/code\u003e、\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 基本上持平。\u003c/li\u003e\n\u003cli\u003e从趋势来看，Java 未来更可能会优化 \u003ccode\u003esynchronized\u003c/code\u003e ，而不是 \u003ccode\u003eReentrantLock\u003c/code\u003e、\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e ，因为 \u003ccode\u003esynchronized\u003c/code\u003e 是 JVM 内置属性，它能执行一些优化。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e、\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 申请和释放锁都是由程序控制，如果使用不当，可能造成死锁，这是很危险的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e以下对比一下显示锁和内置锁的差异：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e主动获取锁和释放锁\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esynchronized\u003c/code\u003e 不能主动获取锁和释放锁。获取锁和释放锁都是 JVM 控制的。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e 可以主动获取锁和释放锁。（如果忘记释放锁，就可能产生死锁）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e响应中断\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esynchronized\u003c/code\u003e 不能响应中断。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e 可以响应中断。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e超时机制\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esynchronized\u003c/code\u003e 没有超时机制。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e 有超时机制。\u003ccode\u003eReentrantLock\u003c/code\u003e 可以设置超时时间，超时后自动释放锁，避免一直等待。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e支持公平锁\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esynchronized\u003c/code\u003e 只支持非公平锁。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e 支持非公平锁和公平锁。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e是否支持共享\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e被 \u003ccode\u003esynchronized\u003c/code\u003e 修饰的方法或代码块，只能被一个线程访问（独享）。如果这个线程被阻塞，其他线程也只能等待\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e 可以基于 \u003ccode\u003eCondition\u003c/code\u003e 灵活的控制同步条件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e是否支持读写分离\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esynchronized\u003c/code\u003e 不支持读写锁分离；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 支持读写锁，从而使阻塞读写的操作分开，有效提高并发性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Lock-和-Condition\"\u003e\u003ca href=\"#Lock-和-Condition\" class=\"headerlink\" title=\"Lock 和 Condition\"\u003e\u003c/a\u003eLock 和 Condition\u003c/h2\u003e\u003ch3 id=\"为何引入-Lock-和-Condition\"\u003e\u003ca href=\"#为何引入-Lock-和-Condition\" class=\"headerlink\" title=\"为何引入 Lock 和 Condition\"\u003e\u003c/a\u003e为何引入 Lock 和 Condition\u003c/h3\u003e\u003cp\u003e并发编程领域，有两大核心问题：一个是\u003cstrong\u003e互斥\u003c/strong\u003e，即同一时刻只允许一个线程访问共享资源；另一个是\u003cstrong\u003e同步\u003c/strong\u003e，即线程之间如何通信、协作。这两大问题，管程都是能够解决的。\u003cstrong\u003eJava SDK 并发包通过 Lock 和 Condition 两个接口来实现管程，其中 Lock 用于解决互斥问题，Condition 用于解决同步问题\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003esynchronized 是管程的一种实现，既然如此，何必再提供 Lock 和 Condition。\u003c/p\u003e\n\u003cp\u003eJDK 1.6 以前，synchronized 还没有做优化，性能远低于 Lock。但是，性能不是引入 Lock 的最重要因素。真正关键在于：synchronized 使用不当，可能会出现死锁。\u003c/p\u003e\n\u003cp\u003esynchronized 无法通过\u003cstrong\u003e破坏不可抢占条件\u003c/strong\u003e来避免死锁。原因是 synchronized 申请资源的时候，如果申请不到，线程直接进入阻塞状态了，而线程进入阻塞状态，啥都干不了，也释放不了线程已经占有的资源。\u003c/p\u003e\n\u003cp\u003e与内置锁 \u003ccode\u003esynchronized\u003c/code\u003e 不同的是，**\u003ccode\u003eLock\u003c/code\u003e 提供了一组无条件的、可轮询的、定时的以及可中断的锁操作**，所有获取锁、释放锁的操作都是显式的操作。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e能够响应中断\u003c/strong\u003e。synchronized 的问题是，持有锁 A 后，如果尝试获取锁 B 失败，那么线程就进入阻塞状态，一旦发生死锁，就没有任何机会来唤醒阻塞的线程。但如果阻塞状态的线程能够响应中断信号，也就是说当我们给阻塞的线程发送中断信号的时候，能够唤醒它，那它就有机会释放曾经持有的锁 A。这样就破坏了不可抢占条件了。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e支持超时\u003c/strong\u003e。如果线程在一段时间之内没有获取到锁，不是进入阻塞状态，而是返回一个错误，那这个线程也有机会释放曾经持有的锁。这样也能破坏不可抢占条件。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e非阻塞地获取锁\u003c/strong\u003e。如果尝试获取锁失败，并不进入阻塞状态，而是直接返回，那这个线程也有机会释放曾经持有的锁。这样也能破坏不可抢占条件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Lock-接口\"\u003e\u003ca href=\"#Lock-接口\" class=\"headerlink\" title=\"Lock 接口\"\u003e\u003c/a\u003eLock 接口\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eLock\u003c/code\u003e 的接口定义如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"title class_\"\u003eLock\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003elock\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003elockInterruptibly\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"title function_\"\u003etryLock\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"title function_\"\u003etryLock\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003elong\u003c/span\u003e time, TimeUnit unit)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eunlock\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Condition \u003cspan class=\"title function_\"\u003enewCondition\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003elock()\u003c/code\u003e - 获取锁。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eunlock()\u003c/code\u003e - 释放锁。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etryLock()\u003c/code\u003e - 尝试获取锁，仅在调用时锁未被另一个线程持有的情况下，才获取该锁。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etryLock(long time, TimeUnit unit)\u003c/code\u003e - 和 \u003ccode\u003etryLock()\u003c/code\u003e 类似，区别仅在于限定时间，如果限定时间内未获取到锁，视为失败。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elockInterruptibly()\u003c/code\u003e - 锁未被另一个线程持有，且线程没有被中断的情况下，才能获取锁。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enewCondition()\u003c/code\u003e - 返回一个绑定到 \u003ccode\u003eLock\u003c/code\u003e 对象上的 \u003ccode\u003eCondition\u003c/code\u003e 实例。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Condition\"\u003e\u003ca href=\"#Condition\" class=\"headerlink\" title=\"Condition\"\u003e\u003c/a\u003eCondition\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eCondition 实现了管程模型里面的条件变量\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e前文中提过 \u003ccode\u003eLock\u003c/code\u003e 接口中 有一个 \u003ccode\u003enewCondition()\u003c/code\u003e 方法用于返回一个绑定到 \u003ccode\u003eLock\u003c/code\u003e 对象上的 \u003ccode\u003eCondition\u003c/code\u003e 实例。\u003ccode\u003eCondition\u003c/code\u003e 是什么？有什么作用？本节将一一讲解。\u003c/p\u003e\n\u003cp\u003e在单线程中，一段代码的执行可能依赖于某个状态，如果不满足状态条件，代码就不会被执行（典型的场景，如：\u003ccode\u003eif ... else ...\u003c/code\u003e）。在并发环境中，当一个线程判断某个状态条件时，其状态可能是由于其他线程的操作而改变，这时就需要有一定的协调机制来确保在同一时刻，数据只能被一个线程锁修改，且修改的数据状态被所有线程所感知。\u003c/p\u003e\n\u003cp\u003eJava 1.5 之前，主要是利用 \u003ccode\u003eObject\u003c/code\u003e 类中的 \u003ccode\u003ewait\u003c/code\u003e、\u003ccode\u003enotify\u003c/code\u003e、\u003ccode\u003enotifyAll\u003c/code\u003e 配合 \u003ccode\u003esynchronized\u003c/code\u003e 来进行线程间通信（如果不了解其特性，可以参考：\u003ca href=\"https://dunwu.github.io/javacore/#/concurrent/java-thread?id=waitnotifynotifyall\"\u003eJava 线程基础 - wait/notify/notifyAll\u003c/a\u003e）。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ewait\u003c/code\u003e、\u003ccode\u003enotify\u003c/code\u003e、\u003ccode\u003enotifyAll\u003c/code\u003e 需要配合 \u003ccode\u003esynchronized\u003c/code\u003e 使用，不适用于 \u003ccode\u003eLock\u003c/code\u003e。而使用 \u003ccode\u003eLock\u003c/code\u003e 的线程，彼此间通信应该使用 \u003ccode\u003eCondition\u003c/code\u003e 。这可以理解为，什么样的锁配什么样的钥匙。\u003cstrong\u003e内置锁（\u003ccode\u003esynchronized\u003c/code\u003e）配合内置条件队列（\u003ccode\u003ewait\u003c/code\u003e、\u003ccode\u003enotify\u003c/code\u003e、\u003ccode\u003enotifyAll\u003c/code\u003e ），显式锁（\u003ccode\u003eLock\u003c/code\u003e）配合显式条件队列（\u003ccode\u003eCondition\u003c/code\u003e ）\u003c/strong\u003e。\u003c/p\u003e\n\u003ch4 id=\"Condition-的特性\"\u003e\u003ca href=\"#Condition-的特性\" class=\"headerlink\" title=\"Condition 的特性\"\u003e\u003c/a\u003eCondition 的特性\u003c/h4\u003e\u003cp\u003e\u003ccode\u003eCondition\u003c/code\u003e 接口定义如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"title class_\"\u003eCondition\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eawait\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eawaitUninterruptibly\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003elong\u003c/span\u003e \u003cspan class=\"title function_\"\u003eawaitNanos\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003elong\u003c/span\u003e nanosTimeout)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"title function_\"\u003eawait\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003elong\u003c/span\u003e time, TimeUnit unit)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"title function_\"\u003eawaitUntil\u003c/span\u003e\u003cspan class=\"params\"\u003e(Date deadline)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003esignal\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003esignalAll\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e其中，\u003ccode\u003eawait\u003c/code\u003e、\u003ccode\u003esignal\u003c/code\u003e、\u003ccode\u003esignalAll\u003c/code\u003e 与 \u003ccode\u003ewait\u003c/code\u003e、\u003ccode\u003enotify\u003c/code\u003e、\u003ccode\u003enotifyAll\u003c/code\u003e 相对应，功能也相似。除此以外，\u003ccode\u003eCondition\u003c/code\u003e 相比内置条件队列（ \u003ccode\u003ewait\u003c/code\u003e、\u003ccode\u003enotify\u003c/code\u003e、\u003ccode\u003enotifyAll\u003c/code\u003e ），提供了更为丰富的功能：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e每个锁（\u003ccode\u003eLock\u003c/code\u003e）上可以存在多个 \u003ccode\u003eCondition\u003c/code\u003e，这意味着锁的状态条件可以有多个。\u003c/li\u003e\n\u003cli\u003e支持公平的或非公平的队列操作。\u003c/li\u003e\n\u003cli\u003e支持可中断的条件等待，相关方法：\u003ccode\u003eawaitUninterruptibly()\u003c/code\u003e 。\u003c/li\u003e\n\u003cli\u003e支持可定时的等待，相关方法：\u003ccode\u003eawaitNanos(long)\u003c/code\u003e 、\u003ccode\u003eawait(long, TimeUnit)\u003c/code\u003e、\u003ccode\u003eawaitUntil(Date)\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"Condition-的用法\"\u003e\u003ca href=\"#Condition-的用法\" class=\"headerlink\" title=\"Condition 的用法\"\u003e\u003c/a\u003eCondition 的用法\u003c/h4\u003e\u003cp\u003e这里以 \u003ccode\u003eCondition\u003c/code\u003e 来实现一个消费者、生产者模式。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e:bell: 注意：事实上，解决此类问题使用 \u003ccode\u003eCountDownLatch\u003c/code\u003e、\u003ccode\u003eSemaphore\u003c/code\u003e 等工具更为便捷、安全。想了解详情，可以参考 \u003ca href=\"https://dunwu.github.io/javacore/#/concurrent/java-concurrent-tools\"\u003eJava 并发工具类\u003c/a\u003e 。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e产品类\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMessage\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eLock\u003c/span\u003e \u003cspan class=\"variable\"\u003elock\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReentrantLock\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eCondition\u003c/span\u003e \u003cspan class=\"variable\"\u003eproducedMsg\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e lock.newCondition();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eCondition\u003c/span\u003e \u003cspan class=\"variable\"\u003econsumedMsg\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e lock.newCondition();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e String message;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e state;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e end;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003econsume\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e//lock\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        lock.lock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// no new message wait for new message\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (!state) { producedMsg.await(); }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;consume message : \u0026#34;\u003c/span\u003e + message);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            state = \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// message consumed, notify waiting thread\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            consumedMsg.signal();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (InterruptedException ie) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;Thread interrupted - viewMessage\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            lock.unlock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eproduce\u003c/span\u003e\u003cspan class=\"params\"\u003e(String message)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        lock.lock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// last message not consumed, wait for it be consumed\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (state) { consumedMsg.await(); }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;produce msg: \u0026#34;\u003c/span\u003e + message);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.message = message;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            state = \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// new message added, notify waiting thread\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            producedMsg.signal();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (InterruptedException ie) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;Thread interrupted - publishMessage\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            lock.unlock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"title function_\"\u003eisEnd\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e end;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003esetEnd\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eboolean\u003c/span\u003e end)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.end = end;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e消费者\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMessageConsumer\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRunnable\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e Message message;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eMessageConsumer\u003c/span\u003e\u003cspan class=\"params\"\u003e(Message msg)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        message = msg;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (!message.isEnd()) { message.consume(); }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e生产者\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMessageProducer\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRunnable\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e Message message;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eMessageProducer\u003c/span\u003e\u003cspan class=\"params\"\u003e(Message msg)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        message = msg;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        produce();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eproduce\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        List\u0026lt;String\u0026gt; msgs = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eArrayList\u003c/span\u003e\u0026lt;\u0026gt;();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        msgs.add(\u003cspan class=\"string\"\u003e\u0026#34;Begin\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        msgs.add(\u003cspan class=\"string\"\u003e\u0026#34;Msg1\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        msgs.add(\u003cspan class=\"string\"\u003e\u0026#34;Msg2\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (String msg : msgs) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            message.produce(msg);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                Thread.sleep(\u003cspan class=\"number\"\u003e100\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (InterruptedException e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                e.printStackTrace();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        message.produce(\u003cspan class=\"string\"\u003e\u0026#34;End\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        message.setEnd(\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e测试\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eLockConditionDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eMessage\u003c/span\u003e \u003cspan class=\"variable\"\u003emsg\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMessage\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eThread\u003c/span\u003e \u003cspan class=\"variable\"\u003eproducer\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eThread\u003c/span\u003e(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMessageProducer\u003c/span\u003e(msg));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eThread\u003c/span\u003e \u003cspan class=\"variable\"\u003econsumer\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eThread\u003c/span\u003e(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMessageConsumer\u003c/span\u003e(msg));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        producer.start();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        consumer.start();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"ReentrantLock\"\u003e\u003ca href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"\u003e\u003c/a\u003eReentrantLock\u003c/h2\u003e\u003cp\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e 类是 \u003ccode\u003eLock\u003c/code\u003e 接口的具体实现，与内置锁 \u003ccode\u003esynchronized\u003c/code\u003e 相同的是，它是一个\u003cstrong\u003e可重入锁\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"ReentrantLock-的特性\"\u003e\u003ca href=\"#ReentrantLock-的特性\" class=\"headerlink\" title=\"ReentrantLock 的特性\"\u003e\u003c/a\u003eReentrantLock 的特性\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e 的特性如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e 提供了与 \u003ccode\u003esynchronized\u003c/code\u003e 相同的互斥性、内存可见性和可重入性\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e \u003cstrong\u003e支持公平锁和非公平锁\u003c/strong\u003e（默认）两种模式。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e 实现了 \u003ccode\u003eLock\u003c/code\u003e 接口，支持了 \u003ccode\u003esynchronized\u003c/code\u003e 所不具备的\u003cstrong\u003e灵活性\u003c/strong\u003e。\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esynchronized\u003c/code\u003e 无法中断一个正在等待获取锁的线程\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esynchronized\u003c/code\u003e 无法在请求获取一个锁时无休止地等待\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"ReentrantLock-的用法\"\u003e\u003ca href=\"#ReentrantLock-的用法\" class=\"headerlink\" title=\"ReentrantLock 的用法\"\u003e\u003c/a\u003eReentrantLock 的用法\u003c/h3\u003e\u003cp\u003e前文了解了 \u003ccode\u003eReentrantLock\u003c/code\u003e 的特性，接下来，我们要讲述其具体用法。\u003c/p\u003e\n\u003ch4 id=\"ReentrantLock-的构造方法\"\u003e\u003ca href=\"#ReentrantLock-的构造方法\" class=\"headerlink\" title=\"ReentrantLock 的构造方法\"\u003e\u003c/a\u003eReentrantLock 的构造方法\u003c/h4\u003e\u003cp\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e 有两个构造方法：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eReentrantLock\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eReentrantLock\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eboolean\u003c/span\u003e fair)\u003c/span\u003e {}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eReentrantLock()\u003c/code\u003e - 默认构造方法会初始化一个\u003cstrong\u003e非公平锁（NonfairSync）\u003c/strong\u003e；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReentrantLock(boolean)\u003c/code\u003e - \u003ccode\u003enew ReentrantLock(true)\u003c/code\u003e 会初始化一个\u003cstrong\u003e公平锁（FairSync）\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"lock-和-unlock-方法\"\u003e\u003ca href=\"#lock-和-unlock-方法\" class=\"headerlink\" title=\"lock 和 unlock 方法\"\u003e\u003c/a\u003elock 和 unlock 方法\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003elock()\u003c/code\u003e - \u003cstrong\u003e无条件获取锁\u003c/strong\u003e。如果当前线程无法获取锁，则当前线程进入休眠状态不可用，直至当前线程获取到锁。如果该锁没有被另一个线程持有，则获取该锁并立即返回，将锁的持有计数设置为 1。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eunlock()\u003c/code\u003e - 用于\u003cstrong\u003e释放锁\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e:bell: 注意：请务必牢记，获取锁操作 \u003cstrong\u003e\u003ccode\u003elock()\u003c/code\u003e 必须在 \u003ccode\u003etry catch\u003c/code\u003e 块中进行，并且将释放锁操作 \u003ccode\u003eunlock()\u003c/code\u003e 放在 \u003ccode\u003efinally\u003c/code\u003e 块中进行，以保证锁一定被被释放，防止死锁的发生\u003c/strong\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e示例：\u003ccode\u003eReentrantLock\u003c/code\u003e 的基本操作\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e60\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e61\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e62\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e63\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e65\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e66\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e67\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReentrantLockDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eTask\u003c/span\u003e \u003cspan class=\"variable\"\u003etask\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eTask\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eMyThread\u003c/span\u003e \u003cspan class=\"variable\"\u003etA\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMyThread\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;Thread-A\u0026#34;\u003c/span\u003e, task);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eMyThread\u003c/span\u003e \u003cspan class=\"variable\"\u003etB\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMyThread\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;Thread-B\u0026#34;\u003c/span\u003e, task);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eMyThread\u003c/span\u003e \u003cspan class=\"variable\"\u003etC\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMyThread\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;Thread-C\u0026#34;\u003c/span\u003e, task);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        tA.start();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        tB.start();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        tC.start();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMyThread\u003c/span\u003e \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eThread\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e Task task;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eMyThread\u003c/span\u003e\u003cspan class=\"params\"\u003e(String name, Task task)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"built_in\"\u003esuper\u003c/span\u003e(name);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.task = task;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            task.execute();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eTask\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"type\"\u003eReentrantLock\u003c/span\u003e \u003cspan class=\"variable\"\u003elock\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReentrantLock\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eexecute\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            lock.lock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e3\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    System.out.println(lock.toString());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"comment\"\u003e// 查询当前线程 hold 住此锁的次数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;\\t holdCount: \u0026#34;\u003c/span\u003e + lock.getHoldCount());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"comment\"\u003e// 查询正等待获取此锁的线程数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;\\t queuedLength: \u0026#34;\u003c/span\u003e + lock.getQueueLength());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"comment\"\u003e// 是否为公平锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;\\t isFair: \u0026#34;\u003c/span\u003e + lock.isFair());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"comment\"\u003e// 是否被锁住\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;\\t isLocked: \u0026#34;\u003c/span\u003e + lock.isLocked());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"comment\"\u003e// 是否被当前线程持有锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;\\t isHeldByCurrentThread: \u0026#34;\u003c/span\u003e + lock.isHeldByCurrentThread());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        Thread.sleep(\u003cspan class=\"number\"\u003e500\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (InterruptedException e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        e.printStackTrace();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            } \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                lock.unlock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e输出结果：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ejava.util.concurrent.locks.ReentrantLock@64fcd88a[Locked by thread Thread-A]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t holdCount: \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t queuedLength: \u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t isFair: \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t isLocked: \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t isHeldByCurrentThread: \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ejava.util.concurrent.locks.ReentrantLock@64fcd88a[Locked by thread Thread-C]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t holdCount: \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t queuedLength: \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t isFair: \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t isLocked: \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t isHeldByCurrentThread: \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"tryLock-方法\"\u003e\u003ca href=\"#tryLock-方法\" class=\"headerlink\" title=\"tryLock 方法\"\u003e\u003c/a\u003etryLock 方法\u003c/h4\u003e\u003cp\u003e与无条件获取锁相比，tryLock 有更完善的容错机制。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etryLock()\u003c/code\u003e - \u003cstrong\u003e可轮询获取锁\u003c/strong\u003e。如果成功，则返回 true；如果失败，则返回 false。也就是说，这个方法\u003cstrong\u003e无论成败都会立即返回\u003c/strong\u003e，获取不到锁（锁已被其他线程获取）时不会一直等待。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etryLock(long, TimeUnit)\u003c/code\u003e - \u003cstrong\u003e可定时获取锁\u003c/strong\u003e。和 \u003ccode\u003etryLock()\u003c/code\u003e 类似，区别仅在于这个方法在\u003cstrong\u003e获取不到锁时会等待一定的时间\u003c/strong\u003e，在时间期限之内如果还获取不到锁，就返回 false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回 true。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e示例：\u003ccode\u003eReentrantLock\u003c/code\u003e 的 \u003ccode\u003etryLock()\u003c/code\u003e 操作\u003c/p\u003e\n\u003cp\u003e修改上个示例中的 \u003ccode\u003eexecute()\u003c/code\u003e 方法\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eexecute\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (lock.tryLock()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e3\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e               \u003cspan class=\"comment\"\u003e// 略...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            lock.unlock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(Thread.currentThread().getName() + \u003cspan class=\"string\"\u003e\u0026#34; 获取锁失败\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e示例：\u003ccode\u003eReentrantLock\u003c/code\u003e 的 \u003ccode\u003etryLock(long, TimeUnit)\u003c/code\u003e 操作\u003c/p\u003e\n\u003cp\u003e修改上个示例中的 \u003ccode\u003eexecute()\u003c/code\u003e 方法\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eexecute\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (lock.tryLock(\u003cspan class=\"number\"\u003e2\u003c/span\u003e, TimeUnit.SECONDS)) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e3\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"comment\"\u003e// 略...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            } \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                lock.unlock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(Thread.currentThread().getName() + \u003cspan class=\"string\"\u003e\u0026#34; 获取锁失败\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (InterruptedException e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(Thread.currentThread().getName() + \u003cspan class=\"string\"\u003e\u0026#34; 获取锁超时\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        e.printStackTrace();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"lockInterruptibly-方法\"\u003e\u003ca href=\"#lockInterruptibly-方法\" class=\"headerlink\" title=\"lockInterruptibly 方法\"\u003e\u003c/a\u003elockInterruptibly 方法\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003elockInterruptibly()\u003c/code\u003e - \u003cstrong\u003e可中断获取锁\u003c/strong\u003e。可中断获取锁可以在获得锁的同时保持对中断的响应。可中断获取锁比其它获取锁的方式稍微复杂一些，需要两个 \u003ccode\u003etry-catch\u003c/code\u003e 块（如果在获取锁的操作中抛出了 \u003ccode\u003eInterruptedException\u003c/code\u003e ，那么可以使用标准的 \u003ccode\u003etry-finally\u003c/code\u003e 加锁模式）。\u003cul\u003e\n\u003cli\u003e举例来说：假设有两个线程同时通过 \u003ccode\u003elock.lockInterruptibly()\u003c/code\u003e 获取某个锁时，若线程 A 获取到了锁，则线程 B 只能等待。若此时对线程 B 调用 \u003ccode\u003ethreadB.interrupt()\u003c/code\u003e 方法能够中断线程 B 的等待过程。由于 \u003ccode\u003elockInterruptibly()\u003c/code\u003e 的声明中抛出了异常，所以 \u003ccode\u003elock.lockInterruptibly()\u003c/code\u003e 必须放在 \u003ccode\u003etry\u003c/code\u003e 块中或者在调用 \u003ccode\u003elockInterruptibly()\u003c/code\u003e 的方法外声明抛出 \u003ccode\u003eInterruptedException\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e:bell: 注意：当一个线程获取了锁之后，是不会被 \u003ccode\u003einterrupt()\u003c/code\u003e 方法中断的。单独调用 \u003ccode\u003einterrupt()\u003c/code\u003e 方法不能中断正在运行状态中的线程，只能中断阻塞状态中的线程。因此当通过 \u003ccode\u003elockInterruptibly()\u003c/code\u003e 方法获取某个锁时，如果未获取到锁，只有在等待的状态下，才可以响应中断。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e示例：\u003ccode\u003eReentrantLock\u003c/code\u003e 的 \u003ccode\u003elockInterruptibly()\u003c/code\u003e 操作\u003c/p\u003e\n\u003cp\u003e修改上个示例中的 \u003ccode\u003eexecute()\u003c/code\u003e 方法\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eexecute\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        lock.lockInterruptibly();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e3\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 略...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (InterruptedException e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(Thread.currentThread().getName() + \u003cspan class=\"string\"\u003e\u0026#34;被中断\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        e.printStackTrace();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        lock.unlock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"newCondition-方法\"\u003e\u003ca href=\"#newCondition-方法\" class=\"headerlink\" title=\"newCondition 方法\"\u003e\u003c/a\u003enewCondition 方法\u003c/h4\u003e\u003cp\u003e\u003ccode\u003enewCondition()\u003c/code\u003e - 返回一个绑定到 \u003ccode\u003eLock\u003c/code\u003e 对象上的 \u003ccode\u003eCondition\u003c/code\u003e 实例。\u003ccode\u003eCondition\u003c/code\u003e 的特性和具体方法请阅读下文 \u003ca href=\"#%E4%BA%94condition\"\u003e\u003ccode\u003eCondition\u003c/code\u003e\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 id=\"ReentrantLock-的原理\"\u003e\u003ca href=\"#ReentrantLock-的原理\" class=\"headerlink\" title=\"ReentrantLock 的原理\"\u003e\u003c/a\u003eReentrantLock 的原理\u003c/h3\u003e\u003ch4 id=\"ReentrantLock-的可见性\"\u003e\u003ca href=\"#ReentrantLock-的可见性\" class=\"headerlink\" title=\"ReentrantLock 的可见性\"\u003e\u003c/a\u003eReentrantLock 的可见性\u003c/h4\u003e\u003cfigure class=\"highlight csharp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eX\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e final Lock rtl =\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e ReentrantLock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003eint\u003c/span\u003e \u003cspan class=\"keyword\"\u003evalue\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003eaddOne\u003c/span\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 获取锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    rtl.\u003cspan class=\"keyword\"\u003elock\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003evalue\u003c/span\u003e+=\u003cspan class=\"number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"comment\"\u003e// 保证锁能释放\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      rtl.unlock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eReentrantLock，内部持有一个 volatile 的成员变量 state，获取锁的时候，会读写 state 的值；解锁的时候，也会读写 state 的值（简化后的代码如下面所示）。也就是说，在执行 value+=1 之前，程序先读写了一次 volatile 变量 state，在执行 value+=1 之后，又读写了一次 volatile 变量 state。根据相关的 Happens-Before 规则：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e顺序性规则\u003c/strong\u003e：对于线程 T1，value+=1 Happens-Before 释放锁的操作 unlock()；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evolatile 变量规则\u003c/strong\u003e：由于 state = 1 会先读取 state，所以线程 T1 的 unlock() 操作 Happens-Before 线程 T2 的 lock() 操作；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e传递性规则\u003c/strong\u003e：线程 T1 的 value+=1 Happens-Before 线程 T2 的 lock() 操作。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"ReentrantLock-的数据结构\"\u003e\u003ca href=\"#ReentrantLock-的数据结构\" class=\"headerlink\" title=\"ReentrantLock 的数据结构\"\u003e\u003c/a\u003eReentrantLock 的数据结构\u003c/h4\u003e\u003cp\u003e阅读 \u003ccode\u003eReentrantLock\u003c/code\u003e 的源码，可以发现它有一个核心字段：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e Sync sync;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esync\u003c/code\u003e - 内部抽象类 \u003ccode\u003eReentrantLock.Sync\u003c/code\u003e 对象，\u003ccode\u003eSync\u003c/code\u003e 继承自 AQS。它有两个子类：\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReentrantLock.FairSync\u003c/code\u003e - 公平锁。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReentrantLock.NonfairSync\u003c/code\u003e - 非公平锁。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e查看源码可以发现，\u003ccode\u003eReentrantLock\u003c/code\u003e 实现 \u003ccode\u003eLock\u003c/code\u003e 接口其实是调用 \u003ccode\u003eReentrantLock.FairSync\u003c/code\u003e 或 \u003ccode\u003eReentrantLock.NonfairSync\u003c/code\u003e 中各自的实现，这里不一一列举。\u003c/p\u003e\n\u003ch4 id=\"ReentrantLock-的获取锁和释放锁\"\u003e\u003ca href=\"#ReentrantLock-的获取锁和释放锁\" class=\"headerlink\" title=\"ReentrantLock 的获取锁和释放锁\"\u003e\u003c/a\u003eReentrantLock 的获取锁和释放锁\u003c/h4\u003e\u003cp\u003eReentrantLock 获取锁和释放锁的接口，从表象看，是调用 \u003ccode\u003eReentrantLock.FairSync\u003c/code\u003e 或 \u003ccode\u003eReentrantLock.NonfairSync\u003c/code\u003e 中各自的实现；从本质上看，是基于 AQS 的实现。\u003c/p\u003e\n\u003cp\u003e仔细阅读源码很容易发现：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003evoid lock()\u003c/code\u003e 调用 Sync 的 lock() 方法。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003evoid lockInterruptibly()\u003c/code\u003e 直接调用 AQS 的 \u003ca href=\"#%E8%8E%B7%E5%8F%96%E5%8F%AF%E4%B8%AD%E6%96%AD%E7%9A%84%E7%8B%AC%E5%8D%A0%E9%94%81\"\u003e获取可中断的独占锁\u003c/a\u003e 方法 \u003ccode\u003elockInterruptibly()\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eboolean tryLock()\u003c/code\u003e 调用 Sync 的 \u003ccode\u003enonfairTryAcquire()\u003c/code\u003e 。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eboolean tryLock(long time, TimeUnit unit)\u003c/code\u003e 直接调用 AQS 的 \u003ca href=\"#%E8%8E%B7%E5%8F%96%E8%B6%85%E6%97%B6%E7%AD%89%E5%BE%85%E5%BC%8F%E7%9A%84%E7%8B%AC%E5%8D%A0%E9%94%81\"\u003e获取超时等待式的独占锁\u003c/a\u003e 方法 \u003ccode\u003etryAcquireNanos(int arg, long nanosTimeout)\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003evoid unlock()\u003c/code\u003e 直接调用 AQS 的 \u003ca href=\"#%E9%87%8A%E6%94%BE%E7%8B%AC%E5%8D%A0%E9%94%81\"\u003e释放独占锁\u003c/a\u003e 方法 \u003ccode\u003erelease(int arg)\u003c/code\u003e 。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e直接调用 AQS 接口的方法就不再赘述了，其原理在 [AQS 的原理](#AQS 的原理) 中已经用很大篇幅进行过讲解。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003enonfairTryAcquire\u003c/code\u003e 方法源码如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 公平锁和非公平锁都会用这个方法区尝试获取锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"title function_\"\u003enonfairTryAcquire\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e acquires)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eThread\u003c/span\u003e \u003cspan class=\"variable\"\u003ecurrent\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Thread.currentThread();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ec\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e getState();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (c == \u003cspan class=\"number\"\u003e0\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (compareAndSetState(\u003cspan class=\"number\"\u003e0\u003c/span\u003e, acquires)) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e         \u003cspan class=\"comment\"\u003e// 如果同步状态为0，将其设为 acquires，并设置当前线程为排它线程\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            setExclusiveOwnerThread(current);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (current == getExclusiveOwnerThread()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003enextc\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e c + acquires;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (nextc \u0026lt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e) \u003cspan class=\"comment\"\u003e// overflow\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ethrow\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eError\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;Maximum lock count exceeded\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        setState(nextc);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e处理流程很简单：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果同步状态为 0，设置同步状态设为 acquires，并设置当前线程为排它线程，然后返回 true，获取锁成功。\u003c/li\u003e\n\u003cli\u003e如果同步状态不为 0 且当前线程为排它线程，设置同步状态为当前状态值+acquires 值，然后返回 true，获取锁成功。\u003c/li\u003e\n\u003cli\u003e否则，返回 false，获取锁失败。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"公平锁和非公平锁\"\u003e\u003ca href=\"#公平锁和非公平锁\" class=\"headerlink\" title=\"公平锁和非公平锁\"\u003e\u003c/a\u003e公平锁和非公平锁\u003c/h4\u003e\u003cp\u003eReentrantLock 这个类有两个构造函数，一个是无参构造函数，一个是传入 fair 参数的构造函数。fair 参数代表的是锁的公平策略，如果传入 true 就表示需要构造一个公平锁，反之则表示要构造一个非公平锁。\u003c/p\u003e\n\u003cp\u003e锁都对应着一个等待队列，如果一个线程没有获得锁，就会进入等待队列，当有线程释放锁的时候，就需要从等待队列中唤醒一个等待的线程。如果是公平锁，唤醒的策略就是谁等待的时间长，就唤醒谁，很公平；如果是非公平锁，则不提供这个公平保证，有可能等待时间短的线程反而先被唤醒。\u003c/p\u003e\n\u003cp\u003elock 方法在公平锁和非公平锁中的实现：\u003c/p\u003e\n\u003cp\u003e二者的区别仅在于申请非公平锁时，如果同步状态为 0，尝试将其设为 1，如果成功，直接将当前线程置为排它线程；否则和公平锁一样，调用 AQS 获取独占锁方法 \u003ccode\u003eacquire\u003c/code\u003e。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 非公平锁实现\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003elock\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (compareAndSetState(\u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 如果同步状态为0，将其设为1，并设置当前线程为排它线程\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        setExclusiveOwnerThread(Thread.currentThread());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 调用 AQS 获取独占锁方法 acquire\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        acquire(\u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 公平锁实现\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003elock\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 调用 AQS 获取独占锁方法 acquire\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    acquire(\u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"ReentrantReadWriteLock\"\u003e\u003ca href=\"#ReentrantReadWriteLock\" class=\"headerlink\" title=\"ReentrantReadWriteLock\"\u003e\u003c/a\u003eReentrantReadWriteLock\u003c/h2\u003e\u003cp\u003e\u003ccode\u003eReadWriteLock\u003c/code\u003e 适用于\u003cstrong\u003e读多写少的场景\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 类是 \u003ccode\u003eReadWriteLock\u003c/code\u003e 接口的具体实现，它是一个可重入的读写锁。\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 维护了一对读写锁，将读写锁分开，有利于提高并发效率。\u003c/p\u003e\n\u003cp\u003e读写锁，并不是 Java 语言特有的，而是一个广为使用的通用技术，所有的读写锁都遵守以下三条基本原则：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e允许多个线程同时读共享变量；\u003c/li\u003e\n\u003cli\u003e只允许一个线程写共享变量；\u003c/li\u003e\n\u003cli\u003e如果一个写线程正在执行写操作，此时禁止读线程读共享变量。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e读写锁与互斥锁的一个重要区别就是\u003cstrong\u003e读写锁允许多个线程同时读共享变量\u003c/strong\u003e，而互斥锁是不允许的，这是读写锁在读多写少场景下性能优于互斥锁的关键。但\u003cstrong\u003e读写锁的写操作是互斥的\u003c/strong\u003e，当一个线程在写共享变量的时候，是不允许其他线程执行写操作和读操作。\u003c/p\u003e\n\u003ch3 id=\"ReentrantReadWriteLock-的特性\"\u003e\u003ca href=\"#ReentrantReadWriteLock-的特性\" class=\"headerlink\" title=\"ReentrantReadWriteLock 的特性\"\u003e\u003c/a\u003eReentrantReadWriteLock 的特性\u003c/h3\u003e\u003cp\u003eReentrantReadWriteLock 的特性如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 适用于读多写少的场景\u003c/strong\u003e。如果是写多读少的场景，由于 \u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 其内部实现比 \u003ccode\u003eReentrantLock\u003c/code\u003e 复杂，性能可能反而要差一些。如果存在这样的问题，需要具体问题具体分析。由于 \u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 的读写锁（\u003ccode\u003eReadLock\u003c/code\u003e、\u003ccode\u003eWriteLock\u003c/code\u003e）都实现了 \u003ccode\u003eLock\u003c/code\u003e 接口，所以要替换为 \u003ccode\u003eReentrantLock\u003c/code\u003e 也较为容易。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 实现了 \u003ccode\u003eReadWriteLock\u003c/code\u003e 接口，支持了 \u003ccode\u003eReentrantLock\u003c/code\u003e 所不具备的读写锁分离。\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 维护了一对读写锁（\u003ccode\u003eReadLock\u003c/code\u003e、\u003ccode\u003eWriteLock\u003c/code\u003e）。将读写锁分开，有利于提高并发效率。\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 的加锁策略是：\u003cstrong\u003e允许多个读操作并发执行，但每次只允许一个写操作\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 为读写锁都提供了可重入的加锁语义。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 支持公平锁和非公平锁（默认）两种模式。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003eReadWriteLock\u003c/code\u003e 接口定义如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReadWriteLock\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Lock \u003cspan class=\"title function_\"\u003ereadLock\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Lock \u003cspan class=\"title function_\"\u003ewriteLock\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ereadLock\u003c/code\u003e - 返回用于读操作的锁（\u003ccode\u003eReadLock\u003c/code\u003e）。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewriteLock\u003c/code\u003e - 返回用于写操作的锁（\u003ccode\u003eWriteLock\u003c/code\u003e）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在读写锁和写入锁之间的交互可以采用多种实现方式，\u003ccode\u003eReadWriteLock\u003c/code\u003e 的一些可选实现包括：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e释放优先\u003c/strong\u003e - 当一个写入操作释放写锁，并且队列中同时存在读线程和写线程，那么应该优先选择读线程、写线程，还是最先发出请求的线程？\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e读线程插队\u003c/strong\u003e - 如果锁是由读线程持有，但有写线程正在等待，那么新到达的读线程能否立即获得访问权，还是应该在写线程后面等待？如果允许读线程插队到写线程之前，那么将提高并发性，但可能造成线程饥饿问题。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e重入性\u003c/strong\u003e - 读锁和写锁是否是可重入的？\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e降级\u003c/strong\u003e - 如果一个线程持有写入锁，那么它能否在不释放该锁的情况下获得读锁？这可能会使得写锁被降级为读锁，同时不允许其他写线程修改被保护的资源。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e升级\u003c/strong\u003e - 读锁能否优先于其他正在等待的读线程和写线程而升级为一个写锁？在大多数的读写锁实现中并不支持升级，因为如果没有显式的升级操作，那么很容易造成死锁。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"ReentrantReadWriteLock-的用法\"\u003e\u003ca href=\"#ReentrantReadWriteLock-的用法\" class=\"headerlink\" title=\"ReentrantReadWriteLock 的用法\"\u003e\u003c/a\u003eReentrantReadWriteLock 的用法\u003c/h3\u003e\u003cp\u003e前文了解了 \u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 的特性，接下来，我们要讲述其具体用法。\u003c/p\u003e\n\u003ch4 id=\"ReentrantReadWriteLock-的构造方法\"\u003e\u003ca href=\"#ReentrantReadWriteLock-的构造方法\" class=\"headerlink\" title=\"ReentrantReadWriteLock 的构造方法\"\u003e\u003c/a\u003eReentrantReadWriteLock 的构造方法\u003c/h4\u003e\u003cp\u003e\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 和 \u003ccode\u003eReentrantLock\u003c/code\u003e 一样，也有两个构造方法，且用法相似。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eReentrantReadWriteLock\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eReentrantReadWriteLock\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eboolean\u003c/span\u003e fair)\u003c/span\u003e {}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eReentrantReadWriteLock()\u003c/code\u003e - 默认构造方法会初始化一个\u003cstrong\u003e非公平锁（NonfairSync）\u003c/strong\u003e。在非公平的锁中，线程获得锁的顺序是不确定的。写线程降级为读线程是可以的，但读线程升级为写线程是不可以的（这样会导致死锁）。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReentrantReadWriteLock(boolean)\u003c/code\u003e - \u003ccode\u003enew ReentrantLock(true)\u003c/code\u003e 会初始化一个\u003cstrong\u003e公平锁（FairSync）\u003c/strong\u003e。对于公平锁，等待时间最长的线程将优先获得锁。如果这个锁是读线程持有，则另一个线程请求写锁，那么其他读线程都不能获得读锁，直到写线程释放写锁。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"ReentrantReadWriteLock-的使用实例\"\u003e\u003ca href=\"#ReentrantReadWriteLock-的使用实例\" class=\"headerlink\" title=\"ReentrantReadWriteLock 的使用实例\"\u003e\u003c/a\u003eReentrantReadWriteLock 的使用实例\u003c/h4\u003e\u003cp\u003e在 \u003ca href=\"#reentrantreadwritelock-%E7%9A%84%E7%89%B9%E6%80%A7\"\u003e\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 的特性\u003c/a\u003e 中已经介绍过，\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 的读写锁（\u003ccode\u003eReadLock\u003c/code\u003e、\u003ccode\u003eWriteLock\u003c/code\u003e）都实现了 \u003ccode\u003eLock\u003c/code\u003e 接口，所以其各自独立的使用方式与 \u003ccode\u003eReentrantLock\u003c/code\u003e 一样，这里不再赘述。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 与 \u003ccode\u003eReentrantLock\u003c/code\u003e 用法上的差异，主要在于读写锁的配合使用。本文以一个典型使用场景来进行讲解。\u003c/p\u003e\n\u003cp\u003e【示例】基于 \u003ccode\u003eReadWriteLock\u003c/code\u003e 实现一个简单的泛型无界缓存\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 简单的无界缓存实现\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u0026lt;p\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 使用 WeakHashMap 存储键值对。WeakHashMap 中存储的对象是弱引用，JVM GC 时会自动清除没有被引用的弱引用对象。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eUnboundedCache\u003c/span\u003e\u0026lt;K, V\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e Map\u0026lt;K, V\u0026gt; cacheMap = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eWeakHashMap\u003c/span\u003e\u0026lt;\u0026gt;();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eReadWriteLock\u003c/span\u003e \u003cspan class=\"variable\"\u003ecacheLock\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReentrantReadWriteLock\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e V \u003cspan class=\"title function_\"\u003eget\u003c/span\u003e\u003cspan class=\"params\"\u003e(K key)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        cacheLock.readLock().lock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        V value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            value = cacheMap.get(key);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003elog\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e String.format(\u003cspan class=\"string\"\u003e\u0026#34;%s 读数据 %s:%s\u0026#34;\u003c/span\u003e, Thread.currentThread().getName(), key, value);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(log);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            cacheLock.readLock().unlock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e V \u003cspan class=\"title function_\"\u003eput\u003c/span\u003e\u003cspan class=\"params\"\u003e(K key, V value)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        cacheLock.writeLock().lock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            cacheMap.put(key, value);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003elog\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e String.format(\u003cspan class=\"string\"\u003e\u0026#34;%s 写入数据 %s:%s\u0026#34;\u003c/span\u003e, Thread.currentThread().getName(), key, value);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(log);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            cacheLock.writeLock().unlock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e V \u003cspan class=\"title function_\"\u003eremove\u003c/span\u003e\u003cspan class=\"params\"\u003e(K key)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        cacheLock.writeLock().lock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e cacheMap.remove(key);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            cacheLock.writeLock().unlock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eclear\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        cacheLock.writeLock().lock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.cacheMap.clear();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            cacheLock.writeLock().unlock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用 \u003ccode\u003eWeakHashMap\u003c/code\u003e 而不是 \u003ccode\u003eHashMap\u003c/code\u003e 来存储键值对。\u003ccode\u003eWeakHashMap\u003c/code\u003e 中存储的对象是弱引用，JVM GC 时会自动清除没有被引用的弱引用对象。\u003c/li\u003e\n\u003cli\u003e向 \u003ccode\u003eMap\u003c/code\u003e 写数据前加写锁，写完后，释放写锁。\u003c/li\u003e\n\u003cli\u003e向 \u003ccode\u003eMap\u003c/code\u003e 读数据前加读锁，读完后，释放读锁。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e测试其线程安全性：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u003cspan class=\"doctag\"\u003e@author\u003c/span\u003e \u0026lt;a href=\u0026#34;mailto:forbreak@163.com\u0026#34;\u0026gt;Zhang Peng\u0026lt;/a\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u003cspan class=\"doctag\"\u003e@since\u003c/span\u003e 2020-01-01\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReentrantReadWriteLockDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e UnboundedCache\u0026lt;Integer, Integer\u0026gt; cache = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eUnboundedCache\u003c/span\u003e\u0026lt;\u0026gt;();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eExecutorService\u003c/span\u003e \u003cspan class=\"variable\"\u003eexecutorService\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Executors.newCachedThreadPool();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e20\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            executorService.execute(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMyThread\u003c/span\u003e());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            cache.get(\u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        executorService.shutdown();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/** 线程任务每次向缓存中写入 3 个随机值，key 固定 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMyThread\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRunnable\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eRandom\u003c/span\u003e \u003cspan class=\"variable\"\u003erandom\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRandom\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e3\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                cache.put(i, random.nextInt(\u003cspan class=\"number\"\u003e100\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e说明：示例中，通过线程池启动 20 个并发任务。任务每次向缓存中写入 3 个随机值，key 固定；然后主线程每次固定读取缓存中第一个 key 的值。\u003c/p\u003e\n\u003cp\u003e输出结果：\u003c/p\u003e\n\u003cfigure class=\"highlight subunit\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003emain 读数据 0:null\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epool\u003cspan class=\"string\"\u003e-1\u003c/span\u003e-thread\u003cspan class=\"string\"\u003e-1\u003c/span\u003e 写入数据 0:16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epool\u003cspan class=\"string\"\u003e-1\u003c/span\u003e-thread\u003cspan class=\"string\"\u003e-1\u003c/span\u003e 写入数据 1:58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epool\u003cspan class=\"string\"\u003e-1\u003c/span\u003e-thread\u003cspan class=\"string\"\u003e-1\u003c/span\u003e 写入数据 2:50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emain 读数据 0:16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epool\u003cspan class=\"string\"\u003e-1\u003c/span\u003e-thread\u003cspan class=\"string\"\u003e-1\u003c/span\u003e 写入数据 0:85\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epool\u003cspan class=\"string\"\u003e-1\u003c/span\u003e-thread\u003cspan class=\"string\"\u003e-1\u003c/span\u003e 写入数据 1:76\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epool\u003cspan class=\"string\"\u003e-1\u003c/span\u003e-thread\u003cspan class=\"string\"\u003e-1\u003c/span\u003e 写入数据 2:46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epool\u003cspan class=\"string\"\u003e-1\u003c/span\u003e-thread\u003cspan class=\"string\"\u003e-2\u003c/span\u003e 写入数据 0:21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epool\u003cspan class=\"string\"\u003e-1\u003c/span\u003e-thread\u003cspan class=\"string\"\u003e-2\u003c/span\u003e 写入数据 1:41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epool\u003cspan class=\"string\"\u003e-1\u003c/span\u003e-thread\u003cspan class=\"string\"\u003e-2\u003c/span\u003e 写入数据 2:63\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emain 读数据 0:21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emain 读数据 0:21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e// ...\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"ReentrantReadWriteLock-的原理\"\u003e\u003ca href=\"#ReentrantReadWriteLock-的原理\" class=\"headerlink\" title=\"ReentrantReadWriteLock 的原理\"\u003e\u003c/a\u003eReentrantReadWriteLock 的原理\u003c/h3\u003e\u003cp\u003e前面了解了 \u003ccode\u003eReentrantLock\u003c/code\u003e 的原理，理解 \u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e 就容易多了。\u003c/p\u003e\n\u003ch4 id=\"ReentrantReadWriteLock-的数据结构\"\u003e\u003ca href=\"#ReentrantReadWriteLock-的数据结构\" class=\"headerlink\" title=\"ReentrantReadWriteLock 的数据结构\"\u003e\u003c/a\u003eReentrantReadWriteLock 的数据结构\u003c/h4\u003e\u003cp\u003e阅读 ReentrantReadWriteLock 的源码，可以发现它有三个核心字段：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/** Inner class providing readlock */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e ReentrantReadWriteLock.ReadLock readerLock;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/** Inner class providing writelock */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e ReentrantReadWriteLock.WriteLock writerLock;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/** Performs all synchronization mechanics */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e Sync sync;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e ReentrantReadWriteLock.WriteLock \u003cspan class=\"title function_\"\u003ewriteLock\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e { \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e writerLock; }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e ReentrantReadWriteLock.ReadLock  \u003cspan class=\"title function_\"\u003ereadLock\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e  { \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e readerLock; }\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esync\u003c/code\u003e - 内部类 \u003ccode\u003eReentrantReadWriteLock.Sync\u003c/code\u003e 对象。与 \u003ccode\u003eReentrantLock\u003c/code\u003e 类似，它有两个子类：\u003ccode\u003eReentrantReadWriteLock.FairSync\u003c/code\u003e 和 \u003ccode\u003eReentrantReadWriteLock.NonfairSync\u003c/code\u003e ，分别表示公平锁和非公平锁的实现。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ereaderLock\u003c/code\u003e - 内部类 \u003ccode\u003eReentrantReadWriteLock.ReadLock\u003c/code\u003e 对象，这是一把读锁。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewriterLock\u003c/code\u003e - 内部类 \u003ccode\u003eReentrantReadWriteLock.WriteLock\u003c/code\u003e 对象，这是一把写锁。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"ReentrantReadWriteLock-的获取锁和释放锁\"\u003e\u003ca href=\"#ReentrantReadWriteLock-的获取锁和释放锁\" class=\"headerlink\" title=\"ReentrantReadWriteLock 的获取锁和释放锁\"\u003e\u003c/a\u003eReentrantReadWriteLock 的获取锁和释放锁\u003c/h4\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReadLock\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eLock\u003c/span\u003e, java.io.Serializable {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 调用 AQS 获取共享锁方法\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003elock\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        sync.acquireShared(\u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 调用 AQS 释放共享锁方法\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eunlock\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        sync.releaseShared(\u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eWriteLock\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eLock\u003c/span\u003e, java.io.Serializable {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 调用 AQS 获取独占锁方法\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003elock\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        sync.acquire(\u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 调用 AQS 释放独占锁方法\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eunlock\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        sync.release(\u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"StampedLock\"\u003e\u003ca href=\"#StampedLock\" class=\"headerlink\" title=\"StampedLock\"\u003e\u003c/a\u003eStampedLock\u003c/h2\u003e\u003cp\u003eReadWriteLock 支持两种模式：一种是读锁，一种是写锁。而 StampedLock 支持三种模式，分别是：\u003cstrong\u003e写锁\u003c/strong\u003e、\u003cstrong\u003e悲观读锁\u003c/strong\u003e和\u003cstrong\u003e乐观读\u003c/strong\u003e。其中，写锁、悲观读锁的语义和 ReadWriteLock 的写锁、读锁的语义非常类似，允许多个线程同时获取悲观读锁，但是只允许一个线程获取写锁，写锁和悲观读锁是互斥的。不同的是：StampedLock 里的写锁和悲观读锁加锁成功之后，都会返回一个 stamp；然后解锁的时候，需要传入这个 stamp。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注意这里，用的是“乐观读”这个词，而不是“乐观读锁”，是要提醒你，\u003cstrong\u003e乐观读这个操作是无锁的\u003c/strong\u003e，所以相比较 ReadWriteLock 的读锁，乐观读的性能更好一些。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eStampedLock 的性能之所以比 ReadWriteLock 还要好，其关键是 \u003cstrong\u003eStampedLock 支持乐观读\u003c/strong\u003e的方式。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReadWriteLock 支持多个线程同时读，但是当多个线程同时读的时候，所有的写操作会被阻塞；\u003c/li\u003e\n\u003cli\u003e而 StampedLock 提供的乐观读，是允许一个线程获取写锁的，也就是说不是所有的写操作都被阻塞。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e对于读多写少的场景 StampedLock 性能很好，简单的应用场景基本上可以替代 ReadWriteLock，但是\u003cstrong\u003eStampedLock 的功能仅仅是 ReadWriteLock 的子集\u003c/strong\u003e，在使用的时候，还是有几个地方需要注意一下。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eStampedLock 不支持重入\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eStampedLock 的悲观读锁、写锁都不支持条件变量。\u003c/li\u003e\n\u003cli\u003e如果线程阻塞在 StampedLock 的 readLock() 或者 writeLock() 上时，此时调用该阻塞线程的 interrupt() 方法，会导致 CPU 飙升。**使用 StampedLock 一定不要调用中断操作，如果需要支持中断功能，一定使用可中断的悲观读锁 readLockInterruptibly() 和写锁 writeLockInterruptibly()**。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e【示例】StampedLock 阻塞时，调用 interrupt() 导致 CPU 飙升\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eStampedLock\u003c/span\u003e \u003cspan class=\"variable\"\u003elock\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eStampedLock\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eThread\u003c/span\u003e \u003cspan class=\"variable\"\u003eT1\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eThread\u003c/span\u003e(()-\u0026gt;{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 获取写锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  lock.writeLock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 永远阻塞在此处，不释放写锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  LockSupport.park();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e});\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eT1.start();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 保证 T1 获取写锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eThread.sleep(\u003cspan class=\"number\"\u003e100\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eThread\u003c/span\u003e \u003cspan class=\"variable\"\u003eT2\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eThread\u003c/span\u003e(()-\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 阻塞在悲观读锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  lock.readLock()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eT2.start();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 保证 T2 阻塞在读锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eThread.sleep(\u003cspan class=\"number\"\u003e100\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 中断线程 T2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 会导致线程 T2 所在 CPU 飙升\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eT2.interrupt();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eT2.join();\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【示例】StampedLock 读模板：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eStampedLock\u003c/span\u003e \u003cspan class=\"variable\"\u003esl\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eStampedLock\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 乐观读\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003elong\u003c/span\u003e \u003cspan class=\"variable\"\u003estamp\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  sl.tryOptimisticRead();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 读入方法局部变量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e......\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 校验 stamp\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (!sl.validate(stamp)){\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 升级为悲观读锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  stamp = sl.readLock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 读入方法局部变量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    .....\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  } \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 释放悲观读锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    sl.unlockRead(stamp);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 使用方法局部变量执行业务操作\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e......\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【示例】StampedLock 写模板：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003elong\u003c/span\u003e \u003cspan class=\"variable\"\u003estamp\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e sl.writeLock();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 写共享变量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  ......\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  sl.unlockWrite(stamp);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"AQS\"\u003e\u003ca href=\"#AQS\" class=\"headerlink\" title=\"AQS\"\u003e\u003c/a\u003eAQS\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003eAbstractQueuedSynchronizer\u003c/code\u003e（简称 \u003cstrong\u003eAQS\u003c/strong\u003e）是\u003cstrong\u003e队列同步器\u003c/strong\u003e，顾名思义，其主要作用是处理同步。它是并发锁和很多同步工具类的实现基石（如 \u003ccode\u003eReentrantLock\u003c/code\u003e、\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e、\u003ccode\u003eCountDownLatch\u003c/code\u003e、\u003ccode\u003eSemaphore\u003c/code\u003e、\u003ccode\u003eFutureTask\u003c/code\u003e 等）。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"AQS-的要点\"\u003e\u003ca href=\"#AQS-的要点\" class=\"headerlink\" title=\"AQS 的要点\"\u003e\u003c/a\u003eAQS 的要点\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eAQS 提供了对独享锁与共享锁的支持\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003ejava.util.concurrent.locks\u003c/code\u003e 包中的相关锁（常用的有 \u003ccode\u003eReentrantLock\u003c/code\u003e、 \u003ccode\u003eReadWriteLock\u003c/code\u003e）都是基于 AQS 来实现。这些锁都没有直接继承 AQS，而是定义了一个 \u003ccode\u003eSync\u003c/code\u003e 类去继承 AQS。为什么要这样呢？因为锁面向的是使用用户，而同步器面向的则是线程控制，那么在锁的实现中聚合同步器而不是直接继承 AQS 就可以很好的隔离二者所关注的事情。\u003c/p\u003e\n\u003ch3 id=\"AQS-的应用\"\u003e\u003ca href=\"#AQS-的应用\" class=\"headerlink\" title=\"AQS 的应用\"\u003e\u003c/a\u003eAQS 的应用\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eAQS 提供了对独享锁与共享锁的支持\u003c/strong\u003e。\u003c/p\u003e\n\u003ch4 id=\"独享锁-API\"\u003e\u003ca href=\"#独享锁-API\" class=\"headerlink\" title=\"独享锁 API\"\u003e\u003c/a\u003e独享锁 API\u003c/h4\u003e\u003cp\u003e获取、释放独享锁的主要 API 如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eacquire\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e arg)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eacquireInterruptibly\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e arg)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"title function_\"\u003etryAcquireNanos\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e arg, \u003cspan class=\"type\"\u003elong\u003c/span\u003e nanosTimeout)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"title function_\"\u003erelease\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e arg)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eacquire\u003c/code\u003e - 获取独占锁。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eacquireInterruptibly\u003c/code\u003e - 获取可中断的独占锁。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etryAcquireNanos\u003c/code\u003e - 尝试在指定时间内获取可中断的独占锁。在以下三种情况下回返回：\u003cul\u003e\n\u003cli\u003e在超时时间内，当前线程成功获取了锁；\u003c/li\u003e\n\u003cli\u003e当前线程在超时时间内被中断；\u003c/li\u003e\n\u003cli\u003e超时时间结束，仍未获得锁返回 false。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erelease\u003c/code\u003e - 释放独占锁。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"共享锁-API\"\u003e\u003ca href=\"#共享锁-API\" class=\"headerlink\" title=\"共享锁 API\"\u003e\u003c/a\u003e共享锁 API\u003c/h4\u003e\u003cp\u003e获取、释放共享锁的主要 API 如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eacquireShared\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e arg)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eacquireSharedInterruptibly\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e arg)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"title function_\"\u003etryAcquireSharedNanos\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e arg, \u003cspan class=\"type\"\u003elong\u003c/span\u003e nanosTimeout)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"title function_\"\u003ereleaseShared\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e arg)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eacquireShared\u003c/code\u003e - 获取共享锁。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eacquireSharedInterruptibly\u003c/code\u003e - 获取可中断的共享锁。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etryAcquireSharedNanos\u003c/code\u003e - 尝试在指定时间内获取可中断的共享锁。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erelease\u003c/code\u003e - 释放共享锁。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"AQS-的原理\"\u003e\u003ca href=\"#AQS-的原理\" class=\"headerlink\" title=\"AQS 的原理\"\u003e\u003c/a\u003eAQS 的原理\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003eASQ 原理要点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAQS 使用一个整型的 \u003ccode\u003evolatile\u003c/code\u003e 变量来 \u003cstrong\u003e维护同步状态\u003c/strong\u003e。状态的意义由子类赋予。\u003c/li\u003e\n\u003cli\u003eAQS 维护了一个 FIFO 的双链表，用来存储获取锁失败的线程。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAQS 围绕同步状态提供两种基本操作“获取”和“释放”，并提供一系列判断和处理方法，简单说几点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003estate 是独占的，还是共享的；\u003c/li\u003e\n\u003cli\u003estate 被获取后，其他线程需要等待；\u003c/li\u003e\n\u003cli\u003estate 被释放后，唤醒等待线程；\u003c/li\u003e\n\u003cli\u003e线程等不及时，如何退出等待。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至于线程是否可以获得 state，如何释放 state，就不是 AQS 关心的了，要由子类具体实现。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"AQS-的数据结构\"\u003e\u003ca href=\"#AQS-的数据结构\" class=\"headerlink\" title=\"AQS 的数据结构\"\u003e\u003c/a\u003eAQS 的数据结构\u003c/h4\u003e\u003cp\u003e阅读 AQS 的源码，可以发现：AQS 继承自 \u003ccode\u003eAbstractOwnableSynchronize\u003c/code\u003e。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eabstract\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eAbstractQueuedSynchronizer\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eAbstractOwnableSynchronizer\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003ejava\u003c/span\u003e.io.Serializable {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/** 等待队列的队头，懒加载。只能通过 setHead 方法修改。 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003etransient\u003c/span\u003e \u003cspan class=\"keyword\"\u003evolatile\u003c/span\u003e Node head;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/** 等待队列的队尾，懒加载。只能通过 enq 方法添加新的等待节点。*/\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003etransient\u003c/span\u003e \u003cspan class=\"keyword\"\u003evolatile\u003c/span\u003e Node tail;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/** 同步状态 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003evolatile\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e state;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003estate\u003c/code\u003e - AQS 使用一个整型的 \u003ccode\u003evolatile\u003c/code\u003e 变量来 \u003cstrong\u003e维护同步状态\u003c/strong\u003e。\u003cul\u003e\n\u003cli\u003e这个整数状态的意义由子类来赋予，如\u003ccode\u003eReentrantLock\u003c/code\u003e 中该状态值表示所有者线程已经重复获取该锁的次数，\u003ccode\u003eSemaphore\u003c/code\u003e 中该状态值表示剩余的许可数量。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehead\u003c/code\u003e 和 \u003ccode\u003etail\u003c/code\u003e - AQS \u003cstrong\u003e维护了一个 \u003ccode\u003eNode\u003c/code\u003e 类型（AQS 的内部类）的双链表来完成同步状态的管理\u003c/strong\u003e。这个双链表是一个双向的 FIFO 队列，通过 \u003ccode\u003ehead\u003c/code\u003e 和 \u003ccode\u003etail\u003c/code\u003e 指针进行访问。当 \u003cstrong\u003e有线程获取锁失败后，就被添加到队列末尾\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/concurrent/aqs_1.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e再来看一下 \u003ccode\u003eNode\u003c/code\u003e 的源码\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eNode\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/** 该等待同步的节点处于共享模式 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eNode\u003c/span\u003e \u003cspan class=\"variable\"\u003eSHARED\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eNode\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/** 该等待同步的节点处于独占模式 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eNode\u003c/span\u003e \u003cspan class=\"variable\"\u003eEXCLUSIVE\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/** 线程等待状态，状态值有: 0、1、-1、-2、-3 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evolatile\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e waitStatus;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eCANCELLED\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e  \u003cspan class=\"number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eSIGNAL\u003c/span\u003e    \u003cspan class=\"operator\"\u003e=\u003c/span\u003e -\u003cspan class=\"number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eCONDITION\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e -\u003cspan class=\"number\"\u003e2\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ePROPAGATE\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e -\u003cspan class=\"number\"\u003e3\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/** 前驱节点 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evolatile\u003c/span\u003e Node prev;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/** 后继节点 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evolatile\u003c/span\u003e Node next;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/** 等待锁的线程 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evolatile\u003c/span\u003e Thread thread;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \t\u003cspan class=\"comment\"\u003e/** 和节点是否共享有关 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Node nextWaiter;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e很显然，Node 是一个双链表结构。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ewaitStatus\u003c/code\u003e - \u003ccode\u003eNode\u003c/code\u003e 使用一个整型的 \u003ccode\u003evolatile\u003c/code\u003e 变量来 维护 AQS 同步队列中线程节点的状态。\u003ccode\u003ewaitStatus\u003c/code\u003e 有五个状态值：\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eCANCELLED(1)\u003c/code\u003e - 此状态表示：该节点的线程可能由于超时或被中断而 \u003cstrong\u003e处于被取消(作废)状态\u003c/strong\u003e，一旦处于这个状态，表示这个节点应该从等待队列中移除。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSIGNAL(-1)\u003c/code\u003e - 此状态表示：\u003cstrong\u003e后继节点会被挂起\u003c/strong\u003e，因此在当前节点释放锁或被取消之后，必须唤醒(\u003ccode\u003eunparking\u003c/code\u003e)其后继结点。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCONDITION(-2)\u003c/code\u003e - 此状态表示：该节点的线程 \u003cstrong\u003e处于等待条件状态\u003c/strong\u003e，不会被当作是同步队列上的节点，直到被唤醒(\u003ccode\u003esignal\u003c/code\u003e)，设置其值为 0，再重新进入阻塞状态。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePROPAGATE(-3)\u003c/code\u003e - 此状态表示：下一个 \u003ccode\u003eacquireShared\u003c/code\u003e 应无条件传播。\u003c/li\u003e\n\u003cli\u003e0 - 非以上状态。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"独占锁的获取和释放\"\u003e\u003ca href=\"#独占锁的获取和释放\" class=\"headerlink\" title=\"独占锁的获取和释放\"\u003e\u003c/a\u003e独占锁的获取和释放\u003c/h4\u003e\u003ch5 id=\"获取独占锁\"\u003e\u003ca href=\"#获取独占锁\" class=\"headerlink\" title=\"获取独占锁\"\u003e\u003c/a\u003e获取独占锁\u003c/h5\u003e\u003cp\u003eAQS 中使用 \u003ccode\u003eacquire(int arg)\u003c/code\u003e 方法获取独占锁，其大致流程如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e先尝试获取同步状态，如果获取同步状态成功，则结束方法，直接返回。\u003c/li\u003e\n\u003cli\u003e如果获取同步状态不成功，AQS 会不断尝试利用 CAS 操作将当前线程插入等待同步队列的队尾，直到成功为止。\u003c/li\u003e\n\u003cli\u003e接着，不断尝试为等待队列中的线程节点获取独占锁。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/concurrent/aqs_2.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/concurrent/aqs_3.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e详细流程可以用下图来表示，请结合源码来理解（一图胜千言）：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/concurrent/aqs_4.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch5 id=\"释放独占锁\"\u003e\u003ca href=\"#释放独占锁\" class=\"headerlink\" title=\"释放独占锁\"\u003e\u003c/a\u003e释放独占锁\u003c/h5\u003e\u003cp\u003eAQS 中使用 \u003ccode\u003erelease(int arg)\u003c/code\u003e 方法释放独占锁，其大致流程如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e先尝试获取解锁线程的同步状态，如果获取同步状态不成功，则结束方法，直接返回。\u003c/li\u003e\n\u003cli\u003e如果获取同步状态成功，AQS 会尝试唤醒当前线程节点的后继节点。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"获取可中断的独占锁\"\u003e\u003ca href=\"#获取可中断的独占锁\" class=\"headerlink\" title=\"获取可中断的独占锁\"\u003e\u003c/a\u003e获取可中断的独占锁\u003c/h5\u003e\u003cp\u003eAQS 中使用 \u003ccode\u003eacquireInterruptibly(int arg)\u003c/code\u003e 方法获取可中断的独占锁。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eacquireInterruptibly(int arg)\u003c/code\u003e 实现方式\u003cstrong\u003e相较于获取独占锁方法（ \u003ccode\u003eacquire\u003c/code\u003e）非常相似\u003c/strong\u003e，区别仅在于它会\u003cstrong\u003e通过 \u003ccode\u003eThread.interrupted\u003c/code\u003e 检测当前线程是否被中断\u003c/strong\u003e，如果是，则立即抛出中断异常（\u003ccode\u003eInterruptedException\u003c/code\u003e）。\u003c/p\u003e\n\u003ch5 id=\"获取超时等待式的独占锁\"\u003e\u003ca href=\"#获取超时等待式的独占锁\" class=\"headerlink\" title=\"获取超时等待式的独占锁\"\u003e\u003c/a\u003e获取超时等待式的独占锁\u003c/h5\u003e\u003cp\u003eAQS 中使用 \u003ccode\u003etryAcquireNanos(int arg)\u003c/code\u003e 方法获取超时等待的独占锁。\u003c/p\u003e\n\u003cp\u003edoAcquireNanos 的实现方式 \u003cstrong\u003e相较于获取独占锁方法（ \u003ccode\u003eacquire\u003c/code\u003e）非常相似\u003c/strong\u003e，区别在于它会根据超时时间和当前时间计算出截止时间。在获取锁的流程中，会不断判断是否超时，如果超时，直接返回 false；如果没超时，则用 \u003ccode\u003eLockSupport.parkNanos\u003c/code\u003e 来阻塞当前线程。\u003c/p\u003e\n\u003ch4 id=\"共享锁的获取和释放\"\u003e\u003ca href=\"#共享锁的获取和释放\" class=\"headerlink\" title=\"共享锁的获取和释放\"\u003e\u003c/a\u003e共享锁的获取和释放\u003c/h4\u003e\u003ch5 id=\"获取共享锁\"\u003e\u003ca href=\"#获取共享锁\" class=\"headerlink\" title=\"获取共享锁\"\u003e\u003c/a\u003e获取共享锁\u003c/h5\u003e\u003cp\u003eAQS 中使用 \u003ccode\u003eacquireShared(int arg)\u003c/code\u003e 方法获取共享锁。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eacquireShared\u003c/code\u003e 方法和 \u003ccode\u003eacquire\u003c/code\u003e 方法的逻辑很相似，区别仅在于自旋的条件以及节点出队的操作有所不同。\u003c/p\u003e\n\u003cp\u003e成功获得共享锁的条件如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etryAcquireShared(arg)\u003c/code\u003e 返回值大于等于 0 （这意味着共享锁的 permit 还没有用完）。\u003c/li\u003e\n\u003cli\u003e当前节点的前驱节点是头结点。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"释放共享锁\"\u003e\u003ca href=\"#释放共享锁\" class=\"headerlink\" title=\"释放共享锁\"\u003e\u003c/a\u003e释放共享锁\u003c/h5\u003e\u003cp\u003eAQS 中使用 \u003ccode\u003ereleaseShared(int arg)\u003c/code\u003e 方法释放共享锁。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ereleaseShared\u003c/code\u003e 首先会尝试释放同步状态，如果成功，则解锁一个或多个后继线程节点。释放共享锁和释放独享锁流程大体相似，区别在于：\u003c/p\u003e\n\u003cp\u003e对于独享模式，如果需要 SIGNAL，释放仅相当于调用头节点的 \u003ccode\u003eunparkSuccessor\u003c/code\u003e。\u003c/p\u003e\n\u003ch5 id=\"获取可中断的共享锁\"\u003e\u003ca href=\"#获取可中断的共享锁\" class=\"headerlink\" title=\"获取可中断的共享锁\"\u003e\u003c/a\u003e获取可中断的共享锁\u003c/h5\u003e\u003cp\u003eAQS 中使用 \u003ccode\u003eacquireSharedInterruptibly(int arg)\u003c/code\u003e 方法获取可中断的共享锁。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eacquireSharedInterruptibly\u003c/code\u003e 方法与 \u003ccode\u003eacquireInterruptibly\u003c/code\u003e 几乎一致，不再赘述。\u003c/p\u003e\n\u003ch5 id=\"获取超时等待式的共享锁\"\u003e\u003ca href=\"#获取超时等待式的共享锁\" class=\"headerlink\" title=\"获取超时等待式的共享锁\"\u003e\u003c/a\u003e获取超时等待式的共享锁\u003c/h5\u003e\u003cp\u003eAQS 中使用 \u003ccode\u003etryAcquireSharedNanos(int arg)\u003c/code\u003e 方法获取超时等待式的共享锁。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003etryAcquireSharedNanos\u003c/code\u003e 方法与 \u003ccode\u003etryAcquireNanos\u003c/code\u003e 几乎一致，不再赘述。\u003c/p\u003e\n\u003ch2 id=\"死锁\"\u003e\u003ca href=\"#死锁\" class=\"headerlink\" title=\"死锁\"\u003e\u003c/a\u003e死锁\u003c/h2\u003e\u003ch3 id=\"什么是死锁\"\u003e\u003ca href=\"#什么是死锁\" class=\"headerlink\" title=\"什么是死锁\"\u003e\u003c/a\u003e什么是死锁\u003c/h3\u003e\u003cp\u003e死锁是一种特定的程序状态，在实体之间，由于循环依赖导致彼此一直处于等待之中，没有任何个体可以继续前进。死锁不仅仅是在线程之间会发生，存在资源独占的进程之间同样也\u003cbr/\u003e可能出现死锁。通常来说，我们大多是聚焦在多线程场景中的死锁，指两个或多个线程之间，由于互相持有对方需要的锁，而永久处于阻塞的状态。\u003c/p\u003e\n\u003ch3 id=\"如何定位死锁\"\u003e\u003ca href=\"#如何定位死锁\" class=\"headerlink\" title=\"如何定位死锁\"\u003e\u003c/a\u003e如何定位死锁\u003c/h3\u003e\u003cp\u003e定位死锁最常见的方式就是利用 jstack 等工具获取线程栈，然后定位互相之间的依赖关系，进而找到死锁。如果是比较明显的死锁，往往 jstack 等就能直接定位，类似 JConsole 甚至可以在图形界面进行有限的死锁检测。\u003c/p\u003e\n\u003cp\u003e如果我们是开发自己的管理工具，需要用更加程序化的方式扫描服务进程、定位死锁，可以考虑使用 Java 提供的标准管理 API，\u003ccode\u003eThreadMXBean\u003c/code\u003e，其直接就提供了 \u003ccode\u003efindDeadlockedThreads()\u003c/code\u003e 方法用于定位。\u003c/p\u003e\n\u003ch3 id=\"如何避免死锁\"\u003e\u003ca href=\"#如何避免死锁\" class=\"headerlink\" title=\"如何避免死锁\"\u003e\u003c/a\u003e如何避免死锁\u003c/h3\u003e\u003cp\u003e基本上死锁的发生是因为：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e互斥，类似 Java 中 Monitor 都是独占的。\u003c/li\u003e\n\u003cli\u003e长期保持互斥，在使用结束之前，不会释放，也不能被其他线程抢占。\u003c/li\u003e\n\u003cli\u003e循环依赖，多个个体之间出现了锁的循环依赖，彼此依赖上一环释放锁。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e由此，我们可以分析出避免死锁的思路和方法。\u003c/p\u003e\n\u003cp\u003e（1）避免一个线程同时获取多个锁。\u003c/p\u003e\n\u003cp\u003e避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。\u003c/p\u003e\n\u003cp\u003e尝试使用定时锁 \u003ccode\u003elock.tryLock(timeout)\u003c/code\u003e，避免锁一直不能释放。\u003c/p\u003e\n\u003cp\u003e对于数据库锁，加锁和解锁必须在一个数据库连接中里，否则会出现解锁失败的情况。\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/10484692/\"\u003e《Java 并发编程实战》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/26591326/\"\u003e《Java 并发编程的艺术》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.cnblogs.com/dolphin0520/p/3923167.html\"\u003eJava 并发编程：Lock\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zhuanlan.zhihu.com/p/27134110\"\u003e深入学习 java 同步器 AQS\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://t.hao0.me/java/2016/04/01/aqs.html\"\u003eAbstractQueuedSynchronizer 框架\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.cnblogs.com/qifengshi/p/6831055.html\"\u003eJava 中的锁分类\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-12-26T15:11:52Z",
  "Author": "钝悟 ◾ Dunwu"
}