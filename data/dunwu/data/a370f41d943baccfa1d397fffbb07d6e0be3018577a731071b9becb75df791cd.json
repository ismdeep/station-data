{
  "Source": "dunwu",
  "Title": "《数据密集型应用系统设计》笔记二之数据系统基础",
  "Link": "https://dunwu.github.io/blog/pages/72a4bd/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"《数据密集型应用系统设计》笔记二之数据系统基础\"\u003e\u003ca href=\"#《数据密集型应用系统设计》笔记二之数据系统基础\" class=\"headerlink\" title=\"《数据密集型应用系统设计》笔记二之数据系统基础\"\u003e\u003c/a\u003e《数据密集型应用系统设计》笔记二之数据系统基础\u003c/h1\u003e\u003ch2 id=\"第-1-章-可靠、可扩展与可维护的应用系统\"\u003e\u003ca href=\"#第-1-章-可靠、可扩展与可维护的应用系统\" class=\"headerlink\" title=\"第 1 章 可靠、可扩展与可维护的应用系统\"\u003e\u003c/a\u003e第 1 章 可靠、可扩展与可维护的应用系统\u003c/h2\u003e\u003ch3 id=\"认识数据系统\"\u003e\u003ca href=\"#认识数据系统\" class=\"headerlink\" title=\"认识数据系统\"\u003e\u003c/a\u003e认识数据系统\u003c/h3\u003e\u003cp\u003e很多应用系统都包含以下数据处理系统：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e数据库：用以存储数据，这样之后应用可以再次面问。\u003c/li\u003e\n\u003cli\u003e高速缓存： 缓存那些复杂或操作代价昂贵的结果，以加快下一次访问。\u003c/li\u003e\n\u003cli\u003e索引： 用户可以按关键字搜索数据井支持各种过掳。\u003c/li\u003e\n\u003cli\u003e流式处理：持续发送消息至另一个进程，处理采用异步方式。\u003c/li\u003e\n\u003cli\u003e批处理： 定期处理大量的累积数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e设计数据系统或数据服务时，需要考虑很多因素，其中最重要的三个问题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e可靠性（Reliability）\u003c/strong\u003e：当出现意外情况如硬件、软件故障、人为失误等，系统应可以继续正常运转：虽然性能可能有所降低，但确保功能正确。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e可扩展性（Scalability）\u003c/strong\u003e：随着规模的增长，例如数据量、流量或复杂性，系统应以合理的方式来匹配这种增长。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e可维护性（Maintainability）\u003c/strong\u003e：随着时间的推移，许多新的人员参与到系统开发和运维， 以维护现有功能或适配新场景等，系统都应高效运转。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"可靠性\"\u003e\u003ca href=\"#可靠性\" class=\"headerlink\" title=\"可靠性\"\u003e\u003c/a\u003e可靠性\u003c/h3\u003e\u003cp\u003e可靠性意味着：即时发生了某些错误，系统仍然可以继续正常工作。\u003c/p\u003e\n\u003cp\u003e系统可应对错误则称为容错（fault tolerant）或者弹性（resilient）。\u003c/p\u003e\n\u003cp\u003e常见的故障类型：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e硬件故障：通常是随机的，如：硬盘崩溃、内存故障、电网停电、断网等。常见应对策略：使用集群去冗余。\u003c/li\u003e\n\u003cli\u003e软件故障：各种难以预料的 bug。\u003c/li\u003e\n\u003cli\u003e人为故障：如操作不当。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"可扩展性\"\u003e\u003ca href=\"#可扩展性\" class=\"headerlink\" title=\"可扩展性\"\u003e\u003c/a\u003e可扩展性\u003c/h3\u003e\u003cp\u003e可扩展性是指负载增加时， 有效保持系统性能的相关技术策略。\u003c/p\u003e\n\u003cp\u003e吞吐量：每秒可处理的记录数\u003c/p\u003e\n\u003cp\u003e响应时间：中位数指标比平均响应时间更适合描述等待时间。\u003c/p\u003e\n\u003cp\u003e如何应对负载：垂直扩展（升级硬件）和水平扩展（集群、分布式）\u003c/p\u003e\n\u003ch3 id=\"可维护性\"\u003e\u003ca href=\"#可维护性\" class=\"headerlink\" title=\"可维护性\"\u003e\u003c/a\u003e可维护性\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e可运维性：方便运营团队来保持系统平稳运行。\u003c/li\u003e\n\u003cli\u003e简单性：简化系统复杂性，使新工程师能够轻松理解系统。\u003c/li\u003e\n\u003cli\u003e可演化性：后续工程师能够轻松地对系统进行改进，井根据需求变化将其适配到非典型场景，也称为可延伸性、易修改性或可塑性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e主要措施：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e良好的抽象可以帮助降低复杂性， 井使系统更易于修改和适配新场景。\u003c/li\u003e\n\u003cli\u003e良好的可操作性意味着对系统健康状况有良好的可观测性和有效的管理方战。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"第-2-章-数据模型与查询语言\"\u003e\u003ca href=\"#第-2-章-数据模型与查询语言\" class=\"headerlink\" title=\"第 2 章 数据模型与查询语言\"\u003e\u003c/a\u003e第 2 章 数据模型与查询语言\u003c/h2\u003e\u003cp\u003e复杂的应用程序可能会有更多的中间层，每层都通过提供一个简洁的数据模型来隐藏下层的复杂性。\u003c/p\u003e\n\u003cp\u003e如果数据大多是一对多关系（树结构数据）或者记录之间没有关系，那么文档模型是最合适的。\u003c/p\u003e\n\u003cp\u003e关系模型能够处理简单的多对多关系，但是随着数据之间的关联越来越复杂，将数据建模转化为图模型会更加自然。\u003c/p\u003e\n\u003ch2 id=\"第-3-章-数据存储与检索\"\u003e\u003ca href=\"#第-3-章-数据存储与检索\" class=\"headerlink\" title=\"第 3 章 数据存储与检索\"\u003e\u003c/a\u003e第 3 章 数据存储与检索\u003c/h2\u003e\u003cp\u003e从最基本的层面看，数据库只需做两件事情：存储和检索。\u003c/p\u003e\n\u003ch3 id=\"数据库核心：数据结构\"\u003e\u003ca href=\"#数据库核心：数据结构\" class=\"headerlink\" title=\"数据库核心：数据结构\"\u003e\u003c/a\u003e数据库核心：数据结构\u003c/h3\u003e\u003cp\u003e为了高效地查找数据库中特定键的值， 需要新的数据结构： 索引。\u003c/p\u003e\n\u003cp\u003e存储系统的设计权衡：适当的索引可以加速读取查询，但每个索引都会减慢写速度。数据库通常不会对所有内容进行索引。\u003c/p\u003e\n\u003cp\u003e索引类型：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e哈希索引\u003c/li\u003e\n\u003cli\u003eB+ 树\u003c/li\u003e\n\u003cli\u003eLSM 树\u003c/li\u003e\n\u003cli\u003e等等\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e扩展阅读：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100048401\"\u003e检索技术核心 20 讲\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"事务处理与分析处理\"\u003e\u003ca href=\"#事务处理与分析处理\" class=\"headerlink\" title=\"事务处理与分析处理\"\u003e\u003c/a\u003e事务处理与分析处理\u003c/h3\u003e\u003ch3 id=\"列式存储\"\u003e\u003ca href=\"#列式存储\" class=\"headerlink\" title=\"列式存储\"\u003e\u003c/a\u003e列式存储\u003c/h3\u003e\u003cp\u003e如果表中有数以万亿行、PB 大小的数据，则适合用于存储在列式存储中。\u003c/p\u003e\n\u003ch2 id=\"第-4-章-数据编码与演化\"\u003e\u003ca href=\"#第-4-章-数据编码与演化\" class=\"headerlink\" title=\"第 4 章 数据编码与演化\"\u003e\u003c/a\u003e第 4 章 数据编码与演化\u003c/h2\u003e\u003cp\u003e本章节主要介绍各种序列化、反序列化方式。略\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-08-26T15:32:00Z",
  "Author": "钝悟 ◾ Dunwu"
}