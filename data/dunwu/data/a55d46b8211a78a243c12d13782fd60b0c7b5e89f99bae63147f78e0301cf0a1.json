{
  "Source": "dunwu",
  "Title": "Spring Security 快速入门",
  "Link": "https://dunwu.github.io/blog/pages/050cdd/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Spring-Security-快速入门\"\u003e\u003ca href=\"#Spring-Security-快速入门\" class=\"headerlink\" title=\"Spring Security 快速入门\"\u003e\u003c/a\u003eSpring Security 快速入门\u003c/h1\u003e\u003ch2 id=\"快速开始\"\u003e\u003ca href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"\u003e\u003c/a\u003e快速开始\u003c/h2\u003e\u003cp\u003e参考：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://spring.io/guides/gs/securing-web/\"\u003eSecuring a Web Application\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"核心-API\"\u003e\u003ca href=\"#核心-API\" class=\"headerlink\" title=\"核心 API\"\u003e\u003c/a\u003e核心 API\u003c/h2\u003e\u003ch2 id=\"设计原理\"\u003e\u003ca href=\"#设计原理\" class=\"headerlink\" title=\"设计原理\"\u003e\u003c/a\u003e设计原理\u003c/h2\u003e\u003cp\u003eSpring Security 对于 Servlet 的支持基于过滤链（\u003ccode\u003eFilterChain\u003c/code\u003e）实现。\u003c/p\u003e\n\u003cp\u003eSpring 提供了一个名为 \u003ccode\u003eDelegatingFilterProxy\u003c/code\u003e 的 \u003ccode\u003eFilter\u003c/code\u003e 实现，该实现允许在 Servlet 容器的生命周期和 Spring 的 \u003ccode\u003eApplicationContext\u003c/code\u003e 之间进行桥接。 Servlet 容器允许使用其自己的标准注册 Filters，但它不了解 Spring 定义的 Bean。 \u003ccode\u003eDelegatingFilterProxy\u003c/code\u003e 可以通过标准的 Servlet 容器机制进行注册，但是可以将所有工作委托给实现 Filter 的 Spring Bean。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003edoFilter\u003c/span\u003e\u003cspan class=\"params\"\u003e(ServletRequest request, ServletResponse response, FilterChain chain)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// Lazily get Filter that was registered as a Spring Bean\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// For the example in DelegatingFilterProxy delegate is an instance of Bean Filter0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eFilter\u003c/span\u003e \u003cspan class=\"variable\"\u003edelegate\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e getFilterBean(someBeanName);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// delegate work to the Spring Bean\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    delegate.doFilter(request, response);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eFilterChainProxy\u003c/code\u003e 使用 \u003ccode\u003eSecurityFilterChain\u003c/code\u003e 确定应对此请求调用哪些 Spring Security 过滤器。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eSecurityFilterChain\u003c/code\u003e 中的安全过滤器通常是 Bean，但它们是使用 \u003ccode\u003eFilterChainProxy\u003c/code\u003e 而不是 \u003ccode\u003eDelegatingFilterProxy\u003c/code\u003e 注册的。\u003c/p\u003e\n\u003cp\u003e实际上，\u003ccode\u003eFilterChainProxy\u003c/code\u003e 可用于确定应使用哪个 \u003ccode\u003eSecurityFilterChain\u003c/code\u003e。如果您的应用程序可以为不同的模块提供完全独立的配置。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5/images/servlet/architecture/multi-securityfilterchain.png\" alt=\"multi securityfilterchain\"/\u003e\u003c/p\u003e\n\u003cp\u003eExceptionTranslationFilter 可以将 AccessDeniedException 和 AuthenticationException 转换为 HTTP 响应。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5/images/servlet/architecture/exceptiontranslationfilter.png\" alt=\"exceptiontranslationfilter\"/\u003e\u003c/p\u003e\n\u003cp\u003e核心源码：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    filterChain.doFilter(request, response);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (AccessDeniedException | AuthenticationException e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (!authenticated || e \u003cspan class=\"keyword\"\u003einstanceof\u003c/span\u003e AuthenticationException) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        startAuthentication();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        accessDenied();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"认证\"\u003e\u003ca href=\"#认证\" class=\"headerlink\" title=\"认证\"\u003e\u003c/a\u003e认证\u003c/h2\u003e\u003ch3 id=\"数据模型\"\u003e\u003ca href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"\u003e\u003c/a\u003e数据模型\u003c/h3\u003e\u003cp\u003eSpring Security 框架中的认证数据模型如下：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200331115710.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eAuthentication\u003c/code\u003e - 认证信息实体。\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eprincipal\u003c/code\u003e - 用户标识。如：用户名、账户名等。通常是 \u003ccode\u003eUserDetails\u003c/code\u003e 的实例（后面详细讲解）。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecredentials\u003c/code\u003e - 认证凭证。如：密码等。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eauthorities\u003c/code\u003e - 授权信息。如：用户的角色、权限等信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSecurityContext\u003c/code\u003e - 安全上下文。包含一个 \u003ccode\u003eAuthentication\u003c/code\u003e 对象。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSecurityContextHolder\u003c/code\u003e - 安全上下文持有者。用于存储认证信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e【示例】注册认证信息\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eSecurityContext\u003c/span\u003e \u003cspan class=\"variable\"\u003econtext\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e SecurityContextHolder.createEmptyContext();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eAuthentication\u003c/span\u003e \u003cspan class=\"variable\"\u003eauthentication\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eTestingAuthenticationToken\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;password\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;ROLE_USER\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003econtext.setAuthentication(authentication);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSecurityContextHolder.setContext(context);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【示例】访问认证信息\u003c/p\u003e\n\u003ch3 id=\"认证基本流程\"\u003e\u003ca href=\"#认证基本流程\" class=\"headerlink\" title=\"认证基本流程\"\u003e\u003c/a\u003e认证基本流程\u003c/h3\u003e\u003cp\u003eAbstractAuthenticationProcessingFilter 用作验证用户凭据的基本过滤器。 在对凭证进行身份验证之前，Spring Security 通常使用 AuthenticationEntryPoint 请求凭证。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5/images/servlet/authentication/architecture/abstractauthenticationprocessingfilter.png\" alt=\"abstractauthenticationprocessingfilter\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e（1）当用户提交其凭据时，\u003ccode\u003eAbstractAuthenticationProcessingFilter\u003c/code\u003e 从要验证的 \u003ccode\u003eHttpServletRequest\u003c/code\u003e 创建一个 \u003ccode\u003eAuthentication\u003c/code\u003e。创建的身份验证类型取决于 \u003ccode\u003eAbstractAuthenticationProcessingFilter\u003c/code\u003e 的子类。例如，\u003ccode\u003eUsernamePasswordAuthenticationFilter\u003c/code\u003e 根据在 \u003ccode\u003eHttpServletRequest\u003c/code\u003e 中提交的用户名和密码来创建 \u003ccode\u003eUsernamePasswordAuthenticationToken\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e（2）接下来，将身份验证传递到 \u003ccode\u003eAuthenticationManager\u003c/code\u003e 进行身份验证。\u003c/li\u003e\n\u003cli\u003e（3）如果身份验证失败，则认证失败\u003cul\u003e\n\u003cli\u003e清除 \u003ccode\u003eSecurityContextHolder\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e调用 \u003ccode\u003eRememberMeServices.loginFail\u003c/code\u003e。如果没有配置 remember me，则为空。\u003c/li\u003e\n\u003cli\u003e调用 \u003ccode\u003eAuthenticationFailureHandler\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e（4）如果身份验证成功，则认证成功。\u003cul\u003e\n\u003cli\u003e如果是新的登录，则通知 \u003ccode\u003eSessionAuthenticationStrategy\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e身份验证是在 \u003ccode\u003eSecurityContextHolder\u003c/code\u003e 上设置的。之后，\u003ccode\u003eSecurityContextPersistenceFilter\u003c/code\u003e 将 \u003ccode\u003eSecurityContext\u003c/code\u003e 保存到 \u003ccode\u003eHttpSession\u003c/code\u003e 中。\u003c/li\u003e\n\u003cli\u003e调用 \u003ccode\u003eRememberMeServices.loginSuccess\u003c/code\u003e。如果没有配置 remember me，则为空。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eApplicationEventPublisher\u003c/code\u003e 发布一个 \u003ccode\u003eInteractiveAuthenticationSuccessEvent\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"用户名-密码认证\"\u003e\u003ca href=\"#用户名-密码认证\" class=\"headerlink\" title=\"用户名/密码认证\"\u003e\u003c/a\u003e用户名/密码认证\u003c/h3\u003e\u003cp\u003e读取用户名和密码的方式：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e表单\u003c/li\u003e\n\u003cli\u003e基本认证\u003c/li\u003e\n\u003cli\u003e数字认证\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e存储机制\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e内存\u003c/li\u003e\n\u003cli\u003eJDBC\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5/#servlet-authentication-userdetailsservice\"\u003eUserDetailsService\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLDAP\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"表单认证\"\u003e\u003ca href=\"#表单认证\" class=\"headerlink\" title=\"表单认证\"\u003e\u003c/a\u003e表单认证\u003c/h4\u003e\u003cp\u003espring security 支持通过从 html 表单获取登录时提交的用户名、密码。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5/images/servlet/authentication/unpwd/loginurlauthenticationentrypoint.png\" alt=\"loginurlauthenticationentrypoint\"/\u003e\u003c/p\u003e\n\u003cp\u003e一旦，登录信息被提交，\u003ccode\u003eUsernamePasswordAuthenticationFilter\u003c/code\u003e 就会验证用户名和密码。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5/images/servlet/authentication/unpwd/usernamepasswordauthenticationfilter.png\" alt=\"usernamepasswordauthenticationfilter\"/\u003e\u003c/p\u003e\n\u003ch4 id=\"基本认证\"\u003e\u003ca href=\"#基本认证\" class=\"headerlink\" title=\"基本认证\"\u003e\u003c/a\u003e基本认证\u003c/h4\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003econfigure\u003c/span\u003e\u003cspan class=\"params\"\u003e(HttpSecurity http)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    http\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .httpBasic(withDefaults());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"内存认证\"\u003e\u003ca href=\"#内存认证\" class=\"headerlink\" title=\"内存认证\"\u003e\u003c/a\u003e内存认证\u003c/h4\u003e\u003cp\u003e\u003ccode\u003eInMemoryUserDetailsManager\u003c/code\u003e 实现了 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5/#servlet-authentication-userdetailsservice\"\u003eUserDetailsService\u003c/a\u003e ，提供了基本的用户名、密码认证，其认证数据存储在内存中。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@Bean\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e UserDetailsService \u003cspan class=\"title function_\"\u003eusers\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// The builder will ensure the passwords are encoded before saving in memory\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eUserBuilder\u003c/span\u003e \u003cspan class=\"variable\"\u003eusers\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e User.withDefaultPasswordEncoder();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eUserDetails\u003c/span\u003e \u003cspan class=\"variable\"\u003euser\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e users\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .username(\u003cspan class=\"string\"\u003e\u0026#34;user\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .password(\u003cspan class=\"string\"\u003e\u0026#34;password\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .roles(\u003cspan class=\"string\"\u003e\u0026#34;USER\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .build();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eUserDetails\u003c/span\u003e \u003cspan class=\"variable\"\u003euser\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e users\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .username(\u003cspan class=\"string\"\u003e\u0026#34;admin\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .password(\u003cspan class=\"string\"\u003e\u0026#34;password\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .roles(\u003cspan class=\"string\"\u003e\u0026#34;USER\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;ADMIN\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .build();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eInMemoryUserDetailsManager\u003c/span\u003e(user, admin);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"JDBC-认证\"\u003e\u003ca href=\"#JDBC-认证\" class=\"headerlink\" title=\"JDBC 认证\"\u003e\u003c/a\u003eJDBC 认证\u003c/h4\u003e\u003cp\u003eJdbcUserDetailsManager 实现了 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5/#servlet-authentication-userdetailsservice\"\u003eUserDetailsService\u003c/a\u003e ，提供了基本的用户名、密码认证，其认证数据存储在关系型数据库中，通过 JDBC 方式访问。\u003c/p\u003e\n\u003cfigure class=\"highlight nsis\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e@Bean\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eUserDetailsManager users(DataSource dataSource) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    UserDetails \u003cspan class=\"literal\"\u003euser\u003c/span\u003e = \u003cspan class=\"literal\"\u003eUser\u003c/span\u003e.builder()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .username(\u003cspan class=\"string\"\u003e\u0026#34;user\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .password(\u003cspan class=\"string\"\u003e\u0026#34;{bcrypt}\u003cspan class=\"variable\"\u003e$2a\u003c/span\u003e\u003cspan class=\"variable\"\u003e$10\u003c/span\u003e\u003cspan class=\"variable\"\u003e$GRLdNijSQMUvl\u003c/span\u003e/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .roles(\u003cspan class=\"string\"\u003e\u0026#34;USER\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .build()\u003cspan class=\"comment\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    UserDetails \u003cspan class=\"literal\"\u003eadmin\u003c/span\u003e = \u003cspan class=\"literal\"\u003eUser\u003c/span\u003e.builder()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .username(\u003cspan class=\"string\"\u003e\u0026#34;admin\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .password(\u003cspan class=\"string\"\u003e\u0026#34;{bcrypt}\u003cspan class=\"variable\"\u003e$2a\u003c/span\u003e\u003cspan class=\"variable\"\u003e$10\u003c/span\u003e\u003cspan class=\"variable\"\u003e$GRLdNijSQMUvl\u003c/span\u003e/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .roles(\u003cspan class=\"string\"\u003e\u0026#34;USER\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;ADMIN\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .build()\u003cspan class=\"comment\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    JdbcUserDetailsManager users = new JdbcUserDetailsManager(dataSource)\u003cspan class=\"comment\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    users.createUser()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e基本的 scheam：\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ecreate\u003c/span\u003e \u003cspan class=\"keyword\"\u003etable\u003c/span\u003e users(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    username varchar_ignorecase(\u003cspan class=\"number\"\u003e50\u003c/span\u003e) \u003cspan class=\"keyword\"\u003enot\u003c/span\u003e \u003cspan class=\"keyword\"\u003enull\u003c/span\u003e \u003cspan class=\"keyword\"\u003eprimary\u003c/span\u003e key,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    password varchar_ignorecase(\u003cspan class=\"number\"\u003e50\u003c/span\u003e) \u003cspan class=\"keyword\"\u003enot\u003c/span\u003e \u003cspan class=\"keyword\"\u003enull\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    enabled \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"keyword\"\u003enot\u003c/span\u003e \u003cspan class=\"keyword\"\u003enull\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ecreate\u003c/span\u003e \u003cspan class=\"keyword\"\u003etable\u003c/span\u003e authorities (\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    username varchar_ignorecase(\u003cspan class=\"number\"\u003e50\u003c/span\u003e) \u003cspan class=\"keyword\"\u003enot\u003c/span\u003e \u003cspan class=\"keyword\"\u003enull\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    authority varchar_ignorecase(\u003cspan class=\"number\"\u003e50\u003c/span\u003e) \u003cspan class=\"keyword\"\u003enot\u003c/span\u003e \u003cspan class=\"keyword\"\u003enull\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003econstraint\u003c/span\u003e fk_authorities_users \u003cspan class=\"keyword\"\u003eforeign\u003c/span\u003e key(username) \u003cspan class=\"keyword\"\u003ereferences\u003c/span\u003e users(username)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ecreate\u003c/span\u003e \u003cspan class=\"keyword\"\u003eunique\u003c/span\u003e index ix_auth_username \u003cspan class=\"keyword\"\u003eon\u003c/span\u003e authorities (username,authority);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"UserDetailsService\"\u003e\u003ca href=\"#UserDetailsService\" class=\"headerlink\" title=\"UserDetailsService\"\u003e\u003c/a\u003eUserDetailsService\u003c/h4\u003e\u003cp\u003e\u003ccode\u003eUserDetails\u003c/code\u003e 由 \u003ccode\u003eUserDetailsService\u003c/code\u003e 返回。 \u003ccode\u003eDaoAuthenticationProvider\u003c/code\u003e 验证 \u003ccode\u003eUserDetails\u003c/code\u003e，然后返回身份验证，该身份验证的主体是已配置的 \u003ccode\u003eUserDetailsService\u003c/code\u003e 返回的 \u003ccode\u003eUserDetails\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eDaoAuthenticationProvider\u003c/code\u003e 使用 \u003ccode\u003eUserDetailsService\u003c/code\u003e 检索用户名，密码和其他用于使用用户名和密码进行身份验证的属性。 Spring Security 提供 \u003ccode\u003eUserDetailsService\u003c/code\u003e 的内存中和 JDBC 实现。\u003c/p\u003e\n\u003cp\u003e您可以通过将自定义 \u003ccode\u003eUserDetailsService\u003c/code\u003e 公开为 bean 来定义自定义身份验证。\u003c/p\u003e\n\u003ch4 id=\"PasswordEncoder\"\u003e\u003ca href=\"#PasswordEncoder\" class=\"headerlink\" title=\"PasswordEncoder\"\u003e\u003c/a\u003ePasswordEncoder\u003c/h4\u003e\u003cp\u003eSpring Security 的 servlet 支持通过与 \u003ccode\u003ePasswordEncoder\u003c/code\u003e 集成来安全地存储密码。 可以通过公开一个 PasswordEncoder Bean 来定制 Spring Security 使用的 PasswordEncoder 实现。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5/images/servlet/authentication/unpwd/daoauthenticationprovider.png\" alt=\"daoauthenticationprovider\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"Remember-Me\"\u003e\u003ca href=\"#Remember-Me\" class=\"headerlink\" title=\"Remember-Me\"\u003e\u003c/a\u003eRemember-Me\u003c/h3\u003e\u003ch2 id=\"Spring-Boot-集成\"\u003e\u003ca href=\"#Spring-Boot-集成\" class=\"headerlink\" title=\"Spring Boot 集成\"\u003e\u003c/a\u003eSpring Boot 集成\u003c/h2\u003e\u003cp\u003e\u003ccode\u003e@EnableWebSecurity\u003c/code\u003e 和 \u003ccode\u003e@Configuration\u003c/code\u003e 注解一起使用, 注解 \u003ccode\u003eWebSecurityConfigurer\u003c/code\u003e 类型的类。\u003c/p\u003e\n\u003cp\u003e或者利用\u003ccode\u003e@EnableWebSecurity\u003c/code\u003e注解继承 \u003ccode\u003eWebSecurityConfigurerAdapter\u003c/code\u003e 的类，这样就构成了 \u003cem\u003eSpring Security\u003c/em\u003e 的配置。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003econfigure(WebSecurity)：通过重载该方法，可配置 Spring Security 的 Filter 链。\u003c/li\u003e\n\u003cli\u003econfigure(HttpSecurity)：通过重载该方法，可配置如何通过拦截器保护请求。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://spring.io/guides/topicals/spring-security-architecture\"\u003eSpring Security Architecture\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://spring.io/guides/gs/securing-web/\"\u003eSecuring a Web Application\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-02-17T14:34:30Z",
  "Author": "钝悟 ◾ Dunwu"
}