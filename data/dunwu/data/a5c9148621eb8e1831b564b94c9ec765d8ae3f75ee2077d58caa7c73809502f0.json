{
  "Source": "dunwu",
  "Title": "Kafka 生产者",
  "Link": "https://dunwu.github.io/blog/pages/141b2e/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Kafka-生产者\"\u003e\u003ca href=\"#Kafka-生产者\" class=\"headerlink\" title=\"Kafka 生产者\"\u003e\u003c/a\u003eKafka 生产者\u003c/h1\u003e\u003ch2 id=\"生产者简介\"\u003e\u003ca href=\"#生产者简介\" class=\"headerlink\" title=\"生产者简介\"\u003e\u003c/a\u003e生产者简介\u003c/h2\u003e\u003cp\u003e不管是把 Kafka 作为消息队列系统、还是数据存储平台，总是需要一个可以向 Kafka 写入数据的生产者和一个可以从 Kafka 读取数据的消费者，或者是一个兼具两种角色的应用程序。\u003c/p\u003e\n\u003cp\u003e使用 Kafka 的场景很多，诉求也各有不同，主要有：是否允许丢失消息？是否接受重复消息？是否有严格的延迟和吞吐量要求？\u003c/p\u003e\n\u003cp\u003e不同的场景对于 Kafka 生产者 API 的使用和配置会有直接的影响。\u003c/p\u003e\n\u003ch3 id=\"生产者传输实体\"\u003e\u003ca href=\"#生产者传输实体\" class=\"headerlink\" title=\"生产者传输实体\"\u003e\u003c/a\u003e生产者传输实体\u003c/h3\u003e\u003cp\u003eKafka Producer 发送的数据对象叫做 \u003ccode\u003eProducerRecord\u003c/code\u003e ，它有 4 个关键参数：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eTopic\u003c/code\u003e - 主题\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePartition\u003c/code\u003e - 分区（非必填）\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eKey\u003c/code\u003e - 键（非必填）\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eValue\u003c/code\u003e - 值\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"生产者发送流程\"\u003e\u003ca href=\"#生产者发送流程\" class=\"headerlink\" title=\"生产者发送流程\"\u003e\u003c/a\u003e生产者发送流程\u003c/h3\u003e\u003cp\u003eKafka 生产者发送消息流程：\u003c/p\u003e\n\u003cp\u003e（1）\u003cstrong\u003e序列化\u003c/strong\u003e - 发送前，生产者要先把键和值序列化。\u003c/p\u003e\n\u003cp\u003e（2）\u003cstrong\u003e分区\u003c/strong\u003e - 数据被传给分区器。如果在 \u003ccode\u003eProducerRecord\u003c/code\u003e 中已经指定了分区，那么分区器什么也不会做；否则，分区器会根据 \u003ccode\u003eProducerRecord\u003c/code\u003e 的键来选择一个分区。选定分区后，生产者就知道该把消息发送给哪个主题的哪个分区。\u003c/p\u003e\n\u003cp\u003e（3）\u003cstrong\u003e批次传输\u003c/strong\u003e - 接着，这条记录会被添加到一个记录批次中。这个批次中的所有消息都会被发送到相同的主题和分区上。有一个独立的线程负责将这些记录批次发送到相应 Broker 上。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e批次，就是一组消息，这些消息属于同一个主题和分区\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e发送时，会把消息分成批次传输，如果每次只发送一个消息，会占用大量的网路开销。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e（4）\u003cstrong\u003e响应\u003c/strong\u003e - 服务器收到消息会返回一个响应。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果\u003cstrong\u003e成功\u003c/strong\u003e，则返回一个 \u003ccode\u003eRecordMetaData\u003c/code\u003e 对象，它包含了主题、分区、偏移量；\u003c/li\u003e\n\u003cli\u003e如果\u003cstrong\u003e失败\u003c/strong\u003e，则返回一个错误。生产者在收到错误后，可以进行重试，重试次数可以在配置中指定。失败一定次数后，就返回错误消息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200528224323.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e生产者向 Broker 发送消息时是怎么确定向哪一个 Broker 发送消息？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e生产者会向任意 broker 发送一个元数据请求（\u003ccode\u003eMetadataRequest\u003c/code\u003e），获取到每一个分区对应的 Leader 信息，并缓存到本地。\u003c/li\u003e\n\u003cli\u003e生产者在发送消息时，会指定 Partition 或者通过 key 得到到一个 Partition，然后根据 Partition 从缓存中获取相应的 Leader 信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200621113043.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"生产者-API\"\u003e\u003ca href=\"#生产者-API\" class=\"headerlink\" title=\"生产者 API\"\u003e\u003c/a\u003e生产者 API\u003c/h2\u003e\u003cp\u003eKafka 的 Java 生产者 API 主要的对象就是 \u003ccode\u003eKafkaProducer\u003c/code\u003e。通常我们开发一个生产者的步骤有 4 步。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e构造生产者对象所需的参数对象。\u003c/li\u003e\n\u003cli\u003e利用第 1 步的参数对象，创建 \u003ccode\u003eKafkaProducer\u003c/code\u003e 对象实例。\u003c/li\u003e\n\u003cli\u003e使用 \u003ccode\u003eKafkaProducer\u003c/code\u003e 的 \u003ccode\u003esend\u003c/code\u003e 方法发送消息。\u003c/li\u003e\n\u003cli\u003e调用 \u003ccode\u003eKafkaProducer\u003c/code\u003e 的 \u003ccode\u003eclose\u003c/code\u003e 方法关闭生产者并释放各种系统资源。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"创建生产者\"\u003e\u003ca href=\"#创建生产者\" class=\"headerlink\" title=\"创建生产者\"\u003e\u003c/a\u003e创建生产者\u003c/h3\u003e\u003cp\u003eKafka 生产者核心配置：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebootstrap.servers\u003c/code\u003e - 指定了 Producer 启动时要连接的 Broker 地址。注：如果你指定了 1000 个 Broker 连接信息，那么，Producer 启动时就会首先创建与这 1000 个 Broker 的 TCP 连接。在实际使用过程中，并不建议把集群中所有的 Broker 信息都配置到 \u003ccode\u003ebootstrap.servers\u003c/code\u003e 中，通常你指定 3 ～ 4 台就足以了。因为 Producer 一旦连接到集群中的任一台 Broker，就能拿到整个集群的 Broker 信息，故没必要为 \u003ccode\u003ebootstrap.servers\u003c/code\u003e 指定所有的 Broker。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ekey.serializer\u003c/code\u003e - 键的序列化器。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003evalue.serializer\u003c/code\u003e - 值的序列化器。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 指定生产者的配置\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eProperties\u003c/span\u003e \u003cspan class=\"variable\"\u003eproperties\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProperties\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eproperties.put(\u003cspan class=\"string\"\u003e\u0026#34;bootstrap.servers\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;localhost:9092\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 设置 key 的序列化器\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eproperties.put(\u003cspan class=\"string\"\u003e\u0026#34;key.serializer\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;org.apache.kafka.common.serialization.StringSerializer\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 设置 value 的序列化器\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eproperties.put(\u003cspan class=\"string\"\u003e\u0026#34;value.serializer\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;org.apache.kafka.common.serialization.StringSerializer\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 使用配置初始化 Kafka 生产者\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer\u0026lt;String, String\u0026gt; producer = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eKafkaProducer\u003c/span\u003e\u0026lt;\u0026gt;(properties);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"异步发送\"\u003e\u003ca href=\"#异步发送\" class=\"headerlink\" title=\"异步发送\"\u003e\u003c/a\u003e异步发送\u003c/h3\u003e\u003cp\u003e直接发送消息，不关心消息是否到达。\u003c/p\u003e\n\u003cp\u003e这种方式吞吐量最高，但有小概率会丢失消息。\u003c/p\u003e\n\u003cp\u003e【示例】异步发送\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eProducerRecord\u0026lt;String, String\u0026gt; record =\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProducerRecord\u003c/span\u003e\u0026lt;\u0026gt;(\u003cspan class=\"string\"\u003e\u0026#34;CustomerCountry\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Precision Products\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;France\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    producer.send(record);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (Exception e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    e.printStackTrace();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"同步发送\"\u003e\u003ca href=\"#同步发送\" class=\"headerlink\" title=\"同步发送\"\u003e\u003c/a\u003e同步发送\u003c/h3\u003e\u003cp\u003e返回一个 \u003ccode\u003eFuture\u003c/code\u003e 对象，调用 \u003ccode\u003eget()\u003c/code\u003e 方法，会一直阻塞等待 \u003ccode\u003eBroker\u003c/code\u003e 返回结果。\u003c/p\u003e\n\u003cp\u003e这是一种可靠传输方式，但吞吐量最差。\u003c/p\u003e\n\u003cp\u003e【示例】同步发送\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eProducerRecord\u0026lt;String, String\u0026gt; record =\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProducerRecord\u003c/span\u003e\u0026lt;\u0026gt;(\u003cspan class=\"string\"\u003e\u0026#34;CustomerCountry\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Precision Products\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;France\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    producer.send(record).get();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (Exception e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    e.printStackTrace();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"异步响应发送\"\u003e\u003ca href=\"#异步响应发送\" class=\"headerlink\" title=\"异步响应发送\"\u003e\u003c/a\u003e异步响应发送\u003c/h3\u003e\u003cp\u003e代码如下，异步方式相对于“发送并忽略返回”的方式的不同在于：在异步返回时可以执行一些操作，如：抛出异常、记录错误日志。\u003c/p\u003e\n\u003cp\u003e这是一个折中的方案，即兼顾吞吐量，也保证消息不丢失。\u003c/p\u003e\n\u003cp\u003e【示例】异步响应发送\u003c/p\u003e\n\u003cp\u003e首先，定义一个 callback：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eDemoProducerCallback\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eCallback\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eonCompletion\u003c/span\u003e\u003cspan class=\"params\"\u003e(RecordMetadata recordMetadata, Exception e)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e           \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (e != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e               e.printStackTrace();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e             }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e然后，使用这个 callback：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eProducerRecord\u0026lt;String, String\u0026gt; record =\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProducerRecord\u003c/span\u003e\u0026lt;\u0026gt;(\u003cspan class=\"string\"\u003e\u0026#34;CustomerCountry\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Biomedical Materials\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;USA\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eproducer.send(record, \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eDemoProducerCallback\u003c/span\u003e());\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"关闭连接\"\u003e\u003ca href=\"#关闭连接\" class=\"headerlink\" title=\"关闭连接\"\u003e\u003c/a\u003e关闭连接\u003c/h3\u003e\u003cp\u003e调用 \u003ccode\u003eproducer.close()\u003c/code\u003e 方法可以关闭 Kafka 生产者连接。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eProducer\u0026lt;String, String\u0026gt; producer = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eKafkaProducer\u003c/span\u003e\u0026lt;\u0026gt;(properties);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   producer.send(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProducerRecord\u003c/span\u003e\u0026lt;\u0026gt;(topic, msg));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (Exception e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    e.printStackTrace();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 关闭连接\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    producer.close();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"生产者的连接\"\u003e\u003ca href=\"#生产者的连接\" class=\"headerlink\" title=\"生产者的连接\"\u003e\u003c/a\u003e生产者的连接\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eApache Kafka 的所有通信都是基于 TCP 的\u003c/strong\u003e。无论是生产者、消费者，还是 Broker 之间的通信都是如此。\u003c/p\u003e\n\u003cp\u003e选用 TCP 连接是由于 TCP 本身提供的一些高级功能，如多路复用请求以及同时轮询多个连接的能力。\u003c/p\u003e\n\u003ch3 id=\"何时创建-TCP-连接\"\u003e\u003ca href=\"#何时创建-TCP-连接\" class=\"headerlink\" title=\"何时创建 TCP 连接\"\u003e\u003c/a\u003e何时创建 TCP 连接\u003c/h3\u003e\u003cp\u003eKafka 生产者创建连接有三个时机：\u003c/p\u003e\n\u003cp\u003e（1）在\u003cstrong\u003e创建 KafkaProducer 实例时\u003c/strong\u003e，生产者应用会在后台创建并启动一个名为 Sender 的线程，该 Sender 线程开始运行时，首先会创建与 \u003ccode\u003ebootstrap.servers\u003c/code\u003e 中所有 Broker 的 TCP 连接。\u003c/p\u003e\n\u003cp\u003e（2）当 Producer \u003cstrong\u003e更新集群的元数据信息\u003c/strong\u003e之后，如果发现与某些 Broker 当前没有连接，那么它就会创建一个 TCP 连接。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e场景一：当 Producer 尝试给一个不存在的主题发送消息时，Broker 会告诉 Producer 说这个主题不存在。此时 Producer 会发送 METADATA 请求给 Kafka 集群，去尝试获取最新的元数据信息。\u003c/li\u003e\n\u003cli\u003e场景二：Producer 通过 \u003ccode\u003emetadata.max.age.ms\u003c/code\u003e 参数定期地去更新元数据信息。该参数的默认值是 300000，即 5 分钟，也就是说不管集群那边是否有变化，Producer 每 5 分钟都会强制刷新一次元数据以保证它是最及时的数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e（3）当要\u003cstrong\u003e发送消息时\u003c/strong\u003e，Producer 发现尚不存在与目标 Broker 的连接，会创建一个 TCP 连接。\u003c/p\u003e\n\u003ch3 id=\"何时关闭-TCP-连接\"\u003e\u003ca href=\"#何时关闭-TCP-连接\" class=\"headerlink\" title=\"何时关闭 TCP 连接\"\u003e\u003c/a\u003e何时关闭 TCP 连接\u003c/h3\u003e\u003cp\u003eProducer 端关闭 TCP 连接的方式有两种：\u003cstrong\u003e一种是用户主动关闭；一种是 Kafka 自动关闭\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e主动关闭是指调用 \u003ccode\u003eproducer.close()\u003c/code\u003e 方法来关闭生产者连接；甚至包括用户调用 \u003ccode\u003ekill -9\u003c/code\u003e 主动“杀掉”Producer 应用。\u003c/p\u003e\n\u003cp\u003e如果设置 Producer 端 \u003ccode\u003econnections.max.idle.ms\u003c/code\u003e 参数大于 0（默认为 9 分钟），意味着，在 \u003ccode\u003econnections.max.idle.ms\u003c/code\u003e 指定时间内，如果没有任何请求“流过”某个 TCP 连接，那么 Kafka 会主动帮你把该 TCP 连接关闭。如果设置该参数为 \u003ccode\u003e-1\u003c/code\u003e，TCP 连接将成为永久长连接。\u003c/p\u003e\n\u003cp\u003e值得注意的是，在第二种方式中，TCP 连接是在 Broker 端被关闭的，但其实这个 TCP 连接的发起方是客户端，因此在 TCP 看来，这属于被动关闭的场景，即 passive close。被动关闭的后果就是会产生大量的 CLOSE_WAIT 连接，因此 Producer 端或 Client 端没有机会显式地观测到此连接已被中断。\u003c/p\u003e\n\u003ch2 id=\"序列化\"\u003e\u003ca href=\"#序列化\" class=\"headerlink\" title=\"序列化\"\u003e\u003c/a\u003e序列化\u003c/h2\u003e\u003cp\u003eKafka 内置了常用 Java 基础类型的序列化器，如：\u003ccode\u003eStringSerializer\u003c/code\u003e、\u003ccode\u003eIntegerSerializer\u003c/code\u003e、\u003ccode\u003eDoubleSerializer\u003c/code\u003e 等。\u003c/p\u003e\n\u003cp\u003e但如果要传输较为复杂的对象，推荐使用序列化性能更高的工具，如：Avro、Thrift、Protobuf 等。\u003c/p\u003e\n\u003cp\u003e使用方式是通过实现 \u003ccode\u003eorg.apache.kafka.common.serialization.Serializer\u003c/code\u003e 接口来引入自定义的序列化器。\u003c/p\u003e\n\u003ch2 id=\"分区\"\u003e\u003ca href=\"#分区\" class=\"headerlink\" title=\"分区\"\u003e\u003c/a\u003e分区\u003c/h2\u003e\u003ch3 id=\"什么是分区\"\u003e\u003ca href=\"#什么是分区\" class=\"headerlink\" title=\"什么是分区\"\u003e\u003c/a\u003e什么是分区\u003c/h3\u003e\u003cp\u003eKafka 的数据结构采用三级结构，即：主题（Topic）、分区（Partition）、消息（Record）。\u003c/p\u003e\n\u003cp\u003e在 Kafka 中，任意一个 Topic 维护了一组 Partition 日志，如下所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/distributed/mq/kafka/kafka-log-anatomy.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e每个 Partition 都是一个单调递增的、不可变的日志记录，以不断追加的方式写入数据。Partition 中的每条记录会被分配一个单调递增的 id 号，称为偏移量（Offset），用于唯一标识 Partition 内的每条记录。\u003c/p\u003e\n\u003ch3 id=\"为什么要分区\"\u003e\u003ca href=\"#为什么要分区\" class=\"headerlink\" title=\"为什么要分区\"\u003e\u003c/a\u003e为什么要分区\u003c/h3\u003e\u003cp\u003e为什么 Kafka 的数据结构采用三级结构？\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e分区的作用就是提供负载均衡的能力\u003c/strong\u003e，以实现系统的高伸缩性（Scalability）。\u003c/p\u003e\n\u003cp\u003e不同的分区能够被放置到不同节点的机器上，而数据的读写操作也都是针对分区这个粒度而进行的，这样每个节点的机器都能独立地执行各自分区的读写请求处理。并且，我们还可以通过添加新的机器节点来增加整体系统的吞吐量。\u003c/p\u003e\n\u003ch3 id=\"分区策略\"\u003e\u003ca href=\"#分区策略\" class=\"headerlink\" title=\"分区策略\"\u003e\u003c/a\u003e分区策略\u003c/h3\u003e\u003cp\u003e所谓分区策略是决定生产者将消息发送到哪个分区的算法，也就是负载均衡算法。\u003c/p\u003e\n\u003cp\u003e前文中已经提到，Kafka 生产者发送消息使用的对象 \u003ccode\u003eProducerRecord\u003c/code\u003e ，可以选填 Partition 和 Key。不过，大多数应用会用到 key。key 有两个作用：作为消息的附加信息；也可以用来决定消息该被写到 Topic 的哪个 Partition，拥有相同 key 的消息将被写入同一个 Partition。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e如果 \u003ccode\u003eProducerRecord\u003c/code\u003e 指定了 Partition，则分区器什么也不做\u003c/strong\u003e，否则分区器会根据 key 选择一个 Partition 。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e没有 key 时的分发逻辑：每隔 \u003ccode\u003etopic.metadata.refresh.interval.ms\u003c/code\u003e 的时间，随机选择一个 partition。这个时间窗口内的所有记录发送到这个 partition。发送数据出错后会重新选择一个 partition。\u003c/li\u003e\n\u003cli\u003e根据 key 分发：Kafka 的选择分区策略是：根据 key 求 hash 值，然后将 hash 值对 partition 数量求模。这里的关键点在于，\u003cstrong\u003e同一个 key 总是被映射到同一个 Partition 上\u003c/strong\u003e。所以，在选择分区时，Kafka 会使用 Topic 的所有 Partition ，而不仅仅是可用的 Partition。这意味着，\u003cstrong\u003e如果写入数据的 Partition 是不可用的，那么就会出错\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"自定义分区策略\"\u003e\u003ca href=\"#自定义分区策略\" class=\"headerlink\" title=\"自定义分区策略\"\u003e\u003c/a\u003e自定义分区策略\u003c/h3\u003e\u003cp\u003e如果 Kafka 的默认分区策略无法满足实际需要，可以自定义分区策略。需要显式地配置生产者端的参数 \u003ccode\u003epartitioner.class\u003c/code\u003e。这个参数该怎么设定呢？\u003c/p\u003e\n\u003cp\u003e首先，要实现 \u003ccode\u003eorg.apache.kafka.clients.producer.Partitioner\u003c/code\u003e 接口。这个接口定义了两个方法：\u003ccode\u003epartition\u003c/code\u003e 和 \u003ccode\u003eclose\u003c/code\u003e，通常只需要实现最重要的 \u003ccode\u003epartition\u003c/code\u003e 方法。我们来看看这个方法的方法签名：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003epartition\u003c/span\u003e\u003cspan class=\"params\"\u003e(String topic, Object key, \u003cspan class=\"type\"\u003ebyte\u003c/span\u003e[] keyBytes, Object value, \u003cspan class=\"type\"\u003ebyte\u003c/span\u003e[] valueBytes, Cluster cluster)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里的 \u003ccode\u003etopic\u003c/code\u003e、\u003ccode\u003ekey\u003c/code\u003e、\u003ccode\u003ekeyBytes\u003c/code\u003e、\u003ccode\u003evalue\u003c/code\u003e和 \u003ccode\u003evalueBytes\u003c/code\u003e 都属于消息数据，\u003ccode\u003ecluster\u003c/code\u003e 则是集群信息（比如当前 Kafka 集群共有多少主题、多少 Broker 等）。Kafka 给你这么多信息，就是希望让你能够充分地利用这些信息对消息进行分区，计算出它要被发送到哪个分区中。\u003c/p\u003e\n\u003cp\u003e接着，设置 \u003ccode\u003epartitioner.class\u003c/code\u003e 参数为自定义类的全限定名，那么生产者程序就会按照你的代码逻辑对消息进行分区。\u003c/p\u003e\n\u003cp\u003e负载均衡算法常见的有：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e随机算法\u003c/li\u003e\n\u003cli\u003e轮询算法\u003c/li\u003e\n\u003cli\u003e最小活跃数算法\u003c/li\u003e\n\u003cli\u003e源地址哈希算法\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e可以根据实际需要去实现。\u003c/p\u003e\n\u003ch2 id=\"压缩\"\u003e\u003ca href=\"#压缩\" class=\"headerlink\" title=\"压缩\"\u003e\u003c/a\u003e压缩\u003c/h2\u003e\u003ch3 id=\"Kafka-的消息格式\"\u003e\u003ca href=\"#Kafka-的消息格式\" class=\"headerlink\" title=\"Kafka 的消息格式\"\u003e\u003c/a\u003eKafka 的消息格式\u003c/h3\u003e\u003cp\u003e目前，Kafka 共有两大类消息格式，社区分别称之为 V1 版本和 V2 版本。V2 版本是 Kafka 0.11.0.0 中正式引入的。\u003c/p\u003e\n\u003cp\u003e不论是哪个版本，Kafka 的消息层次都分为两层：消息集合（message set）以及消息（message）。一个消息集合中包含若干条日志项（record item），而日志项才是真正封装消息的地方。Kafka 底层的消息日志由一系列消息集合日志项组成。Kafka 通常不会直接操作具体的一条条消息，它总是在消息集合这个层面上进行写入操作。\u003c/p\u003e\n\u003cp\u003e那么社区引入 V2 版本的目的是什么呢？V2 版本主要是针对 V1 版本的一些弊端做了修正。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e在 V1 版本中，每条消息都需要执行 CRC 校验\u003c/strong\u003e。但有些情况下消息的 CRC 值是会发生变化的。比如在 Broker 端可能会对消息时间戳字段进行更新，那么重新计算之后的 CRC 值也会相应更新；再比如 Broker 端在执行消息格式转换时（主要是为了兼容老版本客户端程序），也会带来 CRC 值的变化。鉴于这些情况，再对每条消息都执行 CRC 校验就有点没必要了，不仅浪费空间还耽误 CPU 时间。\u003c/p\u003e\n\u003cp\u003e因此，\u003cstrong\u003e在 V2 版本中，只对消息集合执行 CRC 校验\u003c/strong\u003e。V2 版本还有一个和压缩息息相关的改进，就是保存压缩消息的方法发生了变化。之前 V1 版本中保存压缩消息的方法是把多条消息进行压缩然后保存到外层消息的消息体字段中；而 V2 版本的做法是对整个消息集合进行压缩。显然后者应该比前者有更好的压缩效果。\u003c/p\u003e\n\u003ch3 id=\"Kafka-的压缩流程\"\u003e\u003ca href=\"#Kafka-的压缩流程\" class=\"headerlink\" title=\"Kafka 的压缩流程\"\u003e\u003c/a\u003eKafka 的压缩流程\u003c/h3\u003e\u003cp\u003eKafka 的压缩流程，一言以概之——\u003cstrong\u003eProducer 端压缩、Broker 端保持、Consumer 端解压缩。\u003c/strong\u003e\u003c/p\u003e\n\u003ch4 id=\"压缩过程\"\u003e\u003ca href=\"#压缩过程\" class=\"headerlink\" title=\"压缩过程\"\u003e\u003c/a\u003e压缩过程\u003c/h4\u003e\u003cp\u003e在 Kafka 中，压缩可能发生在两个地方：生产者端和 Broker 端。\u003c/p\u003e\n\u003cp\u003e生产者程序中配置 \u003ccode\u003ecompression.type\u003c/code\u003e 参数即表示启用指定类型的压缩算法。\u003c/p\u003e\n\u003cp\u003e【示例】开启 GZIP 的 Producer 对象\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eProperties\u003c/span\u003e \u003cspan class=\"variable\"\u003eprops\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProperties\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprops.put(\u003cspan class=\"string\"\u003e\u0026#34;bootstrap.servers\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;localhost:9092\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprops.put(\u003cspan class=\"string\"\u003e\u0026#34;acks\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;all\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprops.put(\u003cspan class=\"string\"\u003e\u0026#34;key.serializer\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;org.apache.kafka.common.serialization.StringSerializer\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprops.put(\u003cspan class=\"string\"\u003e\u0026#34;value.serializer\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;org.apache.kafka.common.serialization.StringSerializer\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 开启 GZIP 压缩\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprops.put(\u003cspan class=\"string\"\u003e\u0026#34;compression.type\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;gzip\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer\u0026lt;String, String\u0026gt; producer = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eKafkaProducer\u003c/span\u003e\u0026lt;\u0026gt;(props);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e通常，Broker 从 Producer 端接收到消息后，不做任何处理。以下两种情况除外：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e情况一：\u003cstrong\u003eBroker 端指定了和 Producer 端不同的压缩算法\u003c/strong\u003e。显然，应该尽量避免这种情况。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e情况二：\u003cstrong\u003eBroker 端发生了消息格式转换\u003c/strong\u003e。所谓的消息格式转换，主要是为了兼容老版本的消费者程序。在一个生产环境中，Kafka 集群中同时保存多种版本的消息格式非常常见。为了兼容老版本的格式，Broker 端会对新版本消息执行向老版本格式的转换。这个过程中会涉及消息的解压缩和重新压缩。一般情况下这种消息格式转换对性能是有很大影响的，除了这里的压缩之外，它还让 Kafka 丧失了引以为豪的 Zero Copy 特性。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所谓零拷贝，说的是当数据在磁盘和网络进行传输时避免昂贵的内核态数据拷贝，从而实现快速的数据传输。因此如果 Kafka 享受不到这个特性的话，性能必然有所损失，所以尽量保证消息格式的统一吧，这样不仅可以避免不必要的解压缩 / 重新压缩，对提升其他方面的性能也大有裨益。\u003c/p\u003e\n\u003ch4 id=\"解压缩的过程\"\u003e\u003ca href=\"#解压缩的过程\" class=\"headerlink\" title=\"解压缩的过程\"\u003e\u003c/a\u003e解压缩的过程\u003c/h4\u003e\u003cp\u003e通常来说解压缩发生在消费者程序中，也就是说 Producer 发送压缩消息到 Broker 后，Broker 照单全收并原样保存起来。当 Consumer 程序请求这部分消息时，Broker 依然原样发送出去，当消息到达 Consumer 端后，由 Consumer 自行解压缩还原成之前的消息。\u003c/p\u003e\n\u003cp\u003e那么现在问题来了，Consumer 怎么知道这些消息是用何种压缩算法压缩的呢？其实答案就在消息中。Kafka 会将启用了哪种压缩算法封装进消息集合中，这样当 Consumer 读取到消息集合时，它自然就知道了这些消息使用的是哪种压缩算法。\u003c/p\u003e\n\u003ch4 id=\"压缩算法\"\u003e\u003ca href=\"#压缩算法\" class=\"headerlink\" title=\"压缩算法\"\u003e\u003c/a\u003e压缩算法\u003c/h4\u003e\u003cp\u003e在 Kafka 2.1.0 版本之前，Kafka 支持 3 种压缩算法：GZIP、Snappy 和 LZ4。从 2.1.0 开始，Kafka 正式支持 Zstandard 算法（简写为 zstd）。\u003c/p\u003e\n\u003cp\u003e在实际使用中，GZIP、Snappy、LZ4 甚至是 zstd 的表现各有千秋。但对于 Kafka 而言，它们的性能测试结果却出奇得一致，即在吞吐量方面：LZ4 \u0026gt; Snappy \u0026gt; zstd 和 GZIP；而在压缩比方面，zstd \u0026gt; LZ4 \u0026gt; GZIP \u0026gt; Snappy。\u003c/p\u003e\n\u003cp\u003e如果客户端机器 CPU 资源有很多富余，\u003cstrong\u003e强烈建议开启 zstd 压缩，这样能极大地节省网络资源消耗\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"何时启用压缩\"\u003e\u003ca href=\"#何时启用压缩\" class=\"headerlink\" title=\"何时启用压缩\"\u003e\u003c/a\u003e何时启用压缩\u003c/h3\u003e\u003cp\u003e何时启用压缩是比较合适的时机呢？\u003c/p\u003e\n\u003cp\u003e压缩是在 Producer 端完成的工作，那么启用压缩的一个条件就是 Producer 程序运行机器上的 \u003cstrong\u003eCPU 资源要很充足\u003c/strong\u003e。如果 Producer 运行机器本身 CPU 已经消耗殆尽了，那么启用消息压缩无疑是雪上加霜，只会适得其反。\u003c/p\u003e\n\u003cp\u003e如果环境中带宽资源有限，那么也建议开启压缩。\u003c/p\u003e\n\u003ch2 id=\"幂等性\"\u003e\u003ca href=\"#幂等性\" class=\"headerlink\" title=\"幂等性\"\u003e\u003c/a\u003e幂等性\u003c/h2\u003e\u003ch3 id=\"什么是幂等性\"\u003e\u003ca href=\"#什么是幂等性\" class=\"headerlink\" title=\"什么是幂等性\"\u003e\u003c/a\u003e什么是幂等性\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e幂等\u003c/strong\u003e（idempotent、idempotence）是一个数学与计算机学概念，指的是：\u003cstrong\u003e一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id=\"Kafka-Producer-的幂等性\"\u003e\u003ca href=\"#Kafka-Producer-的幂等性\" class=\"headerlink\" title=\"Kafka Producer 的幂等性\"\u003e\u003c/a\u003eKafka Producer 的幂等性\u003c/h3\u003e\u003cp\u003e在 Kafka 中，Producer \u003cstrong\u003e默认不是幂等性的\u003c/strong\u003e，但我们可以创建幂等性 Producer。它其实是 0.11.0.0 版本引入的新功能。在此之前，Kafka 向分区发送数据时，可能会出现同一条消息被发送了多次，导致消息重复的情况。在 0.11 之后，指定 Producer 幂等性的方法很简单，仅需要设置一个参数即可，即 \u003ccode\u003eprops.put(“enable.idempotence”, ture)\u003c/code\u003e，或 \u003ccode\u003eprops.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG， true)\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eenable.idempotence\u003c/code\u003e 被设置成 true 后，Producer 自动升级成幂等性 Producer，其他所有的代码逻辑都不需要改变。Kafka 自动帮你做消息的去重。底层具体的原理很简单，就是经典的用空间去换时间的优化思路，即在 Broker 端多保存一些字段。当 Producer 发送了具有相同字段值的消息后，Broker 能够自动知晓这些消息已经重复了，于是可以在后台默默地把它们“丢弃”掉。当然，实际的实现原理并没有这么简单，但你大致可以这么理解。\u003c/p\u003e\n\u003cp\u003e我们必须要了解幂等性 Producer 的作用范围：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e首先，**\u003ccode\u003eenable.idempotence\u003c/code\u003e 只能保证单分区上的幂等性**，即一个幂等性 Producer 能够保证某个主题的一个分区上不出现重复消息，它无法实现多个分区的幂等性。\u003c/li\u003e\n\u003cli\u003e其次，\u003cstrong\u003e它只能实现单会话上的幂等性，不能实现跨会话的幂等性\u003c/strong\u003e。这里的会话，你可以理解为 Producer 进程的一次运行。当你重启了 Producer 进程之后，这种幂等性保证就丧失了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果想实现多分区以及多会话上的消息无重复，应该怎么做呢？答案就是事务（transaction）或者依赖事务型 Producer。这也是幂等性 Producer 和事务型 Producer 的最大区别！\u003c/p\u003e\n\u003ch3 id=\"PID-和-Sequence-Number\"\u003e\u003ca href=\"#PID-和-Sequence-Number\" class=\"headerlink\" title=\"PID 和 Sequence Number\"\u003e\u003c/a\u003ePID 和 Sequence Number\u003c/h3\u003e\u003cp\u003e为了实现 Producer 的幂等性，Kafka 引入了 Producer ID（即 PID）和 Sequence Number。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePID\u003c/strong\u003e。每个新的 Producer 在初始化的时候会被分配一个唯一的 PID，这个 PID 对用户是不可见的。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSequence Numbler\u003c/strong\u003e。对于每个 PID，该 Producer 发送数据的每个 \u003ccode\u003e\u0026lt;Topic, Partition\u0026gt;\u003c/code\u003e 都对应一个从 0 开始单调递增的 Sequence Number。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBroker 端在缓存中保存了这 seq number，对于接收的每条消息，如果其序号比 Broker 缓存中序号大于 1 则接受它，否则将其丢弃。这样就可以实现了消息重复提交了。但是，只能保证单个 Producer 对于同一个 \u003ccode\u003e\u0026lt;Topic, Partition\u0026gt;\u003c/code\u003e 的 Exactly Once 语义。不能保证同一个 Producer 一个 topic 不同的 partion 幂等。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.heartthinkdo.com/wp-content/uploads/2018/05/1-1.png\" alt=\"img\"/\u003e\u003cbr/\u003e实现幂等之后：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.heartthinkdo.com/wp-content/uploads/2018/05/2.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"生成-PID-的流程\"\u003e\u003ca href=\"#生成-PID-的流程\" class=\"headerlink\" title=\"生成 PID 的流程\"\u003e\u003c/a\u003e生成 PID 的流程\u003c/h3\u003e\u003cp\u003e在执行创建事务时，如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eProducer\u0026lt;String, String\u0026gt; producer = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eKafkaProducer\u003c/span\u003e\u0026lt;String, String\u0026gt;(props);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e会创建一个 Sender，并启动线程，执行如下 run 方法，在 maybeWaitForProducerId()中生成一个 producerId，如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e====================================\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e类名：Sender\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e====================================\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003elong\u003c/span\u003e now)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (transactionManager != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                 ........\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (!transactionManager.isTransactional()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"comment\"\u003e// 为idempotent producer生成一个producer id\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    maybeWaitForProducerId();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (transactionManager.hasUnresolvedSequences() \u0026amp;\u0026amp; !transactionManager.hasFatalError()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                   ........\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"幂等性的应用实例\"\u003e\u003ca href=\"#幂等性的应用实例\" class=\"headerlink\" title=\"幂等性的应用实例\"\u003e\u003c/a\u003e幂等性的应用实例\u003c/h3\u003e\u003cp\u003e（1）配置属性\u003c/p\u003e\n\u003cp\u003e需要设置：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eenable.idempotence\u003c/code\u003e，需要设置为 ture，此时就会默认把 acks 设置为 all，所以不需要再设置 acks 属性了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 指定生产者的配置\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eProperties\u003c/span\u003e \u003cspan class=\"variable\"\u003eproperties\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProperties\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eproperties.put(\u003cspan class=\"string\"\u003e\u0026#34;bootstrap.servers\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;localhost:9092\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 设置 key 的序列化器\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eproperties.put(\u003cspan class=\"string\"\u003e\u0026#34;key.serializer\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;org.apache.kafka.common.serialization.StringSerializer\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 设置 value 的序列化器\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eproperties.put(\u003cspan class=\"string\"\u003e\u0026#34;value.serializer\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;org.apache.kafka.common.serialization.StringSerializer\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 开启幂等性\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eproperties.put(\u003cspan class=\"string\"\u003e\u0026#34;enable.idempotence\u0026#34;\u003c/span\u003e, \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 设置重试次数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eproperties.put(\u003cspan class=\"string\"\u003e\u0026#34;retries\u0026#34;\u003c/span\u003e, \u003cspan class=\"number\"\u003e3\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//Reduce the no of requests less than 0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eproperties.put(\u003cspan class=\"string\"\u003e\u0026#34;linger.ms\u0026#34;\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// buffer.memory 控制生产者可用于缓冲的内存总量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eproperties.put(\u003cspan class=\"string\"\u003e\u0026#34;buffer.memory\u0026#34;\u003c/span\u003e, \u003cspan class=\"number\"\u003e33554432\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 使用配置初始化 Kafka 生产者\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eproducer = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eKafkaProducer\u003c/span\u003e\u0026lt;\u0026gt;(properties);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e（2）发送消息\u003c/p\u003e\n\u003cp\u003e跟一般生产者一样，如下\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eproduceIdempotMessage\u003c/span\u003e\u003cspan class=\"params\"\u003e(String topic, String message)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 创建Producer\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eProducer\u003c/span\u003e \u003cspan class=\"variable\"\u003eproducer\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e buildIdempotProducer();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 发送消息\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    producer.send(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProducerRecord\u003c/span\u003e\u0026lt;String, String\u0026gt;(topic, message));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    producer.flush();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e此时，因为我们并没有配置 \u003ccode\u003etransaction.id\u003c/code\u003e 属性，所以不能使用事务相关 API，如下\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eproducer.initTransactions();\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e否则会出现如下错误：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eException in thread “main” java.lang.IllegalStateException: Transactional method invoked on a non-transactional producer.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    at org.apache.kafka.clients.producer.internals.TransactionManager.ensureTransactional(TransactionManager.java:\u003cspan class=\"number\"\u003e777\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    at org.apache.kafka.clients.producer.internals.TransactionManager.initializeTransactions(TransactionManager.java:\u003cspan class=\"number\"\u003e202\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    at org.apache.kafka.clients.producer.KafkaProducer.initTransactions(KafkaProducer.java:\u003cspan class=\"number\"\u003e544\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"Kafka-事务\"\u003e\u003ca href=\"#Kafka-事务\" class=\"headerlink\" title=\"Kafka 事务\"\u003e\u003c/a\u003eKafka 事务\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eKafka 的事务概念是指一系列的生产者生产消息和消费者提交偏移量的操作在一个事务，或者说是是一个原子操作），同时成功或者失败\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e消息可靠性保障，由低到高为：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e最多一次（at most once）：消息可能会丢失，但绝不会被重复发送。\u003c/li\u003e\n\u003cli\u003e至少一次（at least once）：消息不会丢失，但有可能被重复发送。\u003c/li\u003e\n\u003cli\u003e精确一次（exactly once）：消息不会丢失，也不会被重复发送。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eKafka 支持事务功能主要是为了实现精确一次处理语义的，而精确一次处理是实现流处理的基石。\u003c/p\u003e\n\u003ch3 id=\"事务\"\u003e\u003ca href=\"#事务\" class=\"headerlink\" title=\"事务\"\u003e\u003c/a\u003e事务\u003c/h3\u003e\u003cp\u003eKafka 自 0.11 版本开始提供了对事务的支持，目前主要是在 read committed 隔离级别上做事情。它能\u003cstrong\u003e保证多条消息原子性地写入到目标分区，同时也能保证 Consumer 只能看到事务成功提交的消息\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"事务型-Producer\"\u003e\u003ca href=\"#事务型-Producer\" class=\"headerlink\" title=\"事务型 Producer\"\u003e\u003c/a\u003e事务型 Producer\u003c/h3\u003e\u003cp\u003e事务型 Producer 能够保证将消息原子性地写入到多个分区中。这批消息要么全部写入成功，要么全部失败。另外，事务型 Producer 也不惧进程的重启。Producer 重启回来后，Kafka 依然保证它们发送消息的精确一次处理。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e事务属性实现前提是幂等性\u003c/strong\u003e，即在配置事务属性 \u003ccode\u003etransaction.id\u003c/code\u003e 时，必须还得配置幂等性；但是幂等性是可以独立使用的，不需要依赖事务属性。\u003c/p\u003e\n\u003cp\u003e在事务属性之前先引入了生产者幂等性，它的作用为：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e生产者多次发送消息可以封装成一个原子操作\u003c/strong\u003e，要么都成功，要么失败。\u003c/li\u003e\n\u003cli\u003econsumer-transform-producer 模式下，因为消费者提交偏移量出现问题，导致\u003cstrong\u003e重复消费\u003c/strong\u003e。需要将这个模式下消费者提交偏移量操作和生产者一系列生成消息的操作封装成一个原子操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e消费者提交偏移量导致重复消费消息的场景\u003c/strong\u003e：消费者在消费消息完成提交便宜量 o2 之前挂掉了（假设它最近提交的偏移量是 o1），此时执行再均衡时，其它消费者会重复消费消息(o1 到 o2 之间的消息）。\u003c/p\u003e\n\u003ch3 id=\"事务操作的-API\"\u003e\u003ca href=\"#事务操作的-API\" class=\"headerlink\" title=\"事务操作的 API\"\u003e\u003c/a\u003e事务操作的 API\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eProducer\u003c/code\u003e 提供了 \u003ccode\u003einitTransactions\u003c/code\u003e, \u003ccode\u003ebeginTransaction\u003c/code\u003e, \u003ccode\u003esendOffsets\u003c/code\u003e, \u003ccode\u003ecommitTransaction\u003c/code\u003e, \u003ccode\u003eabortTransaction\u003c/code\u003e 五个事务方法。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 初始化事务。需要注意的有：\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 1、前提\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 需要保证transation.id属性被配置。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 2、这个方法执行逻辑是：\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e *   （1）Ensures any transactions initiated by previous instances of the producer with the same\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e *      transactional.id are completed. If the previous instance had failed with a transaction in\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e *      progress, it will be aborted. If the last transaction had begun completion,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e *      but not yet finished, this method awaits its completion.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e *    （2）Gets the internal producer id and epoch, used in all future transactional\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e *      messages issued by the producer.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e *\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003einitTransactions\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 开启事务\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003ebeginTransaction\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ProducerFencedException ;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 为消费者提供的在事务内提交偏移量的操作\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003esendOffsetsToTransaction\u003c/span\u003e\u003cspan class=\"params\"\u003e(Map\u0026lt;TopicPartition, OffsetAndMetadata\u0026gt; offsets,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e                                     String consumerGroupId)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ProducerFencedException ;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 提交事务\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003ecommitTransaction\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ProducerFencedException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 放弃事务，类似回滚事务的操作\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eabortTransaction\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ProducerFencedException ;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"Kafka-事务相关配置\"\u003e\u003ca href=\"#Kafka-事务相关配置\" class=\"headerlink\" title=\"Kafka 事务相关配置\"\u003e\u003c/a\u003eKafka 事务相关配置\u003c/h3\u003e\u003cp\u003e使用 kafka 的事务 api 时的一些注意事项：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e需要消费者的自动模式设置为 false，并且不能子再手动的进行执行 \u003ccode\u003econsumer#commitSync\u003c/code\u003e 或者 \u003ccode\u003econsumer#commitAsyc\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e设置 Producer 端参数 \u003ccode\u003etransctional.id\u003c/code\u003e。最好为其设置一个有意义的名字。\u003c/li\u003e\n\u003cli\u003e和幂等性 Producer 一样，开启 \u003ccode\u003eenable.idempotence = true\u003c/code\u003e。如果配置了 \u003ccode\u003etransaction.id\u003c/code\u003e，则此时 \u003ccode\u003eenable.idempotence\u003c/code\u003e 会被设置为 true\u003c/li\u003e\n\u003cli\u003e消费者需要配置事务隔离级别 \u003ccode\u003eisolation.level\u003c/code\u003e。在 \u003ccode\u003econsume-trnasform-produce\u003c/code\u003e 模式下使用事务时，必须设置为 \u003ccode\u003eREAD_COMMITTED\u003c/code\u003e。\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eread_uncommitted\u003c/code\u003e：这是默认值，表明 Consumer 能够读取到 Kafka 写入的任何消息，不论事务型 Producer 提交事务还是终止事务，其写入的消息都可以读取。很显然，如果你用了事务型 Producer，那么对应的 Consumer 就不要使用这个值。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eread_committed\u003c/code\u003e：表明 Consumer 只会读取事务型 Producer 成功提交事务写入的消息。当然了，它也能看到非事务型 Producer 写入的所有消息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Kafka-事务应用示例\"\u003e\u003ca href=\"#Kafka-事务应用示例\" class=\"headerlink\" title=\"Kafka 事务应用示例\"\u003e\u003c/a\u003eKafka 事务应用示例\u003c/h3\u003e\u003ch4 id=\"只有生成操作\"\u003e\u003ca href=\"#只有生成操作\" class=\"headerlink\" title=\"只有生成操作\"\u003e\u003c/a\u003e只有生成操作\u003c/h4\u003e\u003cp\u003e创建一个事务，在这个事务操作中，只有生成消息操作。代码如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 在一个事务只有生产消息操作\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eonlyProduceInTransaction\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eProducer\u003c/span\u003e \u003cspan class=\"variable\"\u003eproducer\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e buildProducer();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 1.初始化事务\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    producer.initTransactions();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 2.开启事务\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    producer.beginTransaction();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 3.kafka写操作集合\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 3.1 do业务逻辑\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 3.2 发送消息\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        producer.send(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProducerRecord\u003c/span\u003e\u0026lt;String, String\u0026gt;(\u003cspan class=\"string\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;transaction-data-1\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        producer.send(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProducerRecord\u003c/span\u003e\u0026lt;String, String\u0026gt;(\u003cspan class=\"string\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;transaction-data-2\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 3.3 do其他业务逻辑,还可以发送其他topic的消息。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 4.事务提交\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        producer.commitTransaction();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (Exception e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 5.放弃事务\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        producer.abortTransaction();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e创建生产者，代码如下,需要:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e配置 \u003ccode\u003etransactional.id\u003c/code\u003e 属性\u003c/li\u003e\n\u003cli\u003e配置 \u003ccode\u003eenable.idempotence\u003c/code\u003e 属性\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 需要:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 1、设置transactional.id\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 2、设置enable.idempotence\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u003cspan class=\"doctag\"\u003e@return\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e Producer \u003cspan class=\"title function_\"\u003ebuildProducer\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// create instance for properties to access producer configs\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eProperties\u003c/span\u003e \u003cspan class=\"variable\"\u003eprops\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProperties\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// bootstrap.servers是Kafka集群的IP地址。多个时,使用逗号隔开\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;bootstrap.servers\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;localhost:9092\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 设置事务id\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;transactional.id\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;first-transactional\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 设置幂等性\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;enable.idempotence\u0026#34;\u003c/span\u003e,\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//Set acknowledgements for producer requests.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;acks\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;all\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//If the request fails, the producer can automatically retry,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;retries\u0026#34;\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//Specify buffer size in config,这里不进行设置这个属性,如果设置了,还需要执行producer.flush()来把缓存中消息发送出去\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//props.put(\u0026#34;batch.size\u0026#34;, 16384);\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//Reduce the no of requests less than 0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;linger.ms\u0026#34;\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//The buffer.memory controls the total amount of memory available to the producer for buffering.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;buffer.memory\u0026#34;\u003c/span\u003e, \u003cspan class=\"number\"\u003e33554432\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// Kafka消息是以键值对的形式发送,需要设置key和value类型序列化器\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;key.serializer\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"string\"\u003e\u0026#34;org.apache.kafka.common.serialization.StringSerializer\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;value.serializer\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"string\"\u003e\u0026#34;org.apache.kafka.common.serialization.StringSerializer\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Producer\u0026lt;String, String\u0026gt; producer = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eKafkaProducer\u003c/span\u003e\u0026lt;String, String\u0026gt;(props);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e producer;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"消费-生产并存（consume-transform-produce）\"\u003e\u003ca href=\"#消费-生产并存（consume-transform-produce）\" class=\"headerlink\" title=\"消费-生产并存（consume-transform-produce）\"\u003e\u003c/a\u003e消费-生产并存（consume-transform-produce）\u003c/h4\u003e\u003cp\u003e在一个事务中，既有生产消息操作又有消费消息操作，即常说的 Consume-tansform-produce 模式。如下实例代码\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 在一个事务内,即有生产消息又有消费消息\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003econsumeTransferProduce\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 1.构建上产者\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eProducer\u003c/span\u003e \u003cspan class=\"variable\"\u003eproducer\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e buildProducer();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 2.初始化事务(生成productId),对于一个生产者,只能执行一次初始化事务操作\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    producer.initTransactions();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 3.构建消费者和订阅主题\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eConsumer\u003c/span\u003e \u003cspan class=\"variable\"\u003econsumer\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e buildConsumer();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    consumer.subscribe(Arrays.asList(\u003cspan class=\"string\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 4.开启事务\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        producer.beginTransaction();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 5.1 接受消息\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ConsumerRecords\u0026lt;String, String\u0026gt; records = consumer.poll(\u003cspan class=\"number\"\u003e500\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 5.2 do业务逻辑;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;customer Message---\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            Map\u0026lt;TopicPartition, OffsetAndMetadata\u0026gt; commits = Maps.newHashMap();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (ConsumerRecord\u0026lt;String, String\u0026gt; record : records) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"comment\"\u003e// 5.2.1 读取消息,并处理消息。print the offset,key and value for the consumer records.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                System.out.printf(\u003cspan class=\"string\"\u003e\u0026#34;offset = %d, key = %s, value = %s\\n\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        record.offset(), record.key(), record.value());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"comment\"\u003e// 5.2.2 记录提交的偏移量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                commits.put(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eTopicPartition\u003c/span\u003e(record.topic(), record.partition()),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eOffsetAndMetadata\u003c/span\u003e(record.offset()));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"comment\"\u003e// 6.生产新的消息。比如外卖订单状态的消息,如果订单成功,则需要发送跟商家结转消息或者派送员的提成消息\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                producer.send(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProducerRecord\u003c/span\u003e\u0026lt;String, String\u0026gt;(\u003cspan class=\"string\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;data2\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 7.提交偏移量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            producer.sendOffsetsToTransaction(commits, \u003cspan class=\"string\"\u003e\u0026#34;group0323\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 8.事务提交\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            producer.commitTransaction();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (Exception e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 7.放弃事务\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            producer.abortTransaction();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e创建消费者代码，需要：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e将配置中的自动提交属性（auto.commit）进行关闭\u003c/li\u003e\n\u003cli\u003e而且在代码里面也不能使用手动提交 commitSync( )或者 commitAsync( )\u003c/li\u003e\n\u003cli\u003e设置 isolation.level\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 需要:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 1、关闭自动提交 enable.auto.commit\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 2、isolation.level为\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u003cspan class=\"doctag\"\u003e@return\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e Consumer \u003cspan class=\"title function_\"\u003ebuildConsumer\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eProperties\u003c/span\u003e \u003cspan class=\"variable\"\u003eprops\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProperties\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// bootstrap.servers是Kafka集群的IP地址。多个时,使用逗号隔开\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;bootstrap.servers\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;localhost:9092\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 消费者群组\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;group.id\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;group0323\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 设置隔离级别\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;isolation.level\u0026#34;\u003c/span\u003e,\u003cspan class=\"string\"\u003e\u0026#34;read_committed\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 关闭自动提交\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;enable.auto.commit\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;false\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;session.timeout.ms\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;30000\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;key.deserializer\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"string\"\u003e\u0026#34;org.apache.kafka.common.serialization.StringDeserializer\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    props.put(\u003cspan class=\"string\"\u003e\u0026#34;value.deserializer\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"string\"\u003e\u0026#34;org.apache.kafka.common.serialization.StringDeserializer\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    KafkaConsumer\u0026lt;String, String\u0026gt; consumer = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eKafkaConsumer\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u0026lt;String, String\u0026gt;(props);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e consumer;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"只有消费操作\"\u003e\u003ca href=\"#只有消费操作\" class=\"headerlink\" title=\"只有消费操作\"\u003e\u003c/a\u003e只有消费操作\u003c/h4\u003e\u003cp\u003e创建一个事务，在这个事务操作中，只有生成消息操作，如下代码。这种操作其实没有什么意义，跟使用手动提交效果一样，无法保证消费消息操作和提交偏移量操作在一个事务。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 在一个事务只有消息操作\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eonlyConsumeInTransaction\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eProducer\u003c/span\u003e \u003cspan class=\"variable\"\u003eproducer\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e buildProducer();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 1.初始化事务\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    producer.initTransactions();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 2.开启事务\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    producer.beginTransaction();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 3.kafka读消息的操作集合\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eConsumer\u003c/span\u003e \u003cspan class=\"variable\"\u003econsumer\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e buildConsumer();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 3.1 接受消息\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ConsumerRecords\u0026lt;String, String\u0026gt; records = consumer.poll(\u003cspan class=\"number\"\u003e500\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 3.2 do业务逻辑;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;customer Message---\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            Map\u0026lt;TopicPartition, OffsetAndMetadata\u0026gt; commits = Maps.newHashMap();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (ConsumerRecord\u0026lt;String, String\u0026gt; record : records) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"comment\"\u003e// 3.2.1 处理消息 print the offset,key and value for the consumer records.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                System.out.printf(\u003cspan class=\"string\"\u003e\u0026#34;offset = %d, key = %s, value = %s\\n\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        record.offset(), record.key(), record.value());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"comment\"\u003e// 3.2.2 记录提交偏移量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                commits.put(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eTopicPartition\u003c/span\u003e(record.topic(), record.partition()),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eOffsetAndMetadata\u003c/span\u003e(record.offset()));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 4.提交偏移量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            producer.sendOffsetsToTransaction(commits, \u003cspan class=\"string\"\u003e\u0026#34;group0323\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 5.事务提交\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            producer.commitTransaction();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (Exception e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 6.放弃事务\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            producer.abortTransaction();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"生产者的配置\"\u003e\u003ca href=\"#生产者的配置\" class=\"headerlink\" title=\"生产者的配置\"\u003e\u003c/a\u003e生产者的配置\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e更详尽的生产者配置可以参考：\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://kafka.apache.org/documentation/#producerconfigs\"\u003eKafka 生产者官方配置说明\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e以下为生产者主要配置参数清单：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eacks\u003c/code\u003e：指定了必须有多少个分区副本收到消息，生产者才会认为消息写入是成功的。默认为 \u003ccode\u003eacks=1\u003c/code\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eacks=0\u003c/code\u003e 如果设置为 0，则 Producer 不会等待服务器的反馈。该消息会被立刻添加到 socket buffer 中并认为已经发送完成。在这种情况下，服务器是否收到请求是没法保证的，并且参数\u003ccode\u003eretries\u003c/code\u003e也不会生效（因为客户端无法获得失败信息）。每个记录返回的 offset 总是被设置为-1。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eacks=1\u003c/code\u003e 如果设置为 1，leader 节点会将记录写入本地日志，并且在所有 follower 节点反馈之前就先确认成功。在这种情况下，如果 leader 节点在接收记录之后，并且在 follower 节点复制数据完成之前产生错误，则这条记录会丢失。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eacks=all\u003c/code\u003e 如果设置为 all，这就意味着 leader 节点会等待所有同步中的副本确认之后再确认这条记录是否发送完成。只要至少有一个同步副本存在，记录就不会丢失。这种方式是对请求传递的最有效保证。acks=-1 与 acks=all 是等效的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebuffer.memory\u003c/code\u003e：用来设置 Producer 缓冲区大小。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecompression.type\u003c/code\u003e：Producer 生成数据时可使用的压缩类型。默认值是 none(即不压缩)。可配置的压缩类型包括：\u003ccode\u003enone\u003c/code\u003e、\u003ccode\u003egzip\u003c/code\u003e、\u003ccode\u003esnappy\u003c/code\u003e 、\u003ccode\u003elz4\u003c/code\u003e 或 \u003ccode\u003ezstd\u003c/code\u003e。压缩是针对批处理的所有数据，所以批处理的效果也会影响压缩比（更多的批处理意味着更好的压缩）。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eretries\u003c/code\u003e：用来设置发送失败的重试次数。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebatch.size\u003c/code\u003e：用来设置一个批次可占用的内存大小。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elinger.ms\u003c/code\u003e：用来设置 Producer 在发送批次前的等待时间。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eclient.id\u003c/code\u003e：Kafka 服务器用它来识别消息源，可以是任意字符串。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emax.in.flight.requests.per.connection\u003c/code\u003e：用来设置 Producer 在收到服务器响应前可以发送多少个消息。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etimeout.ms\u003c/code\u003e：用来设置 Broker 等待同步副本返回消息确认的时间，与 \u003ccode\u003eacks\u003c/code\u003e 的配置相匹配。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erequest.timeout.ms\u003c/code\u003e：Producer 在发送数据时等待服务器返回响应的时间。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emetadata.fetch.timeout.ms\u003c/code\u003e：Producer 在获取元数据时（如：分区的 Leader 是谁）等待服务器返回响应的时间。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emax.block.ms\u003c/code\u003e：该配置控制 \u003ccode\u003eKafkaProducer.send()\u003c/code\u003e 和\u003ccode\u003eKafkaProducer.partitionsFor()\u003c/code\u003e 允许被阻塞的时长。这些方法可能因为缓冲区满了或者元数据不可用而被阻塞。用户提供的序列化程序或分区程序的阻塞将不会被计算到这个超时。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emax.request.size\u003c/code\u003e：请求的最大字节数。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ereceieve.buffer.bytes\u003c/code\u003e：TCP 接收缓冲区的大小。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esend.buffer.bytes\u003c/code\u003e：TCP 发送缓冲区的大小。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e官方\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://kafka.apache.org/\"\u003eKafka 官网\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/apache/kafka\"\u003eKafka Github\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kafka.apache.org/documentation/\"\u003eKafka 官方文档\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://kafka.apache.org/\"\u003eKafka Confluent 官网\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://issues.apache.org/jira/projects/KAFKA?selectedItem=com.atlassian.jira.jira-projects-plugin:components-page\"\u003eKafka Jira\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e书籍\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://item.jd.com/12270295.html\"\u003e《Kafka 权威指南》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://item.jd.com/12489649.html\"\u003e《深入理解 Kafka：核心设计与实践原理》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://item.jd.com/12234113.html\"\u003e《Kafka 技术内幕》\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e教程\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/apachecn/kafka-doc-zh\"\u003eKafka 中文文档\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100029201\"\u003eKafka 核心技术与实战\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e文章\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.heartthinkdo.com/?p=2040#43\"\u003eKafak(04) Kafka 生产者事务和幂等\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-04-14T07:05:34Z",
  "Author": "钝悟 ◾ Dunwu"
}