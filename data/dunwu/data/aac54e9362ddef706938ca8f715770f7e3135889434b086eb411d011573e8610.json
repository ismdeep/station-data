{
  "Source": "dunwu",
  "Title": "Spring 国际化",
  "Link": "https://dunwu.github.io/blog/pages/b5b8ad/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Spring-国际化\"\u003e\u003ca href=\"#Spring-国际化\" class=\"headerlink\" title=\"Spring 国际化\"\u003e\u003c/a\u003eSpring 国际化\u003c/h1\u003e\u003ch2 id=\"Spring-国际化使用场景\"\u003e\u003ca href=\"#Spring-国际化使用场景\" class=\"headerlink\" title=\"Spring 国际化使用场景\"\u003e\u003c/a\u003eSpring 国际化使用场景\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e普通国际化文案\u003c/li\u003e\n\u003cli\u003eBean Validation 校验国际化文案\u003c/li\u003e\n\u003cli\u003eWeb 站点页面渲染\u003c/li\u003e\n\u003cli\u003eWeb MVC 错误消息提示\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-国际化接口\"\u003e\u003ca href=\"#Spring-国际化接口\" class=\"headerlink\" title=\"Spring 国际化接口\"\u003e\u003c/a\u003eSpring 国际化接口\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e核心接口：\u003ccode\u003eorg.springframework.context.MessageSource\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e主要概念\u003cul\u003e\n\u003cli\u003e文案模板编码（code）\u003c/li\u003e\n\u003cli\u003e文案模板参数（args）\u003c/li\u003e\n\u003cli\u003e区域（Locale）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"层次性-MessageSource\"\u003e\u003ca href=\"#层次性-MessageSource\" class=\"headerlink\" title=\"层次性 MessageSource\"\u003e\u003c/a\u003e层次性 MessageSource\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003eSpring 层次性接口回顾\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.beans.factory.HierarchicalBeanFactory\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.context.ApplicationContext\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.beans.factory.config.BeanDefinition\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSpring 层次性国际化接口\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.context.HierarchicalMessageSource\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Java-国际化标准实现\"\u003e\u003ca href=\"#Java-国际化标准实现\" class=\"headerlink\" title=\"Java 国际化标准实现\"\u003e\u003c/a\u003eJava 国际化标准实现\u003c/h2\u003e\u003cp\u003e核心接口：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e抽象实现 - \u003ccode\u003ejava.util.ResourceBundle\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eProperties 资源实现 - \u003ccode\u003ejava.util.PropertyResourceBundle\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e例举实现 - \u003ccode\u003ejava.util.ListResourceBundle\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003eResourceBundle\u003c/code\u003e 核心特性\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eKey-Value 设计\u003c/li\u003e\n\u003cli\u003e层次性设计\u003c/li\u003e\n\u003cli\u003e缓存设计\u003c/li\u003e\n\u003cli\u003e字符编码控制 - \u003ccode\u003ejava.util.ResourceBundle.Control\u003c/code\u003e（@since 1.6）\u003c/li\u003e\n\u003cli\u003eControl SPI 扩展 - \u003ccode\u003ejava.util.spi.ResourceBundleControlProvider\u003c/code\u003e（@since 1.8）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Java-文本格式化\"\u003e\u003ca href=\"#Java-文本格式化\" class=\"headerlink\" title=\"Java 文本格式化\"\u003e\u003c/a\u003eJava 文本格式化\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e核心接口\u003cul\u003e\n\u003cli\u003ejava.text.MessageFormat\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e基本用法\u003cul\u003e\n\u003cli\u003e设置消息格式模式- new MessageFormat(…)\u003c/li\u003e\n\u003cli\u003e格式化 - format(new Object[]{…})\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e消息格式模式\u003cul\u003e\n\u003cli\u003e格式元素：{ArgumentIndex (,FormatType,(FormatStyle))}\u003c/li\u003e\n\u003cli\u003eFormatType：消息格式类型，可选项，每种类型在 number、date、time 和 choice 类型选其一\u003c/li\u003e\n\u003cli\u003eFormatStyle：消息格式风格，可选项，包括：short、medium、long、full、integer、currency、\u003cbr/\u003epercent\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e高级特性\u003cul\u003e\n\u003cli\u003e重置消息格式模式\u003c/li\u003e\n\u003cli\u003e重置 java.util.Locale\u003c/li\u003e\n\u003cli\u003e重置 java.text.Format\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"MessageSource-开箱即用实现\"\u003e\u003ca href=\"#MessageSource-开箱即用实现\" class=\"headerlink\" title=\"MessageSource 开箱即用实现\"\u003e\u003c/a\u003eMessageSource 开箱即用实现\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e基于 ResourceBundle + MessageFormat 组合 MessageSource 实现\u003c/li\u003e\n\u003cli\u003eorg.springframework.context.support.ResourceBundleMessageSource\u003c/li\u003e\n\u003cli\u003e可重载 Properties + MessageFormat 组合 MessageSource 实现\u003c/li\u003e\n\u003cli\u003eorg.springframework.context.support.ReloadableResourceBundleMessageSource\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"MessageSource-內建依赖\"\u003e\u003ca href=\"#MessageSource-內建依赖\" class=\"headerlink\" title=\"MessageSource 內建依赖\"\u003e\u003c/a\u003eMessageSource 內建依赖\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003eMessageSource 內建 Bean 可能来源\u003c/li\u003e\n\u003cli\u003e预注册 Bean 名称为：“messageSource”，类型为：MessageSource Bean\u003c/li\u003e\n\u003cli\u003e默认內建实现 - DelegatingMessageSource\u003c/li\u003e\n\u003cli\u003e层次性查找 MessageSource 对象\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"问题\"\u003e\u003ca href=\"#问题\" class=\"headerlink\" title=\"问题\"\u003e\u003c/a\u003e问题\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eSpring Boot 为什么要新建 MessageSource Bean\u003c/strong\u003e？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAbstractApplicationContext 的实现决定了 MessageSource 內建实现\u003c/li\u003e\n\u003cli\u003eSpring Boot 通过外部化配置简化 MessageSource Bean 构建\u003c/li\u003e\n\u003cli\u003eSpring Boot 基于 Bean Validation 校验非常普遍\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSpring 国际化接口有哪些\u003c/strong\u003e？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e核心接口 - MessageSource\u003c/li\u003e\n\u003cli\u003e层次性接口 - \u003ccode\u003eorg.springframework.context.HierarchicalMessageSource\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSpring 有哪些 MessageSource 內建实现\u003c/strong\u003e？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.context.support.ResourceBundleMessageSource\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.context.support.ReloadableResourceBundleMessageSource\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.context.support.StaticMessageSource\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.context.support.DelegatingMessageSource\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e如何实现配置自动更新 MessageSource\u003c/strong\u003e？\u003c/p\u003e\n\u003cp\u003e主要技术\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJava NIO 2：\u003ccode\u003ejava.nio.file.WatchService\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eJava Concurrency : \u003ccode\u003ejava.util.concurrent.ExecutorService\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSpring：\u003ccode\u003eorg.springframework.context.support.AbstractMessageSource\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans\"\u003eSpring 官方文档之 Core Technologies\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/course/intro/265\"\u003e《小马哥讲 Spring 核心编程思想》\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-12-22T03:44:54Z",
  "Author": "钝悟 ◾ Dunwu"
}