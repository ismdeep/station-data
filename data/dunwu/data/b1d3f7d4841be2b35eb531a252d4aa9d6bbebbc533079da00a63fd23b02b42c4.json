{
  "Source": "dunwu",
  "Title": "Java线程池",
  "Link": "https://dunwu.github.io/blog/pages/ad9680/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Java-线程池\"\u003e\u003ca href=\"#Java-线程池\" class=\"headerlink\" title=\"Java 线程池\"\u003e\u003c/a\u003eJava 线程池\u003c/h1\u003e\u003ch2 id=\"简介\"\u003e\u003ca href=\"#简介\" class=\"headerlink\" title=\"简介\"\u003e\u003c/a\u003e简介\u003c/h2\u003e\u003ch3 id=\"什么是线程池\"\u003e\u003ca href=\"#什么是线程池\" class=\"headerlink\" title=\"什么是线程池\"\u003e\u003c/a\u003e什么是线程池\u003c/h3\u003e\u003cp\u003e线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务。\u003c/p\u003e\n\u003ch3 id=\"为什么要用线程池\"\u003e\u003ca href=\"#为什么要用线程池\" class=\"headerlink\" title=\"为什么要用线程池\"\u003e\u003c/a\u003e为什么要用线程池\u003c/h3\u003e\u003cp\u003e如果并发请求数量很多，但每个线程执行的时间很短，就会出现频繁的创建和销毁线程。如此一来，会大大降低系统的效率，可能频繁创建和销毁线程的时间、资源开销要大于实际工作的所需。\u003c/p\u003e\n\u003cp\u003e正是由于这个问题，所以有必要引入线程池。使用 \u003cstrong\u003e线程池的好处\u003c/strong\u003e 有以下几点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e降低资源消耗\u003c/strong\u003e - 通过重复利用已创建的线程降低线程创建和销毁造成的消耗。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e提高响应速度\u003c/strong\u003e - 当任务到达时，任务可以不需要等到线程创建就能立即执行。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e提高线程的可管理性\u003c/strong\u003e - 线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。但是要做到合理的利用线程池，必须对其原理了如指掌。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Executor-框架\"\u003e\u003ca href=\"#Executor-框架\" class=\"headerlink\" title=\"Executor 框架\"\u003e\u003c/a\u003eExecutor 框架\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003eExecutor 框架是一个根据一组执行策略调用，调度，执行和控制的异步任务的框架，目的是提供一种将”任务提交”与”任务如何运行”分离开来的机制。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"核心-API-概述\"\u003e\u003ca href=\"#核心-API-概述\" class=\"headerlink\" title=\"核心 API 概述\"\u003e\u003c/a\u003e核心 API 概述\u003c/h3\u003e\u003cp\u003eExecutor 框架核心 API 如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eExecutor\u003c/code\u003e - 运行任务的简单接口。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eExecutorService\u003c/code\u003e - 扩展了 \u003ccode\u003eExecutor\u003c/code\u003e 接口。扩展能力：\u003cul\u003e\n\u003cli\u003e支持有返回值的线程；\u003c/li\u003e\n\u003cli\u003e支持管理线程的生命周期。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eScheduledExecutorService\u003c/code\u003e - 扩展了 \u003ccode\u003eExecutorService\u003c/code\u003e 接口。扩展能力：支持定期执行任务。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAbstractExecutorService\u003c/code\u003e - \u003ccode\u003eExecutorService\u003c/code\u003e 接口的默认实现。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eThreadPoolExecutor\u003c/code\u003e - Executor 框架最核心的类，它继承了 \u003ccode\u003eAbstractExecutorService\u003c/code\u003e 类。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eScheduledThreadPoolExecutor\u003c/code\u003e - \u003ccode\u003eScheduledExecutorService\u003c/code\u003e 接口的实现，一个可定时调度任务的线程池。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eExecutors\u003c/code\u003e - 可以通过调用 \u003ccode\u003eExecutors\u003c/code\u003e 的静态工厂方法来创建线程池并返回一个 \u003ccode\u003eExecutorService\u003c/code\u003e 对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/concurrent/exexctor-uml.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"Executor\"\u003e\u003ca href=\"#Executor\" class=\"headerlink\" title=\"Executor\"\u003e\u003c/a\u003eExecutor\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eExecutor\u003c/code\u003e 接口中只定义了一个 \u003ccode\u003eexecute\u003c/code\u003e 方法，用于接收一个 \u003ccode\u003eRunnable\u003c/code\u003e 对象。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"title class_\"\u003eExecutor\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eexecute\u003c/span\u003e\u003cspan class=\"params\"\u003e(Runnable command)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"ExecutorService\"\u003e\u003ca href=\"#ExecutorService\" class=\"headerlink\" title=\"ExecutorService\"\u003e\u003c/a\u003eExecutorService\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eExecutorService\u003c/code\u003e 接口继承了 \u003ccode\u003eExecutor\u003c/code\u003e 接口，它还提供了 \u003ccode\u003einvokeAll\u003c/code\u003e、\u003ccode\u003einvokeAny\u003c/code\u003e、\u003ccode\u003eshutdown\u003c/code\u003e、\u003ccode\u003esubmit\u003c/code\u003e 等方法。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"title class_\"\u003eExecutorService\u003c/span\u003e \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eExecutor\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eshutdown\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    List\u0026lt;Runnable\u0026gt; \u003cspan class=\"title function_\"\u003eshutdownNow\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"title function_\"\u003eisShutdown\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"title function_\"\u003eisTerminated\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e \u003cspan class=\"title function_\"\u003eawaitTermination\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003elong\u003c/span\u003e timeout, TimeUnit unit)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026lt;T\u0026gt; Future\u0026lt;T\u0026gt; \u003cspan class=\"title function_\"\u003esubmit\u003c/span\u003e\u003cspan class=\"params\"\u003e(Callable\u0026lt;T\u0026gt; task)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026lt;T\u0026gt; Future\u0026lt;T\u0026gt; \u003cspan class=\"title function_\"\u003esubmit\u003c/span\u003e\u003cspan class=\"params\"\u003e(Runnable task, T result)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Future\u0026lt;?\u0026gt; submit(Runnable task);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026lt;T\u0026gt; List\u0026lt;Future\u0026lt;T\u0026gt;\u0026gt; \u003cspan class=\"title function_\"\u003einvokeAll\u003c/span\u003e\u003cspan class=\"params\"\u003e(Collection\u0026lt;? extends Callable\u0026lt;T\u0026gt;\u0026gt; tasks)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026lt;T\u0026gt; List\u0026lt;Future\u0026lt;T\u0026gt;\u0026gt; \u003cspan class=\"title function_\"\u003einvokeAll\u003c/span\u003e\u003cspan class=\"params\"\u003e(Collection\u0026lt;? extends Callable\u0026lt;T\u0026gt;\u0026gt; tasks,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e                                  \u003cspan class=\"type\"\u003elong\u003c/span\u003e timeout, TimeUnit unit)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026lt;T\u0026gt; T \u003cspan class=\"title function_\"\u003einvokeAny\u003c/span\u003e\u003cspan class=\"params\"\u003e(Collection\u0026lt;? extends Callable\u0026lt;T\u0026gt;\u0026gt; tasks)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException, ExecutionException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026lt;T\u0026gt; T \u003cspan class=\"title function_\"\u003einvokeAny\u003c/span\u003e\u003cspan class=\"params\"\u003e(Collection\u0026lt;? extends Callable\u0026lt;T\u0026gt;\u0026gt; tasks,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e                    \u003cspan class=\"type\"\u003elong\u003c/span\u003e timeout, TimeUnit unit)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e InterruptedException, ExecutionException, TimeoutException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e从其支持的方法定义，不难看出：相比于 \u003ccode\u003eExecutor\u003c/code\u003e 接口，\u003ccode\u003eExecutorService\u003c/code\u003e 接口主要的扩展是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e支持有返回值的线程 - \u003ccode\u003esumbit\u003c/code\u003e、\u003ccode\u003einvokeAll\u003c/code\u003e、\u003ccode\u003einvokeAny\u003c/code\u003e 方法中都支持传入\u003ccode\u003eCallable\u003c/code\u003e 对象。\u003c/li\u003e\n\u003cli\u003e支持管理线程生命周期 - \u003ccode\u003eshutdown\u003c/code\u003e、\u003ccode\u003eshutdownNow\u003c/code\u003e、\u003ccode\u003eisShutdown\u003c/code\u003e 等方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"ScheduledExecutorService\"\u003e\u003ca href=\"#ScheduledExecutorService\" class=\"headerlink\" title=\"ScheduledExecutorService\"\u003e\u003c/a\u003eScheduledExecutorService\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eScheduledExecutorService\u003c/code\u003e 接口扩展了 \u003ccode\u003eExecutorService\u003c/code\u003e 接口。\u003c/p\u003e\n\u003cp\u003e它除了支持前面两个接口的所有能力以外，还支持定时调度线程。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"title class_\"\u003eScheduledExecutorService\u003c/span\u003e \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eExecutorService\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e ScheduledFuture\u0026lt;?\u0026gt; schedule(Runnable command,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                       \u003cspan class=\"type\"\u003elong\u003c/span\u003e delay, TimeUnit unit);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u0026lt;V\u0026gt; ScheduledFuture\u0026lt;V\u0026gt; \u003cspan class=\"title function_\"\u003eschedule\u003c/span\u003e\u003cspan class=\"params\"\u003e(Callable\u0026lt;V\u0026gt; callable,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e                                           \u003cspan class=\"type\"\u003elong\u003c/span\u003e delay, TimeUnit unit)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e ScheduledFuture\u0026lt;?\u0026gt; scheduleAtFixedRate(Runnable command,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                                  \u003cspan class=\"type\"\u003elong\u003c/span\u003e initialDelay,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                                  \u003cspan class=\"type\"\u003elong\u003c/span\u003e period,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                                  TimeUnit unit);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e ScheduledFuture\u0026lt;?\u0026gt; scheduleWithFixedDelay(Runnable command,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                                     \u003cspan class=\"type\"\u003elong\u003c/span\u003e initialDelay,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                                     \u003cspan class=\"type\"\u003elong\u003c/span\u003e delay,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                                     TimeUnit unit);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e其扩展的接口提供以下能力：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eschedule\u003c/code\u003e 方法可以在指定的延时后执行一个 \u003ccode\u003eRunnable\u003c/code\u003e 或者 \u003ccode\u003eCallable\u003c/code\u003e 任务。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003escheduleAtFixedRate\u003c/code\u003e 方法和 \u003ccode\u003escheduleWithFixedDelay\u003c/code\u003e 方法可以按照指定时间间隔，定期执行任务。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ThreadPoolExecutor\"\u003e\u003ca href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor\"\u003e\u003c/a\u003eThreadPoolExecutor\u003c/h2\u003e\u003cp\u003e\u003ccode\u003ejava.uitl.concurrent.ThreadPoolExecutor\u003c/code\u003e 类是 \u003ccode\u003eExecutor\u003c/code\u003e 框架中最核心的类。所以，本文将着重讲述一下这个类。\u003c/p\u003e\n\u003ch3 id=\"重要字段\"\u003e\u003ca href=\"#重要字段\" class=\"headerlink\" title=\"重要字段\"\u003e\u003c/a\u003e重要字段\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eThreadPoolExecutor\u003c/code\u003e 有以下重要字段：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eAtomicInteger\u003c/span\u003e \u003cspan class=\"variable\"\u003ectl\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eAtomicInteger\u003c/span\u003e(ctlOf(RUNNING, \u003cspan class=\"number\"\u003e0\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eCOUNT_BITS\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Integer.SIZE - \u003cspan class=\"number\"\u003e3\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eCAPACITY\u003c/span\u003e   \u003cspan class=\"operator\"\u003e=\u003c/span\u003e (\u003cspan class=\"number\"\u003e1\u003c/span\u003e \u0026lt;\u0026lt; COUNT_BITS) - \u003cspan class=\"number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// runState is stored in the high-order bits\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eRUNNING\u003c/span\u003e    \u003cspan class=\"operator\"\u003e=\u003c/span\u003e -\u003cspan class=\"number\"\u003e1\u003c/span\u003e \u0026lt;\u0026lt; COUNT_BITS;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eSHUTDOWN\u003c/span\u003e   \u003cspan class=\"operator\"\u003e=\u003c/span\u003e  \u003cspan class=\"number\"\u003e0\u003c/span\u003e \u0026lt;\u0026lt; COUNT_BITS;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eSTOP\u003c/span\u003e       \u003cspan class=\"operator\"\u003e=\u003c/span\u003e  \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u0026lt;\u0026lt; COUNT_BITS;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eTIDYING\u003c/span\u003e    \u003cspan class=\"operator\"\u003e=\u003c/span\u003e  \u003cspan class=\"number\"\u003e2\u003c/span\u003e \u0026lt;\u0026lt; COUNT_BITS;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003eTERMINATED\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e  \u003cspan class=\"number\"\u003e3\u003c/span\u003e \u0026lt;\u0026lt; COUNT_BITS;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e参数说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ectl\u003c/code\u003e - \u003cstrong\u003e用于控制线程池的运行状态和线程池中的有效线程数量\u003c/strong\u003e。它包含两部分的信息：\u003cul\u003e\n\u003cli\u003e线程池的运行状态 (\u003ccode\u003erunState\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e线程池内有效线程的数量 (\u003ccode\u003eworkerCount\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e可以看到，\u003ccode\u003ectl\u003c/code\u003e 使用了 \u003ccode\u003eInteger\u003c/code\u003e 类型来保存，高 3 位保存 \u003ccode\u003erunState\u003c/code\u003e，低 29 位保存 \u003ccode\u003eworkerCount\u003c/code\u003e。\u003ccode\u003eCOUNT_BITS\u003c/code\u003e 就是 29，\u003ccode\u003eCAPACITY\u003c/code\u003e 就是 1 左移 29 位减 1（29 个 1），这个常量表示 \u003ccode\u003eworkerCount\u003c/code\u003e 的上限值，大约是 5 亿。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e运行状态 - 线程池一共有五种运行状态：\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eRUNNING\u003c/code\u003e - \u003cstrong\u003e运行状态\u003c/strong\u003e。接受新任务，并且也能处理阻塞队列中的任务。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSHUTDOWN\u003c/code\u003e - \u003cstrong\u003e关闭状态\u003c/strong\u003e。不接受新任务，但可以处理阻塞队列中的任务。\u003cul\u003e\n\u003cli\u003e在线程池处于 \u003ccode\u003eRUNNING\u003c/code\u003e 状态时，调用 \u003ccode\u003eshutdown\u003c/code\u003e 方法会使线程池进入到该状态。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efinalize\u003c/code\u003e 方法在执行过程中也会调用 \u003ccode\u003eshutdown\u003c/code\u003e 方法进入该状态。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTOP\u003c/code\u003e - \u003cstrong\u003e停止状态\u003c/strong\u003e。不接受新任务，也不处理队列中的任务。会中断正在处理任务的线程。在线程池处于 \u003ccode\u003eRUNNING\u003c/code\u003e 或 \u003ccode\u003eSHUTDOWN\u003c/code\u003e 状态时，调用 \u003ccode\u003eshutdownNow\u003c/code\u003e 方法会使线程池进入到该状态。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTIDYING\u003c/code\u003e - \u003cstrong\u003e整理状态\u003c/strong\u003e。如果所有的任务都已终止了，\u003ccode\u003eworkerCount\u003c/code\u003e (有效线程数) 为 0，线程池进入该状态后会调用 \u003ccode\u003eterminated\u003c/code\u003e 方法进入 \u003ccode\u003eTERMINATED\u003c/code\u003e 状态。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTERMINATED\u003c/code\u003e - \u003cstrong\u003e已终止状态\u003c/strong\u003e。在 \u003ccode\u003eterminated\u003c/code\u003e 方法执行完后进入该状态。默认 \u003ccode\u003eterminated\u003c/code\u003e 方法中什么也没有做。进入 \u003ccode\u003eTERMINATED\u003c/code\u003e 的条件如下：\u003cul\u003e\n\u003cli\u003e线程池不是 \u003ccode\u003eRUNNING\u003c/code\u003e 状态；\u003c/li\u003e\n\u003cli\u003e线程池状态不是 \u003ccode\u003eTIDYING\u003c/code\u003e 状态或 \u003ccode\u003eTERMINATED\u003c/code\u003e 状态；\u003c/li\u003e\n\u003cli\u003e如果线程池状态是 \u003ccode\u003eSHUTDOWN\u003c/code\u003e 并且 \u003ccode\u003eworkerQueue\u003c/code\u003e 为空；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eworkerCount\u003c/code\u003e 为 0；\u003c/li\u003e\n\u003cli\u003e设置 \u003ccode\u003eTIDYING\u003c/code\u003e 状态成功。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/concurrent/java-thread-pool_2.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"构造方法\"\u003e\u003ca href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"\u003e\u003c/a\u003e构造方法\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eThreadPoolExecutor\u003c/code\u003e 有四个构造方法，前三个都是基于第四个实现。第四个构造方法定义如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eThreadPoolExecutor\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e corePoolSize,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e                              \u003cspan class=\"type\"\u003eint\u003c/span\u003e maximumPoolSize,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e                              \u003cspan class=\"type\"\u003elong\u003c/span\u003e keepAliveTime,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e                              TimeUnit unit,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e                              BlockingQueue\u0026lt;Runnable\u0026gt; workQueue,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e                              ThreadFactory threadFactory,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e                              RejectedExecutionHandler handler)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e参数说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecorePoolSize\u003c/code\u003e - \u003cstrong\u003e核心线程数量\u003c/strong\u003e。当有新任务通过 \u003ccode\u003eexecute\u003c/code\u003e 方法提交时 ，线程池会执行以下判断：\u003cul\u003e\n\u003cli\u003e如果运行的线程数少于 \u003ccode\u003ecorePoolSize\u003c/code\u003e，则创建新线程来处理任务，即使线程池中的其他线程是空闲的。\u003c/li\u003e\n\u003cli\u003e如果线程池中的线程数量大于等于 \u003ccode\u003ecorePoolSize\u003c/code\u003e 且小于 \u003ccode\u003emaximumPoolSize\u003c/code\u003e，则只有当 \u003ccode\u003eworkQueue\u003c/code\u003e 满时才创建新的线程去处理任务；\u003c/li\u003e\n\u003cli\u003e如果设置的 \u003ccode\u003ecorePoolSize\u003c/code\u003e 和 \u003ccode\u003emaximumPoolSize\u003c/code\u003e 相同，则创建的线程池的大小是固定的。这时如果有新任务提交，若 \u003ccode\u003eworkQueue\u003c/code\u003e 未满，则将请求放入 \u003ccode\u003eworkQueue\u003c/code\u003e 中，等待有空闲的线程去从 \u003ccode\u003eworkQueue\u003c/code\u003e 中取任务并处理；\u003c/li\u003e\n\u003cli\u003e如果运行的线程数量大于等于 \u003ccode\u003emaximumPoolSize\u003c/code\u003e，这时如果 \u003ccode\u003eworkQueue\u003c/code\u003e 已经满了，则使用 \u003ccode\u003ehandler\u003c/code\u003e 所指定的策略来处理任务；\u003c/li\u003e\n\u003cli\u003e所以，任务提交时，判断的顺序为 \u003ccode\u003ecorePoolSize\u003c/code\u003e =\u0026gt; \u003ccode\u003eworkQueue\u003c/code\u003e =\u0026gt; \u003ccode\u003emaximumPoolSize\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emaximumPoolSize\u003c/code\u003e - \u003cstrong\u003e最大线程数量\u003c/strong\u003e。\u003cul\u003e\n\u003cli\u003e如果队列满了，并且已创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。\u003c/li\u003e\n\u003cli\u003e值得注意的是：如果使用了无界的任务队列这个参数就没什么效果。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ekeepAliveTime\u003c/code\u003e：\u003cstrong\u003e线程保持活动的时间\u003c/strong\u003e。\u003cul\u003e\n\u003cli\u003e当线程池中的线程数量大于 \u003ccode\u003ecorePoolSize\u003c/code\u003e 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 \u003ccode\u003ekeepAliveTime\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e所以，如果任务很多，并且每个任务执行的时间比较短，可以调大这个时间，提高线程的利用率。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eunit\u003c/code\u003e - \u003cstrong\u003e\u003ccode\u003ekeepAliveTime\u003c/code\u003e 的时间单位\u003c/strong\u003e。有 7 种取值。可选的单位有天（DAYS），小时（HOURS），分钟（MINUTES），毫秒(MILLISECONDS)，微秒(MICROSECONDS, 千分之一毫秒)和毫微秒(NANOSECONDS, 千分之一微秒)。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eworkQueue\u003c/code\u003e - \u003cstrong\u003e等待执行的任务队列\u003c/strong\u003e。用于保存等待执行的任务的阻塞队列。 可以选择以下几个阻塞队列。\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eArrayBlockingQueue\u003c/code\u003e - \u003cstrong\u003e有界阻塞队列\u003c/strong\u003e。\u003cul\u003e\n\u003cli\u003e此队列是\u003cstrong\u003e基于数组的先进先出队列（FIFO）\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e此队列创建时必须指定大小。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e - \u003cstrong\u003e无界阻塞队列\u003c/strong\u003e。\u003cul\u003e\n\u003cli\u003e此队列是\u003cstrong\u003e基于链表的先进先出队列（FIFO）\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e如果创建时没有指定此队列大小，则默认为 \u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e吞吐量通常要高于 \u003ccode\u003eArrayBlockingQueue\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e使用 \u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e 意味着： \u003ccode\u003emaximumPoolSize\u003c/code\u003e 将不起作用，线程池能创建的最大线程数为 \u003ccode\u003ecorePoolSize\u003c/code\u003e，因为任务等待队列是无界队列。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eExecutors.newFixedThreadPool\u003c/code\u003e 使用了这个队列。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSynchronousQueue\u003c/code\u003e - \u003cstrong\u003e不会保存提交的任务，而是将直接新建一个线程来执行新来的任务\u003c/strong\u003e。\u003cul\u003e\n\u003cli\u003e每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态。\u003c/li\u003e\n\u003cli\u003e吞吐量通常要高于 \u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eExecutors.newCachedThreadPool\u003c/code\u003e 使用了这个队列。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePriorityBlockingQueue\u003c/code\u003e - \u003cstrong\u003e具有优先级的无界阻塞队列\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ethreadFactory\u003c/code\u003e - \u003cstrong\u003e线程工厂\u003c/strong\u003e。可以通过线程工厂给每个创建出来的线程设置更有意义的名字。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehandler\u003c/code\u003e - \u003cstrong\u003e饱和策略\u003c/strong\u003e。它是 \u003ccode\u003eRejectedExecutionHandler\u003c/code\u003e 类型的变量。当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。线程池支持以下策略：\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eAbortPolicy\u003c/code\u003e - 丢弃任务并抛出异常。这也是默认策略。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDiscardPolicy\u003c/code\u003e - 丢弃任务，但不抛出异常。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDiscardOldestPolicy\u003c/code\u003e - 丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCallerRunsPolicy\u003c/code\u003e - 直接调用 \u003ccode\u003erun\u003c/code\u003e 方法并且阻塞执行。\u003c/li\u003e\n\u003cli\u003e如果以上策略都不能满足需要，也可以通过实现 \u003ccode\u003eRejectedExecutionHandler\u003c/code\u003e 接口来定制处理策略。如记录日志或持久化不能处理的任务。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"execute-方法\"\u003e\u003ca href=\"#execute-方法\" class=\"headerlink\" title=\"execute 方法\"\u003e\u003c/a\u003eexecute 方法\u003c/h3\u003e\u003cp\u003e默认情况下，创建线程池之后，线程池中是没有线程的，需要提交任务之后才会创建线程。\u003c/p\u003e\n\u003cp\u003e提交任务可以使用 \u003ccode\u003eexecute\u003c/code\u003e 方法，它是 \u003ccode\u003eThreadPoolExecutor\u003c/code\u003e 的核心方法，通过这个方法可以\u003cstrong\u003e向线程池提交一个任务，交由线程池去执行\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eexecute\u003c/code\u003e 方法工作流程如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e如果 \u003ccode\u003eworkerCount \u0026lt; corePoolSize\u003c/code\u003e，则创建并启动一个线程来执行新提交的任务；\u003c/li\u003e\n\u003cli\u003e如果 \u003ccode\u003eworkerCount \u0026gt;= corePoolSize\u003c/code\u003e，且线程池内的阻塞队列未满，则将任务添加到该阻塞队列中；\u003c/li\u003e\n\u003cli\u003e如果 \u003ccode\u003eworkerCount \u0026gt;= corePoolSize \u0026amp;\u0026amp; workerCount \u0026lt; maximumPoolSize\u003c/code\u003e，且线程池内的阻塞队列已满，则创建并启动一个线程来执行新提交的任务；\u003c/li\u003e\n\u003cli\u003e如果\u003ccode\u003eworkerCount \u0026gt;= maximumPoolSize\u003c/code\u003e，并且线程池内的阻塞队列已满，则根据拒绝策略来处理该任务, 默认的处理方式是直接抛异常。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/concurrent/java-thread-pool_1.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"其他重要方法\"\u003e\u003ca href=\"#其他重要方法\" class=\"headerlink\" title=\"其他重要方法\"\u003e\u003c/a\u003e其他重要方法\u003c/h3\u003e\u003cp\u003e在 \u003ccode\u003eThreadPoolExecutor\u003c/code\u003e 类中还有一些重要的方法：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esubmit\u003c/code\u003e - 类似于 \u003ccode\u003eexecute\u003c/code\u003e，但是针对的是有返回值的线程。\u003ccode\u003esubmit\u003c/code\u003e 方法是在 \u003ccode\u003eExecutorService\u003c/code\u003e 中声明的方法，在 \u003ccode\u003eAbstractExecutorService\u003c/code\u003e 就已经有了具体的实现。\u003ccode\u003eThreadPoolExecutor\u003c/code\u003e 直接复用 \u003ccode\u003eAbstractExecutorService\u003c/code\u003e 的 \u003ccode\u003esubmit\u003c/code\u003e 方法。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eshutdown\u003c/code\u003e - 不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务。\u003cul\u003e\n\u003cli\u003e将线程池切换到 \u003ccode\u003eSHUTDOWN\u003c/code\u003e 状态；\u003c/li\u003e\n\u003cli\u003e并调用 \u003ccode\u003einterruptIdleWorkers\u003c/code\u003e 方法请求中断所有空闲的 worker；\u003c/li\u003e\n\u003cli\u003e最后调用 \u003ccode\u003etryTerminate\u003c/code\u003e 尝试结束线程池。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eshutdownNow\u003c/code\u003e - 立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务。与 \u003ccode\u003eshutdown\u003c/code\u003e 方法类似，不同的地方在于：\u003cul\u003e\n\u003cli\u003e设置状态为 \u003ccode\u003eSTOP\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e中断所有工作线程，无论是否是空闲的；\u003c/li\u003e\n\u003cli\u003e取出阻塞队列中没有被执行的任务并返回。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eisShutdown\u003c/code\u003e - 调用了 \u003ccode\u003eshutdown\u003c/code\u003e 或 \u003ccode\u003eshutdownNow\u003c/code\u003e 方法后，\u003ccode\u003eisShutdown\u003c/code\u003e 方法就会返回 true。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eisTerminaed\u003c/code\u003e - 当所有的任务都已关闭后，才表示线程池关闭成功，这时调用 \u003ccode\u003eisTerminaed\u003c/code\u003e 方法会返回 true。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esetCorePoolSize\u003c/code\u003e - 设置核心线程数大小。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esetMaximumPoolSize\u003c/code\u003e - 设置最大线程数大小。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egetTaskCount\u003c/code\u003e - 线程池已经执行的和未执行的任务总数；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egetCompletedTaskCount\u003c/code\u003e - 线程池已完成的任务数量，该值小于等于 \u003ccode\u003etaskCount\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egetLargestPoolSize\u003c/code\u003e - 线程池曾经创建过的最大线程数量。通过这个数据可以知道线程池是否满过，也就是达到了 \u003ccode\u003emaximumPoolSize\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egetPoolSize\u003c/code\u003e - 线程池当前的线程数量；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egetActiveCount\u003c/code\u003e - 当前线程池中正在执行任务的线程数量。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"使用示例\"\u003e\u003ca href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"\u003e\u003c/a\u003e使用示例\u003c/h3\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eThreadPoolExecutorDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eThreadPoolExecutor\u003c/span\u003e \u003cspan class=\"variable\"\u003ethreadPoolExecutor\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eThreadPoolExecutor\u003c/span\u003e(\u003cspan class=\"number\"\u003e5\u003c/span\u003e, \u003cspan class=\"number\"\u003e10\u003c/span\u003e, \u003cspan class=\"number\"\u003e500\u003c/span\u003e, TimeUnit.MILLISECONDS,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eLinkedBlockingQueue\u003c/span\u003e\u0026lt;Runnable\u0026gt;(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            Executors.defaultThreadFactory(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eThreadPoolExecutor\u003c/span\u003e.AbortPolicy());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e100\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            threadPoolExecutor.execute(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMyThread\u003c/span\u003e());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003einfo\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e String.format(\u003cspan class=\"string\"\u003e\u0026#34;线程池中线程数目：%s，队列中等待执行的任务数目：%s，已执行玩别的任务数目：%s\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                threadPoolExecutor.getPoolSize(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                threadPoolExecutor.getQueue().size(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                threadPoolExecutor.getCompletedTaskCount());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(info);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        threadPoolExecutor.shutdown();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMyThread\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRunnable\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(Thread.currentThread().getName() + \u003cspan class=\"string\"\u003e\u0026#34; 执行\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"Executors\"\u003e\u003ca href=\"#Executors\" class=\"headerlink\" title=\"Executors\"\u003e\u003c/a\u003eExecutors\u003c/h2\u003e\u003cp\u003eJDK 的 \u003ccode\u003eExecutors\u003c/code\u003e 类中提供了几种具有代表性的线程池，这些线程池 \u003cstrong\u003e都是基于 \u003ccode\u003eThreadPoolExecutor\u003c/code\u003e 的定制化实现\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e在实际使用线程池的场景中，我们往往不是直接使用 \u003ccode\u003eThreadPoolExecutor\u003c/code\u003e ，而是使用 JDK 中提供的具有代表性的线程池实例。\u003c/p\u003e\n\u003ch3 id=\"newSingleThreadExecutor\"\u003e\u003ca href=\"#newSingleThreadExecutor\" class=\"headerlink\" title=\"newSingleThreadExecutor\"\u003e\u003c/a\u003enewSingleThreadExecutor\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e创建一个单线程的线程池\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e只会创建唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。 \u003cstrong\u003e如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它\u003c/strong\u003e 。\u003c/p\u003e\n\u003cp\u003e单工作线程最大的特点是：\u003cstrong\u003e可保证顺序地执行各个任务\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e示例：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSingleThreadExecutorDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eExecutorService\u003c/span\u003e \u003cspan class=\"variable\"\u003eexecutorService\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Executors.newSingleThreadExecutor();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e100\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            executorService.execute(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRunnable\u003c/span\u003e() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    System.out.println(Thread.currentThread().getName() + \u003cspan class=\"string\"\u003e\u0026#34; 执行\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            });\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        executorService.shutdown();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"newFixedThreadPool\"\u003e\u003ca href=\"#newFixedThreadPool\" class=\"headerlink\" title=\"newFixedThreadPool\"\u003e\u003c/a\u003enewFixedThreadPool\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e创建一个固定大小的线程池\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e每次提交一个任务就会新创建一个工作线程，如果工作线程数量达到线程池最大线程数，则将提交的任务存入到阻塞队列中\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eFixedThreadPool\u003c/code\u003e 是一个典型且优秀的线程池，它具有线程池提高程序效率和节省创建线程时所耗的开销的优点。但是，在线程池空闲时，即线程池中没有可运行任务时，它不会释放工作线程，还会占用一定的系统资源。\u003c/p\u003e\n\u003cp\u003e示例：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eFixedThreadPoolDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eExecutorService\u003c/span\u003e \u003cspan class=\"variable\"\u003eexecutorService\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Executors.newFixedThreadPool(\u003cspan class=\"number\"\u003e3\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e100\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            executorService.execute(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRunnable\u003c/span\u003e() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    System.out.println(Thread.currentThread().getName() + \u003cspan class=\"string\"\u003e\u0026#34; 执行\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            });\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        executorService.shutdown();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"newCachedThreadPool\"\u003e\u003ca href=\"#newCachedThreadPool\" class=\"headerlink\" title=\"newCachedThreadPool\"\u003e\u003c/a\u003enewCachedThreadPool\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e创建一个可缓存的线程池\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果线程池大小超过处理任务所需要的线程数，就会回收部分空闲的线程；\u003c/li\u003e\n\u003cli\u003e如果长时间没有往线程池中提交任务，即如果工作线程空闲了指定的时间（默认为 1 分钟），则该工作线程将自动终止。终止后，如果你又提交了新的任务，则线程池重新创建一个工作线程。\u003c/li\u003e\n\u003cli\u003e此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说 JVM）能够创建的最大线程大小。 因此，使用 \u003ccode\u003eCachedThreadPool\u003c/code\u003e 时，一定要注意控制任务的数量，否则，由于大量线程同时运行，很有会造成系统瘫痪。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e示例：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eCachedThreadPoolDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eExecutorService\u003c/span\u003e \u003cspan class=\"variable\"\u003eexecutorService\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Executors.newCachedThreadPool();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e100\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            executorService.execute(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRunnable\u003c/span\u003e() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    System.out.println(Thread.currentThread().getName() + \u003cspan class=\"string\"\u003e\u0026#34; 执行\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            });\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        executorService.shutdown();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"newScheduleThreadPool\"\u003e\u003ca href=\"#newScheduleThreadPool\" class=\"headerlink\" title=\"newScheduleThreadPool\"\u003e\u003c/a\u003enewScheduleThreadPool\u003c/h3\u003e\u003cp\u003e创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eScheduledThreadPoolDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        schedule();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        scheduleAtFixedRate();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eschedule\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eScheduledExecutorService\u003c/span\u003e \u003cspan class=\"variable\"\u003eexecutorService\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Executors.newScheduledThreadPool(\u003cspan class=\"number\"\u003e5\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e100\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            executorService.schedule(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRunnable\u003c/span\u003e() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    System.out.println(Thread.currentThread().getName() + \u003cspan class=\"string\"\u003e\u0026#34; 执行\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }, \u003cspan class=\"number\"\u003e1\u003c/span\u003e, TimeUnit.SECONDS);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        executorService.shutdown();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003escheduleAtFixedRate\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eScheduledExecutorService\u003c/span\u003e \u003cspan class=\"variable\"\u003eexecutorService\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Executors.newScheduledThreadPool(\u003cspan class=\"number\"\u003e5\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e100\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            executorService.scheduleAtFixedRate(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRunnable\u003c/span\u003e() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    System.out.println(Thread.currentThread().getName() + \u003cspan class=\"string\"\u003e\u0026#34; 执行\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }, \u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e, TimeUnit.SECONDS);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        executorService.shutdown();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"newWorkStealingPool\"\u003e\u003ca href=\"#newWorkStealingPool\" class=\"headerlink\" title=\"newWorkStealingPool\"\u003e\u003c/a\u003enewWorkStealingPool\u003c/h3\u003e\u003cp\u003eJava 8 才引入。\u003c/p\u003e\n\u003cp\u003e其内部会构建 \u003ccode\u003eForkJoinPool\u003c/code\u003e，利用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/Work_stealing\"\u003eWork-Stealing\u003c/a\u003e 算法，并行地处理任务，不保证处理顺序。\u003c/p\u003e\n\u003ch2 id=\"线程池最佳实践\"\u003e\u003ca href=\"#线程池最佳实践\" class=\"headerlink\" title=\"线程池最佳实践\"\u003e\u003c/a\u003e线程池最佳实践\u003c/h2\u003e\u003ch3 id=\"计算线程数量\"\u003e\u003ca href=\"#计算线程数量\" class=\"headerlink\" title=\"计算线程数量\"\u003e\u003c/a\u003e计算线程数量\u003c/h3\u003e\u003cp\u003e一般多线程执行的任务类型可以分为 CPU 密集型和 I/O 密集型，根据不同的任务类型，我们计算线程数的方法也不一样。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCPU 密集型任务：\u003c/strong\u003e这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1，比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eI/O 密集型任务：\u003c/strong\u003e这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。\u003c/p\u003e\n\u003ch3 id=\"建议使用有界阻塞队列\"\u003e\u003ca href=\"#建议使用有界阻塞队列\" class=\"headerlink\" title=\"建议使用有界阻塞队列\"\u003e\u003c/a\u003e建议使用有界阻塞队列\u003c/h3\u003e\u003cp\u003e不建议使用 \u003ccode\u003eExecutors\u003c/code\u003e 的最重要的原因是：\u003ccode\u003eExecutors\u003c/code\u003e 提供的很多方法默认使用的都是无界的 \u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e，高负载情境下，无界队列很容易导致 OOM，而 OOM 会导致所有请求都无法处理，这是致命问题。所以\u003cstrong\u003e强烈建议使用有界队列\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e《阿里巴巴 Java 开发手册》中提到，禁止使用这些方法来创建线程池，而应该手动 \u003ccode\u003enew ThreadPoolExecutor\u003c/code\u003e 来创建线程池。制订这条规则是因为容易导致生产事故，最典型的就是 \u003ccode\u003enewFixedThreadPool\u003c/code\u003e 和 \u003ccode\u003enewCachedThreadPool\u003c/code\u003e，可能因为资源耗尽导致 OOM 问题。\u003c/p\u003e\n\u003cp\u003e【示例】\u003ccode\u003enewFixedThreadPool\u003c/code\u003e OOM\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eThreadPoolExecutor\u003c/span\u003e \u003cspan class=\"variable\"\u003ethreadPool\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e (ThreadPoolExecutor) Executors.newFixedThreadPool(\u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprintStats(threadPool);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e100000000\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tthreadPool.execute(() -\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003epayload\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e IntStream.rangeClosed(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e1000000\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t.mapToObj(__ -\u0026gt; \u003cspan class=\"string\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t.collect(Collectors.joining(\u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e)) + UUID.randomUUID().toString();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tTimeUnit.HOURS.sleep(\u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t} \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (InterruptedException e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tlog.info(payload);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t});\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ethreadPool.shutdown();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ethreadPool.awaitTermination(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, TimeUnit.HOURS);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003enewFixedThreadPool\u003c/code\u003e 使用的工作队列是 \u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e ，而默认构造方法的 \u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e 是一个 \u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e 长度的队列，可以认为是无界的。如果任务较多并且执行较慢的话，队列可能会快速积压，撑爆内存导致 OOM。\u003c/p\u003e\n\u003cp\u003e【示例】\u003ccode\u003enewCachedThreadPool\u003c/code\u003e OOM\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eThreadPoolExecutor\u003c/span\u003e \u003cspan class=\"variable\"\u003ethreadPool\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e (ThreadPoolExecutor) Executors.newCachedThreadPool();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprintStats(threadPool);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e100000000\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tthreadPool.execute(() -\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003epayload\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e UUID.randomUUID().toString();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tTimeUnit.HOURS.sleep(\u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t} \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (InterruptedException e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tlog.info(payload);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t});\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ethreadPool.shutdown();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ethreadPool.awaitTermination(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, TimeUnit.HOURS);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003enewCachedThreadPool\u003c/code\u003e 的最大线程数是 \u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e，可以认为是没有上限的，而其工作队列 \u003ccode\u003eSynchronousQueue\u003c/code\u003e 是一个没有存储空间的阻塞队列。这意味着，只要有请求到来，就必须找到一条工作线程来处理，如果当前没有空闲的线程就再创建一条新的。\u003c/p\u003e\n\u003cp\u003e如果大量的任务进来后会创建大量的线程。我们知道线程是需要分配一定的内存空间作为线程栈的，比如 1MB，因此无限制创建线程必然会导致 OOM。\u003c/p\u003e\n\u003ch3 id=\"重要任务应该自定义拒绝策略\"\u003e\u003ca href=\"#重要任务应该自定义拒绝策略\" class=\"headerlink\" title=\"重要任务应该自定义拒绝策略\"\u003e\u003c/a\u003e重要任务应该自定义拒绝策略\u003c/h3\u003e\u003cp\u003e使用有界队列，当任务过多时，线程池会触发执行拒绝策略，线程池默认的拒绝策略会 throw \u003ccode\u003eRejectedExecutionException\u003c/code\u003e 这是个运行时异常，对于运行时异常编译器并不强制 \u003ccode\u003ecatch\u003c/code\u003e 它，所以开发人员很容易忽略。因此\u003cstrong\u003e默认拒绝策略要慎重使用\u003c/strong\u003e。如果线程池处理的任务非常重要，建议自定义自己的拒绝策略；并且在实际工作中，自定义的拒绝策略往往和降级策略配合使用。\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/10484692/\"\u003e《Java 并发编程实战》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/26591326/\"\u003e《Java 并发编程的艺术》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.jianshu.com/p/d2729853c4da\"\u003e深入理解 Java 线程池：ThreadPoolExecutor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.cnblogs.com/MOBIN/p/5436482.html\"\u003ejava 并发编程–Executor 框架\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-12-24T15:52:25Z",
  "Author": "钝悟 ◾ Dunwu"
}