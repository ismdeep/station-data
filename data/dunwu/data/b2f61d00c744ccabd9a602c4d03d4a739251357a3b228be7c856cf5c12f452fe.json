{
  "Source": "dunwu",
  "Title": "Spring 泛型处理",
  "Link": "https://dunwu.github.io/blog/pages/175cbd/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Spring-泛型处理\"\u003e\u003ca href=\"#Spring-泛型处理\" class=\"headerlink\" title=\"Spring 泛型处理\"\u003e\u003c/a\u003eSpring 泛型处理\u003c/h1\u003e\u003ch2 id=\"Java-泛型基础\"\u003e\u003ca href=\"#Java-泛型基础\" class=\"headerlink\" title=\"Java 泛型基础\"\u003e\u003c/a\u003eJava 泛型基础\u003c/h2\u003e\u003cp\u003e泛型类型\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e泛型类型是在类型上参数化的泛型类或接口\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e泛型使用场景\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e编译时强类型检查\u003c/li\u003e\n\u003cli\u003e避免类型强转\u003c/li\u003e\n\u003cli\u003e实现通用算法\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e泛型类型擦写\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e泛型被引入到 Java 语言中，以便在编译时提供更严格的类型检查并支持泛型编程。类型擦除确保不会\u003cbr/\u003e为参数化类型创建新类；因此，泛型不会产生运行时开销。为了实现泛型，编译器将类型擦除应用于：\u003cul\u003e\n\u003cli\u003e将泛型类型中的所有类型参数替换为其边界，如果类型参数是无边界的，则将其替换为\u003cbr/\u003e“Object”。因此，生成的字节码只包含普通类、接口和方法\u003c/li\u003e\n\u003cli\u003e必要时插入类型转换以保持类型安全\u003c/li\u003e\n\u003cli\u003e生成桥方法以保留扩展泛型类型中的多态性\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Java-5-类型接口\"\u003e\u003ca href=\"#Java-5-类型接口\" class=\"headerlink\" title=\"Java 5 类型接口\"\u003e\u003c/a\u003eJava 5 类型接口\u003c/h2\u003e\u003cp\u003eJava 5 类型接口 - \u003ccode\u003ejava.lang.reflect.Type\u003c/code\u003e\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e派生类或接口\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ejava.lang.Class\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJava 类 API，如 \u003ccode\u003ejava.lang.String\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ejava.lang.reflect.GenericArrayType\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e泛型数组类型\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ejava.lang.reflect.ParameterizedType\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e泛型参数类型\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ejava.lang.reflect.TypeVariable\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e泛型类型变量，如 \u003ccode\u003eCollection\u0026lt;E\u0026gt;\u003c/code\u003e 中的 E\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ejava.lang.reflect.WildcardType\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e泛型通配类型\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003eJava 泛型反射 API\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003eAPI\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e泛型信息（Generics Info）\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ejava.lang.Class#getGenericInfo()\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e泛型参数（Parameters）\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ejava.lang.reflect.ParameterizedType\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e泛型父类（Super Classes）\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ejava.lang.Class#getGenericSuperclass()\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e泛型接口（Interfaces）\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ejava.lang.Class#getGenericInterfaces()\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e泛型声明（Generics Declaration）\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ejava.lang.reflect.GenericDeclaration\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"Spring-泛型类型辅助类\"\u003e\u003ca href=\"#Spring-泛型类型辅助类\" class=\"headerlink\" title=\"Spring 泛型类型辅助类\"\u003e\u003c/a\u003eSpring 泛型类型辅助类\u003c/h2\u003e\u003cp\u003e核心 API - \u003ccode\u003eorg.springframework.core.GenericTypeResolver\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e版本支持：[2.5.2 , )\u003c/li\u003e\n\u003cli\u003e处理类型相关（Type）相关方法\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eresolveReturnType\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eresolveType\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e处理泛型参数类型（\u003ccode\u003eParameterizedType\u003c/code\u003e）相关方法\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eresolveReturnTypeArgument\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eresolveTypeArgument\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eresolveTypeArguments\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e处理泛型类型变量（\u003ccode\u003eTypeVariable\u003c/code\u003e）相关方法\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egetTypeVariableMap\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-泛型集合类型辅助类\"\u003e\u003ca href=\"#Spring-泛型集合类型辅助类\" class=\"headerlink\" title=\"Spring 泛型集合类型辅助类\"\u003e\u003c/a\u003eSpring 泛型集合类型辅助类\u003c/h2\u003e\u003cp\u003e核心 API - \u003ccode\u003eorg.springframework.core.GenericCollectionTypeResolver\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e版本支持：[2.0 , 4.3]\u003c/li\u003e\n\u003cli\u003e替换实现：\u003ccode\u003eorg.springframework.core.ResolvableType\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e处理 Collection 相关\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egetCollection*Type\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e处理 Map 相关\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egetMapKey*Type\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egetMapValue*Type\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-方法参数封装-MethodParameter\"\u003e\u003ca href=\"#Spring-方法参数封装-MethodParameter\" class=\"headerlink\" title=\"Spring 方法参数封装 - MethodParameter\"\u003e\u003c/a\u003eSpring 方法参数封装 - MethodParameter\u003c/h2\u003e\u003cp\u003e核心 API - \u003ccode\u003eorg.springframework.core.MethodParameter\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e起始版本：[2.0 , )\u003c/li\u003e\n\u003cli\u003e元信息\u003cul\u003e\n\u003cli\u003e关联的方法 - Method\u003c/li\u003e\n\u003cli\u003e关联的构造器 - Constructor\u003c/li\u003e\n\u003cli\u003e构造器或方法参数索引 - parameterIndex\u003c/li\u003e\n\u003cli\u003e构造器或方法参数类型 - parameterType\u003c/li\u003e\n\u003cli\u003e构造器或方法参数泛型类型 - genericParameterType\u003c/li\u003e\n\u003cli\u003e构造器或方法参数参数名称 - parameterName\u003c/li\u003e\n\u003cli\u003e所在的类 - containingClass\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-4-0-泛型优化实现-ResolvableType\"\u003e\u003ca href=\"#Spring-4-0-泛型优化实现-ResolvableType\" class=\"headerlink\" title=\"Spring 4.0 泛型优化实现 - ResolvableType\"\u003e\u003c/a\u003eSpring 4.0 泛型优化实现 - ResolvableType\u003c/h2\u003e\u003cp\u003e核心 API - \u003ccode\u003eorg.springframework.core.ResolvableType\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e起始版本：[4.0 , )\u003c/li\u003e\n\u003cli\u003e扮演角色：\u003ccode\u003eGenericTypeResolver\u003c/code\u003e 和 \u003ccode\u003eGenericCollectionTypeResolver\u003c/code\u003e 替代者\u003c/li\u003e\n\u003cli\u003e工厂方法：\u003ccode\u003efor*\u003c/code\u003e 方法\u003c/li\u003e\n\u003cli\u003e转换方法：\u003ccode\u003eas*\u003c/code\u003e 方法\u003c/li\u003e\n\u003cli\u003e处理方法：\u003ccode\u003eresolve*\u003c/code\u003e 方法\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ResolvableType-的局限性\"\u003e\u003ca href=\"#ResolvableType-的局限性\" class=\"headerlink\" title=\"ResolvableType 的局限性\"\u003e\u003c/a\u003eResolvableType 的局限性\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e局限一：ResolvableType 无法处理泛型擦写\u003c/li\u003e\n\u003cli\u003e局限二：ResolvableType 无法处理非具体化的 ParameterizedType\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"问题\"\u003e\u003ca href=\"#问题\" class=\"headerlink\" title=\"问题\"\u003e\u003c/a\u003e问题\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eJava 泛型擦写发生在编译时还是运行时\u003c/strong\u003e？\u003c/p\u003e\n\u003cp\u003e运行时\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e请介绍 Java 5 Type 类型的派生类或接口\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ejava.lang.Class\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ejava.lang.reflect.GenericArrayType\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ejava.lang.reflect.ParameterizedType\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ejava.lang.reflect.TypeVariable\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ejava.lang.reflect.WildcardType\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e请说明 ResolvableType 的设计优势\u003c/strong\u003e？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e简化 Java 5 Type API 开发，屏蔽复杂 API 的运用，如 ParameterizedType\u003c/li\u003e\n\u003cli\u003e不变性设计（Immutability）\u003c/li\u003e\n\u003cli\u003eFluent API 设计（Builder 模式），链式（流式）编程\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans\"\u003eSpring 官方文档之 Core Technologies\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/course/intro/265\"\u003e《小马哥讲 Spring 核心编程思想》\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-12-22T12:11:52Z",
  "Author": "钝悟 ◾ Dunwu"
}