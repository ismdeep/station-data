{
  "Source": "dunwu",
  "Title": "面向对象原则",
  "Link": "https://dunwu.github.io/blog/pages/9703b1/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"面向对象设计六大原则\"\u003e\u003ca href=\"#面向对象设计六大原则\" class=\"headerlink\" title=\"面向对象设计六大原则\"\u003e\u003c/a\u003e面向对象设计六大原则\u003c/h1\u003e\u003ch2 id=\"单一职责原则\"\u003e\u003ca href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"\u003e\u003c/a\u003e单一职责原则\u003c/h2\u003e\u003cp\u003e单一职责原则（Single Responsibility Principle），应该有且仅有一个原因引起类的变更。\u003c/p\u003e\n\u003cp\u003e简单点说，\u003cstrong\u003e一个类，最好只负责一件事。\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id=\"开放-封闭原则\"\u003e\u003ca href=\"#开放-封闭原则\" class=\"headerlink\" title=\"开放-封闭原则\"\u003e\u003c/a\u003e开放-封闭原则\u003c/h2\u003e\u003cp\u003e开放-封闭原则（Open Close Principle），软件实体（类、模块、函数）等应该可以扩展，但是不可修改。\u003c/p\u003e\n\u003cp\u003e对于扩展是开放的；对于更改是封闭的。\u003c/p\u003e\n\u003ch2 id=\"里氏替换原则\"\u003e\u003ca href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"\u003e\u003c/a\u003e里氏替换原则\u003c/h2\u003e\u003cp\u003e里氏替换原则（Liskov Substitution Principle），子类可以替换父类。\u003c/p\u003e\n\u003ch2 id=\"依赖倒置原则\"\u003e\u003ca href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"\u003e\u003c/a\u003e依赖倒置原则\u003c/h2\u003e\u003cp\u003e依赖倒置原则（Dependency Inversion Principle），抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。\u003c/p\u003e\n\u003cp\u003e关键点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e高层模块不应该依赖低层模块，两者都应该依赖其抽象\u003c/li\u003e\n\u003cli\u003e抽象不应该依赖细节\u003c/li\u003e\n\u003cli\u003e细节应该依赖抽象\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"接口隔离原则\"\u003e\u003ca href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"\u003e\u003c/a\u003e接口隔离原则\u003c/h2\u003e\u003cp\u003e接口隔离原则（Interface Segregation Principle）使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e客户端不应依赖它不需要的接口\u003c/li\u003e\n\u003cli\u003e类间的依赖关系应该建立在最小的接口上\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"迪米特原则\"\u003e\u003ca href=\"#迪米特原则\" class=\"headerlink\" title=\"迪米特原则\"\u003e\u003c/a\u003e迪米特原则\u003c/h2\u003e\u003cp\u003e迪米特原则（Least Knowledge Principle）又称最少知识原则，一个软件实体应当尽可能少地与其他实体发生相互作用。\u003c/p\u003e\n\u003cp\u003e一个类应该对自己需要调用的类知道得最少，类的内部如何实现、如何复杂都与调用者或者依赖者没关系，调用者或者依赖者只需要知道他需要的方法即可，其他的我一概不关心。\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/2243615/\"\u003e《Head First 设计模式》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/2334288/\"\u003e《大话设计模式》\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-05-19T01:49:05Z",
  "Author": "钝悟 ◾ Dunwu"
}