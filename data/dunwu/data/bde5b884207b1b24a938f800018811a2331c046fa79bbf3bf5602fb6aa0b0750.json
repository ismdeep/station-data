{
  "Source": "dunwu",
  "Title": "Java 二进制序列化",
  "Link": "https://dunwu.github.io/blog/pages/08d872/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Java-二进制序列化\"\u003e\u003ca href=\"#Java-二进制序列化\" class=\"headerlink\" title=\"Java 二进制序列化\"\u003e\u003c/a\u003eJava 二进制序列化\u003c/h1\u003e\u003ch2 id=\"简介\"\u003e\u003ca href=\"#简介\" class=\"headerlink\" title=\"简介\"\u003e\u003c/a\u003e简介\u003c/h2\u003e\u003ch3 id=\"为什么需要二进制序列化库\"\u003e\u003ca href=\"#为什么需要二进制序列化库\" class=\"headerlink\" title=\"为什么需要二进制序列化库\"\u003e\u003c/a\u003e为什么需要二进制序列化库\u003c/h3\u003e\u003cp\u003e原因很简单，就是 Java 默认的序列化机制（\u003ccode\u003eObjectInputStream\u003c/code\u003e 和 \u003ccode\u003eObjectOutputStream\u003c/code\u003e）具有很多缺点。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e不了解 Java 默认的序列化机制，可以参考：\u003ca href=\"https://dunwu.github.io/waterdrop/pages/2b2f0f/\"\u003eJava 序列化\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eJava 自身的序列化方式具有以下缺点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e无法跨语言使用\u003c/strong\u003e。这点最为致命，对于很多需要跨语言通信的异构系统来说，不能跨语言序列化，即意味着完全无法通信（彼此数据不能识别，当然无法交互了）。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e序列化的性能不高\u003c/strong\u003e。序列化后的数据体积较大，这大大影响存储和传输的效率。\u003c/li\u003e\n\u003cli\u003e序列化一定需要实现 \u003ccode\u003eSerializable\u003c/code\u003e 接口。\u003c/li\u003e\n\u003cli\u003e需要关注 \u003ccode\u003eserialVersionUID\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e引入二进制序列化库就是为了解决这些问题，这在 RPC 应用中尤为常见。\u003c/p\u003e\n\u003ch3 id=\"主流序列化库简介\"\u003e\u003ca href=\"#主流序列化库简介\" class=\"headerlink\" title=\"主流序列化库简介\"\u003e\u003c/a\u003e主流序列化库简介\u003c/h3\u003e\u003ch4 id=\"Protobuf\"\u003e\u003ca href=\"#Protobuf\" class=\"headerlink\" title=\"Protobuf\"\u003e\u003c/a\u003eProtobuf\u003c/h4\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://developers.google.com/protocol-buffers/\"\u003eProtobuf\u003c/a\u003e 是 Google 公司内部的混合语言数据标准，是一种轻便、高效的结构化数据存储\u003cbr/\u003e格式，可以用于结构化数据序列化，支持 Java、Python、C++、Go 等语言。Protobuf\u003cbr/\u003e使用的时候需要定义 IDL（Interface description language），然后使用不同语言的 IDL\u003cbr/\u003e编译器，生成序列化工具类。\u003c/p\u003e\n\u003cp\u003e优点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e序列化后体积相比 JSON、Hessian 小很多\u003c/li\u003e\n\u003cli\u003e序列化反序列化速度很快，不需要通过反射获取类型\u003c/li\u003e\n\u003cli\u003e语言和平台无关（基于 IDL），IDL 能清晰地描述语义，所以足以帮助并保证应用程序之间的类型不会丢失，无需类似 XML 解析器\u003c/li\u003e\n\u003cli\u003e消息格式升级和兼容性不错，可以做到后向兼容\u003c/li\u003e\n\u003cli\u003e支持 Java, C++, Python 三种语言\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e缺点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eProtobuf 对于具有反射和动态能力的语言来说，用起来很费劲。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"Thrift\"\u003e\u003ca href=\"#Thrift\" class=\"headerlink\" title=\"Thrift\"\u003e\u003c/a\u003eThrift\u003c/h4\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/apache/thrift\"\u003eThrift\u003c/a\u003e 是 apache 开源项目，是一个点对点的 RPC 实现。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e它具有以下特性：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e支持多种语言（目前支持 28 种语言，如：C++、go、Java、Php、Python、Ruby 等等）。\u003c/li\u003e\n\u003cli\u003e使用了组建大型数据交换及存储工具，对于大型系统中的内部数据传输，相对于 Json 和 xml 在性能上和传输大小上都有明显的优势。\u003c/li\u003e\n\u003cli\u003e支持三种比较典型的编码方式（通用二进制编码，压缩二进制编码，优化的可选字段压缩编解码）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"Hessian\"\u003e\u003ca href=\"#Hessian\" class=\"headerlink\" title=\"Hessian\"\u003e\u003c/a\u003eHessian\u003c/h4\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://hessian.caucho.com/\"\u003eHessian\u003c/a\u003e 是动态类型、二进制、紧凑的，并且可跨语言移植的一种序列化框架。Hessian 协\u003cbr/\u003e议要比 JDK、JSON 更加紧凑，性能上要比 JDK、JSON 序列化高效很多，而且生成的字节\u003cbr/\u003e数也更小。\u003c/p\u003e\n\u003cp\u003eRPC 框架 Dubbo 就支持 Thrift 和 Hession。\u003c/p\u003e\n\u003cp\u003e它具有以下特性：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e支持多种语言。如：Java、Python、C++、C#、PHP、Ruby 等。\u003c/li\u003e\n\u003cli\u003e相对其他二进制序列化库较慢。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHessian 本身也有问题，官方版本对 Java 里面一些常见对象的类型不支持：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLinked 系列，LinkedHashMap、LinkedHashSet 等，但是可以通过扩展 CollectionDeserializer 类修复；\u003c/li\u003e\n\u003cli\u003eLocale 类，可以通过扩展 ContextSerializerFactory 类修复；\u003c/li\u003e\n\u003cli\u003eByte/Short 反序列化的时候变成 Integer。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"Kryo\"\u003e\u003ca href=\"#Kryo\" class=\"headerlink\" title=\"Kryo\"\u003e\u003c/a\u003eKryo\u003c/h4\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/EsotericSoftware/kryo\"\u003eKryo\u003c/a\u003e 是用于 Java 的快速高效的二进制对象图序列化框架。Kryo 还可以执行自动的深拷贝和浅拷贝。 这是从对象到对象的直接复制，而不是从对象到字节的复制。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e它具有以下特性：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e速度快，序列化体积小\u003c/li\u003e\n\u003cli\u003e官方不支持 Java 以外的其他语言\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"FST\"\u003e\u003ca href=\"#FST\" class=\"headerlink\" title=\"FST\"\u003e\u003c/a\u003eFST\u003c/h4\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/RuedigerMoeller/fast-serialization\"\u003eFST\u003c/a\u003e 是一个 Java 实现二进制序列化库。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e它具有以下特性：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e近乎于 100% 兼容 JDK 序列化，且比 JDK 原序列化方式快 10 倍\u003c/li\u003e\n\u003cli\u003e2.17 开始与 Android 兼容\u003c/li\u003e\n\u003cli\u003e（可选）2.29 开始支持将任何可序列化的对象图编码/解码为 JSON（包括共享引用）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"小结\"\u003e\u003ca href=\"#小结\" class=\"headerlink\" title=\"小结\"\u003e\u003c/a\u003e小结\u003c/h4\u003e\u003cp\u003e了解了以上这些常见的二进制序列化库的特性。在技术选型时，我们就可以做到有的放矢。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（1）选型参考依据\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e对于二进制序列化库，我们的选型考量一般有以下几点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e是否支持跨语言\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e根据业务实际需求来决定。一般来说，支持跨语言，为了兼容，使用复杂度上一般会更高一些。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e序列化、反序列化的性能\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e类库是否轻量化，API 是否简单易懂\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e（2）选型建议\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e如果需要跨语言通信，那么可以考虑：Protobuf、Thrift、Hession。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/apache/thrift\"\u003ethrift\u003c/a\u003e、\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/protocolbuffers/protobuf\"\u003eprotobuf\u003c/a\u003e - 适用于对性能敏感，对开发体验要求不高的内部系统。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://hessian.caucho.com/doc/hessian-overview.xtp\"\u003ehessian\u003c/a\u003e - 适用于对开发体验敏感，性能有要求的内外部系统。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e如果不需要跨语言通信，可以考虑：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/EsotericSoftware/kryo\"\u003eKryo\u003c/a\u003e 和 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/RuedigerMoeller/fast-serialization\"\u003eFST\u003c/a\u003e，性能不错，且 API 十分简单。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"FST-应用\"\u003e\u003ca href=\"#FST-应用\" class=\"headerlink\" title=\"FST 应用\"\u003e\u003c/a\u003eFST 应用\u003c/h2\u003e\u003ch3 id=\"引入依赖\"\u003e\u003ca href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"\u003e\u003c/a\u003e引入依赖\u003c/h3\u003e\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003edependency\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003egroupId\u003c/span\u003e\u0026gt;\u003c/span\u003ede.ruedigermoeller\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003egroupId\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eartifactId\u003c/span\u003e\u0026gt;\u003c/span\u003efst\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eartifactId\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eversion\u003c/span\u003e\u0026gt;\u003c/span\u003e2.56\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eversion\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003edependency\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"FST-API\"\u003e\u003ca href=\"#FST-API\" class=\"headerlink\" title=\"FST API\"\u003e\u003c/a\u003eFST API\u003c/h3\u003e\u003cp\u003e示例：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e60\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e61\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e62\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e63\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e64\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e org.nustaq.serialization.FSTConfiguration;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e java.io.IOException;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e java.nio.charset.StandardCharsets;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e java.util.Base64;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eFstDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003eFSTConfiguration\u003c/span\u003e \u003cspan class=\"variable\"\u003eDEFAULT_CONFIG\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e FSTConfiguration.createDefaultConfiguration();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * 将对象序列化为 byte 数组\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  *\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e obj 任意对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e \u0026lt;T\u0026gt; 对象的类型\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@return\u003c/span\u003e 序列化后的 byte 数组\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u0026lt;T\u0026gt; \u003cspan class=\"type\"\u003ebyte\u003c/span\u003e[] writeToBytes(T obj) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e DEFAULT_CONFIG.asByteArray(obj);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * 将对象序列化为 byte 数组后，再使用 Base64 编码\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  *\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e obj 任意对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e \u0026lt;T\u0026gt; 对象的类型\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@return\u003c/span\u003e 序列化后的字符串\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u0026lt;T\u0026gt; String \u003cspan class=\"title function_\"\u003ewriteToString\u003c/span\u003e\u003cspan class=\"params\"\u003e(T obj)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003ebyte\u003c/span\u003e[] bytes = writeToBytes(obj);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eString\u003c/span\u003e(Base64.getEncoder().encode(bytes), StandardCharsets.UTF_8);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * 将 byte 数组反序列化为原对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  *\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e bytes {\u003cspan class=\"doctag\"\u003e@link\u003c/span\u003e #writeToBytes} 方法序列化后的 byte 数组\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e clazz 原对象的类型\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e \u0026lt;T\u0026gt;   原对象的类型\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@return\u003c/span\u003e 原对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u0026lt;T\u0026gt; T \u003cspan class=\"title function_\"\u003ereadFromBytes\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003ebyte\u003c/span\u003e[] bytes, Class\u0026lt;T\u0026gt; clazz)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e IOException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003eObject\u003c/span\u003e \u003cspan class=\"variable\"\u003eobj\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e DEFAULT_CONFIG.asObject(bytes);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (clazz.isInstance(obj)) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (T) obj;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   \u003cspan class=\"keyword\"\u003ethrow\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eIOException\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;derialize failed\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * 将字符串反序列化为原对象，先使用 Base64 解码\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  *\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e str   {\u003cspan class=\"doctag\"\u003e@link\u003c/span\u003e #writeToString} 方法序列化后的字符串\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e clazz 原对象的类型\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e \u0026lt;T\u0026gt;   原对象的类型\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@return\u003c/span\u003e 原对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u0026lt;T\u0026gt; T \u003cspan class=\"title function_\"\u003ereadFromString\u003c/span\u003e\u003cspan class=\"params\"\u003e(String str, Class\u0026lt;T\u0026gt; clazz)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e IOException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003ebyte\u003c/span\u003e[] bytes = str.getBytes(StandardCharsets.UTF_8);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e readFromBytes(Base64.getDecoder().decode(bytes), clazz);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e测试：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003elong\u003c/span\u003e \u003cspan class=\"variable\"\u003ebegin\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e System.currentTimeMillis();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; BATCH_SIZE; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eTestBean\u003c/span\u003e \u003cspan class=\"variable\"\u003eoldBean\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e BeanUtils.initJdk8Bean();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003ebyte\u003c/span\u003e[] bytes = FstDemo.writeToBytes(oldBean);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eTestBean\u003c/span\u003e \u003cspan class=\"variable\"\u003enewBean\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e FstDemo.readFromBytes(bytes, TestBean.class);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003elong\u003c/span\u003e \u003cspan class=\"variable\"\u003eend\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e System.currentTimeMillis();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSystem.out.printf(\u003cspan class=\"string\"\u003e\u0026#34;FST 序列化/反序列化耗时：%s\u0026#34;\u003c/span\u003e, (end - begin));\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"Kryo-应用\"\u003e\u003ca href=\"#Kryo-应用\" class=\"headerlink\" title=\"Kryo 应用\"\u003e\u003c/a\u003eKryo 应用\u003c/h2\u003e\u003ch3 id=\"引入依赖-1\"\u003e\u003ca href=\"#引入依赖-1\" class=\"headerlink\" title=\"引入依赖\"\u003e\u003c/a\u003e引入依赖\u003c/h3\u003e\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003edependency\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003egroupId\u003c/span\u003e\u0026gt;\u003c/span\u003ecom.esotericsoftware\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003egroupId\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eartifactId\u003c/span\u003e\u0026gt;\u003c/span\u003ekryo\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eartifactId\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eversion\u003c/span\u003e\u0026gt;\u003c/span\u003e5.0.0-RC4\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eversion\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003edependency\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"Kryo-API\"\u003e\u003ca href=\"#Kryo-API\" class=\"headerlink\" title=\"Kryo API\"\u003e\u003c/a\u003eKryo API\u003c/h3\u003e\u003cp\u003e示例：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e60\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e61\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e62\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e63\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e65\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e66\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e67\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e68\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e69\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e70\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e71\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e72\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e73\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e74\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e75\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e76\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e77\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e78\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e79\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e80\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e81\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e82\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e83\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e84\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e85\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e86\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e87\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e88\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e89\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e90\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e91\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e92\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e93\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e94\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e95\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e96\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e97\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e98\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e99\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e100\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e101\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e102\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e103\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e104\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e105\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e com.esotericsoftware.kryo.Kryo;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e com.esotericsoftware.kryo.io.Input;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e com.esotericsoftware.kryo.io.Output;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e com.esotericsoftware.kryo.util.DefaultInstantiatorStrategy;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e org.objenesis.strategy.StdInstantiatorStrategy;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e java.io.ByteArrayInputStream;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e java.io.ByteArrayOutputStream;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e java.nio.charset.StandardCharsets;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e java.util.Base64;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eKryoDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"comment\"\u003e// 每个线程的 Kryo 实例\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e ThreadLocal\u0026lt;Kryo\u0026gt; kryoLocal = ThreadLocal.withInitial(() -\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003eKryo\u003c/span\u003e \u003cspan class=\"variable\"\u003ekryo\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eKryo\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e   * 不要轻易改变这里的配置！更改之后，序列化的格式就会发生变化，\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e   * 上线的同时就必须清除 Redis 里的所有缓存，\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e   * 否则那些缓存再回来反序列化的时候，就会报错\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e   */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e//支持对象循环引用（否则会栈溢出）\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  kryo.setReferences(\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e); \u003cspan class=\"comment\"\u003e//默认值就是 true，添加此行的目的是为了提醒维护者，不要改变这个配置\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e//不强制要求注册类（注册行为无法保证多个 JVM 内同一个类的注册编号相同；而且业务系统中大量的 Class 也难以一一注册）\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  kryo.setRegistrationRequired(\u003cspan class=\"literal\"\u003efalse\u003c/span\u003e); \u003cspan class=\"comment\"\u003e//默认值就是 false，添加此行的目的是为了提醒维护者，不要改变这个配置\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e//Fix the NPE bug when deserializing Collections.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  ((DefaultInstantiatorStrategy) kryo.getInstantiatorStrategy())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   .setFallbackInstantiatorStrategy(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eStdInstantiatorStrategy\u003c/span\u003e());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e kryo;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e });\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * 获得当前线程的 Kryo 实例\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  *\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@return\u003c/span\u003e 当前线程的 Kryo 实例\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e Kryo \u003cspan class=\"title function_\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e kryoLocal.get();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * 将对象序列化为 byte 数组\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  *\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e obj 任意对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e \u0026lt;T\u0026gt; 对象的类型\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@return\u003c/span\u003e 序列化后的 byte 数组\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u0026lt;T\u0026gt; \u003cspan class=\"type\"\u003ebyte\u003c/span\u003e[] writeToBytes(T obj) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003eByteArrayOutputStream\u003c/span\u003e \u003cspan class=\"variable\"\u003ebyteArrayOutputStream\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eByteArrayOutputStream\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003eOutput\u003c/span\u003e \u003cspan class=\"variable\"\u003eoutput\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eOutput\u003c/span\u003e(byteArrayOutputStream);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003eKryo\u003c/span\u003e \u003cspan class=\"variable\"\u003ekryo\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e getInstance();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  kryo.writeObject(output, obj);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  output.flush();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e byteArrayOutputStream.toByteArray();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * 将对象序列化为 byte 数组后，再使用 Base64 编码\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  *\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e obj 任意对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e \u0026lt;T\u0026gt; 对象的类型\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@return\u003c/span\u003e 序列化后的字符串\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u0026lt;T\u0026gt; String \u003cspan class=\"title function_\"\u003ewriteToString\u003c/span\u003e\u003cspan class=\"params\"\u003e(T obj)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003ebyte\u003c/span\u003e[] bytes = writeToBytes(obj);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eString\u003c/span\u003e(Base64.getEncoder().encode(bytes), StandardCharsets.UTF_8);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * 将 byte 数组反序列化为原对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  *\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e bytes {\u003cspan class=\"doctag\"\u003e@link\u003c/span\u003e #writeToBytes} 方法序列化后的 byte 数组\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e clazz 原对象的类型\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e \u0026lt;T\u0026gt;   原对象的类型\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@return\u003c/span\u003e 原对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"meta\"\u003e@SuppressWarnings(\u0026#34;unchecked\u0026#34;)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u0026lt;T\u0026gt; T \u003cspan class=\"title function_\"\u003ereadFromBytes\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003ebyte\u003c/span\u003e[] bytes, Class\u0026lt;T\u0026gt; clazz)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003eByteArrayInputStream\u003c/span\u003e \u003cspan class=\"variable\"\u003ebyteArrayInputStream\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eByteArrayInputStream\u003c/span\u003e(bytes);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003eInput\u003c/span\u003e \u003cspan class=\"variable\"\u003einput\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eInput\u003c/span\u003e(byteArrayInputStream);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003eKryo\u003c/span\u003e \u003cspan class=\"variable\"\u003ekryo\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e getInstance();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (T) kryo.readObject(input, clazz);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * 将字符串反序列化为原对象，先使用 Base64 解码\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  *\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e str   {\u003cspan class=\"doctag\"\u003e@link\u003c/span\u003e #writeToString} 方法序列化后的字符串\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e clazz 原对象的类型\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@param\u003c/span\u003e \u0026lt;T\u0026gt;   原对象的类型\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  * \u003cspan class=\"doctag\"\u003e@return\u003c/span\u003e 原对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e  */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u0026lt;T\u0026gt; T \u003cspan class=\"title function_\"\u003ereadFromString\u003c/span\u003e\u003cspan class=\"params\"\u003e(String str, Class\u0026lt;T\u0026gt; clazz)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003ebyte\u003c/span\u003e[] bytes = str.getBytes(StandardCharsets.UTF_8);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e readFromBytes(Base64.getDecoder().decode(bytes), clazz);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e测试：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003elong\u003c/span\u003e \u003cspan class=\"variable\"\u003ebegin\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e System.currentTimeMillis();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; BATCH_SIZE; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eTestBean\u003c/span\u003e \u003cspan class=\"variable\"\u003eoldBean\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e BeanUtils.initJdk8Bean();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003ebyte\u003c/span\u003e[] bytes = KryoDemo.writeToBytes(oldBean);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eTestBean\u003c/span\u003e \u003cspan class=\"variable\"\u003enewBean\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e KryoDemo.readFromBytes(bytes, TestBean.class);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003elong\u003c/span\u003e \u003cspan class=\"variable\"\u003eend\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e System.currentTimeMillis();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSystem.out.printf(\u003cspan class=\"string\"\u003e\u0026#34;Kryo 序列化/反序列化耗时：%s\u0026#34;\u003c/span\u003e, (end - begin));\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eHessian 应用\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eStudent\u003c/span\u003e \u003cspan class=\"variable\"\u003estudent\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eStudent\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003estudent.setNo(\u003cspan class=\"number\"\u003e101\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003estudent.setName(\u003cspan class=\"string\"\u003e\u0026#34;HESSIAN\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//把student对象转化为byte数组\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eByteArrayOutputStream\u003c/span\u003e \u003cspan class=\"variable\"\u003ebos\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eByteArrayOutputStream\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eHessian2Output\u003c/span\u003e \u003cspan class=\"variable\"\u003eoutput\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eHessian2Output\u003c/span\u003e(bos);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eoutput.writeObject(student);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eoutput.flushBuffer();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003ebyte\u003c/span\u003e[] data = bos.toByteArray();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ebos.close();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//把刚才序列化出来的byte数组转化为student对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eByteArrayInputStream\u003c/span\u003e \u003cspan class=\"variable\"\u003ebis\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eByteArrayInputStream\u003c/span\u003e(data);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eHessian2Input\u003c/span\u003e \u003cspan class=\"variable\"\u003einput\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eHessian2Input\u003c/span\u003e(bis);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eStudent\u003c/span\u003e \u003cspan class=\"variable\"\u003edeStudent\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e (Student) input.readObject();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003einput.close();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSystem.out.println(deStudent);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e官方\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://developers.google.com/protocol-buffers/\"\u003eProtobuf 官网\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/protocolbuffers/protobuf\"\u003eProtobuf Github\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/apache/thrift\"\u003eThrift Github\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/EsotericSoftware/kryo\"\u003eKryo Github\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://hessian.caucho.com/\"\u003eHessian 官网\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/RuedigerMoeller/fast-serialization\"\u003eFST Github\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e文章\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.jianshu.com/p/937883b6b2e5\"\u003ejava 序列化框架对比\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-02-17T14:34:30Z",
  "Author": "钝悟 ◾ Dunwu"
}