{
  "Source": "dunwu",
  "Title": "JVM 垃圾收集",
  "Link": "https://dunwu.github.io/blog/pages/c5a5b6/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"JVM-垃圾收集\"\u003e\u003ca href=\"#JVM-垃圾收集\" class=\"headerlink\" title=\"JVM 垃圾收集\"\u003e\u003c/a\u003eJVM 垃圾收集\u003c/h1\u003e\u003cblockquote\u003e\n\u003cp\u003e程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。\u003cstrong\u003e垃圾回收主要是针对 Java 堆和方法区进行\u003c/strong\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"对象活着吗\"\u003e\u003ca href=\"#对象活着吗\" class=\"headerlink\" title=\"对象活着吗\"\u003e\u003c/a\u003e对象活着吗\u003c/h2\u003e\u003ch3 id=\"引用计数算法\"\u003e\u003ca href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"\u003e\u003c/a\u003e引用计数算法\u003c/h3\u003e\u003cp\u003e给对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。\u003c/p\u003e\n\u003cp\u003e两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReferenceCountingGC\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"type\"\u003eObject\u003c/span\u003e \u003cspan class=\"variable\"\u003einstance\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eReferenceCountingGC\u003c/span\u003e \u003cspan class=\"variable\"\u003eobjectA\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReferenceCountingGC\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eReferenceCountingGC\u003c/span\u003e \u003cspan class=\"variable\"\u003eobjectB\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReferenceCountingGC\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        objectA.instance = objectB;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        objectB.instance = objectA;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e因为循环引用的存在，所以 \u003cstrong\u003eJava 虚拟机不适用引用计数算法\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"可达性分析算法\"\u003e\u003ca href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"\u003e\u003c/a\u003e可达性分析算法\u003c/h3\u003e\u003cp\u003e通过 \u003cstrong\u003eGC Roots\u003c/strong\u003e 作为起始点进行搜索，JVM 将能够到达到的对象视为\u003cstrong\u003e存活\u003c/strong\u003e，不可达的对象视为\u003cstrong\u003e死亡\u003c/strong\u003e。\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-gc-root.png\"/\u003e\n\u003cp\u003e可达性分析算法\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003e可作为 GC Roots 的对象\u003c/strong\u003e包括下面几种：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e虚拟机栈中引用的对象\u003c/li\u003e\n\u003cli\u003e本地方法栈中引用的对象（Native 方法）\u003c/li\u003e\n\u003cli\u003e方法区中，类静态属性引用的对象\u003c/li\u003e\n\u003cli\u003e方法区中，常量引用的对象\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"引用类型\"\u003e\u003ca href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"\u003e\u003c/a\u003e引用类型\u003c/h3\u003e\u003cp\u003e无论是通过引用计算算法判断对象的引用数量，还是通过可达性分析算法判断对象的引用链是否可达，判定对象是否可被回收都与引用有关。\u003c/p\u003e\n\u003cp\u003eJava 具有四种强度不同的引用类型。\u003c/p\u003e\n\u003ch4 id=\"强引用\"\u003e\u003ca href=\"#强引用\" class=\"headerlink\" title=\"强引用\"\u003e\u003c/a\u003e强引用\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e被强引用（Strong Reference）关联的对象不会被垃圾收集器回收。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e强引用：使用 \u003ccode\u003enew\u003c/code\u003e 一个新对象的方式来创建强引用。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eObject\u003c/span\u003e \u003cspan class=\"variable\"\u003eobj\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eObject\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"软引用\"\u003e\u003ca href=\"#软引用\" class=\"headerlink\" title=\"软引用\"\u003e\u003c/a\u003e软引用\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e被软引用（Soft Reference）关联的对象，只有在内存不够的情况下才会被回收。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e软引用：使用 \u003ccode\u003eSoftReference\u003c/code\u003e 类来创建软引用。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eObject\u003c/span\u003e \u003cspan class=\"variable\"\u003eobj\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eObject\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSoftReference\u0026lt;Object\u0026gt; sf = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSoftReference\u003c/span\u003e\u0026lt;Object\u0026gt;(obj);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eobj = \u003cspan class=\"literal\"\u003enull\u003c/span\u003e; \u003cspan class=\"comment\"\u003e// 使对象只被软引用关联\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"弱引用\"\u003e\u003ca href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"\u003e\u003c/a\u003e弱引用\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e被弱引用（Weak Reference）关联的对象一定会被垃圾收集器回收，也就是说它只能存活到下一次垃圾收集发生之前。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003eWeakReference\u003c/code\u003e 类来实现弱引用。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eObject\u003c/span\u003e \u003cspan class=\"variable\"\u003eobj\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eObject\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eWeakReference\u0026lt;Object\u0026gt; wf = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eWeakReference\u003c/span\u003e\u0026lt;Object\u0026gt;(obj);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eobj = \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eWeakHashMap\u003c/code\u003e 的 \u003ccode\u003eEntry\u003c/code\u003e 继承自 \u003ccode\u003eWeakReference\u003c/code\u003e，主要用来实现缓存。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eEntry\u003c/span\u003e\u0026lt;K,V\u0026gt; \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eWeakReference\u003c/span\u003e\u0026lt;Object\u0026gt; \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMap\u003c/span\u003e.Entry\u0026lt;K,V\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eTomcat 中的 \u003ccode\u003eConcurrentCache\u003c/code\u003e 就使用了 \u003ccode\u003eWeakHashMap\u003c/code\u003e 来实现缓存功能。\u003ccode\u003eConcurrentCache\u003c/code\u003e 采取的是分代缓存，经常使用的对象放入 eden 中，而不常用的对象放入 longterm。eden 使用 \u003ccode\u003eConcurrentHashMap\u003c/code\u003e 实现，longterm 使用 \u003ccode\u003eWeakHashMap\u003c/code\u003e，保证了不常使用的对象容易被回收。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eConcurrentCache\u003c/span\u003e\u0026lt;K, V\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e size;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e Map\u0026lt;K, V\u0026gt; eden;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e Map\u0026lt;K, V\u0026gt; longterm;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eConcurrentCache\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e size)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.size = size;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.eden = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eConcurrentHashMap\u003c/span\u003e\u0026lt;\u0026gt;(size);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.longterm = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eWeakHashMap\u003c/span\u003e\u0026lt;\u0026gt;(size);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e V \u003cspan class=\"title function_\"\u003eget\u003c/span\u003e\u003cspan class=\"params\"\u003e(K k)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eV\u003c/span\u003e \u003cspan class=\"variable\"\u003ev\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.eden.get(k);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (v == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            v = \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.longterm.get(k);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (v != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.eden.put(k, v);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e v;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eput\u003c/span\u003e\u003cspan class=\"params\"\u003e(K k, V v)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.eden.size() \u0026gt;= size) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.longterm.putAll(\u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.eden);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.eden.clear();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.eden.put(k, v);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"虚引用\"\u003e\u003ca href=\"#虚引用\" class=\"headerlink\" title=\"虚引用\"\u003e\u003c/a\u003e虚引用\u003c/h4\u003e\u003cp\u003e又称为幽灵引用或者幻影引用。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用取得一个对象实例。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003ePhantomReference\u003c/code\u003e 来实现虚引用。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eObject\u003c/span\u003e \u003cspan class=\"variable\"\u003eobj\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eObject\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ePhantomReference\u0026lt;Object\u0026gt; pf = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003ePhantomReference\u003c/span\u003e\u0026lt;Object\u0026gt;(obj);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eobj = \u003cspan class=\"literal\"\u003enull\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"方法区的回收\"\u003e\u003ca href=\"#方法区的回收\" class=\"headerlink\" title=\"方法区的回收\"\u003e\u003c/a\u003e方法区的回收\u003c/h3\u003e\u003cp\u003e因为方法区主要存放永久代对象，而永久代对象的回收率比年轻代差很多，因此在方法区上进行回收性价比不高。\u003c/p\u003e\n\u003cp\u003e主要是对常量池的回收和对类的卸载。\u003c/p\u003e\n\u003cp\u003e类的卸载条件很多，需要满足以下三个条件，并且满足了也不一定会被卸载：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。\u003c/li\u003e\n\u003cli\u003e加载该类的 \u003ccode\u003eClassLoader\u003c/code\u003e 已经被回收。\u003c/li\u003e\n\u003cli\u003e该类对应的 \u003ccode\u003ejava.lang.Class\u003c/code\u003e 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e可以通过 \u003ccode\u003e-Xnoclassgc\u003c/code\u003e 参数来控制是否对类进行卸载。\u003c/p\u003e\n\u003cp\u003e在大量使用反射、动态代理、CGLib 等字节码框架、动态生成 JSP 以及 OSGi 这类频繁自定义 \u003ccode\u003eClassLoader\u003c/code\u003e 的场景都需要虚拟机具备类卸载功能，以保证不会出现内存溢出。\u003c/p\u003e\n\u003ch3 id=\"finalize\"\u003e\u003ca href=\"#finalize\" class=\"headerlink\" title=\"finalize()\"\u003e\u003c/a\u003efinalize()\u003c/h3\u003e\u003cp\u003e\u003ccode\u003efinalize()\u003c/code\u003e 类似 C++ 的析构函数，用来做关闭外部资源等工作。但是 try-finally 等方式可以做的更好，并且该方法运行代价高昂，不确定性大，无法保证各个对象的调用顺序，因此**最好不要使用 \u003ccode\u003efinalize()\u003c/code\u003e**。\u003c/p\u003e\n\u003cp\u003e当一个对象可被回收时，如果需要执行该对象的 \u003ccode\u003efinalize()\u003c/code\u003e 方法，那么就有可能通过在该方法中让对象重新被引用，从而实现自救。\u003c/p\u003e\n\u003ch2 id=\"垃圾收集算法\"\u003e\u003ca href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"\u003e\u003c/a\u003e垃圾收集算法\u003c/h2\u003e\u003ch3 id=\"垃圾收集性能\"\u003e\u003ca href=\"#垃圾收集性能\" class=\"headerlink\" title=\"垃圾收集性能\"\u003e\u003c/a\u003e垃圾收集性能\u003c/h3\u003e\u003cp\u003e垃圾收集器的性能指标主要有两点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e停顿时间\u003c/strong\u003e - 停顿时间是因为 GC 而导致程序不能工作的时间长度。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e吞吐量\u003c/strong\u003e - 吞吐量关注在特定的时间周期内一个应用的工作量的最大值。对关注吞吐量的应用来说长暂停时间是可以接受的。由于高吞吐量的应用关注的基准在更长周期时间上，所以快速响应时间不在考虑之内。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"标记-清除（Mark-Sweep）\"\u003e\u003ca href=\"#标记-清除（Mark-Sweep）\" class=\"headerlink\" title=\"标记 - 清除（Mark-Sweep）\"\u003e\u003c/a\u003e标记 - 清除（Mark-Sweep）\u003c/h3\u003e\u003cdiv align=\"center\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-gc-mark-sweep.jpg\"/\u003e\n\u003c/div\u003e\n\n\u003cp\u003e将需要回收的对象进行标记，然后清理掉被标记的对象。\u003c/p\u003e\n\u003cp\u003e不足：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e标记和清除过程效率都不高；\u003c/li\u003e\n\u003cli\u003e会产生大量不连续的内存碎片，导致无法给大对象分配内存。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"标记-整理（Mark-Compact）\"\u003e\u003ca href=\"#标记-整理（Mark-Compact）\" class=\"headerlink\" title=\"标记 - 整理（Mark-Compact）\"\u003e\u003c/a\u003e标记 - 整理（Mark-Compact）\u003c/h3\u003e\u003cdiv align=\"center\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-gc-mark-compact.jpg\"/\u003e\n\u003c/div\u003e\n\n\u003cp\u003e让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。\u003c/p\u003e\n\u003cp\u003e这种做法能够解决内存碎片化的问题，但代价是压缩算法的性能开销。\u003c/p\u003e\n\u003ch3 id=\"复制（Copying）\"\u003e\u003ca href=\"#复制（Copying）\" class=\"headerlink\" title=\"复制（Copying）\"\u003e\u003c/a\u003e复制（Copying）\u003c/h3\u003e\u003cdiv align=\"center\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-gc-copying.jpg\"/\u003e\n\u003c/div\u003e\n\n\u003cp\u003e将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。\u003c/p\u003e\n\u003cp\u003e主要不足是只使用了内存的一半。\u003c/p\u003e\n\u003cp\u003e现在的商业虚拟机都\u003cstrong\u003e采用这种收集算法来回收年轻代\u003c/strong\u003e，但是并不是将内存划分为大小相等的两块，而是分为一块较大的 Eden 空间和两块较小的 Survior 空间，每次使用 Eden 空间和其中一块 Survivor。在回收时，将 Eden 和 Survivor 中还存活着的对象一次性复制到另一块 Survivor 空间上，最后清理 Eden 和使用过的那一块 Survivor。HotSpot 虚拟机的 Eden 和 Survivor 的大小比例默认为 8:1（可以通过参数 \u003ccode\u003e-XX:SurvivorRatio\u003c/code\u003e 来调整比例），保证了内存的利用率达到 90 %。如果每次回收有多于 10% 的对象存活，那么一块 Survivor 空间就不够用了，此时需要依赖于老年代进行分配担保，也就是借用老年代的空间存储放不下的对象。\u003c/p\u003e\n\u003ch3 id=\"分代收集\"\u003e\u003ca href=\"#分代收集\" class=\"headerlink\" title=\"分代收集\"\u003e\u003c/a\u003e分代收集\u003c/h3\u003e\u003cp\u003e现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。\u003c/p\u003e\n\u003cp\u003e一般将 Java 堆分为年轻代和老年代。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e年轻代使用：\u003cstrong\u003e复制\u003c/strong\u003e 算法\u003c/li\u003e\n\u003cli\u003e老年代使用：\u003cstrong\u003e标记 - 清理\u003c/strong\u003e 或者 \u003cstrong\u003e标记 - 整理\u003c/strong\u003e 算法\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-hotspot-heap-structure.png\"/\u003e\n\u003c/div\u003e\n\n\u003ch4 id=\"新生代\"\u003e\u003ca href=\"#新生代\" class=\"headerlink\" title=\"新生代\"\u003e\u003c/a\u003e新生代\u003c/h4\u003e\u003cp\u003e新生代是大部分对象创建和销毁的区域，在通常的 Java 应用中，绝大部分对象生命周期都是很短暂的。其内部又分为 \u003ccode\u003eEden\u003c/code\u003e 区域，作为对象初始分配的区域；两个 \u003ccode\u003eSurvivor\u003c/code\u003e，有时候也叫 \u003ccode\u003efrom\u003c/code\u003e、\u003ccode\u003eto\u003c/code\u003e 区域，被用来放置从 Minor GC 中保留下来的对象。\u003c/p\u003e\n\u003cp\u003eJVM 会随意选取一个 \u003ccode\u003eSurvivor\u003c/code\u003e 区域作为 \u003ccode\u003eto\u003c/code\u003e，然后会在 GC 过程中进行区域间拷贝，也就是将 Eden 中存活下来的对象和 \u003ccode\u003efrom\u003c/code\u003e 区域的对象，拷贝到这个\u003ccode\u003eto\u003c/code\u003e区域。这种设计主要是为了防止内存的碎片化，并进一步清理无用对象。\u003c/p\u003e\n\u003cp\u003eJava 虚拟机会记录 \u003ccode\u003eSurvivor\u003c/code\u003e 区中的对象一共被来回复制了几次。如果一个对象被复制的次数为 15（对应虚拟机参数 \u003ccode\u003e-XX:+MaxTenuringThreshold\u003c/code\u003e），那么该对象将被晋升（promote）至老年代。另外，如果单个 \u003ccode\u003eSurvivor\u003c/code\u003e 区已经被占用了 50%（对应虚拟机参数 \u003ccode\u003e-XX:TargetSurvivorRatio\u003c/code\u003e），那么较高复制次数的对象也会被晋升至老年代。\u003c/p\u003e\n\u003ch4 id=\"老年代\"\u003e\u003ca href=\"#老年代\" class=\"headerlink\" title=\"老年代\"\u003e\u003c/a\u003e老年代\u003c/h4\u003e\u003cp\u003e放置长生命周期的对象，通常都是从 \u003ccode\u003eSurvivor\u003c/code\u003e 区域拷贝过来的对象。当然，也有特殊情况，如果对象较大，JVM 会试图直接分配在 \u003ccode\u003eEden\u003c/code\u003e 其他位置上；如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM 就会直接分配到老年代。\u003c/p\u003e\n\u003ch4 id=\"永久代\"\u003e\u003ca href=\"#永久代\" class=\"headerlink\" title=\"永久代\"\u003e\u003c/a\u003e永久代\u003c/h4\u003e\u003cp\u003e这部分就是早期 Hotspot JVM 的方法区实现方式了，储存 Java 类元数据、常量池、Intern 字符串缓存。在 JDK 8 之后就不存在永久代这块儿了。\u003c/p\u003e\n\u003ch4 id=\"JVM-参数\"\u003e\u003ca href=\"#JVM-参数\" class=\"headerlink\" title=\"JVM 参数\"\u003e\u003c/a\u003eJVM 参数\u003c/h4\u003e\u003cp\u003e这里顺便提一下，JVM 允许对堆空间大小、各代空间大小进行设置，以调整 JVM GC。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e配置\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e-Xss\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e虚拟机栈大小。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e-Xms\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e堆空间初始值。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e-Xmx\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e堆空间最大值。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e-Xmn\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e新生代空间大小。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e-XX:NewSize\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e新生代空间初始值。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e-XX:MaxNewSize\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e新生代空间最大值。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e-XX:NewRatio\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e新生代与年老代的比例。默认为 2，意味着老年代是新生代的 2 倍。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e-XX:SurvivorRatio\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e新生代中调整 eden 区与 survivor 区的比例，默认为 8。即 \u003ccode\u003eeden\u003c/code\u003e 区为 80% 的大小，两个 \u003ccode\u003esurvivor\u003c/code\u003e 分别为 10% 的大小。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e-XX:PermSize\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e永久代空间的初始值。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e-XX:MaxPermSize\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e永久代空间的最大值。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"垃圾收集器\"\u003e\u003ca href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"\u003e\u003c/a\u003e垃圾收集器\u003c/h2\u003e\u003cdiv align=\"center\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-gc-overview.jpg\"/\u003e\n\u003c/div\u003e\n\n\u003cp\u003e以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。\u003c/p\u003e\n\u003cp\u003e注：G1 垃圾收集器既可以回收年轻代内存，也可以回收老年代内存。而其他垃圾收集器只能针对特定代的内存进行回收。\u003c/p\u003e\n\u003ch3 id=\"串行收集器\"\u003e\u003ca href=\"#串行收集器\" class=\"headerlink\" title=\"串行收集器\"\u003e\u003c/a\u003e串行收集器\u003c/h3\u003e\u003cp\u003e串行收集器（Serial）是最基本、发展历史最悠久的收集器。\u003c/p\u003e\n\u003cp\u003e串行收集器是 \u003cstrong\u003e\u003ccode\u003eclient\u003c/code\u003e 模式下的默认收集器配置\u003c/strong\u003e。因为在客户端模式下，分配给虚拟机管理的内存一般来说不会很大。Serial 收集器收集几十兆甚至一两百兆的年轻代停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿是可以接受的。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e串行收集器采用单线程 stop-the-world 的方式进行收集\u003c/strong\u003e。当内存不足时，串行 GC 设置停顿标识，待所有线程都进入安全点（Safepoint）时，应用线程暂停，串行 GC 开始工作，\u003cstrong\u003e采用单线程方式回收空间并整理内存\u003c/strong\u003e。\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-gc-serial.jpg\"/\u003e\n\u003cp\u003eSerial / Serial Old 收集器运行示意图\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e单线程意味着复杂度更低、占用内存更少，垃圾回收效率高；但同时也意味着不能有效利用多核优势。事实上，串行收集器特别适合堆内存不高、单核甚至双核 CPU 的场合。\u003c/p\u003e\n\u003ch4 id=\"Serial-收集器\"\u003e\u003ca href=\"#Serial-收集器\" class=\"headerlink\" title=\"Serial 收集器\"\u003e\u003c/a\u003eSerial 收集器\u003c/h4\u003e\u003cblockquote\u003e\n\u003cp\u003e开启选项：\u003ccode\u003e-XX:+UseSerialGC\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e打开此开关后，使用 \u003cstrong\u003eSerial\u003c/strong\u003e + \u003cstrong\u003eSerial Old\u003c/strong\u003e 收集器组合来进行内存回收。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"Serial-Old-收集器\"\u003e\u003ca href=\"#Serial-Old-收集器\" class=\"headerlink\" title=\"Serial Old 收集器\"\u003e\u003c/a\u003eSerial Old 收集器\u003c/h4\u003e\u003cp\u003eSerial Old 是 Serial 收集器的老年代版本，也是给 Client 模式下的虚拟机使用。如果用在 Server 模式下，它有两大用途：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在 JDK 1.5 以及之前版本（Parallel Old 诞生以前）中与 Parallel Scavenge 收集器搭配使用。\u003c/li\u003e\n\u003cli\u003e作为 CMS 收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"并行收集器\"\u003e\u003ca href=\"#并行收集器\" class=\"headerlink\" title=\"并行收集器\"\u003e\u003c/a\u003e并行收集器\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003e开启选项：\u003ccode\u003e-XX:+UseParallelGC\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e打开此开关后，使用 \u003cstrong\u003eParallel Scavenge\u003c/strong\u003e + \u003cstrong\u003eSerial Old\u003c/strong\u003e 收集器组合来进行内存回收。\u003c/p\u003e\n\u003cp\u003e开启选项：\u003ccode\u003e-XX:+UseParallelOldGC\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e打开此开关后，使用 \u003cstrong\u003eParallel Scavenge\u003c/strong\u003e + \u003cstrong\u003eParallel Old\u003c/strong\u003e 收集器组合来进行内存回收。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e其他收集器都是以关注停顿时间为目标，而\u003cstrong\u003e并行收集器是以关注吞吐量（Throughput）为目标的垃圾收集器\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验；\u003c/li\u003e\n\u003cli\u003e而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight fix\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003e吞吐量 \u003c/span\u003e=\u003cspan class=\"string\"\u003e 运行用户代码时间 / (运行用户代码时间 + 垃圾收集时间)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003e并行收集器是 server 模式下的默认收集器。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e并行收集器与串行收集器工作模式相似，都是 stop-the-world 方式，只是暂停时并行地进行垃圾收集。\u003cstrong\u003e并行收集器年轻代采用复制算法，老年代采用标记-整理\u003c/strong\u003e，在回收的同时还会对内存进行压缩。并行收集器适合对吞吐量要求远远高于延迟要求的场景，并且在满足最差延时的情况下，并行收集器将提供最佳的吞吐量。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e在注重吞吐量以及 CPU 资源敏感的场合，都可以优先考虑 Parallel Scavenge 收集器 + Parallel Old 收集器。\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-gc-parallel.jpg\"/\u003e\n\u003cp\u003eParallel / Parallel Old 收集器运行示意图\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch4 id=\"Parallel-Scavenge-收集器\"\u003e\u003ca href=\"#Parallel-Scavenge-收集器\" class=\"headerlink\" title=\"Parallel Scavenge 收集器\"\u003e\u003c/a\u003eParallel Scavenge 收集器\u003c/h4\u003e\u003cp\u003eParallel Scavenge 收集器提供了两个参数用于精确控制吞吐量，分别是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e-XX:MaxGCPauseMillis\u003c/code\u003e - 控制最大垃圾收集停顿时间，收集器将尽可能保证内存回收时间不超过设定值。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-XX:GCTimeRatio\u003c/code\u003e - 直接设置吞吐量大小的（值为大于 0 且小于 100 的整数）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e缩短停顿时间是以牺牲吞吐量和年轻代空间来换取的：年轻代空间变小，垃圾回收变得频繁，导致吞吐量下降。\u003c/p\u003e\n\u003cp\u003eParallel Scavenge 收集器还提供了一个参数 \u003ccode\u003e-XX:+UseAdaptiveSizePolicy\u003c/code\u003e，这是一个开关参数，打开参数后，就不需要手工指定年轻代的大小（\u003ccode\u003e-Xmn\u003c/code\u003e）、Eden 和 Survivor 区的比例（\u003ccode\u003e-XX:SurvivorRatio\u003c/code\u003e）、晋升老年代对象年龄（\u003ccode\u003e-XX:PretenureSizeThreshold\u003c/code\u003e）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种方式称为 GC 自适应的调节策略（GC Ergonomics）。\u003c/p\u003e\n\u003ch4 id=\"Parallel-Old-收集器\"\u003e\u003ca href=\"#Parallel-Old-收集器\" class=\"headerlink\" title=\"Parallel Old 收集器\"\u003e\u003c/a\u003eParallel Old 收集器\u003c/h4\u003e\u003cp\u003e是 Parallel Scavenge 收集器的老年代版本，使用\u003cstrong\u003e多线程和 “标记-整理” 算法\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"并发标记清除收集器\"\u003e\u003ca href=\"#并发标记清除收集器\" class=\"headerlink\" title=\"并发标记清除收集器\"\u003e\u003c/a\u003e并发标记清除收集器\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003e开启选项：\u003ccode\u003e-XX:+UseConcMarkSweepGC\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e打开此开关后，使用 \u003cstrong\u003eCMS\u003c/strong\u003e + \u003cstrong\u003eParNew\u003c/strong\u003e + \u003cstrong\u003eSerial Old\u003c/strong\u003e 收集器组合来进行内存回收。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e并发标记清除收集器是以获取最短停顿时间为目标。\u003c/p\u003e\n\u003cp\u003e开启后，年轻代使用 ParNew 收集器；老年代使用 CMS 收集器，如果 CMS 产生的碎片过多，导致无法存放浮动垃圾，JVM 会出现 \u003ccode\u003eConcurrent Mode Failure\u003c/code\u003e ，此时使用 Serial Old 收集器来替代 CMS 收集器清理碎片。\u003c/p\u003e\n\u003ch4 id=\"CMS-收集器\"\u003e\u003ca href=\"#CMS-收集器\" class=\"headerlink\" title=\"CMS 收集器\"\u003e\u003c/a\u003eCMS 收集器\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003eCMS 收集器是一种以获取最短停顿时间为目标的收集器。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eCMS（Concurrent Mark Sweep），Mark Sweep 指的是标记 - 清除算法。\u003c/p\u003e\n\u003ch5 id=\"CMS-回收机制\"\u003e\u003ca href=\"#CMS-回收机制\" class=\"headerlink\" title=\"CMS 回收机制\"\u003e\u003c/a\u003eCMS 回收机制\u003c/h5\u003e\u003cp\u003eCMS 收集器运行步骤如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e初始标记\u003c/strong\u003e：仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e并发标记\u003c/strong\u003e：进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e重新标记\u003c/strong\u003e：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e并发清除\u003c/strong\u003e：回收在标记阶段被鉴定为不可达的对象。不需要停顿。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-gc-cms.jpg\"/\u003e\n\u003cp\u003eCMS 收集器运行示意图\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch5 id=\"CMS-回收年轻代详细步骤\"\u003e\u003ca href=\"#CMS-回收年轻代详细步骤\" class=\"headerlink\" title=\"CMS 回收年轻代详细步骤\"\u003e\u003c/a\u003eCMS 回收年轻代详细步骤\u003c/h5\u003e\u003cp\u003e\u003cstrong\u003e（1）堆空间被分割为三块空间\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide1.png\" alt=\"img\"/\u003e\u003cbr/\u003e年轻代分割成一个 Eden 区和两个 Survivor 区。年老代一个连续的空间。就地完成对象收集。除非有 FullGC 否则不会压缩。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（2）CMS 年轻代垃圾收集如何工作\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e年轻代被标为浅绿色，年老代被标记为蓝色。如果你的应用已经运行了一段时间，CMS 的堆看起来应该是这个样子。对象分散在年老代区域里。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide2.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e使用 CMS，年老代对象就地释放。它们不会被来回移动。这个空间不会被压缩除非发生 FullGC。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（3）年轻代收集\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e从 Eden 和 Survivor 区复制活跃对象到另一个 Survivor 区。所有达到他们的年龄阈值的对象会晋升到年老代。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide3.png\" alt=\"img\"/\u003e\u003cbr/\u003e\u003cstrong\u003e（4）年轻代回收之后\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e一次年轻代垃圾收集之后，Eden 区和其中一个 Survivor 区被清空。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide4.png\" alt=\"img\"/\u003e\u003cbr/\u003e最近晋升的对象以深蓝色显示在上图中，绿色的对象是年轻代幸免的还没有晋升到老年代对象。\u003c/p\u003e\n\u003ch5 id=\"CMS-回收年老代详细步骤\"\u003e\u003ca href=\"#CMS-回收年老代详细步骤\" class=\"headerlink\" title=\"CMS 回收年老代详细步骤\"\u003e\u003c/a\u003eCMS 回收年老代详细步骤\u003c/h5\u003e\u003cp\u003e\u003cstrong\u003e（1）CMS 的年老代收集\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e发生两次 stop the world 事件：初始标记和重新标记。当年老代达到特定的占用比例时，CMS 开始执行。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide5.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e初始标记是一个短暂暂停的、可达对象被标记的阶段。\u003c/li\u003e\n\u003cli\u003e并发标记寻找活跃对象在应用连续执行时。\u003c/li\u003e\n\u003cli\u003e最后，在重新标记阶段，寻找在之前并发标记阶段中丢失的对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e（2）年老代收集-并发清除\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e在之前阶段没有被标记的对象会被就地释放。不进行压缩操作。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide6.png\" alt=\"img\"/\u003e\u003cbr/\u003e\u003cstrong\u003e注意：\u003c/strong\u003e未被标记的对象等于死亡对象\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（3）年老代收集-清除之后\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e清除阶段之后，你可以看到大量内存被释放。你还可以注意到没有进行压缩操作。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide7.png\" alt=\"img\"/\u003e\u003cbr/\u003e最后，CMS 收集器会再次进入重新设置阶段，等待下一次垃圾收集时机的到来。\u003c/p\u003e\n\u003ch5 id=\"CMS-特点\"\u003e\u003ca href=\"#CMS-特点\" class=\"headerlink\" title=\"CMS 特点\"\u003e\u003c/a\u003eCMS 特点\u003c/h5\u003e\u003cp\u003eCMS 收集器具有以下缺点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e并发收集 - 并发指的是用户线程和 GC 线程同时运行。\u003c/li\u003e\n\u003cli\u003e吞吐量低 - 低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。\u003c/li\u003e\n\u003cli\u003e无法处理浮动垃圾 - 可能出现 \u003ccode\u003eConcurrent Mode Failure\u003c/code\u003e。浮动垃圾是指并发清除阶段由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次 GC 时才能进行回收。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着 CMS 收集不能像其它收集器那样等待老年代快满的时候再回收。\u003cul\u003e\n\u003cli\u003e可以使用 \u003ccode\u003e-XX:CMSInitiatingOccupancyFraction\u003c/code\u003e 来改变触发 CMS 收集器工作的内存占用百分，如果这个值设置的太大，导致预留的内存不够存放浮动垃圾，就会出现 \u003ccode\u003eConcurrent Mode Failure\u003c/code\u003e，这时虚拟机将临时启用 Serial Old 收集器来替代 CMS 收集器。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。\u003cul\u003e\n\u003cli\u003e可以使用 \u003ccode\u003e-XX:+UseCMSCompactAtFullCollection\u003c/code\u003e ，用于在 CMS 收集器要进行 Full GC 时开启内存碎片的合并整理，内存整理的过程是无法并发的，空间碎片问题没有了，但是停顿时间不得不变长了。\u003c/li\u003e\n\u003cli\u003e可以使用 \u003ccode\u003e-XX:CMSFullGCsBeforeCompaction\u003c/code\u003e ，用于设置执行多少次不压缩的 Full GC 后，来一次带压缩的（默认为 0，表示每次进入 Full GC 时都要进行碎片整理）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"ParNew-收集器\"\u003e\u003ca href=\"#ParNew-收集器\" class=\"headerlink\" title=\"ParNew 收集器\"\u003e\u003c/a\u003eParNew 收集器\u003c/h4\u003e\u003cblockquote\u003e\n\u003cp\u003e开启选项：\u003ccode\u003e-XX:+UseParNewGC\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eParNew 收集器其实是 Serial 收集器的多线程版本。\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-gc-par-new.jpg\"/\u003e\n\u003cp\u003eParNew 收集器运行示意图\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e是 Server 模式下的虚拟机首选年轻代收集器，除了性能原因外，主要是因为除了 Serial 收集器，只有它能与 CMS 收集器配合工作。\u003c/p\u003e\n\u003cp\u003eParNew 收集器也是使用 \u003ccode\u003e-XX:+UseConcMarkSweepGC\u003c/code\u003e 后的默认年轻代收集器。\u003c/p\u003e\n\u003cp\u003eParNew 收集器默认开启的线程数量与 CPU 数量相同，可以使用 -\u003ccode\u003eXX:ParallelGCThreads\u003c/code\u003e 参数来设置线程数。\u003c/p\u003e\n\u003ch3 id=\"G1-收集器\"\u003e\u003ca href=\"#G1-收集器\" class=\"headerlink\" title=\"G1 收集器\"\u003e\u003c/a\u003eG1 收集器\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003e开启选项：\u003ccode\u003e-XX:+UseG1GC\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e前面提到的垃圾收集器一般策略是关注吞吐量或停顿时间。而 \u003cstrong\u003eG1 是一种兼顾吞吐量和停顿时间的 GC 收集器\u003c/strong\u003e。G1 是 Oracle JDK9 以后的默认 GC 收集器。G1 可以直观的设定停顿时间的目标，相比于 CMS GC，G1 未必能做到 CMS 在最好情况下的延时停顿，但是最差情况要好很多。\u003c/p\u003e\n\u003cp\u003eG1 最大的特点是引入分区的思路，弱化了分代的概念，合理利用垃圾收集各个周期的资源，解决了其他收集器甚至 CMS 的众多缺陷。\u003c/p\u003e\n\u003ch4 id=\"分代和分区\"\u003e\u003ca href=\"#分代和分区\" class=\"headerlink\" title=\"分代和分区\"\u003e\u003c/a\u003e分代和分区\u003c/h4\u003e\u003cp\u003e旧的垃圾收集器一般采取分代收集，Java 堆被分为年轻代、老年代和永久代。收集的范围都是整个年轻代或者整个老年代。\u003c/p\u003e\n\u003cp\u003eG1 取消了永久代，并把年轻代和老年代划分成多个大小相等的独立区域（Region），年轻代和老年代不再物理隔离。G1 可以直接对年轻代和老年代一起回收。\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-gc-g1-heap-allocation.png\"/\u003e\n\u003c/div\u003e\n\n\u003cp\u003e通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间（这两个值是通过过去回收的经验获得），并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。\u003c/p\u003e\n\u003cp\u003e每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的 Region。通过使用 Remembered Set，在做可达性分析的时候就可以避免全堆扫描。\u003c/p\u003e\n\u003ch4 id=\"G1-回收机制\"\u003e\u003ca href=\"#G1-回收机制\" class=\"headerlink\" title=\"G1 回收机制\"\u003e\u003c/a\u003eG1 回收机制\u003c/h4\u003e\u003cdiv align=\"center\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-gc-g1.jpg\"/\u003e\n\u003cp\u003eG1 收集器运行示意图\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e如果不计算维护 Remembered Set 的操作，G1 收集器的运作大致可划分为以下几个步骤：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e初始标记\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e并发标记\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e最终标记\u003c/strong\u003e - 为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e筛选回收\u003c/strong\u003e - 首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿是时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e具备如下特点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e空间整合：整体来看是基于“标记 - 整理”算法实现的收集器，从局部（两个 Region 之间）上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。\u003c/li\u003e\n\u003cli\u003e可预测的停顿：能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"G1-回收年轻代详细步骤\"\u003e\u003ca href=\"#G1-回收年轻代详细步骤\" class=\"headerlink\" title=\"G1 回收年轻代详细步骤\"\u003e\u003c/a\u003eG1 回收年轻代详细步骤\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e（1）G1 初始堆空间\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e堆空间是一个被分成许多固定大小区域的内存块。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide8.png\" alt=\"img\"/\u003e\u003cbr/\u003eJava 虚拟机启动时选定区域大小。Java 虚拟机通常会指定 2000 个左右的大小相等、每个大小范围在 1 到 32M 的区域。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（2）G1 堆空间分配\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e实际上，这些区域被映射成 Eden、Survivor、年老代空间的逻辑表述形式。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide9.png\" alt=\"img\"/\u003e\u003cbr/\u003e图片中的颜色表明了哪个区域被关联上什么角色。活跃对象从一个区域疏散（复制、移动）到另一个区域。区域被设计为并行的方式收集，可以暂停或者不暂停所有的其它用户线程。\u003c/p\u003e\n\u003cp\u003e明显的区域可以被分配成 Eden、Survivor、Old 区域。另外，有第四种类型的区域叫做*极大区域(Humongous regions)*。这些区域被设计成保持标准区域大小的 50%或者更大的对象。它们被保存在一个连续的区域集合里。最后，最后一个类型的区域就是堆空间里没有使用的区域。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e写作此文章时，收集极大对象时还没有被优化。因此，你应该避免创建这个大小的对象。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（3）G1 的年轻代\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e堆空间被分割成大约 2000 个区域。最小 1M，最大 32M，蓝色区域保持年老代对象，绿色区域保持年轻代对象。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide10.png\" alt=\"img\"/\u003e\u003cbr/\u003e\u003cstrong\u003e注意：\u003c/strong\u003e区域没有必要像旧的收集器一样是保持连续的。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（4）G1 的年轻代收集\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e活跃对象会被疏散（复制、移动）到一个或多个 survivor 区域。如果达到晋升总阈值，对象会晋升到年老代区域。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide11.png\" alt=\"img\"/\u003e\u003cbr/\u003e这是一个 stop the world 暂停。为下一次年轻代垃圾回收计算 Eden 和 Survivor 的大小。保留审计信息有助于计算大小。类似目标暂停时间的事情会被考虑在内。\u003c/p\u003e\n\u003cp\u003e这个方法使重调区域大小变得很容易，按需把它们调大或调小。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（5）G1 年轻代回收的尾声\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e活跃对象被疏散到 Survivor 或者年老代区域。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide12.png\" alt=\"img\"/\u003e\u003cbr/\u003e最近晋升的对象显示为深蓝色。Survivor 区域显示为绿色。\u003c/p\u003e\n\u003cp\u003e关于 G1 的年轻代回收做以下总结：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e堆空间是一块单独的内存空间被分割成多个区域。\u003c/li\u003e\n\u003cli\u003e年轻代内存是由一组非连续的区域组成。这使得需要重调大小变得容易。\u003c/li\u003e\n\u003cli\u003e年轻代垃圾回收是 stop the world 事件，所有应用线程都会因此操作暂停。\u003c/li\u003e\n\u003cli\u003e年轻代垃圾收集使用多线程并行回收。\u003c/li\u003e\n\u003cli\u003e活跃对象被复制到新的 Survivor 区或者年老代区域。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"G1-回收年老代详细步骤\"\u003e\u003ca href=\"#G1-回收年老代详细步骤\" class=\"headerlink\" title=\"G1 回收年老代详细步骤\"\u003e\u003c/a\u003eG1 回收年老代详细步骤\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e（1）初始标记阶段\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e年轻代垃圾收集肩负着活跃对象初始标记的任务。在日志文件中被标为\u003cem\u003eGC pause (young)(inital-mark)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide13.png\" alt=\"img\"/\u003e\u003cbr/\u003e\u003cstrong\u003e（2）并发标记阶段\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果发现空区域(“X”标示的)，在重新标记阶段它们会被马上清除掉。当然，决定活性的审计信息也在此时被计算。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide14.png\" alt=\"img\"/\u003e\u003cbr/\u003e\u003cstrong\u003e（3）重新标记阶段\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e空的区域被清除和回收掉。所有区域的活性在此时计算。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide15.png\" alt=\"img\"/\u003e\u003cbr/\u003e\u003cstrong\u003e（4）复制/清理阶段\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eG1 选择活性最低的区域，这些区域能够以最快的速度回收。然后这些区域会在年轻代垃圾回收过程中被回收。在日志中被指示为*[GC pause (mixed)]*。所以年轻代和年老代在同一时间被回收。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide16.png\" alt=\"img\"/\u003e\u003cbr/\u003e\u003cstrong\u003e（5）复制/清理阶段之后\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e被选择的区域已经被回收和压缩到图中显示的深蓝色区和深绿色区中。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide17.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"总结\"\u003e\u003ca href=\"#总结\" class=\"headerlink\" title=\"总结\"\u003e\u003c/a\u003e总结\u003c/h3\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"center\"\u003e收集器\u003c/th\u003e\n\u003cth align=\"center\"\u003e串行/并行/并发\u003c/th\u003e\n\u003cth align=\"center\"\u003e年轻代/老年代\u003c/th\u003e\n\u003cth align=\"center\"\u003e收集算法\u003c/th\u003e\n\u003cth align=\"center\"\u003e目标\u003c/th\u003e\n\u003cth align=\"center\"\u003e适用场景\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd align=\"center\"\u003e\u003cstrong\u003eSerial\u003c/strong\u003e\u003c/td\u003e\n\u003ctd align=\"center\"\u003e串行\u003c/td\u003e\n\u003ctd align=\"center\"\u003e年轻代\u003c/td\u003e\n\u003ctd align=\"center\"\u003e复制\u003c/td\u003e\n\u003ctd align=\"center\"\u003e响应速度优先\u003c/td\u003e\n\u003ctd align=\"center\"\u003e单 CPU 环境下的 Client 模式\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"center\"\u003e\u003cstrong\u003eSerial Old\u003c/strong\u003e\u003c/td\u003e\n\u003ctd align=\"center\"\u003e串行\u003c/td\u003e\n\u003ctd align=\"center\"\u003e老年代\u003c/td\u003e\n\u003ctd align=\"center\"\u003e标记-整理\u003c/td\u003e\n\u003ctd align=\"center\"\u003e响应速度优先\u003c/td\u003e\n\u003ctd align=\"center\"\u003e单 CPU 环境下的 Client 模式、CMS 的后备预案\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"center\"\u003e\u003cstrong\u003eParNew\u003c/strong\u003e\u003c/td\u003e\n\u003ctd align=\"center\"\u003e串行 + 并行\u003c/td\u003e\n\u003ctd align=\"center\"\u003e年轻代\u003c/td\u003e\n\u003ctd align=\"center\"\u003e复制算法\u003c/td\u003e\n\u003ctd align=\"center\"\u003e响应速度优先\u003c/td\u003e\n\u003ctd align=\"center\"\u003e多 CPU 环境时在 Server 模式下与 CMS 配合\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"center\"\u003e\u003cstrong\u003eParallel Scavenge\u003c/strong\u003e\u003c/td\u003e\n\u003ctd align=\"center\"\u003e串行 + 并行\u003c/td\u003e\n\u003ctd align=\"center\"\u003e年轻代\u003c/td\u003e\n\u003ctd align=\"center\"\u003e复制算法\u003c/td\u003e\n\u003ctd align=\"center\"\u003e吞吐量优先\u003c/td\u003e\n\u003ctd align=\"center\"\u003e在后台运算而不需要太多交互的任务\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"center\"\u003e\u003cstrong\u003eParallel Old\u003c/strong\u003e\u003c/td\u003e\n\u003ctd align=\"center\"\u003e串行 + 并行\u003c/td\u003e\n\u003ctd align=\"center\"\u003e老年代\u003c/td\u003e\n\u003ctd align=\"center\"\u003e标记-整理\u003c/td\u003e\n\u003ctd align=\"center\"\u003e吞吐量优先\u003c/td\u003e\n\u003ctd align=\"center\"\u003e在后台运算而不需要太多交互的任务\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"center\"\u003e\u003cstrong\u003eCMS\u003c/strong\u003e\u003c/td\u003e\n\u003ctd align=\"center\"\u003e并行 + 并发\u003c/td\u003e\n\u003ctd align=\"center\"\u003e老年代\u003c/td\u003e\n\u003ctd align=\"center\"\u003e标记-清除\u003c/td\u003e\n\u003ctd align=\"center\"\u003e响应速度优先\u003c/td\u003e\n\u003ctd align=\"center\"\u003e集中在互联网站或 B/S 系统服务端上的 Java 应用\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"center\"\u003e\u003cstrong\u003eG1\u003c/strong\u003e\u003c/td\u003e\n\u003ctd align=\"center\"\u003e并行 + 并发\u003c/td\u003e\n\u003ctd align=\"center\"\u003e年轻代 + 老年代\u003c/td\u003e\n\u003ctd align=\"center\"\u003e标记-整理 + 复制算法\u003c/td\u003e\n\u003ctd align=\"center\"\u003e响应速度优先\u003c/td\u003e\n\u003ctd align=\"center\"\u003e面向服务端应用，将来替换 CMS\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"内存分配与回收策略\"\u003e\u003ca href=\"#内存分配与回收策略\" class=\"headerlink\" title=\"内存分配与回收策略\"\u003e\u003c/a\u003e内存分配与回收策略\u003c/h2\u003e\u003cp\u003e对象的内存分配，也就是在堆上分配。主要分配在年轻代的 Eden 区上，少数情况下也可能直接分配在老年代中。\u003c/p\u003e\n\u003ch3 id=\"Minor-GC\"\u003e\u003ca href=\"#Minor-GC\" class=\"headerlink\" title=\"Minor GC\"\u003e\u003c/a\u003eMinor GC\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e当 \u003ccode\u003eEden\u003c/code\u003e 区空间不足时，触发 Minor GC\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMinor GC 发生在年轻代上\u003c/strong\u003e，因为年轻代对象存活时间很短，因此 Minor GC 会频繁执行，执行的速度一般也会比较快。\u003c/p\u003e\n\u003cp\u003eMinor GC 工作流程：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eJava 应用不断创建对象，通常都是分配在 \u003ccode\u003eEden\u003c/code\u003e 区域，当其空间不足时（达到设定的阈值），触发 minor GC。仍然被引用的对象（绿色方块）存活下来，被复制到 JVM 选择的 Survivor 区域，而没有被引用的对象（黄色方块）则被回收。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e经过一次 Minor GC，Eden 就会空闲下来，直到再次达到 Minor GC 触发条件。这时候，另外一个 Survivor 区域则会成为 \u003ccode\u003eTo\u003c/code\u003e 区域，Eden 区域的存活对象和 \u003ccode\u003eFrom\u003c/code\u003e 区域对象，都会被复制到 \u003ccode\u003eTo\u003c/code\u003e 区域，并且存活的年龄计数会被加 1。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e类似第二步的过程会发生很多次，直到有对象年龄计数达到阈值，这时候就会发生所谓的晋升（Promotion）过程，如下图所示，超过阈值的对象会被晋升到老年代。这个阈值是可以通过 \u003ccode\u003e-XX:MaxTenuringThreshold\u003c/code\u003e 参数指定。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"Full-GC\"\u003e\u003ca href=\"#Full-GC\" class=\"headerlink\" title=\"Full GC\"\u003e\u003c/a\u003eFull GC\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eFull GC 发生在老年代上\u003c/strong\u003e，老年代对象和年轻代的相反，其存活时间长，因此 Full GC 很少执行，而且执行速度会比 Minor GC 慢很多。\u003c/p\u003e\n\u003ch4 id=\"内存分配策略\"\u003e\u003ca href=\"#内存分配策略\" class=\"headerlink\" title=\"内存分配策略\"\u003e\u003c/a\u003e内存分配策略\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e（一）对象优先在 Eden 分配\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e大多数情况下，对象在年轻代 Eden 区分配，当 Eden 区空间不够时，发起 Minor GC。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（二）大对象直接进入老年代\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e大对象是指需要连续内存空间的对象，最典型的大对象是那种很长的字符串以及数组。\u003c/p\u003e\n\u003cp\u003e经常出现大对象会提前触发垃圾收集以获取足够的连续空间分配给大对象。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e-XX:PretenureSizeThreshold\u003c/code\u003e，大于此值的对象直接在老年代分配，避免在 Eden 区和 Survivor 区之间的大量内存复制。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（三）长期存活的对象进入老年代\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e为对象定义年龄计数器，对象在 Eden 出生并经过 Minor GC 依然存活，将移动到 Survivor 中，年龄就增加 1 岁，增加到一定年龄则移动到老年代中。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e-XX:MaxTenuringThreshold\u003c/code\u003e 用来定义年龄的阈值。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（四）动态对象年龄判定\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e虚拟机并不是永远地要求对象的年龄必须达到 \u003ccode\u003eMaxTenuringThreshold\u003c/code\u003e 才能晋升老年代，如果在 Survivor 区中相同年龄所有对象大小的总和大于 Survivor 空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无需等到 \u003ccode\u003eMaxTenuringThreshold\u003c/code\u003e 中要求的年龄。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（五）空间分配担保\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e在发生 Minor GC 之前，虚拟机先检查老年代最大可用的连续空间是否大于年轻代所有对象总空间，如果条件成立的话，那么 Minor GC 可以确认是安全的；如果不成立的话虚拟机会查看 \u003ccode\u003eHandlePromotionFailure\u003c/code\u003e 设置值是否允许担保失败，如果允许那么就会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC，尽管这次 Minor GC 是有风险的；如果小于，或者 \u003ccode\u003eHandlePromotionFailure\u003c/code\u003e 设置不允许冒险，那这时也要改为进行一次 Full GC。\u003c/p\u003e\n\u003ch4 id=\"Full-GC-的触发条件\"\u003e\u003ca href=\"#Full-GC-的触发条件\" class=\"headerlink\" title=\"Full GC 的触发条件\"\u003e\u003c/a\u003eFull GC 的触发条件\u003c/h4\u003e\u003cp\u003e对于 Minor GC，其触发条件非常简单，当 Eden 区空间满时，就将触发一次 Minor GC。而 Full GC 则相对复杂，有以下条件：\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（1）调用 \u003ccode\u003eSystem.gc()\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e此方法的调用是建议虚拟机进行 Full GC，虽然只是建议而非一定，但很多情况下它会触发 Full GC，从而增加 Full GC 的频率，也即增加了间歇性停顿的次数。因此强烈建议能不使用此方法就不要使用，让虚拟机自己去管理它的内存。可通过 \u003ccode\u003e-XX:DisableExplicitGC\u003c/code\u003e 来禁止 RMI 调用 \u003ccode\u003eSystem.gc()\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（2）老年代空间不足\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e老年代空间不足的常见场景为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等，当执行 Full GC 后空间仍然不足，则抛出 \u003ccode\u003ejava.lang.OutOfMemoryError: Java heap space\u003c/code\u003e。为避免以上原因引起的 Full GC，调优时应尽量做到让对象在 Minor GC 阶段被回收、让对象在年轻代多存活一段时间以及不要创建过大的对象及数组。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（3）方法区空间不足\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eJVM 规范中运行时数据区域中的\u003cstrong\u003e方法区\u003c/strong\u003e，在 HotSpot 虚拟机中又被习惯称为\u003cstrong\u003e永久代\u003c/strong\u003e，永久代中存放的是类的描述信息、常量、静态变量等数据，当系统中要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，在未配置为采用 CMS GC 的情况下也会执行 Full GC。如果经过 Full GC 仍然回收不了，那么 JVM 会抛出 \u003ccode\u003ejava.lang.OutOfMemoryError: PermGen space\u003c/code\u003e 错误。为避免永久代占满造成 Full GC 现象，可采用的方法为增大 Perm Gen 空间或转为使用 CMS GC。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（4）Minor GC 的平均晋升空间大小大于老年代可用空间\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果发现统计数据说之前 Minor GC 的平均晋升大小比目前老年代剩余的空间大，则不会触发 Minor GC 而是转为触发 Full GC。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（5）对象大小大于 To 区和老年代的可用内存\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e由 \u003ccode\u003eEden\u003c/code\u003e 区、\u003ccode\u003eFrom\u003c/code\u003e 区向 \u003ccode\u003eTo\u003c/code\u003e 区复制时，对象大小大于 To 区可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小。\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/34907497/\"\u003e《深入理解 Java 虚拟机》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.douban.com/doulist/2545443/\"\u003e从表到里学习 JVM 实现\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/coderlius/article/details/79272773\"\u003e详解 JVM Garbage First(G1) 垃圾收集器\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/zhanggang807/article/details/45956325\"\u003eG1 垃圾收集器入门\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/index.html\"\u003eGetting Started with the G1 Garbage Collector\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-06-07T01:21:16Z",
  "Author": "钝悟 ◾ Dunwu"
}