{
  "Source": "dunwu",
  "Title": "Spring Environment 抽象",
  "Link": "https://dunwu.github.io/blog/pages/03d838/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Spring-Environment-抽象\"\u003e\u003ca href=\"#Spring-Environment-抽象\" class=\"headerlink\" title=\"Spring Environment 抽象\"\u003e\u003c/a\u003eSpring Environment 抽象\u003c/h1\u003e\u003ch2 id=\"理解-Spring-Environment-抽象\"\u003e\u003ca href=\"#理解-Spring-Environment-抽象\" class=\"headerlink\" title=\"理解 Spring Environment 抽象\"\u003e\u003c/a\u003e理解 Spring Environment 抽象\u003c/h2\u003e\u003cp\u003e统一的 Spring 配置属性管理\u003c/p\u003e\n\u003cp\u003eSpring Framework 3.1 开始引入 Environment 抽象，它统一 Spring 配置属性的存储，包括占位符处理和类型转换，不仅完整地替换 PropertyPlaceholderConfigurer，而且还支持更丰富的配置属性源（PropertySource）\u003c/p\u003e\n\u003cp\u003e条件化 Spring Bean 装配管理\u003c/p\u003e\n\u003cp\u003e通过 Environment Profiles 信息，帮助 Spring 容器提供条件化地装配 Bean\u003c/p\u003e\n\u003ch2 id=\"Spring-Environment-接口使用场景\"\u003e\u003ca href=\"#Spring-Environment-接口使用场景\" class=\"headerlink\" title=\"Spring Environment 接口使用场景\"\u003e\u003c/a\u003eSpring Environment 接口使用场景\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e⽤于属性占位符处理\u003c/li\u003e\n\u003cli\u003e用于转换 Spring 配置属性类型\u003c/li\u003e\n\u003cli\u003e用于存储 Spring 配置属性源（PropertySource）\u003c/li\u003e\n\u003cli\u003e用于 Profiles 状态的维护\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Environment-占位符处理\"\u003e\u003ca href=\"#Environment-占位符处理\" class=\"headerlink\" title=\"Environment 占位符处理\"\u003e\u003c/a\u003eEnvironment 占位符处理\u003c/h2\u003e\u003cp\u003eSpring 3.1 前占位符处理\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e组件：org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\u003c/li\u003e\n\u003cli\u003e接口：org.springframework.util.StringValueResolver\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSpring 3.1 + 占位符处理\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e组件：org.springframework.context.support.PropertySourcesPlaceholderConfigurer\u003c/li\u003e\n\u003cli\u003e接口：org.springframework.beans.factory.config.EmbeddedValueResolver\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"理解条件配置-Spring-Profiles\"\u003e\u003ca href=\"#理解条件配置-Spring-Profiles\" class=\"headerlink\" title=\"理解条件配置 Spring Profiles\"\u003e\u003c/a\u003e理解条件配置 Spring Profiles\u003c/h2\u003e\u003cp\u003eSpring 3.1 条件配置\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAPI：org.springframework.core.env.ConfigurableEnvironment\u003c/li\u003e\n\u003cli\u003e修改：addActiveProfile(String)、setActiveProfiles(String…) 和 setDefaultProfiles(String…)\u003c/li\u003e\n\u003cli\u003e获取：getActiveProfiles() 和 getDefaultProfiles()\u003c/li\u003e\n\u003cli\u003e匹配：#acceptsProfiles(String…) 和 acceptsProfiles(Profiles)\u003c/li\u003e\n\u003cli\u003e注解：@org.springframework.context.annotation.Profile\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-4-重构-Profile\"\u003e\u003ca href=\"#Spring-4-重构-Profile\" class=\"headerlink\" title=\"Spring 4 重构 @Profile\"\u003e\u003c/a\u003eSpring 4 重构 @Profile\u003c/h2\u003e\u003cp\u003e基于 Spring 4 org.springframework.context.annotation.Condition 接口实现\u003c/p\u003e\n\u003cp\u003eorg.springframework.context.annotation.ProfileCondition\u003c/p\u003e\n\u003ch2 id=\"依赖注入-Environment\"\u003e\u003ca href=\"#依赖注入-Environment\" class=\"headerlink\" title=\"依赖注入 Environment\"\u003e\u003c/a\u003e依赖注入 Environment\u003c/h2\u003e\u003cp\u003e直接依赖注入\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e通过 EnvironmentAware 接口回调\u003c/li\u003e\n\u003cli\u003e通过 @Autowired 注入 Environment\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e间接依赖注入\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e通过 ApplicationContextAware 接口回调\u003c/li\u003e\n\u003cli\u003e通过 @Autowired 注入 ApplicationContext\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"依赖查找-Environment\"\u003e\u003ca href=\"#依赖查找-Environment\" class=\"headerlink\" title=\"依赖查找 Environment\"\u003e\u003c/a\u003e依赖查找 Environment\u003c/h2\u003e\u003cp\u003e直接依赖查找\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e通过 org.springframework.context.ConfigurableApplicationContext#ENVIRONMENT_BEAN_NAME\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e间接依赖查找\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e通过 org.springframework.context.ConfigurableApplicationContext#getEnvironment\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"依赖注入-Value\"\u003e\u003ca href=\"#依赖注入-Value\" class=\"headerlink\" title=\"依赖注入 @Value\"\u003e\u003c/a\u003e依赖注入 @Value\u003c/h2\u003e\u003cp\u003e通过注入 @Value\u003c/p\u003e\n\u003cp\u003e实现 - org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor\u003c/p\u003e\n\u003ch2 id=\"Spring-类型转换在-Environment-中的运用\"\u003e\u003ca href=\"#Spring-类型转换在-Environment-中的运用\" class=\"headerlink\" title=\"Spring 类型转换在 Environment 中的运用\"\u003e\u003c/a\u003eSpring 类型转换在 Environment 中的运用\u003c/h2\u003e\u003cp\u003eEnvironment 底层实现\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e底层实现 - org.springframework.core.env.PropertySourcesPropertyResolver\u003c/li\u003e\n\u003cli\u003e核心方法 - convertValueIfNecessary(Object,Class)\u003c/li\u003e\n\u003cli\u003e底层服务 - org.springframework.core.convert.ConversionService\u003c/li\u003e\n\u003cli\u003e默认实现 - org.springframework.core.convert.support.DefaultConversionService\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-类型转换在-Value-中的运用\"\u003e\u003ca href=\"#Spring-类型转换在-Value-中的运用\" class=\"headerlink\" title=\"Spring 类型转换在 @Value 中的运用\"\u003e\u003c/a\u003eSpring 类型转换在 @Value 中的运用\u003c/h2\u003e\u003cp\u003e@Value 底层实现\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e底层实现 - org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor\u003cul\u003e\n\u003cli\u003eorg.springframework.beans.factory.support.DefaultListableBeanFactory#doResolveDependency\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e底层服务 - org.springframework.beans.TypeConverter\u003cul\u003e\n\u003cli\u003e默认实现 - org.springframework.beans.TypeConverterDelegate\u003cul\u003e\n\u003cli\u003ejava.beans.PropertyEditor\u003c/li\u003e\n\u003cli\u003eorg.springframework.core.convert.ConversionService\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-配置属性源-PropertySource\"\u003e\u003ca href=\"#Spring-配置属性源-PropertySource\" class=\"headerlink\" title=\"Spring 配置属性源 PropertySource\"\u003e\u003c/a\u003eSpring 配置属性源 PropertySource\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003eAPI\u003cul\u003e\n\u003cli\u003e单配置属性源 - org.springframework.core.env.PropertySource\u003c/li\u003e\n\u003cli\u003e多配置属性源 - org.springframework.core.env.PropertySources\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e注解\u003cul\u003e\n\u003cli\u003e单配置属性源 - @org.springframework.context.annotation.PropertySource\u003c/li\u003e\n\u003cli\u003e多配置属性源 - @org.springframework.context.annotation.PropertySources\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e关联\u003cul\u003e\n\u003cli\u003e存储对象 - org.springframework.core.env.MutablePropertySources\u003c/li\u003e\n\u003cli\u003e关联方法 - org.springframework.core.env.ConfigurableEnvironment#getPropertySources()\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-內建的配置属性源\"\u003e\u003ca href=\"#Spring-內建的配置属性源\" class=\"headerlink\" title=\"Spring 內建的配置属性源\"\u003e\u003c/a\u003eSpring 內建的配置属性源\u003c/h2\u003e\u003cp\u003e內建 PropertySource\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ePropertySource 类型\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003eorg.springframework.core.env.CommandLinePropertySource\u003c/td\u003e\n\u003ctd\u003e命令行配置属性源\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eorg.springframework.jndi.JndiPropertySource\u003c/td\u003e\n\u003ctd\u003eJDNI 配置属性源\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eorg.springframework.core.env.PropertiesPropertySource\u003c/td\u003e\n\u003ctd\u003eProperties 配置属性源\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eorg.springframework.web.context.support.ServletConfigPropertySource\u003c/td\u003e\n\u003ctd\u003eServlet 配置属性源\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eorg.springframework.web.context.support.ServletContextPropertySource\u003c/td\u003e\n\u003ctd\u003eServletContext 配置属性源\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eorg.springframework.core.env.SystemEnvironmentPropertySource\u003c/td\u003e\n\u003ctd\u003e环境变量配置属性源\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"基于注解扩展-Spring-配置属性源\"\u003e\u003ca href=\"#基于注解扩展-Spring-配置属性源\" class=\"headerlink\" title=\"基于注解扩展 Spring 配置属性源\"\u003e\u003c/a\u003e基于注解扩展 Spring 配置属性源\u003c/h2\u003e\u003cp\u003e@org.springframework.context.annotation.PropertySource 实现原理\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e入口 - org.springframework.context.annotation.ConfigurationClassParser#doProcessConfigurationClass\u003cul\u003e\n\u003cli\u003eorg.springframework.context.annotation.ConfigurationClassParser#processPropertySource\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e4.3 新增语义\u003cul\u003e\n\u003cli\u003e配置属性字符编码 - encoding\u003c/li\u003e\n\u003cli\u003eorg.springframework.core.io.support.PropertySourceFactory\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e适配对象 - org.springframework.core.env.CompositePropertySource\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"基于-API-扩展-Spring-配置属性源\"\u003e\u003ca href=\"#基于-API-扩展-Spring-配置属性源\" class=\"headerlink\" title=\"基于 API 扩展 Spring 配置属性源\"\u003e\u003c/a\u003e基于 API 扩展 Spring 配置属性源\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003eSpring 应用上下文启动前装配 PropertySource\u003c/li\u003e\n\u003cli\u003eSpring 应用上下文启动后装配 PropertySource\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"问题\"\u003e\u003ca href=\"#问题\" class=\"headerlink\" title=\"问题\"\u003e\u003c/a\u003e问题\u003c/h2\u003e\u003cp\u003e简单介绍 Spring Environment 接口？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e核心接口 - org.springframework.core.env.Environment\u003c/li\u003e\n\u003cli\u003e父接口 - org.springframework.core.env.PropertyResolver\u003c/li\u003e\n\u003cli\u003e可配置接口 - org.springframework.core.env.ConfigurableEnvironment\u003c/li\u003e\n\u003cli\u003e职责：\u003cul\u003e\n\u003cli\u003e管理 Spring 配置属性源\u003c/li\u003e\n\u003cli\u003e管理 Profiles\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans\"\u003eSpring 官方文档之 Core Technologies\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/course/intro/265\"\u003e《小马哥讲 Spring 核心编程思想》\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-12-23T01:27:44Z",
  "Author": "钝悟 ◾ Dunwu"
}