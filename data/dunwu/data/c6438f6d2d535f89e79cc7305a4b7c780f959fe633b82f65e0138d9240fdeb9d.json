{
  "Source": "dunwu",
  "Title": "Spring 类型转换",
  "Link": "https://dunwu.github.io/blog/pages/6662dc/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Spring-类型转换\"\u003e\u003ca href=\"#Spring-类型转换\" class=\"headerlink\" title=\"Spring 类型转换\"\u003e\u003c/a\u003eSpring 类型转换\u003c/h1\u003e\u003ch2 id=\"Spring-类型转换的实现\"\u003e\u003ca href=\"#Spring-类型转换的实现\" class=\"headerlink\" title=\"Spring 类型转换的实现\"\u003e\u003c/a\u003eSpring 类型转换的实现\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e基于 JavaBeans 接口的类型转换实现\u003cul\u003e\n\u003cli\u003e基于 java.beans.PropertyEditor 接口扩展\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSpring 3.0+ 通用类型转换实现\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"使用场景\"\u003e\u003ca href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"\u003e\u003c/a\u003e使用场景\u003c/h2\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e场景\u003c/th\u003e\n\u003cth\u003e基于 JavaBeans 接口的类型转换实现\u003c/th\u003e\n\u003cth\u003eSpring 3.0+ 通用类型转换实现\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e数据绑定\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eBeanWrapper\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eBean 属性类型转换\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e外部化属性类型转换\u003c/td\u003e\n\u003ctd\u003eNO\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"基于-JavaBeans-接口的类型转换\"\u003e\u003ca href=\"#基于-JavaBeans-接口的类型转换\" class=\"headerlink\" title=\"基于 JavaBeans 接口的类型转换\"\u003e\u003c/a\u003e基于 JavaBeans 接口的类型转换\u003c/h2\u003e\u003cp\u003e核心职责\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e将 String 类型的内容转化为目标类型的对象\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e扩展原理\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSpring 框架将文本内容传递到 PropertyEditor 实现的 setAsText(String) 方法\u003c/li\u003e\n\u003cli\u003ePropertyEditor#setAsText(String) 方法实现将 String 类型转化为目标类型的对象\u003c/li\u003e\n\u003cli\u003e将目标类型的对象传入 PropertyEditor#setValue(Object) 方法\u003c/li\u003e\n\u003cli\u003ePropertyEditor#setValue(Object) 方法实现需要临时存储传入对象\u003c/li\u003e\n\u003cli\u003eSpring 框架将通过 PropertyEditor#getValue() 获取类型转换后的对象\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-內建-PropertyEditor-扩展\"\u003e\u003ca href=\"#Spring-內建-PropertyEditor-扩展\" class=\"headerlink\" title=\"Spring 內建 PropertyEditor 扩展\"\u003e\u003c/a\u003eSpring 內建 PropertyEditor 扩展\u003c/h2\u003e\u003cp\u003e內建扩展（org.springframework.beans.propertyeditors 包下）\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e转换场景\u003c/th\u003e\n\u003cth\u003e实现类\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003eString -\u0026gt; Byte 数组\u003c/td\u003e\n\u003ctd\u003eorg.springframework.beans.propertyeditors.ByteArrayPropertyEditor\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eString -\u0026gt; Char\u003c/td\u003e\n\u003ctd\u003eorg.springframework.beans.propertyeditors.CharacterEditor\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eString -\u0026gt; Char 数组\u003c/td\u003e\n\u003ctd\u003eorg.springframework.beans.propertyeditors.CharArrayPropertyEditor\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eString -\u0026gt; Charset\u003c/td\u003e\n\u003ctd\u003eorg.springframework.beans.propertyeditors.CharsetEditor\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eString -\u0026gt; Class\u003c/td\u003e\n\u003ctd\u003eorg.springframework.beans.propertyeditors.ClassEditor\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eString -\u0026gt; Currency\u003c/td\u003e\n\u003ctd\u003eorg.springframework.beans.propertyeditors.CurrencyEditor\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"自定义-PropertyEditor-扩展\"\u003e\u003ca href=\"#自定义-PropertyEditor-扩展\" class=\"headerlink\" title=\"自定义 PropertyEditor 扩展\"\u003e\u003c/a\u003e自定义 PropertyEditor 扩展\u003c/h2\u003e\u003cp\u003e扩展模式\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e扩展 \u003ccode\u003ejava.beans.PropertyEditorSupport\u003c/code\u003e 类\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e实现 \u003ccode\u003eorg.springframework.beans.PropertyEditorRegistrar\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e实现 \u003ccode\u003eregisterCustomEditors(org.springframework.beans.PropertyEditorRegistry)\u003c/code\u003e 方法\u003c/li\u003e\n\u003cli\u003e将 \u003ccode\u003ePropertyEditorRegistrar\u003c/code\u003e 实现注册为 Spring Bean\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e向 \u003ccode\u003eorg.springframework.beans.PropertyEditorRegistry\u003c/code\u003e 注册自定义 PropertyEditor 实现\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e通用类型实现 \u003ccode\u003eregisterCustomEditor(Class\u0026lt;?\u0026gt;, PropertyEditor)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eJava Bean 属性类型实现：\u003ccode\u003eregisterCustomEditor(Class\u0026lt;?\u0026gt;, String, PropertyEditor)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-PropertyEditor-的设计缺陷\"\u003e\u003ca href=\"#Spring-PropertyEditor-的设计缺陷\" class=\"headerlink\" title=\"Spring PropertyEditor 的设计缺陷\"\u003e\u003c/a\u003eSpring PropertyEditor 的设计缺陷\u003c/h2\u003e\u003cp\u003e违反职责单一原则\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ejava.beans.PropertyEditor\u003c/code\u003e 接口职责太多，除了类型转换，还包括 Java Beans 事件和 Java GUI 交\u003cbr/\u003e互\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003ejava.beans.PropertyEditor\u003c/code\u003e 实现类型局限\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e来源类型只能为 \u003ccode\u003ejava.lang.String\u003c/code\u003e 类型\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003ejava.beans.PropertyEditor\u003c/code\u003e 实现缺少类型安全\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e除了实现类命名可以表达语义，实现类无法感知目标转换类型\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-3-通用类型转换接口\"\u003e\u003ca href=\"#Spring-3-通用类型转换接口\" class=\"headerlink\" title=\"Spring 3 通用类型转换接口\"\u003e\u003c/a\u003eSpring 3 通用类型转换接口\u003c/h2\u003e\u003cp\u003e类型转换接口 - org.springframework.core.convert.converter.Converter\u0026lt;S,T\u0026gt;\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e泛型参数 S：来源类型，参数 T：目标类型\u003c/li\u003e\n\u003cli\u003e核心方法：T convert(S)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e通用类型转换接口 - org.springframework.core.convert.converter.GenericConverter\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e核心方法：convert(Object,TypeDescriptor,TypeDescriptor)\u003c/li\u003e\n\u003cli\u003e配对类型：org.springframework.core.convert.converter.GenericConverter.ConvertiblePair\u003c/li\u003e\n\u003cli\u003e类型描述：org.springframework.core.convert.TypeDescriptor\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-內建类型转换器\"\u003e\u003ca href=\"#Spring-內建类型转换器\" class=\"headerlink\" title=\"Spring 內建类型转换器\"\u003e\u003c/a\u003eSpring 內建类型转换器\u003c/h2\u003e\u003cp\u003e內建扩展\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e转换场景\u003c/th\u003e\n\u003cth\u003e实现类所在包名（package）\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e日期/时间相关\u003c/td\u003e\n\u003ctd\u003eorg.springframework.format.datetime\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eJava 8 日期/时间相关\u003c/td\u003e\n\u003ctd\u003eorg.springframework.format.datetime.standard\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e通用实现\u003c/td\u003e\n\u003ctd\u003eorg.springframework.core.convert.support\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"Converter-接口的局限性\"\u003e\u003ca href=\"#Converter-接口的局限性\" class=\"headerlink\" title=\"Converter 接口的局限性\"\u003e\u003c/a\u003eConverter 接口的局限性\u003c/h2\u003e\u003cp\u003e局限一：缺少 Source Type 和 Target Type 前置判断\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e应对：增加 org.springframework.core.convert.converter.ConditionalConverter 实现\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e局限二：仅能转换单一的 Source Type 和 Target Type\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e应对：使用 org.springframework.core.convert.converter.GenericConverter 代替\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"GenericConverter-接口\"\u003e\u003ca href=\"#GenericConverter-接口\" class=\"headerlink\" title=\"GenericConverter 接口\"\u003e\u003c/a\u003eGenericConverter 接口\u003c/h2\u003e\u003cp\u003e\u003ccode\u003eorg.springframework.core.convert.converter.GenericConverter\u003c/code\u003e\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e核心要素\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e使用场景\u003c/td\u003e\n\u003ctd\u003e用于“复合”类型转换场景，比如 Collection、Map、数组等\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e转换范围\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eSet\u0026lt;ConvertiblePair\u0026gt; getConvertibleTypes()\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e配对类型\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eorg.springframework.core.convert.converter.GenericConverter.ConvertiblePair\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e转换方法\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003econvert(Object,TypeDescriptor,TypeDescriptor)\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e类型描述\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eorg.springframework.core.convert.TypeDescriptor\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"优化-GenericConverter-接口\"\u003e\u003ca href=\"#优化-GenericConverter-接口\" class=\"headerlink\" title=\"优化 GenericConverter 接口\"\u003e\u003c/a\u003e优化 GenericConverter 接口\u003c/h2\u003e\u003cp\u003eGenericConverter 局限性\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e缺少 Source Type 和 Target Type 前置判断\u003c/li\u003e\n\u003cli\u003e单一类型转换实现复杂\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGenericConverter 优化接口 - \u003ccode\u003eConditionalGenericConverter\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e复合类型转换：\u003ccode\u003eorg.springframework.core.convert.converter.GenericConverter\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e类型条件判断：\u003ccode\u003eorg.springframework.core.convert.converter.ConditionalConverter\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"扩展-Spring-类型转换器\"\u003e\u003ca href=\"#扩展-Spring-类型转换器\" class=\"headerlink\" title=\"扩展 Spring 类型转换器\"\u003e\u003c/a\u003e扩展 Spring 类型转换器\u003c/h2\u003e\u003cp\u003e实现转换器接口\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.core.convert.converter.Converter\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.core.convert.converter.ConverterFactory\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.core.convert.converter.GenericConverter\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e注册转换器实现\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e通过 \u003ccode\u003eConversionServiceFactoryBean\u003c/code\u003e Spring Bean\u003c/li\u003e\n\u003cli\u003e通过 \u003ccode\u003eorg.springframework.core.convert.ConversionService API\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"统一类型转换服务\"\u003e\u003ca href=\"#统一类型转换服务\" class=\"headerlink\" title=\"统一类型转换服务\"\u003e\u003c/a\u003e统一类型转换服务\u003c/h2\u003e\u003cp\u003e\u003ccode\u003eorg.springframework.core.convert.ConversionService\u003c/code\u003e\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e实现类型\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eGenericConversionService\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e通用 ConversionService 模板实现，不内置转化器实现\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eDefaultConversionService\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e基础 ConversionService 实现，内置常用转化器实现\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eFormattingConversionService\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e通用 Formatter + GenericConversionService 实现，不内置转化器和 Formatter 实现\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eDefaultFormattingConversionService\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eDefaultConversionService + 格式化 实现（如：JSR-354 Money \u0026amp; Currency, JSR-310 Date-Time）\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"ConversionService-作为依赖\"\u003e\u003ca href=\"#ConversionService-作为依赖\" class=\"headerlink\" title=\"ConversionService 作为依赖\"\u003e\u003c/a\u003eConversionService 作为依赖\u003c/h2\u003e\u003cp\u003e类型转换器底层接口 - \u003ccode\u003eorg.springframework.beans.TypeConverter\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e起始版本：Spring 2.0\u003c/li\u003e\n\u003cli\u003e核心方法 - convertIfNecessary 重载方法\u003c/li\u003e\n\u003cli\u003e抽象实现 - \u003ccode\u003eorg.springframework.beans.TypeConverterSupport\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e简单实现 - \u003ccode\u003eorg.springframework.beans.SimpleTypeConverter\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e类型转换器底层抽象实现 - \u003ccode\u003eorg.springframework.beans.TypeConverterSupport\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e实现接口 - \u003ccode\u003eorg.springframework.beans.TypeConverter\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e扩展实现 - \u003ccode\u003eorg.springframework.beans.PropertyEditorRegistrySupport\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e委派实现 - \u003ccode\u003eorg.springframework.beans.TypeConverterDelegate\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e类型转换器底层委派实现 - \u003ccode\u003eorg.springframework.beans.TypeConverterDelegate\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e构造来源 - \u003ccode\u003eorg.springframework.beans.AbstractNestablePropertyAccessor\u003c/code\u003e 实现\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.beans.BeanWrapperImpl\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e依赖 - \u003ccode\u003ejava.beans.PropertyEditor\u003c/code\u003e 实现\u003cul\u003e\n\u003cli\u003e默认內建实现 - \u003ccode\u003ePropertyEditorRegistrySupport#registerDefaultEditors\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e可选依赖 - \u003ccode\u003eorg.springframework.core.convert.ConversionService\u003c/code\u003e 实现\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"问题\"\u003e\u003ca href=\"#问题\" class=\"headerlink\" title=\"问题\"\u003e\u003c/a\u003e问题\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eSpring 类型转换实现有哪些\u003c/strong\u003e？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e基于 JavaBeans PropertyEditor 接口实现\u003c/li\u003e\n\u003cli\u003eSpring 3.0+ 通用类型转换实现\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSpring 类型转换器接口有哪些\u003c/strong\u003e？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e类型转换接口 - \u003ccode\u003eorg.springframework.core.convert.converter.Converter\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e通用类型转换接口 - \u003ccode\u003eorg.springframework.core.convert.converter.GenericConverter\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e类型条件接口 - \u003ccode\u003eorg.springframework.core.convert.converter.ConditionalConverter\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e综合类型转换接口 - \u003ccode\u003eorg.springframework.core.convert.converter.ConditionalGenericConverter\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans\"\u003eSpring 官方文档之 Core Technologies\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/course/intro/265\"\u003e《小马哥讲 Spring 核心编程思想》\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-12-22T11:43:59Z",
  "Author": "钝悟 ◾ Dunwu"
}