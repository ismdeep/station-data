{
  "Source": "dunwu",
  "Title": "Kafka 可靠传输",
  "Link": "https://dunwu.github.io/blog/pages/481bdd/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Kafka-可靠传输\"\u003e\u003ca href=\"#Kafka-可靠传输\" class=\"headerlink\" title=\"Kafka 可靠传输\"\u003e\u003c/a\u003eKafka 可靠传输\u003c/h1\u003e\u003ch2 id=\"消息不丢失\"\u003e\u003ca href=\"#消息不丢失\" class=\"headerlink\" title=\"消息不丢失\"\u003e\u003c/a\u003e消息不丢失\u003c/h2\u003e\u003cp\u003e如何保证消息的可靠性传输，或者说，如何保证消息不丢失？这对于任何 MQ 都是核心问题。\u003c/p\u003e\n\u003cp\u003e一条消息从生产到消费，可以划分三个阶段：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20210422042613.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e生产阶段\u003c/strong\u003e：Producer 创建消息，并通过网络发送给 Broker。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e存储阶段\u003c/strong\u003e：Broker 收到消息并存储，如果是集群，还要同步副本给其他 Broker。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e消费阶段\u003c/strong\u003e：Consumer 向 Broker 请求消息，Broker 通过网络传输给 Consumer。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这三个阶段都可能丢失数据，所以要保证消息丢失，就需要任意一环都保证可靠。\u003c/p\u003e\n\u003ch3 id=\"存储阶段\"\u003e\u003ca href=\"#存储阶段\" class=\"headerlink\" title=\"存储阶段\"\u003e\u003c/a\u003e存储阶段\u003c/h3\u003e\u003cp\u003e存储阶段指的是 Kafka Server，也就是 Broker 如何保证消息不丢失。\u003c/p\u003e\n\u003cp\u003e一句话概括，\u003cstrong\u003eKafka 只对“已提交”的消息（committed message）做有限度的持久化保证\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e上面的话可以解读为：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e已提交\u003c/strong\u003e：\u003cstrong\u003e只有当消息被写入分区的若干同步副本时，才被认为是已提交的\u003c/strong\u003e。为什么是若干个 Broker 呢？这取决于你对“已提交”的定义。你可以选择只要 Leader 成功保存该消息就算是已提交，也可以是令所有 Broker 都成功保存该消息才算是已提交。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e持久化\u003c/strong\u003e：Kafka 的数据存储在磁盘上，所以只要写入成功，天然就是持久化的。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e只要还有一个副本是存活的，那么已提交的消息就不会丢失\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e消费者只能读取已提交的消息\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"副本机制\"\u003e\u003ca href=\"#副本机制\" class=\"headerlink\" title=\"副本机制\"\u003e\u003c/a\u003e副本机制\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003eKafka 的副本机制是 kafka 可靠性保证的核心\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eKafka 的主题被分为多个分区，分区是基本的数据块。每个分区可以有多个副本，有一个是 Leader（主副本），其他是 Follower（从副本）。所有数据都直接发送给 Leader，或者直接从 Leader 读取事件。Follower 只需要与 Leader 保持同步，并及时复制最新的数据。当 Leader 宕机时，从 Follower 中选举一个成为新的 Leader。\u003c/p\u003e\n\u003cp\u003eBroker 有 3 个配置参数会影响 Kafka 消息存储的可靠性。\u003c/p\u003e\n\u003ch4 id=\"副本数\"\u003e\u003ca href=\"#副本数\" class=\"headerlink\" title=\"副本数\"\u003e\u003c/a\u003e副本数\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ereplication.factor\u003c/code\u003e 的作用是设置每个分区的副本数\u003c/strong\u003e。\u003ccode\u003ereplication.factor\u003c/code\u003e 是主题级别配置； \u003ccode\u003edefault.replication.factor\u003c/code\u003e 是 broker 级别配置。\u003c/p\u003e\n\u003cp\u003e副本数越多，数据可靠性越高；但由于副本数增多，也会增加同步副本的开销，可能会降低集群的可用性。一般，建议设为 3，这也是 Kafka 的默认值。\u003c/p\u003e\n\u003ch4 id=\"不完全的选主\"\u003e\u003ca href=\"#不完全的选主\" class=\"headerlink\" title=\"不完全的选主\"\u003e\u003c/a\u003e不完全的选主\u003c/h4\u003e\u003cp\u003e\u003ccode\u003eunclean.leader.election.enable\u003c/code\u003e 用于控制是否支持不同步的副本参与选举 Leader。\u003ccode\u003eunclean.leader.election.enable\u003c/code\u003e 是 broker 级别（实际上是集群范围内）配置，默认值为 true。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果设为 true，代表着\u003cstrong\u003e允许不同步的副本成为主副本\u003c/strong\u003e（即不完全的选举），那么将\u003cstrong\u003e面临丢失消息的风险\u003c/strong\u003e；\u003c/li\u003e\n\u003cli\u003e如果设为 false，就要\u003cstrong\u003e等待原先的主副本重新上线\u003c/strong\u003e，从而降低了可用性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"最少同步副本\"\u003e\u003ca href=\"#最少同步副本\" class=\"headerlink\" title=\"最少同步副本\"\u003e\u003c/a\u003e最少同步副本\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003emin.insync.replicas\u003c/code\u003e 控制的是消息至少要被写入到多少个副本才算是“已提交”\u003c/strong\u003e。\u003ccode\u003emin.insync.replicas\u003c/code\u003e 是主题级别和 broker 级别配置。\u003c/p\u003e\n\u003cp\u003e尽管可以为一个主题配置 3 个副本，但还是可能会出现只有一个同步副本的情况。如果这个同步副本变为不可用，则必须在可用性和数据一致性之间做出选择。Kafka 中，消息只有被写入到所有的同步副本之后才被认为是已提交的。但如果只有一个同步副本，那么在这个副本不可用时，则数据就会丢失。\u003c/p\u003e\n\u003cp\u003e如果要确保已经提交的数据被已写入不止一个副本，就需要把最小同步副本的设置为大一点的值。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注意：要确保 \u003ccode\u003ereplication.factor\u003c/code\u003e \u0026gt; \u003ccode\u003emin.insync.replicas\u003c/code\u003e。如果两者相等，那么只要有一个副本挂机，整个分区就无法正常工作了。我们不仅要改善消息的持久性，防止数据丢失，还要在不降低可用性的基础上完成。推荐设置成 \u003ccode\u003ereplication.factor = min.insync.replicas + 1\u003c/code\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"生产阶段\"\u003e\u003ca href=\"#生产阶段\" class=\"headerlink\" title=\"生产阶段\"\u003e\u003c/a\u003e生产阶段\u003c/h3\u003e\u003cp\u003e在生产消息阶段，消息队列一般通过请求确认机制，来保证消息的可靠传递，Kafka 也不例外。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"02.Kafka%E7%94%9F%E4%BA%A7%E8%80%85.md\"\u003eKafka 生产者\u003c/a\u003e 中提到了，Kafka 有三种发送方式：同步、异步、异步回调。\u003c/p\u003e\n\u003cp\u003e同步方式能保证消息不丢失，但性能太差；异步方式发送消息，通常会立即返回，但消息可能丢失。\u003c/p\u003e\n\u003cp\u003e解决生产者丢失消息的方案：\u003c/p\u003e\n\u003cp\u003e生产者使用异步回调方式 \u003ccode\u003eproducer.send(msg, callback)\u003c/code\u003e 发送消息。callback（回调）能准确地告诉你消息是否真的提交成功了。一旦出现消息提交失败的情况，你就可以有针对性地进行处理。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果是因为那些瞬时错误，那么仅仅让 Producer 重试就可以了；\u003c/li\u003e\n\u003cli\u003e如果是消息不合格造成的，那么可以调整消息格式后再次发送。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e然后，需要基于以下几点来保证 Kafka 生产者的可靠性：\u003c/p\u003e\n\u003ch4 id=\"ACK\"\u003e\u003ca href=\"#ACK\" class=\"headerlink\" title=\"ACK\"\u003e\u003c/a\u003eACK\u003c/h4\u003e\u003cp\u003e生产者可选的确认模式有三种：\u003ccode\u003eacks=0\u003c/code\u003e、\u003ccode\u003eacks=1\u003c/code\u003e、\u003ccode\u003eacks=all\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eacks=0\u003c/code\u003e、\u003ccode\u003eacks=1\u003c/code\u003e 都有丢失数据的风险。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eacks=all\u003c/code\u003e 意味着会等待所有同步副本都收到消息。再结合 \u003ccode\u003emin.insync.replicas\u003c/code\u003e ，就可以决定在得到确认响应前，至少有多少副本能够收到消息。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这是最保险的做法，但也会降低吞吐量。\u003c/p\u003e\n\u003ch4 id=\"重试\"\u003e\u003ca href=\"#重试\" class=\"headerlink\" title=\"重试\"\u003e\u003c/a\u003e重试\u003c/h4\u003e\u003cp\u003e如果 broker 返回的错误可以通过\u003cstrong\u003e重试\u003c/strong\u003e来解决，生产者会自动处理这些错误。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e可重试错误\u003c/strong\u003e，如：\u003ccode\u003eLEADER_NOT_AVAILABLE\u003c/code\u003e，主副本不可用，可能过一段时间，集群就会选举出新的主副本，重试可以解决问题。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e不可重试错误\u003c/strong\u003e，如：\u003ccode\u003eINVALID_CONFIG\u003c/code\u003e，即使重试，也无法改变配置选项，重试没有意义。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e需要注意的是：有时可能因为网络问题导致没有收到确认，但实际上消息已经写入成功。生产者会认为出现临时故障，重试发送消息，这样就会出现重复记录。所以，尽可能在业务上保证幂等性。\u003c/p\u003e\n\u003cp\u003e设置 \u003ccode\u003eretries\u003c/code\u003e 为一个较大的值。这里的 \u003ccode\u003eretries\u003c/code\u003e 同样是 Producer 的参数，对应前面提到的 Producer 自动重试。当出现网络的瞬时抖动时，消息发送可能会失败，此时配置了 retries \u0026gt; 0 的 Producer 能够自动重试消息发送，避免消息丢失。\u003c/p\u003e\n\u003ch4 id=\"错误处理\"\u003e\u003ca href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"\u003e\u003c/a\u003e错误处理\u003c/h4\u003e\u003cp\u003e开发者需要自行处理的错误：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e不可重试的 broker 错误，如消息大小错误、认证错误等；\u003c/li\u003e\n\u003cli\u003e消息发送前发生的错误，如序列化错误；\u003c/li\u003e\n\u003cli\u003e生产者达到重试次数上限或消息占用的内存达到上限时发生的错误。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"消费阶段\"\u003e\u003ca href=\"#消费阶段\" class=\"headerlink\" title=\"消费阶段\"\u003e\u003c/a\u003e消费阶段\u003c/h3\u003e\u003cp\u003e前文已经提到，\u003cstrong\u003e消费者只能读取已提交的消息\u003c/strong\u003e。这就保证了消费者接收到消息时已经具备了数据一致性。\u003c/p\u003e\n\u003cp\u003e消费者唯一要做的是确保哪些消息是已经读取过的，哪些是没有读取过的（通过提交偏移量给 Broker 来确认）。如果消费者提交了偏移量却未能处理完消息，那么就有可能造成消息丢失，这也是消费者丢失消息的主要原因。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200727140159.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch4 id=\"消费者的可靠性配置\"\u003e\u003ca href=\"#消费者的可靠性配置\" class=\"headerlink\" title=\"消费者的可靠性配置\"\u003e\u003c/a\u003e消费者的可靠性配置\u003c/h4\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egroup.id\u003c/code\u003e - 如果希望消费者可以看到主题的所有消息，那么需要为它们设置唯一的 \u003ccode\u003egroup.id\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eauto.offset.reset\u003c/code\u003e - 有两个选项：\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eearliest\u003c/code\u003e - 消费者会从分区的开始位置读取数据\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elatest\u003c/code\u003e - 消费者会从分区末尾位置读取数据\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eenable.auto.commit\u003c/code\u003e - 消费者自动提交偏移量。如果设为 true，处理流程更简单，但无法保证重复处理消息。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eauto.commit.interval.ms\u003c/code\u003e - 自动提交的频率，默认为每 5 秒提交一次。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"显示提交偏移量\"\u003e\u003ca href=\"#显示提交偏移量\" class=\"headerlink\" title=\"显示提交偏移量\"\u003e\u003c/a\u003e显示提交偏移量\u003c/h4\u003e\u003cblockquote\u003e\n\u003cp\u003e如果 \u003ccode\u003eenable.auto.commit\u003c/code\u003e 设为 true，即自动提交，就无需考虑提交偏移量的问题。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e如果选择显示提交偏移量，需要考虑以下问题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e必须在处理完消息后再发送确认（提交偏移量），不要收到消息立即确认。\u003c/li\u003e\n\u003cli\u003e提交频率是性能和重复消息数之间的权衡\u003c/li\u003e\n\u003cli\u003e分区再均衡\u003c/li\u003e\n\u003cli\u003e消费可能需要重试机制\u003c/li\u003e\n\u003cli\u003e超时处理\u003c/li\u003e\n\u003cli\u003e消费者可能需要维护消费状态，如：处理完消息后，记录在数据库中。\u003c/li\u003e\n\u003cli\u003e幂等性设计\u003cul\u003e\n\u003cli\u003e写数据库：根据主键判断记录是否存在\u003c/li\u003e\n\u003cli\u003e写 Redis：set 操作天然具有幂等性\u003c/li\u003e\n\u003cli\u003e复杂的逻辑处理，则可以在消息中加入全局 ID\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"重复消息\"\u003e\u003ca href=\"#重复消息\" class=\"headerlink\" title=\"重复消息\"\u003e\u003c/a\u003e重复消息\u003c/h2\u003e\u003cp\u003e在 MQTT 协议中，给出了三种传递消息时能够提供的服务质量标准，这三种服务质量从低到高依次是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAt most once\u003c/strong\u003e：至多一次。消息在传递时，最多会被送达一次。换一个说法就是，没什么消息可靠性保证，允许丢消息。一般都是一些对消息可靠性要求不太高的监控场景使用，比如每分钟上报一次机房温度数据，可以接受数据少量丢失。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAt least once\u003c/strong\u003e: 至少一次。消息在传递时，至少会被送达一次。也就是说，不允许丢消息，但是允许有少量重复消息出现。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExactly once\u003c/strong\u003e：恰好一次。消息在传递时，只会被送达一次，不允许丢失也不允许重复，这个是最高的等级。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e绝大部分消息队列提供的服务质量都是 At least once，包括 RocketMQ、RabbitMQ 和 Kafka 都是这样。也就是说，消息队列很难保证消息不重复。\u003c/p\u003e\n\u003cp\u003e一般解决重复消息的办法是，在消费端，\u003cstrong\u003e保证消费消息的操作具备幂等性\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e常用的实现幂等操作的方法：\u003c/p\u003e\n\u003ch3 id=\"利用数据库的唯一约束实现幂等\"\u003e\u003ca href=\"#利用数据库的唯一约束实现幂等\" class=\"headerlink\" title=\"利用数据库的唯一约束实现幂等\"\u003e\u003c/a\u003e利用数据库的唯一约束实现幂等\u003c/h3\u003e\u003cp\u003e关系型数据库可以使用 \u003ccode\u003eINSERT IF NOT EXIST\u003c/code\u003e 语句防止重复；Redis 可以使用 \u003ccode\u003eSETNX\u003c/code\u003e 命令来防止重复；其他数据库只要支持类似语义，也是一个道理。\u003c/p\u003e\n\u003ch3 id=\"为更新的数据设置前置条件\"\u003e\u003ca href=\"#为更新的数据设置前置条件\" class=\"headerlink\" title=\"为更新的数据设置前置条件\"\u003e\u003c/a\u003e为更新的数据设置前置条件\u003c/h3\u003e\u003cp\u003e如果满足条件就更新数据，否则拒绝更新数据，在更新数据的时候，同时变更前置条件中需要判断的数据。这样，重复执行这个操作时，由于第一次更新数据的时候已经变更了前置条件中需要判断的数据，不满足前置条件，则不会重复执行更新数据操作。\u003c/p\u003e\n\u003cp\u003e但是，如果我们要更新的数据不是数值，或者我们要做一个比较复杂的更新操作怎么办？用什么作为前置判断条件呢？更加通用的方法是，给数据增加一个版本号属性，每次更数据前，比较当前数据的版本号是否和消息中的版本号一致，如果不一致就拒绝更新数据，更新数据的同时将版本号 +1，一样可以实现幂等更新。\u003c/p\u003e\n\u003ch3 id=\"记录并检查操作\"\u003e\u003ca href=\"#记录并检查操作\" class=\"headerlink\" title=\"记录并检查操作\"\u003e\u003c/a\u003e记录并检查操作\u003c/h3\u003e\u003cp\u003e还有一种通用性最强，适用范围最广的实现幂等性方法：记录并检查操作，也称为“Token 机制或者 GUID（全局唯一 ID）机制”，实现的思路特别简单：在执行数据更新操作之前，先检查一下是否执行过这个更新操作。\u003c/p\u003e\n\u003cp\u003e具体的实现方法是，在发送消息时，给每条消息指定一个全局唯一的 ID，消费时，先根据这个 ID 检查这条消息是否有被消费过，如果没有消费过，才更新数据，然后将消费状态置为已消费。\u003c/p\u003e\n\u003cp\u003e需要注意的是，“检查消费状态，然后更新数据并且设置消费状态”中，三个操作必须作为一组操作保证原子性，才能真正实现幂等，否则就会出现 Bug。这一组操作可以通过分布式事务或分布式锁来保证其原子性。\u003c/p\u003e\n\u003ch2 id=\"消息的有序性\"\u003e\u003ca href=\"#消息的有序性\" class=\"headerlink\" title=\"消息的有序性\"\u003e\u003c/a\u003e消息的有序性\u003c/h2\u003e\u003cp\u003e某些场景下，可能会要求按序发送消息。\u003c/p\u003e\n\u003ch3 id=\"方案一、单-Partition\"\u003e\u003ca href=\"#方案一、单-Partition\" class=\"headerlink\" title=\"方案一、单 Partition\"\u003e\u003c/a\u003e方案一、单 Partition\u003c/h3\u003e\u003cp\u003eKafka 每一个 Partition 只能隶属于消费者群组中的一个 Consumer，换句话说，每个 Partition 只能被一个 Consumer 消费。所以，如果 Topic 是单 Partition，自然是有序的。\u003c/p\u003e\n\u003cp\u003e方案分析\u003c/p\u003e\n\u003cp\u003e优点：简单粗暴。开发者什么也不用做。\u003c/p\u003e\n\u003cp\u003e缺点：\u003cstrong\u003eKafka 基于 Partition 实现其高并发\u003c/strong\u003e能力，如果使用单 Partition，会严重限制 Kafka 的吞吐量。\u003c/p\u003e\n\u003cp\u003e结论：作为分布式消息引擎，限制并发能力，显然等同于自废武功，所以，这个方案几乎是不可接受的。\u003c/p\u003e\n\u003ch3 id=\"方案二、同一个-key-的消息发送给指定-Partition\"\u003e\u003ca href=\"#方案二、同一个-key-的消息发送给指定-Partition\" class=\"headerlink\" title=\"方案二、同一个 key 的消息发送给指定 Partition\"\u003e\u003c/a\u003e方案二、同一个 key 的消息发送给指定 Partition\u003c/h3\u003e\u003cp\u003e（1）生产者端显示指定 key 发往一个指定的 Partition，就可以保证同一个 key 在这个 Partition 中是有序的。\u003c/p\u003e\n\u003cp\u003e（2）接下来，消费者端为每个 key 设定一个缓存队列，然后让一个独立线程负责消费指定 key 的队列，这就保证了消费消息也是有序的。\u003c/p\u003e\n\u003ch2 id=\"消息积压\"\u003e\u003ca href=\"#消息积压\" class=\"headerlink\" title=\"消息积压\"\u003e\u003c/a\u003e消息积压\u003c/h2\u003e\u003cp\u003e先修复消费者，然后停掉当前所有消费者。\u003c/p\u003e\n\u003cp\u003e新建 Topic，扩大分区，以提高并发处理能力。\u003c/p\u003e\n\u003cp\u003e创建临时消费者程序，并部署在多节点上，扩大消费处理能力。\u003c/p\u003e\n\u003cp\u003e最后处理完积压消息后，恢复原先部署架构。\u003c/p\u003e\n\u003ch2 id=\"验证系统可靠性\"\u003e\u003ca href=\"#验证系统可靠性\" class=\"headerlink\" title=\"验证系统可靠性\"\u003e\u003c/a\u003e验证系统可靠性\u003c/h2\u003e\u003cp\u003e建议从 3 个层面验证系统的可靠性：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e配置验证\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e应用验证\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e客户端和服务器断开连接\u003c/li\u003e\n\u003cli\u003e选举\u003c/li\u003e\n\u003cli\u003e依次重启 broker\u003c/li\u003e\n\u003cli\u003e依次重启生产者\u003c/li\u003e\n\u003cli\u003e依次重启消费者\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e监控可靠性\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e对于生产者来说，最重要的两个指标是消息的 \u003ccode\u003eerror-rate\u003c/code\u003e 和 \u003ccode\u003eretry-rate\u003c/code\u003e。如果这两个指标上升，说明系统出了问题。\u003c/li\u003e\n\u003cli\u003e对于消费者来说，最重要的指标是 \u003ccode\u003econsumer-lag\u003c/code\u003e，该指标表明了消费者的处理速度与最近提交到分区里的偏移量之间还有多少差距。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"最佳实践\"\u003e\u003ca href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"\u003e\u003c/a\u003e最佳实践\u003c/h2\u003e\u003cp\u003e生产者\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e不要使用 \u003ccode\u003eproducer.send(msg)\u003c/code\u003e，而要使用 \u003ccode\u003eproducer.send(msg, callback)\u003c/code\u003e。记住，一定要使用带有回调通知的 \u003ccode\u003esend\u003c/code\u003e 方法。\u003c/li\u003e\n\u003cli\u003e设置 \u003ccode\u003eacks = all\u003c/code\u003e。\u003ccode\u003eacks\u003c/code\u003e 是 Producer 的一个参数，代表了你对“已提交”消息的定义。如果设置成 all，则表明所有副本 Broker 都要接收到消息，该消息才算是“已提交”。这是最高等级的“已提交”定义。\u003c/li\u003e\n\u003cli\u003e设置 \u003ccode\u003eretries\u003c/code\u003e 为一个较大的值。这里的 retries 同样是 Producer 的参数，对应前面提到的 Producer 自动重试。当出现网络的瞬时抖动时，消息发送可能会失败，此时配置了 \u003ccode\u003eretries \u0026gt; 0\u003c/code\u003e 的 Producer 能够自动重试消息发送，避免消息丢失。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e服务器（Kafka Broker）\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e设置 \u003ccode\u003eunclean.leader.election.enable = false。\u003c/code\u003e这是 Broker 端的参数，它控制的是哪些 Broker 有资格竞选分区的 Leader。如果一个 Broker 落后原先的 Leader 太多，那么它一旦成为新的 Leader，必然会造成消息的丢失。故一般都要将该参数设置成 false，即不允许这种情况的发生。\u003c/li\u003e\n\u003cli\u003e设置 \u003ccode\u003ereplication.factor\u003c/code\u003e \u0026gt;= 3。这也是 Broker 端的参数。其实这里想表述的是，最好将消息多保存几份，毕竟目前防止消息丢失的主要机制就是冗余。\u003c/li\u003e\n\u003cli\u003e设置 \u003ccode\u003emin.insync.replicas\u003c/code\u003e \u0026gt; 1。这依然是 Broker 端参数，控制的是消息至少要被写入到多少个副本才算是“已提交”。设置成大于 1 可以提升消息持久性。在实际环境中千万不要使用默认值 1。\u003c/li\u003e\n\u003cli\u003e确保 \u003ccode\u003ereplication.factor\u003c/code\u003e \u0026gt; \u003ccode\u003emin.insync.replicas\u003c/code\u003e。如果两者相等，那么只要有一个副本挂机，整个分区就无法正常工作了。我们不仅要改善消息的持久性，防止数据丢失，还要在不降低可用性的基础上完成。推荐设置成 \u003ccode\u003ereplication.factor = min.insync.replicas + 1\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e消费者\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e确保消息消费完成再提交。Consumer 端有个参数 \u003ccode\u003eenable.auto.commit\u003c/code\u003e，最好把它设置成 false，并采用手动提交位移的方式。就像前面说的，这对于单 Consumer 多线程处理的场景而言是至关重要的。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e官方\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://kafka.apache.org/\"\u003eKafka 官网\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/apache/kafka\"\u003eKafka Github\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kafka.apache.org/documentation/\"\u003eKafka 官方文档\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e书籍\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://item.jd.com/12270295.html\"\u003e《Kafka 权威指南》\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e教程\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100032301\"\u003e消息队列高手课\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/apachecn/kafka-doc-zh\"\u003eKafka 中文文档\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100029201\"\u003eKafka 核心技术与实战\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-04-14T07:05:34Z",
  "Author": "钝悟 ◾ Dunwu"
}