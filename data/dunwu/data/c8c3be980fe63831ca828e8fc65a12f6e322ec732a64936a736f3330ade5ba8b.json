{
  "Source": "dunwu",
  "Title": "Flink API",
  "Link": "https://dunwu.github.io/blog/pages/e7c9a9/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Flink-API\"\u003e\u003ca href=\"#Flink-API\" class=\"headerlink\" title=\"Flink API\"\u003e\u003c/a\u003eFlink API\u003c/h1\u003e\u003ch2 id=\"Flink-API-的分层\"\u003e\u003ca href=\"#Flink-API-的分层\" class=\"headerlink\" title=\"Flink API 的分层\"\u003e\u003c/a\u003eFlink API 的分层\u003c/h2\u003e\u003cp\u003eFlink 为流式/批式处理应用程序的开发提供了不同级别的抽象。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://nightlies.apache.org/flink/flink-docs-release-1.14/fig/levels_of_abstraction.svg\" alt=\"Programming levels of abstraction\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eFlink API 最底层的抽象为\u003cstrong\u003e有状态实时流处理\u003c/strong\u003e。其抽象实现是 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://nightlies.apache.org/flink/flink-docs-release-1.14/zh/docs/dev/datastream/operators/process_function/\"\u003eProcess Function\u003c/a\u003e，并且 \u003cstrong\u003eProcess Function\u003c/strong\u003e 被 Flink 框架集成到了 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://nightlies.apache.org/flink/flink-docs-release-1.14/zh/docs/dev/datastream/overview/\"\u003eDataStream API\u003c/a\u003e 中来为我们使用。它允许用户在应用程序中自由地处理来自单流或多流的事件（数据），并提供具有全局一致性和容错保障的\u003cem\u003e状态\u003c/em\u003e。此外，用户可以在此层抽象中注册事件时间（event time）和处理时间（processing time）回调方法，从而允许程序可以实现复杂计算。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eFlink API 第二层抽象是 \u003cstrong\u003eCore APIs\u003c/strong\u003e。实际上，许多应用程序不需要使用到上述最底层抽象的 API，而是可以使用 \u003cstrong\u003eCore APIs\u003c/strong\u003e 进行编程：其中包含 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://nightlies.apache.org/flink/flink-docs-release-1.14/zh/docs/dev/datastream/overview/\"\u003eDataStream API\u003c/a\u003e（应用于有界/无界数据流场景）和 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://nightlies.apache.org/flink/flink-docs-release-1.14/zh/docs/dev/dataset/overview/\"\u003eDataSet API\u003c/a\u003e（应用于有界数据集场景）两部分。Core APIs 提供的流式 API（Fluent API）为数据处理提供了通用的模块组件，例如各种形式的用户自定义转换（transformations）、联接（joins）、聚合（aggregations）、窗口（windows）和状态（state）操作等。此层 API 中处理的数据类型在每种编程语言中都有其对应的类。\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eProcess Function\u003c/em\u003e 这类底层抽象和 \u003cem\u003eDataStream API\u003c/em\u003e 的相互集成使得用户可以选择使用更底层的抽象 API 来实现自己的需求。\u003cem\u003eDataSet API\u003c/em\u003e 还额外提供了一些原语，比如循环/迭代（loop/iteration）操作。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eFlink API 第三层抽象是 \u003cstrong\u003eTable API\u003c/strong\u003e。\u003cstrong\u003eTable API\u003c/strong\u003e 是以表（Table）为中心的声明式编程（DSL）API，例如在流式数据场景下，它可以表示一张正在动态改变的表。\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://nightlies.apache.org/flink/flink-docs-release-1.14/zh/docs/dev/table/overview/\"\u003eTable API\u003c/a\u003e 遵循（扩展）关系模型：即表拥有 schema（类似于关系型数据库中的 schema），并且 Table API 也提供了类似于关系模型中的操作，比如 select、project、join、group-by 和 aggregate 等。Table API 程序是以声明的方式定义\u003cem\u003e应执行的逻辑操作\u003c/em\u003e，而不是确切地指定程序\u003cem\u003e应该执行的代码\u003c/em\u003e。尽管 Table API 使用起来很简洁并且可以由各种类型的用户自定义函数扩展功能，但还是比 Core API 的表达能力差。此外，Table API 程序在执行之前还会使用优化器中的优化规则对用户编写的表达式进行优化。\u003c/p\u003e\n\u003cp\u003e表和 \u003cem\u003eDataStream\u003c/em\u003e/\u003cem\u003eDataSet\u003c/em\u003e 可以进行无缝切换，Flink 允许用户在编写应用程序时将 \u003cem\u003eTable API\u003c/em\u003e 与 \u003cem\u003eDataStream\u003c/em\u003e/\u003cem\u003eDataSet\u003c/em\u003e API 混合使用。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eFlink API 最顶层抽象是 \u003cstrong\u003eSQL\u003c/strong\u003e。这层抽象在语义和程序表达式上都类似于 _Table API_，但是其程序实现都是 SQL 查询表达式。\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://nightlies.apache.org/flink/flink-docs-release-1.14/zh/docs/dev/table/overview/#sql\"\u003eSQL\u003c/a\u003e 抽象与 Table API 抽象之间的关联是非常紧密的，并且 SQL 查询语句可以在 \u003cem\u003eTable API\u003c/em\u003e 中定义的表上执行。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ProcessFunction\"\u003e\u003ca href=\"#ProcessFunction\" class=\"headerlink\" title=\"ProcessFunction\"\u003e\u003c/a\u003eProcessFunction\u003c/h2\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://nightlies.apache.org/flink/flink-docs-stable/dev/stream/operators/process_function.html\"\u003eProcessFunction\u003c/a\u003e 是 Flink 所提供的最具表达力的接口。ProcessFunction 可以处理一或两条输入数据流中的单个事件或者归入一个特定窗口内的多个事件。它提供了\u003cstrong\u003e对于时间和状态的细粒度控制\u003c/strong\u003e。开发者可以在其中任意地修改状态，也能够注册定时器用以在未来的某一时刻触发回调函数。因此，你可以利用 ProcessFunction 实现许多\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://flink.apache.org/zh/usecases.html#eventDrivenApps\"\u003e有状态的事件驱动应用\u003c/a\u003e所需要的基于单个事件的复杂业务逻辑。\u003c/p\u003e\n\u003cp\u003e下面的代码示例展示了如何在 \u003ccode\u003eKeyedStream\u003c/code\u003e 上利用 \u003ccode\u003eKeyedProcessFunction\u003c/code\u003e 对标记为 \u003ccode\u003eSTART\u003c/code\u003e 和 \u003ccode\u003eEND\u003c/code\u003e 的事件进行处理。当收到 \u003ccode\u003eSTART\u003c/code\u003e 事件时，处理函数会记录其时间戳，并且注册一个时长 4 小时的计时器。如果在计时器结束之前收到 \u003ccode\u003eEND\u003c/code\u003e 事件，处理函数会计算其与上一个 \u003ccode\u003eSTART\u003c/code\u003e 事件的时间间隔，清空状态并将计算结果返回。否则，计时器结束，并清空状态。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 将相邻的 keyed START 和 END 事件相匹配并计算两者的时间间隔\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 输入数据为 Tuple2\u0026lt;String, String\u0026gt; 类型，第一个字段为 key 值，\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * 第二个字段标记 START 和 END 事件。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e    */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eStartEndDuration\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eKeyedProcessFunction\u003c/span\u003e\u0026lt;String, Tuple2\u0026lt;String, String\u0026gt;, Tuple2\u0026lt;String, Long\u0026gt;\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e ValueState\u0026lt;Long\u0026gt; startTime;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eopen\u003c/span\u003e\u003cspan class=\"params\"\u003e(Configuration conf)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// obtain state handle\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    startTime = getRuntimeContext()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      .getState(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eValueStateDescriptor\u003c/span\u003e\u0026lt;Long\u0026gt;(\u003cspan class=\"string\"\u003e\u0026#34;startTime\u0026#34;\u003c/span\u003e, Long.class));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e/** Called for each processed event. */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eprocessElement\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e      Tuple2\u0026lt;String, String\u0026gt; in,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e      Context ctx,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e      Collector\u0026lt;Tuple2\u0026lt;String, Long\u0026gt;\u0026gt; out)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e Exception {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eswitch\u003c/span\u003e (in.f1) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;START\u0026#34;\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// set the start time if we receive a start event.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        startTime.update(ctx.timestamp());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// register a timer in four hours from the start event.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ctx.timerService()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          .registerEventTimeTimer(ctx.timestamp() + \u003cspan class=\"number\"\u003e4\u003c/span\u003e * \u003cspan class=\"number\"\u003e60\u003c/span\u003e * \u003cspan class=\"number\"\u003e60\u003c/span\u003e * \u003cspan class=\"number\"\u003e1000\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ebreak\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;END\u0026#34;\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// emit the duration between start and end event\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eLong\u003c/span\u003e \u003cspan class=\"variable\"\u003esTime\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e startTime.value();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (sTime != \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          out.collect(Tuple2.of(in.f0, ctx.timestamp() - sTime));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          \u003cspan class=\"comment\"\u003e// clear the state\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          startTime.clear();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003edefault\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// do nothing\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e/** Called when a timer fires. */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eonTimer\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e      \u003cspan class=\"type\"\u003elong\u003c/span\u003e timestamp,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e      OnTimerContext ctx,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e      Collector\u0026lt;Tuple2\u0026lt;String, Long\u0026gt;\u0026gt; out)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// Timeout interval exceeded. Cleaning up the state.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    startTime.clear();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这个例子充分展现了 \u003ccode\u003eKeyedProcessFunction\u003c/code\u003e 强大的表达力，也因此是一个实现相当复杂的接口。\u003c/p\u003e\n\u003ch2 id=\"DataStream-API\"\u003e\u003ca href=\"#DataStream-API\" class=\"headerlink\" title=\"DataStream API\"\u003e\u003c/a\u003eDataStream API\u003c/h2\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://nightlies.apache.org/flink/flink-docs-stable/dev/datastream_api.html\"\u003eDataStream API\u003c/a\u003e 为许多通用的流处理操作提供了处理原语。这些操作包括窗口、逐条记录的转换操作，在处理事件时进行外部数据库查询等。DataStream API 支持 Java 和 Scala 语言，预先定义了例如\u003ccode\u003emap()\u003c/code\u003e、\u003ccode\u003ereduce()\u003c/code\u003e、\u003ccode\u003eaggregate()\u003c/code\u003e 等函数。你可以通过扩展实现预定义接口或使用 Java、Scala 的 lambda 表达式实现自定义的函数。\u003c/p\u003e\n\u003cp\u003e下面的代码示例展示了如何捕获会话时间范围内所有的点击流事件，并对每一次会话的点击量进行计数。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 网站点击 Click 的数据流\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eDataStream\u0026lt;Click\u0026gt; clicks = ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eDataStream\u0026lt;Tuple2\u0026lt;String, Long\u0026gt;\u0026gt; result = clicks\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 将网站点击映射为 (userId, 1) 以便计数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  .map(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 实现 MapFunction 接口定义函数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMapFunction\u003c/span\u003e\u0026lt;Click, Tuple2\u0026lt;String, Long\u0026gt;\u0026gt;() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e Tuple2\u0026lt;String, Long\u0026gt; \u003cspan class=\"title function_\"\u003emap\u003c/span\u003e\u003cspan class=\"params\"\u003e(Click click)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e Tuple2.of(click.userId, \u003cspan class=\"number\"\u003e1L\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    })\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 以 userId (field 0) 作为 key\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  .keyBy(\u003cspan class=\"number\"\u003e0\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 定义 30 分钟超时的会话窗口\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  .window(EventTimeSessionWindows.withGap(Time.minutes(\u003cspan class=\"number\"\u003e30L\u003c/span\u003e)))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 对每个会话窗口的点击进行计数，使用 lambda 表达式定义 reduce 函数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  .reduce((a, b) -\u0026gt; Tuple2.of(a.f0, a.f1 + b.f1));\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"SQL-Table-API\"\u003e\u003ca href=\"#SQL-Table-API\" class=\"headerlink\" title=\"SQL \u0026amp; Table API\"\u003e\u003c/a\u003eSQL \u0026amp; Table API\u003c/h2\u003e\u003cp\u003eFlink 支持两种关系型的 API，\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://nightlies.apache.org/flink/flink-docs-stable/dev/table/index.html\"\u003eTable API 和 SQL\u003c/a\u003e。这两个 API 都是批处理和流处理统一的 API，这意味着在无边界的实时数据流和有边界的历史记录数据流上，关系型 API 会以相同的语义执行查询，并产生相同的结果。Table API 和 SQL 借助了 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://calcite.apache.org/\"\u003eApache Calcite\u003c/a\u003e 来进行查询的解析，校验以及优化。它们可以与 DataStream 和 DataSet API 无缝集成，并支持用户自定义的标量函数，聚合函数以及表值函数。\u003c/p\u003e\n\u003cp\u003eFlink 的关系型 API 旨在简化\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://flink.apache.org/zh/usecases.html#analytics\"\u003e数据分析\u003c/a\u003e、\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://flink.apache.org/zh/usecases.html#pipelines\"\u003e数据流水线和 ETL 应用\u003c/a\u003e的定义。\u003c/p\u003e\n\u003cp\u003e下面的代码示例展示了如何使用 SQL 语句查询捕获会话时间范围内所有的点击流事件，并对每一次会话的点击量进行计数。此示例与上述 DataStream API 中的示例有着相同的逻辑。\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e userId, \u003cspan class=\"built_in\"\u003eCOUNT\u003c/span\u003e(\u003cspan class=\"operator\"\u003e*\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e clicks\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eGROUP\u003c/span\u003e \u003cspan class=\"keyword\"\u003eBY\u003c/span\u003e SESSION(clicktime, \u003cspan class=\"type\"\u003eINTERVAL\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#39;30\u0026#39;\u003c/span\u003e \u003cspan class=\"keyword\"\u003eMINUTE\u003c/span\u003e), userId\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"Flink-库\"\u003e\u003ca href=\"#Flink-库\" class=\"headerlink\" title=\"Flink 库\"\u003e\u003c/a\u003eFlink 库\u003c/h2\u003e\u003cp\u003eFlink 具有数个适用于常见数据处理应用场景的扩展库。这些库通常嵌入在 API 中，且并不完全独立于其它 API。它们也因此可以受益于 API 的所有特性，并与其他库集成。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e**\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://nightlies.apache.org/flink/flink-docs-stable/dev/libs/cep.html\"\u003e复杂事件处理(CEP)\u003c/a\u003e**：模式检测是事件流处理中的一个非常常见的用例。Flink 的 CEP 库提供了 API，使用户能够以例如正则表达式或状态机的方式指定事件模式。CEP 库与 Flink 的 DataStream API 集成，以便在 DataStream 上评估模式。CEP 库的应用包括网络入侵检测，业务流程监控和欺诈检测。\u003c/li\u003e\n\u003cli\u003e**\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://nightlies.apache.org/flink/flink-docs-stable/dev/batch/index.html\"\u003eDataSet API\u003c/a\u003e*\u003cem\u003e：DataSet API 是 Flink 用于批处理应用程序的核心 API。DataSet API 所提供的基础算子包括\u003c/em\u003emap\u003cem\u003e、\u003cem\u003ereduce_、\u003c/em\u003e(outer) join_、_co-group_、\u003c/em\u003eiterate*等。所有算子都有相应的算法和数据结构支持，对内存中的序列化数据进行操作。如果数据大小超过预留内存，则过量数据将存储到磁盘。Flink 的 DataSet API 的数据处理算法借鉴了传统数据库算法的实现，例如混合散列连接（hybrid hash-join）和外部归并排序（external merge-sort）。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://nightlies.apache.org/flink/flink-docs-stable/dev/libs/gelly/index.html\"\u003eGelly\u003c/a\u003e\u003c/strong\u003e: Gelly 是一个可扩展的图形处理和分析库。Gelly 是在 DataSet API 之上实现的，并与 DataSet API 集成。因此，它能够受益于其可扩展且健壮的操作符。Gelly 提供了\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://nightlies.apache.org/flink/flink-docs-stable/dev/libs/gelly/library_methods.html\"\u003e内置算法\u003c/a\u003e，如 label propagation、triangle enumeration 和 page rank 算法，也提供了一个简化自定义图算法实现的 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://nightlies.apache.org/flink/flink-docs-stable/dev/libs/gelly/graph_api.html\"\u003eGraph API\u003c/a\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://nightlies.apache.org/flink/flink-docs-release-1.14/zh/\"\u003eFlink 官方文档\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-02-17T14:28:55Z",
  "Author": "钝悟 ◾ Dunwu"
}