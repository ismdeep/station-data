{
  "Source": "dunwu",
  "Title": "Netty 快速入门",
  "Link": "https://dunwu.github.io/blog/pages/10bd70/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Netty-快速入门\"\u003e\u003ca href=\"#Netty-快速入门\" class=\"headerlink\" title=\"Netty 快速入门\"\u003e\u003c/a\u003eNetty 快速入门\u003c/h1\u003e\u003ch2 id=\"Netty-简介\"\u003e\u003ca href=\"#Netty-简介\" class=\"headerlink\" title=\"Netty 简介\"\u003e\u003c/a\u003eNetty 简介\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNetty 是一款基于 NIO（Nonblocking I/O，非阻塞 IO）开发的网络通信框架\u003c/strong\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"Netty-的特性\"\u003e\u003ca href=\"#Netty-的特性\" class=\"headerlink\" title=\"Netty 的特性\"\u003e\u003c/a\u003eNetty 的特性\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e高并发\u003c/strong\u003e：Netty 是一款\u003cstrong\u003e基于 NIO\u003c/strong\u003e（Nonblocking IO，非阻塞 IO）开发的网络通信框架，对比于 BIO（Blocking I/O，阻塞 IO），他的并发性能得到了很大提高。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e传输快\u003c/strong\u003e：Netty 的传输依赖于\u003cstrong\u003e内存零拷贝\u003c/strong\u003e特性，尽量减少不必要的内存拷贝，实现了更高效率的传输。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e封装好\u003c/strong\u003e：Netty \u003cstrong\u003e封装了 NIO 操作\u003c/strong\u003e的很多细节，提供了易于使用调用接口。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"核心组件\"\u003e\u003ca href=\"#核心组件\" class=\"headerlink\" title=\"核心组件\"\u003e\u003c/a\u003e核心组件\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eChannel\u003c/code\u003e：Netty 网络操作抽象类，它除了包括基本的 I/O 操作，如 bind、connect、read、write 等。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEventLoop\u003c/code\u003e：主要是配合 Channel 处理 I/O 操作，用来处理连接的生命周期中所发生的事情。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eChannelFuture\u003c/code\u003e：Netty 框架中所有的 I/O 操作都为异步的，因此我们需要 ChannelFuture 的 addListener()注册一个 ChannelFutureListener 监听事件，当操作执行成功或者失败时，监听就会自动触发返回结果。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eChannelHandler\u003c/code\u003e：充当了所有处理入站和出站数据的逻辑容器。ChannelHandler 主要用来处理各种事件，这里的事件很广泛，比如可以是连接、数据接收、异常、数据转换等。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eChannelPipeline\u003c/code\u003e：为 ChannelHandler 链提供了容器，当 channel 创建时，就会被自动分配到它专属的 ChannelPipeline，这个关联是永久性的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNetty 有两种发送消息的方式：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e直接写入 Channel 中，消息从 ChannelPipeline 当中尾部开始移动；\u003c/li\u003e\n\u003cli\u003e写入和 ChannelHandler 绑定的 ChannelHandlerContext 中，消息从 ChannelPipeline 中的下一个 ChannelHandler 中移动。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"高性能\"\u003e\u003ca href=\"#高性能\" class=\"headerlink\" title=\"高性能\"\u003e\u003c/a\u003e高性能\u003c/h2\u003e\u003cp\u003eNetty 高性能表现在哪些方面：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eNIO 线程模型\u003c/strong\u003e：同步非阻塞，用最少的资源做更多的事。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e内存零拷贝\u003c/strong\u003e：尽量减少不必要的内存拷贝，实现了更高效率的传输。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e内存池设计\u003c/strong\u003e：申请的内存可以重用，主要指直接内存。内部实现是用一颗二叉查找树管理内存分配情况。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e串形化处理读写\u003c/strong\u003e：避免使用锁带来的性能开销。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e高性能序列化协议\u003c/strong\u003e：支持 protobuf 等高性能序列化协议。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"零拷贝\"\u003e\u003ca href=\"#零拷贝\" class=\"headerlink\" title=\"零拷贝\"\u003e\u003c/a\u003e零拷贝\u003c/h2\u003e\u003ch3 id=\"传统意义的拷贝\"\u003e\u003ca href=\"#传统意义的拷贝\" class=\"headerlink\" title=\"传统意义的拷贝\"\u003e\u003c/a\u003e传统意义的拷贝\u003c/h3\u003e\u003cp\u003e是在发送数据的时候，传统的实现方式是：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eFile.read(bytes)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eSocket.send(bytes)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e这种方式需要四次数据拷贝和四次上下文切换：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cp\u003e数据从磁盘读取到内核的 read buffer\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e数据从内核缓冲区拷贝到用户缓冲区\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e数据从用户缓冲区拷贝到内核的 socket buffer\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e数据从内核的 socket buffer 拷贝到网卡接口（硬件）的缓冲区\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"零拷贝的概念\"\u003e\u003ca href=\"#零拷贝的概念\" class=\"headerlink\" title=\"零拷贝的概念\"\u003e\u003c/a\u003e零拷贝的概念\u003c/h3\u003e\u003cp\u003e明显上面的第二步和第三步是非必要的，通过 java 的 FileChannel.transferTo 方法，可以避免上面两次多余的拷贝（当然这需要底层操作系统支持）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e调用 transferTo，数据从文件由 DMA 引擎拷贝到内核 read buffer\u003c/li\u003e\n\u003cli\u003e接着 DMA 从内核 read buffer 将数据拷贝到网卡接口 buffer\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e上面的两次操作都不需要 CPU 参与，所以就达到了零拷贝。\u003c/p\u003e\n\u003ch3 id=\"Netty-中的零拷贝\"\u003e\u003ca href=\"#Netty-中的零拷贝\" class=\"headerlink\" title=\"Netty 中的零拷贝\"\u003e\u003c/a\u003eNetty 中的零拷贝\u003c/h3\u003e\u003cp\u003e主要体现在三个方面：\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ebytebuffer\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eNetty 发送和接收消息主要使用 bytebuffer，bytebuffer 使用对外内存（DirectMemory）直接进行 Socket 读写。\u003c/p\u003e\n\u003cp\u003e原因：如果使用传统的堆内存进行 Socket 读写，JVM 会将堆内存 buffer 拷贝一份到直接内存中然后再写入 socket，多了一次缓冲区的内存拷贝。DirectMemory 中可以直接通过 DMA 发送到网卡接口\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eComposite Buffers\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e传统的 ByteBuffer，如果需要将两个 ByteBuffer 中的数据组合到一起，我们需要首先创建一个 size=size1+size2 大小的新的数组，然后将两个数组中的数据拷贝到新的数组中。但是使用 Netty 提供的组合 ByteBuf，就可以避免这样的操作，因为 CompositeByteBuf 并没有真正将多个 Buffer 组合起来，而是保存了它们的引用，从而避免了数据的拷贝，实现了零拷贝。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e对于 FileChannel.transferTo 的使用\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eNetty 中使用了 FileChannel 的 transferTo 方法，该方法依赖于操作系统实现零拷贝。\u003c/p\u003e\n\u003ch2 id=\"Netty-流程\"\u003e\u003ca href=\"#Netty-流程\" class=\"headerlink\" title=\"Netty 流程\"\u003e\u003c/a\u003eNetty 流程\u003c/h2\u003e\u003ch2 id=\"应用\"\u003e\u003ca href=\"#应用\" class=\"headerlink\" title=\"应用\"\u003e\u003c/a\u003e应用\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003eNetty 是一个广泛使用的 Java 网络编程框架。很多著名软件都使用了它，如：Dubbo、Cassandra、Elasticsearch、Vert.x 等。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e有了 Netty，你可以实现自己的 HTTP 服务器，FTP 服务器，UDP 服务器，RPC 服务器，WebSocket 服务器，Redis 的 Proxy 服务器，MySQL 的 Proxy 服务器等等。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eNettyOioServer\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eserver\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e port)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e Exception {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eByteBuf\u003c/span\u003e \u003cspan class=\"variable\"\u003ebuf\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Unpooled.unreleasableBuffer(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                Unpooled.copiedBuffer(\u003cspan class=\"string\"\u003e\u0026#34;Hi!\\r\\n\u0026#34;\u003c/span\u003e, Charset.forName(\u003cspan class=\"string\"\u003e\u0026#34;UTF-8\u0026#34;\u003c/span\u003e)));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eEventLoopGroup\u003c/span\u003e \u003cspan class=\"variable\"\u003egroup\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eOioEventLoopGroup\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eServerBootstrap\u003c/span\u003e \u003cspan class=\"variable\"\u003eb\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eServerBootstrap\u003c/span\u003e();        \u003cspan class=\"comment\"\u003e//1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            b.group(group)                                    \u003cspan class=\"comment\"\u003e//2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e             .channel(OioServerSocketChannel.class)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e             .localAddress(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eInetSocketAddress\u003c/span\u003e(port))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e             .childHandler(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eChannelInitializer\u003c/span\u003e\u0026lt;SocketChannel\u0026gt;() {\u003cspan class=\"comment\"\u003e//3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                 \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                 \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003einitChannel\u003c/span\u003e\u003cspan class=\"params\"\u003e(SocketChannel ch)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                     \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e Exception {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                     ch.pipeline().addLast(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eChannelInboundHandlerAdapter\u003c/span\u003e() {            \u003cspan class=\"comment\"\u003e//4\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                         \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                         \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003echannelActive\u003c/span\u003e\u003cspan class=\"params\"\u003e(ChannelHandlerContext ctx)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e Exception {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                             ctx.writeAndFlush(buf.duplicate()).addListener(ChannelFutureListener.CLOSE);\u003cspan class=\"comment\"\u003e//5\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                         }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                     });\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                 }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e             });\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eChannelFuture\u003c/span\u003e \u003cspan class=\"variable\"\u003ef\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e b.bind().sync();  \u003cspan class=\"comment\"\u003e//6\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            f.channel().closeFuture().sync();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003efinally\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            group.shutdownGracefully().sync();        \u003cspan class=\"comment\"\u003e//7\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e官方\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://netty.io/\"\u003eNetty 官网\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/netty/netty\"\u003eNetty Github\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e文章\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.jianshu.com/p/b9f3f6a16911\"\u003eNetty 入门教程——认识 Netty\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://juejin.im/post/5bdaf8ea6fb9a0227b02275a\"\u003e彻底理解 Netty，这一篇文章就够了\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://juejin.im/post/5c81b08f5188257a323f4cef\"\u003eJava 200+ 面试题补充 ② Netty 模块\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-02-17T14:34:30Z",
  "Author": "钝悟 ◾ Dunwu"
}