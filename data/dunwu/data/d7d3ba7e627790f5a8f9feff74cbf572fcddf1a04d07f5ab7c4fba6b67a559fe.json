{
  "Source": "dunwu",
  "Title": "海量数据处理",
  "Link": "https://dunwu.github.io/blog/pages/d63886/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"海量数据处理\"\u003e\u003ca href=\"#海量数据处理\" class=\"headerlink\" title=\"海量数据处理\"\u003e\u003c/a\u003e海量数据处理\u003c/h1\u003e\u003ch2 id=\"如何从海量的-URL-中找出相同的-URL？\"\u003e\u003ca href=\"#如何从海量的-URL-中找出相同的-URL？\" class=\"headerlink\" title=\"如何从海量的 URL 中找出相同的 URL？\"\u003e\u003c/a\u003e如何从海量的 URL 中找出相同的 URL？\u003c/h2\u003e\u003ch3 id=\"问题描述\"\u003e\u003ca href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"\u003e\u003c/a\u003e问题描述\u003c/h3\u003e\u003cp\u003e给定 a、b 两个文件，各存放 50 亿个 URL，每个 URL 各占 64B，内存限制是 4G。请找出 a、b 两个文件共同的 URL。\u003c/p\u003e\n\u003ch3 id=\"解决思路\"\u003e\u003ca href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"\u003e\u003c/a\u003e解决思路\u003c/h3\u003e\u003cp\u003e每个 URL 占 64B，那么 50 亿个 URL 占用的空间大小约为 320GB。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e$$5,000,000,000 * 64 B ≈ 5 GB * 64 = 320 GB$$\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e由于内存大小只有 4G，因此，我们不可能一次性把所有 URL 加载到内存中处理。对于这种类型的题目，一般采用\u003cstrong\u003e分治策略\u003c/strong\u003e，即：把一个文件中的 URL 按照某个特征划分为多个小文件，使得每个小文件大小不超过 4G，这样就可以把这个小文件读到内存中进行处理了。\u003c/p\u003e\n\u003cp\u003e思路如下：\u003c/p\u003e\n\u003cp\u003e首先遍历文件 a，对遍历到的 URL 求 \u003ccode\u003ehash(URL) % 1000\u003c/code\u003e，根据计算结果把遍历到的 URL 存储到 a0, a1, a2, …, a999，这样每个大小约为 300MB。使用同样的方法遍历文件 b，把文件 b 中的 URL 分别存储到文件 b0, b1, b2, …, b999 中。这样处理过后，所有可能相同的 URL 都在对应的小文件中，即 a0 对应 b0, …, a999 对应 b999，不对应的小文件不可能有相同的 URL。那么接下来，我们只需要求出这 1000 对小文件中相同的 URL 就好了。\u003c/p\u003e\n\u003cp\u003e接着遍历 ai( \u003ccode\u003ei∈[0,999]\u003c/code\u003e)，把 URL 存储到一个 HashSet 集合中。然后遍历 bi 中每个 URL，看在 HashSet 集合中是否存在，若存在，说明这就是共同的 URL，可以把这个 URL 保存到一个单独的文件中。\u003c/p\u003e\n\u003ch3 id=\"方案总结\"\u003e\u003ca href=\"#方案总结\" class=\"headerlink\" title=\"方案总结\"\u003e\u003c/a\u003e方案总结\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e分而治之，进行哈希取余；\u003c/li\u003e\n\u003cli\u003e对每个子文件进行 HashSet 统计。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"如何从海量数据中找出高频词？\"\u003e\u003ca href=\"#如何从海量数据中找出高频词？\" class=\"headerlink\" title=\"如何从海量数据中找出高频词？\"\u003e\u003c/a\u003e如何从海量数据中找出高频词？\u003c/h2\u003e\u003ch3 id=\"问题描述-1\"\u003e\u003ca href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"\u003e\u003c/a\u003e问题描述\u003c/h3\u003e\u003cp\u003e有一个 1GB 大小的文件，文件里每一行是一个词，每个词的大小不超过 16B，内存大小限制是 1MB，要求返回频数最高的 100 个词(Top 100)。\u003c/p\u003e\n\u003ch3 id=\"解决思路-1\"\u003e\u003ca href=\"#解决思路-1\" class=\"headerlink\" title=\"解决思路\"\u003e\u003c/a\u003e解决思路\u003c/h3\u003e\u003cp\u003e由于内存限制，无法直接将大文件的所有词一次读到内存中。因此，可以采用\u003cstrong\u003e分治策略\u003c/strong\u003e，把一个大文件分解成多个小文件，保证每个文件的大小小于 1MB，进而直接将单个小文件读取到内存中进行处理。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e思路如下\u003c/strong\u003e：\u003c/p\u003e\n\u003cp\u003e首先遍历大文件，对遍历到的每个词 x，执行 \u003ccode\u003ehash(x) % 5000\u003c/code\u003e，将结果为 i 的词存放到文件 Ai 中。遍历结束后，我们可以得到 5000 个小文件。每个小文件的大小为 200KB 左右。如果有的小文件大小仍然超过 1MB，则采用同样的方式继续进行分解。\u003c/p\u003e\n\u003cp\u003e接着统计每个小文件中出现频数最高的 100 个词。最简单的方式是使用 \u003ccode\u003eHashMap\u003c/code\u003e 来实现。其中 key 为词，value 为该词出现的频率。具体方法是：对于遍历到的词 x，如果在 map 中不存在，则执行 \u003ccode\u003emap.put(x, 1)\u003c/code\u003e 若存在，则执行 \u003ccode\u003emap.put(x, map.get(x)+1)\u003c/code\u003e，将该词频数加 1。\u003c/p\u003e\n\u003cp\u003e上面我们统计了每个小文件单词出现的频数。接下来，我们可以通过维护一个\u003cstrong\u003e小顶堆\u003c/strong\u003e来找出所有词中出现频数最高的 100 个。具体方法是：依次遍历每个小文件，构建一个\u003cstrong\u003e小顶堆\u003c/strong\u003e，堆大小为 100。如果遍历到的词的出现次数大于堆顶词的出现次数，则用新词替换堆顶的词，然后重新调整为\u003cstrong\u003e小顶堆\u003c/strong\u003e，遍历结束后，小顶堆上的词就是出现频数最高的 100 个词。\u003c/p\u003e\n\u003ch3 id=\"方案总结-1\"\u003e\u003ca href=\"#方案总结-1\" class=\"headerlink\" title=\"方案总结\"\u003e\u003c/a\u003e方案总结\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e分而治之，进行哈希取余；\u003c/li\u003e\n\u003cli\u003e使用 \u003ccode\u003eHashMap\u003c/code\u003e 统计频数；\u003c/li\u003e\n\u003cli\u003e求解\u003cstrong\u003e最大\u003c/strong\u003e的 TopN 个，用\u003cstrong\u003e小顶堆\u003c/strong\u003e；求解\u003cstrong\u003e最小\u003c/strong\u003e的 TopN 个，用\u003cstrong\u003e大顶堆\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"如何找出某一天访问百度网站最多的-IP？\"\u003e\u003ca href=\"#如何找出某一天访问百度网站最多的-IP？\" class=\"headerlink\" title=\"如何找出某一天访问百度网站最多的 IP？\"\u003e\u003c/a\u003e如何找出某一天访问百度网站最多的 IP？\u003c/h2\u003e\u003ch3 id=\"问题描述-2\"\u003e\u003ca href=\"#问题描述-2\" class=\"headerlink\" title=\"问题描述\"\u003e\u003c/a\u003e问题描述\u003c/h3\u003e\u003cp\u003e现有海量日志数据保存在一个超大文件中，该文件无法直接读入内存，要求从中提取某天访问百度次数最多的那个 IP。\u003c/p\u003e\n\u003ch3 id=\"解决思路-2\"\u003e\u003ca href=\"#解决思路-2\" class=\"headerlink\" title=\"解决思路\"\u003e\u003c/a\u003e解决思路\u003c/h3\u003e\u003cp\u003e这道题只关心某一天访问百度最多的 IP，因此，可以首先对文件进行一次遍历，把这一天访问百度 IP 的相关信息记录到一个单独的大文件中。接下来采用的方法与上一题一样，大致就是先对 IP 进行哈希映射，接着使用 HashMap 统计重复 IP 的次数，最后计算出重复次数最多的 IP。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注：这里只需要找出出现次数最多的 IP，可以不必使用堆，直接用一个变量 max 即可。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"方法总结\"\u003e\u003ca href=\"#方法总结\" class=\"headerlink\" title=\"方法总结\"\u003e\u003c/a\u003e方法总结\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e分而治之，进行哈希取余；\u003c/li\u003e\n\u003cli\u003e使用 HashMap 统计频数；\u003c/li\u003e\n\u003cli\u003e求解\u003cstrong\u003e最大\u003c/strong\u003e的 TopN 个，用\u003cstrong\u003e小顶堆\u003c/strong\u003e；求解\u003cstrong\u003e最小\u003c/strong\u003e的 TopN 个，用\u003cstrong\u003e大顶堆\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"如何在大量的数据中找出不重复的整数？\"\u003e\u003ca href=\"#如何在大量的数据中找出不重复的整数？\" class=\"headerlink\" title=\"如何在大量的数据中找出不重复的整数？\"\u003e\u003c/a\u003e如何在大量的数据中找出不重复的整数？\u003c/h2\u003e\u003ch3 id=\"问题描述-3\"\u003e\u003ca href=\"#问题描述-3\" class=\"headerlink\" title=\"问题描述\"\u003e\u003c/a\u003e问题描述\u003c/h3\u003e\u003cp\u003e在 2.5 亿个整数中找出不重复的整数。注意：内存不足以容纳这 2.5 亿个整数。\u003c/p\u003e\n\u003ch3 id=\"解决思路-3\"\u003e\u003ca href=\"#解决思路-3\" class=\"headerlink\" title=\"解决思路\"\u003e\u003c/a\u003e解决思路\u003c/h3\u003e\u003ch4 id=\"方法一：分治法\"\u003e\u003ca href=\"#方法一：分治法\" class=\"headerlink\" title=\"方法一：分治法\"\u003e\u003c/a\u003e方法一：分治法\u003c/h4\u003e\u003cp\u003e与前面的题目方法类似，先将 2.5 亿个数划分到多个小文件，用 HashSet/HashMap 找出每个小文件中不重复的整数，再合并每个子结果，即为最终结果。\u003c/p\u003e\n\u003ch4 id=\"方法二：位图法\"\u003e\u003ca href=\"#方法二：位图法\" class=\"headerlink\" title=\"方法二：位图法\"\u003e\u003c/a\u003e方法二：位图法\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e位图\u003c/strong\u003e，就是用一个或多个 bit 来标记某个元素对应的值，而键就是该元素。采用位作为单位来存储数据，可以大大节省存储空间。\u003c/p\u003e\n\u003cp\u003e位图通过使用位数组来表示某些元素是否存在。它可以用于快速查找，判重，排序等。不是很清楚？我先举个小例子。\u003c/p\u003e\n\u003cp\u003e假设我们要对 \u003ccode\u003e[0,7]\u003c/code\u003e 中的 5 个元素 (6, 4, 2, 1, 5) 进行排序，可以采用位图法。0~7 范围总共有 8 个数，只需要 8bit，即 1 个字节。首先将每个位都置 0：\u003c/p\u003e\n\u003cfigure class=\"highlight basic\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"symbol\"\u003e0 \u003c/span\u003e\u003cspan class=\"number\"\u003e0\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e然后遍历 5 个元素，首先遇到 6，那么将下标为 6 的位的 0 置为 1；接着遇到 4，把下标为 4 的位 的 0 置为 1：\u003c/p\u003e\n\u003cfigure class=\"highlight basic\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"symbol\"\u003e0 \u003c/span\u003e\u003cspan class=\"number\"\u003e0\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e依次遍历，结束后，位数组是这样的：\u003c/p\u003e\n\u003cfigure class=\"highlight basic\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"symbol\"\u003e0 \u003c/span\u003e\u003cspan class=\"number\"\u003e1\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e每个为 1 的位，它的下标都表示了一个数：\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"selector-tag\"\u003ei\u003c/span\u003e \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"built_in\"\u003erange\u003c/span\u003e(\u003cspan class=\"number\"\u003e8\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e bits\u003cspan class=\"selector-attr\"\u003e[i]\u003c/span\u003e == \u003cspan class=\"number\"\u003e1\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(i)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这样我们其实就已经实现了排序。\u003c/p\u003e\n\u003cp\u003e对于整数相关的算法的求解，\u003cstrong\u003e位图法\u003c/strong\u003e是一种非常实用的算法。假设 int 整数占用 4B，即 32bit，那么我们可以表示的整数的个数为 232。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e那么对于这道题\u003c/strong\u003e，我们用 2 个 bit 来表示各个数字的状态：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e00 表示这个数字没出现过；\u003c/li\u003e\n\u003cli\u003e01 表示这个数字出现过一次（即为题目所找的不重复整数）；\u003c/li\u003e\n\u003cli\u003e10 表示这个数字出现了多次。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e那么这 232 个整数，总共所需内存为 232*2b=1GB。因此，当可用内存超过 1GB 时，可以采用位图法。假设内存满足位图法需求，进行下面的操作：\u003c/p\u003e\n\u003cp\u003e遍历 2.5 亿个整数，查看位图中对应的位，如果是 00，则变为 01，如果是 01 则变为 10，如果是 10 则保持不变。遍历结束后，查看位图，把对应位是 01 的整数输出即可。\u003c/p\u003e\n\u003ch3 id=\"方法总结-1\"\u003e\u003ca href=\"#方法总结-1\" class=\"headerlink\" title=\"方法总结\"\u003e\u003c/a\u003e方法总结\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e判断数字是否重复的问题\u003c/strong\u003e，位图法是一种非常高效的方法。\u003c/p\u003e\n\u003ch2 id=\"如何在大量的数据中判断一个数是否存在？\"\u003e\u003ca href=\"#如何在大量的数据中判断一个数是否存在？\" class=\"headerlink\" title=\"如何在大量的数据中判断一个数是否存在？\"\u003e\u003c/a\u003e如何在大量的数据中判断一个数是否存在？\u003c/h2\u003e\u003ch3 id=\"题目描述\"\u003e\u003ca href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"\u003e\u003c/a\u003e题目描述\u003c/h3\u003e\u003cp\u003e给定 40 亿个不重复的没排过序的 unsigned int 型整数，然后再给定一个数，如何快速判断这个数是否在这 40 亿个整数当中？\u003c/p\u003e\n\u003ch3 id=\"解答思路\"\u003e\u003ca href=\"#解答思路\" class=\"headerlink\" title=\"解答思路\"\u003e\u003c/a\u003e解答思路\u003c/h3\u003e\u003ch4 id=\"方法一：分治法-1\"\u003e\u003ca href=\"#方法一：分治法-1\" class=\"headerlink\" title=\"方法一：分治法\"\u003e\u003c/a\u003e方法一：分治法\u003c/h4\u003e\u003cp\u003e依然可以用分治法解决，方法与前面类似，就不再次赘述了。\u003c/p\u003e\n\u003ch4 id=\"方法二：位图法-1\"\u003e\u003ca href=\"#方法二：位图法-1\" class=\"headerlink\" title=\"方法二：位图法\"\u003e\u003c/a\u003e方法二：位图法\u003c/h4\u003e\u003cp\u003e40 亿个不重复整数，我们用 40 亿个 bit 来表示，初始位均为 0，那么总共需要内存：4,000,000,000b≈512M。\u003c/p\u003e\n\u003cp\u003e我们读取这 40 亿个整数，将对应的 bit 设置为 1。接着读取要查询的数，查看相应位是否为 1，如果为 1 表示存在，如果为 0 表示不存在。\u003c/p\u003e\n\u003ch3 id=\"方法总结-2\"\u003e\u003ca href=\"#方法总结-2\" class=\"headerlink\" title=\"方法总结\"\u003e\u003c/a\u003e方法总结\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e判断数字是否存在、判断数字是否重复的问题\u003c/strong\u003e，位图法是一种非常高效的方法。\u003c/p\u003e\n\u003ch2 id=\"如何查询最热门的查询串？\"\u003e\u003ca href=\"#如何查询最热门的查询串？\" class=\"headerlink\" title=\"如何查询最热门的查询串？\"\u003e\u003c/a\u003e如何查询最热门的查询串？\u003c/h2\u003e\u003ch3 id=\"题目描述-1\"\u003e\u003ca href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"\u003e\u003c/a\u003e题目描述\u003c/h3\u003e\u003cp\u003e搜索引擎会通过日志文件把用户每次检索使用的所有查询串都记录下来，每个查询串的长度不超过 255 字节。\u003c/p\u003e\n\u003cp\u003e假设目前有 1000w 个记录（这些查询串的重复度比较高，虽然总数是 1000w，但如果除去重复后，则不超过 300w 个）。请统计最热门的 10 个查询串，要求使用的内存不能超过 1G。（一个查询串的重复度越高，说明查询它的用户越多，也就越热门。）\u003c/p\u003e\n\u003ch3 id=\"解答思路-1\"\u003e\u003ca href=\"#解答思路-1\" class=\"headerlink\" title=\"解答思路\"\u003e\u003c/a\u003e解答思路\u003c/h3\u003e\u003cp\u003e每个查询串最长为 255B，1000w 个串需要占用 约 2.55G 内存，因此，我们无法将所有字符串全部读入到内存中处理。\u003c/p\u003e\n\u003ch4 id=\"方法一：分治法-2\"\u003e\u003ca href=\"#方法一：分治法-2\" class=\"headerlink\" title=\"方法一：分治法\"\u003e\u003c/a\u003e方法一：分治法\u003c/h4\u003e\u003cp\u003e分治法依然是一个非常实用的方法。\u003c/p\u003e\n\u003cp\u003e划分为多个小文件，保证单个小文件中的字符串能被直接加载到内存中处理，然后求出每个文件中出现次数最多的 10 个字符串；最后通过一个小顶堆统计出所有文件中出现最多的 10 个字符串。\u003c/p\u003e\n\u003cp\u003e方法可行，但不是最好，下面介绍其他方法。\u003c/p\u003e\n\u003ch4 id=\"方法二：HashMap-法\"\u003e\u003ca href=\"#方法二：HashMap-法\" class=\"headerlink\" title=\"方法二：HashMap 法\"\u003e\u003c/a\u003e方法二：HashMap 法\u003c/h4\u003e\u003cp\u003e虽然字符串总数比较多，但去重后不超过 300w，因此，可以考虑把所有字符串及出现次数保存在一个 HashMap 中，所占用的空间为 300w*(255+4)≈777M（其中，4 表示整数占用的 4 个字节）。由此可见，1G 的内存空间完全够用。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e思路如下\u003c/strong\u003e：\u003c/p\u003e\n\u003cp\u003e首先，遍历字符串，若不在 map 中，直接存入 map，value 记为 1；若在 map 中，则把对应的 value 加 1，这一步时间复杂度 \u003ccode\u003eO(N)\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e接着遍历 map，构建一个 10 个元素的小顶堆，若遍历到的字符串的出现次数大于堆顶字符串的出现次数，则进行替换，并将堆调整为小顶堆。\u003c/p\u003e\n\u003cp\u003e遍历结束后，堆中 10 个字符串就是出现次数最多的字符串。这一步时间复杂度 \u003ccode\u003eO(Nlog10)\u003c/code\u003e。\u003c/p\u003e\n\u003ch4 id=\"方法三：前缀树法（字典树）\"\u003e\u003ca href=\"#方法三：前缀树法（字典树）\" class=\"headerlink\" title=\"方法三：前缀树法（字典树）\"\u003e\u003c/a\u003e方法三：前缀树法（字典树）\u003c/h4\u003e\u003cp\u003e方法二使用了 HashMap 来统计次数，当这些字符串有大量相同前缀时，可以考虑使用前缀树来统计字符串出现的次数，树的结点保存字符串出现次数，0 表示没有出现。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e思路如下\u003c/strong\u003e：\u003c/p\u003e\n\u003cp\u003e在遍历字符串时，在前缀树中查找，如果找到，则把结点中保存的字符串次数加 1，否则为这个字符串构建新结点，构建完成后把叶子结点中字符串的出现次数置为 1。\u003c/p\u003e\n\u003cp\u003e最后依然使用小顶堆来对字符串的出现次数进行排序。\u003c/p\u003e\n\u003ch3 id=\"方法总结-3\"\u003e\u003ca href=\"#方法总结-3\" class=\"headerlink\" title=\"方法总结\"\u003e\u003c/a\u003e方法总结\u003c/h3\u003e\u003cp\u003e前缀树经常被用来统计字符串的出现次数。它的另外一个大的用途是字符串查找，判断是否有重复的字符串等。\u003c/p\u003e\n\u003ch2 id=\"如何统计不同电话号码的个数？\"\u003e\u003ca href=\"#如何统计不同电话号码的个数？\" class=\"headerlink\" title=\"如何统计不同电话号码的个数？\"\u003e\u003c/a\u003e如何统计不同电话号码的个数？\u003c/h2\u003e\u003ch3 id=\"题目描述-2\"\u003e\u003ca href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"\u003e\u003c/a\u003e题目描述\u003c/h3\u003e\u003cp\u003e已知某个文件内包含一些电话号码，每个号码为 8 位数字，统计不同号码的个数。\u003c/p\u003e\n\u003ch3 id=\"解答思路-2\"\u003e\u003ca href=\"#解答思路-2\" class=\"headerlink\" title=\"解答思路\"\u003e\u003c/a\u003e解答思路\u003c/h3\u003e\u003cp\u003e这道题本质还是求解\u003cstrong\u003e数据重复\u003c/strong\u003e的问题，对于这类问题，一般首先考虑位图法。\u003c/p\u003e\n\u003cp\u003e对于本题，8 位电话号码可以表示的号码个数为 $$10^8$$ 个，即 1 亿个。我们每个号码用一个 bit 来表示，则总共需要 1 亿个 bit，内存占用约 100M。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e思路如下\u003c/strong\u003e：\u003c/p\u003e\n\u003cp\u003e申请一个位图数组，长度为 1 亿，初始化为 0。然后遍历所有电话号码，把号码对应的位图中的位置置为 1。遍历完成后，如果 bit 为 1，则表示这个电话号码在文件中存在，否则不存在。bit 值为 1 的数量即为 不同电话号码的个数。\u003c/p\u003e\n\u003ch3 id=\"方法总结-4\"\u003e\u003ca href=\"#方法总结-4\" class=\"headerlink\" title=\"方法总结\"\u003e\u003c/a\u003e方法总结\u003c/h3\u003e\u003cp\u003e求解数据重复问题，记得考虑位图法。\u003c/p\u003e\n\u003ch2 id=\"如何从-5-亿个数中找出中位数？\"\u003e\u003ca href=\"#如何从-5-亿个数中找出中位数？\" class=\"headerlink\" title=\"如何从 5 亿个数中找出中位数？\"\u003e\u003c/a\u003e如何从 5 亿个数中找出中位数？\u003c/h2\u003e\u003ch3 id=\"题目描述-3\"\u003e\u003ca href=\"#题目描述-3\" class=\"headerlink\" title=\"题目描述\"\u003e\u003c/a\u003e题目描述\u003c/h3\u003e\u003cp\u003e从 5 亿个数中找出中位数。数据排序后，位置在最中间的数就是中位数。当样本数为奇数时，中位数为 第 \u003ccode\u003e(N+1)/2\u003c/code\u003e 个数；当样本数为偶数时，中位数为 第 \u003ccode\u003eN/2\u003c/code\u003e 个数与第 \u003ccode\u003e1+N/2\u003c/code\u003e 个数的均值。\u003c/p\u003e\n\u003ch3 id=\"解答思路-3\"\u003e\u003ca href=\"#解答思路-3\" class=\"headerlink\" title=\"解答思路\"\u003e\u003c/a\u003e解答思路\u003c/h3\u003e\u003cp\u003e如果这道题没有内存大小限制，则可以把所有数读到内存中排序后找出中位数。但是最好的排序算法的时间复杂度都为 \u003ccode\u003eO(NlogN)\u003c/code\u003e。这里使用其他方法。\u003c/p\u003e\n\u003ch4 id=\"方法一：双堆法\"\u003e\u003ca href=\"#方法一：双堆法\" class=\"headerlink\" title=\"方法一：双堆法\"\u003e\u003c/a\u003e方法一：双堆法\u003c/h4\u003e\u003cp\u003e维护两个堆，一个大顶堆，一个小顶堆。大顶堆中最大的数\u003cstrong\u003e小于等于\u003c/strong\u003e小顶堆中最小的数；保证这两个堆中的元素个数的差不超过 1。\u003c/p\u003e\n\u003cp\u003e若数据总数为\u003cstrong\u003e偶数\u003c/strong\u003e，当这两个堆建好之后，\u003cstrong\u003e中位数就是这两个堆顶元素的平均值\u003c/strong\u003e。当数据总数为\u003cstrong\u003e奇数\u003c/strong\u003e时，根据两个堆的大小，\u003cstrong\u003e中位数一定在数据多的堆的堆顶\u003c/strong\u003e。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMedianFinder\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e PriorityQueue\u0026lt;Integer\u0026gt; maxHeap;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e PriorityQueue\u0026lt;Integer\u0026gt; minHeap;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/** initialize your data structure here. */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eMedianFinder\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        maxHeap = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003ePriorityQueue\u003c/span\u003e\u0026lt;\u0026gt;(Comparator.reverseOrder());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        minHeap = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003ePriorityQueue\u003c/span\u003e\u0026lt;\u0026gt;(Integer::compareTo);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eaddNum\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e num)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (maxHeap.isEmpty() || maxHeap.peek() \u0026gt; num) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            maxHeap.offer(num);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            minHeap.offer(num);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003esize1\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e maxHeap.size();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003esize2\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e minHeap.size();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (size1 - size2 \u0026gt; \u003cspan class=\"number\"\u003e1\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            minHeap.offer(maxHeap.poll());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (size2 - size1 \u0026gt; \u003cspan class=\"number\"\u003e1\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            maxHeap.offer(minHeap.poll());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"type\"\u003edouble\u003c/span\u003e \u003cspan class=\"title function_\"\u003efindMedian\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003esize1\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e maxHeap.size();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003esize2\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e minHeap.size();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e size1 == size2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            ? (maxHeap.peek() + minHeap.peek()) * \u003cspan class=\"number\"\u003e1.0\u003c/span\u003e / \u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            : (size1 \u0026gt; size2 ? maxHeap.peek() : minHeap.peek());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e见 LeetCode No.295：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://leetcode.com/problems/find-median-from-data-stream/\"\u003ehttps://leetcode.com/problems/find-median-from-data-stream/\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e以上这种方法，需要把所有数据都加载到内存中。当数据量很大时，就不能这样了，因此，这种方法\u003cstrong\u003e适用于数据量较小的情况\u003c/strong\u003e。5 亿个数，每个数字占用 4B，总共需要 2G 内存。如果可用内存不足 2G，就不能使用这种方法了，下面介绍另一种方法。\u003c/p\u003e\n\u003ch4 id=\"方法二：分治法\"\u003e\u003ca href=\"#方法二：分治法\" class=\"headerlink\" title=\"方法二：分治法\"\u003e\u003c/a\u003e方法二：分治法\u003c/h4\u003e\u003cp\u003e分治法的思想是把一个大的问题逐渐转换为规模较小的问题来求解。\u003c/p\u003e\n\u003cp\u003e对于这道题，顺序读取这 5 亿个数字，对于读取到的数字 num，如果它对应的二进制中最高位为 1，则把这个数字写到 f1 中，否则写入 f0 中。通过这一步，可以把这 5 亿个数划分为两部分，而且 f0 中的数都大于 f1 中的数（最高位是符号位）。\u003c/p\u003e\n\u003cp\u003e划分之后，可以非常容易地知道中位数是在 f0 还是 f1 中。假设 f1 中有 1 亿个数，那么中位数一定在 f0 中，且是在 f0 中，从小到大排列的第 1.5 亿个数与它后面的一个数的平均值。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e提示\u003c/strong\u003e，5 亿数的中位数是第 2.5 亿与右边相邻一个数求平均值。若 f1 有一亿个数，那么中位数就是 f0 中从第 1.5 亿个数开始的两个数求得的平均值。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e对于 f0 可以用次高位的二进制继续将文件一分为二，如此划分下去，直到划分后的文件可以被加载到内存中，把数据加载到内存中以后直接排序，找出中位数。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e注意\u003c/strong\u003e，当数据总数为偶数，如果划分后两个文件中的数据有相同个数，那么中位数就是数据较小的文件中的最大值与数据较大的文件中的最小值的平均值。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"方法总结-5\"\u003e\u003ca href=\"#方法总结-5\" class=\"headerlink\" title=\"方法总结\"\u003e\u003c/a\u003e方法总结\u003c/h3\u003e\u003cp\u003e分治法，真香！\u003c/p\u003e\n\u003ch2 id=\"如何找出排名前-500-的数？\"\u003e\u003ca href=\"#如何找出排名前-500-的数？\" class=\"headerlink\" title=\"如何找出排名前 500 的数？\"\u003e\u003c/a\u003e如何找出排名前 500 的数？\u003c/h2\u003e\u003ch3 id=\"题目描述-4\"\u003e\u003ca href=\"#题目描述-4\" class=\"headerlink\" title=\"题目描述\"\u003e\u003c/a\u003e题目描述\u003c/h3\u003e\u003cp\u003e有 20 个数组，每个数组有 500 个元素，并且有序排列。如何在这 20*500 个数中找出前 500 的数？\u003c/p\u003e\n\u003ch3 id=\"解答思路-4\"\u003e\u003ca href=\"#解答思路-4\" class=\"headerlink\" title=\"解答思路\"\u003e\u003c/a\u003e解答思路\u003c/h3\u003e\u003cp\u003e对于 TopK 问题，最常用的方法是使用堆排序。对本题而言，假设数组降序排列，可以采用以下方法：\u003c/p\u003e\n\u003cp\u003e首先建立大顶堆，堆的大小为数组的个数，即为 20，把每个数组最大的值存到堆中。\u003c/p\u003e\n\u003cp\u003e接着删除堆顶元素，保存到另一个大小为 500 的数组中，然后向大顶堆插入删除的元素所在数组的下一个元素。\u003c/p\u003e\n\u003cp\u003e重复上面的步骤，直到删除完第 500 个元素，也即找出了最大的前 500 个数。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e为了在堆中取出一个数据后，能知道它是从哪个数组中取出的，从而可以从这个数组中取下一个值，可以把数组的指针存放到堆中，对这个指针提供比较大小的方法。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e60\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e61\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e62\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e63\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e65\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e66\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e67\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e68\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e69\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e70\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e71\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e72\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e73\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e74\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e75\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e76\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e77\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e78\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e79\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e80\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e81\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e82\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e83\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e84\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e85\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e86\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e lombok.Data;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e java.util.Arrays;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e java.util.PriorityQueue;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * \u003cspan class=\"doctag\"\u003e@author\u003c/span\u003e https://github.com/yanglbme\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@Data\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eDataWithSource\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eComparable\u003c/span\u003e\u0026lt;DataWithSource\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e     * 数值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e     */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e     * 记录数值来源的数组\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e     */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e source;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e     * 记录数值在数组中的索引\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e     */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e index;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eDataWithSource\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e value, \u003cspan class=\"type\"\u003eint\u003c/span\u003e source, \u003cspan class=\"type\"\u003eint\u003c/span\u003e index)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.value = value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.source = source;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.index = index;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e     *\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e     * 由于 PriorityQueue 使用小顶堆来实现，这里通过修改\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e     * 两个整数的比较逻辑来让 PriorityQueue 变成大顶堆\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e     */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003ecompareTo\u003c/span\u003e\u003cspan class=\"params\"\u003e(DataWithSource o)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e Integer.compare(o.getValue(), \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.value);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eTest\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e[] getTop(\u003cspan class=\"type\"\u003eint\u003c/span\u003e[][] data) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003erowSize\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e data.length;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ecolumnSize\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e data[\u003cspan class=\"number\"\u003e0\u003c/span\u003e].length;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 创建一个columnSize大小的数组，存放结果\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e[] result = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eint\u003c/span\u003e[columnSize];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        PriorityQueue\u0026lt;DataWithSource\u0026gt; maxHeap = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003ePriorityQueue\u003c/span\u003e\u0026lt;\u0026gt;();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; rowSize; ++i) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 将每个数组的最大一个元素放入堆中\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eDataWithSource\u003c/span\u003e \u003cspan class=\"variable\"\u003ed\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eDataWithSource\u003c/span\u003e(data[i][\u003cspan class=\"number\"\u003e0\u003c/span\u003e], i, \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            maxHeap.add(d);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003enum\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (num \u0026lt; columnSize) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// 删除堆顶元素\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"type\"\u003eDataWithSource\u003c/span\u003e \u003cspan class=\"variable\"\u003ed\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e maxHeap.poll();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            result[num++] = d.getValue();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (num \u0026gt;= columnSize) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003ebreak\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            d.setValue(data[d.getSource()][d.getIndex() + \u003cspan class=\"number\"\u003e1\u003c/span\u003e]);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            d.setIndex(d.getIndex() + \u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            maxHeap.add(d);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e result;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e[][] data = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                {\u003cspan class=\"number\"\u003e29\u003c/span\u003e, \u003cspan class=\"number\"\u003e17\u003c/span\u003e, \u003cspan class=\"number\"\u003e14\u003c/span\u003e, \u003cspan class=\"number\"\u003e2\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e},\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                {\u003cspan class=\"number\"\u003e19\u003c/span\u003e, \u003cspan class=\"number\"\u003e17\u003c/span\u003e, \u003cspan class=\"number\"\u003e16\u003c/span\u003e, \u003cspan class=\"number\"\u003e15\u003c/span\u003e, \u003cspan class=\"number\"\u003e6\u003c/span\u003e},\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                {\u003cspan class=\"number\"\u003e30\u003c/span\u003e, \u003cspan class=\"number\"\u003e25\u003c/span\u003e, \u003cspan class=\"number\"\u003e20\u003c/span\u003e, \u003cspan class=\"number\"\u003e14\u003c/span\u003e, \u003cspan class=\"number\"\u003e5\u003c/span\u003e},\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        };\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eint\u003c/span\u003e[] top = getTop(data);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(Arrays.toString(top)); \u003cspan class=\"comment\"\u003e// [30, 29, 25, 20, 19]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"方法总结-6\"\u003e\u003ca href=\"#方法总结-6\" class=\"headerlink\" title=\"方法总结\"\u003e\u003c/a\u003e方法总结\u003c/h3\u003e\u003cp\u003e求 TopK，不妨考虑一下堆排序？\u003c/p\u003e\n\u003ch2 id=\"如何按照-query-的频度排序？\"\u003e\u003ca href=\"#如何按照-query-的频度排序？\" class=\"headerlink\" title=\"如何按照 query 的频度排序？\"\u003e\u003c/a\u003e如何按照 query 的频度排序？\u003c/h2\u003e\u003ch3 id=\"题目描述-5\"\u003e\u003ca href=\"#题目描述-5\" class=\"headerlink\" title=\"题目描述\"\u003e\u003c/a\u003e题目描述\u003c/h3\u003e\u003cp\u003e有 10 个文件，每个文件大小为 1G，每个文件的每一行存放的都是用户的 query，每个文件的 query 都可能重复。要求按照 query 的频度排序。\u003c/p\u003e\n\u003ch3 id=\"解答思路-5\"\u003e\u003ca href=\"#解答思路-5\" class=\"headerlink\" title=\"解答思路\"\u003e\u003c/a\u003e解答思路\u003c/h3\u003e\u003cp\u003e如果 query 的重复度比较大，可以考虑一次性把所有 query 读入内存中处理；如果 query 的重复率不高，那么可用内存不足以容纳所有的 query，这时候就需要采用分治法或其他的方法来解决。\u003c/p\u003e\n\u003ch4 id=\"方法一：HashMap-法\"\u003e\u003ca href=\"#方法一：HashMap-法\" class=\"headerlink\" title=\"方法一：HashMap 法\"\u003e\u003c/a\u003e方法一：HashMap 法\u003c/h4\u003e\u003cp\u003e如果 query 重复率高，说明不同 query 总数比较小，可以考虑把所有的 query 都加载到内存中的 HashMap 中。接着就可以按照 query 出现的次数进行排序。\u003c/p\u003e\n\u003ch4 id=\"方法二：分治法-1\"\u003e\u003ca href=\"#方法二：分治法-1\" class=\"headerlink\" title=\"方法二：分治法\"\u003e\u003c/a\u003e方法二：分治法\u003c/h4\u003e\u003cp\u003e分治法需要根据数据量大小以及可用内存的大小来确定问题划分的规模。对于这道题，可以顺序遍历 10 个文件中的 query，通过 Hash 函数 \u003ccode\u003ehash(query) % 10\u003c/code\u003e 把这些 query 划分到 10 个小文件中。之后对每个小文件使用 HashMap 统计 query 出现次数，根据次数排序并写入到零外一个单独文件中。\u003c/p\u003e\n\u003cp\u003e接着对所有文件按照 query 的次数进行排序，这里可以使用归并排序（由于无法把所有 query 都读入内存，因此需要使用外排序）。\u003c/p\u003e\n\u003ch3 id=\"方法总结-7\"\u003e\u003ca href=\"#方法总结-7\" class=\"headerlink\" title=\"方法总结\"\u003e\u003c/a\u003e方法总结\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e内存若够，直接读入进行排序；\u003c/li\u003e\n\u003cli\u003e内存不够，先划分为小文件，小文件排好序后，整理使用外排序进行归并。\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-08-19T14:15:16Z",
  "Author": "钝悟 ◾ Dunwu"
}