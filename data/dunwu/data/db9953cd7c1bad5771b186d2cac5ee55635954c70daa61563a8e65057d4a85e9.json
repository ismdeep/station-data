{
  "Source": "dunwu",
  "Title": "深入理解 Java 反射和动态代理",
  "Link": "https://dunwu.github.io/blog/pages/0d066a/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"深入理解-Java-反射和动态代理\"\u003e\u003ca href=\"#深入理解-Java-反射和动态代理\" class=\"headerlink\" title=\"深入理解 Java 反射和动态代理\"\u003e\u003c/a\u003e深入理解 Java 反射和动态代理\u003c/h1\u003e\u003ch2 id=\"反射简介\"\u003e\u003ca href=\"#反射简介\" class=\"headerlink\" title=\"反射简介\"\u003e\u003c/a\u003e反射简介\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/xmind/Java%E5%8F%8D%E5%B0%84.svg\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"什么是反射\"\u003e\u003ca href=\"#什么是反射\" class=\"headerlink\" title=\"什么是反射\"\u003e\u003c/a\u003e什么是反射\u003c/h3\u003e\u003cp\u003e反射(Reflection)是 Java 程序开发语言的特征之一，它允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e通过反射机制，可以在运行时访问 Java 对象的属性，方法，构造方法等。\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id=\"反射的应用场景\"\u003e\u003ca href=\"#反射的应用场景\" class=\"headerlink\" title=\"反射的应用场景\"\u003e\u003c/a\u003e反射的应用场景\u003c/h3\u003e\u003cp\u003e反射的主要应用场景有：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e开发通用框架\u003c/strong\u003e - 反射最重要的用途就是开发各种通用框架。很多框架（比如 Spring）都是配置化的（比如通过 XML 文件配置 JavaBean、Filter 等），为了保证框架的通用性，它们可能需要根据配置文件加载不同的对象或类，调用不同的方法，这个时候就必须用到反射——运行时动态加载需要加载的对象。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e动态代理\u003c/strong\u003e - 在切面编程（AOP）中，需要拦截特定的方法，通常，会选择动态代理方式。这时，就需要反射技术来实现了。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e注解\u003c/strong\u003e - 注解本身仅仅是起到标记作用，它需要利用反射机制，根据注解标记去调用注解解释器，执行行为。如果没有反射机制，注解并不比注释更有用。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e可扩展性功能\u003c/strong\u003e - 应用程序可以通过使用完全限定名称创建可扩展性对象实例来使用外部的用户定义类。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"反射的缺点\"\u003e\u003ca href=\"#反射的缺点\" class=\"headerlink\" title=\"反射的缺点\"\u003e\u003c/a\u003e反射的缺点\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e性能开销\u003c/strong\u003e - 由于反射涉及动态解析的类型，因此无法执行某些 Java 虚拟机优化。因此，反射操作的性能要比非反射操作的性能要差，应该在性能敏感的应用程序中频繁调用的代码段中避免。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e破坏封装性\u003c/strong\u003e - 反射调用方法时可以忽略权限检查，因此可能会破坏封装性而导致安全问题。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e内部曝光\u003c/strong\u003e - 由于反射允许代码执行在非反射代码中非法的操作，例如访问私有字段和方法，所以反射的使用可能会导致意想不到的副作用，这可能会导致代码功能失常并可能破坏可移植性。反射代码打破了抽象，因此可能会随着平台的升级而改变行为。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"反射机制\"\u003e\u003ca href=\"#反射机制\" class=\"headerlink\" title=\"反射机制\"\u003e\u003c/a\u003e反射机制\u003c/h2\u003e\u003ch3 id=\"类加载过程\"\u003e\u003ca href=\"#类加载过程\" class=\"headerlink\" title=\"类加载过程\"\u003e\u003c/a\u003e类加载过程\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/1553611895164.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e类加载的完整过程如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e在编译时，Java 编译器编译好 \u003ccode\u003e.java\u003c/code\u003e 文件之后，在磁盘中产生 \u003ccode\u003e.class\u003c/code\u003e 文件。\u003ccode\u003e.class\u003c/code\u003e 文件是二进制文件，内容是只有 JVM 能够识别的机器码。\u003c/li\u003e\n\u003cli\u003eJVM 中的类加载器读取字节码文件，取出二进制数据，加载到内存中，解析.class 文件内的信息。类加载器会根据类的全限定名来获取此类的二进制字节流；然后，将字节流所代表的静态存储结构转化为方法区的运行时数据结构；接着，在内存中生成代表这个类的 \u003ccode\u003ejava.lang.Class\u003c/code\u003e 对象。\u003c/li\u003e\n\u003cli\u003e加载结束后，JVM 开始进行连接阶段（包含验证、准备、初始化）。经过这一系列操作，类的变量会被初始化。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"Class-对象\"\u003e\u003ca href=\"#Class-对象\" class=\"headerlink\" title=\"Class 对象\"\u003e\u003c/a\u003eClass 对象\u003c/h3\u003e\u003cp\u003e要想使用反射，首先需要获得待操作的类所对应的 Class 对象。\u003cstrong\u003eJava 中，无论生成某个类的多少个对象，这些对象都会对应于同一个 Class 对象。这个 Class 对象是由 JVM 生成的，通过它能够获悉整个类的结构\u003c/strong\u003e。所以，\u003ccode\u003ejava.lang.Class\u003c/code\u003e 可以视为所有反射 API 的入口点。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e反射的本质就是：在运行时，把 Java 类中的各种成分映射成一个个的 Java 对象。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e举例来说，假如定义了以下代码：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eUser\u003c/span\u003e \u003cspan class=\"variable\"\u003euser\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eUser\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e步骤说明：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eJVM 加载方法的时候，遇到 \u003ccode\u003enew User()\u003c/code\u003e，JVM 会根据 \u003ccode\u003eUser\u003c/code\u003e 的全限定名去加载 \u003ccode\u003eUser.class\u003c/code\u003e 。\u003c/li\u003e\n\u003cli\u003eJVM 会去本地磁盘查找 \u003ccode\u003eUser.class\u003c/code\u003e 文件并加载 JVM 内存中。\u003c/li\u003e\n\u003cli\u003eJVM 通过调用类加载器自动创建这个类对应的 \u003ccode\u003eClass\u003c/code\u003e 对象，并且存储在 JVM 的方法区。注意：\u003cstrong\u003e一个类有且只有一个 \u003ccode\u003eClass\u003c/code\u003e 对象\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"方法的反射调用\"\u003e\u003ca href=\"#方法的反射调用\" class=\"headerlink\" title=\"方法的反射调用\"\u003e\u003c/a\u003e方法的反射调用\u003c/h3\u003e\u003cp\u003e方法的反射调用，也就是 \u003ccode\u003eMethod.invoke\u003c/code\u003e 方法。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMethod.invoke\u003c/code\u003e 方法源码：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMethod\u003c/span\u003e \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eExecutable\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e Object \u003cspan class=\"title function_\"\u003einvoke\u003c/span\u003e\u003cspan class=\"params\"\u003e(Object obj, Object... args)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ... {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ... \u003cspan class=\"comment\"\u003e// 权限检查\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eMethodAccessor\u003c/span\u003e \u003cspan class=\"variable\"\u003ema\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e methodAccessor;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (ma == \u003cspan class=\"literal\"\u003enull\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      ma = acquireMethodAccessor();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e ma.invoke(obj, args);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eMethod.invoke\u003c/code\u003e 方法实际上委派给 \u003ccode\u003eMethodAccessor\u003c/code\u003e 接口来处理。它有两个已有的具体实现：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eNativeMethodAccessorImpl\u003c/code\u003e：本地方法来实现反射调用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDelegatingMethodAccessorImpl\u003c/code\u003e：委派模式来实现反射调用\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e每个 \u003ccode\u003eMethod\u003c/code\u003e 实例的第一次反射调用都会生成一个委派实现（\u003ccode\u003eDelegatingMethodAccessorImpl\u003c/code\u003e），它所委派的具体实现便是一个本地实现（\u003ccode\u003eNativeMethodAccessorImpl\u003c/code\u003e）。本地实现非常容易理解。当进入了 Java 虚拟机内部之后，我们便拥有了 \u003ccode\u003eMethod\u003c/code\u003e 实例所指向方法的具体地址。这时候，反射调用无非就是将传入的参数准备好，然后调用进入目标方法。\u003c/p\u003e\n\u003cp\u003e【示例】通过抛出异常方式 打印 \u003ccode\u003eMethod.invoke\u003c/code\u003e 调用轨迹\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMethodDemo01\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003etarget\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e i)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eException\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;#\u0026#34;\u003c/span\u003e + i).printStackTrace();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e Exception {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Class\u0026lt;?\u0026gt; clazz = Class.forName(\u003cspan class=\"string\"\u003e\u0026#34;io.github.dunwu.javacore.reflect.MethodDemo01\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eMethod\u003c/span\u003e \u003cspan class=\"variable\"\u003emethod\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e clazz.getMethod(\u003cspan class=\"string\"\u003e\u0026#34;target\u0026#34;\u003c/span\u003e, \u003cspan class=\"type\"\u003eint\u003c/span\u003e.class);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        method.invoke(\u003cspan class=\"literal\"\u003enull\u003c/span\u003e, \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// Output:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// java.lang.Exception: #0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//     at io.github.dunwu.javacore.reflect.MethodDemo01.target(MethodDemo01.java:12)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e先调用 \u003ccode\u003eDelegatingMethodAccessorImpl\u003c/code\u003e；然后调用 \u003ccode\u003eNativeMethodAccessorImpl\u003c/code\u003e，最后调用实际方法。\u003c/p\u003e\n\u003cp\u003e为什么反射调用\u003ccode\u003eDelegatingMethodAccessorImpl\u003c/code\u003e 作为中间层，而不是直接交给本地实现？\u003c/p\u003e\n\u003cp\u003e其实，Java 的反射调用机制还设立了另一种动态生成字节码的实现（下称动态实现），直接使用 invoke 指令来调用目标方法。之所以采用委派实现，便是为了能够在本地实现以及动态实现中切换。动态实现和本地实现相比，其运行效率要快上 20 倍。这是因为动态实现无需经过 Java 到 C++ 再到 Java 的切换，但由于生成字节码十分耗时，仅调用一次的话，反而是本地实现要快上 3 到 4 倍。\u003c/p\u003e\n\u003cp\u003e考虑到许多反射调用仅会执行一次，Java 虚拟机设置了一个阈值 15（可以通过 \u003ccode\u003e-Dsun.reflect.inflationThreshold\u003c/code\u003e 来调整），当某个反射调用的调用次数在 15 之下时，采用本地实现；当达到 15 时，便开始动态生成字节码，并将委派实现的委派对象切换至动态实现，这个过程我们称之为 Inflation。\u003c/p\u003e\n\u003cp\u003e【示例】执行 java -verbose:class MethodDemo02 启动\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eMethodDemo02\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003etarget\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e i)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eException\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;#\u0026#34;\u003c/span\u003e + i).printStackTrace();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e Exception {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Class\u0026lt;?\u0026gt; klass = Class.forName(\u003cspan class=\"string\"\u003e\u0026#34;io.github.dunwu.javacore.reflect.MethodDemo02\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eMethod\u003c/span\u003e \u003cspan class=\"variable\"\u003emethod\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e klass.getMethod(\u003cspan class=\"string\"\u003e\u0026#34;target\u0026#34;\u003c/span\u003e, \u003cspan class=\"type\"\u003eint\u003c/span\u003e.class);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"variable\"\u003ei\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"number\"\u003e20\u003c/span\u003e; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            method.invoke(\u003cspan class=\"literal\"\u003enull\u003c/span\u003e, i);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e输出内容：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ...省略\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ejava.lang.Exception: #\u003cspan class=\"number\"\u003e14\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        at io.github.dunwu.javacore.reflect.MethodDemo02.target(MethodDemo02.java:\u003cspan class=\"number\"\u003e13\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:\u003cspan class=\"number\"\u003e62\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:\u003cspan class=\"number\"\u003e43\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        at java.lang.reflect.Method.invoke(Method.java:\u003cspan class=\"number\"\u003e498\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        at io.github.dunwu.javacore.reflect.MethodDemo02.main(MethodDemo02.java:\u003cspan class=\"number\"\u003e20\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[Loaded sun.reflect.ClassFileConstants from D:\\Tools\\Java\\jdk1\u003cspan class=\"number\"\u003e.8\u003c/span\u003e\u003cspan class=\"number\"\u003e.0_192\u003c/span\u003e\\jre\\lib\\rt.jar]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[Loaded sun.reflect.AccessorGenerator from D:\\Tools\\Java\\jdk1\u003cspan class=\"number\"\u003e.8\u003c/span\u003e\u003cspan class=\"number\"\u003e.0_192\u003c/span\u003e\\jre\\lib\\rt.jar]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[Loaded sun.reflect.MethodAccessorGenerator from D:\\Tools\\Java\\jdk1\u003cspan class=\"number\"\u003e.8\u003c/span\u003e\u003cspan class=\"number\"\u003e.0_192\u003c/span\u003e\\jre\\lib\\rt.jar]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[Loaded sun.reflect.ByteVectorFactory from D:\\Tools\\Java\\jdk1\u003cspan class=\"number\"\u003e.8\u003c/span\u003e\u003cspan class=\"number\"\u003e.0_192\u003c/span\u003e\\jre\\lib\\rt.jar]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[Loaded sun.reflect.ByteVector from D:\\Tools\\Java\\jdk1\u003cspan class=\"number\"\u003e.8\u003c/span\u003e\u003cspan class=\"number\"\u003e.0_192\u003c/span\u003e\\jre\\lib\\rt.jar]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[Loaded sun.reflect.ByteVectorImpl from D:\\Tools\\Java\\jdk1\u003cspan class=\"number\"\u003e.8\u003c/span\u003e\u003cspan class=\"number\"\u003e.0_192\u003c/span\u003e\\jre\\lib\\rt.jar]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[Loaded sun.reflect.ClassFileAssembler from D:\\Tools\\Java\\jdk1\u003cspan class=\"number\"\u003e.8\u003c/span\u003e\u003cspan class=\"number\"\u003e.0_192\u003c/span\u003e\\jre\\lib\\rt.jar]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[Loaded sun.reflect.UTF8 from D:\\Tools\\Java\\jdk1\u003cspan class=\"number\"\u003e.8\u003c/span\u003e\u003cspan class=\"number\"\u003e.0_192\u003c/span\u003e\\jre\\lib\\rt.jar]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[Loaded sun.reflect.Label from D:\\Tools\\Java\\jdk1\u003cspan class=\"number\"\u003e.8\u003c/span\u003e\u003cspan class=\"number\"\u003e.0_192\u003c/span\u003e\\jre\\lib\\rt.jar]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[Loaded sun.reflect.Label$PatchInfo from D:\\Tools\\Java\\jdk1\u003cspan class=\"number\"\u003e.8\u003c/span\u003e\u003cspan class=\"number\"\u003e.0_192\u003c/span\u003e\\jre\\lib\\rt.jar]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[Loaded java.util.ArrayList$Itr from D:\\Tools\\Java\\jdk1\u003cspan class=\"number\"\u003e.8\u003c/span\u003e\u003cspan class=\"number\"\u003e.0_192\u003c/span\u003e\\jre\\lib\\rt.jar]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[Loaded sun.reflect.MethodAccessorGenerator$\u003cspan class=\"number\"\u003e1\u003c/span\u003e from D:\\Tools\\Java\\jdk1\u003cspan class=\"number\"\u003e.8\u003c/span\u003e\u003cspan class=\"number\"\u003e.0_192\u003c/span\u003e\\jre\\lib\\rt.jar]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[Loaded sun.reflect.ClassDefiner from D:\\Tools\\Java\\jdk1\u003cspan class=\"number\"\u003e.8\u003c/span\u003e\u003cspan class=\"number\"\u003e.0_192\u003c/span\u003e\\jre\\lib\\rt.jar]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[Loaded sun.reflect.ClassDefiner$\u003cspan class=\"number\"\u003e1\u003c/span\u003e from D:\\Tools\\Java\\jdk1\u003cspan class=\"number\"\u003e.8\u003c/span\u003e\u003cspan class=\"number\"\u003e.0_192\u003c/span\u003e\\jre\\lib\\rt.jar]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[Loaded sun.reflect.GeneratedMethodAccessor1 from __JVM_DefineClass__]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ejava.lang.Exception: #\u003cspan class=\"number\"\u003e15\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        at io.github.dunwu.javacore.reflect.MethodDemo02.target(MethodDemo02.java:\u003cspan class=\"number\"\u003e13\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:\u003cspan class=\"number\"\u003e62\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:\u003cspan class=\"number\"\u003e43\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        at java.lang.reflect.Method.invoke(Method.java:\u003cspan class=\"number\"\u003e498\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        at io.github.dunwu.javacore.reflect.MethodDemo02.main(MethodDemo02.java:\u003cspan class=\"number\"\u003e20\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[Loaded java.util.concurrent.ConcurrentHashMap$ForwardingNode from D:\\Tools\\Java\\jdk1\u003cspan class=\"number\"\u003e.8\u003c/span\u003e\u003cspan class=\"number\"\u003e.0_192\u003c/span\u003e\\jre\\lib\\rt.jar]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ejava.lang.Exception: #\u003cspan class=\"number\"\u003e16\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        at io.github.dunwu.javacore.reflect.MethodDemo02.target(MethodDemo02.java:\u003cspan class=\"number\"\u003e13\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        at sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:\u003cspan class=\"number\"\u003e43\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        at java.lang.reflect.Method.invoke(Method.java:\u003cspan class=\"number\"\u003e498\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        at io.github.dunwu.javacore.reflect.MethodDemo02.main(MethodDemo02.java:\u003cspan class=\"number\"\u003e20\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ...省略\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可以看到，从第 16 次开始后，都是使用 \u003ccode\u003eDelegatingMethodAccessorImpl\u003c/code\u003e ，不再使用本地实现 \u003ccode\u003eNativeMethodAccessorImpl\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id=\"反射调用的开销\"\u003e\u003ca href=\"#反射调用的开销\" class=\"headerlink\" title=\"反射调用的开销\"\u003e\u003c/a\u003e反射调用的开销\u003c/h3\u003e\u003cp\u003e方法的反射调用会带来不少性能开销，原因主要有三个：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e变长参数方法导致的 Object 数组\u003c/li\u003e\n\u003cli\u003e基本类型的自动装箱、拆箱\u003c/li\u003e\n\u003cli\u003e还有最重要的方法内联\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003eClass.forName\u003c/code\u003e 会调用本地方法，\u003ccode\u003eClass.getMethod\u003c/code\u003e 则会遍历该类的公有方法。如果没有匹配到，它还将遍历父类的公有方法。可想而知，这两个操作都非常费时。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注意，以 \u003ccode\u003egetMethod\u003c/code\u003e 为代表的查找方法操作，会返回查找得到结果的一份拷贝。因此，我们应当避免在热点代码中使用返回 \u003ccode\u003eMethod\u003c/code\u003e 数组的 \u003ccode\u003egetMethods\u003c/code\u003e 或者 \u003ccode\u003egetDeclaredMethods\u003c/code\u003e 方法，以减少不必要的堆空间消耗。在实践中，我们往往会在应用程序中缓存 \u003ccode\u003eClass.forName\u003c/code\u003e 和 \u003ccode\u003eClass.getMethod\u003c/code\u003e 的结果。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e下面只关注反射调用本身的性能开销。\u003c/p\u003e\n\u003cp\u003e第一，由于 Method.invoke 是一个变长参数方法，在字节码层面它的最后一个参数会是 Object 数组（感兴趣的同学私下可以用 javap 查看）。Java 编译器会在方法调用处生成一个长度为传入参数数量的 Object 数组，并将传入参数一一存储进该数组中。\u003c/p\u003e\n\u003cp\u003e第二，由于 Object 数组不能存储基本类型，Java 编译器会对传入的基本类型参数进行自动装箱。\u003c/p\u003e\n\u003cp\u003e这两个操作除了带来性能开销外，还可能占用堆内存，使得 GC 更加频繁。（如果你感兴趣的话，可以用虚拟机参数 -XX:+PrintGC 试试。）那么，如何消除这部分开销呢？\u003c/p\u003e\n\u003ch2 id=\"使用反射\"\u003e\u003ca href=\"#使用反射\" class=\"headerlink\" title=\"使用反射\"\u003e\u003c/a\u003e使用反射\u003c/h2\u003e\u003ch3 id=\"java-lang-reflect-包\"\u003e\u003ca href=\"#java-lang-reflect-包\" class=\"headerlink\" title=\"java.lang.reflect 包\"\u003e\u003c/a\u003ejava.lang.reflect 包\u003c/h3\u003e\u003cp\u003eJava 中的 \u003ccode\u003ejava.lang.reflect\u003c/code\u003e 包提供了反射功能。\u003ccode\u003ejava.lang.reflect\u003c/code\u003e 包中的类都没有 \u003ccode\u003epublic\u003c/code\u003e 构造方法。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ejava.lang.reflect\u003c/code\u003e 包的核心接口和类如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eMember\u003c/code\u003e 接口：反映关于单个成员(字段或方法)或构造函数的标识信息。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eField\u003c/code\u003e 类：提供一个类的域的信息以及访问类的域的接口。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMethod\u003c/code\u003e 类：提供一个类的方法的信息以及访问类的方法的接口。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eConstructor\u003c/code\u003e 类：提供一个类的构造函数的信息以及访问类的构造函数的接口。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eArray\u003c/code\u003e 类：该类提供动态地生成和访问 JAVA 数组的方法。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eModifier\u003c/code\u003e 类：提供了 static 方法和常量，对类和成员访问修饰符进行解码。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eProxy\u003c/code\u003e 类：提供动态地生成代理类和类实例的静态方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"获取-Class-对象\"\u003e\u003ca href=\"#获取-Class-对象\" class=\"headerlink\" title=\"获取 Class 对象\"\u003e\u003c/a\u003e获取 Class 对象\u003c/h3\u003e\u003cp\u003e获取 \u003ccode\u003eClass\u003c/code\u003e 对象的三种方法：\u003c/p\u003e\n\u003cp\u003e（1）**\u003ccode\u003eClass.forName\u003c/code\u003e 静态方法**\u003c/p\u003e\n\u003cp\u003e【示例】使用 \u003ccode\u003eClass.forName\u003c/code\u003e 静态方法获取 \u003ccode\u003eClass\u003c/code\u003e 对象\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epackage\u003c/span\u003e io.github.dunwu.javacore.reflect;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReflectClassDemo01\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ClassNotFoundException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eClass\u003c/span\u003e \u003cspan class=\"variable\"\u003ec1\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Class.forName(\u003cspan class=\"string\"\u003e\u0026#34;io.github.dunwu.javacore.reflect.ReflectClassDemo01\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(c1.getCanonicalName());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eClass\u003c/span\u003e \u003cspan class=\"variable\"\u003ec2\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Class.forName(\u003cspan class=\"string\"\u003e\u0026#34;[D\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(c2.getCanonicalName());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eClass\u003c/span\u003e \u003cspan class=\"variable\"\u003ec3\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Class.forName(\u003cspan class=\"string\"\u003e\u0026#34;[[Ljava.lang.String;\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(c3.getCanonicalName());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//Output:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//io.github.dunwu.javacore.reflect.ReflectClassDemo01\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//double[]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//java.lang.String[][]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e使用类的完全限定名来反射对象的类。常见的应用场景为：在 JDBC 开发中常用此方法加载数据库驱动。\u003c/p\u003e\n\u003cp\u003e（2）\u003cstrong\u003e类名 + \u003ccode\u003e.class\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e【示例】直接用类名 + \u003ccode\u003e.class\u003c/code\u003e 获取 \u003ccode\u003eClass\u003c/code\u003e 对象\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReflectClassDemo02\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e b;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// Class c = b.getClass(); // 编译错误\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eClass\u003c/span\u003e \u003cspan class=\"variable\"\u003ec1\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e.class;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(c1.getCanonicalName());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eClass\u003c/span\u003e \u003cspan class=\"variable\"\u003ec2\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e java.io.PrintStream.class;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(c2.getCanonicalName());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eClass\u003c/span\u003e \u003cspan class=\"variable\"\u003ec3\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e[][][].class;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(c3.getCanonicalName());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//Output:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//boolean\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//java.io.PrintStream\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//int[][][]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e（3）**\u003ccode\u003eObject\u003c/code\u003e 的 \u003ccode\u003egetClass\u003c/code\u003e 方法**\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eObject\u003c/code\u003e 类中有 \u003ccode\u003egetClass\u003c/code\u003e 方法，因为所有类都继承 \u003ccode\u003eObject\u003c/code\u003e 类。从而调用 \u003ccode\u003eObject\u003c/code\u003e 类来获取 \u003ccode\u003eClass\u003c/code\u003e 对象。\u003c/p\u003e\n\u003cp\u003e【示例】\u003ccode\u003eObject\u003c/code\u003e 的 \u003ccode\u003egetClass\u003c/code\u003e 方法获取 \u003ccode\u003eClass\u003c/code\u003e 对象\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epackage\u003c/span\u003e io.github.dunwu.javacore.reflect;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e java.util.HashSet;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e java.util.Set;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReflectClassDemo03\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eenum\u003c/span\u003e \u003cspan class=\"title class_\"\u003eE\u003c/span\u003e {A, B}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eClass\u003c/span\u003e \u003cspan class=\"variable\"\u003ec\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e.getClass();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(c.getCanonicalName());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eClass\u003c/span\u003e \u003cspan class=\"variable\"\u003ec2\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e ReflectClassDemo03.E.A.getClass();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(c2.getCanonicalName());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003ebyte\u003c/span\u003e[] bytes = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003ebyte\u003c/span\u003e[\u003cspan class=\"number\"\u003e1024\u003c/span\u003e];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eClass\u003c/span\u003e \u003cspan class=\"variable\"\u003ec3\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e bytes.getClass();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(c3.getCanonicalName());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Set\u0026lt;String\u0026gt; set = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eHashSet\u003c/span\u003e\u0026lt;\u0026gt;();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eClass\u003c/span\u003e \u003cspan class=\"variable\"\u003ec4\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e set.getClass();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(c4.getCanonicalName());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//Output:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//java.lang.String\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//io.github.dunwu.javacore.reflect.ReflectClassDemo.E\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//byte[]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//java.util.HashSet\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"判断是否为某个类的实例\"\u003e\u003ca href=\"#判断是否为某个类的实例\" class=\"headerlink\" title=\"判断是否为某个类的实例\"\u003e\u003c/a\u003e判断是否为某个类的实例\u003c/h3\u003e\u003cp\u003e判断是否为某个类的实例有两种方式：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e用 \u003ccode\u003einstanceof\u003c/code\u003e 关键字\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e用 \u003ccode\u003eClass\u003c/code\u003e 对象的 \u003ccode\u003eisInstance\u003c/code\u003e 方法\u003c/strong\u003e（它是一个 Native 方法）\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e【示例】\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eInstanceofDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eArrayList\u003c/span\u003e \u003cspan class=\"variable\"\u003earrayList\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eArrayList\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (arrayList \u003cspan class=\"keyword\"\u003einstanceof\u003c/span\u003e List) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;ArrayList is List\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (List.class.isInstance(arrayList)) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;ArrayList is List\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//Output:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//ArrayList is List\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//ArrayList is List\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"创建实例\"\u003e\u003ca href=\"#创建实例\" class=\"headerlink\" title=\"创建实例\"\u003e\u003c/a\u003e创建实例\u003c/h3\u003e\u003cp\u003e通过反射来创建实例对象主要有两种方式：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e用 \u003ccode\u003eClass\u003c/code\u003e 对象的 \u003ccode\u003enewInstance\u003c/code\u003e 方法。\u003c/li\u003e\n\u003cli\u003e用 \u003ccode\u003eConstructor\u003c/code\u003e 对象的 \u003ccode\u003enewInstance\u003c/code\u003e 方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e【示例】\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eNewInstanceDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Class\u0026lt;?\u0026gt; c1 = StringBuilder.class;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eStringBuilder\u003c/span\u003e \u003cspan class=\"variable\"\u003esb\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e (StringBuilder) c1.newInstance();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        sb.append(\u003cspan class=\"string\"\u003e\u0026#34;aaa\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(sb.toString());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e//获取String所对应的Class对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Class\u0026lt;?\u0026gt; c2 = String.class;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e//获取String类带一个String参数的构造器\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eConstructor\u003c/span\u003e \u003cspan class=\"variable\"\u003econstructor\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e c2.getConstructor(String.class);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e//根据构造器创建实例\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003estr2\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e (String) constructor.newInstance(\u003cspan class=\"string\"\u003e\u0026#34;bbb\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(str2);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//Output:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//aaa\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//bbb\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"创建数组实例\"\u003e\u003ca href=\"#创建数组实例\" class=\"headerlink\" title=\"创建数组实例\"\u003e\u003c/a\u003e创建数组实例\u003c/h3\u003e\u003cp\u003e数组在 Java 里是比较特殊的一种类型，它可以赋值给一个对象引用。Java 中，\u003cstrong\u003e通过 \u003ccode\u003eArray.newInstance\u003c/code\u003e 创建数组的实例\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e【示例】利用反射创建数组\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReflectArrayDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ClassNotFoundException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Class\u0026lt;?\u0026gt; cls = Class.forName(\u003cspan class=\"string\"\u003e\u0026#34;java.lang.String\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eObject\u003c/span\u003e \u003cspan class=\"variable\"\u003earray\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e Array.newInstance(cls, \u003cspan class=\"number\"\u003e25\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e//往数组里添加内容\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Array.set(array, \u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Scala\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Array.set(array, \u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Java\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Array.set(array, \u003cspan class=\"number\"\u003e2\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Groovy\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Array.set(array, \u003cspan class=\"number\"\u003e3\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Scala\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Array.set(array, \u003cspan class=\"number\"\u003e4\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Clojure\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e//获取某一项的内容\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(Array.get(array, \u003cspan class=\"number\"\u003e3\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//Output:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//Scala\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e其中的 Array 类为 \u003ccode\u003ejava.lang.reflect.Array\u003c/code\u003e 类。我们\u003ccode\u003eArray.newInstance\u003c/code\u003e 的原型是：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e Object \u003cspan class=\"title function_\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"params\"\u003e(Class\u0026lt;?\u0026gt; componentType, \u003cspan class=\"type\"\u003eint\u003c/span\u003e length)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e NegativeArraySizeException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e newArray(componentType, length);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"Field\"\u003e\u003ca href=\"#Field\" class=\"headerlink\" title=\"Field\"\u003e\u003c/a\u003eField\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eClass\u003c/code\u003e 对象提供以下方法获取对象的成员（\u003ccode\u003eField\u003c/code\u003e）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egetFiled\u003c/code\u003e - 根据名称获取公有的（public）类成员。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egetDeclaredField\u003c/code\u003e - 根据名称获取已声明的类成员。但不能得到其父类的类成员。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egetFields\u003c/code\u003e - 获取所有公有的（public）类成员。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egetDeclaredFields\u003c/code\u003e - 获取所有已声明的类成员。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e示例如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReflectFieldDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eFieldSpy\u003c/span\u003e\u0026lt;T\u0026gt; {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"type\"\u003eboolean\u003c/span\u003e[][] b = { {\u003cspan class=\"literal\"\u003efalse\u003c/span\u003e, \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e}, {\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e, \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e} };\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003ename\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;Alice\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e List\u0026lt;Integer\u0026gt; list;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e T val;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e NoSuchFieldException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eField\u003c/span\u003e \u003cspan class=\"variable\"\u003ef1\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e FieldSpy.class.getField(\u003cspan class=\"string\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.format(\u003cspan class=\"string\"\u003e\u0026#34;Type: %s%n\u0026#34;\u003c/span\u003e, f1.getType());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eField\u003c/span\u003e \u003cspan class=\"variable\"\u003ef2\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e FieldSpy.class.getField(\u003cspan class=\"string\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.format(\u003cspan class=\"string\"\u003e\u0026#34;Type: %s%n\u0026#34;\u003c/span\u003e, f2.getType());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eField\u003c/span\u003e \u003cspan class=\"variable\"\u003ef3\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e FieldSpy.class.getField(\u003cspan class=\"string\"\u003e\u0026#34;list\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.format(\u003cspan class=\"string\"\u003e\u0026#34;Type: %s%n\u0026#34;\u003c/span\u003e, f3.getType());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eField\u003c/span\u003e \u003cspan class=\"variable\"\u003ef4\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e FieldSpy.class.getField(\u003cspan class=\"string\"\u003e\u0026#34;val\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.format(\u003cspan class=\"string\"\u003e\u0026#34;Type: %s%n\u0026#34;\u003c/span\u003e, f4.getType());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//Output:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//Type: class [[Z\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//Type: class java.lang.String\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//Type: interface java.util.List\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//Type: class java.lang.Object\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"Method\"\u003e\u003ca href=\"#Method\" class=\"headerlink\" title=\"Method\"\u003e\u003c/a\u003eMethod\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eClass\u003c/code\u003e 对象提供以下方法获取对象的方法（\u003ccode\u003eMethod\u003c/code\u003e）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egetMethod\u003c/code\u003e - 返回类或接口的特定方法。其中第一个参数为方法名称，后面的参数为方法参数对应 Class 的对象。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egetDeclaredMethod\u003c/code\u003e - 返回类或接口的特定声明方法。其中第一个参数为方法名称，后面的参数为方法参数对应 Class 的对象。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egetMethods\u003c/code\u003e - 返回类或接口的所有 public 方法，包括其父类的 public 方法。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egetDeclaredMethods\u003c/code\u003e - 返回类或接口声明的所有方法，包括 public、protected、默认（包）访问和 private 方法，但不包括继承的方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e获取一个 \u003ccode\u003eMethod\u003c/code\u003e 对象后，可以用 \u003ccode\u003einvoke\u003c/code\u003e 方法来调用这个方法。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003einvoke\u003c/code\u003e 方法的原型为:\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e Object \u003cspan class=\"title function_\"\u003einvoke\u003c/span\u003e\u003cspan class=\"params\"\u003e(Object obj, Object... args)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e IllegalAccessException, IllegalArgumentException,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e           InvocationTargetException\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【示例】\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReflectMethodDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e NoSuchMethodException, InvocationTargetException, IllegalAccessException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 返回所有方法\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Method[] methods1 = System.class.getDeclaredMethods();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;System getDeclaredMethods 清单（数量 = \u0026#34;\u003c/span\u003e + methods1.length + \u003cspan class=\"string\"\u003e\u0026#34;）：\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (Method m : methods1) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(m);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 返回所有 public 方法\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Method[] methods2 = System.class.getMethods();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;System getMethods 清单（数量 = \u0026#34;\u003c/span\u003e + methods2.length + \u003cspan class=\"string\"\u003e\u0026#34;）：\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (Method m : methods2) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(m);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 利用 Method 的 invoke 方法调用 System.currentTimeMillis()\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eMethod\u003c/span\u003e \u003cspan class=\"variable\"\u003emethod\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e System.class.getMethod(\u003cspan class=\"string\"\u003e\u0026#34;currentTimeMillis\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(method);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(method.invoke(\u003cspan class=\"literal\"\u003enull\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"Constructor\"\u003e\u003ca href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"\u003e\u003c/a\u003eConstructor\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eClass\u003c/code\u003e 对象提供以下方法获取对象的构造方法（\u003ccode\u003eConstructor\u003c/code\u003e）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egetConstructor\u003c/code\u003e - 返回类的特定 public 构造方法。参数为方法参数对应 Class 的对象。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egetDeclaredConstructor\u003c/code\u003e - 返回类的特定构造方法。参数为方法参数对应 Class 的对象。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egetConstructors\u003c/code\u003e - 返回类的所有 public 构造方法。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egetDeclaredConstructors\u003c/code\u003e - 返回类的所有构造方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e获取一个 \u003ccode\u003eConstructor\u003c/code\u003e 对象后，可以用 \u003ccode\u003enewInstance\u003c/code\u003e 方法来创建类实例。\u003c/p\u003e\n\u003cp\u003e【示例】\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eReflectMethodConstructorDemo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Constructor\u0026lt;?\u0026gt;[] constructors1 = String.class.getDeclaredConstructors();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;String getDeclaredConstructors 清单（数量 = \u0026#34;\u003c/span\u003e + constructors1.length + \u003cspan class=\"string\"\u003e\u0026#34;）：\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (Constructor c : constructors1) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(c);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Constructor\u0026lt;?\u0026gt;[] constructors2 = String.class.getConstructors();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;String getConstructors 清单（数量 = \u0026#34;\u003c/span\u003e + constructors2.length + \u003cspan class=\"string\"\u003e\u0026#34;）：\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (Constructor c : constructors2) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            System.out.println(c);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;====================\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eConstructor\u003c/span\u003e \u003cspan class=\"variable\"\u003econstructor\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e String.class.getConstructor(String.class);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(constructor);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003estr\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e (String) constructor.newInstance(\u003cspan class=\"string\"\u003e\u0026#34;bbb\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(str);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"绕开访问限制\"\u003e\u003ca href=\"#绕开访问限制\" class=\"headerlink\" title=\"绕开访问限制\"\u003e\u003c/a\u003e绕开访问限制\u003c/h3\u003e\u003cp\u003e有时候，我们需要通过反射访问私有成员、方法。可以使用 \u003ccode\u003eConstructor/Field/Method.setAccessible(true)\u003c/code\u003e 来绕开 Java 语言的访问限制。\u003c/p\u003e\n\u003ch2 id=\"动态代理\"\u003e\u003ca href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"\u003e\u003c/a\u003e动态代理\u003c/h2\u003e\u003cp\u003e动态代理是一种方便运行时动态构建代理、动态处理代理方法调用的机制，很多场景都是利用类似机制做到的，比如用来包装 RPC 调用、面向切面的编程（AOP）。\u003c/p\u003e\n\u003cp\u003e实现动态代理的方式很多，比如 JDK 自身提供的动态代理，就是主要利用了上面提到的反射机制。还有其他的实现方式，比如利用传说中更高性能的字节码操作机制，类似 ASM、cglib（基于 ASM）、Javassist 等。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/xmind/Java%E4%BB%A3%E7%90%86.svg\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"静态代理\"\u003e\u003ca href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"\u003e\u003c/a\u003e静态代理\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003e静态代理其实就是指设计模式中的代理模式。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e代理模式为其他对象提供一种代理以控制对这个对象的访问。\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg src=\"https://upload-images.jianshu.io/upload_images/3101171-6269723ea61527bd.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSubject\u003c/strong\u003e 定义了 RealSubject 和 Proxy 的公共接口，这样就在任何使用 RealSubject 的地方都可以使用 Proxy 。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eabstract\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSubject\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eabstract\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eRequest\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eRealSubject\u003c/strong\u003e 定义 Proxy 所代表的真实实体。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRealSubject\u003c/span\u003e \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSubject\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eRequest\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;真实的请求\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eProxy\u003c/strong\u003e 保存一个引用使得代理可以访问实体，并提供一个与 Subject 的接口相同的接口，这样代理就可以用来替代实体。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eProxy\u003c/span\u003e \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSubject\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e RealSubject real;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eRequest\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"literal\"\u003enull\u003c/span\u003e == real) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            real = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRealSubject\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        real.Request();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e说明：\u003c/p\u003e\n\u003cp\u003e静态代理模式固然在访问无法访问的资源，增强现有的接口业务功能方面有很大的优点，但是大量使用这种静态代理，会使我们系统内的类的规模增大，并且不易维护；并且由于 Proxy 和 RealSubject 的功能本质上是相同的，Proxy 只是起到了中介的作用，这种代理在系统中的存在，导致系统结构比较臃肿和松散。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"JDK-动态代理\"\u003e\u003ca href=\"#JDK-动态代理\" class=\"headerlink\" title=\"JDK 动态代理\"\u003e\u003c/a\u003eJDK 动态代理\u003c/h3\u003e\u003cp\u003e为了解决静态代理的问题，就有了创建动态代理的想法：\u003c/p\u003e\n\u003cp\u003e在运行状态中，需要代理的地方，根据 Subject 和 RealSubject，动态地创建一个 Proxy，用完之后，就会销毁，这样就可以避免了 Proxy 角色的 class 在系统中冗杂的问题了。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/1553614585028.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003eJava 动态代理基于经典代理模式，引入了一个 \u003ccode\u003eInvocationHandler\u003c/code\u003e，\u003ccode\u003eInvocationHandler\u003c/code\u003e 负责统一管理所有的方法调用。\u003c/p\u003e\n\u003cp\u003e动态代理步骤：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e获取 RealSubject 上的所有接口列表；\u003c/li\u003e\n\u003cli\u003e确定要生成的代理类的类名，默认为：\u003ccode\u003ecom.sun.proxy.$ProxyXXXX\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e根据需要实现的接口信息，在代码中动态创建 该 Proxy 类的字节码；\u003c/li\u003e\n\u003cli\u003e将对应的字节码转换为对应的 class 对象；\u003c/li\u003e\n\u003cli\u003e创建 \u003ccode\u003eInvocationHandler\u003c/code\u003e 实例 handler，用来处理 \u003ccode\u003eProxy\u003c/code\u003e 所有方法调用；\u003c/li\u003e\n\u003cli\u003eProxy 的 class 对象 以创建的 handler 对象为参数，实例化一个 proxy 对象。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e从上面可以看出，JDK 动态代理的实现是基于实现接口的方式，使得 Proxy 和 RealSubject 具有相同的功能。\u003c/p\u003e\n\u003cp\u003e但其实还有一种思路：通过继承。即：让 Proxy 继承 RealSubject，这样二者同样具有相同的功能，Proxy 还可以通过重写 RealSubject 中的方法，来实现多态。CGLIB 就是基于这种思路设计的。\u003c/p\u003e\n\u003cp\u003e在 Java 的动态代理机制中，有两个重要的类（接口），一个是 \u003ccode\u003eInvocationHandler\u003c/code\u003e 接口、另一个则是 \u003ccode\u003eProxy\u003c/code\u003e 类，这一个类和一个接口是实现我们动态代理所必须用到的。\u003c/p\u003e\n\u003ch4 id=\"InvocationHandler-接口\"\u003e\u003ca href=\"#InvocationHandler-接口\" class=\"headerlink\" title=\"InvocationHandler 接口\"\u003e\u003c/a\u003eInvocationHandler 接口\u003c/h4\u003e\u003cp\u003e\u003ccode\u003eInvocationHandler\u003c/code\u003e 接口定义：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"title class_\"\u003eInvocationHandler\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e Object \u003cspan class=\"title function_\"\u003einvoke\u003c/span\u003e\u003cspan class=\"params\"\u003e(Object proxy, Method method, Object[] args)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e Throwable;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e每一个动态代理类都必须要实现 \u003ccode\u003eInvocationHandler\u003c/code\u003e 这个接口，并且每个代理类的实例都关联到了一个 Handler，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由 \u003ccode\u003eInvocationHandler\u003c/code\u003e 这个接口的 \u003ccode\u003einvoke\u003c/code\u003e 方法来进行调用。\u003c/p\u003e\n\u003cp\u003e我们来看看 InvocationHandler 这个接口的唯一一个方法 invoke 方法：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eObject \u003cspan class=\"title function_\"\u003einvoke\u003c/span\u003e\u003cspan class=\"params\"\u003e(Object proxy, Method method, Object[] args)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e Throwable\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e参数说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eproxy\u003c/strong\u003e - 代理的真实对象。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003emethod\u003c/strong\u003e - 所要调用真实对象的某个方法的 \u003ccode\u003eMethod\u003c/code\u003e 对象\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eargs\u003c/strong\u003e - 所要调用真实对象某个方法时接受的参数\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果不是很明白，等下通过一个实例会对这几个参数进行更深的讲解。\u003c/p\u003e\n\u003ch4 id=\"Proxy-类\"\u003e\u003ca href=\"#Proxy-类\" class=\"headerlink\" title=\"Proxy 类\"\u003e\u003c/a\u003eProxy 类\u003c/h4\u003e\u003cp\u003e\u003ccode\u003eProxy\u003c/code\u003e 这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 \u003ccode\u003enewProxyInstance\u003c/code\u003e 这个方法：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e Object \u003cspan class=\"title function_\"\u003enewProxyInstance\u003c/span\u003e\u003cspan class=\"params\"\u003e(ClassLoader loader, Class\u0026lt;?\u0026gt;[] interfaces,  InvocationHandler h)\u003c/span\u003e  \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e IllegalArgumentException\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这个方法的作用就是得到一个动态的代理对象。\u003c/p\u003e\n\u003cp\u003e参数说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eloader\u003c/strong\u003e - 一个 \u003ccode\u003eClassLoader\u003c/code\u003e 对象，定义了由哪个 \u003ccode\u003eClassLoader\u003c/code\u003e 对象来对生成的代理对象进行加载。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003einterfaces\u003c/strong\u003e - 一个 \u003ccode\u003eClass\u0026lt;?\u0026gt;\u003c/code\u003e 对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eh\u003c/strong\u003e - 一个 \u003ccode\u003eInvocationHandler\u003c/code\u003e 对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个 \u003ccode\u003eInvocationHandler\u003c/code\u003e 对象上\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"JDK-动态代理实例\"\u003e\u003ca href=\"#JDK-动态代理实例\" class=\"headerlink\" title=\"JDK 动态代理实例\"\u003e\u003c/a\u003eJDK 动态代理实例\u003c/h4\u003e\u003cp\u003e上面的内容介绍完这两个接口(类)以后，我们来通过一个实例来看看我们的动态代理模式是什么样的：\u003c/p\u003e\n\u003cp\u003e首先我们定义了一个 Subject 类型的接口，为其声明了两个方法：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSubject\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003ehello\u003c/span\u003e\u003cspan class=\"params\"\u003e(String str)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    String \u003cspan class=\"title function_\"\u003ebye\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e接着，定义了一个类来实现这个接口，这个类就是我们的真实对象，RealSubject 类：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRealSubject\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSubject\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003ehello\u003c/span\u003e\u003cspan class=\"params\"\u003e(String str)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;Hello  \u0026#34;\u003c/span\u003e + str);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"title function_\"\u003ebye\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;Goodbye\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;Over\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e下一步，我们就要定义一个动态代理类了，前面说个，每一个动态代理类都必须要实现 InvocationHandler 这个接口，因此我们这个动态代理类也不例外：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eInvocationHandlerDemo\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eInvocationHandler\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 这个就是我们要代理的真实对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e Object subject;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 构造方法，给我们要代理的真实对象赋初值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"title function_\"\u003eInvocationHandlerDemo\u003c/span\u003e\u003cspan class=\"params\"\u003e(Object subject)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.subject = subject;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e Object \u003cspan class=\"title function_\"\u003einvoke\u003c/span\u003e\u003cspan class=\"params\"\u003e(Object object, Method method, Object[] args)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e Throwable {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 在代理真实对象前我们可以添加一些自己的操作\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;Before method\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;Call Method: \u0026#34;\u003c/span\u003e + method);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eObject\u003c/span\u003e \u003cspan class=\"variable\"\u003eobj\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e method.invoke(subject, args);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 在代理真实对象后我们也可以添加一些自己的操作\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;After method\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e obj;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e最后，来看看我们的 Client 类：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eClient\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(String[] args)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 我们要代理的真实对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eSubject\u003c/span\u003e \u003cspan class=\"variable\"\u003erealSubject\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRealSubject\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// 我们要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eInvocationHandler\u003c/span\u003e \u003cspan class=\"variable\"\u003ehandler\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eInvocationHandlerDemo\u003c/span\u003e(realSubject);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e/*\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，我们来看看其三个参数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e         * 第一个参数 handler.getClass().getClassLoader() ，我们这里使用handler这个类的ClassLoader对象来加载我们的代理对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e         * 第二个参数realSubject.getClass().getInterfaces()，我们这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样我就能调用这组接口中的方法了\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e         * 第三个参数handler， 我们这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e         */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eSubject\u003c/span\u003e \u003cspan class=\"variable\"\u003esubject\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                .getClass().getInterfaces(), handler);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(subject.getClass().getName());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        subject.hello(\u003cspan class=\"string\"\u003e\u0026#34;World\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003eresult\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e subject.bye();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        System.out.println(\u003cspan class=\"string\"\u003e\u0026#34;Result is: \u0026#34;\u003c/span\u003e + result);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e我们先来看看控制台的输出：\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecom\u003cspan class=\"selector-class\"\u003e.sun\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.proxy\u003c/span\u003e.\u003cspan class=\"variable\"\u003e$Proxy0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eBefore method\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCall Method: public abstract void io\u003cspan class=\"selector-class\"\u003e.github\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.dunwu\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.javacore\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.reflect\u003c/span\u003e.InvocationHandlerDemo\u003cspan class=\"variable\"\u003e$Subject\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.hello\u003c/span\u003e(java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e.String)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello  World\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAfter method\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eBefore method\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCall Method: public abstract java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.String\u003c/span\u003e io\u003cspan class=\"selector-class\"\u003e.github\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.dunwu\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.javacore\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.reflect\u003c/span\u003e.InvocationHandlerDemo\u003cspan class=\"variable\"\u003e$Subject\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.bye\u003c/span\u003e()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eGoodbye\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAfter method\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eResult is: Over\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e我们首先来看看 \u003ccode\u003ecom.sun.proxy.$Proxy0\u003c/code\u003e 这东西，我们看到，这个东西是由 \u003ccode\u003eSystem.out.println(subject.getClass().getName());\u003c/code\u003e 这条语句打印出来的，那么为什么我们返回的这个代理对象的类名是这样的呢？\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eSubject\u003c/span\u003e \u003cspan class=\"variable\"\u003esubject\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                .getClass().getInterfaces(), handler);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可能我以为返回的这个代理对象会是 Subject 类型的对象，或者是 InvocationHandler 的对象，结果却不是，首先我们解释一下\u003cstrong\u003e为什么我们这里可以将其转化为 Subject 类型的对象？\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e原因就是：在 newProxyInstance 这个方法的第二个参数上，我们给这个代理对象提供了一组什么接口，那么我这个代理对象就会实现了这组接口，这个时候我们当然可以将这个代理对象强制类型转化为这组接口中的任意一个，因为这里的接口是 Subject 类型，所以就可以将其转化为 Subject 类型了。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e同时我们一定要记住，通过 \u003ccode\u003eProxy.newProxyInstance\u003c/code\u003e 创建的代理对象是在 jvm 运行时动态生成的一个对象，它并不是我们的 InvocationHandler 类型，也不是我们定义的那组接口的类型，而是在运行是动态生成的一个对象，并且命名方式都是这样的形式，以$开头，proxy 为中，最后一个数字表示对象的标号\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e接着我们来看看这两句\u003c/p\u003e\n\u003cfigure class=\"highlight abnf\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003esubject.hello(\u003cspan class=\"string\"\u003e\u0026#34;World\u0026#34;\u003c/span\u003e)\u003cspan class=\"comment\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eString result \u003cspan class=\"operator\"\u003e=\u003c/span\u003e subject.bye()\u003cspan class=\"comment\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里是通过代理对象来调用实现的那种接口中的方法，这个时候程序就会跳转到由这个代理对象关联到的 handler 中的 invoke 方法去执行，而我们的这个 handler 对象又接受了一个 RealSubject 类型的参数，表示我要代理的就是这个真实对象，所以此时就会调用 handler 中的 invoke 方法去执行。\u003c/p\u003e\n\u003cp\u003e我们看到，在真正通过代理对象来调用真实对象的方法的时候，我们可以在该方法前后添加自己的一些操作，同时我们看到我们的这个 method 对象是这样的：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eabstract\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e io.github.dunwu.javacore.reflect.InvocationHandlerDemo$Subject.hello(java.lang.String)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eabstract\u003c/span\u003e java.lang.String io.github.dunwu.javacore.reflect.InvocationHandlerDemo$Subject.bye()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e正好就是我们的 Subject 接口中的两个方法，这也就证明了当我通过代理对象来调用方法的时候，起实际就是委托由其关联到的 handler 对象的 invoke 方法中来调用，并不是自己来真实调用，而是通过代理的方式来调用的。\u003c/p\u003e\n\u003ch4 id=\"JDK-动态代理小结\"\u003e\u003ca href=\"#JDK-动态代理小结\" class=\"headerlink\" title=\"JDK 动态代理小结\"\u003e\u003c/a\u003eJDK 动态代理小结\u003c/h4\u003e\u003cp\u003e代理类与委托类实现同一接口，主要是通过代理类实现 \u003ccode\u003eInvocationHandler\u003c/code\u003e 并重写 \u003ccode\u003einvoke\u003c/code\u003e 方法来进行动态代理的，在 \u003ccode\u003einvoke\u003c/code\u003e 方法中将对方法进行处理。\u003c/p\u003e\n\u003cp\u003eJDK 动态代理特点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e优点：相对于静态代理模式，不需要硬编码接口，代码复用率高。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e缺点：强制要求代理类实现 \u003ccode\u003eInvocationHandler\u003c/code\u003e 接口。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"CGLIB-动态代理\"\u003e\u003ca href=\"#CGLIB-动态代理\" class=\"headerlink\" title=\"CGLIB 动态代理\"\u003e\u003c/a\u003eCGLIB 动态代理\u003c/h3\u003e\u003cp\u003eCGLIB 提供了与 JDK 动态代理不同的方案。很多框架，例如 Spring AOP 中，就使用了 CGLIB 动态代理。\u003c/p\u003e\n\u003cp\u003eCGLIB 底层，其实是借助了 ASM 这个强大的 Java 字节码框架去进行字节码增强操作。\u003c/p\u003e\n\u003cp\u003eCGLIB 动态代理的工作步骤：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e生成代理类的二进制字节码文件；\u003c/li\u003e\n\u003cli\u003e加载二进制字节码，生成 \u003ccode\u003eClass\u003c/code\u003e 对象( 例如使用 \u003ccode\u003eClass.forName()\u003c/code\u003e 方法 )；\u003c/li\u003e\n\u003cli\u003e通过反射机制获得实例构造，并创建代理类对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCGLIB 动态代理特点：\u003c/p\u003e\n\u003cp\u003e优点：使用字节码增强，比 JDK 动态代理方式性能高。可以在运行时对类或者是接口进行增强操作，且委托类无需实现接口。\u003c/p\u003e\n\u003cp\u003e缺点：不能对 \u003ccode\u003efinal\u003c/code\u003e 类以及 \u003ccode\u003efinal\u003c/code\u003e 方法进行代理。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e参考：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.jianshu.com/p/9a61af393e41\"\u003e深入理解 CGLIB 动态代理机制\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/2130190/\"\u003eJava 编程思想\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/3146174/\"\u003eJava 核心技术（卷 1）\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100010301\"\u003e深入拆解 Java 虚拟机\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.sczyh30.com/posts/Java/java-reflection-1/\"\u003e深入解析 Java 反射（1） - 基础\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/sinat_38259539/article/details/71799078\"\u003eJava 基础之—反射（非常重要）\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.oracle.com/javase/tutorial/reflect/index.html\"\u003e官方 Reflection API 文档\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.cnblogs.com/xiaoluo501395377/p/3383130.html\"\u003eJava 的动态代理机制详解\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/luanlouis/article/details/24589193\"\u003eJava 动态代理机制详解（JDK 和 CGLIB，Javassist，ASM）\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.jianshu.com/p/471c80a7e831\"\u003e深入理解 JDK 动态代理机制\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.jianshu.com/p/9a61af393e41\"\u003e深入理解 CGLIB 动态代理机制\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-06-04T05:51:01Z",
  "Author": "钝悟 ◾ Dunwu"
}