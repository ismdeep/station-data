{
  "Source": "dunwu",
  "Title": "JVM 命令行工具",
  "Link": "https://dunwu.github.io/blog/pages/c590ae/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"JVM-命令行工具\"\u003e\u003ca href=\"#JVM-命令行工具\" class=\"headerlink\" title=\"JVM 命令行工具\"\u003e\u003c/a\u003eJVM 命令行工具\u003c/h1\u003e\u003cblockquote\u003e\n\u003cp\u003eJava 程序员免不了故障排查工作，所以经常需要使用一些 JVM 工具。\u003c/p\u003e\n\u003cp\u003eJDK 自带了一些实用的命令行工具来监控、分析 JVM 信息，掌握它们，非常有助于 TroubleShooting。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e以下是较常用的 JDK 命令行工具：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e名称\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ejps\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJVM 进程状态工具。显示系统内的所有 JVM 进程。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ejstat\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJVM 统计监控工具。监控虚拟机运行时状态信息，它可以显示出 JVM 进程中的类装载、内存、GC、JIT 编译等运行数据。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ejmap\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJVM 堆内存分析工具。用于打印 JVM 进程对象直方图、类加载统计。并且可以生成堆转储快照（一般称为 heapdump 或 dump 文件）。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ejstack\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJVM 栈查看工具。用于打印 JVM 进程的线程和锁的情况。并且可以生成线程快照（一般称为 threaddump 或 javacore 文件）。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ejhat\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e用来分析 jmap 生成的 dump 文件。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ejinfo\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJVM 信息查看工具。用于实时查看和调整 JVM 进程参数。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ejcmd\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJVM 命令行调试 工具。用于向 JVM 进程发送调试命令。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"jps\"\u003e\u003ca href=\"#jps\" class=\"headerlink\" title=\"jps\"\u003e\u003c/a\u003ejps\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.oracle.com/en/java/javase/11/tools/jps.html#GUID-6EB65B96-F9DD-4356-B825-6146E9EEC81E\"\u003ejps(JVM Process Status Tool)\u003c/a\u003e 是虚拟机进程状态工具\u003c/strong\u003e。它可以显示指定系统内所有的 HotSpot 虚拟机进程状态信息。jps 通过 RMI 协议查询开启了 RMI 服务的远程虚拟机进程状态。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"jps-命令用法\"\u003e\u003ca href=\"#jps-命令用法\" class=\"headerlink\" title=\"jps 命令用法\"\u003e\u003c/a\u003ejps 命令用法\u003c/h3\u003e\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ejps [option] [hostid]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ejps [-help]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果不指定 hostid 就默认为当前主机或服务器。\u003c/p\u003e\n\u003cp\u003e常用参数：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eoption\u003c/code\u003e - 选项参数\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e-m\u003c/code\u003e - 输出 JVM 启动时传递给 main() 的参数。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-l\u003c/code\u003e - 输出主类的全名，如果进程执行的是 jar 包，输出 jar 路径。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-v\u003c/code\u003e - 显示传递给 JVM 的参数。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-q\u003c/code\u003e - 仅输出本地 JVM 进程 ID。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-V\u003c/code\u003e - 仅输出本地 JVM 标识符。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehostid\u003c/code\u003e - RMI 注册表中注册的主机名。如果不指定 hostid 就默认为当前主机或服务器。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e其中 \u003ccode\u003eoption\u003c/code\u003e、\u003ccode\u003ehostid\u003c/code\u003e 参数也可以不写。\u003c/p\u003e\n\u003ch3 id=\"jps-使用示例\"\u003e\u003ca href=\"#jps-使用示例\" class=\"headerlink\" title=\"jps 使用示例\"\u003e\u003c/a\u003ejps 使用示例\u003c/h3\u003e\u003cp\u003e【示例】列出本地 Java 进程\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e$ \u003c/span\u003e\u003cspan class=\"language-bash\"\u003ejps\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18027 Java2Demo.JAR\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18032 jps\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18005 jstat\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【示例】列出本地 Java 进程 ID\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e$ \u003c/span\u003e\u003cspan class=\"language-bash\"\u003ejps -q\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8841\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1292\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5398\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【示例】列出本地 Java 进程 ID，并输出主类的全名，如果进程执行的是 jar 包，输出 jar 路径\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e$ \u003c/span\u003e\u003cspan class=\"language-bash\"\u003ejps -l remote.domain\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3002 /opt/jdk1.7.0/demo/jfc/Java2D/Java2Demo.JAR\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2857 sun.tools.jstatd.jstatd\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"jstat\"\u003e\u003ca href=\"#jstat\" class=\"headerlink\" title=\"jstat\"\u003e\u003c/a\u003ejstat\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.oracle.com/en/java/javase/11/tools/jstat.html\"\u003ejstat(JVM statistics Monitoring)\u003c/a\u003e，是虚拟机统计信息监视工具\u003c/strong\u003e。jstat 用于监视虚拟机运行时状态信息，它可以显示出虚拟机进程中的类装载、内存、垃圾收集、JIT 编译等运行数据。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"jstat-命令用法\"\u003e\u003ca href=\"#jstat-命令用法\" class=\"headerlink\" title=\"jstat 命令用法\"\u003e\u003c/a\u003ejstat 命令用法\u003c/h3\u003e\u003cp\u003e命令格式：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ejstat [option] VMID [interval] [count]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e常用参数：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eoption\u003c/code\u003e - 选项参数，用于指定用户需要查询的虚拟机信息\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e-class\u003c/code\u003e - 监视类装载、卸载数量、总空间以及类装载所耗费的时间\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-compiler\u003c/code\u003e：显示 JIT 编译的相关信息；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-gc\u003c/code\u003e：监视 Java 堆状况，包括 Eden 区、两个 survivor 区、老年代、永久代等区的容量、已用空间、GC 时间合计等信息。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-gccapacity\u003c/code\u003e：显示各个代的容量以及使用情况；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-gcmetacapacity\u003c/code\u003e：显示 Metaspace 的大小；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-gcnew\u003c/code\u003e：显示新生代信息；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-gcnewcapacity\u003c/code\u003e：显示新生代大小和使用情况；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-gcold\u003c/code\u003e：显示老年代和永久代的信息；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-gcoldcapacity\u003c/code\u003e：显示老年代的大小；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-gcutil\u003c/code\u003e：显示垃圾回收统计信息；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-gccause\u003c/code\u003e：显示垃圾回收的相关信息（通 -gcutil），同时显示最后一次或当前正在发生的垃圾回收的诱因；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-printcompilation\u003c/code\u003e：输出 JIT 编译的方法信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVMID\u003c/code\u003e - 如果是本地虚拟机进程，则 VMID 与 LVMID 是一致的；如果是远程虚拟机进程，那 VMID 的格式应当是：\u003ccode\u003e[protocol:][//]lvmid[@hostname[:port]/servername]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003einterval\u003c/code\u003e - 查询间隔\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecount\u003c/code\u003e - 查询次数\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e【参考】更详细说明可以参考：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.cnblogs.com/yjd_hycf_space/p/7755633.html\"\u003ejstat 命令查看 jvm 的 GC 情况\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"jstat-使用示例\"\u003e\u003ca href=\"#jstat-使用示例\" class=\"headerlink\" title=\"jstat 使用示例\"\u003e\u003c/a\u003ejstat 使用示例\u003c/h3\u003e\u003ch4 id=\"类加载统计\"\u003e\u003ca href=\"#类加载统计\" class=\"headerlink\" title=\"类加载统计\"\u003e\u003c/a\u003e类加载统计\u003c/h4\u003e\u003cp\u003e使用 \u003ccode\u003ejstat -class pid\u003c/code\u003e 命令可以查看编译统计信息。\u003c/p\u003e\n\u003cp\u003e【参数】\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLoaded - 加载 class 的数量\u003c/li\u003e\n\u003cli\u003eBytes - 所占用空间大小\u003c/li\u003e\n\u003cli\u003eUnloaded - 未加载数量\u003c/li\u003e\n\u003cli\u003eBytes - 未加载占用空间\u003c/li\u003e\n\u003cli\u003eTime - 时间\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e【示例】查看类加载信息\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e$ \u003c/span\u003e\u003cspan class=\"language-bash\"\u003ejstat -class 7129\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eLoaded  Bytes  Unloaded  Bytes     Time\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 26749 50405.3      873  1216.8      19.75\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"编译统计\"\u003e\u003ca href=\"#编译统计\" class=\"headerlink\" title=\"编译统计\"\u003e\u003c/a\u003e编译统计\u003c/h4\u003e\u003cp\u003e使用 \u003ccode\u003ejstat -compiler pid\u003c/code\u003e 命令可以查看编译统计信息。\u003c/p\u003e\n\u003cp\u003e【示例】\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e$ \u003c/span\u003e\u003cspan class=\"language-bash\"\u003ejstat -compiler 7129\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCompiled Failed Invalid   Time   FailedType FailedMethod\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   42030      2       0   302.53          1 org/apache/felix/framework/BundleWiringImpl$BundleClassLoader findClass\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【参数】\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCompiled - 编译数量\u003c/li\u003e\n\u003cli\u003eFailed - 失败数量\u003c/li\u003e\n\u003cli\u003eInvalid - 不可用数量\u003c/li\u003e\n\u003cli\u003eTime - 时间\u003c/li\u003e\n\u003cli\u003eFailedType - 失败类型\u003c/li\u003e\n\u003cli\u003eFailedMethod - 失败的方法\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"GC-统计\"\u003e\u003ca href=\"#GC-统计\" class=\"headerlink\" title=\"GC 统计\"\u003e\u003c/a\u003eGC 统计\u003c/h4\u003e\u003cp\u003e使用 \u003ccode\u003ejstat -gc pid time\u003c/code\u003e 命令可以查看 GC 统计信息。\u003c/p\u003e\n\u003cp\u003e【示例】以 250 毫秒的间隔进行 7 个采样，并显示-gcutil 选项指定的输出。\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e$ \u003c/span\u003e\u003cspan class=\"language-bash\"\u003ejstat -gcutil 21891 250 7\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  0.00  97.02  70.31  66.80  95.52  89.14      7    0.300     0    0.000    0.300\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  0.00  97.02  86.23  66.80  95.52  89.14      7    0.300     0    0.000    0.300\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  0.00  97.02  96.53  66.80  95.52  89.14      7    0.300     0    0.000    0.300\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 91.03   0.00   1.98  68.19  95.89  91.24      8    0.378     0    0.000    0.378\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 91.03   0.00  15.82  68.19  95.89  91.24      8    0.378     0    0.000    0.378\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 91.03   0.00  17.80  68.19  95.89  91.24      8    0.378     0    0.000    0.378\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 91.03   0.00  17.80  68.19  95.89  91.24      8    0.378     0    0.000    0.378\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【示例】以 1 秒的间隔进行 4 个采样，并显示-gc 选项指定的输出。\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e$ \u003c/span\u003e\u003cspan class=\"language-bash\"\u003ejstat -gc 25196 1s 4\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20928.0 20928.0  0.0    0.0   167936.0  8880.5   838912.0   80291.2   106668.0 100032.1 12772.0 11602.2    760   14.332  580   656.218  670.550\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20928.0 20928.0  0.0    0.0   167936.0  8880.5   838912.0   80291.2   106668.0 100032.1 12772.0 11602.2    760   14.332  580   656.218  670.550\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20928.0 20928.0  0.0    0.0   167936.0  8880.5   838912.0   80291.2   106668.0 100032.1 12772.0 11602.2    760   14.332  580   656.218  670.550\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20928.0 20928.0  0.0    0.0   167936.0  8880.5   838912.0   80291.2   106668.0 100032.1 12772.0 11602.2    760   14.332  580   656.218  670.550\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e参数说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eS0C\u003c/code\u003e：年轻代中 To Survivor 的容量（单位 KB）；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eS1C\u003c/code\u003e：年轻代中 From Survivor 的容量（单位 KB）；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eS0U\u003c/code\u003e：年轻代中 To Survivor 目前已使用空间（单位 KB）；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eS1U\u003c/code\u003e：年轻代中 From Survivor 目前已使用空间（单位 KB）；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEC\u003c/code\u003e：年轻代中 Eden 的容量（单位 KB）；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEU\u003c/code\u003e：年轻代中 Eden 目前已使用空间（单位 KB）；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eOC\u003c/code\u003e：Old 代的容量（单位 KB）；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eOU\u003c/code\u003e：Old 代目前已使用空间（单位 KB）；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMC\u003c/code\u003e：Metaspace 的容量（单位 KB）；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMU\u003c/code\u003e：Metaspace 目前已使用空间（单位 KB）；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eYGC\u003c/code\u003e：从应用程序启动到采样时年轻代中 gc 次数；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eYGCT\u003c/code\u003e：从应用程序启动到采样时年轻代中 gc 所用时间 (s)；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFGC\u003c/code\u003e：从应用程序启动到采样时 old 代（全 gc）gc 次数；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFGCT\u003c/code\u003e：从应用程序启动到采样时 old 代（全 gc）gc 所用时间 (s)；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eGCT\u003c/code\u003e：从应用程序启动到采样时 gc 用的总时间 (s)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注：更详细的参数含义可以参考官方文档：\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html\"\u003ehttp://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"jmap\"\u003e\u003ca href=\"#jmap\" class=\"headerlink\" title=\"jmap\"\u003e\u003c/a\u003ejmap\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.oracle.com/en/java/javase/11/tools/jmap.html\"\u003ejmap(JVM Memory Map)\u003c/a\u003e 是 Java 内存映像工具\u003c/strong\u003e。jmap 用于生成堆转储快照（一般称为 heapdump 或 dump 文件）。jmap 不仅能生成 dump 文件，还可以查询 \u003ccode\u003efinalize\u003c/code\u003e 执行队列、Java 堆和永久代的详细信息，如当前使用率、当前使用的是哪种收集器等。\u003c/p\u003e\n\u003cp\u003e如果不使用这个命令，还可以使用 \u003ccode\u003e-XX:+HeapDumpOnOutOfMemoryError\u003c/code\u003e 参数来让虚拟机出现 OOM 的时候，自动生成 dump 文件。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"jmap-命令用法\"\u003e\u003ca href=\"#jmap-命令用法\" class=\"headerlink\" title=\"jmap 命令用法\"\u003e\u003c/a\u003ejmap 命令用法\u003c/h3\u003e\u003cp\u003e命令格式：\u003c/p\u003e\n\u003cfigure class=\"highlight cmake\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ejmap [\u003cspan class=\"keyword\"\u003eoption\u003c/span\u003e] pid\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eoption\u003c/code\u003e 选项参数：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e-dump\u003c/code\u003e - 生成堆转储快照。\u003ccode\u003e-dump:live\u003c/code\u003e 只保存堆中的存活对象。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-finalizerinfo\u003c/code\u003e - 显示在 F-Queue 队列等待执行 \u003ccode\u003efinalizer\u003c/code\u003e 方法的对象\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-heap\u003c/code\u003e - 显示 Java 堆详细信息。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-histo\u003c/code\u003e - 显示堆中对象的统计信息，包括类、实例数量、合计容量。\u003ccode\u003e-histo:live\u003c/code\u003e 只统计堆中的存活对象。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-permstat\u003c/code\u003e - to print permanent generation statistics\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-F\u003c/code\u003e - 当-dump 没有响应时，强制生成 dump 快照\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"jstat-使用示例-1\"\u003e\u003ca href=\"#jstat-使用示例-1\" class=\"headerlink\" title=\"jstat 使用示例\"\u003e\u003c/a\u003ejstat 使用示例\u003c/h3\u003e\u003ch4 id=\"生成-heapdump-快照\"\u003e\u003ca href=\"#生成-heapdump-快照\" class=\"headerlink\" title=\"生成 heapdump 快照\"\u003e\u003c/a\u003e生成 heapdump 快照\u003c/h4\u003e\u003cp\u003edump 堆到文件，format 指定输出格式，live 指明是活着的对象，file 指定文件名\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e$ \u003c/span\u003e\u003cspan class=\"language-bash\"\u003ejmap -dump:live,format=b,file=dump.hprof 28920\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eDumping heap to /home/xxx/dump.hprof ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHeap dump file created\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003edump.hprof 这个后缀是为了后续可以直接用 MAT(Memory Anlysis Tool)等工具打开。\u003c/p\u003e\n\u003ch4 id=\"查看实例数最多的类\"\u003e\u003ca href=\"#查看实例数最多的类\" class=\"headerlink\" title=\"查看实例数最多的类\"\u003e\u003c/a\u003e查看实例数最多的类\u003c/h4\u003e\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e$ \u003c/span\u003e\u003cspan class=\"language-bash\"\u003ejmap -histo 29527 | \u003cspan class=\"built_in\"\u003ehead\u003c/span\u003e -n 6\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e num     #instances         #bytes  class name\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e----------------------------------------------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   1:      13673280     1438961864  [C\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   2:       1207166      411277184  [I\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   3:       7382322      347307096  [Ljava.lang.Object;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"查看指定进程的堆信息\"\u003e\u003ca href=\"#查看指定进程的堆信息\" class=\"headerlink\" title=\"查看指定进程的堆信息\"\u003e\u003c/a\u003e查看指定进程的堆信息\u003c/h4\u003e\u003cp\u003e注意：使用 CMS GC 情况下，\u003ccode\u003ejmap -heap PID\u003c/code\u003e 的执行有可能会导致 java 进程挂起。\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e$ \u003c/span\u003e\u003cspan class=\"language-bash\"\u003ejmap -heap 12379\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAttaching to process ID 12379, please wait...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eDebugger attached successfully.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eServer compiler detected.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eJVM version is 17.0-b16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eusing thread-local object allocation.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eParallel GC with 6 thread(s)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHeap Configuration:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   MinHeapFreeRatio = 40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   MaxHeapFreeRatio = 70\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   MaxHeapSize      = 83886080 (80.0MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   NewSize          = 1310720 (1.25MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   MaxNewSize       = 17592186044415 MB\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   OldSize          = 5439488 (5.1875MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   NewRatio         = 2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   SurvivorRatio    = 8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   PermSize         = 20971520 (20.0MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   MaxPermSize      = 88080384 (84.0MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHeap Usage:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ePS Young Generation\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eEden Space:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   capacity = 9306112 (8.875MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   used     = 5375360 (5.1263427734375MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   free     = 3930752 (3.7486572265625MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   57.761608714788736% used\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eFrom Space:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   capacity = 9306112 (8.875MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   used     = 3425240 (3.2665634155273438MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   free     = 5880872 (5.608436584472656MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   36.80634834397007% used\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTo Space:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   capacity = 9306112 (8.875MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   used     = 0 (0.0MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   free     = 9306112 (8.875MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   0.0% used\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ePS Old Generation\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   capacity = 55967744 (53.375MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   used     = 48354640 (46.11457824707031MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   free     = 7613104 (7.2604217529296875MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   86.39733629427693% used\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ePS Perm Generation\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   capacity = 62062592 (59.1875MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   used     = 60243112 (57.452308654785156MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   free     = 1819480 (1.7351913452148438MB)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   97.06831451706046% used\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"jstack\"\u003e\u003ca href=\"#jstack\" class=\"headerlink\" title=\"jstack\"\u003e\u003c/a\u003ejstack\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.oracle.com/en/java/javase/11/tools/jstack.html\"\u003ejstack(Stack Trace for java)\u003c/a\u003e 是 Java 堆栈跟踪工具\u003c/strong\u003e。jstack 用来打印目标 Java 进程中各个线程的栈轨迹，以及这些线程所持有的锁，并可以生成 java 虚拟机当前时刻的线程快照（一般称为 threaddump 或 javacore 文件）。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e线程快照是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等\u003c/strong\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ccode\u003ejstack\u003c/code\u003e 通常会结合 \u003ccode\u003etop -Hp pid\u003c/code\u003e 或 \u003ccode\u003epidstat -p pid -t\u003c/code\u003e 一起查看具体线程的状态，也经常用来排查一些死锁的异常。\u003c/p\u003e\n\u003cp\u003e线程出现停顿的时候通过 jstack 来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做什么事情，或者等待什么资源。 如果 java 程序崩溃生成 core 文件，jstack 工具可以用来获得 core 文件的 java stack 和 native stack 的信息，从而可以轻松地知道 java 程序是如何崩溃和在程序何处发生问题。另外，jstack 工具还可以附属到正在运行的 java 程序中，看到当时运行的 java 程序的 java stack 和 native stack 的信息, 如果现在运行的 java 程序呈现 hung 的状态，jstack 是非常有用的。\u003c/p\u003e\n\u003ch3 id=\"jstack-命令用法\"\u003e\u003ca href=\"#jstack-命令用法\" class=\"headerlink\" title=\"jstack 命令用法\"\u003e\u003c/a\u003ejstack 命令用法\u003c/h3\u003e\u003cp\u003e命令格式：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ejstack [option] pid\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eoption\u003c/code\u003e 选项参数\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e-F\u003c/code\u003e - 当正常输出请求不被响应时，强制输出线程堆栈\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-l\u003c/code\u003e - 除堆栈外，显示关于锁的附加信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-m\u003c/code\u003e - 打印 java 和 jni 框架的所有栈信息\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"thread-dump-文件\"\u003e\u003ca href=\"#thread-dump-文件\" class=\"headerlink\" title=\"thread dump 文件\"\u003e\u003c/a\u003ethread dump 文件\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200730112431.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e一个 Thread Dump 文件大致可以分为五个部分。\u003c/p\u003e\n\u003ch4 id=\"第一部分：Full-thread-dump-identifier\"\u003e\u003ca href=\"#第一部分：Full-thread-dump-identifier\" class=\"headerlink\" title=\"第一部分：Full thread dump identifier\"\u003e\u003c/a\u003e第一部分：Full thread dump identifier\u003c/h4\u003e\u003cp\u003e这一部分是内容最开始的部分，展示了快照文件的生成时间和 JVM 的版本信息。\u003c/p\u003e\n\u003cfigure class=\"highlight apache\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003e2017\u003c/span\u003e-\u003cspan class=\"number\"\u003e10\u003c/span\u003e-\u003cspan class=\"number\"\u003e19\u003c/span\u003e \u003cspan class=\"number\"\u003e10\u003c/span\u003e:\u003cspan class=\"number\"\u003e46\u003c/span\u003e:\u003cspan class=\"number\"\u003e44\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003eFull\u003c/span\u003e thread dump Java HotSpot(TM) \u003cspan class=\"number\"\u003e64\u003c/span\u003e-Bit Server VM (\u003cspan class=\"number\"\u003e24\u003c/span\u003e.\u003cspan class=\"number\"\u003e79\u003c/span\u003e-b02 mixed mode):\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"第二部分：Java-EE-middleware-third-party-custom-application-Threads\"\u003e\u003ca href=\"#第二部分：Java-EE-middleware-third-party-custom-application-Threads\" class=\"headerlink\" title=\"第二部分：Java EE middleware, third party \u0026amp; custom application Threads\"\u003e\u003c/a\u003e第二部分：Java EE middleware, third party \u0026amp; custom application Threads\u003c/h4\u003e\u003cp\u003e这是整个文件的核心部分，里面展示了 JavaEE 容器（如 tomcat、resin 等）、自己的程序中所使用的线程信息。\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;resin-22129\u0026#34;\u003c/span\u003e daemon prio=\u003cspan class=\"number\"\u003e10\u003c/span\u003e tid=\u003cspan class=\"number\"\u003e0\u003c/span\u003ex00007fbe5c34e000 nid=\u003cspan class=\"number\"\u003e0\u003c/span\u003ex4cb1 waiting on condition \u003cspan class=\"selector-attr\"\u003e[0x00007fbe4ff7c000]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Thread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.State\u003c/span\u003e: WAITING (parking)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    at sun\u003cspan class=\"selector-class\"\u003e.misc\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Unsafe\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.park\u003c/span\u003e(Native Method)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    at java\u003cspan class=\"selector-class\"\u003e.util\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.concurrent\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.locks\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.LockSupport\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.park\u003c/span\u003e(LockSupport\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e315\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    at com\u003cspan class=\"selector-class\"\u003e.caucho\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.env\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.thread2\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.ResinThread2\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.park\u003c/span\u003e(ResinThread2\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e196\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    at com\u003cspan class=\"selector-class\"\u003e.caucho\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.env\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.thread2\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.ResinThread2\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.runTasks\u003c/span\u003e(ResinThread2\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e147\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    at com\u003cspan class=\"selector-class\"\u003e.caucho\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.env\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.thread2\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.ResinThread2\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.run\u003c/span\u003e(ResinThread2\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e118\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e参数说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u0026#34;resin-22129\u0026#34;\u003c/code\u003e \u003cstrong\u003e线程名称：\u003c/strong\u003e如果使用 java.lang.Thread 类生成一个线程的时候，线程名称为 Thread-(数字) 的形式，这里是 resin 生成的线程；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edaemon\u003c/code\u003e \u003cstrong\u003e线程类型：\u003c/strong\u003e线程分为守护线程 (daemon) 和非守护线程 (non-daemon) 两种，通常都是守护线程；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprio=10\u003c/code\u003e \u003cstrong\u003e线程优先级：\u003c/strong\u003e默认为 5，数字越大优先级越高；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etid=0x00007fbe5c34e000\u003c/code\u003e \u003cstrong\u003eJVM 线程的 id：\u003c/strong\u003eJVM 内部线程的唯一标识，通过 java.lang.Thread.getId()获取，通常用自增的方式实现；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enid=0x4cb1\u003c/code\u003e \u003cstrong\u003e系统线程 id：\u003c/strong\u003e对应的系统线程 id（Native Thread ID)，可以通过 top 命令进行查看，现场 id 是十六进制的形式；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewaiting on condition\u003c/code\u003e \u003cstrong\u003e系统线程状态：\u003c/strong\u003e这里是系统的线程状态；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e[0x00007fbe4ff7c000]\u003c/code\u003e \u003cstrong\u003e起始栈地址：\u003c/strong\u003e线程堆栈调用的其实内存地址；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ejava.lang.Thread.State: WAITING (parking)\u003c/code\u003e \u003cstrong\u003eJVM 线程状态：\u003c/strong\u003e这里标明了线程在代码级别的状态。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e线程调用栈信息：\u003c/strong\u003e下面就是当前线程调用的详细栈信息，用于代码的分析。堆栈信息应该从下向上解读，因为程序调用的顺序是从下向上的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"第三部分：HotSpot-VM-Thread\"\u003e\u003ca href=\"#第三部分：HotSpot-VM-Thread\" class=\"headerlink\" title=\"第三部分：HotSpot VM Thread\"\u003e\u003c/a\u003e第三部分：HotSpot VM Thread\u003c/h4\u003e\u003cp\u003e这一部分展示了 JVM 内部线程的信息，用于执行内部的原生操作。下面常见的集中内置线程：\u003c/p\u003e\n\u003ch5 id=\"“Attach-Listener”\"\u003e\u003ca href=\"#“Attach-Listener”\" class=\"headerlink\" title=\"“Attach Listener”\"\u003e\u003c/a\u003e“Attach Listener”\u003c/h5\u003e\u003cp\u003e该线程负责接收外部命令，执行该命令并把结果返回给调用者，此种类型的线程通常在桌面程序中出现。\u003c/p\u003e\n\u003cfigure class=\"highlight routeros\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;Attach Listener\u0026#34;\u003c/span\u003e daemon \u003cspan class=\"attribute\"\u003eprio\u003c/span\u003e=5 \u003cspan class=\"attribute\"\u003etid\u003c/span\u003e=0x00007fc6b6800800 \u003cspan class=\"attribute\"\u003enid\u003c/span\u003e=0x3b07 waiting on condition [0x0000000000000000]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   java.lang.Thread.State: RUNNABLE\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch5 id=\"“DestroyJavaVM”\"\u003e\u003ca href=\"#“DestroyJavaVM”\" class=\"headerlink\" title=\"“DestroyJavaVM”\"\u003e\u003c/a\u003e“DestroyJavaVM”\u003c/h5\u003e\u003cp\u003e执行 \u003ccode\u003emain()\u003c/code\u003e 的线程在执行完之后调用 JNI 中的 \u003ccode\u003ejni_DestroyJavaVM()\u003c/code\u003e 方法会唤起 \u003ccode\u003eDestroyJavaVM\u003c/code\u003e 线程，处于等待状态，等待其它线程（java 线程和 native 线程）退出时通知它卸载 JVM。\u003c/p\u003e\n\u003cfigure class=\"highlight routeros\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;DestroyJavaVM\u0026#34;\u003c/span\u003e \u003cspan class=\"attribute\"\u003eprio\u003c/span\u003e=5 \u003cspan class=\"attribute\"\u003etid\u003c/span\u003e=0x00007fc6b3001000 \u003cspan class=\"attribute\"\u003enid\u003c/span\u003e=0x1903 waiting on condition [0x0000000000000000]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   java.lang.Thread.State: RUNNABLE\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch5 id=\"“Service-Thread”\"\u003e\u003ca href=\"#“Service-Thread”\" class=\"headerlink\" title=\"“Service Thread”\"\u003e\u003c/a\u003e“Service Thread”\u003c/h5\u003e\u003cp\u003e用于启动服务的线程\u003c/p\u003e\n\u003cfigure class=\"highlight routeros\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;Service Thread\u0026#34;\u003c/span\u003e daemon \u003cspan class=\"attribute\"\u003eprio\u003c/span\u003e=10 \u003cspan class=\"attribute\"\u003etid\u003c/span\u003e=0x00007fbea81b3000 \u003cspan class=\"attribute\"\u003enid\u003c/span\u003e=0x5f2 runnable [0x0000000000000000]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   java.lang.Thread.State: RUNNABLE\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch5 id=\"“CompilerThread”\"\u003e\u003ca href=\"#“CompilerThread”\" class=\"headerlink\" title=\"“CompilerThread”\"\u003e\u003c/a\u003e“CompilerThread”\u003c/h5\u003e\u003cp\u003e用来调用 JITing，实时编译装卸类。通常 JVM 会启动多个线程来处理这部分工作，线程名称后面的数字也会累加，比如 CompilerThread1。\u003c/p\u003e\n\u003cfigure class=\"highlight routeros\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;C2 CompilerThread1\u0026#34;\u003c/span\u003e daemon \u003cspan class=\"attribute\"\u003eprio\u003c/span\u003e=10 \u003cspan class=\"attribute\"\u003etid\u003c/span\u003e=0x00007fbea814b000 \u003cspan class=\"attribute\"\u003enid\u003c/span\u003e=0x5f1 waiting on condition [0x0000000000000000]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   java.lang.Thread.State: RUNNABLE\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;C2 CompilerThread0\u0026#34;\u003c/span\u003e daemon \u003cspan class=\"attribute\"\u003eprio\u003c/span\u003e=10 \u003cspan class=\"attribute\"\u003etid\u003c/span\u003e=0x00007fbea8142000 \u003cspan class=\"attribute\"\u003enid\u003c/span\u003e=0x5f0 waiting on condition [0x0000000000000000]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   java.lang.Thread.State: RUNNABLE\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch5 id=\"“Signal-Dispatcher”\"\u003e\u003ca href=\"#“Signal-Dispatcher”\" class=\"headerlink\" title=\"“Signal Dispatcher”\"\u003e\u003c/a\u003e“Signal Dispatcher”\u003c/h5\u003e\u003cp\u003eAttach Listener 线程的职责是接收外部 jvm 命令，当命令接收成功后，会交给 signal dispather 线程去进行分发到各个不同的模块处理命令，并且返回处理结果。\u003cbr/\u003esignal dispather 线程也是在第一次接收外部 jvm 命令时，进行初始化工作。\u003c/p\u003e\n\u003cfigure class=\"highlight routeros\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;Signal Dispatcher\u0026#34;\u003c/span\u003e daemon \u003cspan class=\"attribute\"\u003eprio\u003c/span\u003e=10 \u003cspan class=\"attribute\"\u003etid\u003c/span\u003e=0x00007fbea81bf800 \u003cspan class=\"attribute\"\u003enid\u003c/span\u003e=0x5ef runnable [0x0000000000000000]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   java.lang.Thread.State: RUNNABLE\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch5 id=\"“Finalizer”\"\u003e\u003ca href=\"#“Finalizer”\" class=\"headerlink\" title=\"“Finalizer”\"\u003e\u003c/a\u003e“Finalizer”\u003c/h5\u003e\u003cp\u003e这个线程也是在 main 线程之后创建的，其优先级为 10，主要用于在垃圾收集前，调用对象的 \u003ccode\u003efinalize()\u003c/code\u003e 方法；关于 Finalizer 线程的几点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e只有当开始一轮垃圾收集时，才会开始调用 finalize()方法；因此并不是所有对象的 finalize()方法都会被执行；\u003c/li\u003e\n\u003cli\u003e该线程也是 daemon 线程，因此如果虚拟机中没有其他非 daemon 线程，不管该线程有没有执行完 finalize()方法，JVM 也会退出；\u003c/li\u003e\n\u003cli\u003eJVM 在垃圾收集时会将失去引用的对象包装成 Finalizer 对象（Reference 的实现），并放入 ReferenceQueue，由 Finalizer 线程来处理；最后将该 Finalizer 对象的引用置为 null，由垃圾收集器来回收；\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eJVM 为什么要单独用一个线程来执行 \u003ccode\u003efinalize()\u003c/code\u003e 方法呢？\u003c/p\u003e\n\u003cp\u003e如果 JVM 的垃圾收集线程自己来做，很有可能由于在 finalize()方法中误操作导致 GC 线程停止或不可控，这对 GC 线程来说是一种灾难。\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;Finalizer\u0026#34;\u003c/span\u003e daemon prio=\u003cspan class=\"number\"\u003e10\u003c/span\u003e tid=\u003cspan class=\"number\"\u003e0\u003c/span\u003ex00007fbea80da000 nid=\u003cspan class=\"number\"\u003e0\u003c/span\u003ex5eb \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e Object\u003cspan class=\"selector-class\"\u003e.wait\u003c/span\u003e() \u003cspan class=\"selector-attr\"\u003e[0x00007fbeac044000]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Thread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.State\u003c/span\u003e: WAITING (on \u003cspan class=\"selector-tag\"\u003eobject\u003c/span\u003e monitor)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    at java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Object\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.wait\u003c/span\u003e(Native Method)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    at java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.ref\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.ReferenceQueue\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.remove\u003c/span\u003e(ReferenceQueue\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e135\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    - locked \u0026lt;\u003cspan class=\"number\"\u003e0\u003c/span\u003ex00000006d173c1a8\u0026gt; (\u003cspan class=\"selector-tag\"\u003ea\u003c/span\u003e java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.ref\u003c/span\u003e.ReferenceQueue\u003cspan class=\"variable\"\u003e$Lock\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    at java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.ref\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.ReferenceQueue\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.remove\u003c/span\u003e(ReferenceQueue\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e151\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    at java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.ref\u003c/span\u003e.Finalizer\u003cspan class=\"variable\"\u003e$FinalizerThread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.run\u003c/span\u003e(Finalizer\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e209\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch5 id=\"“Reference-Handler”\"\u003e\u003ca href=\"#“Reference-Handler”\" class=\"headerlink\" title=\"“Reference Handler”\"\u003e\u003c/a\u003e“Reference Handler”\u003c/h5\u003e\u003cp\u003eJVM 在创建 main 线程后就创建 Reference Handler 线程，其优先级最高，为 10，它主要用于处理引用对象本身（软引用、弱引用、虚引用）的垃圾回收问题 。\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;Reference Handler\u0026#34;\u003c/span\u003e daemon prio=\u003cspan class=\"number\"\u003e10\u003c/span\u003e tid=\u003cspan class=\"number\"\u003e0\u003c/span\u003ex00007fbea80d8000 nid=\u003cspan class=\"number\"\u003e0\u003c/span\u003ex5ea \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e Object\u003cspan class=\"selector-class\"\u003e.wait\u003c/span\u003e() \u003cspan class=\"selector-attr\"\u003e[0x00007fbeac085000]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Thread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.State\u003c/span\u003e: WAITING (on \u003cspan class=\"selector-tag\"\u003eobject\u003c/span\u003e monitor)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    at java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Object\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.wait\u003c/span\u003e(Native Method)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    at java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Object\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.wait\u003c/span\u003e(Object\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e503\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    at java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.ref\u003c/span\u003e.Reference\u003cspan class=\"variable\"\u003e$ReferenceHandler\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.run\u003c/span\u003e(Reference\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e133\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    - locked \u0026lt;\u003cspan class=\"number\"\u003e0\u003c/span\u003ex00000006d173c1f0\u0026gt; (\u003cspan class=\"selector-tag\"\u003ea\u003c/span\u003e java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.ref\u003c/span\u003e.Reference\u003cspan class=\"variable\"\u003e$Lock\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch5 id=\"“VM-Thread”\"\u003e\u003ca href=\"#“VM-Thread”\" class=\"headerlink\" title=\"“VM Thread”\"\u003e\u003c/a\u003e“VM Thread”\u003c/h5\u003e\u003cp\u003eJVM 中线程的母体，根据 HotSpot 源码中关于 vmThread.hpp 里面的注释，它是一个单例的对象（最原始的线程）会产生或触发所有其他的线程，这个单例的 VM 线程是会被其他线程所使用来做一些 VM 操作（如清扫垃圾等）。\u003cbr/\u003e在 VM Thread 的结构体里有一个 VMOperationQueue 列队，所有的 VM 线程操作(vm_operation)都会被保存到这个列队当中，VMThread 本身就是一个线程，它的线程负责执行一个自轮询的 loop 函数(具体可以参考：VMThread.cpp 里面的 void VMThread::loop()) ，该 loop 函数从 VMOperationQueue 列队中按照优先级取出当前需要执行的操作对象(VM_Operation)，并且调用 VM_Operation-\u0026gt;evaluate 函数去执行该操作类型本身的业务逻辑。\u003cbr/\u003eVM 操作类型被定义在 vm_operations.hpp 文件内，列举几个：ThreadStop、ThreadDump、PrintThreads、GenCollectFull、GenCollectFullConcurrent、CMS_Initial_Mark、CMS_Final_Remark….. 有兴趣的同学，可以自己去查看源文件。\u003c/p\u003e\n\u003cfigure class=\"highlight routeros\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;VM Thread\u0026#34;\u003c/span\u003e \u003cspan class=\"attribute\"\u003eprio\u003c/span\u003e=10 \u003cspan class=\"attribute\"\u003etid\u003c/span\u003e=0x00007fbea80d3800 \u003cspan class=\"attribute\"\u003enid\u003c/span\u003e=0x5e9 runnable\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"第四部分：HotSpot-GC-Thread\"\u003e\u003ca href=\"#第四部分：HotSpot-GC-Thread\" class=\"headerlink\" title=\"第四部分：HotSpot GC Thread\"\u003e\u003c/a\u003e第四部分：HotSpot GC Thread\u003c/h4\u003e\u003cp\u003eJVM 中用于进行资源回收的线程，包括以下几种类型的线程：\u003c/p\u003e\n\u003ch5 id=\"“VM-Periodic-Task-Thread”\"\u003e\u003ca href=\"#“VM-Periodic-Task-Thread”\" class=\"headerlink\" title=\"“VM Periodic Task Thread”\"\u003e\u003c/a\u003e“VM Periodic Task Thread”\u003c/h5\u003e\u003cp\u003e该线程是 JVM 周期性任务调度的线程，它由 WatcherThread 创建，是一个单例对象。该线程在 JVM 内使用得比较频繁，比如：定期的内存监控、JVM 运行状况监控。\u003c/p\u003e\n\u003cfigure class=\"highlight routeros\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;VM Periodic Task Thread\u0026#34;\u003c/span\u003e \u003cspan class=\"attribute\"\u003eprio\u003c/span\u003e=10 \u003cspan class=\"attribute\"\u003etid\u003c/span\u003e=0x00007fbea82ae800 \u003cspan class=\"attribute\"\u003enid\u003c/span\u003e=0x5fa waiting on condition\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可以使用 jstat 命令查看 GC 的情况，比如查看某个进程没有存活必要的引用可以使用命令 \u003ccode\u003ejstat -gcutil 250 7\u003c/code\u003e 参数中 pid 是进程 id，后面的 250 和 7 表示每 250 毫秒打印一次，总共打印 7 次。\u003cbr/\u003e这对于防止因为应用代码中直接使用 native 库或者第三方的一些监控工具的内存泄漏有非常大的帮助。\u003c/p\u003e\n\u003ch5 id=\"“GC-task-thread-0-ParallelGC-”\"\u003e\u003ca href=\"#“GC-task-thread-0-ParallelGC-”\" class=\"headerlink\" title=\"“GC task thread#0 (ParallelGC)”\"\u003e\u003c/a\u003e“GC task thread#0 (ParallelGC)”\u003c/h5\u003e\u003cp\u003e垃圾回收线程，该线程会负责进行垃圾回收。通常 JVM 会启动多个线程来处理这个工作，线程名称中#后面的数字也会累加。\u003c/p\u003e\n\u003cfigure class=\"highlight routeros\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;GC task thread#0 (ParallelGC)\u0026#34;\u003c/span\u003e \u003cspan class=\"attribute\"\u003eprio\u003c/span\u003e=5 \u003cspan class=\"attribute\"\u003etid\u003c/span\u003e=0x00007fc6b480d000 \u003cspan class=\"attribute\"\u003enid\u003c/span\u003e=0x2503 runnable\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;GC task thread#1 (ParallelGC)\u0026#34;\u003c/span\u003e \u003cspan class=\"attribute\"\u003eprio\u003c/span\u003e=5 \u003cspan class=\"attribute\"\u003etid\u003c/span\u003e=0x00007fc6b2812000 \u003cspan class=\"attribute\"\u003enid\u003c/span\u003e=0x2703 runnable\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;GC task thread#2 (ParallelGC)\u0026#34;\u003c/span\u003e \u003cspan class=\"attribute\"\u003eprio\u003c/span\u003e=5 \u003cspan class=\"attribute\"\u003etid\u003c/span\u003e=0x00007fc6b2812800 \u003cspan class=\"attribute\"\u003enid\u003c/span\u003e=0x2903 runnable\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;GC task thread#3 (ParallelGC)\u0026#34;\u003c/span\u003e \u003cspan class=\"attribute\"\u003eprio\u003c/span\u003e=5 \u003cspan class=\"attribute\"\u003etid\u003c/span\u003e=0x00007fc6b2813000 \u003cspan class=\"attribute\"\u003enid\u003c/span\u003e=0x2b03 runnable\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果在 JVM 中增加了 \u003ccode\u003e-XX:+UseConcMarkSweepGC\u003c/code\u003e 参数将会启用 CMS （Concurrent Mark-Sweep）GC Thread 方式，以下是该模式下的线程类型：\u003c/p\u003e\n\u003ch5 id=\"“Gang-worker-0-Parallel-GC-Threads-”\"\u003e\u003ca href=\"#“Gang-worker-0-Parallel-GC-Threads-”\" class=\"headerlink\" title=\"“Gang worker#0 (Parallel GC Threads)”\"\u003e\u003c/a\u003e“Gang worker#0 (Parallel GC Threads)”\u003c/h5\u003e\u003cp\u003e原来垃圾回收线程 GC task thread#0 (ParallelGC) 被替换为 Gang worker#0 (Parallel GC Threads)。Gang worker 是 JVM 用于年轻代垃圾回收(minor gc)的线程。\u003c/p\u003e\n\u003cfigure class=\"highlight routeros\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;Gang worker#0 (Parallel GC Threads)\u0026#34;\u003c/span\u003e \u003cspan class=\"attribute\"\u003eprio\u003c/span\u003e=10 \u003cspan class=\"attribute\"\u003etid\u003c/span\u003e=0x00007fbea801b800 \u003cspan class=\"attribute\"\u003enid\u003c/span\u003e=0x5e4 runnable\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;Gang worker#1 (Parallel GC Threads)\u0026#34;\u003c/span\u003e \u003cspan class=\"attribute\"\u003eprio\u003c/span\u003e=10 \u003cspan class=\"attribute\"\u003etid\u003c/span\u003e=0x00007fbea801d800 \u003cspan class=\"attribute\"\u003enid\u003c/span\u003e=0x5e7 runnable\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch5 id=\"“Concurrent-Mark-Sweep-GC-Thread”\"\u003e\u003ca href=\"#“Concurrent-Mark-Sweep-GC-Thread”\" class=\"headerlink\" title=\"“Concurrent Mark-Sweep GC Thread”\"\u003e\u003c/a\u003e“Concurrent Mark-Sweep GC Thread”\u003c/h5\u003e\u003cp\u003e并发标记清除垃圾回收器（就是通常所说的 CMS GC）线程， 该线程主要针对于年老代垃圾回收。\u003c/p\u003e\n\u003cfigure class=\"highlight routeros\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;Concurrent Mark-Sweep GC Thread\u0026#34;\u003c/span\u003e \u003cspan class=\"attribute\"\u003eprio\u003c/span\u003e=10 \u003cspan class=\"attribute\"\u003etid\u003c/span\u003e=0x00007fbea8073800 \u003cspan class=\"attribute\"\u003enid\u003c/span\u003e=0x5e8 runnable\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch5 id=\"“Surrogate-Locker-Thread-Concurrent-GC-”\"\u003e\u003ca href=\"#“Surrogate-Locker-Thread-Concurrent-GC-”\" class=\"headerlink\" title=\"“Surrogate Locker Thread (Concurrent GC)”\"\u003e\u003c/a\u003e“Surrogate Locker Thread (Concurrent GC)”\u003c/h5\u003e\u003cp\u003e此线程主要配合 CMS 垃圾回收器来使用，是一个守护线程，主要负责处理 GC 过程中 Java 层的 Reference（指软引用、弱引用等等）与 jvm 内部层面的对象状态同步。\u003c/p\u003e\n\u003cfigure class=\"highlight routeros\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;Surrogate Locker Thread (Concurrent GC)\u0026#34;\u003c/span\u003e daemon \u003cspan class=\"attribute\"\u003eprio\u003c/span\u003e=10 \u003cspan class=\"attribute\"\u003etid\u003c/span\u003e=0x00007fbea8158800 \u003cspan class=\"attribute\"\u003enid\u003c/span\u003e=0x5ee waiting on condition [0x0000000000000000]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   java.lang.Thread.State: RUNNABLE\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里以 WeakHashMap 为例进行说明，首先是一个关键点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWeakHashMap 和 HashMap 一样，内部有一个 Entry[]数组;\u003c/li\u003e\n\u003cli\u003eWeakHashMap 的 Entry 比较特殊，它的继承体系结构为 Entry-\u0026gt;WeakReference-\u0026gt;Reference;\u003c/li\u003e\n\u003cli\u003eReference 里面有一个全局锁对象：Lock，它也被称为 pending_lock，注意：它是静态对象；\u003c/li\u003e\n\u003cli\u003eReference 里面有一个静态变量：pending；\u003c/li\u003e\n\u003cli\u003eReference 里面有一个静态内部类：ReferenceHandler 的线程，它在 static 块里面被初始化并且启动，启动完成后处于 wait 状态，它在一个 Lock 同步锁模块中等待；\u003c/li\u003e\n\u003cli\u003eWeakHashMap 里面还实例化了一个 ReferenceQueue 列队\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e假设，WeakHashMap 对象里面已经保存了很多对象的引用，JVM 在进行 CMS GC 的时候会创建一个 ConcurrentMarkSweepThread（简称 CMST）线程去进行 GC。ConcurrentMarkSweepThread 线程被创建的同时会创建一个 SurrogateLockerThread（简称 SLT）线程并且启动它，SLT 启动之后，处于等待阶段。\u003cbr/\u003eCMST 开始 GC 时，会发一个消息给 SLT 让它去获取 Java 层 Reference 对象的全局锁：Lock。直到 CMS GC 完毕之后，JVM 会将 WeakHashMap 中所有被回收的对象所属的 WeakReference 容器对象放入到 Reference 的 pending 属性当中（每次 GC 完毕之后，pending 属性基本上都不会为 null 了），然后通知 SLT 释放并且 notify 全局锁:Lock。此时激活了 ReferenceHandler 线程的 run 方法，使其脱离 wait 状态，开始工作了。\u003cbr/\u003eReferenceHandler 这个线程会将 pending 中的所有 WeakReference 对象都移动到它们各自的列队当中，比如当前这个 WeakReference 属于某个 WeakHashMap 对象，那么它就会被放入相应的 ReferenceQueue 列队里面（该列队是链表结构）。 当我们下次从 WeakHashMap 对象里面 get、put 数据或者调用 size 方法的时候，WeakHashMap 就会将 ReferenceQueue 列队中的 WeakReference 依依 poll 出来去和 Entry[]数据做比较，如果发现相同的，则说明这个 Entry 所保存的对象已经被 GC 掉了，那么将 Entry[]内的 Entry 对象剔除掉。\u003c/p\u003e\n\u003ch4 id=\"第五部分：JNI-global-references-count\"\u003e\u003ca href=\"#第五部分：JNI-global-references-count\" class=\"headerlink\" title=\"第五部分：JNI global references count\"\u003e\u003c/a\u003e第五部分：JNI global references count\u003c/h4\u003e\u003cp\u003e这一部分主要回收那些在 native 代码上被引用，但在 java 代码中却没有存活必要的引用，对于防止因为应用代码中直接使用 native 库或第三方的一些监控工具的内存泄漏有非常大的帮助。\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eJNI \u003cspan class=\"keyword\"\u003eglobal\u003c/span\u003e \u003cspan class=\"keyword\"\u003ereferences\u003c/span\u003e: \u003cspan class=\"number\"\u003e830\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e下一篇文章将要讲述一个直接找出 CPU 100% 线程的例子。\u003c/p\u003e\n\u003ch3 id=\"系统线程状态\"\u003e\u003ca href=\"#系统线程状态\" class=\"headerlink\" title=\"系统线程状态\"\u003e\u003c/a\u003e系统线程状态\u003c/h3\u003e\u003cp\u003e系统线程有如下状态：\u003c/p\u003e\n\u003ch4 id=\"deadlock\"\u003e\u003ca href=\"#deadlock\" class=\"headerlink\" title=\"deadlock\"\u003e\u003c/a\u003edeadlock\u003c/h4\u003e\u003cp\u003e死锁线程，一般指多个线程调用期间进入了相互资源占用，导致一直等待无法释放的情况。\u003c/p\u003e\n\u003cp\u003e【示例】deadlock 示例\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;DEADLOCK_TEST-1\u0026#34;\u003c/span\u003e daemon prio=\u003cspan class=\"number\"\u003e6\u003c/span\u003e tid=\u003cspan class=\"number\"\u003e0\u003c/span\u003ex000000000690f800 nid=\u003cspan class=\"number\"\u003e0\u003c/span\u003ex1820 waiting \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e monitor entry \u003cspan class=\"selector-attr\"\u003e[0x000000000805f000]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Thread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.State\u003c/span\u003e: BLOCKED (on \u003cspan class=\"selector-tag\"\u003eobject\u003c/span\u003e monitor)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadDeadLockState\u003cspan class=\"variable\"\u003e$DeadlockThread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.goMonitorDeadlock\u003c/span\u003e(ThreadDeadLockState\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e197\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                - waiting to lock \u0026lt;\u003cspan class=\"number\"\u003e0\u003c/span\u003ex00000007d58f5e60\u0026gt; (\u003cspan class=\"selector-tag\"\u003ea\u003c/span\u003e com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadDeadLockState\u003cspan class=\"variable\"\u003e$Monitor\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadDeadLockState\u003cspan class=\"variable\"\u003e$DeadlockThread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.monitorOurLock\u003c/span\u003e(ThreadDeadLockState\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e182\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                - locked \u0026lt;\u003cspan class=\"number\"\u003e0\u003c/span\u003ex00000007d58f5e48\u0026gt; (\u003cspan class=\"selector-tag\"\u003ea\u003c/span\u003e com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadDeadLockState\u003cspan class=\"variable\"\u003e$Monitor\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadDeadLockState\u003cspan class=\"variable\"\u003e$DeadlockThread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.run\u003c/span\u003e(ThreadDeadLockState\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e135\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   Locked ownable synchronizers:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                - None\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;DEADLOCK_TEST-2\u0026#34;\u003c/span\u003e daemon prio=\u003cspan class=\"number\"\u003e6\u003c/span\u003e tid=\u003cspan class=\"number\"\u003e0\u003c/span\u003ex0000000006858800 nid=\u003cspan class=\"number\"\u003e0\u003c/span\u003ex17b8 waiting \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e monitor entry \u003cspan class=\"selector-attr\"\u003e[0x000000000815f000]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Thread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.State\u003c/span\u003e: BLOCKED (on \u003cspan class=\"selector-tag\"\u003eobject\u003c/span\u003e monitor)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadDeadLockState\u003cspan class=\"variable\"\u003e$DeadlockThread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.goMonitorDeadlock\u003c/span\u003e(ThreadDeadLockState\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e197\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                - waiting to lock \u0026lt;\u003cspan class=\"number\"\u003e0\u003c/span\u003ex00000007d58f5e78\u0026gt; (\u003cspan class=\"selector-tag\"\u003ea\u003c/span\u003e com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadDeadLockState\u003cspan class=\"variable\"\u003e$Monitor\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadDeadLockState\u003cspan class=\"variable\"\u003e$DeadlockThread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.monitorOurLock\u003c/span\u003e(ThreadDeadLockState\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e182\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                - locked \u0026lt;\u003cspan class=\"number\"\u003e0\u003c/span\u003ex00000007d58f5e60\u0026gt; (\u003cspan class=\"selector-tag\"\u003ea\u003c/span\u003e com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadDeadLockState\u003cspan class=\"variable\"\u003e$Monitor\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadDeadLockState\u003cspan class=\"variable\"\u003e$DeadlockThread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.run\u003c/span\u003e(ThreadDeadLockState\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e135\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   Locked ownable synchronizers:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                - None\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;DEADLOCK_TEST-3\u0026#34;\u003c/span\u003e daemon prio=\u003cspan class=\"number\"\u003e6\u003c/span\u003e tid=\u003cspan class=\"number\"\u003e0\u003c/span\u003ex0000000006859000 nid=\u003cspan class=\"number\"\u003e0\u003c/span\u003ex25dc waiting \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e monitor entry \u003cspan class=\"selector-attr\"\u003e[0x000000000825f000]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Thread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.State\u003c/span\u003e: BLOCKED (on \u003cspan class=\"selector-tag\"\u003eobject\u003c/span\u003e monitor)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadDeadLockState\u003cspan class=\"variable\"\u003e$DeadlockThread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.goMonitorDeadlock\u003c/span\u003e(ThreadDeadLockState\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e197\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                - waiting to lock \u0026lt;\u003cspan class=\"number\"\u003e0\u003c/span\u003ex00000007d58f5e48\u0026gt; (\u003cspan class=\"selector-tag\"\u003ea\u003c/span\u003e com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadDeadLockState\u003cspan class=\"variable\"\u003e$Monitor\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadDeadLockState\u003cspan class=\"variable\"\u003e$DeadlockThread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.monitorOurLock\u003c/span\u003e(ThreadDeadLockState\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e182\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                - locked \u0026lt;\u003cspan class=\"number\"\u003e0\u003c/span\u003ex00000007d58f5e78\u0026gt; (\u003cspan class=\"selector-tag\"\u003ea\u003c/span\u003e com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadDeadLockState\u003cspan class=\"variable\"\u003e$Monitor\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadDeadLockState\u003cspan class=\"variable\"\u003e$DeadlockThread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.run\u003c/span\u003e(ThreadDeadLockState\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e135\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   Locked ownable synchronizers:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                - None\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"runnable\"\u003e\u003ca href=\"#runnable\" class=\"headerlink\" title=\"runnable\"\u003e\u003c/a\u003erunnable\u003c/h4\u003e\u003cp\u003e一般指该线程正在执行状态中，该线程占用了资源，正在处理某个操作，如通过 SQL 语句查询数据库、对某个文件进行写入等。\u003c/p\u003e\n\u003ch4 id=\"blocked\"\u003e\u003ca href=\"#blocked\" class=\"headerlink\" title=\"blocked\"\u003e\u003c/a\u003eblocked\u003c/h4\u003e\u003cp\u003e线程正处于阻塞状态，指当前线程执行过程中，所需要的资源长时间等待却一直未能获取到，被容器的线程管理器标识为阻塞状态，可以理解为等待资源超时的线程。\u003c/p\u003e\n\u003cp\u003e【示例】blocked 示例\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;BLOCKED_TEST pool-1-thread-2\u0026#34;\u003c/span\u003e prio=\u003cspan class=\"number\"\u003e6\u003c/span\u003e tid=\u003cspan class=\"number\"\u003e0\u003c/span\u003ex0000000007673800 nid=\u003cspan class=\"number\"\u003e0\u003c/span\u003ex260c waiting \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e monitor entry \u003cspan class=\"selector-attr\"\u003e[0x0000000008abf000]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Thread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.State\u003c/span\u003e: BLOCKED (on \u003cspan class=\"selector-tag\"\u003eobject\u003c/span\u003e monitor)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.ThreadBlockedState\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.monitorLock\u003c/span\u003e(ThreadBlockedState\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e43\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                - waiting to lock \u0026lt;\u003cspan class=\"number\"\u003e0\u003c/span\u003ex0000000780a000b0\u0026gt; (\u003cspan class=\"selector-tag\"\u003ea\u003c/span\u003e com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadBlockedState)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadBlockedState$\u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.run\u003c/span\u003e(ThreadBlockedState\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e26\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at java\u003cspan class=\"selector-class\"\u003e.util\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.concurrent\u003c/span\u003e.ThreadPoolExecutor\u003cspan class=\"variable\"\u003e$Worker\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.runTask\u003c/span\u003e(ThreadPoolExecutor\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e886\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at java\u003cspan class=\"selector-class\"\u003e.util\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.concurrent\u003c/span\u003e.ThreadPoolExecutor\u003cspan class=\"variable\"\u003e$Worker\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.run\u003c/span\u003e(ThreadPoolExecutor\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e908\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Thread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.run\u003c/span\u003e(Thread\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e662\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   Locked ownable synchronizers:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                - \u0026lt;\u003cspan class=\"number\"\u003e0\u003c/span\u003ex0000000780b0c6a0\u0026gt; (\u003cspan class=\"selector-tag\"\u003ea\u003c/span\u003e java\u003cspan class=\"selector-class\"\u003e.util\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.concurrent\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.locks\u003c/span\u003e.ReentrantLock\u003cspan class=\"variable\"\u003e$NonfairSync\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;BLOCKED_TEST pool-1-thread-3\u0026#34;\u003c/span\u003e prio=\u003cspan class=\"number\"\u003e6\u003c/span\u003e tid=\u003cspan class=\"number\"\u003e0\u003c/span\u003ex00000000074f5800 nid=\u003cspan class=\"number\"\u003e0\u003c/span\u003ex1994 waiting \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e monitor entry \u003cspan class=\"selector-attr\"\u003e[0x0000000008bbf000]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Thread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.State\u003c/span\u003e: BLOCKED (on \u003cspan class=\"selector-tag\"\u003eobject\u003c/span\u003e monitor)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.ThreadBlockedState\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.monitorLock\u003c/span\u003e(ThreadBlockedState\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e42\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                - waiting to lock \u0026lt;\u003cspan class=\"number\"\u003e0\u003c/span\u003ex0000000780a000b0\u0026gt; (\u003cspan class=\"selector-tag\"\u003ea\u003c/span\u003e com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadBlockedState)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadBlockedState$\u003cspan class=\"number\"\u003e3\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.run\u003c/span\u003e(ThreadBlockedState\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e34\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at java\u003cspan class=\"selector-class\"\u003e.util\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.concurrent\u003c/span\u003e.ThreadPoolExecutor\u003cspan class=\"variable\"\u003e$Worker\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.runTask\u003c/span\u003e(ThreadPoolExecutor\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e886\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at java\u003cspan class=\"selector-class\"\u003e.util\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.concurrent\u003c/span\u003e.ThreadPoolExecutor\u003cspan class=\"variable\"\u003e$Worker\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.run\u003c/span\u003e(ThreadPoolExecutor\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e908\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                at java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Thread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.run\u003c/span\u003e(Thread\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e662\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   Locked ownable synchronizers:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                - \u0026lt;\u003cspan class=\"number\"\u003e0\u003c/span\u003ex0000000780b0e1b8\u0026gt; (\u003cspan class=\"selector-tag\"\u003ea\u003c/span\u003e java\u003cspan class=\"selector-class\"\u003e.util\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.concurrent\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.locks\u003c/span\u003e.ReentrantLock\u003cspan class=\"variable\"\u003e$NonfairSync\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"waiting-on-condition\"\u003e\u003ca href=\"#waiting-on-condition\" class=\"headerlink\" title=\"waiting on condition\"\u003e\u003c/a\u003ewaiting on condition\u003c/h4\u003e\u003cp\u003e线程正处于等待资源或等待某个条件的发生，具体的原因需要结合下面堆栈信息进行分析。\u003c/p\u003e\n\u003cp\u003e（1）如果堆栈信息明确是应用代码，则证明该线程正在等待资源，一般是大量读取某种资源且该资源采用了资源锁的情况下，线程进入等待状态，等待资源的读取，或者正在等待其他线程的执行等。\u003c/p\u003e\n\u003cp\u003e（2）如果发现有大量的线程都正处于这种状态，并且堆栈信息中得知正等待网络读写，这是因为网络阻塞导致线程无法执行，很有可能是一个网络瓶颈的征兆：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e网络非常繁忙，几乎消耗了所有的带宽，仍然有大量数据等待网络读写；\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e网络可能是空闲的，但由于路由或防火墙等原因，导致包无法正常到达；\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以一定要结合系统的一些性能观察工具进行综合分析，比如 netstat 统计单位时间的发送包的数量，看是否很明显超过了所在网络带宽的限制；观察 CPU 的利用率，看系统态的 CPU 时间是否明显大于用户态的 CPU 时间。这些都指向由于网络带宽所限导致的网络瓶颈。\u003c/p\u003e\n\u003cp\u003e（3）还有一种常见的情况是该线程在 sleep，等待 sleep 的时间到了，将被唤醒。\u003c/p\u003e\n\u003cp\u003e【示例】等待状态样例\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;IoWaitThread\u0026#34;\u003c/span\u003e prio=\u003cspan class=\"number\"\u003e6\u003c/span\u003e tid=\u003cspan class=\"number\"\u003e0\u003c/span\u003ex0000000007334800 nid=\u003cspan class=\"number\"\u003e0\u003c/span\u003ex2b3c waiting on condition \u003cspan class=\"selector-attr\"\u003e[0x000000000893f000]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Thread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.State\u003c/span\u003e: WAITING (parking)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e               at sun\u003cspan class=\"selector-class\"\u003e.misc\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Unsafe\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.park\u003c/span\u003e(Native Method)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e               - parking to wait \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e  \u0026lt;\u003cspan class=\"number\"\u003e0\u003c/span\u003ex00000007d5c45850\u0026gt; (\u003cspan class=\"selector-tag\"\u003ea\u003c/span\u003e java\u003cspan class=\"selector-class\"\u003e.util\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.concurrent\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.locks\u003c/span\u003e.AbstractQueuedSynchronizer\u003cspan class=\"variable\"\u003e$ConditionObject\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e               at java\u003cspan class=\"selector-class\"\u003e.util\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.concurrent\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.locks\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.LockSupport\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.park\u003c/span\u003e(LockSupport\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e156\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e               at java\u003cspan class=\"selector-class\"\u003e.util\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.concurrent\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.locks\u003c/span\u003e.AbstractQueuedSynchronizer\u003cspan class=\"variable\"\u003e$ConditionObject\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.await\u003c/span\u003e(AbstractQueuedSynchronizer\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e1987\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e               at java\u003cspan class=\"selector-class\"\u003e.util\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.concurrent\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.LinkedBlockingDeque\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.takeFirst\u003c/span\u003e(LinkedBlockingDeque\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e440\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e               at java\u003cspan class=\"selector-class\"\u003e.util\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.concurrent\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.LinkedBlockingDeque\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.take\u003c/span\u003e(LinkedBlockingDeque\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e629\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e               at com\u003cspan class=\"selector-class\"\u003e.nbp\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.theplatform\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.threaddump\u003c/span\u003e.ThreadIoWaitState\u003cspan class=\"variable\"\u003e$IoWaitHandler2\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.run\u003c/span\u003e(ThreadIoWaitState\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e89\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e               at java\u003cspan class=\"selector-class\"\u003e.lang\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.Thread\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.run\u003c/span\u003e(Thread\u003cspan class=\"selector-class\"\u003e.java\u003c/span\u003e:\u003cspan class=\"number\"\u003e662\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"waiting-for-monitor-entry-或-in-Object-wait\"\u003e\u003ca href=\"#waiting-for-monitor-entry-或-in-Object-wait\" class=\"headerlink\" title=\"waiting for monitor entry 或 in Object.wait()\"\u003e\u003c/a\u003ewaiting for monitor entry 或 in Object.wait()\u003c/h4\u003e\u003cp\u003eMoniter 是 Java 中用以实现线程之间的互斥与协作的主要手段，它可以看成是对象或者 class 的锁，每个对象都有，也仅有一个 Monitor。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://www.javatang.com/wp-content/uploads/2017/10/java-monitor.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e从上图可以看出，每个 Monitor 在某个时刻只能被一个线程拥有，该线程就是 “Active Thread”，而其他线程都是 “Waiting Thread”，分别在两个队列 “Entry Set”和”Waint Set”里面等待。其中在 “Entry Set” 中等待的线程状态是 \u003ccode\u003ewaiting for monitor entry\u003c/code\u003e，在 “Wait Set” 中等待的线程状态是 \u003ccode\u003ein Object.wait()\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e（1）”Entry Set”里面的线程。\u003c/p\u003e\n\u003cp\u003e我们称被 \u003ccode\u003esynchronized\u003c/code\u003e 保护起来的代码段为临界区，对应的代码如下：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003esynchronized\u003c/span\u003e(obj) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e当一个线程申请进入临界区时，它就进入了 “Entry Set” 队列中，这时候有两种可能性：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e该 Monitor 不被其他线程拥有，”Entry Set”里面也没有其他等待的线程。本线程即成为相应类或者对象的 Monitor 的 Owner，执行临界区里面的代码；此时在 Thread Dump 中显示线程处于 “Runnable” 状态。\u003c/li\u003e\n\u003cli\u003e该 Monitor 被其他线程拥有，本线程在 “Entry Set” 队列中等待。此时在 Thread Dump 中显示线程处于 “waiting for monity entry” 状态。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e临界区的设置是为了保证其内部的代码执行的原子性和完整性，但因为临界区在任何时间只允许线程串行通过，这和我们使用多线程的初衷是相反的。如果在多线程程序中大量使用 synchronized，或者不适当的使用它，会造成大量线程在临界区的入口等待，造成系统的性能大幅下降。如果在 Thread Dump 中发现这个情况，应该审视源码并对其进行改进。\u003c/p\u003e\n\u003cp\u003e（2）”Wait Set”里面的线程\u003c/p\u003e\n\u003cp\u003e当线程获得了 Monitor，进入了临界区之后，如果发现线程继续运行的条件没有满足，它则调用对象（通常是被 synchronized 的对象）的 wait()方法，放弃 Monitor，进入 “Wait Set”队列。只有当别的线程在该对象上调用了 notify()或者 notifyAll()方法，”Wait Set”队列中的线程才得到机会去竞争，但是只有一个线程获得对象的 Monitor，恢复到运行态。”Wait Set”中的线程在 Thread Dump 中显示的状态为 in Object.wait()。通常来说，当 CPU 很忙的时候关注 Runnable 状态的线程，反之则关注 waiting for monitor entry 状态的线程。\u003c/p\u003e\n\u003ch3 id=\"jstack-使用示例\"\u003e\u003ca href=\"#jstack-使用示例\" class=\"headerlink\" title=\"jstack 使用示例\"\u003e\u003c/a\u003ejstack 使用示例\u003c/h3\u003e\u003ch4 id=\"找出某-Java-进程中最耗费-CPU-的-Java-线程\"\u003e\u003ca href=\"#找出某-Java-进程中最耗费-CPU-的-Java-线程\" class=\"headerlink\" title=\"找出某 Java 进程中最耗费 CPU 的 Java 线程\"\u003e\u003c/a\u003e找出某 Java 进程中最耗费 CPU 的 Java 线程\u003c/h4\u003e\u003cp\u003e（1）找出 Java 进程\u003c/p\u003e\n\u003cp\u003e假设应用名称为 myapp：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e$ \u003c/span\u003e\u003cspan class=\"language-bash\"\u003ejps | grep myapp\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29527 myapp.jar\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e得到进程 ID 为 21711\u003c/p\u003e\n\u003cp\u003e（2）找出该进程内最耗费 CPU 的线程，可以使用 \u003ccode\u003eps -Lfp pid\u003c/code\u003e 或者 \u003ccode\u003eps -mp pid -o THREAD, tid, time\u003c/code\u003e 或者 \u003ccode\u003etop -Hp pid\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://static.oschina.net/uploads/space/2014/0128/170402_A57i_111708.png\" alt=\"img\"/\u003e\u003cbr/\u003eTIME 列就是各个 Java 线程耗费的 CPU 时间，CPU 时间最长的是线程 ID 为 21742 的线程，用\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eprintf \u0026#34;%x\\n\u0026#34; 21742\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e得到 21742 的十六进制值为 54ee，下面会用到。\u003c/p\u003e\n\u003cp\u003e（3）使用 jstack 打印线程堆栈信息\u003c/p\u003e\n\u003cp\u003e下一步终于轮到 jstack 上场了，它用来输出进程 21711 的堆栈信息，然后根据线程 ID 的十六进制值 grep，如下：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e$ \u003c/span\u003e\u003cspan class=\"language-bash\"\u003ejstack 21711 | grep 54ee\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#34;PollIntervalRetrySchedulerThread\u0026#34; prio=10 tid=0x00007f950043e000 nid=0x54ee in Object.wait() [0x00007f94c6eda000]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可以看到 CPU 消耗在 \u003ccode\u003ePollIntervalRetrySchedulerThread\u003c/code\u003e 这个类的 \u003ccode\u003eObject.wait()\u003c/code\u003e。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注：上面的例子中，默认只显示了一行信息，但很多时候我们希望查看更详细的调用栈。可以通过指定 \u003ccode\u003e-A \u0026lt;num\u0026gt;\u003c/code\u003e 的方式来显示行数。例如：\u003ccode\u003ejstack -l \u0026lt;pid\u0026gt; | grep \u0026lt;thread-hex-id\u0026gt; -A 10\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e（4）分析代码\u003c/p\u003e\n\u003cp\u003e我找了下我的代码，定位到下面的代码：\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// Idle wait\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egetLog().info(\u003cspan class=\"string\"\u003e\u0026#34;Thread [\u0026#34;\u003c/span\u003e + getName() + \u003cspan class=\"string\"\u003e\u0026#34;] is idle waiting...\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eschedulerThreadState = PollTaskSchedulerThreadState.IdleWaiting;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003elong\u003c/span\u003e \u003cspan class=\"variable\"\u003enow\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e System.currentTimeMillis();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003elong\u003c/span\u003e \u003cspan class=\"variable\"\u003ewaitTime\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e now + getIdleWaitTime();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003elong\u003c/span\u003e \u003cspan class=\"variable\"\u003etimeUntilContinue\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e waitTime - now;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003esynchronized\u003c/span\u003e(sigLock) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e(!halted.get()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \t\tsigLock.wait(timeUntilContinue);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e (InterruptedException ignore) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e它是轮询任务的空闲等待代码，上面的 \u003ccode\u003esigLock.wait(timeUntilContinue)\u003c/code\u003e 就对应了前面的 \u003ccode\u003eObject.wait()\u003c/code\u003e。\u003c/p\u003e\n\u003ch4 id=\"生成-threaddump-文件\"\u003e\u003ca href=\"#生成-threaddump-文件\" class=\"headerlink\" title=\"生成 threaddump 文件\"\u003e\u003c/a\u003e生成 threaddump 文件\u003c/h4\u003e\u003cp\u003e可以使用 \u003ccode\u003ejstack -l \u0026lt;pid\u0026gt; \u0026gt; \u0026lt;file-path\u0026gt;\u003c/code\u003e 命令生成 threaddump 文件\u003c/p\u003e\n\u003cp\u003e【示例】生成进程 ID 为 8841 的 Java 进程的 threaddump 文件。\u003c/p\u003e\n\u003cfigure class=\"highlight apache\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attribute\"\u003ejstack\u003c/span\u003e -l \u003cspan class=\"number\"\u003e8841\u003c/span\u003e \u0026gt; /home/threaddump.txt\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"jinfo\"\u003e\u003ca href=\"#jinfo\" class=\"headerlink\" title=\"jinfo\"\u003e\u003c/a\u003ejinfo\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.oracle.com/en/java/javase/11/tools/jinfo.html\"\u003ejinfo(JVM Configuration info)\u003c/a\u003e，是 Java 配置信息工具\u003c/strong\u003e。jinfo 用于实时查看和调整虚拟机运行参数。如传递给 Java 虚拟机的\u003ccode\u003e-X\u003c/code\u003e（即输出中的 jvm_args）、\u003ccode\u003e-XX\u003c/code\u003e参数（即输出中的 VM Flags），以及可在 Java 层面通过\u003ccode\u003eSystem.getProperty\u003c/code\u003e获取的\u003ccode\u003e-D\u003c/code\u003e参数（即输出中的 System Properties）。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e之前的 \u003ccode\u003ejps -v\u003c/code\u003e 口令只能查看到显示指定的参数，如果想要查看未被显示指定的参数的值就要使用 jinfo 口令。\u003c/p\u003e\n\u003cp\u003ejinfo 命令格式：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ejinfo [option] pid\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eoption\u003c/code\u003e 选项参数：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e-flag\u003c/code\u003e - 输出指定 args 参数的值\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-sysprops\u003c/code\u003e - 输出系统属性，等同于 \u003ccode\u003eSystem.getProperties()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e【示例】jinfo 使用示例\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e$ \u003c/span\u003e\u003cspan class=\"language-bash\"\u003ejinfo -sysprops 29527\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAttaching to process ID 29527, please wait...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eDebugger attached successfully.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eServer compiler detected.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eJVM version is 25.222-b10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"jhat\"\u003e\u003ca href=\"#jhat\" class=\"headerlink\" title=\"jhat\"\u003e\u003c/a\u003ejhat\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003ejhat(JVM Heap Analysis Tool)，是虚拟机堆转储快照分析工具\u003c/strong\u003e。jhat 与 jmap 搭配使用，用来分析 jmap 生成的 dump 文件。jhat 内置了一个微型的 HTTP/HTML 服务器，生成 dump 的分析结果后，可以在浏览器中查看。\u003c/p\u003e\n\u003cp\u003e注意：一般不会直接在服务器上进行分析，因为 jhat 是一个耗时并且耗费硬件资源的过程，一般把服务器生成的 dump 文件，用 jvisualvm 、Eclipse Memory Analyzer、IBM HeapAnalyzer 等工具来分析。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e命令格式：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ejhat [dumpfile]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://book.douban.com/subject/34907497/\"\u003e《深入理解 Java 虚拟机》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100028001\"\u003e《Java 性能调优实战》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://my.oschina.net/feichexia/blog/196575\"\u003eJVM 性能调优监控工具 jps、jstack、jmap、jhat、jstat、hprof 使用详解\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/management/jconsole.html\"\u003ejconsole 官方文档\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.cnblogs.com/kongzhongqijing/articles/3621441.html\"\u003ejconsole 工具使用\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.cnblogs.com/yjd_hycf_space/p/7755633.html\"\u003ejstat 命令查看 jvm 的 GC 情况\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/wanghuiqi2008/article/details/50724676\"\u003e利用内存分析工具（Memory Analyzer Tool，MAT）分析 java 项目内存泄露\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.javatang.com/archives/2017/10/19/33151873.html\"\u003eJVM 故障分析及性能优化系列之一：使用 jstack 定位线程堆栈信息\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-07-30T09:56:33Z",
  "Author": "钝悟 ◾ Dunwu"
}