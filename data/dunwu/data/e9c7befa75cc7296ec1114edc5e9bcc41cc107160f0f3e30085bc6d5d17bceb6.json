{
  "Source": "dunwu",
  "Title": "Spring 注解",
  "Link": "https://dunwu.github.io/blog/pages/b6556f/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Spring-注解\"\u003e\u003ca href=\"#Spring-注解\" class=\"headerlink\" title=\"Spring 注解\"\u003e\u003c/a\u003eSpring 注解\u003c/h1\u003e\u003ch2 id=\"Spring-注解驱动编程发展历程\"\u003e\u003ca href=\"#Spring-注解驱动编程发展历程\" class=\"headerlink\" title=\"Spring 注解驱动编程发展历程\"\u003e\u003c/a\u003eSpring 注解驱动编程发展历程\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e注解驱动启蒙时代：Spring Framework 1.x\u003c/li\u003e\n\u003cli\u003e注解驱动过渡时代：Spring Framework 2.x\u003c/li\u003e\n\u003cli\u003e注解驱动黄金时代：Spring Framework 3.x\u003c/li\u003e\n\u003cli\u003e注解驱动完善时代：Spring Framework 4.x\u003c/li\u003e\n\u003cli\u003e注解驱动当下时代：Spring Framework 5.x\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-核心注解场景分类\"\u003e\u003ca href=\"#Spring-核心注解场景分类\" class=\"headerlink\" title=\"Spring 核心注解场景分类\"\u003e\u003c/a\u003eSpring 核心注解场景分类\u003c/h2\u003e\u003cp\u003eSpring 模式注解\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eSpring 注解\u003c/th\u003e\n\u003cth\u003e场景说明\u003c/th\u003e\n\u003cth\u003e起始版本\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e@Repository\u003c/td\u003e\n\u003ctd\u003e数据仓储模式注解\u003c/td\u003e\n\u003ctd\u003e2.0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e@Component\u003c/td\u003e\n\u003ctd\u003e通用组件模式注解\u003c/td\u003e\n\u003ctd\u003e2.5\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e@Service\u003c/td\u003e\n\u003ctd\u003e服务模式注解\u003c/td\u003e\n\u003ctd\u003e2.5\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e@Controller\u003c/td\u003e\n\u003ctd\u003eWeb 控制器模式注解\u003c/td\u003e\n\u003ctd\u003e2.5\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e@Configuration\u003c/td\u003e\n\u003ctd\u003e配置类模式注解\u003c/td\u003e\n\u003ctd\u003e3.0\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e装配注解\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eSpring 注解\u003c/th\u003e\n\u003cth\u003e场景说明\u003c/th\u003e\n\u003cth\u003e起始版本\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e@ImportResource\u003c/td\u003e\n\u003ctd\u003e替换 XML 元素 \u003ccode\u003e\u0026lt;import\u0026gt;\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e2.5\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e@Import\u003c/td\u003e\n\u003ctd\u003e导入 Configuration 类\u003c/td\u003e\n\u003ctd\u003e2.5\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e@ComponentScan\u003c/td\u003e\n\u003ctd\u003e扫描指定 package 下标注 Spring 模式注解的类\u003c/td\u003e\n\u003ctd\u003e3.1\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e依赖注入注解\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eSpring 注解\u003c/th\u003e\n\u003cth\u003e场景说明\u003c/th\u003e\n\u003cth\u003e起始版本\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e@Autowired\u003c/td\u003e\n\u003ctd\u003eBean 依赖注入，支持多种依赖查找方式\u003c/td\u003e\n\u003ctd\u003e2.5\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e@Qualifier\u003c/td\u003e\n\u003ctd\u003e细粒度的 @Autowired 依赖查找\u003c/td\u003e\n\u003ctd\u003e2.5\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"Spring-注解编程模型\"\u003e\u003ca href=\"#Spring-注解编程模型\" class=\"headerlink\" title=\"Spring 注解编程模型\"\u003e\u003c/a\u003eSpring 注解编程模型\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e元注解（Meta-Annotations）\u003c/li\u003e\n\u003cli\u003eSpring 模式注解（Stereotype Annotations）\u003c/li\u003e\n\u003cli\u003eSpring 组合注解（Composed Annotations）\u003c/li\u003e\n\u003cli\u003eSpring 注解属性别名和覆盖（Attribute Aliases and Overrides）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-元注解（Meta-Annotations）\"\u003e\u003ca href=\"#Spring-元注解（Meta-Annotations）\" class=\"headerlink\" title=\"Spring 元注解（Meta-Annotations）\"\u003e\u003c/a\u003eSpring 元注解（Meta-Annotations）\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003ejava.lang.annotation.Documented\u003c/li\u003e\n\u003cli\u003ejava.lang.annotation.Inherited\u003c/li\u003e\n\u003cli\u003ejava.lang.annotation.Repeatable\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-模式注解（Stereotype-Annotations）\"\u003e\u003ca href=\"#Spring-模式注解（Stereotype-Annotations）\" class=\"headerlink\" title=\"Spring 模式注解（Stereotype Annotations）\"\u003e\u003c/a\u003eSpring 模式注解（Stereotype Annotations）\u003c/h2\u003e\u003cp\u003e理解 @Component “派⽣性”：元标注 @Component 的注解在 XML 元素 \u003ca href=\"context:component-scan\"\u003econtext:component-scan\u003c/a\u003e 或注解 @ComponentScan 扫描中“派生”了 @Component 的特性，并且从 Spring Framework 4.0 开始支持多层次“派⽣性”。\u003c/p\u003e\n\u003cp\u003e举例说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@Repository\u003c/li\u003e\n\u003cli\u003e@Service\u003c/li\u003e\n\u003cli\u003e@Controller\u003c/li\u003e\n\u003cli\u003e@Configuration\u003c/li\u003e\n\u003cli\u003e@SpringBootConfiguration（Spring Boot）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e@Component “派⽣性”原理\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e核心组件 - org.springframework.context.annotation.ClassPathBeanDefinitionScanner\u003c/li\u003e\n\u003cli\u003eorg.springframework.context.annotation.ClassPathScanningCandidateComponentProvider\u003c/li\u003e\n\u003cli\u003e资源处理 - org.springframework.core.io.support.ResourcePatternResolver\u003c/li\u003e\n\u003cli\u003e资源-类元信息\u003c/li\u003e\n\u003cli\u003eorg.springframework.core.type.classreading.MetadataReaderFactory\u003c/li\u003e\n\u003cli\u003e类元信息 - org.springframework.core.type.ClassMetadata\u003c/li\u003e\n\u003cli\u003eASM 实现 - org.springframework.core.type.classreading.ClassMetadataReadingVisitor\u003c/li\u003e\n\u003cli\u003e反射实现 - org.springframework.core.type.StandardAnnotationMetadata\u003c/li\u003e\n\u003cli\u003e注解元信息 - org.springframework.core.type.AnnotationMetadata\u003c/li\u003e\n\u003cli\u003eASM 实现 - org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor\u003c/li\u003e\n\u003cli\u003e反射实现 - org.springframework.core.type.StandardAnnotationMetadata\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-组合注解（Composed-Annotations）\"\u003e\u003ca href=\"#Spring-组合注解（Composed-Annotations）\" class=\"headerlink\" title=\"Spring 组合注解（Composed Annotations）\"\u003e\u003c/a\u003eSpring 组合注解（Composed Annotations）\u003c/h2\u003e\u003cp\u003eSpring 组合注解（Composed Annotations）中的元注允许是 Spring 模式注解（Stereotype Annotation）与其他 Spring 功能性注解的任意组合。\u003c/p\u003e\n\u003ch2 id=\"Spring-注解属性别名（Attribute-Aliases）\"\u003e\u003ca href=\"#Spring-注解属性别名（Attribute-Aliases）\" class=\"headerlink\" title=\"Spring 注解属性别名（Attribute Aliases）\"\u003e\u003c/a\u003eSpring 注解属性别名（Attribute Aliases）\u003c/h2\u003e\u003ch2 id=\"Spring-注解属性覆盖（Attribute-Overrides）\"\u003e\u003ca href=\"#Spring-注解属性覆盖（Attribute-Overrides）\" class=\"headerlink\" title=\"Spring 注解属性覆盖（Attribute Overrides）\"\u003e\u003c/a\u003eSpring 注解属性覆盖（Attribute Overrides）\u003c/h2\u003e\u003ch2 id=\"Spring-Enable-模块驱动\"\u003e\u003ca href=\"#Spring-Enable-模块驱动\" class=\"headerlink\" title=\"Spring @Enable 模块驱动\"\u003e\u003c/a\u003eSpring @Enable 模块驱动\u003c/h2\u003e\u003cp\u003e@Enable 模块驱动\u003c/p\u003e\n\u003cp\u003e@Enable 模块驱动是以 @Enable 为前缀的注解驱动编程模型。所谓“模块”是指具备相同领域的功能组件集合，组合所形成⼀个独⽴的单元。⽐如 Web MVC 模块、AspectJ 代理模块、Caching（缓存）模块、JMX（Java 管理扩展）模块、Async（异步处理）模块等。\u003c/p\u003e\n\u003cp\u003e举例说明\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@EnableWebMvc\u003c/li\u003e\n\u003cli\u003e@EnableTransactionManagement\u003c/li\u003e\n\u003cli\u003e@EnableCaching\u003c/li\u003e\n\u003cli\u003e@EnableMBeanExport\u003c/li\u003e\n\u003cli\u003e@EnableAsync\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e@Enable 模块驱动编程模式\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e驱动注解：@EnableXXX\u003c/li\u003e\n\u003cli\u003e导入注解：@Import 具体实现\u003c/li\u003e\n\u003cli\u003e具体实现\u003c/li\u003e\n\u003cli\u003e基于 Configuration Class\u003c/li\u003e\n\u003cli\u003e基于 ImportSelector 接口实现\u003c/li\u003e\n\u003cli\u003e基于 ImportBeanDefinitionRegistrar 接口实现\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-条件注解\"\u003e\u003ca href=\"#Spring-条件注解\" class=\"headerlink\" title=\"Spring 条件注解\"\u003e\u003c/a\u003eSpring 条件注解\u003c/h2\u003e\u003cp\u003e基于配置条件注解 - @org.springframework.context.annotation.Profile\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e关联对象 - org.springframework.core.env.Environment 中的 Profiles\u003c/li\u003e\n\u003cli\u003e实现变化：从 Spring 4.0 开始，@Profile 基于 @Conditional 实现\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e基于编程条件注解 - @org.springframework.context.annotation.Conditional\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e关联对象 - org.springframework.context.annotation.Condition 具体实现\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e@Conditional 实现原理\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e上下文对象 - org.springframework.context.annotation.ConditionContext\u003c/li\u003e\n\u003cli\u003e条件判断 - org.springframework.context.annotation.ConditionEvaluator\u003c/li\u003e\n\u003cli\u003e配置阶段 - org.springframework.context.annotation.ConfigurationCondition.ConfigurationPhase\u003c/li\u003e\n\u003cli\u003e判断入口\u003cul\u003e\n\u003cli\u003eorg.springframework.context.annotation.ConfigurationClassPostProcessor\u003c/li\u003e\n\u003cli\u003eorg.springframework.context.annotation.ConfigurationClassParser\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans\"\u003eSpring 官方文档之 Core Technologies\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/course/intro/265\"\u003e《小马哥讲 Spring 核心编程思想》\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-12-23T01:08:15Z",
  "Author": "钝悟 ◾ Dunwu"
}