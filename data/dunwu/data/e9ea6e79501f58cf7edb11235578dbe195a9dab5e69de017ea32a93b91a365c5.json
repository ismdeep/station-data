{
  "Source": "dunwu",
  "Title": "Tomcat优化",
  "Link": "https://dunwu.github.io/blog/pages/f9e1e6/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Tomcat-优化\"\u003e\u003ca href=\"#Tomcat-优化\" class=\"headerlink\" title=\"Tomcat 优化\"\u003e\u003c/a\u003eTomcat 优化\u003c/h1\u003e\u003ch2 id=\"Tomcat-启动优化\"\u003e\u003ca href=\"#Tomcat-启动优化\" class=\"headerlink\" title=\"Tomcat 启动优化\"\u003e\u003c/a\u003eTomcat 启动优化\u003c/h2\u003e\u003cp\u003e如果 Tomcat 启动比较慢，可以考虑一些优化点\u003c/p\u003e\n\u003ch3 id=\"清理-Tomcat\"\u003e\u003ca href=\"#清理-Tomcat\" class=\"headerlink\" title=\"清理 Tomcat\"\u003e\u003c/a\u003e清理 Tomcat\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e清理不必要的 Web 应用\u003c/strong\u003e：首先我们要做的是删除掉 webapps 文件夹下不需要的工程，一般是 host-manager、example、doc 等这些默认的工程，可能还有以前添加的但现在用不着的工程，最好把这些全都删除掉。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e清理 XML 配置文件\u003c/strong\u003e：Tomcat 在启动时会解析所有的 XML 配置文件，解析 XML 较为耗时，所以应该尽量保持配置文件的简洁。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e清理 JAR 文件\u003c/strong\u003e：JVM 的类加载器在加载类时，需要查找每一个 JAR 文件，去找到所需要的类。如果删除了不需要的 JAR 文件，查找的速度就会快一些。这里请注意：\u003cstrong\u003eWeb 应用中的 lib 目录下不应该出现 Servlet API 或者 Tomcat 自身的 JAR\u003c/strong\u003e，这些 JAR 由 Tomcat 负责提供。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e清理其他文件\u003c/strong\u003e：及时清理日志，删除 logs 文件夹下不需要的日志文件。同样还有 work 文件夹下的 catalina 文件夹，它其实是 Tomcat 把 JSP 转换为 Class 文件的工作目录。有时候我们也许会遇到修改了代码，重启了 Tomcat，但是仍没效果，这时候便可以删除掉这个文件夹，Tomcat 下次启动的时候会重新生成。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"禁止-Tomcat-TLD-扫描\"\u003e\u003ca href=\"#禁止-Tomcat-TLD-扫描\" class=\"headerlink\" title=\"禁止 Tomcat TLD 扫描\"\u003e\u003c/a\u003e禁止 Tomcat TLD 扫描\u003c/h3\u003e\u003cp\u003eTomcat 为了支持 JSP，在应用启动的时候会扫描 JAR 包里面的 TLD 文件，加载里面定义的标签库。所以在 Tomcat 的启动日志里，你可能会碰到这种提示：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAt least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eTomcat 的意思是，我扫描了你 Web 应用下的 JAR 包，发现 JAR 包里没有 TLD 文件。我建议配置一下 Tomcat 不要去扫描这些 JAR 包，这样可以提高 Tomcat 的启动速度，并节省 JSP 编译时间。\u003c/p\u003e\n\u003cp\u003e如何配置不去扫描这些 JAR 包呢，这里分两种情况：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e如果你的项目没有使用 JSP 作为 Web 页面模板，而是使用 Velocity 之类的模板引擎，你完全可以把 TLD 扫描禁止掉。方法是，找到 Tomcat 的\u003ccode\u003econf/\u003c/code\u003e目录下的\u003ccode\u003econtext.xml\u003c/code\u003e文件，在这个文件里 Context 标签下，加上\u003cstrong\u003eJarScanner\u003c/strong\u003e和\u003cstrong\u003eJarScanFilter\u003c/strong\u003e子标签，像下面这样。\u003c/p\u003e\n\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eContext\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eJarScanner\u003c/span\u003e \u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eJarScanFilter\u003c/span\u003e \u003cspan class=\"attr\"\u003edefaultTldScan\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003edefaultpluggabilityScan\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   \u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eJarScanner\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eContext\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e如果你的项目使用了 JSP 作为 Web 页面模块，意味着 TLD 扫描无法避免，但是我们可以通过配置来告诉 Tomcat，只扫描那些包含 TLD 文件的 JAR 包。方法是，找到 Tomcat 的\u003ccode\u003econf/\u003c/code\u003e目录下的\u003ccode\u003ecatalina.properties\u003c/code\u003e文件，在这个文件里的 jarsToSkip 配置项中，加上你的 JAR 包。\u003c/p\u003e\n\u003cfigure class=\"highlight stylus\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003etomcat\u003cspan class=\"selector-class\"\u003e.util\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.scan\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.StandardJarScanFilter\u003c/span\u003e.jarsToSkip=xxx.jar\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"关闭-WebSocket-支持\"\u003e\u003ca href=\"#关闭-WebSocket-支持\" class=\"headerlink\" title=\"关闭 WebSocket 支持\"\u003e\u003c/a\u003e关闭 WebSocket 支持\u003c/h3\u003e\u003cp\u003eTomcat 会扫描 WebSocket 注解的 API 实现，比如 \u003ccode\u003e@ServerEndpoint\u003c/code\u003e 注解的类。如果不需要使用 WebSockets 就可以关闭它。具体方法是，找到 Tomcat 的 \u003ccode\u003econf/\u003c/code\u003e 目录下的 \u003ccode\u003econtext.xml\u003c/code\u003e 文件，给 \u003ccode\u003eContext\u003c/code\u003e 标签加一个 \u003cstrong\u003e\u003ccode\u003econtainerSciFilter\u003c/code\u003e\u003c/strong\u003e 的属性：\u003c/p\u003e\n\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eContext\u003c/span\u003e \u003cspan class=\"attr\"\u003econtainerSciFilter\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;org.apache.tomcat.websocket.server.WsSci\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eContext\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e更进一步，如果你不需要 WebSockets 这个功能，你可以把 Tomcat \u003ccode\u003elib\u003c/code\u003e 目录下的 \u003ccode\u003ewebsocket-api.jar\u003c/code\u003e 和 \u003ccode\u003etomcat-websocket.jar\u003c/code\u003e 这两个 JAR 文件删除掉，进一步提高性能。\u003c/p\u003e\n\u003ch3 id=\"关闭-JSP-支持\"\u003e\u003ca href=\"#关闭-JSP-支持\" class=\"headerlink\" title=\"关闭 JSP 支持\"\u003e\u003c/a\u003e关闭 JSP 支持\u003c/h3\u003e\u003cp\u003e如果不需要使用 JSP，可以关闭 JSP 功能：\u003c/p\u003e\n\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eContext\u003c/span\u003e \u003cspan class=\"attr\"\u003econtainerSciFilter\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;org.apache.jasper.servlet.JasperInitializer\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eContext\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果要同时关闭 WebSocket 和 Jsp，可以这样配置：\u003c/p\u003e\n\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eContext\u003c/span\u003e \u003cspan class=\"attr\"\u003econtainerSciFilter\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;org.apache.tomcat.websocket.server.WsSci | org.apache.jasper.servlet.JasperInitializer\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eContext\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"禁止扫描-Servlet-注解\"\u003e\u003ca href=\"#禁止扫描-Servlet-注解\" class=\"headerlink\" title=\"禁止扫描 Servlet 注解\"\u003e\u003c/a\u003e禁止扫描 Servlet 注解\u003c/h3\u003e\u003cp\u003eServlet 3.0 引入了注解 Servlet，Tomcat 为了支持这个特性，会在 Web 应用启动时扫描你的类文件，因此如果你没有使用 Servlet 注解这个功能，可以告诉 Tomcat 不要去扫描 Servlet 注解。具体配置方法是，在你的 Web 应用的\u003ccode\u003eweb.xml\u003c/code\u003e文件中，设置\u003ccode\u003e\u0026lt;web-app\u0026gt;\u003c/code\u003e元素的属性\u003ccode\u003emetadata-complete=\u0026#34;true\u0026#34;\u003c/code\u003e，像下面这样。\u003c/p\u003e\n\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eweb-app\u003c/span\u003e \u003cspan class=\"attr\"\u003emetadata-complete\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eweb-app\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003emetadata-complete\u003c/code\u003e 的意思是，\u003ccode\u003eweb.xml\u003c/code\u003e 里配置的 Servlet 是完整的，不需要再去库类中找 Servlet 的定义。\u003c/p\u003e\n\u003ch3 id=\"配置-Web-Fragment-扫描\"\u003e\u003ca href=\"#配置-Web-Fragment-扫描\" class=\"headerlink\" title=\"配置 Web-Fragment 扫描\"\u003e\u003c/a\u003e配置 Web-Fragment 扫描\u003c/h3\u003e\u003cp\u003eServlet 3.0 还引入了“Web 模块部署描述符片段”的 \u003ccode\u003eweb-fragment.xml\u003c/code\u003e，这是一个部署描述文件，可以完成 \u003ccode\u003eweb.xml\u003c/code\u003e 的配置功能。而这个 \u003ccode\u003eweb-fragment.xml\u003c/code\u003e 文件必须存放在 JAR 文件的 \u003ccode\u003eMETA-INF\u003c/code\u003e 目录下，而 JAR 包通常放在 \u003ccode\u003eWEB-INF/lib\u003c/code\u003e 目录下，因此 Tomcat 需要对 JAR 文件进行扫描才能支持这个功能。\u003c/p\u003e\n\u003cp\u003e可以通过配置 \u003ccode\u003eweb.xml\u003c/code\u003e 里面的 \u003ccode\u003e\u0026lt;absolute-ordering\u0026gt;\u003c/code\u003e 元素直接指定了哪些 JAR 包需要扫描 \u003ccode\u003eweb fragment\u003c/code\u003e，如果 \u003ccode\u003e\u0026lt;absolute-ordering/\u0026gt;\u003c/code\u003e 元素是空的， 则表示不需要扫描，像下面这样。\u003c/p\u003e\n\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eweb-app\u003c/span\u003e \u003cspan class=\"attr\"\u003emetadata-complete\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eabsolute-ordering\u003c/span\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eweb-app\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"随机数熵源优化\"\u003e\u003ca href=\"#随机数熵源优化\" class=\"headerlink\" title=\"随机数熵源优化\"\u003e\u003c/a\u003e随机数熵源优化\u003c/h3\u003e\u003cp\u003eTomcat 7 以上的版本依赖 Java 的 SecureRandom 类来生成随机数，比如 Session ID。而 JVM 默认使用阻塞式熵源（\u003ccode\u003e/dev/random\u003c/code\u003e）， 在某些情况下就会导致 Tomcat 启动变慢。当阻塞时间较长时， 你会看到这样一条警告日志：\u003c/p\u003e\n\u003cfigure class=\"highlight smali\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026lt;DATE\u0026gt; org.apache.catalina.util.SessionIdGenerator createSecureRandom\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eINFO: Creation of SecureRandom\u003cspan class=\"built_in\"\u003e instance \u003c/span\u003efor session ID generation using [SHA1PRNG] took [8152] milliseconds.\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e解决方案是通过设置，让 JVM 使用非阻塞式的熵源。\u003c/p\u003e\n\u003cp\u003e我们可以设置 JVM 的参数：\u003c/p\u003e\n\u003cfigure class=\"highlight gradle\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e-Djava.security.egd=\u003cspan class=\"keyword\"\u003efile\u003c/span\u003e:\u003cspan class=\"regexp\"\u003e/dev/\u003c/span\u003e./urandom\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e或者是设置 \u003ccode\u003ejava.security\u003c/code\u003e 文件，位于 \u003ccode\u003e$JAVA_HOME/jre/lib/security\u003c/code\u003e 目录之下： \u003ccode\u003esecurerandom.source=file:/dev/./urandom\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e这里请你注意，\u003ccode\u003e/dev/./urandom\u003c/code\u003e 中间有个 \u003ccode\u003e./\u003c/code\u003e 的原因是 Oracle JRE 中的 Bug，Java 8 里面的 SecureRandom 类已经修正这个 Bug。 阻塞式的熵源（\u003ccode\u003e/dev/random\u003c/code\u003e）安全性较高， 非阻塞式的熵源（\u003ccode\u003e/dev/./urandom\u003c/code\u003e）安全性会低一些，因为如果你对随机数的要求比较高， 可以考虑使用硬件方式生成熵源。\u003c/p\u003e\n\u003ch3 id=\"并行启动多个-Web-应用\"\u003e\u003ca href=\"#并行启动多个-Web-应用\" class=\"headerlink\" title=\"并行启动多个 Web 应用\"\u003e\u003c/a\u003e并行启动多个 Web 应用\u003c/h3\u003e\u003cp\u003eTomcat 启动的时候，默认情况下 Web 应用都是一个一个启动的，等所有 Web 应用全部启动完成，Tomcat 才算启动完毕。如果在一个 Tomcat 下有多个 Web 应用，为了优化启动速度，你可以配置多个应用程序并行启动，可以通过修改 \u003ccode\u003eserver.xml\u003c/code\u003e 中 Host 元素的 \u003ccode\u003estartStopThreads\u003c/code\u003e 属性来完成。\u003ccode\u003estartStopThreads\u003c/code\u003e 的值表示你想用多少个线程来启动你的 Web 应用，如果设成 0 表示你要并行启动 Web 应用，像下面这样的配置。\u003c/p\u003e\n\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eEngine\u003c/span\u003e \u003cspan class=\"attr\"\u003estartStopThreads\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eHost\u003c/span\u003e \u003cspan class=\"attr\"\u003estartStopThreads\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eHost\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eEngine\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e需要注意的是，Engine 元素里也配置了这个参数，这意味着如果你的 Tomcat 配置了多个 Host（虚拟主机），Tomcat 会以并行的方式启动多个 Host。\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e官方\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://tomcat.apache.org/\"\u003eTomcat 官方网站\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://wiki.apache.org/tomcat/FrontPage\"\u003eTomcat Wiki\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://tomee.apache.org/\"\u003eTomee 官方网站\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e教程\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100027701\"\u003e深入拆解 Tomcat \u0026amp; Jetty\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-02-17T14:34:30Z",
  "Author": "钝悟 ◾ Dunwu"
}